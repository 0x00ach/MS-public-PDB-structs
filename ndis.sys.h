struct BINARY_DATA;
struct CO_ADDRESS_FAMILY;
struct CO_SAP;
struct DOT11_ASSOCIATION_INFO_LIST;
struct DOT11_ASSOCIATION_PARAMS;
struct DOT11_AUTH_ALGORITHM_LIST;
struct DOT11_AUTH_CIPHER_PAIR;
struct DOT11_AUTH_CIPHER_PAIR_LIST;
struct DOT11_BSSID_LIST;
struct DOT11_BYTE_ARRAY;
struct DOT11_CIPHER_ALGORITHM_LIST;
struct DOT11_CIPHER_DEFAULT_KEY_VALUE;
struct DOT11_COUNTRY_OR_REGION_STRING_LIST;
struct DOT11_DATA_RATE_MAPPING_ENTRY;
struct DOT11_ERP_PHY_ATTRIBUTES;
struct DOT11_EXTSTA_ATTRIBUTES;
struct DOT11_EXTSTA_CAPABILITY;
struct DOT11_HRDSSS_PHY_ATTRIBUTES;
struct DOT11_IBSS_PARAMS;
struct DOT11_MAC_ADDRESS_LIST;
struct DOT11_MAC_FRAME_STATISTICS;
struct DOT11_OFDM_PHY_ATTRIBUTES;
struct DOT11_PHY_ATTRIBUTES;
struct DOT11_PHY_FRAME_STATISTICS;
struct DOT11_PHY_ID_LIST;
struct DOT11_PMKID_ENTRY;
struct DOT11_PMKID_LIST;
struct DOT11_PORT_STATE_NOTIFICATION;
struct DOT11_PRIVACY_EXEMPTION;
struct DOT11_PRIVACY_EXEMPTION_LIST;
struct DOT11_QOS_PARAMS;
struct DOT11_SSID_LIST;
struct DOT11_STATISTICS;
struct DOT11_VWIFI_ATTRIBUTES;
struct FEATURE_ERROR;
struct FEATURE_LOGGED_TRAITS;
struct FEATURE_STATE_CHANGE_SUBSCRIPTION__;
struct FILTERDBS;
struct KALLOCATION_TAG<1147946562,1>;
struct KALLOCATION_TAG<1148473410,1>;
struct KALLOCATION_TAG<1282164290,1>;
struct KALLOCATION_TAG<1282691138,1>;
struct KALLOCATION_TAG<1396859982,1>;
struct KALLOCATION_TAG<1920090443,1>;
struct KALLOCATION_TAG<1920226123,512>;
struct KALLOCATION_TAG<1935819854,1>;
struct KALLOCATOR<1147946562,1>;
struct KALLOCATOR<1148473410,1>;
struct KALLOCATOR<1282164290,1>;
struct KALLOCATOR<1282691138,1>;
struct KALLOCATOR<1396859982,1>;
struct KALLOCATOR<1920090443,1>;
struct KALLOCATOR<1920226123,512>;
struct KALLOCATOR<1935819854,1>;
struct KDefaultRegion;
struct KIrqlRegion;
struct KSALLOCATOR_FRAMING;
struct KSALLOCATOR_FRAMING_EX;
struct KSATTRIBUTE;
struct KSATTRIBUTE_LIST;
struct KSAUTOMATION_TABLE_;
struct KSBUFFER_ITEM;
struct KSCOMPONENTID;
struct KSDPC_ITEM;
struct KSEVENTDATA;
struct KSEVENT_ITEM;
struct KSEVENT_SET;
struct KSFASTMETHOD_ITEM;
struct KSFASTPROPERTY_ITEM;
struct KSIDENTIFIER;
struct KSMETHOD_ITEM;
struct KSMETHOD_SET;
struct KSMULTIPLE_ITEM;
struct KSPIN_DESCRIPTOR;
struct KSPRIORITY;
struct KSPROPERTY_ITEM;
struct KSPROPERTY_MEMBERSHEADER;
struct KSPROPERTY_MEMBERSLIST;
struct KSPROPERTY_SET;
struct KSPROPERTY_VALUES;
struct KSP_PIN;
struct KSRESOLUTION;
struct KSSTREAM_HEADER;
struct KSTIME;
struct KSTOPOLOGY_CONNECTION;
struct KS_COMPRESSION;
struct KS_FRAMING_ITEM;
struct KS_FRAMING_RANGE;
struct KS_FRAMING_RANGE_WEIGHTED;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct MSIX_TABLE_POINTER;
struct NDISWATCHDOG__;
struct NDIS_ADDDEVICE_PARAMETERS;
struct NDIS_BIND_DRIVER_BASE;
struct NDIS_BIND_FILTER_DRIVER;
struct NDIS_BIND_FILTER_LINK;
struct NDIS_BIND_LINK_BASE;
struct NDIS_BIND_PROTOCOL_DRIVER;
struct NDIS_BIND_PROTOCOL_LINK;
struct NDIS_EVENT_LOG_HANDLE__;
struct NDIS_MEMORYDUMP_HANDLE__;
struct NDIS_MINIPORT_ADAPTER_HANDLE__;
struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__;
struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__;
struct NDIS_NBL_TRACKER_HANDLE__;
struct NDIS_PCW_CONTEXT;
struct NDIS_PD_BM_DOMAIN_HANDLE__;
struct NDIS_PD_BM_DOMAIN_MEMBER_HANDLE__;
struct NDIS_PD_COUNTER_HANDLE__;
struct NDIS_PD_EXT_CLIENT_CONTEXT__;
struct NDIS_PD_EXT_PROVIDER_CONTEXT__;
struct NDIS_PD_FILTER_HANDLE__;
struct NDIS_PD_PROVIDER_HANDLE__;
struct NDIS_REFCOUNT_HANDLE__;
struct NDIS_RESTART_INFORMATION;
struct NDIS_WDF_CX_DRIVER_CONTEXT__;
struct NDK_VERSION;
struct NONPAGED_OBJECT<1920226123>;
struct Ndis::BindEngine;
struct Ndis::BindStack;
struct NdisDebugBlock<1147946562>;
struct NdisDebugBlock<1148473410>;
struct NdisDebugBlock<1230455886>;
struct NdisDebugBlock<1282164290>;
struct NdisDebugBlock<1282691138>;
struct NdisDebugBlock<1396859982>;
struct NdisDebugBlock<1920090443>;
struct NdisDebugBlock<1920226123>;
struct NdisDebugBlock<1935819854>;
struct PAGED_OBJECT<1147946562>;
struct PAGED_OBJECT<1148473410>;
struct PAGED_OBJECT<1282164290>;
struct PAGED_OBJECT<1282691138>;
struct PAGED_OBJECT<1396859982>;
struct PAGED_OBJECT<1920090443>;
struct PAGED_OBJECT<1935819854>;
struct PCI_MSIX_CAPABILITY;
struct PCI_MSI_CAPABILITY;
struct PCI_MSI_CAPABILITY::_PCI_MSI_MESSAGE_CONTROL;
struct PNDIS_PER_PROCESSOR_SLOT__;
struct RECORDER_LOG__;
struct Rtl::KString;
struct SCOPE_ID;
struct WORKITEM_WITH_IRP;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
struct _ASSEMBLY_STORAGE_MAP;
struct _AUX_ACCESS_DATA;
struct _BSSID_INFO;
struct _CLIENT_ID;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_RESOURCE_LIST;
struct _COMPRESSED_DATA_INFO;
struct _CONTEXT;
struct _CO_ADDRESS;
struct _CO_ADDRESS_LIST;
struct _CO_CALL_MANAGER_PARAMETERS;
struct _CO_CALL_PARAMETERS;
struct _CO_MEDIA_PARAMETERS;
struct _CO_PVC;
struct _CO_SPECIFIC_PARAMETERS;
struct _CURDIR;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVICE_RESET_INTERFACE_STANDARD;
struct _DEVOBJ_EXTENSION;
struct _DEVPROPCOMPKEY;
struct _DEVPROPKEY;
struct _DISPATCHER_HEADER;
struct _DMA_ADAPTER;
struct _DMA_ADAPTER_INFO;
struct _DMA_ADAPTER_INFO_V1;
struct _DMA_OPERATIONS;
struct _DMA_TRANSFER_INFO;
struct _DMA_TRANSFER_INFO_V1;
struct _DMA_TRANSFER_INFO_V2;
struct _DOT11_ADDITIONAL_IE;
struct _DOT11_ASSOCIATION_INFO_EX;
struct _DOT11_AVAILABLE_CHANNEL_LIST;
struct _DOT11_AVAILABLE_FREQUENCY_LIST;
struct _DOT11_DISASSOCIATE_PEER_REQUEST;
struct _DOT11_EXTAP_ATTRIBUTES;
struct _DOT11_INCOMING_ASSOC_DECISION;
struct _DOT11_PEER_INFO;
struct _DOT11_PEER_INFO_LIST;
struct _DOT11_PEER_STATISTICS;
struct _DOT11_RSN_REKEY_PARAMETERS;
struct _DOT11_SSID;
struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2;
struct _DOT11_VWIFI_COMBINATION;
struct _DOT11_WFD_ATTRIBUTES;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _ECP_LIST;
struct _EJOB;
struct _EPROCESS;
struct _ERESOURCE;
struct _ETHREAD;
struct _ETH_MULTICAST_WRAPPER;
struct _ETW_BUFFER_CONTEXT;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EVENT_HEADER;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
struct _EVENT_RECORD;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EXT_DELETE_PARAMETERS;
struct _EXT_SET_PARAMETERS_V0;
struct _EX_PUSH_LOCK;
struct _EX_RUNDOWN_REF;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FILE_BASIC_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_STANDARD_INFORMATION;
struct _FILTER_PAUSE_RESTART_CONTEXT;
struct _FLS_CALLBACK_INFO;
struct _GDI_TEB_BATCH;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERIC_MAPPING;
struct _GEN_GET_NETCARD_TIME;
struct _GEN_GET_TIME_CAPS;
struct _GROUP_AFFINITY;
struct _GUID;
struct _IF_COUNTED_STRING_LH;
struct _IF_PHYSICAL_ADDRESS_LH;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_OPTIONAL_HEADER64;
struct _INITIAL_PRIVILEGE_SET;
struct _INTERFACE;
struct _IO_COMPLETION_CONTEXT;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_INTERRUPT_MESSAGE_INFO;
struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY;
struct _IO_PRIORITY_INFO;
struct _IO_REMOVE_LOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_TIMER;
struct _IPSEC_OFFLOAD_V2_ADD_SA;
struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO;
struct _IPSEC_OFFLOAD_V2_DELETE_SA;
struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION;
struct _IPSEC_OFFLOAD_V2_UPDATE_SA;
struct _IPV4_ARP_PARAMETERS;
struct _IPV4_HEADER;
struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IPV6_FRAGMENT_HEADER;
struct _IPV6_NS_PARAMETERS;
struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IP_OFFLOAD_STATS;
struct _IRP;
struct _KAPC;
struct _KBUGCHECK_CALLBACK_RECORD;
struct _KDESCRIPTOR;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KEVENT;
struct _KFLOATING_SAVE;
struct _KINTERRUPT;
struct _KMUTANT;
struct _KNODE;
struct _KPCR;
struct _KPRCB;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KSALLOCATOR_DISPATCH;
struct _KSCLOCK_DISPATCH;
struct _KSDEVICE;
struct _KSDEVICE_DESCRIPTOR;
struct _KSDEVICE_DISPATCH;
struct _KSEMAPHORE;
struct _KSEVENT_ENTRY;
struct _KSFILTER;
struct _KSFILTERFACTORY;
struct _KSFILTER_DESCRIPTOR;
struct _KSFILTER_DISPATCH;
struct _KSGATE;
struct _KSMAPPING;
struct _KSNODE_DESCRIPTOR;
struct _KSPECIAL_REGISTERS;
struct _KSPIN;
struct _KSPIN_DESCRIPTOR_EX;
struct _KSPIN_DISPATCH;
struct _KSPIN_LOCK_QUEUE;
struct _KSPROCESSPIN;
struct _KSPROCESSPIN_INDEXENTRY;
struct _KSSTREAM_POINTER;
struct _KSSTREAM_POINTER_OFFSET;
struct _KSYSTEM_TIME;
struct _KTHREAD;
struct _KTIMER;
struct _KTSS64;
struct _KUSER_SHARED_DATA;
struct _LEAP_SECOND_DATA;
struct _LIST_ENTRY;
struct _LOCK_STATE;
struct _LOCK_STATE_EX;
struct _LOOKASIDE_LIST_EX;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _M128A;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MAP_REGISTER_ENTRY;
struct _MCGEN_TRACE_CONTEXT;
struct _MDL;
struct _MEDIA_SPECIFIC_INFORMATION;
struct _METHOD;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NBL_COUNTED_QUEUE;
struct _NBL_QUEUE;
struct _NDIS40_PROTOCOL_CHARACTERISTICS;
struct _NDIS50_MINIPORT_CHARACTERISTICS;
struct _NDIS50_PROTOCOL_CHARACTERISTICS;
struct _NDIS51_MINIPORT_CHARACTERISTICS;
struct _NDIS_802_11_AI_REQFI;
struct _NDIS_802_11_AI_RESFI;
struct _NDIS_802_11_ASSOCIATION_INFORMATION;
struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION;
struct _NDIS_802_11_AUTHENTICATION_EVENT;
struct _NDIS_802_11_AUTHENTICATION_REQUEST;
struct _NDIS_802_11_BSSID_LIST;
struct _NDIS_802_11_BSSID_LIST_EX;
struct _NDIS_802_11_CAPABILITY;
struct _NDIS_802_11_CONFIGURATION;
struct _NDIS_802_11_CONFIGURATION_FH;
struct _NDIS_802_11_FIXED_IEs;
struct _NDIS_802_11_KEY;
struct _NDIS_802_11_NETWORK_TYPE_LIST;
struct _NDIS_802_11_NON_BCAST_SSID_LIST;
struct _NDIS_802_11_PMKID;
struct _NDIS_802_11_PMKID_CANDIDATE_LIST;
struct _NDIS_802_11_REMOVE_KEY;
struct _NDIS_802_11_SSID;
struct _NDIS_802_11_STATISTICS;
struct _NDIS_802_11_STATUS_INDICATION;
struct _NDIS_802_11_TEST;
struct _NDIS_802_11_VARIABLE_IEs;
struct _NDIS_802_11_WEP;
struct _NDIS_AF_LIST;
struct _NDIS_AOAC_COMPONENT_REF_TIME;
struct _NDIS_AOAC_WAKE_FLAGS;
struct _NDIS_BIND_PARAMETERS;
struct _NDIS_BIND_PATHS;
struct _NDIS_CALL_MANAGER_CHARACTERISTICS;
struct _NDIS_CLIENT_CHARACTERISTICS;
struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS;
struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS;
struct _NDIS_COMMON_OPEN_BLOCK;
struct _NDIS_CONFIGURATION_OBJECT;
struct _NDIS_CONFIGURATION_PARAMETER;
struct _NDIS_CONNECTION_INFO;
struct _NDIS_CO_AF_BLOCK;
struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS;
struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS;
struct _NDIS_CO_PARTY_BLOCK;
struct _NDIS_CO_SAP_BLOCK;
struct _NDIS_CO_VC_BLOCK;
struct _NDIS_CO_VC_PTR_BLOCK;
struct _NDIS_D0_SIGNAL_WORK_ITEM;
struct _NDIS_DEVICE_OBJECT_ATTRIBUTES;
struct _NDIS_DMA_BLOCK;
struct _NDIS_DMA_DESCRIPTION;
struct _NDIS_DPC_WORK_ITEM;
struct _NDIS_DRIVER_OPTIONAL_HANDLERS;
struct _NDIS_DRIVER_WRAPPER_HANDLE;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO;
struct _NDIS_ENCAPSULATION_FORMAT;
struct _NDIS_ENTRY_HEADER;
struct _NDIS_ENUM_FILTERS;
struct _NDIS_EVENT;
struct _NDIS_EVENT_LOG;
struct _NDIS_EVENT_LOG_ENTRY;
struct _NDIS_FILTER_ATTACH_PARAMETERS;
struct _NDIS_FILTER_ATTRIBUTES;
struct _NDIS_FILTER_BLOCK;
struct _NDIS_FILTER_DRIVER_BLOCK;
struct _NDIS_FILTER_DRIVER_CHARACTERISTICS;
struct _NDIS_FILTER_INTERFACE;
struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS;
struct _NDIS_FILTER_PAUSE_PARAMETERS;
struct _NDIS_FILTER_RESTART_PARAMETERS;
struct _NDIS_FILTER_TASK_OFFLOAD;
struct _NDIS_FRAME_TYPE_AND_OPEN;
struct _NDIS_FRAME_TYPE_RECORD;
struct _NDIS_GENERIC_OBJECT;
struct _NDIS_GFP_ETHERNET_HEADER_FIELDS;
struct _NDIS_GFP_EXACT_MATCH_PROFILE;
struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH;
struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE;
struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH;
struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE;
struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH;
struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH;
struct _NDIS_GFP_WILDCARD_MATCH_PROFILE;
struct _NDIS_GFT_BYTE_COUNTER_VALUE;
struct _NDIS_GFT_COUNTER_INFO;
struct _NDIS_GFT_COUNTER_INFO_ARRAY;
struct _NDIS_GFT_COUNTER_PARAMETERS;
struct _NDIS_GFT_COUNTER_VALUE;
struct _NDIS_GFT_COUNTER_VALUE_ARRAY;
struct _NDIS_GFT_CUSTOM_ACTION;
struct _NDIS_GFT_CUSTOM_ACTION_PROFILE;
struct _NDIS_GFT_DELETE_PROFILE_PARAMETERS;
struct _NDIS_GFT_DELETE_TABLE_PARAMETERS;
struct _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY;
struct _NDIS_GFT_FLOW_ENTRY_ARRAY;
struct _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER;
struct _NDIS_GFT_FLOW_ENTRY_ID_ARRAY;
struct _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY;
struct _NDIS_GFT_FREE_COUNTER_PARAMETERS;
struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION;
struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE;
struct _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE;
struct _NDIS_GFT_OFFLOAD_CAPABILITIES;
struct _NDIS_GFT_OFFLOAD_PARAMETERS;
struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE;
struct _NDIS_GFT_PACKET_COUNTER_VALUE;
struct _NDIS_GFT_PROFILE_INFO;
struct _NDIS_GFT_PROFILE_INFO_ARRAY;
struct _NDIS_GFT_STATISTICS;
struct _NDIS_GFT_TABLE_INFO;
struct _NDIS_GFT_TABLE_INFO_ARRAY;
struct _NDIS_GFT_TABLE_PARAMETERS;
struct _NDIS_GFT_VPORT_PARAMETERS;
struct _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY;
struct _NDIS_GLOBAL_TRIAGE_BLOCK;
struct _NDIS_GUID;
struct _NDIS_HD_SPLIT_ATTRIBUTES;
struct _NDIS_HD_SPLIT_CURRENT_CONFIG;
struct _NDIS_IF_BLOCK;
struct _NDIS_IF_COMPARTMENT_BLOCK;
struct _NDIS_IF_NETWORK_BLOCK;
struct _NDIS_IF_PROVIDER_BLOCK;
struct _NDIS_IF_PROVIDER_CHARACTERISTICS;
struct _NDIS_IF_RCV_ADDRESS;
struct _NDIS_IF_STACK_ENTRY;
struct _NDIS_INTERRUPT_BLOCK;
struct _NDIS_INTERRUPT_MODERATION_PARAMETERS;
struct _NDIS_IPSEC_OFFLOAD_V1;
struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2;
struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_PACKET_INFO;
struct _NDIS_IRP_WORK_ITEM;
struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY;
struct _NDIS_LINK_PARAMETERS;
struct _NDIS_LINK_STATE;
struct _NDIS_LOG;
struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_AOAC;
struct _NDIS_MINIPORT_BLOCK;
struct _NDIS_MINIPORT_CO_CHARACTERISTICS;
struct _NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS;
struct _NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS_EX;
struct _NDIS_MINIPORT_CS_TRAFFIC_STATS;
struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS;
struct _NDIS_MINIPORT_HANDLERS;
struct _NDIS_MINIPORT_INIT_PARAMETERS;
struct _NDIS_MINIPORT_INTERRUPT;
struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS;
struct _NDIS_MINIPORT_OFFLOAD;
struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST;
struct _NDIS_MINIPORT_OFFLOAD_REG;
struct _NDIS_MINIPORT_PAUSE_PARAMETERS;
struct _NDIS_MINIPORT_PNP_CHARACTERISTICS;
struct _NDIS_MINIPORT_RESTART_PARAMETERS;
struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE;
struct _NDIS_MINIPORT_SS_CHARACTERISTICS;
struct _NDIS_MINIPORT_STATS;
struct _NDIS_MINIPORT_SYSPOWER_NOTIFY;
struct _NDIS_MINIPORT_TIMER;
struct _NDIS_MINIPORT_WORK_ITEM;
struct _NDIS_MSIX_CONFIG_PARAMETERS;
struct _NDIS_M_DRIVER_BLOCK;
struct _NDIS_M_PERIODIC_RECEIVES;
struct _NDIS_NAPS_TELEMETRY_DATA;
struct _NDIS_NAPS_TELEMETRY_OID_DATA;
struct _NDIS_NAPS_TELEMETRY_REASON_DATA;
struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION;
struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX;
struct _NDIS_NBL_TRACKER;
struct _NDIS_NBL_TRACKER_BUCKET;
struct _NDIS_NDK_CAPABILITIES;
struct _NDIS_NDK_PARAMETERS;
struct _NDIS_NDK_PERFORMANCE_COUNTERS;
struct _NDIS_NDK_REQUEST_PARAMETERS;
struct _NDIS_NDK_RESPONSE_PARAMETERS;
struct _NDIS_NET_BUFFER_LIST_8021Q_INFO;
struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO;
struct _NDIS_NET_BUFFER_LIST_GFT_OFFLOAD_INFO;
struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO;
struct _NDIS_NET_BUFFER_LIST_POOL;
struct _NDIS_NET_BUFFER_LIST_VIRTUAL_SUBNET_INFO;
struct _NDIS_NET_BUFFER_POOL;
struct _NDIS_NIC_SWITCH_BLOCK;
struct _NDIS_NIC_SWITCH_CAPABILITIES;
struct _NDIS_NIC_SWITCH_INFO_ARRAY;
struct _NDIS_NIC_SWITCH_PARAMETERS;
struct _NDIS_NIC_SWITCH_VF_PARAMETERS;
struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS;
struct _NDIS_NPAGED_LOOKASIDE_LIST;
struct _NDIS_NSI_COMPARTMENT_RW;
struct _NDIS_NSI_IF_RCV_ADDRESS_ROD;
struct _NDIS_NSI_INTERFACE_ENUM_ROD;
struct _NDIS_NSI_INTERFACE_ENUM_ROS;
struct _NDIS_NSI_NETWORK_RW;
struct _NDIS_OBJECT_HEADER;
struct _NDIS_OFFLOAD;
struct _NDIS_OFFLOAD_CLIENT_HANDLERS;
struct _NDIS_OFFLOAD_ENCAPSULATION;
struct _NDIS_OFFLOAD_EVENT_HANDLERS;
struct _NDIS_OFFLOAD_HANDLE;
struct _NDIS_OFFLOAD_HANDLE_PRIVATE;
struct _NDIS_OID_CACHE_ENTRY;
struct _NDIS_OID_REQUEST;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET;
struct _NDIS_OID_REQUEST_FLAGS;
struct _NDIS_OID_REQUEST_RESERVED;
struct _NDIS_OPEN_BLOCK;
struct _NDIS_OPEN_NDK_ADAPTER_PARAMETERS;
struct _NDIS_OPEN_OFFLOAD;
struct _NDIS_OPEN_PARAMETERS;
struct _NDIS_PACKET;
struct _NDIS_PACKET_8021Q_INFO;
struct _NDIS_PACKET_EXTENSION;
struct _NDIS_PACKET_OOB_DATA;
struct _NDIS_PACKET_PATTERN_ENTRY;
struct _NDIS_PACKET_PRIVATE;
struct _NDIS_PACKET_STACK;
struct _NDIS_PACKET_WRAPPER;
struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES;
struct _NDIS_PCW_DATA_BLOCK;
struct _NDIS_PD_ACQUIRE_QUEUES_PARAMETERS;
struct _NDIS_PD_BLOCK;
struct _NDIS_PD_BM_DOMAIN_MEMBER_PARAMETERS;
struct _NDIS_PD_BM_DOMAIN_PARAMETERS;
struct _NDIS_PD_CAPABILITIES;
struct _NDIS_PD_CONFIG;
struct _NDIS_PD_COUNTER_PARAMETERS;
struct _NDIS_PD_EC_UTILIZATION_COUNTER;
struct _NDIS_PD_EXT_CLIENT_DISPATCH;
struct _NDIS_PD_EXT_CLIENT_PARAM;
struct _NDIS_PD_FILTER_COUNTER;
struct _NDIS_PD_FILTER_PARAMETERS;
struct _NDIS_PD_POST_AND_DRAIN_ARG;
struct _NDIS_PD_PROVIDER_DISPATCH;
struct _NDIS_PD_QUEUE;
struct _NDIS_PD_QUEUE_DEPTH_COUNTER;
struct _NDIS_PD_QUEUE_DISPATCH;
struct _NDIS_PD_QUEUE_PARAMETERS;
struct _NDIS_PD_RECEIVE_QUEUE_COUNTER;
struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER;
struct _NDIS_PENDING_IM_INSTANCE;
struct _NDIS_PER_PROC_PERFORMANCE_COUNTERS;
struct _NDIS_PF_BLOCK;
struct _NDIS_PHYSICAL_ADDRESS_UNIT;
struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS;
struct _NDIS_PKT_POOL;
struct _NDIS_PKT_POOL_HDR;
struct _NDIS_PM_ADMIN_CONFIG;
struct _NDIS_PM_CAPABILITIES;
struct _NDIS_PM_COUNTED_STRING;
struct _NDIS_PM_PACKET_PATTERN;
struct _NDIS_PM_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS;
struct _NDIS_PM_WAKE_UP_CAPABILITIES;
struct _NDIS_PM_WOL_PATTERN;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN;
struct _NDIS_PNP_CAPABILITIES;
struct _NDIS_POOL_HEADER;
struct _NDIS_PORT;
struct _NDIS_PORT_ARRAY;
struct _NDIS_PORT_AUTHENTICATION_PARAMETERS;
struct _NDIS_PORT_BLOCK;
struct _NDIS_PORT_CHARACTERISTICS;
struct _NDIS_PORT_STATE;
struct _NDIS_PROCESSOR_INFO;
struct _NDIS_PROTOCOL_BLOCK;
struct _NDIS_PROTOCOL_CO_CHARACTERISTICS;
struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS;
struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST;
struct _NDIS_PROTOCOL_PAUSE_PARAMETERS;
struct _NDIS_PROTOCOL_RESTART_PARAMETERS;
struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS;
struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS;
struct _NDIS_QOS_CAPABILITIES;
struct _NDIS_QOS_CLASSIFICATION_ELEMENT;
struct _NDIS_QOS_OFFLOAD_CAPABILITIES;
struct _NDIS_QOS_PARAMETERS;
struct _NDIS_QOS_SQ_PARAMETERS;
struct _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY;
struct _NDIS_RECEIVE_FILTER_BLOCK;
struct _NDIS_RECEIVE_FILTER_CAPABILITIES;
struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE;
struct _NDIS_RECEIVE_HASH_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_BLOCK;
struct _NDIS_RECEIVE_QUEUE_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_STATE;
struct _NDIS_RECEIVE_SCALE_CAPABILITIES;
struct _NDIS_RECEIVE_SCALE_PARAMETERS;
struct _NDIS_REFCOUNT_BLOCK;
struct _NDIS_REFCOUNT_STACK_BLOCK;
struct _NDIS_REFCOUNT_STACK_ENTRY;
struct _NDIS_REFCOUNT_TAGGED;
struct _NDIS_REFCOUNT_TAGGED_ENTRY;
struct _NDIS_REFCOUNT_WITH_STACK;
struct _NDIS_REQUEST;
struct _NDIS_REQUEST::_DATA::_QUERY_INFORMATION;
struct _NDIS_REQUEST::_DATA::_SET_INFORMATION;
struct _NDIS_REQUEST_XLATION_CONTEXT;
struct _NDIS_RESTART_ATTRIBUTES;
struct _NDIS_RESTART_GENERAL_ATTRIBUTES;
struct _NDIS_RFC6877_464XLAT_OFFLOAD;
struct _NDIS_RSC_STATISTICS_INFO;
struct _NDIS_RSS_DPC_WORKER_CONTEXT;
struct _NDIS_RSS_SET_INDIRECTION_ENTRIES;
struct _NDIS_RSS_SET_INDIRECTION_ENTRIES_COMMAND;
struct _NDIS_RSS_SET_INDIRECTION_ENTRY;
struct _NDIS_RW_LOCK;
struct _NDIS_RW_LOCK_EX;
struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS;
struct _NDIS_SELECTIVE_SUSPEND;
struct _NDIS_SG_DMA_BLOCK;
struct _NDIS_SG_DMA_DESCRIPTION;
struct _NDIS_SHARED_MEMORY_BLOCK;
struct _NDIS_SHARED_MEMORY_PARAMETERS;
struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS;
struct _NDIS_SPIN_LOCK;
struct _NDIS_SRIOV_CAPABILITIES;
struct _NDIS_SRIOV_VF_CONFIG_STATE;
struct _NDIS_SS_CONTROL_OPS;
struct _NDIS_SS_IDLE_FLAGS;
struct _NDIS_SS_STOP_FLAGS;
struct _NDIS_STACK_TRACE_TABLE;
struct _NDIS_STATISTICS_INFO;
struct _NDIS_STATUS_INDICATION;
struct _NDIS_STATUS_UNBIND_WORKITEM;
struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY;
struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO;
struct _NDIS_SWITCH_NIC_STATUS_INDICATION;
struct _NDIS_SWITCH_PORT_DESTINATION;
struct _NDIS_SYSTEM_PROCESSOR_INFO;
struct _NDIS_TASK_IPSEC;
struct _NDIS_TASK_OFFLOAD;
struct _NDIS_TASK_OFFLOAD_HEADER;
struct _NDIS_TASK_TCP_IP_CHECKSUM;
struct _NDIS_TASK_TCP_LARGE_SEND;
struct _NDIS_TCP_CONNECTION_OFFLOAD;
struct _NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION;
struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS;
struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO;
struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD;
struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2;
struct _NDIS_TCP_OFFLOAD_CLIENT_HANDLERS;
struct _NDIS_TCP_OFFLOAD_EVENT_HANDLERS;
struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD;
struct _NDIS_TIMER;
struct _NDIS_TIMER_CHARACTERISTICS;
struct _NDIS_TIMER_ENTRY;
struct _NDIS_TIMESTAMP_CAPABILITIES;
struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS;
struct _NDIS_TRACK_MEM;
struct _NDIS_TRIAGE_OBJECT_HEADER;
struct _NDIS_VF_BLOCK;
struct _NDIS_VPORT_BLOCK;
struct _NDIS_WAN_COMPRESS_INFO;
struct _NDIS_WAN_CO_GET_COMP_INFO;
struct _NDIS_WAN_CO_GET_LINK_INFO;
struct _NDIS_WAN_CO_GET_STATS_INFO;
struct _NDIS_WAN_CO_INFO;
struct _NDIS_WAN_CO_SET_COMP_INFO;
struct _NDIS_WAN_CO_SET_LINK_INFO;
struct _NDIS_WAN_FRAGMENT;
struct _NDIS_WAN_GET_STATS;
struct _NDIS_WAN_LINE_DOWN;
struct _NDIS_WAN_LINE_UP;
struct _NDIS_WAN_PACKET;
struct _NDIS_WATCHDOG_TRIAGE_BLOCK;
struct _NDIS_WDF_COMPLETE_ADD_PARAMS;
struct _NDIS_WDF_CX_CHARACTERISTICS;
struct _NDIS_WDF_CX_DRIVER_BLOCK;
struct _NDIS_WLAN_BSSID;
struct _NDIS_WLAN_BSSID_EX;
struct _NDIS_WOL_XLATION_CONTEXT;
struct _NDIS_WORK_ITEM;
struct _NDIS_WRAPPER_CONFIGURATION_HANDLE;
struct _NDIS_WRAPPER_HANDLE;
struct _NDIS_WWAN_AUTH_CHALLENGE;
struct _NDIS_WWAN_DEVICE_CAPS;
struct _NDIS_WWAN_DRIVER_CAPS;
struct _NDIS_WWAN_HOME_PROVIDER;
struct _NDIS_WWAN_PIN_LIST;
struct _NDIS_WWAN_PREFERRED_PROVIDERS;
struct _NDIS_WWAN_READY_INFO;
struct _NDIS_WWAN_SERVICE_ACTIVATION;
struct _NDIS_WWAN_SET_CONTEXT_STATE;
struct _NDIS_WWAN_SET_PACKET_SERVICE;
struct _NDIS_WWAN_SET_PROVISIONED_CONTEXT;
struct _NDIS_WWAN_SET_REGISTER_STATE;
struct _NDIS_WWAN_SET_SIGNAL_INDICATION;
struct _NDIS_WWAN_SET_SMS_CONFIGURATION;
struct _NDIS_WWAN_SMS_DELETE;
struct _NDIS_WWAN_SMS_READ;
struct _NDIS_WWAN_SMS_SEND;
struct _NDIS_WWAN_VISIBLE_PROVIDERS;
struct _NDK_ADAPTER;
struct _NDK_ADAPTER_DISPATCH;
struct _NDK_ADAPTER_INFO;
struct _NDK_CONNECTOR;
struct _NDK_CONNECTOR_DISPATCH;
struct _NDK_CQ;
struct _NDK_CQ_DISPATCH;
struct _NDK_EXTENSION_INTERFACE;
struct _NDK_LISTENER;
struct _NDK_LISTENER_DISPATCH;
struct _NDK_LOGICAL_ADDRESS_MAPPING;
struct _NDK_MR;
struct _NDK_MR_DISPATCH;
struct _NDK_MW;
struct _NDK_MW_DISPATCH;
struct _NDK_OBJECT_HEADER;
struct _NDK_OBJECT_HEADER_RESERVED_BLOCK;
struct _NDK_PD;
struct _NDK_PD_DISPATCH;
struct _NDK_QP;
struct _NDK_QP_DISPATCH;
struct _NDK_RESULT;
struct _NDK_RESULT_EX;
struct _NDK_SGE;
struct _NDK_SHARED_ENDPOINT;
struct _NDK_SHARED_ENDPOINT_DISPATCH;
struct _NDK_SRQ;
struct _NDK_SRQ_DISPATCH;
struct _NEIGHBOR_OFFLOAD_STATE_CACHED;
struct _NEIGHBOR_OFFLOAD_STATE_CONST;
struct _NEIGHBOR_OFFLOAD_STATE_DELEGATED;
struct _NETIO_NET_BUFFER_CONTEXT;
struct _NETIO_NET_BUFFER_LIST_CONTEXT;
struct _NET_BUFFER;
struct _NET_BUFFER_DATA;
struct _NET_BUFFER_LIST;
struct _NET_BUFFER_LIST_CONTEXT;
struct _NET_BUFFER_LIST_DATA;
struct _NET_BUFFER_LIST_POOL_PARAMETERS;
struct _NET_BUFFER_LIST_TIMESTAMP;
struct _NET_BUFFER_POOL_PARAMETERS;
struct _NET_BUFFER_SHARED_MEMORY;
struct _NET_DEVICE_PNP_EVENT;
struct _NET_IF_INFORMATION;
struct _NET_PHYSICAL_LOCATION_LH;
struct _NET_PNP_EVENT;
struct _NET_PNP_EVENT_NOTIFICATION;
struct _NPAGED_LOOKASIDE_LIST;
struct _NPI_MODULEID;
struct _NT_TIB;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OB_EXTENDED_PARSE_PARAMETERS;
struct _OFFLOAD_STATE_HEADER;
struct _OID_LIST;
struct _OWNER_ENTRY;
struct _PAGED_LOOKASIDE_LIST;
struct _PATH_OFFLOAD_STATE_CACHED;
struct _PATH_OFFLOAD_STATE_CONST;
struct _PATH_OFFLOAD_STATE_DELEGATED;
struct _PCI_CAPABILITIES_HEADER;
struct _PCI_MSI_MESSAGE_ADDRESS;
struct _PCI_MSI_MESSAGE_CONTROL;
struct _PCW_BUFFER;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_DATA;
struct _PCW_INSTANCE;
struct _PCW_MASK_INFORMATION;
struct _PCW_REGISTRATION;
struct _PCW_REGISTRATION_INFORMATION;
struct _PD_BUFFER;
struct _PD_BUFFER_8021Q_INFO;
struct _PD_BUFFER_VIRTUAL_SUBNET_INFO;
struct _PEB;
struct _PEB_LDR_DATA;
struct _PENDING_STACK_EXPANSION_FALLBACK_WORK;
struct _PERFINFO_GROUPMASK;
struct _PKTMON_COMPONENT_CONTEXT;
struct _PKTMON_EDGE_CONTEXT;
struct _PMKID_CANDIDATE;
struct _POWER_SEQUENCE;
struct _PPL_LOOKASIDE_LIST;
struct _PPL_LOOKASIDE_LIST_ARRAY;
struct _PRIVILEGE_SET;
struct _PROCESSOR_NUMBER;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _QUAD;
struct _QUERY;
struct _QUERY_INFORMATION;
struct _QUEUED_CLOSE;
struct _RECORDER_CONFIGURE_PARAMS;
struct _RECORDER_LOG_CREATE_PARAMS;
struct _REFERENCE;
struct _REFERENCE_EX;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_AVL_TREE;
struct _RTL_BALANCED_NODE;
struct _RTL_BITMAP;
struct _RTL_CRITICAL_SECTION;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_QUERY_REGISTRY_TABLE;
struct _RTL_RB_TREE;
struct _RTL_SPLAY_LINKS;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _SCSI_REQUEST_BLOCK;
struct _SECTION_OBJECT_POINTERS;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SET;
struct _SET_INFORMATION;
struct _SID;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SINGLE_LIST_ENTRY;
struct _SLIST_ENTRY;
struct _STACK_INDEX;
struct _STRING;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _TCP_OFFLOAD_STATE_CACHED;
struct _TCP_OFFLOAD_STATE_CONST;
struct _TCP_OFFLOAD_STATE_DELEGATED;
struct _TCP_OFFLOAD_STATS;
struct _TEB;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
struct _TP_CLEANUP_GROUP;
struct _TP_POOL;
struct _TRANSPORT_HEADER_OFFSET;
struct _TXN_PARAMETER_BLOCK;
struct _TlgProviderMetadata_t;
struct _TlgProvider_t;
struct _TraceLoggingMetadata_t;
struct _ULONG_REFERENCE;
struct _UNICODE_STRING;
struct _VAR_STRING;
struct _VF_DISPATCH_TABLE_HEADER;
struct _VF_NDIS_DISPATCH_TABLE;
struct _VPB;
struct _VPCI_INVALIDATE_BLOCK_OUTPUT;
struct _VXLAN_INFO;
struct _WAIT_CONTEXT_BLOCK;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _WHEA_EVENT_LOG_ENTRY;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WNF_STATE_NAME;
struct _WNF_TYPE_ID;
struct _WOL_BITMAP_PATTERN;
struct _WORK_QUEUE_ITEM;
struct _WWAN_AUTH_AKAP_CHALLENGE;
struct _WWAN_AUTH_AKA_CHALLENGE;
struct _WWAN_AUTH_CHALLENGE;
struct _WWAN_AUTH_SIM_CHALLENGE;
struct _WWAN_DEVICE_CAPS;
struct _WWAN_DRIVER_CAPS;
struct _WWAN_LIST_HEADER;
struct _WWAN_PIN_DESC;
struct _WWAN_PIN_LIST;
struct _WWAN_PROVIDER;
struct _WWAN_READY_INFO;
struct _WWAN_SERVICE_ACTIVATION;
struct _WWAN_SET_CONTEXT;
struct _WWAN_SET_CONTEXT_STATE;
struct _WWAN_SET_REGISTER_STATE;
struct _WWAN_SET_SIGNAL_INDICATION;
struct _WWAN_SET_SMS_CONFIGURATION;
struct _WWAN_SMS_FILTER;
struct _WWAN_SMS_READ;
struct _WWAN_SMS_SEND;
struct _WWAN_SMS_SEND_CDMA;
struct _WWAN_SMS_SEND_PDU;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_FORMAT;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_FEATURE;
struct _X_FILTER;
struct __WIL__WNF_STATE_NAME;
struct __WIL__WNF_TYPE_ID;
struct __WIL__WNF_USER_SUBSCRIPTION;
struct __vc_attributes::aggregatableAttribute;
struct __vc_attributes::event_receiverAttribute;
struct __vc_attributes::event_sourceAttribute;
struct __vc_attributes::helper_attributes::usageAttribute;
struct __vc_attributes::helper_attributes::v1_alttypeAttribute;
struct __vc_attributes::moduleAttribute;
struct __vc_attributes::threadingAttribute;
struct _flowspec;
struct _wil_details_UsageSubscriptionData;
struct in6_addr;
struct in_addr;
struct sockaddr;
struct sockaddr_in;
struct sockaddr_in6;
struct std::nothrow_t;
struct wil::details::kspin_lock_saved_irql;
struct wil::details::resource_policy<NDISWATCHDOG__ *,void (__cdecl*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned __int64,1>,NDISWATCHDOG__ *,-1,std::nullptr_t>;
struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(unsigned __int64 *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned __int64,2>,unsigned __int64 *,0,std::nullptr_t>;
struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned __int64,2>,wil::details::kspin_lock_saved_irql,0,std::nullptr_t>;
struct wil::details::resource_policy<void *,long (__cdecl*)(void *),&ZwClose,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t>;
struct wil_FeatureState;
struct wil_StagingConfig;
struct wil_details_FeatureProperties;
struct wil_details_FeatureTestState;
struct wil_details_FeatureVariantPropertyCache;
struct wil_details_RecordUsageResult;
struct wil_details_SetPropertyCacheUsageContext;
struct wil_details_SetPropertyFlagContext;
struct wil_details_StagingConfig;
struct wil_details_StagingConfigFeature;
struct wil_details_StagingConfigHeader;
struct wil_details_StagingConfigHeaderProperties;
struct wil_details_StagingConfigUsageTrigger;
struct wil_details_StagingConfigWnfStateName;
struct wil_details_VariantProperties;
struct wistd::_Nil;
struct wistd::_Wrap_int;
struct wistd::default_delete<NDIS_BIND_FILTER_LINK>;
struct wistd::default_delete<NDIS_BIND_PROTOCOL_LINK>;
struct wistd::default_delete<Rtl::KString>;
struct wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS>;
struct wistd::integral_constant<enum _EVENT_TYPE,0>;
struct wistd::integral_constant<enum _EVENT_TYPE,1>;
struct wistd::integral_constant<unsigned __int64,0>;
struct wistd::integral_constant<unsigned __int64,1>;
struct wistd::integral_constant<unsigned __int64,2>;

union KSDATAFORMAT;
union _DATA;
union _DL_EI48;
union _DL_EUI48;
union _DL_OUI;
union _ENCAPSULATION_PROTOCOL_INFO;
union _FIELD_VALUE;
union _HEADER_FIELD;
union _KGDTENTRY64;
union _KIDTENTRY64;
union _LARGE_INTEGER;
union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO;
union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES;
union _NDIS_OID_REQUEST::_REQUEST_DATA;
union _NDIS_PD_COUNTER_VALUE;
union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS;
union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE;
union _NDIS_REQUEST::_DATA;
union _NDIS_RSC_NBL_INFO;
union _NDIS_RW_LOCK_REFCOUNT;
union _NDIS_SS_RESUME_REASON;
union _NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO;
union _NET_BUFFER_DATA_LENGTH;
union _NET_BUFFER_HEADER;
union _NET_BUFFER_LIST_HEADER;
union _NET_LUID_LH;
union _PCW_CALLBACK_INFORMATION;
union _POWER_STATE;
union _PROTOCOL_OFFLOAD_PARAMETERS;
union _REFERENCE_OBJECT;
union _REQUEST_DATA;
union _RESULT_VALUE;
union _SLIST_HEADER;
union _ULARGE_INTEGER;
union _WHEA_ERROR_PACKET_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
union _WOL_PATTERN;
union __m128;
union __m64;
union wil_details_FeaturePropertyCache;

enum BINDING_ENABLED_OR_DISABLED;
enum BIND_SOURCE_STATE;
enum BUS_QUERY_ID_TYPE;
enum BooleanDisposition;
enum COMPARTMENT_ID;
enum CallRunMode;
enum DEVICE_TEXT_TYPE;
enum DL_ADDRESS_TYPE;
enum DMA_COMPLETION_STATUS;
enum FEATURE_CHANGE_TIME;
enum FEATURE_ENABLED_STATE;
enum INDICATE_OFFLOAD_EVENT;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum KRegKey::BooleanDisposition;
enum KSPIN_COMMUNICATION;
enum KSPIN_DATAFLOW;
enum KSRESET;
enum KSSTATE;
enum NDIS_CHIMNEY_OFFLOAD_TYPE;
enum NDIS_DO_NOT_BIND_REASON;
enum NDIS_MINIPORT_POLICY_OWNER;
enum NDIS_PAUSE_REASON;
enum NDIS_PD_CONTROL_TYPE;
enum NDIS_PD_COUNTER_TYPE;
enum NDIS_PD_PROVIDER_CONTROL_CODE;
enum NDIS_PD_QUEUE_CONTROL_CODE;
enum NDIS_PD_QUEUE_TYPE;
enum NL_ADDRESS_TYPE;
enum Ndis::BindSource::Flags;
enum Ndis::ReadBindingsOptions::Flags;
enum NdisIfBlockSource;
enum NetDmaEventTypes;
enum NetSetupSubkeyType;
enum OFFLOAD_STATE_TYPE;
enum PAUSE_OR_RESTART;
enum PDCCLIENTID;
enum PDC_ACTIVITY_TYPE;
enum POWER_ACTION;
enum PS_CREATE_STATE;
enum ReplacesCorHdrNumericDefines;
enum SCOPE_LEVEL;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum TCP_OFFLOAD_CONNECTION_STATE;
enum TCP_OFFLOAD_EVENT_TYPE;
enum TCP_UPLOAD_REASON;
enum TlgIn_t;
enum TlgOut_t;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _DEVICE_POWER_STATE;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_RESET_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
enum _DEVPROPSTORE;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum _DMA_SPEED;
enum _DMA_WIDTH;
enum _DOT11_ASSOCIATION_STATE;
enum _DOT11_AUTH_ALGORITHM;
enum _DOT11_CIPHER_ALGORITHM;
enum _DOT11_DIVERSITY_SUPPORT;
enum _DOT11_PHY_TYPE;
enum _DOT11_POWER_MODE;
enum _DOT11_TEMP_TYPE;
enum _EVENT_INFO_CLASS;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
enum _FILE_INFORMATION_CLASS;
enum _FSINFOCLASS;
enum _HV_EXT_EPF_MODE;
enum _INTERFACE_TYPE;
enum _INTERLOCKED_RESULT;
enum _IO_ALLOCATION_ACTION;
enum _IO_PRIORITY_HINT;
enum _IO_RATE_CONTROL_TYPE;
enum _IPSEC_OFFLOAD_V2_OPERATION;
enum _IRQ_PRIORITY;
enum _JOBOBJECTINFOCLASS;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _MM_PAGE_PRIORITY;
enum _MODE;
enum _NDIS_802_11_AUTHENTICATION_MODE;
enum _NDIS_802_11_NETWORK_INFRASTRUCTURE;
enum _NDIS_802_11_NETWORK_TYPE;
enum _NDIS_802_11_STATUS_TYPE;
enum _NDIS_802_11_WEP_STATUS;
enum _NDIS_ARP_HEADER_FIELD;
enum _NDIS_CLASS_ID;
enum _NDIS_CS_TRAFFIC_STATS;
enum _NDIS_DATA_PATH_TYPE;
enum _NDIS_DEVICE_PNP_EVENT;
enum _NDIS_DEVICE_POWER_STATE;
enum _NDIS_ENCAPSULATION;
enum _NDIS_ENVIRONMENT_TYPE;
enum _NDIS_FILTER_STATE;
enum _NDIS_FPNP_REFTAG;
enum _NDIS_FRAME_HEADER;
enum _NDIS_GFP_TABLE_TYPE;
enum _NDIS_GFP_WILDCARD_MATCH_TYPE;
enum _NDIS_GFT_COUNTER_TYPE;
enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY;
enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT;
enum _NDIS_GFT_FLOW_ENTRY_STATE;
enum _NDIS_GFT_FLOW_ENTRY_TYPE;
enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION;
enum _NDIS_GFT_PROFILE_TYPE;
enum _NDIS_GFT_WILDCARD_ACTION;
enum _NDIS_HALT_ACTION;
enum _NDIS_IF_REFTAG;
enum _NDIS_INTERFACE_TYPE;
enum _NDIS_INTERRUPT_MODERATION;
enum _NDIS_INTERRUPT_TYPE;
enum _NDIS_IPV4_HEADER_FIELD;
enum _NDIS_IPV6_HEADER_FIELD;
enum _NDIS_LWFDRV_REFTAG;
enum _NDIS_LWF_REFTAG;
enum _NDIS_MAC_HEADER_FIELD;
enum _NDIS_MDRV_REFTAG;
enum _NDIS_MEDIUM;
enum _NDIS_MINIPORT_EVENT;
enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE;
enum _NDIS_MINIPORT_STATE;
enum _NDIS_MPIF_REFTAG;
enum _NDIS_MP_REFTAG;
enum _NDIS_MSIX_TABLE_CONFIG;
enum _NDIS_M_PERIODIC_RECEIVE_STATE;
enum _NDIS_NBL_TRACKER_LIFETIME_EVENT;
enum _NDIS_NBL_TRACKER_MODE;
enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT;
enum _NDIS_NBL_TRACKER_SOURCE;
enum _NDIS_NDIS5_DRIVER_STATE;
enum _NDIS_NET_BUFFER_LIST_INFO;
enum _NDIS_NIC_ACTIVE_STATE;
enum _NDIS_NIC_SWITCH_TYPE;
enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION;
enum _NDIS_NIC_SWITCH_VPORT_STATE;
enum _NDIS_NSI_COMPARTMENT_TYPE;
enum _NDIS_NSI_REFTAG;
enum _NDIS_PARAMETER_TYPE;
enum _NDIS_PER_PACKET_INFO;
enum _NDIS_PHYSICAL_MEDIUM;
enum _NDIS_PM_COMPONENT_ID;
enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE;
enum _NDIS_PM_WAKE_REASON_TYPE;
enum _NDIS_PM_WOL_PACKET;
enum _NDIS_PNP_DEVICE_STATE;
enum _NDIS_PORT_AUTHORIZATION_STATE;
enum _NDIS_PORT_CONTROL_STATE;
enum _NDIS_PORT_PNP_STATE;
enum _NDIS_PORT_TYPE;
enum _NDIS_POWER_PROFILE;
enum _NDIS_PROCESSOR_TYPE;
enum _NDIS_PROCESSOR_VENDOR;
enum _NDIS_PT_REFTAG;
enum _NDIS_QOS_SQ_TYPE;
enum _NDIS_RECEIVE_FILTER_TEST;
enum _NDIS_RECEIVE_FILTER_TYPE;
enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE;
enum _NDIS_RECEIVE_QUEUE_PNP_STATE;
enum _NDIS_RECEIVE_QUEUE_TYPE;
enum _NDIS_REQUEST_TYPE;
enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS;
enum _NDIS_RSS_PROFILE;
enum _NDIS_SEND_PATH_TYPE;
enum _NDIS_SHARED_MEMORY_USAGE;
enum _NDIS_SHUTDOWN_ACTION;
enum _NDIS_SS_BUSY_REASON;
enum _NDIS_SS_STOP_REASON;
enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS;
enum _NDIS_TASK;
enum _NDIS_TMP_REF_REASON;
enum _NDIS_UDP_HEADER_FIELD;
enum _NDIS_WAN_QUALITY;
enum _NDIS_WDF_CX_DRIVER_STATE;
enum _NDIS_WORK_ITEM_TYPE;
enum _NDIS_XLATE_TYPE;
enum _NDK_OBJECT_TYPE;
enum _NDK_OPERATION_TYPE;
enum _NDK_RDMA_TECHNOLOGY;
enum _NET_DEVICE_POWER_STATE;
enum _NET_DEVICE_RESET_TYPE;
enum _NET_IF_ACCESS_TYPE;
enum _NET_IF_ADMIN_STATUS;
enum _NET_IF_CONNECTION_TYPE;
enum _NET_IF_DIRECTION_TYPE;
enum _NET_IF_MEDIA_CONNECT_STATE;
enum _NET_IF_MEDIA_DUPLEX_STATE;
enum _NET_IF_OPER_STATUS;
enum _NET_IF_RCV_ADDRESS_TYPE;
enum _NET_PNP_EVENT_CODE;
enum _NL_ECN_CODEPOINT;
enum _NPI_MODULEID_TYPE;
enum _NT_PRODUCT_TYPE;
enum _OB_OPEN_REASON;
enum _PCW_CALLBACK_TYPE;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _PERFINFO_MM_STAT;
enum _PKG_TYPE;
enum _PKTMON_PACKET_TYPE;
enum _POOL_BLOCK_TYPE;
enum _POOL_TYPE;
enum _POWER_STATE_TYPE;
enum _PS_ATTRIBUTE_NUM;
enum _PS_MITIGATION_OPTION;
enum _PS_PROTECTED_SIGNER;
enum _PS_PROTECTED_TYPE;
enum _PS_STD_HANDLE_STATE;
enum _PS_WAKE_REASON;
enum _REG_NOTIFY_CLASS;
enum _RTL_RESOURCE_POLICY_FLAGS;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
enum _SYSTEM_POWER_STATE;
enum _SYSTEM_PROCESS_CLASSIFICATION;
enum _TP_CALLBACK_PRIORITY;
enum _TRACE_INFORMATION_CLASS;
enum _TlgBlob_t;
enum _USER_ACTIVITY_PRESENCE;
enum _VF_DISPATCH_TABLE_TYPE;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _WHEA_ERROR_SEVERITY;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _WORK_QUEUE_TYPE;
enum _WWAN_ACTIVATION_COMMAND;
enum _WWAN_AUTH_METHOD;
enum _WWAN_AUTH_PROTOCOL;
enum _WWAN_CELLULAR_CLASS;
enum _WWAN_COMPRESSION;
enum _WWAN_CONFIGURATION_SOURCE;
enum _WWAN_CONTEXT_TYPE;
enum _WWAN_DEVICE_TYPE;
enum _WWAN_EMERGENCY_MODE;
enum _WWAN_IP_TYPE;
enum _WWAN_PACKET_SERVICE_ACTION;
enum _WWAN_PIN_FORMAT;
enum _WWAN_PIN_MODE;
enum _WWAN_PSMEDIA_PREFERENCE;
enum _WWAN_READY_STATE;
enum _WWAN_REGISTER_ACTION;
enum _WWAN_SIM_CLASS;
enum _WWAN_SMS_CDMA_ENCODING;
enum _WWAN_SMS_CDMA_LANG;
enum _WWAN_SMS_FLAG;
enum _WWAN_SMS_FORMAT;
enum _WWAN_STRUCT_TYPE;
enum _WWAN_VOICE_CLASS;
enum __vc_attributes::aggregatableAttribute::type_e;
enum __vc_attributes::event_receiverAttribute::type_e;
enum __vc_attributes::event_sourceAttribute::optimize_e;
enum __vc_attributes::event_sourceAttribute::type_e;
enum __vc_attributes::helper_attributes::usageAttribute::usage_e;
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;
enum __vc_attributes::moduleAttribute::type_e;
enum __vc_attributes::threadingAttribute::threading_e;
enum optimize_e;
enum threading_e;
enum type_e;
enum usage_e;
enum wil_FeatureChangeTime;
enum wil_FeatureEnabledState;
enum wil_FeatureEnabledStateKind;
enum wil_FeatureEnabledStateOptions;
enum wil_FeatureStage;
enum wil_FeatureStore;
enum wil_FeatureVariantPayloadKind;
enum wil_ReportingKind;
enum wil_UsageReportingMode;
enum wil_VariantReportingKind;
enum wil_details_CachedFeatureEnabledState;
enum wil_details_CachedHasNotificationState;
enum wil_details_FeatureTestStateKind;
enum wil_details_ServiceReportingKind;
enum wil_details_ServiceReportingOptions;
enum wil_details_StagingConfigFeatureFields;

typedef struct BINARY_DATA {
    USHORT Length;
    PVOID Buffer;
};

typedef struct CO_ADDRESS_FAMILY {
    ULONG AddressFamily;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct CO_SAP {
    ULONG SapType;
    ULONG SapLength;
    UCHAR Sap[1];
};

typedef struct DOT11_ASSOCIATION_INFO_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_ASSOCIATION_INFO_EX dot11AssocInfo[1];
};

typedef struct DOT11_ASSOCIATION_PARAMS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR BSSID[6];
    ULONG uAssocRequestIEsOffset;
    ULONG uAssocRequestIEsLength;
};

typedef struct DOT11_AUTH_ALGORITHM_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    enum _DOT11_AUTH_ALGORITHM AlgorithmIds[1];
};

typedef struct DOT11_AUTH_CIPHER_PAIR {
    enum _DOT11_AUTH_ALGORITHM AuthAlgoId;
    enum _DOT11_CIPHER_ALGORITHM CipherAlgoId;
};

typedef struct DOT11_AUTH_CIPHER_PAIR_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct DOT11_AUTH_CIPHER_PAIR AuthCipherPairs[1];
};

typedef struct DOT11_BSSID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    UCHAR BSSIDs[1][6];
};

typedef struct DOT11_BYTE_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfBytes;
    ULONG uTotalNumOfBytes;
    UCHAR ucBuffer[1];
};

typedef struct DOT11_CIPHER_ALGORITHM_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    enum _DOT11_CIPHER_ALGORITHM AlgorithmIds[1];
};

typedef struct DOT11_CIPHER_DEFAULT_KEY_VALUE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uKeyIndex;
    enum _DOT11_CIPHER_ALGORITHM AlgorithmId;
    UCHAR MacAddr[6];
    UCHAR bDelete;
    UCHAR bStatic;
    USHORT usKeyLength;
    UCHAR ucKey[1];
};

typedef struct DOT11_COUNTRY_OR_REGION_STRING_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    UCHAR CountryOrRegionStrings[1][3];
};

typedef struct DOT11_DATA_RATE_MAPPING_ENTRY {
    UCHAR ucDataRateIndex;
    UCHAR ucDataRateFlag;
    USHORT usDataRateValue;
};

typedef struct DOT11_ERP_PHY_ATTRIBUTES {
    struct DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
    UCHAR bERPPBCCOptionImplemented;
    UCHAR bDSSSOFDMOptionImplemented;
    UCHAR bShortSlotTimeOptionImplemented;
};

typedef struct DOT11_EXTSTA_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uScanSSIDListSize;
    ULONG uDesiredBSSIDListSize;
    ULONG uDesiredSSIDListSize;
    ULONG uExcludedMacAddressListSize;
    ULONG uPrivacyExemptionListSize;
    ULONG uKeyMappingTableSize;
    ULONG uDefaultKeyTableSize;
    ULONG uWEPKeyValueMaxLength;
    ULONG uPMKIDCacheSize;
    ULONG uMaxNumPerSTADefaultKeyTables;
    UCHAR bStrictlyOrderedServiceClassImplemented;
    UCHAR ucSupportedQoSProtocolFlags;
    UCHAR bSafeModeImplemented;
    ULONG uNumSupportedCountryOrRegionStrings;
    PUCHAR pSupportedCountryOrRegionStrings[3];
    ULONG uInfraNumSupportedUcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedUcastAlgoPairs;
    ULONG uInfraNumSupportedMcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedMcastAlgoPairs;
    ULONG uAdhocNumSupportedUcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pAdhocSupportedUcastAlgoPairs;
    ULONG uAdhocNumSupportedMcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pAdhocSupportedMcastAlgoPairs;
    UCHAR bAutoPowerSaveMode;
    ULONG uMaxNetworkOffloadListSize;
    UCHAR bMFPCapable;
    ULONG uInfraNumSupportedMcastMgmtAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedMcastMgmtAlgoPairs;
    UCHAR bNeighborReportSupported;
    UCHAR bAPChannelReportSupported;
    UCHAR bActionFramesSupported;
    UCHAR bANQPQueryOffloadSupported;
    UCHAR bHESSIDConnectionSupported;
};

typedef struct DOT11_EXTSTA_CAPABILITY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uScanSSIDListSize;
    ULONG uDesiredBSSIDListSize;
    ULONG uDesiredSSIDListSize;
    ULONG uExcludedMacAddressListSize;
    ULONG uPrivacyExemptionListSize;
    ULONG uKeyMappingTableSize;
    ULONG uDefaultKeyTableSize;
    ULONG uWEPKeyValueMaxLength;
    ULONG uPMKIDCacheSize;
    ULONG uMaxNumPerSTADefaultKeyTables;
};

typedef struct DOT11_HRDSSS_PHY_ATTRIBUTES {
    UCHAR bShortPreambleOptionImplemented;
    UCHAR bPBCCOptionImplemented;
    UCHAR bChannelAgilityPresent;
    ULONG uHRCCAModeSupported;
};

typedef struct DOT11_IBSS_PARAMS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR bJoinOnly;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct DOT11_MAC_ADDRESS_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    UCHAR MacAddrs[1][6];
};

typedef struct DOT11_MAC_FRAME_STATISTICS {
    ULONG64 ullTransmittedFrameCount;
    ULONG64 ullReceivedFrameCount;
    ULONG64 ullTransmittedFailureFrameCount;
    ULONG64 ullReceivedFailureFrameCount;
    ULONG64 ullWEPExcludedCount;
    ULONG64 ullTKIPLocalMICFailures;
    ULONG64 ullTKIPReplays;
    ULONG64 ullTKIPICVErrorCount;
    ULONG64 ullCCMPReplays;
    ULONG64 ullCCMPDecryptErrors;
    ULONG64 ullWEPUndecryptableCount;
    ULONG64 ullWEPICVErrorCount;
    ULONG64 ullDecryptSuccessCount;
    ULONG64 ullDecryptFailureCount;
};

typedef struct DOT11_OFDM_PHY_ATTRIBUTES {
    ULONG uFrequencyBandsSupported;
};

typedef struct DOT11_PHY_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_PHY_TYPE PhyType;
    UCHAR bHardwarePhyState;
    UCHAR bSoftwarePhyState;
    UCHAR bCFPollable;
    ULONG uMPDUMaxLength;
    enum _DOT11_TEMP_TYPE TempType;
    enum _DOT11_DIVERSITY_SUPPORT DiversitySupport;
     <unnamed-type-PhySpecificAttributes>;
    union {
        struct DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
        struct DOT11_OFDM_PHY_ATTRIBUTES OFDMAttributes;
        struct DOT11_ERP_PHY_ATTRIBUTES ERPAttributes;
    } PhySpecificAttributes;
    ULONG uNumberSupportedPowerLevels;
    ULONG TxPowerLevels[8];
    ULONG uNumDataRateMappingEntries;
    struct DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[126];
    struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 SupportedDataRatesValue;
};

typedef struct DOT11_PHY_FRAME_STATISTICS {
    ULONG64 ullTransmittedFrameCount;
    ULONG64 ullMulticastTransmittedFrameCount;
    ULONG64 ullFailedCount;
    ULONG64 ullRetryCount;
    ULONG64 ullMultipleRetryCount;
    ULONG64 ullMaxTXLifetimeExceededCount;
    ULONG64 ullTransmittedFragmentCount;
    ULONG64 ullRTSSuccessCount;
    ULONG64 ullRTSFailureCount;
    ULONG64 ullACKFailureCount;
    ULONG64 ullReceivedFrameCount;
    ULONG64 ullMulticastReceivedFrameCount;
    ULONG64 ullPromiscuousReceivedFrameCount;
    ULONG64 ullMaxRXLifetimeExceededCount;
    ULONG64 ullFrameDuplicateCount;
    ULONG64 ullReceivedFragmentCount;
    ULONG64 ullPromiscuousReceivedFragmentCount;
    ULONG64 ullFCSErrorCount;
};

typedef struct DOT11_PHY_ID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG dot11PhyId[1];
};

typedef struct DOT11_PMKID_ENTRY {
    UCHAR BSSID[6];
    UCHAR PMKID[16];
    ULONG uFlags;
};

typedef struct DOT11_PMKID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct DOT11_PMKID_ENTRY PMKIDs[1];
};

typedef struct DOT11_PORT_STATE_NOTIFICATION {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMac[6];
    UCHAR bOpen;
};

typedef struct DOT11_PRIVACY_EXEMPTION {
    USHORT usEtherType;
    USHORT usExemptionActionType;
    USHORT usExemptionPacketType;
};

typedef struct DOT11_PRIVACY_EXEMPTION_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct DOT11_PRIVACY_EXEMPTION PrivacyExemptionEntries[1];
};

typedef struct DOT11_QOS_PARAMS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ucEnabledQoSProtocolFlags;
};

typedef struct DOT11_SSID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_SSID SSIDs[1];
};

typedef struct DOT11_STATISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 ullFourWayHandshakeFailures;
    ULONG64 ullTKIPCounterMeasuresInvoked;
    ULONG64 ullReserved;
    struct DOT11_MAC_FRAME_STATISTICS MacUcastCounters;
    struct DOT11_MAC_FRAME_STATISTICS MacMcastCounters;
    struct DOT11_PHY_FRAME_STATISTICS PhyCounters[1];
};

typedef struct DOT11_VWIFI_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uTotalNumOfEntries;
    struct _DOT11_VWIFI_COMBINATION Combinations[1];
};

typedef struct FEATURE_ERROR {
    HRESULT hr;
    USHORT lineNumber;
    PCHAR file;
    PCHAR process;
    PCHAR modulePath;
    ULONG callerReturnAddressOffset;
    PCHAR callerModule;
    PCHAR message;
    USHORT originLineNumber;
    PCHAR originFile;
    PCHAR originModule;
    ULONG originCallerReturnAddressOffset;
    PCHAR originCallerModule;
    PCHAR originName;
};

typedef struct FEATURE_LOGGED_TRAITS {
    USHORT version;
    USHORT baseVersion;
    UCHAR stage;
};

typedef struct FEATURE_STATE_CHANGE_SUBSCRIPTION__ {
    LONG unused;
};

typedef struct FILTERDBS {
    struct _X_FILTER *EthDB;
    struct _X_FILTER *NullDB;
    struct _X_FILTER *TrDB;
    PVOID YYYDB;
    PVOID XXXDB;
};

typedef struct KALLOCATION_TAG<1147946562,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1148473410,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1282164290,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1282691138,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1396859982,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1920090443,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1920226123,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1935819854,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATOR<1147946562,1> {
    struct KALLOCATION_TAG<1147946562,1> KALLOCATION_TAG<1147946562,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1148473410,1> {
    struct KALLOCATION_TAG<1148473410,1> KALLOCATION_TAG<1148473410,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1282164290,1> {
    struct KALLOCATION_TAG<1282164290,1> KALLOCATION_TAG<1282164290,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1282691138,1> {
    struct KALLOCATION_TAG<1282691138,1> KALLOCATION_TAG<1282691138,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1396859982,1> {
    struct KALLOCATION_TAG<1396859982,1> KALLOCATION_TAG<1396859982,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1920090443,1> {
    struct KALLOCATION_TAG<1920090443,1> KALLOCATION_TAG<1920090443,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1920226123,512> {
    struct KALLOCATION_TAG<1920226123,512> KALLOCATION_TAG<1920226123,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1935819854,1> {
    struct KALLOCATION_TAG<1935819854,1> KALLOCATION_TAG<1935819854,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KDefaultRegion {
    VOID Enter;
    VOID Leave;
};

typedef struct KIrqlRegion {
    VOID KIrqlRegion;
    VOID ~KIrqlRegion;
    VOID Enter;
    VOID Leave;
    UCHAR m_OldIrql;
    PVOID __vecDelDtor;
};

typedef struct KSALLOCATOR_FRAMING {
    ULONG OptionsFlags;
    ULONG RequirementsFlags;
    enum _POOL_TYPE PoolType;
    ULONG Frames;
    ULONG FrameSize;
    ULONG FileAlignment;
    LONG FramePitch;
    ULONG Reserved;
};

typedef struct KSALLOCATOR_FRAMING_EX {
    ULONG CountItems;
    ULONG PinFlags;
    struct KS_COMPRESSION OutputCompression;
    ULONG PinWeight;
    struct KS_FRAMING_ITEM FramingItem[1];
};

typedef struct KSATTRIBUTE {
    ULONG Size;
    ULONG Flags;
    struct _GUID Attribute;
};

typedef struct KSATTRIBUTE_LIST {
    ULONG Count;
    struct KSATTRIBUTE **Attributes;
};

typedef struct KSAUTOMATION_TABLE_ {
    ULONG PropertySetsCount;
    ULONG PropertyItemSize;
    struct KSPROPERTY_SET *PropertySets;
    ULONG MethodSetsCount;
    ULONG MethodItemSize;
    struct KSMETHOD_SET *MethodSets;
    ULONG EventSetsCount;
    ULONG EventItemSize;
    struct KSEVENT_SET *EventSets;
};

typedef struct KSBUFFER_ITEM {
    struct KSDPC_ITEM DpcItem;
    struct _LIST_ENTRY BufferList;
    VOID KSBUFFER_ITEM;
    VOID KSBUFFER_ITEM;
    struct KSBUFFER_ITEM *operator=;
    struct KSBUFFER_ITEM *operator=;
};

typedef struct KSCOMPONENTID {
    struct _GUID Manufacturer;
    struct _GUID Product;
    struct _GUID Component;
    struct _GUID Name;
    ULONG Version;
    ULONG Revision;
};

typedef struct KSDPC_ITEM {
    struct _KDPC Dpc;
    ULONG ReferenceCount;
    ULONG64 AccessLock;
    VOID KSDPC_ITEM;
    VOID KSDPC_ITEM;
    struct KSDPC_ITEM *operator=;
    struct KSDPC_ITEM *operator=;
};

typedef struct KSEVENTDATA {
    ULONG NotificationType;
    struct {
        PVOID Event;
        ULONG64 Reserved[2];
    } EventHandle;
    struct {
        PVOID Semaphore;
        ULONG Reserved;
        LONG Adjustment;
    } SemaphoreHandle;
    struct {
        PVOID Event;
        LONG Increment;
        ULONG64 Reserved;
    } EventObject;
    struct {
        PVOID Semaphore;
        LONG Increment;
        LONG Adjustment;
    } SemaphoreObject;
    struct {
        struct _KDPC *Dpc;
        ULONG ReferenceCount;
        ULONG64 Reserved;
    } Dpc;
    struct {
        struct _WORK_QUEUE_ITEM *WorkQueueItem;
        enum _WORK_QUEUE_TYPE WorkQueueType;
        ULONG64 Reserved;
    } WorkItem;
    struct {
        struct _WORK_QUEUE_ITEM *WorkQueueItem;
        PVOID KsWorkerObject;
        ULONG64 Reserved;
    } KsWorkItem;
    struct {
        PVOID Unused;
        LONG64 Alignment[2];
    } Alignment;
};

typedef struct KSEVENT_ITEM {
    ULONG EventId;
    ULONG DataInput;
    ULONG ExtraEntryData;
    PLONG AddHandler;
    PVOID RemoveHandler;
    PLONG SupportHandler;
};

typedef struct KSEVENT_SET {
    struct _GUID *Set;
    ULONG EventsCount;
    struct KSEVENT_ITEM *EventItem;
};

typedef struct KSFASTMETHOD_ITEM {
    ULONG MethodId;
    PUCHAR MethodHandler;
    UCHAR MethodSupported;
};

typedef struct KSFASTPROPERTY_ITEM {
    ULONG PropertyId;
    PUCHAR GetPropertyHandler;
    UCHAR GetSupported;
    PUCHAR SetPropertyHandler;
    UCHAR SetSupported;
    ULONG Reserved;
};

typedef struct KSIDENTIFIER {
    struct _GUID Set;
    ULONG Id;
    ULONG Flags;
    LONG64 Alignment;
};

typedef struct KSMETHOD_ITEM {
    ULONG MethodId;
    PLONG MethodHandler;
    UCHAR MethodSupported;
    ULONG MinMethod;
    ULONG MinData;
    PLONG SupportHandler;
    ULONG Flags;
};

typedef struct KSMETHOD_SET {
    struct _GUID *Set;
    ULONG MethodsCount;
    struct KSMETHOD_ITEM *MethodItem;
    ULONG FastIoCount;
    struct KSFASTMETHOD_ITEM *FastIoTable;
};

typedef struct KSMULTIPLE_ITEM {
    ULONG Size;
    ULONG Count;
};

typedef struct KSPIN_DESCRIPTOR {
    ULONG InterfacesCount;
    struct KSIDENTIFIER *Interfaces;
    ULONG MediumsCount;
    struct KSIDENTIFIER *Mediums;
    ULONG DataRangesCount;
    union KSDATAFORMAT **DataRanges;
    enum KSPIN_DATAFLOW DataFlow;
    enum KSPIN_COMMUNICATION Communication;
    struct _GUID *Category;
    struct _GUID *Name;
    LONG64 Reserved;
    ULONG ConstrainedDataRangesCount;
    union KSDATAFORMAT **ConstrainedDataRanges;
};

typedef struct KSPRIORITY {
    ULONG PriorityClass;
    ULONG PrioritySubClass;
};

typedef struct KSPROPERTY_ITEM {
    ULONG PropertyId;
    PLONG GetPropertyHandler;
    UCHAR GetSupported;
    ULONG MinProperty;
    ULONG MinData;
    PLONG SetPropertyHandler;
    UCHAR SetSupported;
    struct KSPROPERTY_VALUES *Values;
    ULONG RelationsCount;
    struct KSIDENTIFIER *Relations;
    PLONG SupportHandler;
    ULONG SerializedSize;
};

typedef struct KSPROPERTY_MEMBERSHEADER {
    ULONG MembersFlags;
    ULONG MembersSize;
    ULONG MembersCount;
    ULONG Flags;
};

typedef struct KSPROPERTY_MEMBERSLIST {
    struct KSPROPERTY_MEMBERSHEADER MembersHeader;
    PVOID Members;
};

typedef struct KSPROPERTY_SET {
    struct _GUID *Set;
    ULONG PropertiesCount;
    struct KSPROPERTY_ITEM *PropertyItem;
    ULONG FastIoCount;
    struct KSFASTPROPERTY_ITEM *FastIoTable;
};

typedef struct KSPROPERTY_VALUES {
    struct KSIDENTIFIER PropTypeSet;
    ULONG MembersListCount;
    struct KSPROPERTY_MEMBERSLIST *MembersList;
};

typedef struct KSP_PIN {
    struct KSIDENTIFIER Property;
    ULONG PinId;
    ULONG Reserved;
    ULONG Flags;
};

typedef struct KSRESOLUTION {
    LONG64 Granularity;
    LONG64 Error;
};

typedef struct KSSTREAM_HEADER {
    ULONG Size;
    ULONG TypeSpecificFlags;
    struct KSTIME PresentationTime;
    LONG64 Duration;
    ULONG FrameExtent;
    ULONG DataUsed;
    PVOID Data;
    ULONG OptionsFlags;
    ULONG Reserved;
};

typedef struct KSTIME {
    LONG64 Time;
    ULONG Numerator;
    ULONG Denominator;
};

typedef struct KSTOPOLOGY_CONNECTION {
    ULONG FromNode;
    ULONG FromNodePin;
    ULONG ToNode;
    ULONG ToNodePin;
};

typedef struct KS_COMPRESSION {
    ULONG RatioNumerator;
    ULONG RatioDenominator;
    ULONG RatioConstantMargin;
};

typedef struct KS_FRAMING_ITEM {
    struct _GUID MemoryType;
    struct _GUID BusType;
    ULONG MemoryFlags;
    ULONG BusFlags;
    ULONG Flags;
    ULONG Frames;
    ULONG FileAlignment;
    LONG FramePitch;
    ULONG MemoryTypeWeight;
    struct KS_FRAMING_RANGE PhysicalRange;
    struct KS_FRAMING_RANGE_WEIGHTED FramingRange;
};

typedef struct KS_FRAMING_RANGE {
    ULONG MinFrameSize;
    ULONG MaxFrameSize;
    ULONG Stepping;
};

typedef struct KS_FRAMING_RANGE_WEIGHTED {
    struct KS_FRAMING_RANGE Range;
    ULONG InPlaceWeight;
    ULONG NotInPlaceWeight;
};

typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
};

typedef struct LIST_ENTRY64 {
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct MSIX_TABLE_POINTER {
    ULONG BaseIndexRegister : 3;
    ULONG Reserved : 29;
    ULONG TableOffset;
};

typedef struct NDISWATCHDOG__ {
    LONG unused;
};

typedef struct NDIS_ADDDEVICE_PARAMETERS {
    struct _GUID InterfaceGuid;
    union _NET_LUID_LH NetLuid;
    BOOLEAN IsPhysicalMediumAvailable;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMedium;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > ComponentId;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > ExportName;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > LegacyImFilterClass;
    BOOLEAN IsImMiniport;
    BOOLEAN IsSoftwareEnumerated;
    BOOLEAN IsVirtual;
    BOOLEAN IsPhysical;
    BOOLEAN HideInUi;
    PVOID MiniportAdapterContext;
    UCHAR IsHardwareLoopbackSupported;
    BOOLEAN IsLightWeight;
    struct _NDIS_M_DRIVER_BLOCK *MiniBlock;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > IfDescr;
    VOID NDIS_ADDDEVICE_PARAMETERS;
    VOID NDIS_ADDDEVICE_PARAMETERS;
    VOID ~NDIS_ADDDEVICE_PARAMETERS;
    struct NDIS_ADDDEVICE_PARAMETERS *operator=;
    PVOID __vecDelDtor;
};

typedef struct NDIS_BIND_DRIVER_BASE {
    VOID NDIS_BIND_DRIVER_BASE;
    VOID ~NDIS_BIND_DRIVER_BASE;
    VOID ForEachLink;
    KPushLock *GetRunningDriverLock;
    VOID SetRunningDriverIsReady;
    BOOLEAN DriverReady;
    BOOLEAN NeedsBindCompleteEvent;
    struct _LIST_ENTRY BindLinks;
    PVOID __vecDelDtor;
};

typedef struct NDIS_BIND_FILTER_DRIVER {
    struct PAGED_OBJECT<1147946562> PAGED_OBJECT<1147946562>;
    struct NDIS_BIND_DRIVER_BASE NDIS_BIND_DRIVER_BASE;
    struct _GUID Guid;
    ULONG FilterBindFlags;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > FilterClass;
    struct _NDIS_FILTER_DRIVER_BLOCK *RunningDriver;
    VOID NDIS_BIND_FILTER_DRIVER;
    VOID NDIS_BIND_FILTER_DRIVER;
    VOID SetRunningDriver;
    VOID ~NDIS_BIND_FILTER_DRIVER;
    struct NDIS_BIND_FILTER_DRIVER *operator=;
    PVOID __vecDelDtor;
};

typedef struct NDIS_BIND_FILTER_LINK {
    struct PAGED_OBJECT<1282164290> PAGED_OBJECT<1282164290>;
    struct NDIS_BIND_LINK_BASE NDIS_BIND_LINK_BASE;
    KRef<NDIS_BIND_FILTER_DRIVER> BindDriver;
    ULONG FilterIndex;
    BOOLEAN IsSameBindingAs;
    VOID NDIS_BIND_FILTER_LINK;
    VOID ~NDIS_BIND_FILTER_LINK;
    PVOID __vecDelDtor;
};

typedef struct NDIS_BIND_LINK_BASE {
    VOID LinkToDriver;
    VOID NDIS_BIND_LINK_BASE;
    VOID ~NDIS_BIND_LINK_BASE;
    Ndis::BindState BindState;
    struct _LIST_ENTRY DriverLinkage;
    PVOID __vecDelDtor;
};

typedef struct NDIS_BIND_PROTOCOL_DRIVER {
    struct PAGED_OBJECT<1148473410> PAGED_OBJECT<1148473410>;
    struct NDIS_BIND_DRIVER_BASE NDIS_BIND_DRIVER_BASE;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > Name;
    ULONG ProtocolBindFlags;
    struct _NDIS_PROTOCOL_BLOCK *RunningDriver;
    VOID NDIS_BIND_PROTOCOL_DRIVER;
    VOID NDIS_BIND_PROTOCOL_DRIVER;
    VOID SetRunningDriver;
    VOID ~NDIS_BIND_PROTOCOL_DRIVER;
    struct NDIS_BIND_PROTOCOL_DRIVER *operator=;
    PVOID __vecDelDtor;
};

typedef struct NDIS_BIND_PROTOCOL_LINK {
    struct PAGED_OBJECT<1282691138> PAGED_OBJECT<1282691138>;
    struct NDIS_BIND_LINK_BASE NDIS_BIND_LINK_BASE;
    KRef<NDIS_BIND_PROTOCOL_DRIVER> BindDriver;
    BOOLEAN IsSameBindingAs;
    VOID NDIS_BIND_PROTOCOL_LINK;
    VOID ~NDIS_BIND_PROTOCOL_LINK;
    PVOID __vecDelDtor;
};

typedef struct NDIS_EVENT_LOG_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_MEMORYDUMP_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_MINIPORT_ADAPTER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_NBL_TRACKER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_PCW_CONTEXT {
    VOID NDIS_PCW_CONTEXT;
    struct _NDIS_PCW_DATA_BLOCK *PcwBlock;
    ULONG DatapathEventsMask;
    ULONG DatapathCyclesMask;
    ULONG CurrentCpu;
};

typedef struct NDIS_PD_BM_DOMAIN_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_PD_BM_DOMAIN_MEMBER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_PD_COUNTER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_PD_EXT_CLIENT_CONTEXT__ {
    LONG unused;
};

typedef struct NDIS_PD_EXT_PROVIDER_CONTEXT__ {
    LONG unused;
};

typedef struct NDIS_PD_FILTER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_PD_PROVIDER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_REFCOUNT_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_RESTART_INFORMATION {
    struct _NDIS_RESTART_ATTRIBUTES Attributes;
    UCHAR Padding[16];
    struct _NDIS_RESTART_GENERAL_ATTRIBUTES General;
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES RssCaps;
    struct _NDIS_PROTOCOL_RESTART_PARAMETERS ProtocolParameters;
    ULONG MiniportMacOptionsToPreserve;
    Rtl::KArray<unsigned char,1> FilterInstanceBuffer;
    VOID NDIS_RESTART_INFORMATION;
    VOID ~NDIS_RESTART_INFORMATION;
    PVOID __vecDelDtor;
};

typedef struct NDIS_WDF_CX_DRIVER_CONTEXT__ {
    LONG unused;
};

typedef struct NDK_VERSION {
    USHORT Major;
    USHORT Minor;
};

typedef struct NONPAGED_OBJECT<1920226123> {
    struct KALLOCATOR<1920226123,512> KALLOCATOR<1920226123,512>;
    struct NdisDebugBlock<1920226123> NdisDebugBlock<1920226123>;
};

typedef struct Ndis::BindEngine {
    VOID BindEngine;
    VOID BindEngine;
    VOID ~BindEngine;
    struct Ndis::BindEngine operator=;
    VOID Initialize;
    VOID BeginPolicyUpdates;
    VOID EndPolicyUpdates;
    VOID ApplyBindChanges;
    VOID SetDirty;
    struct NDIS_BIND_LINK_BASE *GetCurrentLink;
    VOID BeginBindOperation;
    VOID EndBindOperation;
    VOID LockBindings;
    VOID UnlockBindings;
    VOID UpdateBindings;
    BOOLEAN Iterate;
    VOID ApplyRules;
    VOID UpdateBindingsWorkItem;
    VOID DispatchPendingWork;
    struct _NDIS_MINIPORT_BLOCK *m_miniport;
    struct _KTHREAD *m_bindThread;
    struct NDIS_BIND_LINK_BASE *m_currentOperation;
    KPushLock m_lock;
    KWaitEvent m_bindCompleteEvent;
    KWorkItem<Ndis::BindEngine> m_asyncBindWorkItem;
    BOOLEAN m_isDirty;
    KWaitEvent *m_removeReadyEvent;
    ULONG s_NumBindOperationsInProgress;
    PVOID __vecDelDtor;
};

typedef struct Ndis::BindStack {
    struct PAGED_OBJECT<1396859982> PAGED_OBJECT<1396859982>;
    Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1> Protocols;
    Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1> Filters;
    Ndis::BindState Miniport;
    ULONG ChangeEpoch;
    VOID BindStack;
    BOOLEAN LoadFromRegistry;
    struct NDIS_BIND_PROTOCOL_LINK *CreateDynamicBinding;
    BOOLEAN DeleteDynamicBinding;
    LONG AddStaticProtocolBinding;
    LONG AddStaticFilterBinding;
    LONG OpenV2InterfaceKey;
    wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> > BuildFilterLink;
    wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> > BuildProtocolLink;
    wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> > BuildProtocolLink;
    LONG ReadV2FilterList;
    LONG ReadV2ProtocolList;
    BOOLEAN ReadV3InterfaceBindings;
    BOOLEAN ReadV2InterfaceBindings;
    VOID ~BindStack;
    PVOID __vecDelDtor;
};

typedef struct NdisDebugBlock<1147946562> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1148473410> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1230455886> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1282164290> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1282691138> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1396859982> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1920090443> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1920226123> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1935819854> {
    VOID ASSERT_VALID;
};

typedef struct PAGED_OBJECT<1147946562> {
    struct KALLOCATOR<1147946562,1> KALLOCATOR<1147946562,1>;
    struct NdisDebugBlock<1147946562> NdisDebugBlock<1147946562>;
};

typedef struct PAGED_OBJECT<1148473410> {
    struct KALLOCATOR<1148473410,1> KALLOCATOR<1148473410,1>;
    struct NdisDebugBlock<1148473410> NdisDebugBlock<1148473410>;
};

typedef struct PAGED_OBJECT<1282164290> {
    struct KALLOCATOR<1282164290,1> KALLOCATOR<1282164290,1>;
    struct NdisDebugBlock<1282164290> NdisDebugBlock<1282164290>;
};

typedef struct PAGED_OBJECT<1282691138> {
    struct KALLOCATOR<1282691138,1> KALLOCATOR<1282691138,1>;
    struct NdisDebugBlock<1282691138> NdisDebugBlock<1282691138>;
};

typedef struct PAGED_OBJECT<1396859982> {
    struct KALLOCATOR<1396859982,1> KALLOCATOR<1396859982,1>;
    struct NdisDebugBlock<1396859982> NdisDebugBlock<1396859982>;
};

typedef struct PAGED_OBJECT<1920090443> {
    struct KALLOCATOR<1920090443,1> KALLOCATOR<1920090443,1>;
    struct NdisDebugBlock<1920090443> NdisDebugBlock<1920090443>;
};

typedef struct PAGED_OBJECT<1935819854> {
    struct KALLOCATOR<1935819854,1> KALLOCATOR<1935819854,1>;
    struct NdisDebugBlock<1935819854> NdisDebugBlock<1935819854>;
};

typedef struct PCI_MSIX_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-MessageControl>;
    struct {
        USHORT TableSize : 11;
        USHORT Reserved : 3;
        USHORT FunctionMask : 1;
        USHORT MSIXEnable : 1;
    } MessageControl;
    struct MSIX_TABLE_POINTER MessageTable;
    struct MSIX_TABLE_POINTER PBATable;
};

typedef struct PCI_MSI_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     _PCI_MSI_MESSAGE_CONTROL;
    struct PCI_MSI_CAPABILITY::_PCI_MSI_MESSAGE_CONTROL MessageControl;
     <unnamed-type-MessageAddressLower>;
    union {
         _PCI_MSI_MESSAGE_ADDRESS;
        struct {
            ULONG Reserved : 2;
            ULONG Address : 30;
        } Register;
        ULONG Raw;
    } MessageAddressLower;
    struct {
        USHORT MessageData;
        USHORT Reserved;
        ULONG MaskBits;
        ULONG PendingBits;
    } Option32Bit;
    struct {
        ULONG MessageAddressUpper;
        USHORT MessageData;
        USHORT Reserved;
        ULONG MaskBits;
        ULONG PendingBits;
    } Option64Bit;
};

typedef struct PCI_MSI_CAPABILITY::_PCI_MSI_MESSAGE_CONTROL {
    USHORT MSIEnable : 1;
    USHORT MultipleMessageCapable : 3;
    USHORT MultipleMessageEnable : 3;
    USHORT CapableOf64Bits : 1;
    USHORT PerVectorMaskCapable : 1;
    USHORT Reserved : 7;
};

typedef struct PNDIS_PER_PROCESSOR_SLOT__ {
    LONG unused;
};

typedef struct RECORDER_LOG__ {
    LONG unused;
};

typedef struct Rtl::KString {
    struct NONPAGED_OBJECT<1920226123> NONPAGED_OBJECT<1920226123>;
    struct _UNICODE_STRING _UNICODE_STRING;
    struct Rtl::KString *Initialize;
    struct Rtl::KString *Initialize;
    VOID KString;
    VOID KString;
    VOID KString;
    struct Rtl::KString *operator=;
};

typedef struct SCOPE_ID {
    ULONG Zone : 28;
    ULONG Level : 4;
    ULONG Value;
};

typedef struct WORKITEM_WITH_IRP {
    struct NdisDebugBlock<1230455886> NdisDebugBlock<1230455886>;
    struct _WORK_QUEUE_ITEM Workitem;
    struct _IRP *Irp;
    VOID Initialize;
    VOID WORKITEM_WITH_IRP;
};

typedef struct _ACCESS_REASONS {
    ULONG Data[32];
};

typedef struct _ACCESS_STATE {
    struct _LUID OperationID;
    UCHAR SecurityEvaluated;
    UCHAR GenerateAudit;
    UCHAR GenerateOnClose;
    UCHAR PrivilegesAllocated;
    ULONG Flags;
    ULONG RemainingDesiredAccess;
    ULONG PreviouslyGrantedAccess;
    ULONG OriginalDesiredAccess;
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
    PVOID SecurityDescriptor;
    PVOID AuxData;
     <unnamed-type-Privileges>;
    union {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
        struct _PRIVILEGE_SET PrivilegeSet;
    } Privileges;
    UCHAR AuditPrivileges;
    struct _UNICODE_STRING ObjectName;
    struct _UNICODE_STRING ObjectTypeName;
};

typedef struct _ACTIVATION_CONTEXT {
};

typedef struct _ACTIVATION_CONTEXT_DATA {
};

typedef struct _ACTIVATION_CONTEXT_STACK {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
    struct _LIST_ENTRY FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _ASSEMBLY_STORAGE_MAP {
};

typedef struct _AUX_ACCESS_DATA {
    struct _PRIVILEGE_SET *PrivilegesUsed;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG AccessesToAudit;
    ULONG MaximumAuditMask;
    struct _GUID TransactionId;
    PVOID NewSecurityDescriptor;
    PVOID ExistingSecurityDescriptor;
    PVOID ParentSecurityDescriptor;
    PVOID DeRefSecurityDescriptor;
    PVOID SDLock;
    struct _ACCESS_REASONS AccessReasons;
    UCHAR GenerateStagingEvents;
};

typedef struct _BSSID_INFO {
    UCHAR BSSID[6];
    UCHAR PMKID[16];
};

typedef struct _CLIENT_ID {
    PVOID UniqueProcess;
    PVOID UniqueThread;
};

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
     <unnamed-type-u>;
    union {
         <unnamed-type-Generic>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Generic;
         <unnamed-type-Port>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Port;
         <unnamed-type-Interrupt>;
        struct {
            USHORT Level;
            USHORT Group;
            ULONG Vector;
            ULONG64 Affinity;
        } Interrupt;
         <unnamed-type-MessageInterrupt>;
        struct {
            struct {
                USHORT Group;
                USHORT MessageCount;
                ULONG Vector;
                ULONG64 Affinity;
            } Raw;
            struct {
                USHORT Level;
                USHORT Group;
                ULONG Vector;
                ULONG64 Affinity;
            } Translated;
        } MessageInterrupt;
         <unnamed-type-Memory>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Memory;
         <unnamed-type-Dma>;
        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;
         <unnamed-type-DmaV3>;
        struct {
            ULONG Channel;
            ULONG RequestLine;
            UCHAR TransferWidth;
            UCHAR Reserved1;
            UCHAR Reserved2;
            UCHAR Reserved3;
        } DmaV3;
         <unnamed-type-DevicePrivate>;
        struct {
            ULONG Data[3];
        } DevicePrivate;
         <unnamed-type-BusNumber>;
        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;
         <unnamed-type-DeviceSpecificData>;
        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
         <unnamed-type-Memory40>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length40;
        } Memory40;
         <unnamed-type-Memory48>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length48;
        } Memory48;
         <unnamed-type-Memory64>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length64;
        } Memory64;
         <unnamed-type-Connection>;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

typedef struct _COMPRESSED_DATA_INFO {
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};

typedef struct _CONTEXT {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5Home;
    ULONG64 P6Home;
    ULONG ContextFlags;
    ULONG MxCsr;
    USHORT SegCs;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    USHORT SegSs;
    ULONG EFlags;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rbx;
    ULONG64 Rsp;
    ULONG64 Rbp;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Rip;
    struct _XSAVE_FORMAT FltSave;
    struct _M128A Header[2];
    struct _M128A Legacy[8];
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    struct _M128A VectorRegister[26];
    ULONG64 VectorControl;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
};

typedef struct _CO_ADDRESS {
    ULONG AddressSize;
    UCHAR Address[1];
};

typedef struct _CO_ADDRESS_LIST {
    ULONG NumberOfAddressesAvailable;
    ULONG NumberOfAddresses;
    struct _CO_ADDRESS AddressList;
};

typedef struct _CO_CALL_MANAGER_PARAMETERS {
    struct _flowspec Transmit;
    struct _flowspec Receive;
    struct _CO_SPECIFIC_PARAMETERS CallMgrSpecific;
};

typedef struct _CO_CALL_PARAMETERS {
    ULONG Flags;
    struct _CO_CALL_MANAGER_PARAMETERS *CallMgrParameters;
    struct _CO_MEDIA_PARAMETERS *MediaParameters;
};

typedef struct _CO_MEDIA_PARAMETERS {
    ULONG Flags;
    ULONG ReceivePriority;
    ULONG ReceiveSizeHint;
    struct _CO_SPECIFIC_PARAMETERS MediaSpecific;
};

typedef struct _CO_PVC {
    PVOID NdisAfHandle;
    struct _CO_SPECIFIC_PARAMETERS PvcParameters;
};

typedef struct _CO_SPECIFIC_PARAMETERS {
    ULONG ParamType;
    ULONG Length;
    UCHAR Parameters[1];
};

typedef struct _CURDIR {
    struct _UNICODE_STRING DosPath;
    PVOID Handle;
};

typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
    ULONG Size;
    PWCHAR TriggerId;
};

typedef struct _DEVICE_CAPABILITIES {
    USHORT Size;
    USHORT Version;
    ULONG DeviceD1 : 1;
    ULONG DeviceD2 : 1;
    ULONG LockSupported : 1;
    ULONG EjectSupported : 1;
    ULONG Removable : 1;
    ULONG DockDevice : 1;
    ULONG UniqueID : 1;
    ULONG SilentInstall : 1;
    ULONG RawDeviceOK : 1;
    ULONG SurpriseRemovalOK : 1;
    ULONG WakeFromD0 : 1;
    ULONG WakeFromD1 : 1;
    ULONG WakeFromD2 : 1;
    ULONG WakeFromD3 : 1;
    ULONG HardwareDisabled : 1;
    ULONG NonDynamic : 1;
    ULONG WarmEjectSupported : 1;
    ULONG NoDisplayInUI : 1;
    ULONG Reserved1 : 1;
    ULONG WakeFromInterrupt : 1;
    ULONG SecureDevice : 1;
    ULONG ChildOfVgaEnabledBridge : 1;
    ULONG DecodeIoOnBoot : 1;
    ULONG Reserved : 9;
    ULONG Address;
    ULONG UINumber;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _SYSTEM_POWER_STATE SystemWake;
    enum _DEVICE_POWER_STATE DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct _DEVICE_OBJECT {
    SHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    struct _IO_TIMER *Timer;
    ULONG Flags;
    ULONG Characteristics;
    struct _VPB *Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CHAR StackSize;
     <unnamed-type-Queue>;
    union {
        struct _LIST_ENTRY ListEntry;
        struct _WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    struct _KDEVICE_QUEUE DeviceQueue;
    struct _KDPC Dpc;
    ULONG ActiveThreadCount;
    PVOID SecurityDescriptor;
    struct _KEVENT DeviceLock;
    USHORT SectorSize;
    USHORT Spare1;
    struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
    PVOID Reserved;
    VOID _DEVICE_OBJECT;
    VOID _DEVICE_OBJECT;
    struct _DEVICE_OBJECT *operator=;
    struct _DEVICE_OBJECT *operator=;
};

typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
};

typedef struct _DEVICE_RESET_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG DeviceReset;
    ULONG SupportedResetTypes;
    PVOID Reserved;
};

typedef struct _DEVOBJ_EXTENSION {
    SHORT Type;
    USHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PowerFlags;
    struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
    ULONG ExtensionFlags;
    PVOID DeviceNode;
    struct _DEVICE_OBJECT *AttachedTo;
    LONG StartIoCount;
    LONG StartIoKey;
    ULONG StartIoFlags;
    struct _VPB *Vpb;
    PVOID DependencyNode;
    PVOID InterruptContext;
    PVOID VerifierContext;
};

typedef struct _DEVPROPCOMPKEY {
    struct _DEVPROPKEY Key;
    enum _DEVPROPSTORE Store;
    PWCHAR LocaleName;
};

typedef struct _DEVPROPKEY {
    struct _GUID fmtid;
    ULONG pid;
};

typedef struct _DISPATCHER_HEADER {
    LONG Lock;
    LONG LockNV;
    UCHAR Type;
    UCHAR Signalling;
    UCHAR Size;
    UCHAR Reserved1;
    UCHAR TimerType;
    UCHAR TimerControlFlags;
    UCHAR Absolute : 1;
    UCHAR Wake : 1;
    UCHAR EncodedTolerableDelay : 6;
    UCHAR Hand;
    UCHAR TimerMiscFlags;
    UCHAR Index : 6;
    UCHAR Inserted : 1;
    UCHAR Expired : 1;
    UCHAR Timer2Type;
    UCHAR Timer2Flags;
    UCHAR Timer2Inserted : 1;
    UCHAR Timer2Expiring : 1;
    UCHAR Timer2CancelPending : 1;
    UCHAR Timer2SetPending : 1;
    UCHAR Timer2Running : 1;
    UCHAR Timer2Disabled : 1;
    UCHAR Timer2ReservedFlags : 2;
    UCHAR Timer2ComponentId;
    UCHAR Timer2RelativeId;
    UCHAR QueueType;
    UCHAR QueueControlFlags;
    UCHAR Abandoned : 1;
    UCHAR DisableIncrement : 1;
    UCHAR QueueReservedControlFlags : 6;
    UCHAR QueueSize;
    UCHAR QueueReserved;
    UCHAR ThreadType;
    UCHAR ThreadReserved;
    UCHAR ThreadControlFlags;
    UCHAR CycleProfiling : 1;
    UCHAR CounterProfiling : 1;
    UCHAR GroupScheduling : 1;
    UCHAR AffinitySet : 1;
    UCHAR Tagged : 1;
    UCHAR EnergyProfiling : 1;
    UCHAR SchedulerAssist : 1;
    UCHAR ThreadReservedControlFlags : 1;
    UCHAR DebugActive;
    UCHAR ActiveDR7 : 1;
    UCHAR Instrumented : 1;
    UCHAR Minimal : 1;
    UCHAR Reserved4 : 3;
    UCHAR UmsScheduled : 1;
    UCHAR UmsPrimary : 1;
    UCHAR MutantType;
    UCHAR MutantSize;
    UCHAR DpcActive;
    UCHAR MutantReserved;
    LONG SignalState;
    struct _LIST_ENTRY WaitListHead;
    VOID _DISPATCHER_HEADER;
    VOID _DISPATCHER_HEADER;
    struct _DISPATCHER_HEADER *operator=;
    struct _DISPATCHER_HEADER *operator=;
};

typedef struct _DMA_ADAPTER {
    USHORT Version;
    USHORT Size;
    struct _DMA_OPERATIONS *DmaOperations;
};

typedef struct _DMA_ADAPTER_INFO {
    ULONG Version;
    struct _DMA_ADAPTER_INFO_V1 V1;
};

typedef struct _DMA_ADAPTER_INFO_V1 {
    ULONG ReadDmaCounterAvailable;
    ULONG ScatterGatherLimit;
    ULONG DmaAddressWidth;
    ULONG Flags;
    ULONG MinimumTransferUnit;
};

typedef struct _DMA_OPERATIONS {
    ULONG Size;
    PVOID PutDmaAdapter;
    PVOID *AllocateCommonBuffer;
    PVOID FreeCommonBuffer;
    PLONG AllocateAdapterChannel;
    PUCHAR FlushAdapterBuffers;
    PVOID FreeAdapterChannel;
    PVOID FreeMapRegisters;
    union _LARGE_INTEGER *MapTransfer;
    PULONG GetDmaAlignment;
    PULONG ReadDmaCounter;
    PLONG GetScatterGatherList;
    PVOID PutScatterGatherList;
    PLONG CalculateScatterGatherList;
    PLONG BuildScatterGatherList;
    PLONG BuildMdlFromScatterGatherList;
    PLONG GetDmaAdapterInfo;
    PLONG GetDmaTransferInfo;
    PLONG InitializeDmaTransferContext;
    PVOID *AllocateCommonBufferEx;
    PLONG AllocateAdapterChannelEx;
    PLONG ConfigureAdapterChannel;
    PUCHAR CancelAdapterChannel;
    PLONG MapTransferEx;
    PLONG GetScatterGatherListEx;
    PLONG BuildScatterGatherListEx;
    PLONG FlushAdapterBuffersEx;
    PVOID FreeAdapterObject;
    PLONG CancelMappedTransfer;
    PLONG AllocateDomainCommonBuffer;
    PLONG FlushDmaBuffer;
    PLONG JoinDmaDomain;
    PLONG LeaveDmaDomain;
    PVOID *GetDmaDomain;
    PVOID *AllocateCommonBufferWithBounds;
};

typedef struct _DMA_TRANSFER_INFO {
    ULONG Version;
    struct _DMA_TRANSFER_INFO_V1 V1;
    struct _DMA_TRANSFER_INFO_V2 V2;
};

typedef struct _DMA_TRANSFER_INFO_V1 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
};

typedef struct _DMA_TRANSFER_INFO_V2 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
    ULONG LogicalPageCount;
};

typedef struct _DOT11_ADDITIONAL_IE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uBeaconIEsOffset;
    ULONG uBeaconIEsLength;
    ULONG uResponseIEsOffset;
    ULONG uResponseIEsLength;
};

typedef struct _DOT11_ASSOCIATION_INFO_EX {
    UCHAR PeerMacAddress[6];
    UCHAR BSSID[6];
    USHORT usCapabilityInformation;
    USHORT usListenInterval;
    UCHAR ucPeerSupportedRates[255];
    USHORT usAssociationID;
    enum _DOT11_ASSOCIATION_STATE dot11AssociationState;
    enum _DOT11_POWER_MODE dot11PowerMode;
    union _LARGE_INTEGER liAssociationUpTime;
    ULONG64 ullNumOfTxPacketSuccesses;
    ULONG64 ullNumOfTxPacketFailures;
    ULONG64 ullNumOfRxPacketSuccesses;
    ULONG64 ullNumOfRxPacketFailures;
};

typedef struct _DOT11_AVAILABLE_CHANNEL_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG uChannelNumber[1];
};

typedef struct _DOT11_AVAILABLE_FREQUENCY_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG uFrequencyValue[1];
};

typedef struct _DOT11_DISASSOCIATE_PEER_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
    USHORT usReason;
};

typedef struct _DOT11_EXTAP_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uScanSSIDListSize;
    ULONG uDesiredSSIDListSize;
    ULONG uPrivacyExemptionListSize;
    ULONG uAssociationTableSize;
    ULONG uDefaultKeyTableSize;
    ULONG uWEPKeyValueMaxLength;
    UCHAR bStrictlyOrderedServiceClassImplemented;
    ULONG uNumSupportedCountryOrRegionStrings;
    PUCHAR pSupportedCountryOrRegionStrings[3];
    ULONG uInfraNumSupportedUcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedUcastAlgoPairs;
    ULONG uInfraNumSupportedMcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedMcastAlgoPairs;
};

typedef struct _DOT11_INCOMING_ASSOC_DECISION {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
    UCHAR bAccept;
    USHORT usReasonCode;
    ULONG uAssocResponseIEsOffset;
    ULONG uAssocResponseIEsLength;
};

typedef struct _DOT11_PEER_INFO {
    UCHAR MacAddress[6];
    USHORT usCapabilityInformation;
    enum _DOT11_AUTH_ALGORITHM AuthAlgo;
    enum _DOT11_CIPHER_ALGORITHM UnicastCipherAlgo;
    enum _DOT11_CIPHER_ALGORITHM MulticastCipherAlgo;
    UCHAR bWpsEnabled;
    USHORT usListenInterval;
    UCHAR ucSupportedRates[255];
    USHORT usAssociationID;
    enum _DOT11_ASSOCIATION_STATE AssociationState;
    enum _DOT11_POWER_MODE PowerMode;
    union _LARGE_INTEGER liAssociationUpTime;
    struct _DOT11_PEER_STATISTICS Statistics;
};

typedef struct _DOT11_PEER_INFO_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_PEER_INFO PeerInfo[1];
};

typedef struct _DOT11_PEER_STATISTICS {
    ULONG64 ullDecryptSuccessCount;
    ULONG64 ullDecryptFailureCount;
    ULONG64 ullTxPacketSuccessCount;
    ULONG64 ullTxPacketFailureCount;
    ULONG64 ullRxPacketSuccessCount;
    ULONG64 ullRxPacketFailureCount;
};

typedef struct _DOT11_RSN_REKEY_PARAMETERS {
    ULONG Flags;
    UCHAR KCK[16];
    UCHAR KEK[16];
    ULONG64 KeyReplayCounter;
};

typedef struct _DOT11_SSID {
    ULONG uSSIDLength;
    UCHAR ucSSID[32];
};

typedef struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 {
    UCHAR ucSupportedTxDataRatesValue[255];
    UCHAR ucSupportedRxDataRatesValue[255];
};

typedef struct _DOT11_VWIFI_COMBINATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumInfrastructure;
    ULONG uNumAdhoc;
    ULONG uNumSoftAP;
};

typedef struct _DOT11_WFD_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumConcurrentGORole;
    ULONG uNumConcurrentClientRole;
    ULONG WPSVersionsSupported;
    UCHAR bServiceDiscoverySupported;
    UCHAR bClientDiscoverabilitySupported;
    UCHAR bInfrastructureManagementSupported;
    ULONG uMaxSecondaryDeviceTypeListSize;
    UCHAR DeviceAddress[6];
    ULONG uInterfaceAddressListCount;
    PUCHAR pInterfaceAddressList[6];
    ULONG uNumSupportedCountryOrRegionStrings;
    PUCHAR pSupportedCountryOrRegionStrings[3];
    ULONG uDiscoveryFilterListSize;
    ULONG uGORoleClientTableSize;
};

typedef struct _DRIVER_EXTENSION {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG AddDevice;
    ULONG Count;
    struct _UNICODE_STRING ServiceKeyName;
};

typedef struct _DRIVER_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG Flags;
    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    struct _DRIVER_EXTENSION *DriverExtension;
    struct _UNICODE_STRING DriverName;
    struct _UNICODE_STRING *HardwareDatabase;
    struct _FAST_IO_DISPATCH *FastIoDispatch;
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG MajorFunction[28];
};

typedef struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS {
    ULONG Flags;
};

typedef struct _ECP_LIST {
};

typedef struct _EJOB {
};

typedef struct _EPROCESS {
};

typedef struct _ERESOURCE {
    struct _LIST_ENTRY SystemResourcesList;
    struct _OWNER_ENTRY *OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    UCHAR ReservedLowFlags;
    UCHAR WaiterPriority;
    PVOID SharedWaiters;
    PVOID ExclusiveWaiters;
    struct _OWNER_ENTRY OwnerEntry;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;
    PVOID Reserved2;
    PVOID Address;
    ULONG64 CreatorBackTraceIndex;
    ULONG64 SpinLock;
};

typedef struct _ETHREAD {
};

typedef struct _ETH_MULTICAST_WRAPPER {
    ULONG RefCount;
    UCHAR MCastAddress[6];
};

typedef struct _ETW_BUFFER_CONTEXT {
    UCHAR ProcessorNumber;
    UCHAR Alignment;
    USHORT ProcessorIndex;
    USHORT LoggerId;
};

typedef struct _EVENT_DATA_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Reserved;
    UCHAR Type;
    UCHAR Reserved1;
    USHORT Reserved2;
};

typedef struct _EVENT_DESCRIPTOR {
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONG64 Keyword;
};

typedef struct _EVENT_FILTER_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Type;
};

typedef struct _EVENT_HEADER {
    USHORT Size;
    USHORT HeaderType;
    USHORT Flags;
    USHORT EventProperty;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID ProviderId;
    struct _EVENT_DESCRIPTOR EventDescriptor;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    struct _GUID ActivityId;
};

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM {
    USHORT Reserved1;
    USHORT ExtType;
    USHORT Linkage : 1;
    USHORT Reserved2 : 15;
    USHORT DataSize;
    ULONG64 DataPtr;
};

typedef struct _EVENT_RECORD {
    struct _EVENT_HEADER EventHeader;
    struct _ETW_BUFFER_CONTEXT BufferContext;
    USHORT ExtendedDataCount;
    USHORT UserDataLength;
    struct _EVENT_HEADER_EXTENDED_DATA_ITEM *ExtendedData;
    PVOID UserData;
    PVOID UserContext;
};

typedef struct _EXCEPTION_RECORD {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    enum _EXCEPTION_DISPOSITION *Handler;
};

typedef struct _EXT_DELETE_PARAMETERS {
    ULONG Version;
    ULONG Reserved;
    PVOID DeleteCallback;
    PVOID DeleteContext;
};

typedef struct _EXT_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONG64 NoWakeTolerance;
};

typedef struct _EX_PUSH_LOCK {
    ULONG64 Locked : 1;
    ULONG64 Waiting : 1;
    ULONG64 Waking : 1;
    ULONG64 MultipleShared : 1;
    ULONG64 Shared : 60;
    ULONG64 Value;
    PVOID Ptr;
};

typedef struct _EX_RUNDOWN_REF {
    ULONG64 Count;
    PVOID Ptr;
};

typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PUCHAR FastIoCheckIfPossible;
    PUCHAR FastIoRead;
    PUCHAR FastIoWrite;
    PUCHAR FastIoQueryBasicInfo;
    PUCHAR FastIoQueryStandardInfo;
    PUCHAR FastIoLock;
    PUCHAR FastIoUnlockSingle;
    PUCHAR FastIoUnlockAll;
    PUCHAR FastIoUnlockAllByKey;
    PUCHAR FastIoDeviceControl;
    PVOID AcquireFileForNtCreateSection;
    PVOID ReleaseFileForNtCreateSection;
    PVOID FastIoDetachDevice;
    PUCHAR FastIoQueryNetworkOpenInfo;
    PLONG AcquireForModWrite;
    PUCHAR MdlRead;
    PUCHAR MdlReadComplete;
    PUCHAR PrepareMdlWrite;
    PUCHAR MdlWriteComplete;
    PUCHAR FastIoReadCompressed;
    PUCHAR FastIoWriteCompressed;
    PUCHAR MdlReadCompleteCompressed;
    PUCHAR MdlWriteCompleteCompressed;
    PUCHAR FastIoQueryOpen;
    PLONG ReleaseForModWrite;
    PLONG AcquireForCcFlush;
    PLONG ReleaseForCcFlush;
};

typedef struct _FAST_MUTEX {
    LONG Count;
    PVOID Owner;
    ULONG Contention;
    struct _KEVENT Event;
    ULONG OldIrql;
    VOID _FAST_MUTEX;
    VOID _FAST_MUTEX;
    struct _FAST_MUTEX *operator=;
    struct _FAST_MUTEX *operator=;
};

typedef struct _FILE_BASIC_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};

typedef struct _FILE_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _VPB *Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    struct _SECTION_OBJECT_POINTERS *SectionObjectPointer;
    PVOID PrivateCacheMap;
    LONG FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    UCHAR LockOperation;
    UCHAR DeletePending;
    UCHAR ReadAccess;
    UCHAR WriteAccess;
    UCHAR DeleteAccess;
    UCHAR SharedRead;
    UCHAR SharedWrite;
    UCHAR SharedDelete;
    ULONG Flags;
    struct _UNICODE_STRING FileName;
    union _LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    struct _KEVENT Lock;
    struct _KEVENT Event;
    struct _IO_COMPLETION_CONTEXT *CompletionContext;
    ULONG64 IrpListLock;
    struct _LIST_ENTRY IrpList;
    PVOID FileObjectExtension;
    VOID _FILE_OBJECT;
    VOID _FILE_OBJECT;
    struct _FILE_OBJECT *operator=;
    struct _FILE_OBJECT *operator=;
};

typedef struct _FILE_STANDARD_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FILTER_PAUSE_RESTART_CONTEXT {
    struct _NDIS_FILTER_BLOCK *Filter;
    LONG Status;
    struct _KEVENT Event;
    VOID _FILTER_PAUSE_RESTART_CONTEXT;
    VOID _FILTER_PAUSE_RESTART_CONTEXT;
    struct _FILTER_PAUSE_RESTART_CONTEXT *operator=;
    struct _FILTER_PAUSE_RESTART_CONTEXT *operator=;
};

typedef struct _FLS_CALLBACK_INFO {
};

typedef struct _GDI_TEB_BATCH {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG64 HDC;
    ULONG Buffer[310];
};

typedef struct _GENERAL_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERAL_LOOKASIDE_POOL {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERIC_MAPPING {
    ULONG GenericRead;
    ULONG GenericWrite;
    ULONG GenericExecute;
    ULONG GenericAll;
};

typedef struct _GEN_GET_NETCARD_TIME {
    ULONG64 ReadTime;
};

typedef struct _GEN_GET_TIME_CAPS {
    ULONG Flags;
    ULONG ClockPrecision;
};

typedef struct _GROUP_AFFINITY {
    ULONG64 Mask;
    USHORT Group;
    USHORT Reserved[3];
};

typedef struct _GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct _IF_COUNTED_STRING_LH {
    USHORT Length;
    WCHAR String[257];
};

typedef struct _IF_PHYSICAL_ADDRESS_LH {
    USHORT Length;
    UCHAR Address[32];
};

typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG VirtualAddress;
    ULONG Size;
};

typedef struct _IMAGE_DOS_HEADER {
    USHORT e_magic;
    USHORT e_cblp;
    USHORT e_cp;
    USHORT e_crlc;
    USHORT e_cparhdr;
    USHORT e_minalloc;
    USHORT e_maxalloc;
    USHORT e_ss;
    USHORT e_sp;
    USHORT e_csum;
    USHORT e_ip;
    USHORT e_cs;
    USHORT e_lfarlc;
    USHORT e_ovno;
    USHORT e_res[4];
    USHORT e_oemid;
    USHORT e_oeminfo;
    USHORT e_res2[10];
    LONG e_lfanew;
};

typedef struct _IMAGE_FILE_HEADER {
    USHORT Machine;
    USHORT NumberOfSections;
    ULONG TimeDateStamp;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
    USHORT SizeOfOptionalHeader;
    USHORT Characteristics;
};

typedef struct _IMAGE_NT_HEADERS64 {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG64 ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG64 SizeOfStackReserve;
    ULONG64 SizeOfStackCommit;
    ULONG64 SizeOfHeapReserve;
    ULONG64 SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[3];
};

typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
};

typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
};

typedef struct _IO_DRIVER_CREATE_CONTEXT {
    SHORT Size;
    struct _ECP_LIST *ExtraCreateParameter;
    PVOID DeviceObjectHint;
    struct _TXN_PARAMETER_BLOCK *TxnParameters;
    struct _EJOB *SiloContext;
};

typedef struct _IO_INTERRUPT_MESSAGE_INFO {
    UCHAR UnifiedIrql;
    ULONG MessageCount;
    struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY MessageInfo[1];
};

typedef struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY {
    union _LARGE_INTEGER MessageAddress;
    ULONG64 TargetProcessorSet;
    struct _KINTERRUPT *InterruptObject;
    ULONG MessageData;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _KINTERRUPT_POLARITY Polarity;
};

typedef struct _IO_PRIORITY_INFO {
    ULONG Size;
    ULONG ThreadPriority;
    ULONG PagePriority;
    enum _IO_PRIORITY_HINT IoPriority;
};

typedef struct _IO_REMOVE_LOCK {
    struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
    VOID _IO_REMOVE_LOCK;
    VOID _IO_REMOVE_LOCK;
    struct _IO_REMOVE_LOCK *operator=;
    struct _IO_REMOVE_LOCK *operator=;
};

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
    UCHAR Removed;
    UCHAR Reserved[3];
    LONG IoCount;
    struct _KEVENT RemoveEvent;
    VOID _IO_REMOVE_LOCK_COMMON_BLOCK;
    VOID _IO_REMOVE_LOCK_COMMON_BLOCK;
    struct _IO_REMOVE_LOCK_COMMON_BLOCK *operator=;
    struct _IO_REMOVE_LOCK_COMMON_BLOCK *operator=;
};

typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;
    UCHAR ShareDisposition;
    UCHAR Spare1;
    USHORT Flags;
    USHORT Spare2;
     <unnamed-type-u>;
    union {
         <unnamed-type-Port>;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Port;
         <unnamed-type-Memory>;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory;
         <unnamed-type-Interrupt>;
        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
            USHORT AffinityPolicy;
            USHORT Group;
            enum _IRQ_PRIORITY PriorityPolicy;
            ULONG64 TargetedProcessors;
        } Interrupt;
         <unnamed-type-Dma>;
        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;
         <unnamed-type-DmaV3>;
        struct {
            ULONG RequestLine;
            ULONG Reserved;
            ULONG Channel;
            ULONG TransferWidth;
        } DmaV3;
         <unnamed-type-Generic>;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Generic;
         <unnamed-type-DevicePrivate>;
        struct {
            ULONG Data[3];
        } DevicePrivate;
         <unnamed-type-BusNumber>;
        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;
         <unnamed-type-ConfigData>;
        struct {
            ULONG Priority;
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;
         <unnamed-type-Memory40>;
        struct {
            ULONG Length40;
            ULONG Alignment40;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory40;
         <unnamed-type-Memory48>;
        struct {
            ULONG Length48;
            ULONG Alignment48;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory48;
         <unnamed-type-Memory64>;
        struct {
            ULONG Length64;
            ULONG Alignment64;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory64;
         <unnamed-type-Connection>;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    struct _IO_RESOURCE_LIST List[1];
};

typedef struct _IO_SECURITY_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _ACCESS_STATE *AccessState;
    ULONG DesiredAccess;
    ULONG FullCreateOptions;
};

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-CreatePipe>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
        } CreatePipe;
         <unnamed-type-CreateMailslot>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _MAILSLOT_CREATE_PARAMETERS *Parameters;
        } CreateMailslot;
         <unnamed-type-Read>;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Write;
         <unnamed-type-QueryDirectory>;
        struct {
            ULONG Length;
            struct _UNICODE_STRING *FileName;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;
         <unnamed-type-NotifyDirectory>;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;
         <unnamed-type-NotifyDirectoryEx>;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
            enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
        } NotifyDirectoryEx;
         <unnamed-type-QueryFile>;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
        } QueryFile;
         <unnamed-type-SetFile>;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            struct _FILE_OBJECT *FileObject;
            UCHAR ReplaceIfExists;
            UCHAR AdvanceOnly;
            ULONG ClusterCount;
            PVOID DeleteHandle;
        } SetFile;
         <unnamed-type-QueryVolume>;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } QueryVolume;
         <unnamed-type-FileSystemControl>;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
         <unnamed-type-LockControl>;
        struct {
            union _LARGE_INTEGER *Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } LockControl;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-QuerySecurity>;
        struct {
            ULONG SecurityInformation;
            ULONG Length;
        } QuerySecurity;
         <unnamed-type-SetSecurity>;
        struct {
            ULONG SecurityInformation;
            PVOID SecurityDescriptor;
        } SetSecurity;
         <unnamed-type-MountVolume>;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } MountVolume;
         <unnamed-type-VerifyVolume>;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } VerifyVolume;
         <unnamed-type-Scsi>;
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
         <unnamed-type-QueryDeviceRelations>;
        struct {
            enum _DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;
         <unnamed-type-QueryInterface>;
        struct {
            struct _GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            struct _INTERFACE *Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
         <unnamed-type-DeviceCapabilities>;
        struct {
            struct _DEVICE_CAPABILITIES *Capabilities;
        } DeviceCapabilities;
         <unnamed-type-FilterResourceRequirements>;
        struct {
            struct _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
        } FilterResourceRequirements;
         <unnamed-type-ReadWriteConfig>;
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG Length;
        } ReadWriteConfig;
         <unnamed-type-SetLock>;
        struct {
            UCHAR Lock;
        } SetLock;
         <unnamed-type-QueryId>;
        struct {
            enum BUS_QUERY_ID_TYPE IdType;
        } QueryId;
         <unnamed-type-QueryDeviceText>;
        struct {
            enum DEVICE_TEXT_TYPE DeviceTextType;
            ULONG LocaleId;
        } QueryDeviceText;
         <unnamed-type-UsageNotification>;
        struct {
            UCHAR InPath;
            UCHAR Reserved[3];
            enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        } UsageNotification;
         <unnamed-type-WaitWake>;
        struct {
            enum _SYSTEM_POWER_STATE PowerState;
        } WaitWake;
         <unnamed-type-PowerSequence>;
        struct {
            struct _POWER_SEQUENCE *PowerSequence;
        } PowerSequence;
         <unnamed-type-Power>;
        struct {
            ULONG SystemContext;
            struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
            enum _POWER_STATE_TYPE Type;
            union _POWER_STATE State;
            enum POWER_ACTION ShutdownType;
        } Power;
         <unnamed-type-StartDevice>;
        struct {
            struct _CM_RESOURCE_LIST *AllocatedResources;
            struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
        } StartDevice;
         <unnamed-type-WMI>;
        struct {
            ULONG64 ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
         <unnamed-type-Others>;
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    PLONG CompletionRoutine;
    PVOID Context;
};

typedef struct _IO_STATUS_BLOCK {
    LONG Status;
    PVOID Pointer;
    ULONG64 Information;
};

typedef struct _IO_TIMER {
};

typedef struct _IPSEC_OFFLOAD_V2_ADD_SA {
    struct _NDIS_OBJECT_HEADER Header;
    struct _IPSEC_OFFLOAD_V2_ADD_SA *Next;
    ULONG NumExtHdrs;
    ULONG Flags;
    struct {
        ULONG SrcAddr;
        ULONG DestAddr;
    } IPv4Endpoints;
    struct {
        UCHAR SrcAddr[16];
        UCHAR DestAddr[16];
    } IPv6Endpoints;
    PVOID OffloadHandle;
    ULONG UdpEspEncapsulation;
    struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION SecAssoc[2];
    ULONG KeyLength;
    UCHAR KeyData[1];
};

typedef struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO {
    ULONG Identifier;
    ULONG KeyLength;
    ULONG KeyOffsetBytes;
    ULONG AdditionalInfo;
};

typedef struct _IPSEC_OFFLOAD_V2_DELETE_SA {
    struct _NDIS_OBJECT_HEADER Header;
    struct _IPSEC_OFFLOAD_V2_DELETE_SA *Next;
    PVOID OffloadHandle;
};

typedef struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION {
    ULONG Flags;
    enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
    ULONG Spi;
    struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO AuthenticationAlgorithm;
    struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO EncryptionAlgorithm;
    ULONG SequenceNumberHighOrder;
};

typedef struct _IPSEC_OFFLOAD_V2_UPDATE_SA {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID OffloadHandle;
    enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
    ULONG Spi;
    ULONG SequenceNumberHighOrder;
};

typedef struct _IPV4_ARP_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv4Address[4];
    UCHAR HostIPv4Address[4];
    UCHAR MacAddress[6];
};

typedef struct _IPV4_HEADER {
    UCHAR VersionAndHeaderLength;
    UCHAR HeaderLength : 4;
    UCHAR Version : 4;
    UCHAR TypeOfServiceAndEcnField;
    UCHAR EcnField : 2;
    UCHAR TypeOfService : 6;
    USHORT TotalLength;
    USHORT Identification;
    USHORT FlagsAndOffset;
    USHORT DontUse1 : 5;
    USHORT MoreFragments : 1;
    USHORT DontFragment : 1;
    USHORT Reserved : 1;
    USHORT DontUse2 : 8;
    UCHAR TimeToLive;
    UCHAR Protocol;
    USHORT HeaderChecksum;
    struct in_addr SourceAddress;
    struct in_addr DestinationAddress;
};

typedef struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv4SourceAddress[4];
    UCHAR IPv4DestAddress[4];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _IPV6_FRAGMENT_HEADER {
    UCHAR NextHeader;
    UCHAR Reserved;
    USHORT DontUse1 : 8;
    USHORT MoreFragments : 1;
    USHORT ReservedBits : 2;
    USHORT DontUse2 : 5;
    USHORT OffsetAndFlags;
    ULONG Id;
};

typedef struct _IPV6_NS_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv6Address[16];
    UCHAR SolicitedNodeIPv6Address[16];
    UCHAR MacAddress[6];
    UCHAR TargetIPv6Addresses[2][16];
};

typedef struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv6SourceAddress[16];
    UCHAR IPv6DestAddress[16];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _IP_OFFLOAD_STATS {
    ULONG64 InReceives;
    ULONG64 InOctets;
    ULONG64 InDelivers;
    ULONG64 OutRequests;
    ULONG64 OutOctets;
    ULONG InHeaderErrors;
    ULONG InTruncatedPackets;
    ULONG InDiscards;
    ULONG OutDiscards;
    ULONG OutNoRoutes;
};

typedef struct _IRP {
    SHORT Type;
    USHORT Size;
    USHORT AllocationProcessorNumber;
    USHORT Reserved;
    struct _MDL *MdlAddress;
    ULONG Flags;
     <unnamed-type-AssociatedIrp>;
    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;
    struct _LIST_ENTRY ThreadListEntry;
    struct _IO_STATUS_BLOCK IoStatus;
    CHAR RequestorMode;
    UCHAR PendingReturned;
    CHAR StackCount;
    CHAR CurrentLocation;
    UCHAR Cancel;
    UCHAR CancelIrql;
    CHAR ApcEnvironment;
    UCHAR AllocationFlags;
    struct _IO_STATUS_BLOCK *UserIosb;
    struct _KEVENT *UserEvent;
     <unnamed-type-Overlay>;
    union {
         <unnamed-type-AsynchronousParameters>;
        struct {
            PVOID UserApcRoutine;
            PVOID IssuingProcess;
            PVOID UserApcContext;
        } AsynchronousParameters;
        union _LARGE_INTEGER AllocationSize;
    } Overlay;
    PVOID CancelRoutine;
    PVOID UserBuffer;
     <unnamed-type-Tail>;
    union {
         <unnamed-type-Overlay>;
        struct {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
            PVOID DriverContext[4];
            struct _ETHREAD *Thread;
            PCHAR AuxiliaryBuffer;
            struct _LIST_ENTRY ListEntry;
            struct _IO_STACK_LOCATION *CurrentStackLocation;
            ULONG PacketType;
            struct _FILE_OBJECT *OriginalFileObject;
            PVOID IrpExtension;
        } Overlay;
        struct _KAPC Apc;
        PVOID CompletionKey;
    } Tail;
};

typedef struct _KAPC {
    UCHAR Type;
    UCHAR SpareByte0;
    UCHAR Size;
    UCHAR SpareByte1;
    ULONG SpareLong0;
    struct _KTHREAD *Thread;
    struct _LIST_ENTRY ApcListEntry;
    PVOID KernelRoutine;
    PVOID RundownRoutine;
    PVOID NormalRoutine;
    PVOID Reserved[3];
    PVOID NormalContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CHAR ApcStateIndex;
    CHAR ApcMode;
    UCHAR Inserted;
};

typedef struct _KBUGCHECK_CALLBACK_RECORD {
    struct _LIST_ENTRY Entry;
    PVOID CallbackRoutine;
    PVOID Buffer;
    ULONG Length;
    PUCHAR Component;
    ULONG64 Checksum;
    UCHAR State;
};

typedef struct _KDESCRIPTOR {
    USHORT Pad[3];
    USHORT Limit;
    PVOID Base;
};

typedef struct _KDEVICE_QUEUE {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY DeviceListHead;
    ULONG64 Lock;
    UCHAR Busy;
    LONG64 Reserved : 8;
    LONG64 Hint : 56;
};

typedef struct _KDEVICE_QUEUE_ENTRY {
    struct _LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    UCHAR Inserted;
};

typedef struct _KDPC {
    ULONG TargetInfoAsUlong;
    UCHAR Type;
    UCHAR Importance;
    USHORT Number;
    struct _SINGLE_LIST_ENTRY DpcListEntry;
    ULONG64 ProcessorHistory;
    PVOID DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PVOID DpcData;
    VOID _KDPC;
    VOID _KDPC;
    struct _KDPC *operator=;
    struct _KDPC *operator=;
};

typedef struct _KEVENT {
    struct _DISPATCHER_HEADER Header;
    VOID _KEVENT;
    VOID _KEVENT;
    struct _KEVENT *operator=;
    struct _KEVENT *operator=;
};

typedef struct _KFLOATING_SAVE {
    ULONG Dummy;
};

typedef struct _KINTERRUPT {
};

typedef struct _KMUTANT {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY MutantListEntry;
    struct _KTHREAD *OwnerThread;
    UCHAR Abandoned;
    UCHAR ApcDisable;
    VOID _KMUTANT;
    VOID _KMUTANT;
    struct _KMUTANT *operator=;
    struct _KMUTANT *operator=;
};

typedef struct _KNODE {
};

typedef struct _KPCR {
    struct _NT_TIB NtTib;
    union _KGDTENTRY64 *GdtBase;
    struct _KTSS64 *TssBase;
    ULONG64 UserRsp;
    struct _KPCR *Self;
    struct _KPRCB *CurrentPrcb;
    struct _KSPIN_LOCK_QUEUE *LockArray;
    PVOID Used_Self;
    union _KIDTENTRY64 *IdtBase;
    ULONG64 Unused[2];
    UCHAR Irql;
    UCHAR SecondLevelCacheAssociativity;
    UCHAR ObsoleteNumber;
    UCHAR Fill0;
    ULONG Unused0[3];
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG StallScaleFactor;
    PVOID Unused1[3];
    ULONG KernelReserved[15];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG Unused2;
    PVOID KdVersionBlock;
    PVOID Unused3;
    ULONG PcrAlign1[24];
    struct _KPRCB Prcb;
    VOID _KPCR;
    VOID _KPCR;
    struct _KPCR *operator=;
    struct _KPCR *operator=;
};

typedef struct _KPRCB {
    ULONG MxCsr;
    UCHAR LegacyNumber;
    UCHAR ReservedMustBeZero;
    UCHAR InterruptRequest;
    UCHAR IdleHalt;
    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;
    UCHAR NestingLevel;
    UCHAR ClockOwner;
    UCHAR PendingTickFlags;
    UCHAR PendingTick : 1;
    UCHAR PendingBackupTick : 1;
    UCHAR IdleState;
    ULONG Number;
    ULONG64 RspBase;
    ULONG64 PrcbLock;
    PCHAR PriorityState;
    CHAR CpuType;
    CHAR CpuID;
    USHORT CpuStep;
    UCHAR CpuStepping;
    UCHAR CpuModel;
    ULONG MHz;
    ULONG64 HalReserved[8];
    USHORT MinorVersion;
    USHORT MajorVersion;
    UCHAR BuildType;
    UCHAR CpuVendor;
    UCHAR CoresPerPhysicalProcessor;
    UCHAR LogicalProcessorsPerCore;
    ULONG64 PrcbPad04[6];
    struct _KNODE *ParentNode;
    ULONG64 GroupSetMember;
    UCHAR Group;
    UCHAR GroupIndex;
    UCHAR PrcbPad05[2];
    ULONG InitialApicId;
    ULONG ScbOffset;
    ULONG ApicMask;
    PVOID AcpiReserved;
    ULONG CFlushSize;
    ULONG64 TrappedSecurityDomain;
    UCHAR BpbState;
    UCHAR BpbCpuIdle : 1;
    UCHAR BpbFlushRsbOnTrap : 1;
    UCHAR BpbIbpbOnReturn : 1;
    UCHAR BpbIbpbOnTrap : 1;
    UCHAR BpbIbpbOnRetpolineExit : 1;
    UCHAR BpbStateReserved : 3;
    UCHAR BpbFeatures;
    UCHAR BpbClearOnIdle : 1;
    UCHAR BpbEnabled : 1;
    UCHAR BpbSmep : 1;
    UCHAR BpbFeaturesReserved : 5;
    UCHAR BpbCurrentSpecCtrl;
    UCHAR BpbKernelSpecCtrl;
    UCHAR BpbNmiSpecCtrl;
    UCHAR BpbUserSpecCtrl;
    SHORT PairRegister;
    ULONG64 PrcbPad11[2];
    struct _KPROCESSOR_STATE ProcessorState;
    struct _XSAVE_AREA_HEADER *ExtendedSupervisorState;
    ULONG ProcessorSignature;
    ULONG ProcessorFlags;
    ULONG64 PrcbPad12a;
    ULONG64 PrcbPad12[3];
    VOID _KPRCB;
    VOID _KPRCB;
    struct _KPRCB *operator=;
    struct _KPRCB *operator=;
};

typedef struct _KPROCESS {
};

typedef struct _KPROCESSOR_STATE {
    struct _KSPECIAL_REGISTERS SpecialRegisters;
    struct _CONTEXT ContextFrame;
};

typedef struct _KSALLOCATOR_DISPATCH {
    PLONG InitializeAllocator;
    PVOID DeleteAllocator;
    PVOID *Allocate;
    PVOID Free;
};

typedef struct _KSCLOCK_DISPATCH {
    PUCHAR SetTimer;
    PUCHAR CancelTimer;
    PLONG64 CorrelatedTime;
    PVOID Resolution;
};

typedef struct _KSDEVICE {
    struct _KSDEVICE_DESCRIPTOR *Descriptor;
    PVOID Bag;
    PVOID Context;
    struct _DEVICE_OBJECT *FunctionalDeviceObject;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _DEVICE_OBJECT *NextDeviceObject;
    UCHAR Started;
    enum _SYSTEM_POWER_STATE SystemPowerState;
    enum _DEVICE_POWER_STATE DevicePowerState;
};

typedef struct _KSDEVICE_DESCRIPTOR {
    struct _KSDEVICE_DISPATCH *Dispatch;
    ULONG FilterDescriptorsCount;
    struct _KSFILTER_DESCRIPTOR **FilterDescriptors;
    ULONG Version;
    ULONG Flags;
};

typedef struct _KSDEVICE_DISPATCH {
    PLONG Add;
    PLONG Start;
    PLONG PostStart;
    PLONG QueryStop;
    PVOID CancelStop;
    PVOID Stop;
    PLONG QueryRemove;
    PVOID CancelRemove;
    PVOID Remove;
    PLONG QueryCapabilities;
    PVOID SurpriseRemoval;
    PLONG QueryPower;
    PVOID SetPower;
    PLONG QueryInterface;
};

typedef struct _KSEMAPHORE {
    struct _DISPATCHER_HEADER Header;
    LONG Limit;
    VOID _KSEMAPHORE;
    VOID _KSEMAPHORE;
    struct _KSEMAPHORE *operator=;
    struct _KSEMAPHORE *operator=;
};

typedef struct _KSEVENT_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID Object;
    struct KSDPC_ITEM *DpcItem;
    struct KSBUFFER_ITEM *BufferItem;
    struct KSEVENTDATA *EventData;
    ULONG NotificationType;
    struct KSEVENT_SET *EventSet;
    struct KSEVENT_ITEM *EventItem;
    struct _FILE_OBJECT *FileObject;
    ULONG SemaphoreAdjustment;
    ULONG Reserved;
    ULONG Flags;
};

typedef struct _KSFILTER {
    struct _KSFILTER_DESCRIPTOR *Descriptor;
    PVOID Bag;
    PVOID Context;
};

typedef struct _KSFILTERFACTORY {
    struct _KSFILTER_DESCRIPTOR *FilterDescriptor;
    PVOID Bag;
    PVOID Context;
};

typedef struct _KSFILTER_DESCRIPTOR {
    struct _KSFILTER_DISPATCH *Dispatch;
    struct KSAUTOMATION_TABLE_ *AutomationTable;
    ULONG Version;
    ULONG Flags;
    struct _GUID *ReferenceGuid;
    ULONG PinDescriptorsCount;
    ULONG PinDescriptorSize;
    struct _KSPIN_DESCRIPTOR_EX *PinDescriptors;
    ULONG CategoriesCount;
    struct _GUID *Categories;
    ULONG NodeDescriptorsCount;
    ULONG NodeDescriptorSize;
    struct _KSNODE_DESCRIPTOR *NodeDescriptors;
    ULONG ConnectionsCount;
    struct KSTOPOLOGY_CONNECTION *Connections;
    struct KSCOMPONENTID *ComponentId;
};

typedef struct _KSFILTER_DISPATCH {
    PLONG Create;
    PLONG Close;
    PLONG Process;
    PLONG Reset;
};

typedef struct _KSGATE {
    LONG Count;
    struct _KSGATE *NextGate;
};

typedef struct _KSMAPPING {
    union _LARGE_INTEGER PhysicalAddress;
    ULONG ByteCount;
    ULONG Alignment;
};

typedef struct _KSNODE_DESCRIPTOR {
    struct KSAUTOMATION_TABLE_ *AutomationTable;
    struct _GUID *Type;
    struct _GUID *Name;
};

typedef struct _KSPECIAL_REGISTERS {
    ULONG64 Cr0;
    ULONG64 Cr2;
    ULONG64 Cr3;
    ULONG64 Cr4;
    ULONG64 KernelDr0;
    ULONG64 KernelDr1;
    ULONG64 KernelDr2;
    ULONG64 KernelDr3;
    ULONG64 KernelDr6;
    ULONG64 KernelDr7;
    struct _KDESCRIPTOR Gdtr;
    struct _KDESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG MxCsr;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    ULONG64 Cr8;
    ULONG64 MsrGsBase;
    ULONG64 MsrGsSwap;
    ULONG64 MsrStar;
    ULONG64 MsrLStar;
    ULONG64 MsrCStar;
    ULONG64 MsrSyscallMask;
    ULONG64 Xcr0;
    ULONG64 MsrFsBase;
    ULONG64 SpecialPadding0;
};

typedef struct _KSPIN {
    struct _KSPIN_DESCRIPTOR_EX *Descriptor;
    PVOID Bag;
    PVOID Context;
    ULONG Id;
    enum KSPIN_COMMUNICATION Communication;
    UCHAR ConnectionIsExternal;
    struct KSIDENTIFIER ConnectionInterface;
    struct KSIDENTIFIER ConnectionMedium;
    struct KSPRIORITY ConnectionPriority;
    union KSDATAFORMAT *ConnectionFormat;
    struct KSMULTIPLE_ITEM *AttributeList;
    ULONG StreamHeaderSize;
    enum KSPIN_DATAFLOW DataFlow;
    enum KSSTATE DeviceState;
    enum KSRESET ResetState;
    enum KSSTATE ClientState;
};

typedef struct _KSPIN_DESCRIPTOR_EX {
    struct _KSPIN_DISPATCH *Dispatch;
    struct KSAUTOMATION_TABLE_ *AutomationTable;
    struct KSPIN_DESCRIPTOR PinDescriptor;
    ULONG Flags;
    ULONG InstancesPossible;
    ULONG InstancesNecessary;
    struct KSALLOCATOR_FRAMING_EX *AllocatorFraming;
    PLONG IntersectHandler;
};

typedef struct _KSPIN_DISPATCH {
    PLONG Create;
    PLONG Close;
    PLONG Process;
    PVOID Reset;
    PLONG SetDataFormat;
    PLONG SetDeviceState;
    PLONG Connect;
    PVOID Disconnect;
    struct _KSCLOCK_DISPATCH *Clock;
    struct _KSALLOCATOR_DISPATCH *Allocator;
};

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE *Next;
    PULONG64 Lock;
    VOID _KSPIN_LOCK_QUEUE;
    VOID _KSPIN_LOCK_QUEUE;
    struct _KSPIN_LOCK_QUEUE *operator=;
    struct _KSPIN_LOCK_QUEUE *operator=;
};

typedef struct _KSPROCESSPIN {
    struct _KSPIN *Pin;
    struct _KSSTREAM_POINTER *StreamPointer;
    struct _KSPROCESSPIN *InPlaceCounterpart;
    struct _KSPROCESSPIN *DelegateBranch;
    struct _KSPROCESSPIN *CopySource;
    PVOID Data;
    ULONG BytesAvailable;
    ULONG BytesUsed;
    ULONG Flags;
    UCHAR Terminate;
};

typedef struct _KSPROCESSPIN_INDEXENTRY {
    struct _KSPROCESSPIN **Pins;
    ULONG Count;
};

typedef struct _KSSTREAM_POINTER {
    PVOID Context;
    struct _KSPIN *Pin;
    struct KSSTREAM_HEADER *StreamHeader;
    struct _KSSTREAM_POINTER_OFFSET *Offset;
    struct _KSSTREAM_POINTER_OFFSET OffsetIn;
    struct _KSSTREAM_POINTER_OFFSET OffsetOut;
};

typedef struct _KSSTREAM_POINTER_OFFSET {
    PUCHAR Data;
    struct _KSMAPPING *Mappings;
    ULONG Count;
    ULONG Remaining;
};

typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};

typedef struct _KTHREAD {
};

typedef struct _KTIMER {
    struct _DISPATCHER_HEADER Header;
    union _ULARGE_INTEGER DueTime;
    struct _LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;
    ULONG Processor;
    ULONG Period;
    VOID _KTIMER;
    VOID _KTIMER;
    struct _KTIMER *operator=;
    struct _KTIMER *operator=;
};

typedef struct _KTSS64 {
    ULONG Reserved0;
    ULONG64 Rsp0;
    ULONG64 Rsp1;
    ULONG64 Rsp2;
    ULONG64 Ist[8];
    ULONG64 Reserved1;
    USHORT Reserved2;
    USHORT IoMapBase;
};

typedef struct _KUSER_SHARED_DATA {
    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;
    struct _KSYSTEM_TIME InterruptTime;
    struct _KSYSTEM_TIME SystemTime;
    struct _KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    WCHAR NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG LargePageMinimum;
    ULONG AitSamplingValue;
    ULONG AppCompatFlag;
    ULONG64 RNGSeedVersion;
    ULONG GlobalValidationRunlevel;
    LONG TimeZoneBiasStamp;
    ULONG NtBuildNumber;
    enum _NT_PRODUCT_TYPE NtProductType;
    UCHAR ProductTypeIsValid;
    UCHAR Reserved0[1];
    USHORT NativeProcessorArchitecture;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    UCHAR ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    ULONG TimeSlip;
    enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
    ULONG BootId;
    union _LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    UCHAR KdDebuggerEnabled;
    UCHAR MitigationPolicies;
    UCHAR NXSupportPolicy : 2;
    UCHAR SEHValidationPolicy : 2;
    UCHAR CurDirDevicesSkippedForDlls : 2;
    UCHAR Reserved : 2;
    UCHAR Reserved6[2];
    ULONG ActiveConsoleId;
    ULONG DismountCount;
    ULONG ComPlusPackage;
    ULONG LastSystemRITEventTickCount;
    ULONG NumberOfPhysicalPages;
    UCHAR SafeBootMode;
    UCHAR VirtualizationFlags;
    UCHAR Reserved12[2];
    ULONG SharedDataFlags;
    ULONG DbgErrorPortPresent : 1;
    ULONG DbgElevationEnabled : 1;
    ULONG DbgVirtEnabled : 1;
    ULONG DbgInstallerDetectEnabled : 1;
    ULONG DbgLkgEnabled : 1;
    ULONG DbgDynProcessorEnabled : 1;
    ULONG DbgConsoleBrokerEnabled : 1;
    ULONG DbgSecureBootEnabled : 1;
    ULONG DbgMultiSessionSku : 1;
    ULONG DbgMultiUsersInSessionSku : 1;
    ULONG DbgStateSeparationEnabled : 1;
    ULONG SpareBits : 21;
    ULONG DataFlagsPad[1];
    ULONG64 TestRetInstruction;
    LONG64 QpcFrequency;
    ULONG SystemCall;
    ULONG SystemCallPad0;
    ULONG64 SystemCallPad[2];
    struct _KSYSTEM_TIME TickCount;
    ULONG64 TickCountQuad;
    ULONG ReservedTickCountOverlay[3];
    ULONG TickCountPad[1];
    ULONG Cookie;
    ULONG CookiePad[1];
    LONG64 ConsoleSessionForegroundProcessId;
    ULONG64 TimeUpdateLock;
    ULONG64 BaselineSystemTimeQpc;
    ULONG64 BaselineInterruptTimeQpc;
    ULONG64 QpcSystemTimeIncrement;
    ULONG64 QpcInterruptTimeIncrement;
    UCHAR QpcSystemTimeIncrementShift;
    UCHAR QpcInterruptTimeIncrementShift;
    USHORT UnparkedProcessorCount;
    ULONG EnclaveFeatureMask[4];
    ULONG TelemetryCoverageRound;
    USHORT UserModeGlobalLogger[16];
    ULONG ImageFileExecutionOptions;
    ULONG LangGenerationCount;
    ULONG64 Reserved4;
    ULONG64 InterruptTimeBias;
    ULONG64 QpcBias;
    ULONG ActiveProcessorCount;
    UCHAR ActiveGroupCount;
    UCHAR Reserved9;
    USHORT QpcData;
    UCHAR QpcBypassEnabled;
    UCHAR QpcShift;
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
    struct _XSTATE_CONFIGURATION XState;
};

typedef struct _LEAP_SECOND_DATA {
};

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
};

typedef struct _LOCK_STATE {
    USHORT LockState;
    UCHAR OldIrql;
};

typedef struct _LOCK_STATE_EX {
    UCHAR OldIrql;
    UCHAR LockState;
    UCHAR Flags;
};

typedef struct _LOOKASIDE_LIST_EX {
    struct _GENERAL_LOOKASIDE_POOL L;
};

typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
};

typedef struct _LUID_AND_ATTRIBUTES {
    struct _LUID Luid;
    ULONG Attributes;
};

typedef struct _M128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    union _LARGE_INTEGER ReadTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _MAP_REGISTER_ENTRY {
    PVOID MapRegister;
    UCHAR WriteToDevice;
};

typedef struct _MCGEN_TRACE_CONTEXT {
    ULONG64 RegistrationHandle;
    ULONG64 Logger;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    ULONG Flags;
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserve;
    USHORT EnableBitsCount;
    PULONG EnableBitMask;
    PULONG64 EnableKeyWords;
    PUCHAR EnableLevel;
};

typedef struct _MDL {
    struct _MDL *Next;
    SHORT Size;
    SHORT MdlFlags;
    USHORT AllocationProcessorNumber;
    USHORT Reserved;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
};

typedef struct _MEDIA_SPECIFIC_INFORMATION {
    ULONG NextEntryOffset;
    enum _NDIS_CLASS_ID ClassId;
    ULONG Size;
    UCHAR ClassInformation[1];
};

typedef struct _METHOD {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InputBufferLength;
    ULONG OutputBufferLength;
    ULONG MethodId;
    ULONG BytesWritten;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    union _LARGE_INTEGER DefaultTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _NBL_COUNTED_QUEUE {
    struct _NBL_QUEUE Queue;
    ULONG64 NblCount;
};

typedef struct _NBL_QUEUE {
    struct _NET_BUFFER_LIST *First;
    struct _NET_BUFFER_LIST **Last;
    VOID _NBL_QUEUE;
    VOID _NBL_QUEUE;
    struct _NBL_QUEUE *operator=;
    struct _NBL_QUEUE *operator=;
};

typedef struct _NDIS40_PROTOCOL_CHARACTERISTICS {
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    USHORT Filler;
    ULONG Reserved;
    ULONG Flags;
    PVOID OpenAdapterCompleteHandler;
    PVOID CloseAdapterCompleteHandler;
    PVOID SendCompleteHandler;
    PVOID WanSendCompleteHandler;
    PVOID TransferDataCompleteHandler;
    PVOID WanTransferDataCompleteHandler;
    PVOID ResetCompleteHandler;
    PVOID RequestCompleteHandler;
    PLONG ReceiveHandler;
    PLONG WanReceiveHandler;
    PVOID ReceiveCompleteHandler;
    PVOID StatusHandler;
    PVOID StatusCompleteHandler;
    struct _UNICODE_STRING Name;
    PLONG ReceivePacketHandler;
    PVOID BindAdapterHandler;
    PVOID UnbindAdapterHandler;
    PLONG PnPEventHandler;
    PVOID UnloadHandler;
};

typedef struct _NDIS50_MINIPORT_CHARACTERISTICS {
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    USHORT Filler;
    ULONG Reserved;
    PUCHAR CheckForHangHandler;
    PVOID DisableInterruptHandler;
    PVOID EnableInterruptHandler;
    PVOID HaltHandler;
    PVOID HandleInterruptHandler;
    PLONG InitializeHandler;
    PVOID ISRHandler;
    PLONG QueryInformationHandler;
    PLONG ReconfigureHandler;
    PLONG ResetHandler;
    PLONG SendHandler;
    PLONG WanSendHandler;
    PLONG SetInformationHandler;
    PLONG TransferDataHandler;
    PLONG WanTransferDataHandler;
    PVOID ReturnPacketHandler;
    PVOID SendPacketsHandler;
    PVOID AllocateCompleteHandler;
    PLONG CoCreateVcHandler;
    PLONG CoDeleteVcHandler;
    PLONG CoActivateVcHandler;
    PLONG CoDeactivateVcHandler;
    PVOID CoSendPacketsHandler;
    PLONG CoRequestHandler;
};

typedef struct _NDIS50_PROTOCOL_CHARACTERISTICS {
    struct _NDIS40_PROTOCOL_CHARACTERISTICS Ndis40Chars;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    USHORT Filler;
    ULONG Reserved;
    ULONG Flags;
    PVOID OpenAdapterCompleteHandler;
    PVOID CloseAdapterCompleteHandler;
    PVOID SendCompleteHandler;
    PVOID WanSendCompleteHandler;
    PVOID TransferDataCompleteHandler;
    PVOID WanTransferDataCompleteHandler;
    PVOID ResetCompleteHandler;
    PVOID RequestCompleteHandler;
    PLONG ReceiveHandler;
    PLONG WanReceiveHandler;
    PVOID ReceiveCompleteHandler;
    PVOID StatusHandler;
    PVOID StatusCompleteHandler;
    struct _UNICODE_STRING Name;
    PLONG ReceivePacketHandler;
    PVOID BindAdapterHandler;
    PVOID UnbindAdapterHandler;
    PLONG PnPEventHandler;
    PVOID UnloadHandler;
    PVOID ReservedHandlers[4];
    PVOID CoSendCompleteHandler;
    PVOID CoStatusHandler;
    PULONG CoReceivePacketHandler;
    PVOID CoAfRegisterNotifyHandler;
};

typedef struct _NDIS51_MINIPORT_CHARACTERISTICS {
    struct _NDIS50_MINIPORT_CHARACTERISTICS Ndis50Chars;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    USHORT Filler;
    ULONG Reserved;
    PUCHAR CheckForHangHandler;
    PVOID DisableInterruptHandler;
    PVOID EnableInterruptHandler;
    PVOID HaltHandler;
    PVOID HandleInterruptHandler;
    PLONG InitializeHandler;
    PVOID ISRHandler;
    PLONG QueryInformationHandler;
    PLONG ReconfigureHandler;
    PLONG ResetHandler;
    PLONG SendHandler;
    PLONG WanSendHandler;
    PLONG SetInformationHandler;
    PLONG TransferDataHandler;
    PLONG WanTransferDataHandler;
    PVOID ReturnPacketHandler;
    PVOID SendPacketsHandler;
    PVOID AllocateCompleteHandler;
    PLONG CoCreateVcHandler;
    PLONG CoDeleteVcHandler;
    PLONG CoActivateVcHandler;
    PLONG CoDeactivateVcHandler;
    PVOID CoSendPacketsHandler;
    PLONG CoRequestHandler;
    PVOID CancelSendPacketsHandler;
    PVOID PnPEventNotifyHandler;
    PVOID AdapterShutdownHandler;
    PVOID Reserved1;
    PVOID Reserved2;
    PVOID Reserved3;
    PVOID Reserved4;
};

typedef struct _NDIS_802_11_AI_REQFI {
    USHORT Capabilities;
    USHORT ListenInterval;
    UCHAR CurrentAPAddress[6];
};

typedef struct _NDIS_802_11_AI_RESFI {
    USHORT Capabilities;
    USHORT StatusCode;
    USHORT AssociationId;
};

typedef struct _NDIS_802_11_ASSOCIATION_INFORMATION {
    ULONG Length;
    USHORT AvailableRequestFixedIEs;
    struct _NDIS_802_11_AI_REQFI RequestFixedIEs;
    ULONG RequestIELength;
    ULONG OffsetRequestIEs;
    USHORT AvailableResponseFixedIEs;
    struct _NDIS_802_11_AI_RESFI ResponseFixedIEs;
    ULONG ResponseIELength;
    ULONG OffsetResponseIEs;
};

typedef struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION {
    enum _NDIS_802_11_AUTHENTICATION_MODE AuthModeSupported;
    enum _NDIS_802_11_WEP_STATUS EncryptStatusSupported;
};

typedef struct _NDIS_802_11_AUTHENTICATION_EVENT {
    struct _NDIS_802_11_STATUS_INDICATION Status;
    struct _NDIS_802_11_AUTHENTICATION_REQUEST Request[1];
};

typedef struct _NDIS_802_11_AUTHENTICATION_REQUEST {
    ULONG Length;
    UCHAR Bssid[6];
    ULONG Flags;
};

typedef struct _NDIS_802_11_BSSID_LIST {
    ULONG NumberOfItems;
    struct _NDIS_WLAN_BSSID Bssid[1];
};

typedef struct _NDIS_802_11_BSSID_LIST_EX {
    ULONG NumberOfItems;
    struct _NDIS_WLAN_BSSID_EX Bssid[1];
};

typedef struct _NDIS_802_11_CAPABILITY {
    ULONG Length;
    ULONG Version;
    ULONG NoOfPMKIDs;
    ULONG NoOfAuthEncryptPairsSupported;
    struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION AuthenticationEncryptionSupported[1];
};

typedef struct _NDIS_802_11_CONFIGURATION {
    ULONG Length;
    ULONG BeaconPeriod;
    ULONG ATIMWindow;
    ULONG DSConfig;
    struct _NDIS_802_11_CONFIGURATION_FH FHConfig;
};

typedef struct _NDIS_802_11_CONFIGURATION_FH {
    ULONG Length;
    ULONG HopPattern;
    ULONG HopSet;
    ULONG DwellTime;
};

typedef struct _NDIS_802_11_FIXED_IEs {
    UCHAR Timestamp[8];
    USHORT BeaconInterval;
    USHORT Capabilities;
};

typedef struct _NDIS_802_11_KEY {
    ULONG Length;
    ULONG KeyIndex;
    ULONG KeyLength;
    UCHAR BSSID[6];
    ULONG64 KeyRSC;
    UCHAR KeyMaterial[1];
};

typedef struct _NDIS_802_11_NETWORK_TYPE_LIST {
    ULONG NumberOfItems;
    enum _NDIS_802_11_NETWORK_TYPE NetworkType[1];
};

typedef struct _NDIS_802_11_NON_BCAST_SSID_LIST {
    ULONG NumberOfItems;
    struct _NDIS_802_11_SSID Non_Bcast_Ssid[1];
};

typedef struct _NDIS_802_11_PMKID {
    ULONG Length;
    ULONG BSSIDInfoCount;
    struct _BSSID_INFO BSSIDInfo[1];
};

typedef struct _NDIS_802_11_PMKID_CANDIDATE_LIST {
    ULONG Version;
    ULONG NumCandidates;
    struct _PMKID_CANDIDATE CandidateList[1];
};

typedef struct _NDIS_802_11_REMOVE_KEY {
    ULONG Length;
    ULONG KeyIndex;
    UCHAR BSSID[6];
};

typedef struct _NDIS_802_11_SSID {
    ULONG SsidLength;
    UCHAR Ssid[32];
};

typedef struct _NDIS_802_11_STATISTICS {
    ULONG Length;
    union _LARGE_INTEGER TransmittedFragmentCount;
    union _LARGE_INTEGER MulticastTransmittedFrameCount;
    union _LARGE_INTEGER FailedCount;
    union _LARGE_INTEGER RetryCount;
    union _LARGE_INTEGER MultipleRetryCount;
    union _LARGE_INTEGER RTSSuccessCount;
    union _LARGE_INTEGER RTSFailureCount;
    union _LARGE_INTEGER ACKFailureCount;
    union _LARGE_INTEGER FrameDuplicateCount;
    union _LARGE_INTEGER ReceivedFragmentCount;
    union _LARGE_INTEGER MulticastReceivedFrameCount;
    union _LARGE_INTEGER FCSErrorCount;
    union _LARGE_INTEGER TKIPLocalMICFailures;
    union _LARGE_INTEGER TKIPICVErrorCount;
    union _LARGE_INTEGER TKIPCounterMeasuresInvoked;
    union _LARGE_INTEGER TKIPReplays;
    union _LARGE_INTEGER CCMPFormatErrors;
    union _LARGE_INTEGER CCMPReplays;
    union _LARGE_INTEGER CCMPDecryptErrors;
    union _LARGE_INTEGER FourWayHandshakeFailures;
    union _LARGE_INTEGER WEPUndecryptableCount;
    union _LARGE_INTEGER WEPICVErrorCount;
    union _LARGE_INTEGER DecryptSuccessCount;
    union _LARGE_INTEGER DecryptFailureCount;
};

typedef struct _NDIS_802_11_STATUS_INDICATION {
    enum _NDIS_802_11_STATUS_TYPE StatusType;
};

typedef struct _NDIS_802_11_TEST {
    ULONG Length;
    ULONG Type;
    struct _NDIS_802_11_AUTHENTICATION_EVENT AuthenticationEvent;
    LONG RssiTrigger;
};

typedef struct _NDIS_802_11_VARIABLE_IEs {
    UCHAR ElementID;
    UCHAR Length;
    UCHAR data[1];
};

typedef struct _NDIS_802_11_WEP {
    ULONG Length;
    ULONG KeyIndex;
    ULONG KeyLength;
    UCHAR KeyMaterial[1];
};

typedef struct _NDIS_AF_LIST {
    struct _NDIS_AF_LIST *NextAf;
    struct _NDIS_OPEN_BLOCK *Open;
    struct CO_ADDRESS_FAMILY AddressFamily;
    struct _NDIS_CALL_MANAGER_CHARACTERISTICS CmChars;
    struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
    ULONG NdisMajorVersion;
};

typedef struct _NDIS_AOAC_COMPONENT_REF_TIME {
    ULONG64 TotalRefTime;
    ULONG64 CurrentRefStartTime;
};

typedef struct _NDIS_AOAC_WAKE_FLAGS {
    ULONG WasAoAcWake : 1;
    ULONG WasNicRefTaken : 1;
    ULONG Value;
};

typedef struct _NDIS_BIND_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _UNICODE_STRING *ProtocolSection;
    struct _UNICODE_STRING *AdapterName;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    enum _NDIS_MEDIUM MediaType;
    ULONG MtuSize;
    ULONG64 MaxXmitLinkSpeed;
    ULONG64 XmitLinkSpeed;
    ULONG64 MaxRcvLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG LookaheadSize;
    struct _NDIS_PNP_CAPABILITIES *PowerManagementCapabilities;
    ULONG SupportedPacketFilters;
    ULONG MaxMulticastListSize;
    USHORT MacAddressLength;
    UCHAR CurrentMacAddress[32];
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES *RcvScaleCapabilities;
    union _NET_LUID_LH BoundIfNetluid;
    ULONG BoundIfIndex;
    union _NET_LUID_LH LowestIfNetluid;
    ULONG LowestIfIndex;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    USHORT IfType;
    UCHAR IfConnectorPresent;
    struct _NDIS_PORT *ActivePorts;
    ULONG DataBackFillSize;
    ULONG ContextBackFillSize;
    ULONG MacOptions;
    ULONG CompartmentId;
    struct _NDIS_OFFLOAD *DefaultOffloadConfiguration;
    struct _NDIS_TCP_CONNECTION_OFFLOAD *TcpConnectionOffloadCapabilities;
    struct _UNICODE_STRING *BoundAdapterName;
    struct _NDIS_HD_SPLIT_CURRENT_CONFIG *HDSplitCurrentConfig;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *ReceiveFilterCapabilities;
    struct _NDIS_PM_CAPABILITIES *PowerManagementCapabilitiesEx;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *NicSwitchCapabilities;
    UCHAR NDKEnabled;
    struct _NDIS_NDK_CAPABILITIES *NDKCapabilities;
    struct _NDIS_SRIOV_CAPABILITIES *SriovCapabilities;
    struct _NDIS_NIC_SWITCH_INFO_ARRAY *NicSwitchArray;
};

typedef struct _NDIS_BIND_PATHS {
    ULONG Number;
    struct _UNICODE_STRING Paths[1];
};

typedef struct _NDIS_CALL_MANAGER_CHARACTERISTICS {
    UCHAR MajorVersion;
    UCHAR MinorVersion;
    USHORT Filler;
    ULONG Reserved;
    PLONG CmCreateVcHandler;
    PLONG CmDeleteVcHandler;
    PLONG CmOpenAfHandler;
    PLONG CmCloseAfHandler;
    PLONG CmRegisterSapHandler;
    PLONG CmDeregisterSapHandler;
    PLONG CmMakeCallHandler;
    PLONG CmCloseCallHandler;
    PVOID CmIncomingCallCompleteHandler;
    PLONG CmAddPartyHandler;
    PLONG CmDropPartyHandler;
    PVOID CmActivateVcCompleteHandler;
    PVOID CmDeactivateVcCompleteHandler;
    PLONG CmModifyCallQoSHandler;
    PLONG CmRequestHandler;
    PVOID CmRequestCompleteHandler;
};

typedef struct _NDIS_CLIENT_CHARACTERISTICS {
    UCHAR MajorVersion;
    UCHAR MinorVersion;
    USHORT Filler;
    ULONG Reserved;
    PLONG ClCreateVcHandler;
    PLONG ClDeleteVcHandler;
    PLONG ClRequestHandler;
    PVOID ClRequestCompleteHandler;
    PVOID ClOpenAfCompleteHandler;
    PVOID ClCloseAfCompleteHandler;
    PVOID ClRegisterSapCompleteHandler;
    PVOID ClDeregisterSapCompleteHandler;
    PVOID ClMakeCallCompleteHandler;
    PVOID ClModifyCallQoSCompleteHandler;
    PVOID ClCloseCallCompleteHandler;
    PVOID ClAddPartyCompleteHandler;
    PVOID ClDropPartyCompleteHandler;
    PLONG ClIncomingCallHandler;
    PVOID ClIncomingCallQoSChangeHandler;
    PVOID ClIncomingCloseCallHandler;
    PVOID ClIncomingDropPartyHandler;
    PVOID ClCallConnectedHandler;
};

typedef struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID InitiateOffloadCompleteHandler;
    PVOID TerminateOffloadCompleteHandler;
    PVOID UpdateOffloadCompleteHandler;
    PVOID InvalidateOffloadCompleteHandler;
    PVOID QueryOffloadCompleteHandler;
    PVOID IndicateOffloadEventHandler;
};

typedef struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum NDIS_CHIMNEY_OFFLOAD_TYPE OffloadType;
    PVOID TcpOffloadSendCompleteHandler;
    PVOID TcpOffloadReceiveCompleteHandler;
    PVOID TcpOffloadDisconnectCompleteHandler;
    PVOID TcpOffloadForwardCompleteHandler;
    PVOID TcpOffloadEventHandler;
    PLONG TcpOffloadReceiveIndicateHandler;
};

typedef struct _NDIS_COMMON_OPEN_BLOCK {
    PVOID MacHandle;
    struct _NDIS_OBJECT_HEADER Header;
    PVOID BindingHandle;
    struct _NDIS_MINIPORT_BLOCK *MiniportHandle;
    struct _NDIS_PROTOCOL_BLOCK *ProtocolHandle;
    PVOID ProtocolBindingContext;
    PVOID NextSendHandler;
    PVOID NextSendContext;
    PVOID MiniportAdapterContext;
    UCHAR Reserved1;
    UCHAR CallingFromNdis6Protocol;
    UCHAR Reserved3;
    UCHAR Reserved4;
    PVOID NextReturnNetBufferListsHandler;
    ULONG64 Reserved5;
    PVOID NextReturnNetBufferListsContext;
    PLONG SendHandler;
    PLONG WanSendHandler;
    PLONG TransferDataHandler;
    PVOID SendCompleteHandler;
    PVOID TransferDataCompleteHandler;
    PLONG ReceiveHandler;
    PVOID ReceiveCompleteHandler;
    PLONG WanReceiveHandler;
    PVOID RequestCompleteHandler;
    PLONG ReceivePacketHandler;
    PVOID SendPacketsHandler;
    PLONG ResetHandler;
    PLONG RequestHandler;
    PLONG OidRequestHandler;
    PVOID ResetCompleteHandler;
    PVOID StatusHandler;
    PVOID StatusHandlerEx;
    PVOID StatusCompleteHandler;
    ULONG OpenFlags;
    LONG References;
    ULONG64 SpinLock;
    PVOID FilterHandle;
    ULONG FrameTypeArraySize;
    USHORT FrameTypeArray[4];
    ULONG ProtocolOptions;
    ULONG CurrentLookahead;
    PLONG WSendHandler;
    PLONG WTransferDataHandler;
    PVOID WSendPacketsHandler;
    PVOID CancelSendPacketsHandler;
    ULONG WakeUpEnable;
    struct _NDIS_PM_PARAMETERS PMCurrentParameters;
    struct _KEVENT *CloseCompleteEvent;
    struct _QUEUED_CLOSE QC;
    LONG AfReferences;
    struct _NDIS_OPEN_BLOCK *NextGlobalOpen;
    struct _NDIS_OPEN_BLOCK *MiniportNextOpen;
    struct _NDIS_OPEN_BLOCK *ProtocolNextOpen;
    struct _UNICODE_STRING *BindDeviceName;
    struct _UNICODE_STRING *RootDeviceName;
    struct _NDIS_OPEN_BLOCK *FilterNextOpen;
    ULONG PacketFilters;
    ULONG OldPacketFilters;
    ULONG MaxMulticastAddresses;
    struct _ETH_MULTICAST_WRAPPER *MCastAddressBuf;
    ULONG NumAddresses;
    struct _ETH_MULTICAST_WRAPPER *OldMCastAddressBuf;
    ULONG OldNumAddresses;
    PUCHAR RssParametersBuffer;
    struct _NDIS_RECEIVE_SCALE_PARAMETERS *NdisRSSParameters;
    struct _SINGLE_LIST_ENTRY PatternList;
    struct _SINGLE_LIST_ENTRY WOLPatternList;
    struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
    PVOID ProtSendNetBufferListsComplete;
    PVOID SendCompleteNdisPacketContext;
    PVOID SendCompleteNetBufferListsContext;
    PVOID ReceiveNetBufferLists;
    PVOID ReceiveNetBufferListsContext;
    PVOID SavedSendPacketsHandler;
    PVOID SavedCancelSendPacketsHandler;
    PLONG SavedSendHandler;
    struct NDIS_NBL_TRACKER_HANDLE__ *NblTracker;
    struct NDIS_REFCOUNT_HANDLE__ *RefCountTracker;
    ULONG64 RefCountLock;
    ULONG ProtocolMajorVersion;
    PVOID *IfBlock;
    struct _NDIS_SPIN_LOCK PnPStateLock;
    enum _NDIS_NDIS5_DRIVER_STATE PnPState;
    LONG OutstandingSends;
    struct _NDIS_EVENT PauseEvent;
    PLONG Ndis5WanSendHandler;
    PVOID ProtSendCompleteHandler;
    PVOID OidRequestCompleteHandler;
    struct _NDIS_OPEN_OFFLOAD *Offload;
    struct _NDIS_STATUS_UNBIND_WORKITEM *StatusUnbindWorkItem;
    ULONG64 DpcStartCycle;
    struct PNDIS_PER_PROCESSOR_SLOT__ *ReceivedAPacketSlot;
    PLONG DirectOidRequestHandler;
    struct _LIST_ENTRY ReceiveQueueList;
    ULONG NumReceiveQueues;
    struct _LIST_ENTRY SharedMemoryBlockList;
    PLONG AllocateSharedMemoryHandler;
    PVOID FreeSharedMemoryHandler;
    PVOID AllocateSharedMemoryContext;
    ULONG NumAllocatedVFs;
    struct _LIST_ENTRY VFList;
    ULONG NumActiveVPorts;
    struct _LIST_ENTRY VPortList;
    ULONG AoAcReferences;
    struct NDIS_BIND_PROTOCOL_LINK *Bind;
    struct _WORK_QUEUE_ITEM UnsolicitedUnbindComplete;
    struct _KEVENT *UnsolicitedUnbindEvent;
    BOOLEAN PendingLegacyUnbind;
    struct _KEVENT *WaitNetPnpEvent;
    struct _PKTMON_COMPONENT_CONTEXT PktMonComp;
    struct _PKTMON_EDGE_CONTEXT PktMonEdge;
    VOID _NDIS_COMMON_OPEN_BLOCK;
    VOID _NDIS_COMMON_OPEN_BLOCK;
    struct _NDIS_COMMON_OPEN_BLOCK *operator=;
    struct _NDIS_COMMON_OPEN_BLOCK *operator=;
};

typedef struct _NDIS_CONFIGURATION_OBJECT {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID NdisHandle;
    ULONG Flags;
};

typedef struct _NDIS_CONFIGURATION_PARAMETER {
    enum _NDIS_PARAMETER_TYPE ParameterType;
     <unnamed-type-ParameterData>;
    union {
        ULONG IntegerData;
        struct _UNICODE_STRING StringData;
        struct BINARY_DATA BinaryData;
    } ParameterData;
};

typedef struct _NDIS_CONNECTION_INFO {
    UCHAR MacAddress[6];
    struct {
        ULONG SourceIPv4Address;
        ULONG DestinationIPv4Address;
        UCHAR Protocol;
    } IPv4Info;
    struct {
        UCHAR SourceIPv6Address[16];
        UCHAR DestinationIPv6Address[16];
        UCHAR Protocol;
    } IPv6Info;
    struct {
        USHORT SourceTcpPort;
        USHORT DestinationTcpPort;
    } TcpPortInfo;
    struct {
        USHORT SourceUdpPort;
        USHORT DestinationUdpPort;
    } UdpPortInfo;
};

typedef struct _NDIS_CO_AF_BLOCK {
    struct _NDIS_CO_AF_BLOCK *NextAf;
    ULONG Flags;
    LONG References;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_CALL_MANAGER_CHARACTERISTICS *CallMgrEntries;
    struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS *CallMgrChars;
    struct _NDIS_OPEN_BLOCK *CallMgrOpen;
    PVOID CallMgrContext;
    struct _NDIS_CLIENT_CHARACTERISTICS ClientEntries;
    struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS ClientChars;
    struct _NDIS_OPEN_BLOCK *ClientOpen;
    PVOID ClientContext;
    ULONG64 Lock;
    ULONG CmMajorNdisVersion;
    ULONG ClMajorNdisVersion;
    struct _NDIS_REQUEST *Ndis5CmRequest;
    struct _NDIS_REQUEST Request;
    struct _NDIS_REQUEST *CloseAfNdisRequest;
    UCHAR CloseAfRequested;
};

typedef struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Reserved;
    PLONG CmCreateVcHandler;
    PLONG CmDeleteVcHandler;
    PLONG CmOpenAfHandler;
    PLONG CmCloseAfHandler;
    PLONG CmRegisterSapHandler;
    PLONG CmDeregisterSapHandler;
    PLONG CmMakeCallHandler;
    PLONG CmCloseCallHandler;
    PVOID CmIncomingCallCompleteHandler;
    PLONG CmAddPartyHandler;
    PLONG CmDropPartyHandler;
    PVOID CmActivateVcCompleteHandler;
    PVOID CmDeactivateVcCompleteHandler;
    PLONG CmModifyCallQoSHandler;
    PLONG CmOidRequestHandler;
    PVOID CmOidRequestCompleteHandler;
    PVOID CmNotifyCloseAfCompleteHandler;
};

typedef struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Reserved;
    PLONG ClCreateVcHandler;
    PLONG ClDeleteVcHandler;
    PLONG ClOidRequestHandler;
    PVOID ClOidRequestCompleteHandler;
    PVOID ClOpenAfCompleteHandlerEx;
    PVOID ClCloseAfCompleteHandler;
    PVOID ClRegisterSapCompleteHandler;
    PVOID ClDeregisterSapCompleteHandler;
    PVOID ClMakeCallCompleteHandler;
    PVOID ClModifyCallQoSCompleteHandler;
    PVOID ClCloseCallCompleteHandler;
    PVOID ClAddPartyCompleteHandler;
    PVOID ClDropPartyCompleteHandler;
    PLONG ClIncomingCallHandler;
    PVOID ClIncomingCallQoSChangeHandler;
    PVOID ClIncomingCloseCallHandler;
    PVOID ClIncomingDropPartyHandler;
    PVOID ClCallConnectedHandler;
    PLONG ClNotifyCloseAfHandler;
};

typedef struct _NDIS_CO_PARTY_BLOCK {
    struct _NDIS_CO_VC_PTR_BLOCK *VcPtr;
    PVOID CallMgrContext;
    PVOID ClientContext;
    PVOID ClIncomingDropPartyHandler;
    PVOID ClDropPartyCompleteHandler;
};

typedef struct _NDIS_CO_SAP_BLOCK {
    PVOID CallMgrContext;
    PVOID ClientContext;
    struct _NDIS_CO_AF_BLOCK *AfBlock;
    struct CO_SAP *Sap;
    ULONG Flags;
    LONG References;
    ULONG64 Lock;
};

typedef struct _NDIS_CO_VC_BLOCK {
    ULONG References;
    ULONG Flags;
    ULONG64 Lock;
    struct _NDIS_OPEN_BLOCK *ClientOpen;
    PVOID ClientContext;
    struct _NDIS_CO_VC_PTR_BLOCK *pProxyVcPtr;
    struct _NDIS_CO_VC_PTR_BLOCK *pClientVcPtr;
    PVOID CoSendCompleteHandler;
    PULONG CoReceivePacketHandler;
    PVOID CoSendNetBufferListsCompleteHandler;
    PVOID CoReceiveNetBufferListsHandler;
    struct _NDIS_OPEN_BLOCK *CallMgrOpen;
    PVOID CallMgrContext;
    PVOID CmActivateVcCompleteHandler;
    PVOID CmDeactivateVcCompleteHandler;
    PLONG CmModifyCallQoSHandler;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    PVOID MiniportContext;
    ULONG64 VcId;
};

typedef struct _NDIS_CO_VC_PTR_BLOCK {
    LONG References;
    ULONG CallFlags;
    PULONG pVcFlags;
    ULONG64 Lock;
    PVOID ClientContext;
    struct _LIST_ENTRY ClientLink;
    struct _LIST_ENTRY VcLink;
    struct _NDIS_CO_AF_BLOCK *AfBlock;
    struct _NDIS_CO_VC_BLOCK *VcBlock;
    struct _NDIS_OPEN_BLOCK *ClientOpen;
    LONG OwnsVcBlock;
    PLONG CoDeleteVcHandler;
    PVOID DeleteVcContext;
    PVOID ClModifyCallQoSCompleteHandler;
    PVOID ClIncomingCallQoSChangeHandler;
    PVOID ClCallConnectedHandler;
    struct _NDIS_OPEN_BLOCK *CallMgrOpen;
    PVOID CallMgrContext;
    struct _LIST_ENTRY CallMgrLink;
    PVOID CmActivateVcCompleteHandler;
    PVOID CmDeactivateVcCompleteHandler;
    PLONG CmModifyCallQoSHandler;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    PVOID MiniportContext;
    PVOID WCoSendPacketsHandler;
    PLONG WCoDeleteVcHandler;
    PLONG WCoActivateVcHandler;
    PLONG WCoDeactivateVcHandler;
    PVOID WCoSendNetBufferListsHandler;
    PVOID CoSendNetBufferListsHandler;
    PVOID CoSendNetBufferListsCompleteHandler;
    PVOID CoSendPacketHandler;
    PVOID CoSendPacketCompleteHandler;
    PVOID CoIndicateReceivePacketHandler;
    PVOID CoIndicateReceiveNetBufferListsHandler;
    struct _UNICODE_STRING VcInstanceName;
    union _LARGE_INTEGER VcIndex;
    struct _LIST_ENTRY WmiLink;
    UCHAR CallMiniportDeleteVc;
};

typedef struct _NDIS_D0_SIGNAL_WORK_ITEM {
    struct _NDIS_WORK_ITEM WorkItem;
    LONG CompletionStatus;
    UCHAR Scheduled;
};

typedef struct _NDIS_DEVICE_OBJECT_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _UNICODE_STRING *DeviceName;
    struct _UNICODE_STRING *SymbolicName;
    PLONG *MajorFunctions;
    ULONG ExtensionSize;
    struct _UNICODE_STRING *DefaultSDDLString;
    struct _GUID *DeviceClassGuid;
};

typedef struct _NDIS_DMA_BLOCK {
    PVOID MapRegisterBase;
    struct _KEVENT AllocationEvent;
    PVOID SystemAdapterObject;
    PVOID Miniport;
    UCHAR InProgress;
    VOID _NDIS_DMA_BLOCK;
    VOID _NDIS_DMA_BLOCK;
    struct _NDIS_DMA_BLOCK *operator=;
    struct _NDIS_DMA_BLOCK *operator=;
};

typedef struct _NDIS_DMA_DESCRIPTION {
    UCHAR DemandMode;
    UCHAR AutoInitialize;
    UCHAR DmaChannelSpecified;
    enum _DMA_WIDTH DmaWidth;
    enum _DMA_SPEED DmaSpeed;
    ULONG DmaPort;
    ULONG DmaChannel;
};

typedef struct _NDIS_DPC_WORK_ITEM {
    struct _WORK_QUEUE_ITEM WorkItem;
    struct _KDPC *Dpc;
    PVOID InterruptContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    ULONG TargetCpu;
    ULONG Flags;
    ULONG64 Lock;
};

typedef struct _NDIS_DRIVER_OPTIONAL_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
};

typedef struct _NDIS_DRIVER_WRAPPER_HANDLE {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID NdisWrapperHandle;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD {
    ULONG TransmitChecksumOffloadSupported : 4;
    ULONG ReceiveChecksumOffloadSupported : 4;
    ULONG LsoV2Supported : 4;
    ULONG RssSupported : 4;
    ULONG VmqSupported : 4;
    ULONG MaxHeaderSizeSupported;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 {
    ULONG TransmitChecksumOffloadSupported : 4;
    ULONG ReceiveChecksumOffloadSupported : 4;
    ULONG LsoV2Supported : 4;
    ULONG RssSupported : 4;
    ULONG VmqSupported : 4;
    ULONG Reserved : 12;
    ULONG MaxHeaderSizeSupported;
     _ENCAPSULATION_PROTOCOL_INFO;
    union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO EncapsulationProtocolInfo;
    ULONG Reserved1;
    ULONG Reserved2;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO {
    USHORT VxlanUDPPortNumber;
    USHORT VxlanUDPPortNumberConfigurable : 1;
};

typedef struct _NDIS_ENCAPSULATION_FORMAT {
    enum _NDIS_ENCAPSULATION Encapsulation;
     <unnamed-type-Flags>;
    struct {
        ULONG FixedHeaderSize : 1;
        ULONG Reserved : 31;
    } Flags;
    ULONG EncapsulationHeaderSize;
};

typedef struct _NDIS_ENTRY_HEADER {
    struct _NDIS_POOL_HEADER *PoolHeader;
    struct _LIST_ENTRY Linkage;
    ULONG LookasideProcIndex;
};

typedef struct _NDIS_ENUM_FILTERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG NumberOfFilters;
    ULONG OffsetFirstFilter;
    struct _NDIS_FILTER_INTERFACE Filter[1];
};

typedef struct _NDIS_EVENT {
    struct _KEVENT Event;
    VOID _NDIS_EVENT;
    VOID _NDIS_EVENT;
    struct _NDIS_EVENT *operator=;
    struct _NDIS_EVENT *operator=;
};

typedef struct _NDIS_EVENT_LOG {
    ULONG64 LastEventTime;
    ULONG LastUsedEntry;
    ULONG NumEntries;
    ULONG64 Lock;
    USHORT Flags;
    USHORT EntrySize;
};

typedef struct _NDIS_EVENT_LOG_ENTRY {
    USHORT EventId;
    USHORT Timestamp : 15;
    USHORT TimestampScale : 1;
    USHORT TimestampValue;
    ULONG StackTrace;
    PVOID Context;
};

typedef struct _NDIS_FILTER_ATTACH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    struct _UNICODE_STRING *FilterModuleGuidName;
    ULONG BaseMiniportIfIndex;
    struct _UNICODE_STRING *BaseMiniportInstanceName;
    struct _UNICODE_STRING *BaseMiniportName;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_MEDIUM MiniportMediaType;
    enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
    PVOID MiniportMediaSpecificAttributes;
    struct _NDIS_OFFLOAD *DefaultOffloadConfiguration;
    USHORT MacAddressLength;
    UCHAR CurrentMacAddress[32];
    union _NET_LUID_LH BaseMiniportNetLuid;
    ULONG LowerIfIndex;
    union _NET_LUID_LH LowerIfNetLuid;
    ULONG Flags;
    struct _NDIS_HD_SPLIT_CURRENT_CONFIG *HDSplitCurrentConfig;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *ReceiveFilterCapabilities;
    struct _DEVICE_OBJECT *MiniportPhysicalDeviceObject;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *NicSwitchCapabilities;
    UCHAR BaseMiniportIfConnectorPresent;
    struct _NDIS_SRIOV_CAPABILITIES *SriovCapabilities;
    struct _NDIS_NIC_SWITCH_INFO_ARRAY *NicSwitchArray;
};

typedef struct _NDIS_FILTER_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
};

typedef struct _NDIS_FILTER_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_FILTER_BLOCK *NextFilter;
    struct _NDIS_FILTER_DRIVER_BLOCK *FilterDriver;
    PVOID FilterModuleContext;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > FilterInstanceName;
    struct _UNICODE_STRING *FilterFriendlyName;
    ULONG Flags;
    ULONG StackFlags;
    enum _NDIS_FILTER_STATE State;
    struct _REFERENCE_EX Ref;
    LONG FakeStatus;
    struct _NDIS_FILTER_BLOCK *NextGlobalFilter;
    struct _NDIS_FILTER_BLOCK *LowerFilter;
    struct _NDIS_FILTER_BLOCK *HigherFilter;
    struct _FILTER_PAUSE_RESTART_CONTEXT *AsyncOpContext;
    LONG NumOfPauseRestartRequests;
    ULONG64 Lock;
    PVOID LockThread;
    ULONG LockDbg;
    struct _LIST_ENTRY OidRequestList;
    struct _NDIS_OID_REQUEST *PendingOidRequest;
    wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__cdecl*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned __int64,1>,NDISWATCHDOG__ *,-1,std::nullptr_t> > > PendingOidWatchdog;
     <unnamed-type-StackExpansionFallback>;
    struct {
        struct _WORK_QUEUE_ITEM WorkItem;
        UCHAR WorkItemQueued;
        struct _PENDING_STACK_EXPANSION_FALLBACK_WORK PendingWork;
    } StackExpansionFallback;
    UCHAR StatusIndicationsQueued;
    LONG DroppedReceiveNbls;
    LONG DroppedSendNbls;
    ULONG DroppedStatusIndications;
    ULONG DroppedUncloneableStatusIndications;
    struct _REFERENCE_EX PnPRef;
    enum _NDIS_MEDIUM MediaType;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediaType;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
    ULONG AutoNegotiationFlags;
    UCHAR XState;
    UCHAR Reserved1;
    UCHAR Reserved2;
    UCHAR Reserved3;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectStateIndicateUp;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexStateIndicateUp;
    ULONG64 XmitLinkSpeedIndicateUp;
    ULONG64 RcvLinkSpeedIndicateUp;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctionsIndicateUp;
    ULONG AutoNegotiationFlagsIndicateUp;
    PVOID NextRequestHandle;
    struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY *IterativeDataPathTracker[4];
    PVOID NextSendNetBufferListsHandler;
    PVOID NextSendNetBufferListsContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *NextSendNetBufferListsTracker;
    struct _NDIS_OBJECT_HEADER *NextSendNetBufferListsObject;
    PVOID NextSendNetBufferListsCompleteHandler;
    PVOID NextSendNetBufferListsCompleteContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *NextSendNetBufferListsCompleteTracker;
    struct _NDIS_OBJECT_HEADER *NextSendNetBufferListsCompleteObject;
    PVOID NextIndicateReceiveNetBufferListsHandler;
    PVOID NextIndicateReceiveNetBufferListsContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *NextIndicateReceiveNetBufferListsTracker;
    struct _NDIS_OBJECT_HEADER *NextIndicateReceiveNetBufferListsObject;
    PVOID NextReturnNetBufferListsHandler;
    PVOID NextReturnNetBufferListsContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *NextReturnNetBufferListsTracker;
    struct _NDIS_OBJECT_HEADER *NextReturnNetBufferListsObject;
    PVOID NextCancelSendNetBufferListsHandler;
    PVOID NextCancelSendNetBufferListsContext;
    struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS Characteristics;
    PVOID FilterSendNetBufferListsHandler;
    PVOID FilterIndicateReceiveNetBufferListsHandler;
    PVOID FilterCancelSendNetBufferListsHandler;
    PLONG TcpOffloadReceiveReturnHandler;
    struct NDIS_NBL_TRACKER_HANDLE__ *NblTracker;
    struct _NDIS_FILTER_TASK_OFFLOAD *Offload;
    struct _GUID InterfaceGuid;
    ULONG IfIndex;
    struct _NDIS_IF_BLOCK *IfBlock;
    PVOID NextDirectRequestHandle;
    ULONG DirectOidRequestCount;
    struct _SINGLE_LIST_ENTRY WOLPatternList;
    struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
    struct _NDIS_PM_PARAMETERS PMCurrentParameters;
    struct NDIS_BIND_FILTER_LINK *Bind;
    struct _NDIS_TIMESTAMP_CAPABILITIES *HwTimestampCapabilities;
    struct _NDIS_TIMESTAMP_CAPABILITIES *HwTimestampCurrentConfig;
    PVOID VerifierContext;
    struct _PKTMON_COMPONENT_CONTEXT PktMonComp;
    struct _PKTMON_EDGE_CONTEXT PktMonEdgeLower;
    struct _PKTMON_EDGE_CONTEXT PktMonEdgeUpper;
    VOID _NDIS_FILTER_BLOCK;
    VOID _NDIS_FILTER_BLOCK;
    VOID ~_NDIS_FILTER_BLOCK;
    struct _NDIS_FILTER_BLOCK *operator=;
    PVOID __vecDelDtor;
};

typedef struct _NDIS_FILTER_DRIVER_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_FILTER_DRIVER_BLOCK *NextFilterDriver;
    struct _DRIVER_OBJECT *DriverObject;
    struct _NDIS_FILTER_BLOCK *FilterQueue;
    PVOID FilterDriverContext;
    ULONG64 Lock;
    ULONG Flags;
    struct _LIST_ENTRY DeviceList;
    struct _REFERENCE_EX Ref;
    struct _NDIS_FILTER_DRIVER_CHARACTERISTICS DefaultFilterCharacteristics;
    PLONG TcpOffloadReceiveReturnHandler;
    KRef<NDIS_BIND_FILTER_DRIVER> Bind;
    struct _UNICODE_STRING ImageName;
    VOID _NDIS_FILTER_DRIVER_BLOCK;
    VOID _NDIS_FILTER_DRIVER_BLOCK;
    VOID _NDIS_FILTER_DRIVER_BLOCK;
    VOID ~_NDIS_FILTER_DRIVER_BLOCK;
    struct _NDIS_FILTER_DRIVER_BLOCK *operator=;
    struct _NDIS_FILTER_DRIVER_BLOCK *operator=;
    PVOID __vecDelDtor;
};

typedef struct _NDIS_FILTER_DRIVER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Flags;
    struct _UNICODE_STRING FriendlyName;
    struct _UNICODE_STRING UniqueName;
    struct _UNICODE_STRING ServiceName;
    PLONG SetOptionsHandler;
    PLONG SetFilterModuleOptionsHandler;
    PLONG AttachHandler;
    PVOID DetachHandler;
    PLONG RestartHandler;
    PLONG PauseHandler;
    PVOID SendNetBufferListsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID CancelSendNetBufferListsHandler;
    PVOID ReceiveNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
    PLONG OidRequestHandler;
    PVOID OidRequestCompleteHandler;
    PVOID CancelOidRequestHandler;
    PVOID DevicePnPEventNotifyHandler;
    PLONG NetPnPEventHandler;
    PVOID StatusHandler;
    PLONG DirectOidRequestHandler;
    PVOID DirectOidRequestCompleteHandler;
    PVOID CancelDirectOidRequestHandler;
    PLONG SynchronousOidRequestHandler;
    PVOID SynchronousOidRequestCompleteHandler;
};

typedef struct _NDIS_FILTER_INTERFACE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG FilterType;
    ULONG FilterRunType;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    struct _UNICODE_STRING FilterClass;
    struct _UNICODE_STRING FilterInstanceName;
};

typedef struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID SendNetBufferListsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID CancelSendNetBufferListsHandler;
    PVOID ReceiveNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
};

typedef struct _NDIS_FILTER_PAUSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PauseReason;
};

typedef struct _NDIS_FILTER_RESTART_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_MEDIUM MiniportMediaType;
    enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
    struct _NDIS_RESTART_ATTRIBUTES *RestartAttributes;
    ULONG LowerIfIndex;
    union _NET_LUID_LH LowerIfNetLuid;
    ULONG Flags;
};

typedef struct _NDIS_FILTER_TASK_OFFLOAD {
    struct _NDIS_OFFLOAD OffloadCaps;
};

typedef struct _NDIS_FRAME_TYPE_AND_OPEN {
    USHORT Type;
    struct _NDIS_OPEN_BLOCK *Open;
};

typedef struct _NDIS_FRAME_TYPE_RECORD {
    ULONG NumEntries;
    struct _NDIS_FRAME_TYPE_AND_OPEN Entry[16];
};

typedef struct _NDIS_GENERIC_OBJECT {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID Caller;
    PVOID CallersCaller;
    struct _DRIVER_OBJECT *DriverObject;
};

typedef struct _NDIS_GFP_ETHERNET_HEADER_FIELDS {
    UCHAR DestinationMacAddress[6];
    UCHAR SourceMacAddress[6];
    USHORT EthType;
    USHORT CustomerVlanId;
    USHORT ProviderVlanId;
    UCHAR Priority;
};

typedef struct _NDIS_GFP_EXACT_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG NumSupportedEntries;
    ULONG HeaderGroupExactMatchProfileArrayOffset;
    ULONG HeaderGroupExactMatchProfileArrayNumElements;
    ULONG HeaderGroupExactMatchProfileArrayElementSize;
};

typedef struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
    struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
     <unnamed-type-IPAddress>;
    union {
         <unnamed-type-IPv4Address>;
        struct {
            struct in_addr SourceIPAddress;
            struct in_addr DestinationIPAddress;
        } IPv4Address;
         <unnamed-type-IPv6Address>;
        struct {
            struct in6_addr SourceIPAddress;
            struct in6_addr DestinationIPAddress;
        } IPv6Address;
    } IPAddress;
    UCHAR Dscp;
    UCHAR IPProtocol;
     <unnamed-type-TransportOrEncapsulation>;
    union {
         <unnamed-type-Udp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
        } Udp;
         <unnamed-type-Tcp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
            UCHAR TcpFlags;
        } Tcp;
         <unnamed-type-Icmp>;
        struct {
            UCHAR Type;
            UCHAR Code;
        } Icmp;
         <unnamed-type-Encapsulation>;
        struct {
            ULONG TenantId;
            USHORT GreProtocol;
        } Encapsulation;
    } TransportOrEncapsulation;
};

typedef struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
};

typedef struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileId;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
    struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
    union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPSrcAndDestAddress;
    UCHAR Dscp;
    UCHAR IPProtocol;
     <unnamed-type-TransportOrEncapsulation>;
    union {
         <unnamed-type-UdpHeader>;
        struct {
            struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH UdpSrcAndDestPort;
        } UdpHeader;
         <unnamed-type-TcpHeader>;
        struct {
            struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH TcpSrcAndDestPort;
            UCHAR TcpFlags;
        } TcpHeader;
         <unnamed-type-IcmpHeader>;
        struct {
            UCHAR Type;
            UCHAR Code;
        } IcmpHeader;
         <unnamed-type-Encapsulation>;
        struct {
            ULONG TenantId;
            USHORT GreProtocol;
        } Encapsulation;
    } TransportOrEncapsulation;
};

typedef struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourceIPv4AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationIPv4AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourceIPv6AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationIPv6AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourcePortMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationPortMatchType;
    UCHAR TcpFlags;
};

typedef struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH {
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
    struct in_addr IPAddress;
     <unnamed-type-MatchValue>;
    union {
        ULONG PrefixLength;
        ULONG RangeSize;
    } MatchValue;
};

typedef struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH SourceIPv4Address;
    struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH DestinationIPv4Address;
};

typedef struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH {
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
    struct in6_addr IPAddress;
     <unnamed-type-MatchValue>;
    union {
        ULONG PrefixLength;
        ULONG RangeSize;
    } MatchValue;
};

typedef struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH SourceIPv6Address;
    struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH DestinationIPv6Address;
};

typedef struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH {
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
    USHORT Port;
    USHORT Range;
};

typedef struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH {
    struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH SourcePort;
    struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH DestinationPort;
};

typedef struct _NDIS_GFP_WILDCARD_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG NumSupportedEntries;
    ULONG HeaderGroupWildcardMatchProfileArrayOffset;
    ULONG HeaderGroupWildcardMatchProfileArrayNumElements;
    ULONG HeaderGroupWildcardMatchProfileArrayElementSize;
};

typedef struct _NDIS_GFT_BYTE_COUNTER_VALUE {
    ULONG64 Bytes;
    union _LARGE_INTEGER LastUpdate;
};

typedef struct _NDIS_GFT_COUNTER_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG CounterIdStart;
    ULONG NumCounters;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG UpdatePeriod;
};

typedef struct _NDIS_GFT_COUNTER_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG CounterInfoArrayOffset;
    ULONG CounterInfoArrayNumElements;
    ULONG CounterInfoArrayElementSize;
};

typedef struct _NDIS_GFT_COUNTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG CounterIdStart;
    ULONG NumCounters;
    ULONG UpdatePeriod;
     <unnamed-type-CounterValuesBufferStart>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE *PacketCounters;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE *ByteCounters;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE *PacketAndByteCounters;
    } CounterValuesBufferStart;
};

typedef struct _NDIS_GFT_COUNTER_VALUE {
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
     <unnamed-type-CounterValue>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE Packets;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE Bytes;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE PacketsAndBytes;
    } CounterValue;
};

typedef struct _NDIS_GFT_COUNTER_VALUE_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
     <unnamed-type-StartId>;
    union {
        ULONG64 FlowEntryId;
        ULONG CounterId;
    } StartId;
    ULONG NumCounters;
    ULONG CounterValueArrayOffset;
    ULONG CounterValueArrayNumElements;
    ULONG CounterValueArrayElementSize;
};

typedef struct _NDIS_GFT_CUSTOM_ACTION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileId;
    ULONG Type;
    ULONG Length;
    ULONG64 Alignment;
    UCHAR ActionData[1];
};

typedef struct _NDIS_GFT_CUSTOM_ACTION_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG Type;
    ULONG Length;
    ULONG64 Alignment;
    UCHAR ActionProfileData[1];
};

typedef struct _NDIS_GFT_DELETE_PROFILE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileId;
};

typedef struct _NDIS_GFT_DELETE_TABLE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
};

typedef struct _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG MatchProfileId;
    LONG MatchRequestStatus;
    LONG ActionRequestStatus;
    ULONG CounterFlags;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG UpdatePeriod;
     <unnamed-type-CounterValueBuffer>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE *PacketCounterAddress;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE *ByteCounterAddress;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE *PacketAndByteCounterAddress;
    } CounterValueBuffer;
    ULONG HeaderTranspositionProfileId;
    ULONG RedirectionVPortId;
    ULONG TtlIsOneRedirectionVPortId;
    ULONG NumCounterObjects;
    ULONG CounterIdArray[8];
    enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT CacheHint;
    ULONG64 ClientFlowEntryId;
    ULONG64 ProviderFlowEntryId;
    enum _NDIS_GFT_FLOW_ENTRY_STATE FlowEntryState;
    ULONG HeaderGroupExactMatchArrayOffset;
    ULONG HeaderGroupExactMatchArrayNumElements;
    ULONG HeaderGroupExactMatchArrayElementSize;
    ULONG HeaderGroupTranspositionArrayOffset;
    ULONG HeaderGroupTranspositionArrayNumElements;
    ULONG HeaderGroupTranspositionArrayElementSize;
    ULONG CustomActionOffset;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_FLOW_ENTRY_TYPE EntryType;
    ULONG FlowEntryArrayOffset;
    ULONG FlowEntryArrayNumElements;
    ULONG FlowEntryArrayElementSize;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER {
    ULONG64 FlowEntryId;
    struct _NDIS_GFT_COUNTER_VALUE CounterValue;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_ID_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
     <unnamed-type-IdArray>;
    union {
         <unnamed-type-FlowEntryIdArray>;
        struct {
            ULONG ProviderFlowEntryIdArrayOffset;
            ULONG ProviderFlowEntryIdArrayNumElements;
            ULONG ProviderFlowEntryIdArrayElementSize;
        } FlowEntryIdArray;
         <unnamed-type-FlowEntryIdAndCounterArray>;
        struct {
            ULONG ProviderFlowEntryIdAndCounterArrayOffset;
            ULONG ProviderFlowEntryIdAndCounterArrayNumElements;
            ULONG ProviderFlowEntryIdAndCounterArrayElementSize;
        } FlowEntryIdAndCounterArray;
    } IdArray;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG64 ProviderFlowEntryIdStart;
    ULONG FlowEntryIdCount;
    ULONG FlowEntryInfoArrayOffset;
    ULONG FlowEntryInfoArrayNumElements;
    ULONG FlowEntryInfoArrayElementSize;
};

typedef struct _NDIS_GFT_FREE_COUNTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG CounterIdStart;
    ULONG NumCounters;
    ULONG LastCounterValueArrayOffset;
    ULONG LastCounterValueArrayNumElements;
    ULONG LastCounterValueArrayElementSize;
};

typedef struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION Action;
    ULONG HeadersPresent;
    ULONG64 HeaderFields;
    struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
     <unnamed-type-IPAddress>;
    union {
         <unnamed-type-IPv4Address>;
        struct {
            struct in_addr SourceIPAddress;
            struct in_addr DestinationIPAddress;
        } IPv4Address;
         <unnamed-type-IPv6Address>;
        struct {
            struct in6_addr SourceIPAddress;
            struct in6_addr DestinationIPAddress;
        } IPv6Address;
    } IPAddress;
    UCHAR Ttl;
    UCHAR Dscp;
    UCHAR IPProtocol;
     <unnamed-type-TransportOrEncapsulation>;
    union {
         <unnamed-type-Udp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
        } Udp;
         <unnamed-type-Tcp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
        } Tcp;
         <unnamed-type-Encapsulation>;
        struct {
            ULONG TenantId;
            USHORT GreProtocol;
            USHORT Entropy;
        } Encapsulation;
    } TransportOrEncapsulation;
};

typedef struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION Action;
    ULONG HeadersPresent;
    ULONG HeaderFields;
};

typedef struct _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG HeaderGroupTranspositionProfileArrayOffset;
    ULONG HeaderGroupTranspositionProfileArrayNumElements;
    ULONG HeaderGroupTranspositionProfileArrayElementSize;
    ULONG CustomActionProfileOffset;
};

typedef struct _NDIS_GFT_OFFLOAD_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG CounterCapabilities;
    ULONG SupportedTableTypes;
    ULONG SupportedEncapsulationTypes;
    ULONG SupportedIngressExactMatchTableActions;
    ULONG SupportedEgressExactMatchTableActions;
    ULONG SoftwareSupportedIngressExactMatchTableActions;
    ULONG SoftwareSupportedEgressExactMatchTableActions;
    ULONG SupportedIngressWildcardMatchTableActions;
    ULONG SupportedEgressWildcardMatchTableActions;
    ULONG SoftwareSupportedIngressWildcardMatchTableActions;
    ULONG SoftwareSupportedEgressWildcardMatchTableActions;
    ULONG NumPacketCounterObjects;
    ULONG NumByteCounterObjects;
    ULONG NumPacketAndByteCounterObjects;
    ULONG NumCounterObjectsPerIngressExactMatchFlowEntry;
    ULONG NumCounterObjectsPerEgressExactMatchFlowEntry;
    ULONG NumCounterObjectsPerIngressWildcardMatchFlowEntry;
    ULONG NumCounterObjectsPerEgressWildcardMatchFlowEntry;
};

typedef struct _NDIS_GFT_OFFLOAD_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ExceptionVPortId;
    ULONG CopyLookaheadLength;
    ULONG SampleLookaheadLength;
};

typedef struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE {
    ULONG64 Packets;
    ULONG64 Bytes;
    union _LARGE_INTEGER LastUpdate;
};

typedef struct _NDIS_GFT_PACKET_COUNTER_VALUE {
    ULONG64 Packets;
    union _LARGE_INTEGER LastUpdate;
};

typedef struct _NDIS_GFT_PROFILE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_PROFILE_TYPE ProfileType;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG NumSupportedFlowEntries;
    ULONG NumCurrentFlowEntries;
    ULONG HeaderGroupArrayOffset;
    ULONG HeaderGroupArrayNumElements;
    ULONG HeaderGroupArrayElementSize;
};

typedef struct _NDIS_GFT_PROFILE_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileInfoArrayOffset;
    ULONG ProfileInfoArrayNumElements;
    ULONG ProfileInfoArrayElementSize;
};

typedef struct _NDIS_GFT_STATISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG64 ProviderFlowEntryId;
    ULONG64 Packets;
    ULONG64 Bytes;
    ULONG64 L1CacheHits;
    ULONG64 L2CacheHits;
    ULONG64 L3CacheHits;
    ULONG64 L1CacheMisses;
    ULONG64 L2CacheMisses;
    ULONG64 L3CacheMisses;
};

typedef struct _NDIS_GFT_TABLE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG NextTableId;
    ULONG NumFlowEntries;
};

typedef struct _NDIS_GFT_TABLE_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableArrayOffset;
    ULONG TableArrayNumElements;
    ULONG TableArrayElementSize;
};

typedef struct _NDIS_GFT_TABLE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG NextTableId;
};

typedef struct _NDIS_GFT_VPORT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG VPortId;
    ULONG ExceptionVPortId;
    ULONG SamplingRate;
    ULONG64 DscpMask;
    ULONG NumDscpMaskCounterObjects;
    ULONG DscpMaskCounterIdArray[64];
    ULONG64 PriorityMask;
    ULONG NumPriorityMaskCounterObjects;
    ULONG PriorityMaskCounterIdArray[8];
    USHORT VxLanSrcPortBase;
    USHORT VxLanSrcPortRange;
    ULONG DscpFlags;
};

typedef struct _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG MatchProfileId;
    LONG MatchRequestStatus;
    LONG ActionRequestStatus;
    ULONG CounterFlags;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG UpdatePeriod;
     <unnamed-type-CounterValueBuffer>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE *PacketCounterAddress;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE *ByteCounterAddress;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE *PacketAndByteCounterAddress;
    } CounterValueBuffer;
    ULONG Priority;
    enum _NDIS_GFT_WILDCARD_ACTION Action;
    ULONG RedirectionVPortId;
    ULONG TtlIsOneRedirectionVPortId;
    ULONG NumCounterObjects;
    ULONG CounterIdArray[8];
    enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT CacheHint;
    ULONG64 ClientFlowEntryId;
    ULONG64 ProviderFlowEntryId;
    enum _NDIS_GFT_FLOW_ENTRY_STATE FlowState;
    ULONG HeaderGroupWildcardMatchArrayOffset;
    ULONG HeaderGroupWildcardMatchArrayNumElements;
    ULONG HeaderGroupWildcardMatchArrayElementSize;
    ULONG CustomActionOffset;
};

typedef struct _NDIS_GLOBAL_TRIAGE_BLOCK {
    ULONG Signature;
    USHORT Revision;
    USHORT Size;
    USHORT MiniportBlockSize;
    USHORT MiniportAdapterContextOffset;
    USHORT AdapterInstanceNameOffset;
    USHORT MiniportLowestFilterOffset;
    USHORT MiniportOpenQueueOffset;
    USHORT MiniportDriverHandleOffset;
    USHORT MiniportPendingOidOffset;
    USHORT MiniportSymbolicLinkOffset;
    USHORT MDriverBlockSize;
    USHORT MiniportServiceNameOffset;
    USHORT MiniportImageNameOffset;
    USHORT FilterBlockSize;
    USHORT FilterDriverOffset;
    USHORT FilterModuleContextOffset;
    USHORT FilterHigherFilterOffset;
    USHORT FilterFriendlyNameOffset;
    USHORT FilterPendingOidOffset;
    USHORT FilterMiniportOffset;
    USHORT FilterDriverBlockSize;
    USHORT FilterDriverFriendlyNameOffset;
    USHORT FilterServiceNameOffset;
    USHORT FilterImageNameOffset;
    USHORT OpenBlockSize;
    USHORT ProtocolHandleOffset;
    USHORT ProtocolBindingContextOffset;
    USHORT MiniportNextOpenOffset;
    USHORT OpenMiniportOffset;
    USHORT ProtocolBlockSize;
    USHORT ProtocolNameOffset;
    USHORT ProtocolImageNameOffset;
    USHORT NBLPoolListOffset;
    USHORT AllocatedListOffset;
    USHORT OwnerHandleOffset;
    USHORT LookasideListOffset;
    USHORT EntryLinkageOffset;
    USHORT EntryHeaderSize;
    USHORT LookasideListSize;
    USHORT SListHeadOffset;
    USHORT BackupSListHeadOffset;
    USHORT NblSize;
    USHORT NblCurrentOwnerOffset;
    USHORT SourceHandleOffset;
    USHORT NdisOidRequestSize;
    USHORT NdisTrackNblOwner;
    USHORT MaxNumberOfProcessors;
    ULONG64 GlobalNetBufferListPoolList;
    ULONG64 BugcheckMiniport;
    ULONG64 PendingNBL[32];
    USHORT PendingNBLCount[32];
    USHORT NblTrackerContextOffset;
    USHORT MiniportPnPEventLogOffset;
    USHORT MiniportSelectiveSuspendOffset;
    USHORT MiniportSelectiveSuspendSize;
    USHORT MiniportAoAcOffset;
    USHORT MiniportAoAcSize;
     <unnamed-type-MiniportBlockBindings>;
    struct {
        USHORT NumProtocolsOffset;
        USHORT ProtocolListOffset;
        USHORT NumFiltersOffset;
        USHORT FilterListOffset;
    } MiniportBlockBindings;
     <unnamed-type-BindProtocolLink>;
    struct {
        USHORT Size;
        USHORT BindStateOffset;
        USHORT BindDriverOffset;
        USHORT BindDriverSize;
    } BindProtocolLink;
     <unnamed-type-BindFilterLink>;
    struct {
        USHORT Size;
        USHORT BindStateOffset;
        USHORT BindDriverOffset;
        USHORT BindDriverSize;
    } BindFilterLink;
     <unnamed-type-BindState>;
    struct {
        USHORT NumContextsOffset;
        USHORT ContextListOffset;
    } BindState;
     <unnamed-type-NdisEventLog>;
    struct {
        USHORT Size;
        USHORT NumEntriesOffset;
        USHORT EntrySizeOffset;
    } NdisEventLog;
    USHORT MiniportHookAdapterHandleOffset;
    USHORT MDriverHookDriverHandleOffset;
    USHORT MDriverHookDriverTypeOffset;
    USHORT MDriverHookRegisteredOffset;
};

typedef struct _NDIS_GUID {
    struct _GUID Guid;
    ULONG Oid;
    LONG Status;
    ULONG Size;
    ULONG Flags;
};

typedef struct _NDIS_HD_SPLIT_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG HardwareCapabilities;
    ULONG CurrentCapabilities;
    ULONG HDSplitFlags;
    ULONG BackfillSize;
    ULONG MaxHeaderSize;
};

typedef struct _NDIS_HD_SPLIT_CURRENT_CONFIG {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG HardwareCapabilities;
    ULONG CurrentCapabilities;
    ULONG HDSplitFlags;
    ULONG HDSplitCombineFlags;
    ULONG BackfillSize;
    ULONG MaxHeaderSize;
};

typedef struct _NDIS_IF_BLOCK {
    struct _NDIS_OBJECT_HEADER _NDIS_OBJECT_HEADER;
    struct _NDIS_NSI_INTERFACE_ENUM_ROS _NDIS_NSI_INTERFACE_ENUM_ROS;
    struct _NDIS_NSI_INTERFACE_ENUM_ROD _NDIS_NSI_INTERFACE_ENUM_ROD;
    struct _LIST_ENTRY Link;
    struct _LIST_ENTRY ProviderLink;
    struct _LIST_ENTRY NetworkLink;
    struct _NDIS_IF_RCV_ADDRESS *ifRcvAddressTable;
    ULONG ifRcvAddressCount;
    ULONG ifMaxRcvAddressCount;
    ULONG LowerLayerIfCount;
    ULONG HigherLayerIfCount;
    LONG Ref;
    union _NET_LUID_LH NetLuid;
    PVOID ProviderIfContext;
    struct _NDIS_IF_PROVIDER_BLOCK *ProviderHandle;
    ULONG Flags;
    struct _NET_PHYSICAL_LOCATION_LH PhysicalLocation;
    ULONG WanTunnelType;
    ULONG PortNumber;
    ULONG64 ifLastChange;
    ULONG64 ifCounterDiscontinuityTime;
    struct _NDIS_IF_NETWORK_BLOCK *Network;
    struct _NDIS_IF_COMPARTMENT_BLOCK *Compartment;
    struct _KEVENT *AsyncEvent;
    UCHAR AlreadyDeregistered;
    UCHAR bNdisIsProvider;
    UCHAR IsNdisFilter;
    UCHAR MiniportAvailable;
    ULONG MiniportLinkReference;
    enum NdisIfBlockSource Source;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_FILTER_BLOCK *Filter;
    ULONG SupportedStatistics;
    struct _IF_COUNTED_STRING_LH *ifL2NetworkInfo;
    struct NDIS_REFCOUNT_HANDLE__ *RefCountTracker;
    struct NDIS_REFCOUNT_HANDLE__ *MpRefCountTracker;
    ULONG InterlockedFlags;
    enum _NDIS_MINIPORT_EVENT LastMiniportFatalErrorReason;
    ULONG64 MiniportFatalErrorTimestamp[3];
    UCHAR MiniportFatalErrorTimestampIndex;
    UCHAR NetworkIdOverridden;
    UCHAR IsWDFMiniportInterface;
    struct _NDIS_PCW_DATA_BLOCK *PcwDataBlock;
};

typedef struct _NDIS_IF_COMPARTMENT_BLOCK {
    struct _LIST_ENTRY Link;
    ULONG CompartmentId;
    struct _LIST_ENTRY NetworkLink;
    ULONG Flags;
    LONG Ref;
    LONG UserRef;
    struct _NDIS_IF_NETWORK_BLOCK *LoopbackNetwork;
    struct _NDIS_NSI_COMPARTMENT_RW LoopbackInfo;
    struct _NDIS_IF_BLOCK *LoopbackIf;
    struct _KEVENT *AsyncEvent;
    ULONG JobCount;
    struct _LIST_ENTRY JobLink;
};

typedef struct _NDIS_IF_NETWORK_BLOCK {
    struct _LIST_ENTRY Link;
    struct _LIST_ENTRY CompartmentLink;
    struct _GUID NetworkGuid;
    struct _NDIS_IF_COMPARTMENT_BLOCK *Compartment;
    struct _LIST_ENTRY InterfaceLink;
    ULONG Flags;
    LONG Ref;
    struct _NDIS_NSI_NETWORK_RW NetworkInfo;
    struct _KEVENT *AsyncEvent;
};

typedef struct _NDIS_IF_PROVIDER_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    struct _LIST_ENTRY Link;
    struct _LIST_ENTRY IfList;
    PVOID IfProviderContext;
    struct _NDIS_IF_PROVIDER_CHARACTERISTICS ProviderCharacteristics;
};

typedef struct _NDIS_IF_PROVIDER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PLONG QueryObjectHandler;
    PLONG SetObjectHandler;
    PVOID Reserved1;
    PVOID Reserved2;
};

typedef struct _NDIS_IF_RCV_ADDRESS {
    struct _NDIS_NSI_IF_RCV_ADDRESS_ROD _NDIS_NSI_IF_RCV_ADDRESS_ROD;
    UCHAR ifRcvAddress[32];
};

typedef struct _NDIS_IF_STACK_ENTRY {
    struct _LIST_ENTRY Link;
    ULONG HigherLayerIfIndex;
    ULONG LowerLayerIfIndex;
    struct _NDIS_IF_BLOCK *HigherLayerIf;
    struct _NDIS_IF_BLOCK *LowerLayerIf;
};

typedef struct _NDIS_INTERRUPT_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR IsDeregistered;
    PVOID MiniportInterruptContext;
    PUCHAR MiniportIsr;
    PVOID MiniportDpc;
    struct _KDPC InterruptDpc;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    LONG DpcCount;
    struct _KDPC *Dpc;
    PVOID Generic;
    struct _KINTERRUPT *InterruptObject;
    struct _IO_INTERRUPT_MESSAGE_INFO *MessageInfoTable;
    struct _KEVENT DpcsCompletedEvent;
    UCHAR SharedInterrupt;
    UCHAR IsrRequested;
    struct _NDIS_INTERRUPT_BLOCK *NextInterrupt;
    enum _KINTERRUPT_MODE InterruptMode;
    PUCHAR MiniportMessageIsr;
    PVOID MiniportMessageInterruptDpc;
    UCHAR MsiSupported;
    UCHAR MessageUsed;
    ULONG64 MessagesSyncLock;
    struct _IO_INTERRUPT_MESSAGE_INFO *NdisMessageInfoTable;
    struct _NDIS_DPC_WORK_ITEM *DpcWorkItems;
    struct _KDPC *MsgDpc;
    VOID _NDIS_INTERRUPT_BLOCK;
    VOID _NDIS_INTERRUPT_BLOCK;
    struct _NDIS_INTERRUPT_BLOCK *operator=;
    struct _NDIS_INTERRUPT_BLOCK *operator=;
};

typedef struct _NDIS_INTERRUPT_MODERATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_INTERRUPT_MODERATION InterruptModeration;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V1 {
     <unnamed-type-Supported>;
    struct {
        ULONG Encapsulation;
        ULONG AhEspCombined;
        ULONG TransportTunnelCombined;
        ULONG IPv4Options;
        ULONG Flags;
    } Supported;
     <unnamed-type-IPv4AH>;
    struct {
        ULONG Md5 : 2;
        ULONG Sha_1 : 2;
        ULONG Transport : 2;
        ULONG Tunnel : 2;
        ULONG Send : 2;
        ULONG Receive : 2;
    } IPv4AH;
     <unnamed-type-IPv4ESP>;
    struct {
        ULONG Des : 2;
        ULONG Reserved : 2;
        ULONG TripleDes : 2;
        ULONG NullEsp : 2;
        ULONG Transport : 2;
        ULONG Tunnel : 2;
        ULONG Send : 2;
        ULONG Receive : 2;
    } IPv4ESP;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO {
    struct {
        PVOID OffloadHandle;
    } Transmit;
    struct {
        USHORT SaDeleteReq : 1;
        USHORT CryptoDone : 1;
        USHORT NextCryptoDone : 1;
        USHORT Pad : 13;
        USHORT CryptoStatus;
    } Receive;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2 {
    ULONG Encapsulation;
    UCHAR IPv6Supported;
    UCHAR IPv4Options;
    UCHAR IPv6NonIPsecExtensionHeaders;
    UCHAR Ah;
    UCHAR Esp;
    UCHAR AhEspCombined;
    UCHAR Transport;
    UCHAR Tunnel;
    UCHAR TransportTunnelCombined;
    UCHAR LsoSupported;
    UCHAR ExtendedSequenceNumbers;
    ULONG UdpEsp;
    ULONG AuthenticationAlgorithms;
    ULONG EncryptionAlgorithms;
    ULONG SaOffloadCapacity;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO {
    struct {
        ULONG NextHeader : 8;
        ULONG PadLength : 8;
        ULONG AhHeaderOffset : 8;
        ULONG EspHeaderOffset : 8;
    } Transmit;
    struct {
        ULONG NextHeader : 8;
        ULONG PadLength : 8;
        ULONG HeaderInfoSet : 1;
    } Receive;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO {
    struct {
        PVOID OffloadHandle;
    } Transmit;
    struct {
        ULONG SaDeleteReq : 1;
        ULONG CryptoDone : 1;
        ULONG NextCryptoDone : 1;
        ULONG Reserved : 13;
        ULONG CryptoStatus : 16;
    } Receive;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO {
     <unnamed-type-Transmit>;
    struct {
        PVOID TunnelHandle;
    } Transmit;
};

typedef struct _NDIS_IPSEC_PACKET_INFO {
    struct {
        PVOID OffloadHandle;
        PVOID NextOffloadHandle;
    } Transmit;
    struct {
        ULONG SA_DELETE_REQ : 1;
        ULONG CRYPTO_DONE : 1;
        ULONG NEXT_CRYPTO_DONE : 1;
        ULONG CryptoStatus;
    } Receive;
};

typedef struct _NDIS_IRP_WORK_ITEM {
    struct _WORK_QUEUE_ITEM Item;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _IRP *Irp;
};

typedef struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY {
    struct _NET_BUFFER_LIST *FirstNbl;
    struct _NET_BUFFER_LIST *LastNbl;
    UCHAR IterationInProgress;
};

typedef struct _NDIS_LINK_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
    ULONG AutoNegotiationFlags;
};

typedef struct _NDIS_LINK_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
    ULONG AutoNegotiationFlags;
};

typedef struct _NDIS_LOG {
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    ULONG64 LogLock;
    struct _IRP *Irp;
    ULONG TotalSize;
    ULONG CurrentSize;
    ULONG InPtr;
    ULONG OutPtr;
    UCHAR LogBuf[1];
};

typedef struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_MEDIUM MediaType;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
    ULONG MtuSize;
    ULONG64 MaxXmitLinkSpeed;
    ULONG64 XmitLinkSpeed;
    ULONG64 MaxRcvLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG LookaheadSize;
    struct _NDIS_PNP_CAPABILITIES *PowerManagementCapabilities;
    ULONG MacOptions;
    ULONG SupportedPacketFilters;
    ULONG MaxMulticastListSize;
    USHORT MacAddressLength;
    UCHAR PermanentMacAddress[32];
    UCHAR CurrentMacAddress[32];
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES *RecvScaleCapabilities;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    USHORT IfType;
    UCHAR IfConnectorPresent;
    ULONG SupportedStatistics;
    ULONG SupportedPauseFunctions;
    ULONG DataBackFillSize;
    ULONG ContextBackFillSize;
    PULONG SupportedOidList;
    ULONG SupportedOidListLength;
    ULONG AutoNegotiationFlags;
    struct _NDIS_PM_CAPABILITIES *PowerManagementCapabilitiesEx;
};

typedef struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_HD_SPLIT_ATTRIBUTES *HDSplitAttributes;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *HardwareReceiveFilterCapabilities;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *CurrentReceiveFilterCapabilities;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *HardwareNicSwitchCapabilities;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *CurrentNicSwitchCapabilities;
    struct _NDIS_SRIOV_CAPABILITIES *HardwareSriovCapabilities;
    struct _NDIS_SRIOV_CAPABILITIES *CurrentSriovCapabilities;
    struct _NDIS_QOS_CAPABILITIES *HardwareQosCapabilities;
    struct _NDIS_QOS_CAPABILITIES *CurrentQosCapabilities;
    struct _NDIS_GFT_OFFLOAD_CAPABILITIES *HardwareGftOffloadCapabilities;
    struct _NDIS_GFT_OFFLOAD_CAPABILITIES *CurrentGftOffloadCapabilities;
};

typedef struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG OpModeCapability;
    ULONG NumOfTXBuffers;
    ULONG NumOfRXBuffers;
    UCHAR MultiDomainCapabilityImplemented;
    ULONG NumSupportedPhys;
    struct DOT11_PHY_ATTRIBUTES *SupportedPhyAttributes;
    struct DOT11_EXTSTA_ATTRIBUTES *ExtSTAAttributes;
    struct DOT11_VWIFI_ATTRIBUTES *VWiFiAttributes;
    struct _DOT11_EXTAP_ATTRIBUTES *ExtAPAttributes;
    struct _DOT11_WFD_ATTRIBUTES *WFDAttributes;
};

typedef struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR Enabled;
    struct _NDIS_NDK_CAPABILITIES *NdkCapabilities;
};

typedef struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_OFFLOAD *DefaultOffloadConfiguration;
    struct _NDIS_OFFLOAD *HardwareOffloadCapabilities;
    struct _NDIS_TCP_CONNECTION_OFFLOAD *DefaultTcpConnectionOffloadConfiguration;
    struct _NDIS_TCP_CONNECTION_OFFLOAD *TcpConnectionOffloadHardwareCapabilities;
};

typedef struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    UCHAR DmaAddressWidth;
};

typedef struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID MiniportAdapterContext;
    ULONG AttributeFlags;
    ULONG CheckForHangTimeInSeconds;
    enum _NDIS_INTERFACE_TYPE InterfaceType;
};

typedef struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID MiniportAddDeviceContext;
    ULONG Flags;
};

typedef struct _NDIS_MINIPORT_AOAC {
    ULONG64 Lock;
    struct _LIST_ENTRY HandleList;
    LONG HandleListCount;
    struct _LIST_ENTRY PendingIrpList;
    LONG PendingIrpListCount;
    LONG ActiveRef;
    enum _NDIS_TMP_REF_REASON TempRefReason;
    struct _NDIS_TIMER TempRefTimer;
    struct _NDIS_WORK_ITEM TempRefWorkItem;
    UCHAR TempDerefInProgress;
    ULONG DerefTimeoutMilliseconds;
    UCHAR WakeWorkItemScheduled;
    enum _NDIS_MINIPORT_EVENT WakeWorkItemWakeReason;
    struct _NDIS_WORK_ITEM WakeWorkItem;
    enum _NDIS_NIC_ACTIVE_STATE ActiveState;
    struct _NDIS_SS_STOP_FLAGS StopFlags;
    UCHAR SSIdleConfirmed;
    UCHAR SSIdleConfirmInProgress;
    UCHAR RemoteWakeEnabled;
    UCHAR DeviceGone;
    struct _NDIS_AOAC_WAKE_FLAGS WakeFlags;
    struct _KEVENT PowerSuspendCompleteEvent;
    struct _KEVENT WdfAoAcDisengagedEvent;
    UCHAR WdfAoAcTransition;
    struct _KEVENT NicQuietCheckCompleteEvent;
    ULONG64 StartTime;
    USHORT LastUnexpectedFailureLine[2];
    UCHAR TakeStartToRefTime;
    union _LARGE_INTEGER LastWakeTime;
    UCHAR TakeWakeToRefTime;
    LONG ComponentRefCounts[17];
    struct _NDIS_AOAC_COMPONENT_REF_TIME CsRefTimes[17];
    LONG CsPowerTransitions;
    ULONG64 TotalCsActiveTime;
    ULONG64 TotalCsResiliencyTime;
    ULONG64 CurrentActiveStartTime;
    ULONG64 CurrentCsResiliencyStartTime;
    ULONG CsSurpriseWakes;
    ULONG CsSpuriousWakes;
    struct _NDIS_MINIPORT_CS_TRAFFIC_STATS CsTrafficStats[3];
    struct _NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS CsSpuriousWakeStats;
    struct _NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS_EX CsSpuriousWakeStatsEx;
    UCHAR DirectedMacPatternPlumbed;
    UCHAR IsInCsResiliency;
    ULONG LastWakePatternId;
    ULONG WakeIrpCount;
    ULONG64 WakeIrpStartTime;
    ULONG64 LastWakeIrpLatencyMs;
    ULONG64 MaxWakeIrpLatencyMs;
    ULONG64 TotalWakeIrpLatencyMs;
    ULONG SetPowerOidCount;
    ULONG64 LastSetPowerOidLatencyMs;
    ULONG64 MaxSetPowerOidLatencyMs;
    ULONG64 TotalSetPowerOidLatencyMs;
    VOID _NDIS_MINIPORT_AOAC;
    VOID _NDIS_MINIPORT_AOAC;
    struct _NDIS_MINIPORT_AOAC *operator=;
    struct _NDIS_MINIPORT_AOAC *operator=;
};

typedef struct _NDIS_MINIPORT_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_MINIPORT_BLOCK *NextMiniport;
    struct _NDIS_MINIPORT_BLOCK *BaseMiniport;
    PVOID MiniportAdapterContext;
    struct _UNICODE_STRING Reserved4;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    struct _NDIS_PCW_DATA_BLOCK *PcwDataBlock;
    LONG PcwDatapathEventMask;
    PVOID Reserved28;
    struct _NDIS_OPEN_BLOCK *OpenQueue;
    struct _REFERENCE ShortRef;
    LONG PcwDatapathCycleMask;
    PVOID Reserved29;
    UCHAR LinkStateIndicationFlags;
    UCHAR LockAcquired;
    UCHAR PmodeOpens;
    UCHAR LoopbackOpens;
    ULONG64 Lock;
    PVOID Reserved25;
    struct _NDIS_MINIPORT_INTERRUPT *Interrupt;
    ULONG Flags;
    ULONG PnPFlags;
    struct _LIST_ENTRY PacketList;
    struct _NDIS_PACKET *FirstPendingPacket;
    struct _NDIS_PACKET *ReturnPacketsQueue;
    ULONG RequestBuffer;
    PVOID Reserved26;
    struct _NDIS_MINIPORT_BLOCK *PrimaryMiniport;
    PVOID NextCancelSendNetBufferListsHandler;
    PVOID OidContext;
    ULONG SupportedOidListLength;
    struct _CM_RESOURCE_LIST *Resources;
    struct _NDIS_TIMER WakeUpDpcTimer;
    struct _UNICODE_STRING Reserved20;
    enum _NET_IF_MEDIA_CONNECT_STATE MiniportMediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MiniportMediaDuplexState;
    struct _UNICODE_STRING SymbolicLinkName;
    ULONG CheckForHangSeconds;
    USHORT CFHangTicks;
    USHORT CFHangCurrentTick;
    LONG ResetStatus;
    struct _NDIS_OPEN_BLOCK *ResetOpen;
    struct _X_FILTER *EthDB;
    struct _X_FILTER *NullDB;
    PVOID Unused1;
    PVOID Unused2;
    PVOID Unused3;
    PVOID PacketIndicateHandler;
    PVOID SendCompleteHandler;
    PVOID SendResourcesHandler;
    PVOID ResetCompleteHandler;
    enum _NDIS_MEDIUM MediaType;
    ULONG AutoNegotiationFlags;
    enum _NDIS_INTERFACE_TYPE Reserved5;
    enum _NDIS_INTERFACE_TYPE AdapterType;
    struct _DEVICE_OBJECT *Reserved6;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    struct _DEVICE_OBJECT *Reserved7;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    PULONG SupportedOidList;
    struct _NDIS_SG_DMA_BLOCK *MiniportSGDmaBlock;
    struct _NDIS_AF_LIST *CallMgrAfList;
    PVOID MiniportThread;
    PVOID SetInfoBuf;
    USHORT SetInfoBufLen;
    USHORT MaxSendPackets;
    LONG FakeStatus;
    PVOID Reserved24;
    PVOID GlobalTriageBlock;
    struct _NDIS_RECEIVE_SCALE_PARAMETERS *CombinedNdisRSSParameters;
    struct _NDIS_MINIPORT_TIMER *TimerQueue;
    struct _NDIS_TIMER_ENTRY *TimerObjectQueue;
    ULONG MacOptions;
    struct _NDIS_REQUEST *PendingRequest;
    ULONG MaximumLongAddresses;
    ULONG Reserved27;
    ULONG MiniportCurrentLookahead;
    ULONG MiniportMaximumLookahead;
    ULONG64 Reserved1;
    struct _X_FILTER *NullMediaFilter;
    PVOID DisableInterruptHandler;
    PVOID EnableInterruptHandler;
    PVOID SendPacketsHandler;
    PUCHAR DeferredSendHandler;
    PVOID EthRxIndicateHandler;
    PVOID Reserved30;
    PVOID NextSendNetBufferListsHandler;
    PVOID EthRxCompleteHandler;
    PVOID Reserved31;
    PVOID SavedNextSendNetBufferListsHandler;
    PVOID StatusHandler;
    PVOID StatusCompleteHandler;
    PVOID TDCompleteHandler;
    PVOID QueryCompleteHandler;
    PVOID SetCompleteHandler;
    PVOID WanSendCompleteHandler;
    PVOID WanRcvHandler;
    PVOID WanRcvCompleteHandler;
    PVOID SendNetBufferListsCompleteHandler;
    struct _KEVENT *PnPEventLockEvent;
    struct _NDIS_OBJECT_HEADER *MediaSpecificAttributes;
    struct _IRP *PendingQueryPowerIrp;
    struct _NDIS_INTERRUPT_BLOCK *InterruptEx;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS MiniportPauseFunctions;
    ULONG MiniportAutoNegotiationFlags;
    struct _SINGLE_LIST_ENTRY WorkQueue[7];
    struct _SINGLE_LIST_ENTRY SingleWorkItems[6];
    UCHAR SendFlags;
    UCHAR MP6SupportPM;
    UCHAR XState;
    struct _NDIS_LOG *Log;
    struct _CM_RESOURCE_LIST *AllocatedResources;
    struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
    struct _SINGLE_LIST_ENTRY PatternList;
    struct _SINGLE_LIST_ENTRY WOLPatternList;
    struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
    struct _NDIS_PNP_CAPABILITIES PMCapabilities61;
    struct _NDIS_PM_CAPABILITIES PMHardwareCapabilities;
    struct _NDIS_PM_CAPABILITIES PMAdvertisedCapabilities;
    struct _NDIS_PM_PARAMETERS PMCurrentParameters;
    struct _NDIS_PM_PARAMETERS PMWmiParameters;
    struct _DEVICE_CAPABILITIES OriginalDeviceCaps;
    struct _DEVICE_CAPABILITIES DeviceCaps;
    UCHAR S0WakeupSupported;
    ULONG WakeUpEnable;
    struct _IRP *WaitWakeIrp;
    struct _KEVENT WaitWakeIrpCompleted;
    BOOLEAN WaitWakeIoCompletionRoutineRan;
    BOOLEAN WaitWakeCancelInProgress;
    BOOLEAN WaitWakeCancelAttempted;
    enum _SYSTEM_POWER_STATE WaitWakeSystemState;
    union _LARGE_INTEGER VcIndex;
    ULONG64 VcCountLock;
    struct _LIST_ENTRY WmiEnabledVcs;
    struct _NDIS_GUID *pNdisGuidMap;
    struct _NDIS_GUID *pCustomGuidMap;
    USHORT VcCount;
    USHORT cNdisGuidMap;
    USHORT cCustomGuidMap;
    struct _NDIS_TIMER MediaDisconnectTimer;
    enum _NDIS_PNP_DEVICE_STATE PnPDeviceState;
    enum _NDIS_PNP_DEVICE_STATE OldPnPDeviceState;
    struct _KDPC DeferredDpc;
    union _LARGE_INTEGER StartTicks;
    struct _NDIS_PACKET **IndicatedPacket;
    struct _KEVENT *RemoveReadyEvent;
    struct _KEVENT *AllRequestsCompletedEvent;
    ULONG InitTimeMs;
    struct _NDIS_MINIPORT_WORK_ITEM WorkItemBuffer[6];
    struct _OID_LIST *OidList;
    USHORT InternalResetCount;
    USHORT MiniportResetCount;
    USHORT MediaSenseConnectCount;
    USHORT MediaSenseDisconnectCount;
    struct _NDIS_PACKET **xPackets;
    ULONG UserModeOpenReferences;
    PVOID WSendPacketsHandler;
    ULONG MiniportAttributes;
    USHORT NumOpens;
    USHORT CFHangXTicks;
    ULONG RequestCount;
    ULONG IndicatedPacketsCount;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
    enum _NDIS_MEDIUM MiniportMediaType;
    enum _NDIS_MEDIUM DataLinkLayerType;
    enum _NDIS_MEDIUM MpSpecifiedMediaType;
    struct _NDIS_REQUEST *LastRequest;
    PVOID FakeMac;
    ULONG LockDbg;
    ULONG LockDbgX;
    PVOID LockThread;
    ULONG InfoFlags;
    ULONG64 TimerQueueLock;
    struct _KEVENT *ResetCompletedEvent;
    PVOID SavedPacketIndicateHandler;
    LONG RegisteredInterrupts;
    ULONG SetOid;
    struct _KEVENT CFHCompletedEvent;
    struct _WORK_QUEUE_ITEM CFHWorkItem;
    LONG CFHWorkItemQueued;
    PVOID DeviceContext;
    struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE *RssParametersBuffer;
    UCHAR UsingMSIX;
    UCHAR Miniport5InNdis6Mode;
    UCHAR Miniport5HasNdis6Component;
    UCHAR InitMode;
    UCHAR InitModeNotNeededAnymore;
    CHAR MediaChangeFilters;
    UCHAR CheckPacketFilters;
    UCHAR ReceiveFilters;
    ULONG64 RecvLock;
    enum _NDIS_MINIPORT_STATE RecvState;
    ULONG OutstandingReceives;
    PVOID MiniportRecvLockThread;
    ULONG RecvLockDbg;
    PVOID NextSendPacketsHandler;
    PVOID FinalSendPacketsHandler;
    struct _NDIS_FILTER_BLOCK *LowestFilter;
    struct _NDIS_FILTER_BLOCK *HighestFilter;
    PVOID ShutdownContext;
    PVOID ShutdownHandler;
    struct _KBUGCHECK_CALLBACK_RECORD BugcheckCallbackRecord;
    PVOID TopIndicateNetBufferListsHandler;
    PVOID TopIndicateLoopbackNetBufferListsHandler;
    PVOID Ndis5PacketIndicateHandler;
    PVOID MiniportReturnPacketHandler;
    PVOID MiniportReturnPacketContext;
    PVOID SynchronousReturnPacketHandler;
    PVOID SynchronousReturnPacketContext;
    struct _LIST_ENTRY OidRequestList;
    struct _NDIS_OID_REQUEST *PendingOidRequest;
    struct _NDIS_OID_REQUEST *ProcessedOidRequest;
    struct _NDIS_OID_REQUEST *HookedOidRequest;
    PVOID NextCoOidRequestHandle;
    ULONG Ndis6ProtocolsBound;
    ULONG PmodeOpen6;
    enum _NDIS_MINIPORT_STATE State;
    struct _KEVENT *AsyncOpCompletionEvent;
    LONG AsyncOpCompletionStatus;
    ULONG64 MaxXmitLinkSpeed;
    ULONG64 MaxRcvLinkSpeed;
    ULONG SupportedPacketFilters;
    struct _NDIS_MINIPORT_HANDLERS NoFilter;
    struct _NDIS_MINIPORT_HANDLERS Next;
    UCHAR ReceivePathEnabled;
    UCHAR NormalTopReceive;
    enum _NDIS_SEND_PATH_TYPE SendPathType;
    enum _NDIS_SEND_PATH_TYPE SavedSendPathType;
    UCHAR SavedReceivePathEnabled;
    ULONG TimestampFlags;
    ULONG FilterPnPFlags;
    ULONG SupportedStatistics;
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES RecvScaleCapabilities;
    struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES *GeneralAttributes;
    struct _LIST_ENTRY PortList;
    PUCHAR AllocatedPortIndices;
    ULONG AllocatedPortIndicesLength;
    ULONG NumberOfPorts;
    ULONG NumberOfActivePorts;
    ULONG64 MiniportXmitLinkSpeed;
    ULONG64 MiniportRcvLinkSpeed;
    struct _NDIS_TIMER InitModeTimeoutTimer;
    struct _NDIS_WORK_ITEM InitModeTimeoutWorkItem;
    struct _KEVENT InitModeTimeoutTimerQueuedEvent;
    ULONG DataBackFillSize;
    ULONG ContextBackFillSize;
    struct _NDIS_RESTART_GENERAL_ATTRIBUTES TopFilterRestartAttributes;
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES TopRecvScaleCapabilities;
    ULONG NsiOpenReferences;
    PVOID ProcessingOpen;
    struct _KEVENT *NsiRequestsCompletedEvent;
    enum _DEVICE_POWER_STATE QueryPowerDeviceState;
    UCHAR MinimumNdisMajorVersion;
    UCHAR MinimumNdisMinorVersion;
    struct _NDIS_MINIPORT_STATS *BottomIfStats;
    struct _NDIS_M_PERIODIC_RECEIVES PeriodicReceiveQueue;
    struct PNDIS_PER_PROCESSOR_SLOT__ *PeriodicReceivesNblCountIndex;
    enum _NDIS_PORT_CONTROL_STATE DefaultSendControlState;
    enum _NDIS_PORT_CONTROL_STATE DefaultRcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE DefaultSendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE DefaultRcvAuthorizationState;
    enum _NDIS_PORT_CONTROL_STATE DefaultPortSendControlState;
    enum _NDIS_PORT_CONTROL_STATE DefaultPortRcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE DefaultPortSendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE DefaultPortRcvAuthorizationState;
    struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES PciDeviceCustomProperties;
    PVOID TopNdis5PacketIndicateHandler;
    PULONG ndisSupportedOidList;
    ULONG ndisSupportedOidListLength;
    ULONG MsiIntCount;
    struct _WORK_QUEUE_ITEM MiniportDpcWorkItem;
    ULONG64 InvalidFrames;
    LONG PagingPathCount;
    struct _LIST_ENTRY ReceiveQueueList;
    PUCHAR AllocatedQueueIndices;
    ULONG AllocatedQueueIndicesLength;
    ULONG NumReceiveQueues;
    struct _LIST_ENTRY ReceiveFilterList;
    PUCHAR AllocatedReceiveFilterIndices;
    ULONG AllocatedReceiveFilterIndicesLength;
    ULONG NumReceiveFilters;
    ULONG EnabledReceiveFilterTypes;
    ULONG EnabledReceiveQueueTypes;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *ReceiveFilterHwCapabilities;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *ReceiveFilterCurrentCapabilities;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *TopReceiveFilterCurrentCapabilities;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *NicSwitchHwCapabilities;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *NicSwitchCurrentCapabilities;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *TopNicSwitchCurrentCapabilities;
    struct _LIST_ENTRY SharedMemoryBlockList;
    PLONG AllocateSharedMemoryHandler;
    PVOID FreeSharedMemoryHandler;
    PVOID AllocateSharedMemoryContext;
    struct PCI_MSI_CAPABILITY MsiCaps;
    struct PCI_MSIX_CAPABILITY MsiXCaps;
    ULONG64 NumberOfIndirectionTableChanges;
    ULONG PciDeviceSriovSupport;
    UCHAR BeginSavedFields;
    ULONG NumUserOpens;
    struct _NDIS_MINIPORT_OFFLOAD_REG OffloadRegistry;
    USHORT MediaDisconnectTimeOut;
    USHORT SGMapRegistersNeeded;
    ULONG DriverVerifyFlags;
    PULONG SetBusData;
    PULONG GetBusData;
    PVOID BusDataContext;
    enum _INTERFACE_TYPE BusType;
    ULONG BusNumber;
    ULONG SlotNumber;
    struct _NDIS_EVENT OpenReadyEvent;
    ULONG NumAdminOpens;
    struct _NDIS_M_DRIVER_BLOCK *DriverHandle;
    struct _NDIS_BIND_PATHS *BindPaths;
    enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediumType;
    PVOID SecurityDescriptor;
    struct _UNICODE_STRING BaseName;
    struct _UNICODE_STRING MiniportName;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _DEVICE_OBJECT *NextDeviceObject;
    struct _NDIS_MINIPORT_BLOCK *NextGlobalMiniport;
    struct _UNICODE_STRING *pAdapterInstanceName;
    ULONG PnPCapabilities;
    enum _DEVICE_POWER_STATE CurrentDevicePowerState;
    ULONG64 PowerStateLock;
    enum _DEVICE_POWER_STATE DriverPowerState;
    enum _DEVICE_POWER_STATE PrevDriverPowerState;
    struct _NET_BUFFER_LIST *LowPowerRcvReturnNbls;
    ULONG PendingReturnNBLCount;
    UCHAR SurpriseRemoveFlushedRcvReturnQueue;
    struct NDIS_NBL_TRACKER_HANDLE__ *LowPowerRcvReturnNblTracker;
    struct _NDIS_PM_ADMIN_CONFIG PMAdminConfig;
    struct _KSEMAPHORE PMPatternSemaphore;
    struct _KSEMAPHORE PMOffloadSemaphore;
    PVOID BusInterface;
    USHORT InstanceNumber;
    PVOID ConfigurationHandle;
    struct _GUID InterfaceGuid;
    union _NET_LUID_LH NetLuid;
    UCHAR IfBlockAvailable;
    struct _NDIS_IF_BLOCK *IfBlock;
    struct _KEVENT *IfBlockPointerRefZeroEvent;
    ULONG IfIndex;
    enum _NET_IF_ADMIN_STATUS AdminStatus;
    enum _NET_IF_OPER_STATUS OperStatus;
    ULONG OperStatusFlags;
    PLONG SendHandler;
    PLONG WanSendHandler;
    struct NDIS_NBL_TRACKER_HANDLE__ *NblTracker;
    struct _DEVICE_RESET_INTERFACE_STANDARD *ReenumerateSelfInterface;
    struct _NDIS_MINIPORT_OFFLOAD *Offload;
    PVOID NDKBlock;
    PVOID AddDeviceContext;
    struct _IO_REMOVE_LOCK RemoveLock;
    struct _UNICODE_STRING DevinterfaceNetSymbolicLinkName;
    ULONG PhysicalMediumInInf;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > ExportName;
    wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > FilterClass;
    PVOID StatusProcessingThread;
    ULONG StatusProcessingDbgX;
    struct _UNICODE_STRING FdoName;
    struct _KEVENT PowerD0CompleteEvent;
    LONG LastD0CompleteStatus;
    enum _NDIS_MINIPORT_EVENT LastD0Reason;
    ULONG DirectOidRequestCount;
    struct _KEVENT *AllDirectRequestsCompletedEvent;
    struct _NDIS_HD_SPLIT_CURRENT_CONFIG *HDSplitCurrentConfig;
    PVOID MSIXConfigContext;
    PLONG SetMSIXTableEntry;
    PLONG MaskMSIXTableEntry;
    PLONG UnmaskMSIXTableEntry;
    struct _WORK_QUEUE_ITEM DevicePowerStateWorkItem;
    struct _WORK_QUEUE_ITEM SystemPowerStateWorkItem;
    struct _NDIS_RECEIVE_QUEUE_BLOCK *DefaultReceiveQueue;
    ULONG MaxNumRssProcessors;
    struct _PROCESSOR_NUMBER RssBaseProcessor;
    struct _PROCESSOR_NUMBER RssMaxProcessor;
    enum _NDIS_RSS_PROFILE RssProfile;
    USHORT NumaNodeId;
    PUSHORT NumaDistances;
    struct _UNICODE_STRING *pModifiedInstanceName;
    ULONG SyncFlags;
    ULONG WSyncFlags;
    ULONG InterlockedFlags;
    struct _ULONG_REFERENCE Ref;
    struct _NDIS_SELECTIVE_SUSPEND *SelectiveSuspend;
    struct _NDIS_MINIPORT_AOAC *AoAc;
    enum _NDIS_PM_WAKE_REASON_TYPE LastWakeReason;
    struct NDIS_EVENT_LOG_HANDLE__ *PnpEventLog;
    struct _NDIS_D0_SIGNAL_WORK_ITEM D0CompleteSignalWorkItem;
    struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS *PhysicalPerformanceCounters;
    union _LARGE_INTEGER TimeOfInitialization;
    union _LARGE_INTEGER LastSystemSleepTime;
    ULONG64 TotalSystemSleepTimeMs;
    struct _NDIS_SRIOV_CAPABILITIES *SriovHwCapabilities;
    struct _NDIS_SRIOV_CAPABILITIES *SriovCurrentCapabilities;
    ULONG64 InvalidateBlockMask;
    struct _IRP *InvalidateBlockIoctlPf;
    struct _IRP *InvalidateBlockIoctlVf;
    struct _VPCI_INVALIDATE_BLOCK_OUTPUT InvalidateBlockVfParams;
    struct _KEVENT InvalidateBlockEvent;
    USHORT InvalidateVfId;
    UCHAR InvalidateBlockCancelling;
    struct _NDIS_PF_BLOCK *PFBlock;
    ULONG NumSwitches;
    struct _LIST_ENTRY NicSwitchList;
    ULONG NumAllocatedVFs;
    struct _LIST_ENTRY VFList;
    ULONG NumActiveVPorts;
    struct _LIST_ENTRY VPortList;
    PUCHAR AllocatedVPortIndices;
    ULONG AllocatedVPortIndicesLength;
    PULONG SetVirtualFunctionData;
    PULONG GetVirtualFunctionData;
    PLONG EnableVirtualization;
    PLONG GetVirtualDeviceLocation;
    PLONG GetVirtualFunctionProbedBars;
    PVOID VirtInterfaceContext;
    struct _UNICODE_STRING DevinterfaceVirtSymbolicLinkName;
    PVOID VpciInterfaceDereference;
    PLONG WriteVfConfigBlock;
    PLONG ReadVfConfigBlock;
    PVOID VpciInterfaceContext;
    ULONG VfSerialNumber;
    struct _LUID SriovLuid;
    struct NDIS_REFCOUNT_HANDLE__ *RefCountTracker;
    struct NDIS_REFCOUNT_HANDLE__ *NsiRefCountTracker;
    struct _NDIS_QOS_CAPABILITIES *QosHwCapabilities;
    struct _NDIS_QOS_CAPABILITIES *QosCurrentCapabilities;
    struct _NDIS_QOS_PARAMETERS *QosOperationalParameters;
    ULONG QosOperationalParametersBufferSize;
    struct _NDIS_QOS_PARAMETERS *QosRemoteParameters;
    ULONG QosRemoteParametersBufferSize;
    ULONG64 DeviceFlags;
    PVOID VerifierContext;
    struct _WORK_QUEUE_ITEM SurpriseRemovalWorkItem;
    struct Ndis::BindStack Bindings;
    struct Ndis::BindEngine BindEngine;
    Rtl::KNeutralLock<enum NDIS_MINIPORT_POLICY_OWNER> MiniportOwner;
    BOOLEAN PmInterruptedByPnp;
    BOOLEAN DoNotBlockOnMiniportLock;
    BOOLEAN PoFxDStateReportingEnabled;
    struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__ *HookAdapterHandle;
    struct _WORK_QUEUE_ITEM InterfaceUpdateWorkItem;
    BOOLEAN InterfaceUpdateInProgress;
    BOOLEAN MacAddressUpdateQueued;
    BOOLEAN MtuUpdateQueued;
    struct _IF_PHYSICAL_ADDRESS_LH PendingMacAddress;
    ULONG PendingMtuSize;
    PWCHAR PnPInstanceId;
    struct RECORDER_LOG__ *BlackBoxHandle;
    struct _KEVENT *PowerCompleteEvent;
    LONG PowerCompleteStatus;
    struct WORKITEM_WITH_IRP DevicePowerOnWorkItem;
    struct WORKITEM_WITH_IRP DevicePowerDownWorkItem;
    wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__cdecl*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned __int64,1>,NDISWATCHDOG__ *,-1,std::nullptr_t> > > PendingOidWatchdog;
    wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__cdecl*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned __int64,1>,NDISWATCHDOG__ *,-1,std::nullptr_t> > > HookedOidWatchdog;
    wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__cdecl*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned __int64,1>,NDISWATCHDOG__ *,-1,std::nullptr_t> > > ReenumerateWatchdog;
    struct _NDIS_PD_BLOCK *PDBlock;
    PVOID PdcHandle;
    struct _NDIS_TIMER PdcTaskClientDisableTimer;
    struct _NDIS_WORK_ITEM PdcTaskClientDisableWorkItem;
    LONG PdcTaskClientMode;
    ULONG ModernStandbyWoLMagicPacketEnable;
    struct _NDIS_RSS_DPC_WORKER_CONTEXT *RssV2Context;
    LONG RssV2CompletionCount;
    struct _KEVENT RssV2CompletionEvent;
    UCHAR RssV2Initialized;
    struct _LIST_ENTRY SynchronousOidCalls;
    struct _NDIS_TIMESTAMP_CAPABILITIES *HwTimestampCapabilities;
    struct _NDIS_TIMESTAMP_CAPABILITIES *HwTimestampCurrentConfig;
    struct _NDIS_TIMESTAMP_CAPABILITIES *TopTimestampConfig;
    struct _NDIS_TIMESTAMP_CAPABILITIES *TopHwTimestampCapabilities;
    struct _PKTMON_COMPONENT_CONTEXT PktMonComp;
    struct _PKTMON_EDGE_CONTEXT PktMonEdge;
    VOID _NDIS_MINIPORT_BLOCK;
    VOID ~_NDIS_MINIPORT_BLOCK;
    PVOID __vecDelDtor;
};

typedef struct _NDIS_MINIPORT_CO_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PLONG CoCreateVcHandler;
    PLONG CoDeleteVcHandler;
    PLONG CoActivateVcHandler;
    PLONG CoDeactivateVcHandler;
    PVOID CoSendNetBufferListsHandler;
    PLONG CoOidRequestHandler;
};

typedef struct _NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS {
    ULONG WakeReasonUnspec;
    ULONG WakeReasonPacket;
    ULONG WakeReasonMediaDisconnect;
    ULONG WakeReasonMediaConnect;
    ULONG WakeReasonWlanNLODiscovery;
    ULONG WakeReasonWlanApAssociationLost;
    ULONG WakeReasonWlanGTKHandshakeError;
    ULONG WakeReasonWlan4WayHandshakeRequest;
    ULONG WakeReasonWwanRegisterState;
    ULONG WakeReasonWwanSMSReceive;
    ULONG WakeReasonWwanUSSDReceive;
};

typedef struct _NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS_EX {
    ULONG WakeReasonBadIndication;
    ULONG WakeReasonNoIndication;
    ULONG WakeReasonPacketDirectedMac;
    ULONG WakeReasonUnknown;
    ULONG LastUnknownWakeReason;
};

typedef struct _NDIS_MINIPORT_CS_TRAFFIC_STATS {
    ULONG64 IfInUnicastPackets;
    ULONG64 IfOutUnicastPackets;
    ULONG64 IfInMulticastPackets;
    ULONG64 IfOutMulticastPackets;
    ULONG64 IfInBroadcastPackets;
    ULONG64 IfOutBroadcastPackets;
};

typedef struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Flags;
    PLONG SetOptionsHandler;
    PLONG InitializeHandlerEx;
    PVOID HaltHandlerEx;
    PVOID UnloadHandler;
    PLONG PauseHandler;
    PLONG RestartHandler;
    PLONG OidRequestHandler;
    PVOID SendNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
    PVOID CancelSendHandler;
    PUCHAR CheckForHangHandlerEx;
    PLONG ResetHandlerEx;
    PVOID DevicePnPEventNotifyHandler;
    PVOID ShutdownHandlerEx;
    PVOID CancelOidRequestHandler;
    PLONG DirectOidRequestHandler;
    PVOID CancelDirectOidRequestHandler;
    PLONG SynchronousOidRequestHandler;
};

typedef struct _NDIS_MINIPORT_HANDLERS {
    PVOID RequestContext;
    PVOID CancelSendContext;
    PVOID IndicateNetBufferListsContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *IndicateNetBufferListsTracker;
    struct _NDIS_OBJECT_HEADER *IndicateNetBufferListsObject;
    PVOID SaveIndicateNetBufferListsContext;
    PVOID ReturnNetBufferListsContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *ReturnNetBufferListsTracker;
    struct _NDIS_OBJECT_HEADER *ReturnNetBufferListsObject;
    PVOID SendNetBufferListsContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *SendNetBufferListsTracker;
    struct _NDIS_OBJECT_HEADER *SendNetBufferListsObject;
    PVOID SendNetBufferListsCompleteContext;
    struct NDIS_NBL_TRACKER_HANDLE__ *SendNetBufferListsCompleteTracker;
    struct _NDIS_OBJECT_HEADER *SendNetBufferListsCompleteObject;
    PVOID RequestHandle;
    PVOID CancelSendHandler;
    PVOID CancelSendPacketsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID IndicateNetBufferListsHandler;
    PVOID SaveIndicateNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
    PVOID SendNetBufferListsHandler;
    PVOID DirectRequestHandle;
};

typedef struct _NDIS_MINIPORT_INIT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _CM_PARTIAL_RESOURCE_LIST *AllocatedResources;
    PVOID IMDeviceInstanceContext;
    PVOID MiniportAddDeviceContext;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    struct _NDIS_PORT_AUTHENTICATION_PARAMETERS *DefaultPortAuthStates;
    struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES *PciDeviceCustomProperties;
};

typedef struct _NDIS_MINIPORT_INTERRUPT {
    struct _KINTERRUPT *InterruptObject;
    UCHAR IsDeregistered;
    ULONG64 DpcCountLock;
    PVOID Reserved;
    PVOID MiniportIsr;
    PVOID MiniportDpc;
    struct _KDPC InterruptDpc;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    LONG DpcCount;
    struct _KEVENT DpcsCompletedEvent;
    UCHAR SharedInterrupt;
    UCHAR IsrRequested;
    VOID _NDIS_MINIPORT_INTERRUPT;
    VOID _NDIS_MINIPORT_INTERRUPT;
    struct _NDIS_MINIPORT_INTERRUPT *operator=;
    struct _NDIS_MINIPORT_INTERRUPT *operator=;
};

typedef struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PUCHAR InterruptHandler;
    PVOID InterruptDpcHandler;
    PVOID DisableInterruptHandler;
    PVOID EnableInterruptHandler;
    UCHAR MsiSupported;
    UCHAR MsiSyncWithAllMessages;
    PUCHAR MessageInterruptHandler;
    PVOID MessageInterruptDpcHandler;
    PVOID DisableMessageInterruptHandler;
    PVOID EnableMessageInterruptHandler;
    enum _NDIS_INTERRUPT_TYPE InterruptType;
    struct _IO_INTERRUPT_MESSAGE_INFO *MessageInfoTable;
};

typedef struct _NDIS_MINIPORT_OFFLOAD {
    UCHAR SupportsOffload;
    UCHAR SupportsTopOffload;
    UCHAR SupportsTcpConnectionOffload;
    UCHAR SupportsTopTcpConnectionOffload;
    UCHAR TopConnectionOffloadPaused;
    UCHAR RSCDisallowed;
    struct _NDIS_OFFLOAD MiniportCurrentConfig;
    struct _NDIS_OFFLOAD TopCapabilities;
    struct _NDIS_OFFLOAD MiniportInitialConfig;
    struct _NDIS_OFFLOAD MiniportHardwareCapabilities;
    struct _NDIS_OFFLOAD_ENCAPSULATION MiniportSetEncapsulation;
    struct _NDIS_OFFLOAD_ENCAPSULATION TopSetEncapsulation;
    struct _NDIS_OFFLOAD_ENCAPSULATION TopMergedEncapsulation;
    struct _NDIS_OFFLOAD_ENCAPSULATION MiniportMergedEncapsulation;
    struct _NDIS_TCP_CONNECTION_OFFLOAD TopTcpConnectionOffloadCapabilities;
    struct _NDIS_TCP_CONNECTION_OFFLOAD MiniportTcpConnectionOffloadCurrentConfig;
    struct _NDIS_TCP_CONNECTION_OFFLOAD MiniportHwTcpConnectionOffloadCapabilities;
    struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS TopTcpConnectionParameters;
    struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS MiniportTcpConnectionParameters;
    UCHAR MiniportTask[144];
    ULONG MiniportTaskSize;
    UCHAR Ndis5Xsum;
    UCHAR Ndis5LSO;
    UCHAR Ndis5IPsec;
    PVOID MiniportRequestBuffer;
    ULONG MiniportRequestOid;
    ULONG MiniportRequestBufferLength;
};

typedef struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST *NextBlock;
    struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST *DependentBlockList;
    LONG Status;
    PVOID NdisReserved[2];
    PVOID *MiniportOffloadContext;
    PVOID NdisOffloadHandle;
    PVOID ProtocolReserved[2];
    PVOID MiniportReserved[2];
    PVOID ImReserved[2];
    PVOID Scratch[2];
    PVOID SourceHandle;
    ULONG PortNumber;
    struct _NET_BUFFER_LIST *NetBufferListChain;
};

typedef struct _NDIS_MINIPORT_OFFLOAD_REG {
    ULONG IPv4XSumTxDisabled : 1;
    ULONG IPv4XSumRxDisabled : 1;
    ULONG TCPv4XSumTxDisabled : 1;
    ULONG TCPv4XSumRxDisabled : 1;
    ULONG UDPv4XSumTxDisabled : 1;
    ULONG UDPv4XSumRxDisabled : 1;
    ULONG TCPv6XSumTxDisabled : 1;
    ULONG TCPv6XSumRxDisabled : 1;
    ULONG UDPv6XSumTxDisabled : 1;
    ULONG UDPv6XSumRxDisabled : 1;
    ULONG LsoV1IPv4Disabled : 1;
    ULONG LsoV2IPv4Disabled : 1;
    ULONG LsoV2IPv6Disabled : 1;
    ULONG IPsecAHDisabled : 1;
    ULONG IPsecESPDisabled : 1;
    ULONG TCPv4ConnectionOffloadDisabled : 1;
    ULONG TCPv6ConnectionOffloadDisabled : 1;
    ULONG ReadRegistry : 1;
    ULONG IPsecV2AHDisabled : 1;
    ULONG IPsecV2ESPDisabled : 1;
    ULONG IPsecV2IPv4AHDisabled : 1;
    ULONG IPsecV2IPv4ESPDisabled : 1;
    ULONG IPSecV2IPv6Disabled : 1;
    ULONG RscIPv4Disabled : 1;
    ULONG RscIPv6Disabled : 1;
    ULONG EncapsulatedPacketTaskOffloadDisabled : 1;
    ULONG EncapsulatedPacketTaskOffloadNvgreDisabled : 1;
    ULONG EncapsulatedPacketTaskOffloadVxlanDisabled : 1;
    ULONG Value;
};

typedef struct _NDIS_MINIPORT_PAUSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PauseReason;
};

typedef struct _NDIS_MINIPORT_PNP_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PLONG MiniportAddDeviceHandler;
    PVOID MiniportRemoveDeviceHandler;
    PLONG MiniportFilterResourceRequirementsHandler;
    PLONG MiniportStartDeviceHandler;
    ULONG Flags;
};

typedef struct _NDIS_MINIPORT_RESTART_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_RESTART_ATTRIBUTES *RestartAttributes;
    ULONG Flags;
};

typedef struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE {
    UCHAR Combined[916];
    UCHAR Oid[916];
};

typedef struct _NDIS_MINIPORT_SS_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PLONG IdleNotificationHandler;
    PVOID CancelIdleNotificationHandler;
};

typedef struct _NDIS_MINIPORT_STATS {
    ULONG64 ifHCInOctets;
    ULONG64 ifHCInUcastOctets;
    ULONG64 ifHCInBroadcastOctets;
    ULONG64 ifHCInMulticastOctets;
    ULONG64 ifHCInUcastPkts;
    ULONG64 ifHCInMulticastPkts;
    ULONG64 ifHCInBroadcastPkts;
    ULONG64 ifHCOutOctets;
    ULONG64 ifHCOutUcastPkts;
    ULONG64 ifHCOutMulticastPkts;
    ULONG64 ifHCOutBroadcastPkts;
    ULONG64 ifHCOutUcastOctets;
    ULONG64 ifHCOutMulticastOctets;
    ULONG64 ifHCOutBroadcastOctets;
};

typedef struct _NDIS_MINIPORT_SYSPOWER_NOTIFY {
    struct _NDIS_OBJECT_HEADER Header;
    enum _SYSTEM_POWER_STATE TargetSystemState;
    enum _SYSTEM_POWER_STATE EffectiveSystemState;
};

typedef struct _NDIS_MINIPORT_TIMER {
    struct _KTIMER Timer;
    struct _KDPC Dpc;
    PVOID MiniportTimerFunction;
    PVOID MiniportTimerContext;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_MINIPORT_TIMER *NextTimer;
    VOID _NDIS_MINIPORT_TIMER;
    VOID _NDIS_MINIPORT_TIMER;
    struct _NDIS_MINIPORT_TIMER *operator=;
    struct _NDIS_MINIPORT_TIMER *operator=;
};

typedef struct _NDIS_MINIPORT_WORK_ITEM {
    struct _SINGLE_LIST_ENTRY Link;
    enum _NDIS_WORK_ITEM_TYPE WorkItemType;
    PVOID WorkItemContext;
};

typedef struct _NDIS_MSIX_CONFIG_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_MSIX_TABLE_CONFIG ConfigOperation;
    ULONG TableEntry;
    ULONG MessageNumber;
};

typedef struct _NDIS_M_DRIVER_BLOCK {
    VOID _NDIS_M_DRIVER_BLOCK;
    VOID _NDIS_M_DRIVER_BLOCK;
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_M_DRIVER_BLOCK *NextDriver;
    struct _NDIS_MINIPORT_BLOCK *MiniportQueue;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    USHORT Flags;
    struct _NDIS_WRAPPER_HANDLE *NdisDriverInfo;
    struct _DRIVER_OBJECT *DriverObject;
    struct _UNICODE_STRING ServiceRegPath;
    PVOID MiniportDriverContext;
    struct _NDIS_PROTOCOL_BLOCK *AssociatedProtocol;
    struct _LIST_ENTRY DeviceList;
    struct _NDIS_PENDING_IM_INSTANCE *PendingDeviceList;
    PVOID UnloadHandler;
    struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS MiniportDriverCharacteristics;
    struct _NDIS51_MINIPORT_CHARACTERISTICS MiniportCharacteristics;
    wistd::unique_ptr<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> > UnhookedCharacteristics;
    struct _NDIS_WDF_CX_DRIVER_BLOCK *CxBlock;
    struct _KEVENT MiniportsRemovedEvent;
    struct _REFERENCE_EX Ref;
    struct _KMUTANT IMStartRemoveMutex;
    PVOID IMStartRemoveMutexOwnerThread;
    ULONG DriverVersion;
    struct _UNICODE_STRING ServiceName;
    PLONG CoCreateVcHandler;
    PLONG CoDeleteVcHandler;
    PLONG CoActivateVcHandler;
    PLONG CoDeactivateVcHandler;
    PVOID CoSendNetBufferListsHandler;
    PLONG CoRequestHandler;
    PLONG CoOidRequestHandler;
    PVOID InitiateOffloadHandler;
    PVOID TerminateOffloadHandler;
    PVOID UpdateOffloadHandler;
    PVOID InvalidateOffloadHandler;
    PVOID QueryOffloadHandler;
    PLONG TcpOffloadSendHandler;
    PLONG TcpOffloadReceiveHandler;
    PLONG TcpOffloadDisconnectHandler;
    PLONG TcpOffloadForwardHandler;
    PLONG TcpOffloadReceiveReturnHandler;
    struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
    PLONG AddDeviceHandler;
    PVOID RemoveDeviceHandler;
    PLONG FilterResourceRequirementsHandler;
    PLONG StartDeviceHandler;
    PLONG OpenNDKAdapterHandler;
    PVOID CloseNDKAdapterHandler;
    PVOID SysPowerNotifyHandler;
    PLONG IdleNotificationHandler;
    PVOID CancelIdleNotificationHandler;
    PLONG DevicePowerNotifyHandler;
    PVOID ReenumerateFailedAdapterHandler;
    PLONG LiveDumpCallback;
    struct _UNICODE_STRING ImageName;
    struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__ *HookDriverHandle;
    enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE HookType;
    BOOLEAN HookRegistered;
    PLONG AllocateNetBufferListForwardingContextHandler;
    PVOID FreeNetBufferListForwardingContextHandler;
    PLONG AddNetBufferListDestinationHandler;
    PLONG SetNetBufferListSourceHandler;
    PLONG GrowNetBufferListDestinationsHandler;
    PVOID GetNetBufferListDestinationsHandler;
    PLONG UpdateNetBufferListDestinationsHandler;
    PLONG CopyNetBufferListInfoHandler;
    PLONG ReferenceSwitchNicHandler;
    PLONG DereferenceSwitchNicHandler;
    PLONG ReferenceSwitchPortHandler;
    PLONG DereferenceSwitchPortHandler;
    PVOID ReportFilteredNetBufferListsHandler;
    PLONG SetNetBufferListSwitchContextHandler;
    PVOID *GetNetBufferListSwitchContextHandler;
    PLONG PDExtProviderRegisterClient;
    PVOID PDExtProviderDeregisterClient;
    struct _PD_BUFFER **PDExtProviderGetFreePDBuffer;
    PVOID PDExtProviderReturnPDBuffer;
    PVOID PDExtProviderInjectPDBuffer;
    PLONG PDExtProviderCopyPDBufferInfo;
    PVOID *PDExtProviderGetPDBufferClientContext;
    PLONG PDExtProviderGetPDBufferDestinations;
    PLONG PDExtProviderAddPDBufferDestination;
    PLONG PDExtProviderUpdatePDBufferDestinations;
    union _NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO **PDExtProviderGetPDBufferForwardingDetail;
    PVOID PDExtProviderSetupBufferFromPDBuffer;
    PLONG PDExtProviderGrowPDBufferDestinations;
    PLONG PDExtProviderGetSwitchInfo;
    PLONG PDBMCreateDomain;
    PLONG PDBMAddMemberToDomain;
    PVOID PDBMRemoveMemberFromDomain;
    PVOID PDBMDeleteDomain;
    PLONG PDBMAllocateCommonBuffer;
    PVOID PDBMFreeCommonBuffer;
    VOID ~_NDIS_M_DRIVER_BLOCK;
    struct _NDIS_M_DRIVER_BLOCK *operator=;
    PVOID __vecDelDtor;
};

typedef struct _NDIS_M_PERIODIC_RECEIVES {
    struct _NDIS_MINIPORT_BLOCK *NextMiniportBlock;
    enum _NDIS_M_PERIODIC_RECEIVE_STATE State;
    ULONG64 SpinLock;
    PVOID LockThread;
    ULONG LockDbg;
    LONG NumMQueuedNbls;
    LONG NumNblsDequeued;
    struct _NET_BUFFER_LIST *QueuedHead;
    struct _NET_BUFFER_LIST *QueuedTail;
    ULONG BoundToIP;
    UCHAR Paused;
    LONG NblsAllocated;
    ULONG TrackingQueued;
    ULONG TrackingDequeued;
    ULONG TrackingResources;
    ULONG TrackingPending;
    ULONG TrackingIndicated;
    ULONG TrackingEmptied;
    struct _WORK_QUEUE_ITEM WorkItem;
    LONG WorkItemQueued;
};

typedef struct _NDIS_NAPS_TELEMETRY_DATA {
    ULONG StartingSuspendCount;
    ULONG64 StartingResumeLatencyMs;
    ULONG64 StartingSuspendTimeMs;
    union _LARGE_INTEGER StartTime;
    struct _NDIS_NAPS_TELEMETRY_REASON_DATA Reasons[49];
    struct _NDIS_NAPS_TELEMETRY_OID_DATA ReasonOids[8];
};

typedef struct _NDIS_NAPS_TELEMETRY_OID_DATA {
    USHORT WakeCount;
    USHORT BusyCount;
    USHORT Weight;
    ULONG Oid;
};

typedef struct _NDIS_NAPS_TELEMETRY_REASON_DATA {
    USHORT WakeCount;
    USHORT BusyCount;
    union _NDIS_SS_RESUME_REASON Reason;
    ULONG64 TotalTimeMs;
};

typedef struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION {
    struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION *NextEntry;
    ULONG Tag;
    UCHAR Data[1];
};

typedef struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX *NextEntry;
    ULONG Tag;
    PVOID Data;
};

typedef struct _NDIS_NBL_TRACKER {
    struct _LIST_ENTRY Linkage;
    enum _NDIS_NBL_TRACKER_SOURCE Source;
    ULONG Flags : 16;
    PVOID Context;
    struct _UNICODE_STRING *Name;
    struct _NDIS_NBL_TRACKER_BUCKET Buckets[2];
};

typedef struct _NDIS_NBL_TRACKER_BUCKET {
    struct PNDIS_PER_PROCESSOR_SLOT__ *Slot;
    LONG64 PassiveCounter;
};

typedef struct _NDIS_NDK_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaxQpCount;
    ULONG MaxCqCount;
    ULONG MaxMrCount;
    ULONG MaxPdCount;
    ULONG MaxInboundReadLimit;
    ULONG MaxOutboundReadLimit;
    ULONG MaxMwCount;
    ULONG MaxSrqCount;
    ULONG64 MissingCounterMask;
    struct _NDK_ADAPTER_INFO *NdkInfo;
};

typedef struct _NDIS_NDK_PARAMETERS {
    struct _NDIS_NDK_REQUEST_PARAMETERS NdkRequest;
    struct _NDIS_NDK_RESPONSE_PARAMETERS NdkResponse;
};

typedef struct _NDIS_NDK_PERFORMANCE_COUNTERS {
    ULONG64 Connect;
    ULONG64 Accept;
    ULONG64 ConnectFailure;
    ULONG64 ConnectionError;
    ULONG64 ActiveConnection;
    ULONG64 Reserved01;
    ULONG64 Reserved02;
    ULONG64 Reserved03;
    ULONG64 Reserved04;
    ULONG64 Reserved05;
    ULONG64 Reserved06;
    ULONG64 Reserved07;
    ULONG64 Reserved08;
    ULONG64 Reserved09;
    ULONG64 Reserved10;
    ULONG64 Reserved11;
    ULONG64 Reserved12;
    ULONG64 Reserved13;
    ULONG64 Reserved14;
    ULONG64 Reserved15;
    ULONG64 Reserved16;
    ULONG64 Reserved17;
    ULONG64 Reserved18;
    ULONG64 Reserved19;
    ULONG64 Reserved20;
    ULONG64 CQError;
    ULONG64 RDMAInOctets;
    ULONG64 RDMAOutOctets;
    ULONG64 RDMAInFrames;
    ULONG64 RDMAOutFrames;
};

typedef struct _NDIS_NDK_REQUEST_PARAMETERS {
    UCHAR RdmaRequested;
    ULONG SwitchPortId;
    ULONG IfIndex;
    UCHAR MacAddress[32];
    ULONG VlanId;
    struct _NDIS_NDK_CAPABILITIES NdkReserved;
};

typedef struct _NDIS_NDK_RESPONSE_PARAMETERS {
    UCHAR CapabilitiesAvailable;
    struct _NDIS_NDK_CAPABILITIES ReceivedCapabilities;
};

typedef struct _NDIS_NET_BUFFER_LIST_8021Q_INFO {
    struct {
        ULONG UserPriority : 3;
        ULONG CanonicalFormatId : 1;
        ULONG VlanId : 12;
        ULONG Reserved : 16;
    } TagHeader;
    struct {
        ULONG UserPriority : 3;
        ULONG CanonicalFormatId : 1;
        ULONG VlanId : 12;
        ULONG WMMInfo : 4;
        ULONG Reserved : 12;
    } WLanTagHeader;
    PVOID Value;
};

typedef struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO {
    struct {
        USHORT FilterId;
         <unnamed-type-QueueVPortInfo>;
        union {
            USHORT QueueId;
            USHORT VPortId;
        } QueueVPortInfo;
    } FilteringInfo;
    PVOID Value;
};

typedef struct _NDIS_NET_BUFFER_LIST_GFT_OFFLOAD_INFO {
    ULONG Flags;
    USHORT VPortId;
    USHORT Reserved;
};

typedef struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO {
    PVOID MediaSpecificInfo;
    PVOID NativeWifiSpecificInfo;
    PVOID Value;
};

typedef struct _NDIS_NET_BUFFER_LIST_POOL {
    struct _NDIS_POOL_HEADER _NDIS_POOL_HEADER;
    UCHAR ProtocolId;
    USHORT ContextSize;
    PVOID OwnerHandle;
    PVOID Allocator;
    ULONG Tag;
    ULONG Flags;
    ULONG64 Lock;
    struct _LIST_ENTRY GlobalNetBufferListPoolList;
    ULONG DataSize;
    ULONG MdlSize;
    ULONG ItemLength;
    struct _NDIS_NPAGED_LOOKASIDE_LIST NetBufferListPoolList[1];
};

typedef struct _NDIS_NET_BUFFER_LIST_VIRTUAL_SUBNET_INFO {
    ULONG VirtualSubnetId : 24;
    ULONG ReservedVsidBits : 8;
    ULONG Reserved;
    PVOID Value;
};

typedef struct _NDIS_NET_BUFFER_POOL {
    struct _NDIS_POOL_HEADER _NDIS_POOL_HEADER;
    ULONG ItemLength;
    PVOID OwnerHandle;
    PVOID Allocator;
    ULONG Tag;
    ULONG64 Lock;
    struct _LIST_ENTRY GlobalNetBufferPoolList;
    ULONG Flags;
    ULONG DataSize;
    ULONG MdlSize;
    struct _NDIS_NPAGED_LOOKASIDE_LIST NetBufferPoolList[1];
};

typedef struct _NDIS_NIC_SWITCH_BLOCK {
    struct _LIST_ENTRY AdapterLink;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_OPEN_BLOCK *Open;
    LONG Reference;
    ULONG SwitchId;
    struct _NDIS_PF_BLOCK *PFBlock;
    ULONG NumActiveVPorts;
    struct _LIST_ENTRY VPortList;
    ULONG NumAllocatedVFs;
    struct _LIST_ENTRY VFList;
    ULONG NonDefaultQueuePairsInUse;
    struct _NDIS_NIC_SWITCH_PARAMETERS SwitchParameters;
    ULONG NumActiveDefaultVPortMacAddresses;
    ULONG NumActiveNonDefaultVPortMacAddresses;
    ULONG NumActiveDefaultVPortVlanIds;
    ULONG NumActiveNonDefaultVPortVlanIds;
};

typedef struct _NDIS_NIC_SWITCH_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG NdisReserved1;
    ULONG NumTotalMacAddresses;
    ULONG NumMacAddressesPerPort;
    ULONG NumVlansPerPort;
    ULONG NdisReserved2;
    ULONG NdisReserved3;
    ULONG NicSwitchCapabilities;
    ULONG MaxNumSwitches;
    ULONG MaxNumVPorts;
    ULONG NdisReserved4;
    ULONG MaxNumVFs;
    ULONG MaxNumQueuePairs;
    ULONG NdisReserved5;
    ULONG NdisReserved6;
    ULONG NdisReserved7;
    ULONG MaxNumQueuePairsPerNonDefaultVPort;
    ULONG NdisReserved8;
    ULONG NdisReserved9;
    ULONG NdisReserved10;
    ULONG NdisReserved11;
    ULONG NdisReserved12;
    ULONG MaxNumMacAddresses;
    ULONG NdisReserved13;
    ULONG NdisReserved14;
    ULONG NdisReserved15;
    ULONG NdisReserved16;
    ULONG NdisReserved17;
    ULONG MaxNumRssCapableNonDefaultPFVPorts;
    ULONG NumberOfIndirectionTableEntriesForDefaultVPort;
    ULONG NumberOfIndirectionTableEntriesPerNonDefaultPFVPort;
    ULONG MaxNumQueuePairsForDefaultVPort;
};

typedef struct _NDIS_NIC_SWITCH_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_NIC_SWITCH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_NIC_SWITCH_TYPE SwitchType;
    ULONG SwitchId;
    struct _IF_COUNTED_STRING_LH SwitchFriendlyName;
    ULONG NumVFs;
    ULONG NdisReserved1;
    ULONG NdisReserved2;
    ULONG NdisReserved3;
    ULONG NumQueuePairsForDefaultVPort;
};

typedef struct _NDIS_NIC_SWITCH_VF_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
    struct _IF_COUNTED_STRING_LH VMName;
    struct _IF_COUNTED_STRING_LH VMFriendlyName;
    struct _IF_COUNTED_STRING_LH NicName;
    USHORT MacAddressLength;
    UCHAR PermanentMacAddress[32];
    UCHAR CurrentMacAddress[32];
    USHORT VFId;
    ULONG RequestorId;
};

typedef struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
    ULONG VPortId;
    struct _IF_COUNTED_STRING_LH VPortName;
    USHORT AttachedFunctionId;
    ULONG NumQueuePairs;
    enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION InterruptModeration;
    enum _NDIS_NIC_SWITCH_VPORT_STATE VPortState;
    struct _GROUP_AFFINITY ProcessorAffinity;
    ULONG LookaheadSize;
    struct _NDIS_NDK_PARAMETERS NdkParams;
    ULONG QosSqId;
};

typedef struct _NDIS_NPAGED_LOOKASIDE_LIST {
    struct _LOOKASIDE_LIST_EX List;
    union _SLIST_HEADER BackupList;
    union _SLIST_HEADER *AllocListPtr;
    union _SLIST_HEADER *FreeListPtr;
    ULONG64 ListSwapLock;
    UCHAR Initialized;
};

typedef struct _NDIS_NSI_COMPARTMENT_RW {
    struct _NDIS_OBJECT_HEADER Header;
    union _NET_LUID_LH LoopbackIfLuid;
    struct _GUID LoopbackIfNetworkGuid;
    struct _GUID LoopbackIfInterfaceGuid;
    struct _IF_COUNTED_STRING_LH LoopbackIfDescr;
    struct _IF_COUNTED_STRING_LH LoopbackIfAlias;
    struct _GUID CompartmentGuid;
    struct _IF_COUNTED_STRING_LH CompartmentDescr;
    enum _NDIS_NSI_COMPARTMENT_TYPE CompartmentType;
    ULONG Flags;
    struct _GUID NamespaceGuid;
};

typedef struct _NDIS_NSI_IF_RCV_ADDRESS_ROD {
    enum _NET_IF_RCV_ADDRESS_TYPE ifRcvAddressType;
    USHORT ifRcvAddressLength;
};

typedef struct _NDIS_NSI_INTERFACE_ENUM_ROD {
    ULONG CompartmentId;
    struct _GUID NetworkGuid;
    struct _IF_COUNTED_STRING_LH ifAlias;
    enum _NET_IF_OPER_STATUS ifOperStatus;
    ULONG ifOperStatusFlags;
    ULONG ifMtu;
    struct _IF_PHYSICAL_ADDRESS_LH ifPhysAddress;
    struct _IF_PHYSICAL_ADDRESS_LH PermanentPhysAddress;
    enum _NET_IF_ADMIN_STATUS ifAdminStatus;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    UCHAR ifPromiscuousMode;
    UCHAR ifDeviceWakeUpEnable;
    UCHAR ifHideInterfaceInUi;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
};

typedef struct _NDIS_NSI_INTERFACE_ENUM_ROS {
    ULONG ifIndex;
    struct _IF_COUNTED_STRING_LH ifDescr;
    USHORT ifType;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    struct _GUID InterfaceGuid;
    UCHAR ifConnectorPresent;
    ULONG ifFlags;
    enum _NDIS_MEDIUM MediaType;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
};

typedef struct _NDIS_NSI_NETWORK_RW {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG CompartmentId;
    ULONG SiteId;
    struct _IF_COUNTED_STRING_LH NetworkName;
};

typedef struct _NDIS_OBJECT_HEADER {
    UCHAR Type;
    UCHAR Revision;
    USHORT Size;
};

typedef struct _NDIS_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD Checksum;
    struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
    struct _NDIS_IPSEC_OFFLOAD_V1 IPsecV1;
    struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
    ULONG Flags;
    struct _NDIS_IPSEC_OFFLOAD_V2 IPsecV2;
    struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD Rsc;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD EncapsulatedPacketTaskOffloadGre;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 EncapsulatedPacketTaskOffloadVxlan;
    UCHAR EncapsulationTypes;
    struct _NDIS_RFC6877_464XLAT_OFFLOAD Rfc6877Xlat;
};

typedef struct _NDIS_OFFLOAD_CLIENT_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
};

typedef struct _NDIS_OFFLOAD_ENCAPSULATION {
    struct _NDIS_OBJECT_HEADER Header;
     <unnamed-type-IPv4>;
    struct {
        ULONG Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        ULONG Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } IPv6;
};

typedef struct _NDIS_OFFLOAD_EVENT_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
};

typedef struct _NDIS_OFFLOAD_HANDLE {
    PVOID NdisReserved[1];
    PVOID MiniportOffloadContext;
};

typedef struct _NDIS_OFFLOAD_HANDLE_PRIVATE {
    struct _NDIS_OFFLOAD_HANDLE Handle;
    PVOID ProtocolBindingContext;
};

typedef struct _NDIS_OID_CACHE_ENTRY {
    ULONG Oid;
    ULONG InfoBufferLength;
    PVOID InfoBuffer;
    LONG LastStatus;
    UCHAR ValueValid;
};

typedef struct _NDIS_OID_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_REQUEST_TYPE RequestType;
    ULONG PortNumber;
    ULONG Timeout;
    PVOID RequestId;
    PVOID RequestHandle;
     _REQUEST_DATA;
    union _NDIS_OID_REQUEST::_REQUEST_DATA DATA;
    UCHAR NdisReserved[128];
    UCHAR MiniportReserved[16];
    UCHAR SourceReserved[16];
    UCHAR SupportedRevision;
    UCHAR Reserved1;
    USHORT Reserved2;
    ULONG SwitchId;
    ULONG VPortId;
    ULONG Flags;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InputBufferLength;
    ULONG OutputBufferLength;
    ULONG MethodId;
    ULONG BytesWritten;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OID_REQUEST_FLAGS {
    ULONG Completed : 1;
    ULONG FreeRequest : 1;
    ULONG OidInTable : 1;
    ULONG SignalEvent : 1;
    ULONG CoNdis : 1;
    ULONG FromProtocol : 1;
    ULONG FromFilter : 1;
    ULONG Passthrough : 1;
    ULONG LastRestoreFilter : 1;
    ULONG OnlyDerefOpen : 1;
    ULONG SignalAndExit : 1;
    ULONG MpSaveBuf : 1;
    ULONG Reserved2 : 1;
    ULONG DownLevel : 1;
    ULONG Cloned : 1;
    ULONG Mandatory : 1;
    ULONG SentToMiniport : 1;
    ULONG SentToFilter : 1;
    ULONG ForReset : 1;
    ULONG ForRestore : 1;
    ULONG ForMpDirect : 1;
    ULONG DirectRequest : 1;
    ULONG RevisionChanged : 1;
    ULONG SkipPreProc : 1;
    ULONG SkipPostProc : 1;
    ULONG SkipSourceCompletion : 1;
    ULONG SourceCompletionOnly : 1;
    ULONG InternalClone : 1;
    ULONG Remainder : 4;
};

typedef struct _NDIS_OID_REQUEST_RESERVED {
    struct _LIST_ENTRY Entry;
    struct _NDIS_OID_REQUEST *NextRequest;
    LONG Status;
    struct _NDIS_OID_REQUEST_FLAGS Flags;
    ULONG OidTableIndex;
    struct _NDIS_OID_REQUEST *OidRequest;
    struct _NDIS_REQUEST *Request;
    PVOID SourceHandle;
    struct _KEVENT Event;
    PVOID NdisVcHandle;
    struct {
        PVOID PartyContext;
        PVOID CallMgrContext;
        PVOID VcContext;
        PVOID AfContext;
    } CoNdis;
    ULONG64 StartCycle;
    struct _NDIS_REQUEST_XLATION_CONTEXT *pOidXlationContext;
    ULONG OriginalBufferLength;
    ULONG SavedOid;
    PVOID SavedInfoBuf;
    ULONG SavedInfoBufLen;
    ULONG RequestBuffer;
    struct {
        struct _NDIS_VF_BLOCK *VFBlock;
        struct _NDIS_VPORT_BLOCK *VPortBlock;
    } IovContext;
    struct {
        struct _NDIS_WOL_XLATION_CONTEXT *WolXlationContext;
        ULONG WolPatternId;
        struct _NDIS_PACKET_PATTERN_ENTRY *SourcePacketEntry;
    } PMContext;
};

typedef struct _NDIS_OPEN_BLOCK {
    struct _NDIS_COMMON_OPEN_BLOCK _NDIS_COMMON_OPEN_BLOCK;
    struct _NDIS_CO_AF_BLOCK *NextAf;
    PLONG MiniportCoCreateVcHandler;
    PLONG MiniportCoRequestHandler;
    PLONG CoCreateVcHandler;
    PLONG CoDeleteVcHandler;
    PVOID CmActivateVcCompleteHandler;
    PVOID CmDeactivateVcCompleteHandler;
    PVOID CoRequestCompleteHandler;
    PLONG CoRequestHandler;
    struct _LIST_ENTRY ActiveVcHead;
    struct _LIST_ENTRY InactiveVcHead;
    LONG PendingAfNotifications;
    struct _KEVENT *AfNotifyCompleteEvent;
    PLONG MiniportCoOidRequestHandler;
    PVOID CoOidRequestCompleteHandler;
    PLONG CoOidRequestHandler;
    VOID _NDIS_OPEN_BLOCK;
    VOID _NDIS_OPEN_BLOCK;
    struct _NDIS_OPEN_BLOCK *operator=;
    struct _NDIS_OPEN_BLOCK *operator=;
};

typedef struct _NDIS_OPEN_NDK_ADAPTER_PARAMETERS {
    struct NDK_VERSION Version;
    ULONG SwitchId;
    ULONG VPortId;
};

typedef struct _NDIS_OPEN_OFFLOAD {
    struct _NDIS_OFFLOAD_ENCAPSULATION SetEncapsulation;
    UCHAR AlreadySetEncapsulation;
    struct _NDIS_OFFLOAD_ENCAPSULATION XlateEncap;
     <unnamed-type-Encapsulation>;
    struct {
        ULONG Oid;
        PVOID Buffer;
        ULONG BufferLength;
    } Encapsulation;
     <unnamed-type-Task>;
    struct {
        ULONG Oid;
        PVOID Buffer;
        ULONG BufferLength;
    } Task;
};

typedef struct _NDIS_OPEN_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _UNICODE_STRING *AdapterName;
    enum _NDIS_MEDIUM *MediumArray;
    ULONG MediumArraySize;
    PULONG SelectedMediumIndex;
    PUSHORT FrameTypeArray;
    ULONG FrameTypeArraySize;
};

typedef struct _NDIS_PACKET {
    struct _NDIS_PACKET_PRIVATE Private;
    UCHAR MiniportReserved[16];
    UCHAR WrapperReserved[16];
    UCHAR MiniportReservedEx[24];
    UCHAR WrapperReservedEx[8];
    UCHAR MacReserved[32];
    ULONG64 Reserved[2];
    UCHAR ProtocolReserved[1];
};

typedef struct _NDIS_PACKET_8021Q_INFO {
    struct {
        ULONG UserPriority : 3;
        ULONG CanonicalFormatId : 1;
        ULONG VlanId : 12;
        ULONG Reserved : 16;
    } TagHeader;
    PVOID Value;
};

typedef struct _NDIS_PACKET_EXTENSION {
    PVOID NdisPacketInfo[12];
};

typedef struct _NDIS_PACKET_OOB_DATA {
    ULONG64 TimeToSend;
    ULONG64 TimeSent;
    ULONG64 TimeReceived;
    ULONG HeaderSize;
    ULONG SizeMediaSpecificInfo;
    PVOID MediaSpecificInformation;
    LONG Status;
};

typedef struct _NDIS_PACKET_PATTERN_ENTRY {
    struct _SINGLE_LIST_ENTRY Link;
    struct _SINGLE_LIST_ENTRY DupLink;
    ULONG Size;
    PVOID Source;
    ULONG Priority;
    ULONG EffectivePriority;
    ULONG Id;
    ULONG PortNumber;
    struct _NDIS_PM_PACKET_PATTERN Pattern;
    struct _NDIS_PM_WOL_PATTERN WoLPattern;
    struct _NDIS_PM_PROTOCOL_OFFLOAD ProtocolOffload;
};

typedef struct _NDIS_PACKET_PRIVATE {
    ULONG PhysicalCount;
    ULONG TotalLength;
    struct _MDL *Head;
    struct _MDL *Tail;
    PVOID Pool;
    ULONG Count;
    ULONG Flags;
    UCHAR ValidCounts;
    UCHAR NdisPacketFlags;
    USHORT NdisPacketOobOffset;
};

typedef struct _NDIS_PACKET_STACK {
    ULONG64 IMReserved[2];
    ULONG64 NdisReserved[4];
};

typedef struct _NDIS_PACKET_WRAPPER {
    ULONG64 Padding;
    ULONG PvtFlags;
    struct _STACK_INDEX StackIndex;
    struct _NDIS_PACKET Packet;
};

typedef struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG DeviceType;
    ULONG CurrentSpeedAndMode;
    ULONG CurrentPayloadSize;
    ULONG MaxPayloadSize;
    ULONG MaxReadRequestSize;
    ULONG CurrentLinkSpeed;
    ULONG CurrentLinkWidth;
    ULONG MaxLinkSpeed;
    ULONG MaxLinkWidth;
    ULONG PciExpressVersion;
    ULONG InterruptType;
    ULONG MaxInterruptMessages;
};

typedef struct _NDIS_PCW_DATA_BLOCK {
    ULONG DatapathEventReferences[26];
    ULONG DatapathCycleReferences[13];
    struct _NDIS_PCW_DATA_BLOCK *Next;
    ULONG ReferenceCount;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    ULONG TotalInstanceId;
    struct _UNICODE_STRING TotalInstanceName;
};

typedef struct _NDIS_PD_ACQUIRE_QUEUES_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
};

typedef struct _NDIS_PD_BLOCK {
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    ULONG DiagnosticCode;
    UCHAR PDEnabledRegistryValue;
    UCHAR PDBuffersManagedByDriver;
    UCHAR PDNonDmaAdapter;
    ULONG PDDomainId;
    ULONG PDDmaAddressWidth;
    struct _NDIS_PD_CONFIG *PDCurrentConfig;
    ULONG PDCurrentConfigSize;
    ULONG PDCurrentConfigBufferSize;
    struct _LIST_ENTRY PDClientList;
    struct _LIST_ENTRY PDBlockListLink;
    PVOID PDBMDomain;
    struct NDIS_PD_BM_DOMAIN_MEMBER_HANDLE__ *PDBMDomainMemberHandle;
};

typedef struct _NDIS_PD_BM_DOMAIN_MEMBER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID MiniportAdapterContext;
};

typedef struct _NDIS_PD_BM_DOMAIN_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
};

typedef struct _NDIS_PD_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaximumTxPartialBufferCount;
    ULONG MaximumRxPartialBufferCount;
    UCHAR RxFilterContextWidth;
    ULONG CapabilityFlags;
    ULONG MaxNumberOfRxQueues;
    ULONG MaxNumberOfTxQueues;
    ULONG MaxNumberOfRxQueuesForDefaultVport;
    ULONG MaxNumberOfTxQueuesForDefaultVport;
    ULONG MaxNumberOfRxQueuesPerNonDefaultVport;
    ULONG MaxNumberOfTxQueuesPerNonDefaultVport;
    ULONG ExactMatchProfileArrayOffset;
    ULONG ExactMatchProfileArrayNumElements;
    ULONG ExactMatchProfileArrayElementSize;
    ULONG WildcardMatchProfileArrayOffset;
    ULONG WildcardMatchProfileArrayNumElements;
    ULONG WildcardMatchProfileArrayElementSize;
    ULONG MinimumModerationInterval;
    ULONG MaximumModerationInterval;
    ULONG ModerationIntervalGranularity;
    ULONG MaxRxQueueSize;
    ULONG MaxTxQueueSize;
};

typedef struct _NDIS_PD_CONFIG {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    UCHAR Enabled;
    ULONG CapabilitiesOffset;
    ULONG CapabilitiesSize;
};

typedef struct _NDIS_PD_COUNTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PWCHAR CounterName;
    enum NDIS_PD_COUNTER_TYPE Type;
};

typedef struct _NDIS_PD_EC_UTILIZATION_COUNTER {
    ULONG ProcessorNumber;
    ULONG IterationCount;
    ULONG BusyWaitIterationCount;
    ULONG TxQueueCount;
    ULONG RxQueueCount;
    ULONG64 CpuCycleTime;
    ULONG64 ThreadCycleTime;
    ULONG64 ProcessingCycles;
    ULONG64 BusyWaitCycles;
    ULONG64 IdleCycles;
};

typedef struct _NDIS_PD_EXT_CLIENT_DISPATCH {
    PVOID PDExtClientProcessBuffersSend;
    PVOID PDExtClientProcessBuffersReceive;
    PVOID PDExtClientCompleteBuffersSend;
    PVOID PDExtClientCompleteBuffersReceive;
};

typedef struct _NDIS_PD_EXT_CLIENT_PARAM {
    ULONG PDExtClientBufferContextSize;
    ULONG PDExtClientBufferBackfillSize;
};

typedef struct _NDIS_PD_FILTER_COUNTER {
    ULONG64 PacketsMatched;
    ULONG64 BytesMatched;
};

typedef struct _NDIS_PD_FILTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MatchProfileId;
    ULONG Priority;
    struct NDIS_PD_COUNTER_HANDLE__ *CounterHandle;
    struct _NDIS_PD_QUEUE *TargetReceiveQueue;
    ULONG64 RxFilterContext;
    PUCHAR HeaderGroupMatchArray;
    ULONG HeaderGroupMatchArrayNumElements;
    ULONG HeaderGroupMatchArrayElementSize;
    ULONG HeaderGroupMatchArrayTotalSize;
};

typedef struct _NDIS_PD_POST_AND_DRAIN_ARG {
    struct _PD_BUFFER *PostBufferListHead;
    struct _PD_BUFFER **DrainBufferListTail;
    ULONG MaxDrainCount;
    ULONG DrainCount;
    ULONG PostCount;
    UCHAR QueueDepthThresholdReached;
};

typedef struct _NDIS_PD_PROVIDER_DISPATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PLONG NdisPDAllocateQueue;
    PVOID NdisPDFreeQueue;
    PLONG NdisPDAcquireReceiveQueues;
    PVOID NdisPDReleaseReceiveQueues;
    PLONG NdisPDAllocateCounter;
    PVOID NdisPDFreeCounter;
    PVOID NdisPDQueryCounter;
    PLONG NdisPDSetReceiveFilter;
    PVOID NdisPDClearReceiveFilter;
    PVOID NdisPDRequestDrainNotification;
    PLONG NdisPDQueueControl;
    PLONG NdisPDProviderControl;
};

typedef struct _NDIS_PD_QUEUE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _NDIS_PD_QUEUE_DISPATCH *Dispatch;
    PVOID PDPlatformReserved[2];
    PVOID PDClientReserved[2];
};

typedef struct _NDIS_PD_QUEUE_DEPTH_COUNTER {
    ULONG AvgQueueDepth;
    ULONG AvgQueueUtilization;
};

typedef struct _NDIS_PD_QUEUE_DISPATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID PDPostAndDrainBufferList;
    PVOID PDQueryQueueDepth;
    PVOID PDFlushQueue;
    PVOID PDPostAndDrainBufferListEx;
};

typedef struct _NDIS_PD_QUEUE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum NDIS_PD_QUEUE_TYPE QueueType;
    ULONG QueueSize;
    ULONG ReceiveDataLength;
    struct _GROUP_AFFINITY Affinity;
    ULONG TrafficClassId;
    ULONG MaximumPartialBufferCount;
    struct NDIS_PD_COUNTER_HANDLE__ *CounterHandle;
};

typedef struct _NDIS_PD_RECEIVE_QUEUE_COUNTER {
    ULONG64 PacketsReceived;
    ULONG64 BytesReceived;
    ULONG64 PacketsDropped;
};

typedef struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER {
    ULONG64 PacketsTransmitted;
    ULONG64 BytesTransmitted;
};

typedef struct _NDIS_PENDING_IM_INSTANCE {
    struct _NDIS_PENDING_IM_INSTANCE *Next;
    PVOID Context;
    struct _UNICODE_STRING Name;
};

typedef struct _NDIS_PER_PROC_PERFORMANCE_COUNTERS {
    ULONG64 DpcCount;
    ULONG64 IsrCount;
    ULONG64 ReceiveIndicationCalls;
    ULONG64 ReturnNblsCalls;
    ULONG64 ReceivedNbls;
    ULONG64 ReturnedNbls;
    ULONG64 SendCalls;
    ULONG64 SendCompleteCalls;
    ULONG64 SentNbs;
    ULONG64 SendCompleteNbs;
    ULONG64 HalBuildSGListCalls;
    ULONG64 IndirectionTableChangeCalls;
    ULONG64 NdisQueueDpcCallsNotCurrentCpu;
    ULONG64 DpcTotalCycles;
    ULONG64 IsrCycles;
    ULONG64 NdisReceiveIndicationCycles;
    ULONG64 StackReceiveIndicationCycles;
    ULONG64 NdisReturnNblCycles;
    ULONG64 MiniportReturnNblCycles;
    ULONG64 NdisSendCycles;
    ULONG64 MiniportSendCycles;
    ULONG64 NdisSendCompleteCycles;
    ULONG64 StackSendCompleteCycles;
    ULONG64 HalBuildSGListCycles;
    ULONG64 IndirectionTableChangeCycles;
    ULONG64 SendCallsAtPassive;
    ULONG64 SentNbsAtPassive;
    ULONG64 ReturnNblsCallsAtPassive;
    ULONG64 ReturnedNblsAtPassive;
    ULONG64 LowResourceReceiveIndicationCalls;
    ULONG64 LowResourceReceivedNbls;
    ULONG64 TcpOffloadReceiveIndicationCalls;
    ULONG64 TcpOffloadSendCalls;
    ULONG64 TcpOffloadReceiveData;
    ULONG64 TcpOffloadSendData;
    ULONG64 IsrToDpcCycles;
    ULONG64 DpcCallsDeferred;
    ULONG64 PacketsCoalesced;
};

typedef struct _NDIS_PF_BLOCK {
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_OPEN_BLOCK *Open;
    struct _NDIS_NIC_SWITCH_BLOCK *NicSwitch;
    LONG Reference;
    ULONG NumAttachedVPorts;
    struct _LIST_ENTRY AttachedVPortList;
};

typedef struct _NDIS_PHYSICAL_ADDRESS_UNIT {
    union _LARGE_INTEGER PhysicalAddress;
    ULONG Length;
};

typedef struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS {
    ULONG DevicePowerState;
    ULONG64 TimeSuspended100ns;
    ULONG64 Uptime100ns;
    ULONG LowPowerTransitions;
};

typedef struct _NDIS_PKT_POOL {
    ULONG Tag;
    USHORT PacketLength;
    USHORT PktsPerBlock;
    USHORT MaxBlocks;
    USHORT StackSize;
    LONG BlocksAllocated;
    ULONG ProtocolId;
    ULONG BlockSize;
    PVOID Allocator;
    ULONG64 Lock;
    struct _LIST_ENTRY FreeBlocks;
    struct _LIST_ENTRY UsedBlocks;
    struct _LIST_ENTRY AgingBlocks;
    struct _LIST_ENTRY GlobalPacketPoolList;
    union _LARGE_INTEGER NextScavengeTick;
};

typedef struct _NDIS_PKT_POOL_HDR {
    struct _LIST_ENTRY List;
    union _LARGE_INTEGER TimeStamp;
    union _SLIST_HEADER FreeList;
    enum _POOL_BLOCK_TYPE State;
};

typedef struct _NDIS_PM_ADMIN_CONFIG {
    ULONG WakeOnPattern : 2;
    ULONG WakeOnMagicPacket : 2;
    ULONG DeviceSleepOnDisconnect : 2;
    ULONG PMARPOffload : 2;
    ULONG PMNSOffload : 2;
    ULONG PMWiFiRekeyOffload : 2;
    ULONG SelectiveSuspend : 2;
    ULONG NicAutoPowerSaver : 2;
    ULONG Value;
};

typedef struct _NDIS_PM_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SupportedWoLPacketPatterns;
    ULONG NumTotalWoLPatterns;
    ULONG MaxWoLPatternSize;
    ULONG MaxWoLPatternOffset;
    ULONG MaxWoLPacketSaveBuffer;
    ULONG SupportedProtocolOffloads;
    ULONG NumArpOffloadIPv4Addresses;
    ULONG NumNSOffloadIPv6Addresses;
    enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
    ULONG SupportedWakeUpEvents;
    ULONG MediaSpecificWakeUpEvents;
};

typedef struct _NDIS_PM_COUNTED_STRING {
    USHORT Length;
    WCHAR String[65];
};

typedef struct _NDIS_PM_PACKET_PATTERN {
    ULONG Priority;
    ULONG Reserved;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
    ULONG PatternFlags;
};

typedef struct _NDIS_PM_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG EnabledWoLPacketPatterns;
    ULONG EnabledProtocolOffloads;
    ULONG WakeUpFlags;
    ULONG MediaSpecificWakeUpEvents;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Priority;
    enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE ProtocolOffloadType;
    struct _NDIS_PM_COUNTED_STRING FriendlyName;
    ULONG ProtocolOffloadId;
    ULONG NextProtocolOffloadOffset;
     _PROTOCOL_OFFLOAD_PARAMETERS;
    union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS ProtocolOffloadParameters;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS {
    ULONG Flags;
    UCHAR KCK[16];
    UCHAR KEK[16];
    ULONG64 KeyReplayCounter;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv4Address[4];
    UCHAR HostIPv4Address[4];
    UCHAR MacAddress[6];
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv6Address[16];
    UCHAR SolicitedNodeIPv6Address[16];
    UCHAR MacAddress[6];
    UCHAR TargetIPv6Addresses[2][16];
};

typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES {
    enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
};

typedef struct _NDIS_PM_WOL_PATTERN {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Priority;
    enum _NDIS_PM_WOL_PACKET WoLPacketType;
    struct _NDIS_PM_COUNTED_STRING FriendlyName;
    ULONG PatternId;
    ULONG NextWoLPatternOffset;
     _WOL_PATTERN;
    union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN WoLPattern;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS {
    ULONG Flags;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv4SourceAddress[4];
    UCHAR IPv4DestAddress[4];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv6SourceAddress[16];
    UCHAR IPv6DestAddress[16];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN {
    ULONG Flags;
    ULONG MaskOffset;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
};

typedef struct _NDIS_PNP_CAPABILITIES {
    ULONG Flags;
    struct _NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;
};

typedef struct _NDIS_POOL_HEADER {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 ListLock;
    struct _LIST_ENTRY AllocatedList;
};

typedef struct _NDIS_PORT {
    struct _NDIS_PORT *Next;
    PVOID NdisReserved;
    PVOID MiniportReserved;
    PVOID ProtocolReserved;
    struct _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
};

typedef struct _NDIS_PORT_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG NumberOfPorts;
    ULONG OffsetFirstPort;
    ULONG ElementSize;
    struct _NDIS_PORT_CHARACTERISTICS Ports[1];
};

typedef struct _NDIS_PORT_AUTHENTICATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_PORT_CONTROL_STATE SendControlState;
    enum _NDIS_PORT_CONTROL_STATE RcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
};

typedef struct _NDIS_PORT_BLOCK {
    struct _LIST_ENTRY Link;
    enum _NDIS_PORT_PNP_STATE PortPnPState;
    enum _NDIS_PORT_PNP_STATE PrevPortPnPState;
    struct _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
};

typedef struct _NDIS_PORT_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    ULONG Flags;
    enum _NDIS_PORT_TYPE Type;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_DIRECTION_TYPE Direction;
    enum _NDIS_PORT_CONTROL_STATE SendControlState;
    enum _NDIS_PORT_CONTROL_STATE RcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
};

typedef struct _NDIS_PORT_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_DIRECTION_TYPE Direction;
    enum _NDIS_PORT_CONTROL_STATE SendControlState;
    enum _NDIS_PORT_CONTROL_STATE RcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
    ULONG Flags;
};

typedef struct _NDIS_PROCESSOR_INFO {
    ULONG CpuNumber;
    ULONG PhysicalPackageId;
    ULONG CoreId;
    ULONG HyperThreadID;
};

typedef struct _NDIS_PROTOCOL_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID ProtocolDriverContext;
    struct _NDIS_PROTOCOL_BLOCK *NextProtocol;
    struct _NDIS_OPEN_BLOCK *OpenQueue;
    struct _REFERENCE_EX Ref;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Reserved;
    ULONG Flags;
    struct _UNICODE_STRING Name;
    UCHAR IsIPv4;
    UCHAR IsIPv6;
    UCHAR IsNdisTest6;
    PLONG BindAdapterHandlerEx;
    PLONG UnbindAdapterHandlerEx;
    PVOID OpenAdapterCompleteHandlerEx;
    PVOID CloseAdapterCompleteHandlerEx;
    PLONG PnPEventHandler;
    PLONG NetPnPEventHandler;
    PVOID UnloadHandler;
    PVOID UninstallHandler;
    PVOID RequestCompleteHandler;
    PVOID StatusHandlerEx;
    PVOID StatusHandler;
    PVOID StatusCompleteHandler;
    PVOID ReceiveNetBufferListsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID CoStatusHandlerEx;
    PVOID CoStatusHandler;
    PVOID CoAfRegisterNotifyHandler;
    PVOID CoReceiveNetBufferListsHandler;
    PVOID CoSendNetBufferListsCompleteHandler;
    PVOID OpenAdapterCompleteHandler;
    PVOID CloseAdapterCompleteHandler;
    PVOID SendCompleteHandler;
    PVOID WanSendCompleteHandler;
    PVOID TransferDataCompleteHandler;
    PVOID WanTransferDataCompleteHandler;
    PVOID ResetCompleteHandler;
    PLONG ReceiveHandler;
    PLONG WanReceiveHandler;
    PVOID ReceiveCompleteHandler;
    PLONG ReceivePacketHandler;
    PVOID BindAdapterHandler;
    PVOID UnbindAdapterHandler;
    PVOID CoSendCompleteHandler;
    PULONG CoReceivePacketHandler;
    PVOID OidRequestCompleteHandler;
    struct _WORK_QUEUE_ITEM WorkItem;
    struct _KMUTANT Mutex;
    PVOID MutexOwnerThread;
    ULONG MutexOwnerCount;
    ULONG MutexOwner;
    struct _UNICODE_STRING *BindDeviceName;
    struct _UNICODE_STRING *RootDeviceName;
    struct _NDIS_M_DRIVER_BLOCK *AssociatedMiniDriver;
    struct _NDIS_MINIPORT_BLOCK *BindingAdapter;
    struct _KEVENT *DeregEvent;
    struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS ClientChars;
    struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
    PVOID DirectOidRequestCompleteHandler;
    PLONG AllocateSharedMemoryHandler;
    PVOID FreeSharedMemoryHandler;
    PVOID AllocateSharedMemoryContext;
    struct _UNICODE_STRING ImageName;
    KRef<NDIS_BIND_PROTOCOL_DRIVER> Bind;
    KCoalescingWorkItem<_NDIS_PROTOCOL_BLOCK> NotifyBindCompleteWorkItem;
    VOID NotifyBindComplete;
    VOID _NDIS_PROTOCOL_BLOCK;
    VOID ~_NDIS_PROTOCOL_BLOCK;
    PVOID __vecDelDtor;
};

typedef struct _NDIS_PROTOCOL_CO_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID CoStatusHandlerEx;
    PVOID CoAfRegisterNotifyHandler;
    PVOID CoReceiveNetBufferListsHandler;
    PVOID CoSendNetBufferListsCompleteHandler;
};

typedef struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Flags;
    struct _UNICODE_STRING Name;
    PLONG SetOptionsHandler;
    PLONG BindAdapterHandlerEx;
    PLONG UnbindAdapterHandlerEx;
    PVOID OpenAdapterCompleteHandlerEx;
    PVOID CloseAdapterCompleteHandlerEx;
    PLONG NetPnPEventHandler;
    PVOID UninstallHandler;
    PVOID OidRequestCompleteHandler;
    PVOID StatusHandlerEx;
    PVOID ReceiveNetBufferListsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID DirectOidRequestCompleteHandler;
};

typedef struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST *NextBlock;
    struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST *DependentBlockList;
    LONG Status;
    PVOID NdisReserved[3];
    struct _NDIS_OFFLOAD_HANDLE *OffloadHandle;
    PVOID ProtocolReserved[2];
    PVOID MiniportReserved[2];
    PVOID ImReserved[2];
    PVOID Scratch[2];
    PVOID SourceHandle;
    ULONG PortNumber;
    struct _NET_BUFFER_LIST *NetBufferListChain;
};

typedef struct _NDIS_PROTOCOL_PAUSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PauseReason;
};

typedef struct _NDIS_PROTOCOL_RESTART_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    PUCHAR FilterModuleNameBuffer;
    ULONG FilterModuleNameBufferLength;
    struct _NDIS_RESTART_ATTRIBUTES *RestartAttributes;
    ULONG BoundIfIndex;
    union _NET_LUID_LH BoundIfNetluid;
    ULONG Flags;
};

typedef struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID InitiateOffloadHandler;
    PVOID TerminateOffloadHandler;
    PVOID UpdateOffloadHandler;
    PVOID InvalidateOffloadHandler;
    PVOID QueryOffloadHandler;
};

typedef struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum NDIS_CHIMNEY_OFFLOAD_TYPE OffloadType;
    PLONG TcpOffloadSendHandler;
    PLONG TcpOffloadReceiveHandler;
    PLONG TcpOffloadDisconnectHandler;
    PLONG TcpOffloadForwardHandler;
    PLONG TcpOffloadReceiveReturnHandler;
};

typedef struct _NDIS_QOS_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaxNumTrafficClasses;
    ULONG MaxNumEtsCapableTrafficClasses;
    ULONG MaxNumPfcEnabledTrafficClasses;
};

typedef struct _NDIS_QOS_CLASSIFICATION_ELEMENT {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    USHORT ConditionSelector;
    USHORT ConditionField;
    USHORT ActionSelector;
    USHORT ActionField;
};

typedef struct _NDIS_QOS_OFFLOAD_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SupportedSqTypes;
    UCHAR TransmitCapSupported[8];
    UCHAR TransmitReservationSupported[8];
    UCHAR ReceiveCapSupported[8];
    UCHAR TransmitGftCapSupported[8];
    UCHAR ReceiveGftCapSupported[8];
    UCHAR TcSupportedTable[8];
    ULONG NumStandardSqsSupported;
    ULONG NumGftSqsSupported;
    ULONG ReservationGranularitySupported;
    ULONG MaxNumSqInputs;
};

typedef struct _NDIS_QOS_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG NumTrafficClasses;
    UCHAR PriorityAssignmentTable[8];
    UCHAR TcBandwidthAssignmentTable[8];
    UCHAR TsaAssignmentTable[8];
    ULONG PfcEnable;
    ULONG NumClassificationElements;
    ULONG ClassificationElementSize;
    ULONG FirstClassificationElementOffset;
};

typedef struct _NDIS_QOS_SQ_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SqId;
    enum _NDIS_QOS_SQ_TYPE SqType;
    UCHAR TcEnabledTable[8];
    ULONG TcTransmitBandwidthCapTable[8];
    ULONG TcTransmitBandwidthReservationTable[8];
    ULONG TcReceiveBandwidthCapTable[8];
};

typedef struct _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_QOS_SQ_TYPE SqType;
    ULONG FirstSqId;
    ULONG MaxSqsToReturn;
    ULONG SqParamsArrayOffset;
    ULONG SqParamsArrayNumElements;
    ULONG SqParamsArrayElementSize;
};

typedef struct _NDIS_RECEIVE_FILTER_BLOCK {
    struct _LIST_ENTRY AdapterLink;
    struct _LIST_ENTRY QueueLink;
    struct _LIST_ENTRY VPortLink;
    ULONG FilterId;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_OPEN_BLOCK *Open;
    struct _NDIS_RECEIVE_QUEUE_BLOCK *ReceiveQueue;
    LONG Reference;
    struct _NDIS_CONNECTION_INFO ConnectionInfo;
    struct _NDIS_RECEIVE_FILTER_PARAMETERS FilterParameters;
    struct _NDIS_VPORT_BLOCK *VPortBlock;
};

typedef struct _NDIS_RECEIVE_FILTER_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG EnabledFilterTypes;
    ULONG EnabledQueueTypes;
    ULONG NumQueues;
    ULONG SupportedQueueProperties;
    ULONG SupportedFilterTests;
    ULONG SupportedHeaders;
    ULONG SupportedMacHeaderFields;
    ULONG MaxMacHeaderFilters;
    ULONG MaxQueueGroups;
    ULONG MaxQueuesPerQueueGroup;
    ULONG MinLookaheadSplitSize;
    ULONG MaxLookaheadSplitSize;
    ULONG SupportedARPHeaderFields;
    ULONG SupportedIPv4HeaderFields;
    ULONG SupportedIPv6HeaderFields;
    ULONG SupportedUdpHeaderFields;
    ULONG MaxFieldTestsPerPacketCoalescingFilter;
    ULONG MaxPacketCoalescingFilters;
    ULONG NdisReserved;
};

typedef struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_FRAME_HEADER FrameHeader;
    enum _NDIS_RECEIVE_FILTER_TEST ReceiveFilterTest;
     _HEADER_FIELD;
    union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD HeaderField;
     _FIELD_VALUE;
    union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE FieldValue;
     _RESULT_VALUE;
    union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE ResultValue;
};

typedef struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG EnabledFilterTypes;
    ULONG EnabledQueueTypes;
};

typedef struct _NDIS_RECEIVE_FILTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_FILTER_TYPE FilterType;
    ULONG QueueId;
    ULONG FilterId;
    ULONG FieldParametersArrayOffset;
    ULONG FieldParametersArrayNumElements;
    ULONG FieldParametersArrayElementSize;
    ULONG RequestedFilterIdBitCount;
    ULONG MaxCoalescingDelay;
    ULONG VPortId;
};

typedef struct _NDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG QueueId;
};

typedef struct _NDIS_RECEIVE_HASH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HashInformation;
    USHORT HashSecretKeySize;
    ULONG HashSecretKeyOffset;
};

typedef struct _NDIS_RECEIVE_QUEUE_BLOCK {
    struct _LIST_ENTRY AdapterLink;
    struct _LIST_ENTRY OpenLink;
    struct _LIST_ENTRY FilterList;
    ULONG QueueId;
    enum _NDIS_RECEIVE_QUEUE_PNP_STATE QueuePnPState;
    enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_OPEN_BLOCK *Open;
    LONG Reference;
    ULONG NumFilters;
    struct _LIST_ENTRY SharedMemoryList;
    PLONG AllocateSharedMemoryHandler;
    PVOID FreeSharedMemoryHandler;
    UCHAR MacAddress[6];
    struct _NDIS_RECEIVE_QUEUE_PARAMETERS QueueParameters;
};

typedef struct _NDIS_RECEIVE_QUEUE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_QUEUE_TYPE QueueType;
    ULONG QueueId;
    ULONG QueueGroupId;
    struct _GROUP_AFFINITY ProcessorAffinity;
    ULONG NumSuggestedReceiveBuffers;
    ULONG MSIXTableEntry;
    ULONG LookaheadSize;
    struct _IF_COUNTED_STRING_LH VmName;
    struct _IF_COUNTED_STRING_LH QueueName;
    ULONG PortId;
    ULONG InterruptCoalescingDomainId;
    ULONG QosSqId;
};

typedef struct _NDIS_RECEIVE_QUEUE_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
};

typedef struct _NDIS_RECEIVE_SCALE_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG CapabilitiesFlags;
    ULONG NumberOfInterruptMessages;
    ULONG NumberOfReceiveQueues;
    USHORT NumberOfIndirectionTableEntries;
};

typedef struct _NDIS_RECEIVE_SCALE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT Flags;
    USHORT BaseCpuNumber;
    ULONG HashInformation;
    USHORT IndirectionTableSize;
    ULONG IndirectionTableOffset;
    USHORT HashSecretKeySize;
    ULONG HashSecretKeyOffset;
    ULONG ProcessorMasksOffset;
    ULONG NumberOfProcessorMasks;
    ULONG ProcessorMasksEntrySize;
    struct _PROCESSOR_NUMBER DefaultProcessorNumber;
};

typedef struct _NDIS_REFCOUNT_BLOCK {
    UCHAR Flags;
    UCHAR Type;
    UCHAR NumRefTags;
    UCHAR NumOverflowTaggedEntries;
    struct _NDIS_REFCOUNT_TAGGED TaggedRefCounts;
    struct _NDIS_REFCOUNT_WITH_STACK RefWithStack[1];
};

typedef struct _NDIS_REFCOUNT_STACK_BLOCK {
    struct _NDIS_REFCOUNT_STACK_BLOCK *Next;
    struct _NDIS_REFCOUNT_STACK_ENTRY References[6];
    struct _NDIS_REFCOUNT_STACK_ENTRY Dereferences[6];
};

typedef struct _NDIS_REFCOUNT_STACK_ENTRY {
    ULONG Stack : 26;
    ULONG RefCount : 6;
};

typedef struct _NDIS_REFCOUNT_TAGGED {
    struct _NDIS_REFCOUNT_TAGGED_ENTRY *Tags;
    ULONG RefMask[1];
};

typedef struct _NDIS_REFCOUNT_TAGGED_ENTRY {
    UCHAR Tag;
    UCHAR RefCount;
};

typedef struct _NDIS_REFCOUNT_WITH_STACK {
    struct _NDIS_REFCOUNT_STACK_BLOCK Block;
    ULONG ReferenceAllocationFailed : 1;
    ULONG TotalReferences : 15;
    ULONG DereferenceAllocationFailed : 1;
    ULONG TotalDereferences : 15;
};

typedef struct _NDIS_REQUEST {
    UCHAR MacReserved[32];
    enum _NDIS_REQUEST_TYPE RequestType;
     _DATA;
    union _NDIS_REQUEST::_DATA DATA;
    UCHAR NdisReserved[72];
    UCHAR CallMgrReserved[16];
    UCHAR ProtocolReserved[16];
    UCHAR MiniportReserved[16];
};

typedef struct _NDIS_REQUEST::_DATA::_QUERY_INFORMATION {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _NDIS_REQUEST::_DATA::_SET_INFORMATION {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NDIS_REQUEST_XLATION_CONTEXT {
    ULONG OldOid;
    PVOID InfoBuf;
    ULONG InfoBufLength;
    ULONG64 RcvErrorValue;
    ULONG64 RcvNoBufferValue;
    ULONG64 RcvDiscardsValue;
    ULONG64 XmitErrorValue;
    LONG Status;
};

typedef struct _NDIS_RESTART_ATTRIBUTES {
    struct _NDIS_RESTART_ATTRIBUTES *Next;
    ULONG Oid;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _NDIS_RESTART_GENERAL_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG MtuSize;
    ULONG64 MaxXmitLinkSpeed;
    ULONG64 MaxRcvLinkSpeed;
    ULONG LookaheadSize;
    ULONG MacOptions;
    ULONG SupportedPacketFilters;
    ULONG MaxMulticastListSize;
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES *RecvScaleCapabilities;
    enum _NET_IF_ACCESS_TYPE AccessType;
    ULONG Flags;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    ULONG SupportedStatistics;
    ULONG DataBackFillSize;
    ULONG ContextBackFillSize;
    PULONG SupportedOidList;
    ULONG SupportedOidListLength;
    ULONG MaxLookaheadSizeAccessed;
};

typedef struct _NDIS_RFC6877_464XLAT_OFFLOAD {
    enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS XlatOffload;
    ULONG Flags;
};

typedef struct _NDIS_RSC_STATISTICS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 CoalescedPkts;
    ULONG64 CoalescedOctets;
    ULONG64 CoalesceEvents;
    ULONG64 Aborts;
};

typedef struct _NDIS_RSS_DPC_WORKER_CONTEXT {
    struct _KDPC Dpc;
    LONG Status;
    struct _NDIS_RSS_SET_INDIRECTION_ENTRIES_COMMAND Command;
    VOID _NDIS_RSS_DPC_WORKER_CONTEXT;
    VOID _NDIS_RSS_DPC_WORKER_CONTEXT;
    struct _NDIS_RSS_DPC_WORKER_CONTEXT *operator=;
    struct _NDIS_RSS_DPC_WORKER_CONTEXT *operator=;
};

typedef struct _NDIS_RSS_SET_INDIRECTION_ENTRIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG RssEntrySize;
    ULONG RssEntryTableOffset;
    ULONG NumberOfRssEntries;
};

typedef struct _NDIS_RSS_SET_INDIRECTION_ENTRIES_COMMAND {
    struct _NDIS_RSS_SET_INDIRECTION_ENTRIES Param;
    struct _NDIS_RSS_SET_INDIRECTION_ENTRY Entry[130];
};

typedef struct _NDIS_RSS_SET_INDIRECTION_ENTRY {
    ULONG SwitchId;
    ULONG VPortId;
    ULONG Flags;
    USHORT IndirectionTableIndex;
    struct _PROCESSOR_NUMBER TargetProcessorNumber;
    LONG EntryStatus;
};

typedef struct _NDIS_RW_LOCK {
    ULONG64 SpinLock;
    PVOID Context;
    UCHAR Reserved[16];
    union _NDIS_RW_LOCK_REFCOUNT RefCount[64];
    ULONG RefCountEx[256];
    ULONG64 RefCountLock;
    ULONG SharedRefCount;
    UCHAR WriterWaiting;
    VOID _NDIS_RW_LOCK;
    VOID _NDIS_RW_LOCK;
    struct _NDIS_RW_LOCK *operator=;
    struct _NDIS_RW_LOCK *operator=;
};

typedef struct _NDIS_RW_LOCK_EX {
};

typedef struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    enum _NDIS_SHARED_MEMORY_USAGE SharedMemoryUsage;
    struct _MDL *Mdl;
    PVOID CurrentVa;
    ULONG Length;
    PVOID ProcessSGListHandler;
    PVOID Context;
    struct _SCATTER_GATHER_LIST *ScatterGatherListBuffer;
    ULONG ScatterGatherListBufferSize;
    ULONG ScatterGatherListBufferSizeNeeded;
};

typedef struct _NDIS_SELECTIVE_SUSPEND {
    ULONG64 Lock;
    ULONG IdleTimeout;
    ULONG IdleTimeoutScreenOff;
    struct _NDIS_TIMER IdleTimer;
    ULONG IdleTickCount;
    struct _KEVENT IdleWorkItemCompleteEvent;
    struct _KEVENT PowerSuspendCompleteEvent;
    struct _KEVENT IdleNotificationCompleteEvent;
    struct _KEVENT IdleNotificationDoneEvent;
    struct _KEVENT DevicePowerReadyEvent;
    struct _KEVENT WdfD0LockedForSSEvent;
    struct _NDIS_WORK_ITEM IdleTimerWorkItem;
    struct _NDIS_WORK_ITEM IdleCancelWorkItem;
    struct _NDIS_IRP_WORK_ITEM ResumeWorkItem;
    struct _NDIS_SS_IDLE_FLAGS Flags;
    struct _NDIS_SS_STOP_FLAGS StopFlags;
    struct _NDIS_SS_CONTROL_OPS PendingControlOps;
    LONG PendingPnPEventCount;
    LONG PendingSendNblCount;
    LONG PendingCancelSendCount;
    LONG PendingDirectOidCount;
    LONG PendingCancelDirectOidCount;
    LONG PendingPnPOpCount;
    struct _NBL_QUEUE PendingSendNblQueue;
    struct _NBL_QUEUE PendingReceiveNblQueue;
    LONG PendingReceiveReturnCount;
    struct _LIST_ENTRY PendingDirectOidQueue;
    struct _NDIS_OID_CACHE_ENTRY *OidCacheArray;
    struct NDIS_NBL_TRACKER_HANDLE__ *QueuedSendNblTracker;
    struct NDIS_NBL_TRACKER_HANDLE__ *QueuedReceiveReturnNblTracker;
    USHORT LastUnexpectedFailureLine[2];
    union _NDIS_SS_RESUME_REASON LastResumeReason;
    ULONG LastResumeContext;
    union _NDIS_SS_RESUME_REASON LastBusyEvent;
    ULONG LastBusyContext;
    ULONG SuspendCount;
    union _LARGE_INTEGER LastSuspendTime;
    union _LARGE_INTEGER LastCancelTime;
    ULONG64 LastResumeLatencyMs;
    ULONG64 TotalResumeLatencyMs;
    ULONG64 LastSuspendIntervalMs;
    ULONG64 TotalSuspendedTimeMs;
    enum _NDIS_DEVICE_POWER_STATE LastRequestedIdlePowerState;
    struct _NDIS_NAPS_TELEMETRY_DATA TelemetryData;
};

typedef struct _NDIS_SG_DMA_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    PVOID MiniportAdapterContext;
    struct _DMA_ADAPTER *DmaAdapterObject;
    PVOID ProcessSGListHandler;
    PVOID SharedMemAllocateCompleteHandler;
    ULONG Flags;
    ULONG MaximumPhysicalMapping;
    ULONG ScatterGatherListSize;
    PVOID SGListLookasideList;
    LONG DmaAdapterRefCount;
    struct _KEVENT *DmaResourcesReleasedEvent;
    PVOID SharedMemoryPage[2];
    ULONG SharedMemoryLeft[2];
    union _LARGE_INTEGER SharedMemoryAddress[2];
    struct _DMA_ADAPTER *SavedDmaAdapterObject;
    struct _MAP_REGISTER_ENTRY *MapRegisters;
    struct _KEVENT *AllocationEvent;
    USHORT CurrentMapRegister;
    USHORT BaseMapRegistersNeeded;
    USHORT SGMapRegistersNeeded;
};

typedef struct _NDIS_SG_DMA_DESCRIPTION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaximumPhysicalMapping;
    PVOID ProcessSGListHandler;
    PVOID SharedMemAllocateCompleteHandler;
    ULONG ScatterGatherListSize;
};

typedef struct _NDIS_SHARED_MEMORY_BLOCK {
    struct _LIST_ENTRY MiniportLink;
    struct _LIST_ENTRY OpenLink;
    struct _LIST_ENTRY QueueLink;
    ULONG Flags;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_OPEN_BLOCK *Open;
    struct _NDIS_RECEIVE_QUEUE_BLOCK *ReceiveQueue;
    PVOID FreeSharedMemoryHandler;
    PVOID SharedMemoryHandlerContext;
    PVOID ProviderAllocationContext;
    union _LARGE_INTEGER PhysicalAddress;
    struct _NDIS_SHARED_MEMORY_PARAMETERS SharedMemoryParameters;
};

typedef struct _NDIS_SHARED_MEMORY_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    PVOID SharedMemoryHandle;
    ULONG PreferredNode;
    enum _NDIS_SHARED_MEMORY_USAGE Usage;
    ULONG Length;
    PVOID VirtualAddress;
    ULONG SGListBufferLength;
    struct _SCATTER_GATHER_LIST *SGListBuffer;
    ULONG VPortId;
};

typedef struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID ProviderContext;
    PLONG AllocateSharedMemoryHandler;
    PVOID FreeSharedMemoryHandler;
};

typedef struct _NDIS_SPIN_LOCK {
    ULONG64 SpinLock;
    UCHAR OldIrql;
};

typedef struct _NDIS_SRIOV_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SriovCapabilities;
};

typedef struct _NDIS_SRIOV_VF_CONFIG_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    ULONG BlockId;
    ULONG Length;
};

typedef struct _NDIS_SS_CONTROL_OPS {
    ULONG Oid : 1;
    ULONG Pause : 1;
    ULONG Restart : 1;
    ULONG Reset : 1;
    ULONG CheckForHang : 1;
    ULONG Value;
};

typedef struct _NDIS_SS_IDLE_FLAGS {
    ULONG TimerRunning : 1;
    ULONG IdleWorkItemScheduled : 1;
    ULONG IdleRequestSubmitted : 1;
    ULONG SuspendPowerIrpRequested : 1;
    ULONG DeviceSuspended : 1;
    ULONG ResumePowerIrpRequested : 1;
    ULONG CancelWorkItemScheduled : 1;
    ULONG IdleRequestCanceled : 1;
    ULONG ForceIdleTransition : 1;
    ULONG Stopped : 1;
    ULONG DeviceGone : 1;
    ULONG Value;
};

typedef struct _NDIS_SS_STOP_FLAGS {
    ULONG QueryRemove : 1;
    ULONG DeviceRemove : 1;
    ULONG SurpriseRemove : 1;
    ULONG QueryStop : 1;
    ULONG DeviceStop : 1;
    ULONG SystemPower : 1;
    ULONG NicQuiet : 1;
    ULONG PnPOp : 1;
    ULONG NotStarted : 1;
    ULONG MiniportFatalError : 1;
    ULONG ApplyInterfaceChange : 1;
    ULONG MagicPacket : 1;
    ULONG BindChanges : 1;
    ULONG Value;
};

typedef struct _NDIS_STACK_TRACE_TABLE {
    ULONG64 Lock;
    UCHAR Allocated;
    UCHAR Collisions;
    UCHAR DroppedStacks;
    UCHAR NumStackFrames;
    struct _RTL_DYNAMIC_HASH_TABLE HashTable;
    ULONG AllocationFailures;
};

typedef struct _NDIS_STATISTICS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG SupportedStatistics;
    ULONG64 ifInDiscards;
    ULONG64 ifInErrors;
    ULONG64 ifHCInOctets;
    ULONG64 ifHCInUcastPkts;
    ULONG64 ifHCInMulticastPkts;
    ULONG64 ifHCInBroadcastPkts;
    ULONG64 ifHCOutOctets;
    ULONG64 ifHCOutUcastPkts;
    ULONG64 ifHCOutMulticastPkts;
    ULONG64 ifHCOutBroadcastPkts;
    ULONG64 ifOutErrors;
    ULONG64 ifOutDiscards;
    ULONG64 ifHCInUcastOctets;
    ULONG64 ifHCInMulticastOctets;
    ULONG64 ifHCInBroadcastOctets;
    ULONG64 ifHCOutUcastOctets;
    ULONG64 ifHCOutMulticastOctets;
    ULONG64 ifHCOutBroadcastOctets;
};

typedef struct _NDIS_STATUS_INDICATION {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID SourceHandle;
    ULONG PortNumber;
    LONG StatusCode;
    ULONG Flags;
    PVOID DestinationHandle;
    PVOID RequestId;
    PVOID StatusBuffer;
    ULONG StatusBufferSize;
    struct _GUID Guid;
    PVOID NdisReserved[4];
};

typedef struct _NDIS_STATUS_UNBIND_WORKITEM {
    struct _NDIS_WORK_ITEM WorkItem;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
};

typedef struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG ElementSize;
    ULONG NumElements;
    ULONG NumDestinations;
    PVOID FirstElement;
};

typedef struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    PCHAR ContextName;
    struct _GUID *ExtensionId;
};

typedef struct _NDIS_SWITCH_NIC_STATUS_INDICATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SourcePortId;
    USHORT SourceNicIndex;
    ULONG DestinationPortId;
    USHORT DestinationNicIndex;
    struct _NDIS_STATUS_INDICATION *StatusIndication;
};

typedef struct _NDIS_SWITCH_PORT_DESTINATION {
    ULONG PortId;
    USHORT NicIndex;
    USHORT IsExcluded : 1;
    USHORT PreserveVLAN : 1;
    USHORT PreservePriority : 1;
    USHORT Reserved : 13;
};

typedef struct _NDIS_SYSTEM_PROCESSOR_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_PROCESSOR_VENDOR ProcessorVendor;
    ULONG NumPhysicalPackages;
    ULONG NumCores;
    ULONG NumCoresPerPhysicalPackage;
    ULONG MaxHyperThreadingCpusPerCore;
    ULONG RssBaseCpu;
    ULONG RssCpuCount;
    PUCHAR RssProcessors;
    struct _NDIS_PROCESSOR_INFO CpuInfo[64];
};

typedef struct _NDIS_TASK_IPSEC {
     <unnamed-type-Supported>;
    struct {
        ULONG AH_ESP_COMBINED;
        ULONG TRANSPORT_TUNNEL_COMBINED;
        ULONG V4_OPTIONS;
        ULONG RESERVED;
    } Supported;
     <unnamed-type-V4AH>;
    struct {
        ULONG MD5 : 1;
        ULONG SHA_1 : 1;
        ULONG Transport : 1;
        ULONG Tunnel : 1;
        ULONG Send : 1;
        ULONG Receive : 1;
    } V4AH;
     <unnamed-type-V4ESP>;
    struct {
        ULONG DES : 1;
        ULONG RESERVED : 1;
        ULONG TRIPLE_DES : 1;
        ULONG NULL_ESP : 1;
        ULONG Transport : 1;
        ULONG Tunnel : 1;
        ULONG Send : 1;
        ULONG Receive : 1;
    } V4ESP;
};

typedef struct _NDIS_TASK_OFFLOAD {
    ULONG Version;
    ULONG Size;
    enum _NDIS_TASK Task;
    ULONG OffsetNextTask;
    ULONG TaskBufferLength;
    UCHAR TaskBuffer[1];
};

typedef struct _NDIS_TASK_OFFLOAD_HEADER {
    ULONG Version;
    ULONG Size;
    ULONG Reserved;
    ULONG OffsetFirstTask;
    struct _NDIS_ENCAPSULATION_FORMAT EncapsulationFormat;
};

typedef struct _NDIS_TASK_TCP_IP_CHECKSUM {
     <unnamed-type-V4Transmit>;
    struct {
        ULONG IpOptionsSupported : 1;
        ULONG TcpOptionsSupported : 1;
        ULONG TcpChecksum : 1;
        ULONG UdpChecksum : 1;
        ULONG IpChecksum : 1;
    } V4Transmit;
     <unnamed-type-V4Receive>;
    struct {
        ULONG IpOptionsSupported : 1;
        ULONG TcpOptionsSupported : 1;
        ULONG TcpChecksum : 1;
        ULONG UdpChecksum : 1;
        ULONG IpChecksum : 1;
    } V4Receive;
     <unnamed-type-V6Transmit>;
    struct {
        ULONG IpOptionsSupported : 1;
        ULONG TcpOptionsSupported : 1;
        ULONG TcpChecksum : 1;
        ULONG UdpChecksum : 1;
    } V6Transmit;
     <unnamed-type-V6Receive>;
    struct {
        ULONG IpOptionsSupported : 1;
        ULONG TcpOptionsSupported : 1;
        ULONG TcpChecksum : 1;
        ULONG UdpChecksum : 1;
    } V6Receive;
};

typedef struct _NDIS_TASK_TCP_LARGE_SEND {
    ULONG Version;
    ULONG MaxOffLoadSize;
    ULONG MinSegmentCount;
    UCHAR TcpOptions;
    UCHAR IpOptions;
};

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Encapsulation;
    ULONG SupportIPv4 : 2;
    ULONG SupportIPv6 : 2;
    ULONG SupportIPv6ExtensionHeaders : 2;
    ULONG SupportSack : 2;
    ULONG CongestionAlgorithm : 4;
    ULONG TcpConnectionOffloadCapacity;
    ULONG Flags;
};

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION {
     <unnamed-type-V4>;
    struct {
        UCHAR Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } V4;
     <unnamed-type-V6>;
    struct {
        UCHAR Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } V6;
};

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_OFFLOAD_ENCAPSULATION Encapsulation;
    ULONG TicksPerSecond;
    UCHAR TcpAckFrequency;
    UCHAR TcpDelayedAckTicks;
    UCHAR TcpMaximumRetransmissions;
    UCHAR TcpDoubtReachabilityRetransmissions;
    ULONG TcpSwsPreventionTicks;
    ULONG TcpDuplicateAckThreshold;
    ULONG TcpPushTicks;
    ULONG NceStaleTicks;
    ULONG CongestionAlgorithm;
};

typedef struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO {
    struct {
        ULONG IsIPv4 : 1;
        ULONG IsIPv6 : 1;
        ULONG TcpChecksum : 1;
        ULONG UdpChecksum : 1;
        ULONG IpHeaderChecksum : 1;
        ULONG Reserved : 11;
        ULONG TcpHeaderOffset : 10;
    } Transmit;
    struct {
        ULONG TcpChecksumFailed : 1;
        ULONG UdpChecksumFailed : 1;
        ULONG IpChecksumFailed : 1;
        ULONG TcpChecksumSucceeded : 1;
        ULONG UdpChecksumSucceeded : 1;
        ULONG IpChecksumSucceeded : 1;
        ULONG Loopback : 1;
        ULONG TcpChecksumValueInvalid : 1;
        ULONG IpChecksumValueInvalid : 1;
    } Receive;
    PVOID Value;
};

typedef struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD {
     <unnamed-type-IPv4Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
        ULONG IpChecksum : 2;
    } IPv4Transmit;
     <unnamed-type-IPv4Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
        ULONG IpChecksum : 2;
    } IPv4Receive;
     <unnamed-type-IPv6Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
    } IPv6Transmit;
     <unnamed-type-IPv6Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
    } IPv6Receive;
};

typedef struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO {
    struct {
        ULONG NdisPacketChecksumV4 : 1;
        ULONG NdisPacketChecksumV6 : 1;
        ULONG NdisPacketTcpChecksum : 1;
        ULONG NdisPacketUdpChecksum : 1;
        ULONG NdisPacketIpChecksum : 1;
    } Transmit;
    struct {
        ULONG NdisPacketTcpChecksumFailed : 1;
        ULONG NdisPacketUdpChecksumFailed : 1;
        ULONG NdisPacketIpChecksumFailed : 1;
        ULONG NdisPacketTcpChecksumSucceeded : 1;
        ULONG NdisPacketUdpChecksumSucceeded : 1;
        ULONG NdisPacketIpChecksumSucceeded : 1;
        ULONG NdisPacketLoopback : 1;
    } Receive;
    ULONG Value;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO {
    struct {
        ULONG Unused : 30;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } Transmit;
    struct {
        ULONG MSS : 20;
        ULONG TcpHeaderOffset : 10;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } LsoV1Transmit;
    struct {
        ULONG TcpPayload : 30;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } LsoV1TransmitComplete;
    struct {
        ULONG MSS : 20;
        ULONG TcpHeaderOffset : 10;
        ULONG Type : 1;
        ULONG IPVersion : 1;
    } LsoV2Transmit;
    struct {
        ULONG Reserved : 30;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } LsoV2TransmitComplete;
    PVOID Value;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG TcpOptions : 2;
        ULONG IpOptions : 2;
    } IPv4;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
    } IPv6;
};

typedef struct _NDIS_TCP_OFFLOAD_CLIENT_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID TcpOffloadSendCompleteHandler;
    PVOID TcpOffloadReceiveCompleteHandler;
    PVOID TcpOffloadDisconnectCompleteHandler;
    PVOID TcpOffloadForwardCompleteHandler;
    PVOID TcpOffloadEventHandler;
    PLONG TcpOffloadReceiveIndicateHandler;
};

typedef struct _NDIS_TCP_OFFLOAD_EVENT_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID NdisTcpOffloadEventHandler;
    PLONG NdisTcpOffloadReceiveHandler;
    PVOID NdisTcpOffloadSendComplete;
    PVOID NdisTcpOffloadReceiveComplete;
    PVOID NdisTcpOffloadDisconnectComplete;
    PVOID NdisTcpOffloadForwardComplete;
};

typedef struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD {
     <unnamed-type-IPv4>;
    struct {
        UCHAR Enabled;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        UCHAR Enabled;
    } IPv6;
};

typedef struct _NDIS_TIMER {
    struct _KTIMER Timer;
    struct _KDPC Dpc;
    VOID _NDIS_TIMER;
    VOID _NDIS_TIMER;
    struct _NDIS_TIMER *operator=;
    struct _NDIS_TIMER *operator=;
};

typedef struct _NDIS_TIMER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG AllocationTag;
    PVOID TimerFunction;
    PVOID FunctionContext;
};

typedef struct _NDIS_TIMER_ENTRY {
    struct _NDIS_TIMER_ENTRY *NextTimer;
    struct _LIST_ENTRY GlobalLink;
    PVOID Handle;
    struct _KTIMER Timer;
    struct _KDPC Dpc;
    ULONG AllocationTag;
    PVOID TimerFunction;
    PVOID DefaultFunctionContext;
    PVOID FunctionContext;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    UCHAR Periodic;
    VOID _NDIS_TIMER_ENTRY;
    VOID _NDIS_TIMER_ENTRY;
    struct _NDIS_TIMER_ENTRY *operator=;
    struct _NDIS_TIMER_ENTRY *operator=;
};

typedef struct _NDIS_TIMESTAMP_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 HardwareClockFrequencyHz;
    UCHAR CrossTimestamp;
    ULONG64 Reserved1;
    ULONG64 Reserved2;
    struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
};

typedef struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS {
    UCHAR PtpV2OverUdpIPv4EventMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv4AllMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv4EventMsgTransmitHw;
    UCHAR PtpV2OverUdpIPv4AllMsgTransmitHw;
    UCHAR PtpV2OverUdpIPv6EventMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv6AllMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv6EventMsgTransmitHw;
    UCHAR PtpV2OverUdpIPv6AllMsgTransmitHw;
    UCHAR AllReceiveHw;
    UCHAR AllTransmitHw;
    UCHAR TaggedTransmitHw;
    UCHAR AllReceiveSw;
    UCHAR AllTransmitSw;
    UCHAR TaggedTransmitSw;
};

typedef struct _NDIS_TRACK_MEM {
    struct _LIST_ENTRY List;
    ULONG Tag;
    ULONG Length;
    PVOID Caller;
    PVOID CallersCaller;
};

typedef struct _NDIS_TRIAGE_OBJECT_HEADER {
    UCHAR Type;
    UCHAR Revision;
    USHORT Size;
};

typedef struct _NDIS_VF_BLOCK {
    struct _LIST_ENTRY AdapterLink;
    struct _LIST_ENTRY OpenLink;
    struct _LIST_ENTRY SwitchLink;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_OPEN_BLOCK *Open;
    struct _NDIS_NIC_SWITCH_BLOCK *NicSwitch;
    LONG Reference;
    ULONG NumAttachedVPorts;
    struct _LIST_ENTRY AttachedVPortList;
    struct _NDIS_NIC_SWITCH_VF_PARAMETERS VFParameters;
};

typedef struct _NDIS_VPORT_BLOCK {
    struct _LIST_ENTRY AdapterLink;
    struct _LIST_ENTRY OpenLink;
    struct _LIST_ENTRY SwitchLink;
    struct _LIST_ENTRY FunctionLink;
    ULONG Flags;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_OPEN_BLOCK *Open;
    struct _NDIS_NIC_SWITCH_BLOCK *NicSwitch;
    PVOID AttachedFunction;
    LONG Reference;
    struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS VPortParams;
    ULONG NumFilters;
    struct _LIST_ENTRY FilterList;
    struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE *RssParametersBuffer;
    struct _NDIS_RECEIVE_SCALE_PARAMETERS *CombinedNdisRSSParameters;
};

typedef struct _NDIS_WAN_COMPRESS_INFO {
    UCHAR SessionKey[8];
    ULONG MSCompType;
    UCHAR CompType;
    USHORT CompLength;
    struct {
        UCHAR CompOUI[3];
        UCHAR CompSubType;
        UCHAR CompValues[32];
    } Proprietary;
    struct {
        UCHAR CompValues[32];
    } Public;
};

typedef struct _NDIS_WAN_CO_GET_COMP_INFO {
    struct _NDIS_WAN_COMPRESS_INFO SendCapabilities;
    struct _NDIS_WAN_COMPRESS_INFO RecvCapabilities;
};

typedef struct _NDIS_WAN_CO_GET_LINK_INFO {
    ULONG MaxSendFrameSize;
    ULONG MaxRecvFrameSize;
    ULONG SendFramingBits;
    ULONG RecvFramingBits;
    ULONG SendCompressionBits;
    ULONG RecvCompressionBits;
    ULONG SendACCM;
    ULONG RecvACCM;
};

typedef struct _NDIS_WAN_CO_GET_STATS_INFO {
    ULONG BytesSent;
    ULONG BytesRcvd;
    ULONG FramesSent;
    ULONG FramesRcvd;
    ULONG CRCErrors;
    ULONG TimeoutErrors;
    ULONG AlignmentErrors;
    ULONG SerialOverrunErrors;
    ULONG FramingErrors;
    ULONG BufferOverrunErrors;
    ULONG BytesTransmittedUncompressed;
    ULONG BytesReceivedUncompressed;
    ULONG BytesTransmittedCompressed;
    ULONG BytesReceivedCompressed;
    ULONG TunnelPacketsRecieved;
    ULONG TunnelRecievePacketsPending;
    ULONG TunnelPacketsIndicatedUp;
    ULONG TunnelRecievePacketsRejected;
    ULONG TunnelPacketsSent;
    ULONG TunnelPacketsSentComplete;
    ULONG TunnelTransmitPacketsPending;
    ULONG TunnelPacketsTransmitError;
    ULONG TunnelPacketsSentError;
    ULONG TunnelTransmitPacketsRejected;
    ULONG TunnelAcksSent;
    ULONG TunnelAcksSentComplete;
    ULONG TunnelGeneric1;
    ULONG TunnelGeneric2;
    ULONG TunnelGeneric3;
};

typedef struct _NDIS_WAN_CO_INFO {
    ULONG MaxFrameSize;
    ULONG MaxSendWindow;
    ULONG FramingBits;
    ULONG DesiredACCM;
};

typedef struct _NDIS_WAN_CO_SET_COMP_INFO {
    struct _NDIS_WAN_COMPRESS_INFO SendCapabilities;
    struct _NDIS_WAN_COMPRESS_INFO RecvCapabilities;
};

typedef struct _NDIS_WAN_CO_SET_LINK_INFO {
    ULONG MaxSendFrameSize;
    ULONG MaxRecvFrameSize;
    ULONG SendFramingBits;
    ULONG RecvFramingBits;
    ULONG SendCompressionBits;
    ULONG RecvCompressionBits;
    ULONG SendACCM;
    ULONG RecvACCM;
};

typedef struct _NDIS_WAN_FRAGMENT {
    UCHAR RemoteAddress[6];
    UCHAR LocalAddress[6];
};

typedef struct _NDIS_WAN_GET_STATS {
    UCHAR LocalAddress[6];
    ULONG BytesSent;
    ULONG BytesRcvd;
    ULONG FramesSent;
    ULONG FramesRcvd;
    ULONG CRCErrors;
    ULONG TimeoutErrors;
    ULONG AlignmentErrors;
    ULONG SerialOverrunErrors;
    ULONG FramingErrors;
    ULONG BufferOverrunErrors;
    ULONG BytesTransmittedUncompressed;
    ULONG BytesReceivedUncompressed;
    ULONG BytesTransmittedCompressed;
    ULONG BytesReceivedCompressed;
};

typedef struct _NDIS_WAN_LINE_DOWN {
    UCHAR RemoteAddress[6];
    UCHAR LocalAddress[6];
};

typedef struct _NDIS_WAN_LINE_UP {
    ULONG LinkSpeed;
    ULONG MaximumTotalSize;
    enum _NDIS_WAN_QUALITY Quality;
    USHORT SendWindow;
    UCHAR RemoteAddress[6];
    UCHAR LocalAddress[6];
    ULONG ProtocolBufferLength;
    PUCHAR ProtocolBuffer;
    USHORT ProtocolType;
    struct _UNICODE_STRING DeviceName;
};

typedef struct _NDIS_WAN_PACKET {
    struct _LIST_ENTRY WanPacketQueue;
    PUCHAR CurrentBuffer;
    ULONG CurrentLength;
    PUCHAR StartBuffer;
    PUCHAR EndBuffer;
    PVOID ProtocolReserved1;
    PVOID ProtocolReserved2;
    PVOID ProtocolReserved3;
    PVOID ProtocolReserved4;
    PVOID MacReserved1;
    PVOID MacReserved2;
    PVOID MacReserved3;
    PVOID MacReserved4;
};

typedef struct _NDIS_WATCHDOG_TRIAGE_BLOCK {
    ULONG Signature;
    ULONG TimeoutMilliseconds;
    ULONG64 GlobalTriage;
    ULONG64 TargetObject;
    ULONG64 StartTime;
    ULONG64 PrimaryThread;
    ULONG64 ExtraArgument;
    UCHAR Pending9FDetected;
    ULONG64 TargetInstructionPointer;
};

typedef struct _NDIS_WDF_COMPLETE_ADD_PARAMS {
    union _NET_LUID_LH NetLuid;
    enum _NDIS_MEDIUM MediaType;
    struct _UNICODE_STRING BaseName;
};

typedef struct _NDIS_WDF_CX_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PLONG EvtCxPowerReference;
    PVOID EvtCxPowerDereference;
    PVOID EvtCxPowerAoAcEngage;
    PLONG EvtCxPowerAoAcDisengage;
    struct _DEVICE_OBJECT **EvtCxGetDeviceObject;
    struct _DEVICE_OBJECT **EvtCxGetNextDeviceObject;
    PLONG EvtCxGetAssignedFdoName;
    PVOID *EvtCxGetNdisHandleFromDeviceObject;
    PVOID EvtCxUpdatePMParameters;
    PLONG EvtCxAllocateMiniportBlock;
    PVOID EvtCxMiniportCompleteAdd;
    PVOID EvtCxDeviceStartComplete;
    PLONG EvtCxMiniportDeviceReset;
    PLONG EvtCxMiniportQueryDeviceResetSupport;
};

typedef struct _NDIS_WDF_CX_DRIVER_BLOCK {
    struct _NDIS_OBJECT_HEADER Header;
    struct _DRIVER_OBJECT *DriverObject;
    struct _UNICODE_STRING *RegistryPath;
    struct NDIS_WDF_CX_DRIVER_CONTEXT__ *CxDriverContext;
    struct _NDIS_WDF_CX_CHARACTERISTICS Chars;
    ULONG ClientCount;
    enum _NDIS_WDF_CX_DRIVER_STATE State;
};

typedef struct _NDIS_WLAN_BSSID {
    ULONG Length;
    UCHAR MacAddress[6];
    UCHAR Reserved[2];
    struct _NDIS_802_11_SSID Ssid;
    ULONG Privacy;
    LONG Rssi;
    enum _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
    struct _NDIS_802_11_CONFIGURATION Configuration;
    enum _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
    UCHAR SupportedRates[8];
};

typedef struct _NDIS_WLAN_BSSID_EX {
    ULONG Length;
    UCHAR MacAddress[6];
    UCHAR Reserved[2];
    struct _NDIS_802_11_SSID Ssid;
    ULONG Privacy;
    LONG Rssi;
    enum _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
    struct _NDIS_802_11_CONFIGURATION Configuration;
    enum _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
    UCHAR SupportedRates[16];
    ULONG IELength;
    UCHAR IEs[1];
};

typedef struct _NDIS_WOL_XLATION_CONTEXT {
    ULONG OriginalOid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    struct _NDIS_PM_WOL_PATTERN *WolPattern;
    struct _NDIS_PM_PACKET_PATTERN *PacketPattern;
    ULONG PatternToRemove;
};

typedef struct _NDIS_WORK_ITEM {
    PVOID Context;
    PVOID Routine;
    UCHAR WrapperReserved[64];
};

typedef struct _NDIS_WRAPPER_CONFIGURATION_HANDLE {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    ULONG Flags;
    struct _RTL_QUERY_REGISTRY_TABLE ParametersQueryTable[2];
};

typedef struct _NDIS_WRAPPER_HANDLE {
    struct _DRIVER_OBJECT *DriverObject;
    struct _UNICODE_STRING ServiceRegPath;
};

typedef struct _NDIS_WWAN_AUTH_CHALLENGE {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_AUTH_CHALLENGE AuthChallenge;
};

typedef struct _NDIS_WWAN_DEVICE_CAPS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uStatus;
    struct _WWAN_DEVICE_CAPS DeviceCaps;
};

typedef struct _NDIS_WWAN_DRIVER_CAPS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_DRIVER_CAPS DriverCaps;
};

typedef struct _NDIS_WWAN_HOME_PROVIDER {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uStatus;
    struct _WWAN_PROVIDER Provider;
};

typedef struct _NDIS_WWAN_PIN_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uStatus;
    struct _WWAN_PIN_LIST PinList;
};

typedef struct _NDIS_WWAN_PREFERRED_PROVIDERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uStatus;
    struct _WWAN_LIST_HEADER PreferredListHeader;
};

typedef struct _NDIS_WWAN_READY_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_READY_INFO ReadyInfo;
};

typedef struct _NDIS_WWAN_SERVICE_ACTIVATION {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SERVICE_ACTIVATION ServiceActivation;
};

typedef struct _NDIS_WWAN_SET_CONTEXT_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SET_CONTEXT_STATE SetContextState;
};

typedef struct _NDIS_WWAN_SET_PACKET_SERVICE {
    struct _NDIS_OBJECT_HEADER Header;
    enum _WWAN_PACKET_SERVICE_ACTION PacketServiceAction;
};

typedef struct _NDIS_WWAN_SET_PROVISIONED_CONTEXT {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SET_CONTEXT ProvisionedContext;
};

typedef struct _NDIS_WWAN_SET_REGISTER_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SET_REGISTER_STATE SetRegisterState;
};

typedef struct _NDIS_WWAN_SET_SIGNAL_INDICATION {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SET_SIGNAL_INDICATION SignalIndication;
};

typedef struct _NDIS_WWAN_SET_SMS_CONFIGURATION {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SET_SMS_CONFIGURATION SetSmsConfiguration;
};

typedef struct _NDIS_WWAN_SMS_DELETE {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SMS_FILTER SmsFilter;
};

typedef struct _NDIS_WWAN_SMS_READ {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SMS_READ SmsRead;
};

typedef struct _NDIS_WWAN_SMS_SEND {
    struct _NDIS_OBJECT_HEADER Header;
    struct _WWAN_SMS_SEND SmsSend;
};

typedef struct _NDIS_WWAN_VISIBLE_PROVIDERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uStatus;
    struct _WWAN_LIST_HEADER VisibleListHeader;
};

typedef struct _NDK_ADAPTER {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_ADAPTER_DISPATCH *Dispatch;
};

typedef struct _NDK_ADAPTER_DISPATCH {
    PLONG NdkQueryExtension;
    PLONG NdkQueryAdapterInfo;
    PLONG NdkCreateCq;
    PLONG NdkCreatePd;
    PLONG NdkCreateSharedEndpoint;
    PLONG NdkCreateConnector;
    PLONG NdkCreateListener;
    PLONG NdkBuildLAM;
    PVOID NdkReleaseLAM;
};

typedef struct _NDK_ADAPTER_INFO {
    struct NDK_VERSION Version;
    ULONG VendorId;
    ULONG DeviceId;
    ULONG64 MaxRegistrationSize;
    ULONG64 MaxWindowSize;
    ULONG FRMRPageCount;
    ULONG MaxInitiatorRequestSge;
    ULONG MaxReceiveRequestSge;
    ULONG MaxReadRequestSge;
    ULONG MaxTransferLength;
    ULONG MaxInlineDataSize;
    ULONG MaxInboundReadLimit;
    ULONG MaxOutboundReadLimit;
    ULONG MaxReceiveQueueDepth;
    ULONG MaxInitiatorQueueDepth;
    ULONG MaxSrqDepth;
    ULONG MaxCqDepth;
    ULONG LargeRequestThreshold;
    ULONG MaxCallerData;
    ULONG MaxCalleeData;
    ULONG AdapterFlags;
    enum _NDK_RDMA_TECHNOLOGY RdmaTechnology;
};

typedef struct _NDK_CONNECTOR {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_CONNECTOR_DISPATCH *Dispatch;
};

typedef struct _NDK_CONNECTOR_DISPATCH {
    PLONG NdkCloseConnector;
    PLONG NdkQueryExtension;
    PLONG NdkConnect;
    PLONG NdkConnectWithSharedEndpoint;
    PLONG NdkCompleteConnect;
    PLONG NdkAccept;
    PLONG NdkReject;
    PLONG NdkGetConnectionData;
    PLONG NdkGetLocalAddress;
    PLONG NdkGetPeerAddress;
    PLONG NdkDisconnect;
};

typedef struct _NDK_CQ {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_CQ_DISPATCH *Dispatch;
};

typedef struct _NDK_CQ_DISPATCH {
    PLONG NdkCloseCq;
    PLONG NdkQueryExtension;
    PLONG NdkResizeCq;
    PVOID NdkArmCq;
    PULONG NdkGetCqResults;
    PLONG NdkControlCqInterruptModeration;
    PULONG NdkGetCqResultsEx;
};

typedef struct _NDK_EXTENSION_INTERFACE {
    PVOID Dispatch;
};

typedef struct _NDK_LISTENER {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_LISTENER_DISPATCH *Dispatch;
};

typedef struct _NDK_LISTENER_DISPATCH {
    PLONG NdkCloseListener;
    PLONG NdkQueryExtension;
    PLONG NdkListen;
    PLONG NdkGetLocalAddress;
    PVOID NdkControlConnectEvents;
};

typedef struct _NDK_LOGICAL_ADDRESS_MAPPING {
    PVOID AdapterContext;
    ULONG AdapterPageCount;
    union _LARGE_INTEGER AdapterPageArray[1];
};

typedef struct _NDK_MR {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_MR_DISPATCH *Dispatch;
};

typedef struct _NDK_MR_DISPATCH {
    PLONG NdkCloseMr;
    PLONG NdkQueryExtension;
    PLONG NdkRegisterMr;
    PLONG NdkDeregisterMr;
    PLONG NdkInitializeFastRegisterMr;
    PULONG NdkGetRemoteTokenFromMr;
    PULONG NdkGetLocalTokenFromMr;
};

typedef struct _NDK_MW {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_MW_DISPATCH *Dispatch;
};

typedef struct _NDK_MW_DISPATCH {
    PLONG NdkCloseMw;
    PLONG NdkQueryExtension;
    PULONG NdkGetRemoteTokenFromMw;
};

typedef struct _NDK_OBJECT_HEADER {
    struct NDK_VERSION Version;
    enum _NDK_OBJECT_TYPE ObjectType;
    struct _NDK_OBJECT_HEADER_RESERVED_BLOCK NdkReserved;
};

typedef struct _NDK_OBJECT_HEADER_RESERVED_BLOCK {
    PVOID rf[4];
};

typedef struct _NDK_PD {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_PD_DISPATCH *Dispatch;
};

typedef struct _NDK_PD_DISPATCH {
    PLONG NdkClosePd;
    PLONG NdkQueryExtension;
    PLONG NdkCreateMr;
    PLONG NdkCreateMw;
    PLONG NdkCreateSrq;
    PLONG NdkCreateQp;
    PLONG NdkCreateQpWithSrq;
    PVOID NdkGetPrivilegedMemoryRegionToken;
};

typedef struct _NDK_QP {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_QP_DISPATCH *Dispatch;
};

typedef struct _NDK_QP_DISPATCH {
    PLONG NdkCloseQp;
    PLONG NdkQueryExtension;
    PVOID NdkFlush;
    PLONG NdkSend;
    PLONG NdkReceive;
    PLONG NdkBind;
    PLONG NdkFastRegister;
    PLONG NdkInvalidate;
    PLONG NdkRead;
    PLONG NdkWrite;
    PLONG NdkSendAndInvalidate;
};

typedef struct _NDK_RESULT {
    LONG Status;
    ULONG BytesTransferred;
    PVOID QPContext;
    PVOID RequestContext;
};

typedef struct _NDK_RESULT_EX {
    LONG Status;
    ULONG BytesTransferred;
    PVOID QPContext;
    PVOID RequestContext;
    enum _NDK_OPERATION_TYPE Type;
    ULONG64 TypeSpecificCompletionOutput;
};

typedef struct _NDK_SGE {
    PVOID VirtualAddress;
    union _LARGE_INTEGER LogicalAddress;
    ULONG Length;
    ULONG MemoryRegionToken;
};

typedef struct _NDK_SHARED_ENDPOINT {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_SHARED_ENDPOINT_DISPATCH *Dispatch;
};

typedef struct _NDK_SHARED_ENDPOINT_DISPATCH {
    PLONG NdkCloseSharedEndpoint;
    PLONG NdkQueryExtension;
    PLONG NdkGetLocalAddress;
};

typedef struct _NDK_SRQ {
    struct _NDK_OBJECT_HEADER Header;
    struct _NDK_SRQ_DISPATCH *Dispatch;
};

typedef struct _NDK_SRQ_DISPATCH {
    PLONG NdkCloseSrq;
    PLONG NdkQueryExtension;
    PLONG NdkModifySrq;
    PLONG NdkSrqReceive;
};

typedef struct _NEIGHBOR_OFFLOAD_STATE_CACHED {
    struct _OFFLOAD_STATE_HEADER Header;
    UCHAR DlDestinationAddress[32];
    ULONG HostReachabilityDelta;
};

typedef struct _NEIGHBOR_OFFLOAD_STATE_CONST {
    struct _OFFLOAD_STATE_HEADER Header;
    UCHAR DlSourceAddress[32];
    ULONG VlanId : 12;
};

typedef struct _NEIGHBOR_OFFLOAD_STATE_DELEGATED {
    struct _OFFLOAD_STATE_HEADER Header;
    ULONG NicReachabilityDelta;
};

typedef struct _NETIO_NET_BUFFER_CONTEXT {
    ULONG OriginalDataOffset;
    ULONG OriginalDataLength;
    ULONG TruncatedLength;
    ULONG Flags;
    ULONG EcnField : 2;
    ULONG EspTrailerSpaceAllocated : 1;
    ULONG Converted : 1;
    ULONG Restored : 1;
    ULONG EcnForceNotEct : 1;
    ULONG NdPriority : 1;
    ULONG IpsnpiForwardInjection : 1;
    ULONG IpsnpiForwardInjectionCopy : 1;
    PVOID Scratch[2];
};

typedef struct _NETIO_NET_BUFFER_LIST_CONTEXT {
    LONG ReferenceCount;
    struct _NET_BUFFER_LIST *Parent;
    PVOID CompletionRoutine;
    PVOID CompletionContext;
};

typedef struct _NET_BUFFER {
    struct _NET_BUFFER *Next;
    struct _MDL *CurrentMdl;
    ULONG CurrentMdlOffset;
    ULONG DataLength;
    ULONG64 stDataLength;
    struct _MDL *MdlChain;
    ULONG DataOffset;
    union _SLIST_HEADER Link;
    union _NET_BUFFER_HEADER NetBufferHeader;
    USHORT ChecksumBias;
    USHORT Reserved;
    PVOID NdisPoolHandle;
    PVOID NdisReserved[2];
    PVOID ProtocolReserved[6];
    PVOID MiniportReserved[4];
    union _LARGE_INTEGER DataPhysicalAddress;
    struct _NET_BUFFER_SHARED_MEMORY *SharedMemoryInfo;
    struct _SCATTER_GATHER_LIST *ScatterGatherList;
};

typedef struct _NET_BUFFER_DATA {
    struct _NET_BUFFER *Next;
    struct _MDL *CurrentMdl;
    ULONG CurrentMdlOffset;
    union _NET_BUFFER_DATA_LENGTH NbDataLength;
    struct _MDL *MdlChain;
    ULONG DataOffset;
};

typedef struct _NET_BUFFER_LIST {
    struct _NET_BUFFER_LIST *Next;
    struct _NET_BUFFER *FirstNetBuffer;
    union _SLIST_HEADER Link;
    union _NET_BUFFER_LIST_HEADER NetBufferListHeader;
    struct _NET_BUFFER_LIST_CONTEXT *Context;
    struct _NET_BUFFER_LIST *ParentNetBufferList;
    PVOID NdisPoolHandle;
    PVOID NdisReserved[2];
    PVOID ProtocolReserved[4];
    PVOID MiniportReserved[2];
    PVOID Scratch;
    PVOID SourceHandle;
    ULONG NblFlags;
    LONG ChildRefCount;
    ULONG Flags;
    LONG Status;
    ULONG NdisReserved2;
    PVOID NetBufferListInfo[29];
};

typedef struct _NET_BUFFER_LIST_CONTEXT {
    struct _NET_BUFFER_LIST_CONTEXT *Next;
    USHORT Size;
    USHORT Offset;
    UCHAR ContextData[0];
};

typedef struct _NET_BUFFER_LIST_DATA {
    struct _NET_BUFFER_LIST *Next;
    struct _NET_BUFFER *FirstNetBuffer;
};

typedef struct _NET_BUFFER_LIST_POOL_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ProtocolId;
    UCHAR fAllocateNetBuffer;
    USHORT ContextSize;
    ULONG PoolTag;
    ULONG DataSize;
};

typedef struct _NET_BUFFER_LIST_TIMESTAMP {
    ULONG64 Timestamp;
};

typedef struct _NET_BUFFER_POOL_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PoolTag;
    ULONG DataSize;
};

typedef struct _NET_BUFFER_SHARED_MEMORY {
    struct _NET_BUFFER_SHARED_MEMORY *NextSharedMemorySegment;
    ULONG SharedMemoryFlags;
    PVOID SharedMemoryHandle;
    ULONG SharedMemoryOffset;
    ULONG SharedMemoryLength;
};

typedef struct _NET_DEVICE_PNP_EVENT {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    enum _NDIS_DEVICE_PNP_EVENT DevicePnPEvent;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    UCHAR NdisReserved[16];
};

typedef struct _NET_IF_INFORMATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _NET_PHYSICAL_LOCATION_LH PhysicalLocation;
    ULONG WanTunnelType;
    ULONG PortNumber;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    UCHAR ifConnectorPresent;
    USHORT PhysAddressLength;
    USHORT PhysAddressOffset;
    USHORT PermanentPhysAddressOffset;
    USHORT FriendlyNameLength;
    USHORT FriendlyNameOffset;
    struct _GUID InterfaceGuid;
    struct _GUID NetworkGuid;
    ULONG SupportedStatistics;
    enum _NDIS_MEDIUM MediaType;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
};

typedef struct _NET_PHYSICAL_LOCATION_LH {
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG FunctionNumber;
};

typedef struct _NET_PNP_EVENT {
    enum _NET_PNP_EVENT_CODE NetEvent;
    PVOID Buffer;
    ULONG BufferLength;
    ULONG64 NdisReserved[4];
    ULONG64 TransportReserved[4];
    ULONG64 TdiReserved[4];
    ULONG64 TdiClientReserved[4];
};

typedef struct _NET_PNP_EVENT_NOTIFICATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    struct _NET_PNP_EVENT NetPnPEvent;
    ULONG Flags;
    ULONG SwitchId;
    ULONG VPortId;
};

typedef struct _NPAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _NPI_MODULEID {
    USHORT Length;
    enum _NPI_MODULEID_TYPE Type;
    struct _GUID Guid;
    struct _LUID IfLuid;
};

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    ULONG Version;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
};

typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
};

typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ULONG GrantedAccess;
};

typedef struct _OBJECT_NAME_INFORMATION {
    struct _UNICODE_STRING Name;
};

typedef struct _OBJECT_TYPE {
    struct _LIST_ENTRY TypeList;
    struct _UNICODE_STRING Name;
    PVOID DefaultObject;
    UCHAR Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;
    struct _EX_PUSH_LOCK TypeLock;
    ULONG Key;
    struct _LIST_ENTRY CallbackList;
};

typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    USHORT ObjectTypeFlags;
    UCHAR CaseInsensitive : 1;
    UCHAR UnnamedObjectsOnly : 1;
    UCHAR UseDefaultObject : 1;
    UCHAR SecurityRequired : 1;
    UCHAR MaintainHandleCount : 1;
    UCHAR MaintainTypeList : 1;
    UCHAR SupportsObjectCallbacks : 1;
    UCHAR CacheAligned : 1;
    UCHAR UseExtendedParameters : 1;
    UCHAR Reserved : 7;
    ULONG ObjectTypeCode;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG RetainAccess;
    enum _POOL_TYPE PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    PVOID DumpProcedure;
    PLONG OpenProcedure;
    PVOID CloseProcedure;
    PVOID DeleteProcedure;
    PLONG ParseProcedure;
    PLONG ParseProcedureEx;
    PLONG SecurityProcedure;
    PLONG QueryNameProcedure;
    PUCHAR OkayToCloseProcedure;
    ULONG WaitObjectFlagMask;
    USHORT WaitObjectFlagOffset;
    USHORT WaitObjectPointerOffset;
};

typedef struct _OB_EXTENDED_PARSE_PARAMETERS {
    USHORT Length;
    ULONG RestrictedAccessMask;
    struct _EJOB *Silo;
};

typedef struct _OFFLOAD_STATE_HEADER {
    ULONG Length;
    ULONG RecognizedOptions;
};

typedef struct _OID_LIST {
    ULONG StatsOidCount;
    ULONG FullOidCount;
    PULONG StatsOidArray;
    PULONG FullOidArray;
};

typedef struct _OWNER_ENTRY {
    ULONG64 OwnerThread;
    ULONG IoPriorityBoosted : 1;
    ULONG OwnerReferenced : 1;
    ULONG IoQoSPriorityBoosted : 1;
    ULONG OwnerCount : 29;
    ULONG TableSize;
};

typedef struct _PAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _PATH_OFFLOAD_STATE_CACHED {
    struct _OFFLOAD_STATE_HEADER Header;
    ULONG PathMtu;
};

typedef struct _PATH_OFFLOAD_STATE_CONST {
    struct _OFFLOAD_STATE_HEADER Header;
    PUCHAR SourceAddress;
    PUCHAR DestinationAddress;
};

typedef struct _PATH_OFFLOAD_STATE_DELEGATED {
    struct _OFFLOAD_STATE_HEADER Header;
};

typedef struct _PCI_CAPABILITIES_HEADER {
    UCHAR CapabilityID;
    UCHAR Next;
};

typedef struct _PCI_MSI_MESSAGE_ADDRESS {
    ULONG Reserved : 2;
    ULONG Address : 30;
};

typedef struct _PCI_MSI_MESSAGE_CONTROL {
    USHORT MSIEnable : 1;
    USHORT MultipleMessageCapable : 3;
    USHORT MultipleMessageEnable : 3;
    USHORT CapableOf64Bits : 1;
    USHORT PerVectorMaskCapable : 1;
    USHORT Reserved : 7;
};

typedef struct _PCW_BUFFER {
};

typedef struct _PCW_COUNTER_DESCRIPTOR {
    USHORT Id;
    USHORT StructIndex;
    USHORT Offset;
    USHORT Size;
};

typedef struct _PCW_COUNTER_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
};

typedef struct _PCW_DATA {
    PVOID Data;
    ULONG Size;
};

typedef struct _PCW_INSTANCE {
};

typedef struct _PCW_MASK_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
    ULONG InstanceId;
    UCHAR CollectMultiple;
    struct _PCW_BUFFER *Buffer;
    struct _KEVENT *CancelEvent;
};

typedef struct _PCW_REGISTRATION {
};

typedef struct _PCW_REGISTRATION_INFORMATION {
    ULONG Version;
    struct _UNICODE_STRING *Name;
    ULONG CounterCount;
    struct _PCW_COUNTER_DESCRIPTOR *Counters;
    PLONG Callback;
    PVOID CallbackContext;
};

typedef struct _PD_BUFFER {
    struct _PD_BUFFER *NextPDBuffer;
    struct _PD_BUFFER *NextPartialPDBuffer;
    PVOID PDClientReserved;
    PVOID PDClientContext;
    PUCHAR DataBufferVirtualAddress;
    union _LARGE_INTEGER DataBufferDmaLogicalAddress;
    ULONG DataBufferSize;
    USHORT PDClientContextSize;
    USHORT Attributes;
    USHORT Flags;
    USHORT DataStart;
    ULONG DataLength;
    struct {
        ULONG64 RxFilterContext;
        ULONG64 GftFlowEntryId;
        ULONG RxHashValue;
        ULONG RxIPHeaderChecksumSucceeded : 1;
        ULONG RxTCPChecksumSucceeded : 1;
        ULONG RxUDPChecksumSucceeded : 1;
        ULONG RxIPHeaderChecksumFailed : 1;
        ULONG RxTCPChecksumFailed : 1;
        ULONG RxUDPChecksumFailed : 1;
        ULONG RxHashComputed : 1;
        ULONG RxHashWithL4PortNumbers : 1;
        ULONG RxGftDirectionIngress : 1;
        ULONG RxGftExceptionPacket : 1;
        ULONG RxGftCopyPacket : 1;
        ULONG RxGftSamplePacket : 1;
        ULONG RxReserved1 : 4;
        ULONG RxCoalescedSegCount : 16;
        ULONG RxRscTcpTimestampDelta;
        ULONG RxOffloads[2];
        ULONG TxIsIPv4 : 1;
        ULONG TxIsIPv6 : 1;
        ULONG TxTransportHeaderOffset : 10;
        ULONG TxMSS : 20;
        ULONG TxComputeIPHeaderChecksum : 1;
        ULONG TxComputeTCPChecksum : 1;
        ULONG TxComputeUDPChecksum : 1;
        ULONG TxIsEncapsulatedPacket : 1;
        ULONG TxInnerPacketOffsetsValid : 1;
        ULONG TxReserved1 : 11;
        ULONG TxInnerFrameOffset : 8;
        ULONG TxInnerIpHeaderRelativeOffset : 6;
        ULONG TxInnerIsIPv6 : 1;
        ULONG TxInnerTcpOptionsPresent : 1;
        ULONG TxOffloads[2];
        struct _PD_BUFFER_VIRTUAL_SUBNET_INFO VirtualSubnetInfo;
        struct _PD_BUFFER_8021Q_INFO Ieee8021qInfo;
        USHORT GftSourceVPortId;
        ULONG Reserved;
        ULONG64 ProviderScratch;
    } MetaDataV0;
};

typedef struct _PD_BUFFER_8021Q_INFO {
    USHORT UserPriority : 3;
    USHORT CanonicalFormatId : 1;
    USHORT VlanId : 12;
};

typedef struct _PD_BUFFER_VIRTUAL_SUBNET_INFO {
    ULONG VirtualSubnetId : 24;
    ULONG Reserved : 8;
};

typedef struct _PEB {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR IsLongPathAwareProcess : 1;
    UCHAR Padding0[4];
    PVOID Mutant;
    PVOID ImageBaseAddress;
    struct _PEB_LDR_DATA *Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    struct _RTL_CRITICAL_SECTION *FastPebLock;
    union _SLIST_HEADER *AtlThunkSListPtr;
    PVOID IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ProcessPreviouslyThrottled : 1;
    ULONG ProcessCurrentlyThrottled : 1;
    ULONG ProcessImagesHotPatched : 1;
    ULONG ReservedBits0 : 24;
    UCHAR Padding1[4];
    PVOID KernelCallbackTable;
    PVOID UserSharedInfoPtr;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
    ULONG TlsExpansionCounter;
    UCHAR Padding2[4];
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PVOID SharedData;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG64 HeapSegmentReserve;
    ULONG64 HeapSegmentCommit;
    ULONG64 HeapDeCommitTotalFreeThreshold;
    ULONG64 HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    UCHAR Padding3[4];
    struct _RTL_CRITICAL_SECTION *LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    UCHAR Padding4[4];
    ULONG64 ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[60];
    PVOID PostProcessInitRoutine;
    PVOID TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    UCHAR Padding5[4];
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    PVOID pShimData;
    PVOID AppCompatInfo;
    struct _UNICODE_STRING CSDVersion;
    struct _ACTIVATION_CONTEXT_DATA *ActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
    struct _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
    ULONG64 MinimumStackCommit;
    struct _FLS_CALLBACK_INFO *FlsCallback;
    struct _LIST_ENTRY FlsListHead;
    PVOID FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    PVOID WerRegistrationData;
    PVOID WerShipAssertPtr;
    PVOID pUnused;
    PVOID pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    UCHAR Padding6[4];
    ULONG64 CsrServerReadOnlySharedMemoryBase;
    ULONG64 TppWorkerpListLock;
    struct _LIST_ENTRY TppWorkerpList;
    PVOID WaitOnAddressHashTable[128];
    PVOID TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    struct _LEAP_SECOND_DATA *LeapSecondData;
    ULONG LeapSecondFlags;
    ULONG SixtySecondEnabled : 1;
    ULONG Reserved : 31;
    ULONG NtGlobalFlag2;
    VOID _PEB;
    VOID _PEB;
    struct _PEB *operator=;
    struct _PEB *operator=;
};

typedef struct _PEB_LDR_DATA {
    ULONG Length;
    UCHAR Initialized;
    PVOID SsHandle;
    struct _LIST_ENTRY InLoadOrderModuleList;
    struct _LIST_ENTRY InMemoryOrderModuleList;
    struct _LIST_ENTRY InInitializationOrderModuleList;
    PVOID EntryInProgress;
    UCHAR ShutdownInProgress;
    PVOID ShutdownThreadId;
};

typedef struct _PENDING_STACK_EXPANSION_FALLBACK_WORK {
    UCHAR IssueOidRequest;
    UCHAR CompleteOidRequest;
    struct _NDIS_OID_REQUEST *DirectOidRequestsToComplete;
    struct _NDIS_STATUS_INDICATION *StatusIndications;
    struct _NET_PNP_EVENT_NOTIFICATION *NetPnPEvents;
    struct _NET_DEVICE_PNP_EVENT *DevicePnPEvents;
    struct _NET_BUFFER_LIST *SentNblsToComplete;
    struct _NET_BUFFER_LIST *ReceivedNblsToComplete;
};

typedef struct _PERFINFO_GROUPMASK {
    ULONG Masks[8];
};

typedef struct _PKTMON_COMPONENT_CONTEXT {
    PVOID CompHandle;
    enum _PKTMON_PACKET_TYPE PacketType;
    ULONG FlowEnabled : 1;
    ULONG DropEnabled : 1;
};

typedef struct _PKTMON_EDGE_CONTEXT {
    PVOID EdgeHandle;
    struct _PKTMON_COMPONENT_CONTEXT *CompContext;
    enum _PKTMON_PACKET_TYPE PacketType;
};

typedef struct _PMKID_CANDIDATE {
    UCHAR BSSID[6];
    ULONG Flags;
};

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
};

typedef struct _PPL_LOOKASIDE_LIST {
    struct _LOOKASIDE_LIST_EX List;
    struct _LOOKASIDE_LIST_EX *BackendList;
    ULONG64 Lock;
    UCHAR Initialized;
};

typedef struct _PPL_LOOKASIDE_LIST_ARRAY {
    ULONG ValidEntryCount;
    ULONG Flags;
    ULONG Tag;
    ULONG LookasideTag;
    ULONG64 Size;
    enum _POOL_TYPE PoolType;
    USHORT Depth;
    struct _PPL_LOOKASIDE_LIST **LookasideLists;
};

typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[1];
};

typedef struct _PROCESSOR_NUMBER {
    USHORT Group;
    UCHAR Number;
    UCHAR Reserved;
};

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PS_MITIGATION_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _QUAD {
    LONG64 UseThisFieldToCopy;
    DOUBLE DoNotUseThisField;
};

typedef struct _QUERY {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _QUERY_INFORMATION {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _QUEUED_CLOSE {
    LONG Status;
    struct _WORK_QUEUE_ITEM WorkItem;
};

typedef struct _RECORDER_CONFIGURE_PARAMS {
    ULONG Size;
    UCHAR CreateDefaultLog;
};

typedef struct _RECORDER_LOG_CREATE_PARAMS {
    ULONG Size;
    ULONG LogTag;
    ULONG TotalBufferSize;
    ULONG ErrorPartitionSize;
    ULONG64 LogIdentifierAppendValue;
    UCHAR LogIdentifierAppendValueSet;
    ULONG LogIdentifierSize;
    CHAR LogIdentifier[16];
};

typedef struct _REFERENCE {
    ULONG64 SpinLock;
    USHORT ReferenceCount;
    UCHAR Closing;
};

typedef struct _REFERENCE_EX {
    ULONG64 SpinLock;
    USHORT ReferenceCount;
    UCHAR Closing;
    UCHAR ZeroBased;
    struct NDIS_REFCOUNT_HANDLE__ *RefCountTracker;
};

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
};

typedef struct _RTL_AVL_TREE {
    struct _RTL_BALANCED_NODE *Root;
};

typedef struct _RTL_BALANCED_NODE {
    struct _RTL_BALANCED_NODE *Children[2];
    struct _RTL_BALANCED_NODE *Left;
    struct _RTL_BALANCED_NODE *Right;
    UCHAR Red : 1;
    UCHAR Balance : 2;
    ULONG64 ParentValue;
};

typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;
    PULONG Buffer;
};

typedef struct _RTL_CRITICAL_SECTION {
};

typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    struct _STRING DosPath;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE {
    ULONG Flags;
    ULONG Shift;
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;
    PVOID Directory;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
    struct _LIST_ENTRY *ChainHead;
    struct _LIST_ENTRY *PrevLinkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
    struct _LIST_ENTRY Linkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    struct _LIST_ENTRY *CurEntry;
    struct _LIST_ENTRY *ChainHead;
    ULONG BucketIndex;
};

typedef struct _RTL_QUERY_REGISTRY_TABLE {
    PLONG QueryRoutine;
    ULONG Flags;
    PWCHAR Name;
    PVOID EntryContext;
    ULONG DefaultType;
    PVOID DefaultData;
    ULONG DefaultLength;
};

typedef struct _RTL_RB_TREE {
    struct _RTL_BALANCED_NODE *Root;
    UCHAR Encoded : 1;
    struct _RTL_BALANCED_NODE *Min;
};

typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
};

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    PVOID ConsoleHandle;
    ULONG ConsoleFlags;
    PVOID StandardInput;
    PVOID StandardOutput;
    PVOID StandardError;
    struct _CURDIR CurrentDirectory;
    struct _UNICODE_STRING DllPath;
    struct _UNICODE_STRING ImagePathName;
    struct _UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    struct _UNICODE_STRING WindowTitle;
    struct _UNICODE_STRING DesktopInfo;
    struct _UNICODE_STRING ShellInfo;
    struct _UNICODE_STRING RuntimeData;
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
    ULONG64 EnvironmentSize;
    ULONG64 EnvironmentVersion;
    PVOID PackageDependencyData;
    ULONG ProcessGroupId;
    ULONG LoaderThreads;
    struct _UNICODE_STRING RedirectionDllName;
};

typedef struct _SCATTER_GATHER_ELEMENT {
    union _LARGE_INTEGER Address;
    ULONG Length;
    ULONG64 Reserved;
};

typedef struct _SCATTER_GATHER_LIST {
    ULONG NumberOfElements;
    ULONG64 Reserved;
    struct _SCATTER_GATHER_ELEMENT Elements[0];
};

typedef struct _SCSI_REQUEST_BLOCK {
};

typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
};

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    UCHAR ContextTrackingMode;
    UCHAR EffectiveOnly;
};

typedef struct _SECURITY_SUBJECT_CONTEXT {
    PVOID ClientToken;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PVOID PrimaryToken;
    PVOID ProcessAuditId;
};

typedef struct _SET {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _SET_INFORMATION {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[1];
};

typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
};

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
};

typedef struct _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
};

typedef struct _STACK_INDEX {
    ULONG XferDataIndex;
    ULONG Index;
};

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _SYSTEM_POWER_STATE_CONTEXT {
    ULONG Reserved1 : 8;
    ULONG TargetSystemState : 4;
    ULONG EffectiveSystemState : 4;
    ULONG CurrentSystemState : 4;
    ULONG IgnoreHibernationPath : 1;
    ULONG PseudoTransition : 1;
    ULONG KernelSoftReboot : 1;
    ULONG DirectedDripsTransition : 1;
    ULONG Reserved2 : 8;
    ULONG ContextAsUlong;
};

typedef struct _TCP_OFFLOAD_STATE_CACHED {
    struct _OFFLOAD_STATE_HEADER Header;
    USHORT Flags;
    ULONG InitialRcvWnd;
    ULONG RcvIndicationSize;
    UCHAR KaProbeCount;
    ULONG KaTimeout;
    ULONG KaInterval;
    ULONG MaxRT;
    ULONG FlowLabel : 20;
    UCHAR TtlOrHopLimit;
    UCHAR TosOrTrafficClass;
    UCHAR UserPriority : 3;
};

typedef struct _TCP_OFFLOAD_STATE_CONST {
    struct _OFFLOAD_STATE_HEADER Header;
    USHORT Flags;
    USHORT RemotePort;
    USHORT LocalPort;
    UCHAR SndWindScale : 4;
    UCHAR RcvWindScale : 4;
    USHORT RemoteMss;
    ULONG HashValue;
};

typedef struct _TCP_OFFLOAD_STATE_DELEGATED {
    struct _OFFLOAD_STATE_HEADER Header;
    enum TCP_OFFLOAD_CONNECTION_STATE State;
    USHORT Flags;
    ULONG RcvNxt;
    ULONG RcvWnd;
    ULONG SndUna;
    ULONG SndNxt;
    ULONG SndMax;
    ULONG SndWnd;
    ULONG MaxSndWnd;
    ULONG SendWL1;
    ULONG CWnd;
    ULONG SsThresh;
    USHORT SRtt;
    USHORT RttVar;
    ULONG TsRecent;
    ULONG TsRecentAge;
    ULONG TsTime;
    ULONG TotalRT;
    UCHAR DupAckCount;
    UCHAR SndWndProbeCount;
     <unnamed-type-KeepAlive>;
    struct {
        UCHAR ProbeCount;
        ULONG TimeoutDelta;
    } KeepAlive;
     <unnamed-type-Retransmit>;
    struct {
        UCHAR Count;
        ULONG TimeoutDelta;
    } Retransmit;
    struct _NET_BUFFER_LIST *SendDataHead;
    struct _NET_BUFFER_LIST *SendDataTail;
    ULONG SendBacklogSize;
    struct _NET_BUFFER_LIST *BufferedData;
    ULONG ReceiveBacklogSize;
    ULONG DWnd;
};

typedef struct _TCP_OFFLOAD_STATS {
    ULONG64 InSegments;
    ULONG64 OutSegments;
    ULONG CurrentlyEstablished;
    ULONG ResetEstablished;
    ULONG RetransmittedSegments;
    ULONG InErrors;
    ULONG OutResets;
};

typedef struct _TEB {
    struct _NT_TIB NtTib;
    PVOID EnvironmentPointer;
    struct _CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    struct _PEB *ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    PVOID WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID ReservedForDebuggerInstrumentation[16];
    PVOID SystemReserved1[30];
    CHAR PlaceholderCompatibilityMode;
    UCHAR PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    LONG ExceptionCode;
    UCHAR Padding0[4];
    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer;
    ULONG64 InstrumentationCallbackSp;
    ULONG64 InstrumentationCallbackPreviousPc;
    ULONG64 InstrumentationCallbackPreviousSp;
    ULONG TxFsContext;
    UCHAR InstrumentationCallbackDisabled;
    UCHAR UnalignedLoadStoreExceptions;
    UCHAR Padding1[2];
    struct _GDI_TEB_BATCH GdiTebBatch;
    struct _CLIENT_ID RealClientId;
    PVOID GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    ULONG64 Win32ClientInfo[62];
    PVOID glDispatchTable[233];
    ULONG64 glReserved1[29];
    PVOID glReserved2;
    PVOID glSectionInfo;
    PVOID glSection;
    PVOID glTable;
    PVOID glCurrentRC;
    PVOID glContext;
    ULONG LastStatusValue;
    UCHAR Padding2[4];
    struct _UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    UCHAR Padding3[6];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    struct _LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorMode;
    UCHAR Padding4[4];
    PVOID Instrumentation[11];
    struct _GUID ActivityId;
    PVOID SubProcessTag;
    PVOID PerflibData;
    PVOID EtwTraceData;
    PVOID WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    UCHAR Padding5[4];
    PVOID ReservedForPerf;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
    UCHAR Padding6[4];
    PVOID SavedPriorityState;
    ULONG64 ReservedForCodeCoverage;
    PVOID ThreadPoolData;
    PVOID *TlsExpansionSlots;
    PVOID DeallocationBStore;
    PVOID BStoreLimit;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    PVOID NlsCache;
    PVOID pShimData;
    ULONG HeapData;
    UCHAR Padding7[4];
    PVOID CurrentTransactionHandle;
    struct _TEB_ACTIVE_FRAME *ActiveFrame;
    PVOID FlsData;
    PVOID PreferredLanguages;
    PVOID UserPrefLanguages;
    PVOID MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT LoadOwner : 1;
    USHORT LoaderWorker : 1;
    USHORT SkipLoaderInit : 1;
    USHORT SpareSameTebBits : 1;
    PVOID TxnScopeEnterCallback;
    PVOID TxnScopeExitCallback;
    PVOID TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    PVOID ResourceRetValue;
    PVOID ReservedForWdf;
    ULONG64 ReservedForCrt;
    struct _GUID EffectiveContainerId;
    VOID _TEB;
    VOID _TEB;
    struct _TEB *operator=;
    struct _TEB *operator=;
};

typedef struct _TEB_ACTIVE_FRAME {
    ULONG Flags;
    struct _TEB_ACTIVE_FRAME *Previous;
    struct _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

typedef struct _TEB_ACTIVE_FRAME_CONTEXT {
    ULONG Flags;
    PCHAR FrameName;
};

typedef struct _TP_CALLBACK_ENVIRON_V3 {
    ULONG Version;
    struct _TP_POOL *Pool;
    struct _TP_CLEANUP_GROUP *CleanupGroup;
    PVOID CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PVOID FinalizationCallback;
     <unnamed-type-u>;
    union {
        ULONG Flags;
         <unnamed-type-s>;
        struct {
            ULONG LongFunction : 1;
            ULONG Persistent : 1;
            ULONG Private : 30;
        } s;
    } u;
    enum _TP_CALLBACK_PRIORITY CallbackPriority;
    ULONG Size;
};

typedef struct _TP_CALLBACK_INSTANCE {
};

typedef struct _TP_CLEANUP_GROUP {
};

typedef struct _TP_POOL {
};

typedef struct _TRANSPORT_HEADER_OFFSET {
    USHORT ProtocolType;
    USHORT HeaderOffset;
};

typedef struct _TXN_PARAMETER_BLOCK {
    USHORT Length;
    USHORT TxFsContext;
    PVOID TransactionObject;
};

typedef struct _TlgProviderMetadata_t {
    UCHAR Type;
    struct _GUID ProviderId;
    USHORT RemainingSize;
};

typedef struct _TlgProvider_t {
    ULONG LevelPlus1;
    PUSHORT ProviderMetadataPtr;
    ULONG64 KeywordAny;
    ULONG64 KeywordAll;
    ULONG64 RegHandle;
    PVOID EnableCallback;
    PVOID CallbackContext;
};

typedef struct _TraceLoggingMetadata_t {
    ULONG Signature;
    USHORT Size;
    UCHAR Version;
    UCHAR Flags;
    ULONG64 Magic;
};

typedef struct _ULONG_REFERENCE {
    ULONG64 SpinLock;
    ULONG ReferenceCount;
    UCHAR Closing;
};

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWCHAR Buffer;
};

typedef struct _VAR_STRING {
    ULONG ulTotalSize;
    ULONG ulNeededSize;
    ULONG ulUsedSize;
    ULONG ulStringFormat;
    ULONG ulStringSize;
    ULONG ulStringOffset;
};

typedef struct _VF_DISPATCH_TABLE_HEADER {
    enum _VF_DISPATCH_TABLE_TYPE Type;
    ULONG Size;
};

typedef struct _VF_NDIS_DISPATCH_TABLE {
    struct _VF_DISPATCH_TABLE_HEADER Header;
    PLONG NdisAllocateVerifierContext;
    PVOID NdisFreeVerifierContext;
    PLONG NdisMiniportOidRequestHandler;
    PVOID NdisMOidRequestComplete;
    PVOID NdisMIndicateStatusEx;
    PVOID NdisMiniportDevicePnPEventNotifyHandler;
    PVOID NdisMiniportHaltExHandler;
    PVOID NdisMiniportSendNetBufferListsHandler;
    PVOID NdisMSendNetBufferListsComplete;
    PVOID NdisFilterSendNetBufferListsHandler;
    PVOID NdisFSendNetBufferListsComplete;
    PVOID NdisFSendNetBufferLists;
    PVOID NdisFilterSendNetBufferListsCompleteHandler;
    PVOID NdisFilterReceiveNetBufferListsHandler;
    PVOID NdisFReturnNetBufferLists;
    PVOID NdisFIndicateReceiveNetBufferLists;
    PVOID NdisFilterReturnNetBufferListsHandler;
    PLONG NdisFilterPauseHandler;
    PVOID NdisFPauseComplete;
    PULONG NdisIsTiPOn;
};

typedef struct _VPB {
    SHORT Type;
    SHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[32];
};

typedef struct _VPCI_INVALIDATE_BLOCK_OUTPUT {
    ULONG64 BlockMask;
};

typedef struct _VXLAN_INFO {
    USHORT VxlanUDPPortNumber;
    USHORT VxlanUDPPortNumberConfigurable : 1;
};

typedef struct _WAIT_CONTEXT_BLOCK {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct _LIST_ENTRY DmaWaitEntry;
    ULONG NumberOfChannels;
    ULONG SyncCallback : 1;
    ULONG DmaContext : 1;
    ULONG ZeroMapRegisters : 1;
    ULONG Reserved : 9;
    ULONG NumberOfRemapPages : 20;
    enum _IO_ALLOCATION_ACTION *DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    struct _KDPC *BufferChainingDpc;
};

typedef struct _WHEA_ERROR_PACKET_V2 {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    struct _GUID NotifyType;
    ULONG64 Context;
    enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
    ULONG Reserved1;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG PshedDataOffset;
    ULONG PshedDataLength;
};

typedef struct _WHEA_ERROR_RECORD {
    struct _WHEA_ERROR_RECORD_HEADER Header;
    struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
};

typedef struct _WHEA_ERROR_RECORD_HEADER {
    ULONG Signature;
    union _WHEA_REVISION Revision;
    ULONG SignatureEnd;
    USHORT SectionCount;
    enum _WHEA_ERROR_SEVERITY Severity;
    union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
    ULONG Length;
    union _WHEA_TIMESTAMP Timestamp;
    struct _GUID PlatformId;
    struct _GUID PartitionId;
    struct _GUID CreatorId;
    struct _GUID NotifyType;
    ULONG64 RecordId;
    union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
    union _WHEA_PERSISTENCE_INFO PersistenceInfo;
    UCHAR Reserved[12];
};

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
    ULONG SectionOffset;
    ULONG SectionLength;
    union _WHEA_REVISION Revision;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
    UCHAR Reserved;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
    struct _GUID SectionType;
    struct _GUID FRUId;
    enum _WHEA_ERROR_SEVERITY SectionSeverity;
    CHAR FRUText[20];
};

typedef struct _WHEA_EVENT_LOG_ENTRY {
    struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
};

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
    ULONG OwnerTag;
    enum _WHEA_EVENT_LOG_ENTRY_ID Id;
    union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
    ULONG PayloadLength;
};

typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
};

typedef struct _WNF_TYPE_ID {
    struct _GUID TypeId;
};

typedef struct _WOL_BITMAP_PATTERN {
    ULONG Flags;
    ULONG MaskOffset;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
};

typedef struct _WORK_QUEUE_ITEM {
    struct _LIST_ENTRY List;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _WWAN_AUTH_AKAP_CHALLENGE {
    UCHAR Rand[16];
    UCHAR Autn[16];
    UCHAR NetworkName[256];
    ULONG NetworkNameLength;
};

typedef struct _WWAN_AUTH_AKA_CHALLENGE {
    UCHAR Rand[16];
    UCHAR Autn[16];
};

typedef struct _WWAN_AUTH_CHALLENGE {
    enum _WWAN_AUTH_METHOD AuthMethod;
     <unnamed-type-u>;
    union {
        struct _WWAN_AUTH_SIM_CHALLENGE AuthSim;
        struct _WWAN_AUTH_AKA_CHALLENGE AuthAka;
        struct _WWAN_AUTH_AKAP_CHALLENGE AuthAkap;
    } u;
};

typedef struct _WWAN_AUTH_SIM_CHALLENGE {
    UCHAR Rand1[16];
    UCHAR Rand2[16];
    UCHAR Rand3[16];
    ULONG n;
};

typedef struct _WWAN_DEVICE_CAPS {
    enum _WWAN_DEVICE_TYPE WwanDeviceType;
    enum _WWAN_CELLULAR_CLASS WwanCellularClass;
    enum _WWAN_VOICE_CLASS WwanVoiceClass;
    enum _WWAN_SIM_CLASS WwanSimClass;
    ULONG WwanDataClass;
    WCHAR CustomDataClass[12];
    ULONG WwanGsmBandClass;
    ULONG WwanCdmaBandClass;
    WCHAR CustomBandClass[20];
    ULONG WwanSmsCaps;
    ULONG WwanControlCaps;
    WCHAR DeviceId[18];
    WCHAR Manufacturer[32];
    WCHAR Model[32];
    WCHAR FirmwareInfo[32];
    ULONG MaxActivatedContexts;
    ULONG WwanAuthAlgoCaps;
    struct _WWAN_LIST_HEADER CellularClassListHeader;
};

typedef struct _WWAN_DRIVER_CAPS {
    ULONG ulMajorVersion;
    ULONG ulMinorVersion;
    ULONG ulDriverCaps;
};

typedef struct _WWAN_LIST_HEADER {
    enum _WWAN_STRUCT_TYPE ElementType;
    ULONG ElementCount;
};

typedef struct _WWAN_PIN_DESC {
    enum _WWAN_PIN_MODE PinMode;
    enum _WWAN_PIN_FORMAT PinFormat;
    ULONG PinLengthMin;
    ULONG PinLengthMax;
};

typedef struct _WWAN_PIN_LIST {
    struct _WWAN_PIN_DESC WwanPinDescPin1;
    struct _WWAN_PIN_DESC WwanPinDescPin2;
    struct _WWAN_PIN_DESC WwanPinDescDeviceSimPin;
    struct _WWAN_PIN_DESC WwanPinDescDeviceFirstSimPin;
    struct _WWAN_PIN_DESC WwanPinDescNetworkPin;
    struct _WWAN_PIN_DESC WwanPinDescNetworkSubsetPin;
    struct _WWAN_PIN_DESC WwanPinDescSvcProviderPin;
    struct _WWAN_PIN_DESC WwanPinDescCorporatePin;
    struct _WWAN_PIN_DESC WwanPinDescSubsidyLock;
    struct _WWAN_PIN_DESC WwanPinDescCustom;
};

typedef struct _WWAN_PROVIDER {
    WCHAR ProviderId[7];
    ULONG ProviderState;
    WCHAR ProviderName[21];
    ULONG WwanDataClass;
};

typedef struct _WWAN_READY_INFO {
    enum _WWAN_READY_STATE ReadyState;
    enum _WWAN_EMERGENCY_MODE EmergencyMode;
    WCHAR SubscriberId[16];
    WCHAR SimIccId[21];
    UCHAR CdmaShortMsgSize;
    struct _WWAN_LIST_HEADER TNListHeader;
};

typedef struct _WWAN_SERVICE_ACTIVATION {
    ULONG uVendorSpecificBufferSize;
};

typedef struct _WWAN_SET_CONTEXT {
    ULONG ContextId;
    enum _WWAN_CONTEXT_TYPE ContextType;
    WCHAR AccessString[101];
    WCHAR UserName[256];
    WCHAR Password[256];
    enum _WWAN_COMPRESSION Compression;
    enum _WWAN_AUTH_PROTOCOL AuthType;
    WCHAR ProviderId[7];
};

typedef struct _WWAN_SET_CONTEXT_STATE {
    ULONG ConnectionId;
    enum _WWAN_ACTIVATION_COMMAND ActivationCommand;
    WCHAR AccessString[101];
    WCHAR UserName[256];
    WCHAR Password[256];
    enum _WWAN_COMPRESSION Compression;
    enum _WWAN_AUTH_PROTOCOL AuthType;
    enum _WWAN_IP_TYPE IPType;
    enum _WWAN_PSMEDIA_PREFERENCE MediaPreference;
    enum _WWAN_CONFIGURATION_SOURCE ConnectionMediaSource;
};

typedef struct _WWAN_SET_REGISTER_STATE {
    WCHAR ProviderId[7];
    enum _WWAN_REGISTER_ACTION RegisterAction;
    ULONG WwanDataClass;
};

typedef struct _WWAN_SET_SIGNAL_INDICATION {
    ULONG RssiInterval;
    ULONG RssiThreshold;
};

typedef struct _WWAN_SET_SMS_CONFIGURATION {
    CHAR ScAddress[16];
    enum _WWAN_SMS_FORMAT SmsFormat;
};

typedef struct _WWAN_SMS_FILTER {
    enum _WWAN_SMS_FLAG Flag;
    ULONG MessageIndex;
};

typedef struct _WWAN_SMS_READ {
    enum _WWAN_SMS_FORMAT SmsFormat;
    struct _WWAN_SMS_FILTER ReadFilter;
};

typedef struct _WWAN_SMS_SEND {
    enum _WWAN_SMS_FORMAT SmsFormat;
     <unnamed-type-u>;
    union {
        struct _WWAN_SMS_SEND_PDU Pdu;
        struct _WWAN_SMS_SEND_CDMA Cdma;
    } u;
};

typedef struct _WWAN_SMS_SEND_CDMA {
    enum _WWAN_SMS_CDMA_ENCODING EncodingId;
    enum _WWAN_SMS_CDMA_LANG LanguageId;
    CHAR Address[50];
    USHORT SizeInBytes;
    UCHAR SizeInCharacters;
    UCHAR EncodedMsg[160];
};

typedef struct _WWAN_SMS_SEND_PDU {
    UCHAR Size;
    CHAR PduData[366];
};

typedef struct _XSAVE_AREA_HEADER {
    ULONG64 Mask;
    ULONG64 CompactionMask;
    ULONG64 Reserved2[6];
};

typedef struct _XSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    UCHAR TagWord;
    UCHAR Reserved1;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    USHORT ErrorSelector;
    USHORT Reserved2;
    ULONG DataOffset;
    USHORT DataSelector;
    USHORT Reserved3;
    ULONG MxCsr;
    ULONG MxCsr_Mask;
    struct _M128A FloatRegisters[8];
    struct _M128A XmmRegisters[16];
    UCHAR Reserved4[96];
};

typedef struct _XSTATE_CONFIGURATION {
    ULONG64 EnabledFeatures;
    ULONG64 EnabledVolatileFeatures;
    ULONG Size;
    ULONG ControlFlags;
    ULONG OptimizedSave : 1;
    ULONG CompactionEnabled : 1;
    struct _XSTATE_FEATURE Features[64];
    ULONG64 EnabledSupervisorFeatures;
    ULONG64 AlignedFeatures;
    ULONG AllFeatureSize;
    ULONG AllFeatures[64];
    ULONG64 EnabledUserVisibleSupervisorFeatures;
};

typedef struct _XSTATE_FEATURE {
    ULONG Offset;
    ULONG Size;
};

typedef struct _X_FILTER {
    struct _NDIS_OPEN_BLOCK *OpenList;
    struct _NDIS_OPEN_BLOCK *NoFTypeOpenList;
    struct _NDIS_OPEN_BLOCK *FTypeOpenList;
    struct _NDIS_FRAME_TYPE_RECORD FrameTypeRecord;
    struct _NDIS_RW_LOCK_EX *BindListLock;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    ULONG CombinedPacketFilter;
    ULONG OldCombinedPacketFilter;
    ULONG MiniportPacketFilter;
    ULONG NumOpens;
    ULONG NumNoETypeOpens;
    struct _NDIS_OPEN_BLOCK *SingleActiveOpen;
    UCHAR AdapterAddress[6];
    ULONG MaxMulticastAddresses;
    PUCHAR NextMCastAddressBuf[6];
    PUCHAR NextOldMCastAddressBuf[6];
    ULONG NextNumAddresses;
    ULONG NextOldNumAddresses;
    PUCHAR MiniportMCastAddressBuf[6];
    ULONG MiniportNumAddresses;
    PUCHAR MiniportOldMCastAddressBuf[6];
    ULONG MiniportOldNumAddresses;
};

typedef struct __WIL__WNF_STATE_NAME {
    ULONG Data[2];
};

typedef struct __WIL__WNF_TYPE_ID {
    struct _GUID TypeId;
};

typedef struct __WIL__WNF_USER_SUBSCRIPTION {
};

typedef struct __vc_attributes::aggregatableAttribute {
    LONG type_e;
    VOID aggregatableAttribute;
    VOID aggregatableAttribute;
    enum __vc_attributes::aggregatableAttribute::type_e type;
};

typedef struct __vc_attributes::event_receiverAttribute {
    LONG type_e;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    enum __vc_attributes::event_receiverAttribute::type_e type;
    BOOLEAN layout_dependent;
};

typedef struct __vc_attributes::event_sourceAttribute {
    LONG type_e;
    LONG optimize_e;
    VOID event_sourceAttribute;
    VOID event_sourceAttribute;
    enum __vc_attributes::event_sourceAttribute::type_e type;
    enum __vc_attributes::event_sourceAttribute::optimize_e optimize;
    BOOLEAN decorate;
};

typedef struct __vc_attributes::helper_attributes::usageAttribute {
    LONG usage_e;
    VOID usageAttribute;
    ULONG value;
};

typedef struct __vc_attributes::helper_attributes::v1_alttypeAttribute {
    LONG type_e;
    VOID v1_alttypeAttribute;
    enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

typedef struct __vc_attributes::moduleAttribute {
    LONG type_e;
    VOID moduleAttribute;
    VOID moduleAttribute;
    VOID moduleAttribute;
    enum __vc_attributes::moduleAttribute::type_e type;
    PCHAR name;
    PCHAR version;
    PCHAR uuid;
    LONG lcid;
    BOOLEAN control;
    PCHAR helpstring;
    LONG helpstringcontext;
    PCHAR helpstringdll;
    PCHAR helpfile;
    LONG helpcontext;
    BOOLEAN hidden;
    BOOLEAN restricted;
    PCHAR custom;
    PCHAR resource_name;
};

typedef struct __vc_attributes::threadingAttribute {
    LONG threading_e;
    VOID threadingAttribute;
    VOID threadingAttribute;
    enum __vc_attributes::threadingAttribute::threading_e value;
};

typedef struct _flowspec {
    ULONG TokenRate;
    ULONG TokenBucketSize;
    ULONG PeakBandwidth;
    ULONG Latency;
    ULONG DelayVariation;
    ULONG ServiceType;
    ULONG MaxSduSize;
    ULONG MinimumPolicedSize;
};

typedef struct _wil_details_UsageSubscriptionData {
    ULONG featureId;
    USHORT serviceReportingKind;
};

typedef struct in6_addr {
     <unnamed-type-u>;
    union {
        UCHAR Byte[16];
        USHORT Word[8];
    } u;
};

typedef struct in_addr {
     <unnamed-type-S_un>;
    union {
         <unnamed-type-S_un_b>;
        struct {
            UCHAR s_b1;
            UCHAR s_b2;
            UCHAR s_b3;
            UCHAR s_b4;
        } S_un_b;
         <unnamed-type-S_un_w>;
        struct {
            USHORT s_w1;
            USHORT s_w2;
        } S_un_w;
        ULONG S_addr;
    } S_un;
};

typedef struct sockaddr {
    USHORT sa_family;
    CHAR sa_data[14];
};

typedef struct sockaddr_in {
    USHORT sin_family;
    USHORT sin_port;
    struct in_addr sin_addr;
    CHAR sin_zero[8];
};

typedef struct sockaddr_in6 {
    USHORT sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    struct in6_addr sin6_addr;
    ULONG sin6_scope_id;
    struct SCOPE_ID sin6_scope_struct;
};

typedef struct std::nothrow_t {
};

typedef struct wil::details::kspin_lock_saved_irql {
    PULONG64 spinLock;
    UCHAR savedIrql;
    VOID kspin_lock_saved_irql;
    VOID kspin_lock_saved_irql;
    PULONG64 operator unsigned __int64 *;
    VOID Release;
};

typedef struct wil::details::resource_policy<NDISWATCHDOG__ *,void (__cdecl*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned __int64,1>,NDISWATCHDOG__ *,-1,std::nullptr_t> {
    struct NDISWATCHDOG__ *pointer_storage;
    struct NDISWATCHDOG__ *pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,1> pointer_access;
    struct NDISWATCHDOG__ *invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(unsigned __int64 *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned __int64,2>,unsigned __int64 *,0,std::nullptr_t> {
    PULONG64 pointer_storage;
    PULONG64 pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,2> pointer_access;
    PULONG64 invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned __int64,2>,wil::details::kspin_lock_saved_irql,0,std::nullptr_t> {
    struct wil::details::kspin_lock_saved_irql pointer_storage;
    PULONG64 pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,2> pointer_access;
    struct wil::details::kspin_lock_saved_irql invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<void *,long (__cdecl*)(void *),&ZwClose,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t> {
    PVOID pointer_storage;
    PVOID pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,0> pointer_access;
    PVOID invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil_FeatureState {
    enum wil_FeatureEnabledState enabledState;
    UCHAR variant;
    enum wil_FeatureVariantPayloadKind payloadKind;
    ULONG payload;
    LONG hasNotification;
    LONG isVariantConfiguration;
};

typedef struct wil_StagingConfig {
};

typedef struct wil_details_FeatureProperties {
    ULONG enabledState : 2;
    ULONG isVariant : 1;
    ULONG queuedForReporting : 1;
    ULONG hasNotificationState : 2;
    ULONG usageCount : 9;
    ULONG usageCountRepresentsPotential : 1;
    ULONG reportedDeviceUsage : 1;
    ULONG reportedDevicePotential : 1;
    ULONG reportedDeviceOpportunity : 1;
    ULONG reportedDevicePotentialOpportunity : 1;
    ULONG recordedDeviceUsage : 1;
    ULONG recordedDevicePotential : 1;
    ULONG recordedDeviceOpportunity : 1;
    ULONG recordedDevicePotentialOpportunity : 1;
    ULONG opportunityCount : 7;
    ULONG opportunityCountRepresentsPotential : 1;
};

typedef struct wil_details_FeatureTestState {
    enum wil_details_FeatureTestStateKind kind;
    ULONG featureId;
    enum wil_FeatureEnabledState state;
    UCHAR variant;
    ULONG payload;
    struct wil_details_FeatureTestState *next;
};

typedef struct wil_details_FeatureVariantPropertyCache {
    union wil_details_FeaturePropertyCache propertyCache;
    ULONG payloadId;
    VOID wil_details_FeatureVariantPropertyCache;
    VOID wil_details_FeatureVariantPropertyCache;
    struct wil_details_FeatureVariantPropertyCache *operator=;
    struct wil_details_FeatureVariantPropertyCache *operator=;
};

typedef struct wil_details_RecordUsageResult {
    LONG queueBackground;
    ULONG countImmediate;
    enum wil_details_ServiceReportingKind kindImmediate;
    ULONG payloadId;
    LONG ignoredUse;
    LONG isVariantConfiguration;
};

typedef struct wil_details_SetPropertyCacheUsageContext {
    struct wil_details_RecordUsageResult *result;
    enum wil_details_ServiceReportingKind kind;
    ULONG64 addend;
};

typedef struct wil_details_SetPropertyFlagContext {
    struct wil_details_RecordUsageResult *result;
    ULONG flags;
    LONG ignoreReporting;
};

typedef struct wil_details_StagingConfig {
    enum wil_FeatureStore store;
    LONG forUpdate;
    ULONG readChangeStamp;
    UCHAR readVersion;
    LONG modified;
    struct wil_details_StagingConfigHeader *header;
    struct wil_details_StagingConfigFeature *features;
    struct wil_details_StagingConfigUsageTrigger *triggers;
    LONG changedInSession;
    PVOID buffer;
    ULONG64 bufferSize;
    ULONG64 bufferAlloc;
    LONG bufferOwned;
};

typedef struct wil_details_StagingConfigFeature {
    ULONG featureId;
    ULONG changedInSession : 1;
    ULONG isVariantConfig : 1;
    ULONG unused1 : 6;
    ULONG serviceState : 2;
    ULONG userState : 2;
    ULONG testState : 2;
    ULONG unused2 : 2;
    ULONG unused3 : 8;
    ULONG variant : 6;
    ULONG payloadKind : 2;
    ULONG payload;
};

typedef struct wil_details_StagingConfigHeader {
    UCHAR version;
    UCHAR versionMinor;
    USHORT headerSizeBytes;
    USHORT featureCount;
    USHORT featureUsageTriggerCount;
    struct wil_details_StagingConfigHeaderProperties sessionProperties;
    struct wil_details_StagingConfigHeaderProperties properties;
};

typedef struct wil_details_StagingConfigHeaderProperties {
    ULONG ignoreServiceState : 1;
    ULONG ignoreUserState : 1;
    ULONG ignoreTestState : 1;
    ULONG ignoreVariants : 1;
    ULONG unused : 28;
};

typedef struct wil_details_StagingConfigUsageTrigger {
    ULONG featureId;
    struct wil_details_StagingConfigWnfStateName trigger;
    ULONG serviceReportingKind : 16;
    ULONG isVariantConfig : 1;
    ULONG unused : 15;
};

typedef struct wil_details_StagingConfigWnfStateName {
    ULONG Data[2];
};

typedef struct wil_details_VariantProperties {
    ULONG enabledState : 2;
    ULONG isVariant : 1;
    ULONG queuedForReporting : 1;
    ULONG hasNotificationState : 2;
    ULONG recordedDeviceUsage : 1;
    ULONG variant : 6;
    ULONG unused : 19;
};

typedef struct wistd::_Nil {
};

typedef struct wistd::_Wrap_int {
    VOID _Wrap_int;
};

typedef struct wistd::default_delete<NDIS_BIND_FILTER_LINK> {
    struct wistd::default_delete<NDIS_BIND_FILTER_LINK> _Myt;
    VOID default_delete<NDIS_BIND_FILTER_LINK>;
    VOID operator();
};

typedef struct wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> {
    struct wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> _Myt;
    VOID default_delete<NDIS_BIND_PROTOCOL_LINK>;
    VOID operator();
};

typedef struct wistd::default_delete<Rtl::KString> {
    struct wistd::default_delete<Rtl::KString> _Myt;
    VOID default_delete<Rtl::KString>;
    VOID operator();
};

typedef struct wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> {
    struct wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> _Myt;
    VOID default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS>;
    VOID operator();
};

typedef struct wistd::integral_constant<enum _EVENT_TYPE,0> {
    enum _EVENT_TYPE value;
    enum _EVENT_TYPE value_type;
    struct wistd::integral_constant<enum _EVENT_TYPE,0> type;
    enum _EVENT_TYPE operator enum _EVENT_TYPE;
};

typedef struct wistd::integral_constant<enum _EVENT_TYPE,1> {
    enum _EVENT_TYPE value;
    enum _EVENT_TYPE value_type;
    struct wistd::integral_constant<enum _EVENT_TYPE,1> type;
    enum _EVENT_TYPE operator enum _EVENT_TYPE;
};

typedef struct wistd::integral_constant<unsigned __int64,0> {
    ULONG64 value;
    ULONG64 value_type;
    struct wistd::integral_constant<unsigned __int64,0> type;
    ULONG64 operator unsigned __int64;
};

typedef struct wistd::integral_constant<unsigned __int64,1> {
};

typedef struct wistd::integral_constant<unsigned __int64,2> {
};

typedef union KSDATAFORMAT {
    ULONG FormatSize;
    ULONG Flags;
    ULONG SampleSize;
    ULONG Reserved;
    struct _GUID MajorFormat;
    struct _GUID SubFormat;
    struct _GUID Specifier;
    LONG64 Alignment;
};

typedef union _DATA {
     _QUERY_INFORMATION;
    struct _NDIS_REQUEST::_DATA::_QUERY_INFORMATION QUERY_INFORMATION;
     _SET_INFORMATION;
    struct _NDIS_REQUEST::_DATA::_SET_INFORMATION SET_INFORMATION;
};

typedef union _DL_EI48 {
    UCHAR Byte[3];
};

typedef union _DL_EUI48 {
    UCHAR Byte[6];
    union _DL_OUI Oui;
    union _DL_EI48 Ei48;
};

typedef union _DL_OUI {
    UCHAR Byte[3];
    UCHAR Group : 1;
    UCHAR Local : 1;
};

typedef union _ENCAPSULATION_PROTOCOL_INFO {
     _VXLAN_INFO;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO VxlanInfo;
    ULONG Value;
};

typedef union _FIELD_VALUE {
    UCHAR FieldByteValue;
    USHORT FieldShortValue;
    ULONG FieldLongValue;
    ULONG64 FieldLong64Value;
    UCHAR FieldByteArrayValue[16];
};

typedef union _HEADER_FIELD {
    enum _NDIS_MAC_HEADER_FIELD MacHeaderField;
    enum _NDIS_ARP_HEADER_FIELD ArpHeaderField;
    enum _NDIS_IPV4_HEADER_FIELD IPv4HeaderField;
    enum _NDIS_IPV6_HEADER_FIELD IPv6HeaderField;
    enum _NDIS_UDP_HEADER_FIELD UdpHeaderField;
};

typedef union _KGDTENTRY64 {
    USHORT LimitLow;
    USHORT BaseLow;
    struct {
        UCHAR BaseMiddle;
        UCHAR Flags1;
        UCHAR Flags2;
        UCHAR BaseHigh;
    } Bytes;
    struct {
        ULONG BaseMiddle : 8;
        ULONG Type : 5;
        ULONG Dpl : 2;
        ULONG Present : 1;
        ULONG LimitHigh : 4;
        ULONG System : 1;
        ULONG LongMode : 1;
        ULONG DefaultBig : 1;
        ULONG Granularity : 1;
        ULONG BaseHigh : 8;
    } Bits;
    ULONG BaseUpper;
    ULONG MustBeZero;
    LONG64 DataLow;
    LONG64 DataHigh;
};

typedef union _KIDTENTRY64 {
    USHORT OffsetLow;
    USHORT Selector;
    USHORT IstIndex : 3;
    USHORT Reserved0 : 5;
    USHORT Type : 5;
    USHORT Dpl : 2;
    USHORT Present : 1;
    USHORT OffsetMiddle;
    ULONG OffsetHigh;
    ULONG Reserved1;
    ULONG64 Alignment;
};

typedef union _LARGE_INTEGER {
    ULONG LowPart;
    LONG HighPart;
     <unnamed-type-u>;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONG64 QuadPart;
};

typedef union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO {
     _VXLAN_INFO;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO VxlanInfo;
    ULONG Value;
};

typedef union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPv4SrcAndDestAddress;
    struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPv6SrcAndDestAddress;
};

typedef union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES AddDeviceRegistrationAttributes;
    struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES RegistrationAttributes;
    struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES GeneralAttributes;
    struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES OffloadAttributes;
    struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES Native_802_11_Attributes;
    struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES HardwareAssistAttributes;
    struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES NDKAttributes;
    struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES PacketDirectAttributes;
};

typedef union _NDIS_OID_REQUEST::_REQUEST_DATA {
     _QUERY;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY QUERY_INFORMATION;
     _SET;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET SET_INFORMATION;
     _METHOD;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD METHOD_INFORMATION;
};

typedef union _NDIS_PD_COUNTER_VALUE {
    struct _NDIS_PD_RECEIVE_QUEUE_COUNTER ReceiveQueue;
    struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER TransmitQueue;
    struct _NDIS_PD_FILTER_COUNTER Filter;
};

typedef union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS {
     _IPV4_ARP_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS IPv4ARPParameters;
     _IPV6_NS_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS IPv6NSParameters;
     _DOT11_RSN_REKEY_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
};

typedef union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN {
     _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
     _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
     _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
     _WOL_BITMAP_PATTERN;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN WoLBitMapPattern;
};

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE {
    UCHAR FieldByteValue;
    USHORT FieldShortValue;
    ULONG FieldLongValue;
    ULONG64 FieldLong64Value;
    UCHAR FieldByteArrayValue[16];
};

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD {
    enum _NDIS_MAC_HEADER_FIELD MacHeaderField;
    enum _NDIS_ARP_HEADER_FIELD ArpHeaderField;
    enum _NDIS_IPV4_HEADER_FIELD IPv4HeaderField;
    enum _NDIS_IPV6_HEADER_FIELD IPv6HeaderField;
    enum _NDIS_UDP_HEADER_FIELD UdpHeaderField;
};

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE {
    UCHAR ResultByteValue;
    USHORT ResultShortValue;
    ULONG ResultLongValue;
    ULONG64 ResultLong64Value;
    UCHAR ResultByteArrayValue[16];
};

typedef union _NDIS_REQUEST::_DATA {
     _QUERY_INFORMATION;
    struct _NDIS_REQUEST::_DATA::_QUERY_INFORMATION QUERY_INFORMATION;
     _SET_INFORMATION;
    struct _NDIS_REQUEST::_DATA::_SET_INFORMATION SET_INFORMATION;
};

typedef union _NDIS_RSC_NBL_INFO {
     <unnamed-type-Info>;
    struct {
        USHORT CoalescedSegCount;
        USHORT DupAckCount;
    } Info;
    PVOID Value;
};

typedef union _NDIS_RW_LOCK_REFCOUNT {
    ULONG RefCount;
    UCHAR cacheLine[16];
};

typedef union _NDIS_SS_RESUME_REASON {
    enum _NDIS_SS_STOP_REASON StopReason;
    enum _NDIS_SS_BUSY_REASON BusyReason;
    ULONG Value;
};

typedef union _NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO {
    ULONG64 AsUINT64;
    ULONG NumAvailableDestinations : 16;
    ULONG SourcePortId : 16;
    ULONG SourceNicIndex : 8;
    ULONG NativeForwardingRequired : 1;
    ULONG Reserved1 : 1;
    ULONG IsPacketDataSafe : 1;
    ULONG SafePacketDataSize : 12;
    ULONG IsPacketDataUncached : 1;
    ULONG IsSafePacketDataUncached : 1;
    ULONG Reserved2 : 7;
};

typedef union _NET_BUFFER_DATA_LENGTH {
    ULONG DataLength;
    ULONG64 stDataLength;
};

typedef union _NET_BUFFER_HEADER {
    struct _NET_BUFFER_DATA NetBufferData;
    union _SLIST_HEADER Link;
};

typedef union _NET_BUFFER_LIST_HEADER {
    struct _NET_BUFFER_LIST_DATA NetBufferListData;
    union _SLIST_HEADER Link;
};

typedef union _NET_LUID_LH {
    ULONG64 Value;
     <unnamed-type-Info>;
    struct {
        ULONG64 Reserved : 24;
        ULONG64 NetLuidIndex : 24;
        ULONG64 IfType : 16;
    } Info;
};

typedef union _PCW_CALLBACK_INFORMATION {
    struct _PCW_COUNTER_INFORMATION AddCounter;
    struct _PCW_COUNTER_INFORMATION RemoveCounter;
    struct _PCW_MASK_INFORMATION EnumerateInstances;
    struct _PCW_MASK_INFORMATION CollectData;
};

typedef union _POWER_STATE {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
};

typedef union _PROTOCOL_OFFLOAD_PARAMETERS {
     _IPV4_ARP_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS IPv4ARPParameters;
     _IPV6_NS_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS IPv6NSParameters;
     _DOT11_RSN_REKEY_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
};

typedef union _REFERENCE_OBJECT {
    ULONG Deleting : 1;
    ULONG ReferenceCount : 30;
    ULONG Overflow : 1;
    LONG Value;
};

typedef union _REQUEST_DATA {
     _QUERY;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY QUERY_INFORMATION;
     _SET;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET SET_INFORMATION;
     _METHOD;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD METHOD_INFORMATION;
};

typedef union _RESULT_VALUE {
    UCHAR ResultByteValue;
    USHORT ResultShortValue;
    ULONG ResultLongValue;
    ULONG64 ResultLong64Value;
    UCHAR ResultByteArrayValue[16];
};

typedef union _SLIST_HEADER {
    ULONG64 Alignment;
    ULONG64 Region;
     <unnamed-type-HeaderX64>;
    struct {
        ULONG64 Depth : 16;
        ULONG64 Sequence : 48;
        ULONG64 Reserved : 4;
        ULONG64 NextEntry : 60;
    } HeaderX64;
};

typedef union _ULARGE_INTEGER {
    ULONG LowPart;
    ULONG HighPart;
     <unnamed-type-u>;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONG64 QuadPart;
};

typedef union _WHEA_ERROR_PACKET_FLAGS {
    ULONG PreviousError : 1;
    ULONG Reserved1 : 1;
    ULONG HypervisorError : 1;
    ULONG Simulated : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved2 : 26;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
    ULONG Recovered : 1;
    ULONG PreviousError : 1;
    ULONG Simulated : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
    ULONG PlatformId : 1;
    ULONG Timestamp : 1;
    ULONG PartitionId : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
    ULONG Primary : 1;
    ULONG ContainmentWarning : 1;
    ULONG Reset : 1;
    ULONG ThresholdExceeded : 1;
    ULONG ResourceNotAvailable : 1;
    ULONG LatentError : 1;
    ULONG Propagated : 1;
    ULONG Reserved : 25;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
    UCHAR FRUId : 1;
    UCHAR FRUText : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS {
    ULONG Reserved : 32;
    ULONG AsULONG;
};

typedef union _WHEA_PERSISTENCE_INFO {
    ULONG64 Signature : 16;
    ULONG64 Length : 24;
    ULONG64 Identifier : 16;
    ULONG64 Attributes : 2;
    ULONG64 DoNotLog : 1;
    ULONG64 Reserved : 5;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_REVISION {
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    USHORT AsUSHORT;
};

typedef union _WHEA_TIMESTAMP {
    ULONG64 Seconds : 8;
    ULONG64 Minutes : 8;
    ULONG64 Hours : 8;
    ULONG64 Precise : 1;
    ULONG64 Reserved : 7;
    ULONG64 Day : 8;
    ULONG64 Month : 8;
    ULONG64 Year : 8;
    ULONG64 Century : 8;
    union _LARGE_INTEGER AsLARGE_INTEGER;
};

typedef union _WOL_PATTERN {
     _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
     _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
     _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
     _WOL_BITMAP_PATTERN;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN WoLBitMapPattern;
};

typedef union __m128 {
    FLOAT m128_f32[4];
    ULONG64 m128_u64[2];
    CHAR m128_i8[16];
    SHORT m128_i16[8];
    LONG m128_i32[4];
    LONG64 m128_i64[2];
    UCHAR m128_u8[16];
    USHORT m128_u16[8];
    ULONG m128_u32[4];
};

typedef union __m64 {
    ULONG64 m64_u64;
    FLOAT m64_f32[2];
    CHAR m64_i8[8];
    SHORT m64_i16[4];
    LONG m64_i32[2];
    LONG64 m64_i64;
    UCHAR m64_u8[8];
    USHORT m64_u16[4];
    ULONG m64_u32[2];
};

typedef union wil_details_FeaturePropertyCache {
    struct wil_details_FeatureProperties cache;
    struct wil_details_VariantProperties variant;
    LONG var;
    VOID wil_details_FeaturePropertyCache;
    VOID wil_details_FeaturePropertyCache;
    union wil_details_FeaturePropertyCache *operator=;
    union wil_details_FeaturePropertyCache *operator=;
};

typedef enum BINDING_ENABLED_OR_DISABLED {
    BindingEnabled = 0,
    BindingDisabled = 1
};

typedef enum BIND_SOURCE_STATE {
    AddBindSource = 0,
    RemoveBindSource = 1
};

typedef enum BUS_QUERY_ID_TYPE {
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5
};

typedef enum BooleanDisposition {
    FailIfNotFound = 0,
    DefaultToFalse = 1,
    DefaultToTrue = 2
};

typedef enum COMPARTMENT_ID {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID = 1
};

typedef enum CallRunMode {
    RunSynchronous = 0,
    RunAsynchronous = 1,
    RunAsynchronousButOkayToBlock = 2
};

typedef enum DEVICE_TEXT_TYPE {
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1
};

typedef enum DL_ADDRESS_TYPE {
    DlUnicast = 0,
    DlMulticast = 1,
    DlBroadcast = 2
};

typedef enum DMA_COMPLETION_STATUS {
    DmaComplete = 0,
    DmaAborted = 1,
    DmaError = 2,
    DmaCancelled = 3
};

typedef enum FEATURE_CHANGE_TIME {
    FEATURE_CHANGE_TIME_READ = 0,
    FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
    FEATURE_CHANGE_TIME_SESSION = 2,
    FEATURE_CHANGE_TIME_REBOOT = 3,
    FEATURE_CHANGE_TIME_USER_FLAG = 128
};

typedef enum FEATURE_ENABLED_STATE {
    FEATURE_ENABLED_STATE_DEFAULT = 0,
    FEATURE_ENABLED_STATE_DISABLED = 1,
    FEATURE_ENABLED_STATE_ENABLED = 2,
    FEATURE_ENABLED_STATE_HAS_NOTIFICATION = 128,
    FEATURE_ENABLED_STATE_HAS_VARIANT_CONFIGURATION = 64
};

typedef enum INDICATE_OFFLOAD_EVENT {
    NeighborReachabilityInDoubt = 1,
    NeighborReachabilityQuery = 2,
    MaxOffloadEvent = 3
};

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
};

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
};

typedef enum KRegKey::BooleanDisposition {
    FailIfNotFound = 0,
    DefaultToFalse = 1,
    DefaultToTrue = 2
};

typedef enum KSPIN_COMMUNICATION {
    KSPIN_COMMUNICATION_NONE = 0,
    KSPIN_COMMUNICATION_SINK = 1,
    KSPIN_COMMUNICATION_SOURCE = 2,
    KSPIN_COMMUNICATION_BOTH = 3,
    KSPIN_COMMUNICATION_BRIDGE = 4
};

typedef enum KSPIN_DATAFLOW {
    KSPIN_DATAFLOW_IN = 1,
    KSPIN_DATAFLOW_OUT = 2
};

typedef enum KSRESET {
    KSRESET_BEGIN = 0,
    KSRESET_END = 1
};

typedef enum KSSTATE {
    KSSTATE_STOP = 0,
    KSSTATE_ACQUIRE = 1,
    KSSTATE_PAUSE = 2,
    KSSTATE_RUN = 3
};

typedef enum NDIS_CHIMNEY_OFFLOAD_TYPE {
    NdisTcpChimneyOffload = 1,
    NdisIpsecChimneyOffload = 2,
    NdisRdmaChimneyOffload = 3,
    NdisMaxChimneyOffload = 4
};

typedef enum NDIS_DO_NOT_BIND_REASON {
    Reason_NoBindSourceWantsThisBinding = 1,
    Reason_DriverNotReady = 2,
    Reason_LastBindAttemptFailed = 4,
    Reason_LastRestartAttemptFailed = 8,
    Reason_DriverRejectedBinding = 16,
    Reason_MissingMandatoryFilter = 32,
    Reason_MissingOptionalFilter = 64,
    Reason_MissingModifyingFilter = 128,
    Reason_MandatoryMissingDuringBoot = 256,
    Reason_UnbindOnAttach = 512,
    Reason_UnbindOnDetach = 1024,
    Reason_MiniportLowPower = 2048,
    Reason_RemovingMiniport = 4096,
    Reason_RebindNeeded = 8192,
    Reason_DefaultPortNotActive = 0x8000,
    Reason_SecondaryMiniport = 0x10000,
    Reason_MiniportNotReady = 0x20000,
    Reason_DisabledByLegacyIoctl = 0x40000,
    Reason_MiniportDeviceNotStarted = 0x80000,
    Reason_NetEventInhibitBindsAbove = 0x100000,
    Reason_ProtocolDependsOnVBus = 0x200000,
    Reason_IncompatibleWithNotification = 0x400000,
    Reason_MiniportInterfaceDeregister = 0x800000
};

typedef enum NDIS_MINIPORT_POLICY_OWNER {
    MiniportNotOwned = 0,
    MiniportOwnedByPowerManagement = 1,
    MiniportOwnedByBindEngine = 2
};

typedef enum NDIS_PAUSE_REASON {
    PauseReason_InitialPause = 1,
    PauseReason_LowPower = 2,
    PauseReason_Pnp = 4,
    PauseReason_RemovingMiniport = 8,
    PauseReason_LowerDriverPaused = 16,
    PauseReason_RestartNeeded = 32,
    PauseReason_MandatoryMissingDuringBoot = 64,
    PauseReason_Wdf = 128,
    PauseReason_NetEventRequirePause = 256,
    PauseReason_InterfaceChangeInProgress = 512
};

typedef enum NDIS_PD_CONTROL_TYPE {
    NdisPDCTL_IN = 0,
    NdisPDCTL_OUT = 1,
    NdisPDCTL_INOUT = 2
};

typedef enum NDIS_PD_COUNTER_TYPE {
    PDCounterTypeUnknown = 0,
    PDCounterTypeReceiveQueue = 1,
    PDCounterTypeTransmitQueue = 2,
    PDCounterTypeReceiveFilter = 3,
    PDCounterTypeMax = 4
};

typedef enum NDIS_PD_PROVIDER_CONTROL_CODE {
    NdisPDPCTLUnknown = 0,
    NdisPDPCTLCapabilities = 1,
    NdisPDPCTLMax = 2
};

typedef enum NDIS_PD_QUEUE_CONTROL_CODE {
    NdisPDQCTLUnknown = 0,
    NdisPDQCTLQueueDepthThreshold = 1,
    NdisPDQCTLModerationInterval = 2,
    NdisPDQCTLModerationCount = 3,
    NdisPDQCTLNotificationGroupId = 4,
    NdisPDQCTLSchedulerQueueId = 5,
    NdisPDQCTLMax = 6
};

typedef enum NDIS_PD_QUEUE_TYPE {
    PDQueueTypeUnknown = 0,
    PDQueueTypeReceive = 1,
    PDQueueTypeTransmit = 2,
    PDQueueTypeMax = 3
};

typedef enum NL_ADDRESS_TYPE {
    NlatUnspecified = 0,
    NlatUnicast = 1,
    NlatAnycast = 2,
    NlatMulticast = 3,
    NlatBroadcast = 4,
    NlatInvalid = 5
};

typedef enum Ndis::BindSource::Flags {
    Registry = 1,
    UserRequested = 2,
    UnsolicitedOpen = 4,
    TapiProxy = 8
};

typedef enum Ndis::ReadBindingsOptions::Flags {
    Default = 0,
    DoNotRemoveMissingBindings = 1
};

typedef enum NdisIfBlockSource {
    NdisIfBlockSourcePublicApi = 0,
    NdisIfBlockSourcePersistedNetSetup = 1,
    NdisIfBlockSourceAutomaticLwFilter = 2,
    NdisIfBlockSourceAutomaticLoopback = 3
};

typedef enum NetDmaEventTypes {
    NdisMIndicateRecvEvent = 0,
    NdisPIndicateRecvEvent = 1,
    NdisPIndicateRecvCompleteEvent = 2,
    NdisPReturnPacketsExEvent = 3,
    NdisMReturnPacketsExEvent = 4,
    NdisPReturnPacketEvent = 5,
    NdisMReturnPacketEvent = 6,
    NdisMReturnPacketInRecvEvent = 7,
    DmaCopyV2VEvent = 8,
    DmaChainV2VNoCopyEvent = 9,
    DmaChainV2VCopyEvent = 10,
    DmaCopyP2VEvent = 11,
    DmaChainP2VNoCopyEvent = 12,
    DmaChainP2VCopyEvent = 13,
    DmaCopyFlushEvent = 14,
    DmaCopyAppendEvent = 15,
    DmaChainCopyAppendEvent = 16,
    DmaCopyFlushAppendEvent = 17,
    DmaCopyCheckForCompletionEvent = 18,
    DmaCopyGetPhysicalAddressEvent = 19,
    DmaCopyNullXferEvent = 20,
    DmaCopyDummyEvent = 21,
    TotalEventTypes = 22
};

typedef enum NetSetupSubkeyType {
};

typedef enum OFFLOAD_STATE_TYPE {
    NeighborOffloadConstState = 1,
    NeighborOffloadCachedState = 2,
    NeighborOffloadDelegatedState = 3,
    NeighborOffloadState = 4,
    Ip4OffloadConstState = 5,
    Ip4OffloadCachedState = 6,
    Ip4OffloadDelegatedState = 7,
    Ip4OffloadState = 8,
    Ip6OffloadConstState = 9,
    Ip6OffloadCachedState = 10,
    Ip6OffloadDelegatedState = 11,
    Ip6OffloadState = 12,
    TcpOffloadConstState = 13,
    TcpOffloadCachedState = 14,
    TcpOffloadDelegatedState = 15,
    TcpOffloadResourceState = 16,
    TcpOffloadState = 17,
    FilterReservedOffloadState = 254,
    MaximumOffloadState = 255
};

typedef enum PAUSE_OR_RESTART {
    DatapathPaused = 0,
    DatapathRunning = 1
};

typedef enum PDCCLIENTID {
    PDC_INVALID_CLIENT = 0,
    PDC_PLM_CLIENT = 1,
    PDC_NQM_CLIENT = 2,
    PDC_WNS_CLIENT = 3,
    PDC_DAM_CLIENT = 4,
    PDC_WCM_CLIENT = 5,
    PDC_NCSI_CLIENT = 7,
    PDC_DHCP_CLIENT = 8,
    PDC_TCPIP_CLIENT = 9,
    PDC_WU_CLIENT = 11,
    PDC_GP_CLIENT = 12,
    PDC_NCA_CLIENT = 14,
    PDC_BI_CLIENT = 15,
    PDC_MSCHED_CLIENT = 16,
    PDC_SUSPENDRESUME_CLIENT = 17,
    PDC_INTERNAL_CLIENT = 18,
    PDC_ACTIVATION_TEST_CLIENT = 19,
    PDC_PLM_PHASE_TEST_CLIENT = 20,
    PDC_DAM_PHASE_TEST_CLIENT = 21,
    PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
    PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
    PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
    PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
    PDC_DAM_KM_TEST_CLIENT = 26,
    PDC_DAM_UM_TEST_CLIENT = 27,
    PDC_SINGLETON_TEST_CLIENT = 28,
    PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
    PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
    PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
    PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
    PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
    PDC_SHELL_CLIENT = 34,
    PDC_MAINTENANCE_CLIENT = 35,
    PDC_SYNC_CLIENT = 36,
    PDC_IDM_CLIENT = 37,
    PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
    PDC_TETHERING_CLIENT = 39,
    PDC_AUDIO_CLIENT = 40,
    PDC_LOCK_SCREEN = 41,
    PDC_LREC_CLIENT = 42,
    PDC_WP_BW_CLIENT = 43,
    PDC_WP_MEDIA_STREAMING_CLIENT = 44,
    PDC_WP_MAPS_CLIENT = 46,
    PDC_WP_SYNC_CLIENT = 47,
    PDC_SETTING_SYNC_CLIENT = 48,
    PDC_WP_EDM_CLIENT = 49,
    PDC_WP_WALLET_CLIENT = 50,
    PDC_WP_LOCATION_CLIENT = 51,
    PDC_WP_CM_CLIENT = 53,
    PDC_WP_DCP_CLIENT = 54,
    PDC_WP_WIFIAUTO_CLIENT = 55,
    PDC_BITLOCKER_CLIENT = 56,
    PDC_MDM_CERTINSTALLER_CLIENT = 57,
    PDC_WP_IM_CLIENT = 58,
    PDC_WP_MMS_CLIENT = 59,
    PDC_DEVICEENROLLER_CLIENT = 60,
    PDC_WP_WIFI_SCANNING_CLIENT = 61,
    PDC_WP_OMADM_CLIENT = 62,
    PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
    PDC_WP_DIS_CLIENT = 64,
    PDC_BITS_CLIENT = 65,
    PDC_WP_VOIP_EXECUTION_CLIENT = 66,
    PDC_WP_RESERVED_CLIENT3 = 67,
    PDC_SLEEP_STUDY_CLIENT = 68,
    PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
    PDC_HYPERV_CLIENT = 70,
    PDC_KM_SIGNAL_CLIENT = 71,
    PDC_UM_SIGNAL_CLIENT = 72,
    PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
    PDC_XB_SYSTEM_CLIENT = 74,
    PDC_XB_HOST_CLIENT = 75,
    PDC_PRINT_JOB_MANAGER_CLIENT = 76,
    PDC_TELEMETRY_CLIENT = 77,
    PDC_ERROR_REPORTING_CLIENT = 78,
    PDC_XBOX_NTM = 79,
    PDC_CBE_CLIENT = 80,
    PDC_FIND_MY_PHONE_CLIENT = 81,
    PDC_COMMAND_CHANNEL_CLIENT = 82,
    PDC_PPM_PROFILES_CLIENT = 83,
    PDC_WIFI_CALLING_CLIENT = 84,
    PDC_WU_REBOOT_CLIENT = 85,
    PDC_SYSMAIN_CLIENT = 86,
    PDC_XBOX_UPDATE_CLIENT = 87,
    PDC_CHAT_SERVICE_CLIENT = 88,
    PDC_FIND_MY_DEVICE_CLIENT = 89,
    PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
    PDC_INSTALL_AGENT_CLIENT = 91,
    PDC_XBOX_WAKE_ON_VOICE = 92,
    PDC_PLM_AUDIO_CLIENT = 93,
    PDC_WP_BCKAUDIO_CLIENT = 94,
    PDC_WAKE_ON_LAN_CLIENT = 95,
    PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
    PDC_DATA_MIGRATION_MANAGER = 97,
    PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
    PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
    PDC_HAM_CLIENT = 100,
    PDC_FILESHARINGSERVER_CLIENT = 101,
    PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
    PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
    PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
    PDC_HTTPSDATASOURCE_CLIENT = 105,
    PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
    PDC_TERMINALSERVER_SESSION_CLIENT = 107,
    PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
    PDC_XBOX_NUI_CLIENT = 110,
    PDC_WIFI_CALLING_IMS_CLIENT = 111,
    PDC_NUMBER_OF_CLIENTS = 112
};

typedef enum PDC_ACTIVITY_TYPE {
    PdcNetwork = 0,
    PdcSystem = 1,
    PdcTimer = 2,
    PdcAllNetworks = 3,
    PdcAnyNetwork = 4,
    PdcInvalidActivity = 5,
    PdcMaxActivity = 5
};

typedef enum POWER_ACTION {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8
};

typedef enum PS_CREATE_STATE {
    PsCreateInitialState = 0,
    PsCreateFailOnFileOpen = 1,
    PsCreateFailOnSectionCreate = 2,
    PsCreateFailExeFormat = 3,
    PsCreateFailMachineMismatch = 4,
    PsCreateFailExeName = 5,
    PsCreateSuccess = 6,
    PsCreateMaximumStates = 7
};

typedef enum ReplacesCorHdrNumericDefines {
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
    COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
};

typedef enum SCOPE_LEVEL {
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14,
    ScopeLevelCount = 16
};

typedef enum SE_WS_APPX_SIGNATURE_ORIGIN {
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4
};

typedef enum TCP_OFFLOAD_CONNECTION_STATE {
    TcpConnectionClosed = 0,
    TcpConnectionListen = 1,
    TcpConnectionSynSent = 2,
    TcpConnectionSynRcvd = 3,
    TcpConnectionEstablished = 4,
    TcpConnectionFinWait1 = 5,
    TcpConnectionFinWait2 = 6,
    TcpConnectionCloseWait = 7,
    TcpConnectionClosing = 8,
    TcpConnectionLastAck = 9,
    TcpConnectionTimeWait = 10,
    TcpConnectionMaxState = 11
};

typedef enum TCP_OFFLOAD_EVENT_TYPE {
    TcpIndicateSendBacklogChange = 1,
    TcpIndicateDisconnect = 2,
    TcpIndicateRetrieve = 3,
    TcpIndicateAbort = 4
};

typedef enum TCP_UPLOAD_REASON {
    LowActivity = 1,
    HighDropRate = 2,
    SmallIO = 3,
    NoBufferPreposting = 4,
    NoBufferProposting = 4,
    ReceivedUrgentData = 5,
    HighFragmentation = 6,
    HighOutOfOrderPackets = 7,
    TimeoutExpiration = 8,
    InvalidState = 9,
    UploadRequested = 10,
    HardwareFailure = 11,
    MaxUploadReason = 12
};

typedef enum TlgIn_t {
    TlgInNULL = 0,
    TlgInUNICODESTRING = 1,
    TlgInANSISTRING = 2,
    TlgInINT8 = 3,
    TlgInUINT8 = 4,
    TlgInINT16 = 5,
    TlgInUINT16 = 6,
    TlgInINT32 = 7,
    TlgInUINT32 = 8,
    TlgInINT64 = 9,
    TlgInUINT64 = 10,
    TlgInFLOAT = 11,
    TlgInDOUBLE = 12,
    TlgInBOOL32 = 13,
    TlgInBINARY = 14,
    TlgInGUID = 15,
    _TlgInPOINTER_unsupported = 16,
    TlgInFILETIME = 17,
    TlgInSYSTEMTIME = 18,
    TlgInSID = 19,
    TlgInHEXINT32 = 20,
    TlgInHEXINT64 = 21,
    TlgInCOUNTEDSTRING = 22,
    TlgInCOUNTEDANSISTRING = 23,
    _TlgInSTRUCT = 24,
    TlgInCOUNTEDBINARY = 25,
    _TlgInMax = 26,
    TlgInINTPTR = 9,
    TlgInUINTPTR = 10,
    TlgInPOINTER = 21,
    _TlgInCcount = 32,
    TlgInVcount = 64,
    _TlgInChain = 128,
    _TlgInCustom = 96,
    _TlgInTypeMask = 31,
    _TlgInCountMask = 96,
    _TlgInFlagMask = 224
};

typedef enum TlgOut_t {
    TlgOutNULL = 0,
    TlgOutNOPRINT = 1,
    TlgOutSTRING = 2,
    TlgOutBOOLEAN = 3,
    TlgOutHEX = 4,
    TlgOutPID = 5,
    TlgOutTID = 6,
    TlgOutPORT = 7,
    TlgOutIPV4 = 8,
    TlgOutIPV6 = 9,
    TlgOutSOCKETADDRESS = 10,
    TlgOutXML = 11,
    TlgOutJSON = 12,
    TlgOutWIN32ERROR = 13,
    TlgOutNTSTATUS = 14,
    TlgOutHRESULT = 15,
    TlgOutFILETIME = 16,
    TlgOutSIGNED = 17,
    TlgOutUNSIGNED = 18,
    TlgOutUTF8 = 35,
    TlgOutPKCS7_WITH_TYPE_INFO = 36,
    TlgOutCODE_POINTER = 37,
    _TlgOutMax = 38,
    _TlgOutChain = 128,
    _TlgOutTypeMask = 127
};

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2
};

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
};

typedef enum _DEVICE_RELATION_TYPE {
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6
};

typedef enum _DEVICE_RESET_TYPE {
    FunctionLevelDeviceReset = 0,
    PlatformLevelDeviceReset = 1
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5
};

typedef enum _DEVICE_WAKE_DEPTH {
    DeviceWakeDepthNotWakeable = 0,
    DeviceWakeDepthD0 = 1,
    DeviceWakeDepthD1 = 2,
    DeviceWakeDepthD2 = 3,
    DeviceWakeDepthD3hot = 4,
    DeviceWakeDepthD3cold = 5,
    DeviceWakeDepthMaximum = 6
};

typedef enum _DEVPROPSTORE {
    DEVPROP_STORE_SYSTEM = 0,
    DEVPROP_STORE_USER = 1
};

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2
};

typedef enum _DMA_SPEED {
    Compatible = 0,
    TypeA = 1,
    TypeB = 2,
    TypeC = 3,
    TypeF = 4,
    MaximumDmaSpeed = 5
};

typedef enum _DMA_WIDTH {
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5
};

typedef enum _DOT11_ASSOCIATION_STATE {
    dot11_assoc_state_zero = 0,
    dot11_assoc_state_unauth_unassoc = 1,
    dot11_assoc_state_auth_unassoc = 2,
    dot11_assoc_state_auth_assoc = 3
};

typedef enum _DOT11_AUTH_ALGORITHM {
    DOT11_AUTH_ALGO_80211_OPEN = 1,
    DOT11_AUTH_ALGO_80211_SHARED_KEY = 2,
    DOT11_AUTH_ALGO_WPA = 3,
    DOT11_AUTH_ALGO_WPA_PSK = 4,
    DOT11_AUTH_ALGO_WPA_NONE = 5,
    DOT11_AUTH_ALGO_RSNA = 6,
    DOT11_AUTH_ALGO_RSNA_PSK = 7,
    DOT11_AUTH_ALGO_IHV_START = -2147483648,
    DOT11_AUTH_ALGO_IHV_END = -1
};

typedef enum _DOT11_CIPHER_ALGORITHM {
    DOT11_CIPHER_ALGO_NONE = 0,
    DOT11_CIPHER_ALGO_WEP40 = 1,
    DOT11_CIPHER_ALGO_TKIP = 2,
    DOT11_CIPHER_ALGO_CCMP = 4,
    DOT11_CIPHER_ALGO_WEP104 = 5,
    DOT11_CIPHER_ALGO_BIP = 6,
    DOT11_CIPHER_ALGO_GCMP = 8,
    DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_WEP = 257,
    DOT11_CIPHER_ALGO_IHV_START = -2147483648,
    DOT11_CIPHER_ALGO_IHV_END = -1
};

typedef enum _DOT11_DIVERSITY_SUPPORT {
    dot11_diversity_support_unknown = 0,
    dot11_diversity_support_fixedlist = 1,
    dot11_diversity_support_notsupported = 2,
    dot11_diversity_support_dynamic = 3
};

typedef enum _DOT11_PHY_TYPE {
    dot11_phy_type_unknown = 0,
    dot11_phy_type_any = 0,
    dot11_phy_type_fhss = 1,
    dot11_phy_type_dsss = 2,
    dot11_phy_type_irbaseband = 3,
    dot11_phy_type_ofdm = 4,
    dot11_phy_type_hrdsss = 5,
    dot11_phy_type_erp = 6,
    dot11_phy_type_ht = 7,
    dot11_phy_type_vht = 8,
    dot11_phy_type_dmg = 9,
    dot11_phy_type_he = 10,
    dot11_phy_type_IHV_start = -2147483648,
    dot11_phy_type_IHV_end = -1
};

typedef enum _DOT11_POWER_MODE {
    dot11_power_mode_unknown = 0,
    dot11_power_mode_active = 1,
    dot11_power_mode_powersave = 2
};

typedef enum _DOT11_TEMP_TYPE {
    dot11_temp_type_unknown = 0,
    dot11_temp_type_1 = 1,
    dot11_temp_type_2 = 2
};

typedef enum _EVENT_INFO_CLASS {
    EventProviderBinaryTrackInfo = 0,
    EventProviderSetReserved1 = 1,
    EventProviderSetTraits = 2,
    EventProviderUseDescriptorType = 3,
    MaxEventInfo = 4
};

typedef enum _EVENT_TYPE {
    NotificationEvent = 0,
    SynchronizationEvent = 1
};

typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3
};

typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileDesiredStorageClassInformation = 67,
    FileStatInformation = 68,
    FileMemoryPartitionInformation = 69,
    FileStatLxInformation = 70,
    FileCaseSensitiveInformation = 71,
    FileLinkInformationEx = 72,
    FileLinkInformationExBypassAccessCheck = 73,
    FileStorageReserveIdInformation = 74,
    FileCaseSensitiveInformationForceAccessCheck = 75,
    FileMaximumInformation = 76
};

typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsMaximumInformation = 15
};

typedef enum _HV_EXT_EPF_MODE {
    HvExtEpfModeMin = 0,
    HvExtEpfModeNt = 0,
    HvExtEpfModeMax = 1
};

typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18
};

typedef enum _INTERLOCKED_RESULT {
    ResultNegative = 1,
    ResultZero = 0,
    ResultPositive = 2
};

typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject = 2,
    DeallocateObjectKeepRegisters = 3
};

typedef enum _IO_PRIORITY_HINT {
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5
};

typedef enum _IO_RATE_CONTROL_TYPE {
    IoRateControlTypeCapMin = 0,
    IoRateControlTypeIopsCap = 0,
    IoRateControlTypeBandwidthCap = 1,
    IoRateControlTypeTimePercentCap = 2,
    IoRateControlTypeCapMax = 2,
    IoRateControlTypeReservationMin = 3,
    IoRateControlTypeIopsReservation = 3,
    IoRateControlTypeBandwidthReservation = 4,
    IoRateControlTypeTimePercentReservation = 5,
    IoRateControlTypeReservationMax = 5,
    IoRateControlTypeCriticalReservationMin = 6,
    IoRateControlTypeIopsCriticalReservation = 6,
    IoRateControlTypeBandwidthCriticalReservation = 7,
    IoRateControlTypeTimePercentCriticalReservation = 8,
    IoRateControlTypeCriticalReservationMax = 8,
    IoRateControlTypeSoftCapMin = 9,
    IoRateControlTypeIopsSoftCap = 9,
    IoRateControlTypeBandwidthSoftCap = 10,
    IoRateControlTypeTimePercentSoftCap = 11,
    IoRateControlTypeSoftCapMax = 11,
    IoRateControlTypeLimitExcessNotifyMin = 12,
    IoRateControlTypeIopsLimitExcessNotify = 12,
    IoRateControlTypeBandwidthLimitExcessNotify = 13,
    IoRateControlTypeTimePercentLimitExcessNotify = 14,
    IoRateControlTypeLimitExcessNotifyMax = 14,
    IoRateControlTypeMax = 15
};

typedef enum _IPSEC_OFFLOAD_V2_OPERATION {
    IPsecOffloadV2Ah = 1,
    IPsecOffloadV2Esp = 2,
    IPsecOffloadV2Max = 3
};

typedef enum _IRQ_PRIORITY {
    IrqPriorityUndefined = 0,
    IrqPriorityLow = 1,
    IrqPriorityNormal = 2,
    IrqPriorityHigh = 3
};

typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectFreezeInformation = 18,
    JobObjectExtendedAccountingInformation = 19,
    JobObjectWakeInformation = 20,
    JobObjectBackgroundInformation = 21,
    JobObjectSchedulingRankBiasInformation = 22,
    JobObjectTimerVirtualizationInformation = 23,
    JobObjectCycleTimeNotification = 24,
    JobObjectClearEvent = 25,
    JobObjectInterferenceInformation = 26,
    JobObjectClearPeakJobMemoryUsed = 27,
    JobObjectMemoryUsageInformation = 28,
    JobObjectSharedCommit = 29,
    JobObjectContainerId = 30,
    JobObjectIoRateControlInformation = 31,
    JobObjectSiloRootDirectory = 37,
    JobObjectServerSiloBasicInformation = 38,
    JobObjectServerSiloUserSharedData = 39,
    JobObjectServerSiloInitialize = 40,
    JobObjectServerSiloRunningState = 41,
    JobObjectIoAttribution = 42,
    JobObjectMemoryPartitionInformation = 43,
    JobObjectContainerTelemetryId = 44,
    JobObjectSiloSystemRoot = 45,
    JobObjectEnergyTrackingState = 46,
    JobObjectThreadImpersonationInformation = 47,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass = 48
};

typedef enum _KINTERRUPT_MODE {
    LevelSensitive = 0,
    Latched = 1
};

typedef enum _KINTERRUPT_POLARITY {
    InterruptPolarityUnknown = 0,
    InterruptActiveHigh = 1,
    InterruptRisingEdge = 1,
    InterruptActiveLow = 2,
    InterruptFallingEdge = 2,
    InterruptActiveBoth = 3,
    InterruptActiveBothTriggerLow = 3,
    InterruptActiveBothTriggerHigh = 4
};

typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = 2,
    MmHardwareCoherentCached = 3,
    MmNonCachedUnordered = 4,
    MmUSWCCached = 5,
    MmMaximumCacheType = 6,
    MmNotMapped = -1
};

typedef enum _MEMORY_CACHING_TYPE_ORIG {
    MmFrameBufferCached = 2
};

typedef enum _MM_PAGE_PRIORITY {
    LowPagePriority = 0,
    NormalPagePriority = 16,
    HighPagePriority = 32
};

typedef enum _MODE {
    KernelMode = 0,
    UserMode = 1,
    MaximumMode = 2
};

typedef enum _NDIS_802_11_AUTHENTICATION_MODE {
    Ndis802_11AuthModeOpen = 0,
    Ndis802_11AuthModeShared = 1,
    Ndis802_11AuthModeAutoSwitch = 2,
    Ndis802_11AuthModeWPA = 3,
    Ndis802_11AuthModeWPAPSK = 4,
    Ndis802_11AuthModeWPANone = 5,
    Ndis802_11AuthModeWPA2 = 6,
    Ndis802_11AuthModeWPA2PSK = 7,
    Ndis802_11AuthModeMax = 8
};

typedef enum _NDIS_802_11_NETWORK_INFRASTRUCTURE {
    Ndis802_11IBSS = 0,
    Ndis802_11Infrastructure = 1,
    Ndis802_11AutoUnknown = 2,
    Ndis802_11InfrastructureMax = 3
};

typedef enum _NDIS_802_11_NETWORK_TYPE {
    Ndis802_11FH = 0,
    Ndis802_11DS = 1,
    Ndis802_11OFDM5 = 2,
    Ndis802_11OFDM24 = 3,
    Ndis802_11Automode = 4,
    Ndis802_11NetworkTypeMax = 5
};

typedef enum _NDIS_802_11_STATUS_TYPE {
    Ndis802_11StatusType_Authentication = 0,
    Ndis802_11StatusType_MediaStreamMode = 1,
    Ndis802_11StatusType_PMKID_CandidateList = 2,
    Ndis802_11StatusTypeMax = 3
};

typedef enum _NDIS_802_11_WEP_STATUS {
    Ndis802_11WEPEnabled = 0,
    Ndis802_11Encryption1Enabled = 0,
    Ndis802_11WEPDisabled = 1,
    Ndis802_11EncryptionDisabled = 1,
    Ndis802_11WEPKeyAbsent = 2,
    Ndis802_11Encryption1KeyAbsent = 2,
    Ndis802_11WEPNotSupported = 3,
    Ndis802_11EncryptionNotSupported = 3,
    Ndis802_11Encryption2Enabled = 4,
    Ndis802_11Encryption2KeyAbsent = 5,
    Ndis802_11Encryption3Enabled = 6,
    Ndis802_11Encryption3KeyAbsent = 7
};

typedef enum _NDIS_ARP_HEADER_FIELD {
    NdisARPHeaderFieldUndefined = 0,
    NdisARPHeaderFieldOperation = 1,
    NdisARPHeaderFieldSPA = 2,
    NdisARPHeaderFieldTPA = 3,
    NdisARPHeaderFieldMaximum = 4
};

typedef enum _NDIS_CLASS_ID {
    NdisClass802_3Priority = 0,
    NdisClassWirelessWanMbxMailbox = 1,
    NdisClassIrdaPacketInfo = 2,
    NdisClassAtmAALInfo = 3
};

typedef enum _NDIS_CS_TRAFFIC_STATS {
    NdisCSTrafficLatest = 0,
    NdisCSTrafficTotalD0 = 1,
    NdisCSTrafficTotalDX = 2,
    NdisCSTrafficMaximum = 3
};

typedef enum _NDIS_DATA_PATH_TYPE {
    NdisSendPath = 0,
    NdisSendCompletePath = 1,
    NdisReceivePath = 2,
    NdisReceiveCompletePath = 3,
    NdisDataPathCount = 4
};

typedef enum _NDIS_DEVICE_PNP_EVENT {
    NdisDevicePnPEventQueryRemoved = 0,
    NdisDevicePnPEventRemoved = 1,
    NdisDevicePnPEventSurpriseRemoved = 2,
    NdisDevicePnPEventQueryStopped = 3,
    NdisDevicePnPEventStopped = 4,
    NdisDevicePnPEventPowerProfileChanged = 5,
    NdisDevicePnPEventFilterListChanged = 6,
    NdisDevicePnPEventMaximum = 7
};

typedef enum _NDIS_DEVICE_POWER_STATE {
    NdisDeviceStateUnspecified = 0,
    NdisDeviceStateD0 = 1,
    NdisDeviceStateD1 = 2,
    NdisDeviceStateD2 = 3,
    NdisDeviceStateD3 = 4,
    NdisDeviceStateMaximum = 5
};

typedef enum _NDIS_ENCAPSULATION {
    UNSPECIFIED_Encapsulation = 0,
    NULL_Encapsulation = 1,
    IEEE_802_3_Encapsulation = 2,
    IEEE_802_5_Encapsulation = 3,
    LLC_SNAP_ROUTED_Encapsulation = 4,
    LLC_SNAP_BRIDGED_Encapsulation = 5
};

typedef enum _NDIS_ENVIRONMENT_TYPE {
    NdisEnvironmentWindows = 0,
    NdisEnvironmentWindowsNt = 1
};

typedef enum _NDIS_FILTER_STATE {
    NdisFilterDetached = 0,
    NdisFilterAttaching = 1,
    NdisFilterPaused = 2,
    NdisFilterRestarting = 3,
    NdisFilterRunning = 4,
    NdisFilterPausing = 5,
    NdisFilterDetaching = 6
};

typedef enum _NDIS_FPNP_REFTAG {
    FPNPREF_FCANCELOID = 0,
    FPNPREF_PCANCELOID = 1,
    FPNPREF_PCANCELDOID = 2,
    FPNPREF_FCANCELDOID = 3,
    FPNPREF_DOCANCELDOID = 4,
    FPNPREF_DPNPNOTIFYF = 5,
    FPNPREF_DPNPNOTIFYM = 6,
    FPNPREF_DPNPNOTIFYT = 7,
    FPNPREF_FSTATUS = 8,
    FPNPREF_MSTATS = 9,
    FPNPREF_NPNPEVENT = 10,
    FPNPREF_IFTOP = 11,
    FPNPREF_OIDQUEUED = 12,
    FPNPREF_FSYNCOID = 13,
    FPNPREF_PSYNCOID = 14,
    FPNPREF_OIDPENDING = 15,
    FPNPREF_DOIDPENDING = 16,
    FPNPREF_OIDSEARCH = 17,
    FPNPREF_DOIDSEARCH = 18,
    FPNPREF_COMPLETEOID = 19,
    FPNPREF_DOIDCOMPLETE = 20,
    FPNPREF_PREDETACH = 21,
    FPNPREF_APIRESTART = 22,
    FPNPREF_SYNCHRONOUSOID = 23,
    FPNPREF_PKTMON = 24,
    FPNPREF_NUMBER_OF_TAGS = 25
};

typedef enum _NDIS_FRAME_HEADER {
    NdisFrameHeaderUndefined = 0,
    NdisFrameHeaderMac = 1,
    NdisFrameHeaderArp = 2,
    NdisFrameHeaderIPv4 = 3,
    NdisFrameHeaderIPv6 = 4,
    NdisFrameHeaderUdp = 5,
    NdisFrameHeaderMaximum = 6
};

typedef enum _NDIS_GFP_TABLE_TYPE {
    NdisGfpTableTypeUndefined = 0,
    NdisGfpTableTypeWildcardIngress = 1,
    NdisGfpTableTypeWildcardEgress = 2,
    NdisGfpTableTypeExactMatchIngress = 3,
    NdisGfpTableTypeExactMatchEgress = 4,
    NdisGfpTableTypePacketDirect = 5,
    NdisGfpTableTypeMax = 6
};

typedef enum _NDIS_GFP_WILDCARD_MATCH_TYPE {
    NdisGfpWildcardMatchTypeUndefined = 0,
    NdisGfpWildcardMatchTypeEqual = 1,
    NdisGfpWildcardMatchTypeMaskEqual = 2,
    NdisGfpWildcardMatchTypeInRange = 3,
    NdisGfpWildcardMatchTypeMax = 4
};

typedef enum _NDIS_GFT_COUNTER_TYPE {
    NdisGftCounterTypeUndefined = 0,
    NdisGftCounterTypePacketCounter = 1,
    NdisGftCounterTypeByteCounter = 2,
    NdisGftCounterTypePacketAndByteCounter = 3,
    NdisGftCounterTypeMax = 4
};

typedef enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY {
    NdisGftCounterUpdateFrequencyUndefined = 0,
    NdisGftCounterUpdateFrequencyOnQuery = 1,
    NdisGftCounterUpdateFrequencyPerUpdatePeriod = 2,
    NdisGftCounterUpdateFrequencyPerPacket = 3,
    NdisGftCounterUpdateFrequencyMax = 4
};

typedef enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT {
    NdisGftFlowEntryCacheHintUndefined = 0,
    NdisGftFlowEntryCacheHintLowFrequency = 100,
    NdisGftFlowEntryCacheHintMediumFrequency = 200,
    NdisGftFlowEntryCacheHintHighFrequency = 300,
    NdisGftFlowEntryCacheHintMax = 1000
};

typedef enum _NDIS_GFT_FLOW_ENTRY_STATE {
    NdisGftFlowEntryStateUndefined = 0,
    NdisGftFlowEntryStateDeactivated = 1,
    NdisGftFlowEntryStateActivated = 2,
    NdisGftFlowEntryStateMax = 3
};

typedef enum _NDIS_GFT_FLOW_ENTRY_TYPE {
    NdisGftFlowEntryTypeUndefined = 0,
    NdisGftFlowEntryTypeExactMatch = 1,
    NdisGftFlowEntryTypeWildcard = 2,
    NdisGftFlowEntryTypeMax = 3
};

typedef enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION {
    NdisGftHeaderGroupTranspositionActionUndefined = 0,
    NdisGftHeaderGroupTranspositionActionModify = 1,
    NdisGftHeaderGroupTranspositionActionIgnore = 2,
    NdisGftHeaderGroupTranspositionActionPush = 3,
    NdisGftHeaderGroupTranspositionActionPop = 4,
    NdisGftHeaderGroupTranspositionActionMax = 5
};

typedef enum _NDIS_GFT_PROFILE_TYPE {
    NdisGftProfileTypeUndefined = 0,
    NdisGftProfileTypeExactMatch = 1,
    NdisGftProfileTypeHeaderTransposition = 2,
    NdisGftProfileTypeWildcardMatch = 3,
    NdisGftProfileTypeMax = 4
};

typedef enum _NDIS_GFT_WILDCARD_ACTION {
    NdisGftWildcardActionUndefined = 0,
    NdisGftWildcardActionAllow = 1,
    NdisGftWildcardActionDrop = 2,
    NdisGftWildcardActionMax = 3
};

typedef enum _NDIS_HALT_ACTION {
    NdisHaltDeviceDisabled = 0,
    NdisHaltDeviceInstanceDeInitialized = 1,
    NdisHaltDevicePoweredDown = 2,
    NdisHaltDeviceSurpriseRemoved = 3,
    NdisHaltDeviceFailed = 4,
    NdisHaltDeviceInitializationFailed = 5,
    NdisHaltDeviceStopped = 6
};

typedef enum _NDIS_IF_REFTAG {
    IFREF_REGISTER = 0,
    IFREF_GETII = 1,
    IFREF_TOPGETII = 2,
    IFREF_GETALL = 3,
    IFREF_TOPGETALL = 4,
    IFREF_SET = 5,
    IFREF_ENUMALL = 6,
    IFREF_TOPENUMALL = 7,
    IFREF_GETRCVADDR = 8,
    IFREF_GETALLRCVADDR = 9,
    IFREF_ASYNCCHANGE = 10,
    IFREF_CHALIAS = 11,
    IFREF_MINIPORT = 12,
    IFREF_SETDESCR = 13,
    IFREF_UPDATECHARS = 14,
    IFREF_UPDATE = 15,
    IFREF_NUMBER_OF_TAGS = 16
};

typedef enum _NDIS_INTERFACE_TYPE {
    NdisInterfaceInternal = 0,
    NdisInterfaceIsa = 1,
    NdisInterfaceEisa = 2,
    NdisInterfaceMca = 3,
    NdisInterfaceTurboChannel = 4,
    NdisInterfacePci = 5,
    NdisInterfacePcMcia = 8,
    NdisInterfaceCBus = 9,
    NdisInterfaceMPIBus = 10,
    NdisInterfaceMPSABus = 11,
    NdisInterfaceProcessorInternal = 12,
    NdisInterfaceInternalPowerBus = 13,
    NdisInterfacePNPISABus = 14,
    NdisInterfacePNPBus = 15,
    NdisInterfaceUSB = 16,
    NdisInterfaceIrda = 17,
    NdisInterface1394 = 18,
    NdisMaximumInterfaceType = 19
};

typedef enum _NDIS_INTERRUPT_MODERATION {
    NdisInterruptModerationUnknown = 0,
    NdisInterruptModerationNotSupported = 1,
    NdisInterruptModerationEnabled = 2,
    NdisInterruptModerationDisabled = 3
};

typedef enum _NDIS_INTERRUPT_TYPE {
    NDIS_CONNECT_LINE_BASED = 1,
    NDIS_CONNECT_MESSAGE_BASED = 2
};

typedef enum _NDIS_IPV4_HEADER_FIELD {
    NdisIPv4HeaderFieldUndefined = 0,
    NdisIPv4HeaderFieldProtocol = 1,
    NdisIPv4HeaderFieldMaximum = 2
};

typedef enum _NDIS_IPV6_HEADER_FIELD {
    NdisIPv6HeaderFieldUndefined = 0,
    NdisIPv6HeaderFieldProtocol = 1,
    NdisIPv6HeaderFieldMaximum = 2
};

typedef enum _NDIS_LWFDRV_REFTAG {
    LWFDRV_ATTACHING = 0,
    LWFDRV_IOWORKITEM = 1,
    LWFDRV_IOWORKITEMC = 2,
    LWFDRV_FILTERMODULE = 3,
    LWFDRV_PD_CLIENT = 4,
    LWFDRV_NUMBER_OF_TAGS = 5
};

typedef enum _NDIS_LWF_REFTAG {
    LWFREF_DETACHING = 0,
    LWFREF_WORKITEM = 1,
    LWFREF_PKTMON = 2,
    LWFREF_NUMBER_OF_TAGS = 3
};

typedef enum _NDIS_MAC_HEADER_FIELD {
    NdisMacHeaderFieldUndefined = 0,
    NdisMacHeaderFieldDestinationAddress = 1,
    NdisMacHeaderFieldSourceAddress = 2,
    NdisMacHeaderFieldProtocol = 3,
    NdisMacHeaderFieldVlanId = 4,
    NdisMacHeaderFieldPriority = 5,
    NdisMacHeaderFieldPacketType = 6,
    NdisMacHeaderFieldMaximum = 7
};

typedef enum _NDIS_MDRV_REFTAG {
    MDRVREF_IMDEINIT = 0,
    MDRVREF_REMOVINGMP = 1,
    MDRVREF_MINIPORT = 2,
    MDRVREF_IOWORKITEM = 3,
    MDRVREF_IOWORKITEMC = 4,
    MDRVREF_NOTIFYMINI = 5,
    MDRVREF_MPREFH = 6,
    MDRVREF_MPREFN = 7,
    MDRVREF_MPREFT = 8,
    MDRVREF_CHECKPT = 9,
    MDRVREF_TIMEROBJDPC = 10,
    MDRVREF_TIMERDPCX = 11,
    MDRVREF_NUMBER_OF_TAGS = 12
};

typedef enum _NDIS_MEDIUM {
    NdisMedium802_3 = 0,
    NdisMedium802_5 = 1,
    NdisMediumFddi = 2,
    NdisMediumWan = 3,
    NdisMediumLocalTalk = 4,
    NdisMediumDix = 5,
    NdisMediumArcnetRaw = 6,
    NdisMediumArcnet878_2 = 7,
    NdisMediumAtm = 8,
    NdisMediumWirelessWan = 9,
    NdisMediumIrda = 10,
    NdisMediumBpc = 11,
    NdisMediumCoWan = 12,
    NdisMedium1394 = 13,
    NdisMediumInfiniBand = 14,
    NdisMediumTunnel = 15,
    NdisMediumNative802_11 = 16,
    NdisMediumLoopback = 17,
    NdisMediumWiMAX = 18,
    NdisMediumIP = 19,
    NdisMediumMax = 20
};

typedef enum _NDIS_MINIPORT_EVENT {
    NdisMEvent_Unknown = 0,
    NdisMEventDx_SystemSleep = 1,
    NdisMEventDx_NicQuiet = 2,
    NdisMEventDx_SSIdle = 3,
    NdisMEventDx_D3DTimeout = 4,
    NdisMEventD0_SystemResume = 5,
    NdisMEventD0_NicActive = 6,
    NdisMEventD0_AoAcWake = 7,
    NdisMEventD0_SSResume = 8,
    NdisMEventD0_D3DCancel = 9,
    NdisMEventD0_D3DWake = 10,
    NdisMEventD0_D3DResume = 11,
    NdisMEventD0_Complete = 12,
    NdisMEventD0_SSComplete = 13,
    NdisMEventDx_Complete = 14,
    NdisMEventDx_SSComplete = 15,
    NdisMEvent_SSCancelIdle = 16,
    NdisMEvent_SSIdleComplete = 17,
    NdisMEvent_SSIdleReq = 18,
    NdisMEvent_SSIdleConfirm = 19,
    NdisMEventD0_AoAcSurpriseWake = 20,
    NdisMEvent_DeviceAdded = 31,
    NdisMEvent_DeviceStart = 32,
    NdisMEvent_DeviceQueryRemove = 33,
    NdisMEvent_DeviceCancelRemove = 34,
    NdisMEvent_DeviceRemove = 35,
    NdisMEvent_DeviceSurpriseRemoval = 36,
    NdisMEvent_DeviceQueryStop = 37,
    NdisMEvent_DeviceCancelStop = 38,
    NdisMEvent_DeviceStop = 39,
    NdisMEvent_MiniportInitialized = 51,
    NdisMEvent_MiniportHalted = 52,
    NdisMEvent_MiniportPaused = 53,
    NdisMEvent_MiniportRestarted = 54,
    NdisMEvent_MiniportPmInitialized = 55,
    NdisMEventErr_Min = 70,
    NdisMEventErr_UserRequested = 70,
    NdisMEventErr_MiniportRequested = 71,
    NdisMEventErr_FailedIMInitDevice = 72,
    NdisMEventErr_FailedRestart = 73,
    NdisMEventErr_FailedPowerD0 = 74,
    NdisMEventErr_FailedPowerDx = 75,
    NdisMEventErr_UninstalledByUsermode = 76,
    NdisMEventErr_Max = 76
};

typedef enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE {
    NdisMiniportHookDriverTypeNone = 0,
    NdisMiniportHookDriverTypeWdi = 1,
    NdisMiniportHookDriverType_Maximum = 2
};

typedef enum _NDIS_MINIPORT_STATE {
    NdisMiniportUndefinedState = 0,
    NdisMiniportHalted = 1,
    NdisMiniportInitializing = 2,
    NdisMiniportRestarting = 3,
    NdisMiniportRunning = 4,
    NdisMiniportPausing = 5,
    NdisMiniportPaused = 6
};

typedef enum _NDIS_MPIF_REFTAG {
    MPIFREF_IMDEINIT = 0,
    MPIFREF_AOAC = 1,
    MPIFREF_QUERYOBJ = 2,
    MPIFREF_GETTOP = 3,
    MPIFREF_GETRCVADDR = 4,
    MPIFREF_GETALLRCVADDR = 5,
    MPIFREF_CHIIB = 6,
    MPIFREF_CHIIUF = 7,
    MPIFREF_CHIIC = 8,
    MPIFREF_ENUMRCVADDR = 9,
    MPIFREF_SETISTATE = 10,
    MPIFREF_PMINIT = 11,
    MPIFREF_DEVPOWERUPFAIL = 12,
    MPIFREF_DEVPOWERUP = 13,
    MPIFREF_POWERDOWN = 14,
    MPIFREF_POWERDOWNFAIL = 15,
    MPIFREF_WMI = 16,
    MPIFREF_INITIALSTATE = 17,
    MPIFREF_REFMPGUID = 18,
    MPIFREF_FATAL_ERROR = 19,
    MPIFREF_DELIFBLOCK = 20,
    MPIFREF_UPDATECHARS = 21,
    MPIFREF_CREATE = 22,
    MPIFREF_SET_ATTRIBUTES = 23,
    MPIFREF_GET_MTYPE = 24,
    MPIFREF_DEVICE_RESET = 25,
    MPIFREF_TIMESTAMPING = 26,
    MPIFREF_PKTMON = 27,
    MPIFREF_NUMBER_OF_TAGS = 28
};

typedef enum _NDIS_MP_REFTAG {
    MPREF_AOAC_NA_ACQUIRE = 0,
    MPREF_AOAC_NA_RELEASE = 1,
    MPREF_AOAC_REFTIMER = 2,
    MPREF_AOAC_CLEANUP = 3,
    MPREF_AOAC_REFWAKE = 4,
    MPREF_AOAC_WAKE_ENABLE = 5,
    MPREF_AOAC_WAKE_DISABLE = 6,
    MPREF_CS_WNF_CALLBACK = 7,
    MPREF_API_RESET = 8,
    MPREF_API_REENUMERATE = 9,
    MPREF_PM_WAITWAKE = 10,
    MPREF_PM_D3D = 11,
    MPREF_PM_DEVPOWERUP = 12,
    MPREF_PM_POWERIRP = 13,
    MPREF_PM_OID = 14,
    MPREF_PM_REJECT = 15,
    MPREF_PM_UPDATECAPS = 16,
    MPREF_PM_D0COMPLETE = 17,
    MPREF_PM_PDCTASKCLIENT = 18,
    MPREF_PM_PDCTASKCLIENTDISABLE = 19,
    MPREF_SS_IDLETIMER = 20,
    MPREF_SS_IDLEREQ = 21,
    MPREF_PNP_IMDEINIT = 22,
    MPREF_PNP_INITMODE = 23,
    MPREF_PNP_INITIALIZED = 24,
    MPREF_PNP_CHECKBIND = 25,
    MPREF_PNP_PAUSING = 26,
    MPREF_PNP_RESTARTING = 27,
    MPREF_PNP_STOPPING = 28,
    MPREF_PNP_SURPRISE_REMOVAL = 29,
    MPREF_PNP_REMOVING = 30,
    MPREF_PNP_BASEINIT = 31,
    MPREF_PNP_BINDENUM = 32,
    MPREF_PNP_PROMOTE = 33,
    MPREF_PNP_REFRESH = 34,
    MPREF_LWF_RESTART = 35,
    MPREF_LWF_CHECKBIND = 36,
    MPREF_LWF_ENUMAPI = 37,
    MPREF_LWF_PNPNOTIFY = 38,
    MPREF_LWF_ATTACHING = 39,
    MPREF_LWF_ATTACHED = 40,
    MPREF_LWF_DETACHING = 41,
    MPREF_LWF_DETACHMON = 42,
    MPREF_LWF_ASYNCBIND = 43,
    MPREF_PT_OPENING = 44,
    MPREF_PT_OPENINGX = 45,
    MPREF_PT_OPENED = 46,
    MPREF_PT_BINDNOTIFY = 47,
    MPREF_PT_UNBINDNOTIFY = 48,
    MPREF_PT_UNBINDAPI = 49,
    MPREF_PT_FINISHCLOSE = 50,
    MPREF_PT_ASYNCCLOSE = 51,
    MPREF_PT_RECONFIG = 52,
    MPREF_PT_CHECKMDRV = 53,
    MPREF_PT_LEGACYREBIND = 54,
    MPREF_PT_NDPROXY_RULE = 55,
    MPREF_SI_BASE = 56,
    MPREF_SI_NSI = 57,
    MPREF_SI_CHANGEMACMTU = 58,
    MPREF_IF_STATS = 59,
    MPREF_IF_FINDTOP = 60,
    MPREF_IF_OID = 61,
    MPREF_IF_BASE = 62,
    MPREF_IF_STACKENTRY = 63,
    MPREF_IF_DELSTACK = 64,
    MPREF_RES_ASYNCSHM = 65,
    MPREF_RES_FREESHM = 66,
    MPREF_RES_ADDCPU = 67,
    MPREF_RES_IOV = 68,
    MPREF_RES_QUEUE = 69,
    MPREF_RES_RCVFILTER = 70,
    MPREF_OID_QUEUED = 71,
    MPREF_OID_QUEUEING = 72,
    MPREF_OID_QUEUEINGD = 73,
    MPREF_OID_TOPQUEUE = 74,
    MPREF_OID_COMPLETING = 75,
    MPREF_IO_PERIODICRCV = 76,
    MPREF_IO_QUEUEDDPC = 77,
    MPREF_IO_LEGACYDPC = 78,
    MPREF_CO_REGAF = 79,
    MPREF_CO_REGAFX = 80,
    MPREF_CO_OPENAF = 81,
    MPREF_MISC_PROCESS = 82,
    MPREF_MISC_CFH = 83,
    MPREF_MISC_WPPRUNDOWN = 84,
    MPREF_MISC_PKTMON = 85,
    MPREF_UM_HANDLE = 86,
    MPREF_UM_IOCTL = 87,
    MPREF_PCW_ENUM = 88,
    MPREF_PCW_COLLECT = 89,
    MPREF_PCW_REF = 90,
    MPREF_PCW_ENUMNDK = 91,
    MPREF_PCW_ADDING = 92,
    MPREF_PCW_ADDED = 93,
    MPREF_PCW_PCFOID = 94,
    MPREF_WMI_CHANGE = 95,
    MPREF_WMI_QUERYALL = 96,
    MPREF_WMI_QUERYONE = 97,
    MPREF_WMI_EXEC = 98,
    MPREF_API_IOWORKITEM = 99,
    MPREF_API_PORT = 100,
    MPREF_PD_PROVIDER = 101,
    MPREF_PD_MEM = 102,
    MPREF_CS_RESILIENCY_CALLBACK = 103,
    MPREF_NBL_TRACK_WATCHDOG = 104,
    MPREF_LWM_START = 105,
    MPREF_LWM_UNINITIALIZE = 106,
    MPREF_DEVICE_RESET = 107,
    MPREF_QUERY_DEVICE_RESET = 108,
    MPREF_NUMBER_OF_TAGS = 109
};

typedef enum _NDIS_MSIX_TABLE_CONFIG {
    NdisMSIXTableConfigSetTableEntry = 0,
    NdisMSIXTableConfigMaskTableEntry = 1,
    NdisMSIXTableConfigUnmaskTableEntry = 2,
    NdisMSIXTableConfigMax = 3
};

typedef enum _NDIS_M_PERIODIC_RECEIVE_STATE {
    PeriodicReceivesOff = 0,
    PeriodicReceivesOn = 1,
    PeriodicReceivesBlocked = 2
};

typedef enum _NDIS_NBL_TRACKER_LIFETIME_EVENT {
    NdisNblTrackerEvent_QueuedByNdis = 1,
    NdisNblTrackerEvent_NblAllocated = 2,
    NdisNblTrackerEvent_NblAllocatedWithNb = 3,
    NdisNblTrackerEvent_NblFreed = 4,
    NdisNblTrackerEvent_NblAllocatedClone = 5,
    NdisNblTrackerEvent_NblFreedClone = 6,
    NdisNblTrackerEvent_NblAllocatedFragment = 7,
    NdisNblTrackerEvent_NblFreedFragment = 8,
    NdisNblTrackerEvent_NblAllocatedReassembled = 9,
    NdisNblTrackerEvent_NetioAllocatedClone = 10,
    NdisNblTrackerEvent_NetioFreedClone = 11,
    NdisNblTrackerEvent_CustomAllocatedChild = 12,
    NdisNblTrackerEvent_CustomFreedChild = 13,
    NdisNblTrackerEvent_CustomAllocatedNbl = 14,
    NdisNblTrackerEvent_CustomFreedNbl = 15,
    NdisNblTrackerEvent_OtherNotDatapath = 16,
    NdisNblTrackerEvent_PacketTranslationCached = 17,
    NdisNblTrackerEvent_PacketTranslationReused = 18,
    NdisNblTrackerEvent_Translate6To5TxOut = 19,
    NdisNblTrackerEvent_Translate6To5TxReturn = 20,
    NdisNblTrackerEvent_Translate5To6TxOut = 21,
    NdisNblTrackerEvent_Translate5To6TxReturn = 22,
    NdisNblTrackerEvent_Translate5To5TxOut = 23,
    NdisNblTrackerEvent_Translate5To5TxReturn = 24,
    NdisNblTrackerEvent_Translate6To5RxOut = 25,
    NdisNblTrackerEvent_Translate6To5RxReturn = 26,
    NdisNblTrackerEvent_Translate5To6RxOut = 27,
    NdisNblTrackerEvent_Translate5To6RxReturn = 28,
    NdisNblTrackerEvent_Translate5To5RxOut = 29,
    NdisNblTrackerEvent_Translate5To5RxReturn = 30,
    NdisNblTrackerEvent_LifetimeMax = 31
};

typedef enum _NDIS_NBL_TRACKER_MODE {
    NdisTrackNblDisabled = 0,
    NdisTrackNblLogOnly = 1,
    NdisTrackNblRuntimeCheck = 2,
    NdisTrackNblFullLogNoStack = 3,
    NdisTrackNblFullLogWithStack = 4
};

typedef enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT {
    NdisNblTrackerEvent_MiniportIndicated = 128,
    NdisNblTrackerEvent_MiniportIndicatedResources = 129,
    NdisNblTrackerEvent_FilterIndicated = 130,
    NdisNblTrackerEvent_FilterIndicatedResources = 131,
    NdisNblTrackerEvent_IndicatedToProtocol = 132,
    NdisNblTrackerEvent_IndicatedToProtocolResources = 133,
    NdisNblTrackerEvent_IndicatedToProtocolPacket = 134,
    NdisNblTrackerEvent_ProtocolReturned = 135,
    NdisNblTrackerEvent_ProtocolReturnedResources = 136,
    NdisNblTrackerEvent_ProtocolReturnedPacket = 137,
    NdisNblTrackerEvent_FilterReturned = 138,
    NdisNblTrackerEvent_ReturnedToFilter = 139,
    NdisNblTrackerEvent_ReturnedToFilterResources = 140,
    NdisNblTrackerEvent_ReturnedToMiniport = 141,
    NdisNblTrackerEvent_ReturnedToMiniportResources = 142,
    NdisNblTrackerEvent_ProtocolSent = 143,
    NdisNblTrackerEvent_FilterSent = 144,
    NdisNblTrackerEvent_SentToFilter = 145,
    NdisNblTrackerEvent_SentToMiniport = 146,
    NdisNblTrackerEvent_MiniportSendCompleted = 147,
    NdisNblTrackerEvent_FilterSendCompleted = 148,
    NdisNblTrackerEvent_SendCompletedToOpen = 149,
    NdisNblTrackerEvent_CustomReceived = 150,
    NdisNblTrackerEvent_CustomReturned = 151,
    NdisNblTrackerEvent_CustomSent = 152,
    NdisNblTrackerEvent_CustomSendCompleted = 153,
    NdisNblTrackerEvent_OtherDatapath = 154,
    NdisNblTrackerEvent_LoopbackIndicated = 155,
    NdisNblTrackerEvent_LoopbackReturned = 156,
    NdisNblTrackerEvent_OwnershipMax = 157
};

typedef enum _NDIS_NBL_TRACKER_SOURCE {
    NdisNblTrackerMiniport = 0,
    NdisNblTrackerFilter = 1,
    NdisNblTrackerProtocol = 2,
    NdisNblTrackerNdisNPOSRReturn = 3,
    NdisNblTrackerNdisSSSend = 4,
    NdisNblTrackerNdisSSRReturn = 5,
    NdisNblTrackerFirstCustomContext = 256
};

typedef enum _NDIS_NDIS5_DRIVER_STATE {
    Ndis5StateUnused = 0,
    Ndis5StatePaused = 1,
    Ndis5StateRunning = 2
};

typedef enum _NDIS_NET_BUFFER_LIST_INFO {
    TcpIpChecksumNetBufferListInfo = 0,
    TcpOffloadBytesTransferred = 0,
    IPsecOffloadV1NetBufferListInfo = 1,
    IPsecOffloadV2NetBufferListInfo = 1,
    TcpLargeSendNetBufferListInfo = 2,
    TcpReceiveNoPush = 2,
    ClassificationHandleNetBufferListInfo = 3,
    Ieee8021QNetBufferListInfo = 4,
    NetBufferListCancelId = 5,
    MediaSpecificInformation = 6,
    NetBufferListFrameType = 7,
    NetBufferListProtocolId = 7,
    NetBufferListHashValue = 8,
    NetBufferListHashInfo = 9,
    WfpNetBufferListInfo = 10,
    IPsecOffloadV2TunnelNetBufferListInfo = 11,
    IPsecOffloadV2HeaderNetBufferListInfo = 12,
    NetBufferListCorrelationId = 13,
    NetBufferListFilteringInfo = 14,
    MediaSpecificInformationEx = 15,
    NblOriginalInterfaceIfIndex = 16,
    NblReAuthWfpFlowContext = 16,
    TcpReceiveBytesTransferred = 17,
    NrtNameResolutionId = 17,
    SwitchForwardingReserved = 18,
    SwitchForwardingDetail = 19,
    VirtualSubnetInfo = 20,
    IMReserved = 21,
    TcpRecvSegCoalesceInfo = 22,
    RscTcpTimestampDelta = 23,
    TcpSendOffloadsSupplementalNetBufferListInfo = 23,
    GftOffloadInformation = 24,
    GftFlowEntryId = 25,
    NetBufferListInfoReserved3 = 26,
    NetBufferListInfoReserved1 = 27,
    NetBufferListInfoReserved2 = 28,
    MaxNetBufferListInfo = 29
};

typedef enum _NDIS_NIC_ACTIVE_STATE {
    NdisNicActive = 0,
    NdisNicSuspending = 1,
    NdisNicQuiet = 2,
    NdisNicResuming = 3,
    NdisNicError = 4
};

typedef enum _NDIS_NIC_SWITCH_TYPE {
    NdisNicSwitchTypeUnspecified = 0,
    NdisNicSwitchTypeExternal = 1,
    NdisNicSwitchTypeMax = 2
};

typedef enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION {
    NdisNicSwitchVPortInterruptModerationUndefined = 0,
    NdisNicSwitchVPortInterruptModerationAdaptive = 1,
    NdisNicSwitchVPortInterruptModerationOff = 2,
    NdisNicSwitchVPortInterruptModerationLow = 100,
    NdisNicSwitchVPortInterruptModerationMedium = 200,
    NdisNicSwitchVPortInterruptModerationHigh = 300
};

typedef enum _NDIS_NIC_SWITCH_VPORT_STATE {
    NdisNicSwitchVPortStateUndefined = 0,
    NdisNicSwitchVPortStateActivated = 1,
    NdisNicSwitchVPortStateDeactivated = 2,
    NdisNicSwitchVPortStateMaximum = 3
};

typedef enum _NDIS_NSI_COMPARTMENT_TYPE {
    NDIS_NSI_COMPARTMENT_TYPE_UNSPECIFIED = 0,
    NDIS_NSI_COMPARTMENT_TYPE_NATIVE = 1,
    NDIS_NSI_COMPARTMENT_TYPE_ROUTING_DOMAIN = 2,
    NDIS_NSI_COMPARTMENT_TYPE_CONTAINER = 3
};

typedef enum _NDIS_NSI_REFTAG {
    NSIREF_IOCTL = 0,
    NSIREF_STATUS = 1,
    NSIREF_IFTOP = 2,
    NSIREF_IFSTATS = 3,
    NSIREF_IFOID = 4,
    NSIREF_NUMBER_OF_TAGS = 5
};

typedef enum _NDIS_PARAMETER_TYPE {
    NdisParameterInteger = 0,
    NdisParameterHexInteger = 1,
    NdisParameterString = 2,
    NdisParameterMultiString = 3,
    NdisParameterBinary = 4
};

typedef enum _NDIS_PER_PACKET_INFO {
    TcpIpChecksumPacketInfo = 0,
    IpSecPacketInfo = 1,
    TcpLargeSendPacketInfo = 2,
    ClassificationHandlePacketInfo = 3,
    NdisReserved = 4,
    ScatterGatherListPacketInfo = 5,
    Ieee8021QInfo = 6,
    OriginalPacketInfo = 7,
    PacketCancelId = 8,
    OriginalNetBufferList = 9,
    CachedNetBufferList = 10,
    ShortPacketPaddingInfo = 11,
    MaxPerPacketInfo = 12
};

typedef enum _NDIS_PHYSICAL_MEDIUM {
    NdisPhysicalMediumUnspecified = 0,
    NdisPhysicalMediumWirelessLan = 1,
    NdisPhysicalMediumCableModem = 2,
    NdisPhysicalMediumPhoneLine = 3,
    NdisPhysicalMediumPowerLine = 4,
    NdisPhysicalMediumDSL = 5,
    NdisPhysicalMediumFibreChannel = 6,
    NdisPhysicalMedium1394 = 7,
    NdisPhysicalMediumWirelessWan = 8,
    NdisPhysicalMediumNative802_11 = 9,
    NdisPhysicalMediumBluetooth = 10,
    NdisPhysicalMediumInfiniband = 11,
    NdisPhysicalMediumWiMax = 12,
    NdisPhysicalMediumUWB = 13,
    NdisPhysicalMedium802_3 = 14,
    NdisPhysicalMedium802_5 = 15,
    NdisPhysicalMediumIrda = 16,
    NdisPhysicalMediumWiredWAN = 17,
    NdisPhysicalMediumWiredCoWan = 18,
    NdisPhysicalMediumOther = 19,
    NdisPhysicalMediumNative802_15_4 = 20,
    NdisPhysicalMediumMax = 21
};

typedef enum _NDIS_PM_COMPONENT_ID {
    NdisPMComponentUnspecified = 0,
    NdisPMComponentTcpipRs = 1,
    NdisPMComponentDHCPv4 = 2,
    NdisPMComponentDHCPv6 = 3,
    NdisPMComponentWLAN = 4,
    NdisPMComponentWWAN = 5,
    NdisPMComponentWCM = 6,
    NdisPMComponentNCSI = 7,
    NdisPMComponentTest = 8,
    NdisPMComponentEapSim = 9,
    NdisPMComponentTcpipOid = 10,
    NdisPMComponentTcpipData = 11,
    NdisPMComponentTcpipDad = 12,
    NdisPMComponentGeolocation = 13,
    NdisPMComponentWLANNetMgr = 14,
    NdisPMComponentWCMNetActivation = 15,
    NdisPMComponentInternal = 16,
    NdisPMComponentMaximum = 17
};

typedef enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE {
    NdisPMProtocolOffloadIdUnspecified = 0,
    NdisPMProtocolOffloadIdIPv4ARP = 1,
    NdisPMProtocolOffloadIdIPv6NS = 2,
    NdisPMProtocolOffload80211RSNRekey = 3,
    NdisPMProtocolOffloadIdMaximum = 4
};

typedef enum _NDIS_PM_WAKE_REASON_TYPE {
    NdisWakeReasonUnspecified = 0,
    NdisWakeReasonPacket = 1,
    NdisWakeReasonMediaDisconnect = 2,
    NdisWakeReasonMediaConnect = 3,
    NdisWakeReasonWlanNLODiscovery = 4096,
    NdisWakeReasonWlanAPAssociationLost = 4097,
    NdisWakeReasonWlanGTKHandshakeError = 4098,
    NdisWakeReasonWlan4WayHandshakeRequest = 4099,
    NdisWakeReasonWwanRegisterState = 8192,
    NdisWakeReasonWwanSMSReceive = 8193,
    NdisWakeReasonWwanUSSDReceive = 8194
};

typedef enum _NDIS_PM_WOL_PACKET {
    NdisPMWoLPacketUnspecified = 0,
    NdisPMWoLPacketBitmapPattern = 1,
    NdisPMWoLPacketMagicPacket = 2,
    NdisPMWoLPacketIPv4TcpSyn = 3,
    NdisPMWoLPacketIPv6TcpSyn = 4,
    NdisPMWoLPacketEapolRequestIdMessage = 5,
    NdisPMWoLPacketMaximum = 6
};

typedef enum _NDIS_PNP_DEVICE_STATE {
    NdisPnPDeviceAdded = 0,
    NdisPnPDeviceStarted = 1,
    NdisPnPDeviceQueryStopped = 2,
    NdisPnPDeviceStopped = 3,
    NdisPnPDeviceQueryRemoved = 4,
    NdisPnPDeviceRemoved = 5,
    NdisPnPDeviceSurpriseRemoved = 6
};

typedef enum _NDIS_PORT_AUTHORIZATION_STATE {
    NdisPortAuthorizationUnknown = 0,
    NdisPortAuthorized = 1,
    NdisPortUnauthorized = 2,
    NdisPortReauthorizing = 3
};

typedef enum _NDIS_PORT_CONTROL_STATE {
    NdisPortControlStateUnknown = 0,
    NdisPortControlStateControlled = 1,
    NdisPortControlStateUncontrolled = 2
};

typedef enum _NDIS_PORT_PNP_STATE {
    NdisPortPnPStateAllocating = 1,
    NdisPortPnPStateAllocated = 2,
    NdisPortPnPStateActivating = 3,
    NdisPortPnPStateActivated = 4,
    NdisPortPnPStateDeactivating = 5,
    NdisPortPnPStateDeactivated = 6,
    NdisPortPnPStateDeallocating = 7,
    NdisPortPnPStateDeallocated = 8
};

typedef enum _NDIS_PORT_TYPE {
    NdisPortTypeUndefined = 0,
    NdisPortTypeBridge = 1,
    NdisPortTypeRasConnection = 2,
    NdisPortType8021xSupplicant = 3,
    NdisPortTypeNdisImPlatform = 4,
    NdisPortTypeMax = 5
};

typedef enum _NDIS_POWER_PROFILE {
    NdisPowerProfileBattery = 0,
    NdisPowerProfileAcOnLine = 1
};

typedef enum _NDIS_PROCESSOR_TYPE {
    NdisProcessorX86 = 0,
    NdisProcessorMips = 1,
    NdisProcessorAlpha = 2,
    NdisProcessorPpc = 3,
    NdisProcessorAmd64 = 4,
    NdisProcessorIA64 = 5,
    NdisProcessorArm = 6,
    NdisProcessorArm64 = 7
};

typedef enum _NDIS_PROCESSOR_VENDOR {
    NdisProcessorVendorUnknown = 0,
    NdisProcessorVendorGenuinIntel = 1,
    NdisProcessorVendorGenuineIntel = 1,
    NdisProcessorVendorAuthenticAMD = 2
};

typedef enum _NDIS_PT_REFTAG {
    PTREF_BIND_ITER = 0,
    PTREF_READREGISTRY = 1,
    PTREF_BINDNOTIFY = 2,
    PTREF_UNBINDNOTIFY = 3,
    PTREF_RECONFIG = 4,
    PTREF_UNLOADNOTIFY = 5,
    PTREF_UNBINDING = 6,
    PTREF_BINDING = 7,
    PTREF_BINDINGX = 8,
    PTREF_OPEN = 9,
    PTREF_REENUMERATE = 10,
    PTREF_QUNBIND = 11,
    PTREF_BINDCOMPLETE = 12,
    PTREF_BINDFAILNOTIFY = 13,
    PTREF_PD_CLIENT = 14,
    PTREF_NUMBER_OF_TAGS = 15
};

typedef enum _NDIS_QOS_SQ_TYPE {
    NdisQosSqTypeUndefined = 0,
    NdisQosSqTypeStandard = 1,
    NdisQosSqTypeGFT = 2,
    NdisQosSqTypeMax = 3
};

typedef enum _NDIS_RECEIVE_FILTER_TEST {
    NdisReceiveFilterTestUndefined = 0,
    NdisReceiveFilterTestEqual = 1,
    NdisReceiveFilterTestMaskEqual = 2,
    NdisReceiveFilterTestNotEqual = 3,
    NdisReceiveFilterTestMaximum = 4
};

typedef enum _NDIS_RECEIVE_FILTER_TYPE {
    NdisReceiveFilterTypeUndefined = 0,
    NdisReceiveFilterTypeVMQueue = 1,
    NdisReceiveFilterTypePacketCoalescing = 2,
    NdisReceiveFilterTypeMaximum = 3
};

typedef enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE {
    NdisReceiveQueueOperationalStateUndefined = 0,
    NdisReceiveQueueOperationalStateRunning = 1,
    NdisReceiveQueueOperationalStatePaused = 2,
    NdisReceiveQueueOperationalStateDmaStopped = 3,
    NdisReceiveQueueOperationalStateMaximum = 4
};

typedef enum _NDIS_RECEIVE_QUEUE_PNP_STATE {
    NdisReceiveQueuePnPStateUndefined = 0,
    NdisReceiveQueuePnPStateAddedToList = 1,
    NdisReceiveQueuePnPStateAllocated = 2,
    NdisReceiveQueuePnPStateEnabled = 3,
    NdisReceiveQueuePnPStateMaximum = 4
};

typedef enum _NDIS_RECEIVE_QUEUE_TYPE {
    NdisReceiveQueueTypeUnspecified = 0,
    NdisReceiveQueueTypeVMQueue = 1,
    NdisReceiveQueueTypeMaximum = 2
};

typedef enum _NDIS_REQUEST_TYPE {
    NdisRequestQueryInformation = 0,
    NdisRequestSetInformation = 1,
    NdisRequestQueryStatistics = 2,
    NdisRequestOpen = 3,
    NdisRequestClose = 4,
    NdisRequestSend = 5,
    NdisRequestTransferData = 6,
    NdisRequestReset = 7,
    NdisRequestGeneric1 = 8,
    NdisRequestGeneric2 = 9,
    NdisRequestGeneric3 = 10,
    NdisRequestGeneric4 = 11,
    NdisRequestMethod = 12
};

typedef enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS {
    NDIS_RFC6877_464XLAT_OFFLOAD_NOT_SUPPORTED = 0,
    NDIS_RFC6877_464XLAT_OFFLOAD_DISABLED = 1,
    NDIS_RFC6877_464XLAT_OFFLOAD_ENABLED = 2,
    NDIS_RFC6877_464XLAT_OFFLOAD_ON_DEMAND = 3
};

typedef enum _NDIS_RSS_PROFILE {
    NdisRssProfileClosest = 1,
    NdisRssProfileClosestStatic = 2,
    NdisRssProfileNuma = 3,
    NdisRssProfileNumaStatic = 4,
    NdisRssProfileConservative = 5,
    NdisRssProfileMaximum = 6
};

typedef enum _NDIS_SEND_PATH_TYPE {
    NdisFilterSendPath = 0,
    NdisNoFilterSendPath = 1,
    Ndis5NoFilterSendPath = 2,
    NdisFakeSendPath = 3
};

typedef enum _NDIS_SHARED_MEMORY_USAGE {
    NdisSharedMemoryUsageUndefined = 0,
    NdisSharedMemoryUsageXmit = 1,
    NdisSharedMemoryUsageXmitHeader = 2,
    NdisSharedMemoryUsageXmitData = 3,
    NdisSharedMemoryUsageReceive = 4,
    NdisSharedMemoryUsageReceiveLookahead = 5,
    NdisSharedMemoryUsageReceivePostLookahead = 6,
    NdisSharedMemoryUsageReceiveHeader = 7,
    NdisSharedMemoryUsageReceiveData = 8,
    NdisSharedMemoryUsageOther = 9,
    NdisSharedMemoryUsageMax = 10
};

typedef enum _NDIS_SHUTDOWN_ACTION {
    NdisShutdownPowerOff = 0,
    NdisShutdownBugCheck = 1
};

typedef enum _NDIS_SS_BUSY_REASON {
    NdisBusyOid = 33,
    NdisBusyPause = 34,
    NdisBusyRestart = 35,
    NdisBusyReset = 36,
    NdisBusyDevicePnPEvent = 37,
    NdisBusyCheckForHang = 49,
    NdisBusyDirectOid = 50,
    NdisBusyCancelDirectOid = 51,
    NdisBusySend = 52,
    NdisBusyCancelSend = 53,
    NdisBusyReceiveReturn = 54,
    NdisBusyWaitWake = 65
};

typedef enum _NDIS_SS_STOP_REASON {
    NdisSSReasonUnspecified = 0,
    NdisSSQueryRemove = 1,
    NdisSSDeviceRemove = 2,
    NdisSSDeviceSurpriseRemove = 3,
    NdisSSQueryStop = 4,
    NdisSSDeviceStop = 5,
    NdisSSSystemPower = 6,
    NdisSSNicQuiet = 7,
    NdisSSPnPOp = 8,
    NdisSSNotStarted = 9,
    NdisSSApplyInterfaceChange = 11,
    NdisSSMagicPacket = 12,
    NdisSSBindChanges = 13,
    NdisSSStopReasonMax = 15
};

typedef enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS {
    NdisPauseFunctionsUnsupported = 0,
    NdisPauseFunctionsSendOnly = 1,
    NdisPauseFunctionsReceiveOnly = 2,
    NdisPauseFunctionsSendAndReceive = 3,
    NdisPauseFunctionsUnknown = 4
};

typedef enum _NDIS_TASK {
    TcpIpChecksumNdisTask = 0,
    IpSecNdisTask = 1,
    TcpLargeSendNdisTask = 2,
    MaxNdisTask = 3
};

typedef enum _NDIS_TMP_REF_REASON {
    NdisAoAcTempRefNone = 0,
    NdisAoAcTempRefInit = 1,
    NdisAoAcTempRefPmInit = 2,
    NdisAoAcTempRefWake = 3,
    NdisAoAcTempRefLastDeref = 4,
    NdisAoAcTempRefClearStop = 5,
    NdisAoAcTempRefMagicPacket = 6,
    NdisAoAcTempRefInternal = 7
};

typedef enum _NDIS_UDP_HEADER_FIELD {
    NdisUdpHeaderFieldUndefined = 0,
    NdisUdpHeaderFieldDestinationPort = 1,
    NdisUdpHeaderFieldMaximum = 2
};

typedef enum _NDIS_WAN_QUALITY {
    NdisWanRaw = 0,
    NdisWanErrorControl = 1,
    NdisWanReliable = 2
};

typedef enum _NDIS_WDF_CX_DRIVER_STATE {
    NdisCxDriverStateInvalid = 0,
    NdisCxDriverStateRegistered = 1,
    NdisCxDriverStateDeregistered = 2
};

typedef enum _NDIS_WORK_ITEM_TYPE {
    NdisWorkItemRequest = 0,
    NdisWorkItemSend = 1,
    NdisWorkItemReturnPackets = 2,
    NdisWorkItemResetRequested = 3,
    NdisWorkItemResetInProgress = 4,
    NdisWorkItemReserved = 5,
    NdisWorkItemMiniportCallback = 6,
    NdisMaxWorkItems = 7
};

typedef enum _NDIS_XLATE_TYPE {
    XlateSend = 0,
    XlateSendComplete = 1,
    XlateReceive = 2,
    XlateReturn = 3
};

typedef enum _NDK_OBJECT_TYPE {
    NdkObjectTypeUndefined = 0,
    NdkObjectTypeAdapter = 1,
    NdkObjectTypeQp = 2,
    NdkObjectTypeCq = 3,
    NdkObjectTypeMr = 4,
    NdkObjectTypeMw = 5,
    NdkObjectTypePd = 6,
    NdkObjectTypeSharedEndpoint = 7,
    NdkObjectTypeConnector = 8,
    NdkObjectTypeListener = 9,
    NdkObjectTypeSrq = 10,
    NdkObjectTypeMax = 11
};

typedef enum _NDK_OPERATION_TYPE {
    NdkOperationTypeReceive = 1,
    NdkOperationTypeReceiveAndInvalidate = 0x8001,
    NdkOperationTypeSend = 2,
    NdkOperationTypeFastRegister = 4,
    NdkOperationTypeBind = 8,
    NdkOperationTypeInvalidate = 16,
    NdkOperationTypeRead = 32,
    NdkOperationTypeWrite = 64
};

typedef enum _NDK_RDMA_TECHNOLOGY {
    NdkUndefined = 0,
    NdkiWarp = 1,
    NdkInfiniBand = 2,
    NdkRoCE = 3,
    NdkRoCEv2 = 4,
    NdkMaxTechnology = 5
};

typedef enum _NET_DEVICE_POWER_STATE {
    NetDeviceStateUnspecified = 0,
    NetDeviceStateD0 = 1,
    NetDeviceStateD1 = 2,
    NetDeviceStateD2 = 3,
    NetDeviceStateD3 = 4,
    NetDeviceStateMaximum = 5
};

typedef enum _NET_DEVICE_RESET_TYPE {
    FunctionLevelReset = 0,
    PlatformLevelReset = 1
};

typedef enum _NET_IF_ACCESS_TYPE {
    NET_IF_ACCESS_LOOPBACK = 1,
    NET_IF_ACCESS_BROADCAST = 2,
    NET_IF_ACCESS_POINT_TO_POINT = 3,
    NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
    NET_IF_ACCESS_MAXIMUM = 5
};

typedef enum _NET_IF_ADMIN_STATUS {
    NET_IF_ADMIN_STATUS_UP = 1,
    NET_IF_ADMIN_STATUS_DOWN = 2,
    NET_IF_ADMIN_STATUS_TESTING = 3
};

typedef enum _NET_IF_CONNECTION_TYPE {
    NET_IF_CONNECTION_DEDICATED = 1,
    NET_IF_CONNECTION_PASSIVE = 2,
    NET_IF_CONNECTION_DEMAND = 3,
    NET_IF_CONNECTION_MAXIMUM = 4
};

typedef enum _NET_IF_DIRECTION_TYPE {
    NET_IF_DIRECTION_SENDRECEIVE = 0,
    NET_IF_DIRECTION_SENDONLY = 1,
    NET_IF_DIRECTION_RECEIVEONLY = 2,
    NET_IF_DIRECTION_MAXIMUM = 3
};

typedef enum _NET_IF_MEDIA_CONNECT_STATE {
    MediaConnectStateUnknown = 0,
    MediaConnectStateConnected = 1,
    MediaConnectStateDisconnected = 2
};

typedef enum _NET_IF_MEDIA_DUPLEX_STATE {
    MediaDuplexStateUnknown = 0,
    MediaDuplexStateHalf = 1,
    MediaDuplexStateFull = 2
};

typedef enum _NET_IF_OPER_STATUS {
    NET_IF_OPER_STATUS_UP = 1,
    NET_IF_OPER_STATUS_DOWN = 2,
    NET_IF_OPER_STATUS_TESTING = 3,
    NET_IF_OPER_STATUS_UNKNOWN = 4,
    NET_IF_OPER_STATUS_DORMANT = 5,
    NET_IF_OPER_STATUS_NOT_PRESENT = 6,
    NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7
};

typedef enum _NET_IF_RCV_ADDRESS_TYPE {
    NET_IF_RCV_ADDRESS_TYPE_OTHER = 1,
    NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2,
    NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3
};

typedef enum _NET_PNP_EVENT_CODE {
    NetEventSetPower = 0,
    NetEventQueryPower = 1,
    NetEventQueryRemoveDevice = 2,
    NetEventCancelRemoveDevice = 3,
    NetEventReconfigure = 4,
    NetEventBindList = 5,
    NetEventBindsComplete = 6,
    NetEventPnPCapabilities = 7,
    NetEventPause = 8,
    NetEventRestart = 9,
    NetEventPortActivation = 10,
    NetEventPortDeactivation = 11,
    NetEventIMReEnableDevice = 12,
    NetEventNDKEnable = 13,
    NetEventNDKDisable = 14,
    NetEventFilterPreDetach = 15,
    NetEventBindFailed = 16,
    NetEventSwitchActivate = 17,
    NetEventAllowBindsAbove = 18,
    NetEventInhibitBindsAbove = 19,
    NetEventAllowStart = 20,
    NetEventRequirePause = 21,
    NetEventUploadGftFlowEntries = 22,
    NetEventMaximum = 23
};

typedef enum _NL_ECN_CODEPOINT {
    NlEcnCodepointNotEct = 0,
    NlEcnCodepointEct1 = 1,
    NlEcnCodepointEct0 = 2,
    NlEcnCodepointCe = 3
};

typedef enum _NPI_MODULEID_TYPE {
    MIT_GUID = 1,
    MIT_IF_LUID = 2
};

typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3
};

typedef enum _OB_OPEN_REASON {
    ObCreateHandle = 0,
    ObOpenHandle = 1,
    ObDuplicateHandle = 2,
    ObInheritHandle = 3,
    ObMaxOpenReason = 4
};

typedef enum _PCW_CALLBACK_TYPE {
    PcwCallbackAddCounter = 0,
    PcwCallbackRemoveCounter = 1,
    PcwCallbackEnumerateInstances = 2,
    PcwCallbackCollectData = 3
};

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE {
    PerfInfoMemUsagePfnMetadata = 0,
    PerfInfoMemUsageMax = 1
};

typedef enum _PERFINFO_MM_STAT {
    PerfInfoMMStatNotUsed = 0,
    PerfInfoMMStatAggregatePageCombine = 1,
    PerfInfoMMStatIterationPageCombine = 2,
    PerfInfoMMStatMax = 3
};

typedef enum _PKG_TYPE {
    NPNP_PKG = 0,
    NDCO_PKG = 1,
    MAX_PKG = 2
};

typedef enum _PKTMON_PACKET_TYPE {
    PktMonPayload_Unknown = 0,
    PktMonPayload_Ethernet = 1,
    PktMonPayload_WiFi = 2,
    PktMonPayload_MBB = 3
};

typedef enum _POOL_BLOCK_TYPE {
    NDIS_PACKET_POOL_BLOCK_FREE = 0,
    NDIS_PACKET_POOL_BLOCK_USED = 1,
    NDIS_PACKET_POOL_BLOCK_AGING = 2
};

typedef enum _POOL_TYPE {
    NonPagedPool = 0,
    NonPagedPoolExecute = 0,
    PagedPool = 1,
    NonPagedPoolMustSucceed = 2,
    DontUseThisType = 3,
    NonPagedPoolCacheAligned = 4,
    PagedPoolCacheAligned = 5,
    NonPagedPoolCacheAlignedMustS = 6,
    MaxPoolType = 7,
    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = 2,
    NonPagedPoolBaseCacheAligned = 4,
    NonPagedPoolBaseCacheAlignedMustS = 6,
    NonPagedPoolSession = 32,
    PagedPoolSession = 33,
    NonPagedPoolMustSucceedSession = 34,
    DontUseThisTypeSession = 35,
    NonPagedPoolCacheAlignedSession = 36,
    PagedPoolCacheAlignedSession = 37,
    NonPagedPoolCacheAlignedMustSSession = 38,
    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = 516,
    NonPagedPoolSessionNx = 544
};

typedef enum _POWER_STATE_TYPE {
    SystemPowerState = 0,
    DevicePowerState = 1
};

typedef enum _PS_ATTRIBUTE_NUM {
    PsAttributeParentProcess = 0,
    PsAttributeDebugObject = 1,
    PsAttributeToken = 2,
    PsAttributeClientId = 3,
    PsAttributeTebAddress = 4,
    PsAttributeImageName = 5,
    PsAttributeImageInfo = 6,
    PsAttributeMemoryReserve = 7,
    PsAttributePriorityClass = 8,
    PsAttributeErrorMode = 9,
    PsAttributeStdHandleInfo = 10,
    PsAttributeHandleList = 11,
    PsAttributeGroupAffinity = 12,
    PsAttributePreferredNode = 13,
    PsAttributeIdealProcessor = 14,
    PsAttributeUmsThread = 15,
    PsAttributeMitigationOptions = 16,
    PsAttributeProtectionLevel = 17,
    PsAttributeSecureProcess = 18,
    PsAttributeJobList = 19,
    PsAttributeChildProcessPolicy = 20,
    PsAttributeAllApplicationPackagesPolicy = 21,
    PsAttributeWin32kFilter = 22,
    PsAttributeSafeOpenPromptOriginClaim = 23,
    PsAttributeBnoIsolation = 24,
    PsAttributeDesktopAppPolicy = 25,
    PsAttributeChpe = 26,
    PsAttributeMax = 27
};

typedef enum _PS_MITIGATION_OPTION {
    PS_MITIGATION_OPTION_NX = 0,
    PS_MITIGATION_OPTION_SEHOP = 1,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    PS_MITIGATION_OPTION_CET_SHADOW_STACKS = 31
};

typedef enum _PS_PROTECTED_SIGNER {
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerWinSystem = 7,
    PsProtectedSignerApp = 8,
    PsProtectedSignerMax = 9
};

typedef enum _PS_PROTECTED_TYPE {
    PsProtectedTypeNone = 0,
    PsProtectedTypeProtectedLight = 1,
    PsProtectedTypeProtected = 2,
    PsProtectedTypeMax = 3
};

typedef enum _PS_STD_HANDLE_STATE {
    PsNeverDuplicate = 0,
    PsRequestDuplicate = 1,
    PsAlwaysDuplicate = 2,
    PsMaxStdHandleStates = 3
};

typedef enum _PS_WAKE_REASON {
    PsWakeReasonUser = 0,
    PsWakeReasonExecutionRequired = 1,
    PsWakeReasonKernel = 2,
    PsWakeReasonInstrumentation = 3,
    PsWakeReasonPreserveProcess = 4,
    PsWakeReasonActivityReference = 5,
    PsWakeReasonWorkOnBehalf = 6,
    PsMaxWakeReasons = 7
};

typedef enum _REG_NOTIFY_CLASS {
    RegNtDeleteKey = 0,
    RegNtPreDeleteKey = 0,
    RegNtSetValueKey = 1,
    RegNtPreSetValueKey = 1,
    RegNtDeleteValueKey = 2,
    RegNtPreDeleteValueKey = 2,
    RegNtSetInformationKey = 3,
    RegNtPreSetInformationKey = 3,
    RegNtRenameKey = 4,
    RegNtPreRenameKey = 4,
    RegNtEnumerateKey = 5,
    RegNtPreEnumerateKey = 5,
    RegNtEnumerateValueKey = 6,
    RegNtPreEnumerateValueKey = 6,
    RegNtQueryKey = 7,
    RegNtPreQueryKey = 7,
    RegNtQueryValueKey = 8,
    RegNtPreQueryValueKey = 8,
    RegNtQueryMultipleValueKey = 9,
    RegNtPreQueryMultipleValueKey = 9,
    RegNtPreCreateKey = 10,
    RegNtPostCreateKey = 11,
    RegNtPreOpenKey = 12,
    RegNtPostOpenKey = 13,
    RegNtKeyHandleClose = 14,
    RegNtPreKeyHandleClose = 14,
    RegNtPostDeleteKey = 15,
    RegNtPostSetValueKey = 16,
    RegNtPostDeleteValueKey = 17,
    RegNtPostSetInformationKey = 18,
    RegNtPostRenameKey = 19,
    RegNtPostEnumerateKey = 20,
    RegNtPostEnumerateValueKey = 21,
    RegNtPostQueryKey = 22,
    RegNtPostQueryValueKey = 23,
    RegNtPostQueryMultipleValueKey = 24,
    RegNtPostKeyHandleClose = 25,
    RegNtPreCreateKeyEx = 26,
    RegNtPostCreateKeyEx = 27,
    RegNtPreOpenKeyEx = 28,
    RegNtPostOpenKeyEx = 29,
    RegNtPreFlushKey = 30,
    RegNtPostFlushKey = 31,
    RegNtPreLoadKey = 32,
    RegNtPostLoadKey = 33,
    RegNtPreUnLoadKey = 34,
    RegNtPostUnLoadKey = 35,
    RegNtPreQueryKeySecurity = 36,
    RegNtPostQueryKeySecurity = 37,
    RegNtPreSetKeySecurity = 38,
    RegNtPostSetKeySecurity = 39,
    RegNtCallbackObjectContextCleanup = 40,
    RegNtPreRestoreKey = 41,
    RegNtPostRestoreKey = 42,
    RegNtPreSaveKey = 43,
    RegNtPostSaveKey = 44,
    RegNtPreReplaceKey = 45,
    RegNtPostReplaceKey = 46,
    RegNtPreQueryKeyName = 47,
    RegNtPostQueryKeyName = 48,
    MaxRegNtNotifyClass = 49
};

typedef enum _RTL_RESOURCE_POLICY_FLAGS {
    RTL_RESOURCE_POLICY_FLAGS_NONE = 0
};

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
};

typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor = 0,
    QuerySecurityDescriptor = 1,
    DeleteSecurityDescriptor = 2,
    AssignSecurityDescriptor = 3
};

typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
};

typedef enum _SYSTEM_PROCESS_CLASSIFICATION {
    SystemProcessClassificationNormal = 0,
    SystemProcessClassificationSystem = 1,
    SystemProcessClassificationSecureSystem = 2,
    SystemProcessClassificationMemCompression = 3,
    SystemProcessClassificationRegistry = 4,
    SystemProcessClassificationMaximum = 5
};

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3
};

typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass = 0,
    TraceHandleClass = 1,
    TraceEnableFlagsClass = 2,
    TraceEnableLevelClass = 3,
    GlobalLoggerHandleClass = 4,
    EventLoggerHandleClass = 5,
    AllLoggerHandlesClass = 6,
    TraceHandleByNameClass = 7,
    LoggerEventsLostClass = 8,
    TraceSessionSettingsClass = 9,
    LoggerEventsLoggedClass = 10,
    DiskIoNotifyRoutinesClass = 11,
    TraceInformationClassReserved1 = 12,
    AllPossibleNotifyRoutinesClass = 12,
    FltIoNotifyRoutinesClass = 13,
    TraceInformationClassReserved2 = 14,
    WdfNotifyRoutinesClass = 15,
    MaxTraceInformationClass = 16
};

typedef enum _TlgBlob_t {
    _TlgBlobNone = 0,
    _TlgBlobEnd = 1,
    _TlgBlobProvider = 2,
    _TlgBlobEvent3 = 3,
    _TlgBlobProvider3 = 4,
    _TlgBlobEvent2 = 5,
    _TlgBlobMax = 6
};

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3
};

typedef enum _VF_DISPATCH_TABLE_TYPE {
    DispatchTableTypeWdm = 0,
    DispatchTableTypeWdf = 1,
    DispatchTableTypeNdis = 2,
    DispatchTableTypeXdv = 3,
    DispatchTableTypeTip = 4,
    MaximumDispatchTableType = 5
};

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA = 1,
    WheaDataFormatMemory = 2,
    WheaDataFormatPCIExpress = 3,
    WheaDataFormatNMIPort = 4,
    WheaDataFormatPCIXBus = 5,
    WheaDataFormatPCIXDevice = 6,
    WheaDataFormatGeneric = 7,
    WheaDataFormatMax = 8
};

typedef enum _WHEA_ERROR_SEVERITY {
    WheaErrSevRecoverable = 0,
    WheaErrSevFatal = 1,
    WheaErrSevCorrected = 2,
    WheaErrSevInformational = 3
};

typedef enum _WHEA_ERROR_SOURCE_TYPE {
    WheaErrSrcTypeMCE = 0,
    WheaErrSrcTypeCMC = 1,
    WheaErrSrcTypeCPE = 2,
    WheaErrSrcTypeNMI = 3,
    WheaErrSrcTypePCIe = 4,
    WheaErrSrcTypeGeneric = 5,
    WheaErrSrcTypeINIT = 6,
    WheaErrSrcTypeBOOT = 7,
    WheaErrSrcTypeSCIGeneric = 8,
    WheaErrSrcTypeIPFMCA = 9,
    WheaErrSrcTypeIPFCMC = 10,
    WheaErrSrcTypeIPFCPE = 11,
    WheaErrSrcTypeGenericV2 = 12,
    WheaErrSrcTypeSCIGenericV2 = 13,
    WheaErrSrcTypeMax = 14
};

typedef enum _WHEA_ERROR_TYPE {
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory = 1,
    WheaErrTypePCIExpress = 2,
    WheaErrTypeNMI = 3,
    WheaErrTypePCIXBus = 4,
    WheaErrTypePCIXDevice = 5,
    WheaErrTypeGeneric = 6
};

typedef enum _WHEA_EVENT_LOG_ENTRY_ID {
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
    WheaEventLogEntryIdWheaInit = -2147483646,
    WheaEventLogEntryIdMax = -2147483645
};

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE {
    WheaEventLogEntryTypeInformational = 0,
    WheaEventLogEntryTypeWarning = 1,
    WheaEventLogEntryTypeError = 2
};

typedef enum _WORK_QUEUE_TYPE {
    CriticalWorkQueue = 0,
    DelayedWorkQueue = 1,
    HyperCriticalWorkQueue = 2,
    NormalWorkQueue = 3,
    BackgroundWorkQueue = 4,
    RealTimeWorkQueue = 5,
    SuperCriticalWorkQueue = 6,
    MaximumWorkQueue = 7,
    CustomPriorityWorkQueue = 32
};

typedef enum _WWAN_ACTIVATION_COMMAND {
    WwanActivationCommandDeactivate = 0,
    WwanActivationCommandActivate = 1,
    WwanActivationCommandMax = 2
};

typedef enum _WWAN_AUTH_METHOD {
    WwanAuthSim = 0,
    WwanAuthAka = 1,
    WwanAuthAkaPrime = 2,
    WwanAuthMethodMax = 3
};

typedef enum _WWAN_AUTH_PROTOCOL {
    WwanAuthProtocolNone = 0,
    WwanAuthProtocolPap = 1,
    WwanAuthProtocolChap = 2,
    WwanAuthProtocolMsChapV2 = 3,
    WwanAuthProtocolAuto = 4,
    WwanAuthProtocolMax = 5
};

typedef enum _WWAN_CELLULAR_CLASS {
    WwanCellularClassUnknown = 0,
    WwanCellularClassGsm = 1,
    WwanCellularClassCdma = 2,
    WwanCellularClassMax = 3
};

typedef enum _WWAN_COMPRESSION {
    WwanCompressionNone = 0,
    WwanCompressionEnable = 1,
    WwanCompressionMax = 2
};

typedef enum _WWAN_CONFIGURATION_SOURCE {
    WwanUserProvisioned = 0,
    WwanAdminProvisioned = 1,
    WwanOperatorProvisioned = 2,
    WwanDeviceProvisioned = 3,
    WwanModemProvisioned = 4,
    WwanMaxProvisionSource = 5
};

typedef enum _WWAN_CONTEXT_TYPE {
    WwanContextTypeNone = 0,
    WwanContextTypeInternet = 1,
    WwanContextTypeVpn = 2,
    WwanContextTypeVoice = 3,
    WwanContextTypeVideoShare = 4,
    WwanContextTypeCustom = 5,
    WwanContextTypePurchase = 6,
    WwanContextTypeMms = 7,
    WwanContextTypeIms = 8,
    WwanContextTypeAdmin = 9,
    WwanContextTypeApp = 10,
    WwanContextTypeXcap = 11,
    WwanContextTypeTethering = 12,
    WwanContextTypeEmergencyCall = 13,
    WwanContextTypeLteAttach = 14,
    WwanContextTypeMax = 15
};

typedef enum _WWAN_DEVICE_TYPE {
    WwanDeviceTypeUnknown = 0,
    WwanDeviceTypeEmbedded = 1,
    WwanDeviceTypeRemovable = 2,
    WwanDeviceTypeRemote = 3,
    WwanDeviceTypeMax = 4
};

typedef enum _WWAN_EMERGENCY_MODE {
    WwanEmergencyModeOff = 0,
    WwanEmergencyModeOn = 1,
    WwanEmergencyModeMax = 2
};

typedef enum _WWAN_IP_TYPE {
    WwanIPTypeDefault = 0,
    WwanIPTypeIPv4 = 1,
    WwanIPTypeIPv6 = 2,
    WwanIPTypeIpv4v6 = 3,
    WwanIPTypeXlat = 4
};

typedef enum _WWAN_PACKET_SERVICE_ACTION {
    WwanPacketServiceActionAttach = 0,
    WwanPacketServiceActionDetach = 1
};

typedef enum _WWAN_PIN_FORMAT {
    WwanPinFormatUnknown = 0,
    WwanPinFormatNumeric = 1,
    WwanPinFormatAlphaNumeric = 2,
    WwanPinFormatMax = 3
};

typedef enum _WWAN_PIN_MODE {
    WwanPinModeNotSupported = 0,
    WwanPinModeEnabled = 1,
    WwanPinModeDisabled = 2,
    WwanPinModeMax = 3
};

typedef enum _WWAN_PSMEDIA_PREFERENCE {
    WwanPsMediaPreferenceNone = 0,
    WwanPsMediaPreferenceCellularOnly = 1,
    WwanPsMediaPreferenceCellularPreferred = 2,
    WwanPsMediaPreferenceWiFiOnly = 3,
    WwanPsMediaPreferenceWiFiPreferred = 4,
    WwanPsMediaPreferenceMax = 5
};

typedef enum _WWAN_READY_STATE {
    WwanReadyStateOff = 0,
    WwanReadyStateInitialized = 1,
    WwanReadyStateSimNotInserted = 2,
    WwanReadyStateBadSim = 3,
    WwanReadyStateFailure = 4,
    WwanReadyStateNotActivated = 5,
    WwanReadyStateDeviceLocked = 6,
    WwanReadyStateNoEsimProfile = 7,
    WwanReadyStateMax = 8
};

typedef enum _WWAN_REGISTER_ACTION {
    WwanRegisterActionAutomatic = 0,
    WwanRegisterActionManual = 1,
    WwanRegisterActionMax = 2
};

typedef enum _WWAN_SIM_CLASS {
    WwanSimClassUnknown = 0,
    WwanSimClassSimLogical = 1,
    WwanSimClassSimRemovable = 2,
    WwanSimClassSimRemote = 3,
    WwanSimClassMax = 4
};

typedef enum _WWAN_SMS_CDMA_ENCODING {
    WwanSmsCdmaEncodingOctet = 0,
    WwanSmsCdmaEncodingEpm = 1,
    WwanSmsCdmaEncoding7BitAscii = 2,
    WwanSmsCdmaEncodingIa5 = 3,
    WwanSmsCdmaEncodingUnicode = 4,
    WwanSmsCdmaEncodingShiftJis = 5,
    WwanSmsCdmaEncodingKorean = 6,
    WwanSmsCdmaEncodingLatinHebrew = 7,
    WwanSmsCdmaEncodingLatin = 8,
    WwanSmsCdmaEncodingGsm7Bit = 9,
    WwanSmsCdmaEncodingMax = 10
};

typedef enum _WWAN_SMS_CDMA_LANG {
    WwanSmsCdmaLangUnknown = 0,
    WwanSmsCdmaLangEnglish = 1,
    WwanSmsCdmaLangFrench = 2,
    WwanSmsCdmaLangSpanish = 3,
    WwanSmsCdmaLangJapanese = 4,
    WwanSmsCdmaLangKorean = 5,
    WwanSmsCdmaLangChinese = 6,
    WwanSmsCdmaLangHebrew = 7,
    WwanSmsCdmaLangMax = 8
};

typedef enum _WWAN_SMS_FLAG {
    WwanSmsFlagAll = 0,
    WwanSmsFlagIndex = 1,
    WwanSmsFlagNew = 2,
    WwanSmsFlagOld = 3,
    WwanSmsFlagSent = 4,
    WwanSmsFlagDraft = 5,
    WwanSmsFlagMax = 6
};

typedef enum _WWAN_SMS_FORMAT {
    WwanSmsFormatPdu = 0,
    WwanSmsFormatReserved0 = 1,
    WwanSmsFormatReserved1 = 2,
    WwanSmsFormatReserved2 = 3,
    WwanSmsFormatCdma = 4,
    WwanSmsFormatMax = 5
};

typedef enum _WWAN_STRUCT_TYPE {
    WwanStructTN = 0,
    WwanStructContext = 1,
    WwanStructProvider = 2,
    WwanStructSmsPdu = 3,
    WwanStructReserved0 = 4,
    WwanStructReserved1 = 5,
    WwanStructReserved2 = 6,
    WwanStructSmsCdma = 7,
    WwanStructReserved3 = 8,
    WwanStructDeviceServiceEntry = 9,
    WwanStructProvider2 = 10,
    WwanStructDeviceServiceGuid = 11,
    WwanStructDeviceServiceCommandId = 12,
    WwanStructCellularClass = 13,
    WwanStructDeviceSlotMap = 14,
    WwanStructUiccApplication = 15,
    WwanStructRegisterAcquisitionOrder = 16,
    WwanStructRegistrationState = 17,
    WwanStructSignalState = 18,
    WwanStructUiccTerminalCapability = 19,
    WwanStructSarConfig = 20,
    WwanStructContextV2 = 21,
    WwanStructNetworkBlacklistProvider = 22,
    WwanStructMPDPChildInterface = 23,
    WwanStructMax = 24
};

typedef enum _WWAN_VOICE_CLASS {
    WwanVoiceClassUnknown = 0,
    WwanVoiceClassNoVoice = 1,
    WwanVoiceClassSeparateVoiceData = 2,
    WwanVoiceClassSimultaneousVoiceData = 3,
    WwanVoiceClassMax = 4
};

typedef enum __vc_attributes::aggregatableAttribute::type_e {
    never = 0,
    allowed = 1,
    always = 2
};

typedef enum __vc_attributes::event_receiverAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::event_sourceAttribute::optimize_e {
    speed = 0,
    size = 1
};

typedef enum __vc_attributes::event_sourceAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::helper_attributes::usageAttribute::usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

typedef enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e {
    eBoolean = 0,
    eInteger = 1,
    eFloat = 2,
    eDouble = 3
};

typedef enum __vc_attributes::moduleAttribute::type_e {
    dll = 1,
    exe = 2,
    service = 3,
    unspecified = 4,
    EXE = 2,
    SERVICE = 3
};

typedef enum __vc_attributes::threadingAttribute::threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum optimize_e {
    speed = 0,
    size = 1
};

typedef enum threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

typedef enum wil_FeatureChangeTime {
    wil_FeatureChangeTime_OnRead = 0,
    wil_FeatureChangeTime_OnReload = 1,
    wil_FeatureChangeTime_OnSession = 2,
    wil_FeatureChangeTime_OnReboot = 3
};

typedef enum wil_FeatureEnabledState {
    wil_FeatureEnabledState_Default = 0,
    wil_FeatureEnabledState_Disabled = 1,
    wil_FeatureEnabledState_Enabled = 2
};

typedef enum wil_FeatureEnabledStateKind {
    wil_FeatureEnabledStateKind_All = 0,
    wil_FeatureEnabledStateKind_Service = 1,
    wil_FeatureEnabledStateKind_User = 2,
    wil_FeatureEnabledStateKind_Test = 3
};

typedef enum wil_FeatureEnabledStateOptions {
    wil_FeatureEnabledStateOptions_None = 0,
    wil_FeatureEnabledStateOptions_VariantConfig = 1
};

typedef enum wil_FeatureStage {
    wil_FeatureStage_AlwaysDisabled = 0,
    wil_FeatureStage_DisabledByDefault = 1,
    wil_FeatureStage_EnabledByDefault = 2,
    wil_FeatureStage_AlwaysEnabled = 3
};

typedef enum wil_FeatureStore {
    wil_FeatureStore_Machine = 0,
    wil_FeatureStore_User = 1,
    wil_FeatureStore_All = 2
};

typedef enum wil_FeatureVariantPayloadKind {
    wil_FeatureVariantPayloadKind_None = 0,
    wil_FeatureVariantPayloadKind_Resident = 1,
    wil_FeatureVariantPayloadKind_External = 2
};

typedef enum wil_ReportingKind {
    wil_ReportingKind_None = 0,
    wil_ReportingKind_UniqueUsage = 1,
    wil_ReportingKind_UniqueOpportunity = 2,
    wil_ReportingKind_DeviceUsage = 3,
    wil_ReportingKind_DeviceOpportunity = 4,
    wil_ReportingKind_TotalDuration = 5,
    wil_ReportingKind_PausedDuration = 6
};

typedef enum wil_UsageReportingMode {
    wil_UsageReportingMode_Default = 0,
    wil_UsageReportingMode_SuppressPotential = 1,
    wil_UsageReportingMode_SuppressImplicit = 2
};

typedef enum wil_VariantReportingKind {
    wil_VariantReportingKind_None = 0,
    wil_VariantReportingKind_UniqueUsage = 1,
    wil_VariantReportingKind_DeviceUsage = 2
};

typedef enum wil_details_CachedFeatureEnabledState {
    wil_details_CachedFeatureEnabledState_Unknown = 0,
    wil_details_CachedFeatureEnabledState_Disabled = 1,
    wil_details_CachedFeatureEnabledState_Enabled = 2,
    wil_details_CachedFeatureEnabledState_Desired = 3
};

typedef enum wil_details_CachedHasNotificationState {
    wil_details_CachedHasNotificationState_Unknown = 0,
    wil_details_CachedHasNotificationState_DoesNotHaveNotifications = 1,
    wil_details_CachedHasNotificationState_HasNotification = 2
};

typedef enum wil_details_FeatureTestStateKind {
    wil_details_FeatureTestStateKind_EnabledState = 0,
    wil_details_FeatureTestStateKind_Variant = 1
};

typedef enum wil_details_ServiceReportingKind {
    wil_details_ServiceReportingKind_UniqueUsage = 0,
    wil_details_ServiceReportingKind_UniqueOpportunity = 1,
    wil_details_ServiceReportingKind_DeviceUsage = 2,
    wil_details_ServiceReportingKind_DeviceOpportunity = 3,
    wil_details_ServiceReportingKind_PotentialUniqueUsage = 4,
    wil_details_ServiceReportingKind_PotentialUniqueOpportunity = 5,
    wil_details_ServiceReportingKind_PotentialDeviceUsage = 6,
    wil_details_ServiceReportingKind_PotentialDeviceOpportunity = 7,
    wil_details_ServiceReportingKind_EnabledTotalDuration = 8,
    wil_details_ServiceReportingKind_EnabledPausedDuration = 9,
    wil_details_ServiceReportingKind_DisabledTotalDuration = 10,
    wil_details_ServiceReportingKind_DisabledPausedDuration = 11,
    wil_details_ServiceReportingKind_CustomEnabledBase = 100,
    wil_details_ServiceReportingKind_CustomDisabledBase = 150,
    wil_details_ServiceReportingKind_Store = 254,
    wil_details_ServiceReportingKind_None = 255,
    wil_details_ServiceReportingKind_VariantDevicePotentialBase = 256,
    wil_details_ServiceReportingKind_VariantDeviceUsageBase = 320,
    wil_details_ServiceReportingKind_VariantUniquePotentialBase = 384,
    wil_details_ServiceReportingKind_VariantUniqueUsageBase = 448
};

typedef enum wil_details_ServiceReportingOptions {
    wil_details_ServiceReportingOptions_None = 0,
    wil_details_ServiceReportingOptions_VariantConfig = 1
};

typedef enum wil_details_StagingConfigFeatureFields {
    wil_details_StagingConfigFeatureFields_None = 0,
    wil_details_StagingConfigFeatureFields_ServiceState = 1,
    wil_details_StagingConfigFeatureFields_UserState = 2,
    wil_details_StagingConfigFeatureFields_TestState = 4,
    wil_details_StagingConfigFeatureFields_Variant = 8
};

AbortingRequestEx;
ActivityTransfer;
AddDevice;
AddDeviceFailed;
AddPnPDevice;
AdminsAcl;
AdminsSecurityDescriptor;
AllUsersAclRead;
AllUsersAclReadWrite;
AllUsersAclWrite;
AllUsersReadSecurityDescriptor;
AllUsersReadWriteSecurityDescriptor;
AllUsersWriteSecurityDescriptor;
AllocateAdapterChannelFailed;
AoAcTestStr;
CallMiniportReset;
CancelFilterOidRequestEx;
CancelMiniportOidRequestEx;
CancelledWakeIrp;
ChangeInformationFailed;
ChangeNotificationCompartment;
ChangeNotificationInterfaceEnum;
ChangeNotificationInterfaceInfo;
ChangeNotificationNetwork;
ChangeNotificationTimestamping;
ClearingOidRequest;
CloseAdapter;
CompletingOidRequestFilterEx;
CompletingOidRequestMiniportEx;
ComponentCsStats;
CreatedWakeIrp;
DEVPKEY_Device_InstanceId;
DEVPKEY_PciDevice_CurrentLinkSpeed;
DEVPKEY_PciDevice_CurrentLinkWidth;
DEVPKEY_PciDevice_CurrentPayloadSize;
DEVPKEY_PciDevice_CurrentSpeedAndMode;
DEVPKEY_PciDevice_DeviceType;
DEVPKEY_PciDevice_ExpressSpecVersion;
DEVPKEY_PciDevice_InterruptMessageMaximum;
DEVPKEY_PciDevice_InterruptSupport;
DEVPKEY_PciDevice_MaxLinkSpeed;
DEVPKEY_PciDevice_MaxLinkWidth;
DEVPKEY_PciDevice_MaxPayloadSize;
DEVPKEY_PciDevice_MaxReadRequestSize;
DEVPKEY_PciDevice_S0WakeupSupported;
DEVPKEY_PciDevice_SriovSupport;
DefaultPortActivated;
DefaultPortDeactivated;
DevicePowerDownComplete;
DevicePowerDownRequested;
DevicePowerOnComplete;
DevicePowerOnFailed;
DevicePowerOnRequested;
DevicePowerStateChange;
DeviceSleepOnDisconnectStr;
DeviceWaitWakeComplete;
DispatchPnPIrp;
DoOidRequest;
DpcEnd;
DpcStart;
DpcTimeCount;
DpcWatchdogCount;
EncapsulatedPacketTaskOffloadNvgreStr;
EncapsulatedPacketTaskOffloadStr;
EncapsulatedPacketTaskOffloadVxlanStr;
EnteringConnectedStandby;
EtwGuidNdisReceive;
ExecuteMethodFailed;
ExitingConnectedStandby;
Feature_ScreenON_NAPS__private_propertyCache;
FilterArrivalIndicationFailed;
FilterChangedMediaType;
FilterRegistrationFailed;
FilterRemovalIndicationFailed;
FilterStateChangeEx;
FlowControlStr;
GUID_00000000_0000_0000_0000_000000000000;
GUID_4747b320_62ce_11cf_a5d6_28db04c10000;
GUID_ACDC_POWER_SOURCE;
GUID_BUS_INTERFACE_STANDARD;
GUID_BUS_TYPE_1394;
GUID_BUS_TYPE_EISA;
GUID_BUS_TYPE_INTERNAL;
GUID_BUS_TYPE_IRDA;
GUID_BUS_TYPE_ISAPNP;
GUID_BUS_TYPE_PCI;
GUID_BUS_TYPE_PCMCIA;
GUID_BUS_TYPE_USB;
GUID_CS_BLOCKER_GEN;
GUID_DEVICE_INTERFACE_ARRIVAL;
GUID_DEVICE_RESET_INTERFACE_STANDARD;
GUID_DEVINTERFACE_NET;
GUID_DEVINTERFACE_VIRTUALIZABLE_DEVICE;
GUID_LOW_POWER_EPOCH;
GUID_MSIX_TABLE_CONFIG_INTERFACE;
GUID_NDIS_ENUMERATE_ADAPTER;
GUID_NDIS_ENUMERATE_ADAPTERS_EX;
GUID_NDIS_ENUMERATE_VC;
GUID_NDIS_LAN_CLASS;
GUID_NDIS_NDK_CAPABILITIES;
GUID_NDIS_NDK_STATE;
GUID_NDIS_NOTIFY_ADAPTER_ARRIVAL;
GUID_NDIS_NOTIFY_ADAPTER_REMOVAL;
GUID_NDIS_NOTIFY_BIND;
GUID_NDIS_NOTIFY_DEVICE_POWER_OFF;
GUID_NDIS_NOTIFY_DEVICE_POWER_OFF_EX;
GUID_NDIS_NOTIFY_DEVICE_POWER_ON;
GUID_NDIS_NOTIFY_DEVICE_POWER_ON_EX;
GUID_NDIS_NOTIFY_FILTER_ARRIVAL;
GUID_NDIS_NOTIFY_FILTER_REMOVAL;
GUID_NDIS_NOTIFY_UNBIND;
GUID_NDIS_NOTIFY_VC_REMOVAL;
GUID_NDIS_PM_ACTIVE_CAPABILITIES;
GUID_NDIS_PM_ADMIN_CONFIG;
GUID_NDIS_RSS_ENABLED;
GUID_NDIS_WAKE_ON_MAGIC_PACKET_ONLY;
GUID_PCI_VIRTUALIZATION_INTERFACE;
GUID_PDC_IDLE_RESILIENCY_ENGAGED;
GUID_POWER_DEVICE_ENABLE;
GUID_POWER_DEVICE_WAKE_ENABLE;
GUID_SLEEPSTUDY_BLOCKER_PARENT_NETWORKING;
GUID_SPM_LOW_POWER_CS;
GUID_SRIOV_DEVICE_INTERFACE_STANDARD;
GUID_VPCI_INTERFACE_STANDARD;
HDSplitStr;
HalPrivateDispatchTable;
IPXsumIPv4Str;
IPsecIPv4Str;
IPsecV2IPv4Str;
IPsecV2Str;
IndicateAdapterRemovalFailed;
InitializeAdapterFailed;
InitializeAdapterInfo;
InvalidSystemPowerState;
IoDeviceObjectType;
IoFileObjectType;
IoWMIWriteEventFailed;
IrpSetPowerFailed;
KdDebuggerEnabled;
KdDebuggerNotPresent;
KeBootTime;
KeptFilterFakeHandlers;
KeptMiniportFakeHandlers;
LsoV1IPv4Str;
LsoV2IPv4Str;
LsoV2IPv6Str;
MagicPacketStr;
MaxRssProcStr;
MediaDisconnectTimeOutStr;
Microsoft_Windows_NDISEnableBits;
Microsoft_Windows_NDISKeywords;
Microsoft_Windows_NDISLevels;
Microsoft_Windows_Networking_CorrelationEnabled;
Microsoft_Windows_Networking_CorrelationHandle;
Microsoft_Windows_Networking_CorrelationId;
Microsoft_Windows_Networking_CorrelationTraceActivityPayload;
Microsoft_Windows_Networking_ProviderId;
Microsoft_Windows_SleepStudyEnableBits;
Microsoft_Windows_SleepStudyKeywords;
Microsoft_Windows_SleepStudyLevels;
MiniportCsStats;
MiniportCsTraffic;
MiniportEvent;
MiniportFatalError;
MiniportInitializeHandlerFailed;
MiniportMacAddress;
MiniportPowerDeviceState;
MiniportPowerStates;
MiniportPowerSystemState;
MiniportPoweringUp;
MiniportReset;
MiniportSleepStudyDevicePdo;
MiniportStatusIndicationConnect;
MiniportStatusIndicationDisconnect;
MiniportStatusIndicationNetworkChange;
MiniportStatusIndicationOperStatusNotUp;
MiniportStatusIndicationOperStatusUp;
MiniportWakePacket;
MmSystemRangeStart;
ModernStandbyWoLMagicPacketStr;
NDIS_PROVIDER_ID;
NDIS_PROVIDER_ID_Context;
NPI_MS_NDIS_MODULEID;
NPI_MS_NDIS_VBUS_MODULEID;
NPI_NDIS_MINIPORT_HOOK_ID;
NPI_NDIS_VBUS_INTERFACE_ID;
NPI_NSI_MODULE_ID;
NPI_PKTMON_INTERFACE_ID;
Ndis::BindEngine::s_NumBindOperationsInProgress;
Ndis::FilterListValueName;
Ndis::ProtocolListValueName;
NdisDeviceTypeStr;
NdisErrorLogEntry;
NdisGetVersion640ShimHooks;
NdisGetVersionShimHookCollections;
NdisSessionToCompartmentMappingEpochAndZero;
NdisShim;
NdkGlobalFlags;
NdkPcwNdkBlockList;
NicActiveAcquired;
NicActiveRefRundownBegin;
NicActiveRefRundownEnd;
NicActiveRefRundownEntry;
NicActiveReleased;
NicAutoPowerSaverStr;
NicAutoPowerSaverTimeoutStr;
NicSwitchDefaultSwitchStr;
NicSwitchFlagsStr;
NicSwitchIdStr;
NicSwitchNameStr;
NicSwitchNumVFsStr;
NicSwitchTypeStr;
NicWakeReason;
NotifyMiniportAction;
NumNdisDllInitialize;
NumaNodeIdStr;
OidQueryFailed;
OpenFailedMiniportNotStarted;
PMARPOffloadStr;
PMNSOffloadStr;
PMWiFiRekeyOffloadStr;
PfnIoCreateDeviceSecure;
PiRegStateDiscriptor;
PiRegStateSysAllInherittedSecurityDescriptor;
PktMon;
PktMonClientDispatch;
PktMonClientNotify;
PnPPortActivationFailed;
PnPPortDeactivationFailed;
PoolAgingTicks;
PowerDisableWakeup;
PowerDownFailed;
PowerDownFailedCannotReinitialize;
PowerHaltMiniport;
PowerHibernateOrShutdown;
PowerIrpComplete;
PowerOnMiniportNotStarted;
PowerOnMiniportRemoved;
PowerPolicyError;
PowerPolicyPatternNotEnabled;
PowerPolicySetD3;
PowerPolicyStates;
PowerShutdownMiniport;
PowerWakeNotEnabled;
PowerWakeUpDevice;
ProtocolBind;
ProtocolBindStatus;
ProtocolUnbind;
PsJobType;
PsThreadType;
QueryPnPDeviceStateFailed;
QueryPowerComplete;
QueryPowerCompleteSystemState;
QueryPowerCompleteSystemStatePoRequest;
QueryPowerFailed;
QuerySetMiniportDeviceStateFailed;
QueuedReceiveEnd;
QueuedReceiveStart;
ReferenceProtocolFailed;
RegisterInterruptFailed;
RegisterMiniportDriverFailed;
RscIPv4Str;
RscIPv6Str;
RssBaseProcGroupStr;
RssBaseProcNumStr;
RssMaxProcGroupStr;
RssMaxProcNumStr;
RssProfileStr;
RssStr;
RstLimitChange;
SLEEPSTUDY_ETW_PROVIDER;
SLEEPSTUDY_ETW_PROVIDER_Context;
SLEEPSTUDY_EVT_SCENARIO_BLOCKER;
SLEEPSTUDY_EVT_SCENARIO_BLOCKER_DATA;
SSIdleDeclined;
SSIdleDetected;
SSIdleTimeoutMsStr;
SSIdleTimeoutScreenOffStr;
SSIdleTimeoutStr;
SSResumeRequested;
SelectiveSuspendStr;
SendPacketCompleteToOpen;
SetEnableWakeUpCompleted;
SetMiniportRSSCapsFailed;
SetOpenEthAddDeleteMulticastFailed;
SetOpenEthMulticastListFailed;
SetOpenRSSCapsFailed;
SharedMemoryResource;
SwTimestampSettingsStr;
SystemPowerOnComplete;
TCPConnectionOffloadIPv4Str;
TCPConnectionOffloadIPv6Str;
TCPUDPChecksumOffloadIPv4Str;
TCPUDPChecksumOffloadIPv6Str;
TCPXsumIPv4Str;
TCPXsumIPv6Str;
TraceLoggingMetadata;
TraceLoggingMetadataEnd;
TransportFailedPnPEvent;
UDPXsumIPv4Str;
UDPXsumIPv6Str;
UnsupportedMiniportMediaType;
Validate60ProtocolFailed;
VerifierRequiredTimeSinceBoot;
VerifierSystemSufficientlyBooted;
WNF_NDIS_ADAPTER_ARRIVAL;
WNF_PO_SCENARIO_CHANGE;
WPPTraceSuite;
WPP_0680c77f763634c41603c8f0ed5987a0_Traceguids;
WPP_0b1a3188e4f23d668040008d2df2302f_Traceguids;
WPP_0b808382ed603acc29a2d994791a3522_Traceguids;
WPP_0ccab54d714a3f5b20136abca93640c2_Traceguids;
WPP_0fb205f09a8037c7f5ea02595da84008_Traceguids;
WPP_28ccc015ff3a36b32c91c02afee3c661_Traceguids;
WPP_2bb36296776a30873aa5d98cc8ebb16c_Traceguids;
WPP_31115bc7d1da3c32c33c6963aa60f50b_Traceguids;
WPP_38e351531fd3379a277386d5a19dba54_Traceguids;
WPP_3f6e3b5cccdc3bc25dcf36d3a561497f_Traceguids;
WPP_41f5eb516e8d3881d364c8f3baaf103d_Traceguids;
WPP_42361dd9a74b3d276ab6054e0e6a2aa7_Traceguids;
WPP_452008ff0d343f49dfdc53c973b78178_Traceguids;
WPP_4751d4e37a7b3d0bd2bb7b74b42f4c5c_Traceguids;
WPP_4d0c893ac8ec3b5f26b43baabc605489_Traceguids;
WPP_50d53b6be4163c1258975c6e797e4b92_Traceguids;
WPP_5141a97b6e1d34def719d6e5359187eb_Traceguids;
WPP_52f7bea8bd1d3ca14d06195c90839a85_Traceguids;
WPP_5a25d62004233057cf64a29056d8f8be_Traceguids;
WPP_63e421b5d75535977b2a1141380f2a99_Traceguids;
WPP_664e81fe3e98381b8a075dcdfaa02fe6_Traceguids;
WPP_68ff436fd5133e2e90af73a21ea15921_Traceguids;
WPP_708561b8cd4433a8527d88173b1ed8eb_Traceguids;
WPP_748d7350885338d9dac69fdf9ab8d5cd_Traceguids;
WPP_75e565b92a953e07dcf27d4fb26abe24_Traceguids;
WPP_78f864c349013b9f055032bfbe98ff58_Traceguids;
WPP_7c95a1dd04db386f3493309f33220046_Traceguids;
WPP_8a019c9f01e135ed6ca159ec8b9589af_Traceguids;
WPP_8d3ede3c46043647628b4b056081495f_Traceguids;
WPP_8df08a1cf1a93f964e71fb8294d520a8_Traceguids;
WPP_9311d8c63e523f0dc817929b0a257a44_Traceguids;
WPP_9a121bb7542c30cb70afea5376c1d156_Traceguids;
WPP_9d4cd70f7fc237db66c5630c937009d5_Traceguids;
WPP_GLOBAL_Control;
WPP_MAIN_CB;
WPP_ThisDir_CTLGUID_NDISTraceGuid;
WPP_a000b6aa13863dc28771f74e17683f6b_Traceguids;
WPP_a05346eae3783090ac961aee2d4913fe_Traceguids;
WPP_a220dbba1db53d57c8c40116951fe210_Traceguids;
WPP_aa650bf7e9c83bc376b2e429d3f62e48_Traceguids;
WPP_ab90398e33e23eea2eee39389267d473_Traceguids;
WPP_ad8539c49f35340fb85ef52817a344b2_Traceguids;
WPP_b7380f6131c0382fffce9713ea39f3ba_Traceguids;
WPP_b87f241b44683114d5775ca3de93698d_Traceguids;
WPP_c25d868f5db83f8f6eebf1a79db06235_Traceguids;
WPP_c93cfa81f4aa3888a989d5f8015e12c7_Traceguids;
WPP_ca1578668c823507ab018ed94525a77c_Traceguids;
WPP_cc65b7c1bc203afb312a61a5c6211737_Traceguids;
WPP_d97384ff81733b666d2a0bed288fd62c_Traceguids;
WPP_dea268cb493f372f092bdd50109326f3_Traceguids;
WPP_e68d36612dfd3fb7c9a22b3f1abef3ac_Traceguids;
WPP_e691f16eeee733bc6bfb37ccc4d95460_Traceguids;
WPP_e71ea69b5edd301746dbdb8179a32a42_Traceguids;
WPP_eccec8ea231d3733224f85f541fced3f_Traceguids;
WPP_f50270d3ac6439ecad1a10c8aacbf967_Traceguids;
WPP_f666f9a69dac3f1d24f4d94726ea9246_Traceguids;
WaitWakeComplete;
WaitWakeIrpFailed;
WakeByMiniport;
WakeOnMagicPacketStr;
WakeOnPatternStr;
WdmlibInitialized;
ZeroBuffer;
_IMPORT_DESCRIPTOR_HAL;
_IMPORT_DESCRIPTOR_NETIO;
_IMPORT_DESCRIPTOR_WppRecorder;
_IMPORT_DESCRIPTOR_ntoskrnl;
_NULL_IMPORT_DESCRIPTOR;
_guard_check_icall_fptr;
_guard_dispatch_icall_fptr;
_guard_fids_table;
_imp_DbgPrint;
_imp_DbgPrintEx;
_imp_DbgSetDebugFilterState;
_imp_DbgkWerCaptureLiveKernelDump;
_imp_EtwRegister;
_imp_EtwSetInformation;
_imp_EtwWrite;
_imp_EtwWriteTransfer;
_imp_ExAcquirePushLockExclusiveEx;
_imp_ExAcquirePushLockSharedEx;
_imp_ExAcquireResourceExclusiveLite;
_imp_ExAcquireRundownProtection;
_imp_ExAcquireRundownProtectionCacheAware;
_imp_ExAllocateCacheAwareRundownProtection;
_imp_ExAllocatePoolWithTag;
_imp_ExAllocatePoolWithTagPriority;
_imp_ExAllocateTimer;
_imp_ExCreateCallback;
_imp_ExDeleteLookasideListEx;
_imp_ExDeleteNPagedLookasideList;
_imp_ExFreeCacheAwareRundownProtection;
_imp_ExFreePoolWithTag;
_imp_ExGetCurrentProcessorCounts;
_imp_ExGetCurrentProcessorCpuUsage;
_imp_ExInitializeLookasideListEx;
_imp_ExInitializeNPagedLookasideList;
_imp_ExInitializeResourceLite;
_imp_ExInitializeRundownProtection;
_imp_ExInterlockedAddLargeInteger;
_imp_ExInterlockedAddUlong;
_imp_ExInterlockedInsertHeadList;
_imp_ExInterlockedInsertTailList;
_imp_ExInterlockedPopEntryList;
_imp_ExInterlockedPushEntryList;
_imp_ExInterlockedRemoveHeadList;
_imp_ExNotifyCallback;
_imp_ExQueryDepthSList;
_imp_ExQueryWnfStateData;
_imp_ExQueueWorkItem;
_imp_ExReInitializeRundownProtection;
_imp_ExReInitializeRundownProtectionCacheAware;
_imp_ExReleasePushLockEx;
_imp_ExReleasePushLockExclusiveEx;
_imp_ExReleaseResourceLite;
_imp_ExReleaseRundownProtection;
_imp_ExReleaseRundownProtectionCacheAware;
_imp_ExReleaseRundownProtectionEx;
_imp_ExRundownCompleted;
_imp_ExSetTimer;
_imp_ExSubscribeWnfStateChange;
_imp_ExSystemTimeToLocalTime;
_imp_ExUuidCreate;
_imp_ExWaitForRundownProtectionRelease;
_imp_ExWaitForRundownProtectionReleaseCacheAware;
_imp_ExpInterlockedPopEntrySList;
_imp_ExpInterlockedPushEntrySList;
_imp_HalPrivateDispatchTable;
_imp_HalTranslateBusAddress;
_imp_InitializeSListHead;
_imp_IoAcquireCancelSpinLock;
_imp_IoAcquireRemoveLockEx;
_imp_IoAllocateDriverObjectExtension;
_imp_IoAllocateErrorLogEntry;
_imp_IoAllocateIrp;
_imp_IoAllocateMdl;
_imp_IoAllocateWorkItem;
_imp_IoAttachDeviceToDeviceStack;
_imp_IoBuildPartialMdl;
_imp_IoBuildSynchronousFsdRequest;
_imp_IoCancelIrp;
_imp_IoConnectInterruptEx;
_imp_IoCreateDevice;
_imp_IoCreateSymbolicLink;
_imp_IoDeleteDevice;
_imp_IoDeleteSymbolicLink;
_imp_IoDetachDevice;
_imp_IoDeviceObjectType;
_imp_IoDisconnectInterruptEx;
_imp_IoFileObjectType;
_imp_IoFreeIrp;
_imp_IoFreeMdl;
_imp_IoFreeWorkItem;
_imp_IoGetAffinityInterrupt;
_imp_IoGetDeviceNumaNode;
_imp_IoGetDeviceProperty;
_imp_IoGetDevicePropertyData;
_imp_IoGetDmaAdapter;
_imp_IoGetDriverObjectExtension;
_imp_IoGetFileObjectGenericMapping;
_imp_IoInitializeRemoveLockEx;
_imp_IoInvalidateDeviceState;
_imp_IoIs32bitProcess;
_imp_IoIsWdmVersionAvailable;
_imp_IoOpenDeviceRegistryKey;
_imp_IoOpenDriverRegistryKey;
_imp_IoQueueWorkItem;
_imp_IoRegisterBootDriverReinitialization;
_imp_IoRegisterDeviceInterface;
_imp_IoRegisterDriverReinitialization;
_imp_IoRegisterPlugPlayNotification;
_imp_IoReleaseCancelSpinLock;
_imp_IoReleaseRemoveLockEx;
_imp_IoReuseIrp;
_imp_IoSetDeviceInterfaceState;
_imp_IoSynchronousCallDriver;
_imp_IoWMIDeviceObjectToProviderId;
_imp_IoWMIOpenBlock;
_imp_IoWMIRegistrationControl;
_imp_IoWMIWriteEvent;
_imp_IoWriteErrorLogEntry;
_imp_IofCallDriver;
_imp_IofCompleteRequest;
_imp_KdDebuggerEnabled;
_imp_KdDebuggerNotPresent;
_imp_KeAcquireSpinLockAtDpcLevel;
_imp_KeAcquireSpinLockRaiseToDpc;
_imp_KeBugCheckEx;
_imp_KeCancelTimer;
_imp_KeClearEvent;
_imp_KeDelayExecutionThread;
_imp_KeDeregisterBugCheckCallback;
_imp_KeEnterCriticalRegion;
_imp_KeExpandKernelStackAndCalloutEx;
_imp_KeFlushQueuedDpcs;
_imp_KeGetCurrentProcessorNumberEx;
_imp_KeGetProcessorIndexFromNumber;
_imp_KeGetProcessorNumberFromIndex;
_imp_KeGetRecommendedSharedDataAlignment;
_imp_KeInitializeDpc;
_imp_KeInitializeEvent;
_imp_KeInitializeMutex;
_imp_KeInitializeSemaphore;
_imp_KeInitializeSpinLock;
_imp_KeInitializeTimer;
_imp_KeInitializeTimerEx;
_imp_KeInsertQueueDpc;
_imp_KeLeaveCriticalRegion;
_imp_KeLowerIrql;
_imp_KeQueryActiveGroupCount;
_imp_KeQueryActiveProcessorCountEx;
_imp_KeQueryDpcWatchdogInformation;
_imp_KeQueryGroupAffinity;
_imp_KeQueryHighestNodeNumber;
_imp_KeQueryLogicalProcessorRelationship;
_imp_KeQueryMaximumGroupCount;
_imp_KeQueryMaximumProcessorCountEx;
_imp_KeQueryNodeActiveAffinity;
_imp_KeQueryPerformanceCounter;
_imp_KeQueryTimeIncrement;
_imp_KeQueryTotalCycleTimeThread;
_imp_KeQueryUnbiasedInterruptTime;
_imp_KeReadStateEvent;
_imp_KeRegisterBugCheckCallback;
_imp_KeRegisterProcessorChangeCallback;
_imp_KeReleaseMutex;
_imp_KeReleaseSemaphore;
_imp_KeReleaseSpinLock;
_imp_KeReleaseSpinLockFromDpcLevel;
_imp_KeResetEvent;
_imp_KeRevertToUserGroupAffinityThread;
_imp_KeSetCoalescableTimer;
_imp_KeSetEvent;
_imp_KeSetIdealProcessorThread;
_imp_KeSetImportanceDpc;
_imp_KeSetPriorityThread;
_imp_KeSetSystemGroupAffinityThread;
_imp_KeSetTargetProcessorDpcEx;
_imp_KeSetTimer;
_imp_KeSetTimerEx;
_imp_KeSynchronizeExecution;
_imp_KeTestSpinLock;
_imp_KeTryToAcquireSpinLockAtDpcLevel;
_imp_KeWaitForSingleObject;
_imp_KfRaiseIrql;
_imp_KseQueryDeviceFlags;
_imp_KseRegisterShim;
_imp_MmAddVerifierThunks;
_imp_MmAllocateContiguousNodeMemory;
_imp_MmAllocateMappingAddress;
_imp_MmAllocateNodePagesForMdlEx;
_imp_MmAllocateNonCachedMemory;
_imp_MmBuildMdlForNonPagedPool;
_imp_MmFreeContiguousMemory;
_imp_MmFreeContiguousMemorySpecifyCache;
_imp_MmFreeMappingAddress;
_imp_MmFreeNonCachedMemory;
_imp_MmFreePagesFromMdl;
_imp_MmGetPhysicalAddress;
_imp_MmGetSystemRoutineAddress;
_imp_MmIsDriverVerifying;
_imp_MmIsDriverVerifyingByAddress;
_imp_MmIsVerifierEnabled;
_imp_MmLockPagableDataSection;
_imp_MmLockPagableSectionByHandle;
_imp_MmMapIoSpaceEx;
_imp_MmMapLockedPages;
_imp_MmMapLockedPagesSpecifyCache;
_imp_MmMapLockedPagesWithReservedMapping;
_imp_MmSizeOfMdl;
_imp_MmSystemRangeStart;
_imp_MmUnlockPagableImageSection;
_imp_MmUnmapIoSpace;
_imp_MmUnmapLockedPages;
_imp_NetioSetTriageBlock;
_imp_NmrClientAttachProvider;
_imp_NmrClientDetachProviderComplete;
_imp_NmrDeregisterProvider;
_imp_NmrRegisterClient;
_imp_NmrRegisterProvider;
_imp_NmrWaitForProviderDeregisterComplete;
_imp_NsiEnumerateObjectsAllParametersEx;
_imp_NsiRegisterChangeNotificationEx;
_imp_NsiSetAllParametersEx;
_imp_NsiSetObjectSecurity;
_imp_NsiSetParameterEx;
_imp_NtQuerySystemInformationEx;
_imp_ObCreateObject;
_imp_ObCreateObjectType;
_imp_ObGetObjectSecurity;
_imp_ObOpenObjectByPointer;
_imp_ObReferenceObjectByHandle;
_imp_ObReleaseObjectSecurity;
_imp_ObSetSecurityObjectByPointer;
_imp_ObfDereferenceObject;
_imp_ObfReferenceObject;
_imp_PcwAddInstance;
_imp_PcwRegister;
_imp_PoFxEnableDStateReporting;
_imp_PoQueryWatchdogTime;
_imp_PoRegisterPowerSettingCallback;
_imp_PoRequestPowerIrp;
_imp_PoSetPowerState;
_imp_PsCreateSystemThread;
_imp_PsDereferenceImpersonationToken;
_imp_PsGetCurrentProcess;
_imp_PsGetCurrentProcessSessionId;
_imp_PsGetCurrentThreadId;
_imp_PsGetJobProperty;
_imp_PsGetJobSessionId;
_imp_PsGetProcessJob;
_imp_PsGetProcessSessionId;
_imp_PsGetThreadProperty;
_imp_PsGetThreadSessionId;
_imp_PsJobType;
_imp_PsReferenceImpersonationToken;
_imp_PsSetJobProperty;
_imp_PsSetThreadProperty;
_imp_PsThreadType;
_imp_RtlAbsoluteToSelfRelativeSD;
_imp_RtlAddAccessAllowedAce;
_imp_RtlAnsiStringToUnicodeString;
_imp_RtlAppendUnicodeStringToString;
_imp_RtlAppendUnicodeToString;
_imp_RtlCaptureStackBackTrace;
_imp_RtlCharToInteger;
_imp_RtlCheckRegistryKey;
_imp_RtlClearAllBits;
_imp_RtlClearBit;
_imp_RtlClearBitEx;
_imp_RtlCompareMemory;
_imp_RtlCompareUnicodeString;
_imp_RtlCompareUnicodeStrings;
_imp_RtlCopyUnicodeString;
_imp_RtlCreateAcl;
_imp_RtlCreateHashTable;
_imp_RtlCreateRegistryKey;
_imp_RtlCreateSecurityDescriptor;
_imp_RtlCreateUnicodeString;
_imp_RtlDeleteRegistryValue;
_imp_RtlEqualUnicodeString;
_imp_RtlFindClearBitsAndSet;
_imp_RtlFindClearBitsAndSetEx;
_imp_RtlFindSetBits;
_imp_RtlFreeAnsiString;
_imp_RtlFreeUnicodeString;
_imp_RtlGUIDFromString;
_imp_RtlGetAce;
_imp_RtlGetDaclSecurityDescriptor;
_imp_RtlGetGroupSecurityDescriptor;
_imp_RtlGetOwnerSecurityDescriptor;
_imp_RtlGetSaclSecurityDescriptor;
_imp_RtlGetVersion;
_imp_RtlImageDirectoryEntryToData;
_imp_RtlInitAnsiString;
_imp_RtlInitUnicodeString;
_imp_RtlInitializeBitMap;
_imp_RtlInitializeBitMapEx;
_imp_RtlInitializeSid;
_imp_RtlInsertEntryHashTable;
_imp_RtlInt64ToUnicodeString;
_imp_RtlIntegerToUnicodeString;
_imp_RtlIsStateSeparationEnabled;
_imp_RtlLengthRequiredSid;
_imp_RtlLengthSecurityDescriptor;
_imp_RtlLengthSid;
_imp_RtlLookupEntryHashTable;
_imp_RtlMapGenericMask;
_imp_RtlNumberOfSetBits;
_imp_RtlNumberOfSetBitsUlongPtr;
_imp_RtlPrefixUnicodeString;
_imp_RtlQueryRegistryValuesEx;
_imp_RtlRemoveEntryHashTable;
_imp_RtlRunOnceExecuteOnce;
_imp_RtlRunOnceInitialize;
_imp_RtlSelfRelativeToAbsoluteSD;
_imp_RtlSetBit;
_imp_RtlSetBitEx;
_imp_RtlSetBits;
_imp_RtlSetDaclSecurityDescriptor;
_imp_RtlSetGroupSecurityDescriptor;
_imp_RtlSetOwnerSecurityDescriptor;
_imp_RtlStringFromGUID;
_imp_RtlTestBitEx;
_imp_RtlUnicodeStringToAnsiString;
_imp_RtlUnicodeStringToInteger;
_imp_RtlUpcaseUnicodeString;
_imp_RtlWriteRegistryValue;
_imp_SeAccessCheck;
_imp_SeAppendPrivileges;
_imp_SeCaptureSecurityDescriptor;
_imp_SeExports;
_imp_SeFreePrivileges;
_imp_SeLockSubjectContext;
_imp_SeQueryInformationToken;
_imp_SeSetSecurityDescriptorInfo;
_imp_SeUnlockSubjectContext;
_imp_VfQueryDispatchTable;
_imp_WfpNblInfoCleanup;
_imp_WfpNblInfoClone;
_imp_WmiGetClock;
_imp_WmiTraceMessageVa;
_imp_ZwAllocateLocallyUniqueId;
_imp_ZwClose;
_imp_ZwCreateFile;
_imp_ZwCreateKey;
_imp_ZwDeleteValueKey;
_imp_ZwEnumerateKey;
_imp_ZwLoadDriver;
_imp_ZwOpenFile;
_imp_ZwOpenKey;
_imp_ZwPowerInformation;
_imp_ZwQueryInformationFile;
_imp_ZwQuerySystemInformation;
_imp_ZwQueryValueKey;
_imp_ZwReadFile;
_imp_ZwSetSecurityObject;
_imp_ZwSetValueKey;
_imp_ZwUnloadDriver;
_imp_ZwUpdateWnfStateData;
_imp___C_specific_handler;
_imp__snwprintf;
_imp__vsnwprintf;
_imp__wcsicmp;
_imp__wcsnicmp;
_imp_bsearch;
_imp_imp_WppRecorderLogDelete;
_imp_memcpy_s;
_imp_qsort;
_imp_swprintf_s;
_imp_vswprintf_s;
_imp_wcscat_s;
_imp_wcschr;
_imp_wcscmp;
_imp_wcscpy_s;
_security_cookie;
_security_cookie_complement;
`ndisRegisterNetworkActivityCyclesCounterSet'::`2'::Descriptors;
`ndisRegisterNetworkDirectCounterSet'::`2'::Descriptors;
`ndisRegisterNetworkInterfaceCounterSet'::`2'::Descriptors;
`ndisRegisterPDECUtilizationCounterSet'::`2'::Descriptors;
`ndisRegisterPDQueueDepthCounterSet'::`2'::Descriptors;
`ndisRegisterPDRxFilterCounterSet'::`2'::Descriptors;
`ndisRegisterPDRxQueueCounterSet'::`2'::Descriptors;
`ndisRegisterPDTxQueueCounterSet'::`2'::Descriptors;
`ndisRegisterPhysicalNICCounterSet'::`2'::Descriptors;
g_AssertSpinLock;
g_AssertsOperational;
g_DeviceReadyNotificationName;
g_MicrosoftTelemetryAssertsTriggeredList;
g_MiniportHookDrivers;
g_MiniportHookDriversLock;
g_ModuleName;
g_NetPacketStateUpdateWorkItem;
g_WdiLoadInProgress;
g_WdiLoadLock;
g_WdiLoadState;
g_WdiLoadedByNdis;
g_WdiRefCount;
g_ndisWatchdogList;
g_ndisWatchdogLock;
g_ndisWatchdogSequenceNumber;
g_wil_details_pfnFeatureLoggingHook;
g_wil_details_recordFeatureUsage;
load_config_used;
ndisAbortedRequests;
ndisAbortedRequestsIndex;
ndisAbortedRequestsListLock;
ndisAcOnLine;
ndisAdapterStr;
ndisAllowFlowControl;
ndisAllowWakeFromS5;
ndisAoAcCapable;
ndisAoAcMaxStartToRefTime;
ndisAoAcMaxWakeToRefTime;
ndisAoAcTest;
ndisAoAcTestOverride;
ndisBindUnbindCallbackObject;
ndisBootFinishedTime;
ndisBreakNbl;
ndisBugCheckOnReenumerationTimeout;
ndisCancelId;
ndisChecked;
ndisCloneableStatusIndications;
ndisCmCleanupDpc;
ndisCmCleanupScheduled;
ndisCmCleanupTimer;
ndisCmCleanupWorkItem;
ndisCmSession;
ndisCmSessionCount;
ndisCmSessionLock;
ndisCmStateObjectType;
ndisCmWorkItemQueued;
ndisCoSupportedGuids;
ndisConnectedStandby;
ndisControlGuid;
ndisCorrelationCounter;
ndisCpuInfo;
ndisCsResiliency;
ndisDatapathVerifierMode;
ndisDebugLoggingMode;
ndisDefaultNapsState;
ndisDefaultNetworkGuid;
ndisDefaultPnPCapabilities;
ndisDeviceObject;
ndisDeviceStr;
ndisDirectOidRequestPathOids;
ndisDirectedMacForNapsState;
ndisDllInitialized;
ndisDmaAlignment;
ndisDosDevicesStr;
ndisDpcWatchdogLimit;
ndisDriverObject;
ndisDriverPoolType;
ndisDriverTrackAlloc;
ndisDriverTrackAllocList;
ndisDummyObject;
ndisEnableNicAutoPowerSaverInSleepStudy;
ndisEnforceDisconnectedStandby;
ndisFdoDeviceStr;
ndisFdoIndex;
ndisFilterAdapterParamsStr;
ndisFilterAdapterStr;
ndisFilterDriverList;
ndisFilterDriverListLock;
ndisFilterDriverParamsStr;
ndisFilterInstanceParamsStr;
ndisFlags;
ndisGlobalFilterList;
ndisGlobalFilterListLock;
ndisGlobalLock;
ndisGlobalNetBufferListPoolList;
ndisGlobalNetBufferListPoolListLock;
ndisGlobalNetBufferPoolList;
ndisGlobalNetBufferPoolListLock;
ndisGlobalOpenList;
ndisGlobalOpenListLock;
ndisGlobalPacketPoolList;
ndisGlobalPacketPoolListLock;
ndisGlobalPortReceiveAuthorizationState;
ndisGlobalPortReceiveControlState;
ndisGlobalPortSendAuthorizationState;
ndisGlobalPortSendControlState;
ndisGlobalTimerList;
ndisGlobalTimerListLock;
ndisGlobalTriageBlock;
ndisHandledNdis5Ndis6GenOids;
ndisHandledNdis5Ndis6_802_3_Oids;
ndisHandledNdis6OnlyGenOids;
ndisHandledNdis6Only_802_3_Oids;
ndisHandledWdfOids;
ndisHandledWmbClassOids;
ndisIfAllocatedInterfaceIndexes;
ndisIfBlockMiniportLinkLock;
ndisIfCompartmentCount;
ndisIfCompartmentList;
ndisIfList;
ndisIfListLock;
ndisIfLoopbackAlias;
ndisIfLoopbackDescr;
ndisIfLoopbackProviderHandle;
ndisIfNetworkCount;
ndisIfNetworkList;
ndisIfProviderHandle;
ndisIfProviderList;
ndisIfProviderListLock;
ndisIfSiteIdWrapped;
ndisIfSiteScopeId;
ndisIfStackEntryList;
ndisIfStackEntryLock;
ndisIfTypesList;
ndisInstanceNumber;
ndisIntReqGeneric;
ndisIntReqIoctl;
ndisIntReqNsi;
ndisIntReqRestore;
ndisIntReqWmi;
ndisInterfaceCount;
ndisIsScreenOnNapsEnabled;
ndisIterativeDataPathDisabled;
ndisLastCsEntryTime;
ndisLastCsScenarioInstanceId;
ndisLastFailedNblTracker;
ndisLogger;
ndisLowPowerEpoch;
ndisMaxCacheLineSize;
ndisMaxCachedNblContextSize;
ndisMaxNumRssCpus;
ndisMaxNumberFilterPerAdapter;
ndisMaxNumberOfProcessors;
ndisMdlMappingNxFlag;
ndisMediaSupportedGuids;
ndisMediaTypeCl;
ndisMediumArray;
ndisMediumArraySize;
ndisMediumBuffer;
ndisMiniDriverList;
ndisMiniDriverListLock;
ndisMiniportDeviceReadyRegistrationHandle;
ndisMiniportList;
ndisMiniportListLock;
ndisMiniportTrackAlloc;
ndisMiniportTrackAllocList;
ndisMpHookNmrClientHandle;
ndisNblTrackerEpoch;
ndisNblTrackerHistoryBuffer;
ndisNblTrackerHistoryNextIndex;
ndisNblTrackerHistorySize;
ndisNblTrackerLeakedNblDisposition;
ndisNblTrackerList;
ndisNblTrackerListLock;
ndisNblTrackerMode;
ndisNblTrackerNblTimeoutMilliseconds;
ndisNblTrackerStuckNblDisposition;
ndisNblTrackerTimer;
ndisNetBufferListPool;
ndisNetBufferPool;
ndisNetworkActivityCyclesCounterSet;
ndisNetworkDirectCounterSet;
ndisNetworkInterfaceCounterSet;
ndisNicQuietDerefDefaultTimeout;
ndisNicQuietDerefExtendedTimeout;
ndisNicQuietInitTimeout;
ndisNicQuietWakeTimeout;
ndisNoPauseOnSuspend;
ndisNsiClientCompartmentChangeNotificationHandle;
ndisNsiClientInterfaceChangeNotificationHandle;
ndisNsiClientInterfaceEnumChangeNotificationHandle;
ndisNsiClientNetworkChangeNotificationHandle;
ndisNsiClientTimestampChangeNotificationHandle;
ndisNsiInitOnceBlock;
ndisNsiInitialized;
ndisNsiInterfaceProviderHandle;
ndisNsiSavedClientNpi;
ndisNumberOfActiveProcessorsAtBoot;
ndisPDECUtilizationCounterSet;
ndisPDQueueDepthCounterSet;
ndisPDRxFilterCounterSet;
ndisPDRxQueueCounterSet;
ndisPDTxQueueCounterSet;
ndisPacketStackSize;
ndisPadShortPackets;
ndisParameterStr;
ndisPcwConsumerList;
ndisPcwDataBlockList;
ndisPcwMutex;
ndisPcwOffsetToPerCpuData;
ndisPcwPerCpuDataStride;
ndisPcwSystemTotalInstanceName;
ndisPerCpuPoisonPills;
ndisPerProcRcvTrackers;
ndisPerProcessorDescriptorList;
ndisPerProcessorDescriptorLock;
ndisPeriodicReceives;
ndisPeriodicReceivesMutex;
ndisPeriodicReceivesNblCounts;
ndisPhysicalNICCounterSet;
ndisPkgs;
ndisPnPMutex;
ndisPnpSecurityDescriptor;
ndisPowerRefManagementState;
ndisPowerStateCallbackHandle;
ndisProtocolList;
ndisProtocolListLock;
ndisRWLocksOwnedByThread;
ndisRcv100BytesLL;
ndisRcv1514BytesLL;
ndisRecvPacketPool;
ndisRefCountReferenceCountOverflow;
ndisRegistryPath;
ndisRssBaseCpu;
ndisRssCpuCount;
ndisRssProcessors;
ndisSecurityDescriptor;
ndisSendPacketPool;
ndisSriovSupportTestOverride;
ndisStackExpansionFaultInjectionLevel;
ndisStackExpansionFaultInjectionRatio;
ndisStackTraces;
ndisStartDeviceSync;
ndisStatusSupportedGuids;
ndisSupportedGuids;
ndisSystemProcessorInfo;
ndisSystemSupportsSriov;
ndisTdiPnPHandler;
ndisTdiRegisterCallback;
ndisTimeIncrement;
ndisTrackMemLock;
ndisUsedIndicesMutex;
ndisVBus;
ndisVeriferFailedAllocations;
ndisVerifierLevel;
ndisVerifierNdisDispatch;
ndisVerifierWdmDispatch;
ndisWatchdogForceBugCheckForWDI;
ndisWatchdogInfo;
ndisWorkItemLog;
ndisWorkitemDpcs;
ndisWppEnabledLevelPerFlag;
pfnEtwRegisterClassicProvider;
pfnWppGetVersion;
pfnWppQueryTraceInformation;
traceInited;
HAL_NULL_THUNK_DATA;
NETIO_NULL_THUNK_DATA;
WppRecorder_NULL_THUNK_DATA;
ntoskrnl_NULL_THUNK_DATA;

<lambda_1f70e7b164a43a0d336a36d71bfafc03>::<lambda_invoker_cdecl>();
<lambda_1fb5030af8eda575469a2cf1deeace82>::operator()();
<lambda_3586b9b7f2fd6000f93b66a493a8f736>::<lambda_invoker_cdecl>();
<lambda_36d6f42f749579043faa114aff526cbd>::operator()();
<lambda_544ec5177f50874f26890ac2c9d93654>::<lambda_invoker_cdecl>();
<lambda_55dd5fd2ac8d6f91724a8900c7ec63ca>::<lambda_invoker_cdecl>();
<lambda_727c6594aeeec297d735c04587a6780c>::<lambda_invoker_cdecl>();
<lambda_8cf7bed277b840ea59cbc6a15c16d068>::<lambda_invoker_cdecl>();
<lambda_8cf7bed277b840ea59cbc6a15c16d068>::operator()();
<lambda_90693e01559ab5daa9d90de50bdb401e>::operator()();
<lambda_a13a88d06c7c63155a98f7d7ba7090a7>::<lambda_invoker_cdecl>();
<lambda_adb42f86cf839cbbe3c588eaa9665cd9>::<lambda_invoker_cdecl>();
<lambda_f1f475d4aaff1d18d6eae9fe5eca1b95>::operator()();
<lambda_f4659669a09bc9ccc8248dde096c32cd>::<lambda_invoker_cdecl>();
??$make_unique_nothrow@UNDIS_BIND_FILTER_LINK@@$$V@wil@@YA?AV?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@XZ();
?reset@?$unique_storage@U?$resource_policy@PEAUNDISWATCHDOG__@@P6AXPEAU1@@Z$1?ndisFreeWatchdog@@YAX0@ZU?$integral_constant@_K$00@wistd@@PEAU1@$0?0$$T@details@wil@@@details@wil@@QEAAXPEAUNDISWATCHDOG__@@@Z();
AddAces();
AutoAcquireMiniportSpinLock::~AutoAcquireMiniportSpinLock();
COMPARTMENTBLOCK_DECREMENT_REF();
CmRegUtilCreateUcKey();
CmRegUtilCreateWstrKey();
CmRegUtilOpenExistingUcKey();
CmRegUtilOpenExistingWstrKey();
CmRegUtilUcValueGetDword();
CmRegUtilUcValueGetFullBuffer();
CmRegUtilUcValueSetUcString();
CmRegUtilWstrValueGetDword();
CmRegUtilWstrValueSetFullBuffer();
CmRegUtilWstrValueSetWstrString();
CmpRegUtilAllocateUnicodeString();
ComputeRoundedAverage();
CopyPartialStringToBuffer<64>();
CreateDeviceDriverSecurityDescriptor();
DecrementReadConcurrency();
DereferenceWdi();
DisableMagicPacketKeyword();
DriverEntry();
Duplicate802_11AttachAttributes();
Duplicate802_11AttachAttributesCommon();
EthCreateFilter();
EthDeleteFilter();
EthDeleteFilterOpenAdapter();
EthFilterDprIndicateReceive();
EthFilterDprIndicateReceiveComplete();
EthIndicateReceive();
EthInitializeFilter();
EthQueryGlobalFilterAddresses();
EthQueryOpenFilterAddresses();
EtwEx_tidActivityInfoTransfer();
ExAllocateFromNPagedLookasideList();
ExFreeToNPagedLookasideList();
FindExportedRoutineByName();
GetMiniportFromReqTracker();
GetMsgDpc();
GetPkeyName();
GsDriverEntry();
IFBLOCK_DECREMENT_REF();
IFBLOCK_DEREFERENCE_MINIPORT_LINK();
IncrementReadConcurrency();
InitializeTelemetryAssertsKM();
IoDevObjCreateDeviceSecure();
IopDevObjApplyPostCreationSettings();
IsIfBlockAvailable();
IsOidRequestDirectOid();
IsReadLockAlreadyHeldByCurrentThread();
IsRebalanceNeeded();
Iterate();
KLockHolder::AcquireExclusive();
KLockHolder::AcquireShared();
KLockHolder::ReleaseExclusive();
KLockHolder::ReleaseShared();
KLockHolder::~KLockHolder();
KPushLock::KPushLock();
KPushLockManualConstruct::Initialize();
KRef<NDIS_BIND_FILTER_DRIVER>::KRefHolder::`scalar deleting destructor'();
KRef<NDIS_BIND_FILTER_DRIVER>::`scalar deleting destructor'();
KRef<NDIS_BIND_FILTER_DRIVER>::allocate<>();
KRef<NDIS_BIND_FILTER_DRIVER>::reset();
KRef<NDIS_BIND_PROTOCOL_DRIVER>::KRefHolder::`scalar deleting destructor'();
KRef<NDIS_BIND_PROTOCOL_DRIVER>::`scalar deleting destructor'();
KRef<NDIS_BIND_PROTOCOL_DRIVER>::allocate<>();
KRef<NDIS_BIND_PROTOCOL_DRIVER>::operator=();
KRef<NDIS_BIND_PROTOCOL_DRIVER>::reset();
KRegKey::DeleteValue();
KRegKey::GetSubkeyName();
KRegKey::Open();
KRegKey::QueryValueBlob<<lambda_195928ecaabee91b0db244d6e7f18b31> >();
KRegKey::QueryValueBlob<<lambda_1e1d3c9721006777a03f858ff1740b3c> >();
KRegKey::QueryValueBlob<<lambda_36d6f42f749579043faa114aff526cbd> >();
KRegKey::QueryValueBlob<<lambda_3d3ed660da3e95067e62aa13ddce3517> >();
KRegKey::QueryValueBlob<<lambda_4c31316cd24b7a1a6237bdc5842aee51> >();
KRegKey::QueryValueBlob<<lambda_70cb5823003e089218b0c358f25a9137> >();
KRegKey::QueryValueBlob<<lambda_9a155988ce118065af57228fb750d321> >();
KRegKey::QueryValueBlob<<lambda_bc7a44a56f15b2257a2340eb3a455b3d> >();
KRegKey::QueryValueBlob<<lambda_f1f475d4aaff1d18d6eae9fe5eca1b95> >();
KRegKey::QueryValueBoolean();
KRegKey::QueryValueMultisz<<lambda_29d8629352f6f89c7b5645c91a914417>,<lambda_b682bc781c4d660a15b7c549a2c203d1> >();
KRegKey::QueryValueMultisz<<lambda_85acd3deb7e2b285fd367942132eb91d>,<lambda_e719d81758cdea2b5e7ebe082982c952> >();
KRegKey::QueryValueMultisz<<lambda_c8f07734eb94a31c9886b9ad420b8d4d>,<lambda_90693e01559ab5daa9d90de50bdb401e> >();
KRegKey::QueryValueString();
KRegKey::QueryValueUlong();
KRegKey::QueryValueUshort();
KRegKey::SetValueUlong();
KStackStorage<NDIS_SYNCHRONOUS_OID_CALLFRAME,7>::Pop();
KStackStorage<NDIS_SYNCHRONOUS_OID_CALLFRAME,7>::Push();
KWaitEventBase<wistd::integral_constant<enum _EVENT_TYPE,0> >::Wait();
KWorkItemBase<MINIPORT_HOOK_DRIVER,KCoalescingWorkItem<MINIPORT_HOOK_DRIVER> >::CallbackThunk();
KWorkItemBase<Ndis::BindEngine,KWorkItem<Ndis::BindEngine> >::CallbackThunk();
KWorkItemBase<_NDIS_PROTOCOL_BLOCK,KCoalescingWorkItem<_NDIS_PROTOCOL_BLOCK> >::CallbackThunk();
LwfBindProperties::`scalar deleting destructor'();
MINIPORT_HOOK_DRIVER::Deregister();
MINIPORT_HOOK_DRIVER::DeregisterAsync();
MINIPORT_HOOK_DRIVER::FillDefaultHandlers();
MINIPORT_HOOK_DRIVER::MINIPORT_HOOK_DRIVER();
MINIPORT_HOOK_DRIVER::Register();
MINIPORT_HOOK_DRIVER::WaitForAllHookedDriversToDeregister();
MakeExtendedPoolPtr<_UNICODE_STRING>();
MakeSizedPoolPtr<_MDL>();
MakeSizedPoolPtr<_UNICODE_STRING>();
McGenControlCallbackV2();
McGenEventRegister();
McGenEventWrite();
McTemplateK0();
McTemplateK0j();
McTemplateK0jqbr1();
McTemplateK0jqx();
McTemplateK0jqxb6();
McTemplateK0jqxd();
McTemplateK0jqxdd();
McTemplateK0jqxddq();
McTemplateK0jqxjqxdd();
McTemplateK0jqxptdq();
McTemplateK0jqxq();
McTemplateK0jqxqd();
McTemplateK0jqxqdq();
McTemplateK0jqxqq();
McTemplateK0jqxqqq();
McTemplateK0jqxqqt();
McTemplateK0jqxtpp();
McTemplateK0jqxz();
McTemplateK0jqxzd();
McTemplateK0jqxzdd();
McTemplateK0jqxzq();
McTemplateK0jqxzqq();
McTemplateK0jqxzqqQR5();
McTemplateK0juqjzzz();
McTemplateK0pp();
McTemplateK0q();
McTemplateK0qq();
McTemplateK0qqq();
McTemplateK0qqqqqqqq();
McTemplateK0qqx();
McTemplateK0qx();
McTemplateK0qxq();
McTemplateK0qxqqq();
McTemplateK0qxxq();
McTemplateK0qxzzxxxxxx();
McTemplateK0qzz();
McTemplateK0ujjp();
McTemplateK0ujqzr2jx();
McTemplateK0x();
McTemplateK0xq();
McTemplateK0xqq();
McTemplateK0xqqq();
McTemplateK0xqx();
McTemplateK0z();
McTemplateK0zq();
MediaTypeToPacketType();
MicrosoftTelemetryAssertTriggeredNoArgsKM();
MicrosoftTelemetryAssertTriggeredWorker();
Microsoft_Windows_Networking_Correlation_EtwEnableCallback();
MiniportSupportsReceiveThrottle();
MoveClientToNextState();
NDISM_SEND_PACKET_STATS();
NDIS_ADDDEVICE_PARAMETERS::~NDIS_ADDDEVICE_PARAMETERS();
NDIS_BIND_DRIVER_BASE::ForEachLink();
NDIS_BIND_DRIVER_BASE::SetRunningDriverIsReady();
NDIS_BIND_FILTER_DRIVER::SetRunningDriver();
NDIS_BIND_LINK_BASE::LinkToDriver();
NDIS_BIND_LINK_BASE::NDIS_BIND_LINK_BASE();
NDIS_BIND_LINK_BASE::~NDIS_BIND_LINK_BASE();
NDIS_BIND_PROTOCOL_DRIVER::SetRunningDriver();
NDIS_BUFFER_TO_SPAN_PAGES();
NDIS_COUNT_POWER_TRANSITION();
NDIS_FREE_XFER_DATA_PACKET();
NDIS_NDK_PCW_NUM_COUNTERS_SET_IN_MASK();
NDIS_PD_BM_DOMAIN::Deref();
NDIS_PD_COUNTER::`scalar deleting destructor'();
NDIS_PD_EC::`scalar deleting destructor'();
NDIS_PD_FILTER::`scalar deleting destructor'();
NDIS_PD_MEM_BLOCK::`scalar deleting destructor'();
NDIS_PD_QUEUE_TRACKER::NDIS_PD_QUEUE_TRACKER();
NDIS_PD_QUEUE_TRACKER::`scalar deleting destructor'();
NDIS_RESTART_INFORMATION::~NDIS_RESTART_INFORMATION();
NDIS_STACK_RESERVED_FROM_PACKET();
NETWORKBLOCK_DECREMENT_REF();
Ndis::BindEngine::ApplyBindChanges();
Ndis::BindEngine::ApplyRules();
Ndis::BindEngine::BeginPolicyUpdates();
Ndis::BindEngine::BindEngine();
Ndis::BindEngine::DispatchPendingWork();
Ndis::BindEngine::EndBindOperation();
Ndis::BindEngine::EndPolicyUpdates();
Ndis::BindEngine::GetCurrentLink();
Ndis::BindEngine::Initialize();
Ndis::BindEngine::Iterate();
Ndis::BindEngine::SetDirty();
Ndis::BindEngine::UpdateBindings();
Ndis::BindEngine::UpdateBindingsWorkItem();
Ndis::BindEngine::~BindEngine();
Ndis::BindRegistry::AddBindingToSet<NDIS_BIND_FILTER_LINK>();
Ndis::BindRegistry::AddBindingToSet<NDIS_BIND_PROTOCOL_LINK>();
Ndis::BindRegistry::CheckRegistryForFilterBindLogicMode();
Ndis::BindRegistry::ReadNetworkInterfaceListV2();
Ndis::BindRegistry::ReadNetworkInterfaceV2();
Ndis::BindRegistry::Reload();
Ndis::BindRegistry::UpdateFilters();
Ndis::BindRegistry::UpdateFiltersFullStackRebind();
Ndis::BindRegistry::UpdateProtocols();
Ndis::BindRules::Apply();
Ndis::BindRules::CheckForDriverLoaded();
Ndis::BindRules::CheckForVBusDependency();
Ndis::BindRules::CheckMissingMandatoryFilter();
Ndis::BindRules::CoalesceFilterAttachDuringBoot();
Ndis::BindRules::MakeOptionalFiltersMandatoryDuringBoot();
Ndis::BindRules::PauseNeededForBind();
Ndis::BindRules::ReEnableTemporaryUnbind();
Ndis::BindRules::ReStartTemporaryPause();
Ndis::BindRules::RetryProtocolBindingsAfterMiniportChange();
Ndis::BindRules::UnbindIncompatibleDriversForMacChange();
Ndis::BindRules::UnbindMiniportStack();
Ndis::BindRules::UnbindOnAttach();
Ndis::BindRules::UnbindOnDetach();
Ndis::BindStack::AddStaticFilterBinding();
Ndis::BindStack::AddStaticProtocolBinding();
Ndis::BindStack::BindStack();
Ndis::BindStack::BuildFilterLink();
Ndis::BindStack::BuildProtocolLink();
Ndis::BindStack::CreateDynamicBinding();
Ndis::BindStack::ReadV2InterfaceBindings();
Ndis::BindStack::~BindStack();
Ndis::BindState::AddBindContext();
Ndis::BindState::BindState();
Ndis::BindState::GetActualBindingState();
Ndis::BindState::GetBindContext();
Ndis::BindState::IsAlive();
Ndis::BindState::RemoveBindContext();
Ndis::BindState::SetBinding();
Ndis::BindState::SetPause();
Ndis::Initmode::CheckAllDriversRunning();
Ndis::Initmode::DisableIfNeeded();
Ndis::sortProtocolsByPointer();
NdisAcquireRWLockRead();
NdisAcquireRWLockWrite();
NdisAcquireReadWriteLock();
NdisAcquireSpinLock();
NdisActiveGroupCount();
NdisAdjustBufferLength();
NdisAdjustNetBufferCurrentMdl();
NdisAdvanceNetBufferDataStart();
NdisAdvanceNetBufferListDataStart();
NdisAllocateBuffer();
NdisAllocateBufferPool();
NdisAllocateCloneNetBufferList();
NdisAllocateCloneOidRequest();
NdisAllocateFragmentNetBufferList();
NdisAllocateGenericObject();
NdisAllocateIoWorkItem();
NdisAllocateMdl();
NdisAllocateMemory();
NdisAllocateMemoryWithTag();
NdisAllocateMemoryWithTagPriority();
NdisAllocateNetBuffer();
NdisAllocateNetBufferAndNetBufferList();
NdisAllocateNetBufferList();
NdisAllocateNetBufferListContext();
NdisAllocateNetBufferListPool();
NdisAllocateNetBufferMdlAndData();
NdisAllocateNetBufferPool();
NdisAllocatePacket();
NdisAllocatePacketPool();
NdisAllocatePacketPoolEx();
NdisAllocateRWLock();
NdisAllocateReassembledNetBufferList();
NdisAllocateRefCount();
NdisAllocateSharedMemory();
NdisAllocateSpinLockExported();
NdisAllocateTimerObject();
NdisAnsiStringToUnicodeString();
NdisBindBuilderGlobal::NdisBindBuilderGlobal();
NdisBindBuilderGlobal::~NdisBindBuilderGlobal();
NdisBufferLength();
NdisBufferVirtualAddress();
NdisBuildScatterGatherList();
NdisCancelDirectOidRequest();
NdisCancelOidRequest();
NdisCancelSendNetBufferLists();
NdisCancelSendPackets();
NdisCancelTimer();
NdisCancelTimerObject();
NdisClAddParty();
NdisClCloseAddressFamily();
NdisClCloseCall();
NdisClDeregisterSap();
NdisClDropParty();
NdisClGetProtocolVcContextFromTapiCallId();
NdisClIncomingCallComplete();
NdisClMakeCall();
NdisClModifyCallQoS();
NdisClNotifyCloseAddressFamilyComplete();
NdisClOpenAddressFamily();
NdisClOpenAddressFamilyEx();
NdisClRegisterSap();
NdisCloseAdapter();
NdisCloseAdapterEx();
NdisCloseConfiguration();
NdisCloseFile();
NdisCloseNDKAdapter();
NdisCmActivateVc();
NdisCmAddPartyComplete();
NdisCmCloseAddressFamilyComplete();
NdisCmCloseCallComplete();
NdisCmDeactivateVc();
NdisCmDeregisterSapComplete();
NdisCmDispatchCallConnected();
NdisCmDispatchIncomingCall();
NdisCmDispatchIncomingCallQoSChange();
NdisCmDispatchIncomingCloseCall();
NdisCmDispatchIncomingDropParty();
NdisCmDropPartyComplete();
NdisCmMakeCallComplete();
NdisCmModifyCallQoSComplete();
NdisCmNotifyCloseAddressFamily();
NdisCmOpenAddressFamilyComplete();
NdisCmRegisterAddressFamily();
NdisCmRegisterAddressFamilyEx();
NdisCmRegisterSapComplete();
NdisCoAssignInstanceName();
NdisCoCreateVc();
NdisCoDeleteVc();
NdisCoGetTapiCallId();
NdisCoOidRequest();
NdisCoOidRequestComplete();
NdisCoRequest();
NdisCoRequestComplete();
NdisCoSendNetBufferLists();
NdisCoSendPackets();
NdisCompleteBindAdapter();
NdisCompleteBindAdapterEx();
NdisCompleteDmaTransfer();
NdisCompleteNetPnPEvent();
NdisCompletePnPEvent();
NdisCompleteUnbindAdapter();
NdisCompleteUnbindAdapterEx();
NdisConvertNdisStatusToNtStatus();
NdisConvertNtStatusToNdisStatus();
NdisCopyBuffer();
NdisCopyFromNetBufferToNetBuffer();
NdisCopyFromPacketToPacket();
NdisCopyFromPacketToPacketSafe();
NdisCopyReceiveNetBufferListInfo();
NdisCopySendNetBufferListInfo();
NdisCurrentGroupAndProcessor();
NdisCurrentProcessorIndexExported();
NdisDereferenceWithTag();
NdisDeregisterDeviceEx();
NdisDeregisterProtocol();
NdisDeregisterProtocolDriver();
NdisDeregisterTdiCallBack();
NdisDirectOidRequest();
NdisDllInitialize();
NdisDprAcquireReadWriteLock();
NdisDprAcquireSpinLock();
NdisDprReleaseReadWriteLock();
NdisDprReleaseSpinLock();
NdisEnumerateFilterModules();
NdisFCancelDirectOidRequest();
NdisFCancelOidRequest();
NdisFCancelSendNetBufferLists();
NdisFDeregisterFilterDriver();
NdisFDevicePnPEventNotify();
NdisFDirectOidRequest();
NdisFDirectOidRequestComplete();
NdisFGetOptionalSwitchHandlers();
NdisFIndicateReceiveNetBufferLists();
NdisFIndicateStatus();
NdisFNetPnPEvent();
NdisFOidRequest();
NdisFOidRequestComplete();
NdisFPauseComplete();
NdisFRegisterFilterDriver();
NdisFRestartComplete();
NdisFRestartFilter();
NdisFReturnNetBufferLists();
NdisFSendNetBufferLists();
NdisFSendNetBufferListsComplete();
NdisFSetAttributes();
NdisFSynchronousOidRequest();
NdisFreeBuffer();
NdisFreeBufferPool();
NdisFreeCloneNetBufferList();
NdisFreeCloneOidRequest();
NdisFreeFragmentNetBufferList();
NdisFreeGenericObject();
NdisFreeIoWorkItem();
NdisFreeMdl();
NdisFreeMemory();
NdisFreeMemoryWithTag();
NdisFreeMemoryWithTagPriority();
NdisFreeNetBuffer();
NdisFreeNetBufferList();
NdisFreeNetBufferListContext();
NdisFreeNetBufferListPool();
NdisFreeNetBufferPool();
NdisFreePacket();
NdisFreePacketPool();
NdisFreeRWLock();
NdisFreeReassembledNetBufferList();
NdisFreeRefCount();
NdisFreeScatterGatherList();
NdisFreeSharedMemory();
NdisFreeSpinLockExported();
NdisFreeTimerObject();
NdisGeneratePartialCancelId();
NdisGetAndReferenceCompartmentJobObject();
NdisGetBufferPhysicalArraySize();
NdisGetCurrentProcessorCounts();
NdisGetCurrentProcessorCpuUsage();
NdisGetCurrentSystemTime();
NdisGetDataBuffer();
NdisGetDeviceReservedExtension();
NdisGetDriverHandle();
NdisGetFirstBufferFromPacket();
NdisGetFirstBufferFromPacketSafe();
NdisGetHypervisorInfo();
NdisGetJobObjectCompartmentId();
NdisGetNetBufferListProtocolId();
NdisGetPacketCancelId();
NdisGetPacketFromNetBufferList();
NdisGetPoolFromNetBuffer();
NdisGetPoolFromNetBufferList();
NdisGetPoolFromPacket();
NdisGetProcessObjectCompartmentId();
NdisGetProcessorInformation();
NdisGetProcessorInformationEx();
NdisGetReceivedPacket();
NdisGetRefCount();
NdisGetRoutineAddress();
NdisGetRssProcessorInformation();
NdisGetSessionCompartmentId();
NdisGetSessionToCompartmentMappingEpochAndZero();
NdisGetSharedDataAlignment();
NdisGetSystemUpTime();
NdisGetSystemUpTimeEx();
NdisGetThreadObjectCompartmentId();
NdisGetThreadObjectCompartmentScope();
NdisGetVersion();
NdisGetVersion640Shim();
NdisGroupActiveProcessorCount();
NdisGroupActiveProcessorMask();
NdisGroupMaxProcessorCount();
NdisIMAssociateMiniport();
NdisIMCancelInitializeDeviceInstance();
NdisIMCopySendCompletePerPacketInfo();
NdisIMCopySendPerPacketInfo();
NdisIMDeInitializeDeviceInstance();
NdisIMDeregisterLayeredMiniport();
NdisIMGetBindingContext();
NdisIMGetCurrentPacketStack();
NdisIMGetDeviceContext();
NdisIMInitializeDeviceInstance();
NdisIMInitializeDeviceInstanceEx();
NdisIMNotifyPnPEvent();
NdisIMQueueMiniportCallback();
NdisIMRegisterLayeredMiniport();
NdisIMRevertBack();
NdisIMSwitchToMiniport();
NdisIMVBusDeviceAdd();
NdisIMVBusDeviceRemove();
NdisIfAddIfStackEntry();
NdisIfAllocateNetLuidIndex();
NdisIfAllocateNetLuidIndexEx();
NdisIfDeleteIfStackEntry();
NdisIfDeregisterInterface();
NdisIfDeregisterProvider();
NdisIfFreeNetLuidIndex();
NdisIfGetInterfaceIndexFromNetLuid();
NdisIfGetNetLuidFromInterfaceIndex();
NdisIfQueryBindingIfIndex();
NdisIfRegisterInterface();
NdisIfRegisterProvider();
NdisImmediateReadPciSlotInformation();
NdisImmediateReadPortUchar();
NdisImmediateReadPortUlong();
NdisImmediateReadPortUshort();
NdisImmediateReadSharedMemory();
NdisImmediateWritePciSlotInformation();
NdisImmediateWritePortUchar();
NdisImmediateWritePortUlong();
NdisImmediateWritePortUshort();
NdisImmediateWriteSharedMemory();
NdisInitializeEvent();
NdisInitializeReadWriteLock();
NdisInitializeString();
NdisInitializeTimer();
NdisInitializeWrapper();
NdisInitiateOffload();
NdisInterlockedAddUlong();
NdisInterlockedDecrement();
NdisInterlockedIncrement();
NdisInterlockedInsertHeadList();
NdisInterlockedInsertTailList();
NdisInterlockedPopEntryList();
NdisInterlockedPushEntryList();
NdisInterlockedRemoveHeadList();
NdisInvalidateOffload();
NdisIsStatusIndicationCloneable();
NdisLWMDeregisterMiniportDriver();
NdisLWMInitializeNetworkInterface();
NdisLWMRegisterMiniportDriver();
NdisLWMStartNetworkInterface();
NdisLWMUninitializeNetworkInterface();
NdisMAllocateMapRegisters();
NdisMAllocateNetBufferSGList();
NdisMAllocatePort();
NdisMAllocateSharedMemory();
NdisMAllocateSharedMemoryAsync();
NdisMAllocateSharedMemoryAsyncEx();
NdisMCancelTimer();
NdisMCloseLog();
NdisMCmActivateVc();
NdisMCmCreateVc();
NdisMCmDeactivateVc();
NdisMCmDeleteVc();
NdisMCmOidRequest();
NdisMCmRegisterAddressFamily();
NdisMCmRegisterAddressFamilyEx();
NdisMCmRequest();
NdisMCoActivateVcComplete();
NdisMCoDeactivateVcComplete();
NdisMCoIndicateReceiveNetBufferLists();
NdisMCoIndicateReceivePacket();
NdisMCoIndicateStatus();
NdisMCoIndicateStatusEx();
NdisMCoOidRequestComplete();
NdisMCoReceiveComplete();
NdisMCoRequestComplete();
NdisMCoSendComplete();
NdisMCoSendNetBufferListsComplete();
NdisMCompleteBufferPhysicalMapping();
NdisMConfigMSIXTableEntry();
NdisMCreateLog();
NdisMDeregisterAdapterShutdownHandler();
NdisMDeregisterDevice();
NdisMDeregisterDmaChannel();
NdisMDeregisterInterrupt();
NdisMDeregisterInterruptEx();
NdisMDeregisterIoPortRange();
NdisMDeregisterMiniportDriver();
NdisMDeregisterScatterGatherDma();
NdisMDeregisterWdiMiniportDriver();
NdisMDirectOidRequestComplete();
NdisMEnableVirtualization();
NdisMFlushLog();
NdisMFreeMapRegisters();
NdisMFreeNetBufferSGList();
NdisMFreePort();
NdisMFreeSharedMemory();
NdisMGetBusData();
NdisMGetDeviceProperty();
NdisMGetDmaAlignment();
NdisMGetMiniportInitAttributes();
NdisMGetOffloadHandlers();
NdisMGetVirtualDeviceLocation();
NdisMGetVirtualFunctionBusData();
NdisMGetVirtualFunctionLocation();
NdisMIdleNotificationComplete();
NdisMIdleNotificationCompleteEx();
NdisMIdleNotificationConfirm();
NdisMIndicateReceiveNetBufferLists();
NdisMIndicateStatus();
NdisMIndicateStatusComplete();
NdisMIndicateStatusEx();
NdisMInitializeScatterGatherDma();
NdisMInitializeTimer();
NdisMInitiateOffloadComplete();
NdisMInvalidateConfigBlock();
NdisMInvalidateOffloadComplete();
NdisMMapIoSpace();
NdisMNetPnPEvent();
NdisMOffloadEventIndicate();
NdisMOidRequestComplete();
NdisMPauseComplete();
NdisMPciAssignResources();
NdisMPromoteMiniport();
NdisMQueryAdapterInstanceName();
NdisMQueryAdapterResources();
NdisMQueryInformationComplete();
NdisMQueryOffloadStateComplete();
NdisMQueryProbedBars();
NdisMQueueDpc();
NdisMQueueDpcEx();
NdisMReadConfigBlock();
NdisMReadDmaCounter();
NdisMReenumerateFailedAdapter();
NdisMRegisterAdapterShutdownHandler();
NdisMRegisterDevice();
NdisMRegisterDmaChannel();
NdisMRegisterInterrupt();
NdisMRegisterInterruptEx();
NdisMRegisterIoPortRange();
NdisMRegisterMiniport();
NdisMRegisterMiniportDriver();
NdisMRegisterScatterGatherDma();
NdisMRegisterUnloadHandler();
NdisMRegisterWdiMiniportDriver();
NdisMRemoveMiniport();
NdisMRemoveMiniportInternal();
NdisMRequestDpc();
NdisMResetComplete();
NdisMResetMiniport();
NdisMRestartComplete();
NdisMSendComplete();
NdisMSendNetBufferListsComplete();
NdisMSendResourcesAvailable();
NdisMSetAttributes();
NdisMSetAttributesEx();
NdisMSetBusData();
NdisMSetInformationComplete();
NdisMSetInterfaceCompartment();
NdisMSetMiniportAttributes();
NdisMSetMiniportSecondary();
NdisMSetPeriodicTimer();
NdisMSetTimer();
NdisMSetVirtualFunctionBusData();
NdisMSleep();
NdisMStartBufferPhysicalMapping();
NdisMSynchronizeWithInterrupt();
NdisMSynchronizeWithInterruptEx();
NdisMTerminateOffloadComplete();
NdisMTransferDataComplete();
NdisMTriggerPDDrainNotification();
NdisMUnmapIoSpace();
NdisMUpdateOffloadComplete();
NdisMWanIndicateReceive();
NdisMWanIndicateReceiveComplete();
NdisMWanSendComplete();
NdisMWriteConfigBlock();
NdisMWriteLogData();
NdisMapFile();
NdisMatchPdoWithPacket();
NdisMaxGroupCount();
NdisNblTrackerDeregisterComponent();
NdisNblTrackerQueryNblCurrentOwner();
NdisNblTrackerRecordEvent();
NdisNblTrackerRegisterComponent();
NdisNblTrackerTransferOwnership();
NdisNetworkInterfacePersistedState::NdisNetworkInterfacePersistedState();
NdisOffloadTcpDisconnect();
NdisOffloadTcpForward();
NdisOffloadTcpReceive();
NdisOffloadTcpReceiveReturn();
NdisOffloadTcpSend();
NdisOidRequest();
NdisOpenAdapter();
NdisOpenAdapterEx();
NdisOpenConfiguration();
NdisOpenConfigurationEx();
NdisOpenConfigurationKeyByIndex();
NdisOpenConfigurationKeyByName();
NdisOpenFile();
NdisOpenNDKAdapter();
NdisOpenProtocolConfiguration();
NdisOverrideBusNumber();
NdisPDAddProviderToBMGroup();
NdisPDAllocateBufferSet();
NdisPDAllocateMemory();
NdisPDAssociateNotificationEvent();
NdisPDAttachQueueToEC();
NdisPDBMAddMemberToDomain();
NdisPDBMAllocateCommonBuffer();
NdisPDBMCreateDomain();
NdisPDBMDeleteDomain();
NdisPDBMFreeCommonBuffer();
NdisPDBMRemoveMemberFromDomain();
NdisPDCleanup();
NdisPDCloseQueue();
NdisPDCompleteFetchedItems();
NdisPDCreateBMGroup();
NdisPDCreateQueue();
NdisPDDeleteBMGroup();
NdisPDDetachQueueFromEC();
NdisPDDrainCompletedItems();
NdisPDFetchPostedItems();
NdisPDFlushQueue();
NdisPDFreeBufferSet();
NdisPDFreeMemory();
NdisPDGetBuffersFromBufferSet();
NdisPDPIAcquireReceiveQueues();
NdisPDPIAllocateCounter();
NdisPDPIAllocateQueue();
NdisPDPIClearReceiveFilter();
NdisPDPIFlushQueue();
NdisPDPIFreeCounter();
NdisPDPIFreeQueue();
NdisPDPIPostAndDrainBufferList();
NdisPDPIPostAndDrainBufferListEx();
NdisPDPIProviderControl();
NdisPDPIQueryCounter();
NdisPDPIQueryQueueDepth();
NdisPDPIQueueControl();
NdisPDPIReleaseReceiveQueues();
NdisPDPIRequestDrainNotification();
NdisPDPISetReceiveFilter();
NdisPDPostAndDrainItems();
NdisPDPostItems();
NdisPDQueryQueueDepth();
NdisPDRemoveProviderFromBMGroup();
NdisPDReportECIteration();
NdisPDRequestDrainNotification();
NdisPDRequestFetchNotification();
NdisPDSetupBufferFromMemoryHandle();
NdisPDSetupBufferFromPdBuffer();
NdisPDStartEC();
NdisPDStartup();
NdisPDStopEC();
NdisPacketPoolUsage();
NdisPacketSize();
NdisProcessorIndexToNumber();
NdisProcessorNumberToIndex();
NdisQueryAdapterInstanceName();
NdisQueryBindInstanceName();
NdisQueryBuffer();
NdisQueryBufferOffset();
NdisQueryBufferSafe();
NdisQueryDiagnosticSetting();
NdisQueryMapRegisterCount();
NdisQueryNetBufferPhysicalCount();
NdisQueryOffloadState();
NdisQueryPacket();
NdisQueryPendingIOCount();
NdisQueueIoWorkItem();
NdisReEnumerateProtocolBindings();
NdisReadConfiguration();
NdisReadEisaSlotInformation();
NdisReadEisaSlotInformationEx();
NdisReadMcaPosInformation();
NdisReadNetworkAddress();
NdisReadPciSlotInformation();
NdisReadPcmciaAttributeMemory();
NdisReferenceWithTag();
NdisRegisterDeviceEx();
NdisRegisterProtocol();
NdisRegisterProtocolDriver();
NdisRegisterTdiCallBack();
NdisReleaseNicActive();
NdisReleaseRWLock();
NdisReleaseReadWriteLock();
NdisReleaseSpinLock();
NdisRequest();
NdisReset();
NdisResetEvent();
NdisRetreatNetBufferDataStart();
NdisRetreatNetBufferListDataStart();
NdisReturnNetBufferLists();
NdisReturnPackets();
NdisScheduleWorkItem();
NdisSend();
NdisSendNetBufferLists();
NdisSendPackets();
NdisSetAoAcOptions();
NdisSetCoalescableTimerObject();
NdisSetEvent();
NdisSetJobObjectCompartmentId();
NdisSetOptionalHandlers();
NdisSetPacketCancelId();
NdisSetPacketPoolProtocolId();
NdisSetPacketStatus();
NdisSetPeriodicTimer();
NdisSetProtocolFilter();
NdisSetSessionCompartmentId();
NdisSetThreadObjectCompartmentId();
NdisSetThreadObjectCompartmentScope();
NdisSetTimer();
NdisSetTimerEx();
NdisSetTimerObject();
NdisSetupDmaTransfer();
NdisStatusToDropReason();
NdisStopwatch::GetElapsedTimeInMilliseconds();
NdisSynchronousOidRequest();
NdisSystemActiveProcessorCount();
NdisSystemProcessorCount();
NdisTerminateOffload();
NdisTerminateWrapper();
NdisTestRWLockHeldByCurrentProcessorRead();
NdisTestRWLockHeldByCurrentProcessorWrite();
NdisTraceLoggingChecksumConfigOffloads();
NdisTraceLoggingChecksumHardwareOffloads();
NdisTraceLoggingCsStateChange();
NdisTraceLoggingDeviceAdded();
NdisTraceLoggingDeviceInitialized();
NdisTraceLoggingDeviceRemoved();
NdisTraceLoggingDeviceStarted();
NdisTraceLoggingGreTaskHardwareOffloads();
NdisTraceLoggingGreTaskeConfigOffloads();
NdisTraceLoggingLogoFailure();
NdisTraceLoggingLsoV2ConfigOffloads();
NdisTraceLoggingLsoV2HardwareOffloads();
NdisTraceLoggingMiniportWakeBufferTooLarge();
NdisTraceLoggingNDKCapabilities();
NdisTraceLoggingNicAutoPowerSaver();
NdisTraceLoggingOffloadConfigRead();
NdisTraceLoggingOffloads();
NdisTraceLoggingPacketDirectConfigChanged();
NdisTraceLoggingPowerOnStatistics();
NdisTraceLoggingQosConfigOffloads();
NdisTraceLoggingQosHardwareOffloads();
NdisTraceLoggingQosOperationalStatus();
NdisTraceLoggingRareFeaturePath();
NdisTraceLoggingRareFilterPath();
NdisTraceLoggingRareMiniportPath();
NdisTraceLoggingRscConfigOffloads();
NdisTraceLoggingRscHardwareOffloads();
NdisTraceLoggingRssConfiguration();
NdisTraceLoggingStuckNbl();
NdisTraceLoggingTemporarilyScribbleNetLuidIndex();
NdisTraceLoggingUnexpectedAoAcError();
NdisTraceLoggingUnexpectedSelectiveSuspendError();
NdisTraceLoggingVxLanConfigOffloads();
NdisTraceLoggingVxLanHardwareOffloads();
NdisTransferData();
NdisTryAcquireNicActive();
NdisTryAcquireRWLockRead();
NdisTryAcquireRWLockWrite();
NdisTryPromoteRWLockFromReadToWrite();
NdisUnbindAdapter();
NdisUnchainBufferAtBack();
NdisUnchainBufferAtFront();
NdisUnexpectedAoAcError();
NdisUnicodeStringToAnsiString();
NdisUnmapFile();
NdisUpcaseUnicodeString();
NdisUpdateOffload();
NdisUpdateSharedMemory();
NdisWaitEvent();
NdisWatchdogState::CancelTimer();
NdisWatchdogState::Disarm();
NdisWatchdogState::NdisWatchdogState();
NdisWatchdogState::ReportTimeout();
NdisWatchdogState::WaitSynchronously();
NdisWdfAsyncPowerReferenceCompleteNotification();
NdisWdfCleanupUserOpenContext();
NdisWdfCloseIrpHandler();
NdisWdfCreateIrpHandler();
NdisWdfDeregisterCx();
NdisWdfDeviceControlIrpHandler();
NdisWdfDeviceInternalControlIrpHandler();
NdisWdfDeviceWmiHandler();
NdisWdfGenerateFdoNameIndex();
NdisWdfGetAdapterContextFromAdapterHandle();
NdisWdfMiniportDataPathPause();
NdisWdfMiniportDataPathStart();
NdisWdfMiniportStarted();
NdisWdfPnPAddDevice();
NdisWdfPnpPowerEventHandler();
NdisWdfReadConfiguration();
NdisWdfRegisterCx();
NdisWdfRegisterMiniportDriver();
NdisWriteConfiguration();
NdisWriteErrorLogEntry();
NdisWriteEventLogEntry();
NdisWritePciSlotInformation();
NdisWritePcmciaAttributeMemory();
NdispRegisterShim();
NetDmaDeregisterProvider();
NetDmaGetVersion();
NetDmaInterruptDpc();
NetDmaIsr();
NetDmaPnPEventNotify();
NetDmaProviderStart();
NetDmaProviderStop();
NetDmaRegisterProvider();
NetPacketAssignLayoutWithArray();
NetPacketClearVolatileFields();
NetPacketComputeSizeAndUpdateExtensions();
NetPacketDeepCopyOne();
NetPacketExtensionPrivateGetData();
NetPacketGetSize();
NetPacketPoolInitialize();
NetPacketReuseMany();
NetPacketReuseOne();
NetPacketShallowCopyMany();
NetPacketShallowCopyOne();
NetPacketStateUpdate();
NetPacketStateUpdateWorker();
NetSetupPropertyBag::NetSetupPropertyBag();
NetSetupPropertyBag::OpenPropertyKey();
NetSetupPropertyBag::ReadBoolean();
NetSetupPropertyBag::ReadGuid();
NetSetupPropertyBag::ReadString();
NetSetupPropertyBag::ReadStringArray();
NetSetupPropertyBag::ReadUint32();
NetSetupPropertyBag::ReadUint64();
NetioCopyOpaqueNetBufferListInformation();
NetworkInterfaceBindProperties::~NetworkInterfaceBindProperties();
PdcAcquireRwLockExclusive();
PdcPortClose();
PdcPortOpen();
PdcPortSendMessageSynchronously();
PdcTaskClientRegister();
PdcTaskClientRequest();
PdcTaskClientUnregister();
PdcpPortReleaseResources();
PiRegStateOpenClassKey();
PiRegStateReadStackCreationSettingsFromKey();
PktMonAttachProvider();
PktMonCleanupBindingContext();
PktMonClientAddEdge();
PktMonClientComponentRegister();
PktMonClientComponentUnregister();
PktMonClientEnableCallback();
PktMonClientNblDrop();
PktMonClientNblDropNdis();
PktMonClientNblLogNdis();
PktMonClientSetCompPropery();
PktMonCompCloseCallback();
PktMonCompEnableCallback();
PktMonDetachProvider();
PpRegStateReadCreateClassCreationSettings();
PpRegStateUpdateStackCreationSettings();
PplCreateLookasideList();
PplDestroyLookasideList();
PplGenericAllocateFunction();
PplGenericFreeFunction();
PplHotAddProcCompleteNotify();
PplHotAddProcStartNotify();
PplpCreateOneLookasideList();
PplpFreeOneLookasideList();
PplpLazyInitializeLookasideList();
ProtocolBindProperties::~ProtocolBindProperties();
RebalanceExtensions();
ReferenceWdi();
Rtl::KArray<KRef<NDIS_BIND_FILTER_DRIVER>,1>::grow();
Rtl::KArray<KRef<NDIS_BIND_FILTER_DRIVER>,1>::reserve();
Rtl::KArray<KRef<NDIS_BIND_PROTOCOL_DRIVER>,1>::grow();
Rtl::KArray<KRef<NDIS_BIND_PROTOCOL_DRIVER>,1>::reserve();
Rtl::KArray<LwfBindProperties,1>::grow();
Rtl::KArray<LwfBindProperties,1>::insertAt();
Rtl::KArray<LwfBindProperties,1>::insertSorted();
Rtl::KArray<LwfBindProperties,1>::moveElements();
Rtl::KArray<LwfBindProperties,1>::reserve();
Rtl::KArray<NDIS_BIND_FILTER_LINK * __ptr64,1>::append();
Rtl::KArray<NDIS_BIND_FILTER_LINK * __ptr64,1>::grow();
Rtl::KArray<NDIS_BIND_FILTER_LINK * __ptr64,1>::reserve();
Rtl::KArray<ProtocolBindProperties,1>::append();
Rtl::KArray<ProtocolBindProperties,1>::grow();
Rtl::KArray<ProtocolBindProperties,1>::reserve();
Rtl::KArray<Rtl::_KStringAtom * __ptr64,1>::append();
Rtl::KArray<Rtl::_KStringAtom * __ptr64,1>::grow();
Rtl::KArray<Rtl::_KStringAtom * __ptr64,1>::reserve();
Rtl::KArray<unsigned char,1>::reserve();
Rtl::KArray<void * __ptr64,1>::grow();
Rtl::KArray<void * __ptr64,1>::reserve();
Rtl::KArray<void * __ptr64,1>::resize();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>::grow();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>::moveElements();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>::reserve();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::append();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::grow();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::insertAt();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::insertSortedUnique();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::moveElements();
Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::reserve();
Rtl::KArray<wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >,1>::reserve();
Rtl::KArray<wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >,1>::resize();
Rtl::KHashTableBase<1>::AllocateBuckets();
Rtl::KHashTableBase<1>::FreeBuckets();
Rtl::KNeutralLock<enum NDIS_MINIPORT_POLICY_OWNER>::Acquire();
Rtl::KNeutralLock<enum NDIS_MINIPORT_POLICY_OWNER>::Release();
Rtl::KNeutralLock<enum NDIS_MINIPORT_POLICY_OWNER>::TryAcquire();
Rtl::KString::Initialize();
Rtl::KStringAtomTableBase<1>::AtomCompare();
Rtl::KStringAtomTableBase<1>::GetAtom();
Rtl::KStringAtomTableBase<1>::Hash();
Rtl::KStringAtomTableBase<1>::~KStringAtomTableBase<1>();
RtlCopyBufferToMdl();
RtlStringCbPrintfW();
RtlStringCchPrintfW();
RtlUShortAdd();
RtlUnicodeStringCat();
RtlUnicodeStringCopy();
RtlUnicodeStringCopyString();
RtlUnicodeStringPrintf();
RtlUnicodeStringValidateDestWorker();
RtlUnicodeStringValidateWorker();
RtlWideCharArrayCopyStringWorker();
SeSddlSecurityDescriptorFromSDDL();
SeUtilSecurityInfoFromSecurityDescriptor();
SepSddlAddAceToAcl();
SepSddlDaclFromSDDLString();
SepSddlGetAclForString();
SepSddlGetSidForString();
SepSddlLookupAccessMaskInTable();
SepSddlParseWideStringUlong();
SepSddlSecurityDescriptorFromSDDLString();
TlgCreateSz();
TlgCreateWsz();
TlgDefineProvider_annotation__Tlgg_ndisTraceLogProviderProv();
TlgDefineProvider_annotation__Tlgmtakm_hTelemetryAssertDiagTrackProv();
TlgDefineProvider_annotation__Tlgmtakm_hTelemetryAssertDiagTrack_KMProv();
TlgDefineProvider_annotation__Tlgmtakm_hTelemetryAssertProv();
TlgKeywordOn();
TlgWrite();
TraceLoggingProviderEnabled();
TraceLoggingRegisterEx();
WPP_SF_();
WPP_SF_D();
WPP_SF_DD();
WPP_SF_DDD();
WPP_SF_DDDD();
WPP_SF_DDDDD();
WPP_SF_DDDDDDDD();
WPP_SF_DDDDDDDDDDD();
WPP_SF_DDL();
WPP_SF_DDLc();
WPP_SF_DDLcD();
WPP_SF_DDLqdL();
WPP_SF_DDZ();
WPP_SF_DL();
WPP_SF_DZq();
WPP_SF_Ddd();
WPP_SF_DqL();
WPP_SF_DqLL();
WPP_SF_DqZ();
WPP_SF_Dql();
WPP_SF_DqlD();
WPP_SF_DqqZZ();
WPP_SF_I();
WPP_SF_IL();
WPP_SF_L();
WPP_SF_LDD();
WPP_SF_LL();
WPP_SF_LLL();
WPP_SF_LLLL();
WPP_SF_LLLLLLLL();
WPP_SF_LLLLLLq();
WPP_SF_LZq();
WPP_SF_Ld();
WPP_SF_Ll();
WPP_SF_Llq();
WPP_SF_Lq();
WPP_SF_LqDLqD();
WPP_SF_LqL();
WPP_SF_LqZ();
WPP_SF_Lqq();
WPP_SF_LqqZZ();
WPP_SF_PP();
WPP_SF_S();
WPP_SF_SD();
WPP_SF_Sd();
WPP_SF_Si();
WPP_SF_SqZ();
WPP_SF_Z();
WPP_SF_ZL();
WPP_SF_ZLqL();
WPP_SF_ZZ();
WPP_SF_ZZL();
WPP_SF_Zd();
WPP_SF_Zq();
WPP_SF_ZqD();
WPP_SF_Zqq();
WPP_SF__guid_();
WPP_SF__guid_D();
WPP_SF__guid_Dd();
WPP_SF__guid_Dq();
WPP_SF__guid_DqD();
WPP_SF__guid_L();
WPP_SF__guid_LL();
WPP_SF__guid_ZDDDDDDDDDDDDDDDDDDDDDDDD();
WPP_SF__guid_ZDDDIDDDIDDDIDDDIDDDIDDDIDDDI();
WPP_SF__guid_ZDIDIII();
WPP_SF__guid__guid__guid_();
WPP_SF__guid_d();
WPP_SF_d();
WPP_SF_dD();
WPP_SF_dL();
WPP_SF_dd();
WPP_SF_ddLLL();
WPP_SF_dddD();
WPP_SF_dddDL();
WPP_SF_dddd();
WPP_SF_dl();
WPP_SF_dlL();
WPP_SF_dllL();
WPP_SF_dq();
WPP_SF_dqZ();
WPP_SF_dqd();
WPP_SF_i();
WPP_SF_i_guid_();
WPP_SF_l();
WPP_SF_ll();
WPP_SF_llL();
WPP_SF_q();
WPP_SF_qD();
WPP_SF_qDD();
WPP_SF_qDDDDDD();
WPP_SF_qDDLq();
WPP_SF_qDL();
WPP_SF_qDLLq();
WPP_SF_qDdZ();
WPP_SF_qDq();
WPP_SF_qDqD();
WPP_SF_qDqL();
WPP_SF_qDqLLLL();
WPP_SF_qDqLq();
WPP_SF_qDqLqD();
WPP_SF_qDqd();
WPP_SF_qL();
WPP_SF_qLDDDDDDDDDD();
WPP_SF_qLDDDDDDDDDDD();
WPP_SF_qLL();
WPP_SF_qLLDDDDDDDDDD();
WPP_SF_qLLL();
WPP_SF_qLLLL();
WPP_SF_qLLS();
WPP_SF_qLLd();
WPP_SF_qLLq();
WPP_SF_qLLqD();
WPP_SF_qLLqL();
WPP_SF_qLd();
WPP_SF_qLl();
WPP_SF_qLq();
WPP_SF_qLqL();
WPP_SF_qS();
WPP_SF_qSd();
WPP_SF_qZ();
WPP_SF_qZD();
WPP_SF_qZL();
WPP_SF_qZLLL();
WPP_SF_qZZ();
WPP_SF_qZddD();
WPP_SF_qZl();
WPP_SF_qZq();
WPP_SF_q_guid_();
WPP_SF_q_guid_d();
WPP_SF_qcL();
WPP_SF_qccL();
WPP_SF_qd();
WPP_SF_qdD();
WPP_SF_qdDd();
WPP_SF_qdL();
WPP_SF_qdSS();
WPP_SF_qdd();
WPP_SF_qddS();
WPP_SF_qddd();
WPP_SF_qdddD();
WPP_SF_qddqq();
WPP_SF_qddqqS();
WPP_SF_qdqd();
WPP_SF_qdqiqd();
WPP_SF_ql();
WPP_SF_qlL();
WPP_SF_qll();
WPP_SF_qllq();
WPP_SF_qq();
WPP_SF_qqD();
WPP_SF_qqDD();
WPP_SF_qqDDD();
WPP_SF_qqDL();
WPP_SF_qqDd();
WPP_SF_qqDq();
WPP_SF_qqL();
WPP_SF_qqLD();
WPP_SF_qqLd();
WPP_SF_qqZ();
WPP_SF_qqZZ();
WPP_SF_qqZddZ();
WPP_SF_qqZddZD();
WPP_SF_qq_guid_();
WPP_SF_qq_guid_qd();
WPP_SF_qqd();
WPP_SF_qqdqq();
WPP_SF_qqdqqS();
WPP_SF_qqil();
WPP_SF_qqill();
WPP_SF_qql();
WPP_SF_qqq();
WPP_SF_qqqD();
WPP_SF_qqqDD();
WPP_SF_qqqL();
WPP_SF_qqqd();
WPP_SF_qqqq();
WPP_SF_qqqqD();
WPP_SF_qqqqDL();
WPP_SF_qqqqDd();
WPP_SF_qqqqL();
WPP_SF_qqqqd();
WPP_SF_qqqqq();
WPP_SF_qs();
WPP_SF_qsD();
WPP_SF_qsDDs();
WPP_SF_sL();
WPP_SF_sZZ();
WatchdogFromHandle();
WdmlibInit();
WdmlibIoCreateDeviceSecure();
WdmlibRtlInitUnicodeStringEx();
WppClassicProviderCallback();
WppInitKm();
WppLoadTracingSupport();
WppTraceCallback();
XFilterAdjust();
XNoteFilterOpenAdapter();
XRemoveBindingFromLists();
XSetupFrameTypeInFilter();
XlateReceivePacketStats();
_C_specific_handler();
_GSHandlerCheck();
_GSHandlerCheckCommon();
_NDIS_FILTER_DRIVER_BLOCK::`scalar deleting destructor'();
_NDIS_MINIPORT_BLOCK::_NDIS_MINIPORT_BLOCK();
_NDIS_MINIPORT_BLOCK::~_NDIS_MINIPORT_BLOCK();
_NDIS_M_DRIVER_BLOCK::`scalar deleting destructor'();
_NDIS_PROTOCOL_BLOCK::NotifyBindComplete();
_NDIS_PROTOCOL_BLOCK::`scalar deleting destructor'();
_TlgEnableCallback();
_report_gsfailure();
_report_rangecheckfailure();
_security_check_cookie();
_security_init_cookie();
datapathVerifierReportProblem();
ethAddOneOpenMulticastAddress();
ethAllocateOpenMulticastBuffer();
ethDeleteOneOpenMulticastAddress();
ethFilterDprIndicateReceivePacket();
ethFilterReceivePacketStats();
ethFindMulticast();
guard_check_icall_nop();
guard_dispatch_icall_nop();
memcmp();
memcpy();
memmove();
memset();
ndis5InterruptDpc();
ndis5QueuedMiniportDpcWorkItem();
ndis6DummyReceiveComplete();
ndisAcquireMiniportPnPEventLock();
ndisAcquireReadLockPerCpuRefCnt();
ndisAcquireReadLockSharedRefCnt();
ndisAcquireReadWriteLockX();
ndisAcquireWriteLockPerCpuRefCnt();
ndisAcquireWriteLockSharedRefCnt();
ndisAddDevice();
ndisAddMediaTypeToArray();
ndisAddReceiveFilterToList();
ndisAddReceiveQueueToList();
ndisAddWoLDirectedMAC();
ndisAddWoLMagicPacket();
ndisAllocOrFreeIterativeDataPathTrackerIfNeeded();
ndisAllocateAndInitializeTimestampForFilter();
ndisAllocateCombinedRSSParameters();
ndisAllocateConfigurationString();
ndisAllocateDefaultQueue();
ndisAllocateEventLog();
ndisAllocateFreeSlotFromDescriptor();
ndisAllocateFromLookasideList();
ndisAllocateFromNPagedPool();
ndisAllocateIterativeDataPathTracker();
ndisAllocateMdl();
ndisAllocateNumaStripedPages();
ndisAllocateOpenBlock();
ndisAllocateOpenOffload();
ndisAllocatePerProcessorPageDescriptor();
ndisAllocatePerProcessorSlot();
ndisAllocateReceiveQueue();
ndisAllocateWatchdog();
ndisAllocationExecutionRoutine();
ndisAoAcActiveRefIncrement();
ndisAoAcActiveRefSubtract();
ndisAoAcCleanup();
ndisAoAcClearStop();
ndisAoAcCompleteQueuedIrps();
ndisAoAcEnableRemoteWake();
ndisAoAcIdleRequestConfirm();
ndisAoAcInitDisconnectedStandby();
ndisAoAcInitialize();
ndisAoAcIsControlPathAoAcNicReferencePresent();
ndisAoAcIsD0Required();
ndisAoAcIsDataPathPdcActivatorPresent();
ndisAoAcIsTempRefNeededAfterDeref();
ndisAoAcPauseRefTimeAccumulation();
ndisAoAcPauseRefTimeStats();
ndisAoAcPmInitTempRef();
ndisAoAcRefMiniportForIoctl();
ndisAoAcResumeRefTimeAccumulation();
ndisAoAcScheduleWakeWorkItem();
ndisAoAcStart();
ndisAoAcStartRefTimeStats();
ndisAoAcStop();
ndisAoAcTakeInternalRef();
ndisAoAcTempRefWorkItem();
ndisAoAcTraceRundown();
ndisAoAcWakeWorkItem();
ndisAoAcWriteRefcountRundown();
ndisAreProcessorsEqual();
ndisArmWatchdog();
ndisAssignSGListLookasideList();
ndisAttachFilter();
ndisAttachFilterInner();
ndisBindBuilderCleanup();
ndisBindBuilderInitialize();
ndisBindBuilderLoadSettings();
ndisBindEnumerateProtocolDrivers();
ndisBindGetFilterDriver();
ndisBindGetProtocolDriver();
ndisBindInitialize();
ndisBindLegacyProtocol();
ndisBindNdis6Protocol();
ndisBindProtocol();
ndisBindReadFilterDriverConfiguration();
ndisBindReadFilterDriverFromV2Registry();
ndisBindReadFilterDriverFromV3Registry();
ndisBindReadFilterDriverSettingsFromV2Registry();
ndisBindReadFilterDriverSettingsFromV3Registry();
ndisBindReadProtocolDriverConfiguration();
ndisBindReadProtocolDriverFromV2Registry();
ndisBindReadProtocolDriverFromV3Registry();
ndisBindRequest();
ndisBindUnbindPeriodicReceives();
ndisBlowStringListIntoAtoms();
ndisBootDriverReinit();
ndisBugCheckEx();
ndisBugcheckHandler();
ndisBuildBindings();
ndisBuildDeviceAcl();
ndisBuildMonitoringLwfBindings();
ndisCalculateIdealNblTrackerHistoryBufferSize();
ndisCalculateRssParametersSize();
ndisCalculateRssProcessorCount();
ndisCallReceiveCompleteHandler();
ndisCallReceiveHandler();
ndisCallSendCompleteHandler();
ndisCallSendHandler();
ndisCancelDequeuedDirectOidRequests();
ndisCancelIdleRequest();
ndisCancelIdleRequestSync();
ndisCancelInitModeTimeoutTimer();
ndisCancelLogIrp();
ndisCancelMediaDisconnectTimer();
ndisCancelOidRequestInternal();
ndisCancelOidRequestOnFilter();
ndisCancelOidRequestOnMiniport();
ndisCancelWaitWake();
ndisCancelWakeUpDpcTimer();
ndisCaptureProcessorConfigurationAtBoot();
ndisCaptureStackTrace();
ndisCheckAccess();
ndisCheckAlwaysStartFlag();
ndisCheckDeviceNeedReinstallWithNewIfType();
ndisCheckForHangSupported();
ndisCheckForNdisTestBindingsOnAllMiniports();
ndisCheckIfDeviceNeedsFullMigration();
ndisCheckIfDeviceNeedsInstallation();
ndisCheckIfDeviceNeedsUpdates();
ndisCheckMiniportWakeUpCapable();
ndisCheckNetworkInterfaceDataMismatch();
ndisCheckWatchdogTimer();
ndisCleanUpForProtocol();
ndisCleanupPDCounter();
ndisCleanupPDQAWM();
ndisCleanupPDQTracker();
ndisCleanupPDRSSObjects();
ndisCleanupUserOpenContext();
ndisClearBusy();
ndisClearIdleTimer();
ndisClearReceiveFilter();
ndisClearReceiveFiltersForProtocol();
ndisClearTransientBindFailuresAboveThisFilter();
ndisClonePMPatternList();
ndisCloseHandler();
ndisCloseIrpHandler();
ndisCloseRef();
ndisCloseULongRef();
ndisCmAssignCompartmentHandleToCmState();
ndisCmCleanupDpcRoutine();
ndisCmCleanupSessionState();
ndisCmCleanupWorkRoutine();
ndisCmCreateStateObject();
ndisCmDeleteStateObject();
ndisCmDereferenceCompartment();
ndisCmGetThreadSessionId();
ndisCmGetThreadState();
ndisCmInitialize();
ndisCmLazyInitializeCleanup();
ndisCmSetThreadState();
ndisCmValidateCompartmentChange();
ndisCoIndicatePromiscNetBuffer();
ndisCoIndicatePromiscPacket();
ndisCoIndicateStatusInternal();
ndisCoOidRequestToRequest();
ndisCoSendNetBufferListsToNdisPacket();
ndisCoSendNetBufferListsToNetBufferLists();
ndisCoSendPacketsToNdisPackets();
ndisCoSendPacketsToNetBufferLists();
ndisCompareGuid();
ndisComparePMCapabilities();
ndisComparePMProtocolOffloads();
ndisCompareProcNum();
ndisCompareProcNumInit();
ndisCompareStatusCodes();
ndisCompareWoLPatterns();
ndisCompleteLegacyRequest();
ndisCompleteOidRequestToRequest();
ndisCompleteUnsolicitedUnbind();
ndisCompleteWaitWake();
ndisCompletionRoutine();
ndisConfigurePeriodicReceives();
ndisConvertInterruptTimeToLocalTime();
ndisConvertOffloadValueToString();
ndisConvertPMCapabilitiesToPnp();
ndisConvertPnpCapabilitiesToPM();
ndisConvertWakeUpEnableToPMConfig();
ndisCopyNBLInfoToPacket();
ndisCopyNdisOffload();
ndisCopyPacketInfoToNBL();
ndisCopyPeriodicReceiveNbl();
ndisCopyReceiveQueueInfo();
ndisCountSetBits64();
ndisCounterSetProviderCallback();
ndisCpuHotAddHandler();
ndisCreateAcl();
ndisCreateAdapterInstanceName();
ndisCreateFilterAdapterRegistry();
ndisCreateFilterDriverRegistry();
ndisCreateFilterInstanceRegistry();
ndisCreateGenericSD();
ndisCreateHandler();
ndisCreateIrpHandler();
ndisCreateNdisSupportedOidList();
ndisCreateNotifyQueue();
ndisCreatePMAddRemoveWorkItem();
ndisCreatePMPacketPattern();
ndisCreatePMPdcTaskClientWorkItem();
ndisCreatePMProtocolOffloadEntry();
ndisCreatePMRejectWorkItem();
ndisCreateReceiveWorkerThreadPool();
ndisCreateRssV1Parameters();
ndisCreateSecurityDescriptor();
ndisCreateSecurityDescriptorEx();
ndisCreateThread();
ndisCreateWakeUpPatternEntry();
ndisCreateWoLPatternEntry();
ndisCsResiliencyCallback();
ndisCsResiliencyChange();
ndisCsStateChange();
ndisDataPathExpandStackCallback();
ndisDeQueueMiniportOnDriver();
ndisDeQueueOpenOnMiniport();
ndisDeQueueOpenOnProtocol();
ndisDeinitializeZeroBasedRef();
ndisDeletePatternEntry();
ndisDeliverBindCompleteEvent();
ndisDeliverNetPnPEventSynchronously();
ndisDequeueDirectOidsByRequestId();
ndisDereferenceAf();
ndisDereferenceAfNotification();
ndisDereferenceDmaAdapter();
ndisDereferenceDriver();
ndisDereferenceFilter();
ndisDereferenceFilterDriver();
ndisDereferenceMiniport();
ndisDereferenceMiniportForNsi();
ndisDereferenceMiniportRef();
ndisDereferencePackage();
ndisDereferenceProtocol();
ndisDereferenceReceiveFilter();
ndisDereferenceReceiveQueue();
ndisDereferenceRef();
ndisDereferenceSap();
ndisDereferenceVcPtr();
ndisDetachFilter();
ndisDetachFilterInner();
ndisDeviceControlHandler();
ndisDeviceControlIrpHandler();
ndisDeviceInternalDispatch();
ndisDeviceInternalIrpDispatch();
ndisDevicePnPEventNotifyFiltersAndAllTransports();
ndisDevicePnPEventNotifyMiniport();
ndisDevicePowerDown();
ndisDevicePowerOn();
ndisDisableRsc();
ndisDisarmWatchdog();
ndisDisarmWatchdogAsync();
ndisDisconnectInStandby();
ndisDispatchIoWorkItem();
ndisDispatchRequest();
ndisDmaAddCpuNotify();
ndisDmaExecutionRoutine();
ndisDoCancelDirectOidRequest();
ndisDoDirectOidRequest();
ndisDoLoopbackNetBufferList();
ndisDoOidRequests();
ndisDoPeriodicReceivesIndication();
ndisDoesSystemSupportSriov();
ndisDrainWatchdog();
ndisDriverReinit();
ndisDriverSystemDispatch();
ndisDummyHandler();
ndisDummyIrpHandler();
ndisEmptyPeriodicReceivesQueue();
ndisEmulateRSSv1Dpc();
ndisEnablePMParamForPattern();
ndisEnablePMParamForProtocolOffload();
ndisEnableWppTracingCallback();
ndisEnsureBindingInfoLoaded();
ndisEntrySetScanForward();
ndisEnumerateFilterInstances();
ndisEnumerateInterfaces();
ndisEnumerateInterfaces32();
ndisEnumeratePorts();
ndisEtwRegisterGuids();
ndisEventEntryCount();
ndisEventLogFromHandle();
ndisExecuteRSSv2DirectOid();
ndisExpandStackTrace();
ndisFAllocateFilterOffload();
ndisFBindRequest();
ndisFCancelDirectOidRequestInternal();
ndisFCancelOidRequestInternal();
ndisFDevicePnPEventNotifyInternal();
ndisFDirectOidRequestCompleteInternal();
ndisFDoDirectOidRequestInternal();
ndisFDoLoopbackNetBufferList();
ndisFDoOidRequestInternal();
ndisFForwardNetPnPEventToFilter();
ndisFIndicateOffloadChange();
ndisFIndicateStatusInternal();
ndisFIndicateStatusWrapper();
ndisFIndicateTimestampChange();
ndisFInvokeAttach();
ndisFInvokeCancelOidRequest();
ndisFInvokeDetach();
ndisFInvokeDevicePnPEventNotify();
ndisFInvokeDirectOidRequest();
ndisFInvokeDirectOidRequestComplete();
ndisFInvokeNetPnPEvent();
ndisFInvokePause();
ndisFInvokeRestart();
ndisFInvokeSetFilterModuleOptions();
ndisFInvokeSetOptions();
ndisFInvokeStatus();
ndisFInvokeSynchronousOidRequest();
ndisFInvokeSynchronousOidRequestComplete();
ndisFIsLoopbackNetBuffer();
ndisFLoopbackNetBufferLists();
ndisFNetPnPEventInternal();
ndisFNotifyDetach();
ndisFOidRequestCompleteInternal();
ndisFQueueOidRequest();
ndisFSetRestartAttributes();
ndisFailedAdapterLiveDumpCallback();
ndisFakeFilterReceiveHandler();
ndisFakeFilterSendHandler();
ndisFakeMiniportCancelSendPackets();
ndisFillEventLogEntry();
ndisFillOffloadCapsInTasks();
ndisFilterAttachCleanUp();
ndisFilterCancelSendNetBufferLists();
ndisFilterCancelSendNetBufferListsInternal();
ndisFilterFakeCancelSendNetBufferLists();
ndisFilterIndicatePMCapabilities();
ndisFilterIndicatePMOffloadReject();
ndisFilterIndicateReceiveNetBufferLists();
ndisFilterIndicateWoLPatternReject();
ndisFilterSendNetBufferLists();
ndisFilterWaitForPnPComplete();
ndisFilterXStateSetFlag();
ndisFindAdjacentFilters();
ndisFindFirstReceiveFilterByOpen();
ndisFindMinimumVersionDrivers();
ndisFindMiniportByPdo();
ndisFindMiniportOnGlobalList();
ndisFindPDClientViaClientDriverHandle();
ndisFindPatternEntry();
ndisFindPortByPortNumber();
ndisFindReceiveFilterByFilterId();
ndisFindReceiveQueueByQueueId();
ndisFindRootDevice();
ndisFindSomeoneToBlame();
ndisFreeConvertedPacket();
ndisFreeMappingAddress();
ndisFreeMdl();
ndisFreeNblToNPagedPool();
ndisFreeOpenBlock();
ndisFreePDRSSObjects();
ndisFreePacketPool();
ndisFreePacketPoolHdr();
ndisFreePaddedMdl();
ndisFreePerProcessorSlot();
ndisFreePeriodicReceives();
ndisFreeReceiveQueue();
ndisFreeRefCountAuxiliaryMemory();
ndisFreeRefCountStackChain();
ndisFreeRefCountStacksInBlock();
ndisFreeSharedMemory();
ndisFreeToNPagedPool();
ndisFreeWatchdog();
ndisGenerateCorrelationIds();
ndisGenerateNetBufferListCorrelationIds();
ndisGenericWaitWakeCallback();
ndisGetAdapterHardwareInfo();
ndisGetAdapterRssInfo();
ndisGetAnyActiveRefTag();
ndisGetAnyProcInsideNode();
ndisGetBindLinkNameForTracing();
ndisGetClientDriverHandleFromRequestSourceHandle();
ndisGetCombinedPMConfig();
ndisGetCombinedRSSParameters();
ndisGetDpcWatchdogInfo();
ndisGetFilterAltitude();
ndisGetHardwareInfo();
ndisGetHigherFilterWithPnpRef();
ndisGetListEntriesCount();
ndisGetLogicalProcessorInformation();
ndisGetLowerFilterWithPnpRef();
ndisGetMiniportFromObject();
ndisGetMiniportIfBlock();
ndisGetMiniportIndicateList();
ndisGetMiniportInfo();
ndisGetMiniportOffloadCapability();
ndisGetNDKBlock();
ndisGetNewPatternEntryId();
ndisGetNextPDCounterId();
ndisGetNodeIdForProcessor();
ndisGetNsiClientInfo();
ndisGetNthEntry();
ndisGetOidSourceHandle();
ndisGetOrCreateFilterInstanceKey();
ndisGetPMProtocolOffloadSize();
ndisGetPatternEffectivePriority();
ndisGetPciDeviceCustomProperties();
ndisGetPdInfo();
ndisGetPerformanceCounters();
ndisGetPortList();
ndisGetPowerInfo();
ndisGetProcessorInfo();
ndisGetRWLockVerifierContext();
ndisGetRdmaCapabilities();
ndisGetServiceNameFromRegPath();
ndisGetSetBusConfigSpace();
ndisGetTaskBytes();
ndisGetTimeInterval();
ndisGetVPortBlockForRequest();
ndisGetWakeUpPatternSize();
ndisGetWoLPatternSize();
ndisGrabOidCancellationList();
ndisHandleBindNotification();
ndisHandleFilterHandlersChange();
ndisHandleLegacyBindIoctl();
ndisHandleLegacyTransport();
ndisHandlePnPRequest();
ndisHandleProtocolReconfigNotification();
ndisHandleProtocolUnloadNotification();
ndisHandleUModePnPOp();
ndisIMCheckDeviceInstance();
ndisIMDeleteIfStackEntry();
ndisIMInitializeDeviceInstance();
ndisIMQueueDeviceInstance();
ndisIMVBusIsValidInput();
ndisIPsecPktInfoToNBLInfo();
ndisIdleCancelWorkItem();
ndisIdleWaitWakeCallback();
ndisIfAliasChange();
ndisIfAllocateAndVerifyNetLuidIndex();
ndisIfAllocateIfIndex();
ndisIfCreateCompartment();
ndisIfCreateCompartmentBlock();
ndisIfCreateFilterInterface();
ndisIfCreateInterface();
ndisIfCreateInterfaceFromPersistentStore();
ndisIfCreateNetwork();
ndisIfCreateNetworkBlock();
ndisIfCreateOrUpdateInterface();
ndisIfDeleteCompartment();
ndisIfDeleteStackEntries();
ndisIfDereferenceCompartmentForUser();
ndisIfDereferenceMiniport();
ndisIfDeregisterInterfaceEx();
ndisIfDetachMiniportBlock();
ndisIfEnumerateNsiObjects();
ndisIfFindAvailableCompartmentId();
ndisIfFindCompartmentBlock();
ndisIfFindCompartmentBlockByGuid();
ndisIfFindInterface();
ndisIfFindInterfaceByInterfaceGuid();
ndisIfFindInterfaceByNetLuid();
ndisIfFindNetworkBlock();
ndisIfFindNextInterfaceByNetLuid();
ndisIfFindNextRcvAddress();
ndisIfFindRcvAddress();
ndisIfFindStackEntry();
ndisIfFreeIfIndex();
ndisIfGetCompartmentJobObject();
ndisIfGetCompartmentNamespaceGuid();
ndisIfGetDefaultNetworkGuid();
ndisIfGetFilterIfInfoFromRegistry();
ndisIfGetMiniportStatistics();
ndisIfGetRcvAddressFromMiniport();
ndisIfGrowAllocatedInterfaceIndexBitmap();
ndisIfInitGetCompartmentList();
ndisIfInitGetNetworkList();
ndisIfInitialize();
ndisIfOpenInterfacePersistedStorage();
ndisIfOpenInterfaceRegistryKey();
ndisIfQueryBindingMiniportIfIndex();
ndisIfQueryFilterObject();
ndisIfQueryLoopbackObject();
ndisIfQueryMiniportObject();
ndisIfQueryMiniportObjectNotPresent();
ndisIfQueryObject();
ndisIfQueryProvider();
ndisIfQuerySetMiniport();
ndisIfReadHiddenFlag();
ndisIfReadInterfaceAddDeviceParameters();
ndisIfReadInterfaceAddDeviceParametersForLWMiniport();
ndisIfReadNetworkGuidFromKey();
ndisIfReferenceCompartmentForUser();
ndisIfReferenceMiniport();
ndisIfRegisterInterfaceEx();
ndisIfReleaseSiteId();
ndisIfRemoveIfBlockMiniportAssociation();
ndisIfScheduleTimestampCapabilityChangeNotification();
ndisIfSetCompartmentJobObject();
ndisIfSetFilterIfInfoInRegistry();
ndisIfSetIfDescr();
ndisIfSetInterfaceState();
ndisIfSetLoopbackObject();
ndisIfSetObject();
ndisIfStackTablePathExist();
ndisIfUpdateCurrentMacAddress();
ndisIfUpdateCurrentMacAddressAndNotify();
ndisIfUpdateFilterIfStack();
ndisIfUpdateIfBlockFromPersistedState();
ndisIfUpdateInterfaceFromPersistentStore();
ndisIfUpdateInterfaceHiddenFlag();
ndisIfUpdateInterfaceIsolationNetworkId();
ndisIfUpdateInterfaceIsolationNetworkIdLocked();
ndisIfUpdateInterfaceOnAddDevice();
ndisIfUpdateInterfaceOnInitialize();
ndisIfUpdateL2MtuSize();
ndisIfUpdateL2MtuSizeAndNotify();
ndisIfUpdateLoopbackInterfaceOnNetwork();
ndisIfUpdatePersistedInterfaceInfo();
ndisIfUpdateStringIfNeeded();
ndisIfWriteBackPersistedInterface();
ndisIfWriteRegistry();
ndisImmediateReadWritePort();
ndisImmediateReadWriteSharedMemory();
ndisIncrementAsyncIdleCountersLocked();
ndisIncrementSyncIdleCountersLocked();
ndisIndicateInitialStateToBinding();
ndisIndicateInitialStateToFilter();
ndisIndicateOffloadChangeInternal();
ndisIndicatePMCapabilities();
ndisIndicateStatusInternal();
ndisIndicateToPmodeOpens();
ndisIndicateXlatedPacketsToNdis5Protocols();
ndisInitModeTimeoutDpc();
ndisInitModeTimeoutWorkItem();
ndisInitPDQAWM();
ndisInitialBindCompleted();
ndisInitializeAdapter();
ndisInitializeConfiguration();
ndisInitializeDirectedWolPattern();
ndisInitializeMiniportRestartAttributes();
ndisInitializeNetPnPEvent();
ndisInitializeNsi();
ndisInitializeNsiHelper();
ndisInitializeNsiInitFn();
ndisInitializePerProcessorSlotAllocator();
ndisInitializePeriodicReceives();
ndisInitializeRWLock();
ndisInitializeRef();
ndisInitializeStackTraces();
ndisInitializeULongRef();
ndisInitializeWatchdogSubsystem();
ndisInitializeZeroBasedRef();
ndisInsertInWorkQueue();
ndisInsertPatternListEntry();
ndisInternalDeregisterMiniportDriver();
ndisInternalRegisterMiniportDriver();
ndisInternalSetRSSInitialize();
ndisInternalSetRSSv2IndirectionTable();
ndisInternalSetRSSv2Parameters();
ndisInterruptDpc();
ndisIntersectAtoms();
ndisInvokeCloseAdapterComplete();
ndisInvokeDeviceReset();
ndisInvokeDirectOidRequestComplete();
ndisInvokeMiniportSysPowerNotify();
ndisInvokeNetPnPEvent();
ndisInvokeNextReceiveCompleteHandler();
ndisInvokeNextReceiveHandler();
ndisInvokeNextSendCompleteHandler();
ndisInvokeNextSendHandler();
ndisInvokeOidRequestComplete();
ndisInvokeOpenAdapterComplete();
ndisInvokeStatus();
ndisInvokeUnbindAdapter();
ndisInvokeUninstall();
ndisIovAddSwitchToList();
ndisIovAddVPortToPFList();
ndisIovAddVPortToVFList();
ndisIovAllocateVF();
ndisIovCancelIoctlInvalidate();
ndisIovCancelIoctlNotification();
ndisIovCopyNicSwitchInfo();
ndisIovCopyVFInfo();
ndisIovCopyVPortInfo();
ndisIovCreateDefaultNicSwitch();
ndisIovCreateVPort();
ndisIovDeleteDefaultNicSwitch();
ndisIovDeleteNicSwitch();
ndisIovDeleteNicSwitchDefaultVPortAndPFBlock();
ndisIovDeleteVPort();
ndisIovFinalizeNicSwitch();
ndisIovFindSwitchBySwitchId();
ndisIovFindVFByVFId();
ndisIovFindVPortByVPortId();
ndisIovFindVPortByVPortIdInternal();
ndisIovFreeVF();
ndisIovGetNicSwitchList();
ndisIovHWvRSSSupported();
ndisIovInitVf();
ndisIovInitializeNicSwitch();
ndisIovInvalidateBlockCompletion();
ndisIovIoctlAttach();
ndisIovIoctlDetach();
ndisIovIoctlEventComplete();
ndisIovIoctlInvalidate();
ndisIovIoctlNotification();
ndisIovNicSwitchWithoutIovSupported();
ndisIovReadSwitchConfiguration();
ndisIovTeardownVf();
ndisIsBindPathEnabled();
ndisIsCompartmentAccessibleByClient();
ndisIsCompartmentEnumerable();
ndisIsCurrentNblContextBlockPreallocated();
ndisIsDefaultPortStateOperational();
ndisIsLwfBindable();
ndisIsLwfBindingEnabled();
ndisIsMiniportReady();
ndisIsMiniportStarted();
ndisIsNetSetupV1Interface();
ndisIsNetSetupV2Interface();
ndisIsPMProtocolOffloadSupported();
ndisIsPossibleSmuggling();
ndisIsPowerReferencedForSelectiveSuspend();
ndisIsProtocolBindingEnabled();
ndisIsRssEnabledForMiniport();
ndisIsSatisfiedByOidGenStatistics();
ndisIsSystemBooting();
ndisIsTargetNonDefaultVPort();
ndisIsTargetTheMiniport();
ndisIsValidIfString();
ndisIsValidIfStringParts();
ndisIsValidMulticastFilter();
ndisIsValidNblTrackerHistoryBufferSize();
ndisIsValidPMAdminConfigState();
ndisIsValidPmCountedString();
ndisIsValidWoLPattern();
ndisIsWoLPacketTypeSupported();
ndisIssueNetEventSetPowerEvent();
ndisKillReceiveWorkerThreadPool();
ndisLWM5IndicateReceive();
ndisLWM5PauseMiniport();
ndisLWM5RestartMinport();
ndisLWMCreateAdapterInstanceName();
ndisLWMCreateMiniport();
ndisLWMGetServiceKeyFromServiceName();
ndisLWMInitializeHandler();
ndisLWMOpenConfigurationKey();
ndisLegacyProtocolPauseRestartHandler();
ndisLegacyRequest();
ndisLiveBugCheck();
ndisLiveDumpAddSecondaryData();
ndisLoadNamedFilterAltitudes();
ndisLoadNetworkInterfaceFromPersistedState();
ndisLogMiniportEvent();
ndisLowPowerEpochCallback();
ndisLwfSortPredicate();
ndisMAbortPackets();
ndisMAbortRequests();
ndisMAcquireStInLockWithSpinLock();
ndisMAdjustFilters();
ndisMAllocSGList();
ndisMAllocSGListS();
ndisMAllocateMiniportOffload();
ndisMAllocateRequest();
ndisMAllowSilentReenumerate();
ndisMApplyInterfaceChange();
ndisMBeginNormalMode();
ndisMBindRequest();
ndisMCancelSendNetBufferListsOnMiniport();
ndisMCheckPacketAndPad();
ndisMCheckReceiveFilterPacketCoalescingAttributes();
ndisMCleanupMiniportBlockOnStop();
ndisMCoFreeResources();
ndisMCoIndicateReceiveNdisPacketToNdisPacket();
ndisMCoIndicateReceiveNdisPacketToNetBufferLists();
ndisMCoIndicateReceiveNetBufferListsToNdisPacket();
ndisMCoIndicateReceiveNetBufferListsToNetBufferLists();
ndisMCoOidRequestToRequest();
ndisMCoSendCompleteToNdisPacket();
ndisMCoSendCompleteToNetBufferLists();
ndisMCoSendNetBufferListsCompleteToNdisPackets();
ndisMCoSendNetBufferListsCompleteToNetBufferLists();
ndisMCommonHaltMiniport();
ndisMCopyFromPacketToBuffer();
ndisMDeQueueWorkItem();
ndisMDeferredDpc();
ndisMDeferredReturnPackets();
ndisMDeferredSend();
ndisMDeferredSendPackets();
ndisMDeferredSendPacketsSG();
ndisMDeferredSendSG();
ndisMDeleteMiniportBlockOnRemove();
ndisMDereferenceIfBlock();
ndisMDereferenceOpenLocked();
ndisMDereferenceOpenUnlocked();
ndisMDeregisterBugCheckHandler();
ndisMDirectOidRequest();
ndisMDispatchReceiveNetBufferLists();
ndisMDispatchReceiveNetBufferListsWithLock();
ndisMDoDirectOidRequest();
ndisMDoMiniportOp();
ndisMDoOidRequest();
ndisMDoProtocolRequest();
ndisMDoesMiniportNeedCoNdisNdProxy();
ndisMDpc();
ndisMDpcX();
ndisMDummyIndicatePacket();
ndisMDummyReceiveNetBufferLists();
ndisMEmitTraceRundown();
ndisMEvaluateMagicPacketWake();
ndisMExitInitMode();
ndisMFakeDirectOidRequest();
ndisMFakeOidRequest();
ndisMFakeRequest();
ndisMFakeReset();
ndisMFakeSend();
ndisMFakeSendNetBufferLists();
ndisMFakeSendPackets();
ndisMFakeWanSend();
ndisMFindNumaDistances();
ndisMFindNumaNode();
ndisMFinishClose();
ndisMFinishQueuedPendingOpen();
ndisMFlushInterfaceChanges();
ndisMFreeSGList();
ndisMGetLogData();
ndisMHaltMiniport();
ndisMHandleNDKPnPEvents();
ndisMIndicateHDSplitChange();
ndisMIndicateHwTimestampCapabilitiesChange();
ndisMIndicateNetBufferListsToOpen();
ndisMIndicateNicSwitchCapsChange();
ndisMIndicateOffloadChange();
ndisMIndicatePDConfigChange();
ndisMIndicatePMCapabilities();
ndisMIndicatePMHardwareCapabilities();
ndisMIndicatePMOffloadReject();
ndisMIndicatePacket();
ndisMIndicatePacketsToNetBufferLists();
ndisMIndicateQosParametersChange();
ndisMIndicateReceiveFilterCapsChange();
ndisMIndicateReceiveNblsWithThrottling();
ndisMIndicateSplitNblChain();
ndisMIndicateTcpConnectionOffloadChange();
ndisMIndicateWoLPatternReject();
ndisMInitializeAdapter();
ndisMInitializeInitMode();
ndisMInitializeMiniportBlock();
ndisMInitializeMiniportBlockFront();
ndisMInitializePDCTaskClient();
ndisMInitializeScatterGatherDma();
ndisMInvokeAddDevice();
ndisMInvokeBlockingOidRequest();
ndisMInvokeCancelOidRequest();
ndisMInvokeCheckForHang();
ndisMInvokeDevicePnPEventNotifyHandler();
ndisMInvokeDevicePowerNotify();
ndisMInvokeDirectOidRequest();
ndisMInvokeDriverUnload();
ndisMInvokeFilterResourceRequirements();
ndisMInvokeHalt();
ndisMInvokeInitialize();
ndisMInvokeOidRequest();
ndisMInvokePause();
ndisMInvokeRemoveDevice();
ndisMInvokeReset();
ndisMInvokeRestart();
ndisMInvokeSetOptions();
ndisMInvokeShutdown();
ndisMInvokeSynchronousOidRequest();
ndisMIsLoopbackNetBuffer();
ndisMIsLoopbackPacket();
ndisMIsPowerSynchronizedDatapathRequired();
ndisMIsr();
ndisMKillOpen();
ndisMLiveBugCheck();
ndisMLoopbackNetBufferLists();
ndisMLoopbackPacketX();
ndisMNotifyMachineName();
ndisMOidRequest();
ndisMOidRequestCompleteInternal();
ndisMOidRequestToRequest();
ndisMOpenAdapter();
ndisMPauseMiniport();
ndisMPauseMiniportInner();
ndisMPeriodicPendingReceives();
ndisMPeriodicReceivesResources();
ndisMPowerPolicy();
ndisMProcessDeferred();
ndisMProcessResetRequested();
ndisMProcessSGList();
ndisMProcessSGListS();
ndisMQueueNewWorkItem();
ndisMQueueOidRequest();
ndisMQueueReceiveNetBufferLists();
ndisMQueueWorkItem();
ndisMQueuedAllocateSharedHandler();
ndisMQueuedFinishClose();
ndisMQueuedFreeSharedHandler();
ndisMQueuedPromoteMiniport();
ndisMRawDirectOidRequestComplete();
ndisMRawIndicateStatusEx();
ndisMRawInvokeDirectOidRequest();
ndisMRawInvokeOidRequest();
ndisMRawOidRequestComplete();
ndisMReadPciPropertiesFromConfigSpace();
ndisMRecalculateMiniportStackAfterBinding();
ndisMReenumerateFailedAdapterInternal();
ndisMReferenceIfBlock();
ndisMReferenceOpen();
ndisMRegisterBugCheckHandler();
ndisMRegisterPDCTaskClient();
ndisMRejectSend();
ndisMRejectSendPackets();
ndisMReleaseStInLockAndSpinLock();
ndisMReset();
ndisMResetCompleteStage1();
ndisMResetCompleteStage2();
ndisMResetMiniportInternal();
ndisMRestartMiniport();
ndisMRestartMiniportInner();
ndisMRestoreFilterSettings();
ndisMRestoreOpenHandlers();
ndisMSend();
ndisMSendCompleteNetBufferListsInternal();
ndisMSendCompleteNetBufferListsToOpen();
ndisMSendCompletePacketToNetBufferLists();
ndisMSendCompleteSG();
ndisMSendCompleteX();
ndisMSendNBLToMiniport();
ndisMSendNBLToMiniportInternal();
ndisMSendNetBufferListsCompleteInternal();
ndisMSendNetBufferListsCompleteToNdisPackets();
ndisMSendNetBufferListsToPackets();
ndisMSendOidPmParametersForAoAc();
ndisMSendOidPmParametersForSx();
ndisMSendPacketCompleteToOpen();
ndisMSendPackets();
ndisMSendPacketsSGToMiniport();
ndisMSendPacketsToMiniport();
ndisMSendPacketsToNetBufferLists();
ndisMSendPacketsXToMiniport();
ndisMSetGeneralAttributes();
ndisMSetHDSplitAttributes();
ndisMSetIndicatePacketHandler();
ndisMSetMiniportReadyForBinding();
ndisMSetNDKAttributes();
ndisMSetNative802_11Attributes();
ndisMSetNicSwitchAttributes();
ndisMSetOffloadAttributes();
ndisMSetPacketDirectAttributes();
ndisMSetPowerManagementCapabilities();
ndisMSetQosAttributes();
ndisMSetReceiveFilterAttributes();
ndisMSetRssCapabilities();
ndisMSetSriovAttributes();
ndisMSetTimestampOnNblChainTx();
ndisMShutdownMiniport();
ndisMStartInitMode();
ndisMStartWanSends();
ndisMSwapOpenHandlers();
ndisMTimerDpc();
ndisMTimerDpcX();
ndisMTimerObjectDpc();
ndisMTopReceiveNetBufferLists();
ndisMTransferData();
ndisMUnload();
ndisMUnloadEx();
ndisMUpdateHiddenFlag();
ndisMUpdateInterfaceWorker();
ndisMUpdateNameOnPMWakePacket();
ndisMValidatePMWakePacket();
ndisMValidatePMWakePacketForMagicPacket();
ndisMValidatePMWakeReason();
ndisMWakeUpDpc();
ndisMWakeUpDpcX();
ndisMWanSend();
ndisMWanSendCompleteInternal();
ndisMakeWatchdog();
ndisMapOpenByName();
ndisMarkNetBufferListCorrelationIdsAsUsed();
ndisMediaDisconnectComplete();
ndisMediaDisconnectTimeout();
ndisMediaDisconnectWorker();
ndisMergeEncapsulations();
ndisMergeOffloadCapsAndRegistry();
ndisMergeRSSv2DirectOidResults();
ndisMethodDeviceOid();
ndisMiniportDeviceReadyNotification();
ndisMiniportFatalError();
ndisMiniportIsr();
ndisMiniportMessageIsr();
ndisMiniportPMParametersUpdated();
ndisMiniportPostAddWOLPattern();
ndisMiniportPostAddWakeUpPattern();
ndisMiniportPostRemoveWoLPattern();
ndisMiniportPreAddProtocolOffload();
ndisMiniportPreAddWoLPattern();
ndisMiniportPreRemoveWOLPattern();
ndisMiniportXStateClearFlag();
ndisMoveLinkedList();
ndisMoveUnicodeStringToNdisVarDataDesc();
ndisMpHookDefaultDirectOidRequestComplete();
ndisMpHookDefaultIndicateStatus();
ndisMpHookDefaultOidRequestComplete();
ndisMpHookGetHook();
ndisMpHookGetHookAdapterHandle();
ndisMpHookGetHookDriverHandle();
ndisMpHookGetHookUnsafe();
ndisMpHookInvokeCancelDirectOidRequestHandler();
ndisMpHookInvokeCancelOidRequestHandler();
ndisMpHookInvokeDirectOidRequestHandler();
ndisMpHookInvokeOidRequestHandler();
ndisMpHookNmrClientAttachProvider();
ndisMpHookNmrClientDetachProvider();
ndisMpHookNmrInitializeClient();
ndisMpHookRawDirectOidRequestComplete();
ndisMpHookRawIndicateStatus();
ndisMpHookRawOidRequestComplete();
ndisMpHookSetAdapterContext();
ndisMpHookSetDriverContext();
ndisNDKCleanup();
ndisNDKHandleWmiChangeRequest();
ndisNDKWmiGetAdapterCapabilities();
ndisNblTrackerAreNblsOutstandingOnComponent();
ndisNblTrackerDebugBreak();
ndisNblTrackerDeleteTracker();
ndisNblTrackerHandleFromNdisObjectHandle();
ndisNblTrackerInitialize();
ndisNblTrackerPrintComponentNameToDebugger();
ndisNblTrackerReadConfiguration();
ndisNblTrackerRecordEvent();
ndisNblTrackerReportStuckNbl();
ndisNblTrackerSetSqmFlag();
ndisNblTrackerTransferOneNbl();
ndisNblTrackerTransferOwnershipInternal();
ndisNblTrackerTransferOwnershipSingleNbl();
ndisNblTrackerUpdateOwnershipCount();
ndisNblTrackerVerifyNoNblsHeld();
ndisNblTrackerWatchdogTimer();
ndisNblTrackerWatchdogWorkerRoutine();
ndisNblVerifyRxCompletion();
ndisNblVerifyRxIndication();
ndisNblVerifyTxCompletion();
ndisNblVerifyTxIndication();
ndisNdkPcwAddCounter();
ndisNdkPcwCollectData();
ndisNdkPcwCollectMiniportStats();
ndisNdkPcwEnumerateInstances();
ndisNdkPcwMiniportCleanup();
ndisNdkPcwProviderCallback();
ndisNdkPcwRemoveCounter();
ndisNetBufferToPacket();
ndisNicActiveAcquire();
ndisNicActiveHandleCleanup();
ndisNicActiveRelease();
ndisNicActiveRequestComplete();
ndisNicAutoPowerInsertIntoSortedArray();
ndisNicAutoPowerSaverControlIdleTimer();
ndisNicAutoPowerSaverResetTelemetryData();
ndisNicQuietCheckRef();
ndisNicQuietRequestComplete();
ndisNicQuietWaitWakeCallback();
ndisNotifyAfRegistration();
ndisNotifyBindFailure();
ndisNotifyBindFailureOnUnboundProtocols();
ndisNotifyDevicePowerStateChange();
ndisNotifyMiniports();
ndisNotifyWmiBindUnbind();
ndisNsiChangeInterfaceInfo();
ndisNsiChangeNetworkInfo();
ndisNsiClientParameterChangeHandler();
ndisNsiDeregisterChangeNotification();
ndisNsiEnumerateAllCompartments();
ndisNsiEnumerateAllIfRcvAddresses();
ndisNsiEnumerateAllIfRcvAddressesInOneInterface();
ndisNsiEnumerateAllIfStackEntries();
ndisNsiEnumerateAllIfStackEntriesFull();
ndisNsiEnumerateAllInterfaceInformation();
ndisNsiEnumerateAllInvertedIfStackEntries();
ndisNsiEnumerateAllNetworks();
ndisNsiEnumerateAllSessionInformation();
ndisNsiGetAllIfRcvAddress();
ndisNsiGetAllInterfaceInformation();
ndisNsiGetAllJobInformation();
ndisNsiGetAllSessionInformation();
ndisNsiGetAllThreadInformation();
ndisNsiGetCompartmentIdForGuid();
ndisNsiGetCompartmentInfo();
ndisNsiGetIfNameForIfIndex();
ndisNsiGetIfRcvAddress();
ndisNsiGetIfRcvAddressRodInformation();
ndisNsiGetInterfaceInformation();
ndisNsiGetInterfaceRodEnumObject();
ndisNsiGetInterfaceRodInformation();
ndisNsiGetInterfaceRosEnumObject();
ndisNsiGetInterfaceRosInformation();
ndisNsiGetInterfaceRwInformation();
ndisNsiGetNetworkInfo();
ndisNsiGetTopIfBlockFromMiniport();
ndisNsiNotifyClientCompartmentChange();
ndisNsiNotifyClientInterfaceChange();
ndisNsiNotifyClientNetworkChange();
ndisNsiPostGetInterfaceRodInformation();
ndisNsiProviderAttachNsiClient();
ndisNsiProviderCleanupNsiClientContext();
ndisNsiProviderDetachNsiClient();
ndisNsiQueuedIfBlockRodChangeNotification();
ndisNsiQueuedTimestampingChangeNotification();
ndisNsiRegisterChangeNotification();
ndisNsiScheduleIfBlockRodChangeNotification();
ndisNsiSetAllCompartment();
ndisNsiSetAllJobInformation();
ndisNsiSetAllNetworkInfo();
ndisNsiSetAllSessionInformation();
ndisNsiSetAllThreadInformation();
ndisNsiSetInterfaceInformation();
ndisNsiSetNetworkInfo();
ndisNsiSetThreadInformation();
ndisNsiSyncMiniportMediaConnectStateNotification();
ndisNsiSyncMiniportOperStatusNotification();
ndisOidCloneForCompatibility();
ndisOidFreeInternalCloneRequest();
ndisOidGetStatisticAllProcessors();
ndisOidPMAddRemove();
ndisOidPMRemove();
ndisOidPostAddPMProtocolOffload();
ndisOidPostCurrentLookahead();
ndisOidPostEnableWakeUp();
ndisOidPostEthMulticastList();
ndisOidPostEthMulticastOid();
ndisOidPostIovAllocateVF();
ndisOidPostIovCreateNicSwitch();
ndisOidPostIovCreateVPort();
ndisOidPostIovDeleteNicSwitch();
ndisOidPostIovDeleteVPort();
ndisOidPostIovFreeVF();
ndisOidPostIovNicSwitchParameters();
ndisOidPostIovVPortParameters();
ndisOidPostLinkSpeed();
ndisOidPostMaxLookahead();
ndisOidPostMediaState();
ndisOidPostMiniportSetEncapsulation();
ndisOidPostMiniportStats();
ndisOidPostOffloadEncapsulation();
ndisOidPostOpenSetEncapsulation();
ndisOidPostPDOpenProvider();
ndisOidPostPMAddWOLPattern();
ndisOidPostPMParameters();
ndisOidPostPMRemoveWOLPattern();
ndisOidPostPacketFilter();
ndisOidPostRSSParameters();
ndisOidPostRSSv2Parameters();
ndisOidPostRcvFilterAllocateQueue();
ndisOidPostRcvFilterClearFilter();
ndisOidPostRcvFilterFreeQueue();
ndisOidPostRcvFilterMoveFilter();
ndisOidPostRcvFilterQueueParameters();
ndisOidPostRcvFilterSetFilter();
ndisOidPostRemovePMProtocolOffload();
ndisOidPostStatistics();
ndisOidPostTaskOffload();
ndisOidPostTcpConnectionOffloadParameters();
ndisOidPostWakeUpPatternList();
ndisOidPostWolPatternList();
ndisOidPreAddPMProtocolOffload();
ndisOidPreAddWakeUpPattern();
ndisOidPreCrossTimestamp();
ndisOidPreCurrentLookahead();
ndisOidPreDriverVersion();
ndisOidPreEnableWakeUp();
ndisOidPreEnumeratePorts();
ndisOidPreEthAddress();
ndisOidPreEthMulticastList();
ndisOidPreEthMulticastOid();
ndisOidPreFriendlyName();
ndisOidPreGenReceiveScale();
ndisOidPreGenStats();
ndisOidPreGetPMProtocolOffload();
ndisOidPreGetPciDeviceCustomProperties();
ndisOidPreHDSplitCurrentConfig();
ndisOidPreIovAllocateVF();
ndisOidPreIovBarResources();
ndisOidPreIovCaps();
ndisOidPreIovCreateNicSwitch();
ndisOidPreIovCreateVPort();
ndisOidPreIovDeleteNicSwitch();
ndisOidPreIovDeleteVPort();
ndisOidPreIovEnumNicSwitches();
ndisOidPreIovEnumVFs();
ndisOidPreIovEnumVPorts();
ndisOidPreIovFreeVF();
ndisOidPreIovGetVFVendorDeviceId();
ndisOidPreIovInvalidateConfigBlock();
ndisOidPreIovNicSwitchParameters();
ndisOidPreIovOverlyingAdapterInfo();
ndisOidPreIovPfLuid();
ndisOidPreIovProbedBars();
ndisOidPreIovReadVFConfigBlock();
ndisOidPreIovReadVFConfigSpace();
ndisOidPreIovResetVF();
ndisOidPreIovSetVFPowerState();
ndisOidPreIovVFParameters();
ndisOidPreIovVPortParameters();
ndisOidPreIovVfSerialNumber();
ndisOidPreIovWriteVFConfigBlock();
ndisOidPreIovWriteVFConfigSpace();
ndisOidPreLinkSpeedAndMediaState();
ndisOidPreLinkState();
ndisOidPreMacAddress();
ndisOidPreMacOptions();
ndisOidPreMaxFrameOrTotalSize();
ndisOidPreMaxLinkSpeed();
ndisOidPreMaxListSize();
ndisOidPreMaxLookahead();
ndisOidPreMediaInUse();
ndisOidPreMiniportSetEncapsulation();
ndisOidPreMiniportStats();
ndisOidPreNdisIfOidQuery();
ndisOidPreNicSwitchCaps();
ndisOidPreOffloadCaps();
ndisOidPreOffloadEncapsulation();
ndisOidPreOffloadHwCaps();
ndisOidPreOpenSetEncapsulation();
ndisOidPrePDCloseProvider();
ndisOidPrePDOpenProvider();
ndisOidPrePDQueryConfig();
ndisOidPrePMAddWOLPattern();
ndisOidPrePMCapabilities();
ndisOidPrePMCurrentCapabilities();
ndisOidPrePMHaltOnSuspend();
ndisOidPrePMHardwareCapabilities();
ndisOidPrePMParameters();
ndisOidPrePMProtocolOffloadList();
ndisOidPrePMRemoveWOLPattern();
ndisOidPrePMWOLPatternList();
ndisOidPrePacketFilter();
ndisOidPrePhysicalMedium();
ndisOidPrePnPCapabilities();
ndisOidPrePortState();
ndisOidPreProtocolOptions();
ndisOidPreQosCapabilities();
ndisOidPreQosGetParameters();
ndisOidPreQosSetParameters();
ndisOidPreQueryOffloadEncapsulation();
ndisOidPreQueryTcpConnectionParameters();
ndisOidPreRSSCaps();
ndisOidPreRSSParameters();
ndisOidPreRSSv2Parameters();
ndisOidPreRcvFilterAllocateQueue();
ndisOidPreRcvFilterAllocationComplete();
ndisOidPreRcvFilterClearFilter();
ndisOidPreRcvFilterEnumFilters();
ndisOidPreRcvFilterEnumQueues();
ndisOidPreRcvFilterFreeQueue();
ndisOidPreRcvFilterGlobalParameters();
ndisOidPreRcvFilterMoveFilter();
ndisOidPreRcvFilterParameters();
ndisOidPreRcvFilterQueueParameters();
ndisOidPreRcvFilterSetFilter();
ndisOidPreReceiveFilterCaps();
ndisOidPreRemovePMProtocolOffload();
ndisOidPreRemoveWakeUpPattern();
ndisOidPreSetHDSplitParameters();
ndisOidPreSetPortAuthentication();
ndisOidPreStatistics();
ndisOidPreSupportedList();
ndisOidPreTaskOffload();
ndisOidPreTcpConnectionOffload();
ndisOidPreTcpConnectionOffloadHwCaps();
ndisOidPreTcpConnectionOffloadParameters();
ndisOidPreTimestampCapability();
ndisOidPreWakeUpPatternList();
ndisOidRequestComplete();
ndisOidTranslateBetweenOids();
ndisOpenAdapterLegacyProtocol();
ndisOpenCancelSendNetBufferLists();
ndisOpenIndicatePMCapabilities();
ndisOpenProtocolSubkey();
ndisOpenRef();
ndisOpenULongRef();
ndisPDCleanupPDBlock();
ndisPDDereferenceClientDriver();
ndisPDDetachQueueFromEC();
ndisPDFindAndReferenceBMDomainUnderLock();
ndisPDInitializeMiniportBufferManagement();
ndisPDInitializePDBuffers();
ndisPDPcwCallback();
ndisPDPcwQueueDepthCallback();
ndisPDPcwUtilizationCallback();
ndisPDReadKeywords();
ndisPDSetBufferManagerHandlers();
ndisPDUpdateQDepthCounter();
ndisPMAddProtocolOffload();
ndisPMAddRemoveAsync();
ndisPMAddWOLPattern();
ndisPMPDCTaskClient();
ndisPMPatternIdExist();
ndisPMRejectAsync();
ndisPacketToNetBuffer();
ndisPadShortPacket();
ndisParseReceivedNBL();
ndisPauseFilter();
ndisPauseFilterInner();
ndisPauseProtocol();
ndisPauseProtocolInner();
ndisPcwAddCounter();
ndisPcwAddSinglePhysicalInstance();
ndisPcwCollectData();
ndisPcwCollectPhysicalData();
ndisPcwDeleteConsumer();
ndisPcwEnableAlwaysOnCounterSet();
ndisPcwEnableAlwaysOnCounters();
ndisPcwEndCycleCounter();
ndisPcwEnumerateInstances();
ndisPcwEnumerateSingleInstance();
ndisPcwGetECInstanceName();
ndisPcwGetInstanceName();
ndisPcwGetMiniportDataBlock();
ndisPcwGetMiniportDataBlockInternal();
ndisPcwGetMiniportInstanceId();
ndisPcwGetMiniportName();
ndisPcwGetPerCpuDataForProcessor();
ndisPcwGetReferencesForConsumer();
ndisPcwMatchInstance();
ndisPcwNotifyIfBlockRemoval();
ndisPcwNotifyMiniportCreation();
ndisPcwReferenceMiniportDataBlock();
ndisPcwRemoveCounter();
ndisPcwSetQueueInstanceName();
ndisPcwSetRssInstanceSuffix();
ndisPcwStartCycleCounter();
ndisPcwUpdateMiniportDataBlock();
ndisPcwUpdatePhysicalMiniportCounters();
ndisPdAreBMsCompatible();
ndisPdAwmDpcRoutine();
ndisPdGetIfIndexVPortStr();
ndisPdQCounterUpdateName();
ndisPdcTaskClientDisableTimeoutDpc();
ndisPdcTaskClientDisableTimeoutWorkItem();
ndisPendWorkOnSetBusyAsyncLocked();
ndisPeriodicReceivesAddCpu();
ndisPeriodicReceivesGetMaxNblCount();
ndisPeriodicReceivesTimer();
ndisPeriodicReceivesWorker();
ndisPhysicalNicPcwProviderCallback();
ndisPktMonFilterRegister();
ndisPktMonMiniportRegister();
ndisPktMonOpenRegister();
ndisPktMonRegisterComponentsCallback();
ndisPmHaltMiniport();
ndisPmInitializeMiniport();
ndisPnPAddDevice();
ndisPnPCancelRemoveDevice();
ndisPnPCancelStopDevice();
ndisPnPCompleteRemoveDevice();
ndisPnPDispatch();
ndisPnPHandlePagingIrp();
ndisPnPIrpCancelRemove();
ndisPnPIrpCancelStop();
ndisPnPIrpDeviceUsageNotification();
ndisPnPIrpFilterResourceRequirements();
ndisPnPIrpQueryCapabilities();
ndisPnPIrpQueryInterface();
ndisPnPIrpQueryPnPDeviceState();
ndisPnPIrpQueryRemove();
ndisPnPIrpQueryStop();
ndisPnPIrpRemoveDevice();
ndisPnPIrpStartDevice();
ndisPnPIrpStopDevice();
ndisPnPIrpSurpriseRemoval();
ndisPnPIrpSurpriseRemovalInner();
ndisPnPNotifyAllTransports();
ndisPnPNotifyBinding();
ndisPnPNotifyBindingUnlocked();
ndisPnPPortActivation();
ndisPnPPortDeactivation();
ndisPnPQueryRemoveDevice();
ndisPnPQuerySriovInterface();
ndisPnPQueryStopDevice();
ndisPnPRemoveDevice();
ndisPnPRemoveDeviceEx();
ndisPnPStartDevice();
ndisPnpInvokeTdi();
ndisPnpRefresh();
ndisPopulateRssProcessorSet();
ndisPostOffloadAdminSettings();
ndisPostOpenSetMulticastList();
ndisPostProcessRestartParametersAfterFilters();
ndisPostProcessRestartParametersAfterMiniport();
ndisPostProcessRestartParametersAfterProtocols();
ndisPostRemoveMiniportWakeUpPattern();
ndisPostSetAddWakeUpPattern();
ndisPostSetMiniportRSSParameters();
ndisPostSetMiniportRSSv2Parameters();
ndisPostSetOpenPacketFilter();
ndisPostSetOpenRSSParameters();
ndisPostSetOpenRSSParametersHelper();
ndisPostSetOpenRSSv2Parameters();
ndisPostSetRemoveWakeUpPattern();
ndisPowerDispatch();
ndisPowerIrpWorker();
ndisPowerSaveClearStop();
ndisPowerSaveStop();
ndisPowerStateCallback();
ndisPowerSuspendRequestComplete();
ndisPplAllocate();
ndisPplCreatePool();
ndisPplDestroyPool();
ndisPplLazyInitializeLookaside();
ndisPreOffloadAdminSettings();
ndisPreProcessOid();
ndisPreQueryPMParameters();
ndisPreRemoveMiniportWakeUpPattern();
ndisPreRemoveOpenWakeUpPattern();
ndisPreSetPMParameters();
ndisPreTaskOffloadQuery();
ndisPreTaskOffloadSet();
ndisPrepForLowPower();
ndisProcessRequestAsync();
ndisPublishSleepStudyCustomData();
ndisPublishSleepStudyCustomDataCsSpuriousWakeStats();
ndisPublishSleepStudyCustomDataCsTraffic();
ndisPublishSleepStudyNapsCustomData();
ndisPublishSleepStudyNapsOidCustomData();
ndisPublishSleepStudyNicAutoPowerSaverCustomData();
ndisPublishSleepStudyNicAutoPowerSaverStats();
ndisQueryBusInterface();
ndisQueryCustomGuids();
ndisQueryDeviceFlags();
ndisQueryDeviceOid();
ndisQueryDeviceReset();
ndisQueryDriverImageName();
ndisQueryDriverInterface();
ndisQueryEnableWakeUp();
ndisQueryFilterInstanceHandlers();
ndisQueryFilterOffloadCaps();
ndisQueryGuidData();
ndisQueryGuidDataSize();
ndisQueryMediaStatus();
ndisQueryMiniportEthMulticastList();
ndisQueryMiniportOffloadCaps();
ndisQueryMiniportPacketFilter();
ndisQueryMiniportRSSParameters();
ndisQueryMiniportRSSv2Parameters();
ndisQueryOidList();
ndisQueryOpenEnableWakeUp();
ndisQueryOpenEthMulticastList();
ndisQueryOpenPacketFilter();
ndisQueryOpenRSSParameters();
ndisQueryOpenRSSv2Parameters();
ndisQueryPower();
ndisQueryPowerCapabilities();
ndisQueryPowerComplete();
ndisQueryPowerCompleteSystemState();
ndisQueryRSSv2ParametersHelper();
ndisQueryReenumerateSelfInterface();
ndisQueryReferenceBusInterface();
ndisQuerySetMiniport();
ndisQuerySetMiniportDeviceState();
ndisQuerySetMiniportEx();
ndisQuerySetMiniportEx2();
ndisQueryStatisticsOids();
ndisQuerySupportedGuidToOidList();
ndisQueryWakeUpPatternList();
ndisQueryWolPatternList();
ndisQueueDpcWorkItem();
ndisQueueFilterOnDriver();
ndisQueueFilterRestart();
ndisQueueMiniportOnDriver();
ndisQueueOidRequest();
ndisQueueOpenOnProtocol();
ndisQueuePeriodicReceivesTimer();
ndisQueuePeriodicReceivesWorkItem();
ndisQueuePowerIrp();
ndisQueueReceiveNblsOnMiniport();
ndisQueueRequestOnTopAsync();
ndisQueueRequestWorkItem();
ndisQueueRestoreRequestsOnTop();
ndisQueueSendNblsOnMiniport();
ndisQueueStackExpansionFallbackNbls();
ndisQueueStackExpansionFallbackWorkItem();
ndisQueuedCheckForHang();
ndisQueuedMiniportDpcWorkItem();
ndisQueuedPnPIrpSurpriseRemoval();
ndisQueuedReenumerateFailedAdapter();
ndisQueuedResetMiniport();
ndisQueuedRestartFilter();
ndisQueuedStatusUnbindAdapter();
ndisQueuedUpdatePMCapabilities();
ndisReadBindPaths();
ndisReadDataLinkLayerKeywords();
ndisReadLwfById();
ndisReadMiniportDefaultPortAuthStates();
ndisReadMiniportMediaSpecificPortAuthStates();
ndisReadMiniportSpecificPortAuthStates();
ndisReadModernStandyWoLMagicPacketKeywords();
ndisReadNicAutoPowerSaverTimeoutKeywords();
ndisReadNicBindProperties();
ndisReadOffloadRegistry();
ndisReadPMAdminConfigState();
ndisReadPMRegistry();
ndisReadParameter();
ndisReadProtocolById();
ndisReadRegistry();
ndisReadRegistryKnobs();
ndisReadRssKeywords();
ndisReadSSTimeoutKeywords();
ndisReadUpperBindings();
ndisReceiveQueueingOff();
ndisReceiveQueueingOn();
ndisReceiveQueueingPaused();
ndisReceiveQueueingRestart();
ndisReceiveWorkerThread();
ndisRecordEvent();
ndisRefCountBlockFromRefCountHandle();
ndisRefCountHandleFromRefCountBlock();
ndisRefNextFilterForOidCancellation();
ndisReferenceAf();
ndisReferenceDriver();
ndisReferenceFilterByHandle();
ndisReferenceFilterDriver();
ndisReferenceMiniport();
ndisReferenceMiniportByGuid();
ndisReferenceMiniportByHandle();
ndisReferenceMiniportByHandleForNsi();
ndisReferenceMiniportByName();
ndisReferenceMiniportByNetLuid();
ndisReferenceMiniportNoCheck();
ndisReferenceNextUnprocessedMiniport();
ndisReferenceNextUnprocessedOpenEx();
ndisReferenceOpenByHandle();
ndisReferencePackage();
ndisReferenceProtocol();
ndisReferenceProtocolByName();
ndisReferenceRef();
ndisReferenceRefEx();
ndisReferenceRefNoCheck();
ndisReferenceTopMiniportByNameForNsi();
ndisReferenceVcPtr();
ndisReferenceWithTagStackTrace();
ndisRegisterMiniportDriver();
ndisRegisterPDCounterSets();
ndisRegisterProtocolDriverCommon();
ndisReinitializeMiniportBlock();
ndisRejectUnsupportedPMOffloads();
ndisRejectUnsupportedWoLPatterns();
ndisReleaseMiniportPnPEventLock();
ndisReleaseReadLockSharedRefCnt();
ndisReleaseReadWriteLockX();
ndisReleaseStackTrace();
ndisRemoveFromNblQueueByCancelId();
ndisRemoveMiniportFromGlobalList();
ndisRemoveOpenFromGlobalList();
ndisRemoveOpenWakeUpPattern();
ndisRemovePMLowestPriorityEntry();
ndisRemoveWoLDirectedMAC();
ndisReplaceBindTokens();
ndisReplayDirectOids();
ndisReplayRecvNbls();
ndisReplaySendNbls();
ndisReportTimeoutWaitingForExternalDriver();
ndisRequestDeviceLowPower();
ndisRequestDevicePowerD0();
ndisRequestNicActive();
ndisRequestNicQuiet();
ndisRequestPowerResume();
ndisRequestWaitWake();
ndisRequestedDevicePowerIrpComplete();
ndisResetPMCapabilities();
ndisResizeRefCountBlockTagged();
ndisRestartFilter();
ndisRestartFilterInner();
ndisRestartProtocol();
ndisRestoreFilterHandlersForMediaDisconnect();
ndisReturnNblWithPowerQueue();
ndisReturnNetBufferListsInternal();
ndisReturnNetBufferListsToPackets();
ndisReturnPacketToMiniport();
ndisReturnPacketToNetBufferList();
ndisReturnPeriodicReceives();
ndisReturnQueuedLowPowerNbls();
ndisRollbackPortActivation();
ndisRollbackPortDeactivation();
ndisRssPmObjectHeaderFixup();
ndisRssV2Initialize();
ndisRssV2InitializeDpcWorkerContext();
ndisRssV2Uninitialize();
ndisRssV2UpdateIndirectionTable();
ndisSSGetCachedOidValue();
ndisSSGetOidCacheEntry();
ndisSSIdleTimerDpc();
ndisSSIdleTimerWorkItem();
ndisSSInvalidateOidCache();
ndisSSUpdateCounters();
ndisSSUpdateOidCacheValue();
ndisSaveParameters();
ndisScheduleD0CompleteSignalWorkItem();
ndisScheduleStartDeviceWorkItem();
ndisScheduleWorkItemInternal();
ndisSelectiveSuspendClearStop();
ndisSelectiveSuspendFree();
ndisSelectiveSuspendInitialize();
ndisSelectiveSuspendResumeOperations();
ndisSelectiveSuspendSetResumeBusyReason();
ndisSelectiveSuspendStop();
ndisSendCompleteWithPause();
ndisSendNBLToFilter();
ndisSendPacketsWithPause();
ndisSendPmOidsForSuspend();
ndisSendSystemPowerStateIndication();
ndisSendWithPause();
ndisSetAddWakeUpPattern();
ndisSetAllFilterDefaultParameters();
ndisSetBusyAsync();
ndisSetBusySync();
ndisSetCombinedRSSParameters();
ndisSetDeviceInterfaceState();
ndisSetDeviceNames();
ndisSetDevicePower();
ndisSetDevicePowerDownComplete();
ndisSetDevicePowerNotificationHandlers();
ndisSetDevicePowerOnComplete();
ndisSetEnableWakeUp();
ndisSetFilterDefaultParameter();
ndisSetIdleTimer();
ndisSetMediaDisconnectTimer();
ndisSetMiniportEnableWakeUp();
ndisSetMiniportEthMulticastList();
ndisSetMiniportHandlers();
ndisSetMiniportPacketFilter();
ndisSetMiniportRSSParameters();
ndisSetMiniportRSSv1ParametersForMiniportV2();
ndisSetMiniportRSSv2Parameters();
ndisSetMiniportRSSv2ParametersHelper();
ndisSetMiniportReenumerateHandlers();
ndisSetOpenAddWakeUpPattern();
ndisSetOpenEnableWakeUp();
ndisSetOpenEthAddDeleteMulticast();
ndisSetOpenEthMulticastList();
ndisSetOpenPacketFilter();
ndisSetOpenRSSParameters();
ndisSetOpenRSSv2Parameters();
ndisSetOpenToTranslationMode();
ndisSetPdcTaskClientExpiryTimer();
ndisSetPerfTrackParameters();
ndisSetPower();
ndisSetPowerResume();
ndisSetPowerResumeComplete();
ndisSetPowerResumeCompleteWorkItem();
ndisSetPowerSuspend();
ndisSetReceiveFilter();
ndisSetRemoveWakeUpPattern();
ndisSetRestoreMulticastList();
ndisSetRestorePacketFilter();
ndisSetSSHandlers();
ndisSetSystemPower();
ndisSetSystemPowerNotificationHandlers();
ndisSetSystemPowerOnComplete();
ndisSetTaskOffloadValidate();
ndisSetTempRefTimer();
ndisSetWakeUpTimer();
ndisSetupDownwardHandlers();
ndisSetupLwfMiniportHandlers();
ndisSetupMiniportProtocolHandlers();
ndisSetupNdis6OpenHandlers();
ndisSetupNoFilterHandlers();
ndisSetupPDCounter();
ndisSetupPDQTracker();
ndisSetupUpwardHandlers();
ndisSetupWmiNode();
ndisShallowCopyNetPnPEvent();
ndisShouldCacheRSSParameters();
ndisShouldCacheRSSv2ParametersInMiniport();
ndisShouldEngageNicAutoPowerSaver();
ndisShouldSuppressReceiveFilterCapabilities();
ndisSignalD0CompleteWorkItem();
ndisSignalD0RequestComplete();
ndisSleepStudyGetNameFromReasonCode();
ndisSortNetBufferLists();
ndisSourceHandleFromOwner();
ndisSourcePreAddProtocolOffload();
ndisSourcePreAddWoLPattern();
ndisSplitStatisticsOids();
ndisSriovGetResourceForBar();
ndisSriovInterfaceDereference();
ndisSriovInterfaceGetDeviceLocation();
ndisSriovInterfaceGetVendorAndDeviceIds();
ndisSriovInterfaceQueryProbedBars();
ndisSriovInterfaceReadVFConfig();
ndisSriovInterfaceReadVfConfigBlock();
ndisSriovInterfaceReference();
ndisSriovInterfaceResetVF();
ndisSriovInterfaceSetVfPowerState();
ndisSriovInterfaceWriteVFConfig();
ndisSriovInterfaceWriteVfConfigBlock();
ndisSriovQueryLuid();
ndisStackExpansionFallbackWorker();
ndisStartDeviceSynchronous();
ndisStartDeviceWorkItem();
ndisStartMapping();
ndisStartNsiClient();
ndisStartNsiProvider();
ndisStopNsiProvider();
ndisSubmitIdleRequest();
ndisSumDataBlock();
ndisSwapFilterHandlersForMediaDisconnect();
ndisSwitchMiniportReceiveFunction();
ndisSynchReturnPacketsForTranslation();
ndisSynchronousOidRequest();
ndisTempRefTimerDpc();
ndisTemporarilyScribbleNetLuidIndex();
ndisTopTcpConnectionOffloadStatus();
ndisTraceDpcEnd();
ndisTraceDpcStart();
ndisTraceNicAutoPowerSaver();
ndisTracePeriodicRcvOnOff();
ndisTracePeriodicReceivesEnd();
ndisTracePeriodicReceivesStart();
ndisTraceRcv();
ndisTranslateOffloadSetsToTasks();
ndisTranslateResources();
ndisTriggerPDDrainNotification();
ndisUnbindAdapterInner();
ndisUnbindAdapterWorkItem();
ndisUnbindEachProtocolOpenOnMiniport();
ndisUnbindProtocolOpen();
ndisUnicodeStringToPointer();
ndisUnloadPeriodicReceives();
ndisUnprocessAllMiniports();
ndisUnprocessAllOpens();
ndisUnsetNdis6OpenHandlers();
ndisUpdateAndIndicatePMCapabilities();
ndisUpdateCheckForLoopbackFlag();
ndisUpdateCsSpuriousWakeStats();
ndisUpdateFilterFakeStatus();
ndisUpdateHDSplitKeyword();
ndisUpdateLoopbackOpens();
ndisUpdateMinimumStackVersion();
ndisUpdateMiniportCsTrafficStatistics();
ndisUpdateMiniportFakeStatus();
ndisUpdateMiniportPortStates();
ndisUpdateNoPauseOnSuspend();
ndisUpdateOffloadKeywords();
ndisUpdateOperationalStatus();
ndisUpdatePMCurrentCapabilities();
ndisUpdatePMCurrentParameters();
ndisUpdateRcvFilterQueueParameters();
ndisUpdateRssV1ParametersFromV2();
ndisUpdateWmiPMParamsForPatterns();
ndisUpdateWmiPMParamsForProtocolOffloads();
ndisVBusDetachComplete();
ndisVBusNmrClientAttachProvider();
ndisVBusNmrClientCleanupBindingContext();
ndisVBusNmrClientDetachProvider();
ndisVBusNmrInitializeClient();
ndisVBusVirtMiniAdd();
ndisVBusVirtMiniRemove();
ndisValidComponentId();
ndisValidOid();
ndisValidate60Protocol();
ndisValidateAndConvertWcharStringToUnicodeString();
ndisValidateConnectionOffload();
ndisValidateEmbeddedBufferBounds();
ndisValidateFilterDriverCharacteristicsHeader();
ndisValidateGFPExactMatchProfileBuffer();
ndisValidateGFPWildcardMatchHGProfileBuffer();
ndisValidateGFPWildcardMatchProfileBuffer();
ndisValidateLWMiniportDriverCharacteristicsHeader();
ndisValidateLegacyProtocols();
ndisValidateMacAddressChange();
ndisValidateMiniportDriverCharacteristicsEntryPoints();
ndisValidateMiniportDriverCharacteristicsHeader();
ndisValidateNdisOffsetAndLengthInputBufferBounds();
ndisValidateNdisOffsetAndLengthInputString();
ndisValidateNdisVarDataDesc32InputString();
ndisValidateNdisVarDataDescInputString();
ndisValidateOffloadCapability();
ndisValidatePDCapsBuffer();
ndisValidatePDConfigBuffer();
ndisValidateProtocolDriverCharacteristicsHeader();
ndisValidateQosParameters();
ndisValidateTrailingElementSpace();
ndisVerifierAllocateMemory();
ndisVerifierAllocateMemoryWithTag();
ndisVerifierAllocateMemoryWithTagPriority();
ndisVerifierAllocatePacketPool();
ndisVerifierAllocatePacketPoolEx();
ndisVerifierFreeMemory();
ndisVerifierFreePacketPool();
ndisVerifierGetRoutineAddress();
ndisVerifierInitialization();
ndisVerifierInjectResourceFailure();
ndisVerifierNdisFIndicateReceiveNetBufferLists();
ndisVerifierNdisFPauseComplete();
ndisVerifierNdisFReturnNetBufferLists();
ndisVerifierNdisFSendNetBufferLists();
ndisVerifierNdisFSendNetBufferListsComplete();
ndisVerifierNdisMIndicateStatusEx();
ndisVerifierNdisMOidRequestComplete();
ndisVerifierNdisMSendNetBufferListsComplete();
ndisVerifierQueryMapRegisterCount();
ndisVerifyNdisAcquireRWLockRead();
ndisVerifyNdisAcquireRWLockWrite();
ndisVerifyNdisAllocateRWLock();
ndisVerifyNdisFreeRWLock();
ndisVerifyNdisReleaseRWLock();
ndisVerifyNdisTryAcquireRWLockRead();
ndisVerifyNdisTryAcquireRWLockWrite();
ndisVerifyNdisTryPromoteRWLockFromReadToWrite();
ndisVerifySynchronousOidAfterCompletion();
ndisVerifyValidRWLockFlags();
ndisWMIDispatch();
ndisWMIIrpDispatch();
ndisWaitForAllProcessorsIdle();
ndisWaitForDpcCompletion();
ndisWaitForEvent();
ndisWaitForEventThenDisarmWatchdog();
ndisWaitForExternalDriver();
ndisWaitForResetCompletion();
ndisWaitWakeIoCompletion();
ndisWakeUpDevice();
ndisWatchdogTimeoutDpc();
ndisWatchdogTimeoutWorkerRoutine();
ndisWdfAcquirePowerReferenceHelper();
ndisWdfAoAcDisengageComplete();
ndisWdfIsAoAcPowerTransition();
ndisWdfNotifySystemPower();
ndisWdfOpenConfigurationKey();
ndisWdfPostReleaseHardware();
ndisWdfPreReleaseHardware();
ndisWdfRequestNicActive();
ndisWdfRequestNicQuiet();
ndisWdfSelectiveSuspendResumeOperations();
ndisWdfSetBusyAsync();
ndisWdfSetBusySync();
ndisWdfUpdateAddDeviceParameters();
ndisWdmPnPAddDevice();
ndisWdmSetBusyAsync();
ndisWdmSetBusySync();
ndisWildCardStringMatch();
ndisWmiChangeSingleInstance();
ndisWmiDisableEvents();
ndisWmiEnableEvents();
ndisWmiExecuteMethod();
ndisWmiFindInstanceName();
ndisWmiGetGuid();
ndisWmiGuidIsAdapterSpecific();
ndisWmiMapOids();
ndisWmiQueryAllData();
ndisWmiQueryPMActiveCapabilities();
ndisWmiQuerySingleInstance();
ndisWmiRegister();
ndisWmiSetPMAdminConfig();
ndisWmiXlateEnumNdisRecvQueuesToWmiRecvQueues();
ndisWmiXlateNdisOffloadToWmiOffload();
ndisWmiXlateNdisRecvQueueParamsToWmiRecvQueueParams();
ndisWnfPdcCallback();
ndisWorkItemHandler();
ndisWppExtendedCallback();
ndisWppFastTraceMessage();
ndisWriteConfigurationIfPresent();
ndisWriteDriverNDISVersionToServiceKey();
ndisWritePMAdminConfigState();
ndisWriteWmiStatusIndication();
ndisXlateAddPacketPatternToWolPatternOid();
ndisXlateAddWolPatternToPacketPatternOid();
ndisXlateMiniportFlags();
ndisXlatePMParametersToWakeUpEnableOid();
ndisXlatePnPFlags();
ndisXlateRecvNetBufferListsToPacketArray();
ndisXlateRecvPacketArrayToNetBufferLists();
ndisXlateRemovePacketPatternToWolPatternOid();
ndisXlateRemoveWolPatternToPacketPatternOid();
ndisXlateReturnNetBufferListToPacket();
ndisXlateReturnPacketToNetBufferList();
ndisXlateSSResume();
ndisXlateSendCompleteNetBufferListToPacket();
ndisXlateSendCompletePacketToNetBufferList();
ndisXlateSendNetBufferListsToPacketArray();
ndisXlateSendPacketArrayToNetBufferLists();
ndisXlateWakeUpEnableToPMParametersOid();
ndisXlateWakeUpPatternListToWolPatternList();
ndisXlateWolPatternListToWakeUpPatternList();
netsetupBuildBindingRegistryPath();
netsetupBuildObjectPath();
netsetupBuildStorePath();
netsetupEnumerateObjectIds<<lambda_1fb5030af8eda575469a2cf1deeace82> >();
netsetupEnumerateObjectIds<long (__cdecl*)(_GUID const & __ptr64)>();
netsetupGetPathForObjectType();
netsetupIsImpliedProperty();
nullCreateFilter();
nullDeleteFilter();
nullDeleteFilterOpenAdapter();
operator delete();
operator delete[]();
operator<();
swprintf_s<40>();
validateMemoryPages();
verifySingleMdl();
verifySingleNb();
verifySingleRxNbl();
verifySingleTxNbl();
wcscmp();
wil::details::unique_storage<wil::details::resource_policy<void * __ptr64,long (__cdecl*)(void * __ptr64),&ZwClose,wistd::integral_constant<unsigned __int64,0>,void * __ptr64,0,std::nullptr_t> >::reset();
wil_details_FeaturePropertyCache_ReportUsageToService();
wil_details_FeaturePropertyCache_ReportUsageToServiceDirect();
wil_details_MapReportingKind();
wil_details_ModifyFeatureData();
wil_details_RecordUsageInPropertyCache();
wil_details_SetPropertyCacheOpportunityCallback();
wil_details_SetPropertyCacheUsageCallback();
wil_details_SetPropertyFlagCallback();
wistd::operator==<_NDIS_PM_PACKET_PATTERN,KFreePool<_NDIS_PM_PACKET_PATTERN> >();
wistd::operator==<_NDIS_PM_WOL_PATTERN,KFreePool<_NDIS_PM_WOL_PATTERN> >();
wistd::operator==<_NDIS_WOL_XLATION_CONTEXT,KFreePool<_NDIS_WOL_XLATION_CONTEXT> >();
wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >::`scalar deleting destructor'();
wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >::`scalar deleting destructor'();
wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >::`scalar deleting destructor'();
wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >::operator=();
wistd::unique_ptr<_UNICODE_STRING,KFreePool<_UNICODE_STRING> >::operator=();
