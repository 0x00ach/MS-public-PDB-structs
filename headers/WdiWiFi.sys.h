struct $_TypeDescriptor$_extraBytes_15;
struct $_TypeDescriptor$_extraBytes_17;
struct $_TypeDescriptor$_extraBytes_18;
struct $_TypeDescriptor$_extraBytes_19;
struct $_TypeDescriptor$_extraBytes_20;
struct $_TypeDescriptor$_extraBytes_21;
struct $_TypeDescriptor$_extraBytes_22;
struct $_TypeDescriptor$_extraBytes_23;
struct $_TypeDescriptor$_extraBytes_24;
struct $_TypeDescriptor$_extraBytes_25;
struct $_TypeDescriptor$_extraBytes_26;
struct $_TypeDescriptor$_extraBytes_27;
struct $_TypeDescriptor$_extraBytes_28;
struct $_TypeDescriptor$_extraBytes_29;
struct $_TypeDescriptor$_extraBytes_30;
struct $_TypeDescriptor$_extraBytes_31;
struct $_TypeDescriptor$_extraBytes_32;
struct $_TypeDescriptor$_extraBytes_33;
struct $_TypeDescriptor$_extraBytes_34;
struct $_TypeDescriptor$_extraBytes_35;
struct $_TypeDescriptor$_extraBytes_36;
struct $_TypeDescriptor$_extraBytes_37;
struct $_TypeDescriptor$_extraBytes_38;
struct $_TypeDescriptor$_extraBytes_39;
struct $_TypeDescriptor$_extraBytes_40;
struct $_TypeDescriptor$_extraBytes_41;
struct $_TypeDescriptor$_extraBytes_42;
struct $_TypeDescriptor$_extraBytes_43;
struct $_TypeDescriptor$_extraBytes_44;
struct $_TypeDescriptor$_extraBytes_45;
struct $_TypeDescriptor$_extraBytes_47;
struct $_s__RTTIBaseClassArray$_extraBytes_16;
struct $_s__RTTIBaseClassArray$_extraBytes_32;
struct $_s__RTTIBaseClassArray$_extraBytes_40;
struct $_s__RTTIBaseClassArray$_extraBytes_48;
struct $_s__RTTIBaseClassArray$_extraBytes_56;
struct $_s__RTTIBaseClassArray$_extraBytes_64;
struct $_s__RTTIBaseClassArray$_extraBytes_8;
struct ANQP_ACTION_FRAME_PARAMETERS;
struct ArrayOfElements<ArrayOfElements<unsigned char> >;
struct ArrayOfElements<_GUID>;
struct ArrayOfElements<_NDIS_GUID>;
struct ArrayOfElements<_WDI_ALGO_PAIRS>;
struct ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER>;
struct ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER>;
struct ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER>;
struct ArrayOfElements<_WDI_BAND_INFO_CONTAINER>;
struct ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER>;
struct ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY>;
struct ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER>;
struct ArrayOfElements<_WDI_COUNTRY_REGION_LIST>;
struct ArrayOfElements<_WDI_DATA_RATE_LIST>;
struct ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY>;
struct ArrayOfElements<_WDI_IPv4_TCP_SYNC>;
struct ArrayOfElements<_WDI_IPv6TCP_SYNC>;
struct ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS>;
struct ArrayOfElements<_WDI_MAC_ADDRESS>;
struct ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS>;
struct ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER>;
struct ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER>;
struct ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER>;
struct ArrayOfElements<_WDI_P2P_DEVICE_TYPE>;
struct ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER>;
struct ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER>;
struct ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER>;
struct ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH>;
struct ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER>;
struct ArrayOfElements<_WDI_PHY_INFO_CONTAINER>;
struct ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS>;
struct ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT>;
struct ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD>;
struct ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER>;
struct ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER>;
struct ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER>;
struct ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER>;
struct ArrayOfElements<char>;
struct ArrayOfElements<enum _WDI_AUTH_ALGORITHM>;
struct ArrayOfElements<enum _WDI_BAND_ID>;
struct ArrayOfElements<enum _WDI_CIPHER_ALGORITHM>;
struct ArrayOfElements<enum _WDI_PHY_TYPE>;
struct ArrayOfElements<unsigned char>;
struct ArrayOfElements<unsigned int>;
struct ArrayOfElements<unsigned long>;
struct ArrayOfElements<unsigned short>;
struct DMG;
struct DOT11_ASSOCIATION_COMPLETION_EX_PARAMETERS;
struct DOT11_ASSOCIATION_START_PARAMETERS;
struct DOT11_AUTH_CIPHER_PAIR;
struct DOT11_BEACON_FRAME;
struct DOT11_BSS_ENTRY;
struct DOT11_BYTE_ARRAY;
struct DOT11_CAPABILITY::DMG;
struct DOT11_CHANNEL_HINT;
struct DOT11_CIPHER_DEFAULT_KEY_VALUE;
struct DOT11_DISASSOCIATION_PARAMETERS;
struct DOT11_EXTSTA_RECV_CONTEXT;
struct DOT11_INFO_ELEMENT;
struct DOT11_MAC_INFO;
struct DOT11_PMKID_ENTRY;
struct DOT11_PRIVACY_EXEMPTION;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__;
struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__;
struct POHANDLE__;
struct SCOPE_ID;
struct SmoothedThrottleLevel;
struct WDFCHILDLIST__;
struct WDFCMRESLIST__;
struct WDFCOLLECTION__;
struct WDFCOMMONBUFFER__;
struct WDFDEVICE_INIT;
struct WDFDEVICE__;
struct WDFDMAENABLER__;
struct WDFDMATRANSACTION__;
struct WDFDPC__;
struct WDFDRIVER__;
struct WDFFILEOBJECT__;
struct WDFINTERRUPT__;
struct WDFIORESLIST__;
struct WDFIORESREQLIST__;
struct WDFIOTARGET__;
struct WDFKEY__;
struct WDFLOOKASIDE__;
struct WDFMEMORY__;
struct WDFQUEUE__;
struct WDFREQUEST__;
struct WDFSPINLOCK__;
struct WDFSTRING__;
struct WDFTIMER__;
struct WDFWAITLOCK__;
struct WDFWMIINSTANCE__;
struct WDFWMIPROVIDER__;
struct WDFWORKITEM__;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
struct _ADD_RECEIVE_COALESCING_INFO;
struct _ADD_RECEIVE_COALESCING_INFO::_ADD_RECEIVE_COALESCING_INFO_Optional;
struct _ADD_RECEIVE_COALESCING_INFO_Optional;
struct _ASSEMBLY_STORAGE_MAP;
struct _AUX_ACCESS_DATA;
struct _BSSID_CONNECT_HISTORY_ATTEMPT;
struct _BSSID_CONNECT_HISTORY_ENTRY;
struct _BSS_ENTRY_BLOCKED_INFO;
struct _BSS_ENTRY_CONNECT_MATCHING_CRITERIA;
struct _BSS_ENTRY_WFD_SERVICES_INFO;
struct _BUFFER_DOT11_AUTH_ALGO;
struct _BUFFER_DOT11_CIPHER_ALGO;
struct _BUFFER_DOT11_HESSID;
struct _BUFFER_DOT11_SSID;
struct _BUFFER_MAC_ADDRESS;
struct _BUFFER_UINT8;
struct _ByteArray;
struct _CLIENT_ID;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_RESOURCE_LIST;
struct _COMPRESSED_DATA_INFO;
struct _CONTEXT;
struct _CPP_LIST_ENTRY;
struct _CURDIR;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVOBJ_EXTENSION;
struct _DEVPROPCOMPKEY;
struct _DEVPROPKEY;
struct _DISPATCHER_HEADER;
struct _DMA_ADAPTER;
struct _DMA_ADAPTER_INFO;
struct _DMA_ADAPTER_INFO_V1;
struct _DMA_OPERATIONS;
struct _DMA_TRANSFER_INFO;
struct _DMA_TRANSFER_INFO_V1;
struct _DMA_TRANSFER_INFO_V2;
struct _DOT11_ADAPTER_CAPABILITIES;
struct _DOT11_ANQP_ACTION_FRAME;
struct _DOT11_AVERTISEMENT_PROTOCOL_ELEMENT;
struct _DOT11_AVERTISEMENT_PROTOCOL_TUPLE;
struct _DOT11_BAND_CAPABILITIES;
struct _DOT11_BAND_DESCRIPTOR;
struct _DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS;
struct _DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS;
struct _DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS;
struct _DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS;
struct _DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS;
struct _DOT11_MAC_PARAMETERS;
struct _DOT11_NEIGHBOR_REPORT_IE;
struct _DOT11_OFFLOAD_NETWORK_LIST_INFO_V2;
struct _DOT11_OFFLOAD_NETWORK_V2;
struct _DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS;
struct _DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS;
struct _DOT11_RESET_REQUEST;
struct _DOT11_RSN_REKEY_PARAMETERS;
struct _DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS;
struct _DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS;
struct _DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS;
struct _DOT11_SEND_INVITATION_REQUEST_PARAMETERS;
struct _DOT11_SEND_INVITATION_RESPONSE_PARAMETERS;
struct _DOT11_SSID;
struct _DOT11_WFD_BACKGROUND_DISCOVERY_REQUEST;
struct _DOT11_WFD_CHANNEL;
struct _DOT11_WFD_CONFIGURATION_TIMEOUT;
struct _DOT11_WFD_DEVICE_ENTRY;
struct _DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS;
struct _DOT11_WFD_DISCOVER_DEVICE_FILTER;
struct _DOT11_WFD_DISCOVER_REQUEST;
struct _DOT11_WFD_GO_INTENT;
struct _DOT11_WFD_GROUP_ID;
struct _DOT11_WFD_INVITATION_FLAGS;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _ECP_LIST;
struct _EPROCESS;
struct _ERESOURCE;
struct _ETHREAD;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EXT_DELETE_PARAMETERS;
struct _EXT_SET_PARAMETERS_V0;
struct _EX_PUSH_LOCK;
struct _EmptyMessageStructureType;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FILE_BASIC_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_STANDARD_INFORMATION;
struct _FLS_CALLBACK_INFO;
struct _GDI_TEB_BATCH;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERIC_MAPPING;
struct _GROUP_AFFINITY;
struct _GUID;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_OPTIONAL_HEADER64;
struct _INITIAL_PRIVILEGE_SET;
struct _INTERFACE;
struct _IO_COMPLETION_CONTEXT;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_PRIORITY_INFO;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_TIMER;
struct _IPV4_ARP_PARAMETERS;
struct _IPV4_HEADER;
struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IPV6_FRAGMENT_HEADER;
struct _IPV6_NS_PARAMETERS;
struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IRP;
struct _KAPC;
struct _KDESCRIPTOR;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KEVENT;
struct _KFLOATING_SAVE;
struct _KINTERRUPT;
struct _KNODE;
struct _KPCR;
struct _KPRCB;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KSPECIAL_REGISTERS;
struct _KSPIN_LOCK_QUEUE;
struct _KSYSTEM_TIME;
struct _KTHREAD;
struct _KTSS64;
struct _KUSER_SHARED_DATA;
struct _LEAP_SECOND_DATA;
struct _LIST_ENTRY;
struct _LOOKASIDE_LIST_EX;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _M128A;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MDL;
struct _METHOD;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO;
struct _NDIS_EVENT;
struct _NDIS_GUID;
struct _NDIS_IPSEC_OFFLOAD_V1;
struct _NDIS_IPSEC_OFFLOAD_V2;
struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS;
struct _NDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS;
struct _NDIS_MINIPORT_HOOK_DRIVER_CLIENT_DISPATCH;
struct _NDIS_MINIPORT_HOOK_DRIVER_PROVIDER_CHARACTERISTICS;
struct _NDIS_MINIPORT_HOOK_DRIVER_PROVIDER_DISPATCH;
struct _NDIS_MINIPORT_INIT_PARAMETERS;
struct _NDIS_MINIPORT_PAUSE_PARAMETERS;
struct _NDIS_MINIPORT_RESTART_PARAMETERS;
struct _NDIS_MINIPORT_WDI_DATA_HANDLERS;
struct _NDIS_OBJECT_HEADER;
struct _NDIS_OFFLOAD;
struct _NDIS_OFFLOAD_ENCAPSULATION;
struct _NDIS_OFFLOAD_PARAMETERS;
struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS;
struct _NDIS_OID_REQUEST;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET;
struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES;
struct _NDIS_PM_CAPABILITIES;
struct _NDIS_PM_COUNTED_STRING;
struct _NDIS_PM_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN;
struct _NDIS_PORT_AUTHENTICATION_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_CAPABILITIES;
struct _NDIS_RECEIVE_FILTER_PARAMETERS;
struct _NDIS_RECEIVE_THROTTLE_PARAMETERS;
struct _NDIS_RESTART_ATTRIBUTES;
struct _NDIS_RFC6877_464XLAT_OFFLOAD;
struct _NDIS_SPIN_LOCK;
struct _NDIS_STATUS_INDICATION;
struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2;
struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD;
struct _NDIS_WDI_DATA_API;
struct _NDIS_WDI_INIT_PARAMETERS;
struct _NETIO_NET_BUFFER_CONTEXT;
struct _NETIO_NET_BUFFER_LIST_CONTEXT;
struct _NET_BUFFER;
struct _NET_BUFFER_DATA;
struct _NET_BUFFER_LIST;
struct _NET_BUFFER_LIST_CONTEXT;
struct _NET_BUFFER_LIST_DATA;
struct _NET_BUFFER_SHARED_MEMORY;
struct _NET_DEVICE_PNP_EVENT;
struct _NPAGED_LOOKASIDE_LIST;
struct _NPI_MODULEID;
struct _NPI_PROVIDER_CHARACTERISTICS;
struct _NPI_REGISTRATION_INSTANCE;
struct _NT_TIB;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OID_HANDLER_ENTRY;
struct _OWNER_ENTRY;
struct _PAGED_LOOKASIDE_LIST;
struct _PEB;
struct _PEB_LDR_DATA;
struct _PEER_ROAM_HISTORY;
struct _PLACEMENT_NEW_ALLOCATION_CONTEXT;
struct _PMD;
struct _PNP_BUS_INFORMATION;
struct _POWER_SEQUENCE;
struct _PO_FX_COMPONENT_IDLE_STATE;
struct _PO_FX_COMPONENT_V1;
struct _PRIVILEGE_SET;
struct _PROCESSOR_NUMBER;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _QUAD;
struct _QUERY;
struct _RECORDER_CONFIGURE_PARAMS;
struct _RECORDER_LOG_CREATE_PARAMS;
struct _RESET_PORT_REQUEST_CONTEXT;
struct _ROAM_CONTROL_PARAMETERS;
struct _ROAM_TRACELOGGING_DATA;
struct _RSCLIB_SERIAL_COALESCING_CONTEXT;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_AVL_TREE;
struct _RTL_BALANCED_NODE;
struct _RTL_BITMAP;
struct _RTL_CRITICAL_SECTION;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_RB_TREE;
struct _RTL_SPLAY_LINKS;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _SCSI_REQUEST_BLOCK;
struct _SECTION_OBJECT_POINTERS;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SET;
struct _SID;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SINGLE_LIST_ENTRY;
struct _SLIST_ENTRY;
struct _STRING;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _TAL_TXRX_PARAMETERS;
struct _TEB;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TEST_AGGREGATE_CONTAINER;
struct _TLV_CONTEXT;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
struct _TP_CLEANUP_GROUP;
struct _TP_POOL;
struct _TXN_PARAMETER_BLOCK;
struct _TlgProviderMetadata_t;
struct _TlgProvider_t;
struct _TraceLoggingMetadata_t;
struct _TypeDescriptor;
struct _UNICODE_STRING;
struct _VARIABLE_LENGTH_BUFFER_UINT8;
struct _VPB;
struct _VXLAN_INFO;
struct _VXLAN_PARAMETERS;
struct _WAIT_CONTEXT_BLOCK;
struct _WDFMEMORY_OFFSET;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER;
struct _WDF_CHILD_LIST_CONFIG;
struct _WDF_CHILD_LIST_ITERATOR;
struct _WDF_CHILD_RETRIEVE_INFO;
struct _WDF_COMMON_BUFFER_CONFIG;
struct _WDF_DEVICE_PNP_CAPABILITIES;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_CAPABILITIES;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS;
struct _WDF_DEVICE_PROPERTY_DATA;
struct _WDF_DEVICE_STATE;
struct _WDF_DMA_ENABLER_CONFIG;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG;
struct _WDF_DPC_CONFIG;
struct _WDF_DRIVER_CONFIG;
struct _WDF_DRIVER_GLOBALS;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS;
struct _WDF_FDO_EVENT_CALLBACKS;
struct _WDF_FILEOBJECT_CONFIG;
struct _WDF_INTERRUPT_CONFIG;
struct _WDF_INTERRUPT_EXTENDED_POLICY;
struct _WDF_INTERRUPT_INFO;
struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS;
struct _WDF_IO_QUEUE_CONFIG;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY;
struct _WDF_IO_TARGET_OPEN_PARAMS;
struct _WDF_IO_TYPE_CONFIG;
struct _WDF_MEMORY_DESCRIPTOR;
struct _WDF_OBJECT_ATTRIBUTES;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO;
struct _WDF_PDO_EVENT_CALLBACKS;
struct _WDF_PNPPOWER_EVENT_CALLBACKS;
struct _WDF_POWER_FRAMEWORK_SETTINGS;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS;
struct _WDF_QUERY_INTERFACE_CONFIG;
struct _WDF_REMOVE_LOCK_OPTIONS;
struct _WDF_REQUEST_COMPLETION_PARAMS;
struct _WDF_REQUEST_FORWARD_OPTIONS;
struct _WDF_REQUEST_PARAMETERS;
struct _WDF_REQUEST_REUSE_PARAMS;
struct _WDF_REQUEST_SEND_OPTIONS;
struct _WDF_TIMER_CONFIG;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS;
struct _WDF_WMI_INSTANCE_CONFIG;
struct _WDF_WMI_PROVIDER_CONFIG;
struct _WDF_WORKITEM_CONFIG;
struct _WDI_ACTION_FRAME_REQUEST_PARAMETERS;
struct _WDI_ADDITIONAL_IES_CONTAINER;
struct _WDI_ADDITIONAL_IES_CONTAINER::_WDI_ADDITIONAL_IES_CONTAINER_Optional;
struct _WDI_ADDITIONAL_IES_CONTAINER_Optional;
struct _WDI_ALGO_PAIRS;
struct _WDI_AP_ASSOCIATION_REQUEST_PARAMETERS;
struct _WDI_AP_ASSOCIATION_RESPONSE_PARAMETERS;
struct _WDI_AP_ATTRIBUTES_CONTAINER;
struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER;
struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER::_WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional;
struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional;
struct _WDI_AP_BAND_INFORMATION_CONTAINER;
struct _WDI_AP_CAPABILITIES;
struct _WDI_ASSOCIATION_RESULT_CONTAINER;
struct _WDI_ASSOCIATION_RESULT_CONTAINER::_WDI_ASSOCIATION_RESULT_CONTAINER_Optional;
struct _WDI_ASSOCIATION_RESULT_CONTAINER_Optional;
struct _WDI_ASSOCIATION_RESULT_PARAMETERS;
struct _WDI_ASSOC_RESULT_PARAMETERS;
struct _WDI_BAND_CAPABILITIES;
struct _WDI_BAND_CHANNEL_LIST_CONTAINER;
struct _WDI_BAND_INFO_CONTAINER;
struct _WDI_BSSID_INFO_STRUCT;
struct _WDI_BSS_ENTRY_AGE_INFO;
struct _WDI_BSS_ENTRY_CHANNEL_INFO;
struct _WDI_BSS_ENTRY_CONTAINER;
struct _WDI_BSS_ENTRY_CONTAINER::_WDI_BSS_ENTRY_CONTAINER_Optional;
struct _WDI_BSS_ENTRY_CONTAINER_Optional;
struct _WDI_BSS_SELECTION_PARAMETERS_CONTAINER;
struct _WDI_BYTE16;
struct _WDI_BYTE4;
struct _WDI_CANCEL_PARAMETERS_STRUCT;
struct _WDI_CHANNEL_MAPPING_ENTRY;
struct _WDI_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER;
struct _WDI_CHECKSUM_OFFLOAD_V4_PARAMETERS;
struct _WDI_CHECKSUM_OFFLOAD_V6_PARAMETERS;
struct _WDI_CIPHER_KEY_ID_STRUCT;
struct _WDI_CIPHER_KEY_TKIP_INFO_CONTAINER;
struct _WDI_CIPHER_KEY_TYPE_STRUCT;
struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER;
struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER::_WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_COMMUNICATION_CAPABILITIES;
struct _WDI_CONNECTION_SETTINGS;
struct _WDI_CONNECTION_SETTINGSV1_0;
struct _WDI_CONNECT_BSS_ENTRY_CONTAINER;
struct _WDI_CONNECT_BSS_ENTRY_CONTAINER::_WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional;
struct _WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional;
struct _WDI_CONNECT_PARAMETERS_CONTAINER;
struct _WDI_CONNECT_PARAMETERS_CONTAINER::_WDI_CONNECT_PARAMETERS_CONTAINER_Optional;
struct _WDI_CONNECT_PARAMETERS_CONTAINER_Optional;
struct _WDI_COUNTRY_REGION_LIST;
struct _WDI_CREATE_PORT_COMPLETE_STRUCT;
struct _WDI_CREATE_PORT_PARAMETERS;
struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER;
struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER::_WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_DATAPATH_CAPABILITIES;
struct _WDI_DATA_RATE_LIST;
struct _WDI_DELETE_PORT_PARAMETERS;
struct _WDI_DEVICE_SERVICE_COMMAND_INPUTS;
struct _WDI_DEVICE_SERVICE_COMMAND_INPUTS::_WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional;
struct _WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional;
struct _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS;
struct _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS::_WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional;
struct _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional;
struct _WDI_DISCONNECT_INDICATION_PARAMETERS;
struct _WDI_DISCONNECT_PARAMETERS;
struct _WDI_DOT11_RESET_PARAMETERS;
struct _WDI_ETHERTYPE_ENCAPSULATION_ENTRY;
struct _WDI_FRAME_METADATA;
struct _WDI_FT_INITIAL_ASSOC_PARAMETERS_CONTAINER;
struct _WDI_FT_REASSOC_PARAMETERS_CONTAINER;
struct _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS;
struct _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS::_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional;
struct _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional;
struct _WDI_GET_AUTO_POWER_SAVE_RESULTS;
struct _WDI_GET_AUTO_POWER_SAVE_STRUCT;
struct _WDI_GET_BSS_ENTRY_LIST_UPDATE_PARAMETERS;
struct _WDI_GET_NEXT_ACTION_FRAME_DIALOG_TOKEN_PARAMETERS;
struct _WDI_GET_PM_PROTOCOL_OFFLOAD_PARAMETERS;
struct _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS;
struct _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS::_WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional;
struct _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional;
struct _WDI_GET_RECEIVE_COALESCING_MATCH_COUNT_PARAMETERS;
struct _WDI_GET_STATISTICS_PARAMETERS;
struct _WDI_GET_SUPPORTED_DEVICE_SERVICES_PARAMETERS;
struct _WDI_GLOBAL_TRIAGE_BLOCK;
struct _WDI_GUID;
struct _WDI_HESSID_INFO_CONTAINER;
struct _WDI_IHV_REQUEST_PARAMETERS;
struct _WDI_IHV_REQUEST_PARAMETERS::_WDI_IHV_REQUEST_PARAMETERS_Optional;
struct _WDI_IHV_REQUEST_PARAMETERS_Optional;
struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER;
struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER::_WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO;
struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO::_WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional;
struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional;
struct _WDI_INDICATION_ACTION_FRAME_RECEIVED_PARAMETERS;
struct _WDI_INDICATION_AP_ASSOCIATION_REQUEST_PARAMETERS;
struct _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS;
struct _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS::_WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional;
struct _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional;
struct _WDI_INDICATION_ASSOCIATION_RESULT_LIST;
struct _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS;
struct _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS::_WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional;
struct _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional;
struct _WDI_INDICATION_CAN_SUSTAIN_AP_PARAMETERS;
struct _WDI_INDICATION_CIPHER_KEY_UPDATED_PARAMETERS;
struct _WDI_INDICATION_CREATE_PORT_COMPLETE_PARAMETERS;
struct _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS;
struct _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS::_WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional;
struct _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional;
struct _WDI_INDICATION_DISASSOCIATION_PARAMETERS;
struct _WDI_INDICATION_DISASSOCIATION_PARAMETERS::_WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional;
struct _WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional;
struct _WDI_INDICATION_FT_ASSOC_PARAMS_NEEDED_PARAMETERS;
struct _WDI_INDICATION_IHV_EVENT_PARAMETERS;
struct _WDI_INDICATION_IHV_EVENT_PARAMETERS::_WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional;
struct _WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional;
struct _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS;
struct _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS::_WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional;
struct _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional;
struct _WDI_INDICATION_LINK_STATE_CHANGE_PARAMETERS;
struct _WDI_INDICATION_NLO_DISCOVERY_PARAMETERS;
struct _WDI_INDICATION_P2P_ACTION_FRAME_RECEIVED_PARAMETERS;
struct _WDI_INDICATION_P2P_GROUP_OPERATING_CHANNEL_PARAMETERS;
struct _WDI_INDICATION_P2P_OPERATING_CHANNEL_ATTRIBUTES_PARAMETERS;
struct _WDI_INDICATION_P2P_SEND_REQUEST_ACTION_FRAME_COMPLETE_PARAMETERS;
struct _WDI_INDICATION_P2P_SEND_RESPONSE_ACTION_FRAME_COMPLETE_PARAMETERS;
struct _WDI_INDICATION_RADIO_STATUS_PARAMETERS;
struct _WDI_INDICATION_ROAMING_NEEDED_PARAMETERS;
struct _WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS;
struct _WDI_INDICATION_STOP_AP_PARAMETERS;
struct _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS;
struct _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS::_WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional;
struct _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional;
struct _WDI_INDICATION_TKIP_MIC_FAILURE_PARAMETERS;
struct _WDI_INDICATION_WAKE_REASON_PARAMETERS;
struct _WDI_INDICATION_WAKE_REASON_PARAMETERS::_WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional;
struct _WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional;
struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER;
struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER::_WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_INTERFACE_CAPABILITIES;
struct _WDI_INTERFACE_CAPABILITIESV1_0;
struct _WDI_INTERFACE_CAPABILITIESV1_0_1;
struct _WDI_IPV4_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER;
struct _WDI_IPV4_LSO_V2;
struct _WDI_IPV6_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER;
struct _WDI_IPV6_LSO_V2;
struct _WDI_IPv4_TCP_SYNC;
struct _WDI_IPv6TCP_SYNC;
struct _WDI_LINK_QUALITY_BAR_MAP_PARAMETERS;
struct _WDI_LINK_STATE_CHANGE_PARAMETERS_STRUCT;
struct _WDI_LOW_LATENCY_CONNECTION_QUALITY_PARAMETERS;
struct _WDI_LSO_V1_CAPABILITIES;
struct _WDI_LSO_V2_CAPABILITIES_CONTAINER;
struct _WDI_MAC_ADDRESS;
struct _WDI_MAC_STATISTICS_PARAMETERS;
struct _WDI_MESSAGE_HEADER;
struct _WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER;
struct _WDI_NETWORK_LIST_OFFLOAD_CONFIG;
struct _WDI_NETWORK_LIST_OFFLOAD_INFO;
struct _WDI_NETWORK_LIST_OFFLOAD_INFO::_WDI_NETWORK_LIST_OFFLOAD_INFO_Optional;
struct _WDI_NETWORK_LIST_OFFLOAD_INFO_Optional;
struct _WDI_NETWORK_LIST_OFFLOAD_PARAMETERS;
struct _WDI_OFFLOAD_SCOPE;
struct _WDI_OS_POWER_MANAGEMENT_FEATURES;
struct _WDI_P2P_ACTION_FRAME_REQUEST_PARAMETERS;
struct _WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER;
struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER;
struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER::_WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional;
struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional;
struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER;
struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER::_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional;
struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional;
struct _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20;
struct _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20::_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional;
struct _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional;
struct _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20;
struct _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20::_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional;
struct _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional;
struct _WDI_P2P_ATTRIBUTES_CONTAINER;
struct _WDI_P2P_BACKGROUND_DISCOVER_MODE;
struct _WDI_P2P_CAPABILITIES;
struct _WDI_P2P_CAPABILITIES_V1_0_1;
struct _WDI_P2P_CAPABILITIES_V1_0_10;
struct _WDI_P2P_CHANNEL;
struct _WDI_P2P_CHANNEL_ENTRIES_CONTAINER;
struct _WDI_P2P_CHANNEL_LIST_CONTAINER;
struct _WDI_P2P_DEVICE_CAPABILITY_PARAMETERS;
struct _WDI_P2P_DEVICE_INFO_CONTAINER;
struct _WDI_P2P_DEVICE_INFO_PARAMETERS;
struct _WDI_P2P_DEVICE_TYPE;
struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER;
struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER::_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional;
struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional;
struct _WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER;
struct _WDI_P2P_DISCOVER_MODE;
struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER;
struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional;
struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional;
struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_PARAMETERS;
struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER;
struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_P2P_GO_NEGOTIATION_REQUEST_PARAMETERS;
struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER;
struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional;
struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional;
struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_PARAMETERS;
struct _WDI_P2P_GROUP_ID;
struct _WDI_P2P_GROUP_OWNER_CAPABILITY_PARAMETERS;
struct _WDI_P2P_INCOMING_ACTION_FRAME_PARAMETERS;
struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER;
struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER::_WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_P2P_INVITATION_REQUEST_PARAMETERS;
struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER;
struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER::_WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional;
struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional;
struct _WDI_P2P_INVITATION_RESPONSE_PARAMETERS;
struct _WDI_P2P_LISTEN_DURATION;
struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER;
struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER::_WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional;
struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_PARAMETERS;
struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER;
struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER::_WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional;
struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional;
struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_PARAMETERS;
struct _WDI_P2P_PROVISION_SERVICE_ATTRIBUTES;
struct _WDI_P2P_SEND_ACTION_FRAME_RESPONSE_PARAMETERS;
struct _WDI_P2P_SEND_ACTION_FRAME_RESULT_CONTAINER;
struct _WDI_P2P_SEND_ACTION_FRAME_RESULT_PARAMETERS;
struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER;
struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER::_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional;
struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional;
struct _WDI_P2P_SERVICE_NAME_HASH;
struct _WDI_PACKET_PATTERN_CONTAINER;
struct _WDI_PHY_CAPABILITIES;
struct _WDI_PHY_INFO_CONTAINER;
struct _WDI_PHY_STATISTICS_PARAMETERS;
struct _WDI_PMK_NAME_STRUCT;
struct _WDI_PM_CAPABILITIES;
struct _WDI_PM_PROTOCOL_OFFLOAD_80211RSN_REKEY_STRUCT;
struct _WDI_PM_PROTOCOL_OFFLOAD_IPv4ARP_STRUCT;
struct _WDI_PM_PROTOCOL_OFFLOAD_IPv6_STRUCT;
struct _WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT;
struct _WDI_RADIO_STATUS;
struct _WDI_RECEIVE_COALESCE_OFFLOAD_CAPABILITIES;
struct _WDI_RECEIVE_COALESCING_CAPABILITIES;
struct _WDI_RECEIVE_COALESCING_CONFIG;
struct _WDI_RECEIVE_COALESCING_FIELD;
struct _WDI_RECEIVE_SEQUENCE_COUNT_STRUCT;
struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER;
struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER::_WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional;
struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional;
struct _WDI_RX_DEFRAG_ENTRY;
struct _WDI_RX_METADATA;
struct _WDI_RX_PEER_ENTRY;
struct _WDI_SCAN_DWELL_TIME;
struct _WDI_SCAN_MODE;
struct _WDI_SCAN_PARAMETERS;
struct _WDI_SCAN_PARAMETERS::_WDI_SCAN_PARAMETERS_Optional;
struct _WDI_SCAN_PARAMETERS_Optional;
struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER;
struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER::_WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional;
struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional;
struct _WDI_SET_ADD_CIPHER_KEYS_PARAMETERS;
struct _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS;
struct _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS::_WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional;
struct _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional;
struct _WDI_SET_ADD_WOL_PATTERN_PARAMETERS;
struct _WDI_SET_ADD_WOL_PATTERN_PARAMETERS::_WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional;
struct _WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional;
struct _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS;
struct _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS::_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional;
struct _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional;
struct _WDI_SET_ASSOCIATION_PARAMS_PARAMETERS;
struct _WDI_SET_CLEAR_RECEIVE_COALESCING_PARAMETERS;
struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER;
struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER::_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional;
struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional;
struct _WDI_SET_CONNECTION_QUALITY_PARAMETERS;
struct _WDI_SET_CONNECTION_QUALITY_PARAMETERS::_WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional;
struct _WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional;
struct _WDI_SET_DEFAULT_KEY_ID_PARAMETERS;
struct _WDI_SET_DEFAULT_KEY_ID_STRUCT;
struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER;
struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER::_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional;
struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional;
struct _WDI_SET_DELETE_CIPHER_KEYS_PARAMETERS;
struct _WDI_SET_ENCAPSULATION_OFFLOAD_PARAMS_PARAMETERS;
struct _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND;
struct _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND::_WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional;
struct _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional;
struct _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS;
struct _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS::_WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional;
struct _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional;
struct _WDI_SET_MULTICAST_LIST_PARAMETERS;
struct _WDI_SET_MULTICAST_LIST_PARAMETERS::_WDI_SET_MULTICAST_LIST_PARAMETERS_Optional;
struct _WDI_SET_MULTICAST_LIST_PARAMETERS_Optional;
struct _WDI_SET_NEIGHBOR_REPORT_ENTRIES_PARAMETERS;
struct _WDI_SET_P2P_LISTEN_STATE_PARAMETERS;
struct _WDI_SET_P2P_LISTEN_STATE_PARAMETERS::_WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional;
struct _WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional;
struct _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS;
struct _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS::_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional;
struct _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional;
struct _WDI_SET_P2P_WPS_ENABLED_PARAMETERS;
struct _WDI_SET_POWER_PARAMETERS;
struct _WDI_SET_POWER_PARAMETERS::_WDI_SET_POWER_PARAMETERS_Optional;
struct _WDI_SET_POWER_PARAMETERS_Optional;
struct _WDI_SET_POWER_RESULTS;
struct _WDI_SET_POWER_RESULTS::_WDI_SET_POWER_RESULTS_Optional;
struct _WDI_SET_POWER_RESULTS_Optional;
struct _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS;
struct _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS::_WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional;
struct _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional;
struct _WDI_SET_RADIO_STATE_PARAMETERS;
struct _WDI_SET_RECEIVE_COALESCING_PARAMETERS;
struct _WDI_SET_RECEIVE_PACKET_FILTER_PARAMETERS;
struct _WDI_SET_REMOVE_PM_PROTOCOL_OFFLOAD_PARAMETERS;
struct _WDI_SET_REMOVE_WOL_PATTERN_PARAMETERS;
struct _WDI_SET_TCP_OFFLOAD_PARAMS_PARAMETERS;
struct _WDI_SET_TCP_OFFLOAD_PARAMS_PARAMETERS_STRUCT;
struct _WDI_SIGNAL_INFO;
struct _WDI_SSID_OFFLOAD_CONTAINER;
struct _WDI_SSID_OFFLOAD_CONTAINER::_WDI_SSID_OFFLOAD_CONTAINER_Optional;
struct _WDI_SSID_OFFLOAD_CONTAINER_Optional;
struct _WDI_START_AP_PARAMETERS;
struct _WDI_START_AP_PARAMETERS_V1_0_1;
struct _WDI_STATION_ATTRIBUTES_CONTAINER;
struct _WDI_STATION_ATTRIBUTES_CONTAINER::_WDI_STATION_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_STATION_ATTRIBUTES_CONTAINER_Optional;
struct _WDI_STATION_CAPABILITIES;
struct _WDI_TASK_ABORT_PARAMETERS;
struct _WDI_TASK_CHANGE_OPERATION_MODE_PARAMETERS;
struct _WDI_TASK_CONNECT_PARAMETERS;
struct _WDI_TASK_CREATE_PORT_PARAMETERS;
struct _WDI_TASK_CREATE_PORT_PARAMETERS::_WDI_TASK_CREATE_PORT_PARAMETERS_Optional;
struct _WDI_TASK_CREATE_PORT_PARAMETERS_Optional;
struct _WDI_TASK_DELETE_PORT_PARAMETERS;
struct _WDI_TASK_DISCONNECT_PARAMETERS;
struct _WDI_TASK_DOT11_RESET_PARAMETERS;
struct _WDI_TASK_DOT11_RESET_PARAMETERS::_WDI_TASK_DOT11_RESET_PARAMETERS_Optional;
struct _WDI_TASK_DOT11_RESET_PARAMETERS_Optional;
struct _WDI_TASK_IHV_PARAMETERS;
struct _WDI_TASK_IHV_PARAMETERS::_WDI_TASK_IHV_PARAMETERS_Optional;
struct _WDI_TASK_IHV_PARAMETERS_Optional;
struct _WDI_TASK_P2P_DISCOVER_PARAMETERS;
struct _WDI_TASK_P2P_DISCOVER_PARAMETERS::_WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional;
struct _WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional;
struct _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS;
struct _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional;
struct _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional;
struct _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS;
struct _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional;
struct _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional;
struct _WDI_TASK_ROAM_PARAMETERS;
struct _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS;
struct _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS::_WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional;
struct _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional;
struct _WDI_TASK_SEND_REQUEST_ACTION_FRAME_PARAMETERS;
struct _WDI_TASK_SEND_RESPONSE_ACTION_FRAME_PARAMETERS;
struct _WDI_TASK_START_AP_PARAMETERS;
struct _WDI_TASK_START_AP_PARAMETERS::_WDI_TASK_START_AP_PARAMETERS_Optional;
struct _WDI_TASK_START_AP_PARAMETERS_Optional;
struct _WDI_TASK_TEST_PARAMETERS;
struct _WDI_TASK_TEST_PARAMETERS::_WDI_TASK_TEST_PARAMETERS_Optional;
struct _WDI_TASK_TEST_PARAMETERS_Optional;
struct _WDI_TCP_OFFLOAD_CAPABILITIES_CONTAINER;
struct _WDI_TCP_RSC_STATISTICS_PARAMETERS;
struct _WDI_TCP_RSC_STATISTICS_STRUCT;
struct _WDI_TKIP_MIC_FAILURE_PARAMETERS;
struct _WDI_TXRX_PARAMETERS;
struct _WDI_TXRX_PEER_CFG;
struct _WDI_TXRX_TARGET_CAPABILITIES;
struct _WDI_TXRX_TARGET_CONFIGURATION;
struct _WDI_TX_COMPLETE_DATA;
struct _WDI_TX_METADATA;
struct _WDI_TYPE_PMK_NAME;
struct _WDI_VIRTUALIZATION_ATTRIBUTES_CONTAINER;
struct _WDI_VIRTUALIZATION_CAPABILITIES;
struct _WDI_WAKE_EVENT_MASK;
struct _WFC_AC_ENTRY;
struct _WFC_BSS_ENTRY_CHANNEL_INFO;
struct _WFC_BSS_ENTRY_NLO_MATCHING_CRITERIA;
struct _WFC_BSS_ENTRY_SIGNAL_INFO;
struct _WFC_COMMAND_METADATA;
struct _WFC_CONNECTION_PROFILE_PARAMETERS;
struct _WFC_CONNECT_JOB_PARAMETERS;
struct _WFC_DATAPATH_CAPABILITIES;
struct _WFC_FRAME;
struct _WFC_INDICATION_METADATA;
struct _WFC_MESSAGE_METADATA;
struct _WFC_MESSAGE_METADATA::_WFC_COMMAND_METADATA;
struct _WFC_MESSAGE_METADATA::_WFC_INDICATION_METADATA;
struct _WFC_MESSAGE_METADATA::_WFC_RESPONSE_METADATA;
struct _WFC_NETWORK_BLOCKED_INFO;
struct _WFC_NETWORK_CHANNEL_ENTRY;
struct _WFC_PEER_TABLE_ENTRY;
struct _WFC_PROPERTY_ENTRY;
struct _WFC_PROPERTY_LOAD_INFO;
struct _WFC_RESPONSE_METADATA;
struct _WFC_RX_FRAME;
struct _WFC_SCAN_JOB_PARAMETERS;
struct _WFC_TX_ENTRY;
struct _WFC_TX_FRAME;
struct _WFC_TX_QUEUE;
struct _WFC_VARIABLE_BUFFER_PROPERTY;
struct _WFD_OTA_ADVERTISED_SERVICE_DESCRIPTOR;
struct _WFD_OTA_ADVERTISED_SERVICE_INFO;
struct _WFD_OTA_GROUP_CAPABILITY;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _WHEA_EVENT_LOG_ENTRY;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WNF_STATE_NAME;
struct _WOL_BITMAP_PATTERN;
struct _WORK_QUEUE_ITEM;
struct _XDV_CONTEXT_HEADER;
struct _XDV_DEBUGGER_STATE;
struct _XDV_EXPORT_TABLE;
struct _XDV_WATCH_HEAD;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_FORMAT;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_FEATURE;
struct __vc_attributes::aggregatableAttribute;
struct __vc_attributes::event_receiverAttribute;
struct __vc_attributes::event_sourceAttribute;
struct __vc_attributes::helper_attributes::usageAttribute;
struct __vc_attributes::helper_attributes::v1_alttypeAttribute;
struct __vc_attributes::moduleAttribute;
struct __vc_attributes::threadingAttribute;
struct _ldiv_t;
struct _s__RTTIBaseClassArray;
struct _s__RTTIBaseClassDescriptor2;
struct _s__RTTIClassHierarchyDescriptor;
struct _s__RTTICompleteObjectLocator2;
struct in6_addr;
struct in_addr;
struct sockaddr;
struct sockaddr_in;
struct sockaddr_in6;

union DMG_PARAMETERS;
union DOT11_ANQP_FRAGMENT_ID;
union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO;
union DOT11_CAPABILITY;
union DOT11_SEQUENCE_CONTROL;
union _DL_EI48;
union _DL_EUI48;
union _DL_OUI;
union _DOT11_BSSID_INFO;
union _ENCAPSULATION_PROTOCOL_INFO;
union _ENCAPSULATION_PROTOCOL_PARAMETERS;
union _KGDTENTRY64;
union _KIDTENTRY64;
union _LARGE_INTEGER;
union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO;
union _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS;
union _NDIS_OID_REQUEST::_REQUEST_DATA;
union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS;
union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN;
union _NET_BUFFER_DATA_LENGTH;
union _NET_BUFFER_HEADER;
union _NET_BUFFER_LIST_HEADER;
union _NET_LUID_LH;
union _POWER_STATE;
union _PROTOCOL_OFFLOAD_PARAMETERS;
union _REFERENCE_OBJECT;
union _REQUEST_DATA;
union _SLIST_HEADER;
union _ULARGE_INTEGER;
union _WDI_TXRX_MPDU_PN;
union _WFC_COUNTED_GATE_REFERENCE_OBJECT;
union _WHEA_ERROR_PACKET_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
union _WOL_PATTERN;
union __m128;
union __m64;

enum BUS_QUERY_ID_TYPE;
enum CConnectJob::_START_CONNECT_ROAM_CANDIDATE_LIST_CREATION_OPTIONS;
enum CConnectJob::_START_CONNECT_ROAM_NO_CANDIDATE_CONTINUE_OPTIONS;
enum CPort::PauseWaitForRxReturn;
enum CRxMgr::RxMgrState;
enum DEVICE_REGISTRY_PROPERTY;
enum DEVICE_TEXT_TYPE;
enum DL_ADDRESS_TYPE;
enum DMA_COMPLETION_STATUS;
enum DOT11_DATA_SUBTYPE;
enum DOT11_DS_INFO;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum MANAGEMENT_FRAME_TYPE;
enum NL_ADDRESS_TYPE;
enum POWER_ACTION;
enum POWER_POLICY_DEVICE_TYPE;
enum PS_CREATE_STATE;
enum PauseWaitForRxReturn;
enum ReplacesCorHdrNumericDefines;
enum RxMgrState;
enum SCOPE_LEVEL;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT;
enum TCP_UPLOAD_REASON;
enum TlgIn_t;
enum TlgOut_t;
enum WFC_MESSAGE_TYPE;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _BI_BROADCAST_CHANNEL_NAME;
enum _BI_LATCH_REASON;
enum _CREATE_PORT_JOB_STATE;
enum _ConnectionResourceConsumerDesc;
enum _DELETE_PORT_JOB_STATE;
enum _DEVICE_COMMAND_SCHEDULER_STATE;
enum _DEVICE_POWER_STATE;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
enum _DEVPROPSTORE;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum _DMA_WIDTH;
enum _DOT11_ACTION_FRAME_PUBLIC_ACTION_TYPE;
enum _DOT11_AC_PARAM;
enum _DOT11_ASSOCIATION_STATE;
enum _DOT11_ASSOCIATION_TYPE;
enum _DOT11_AUTH_ALGORITHM;
enum _DOT11_BLUETOOTH_COEXISTENCE_SUPPORT;
enum _DOT11_BSS_TYPE;
enum _DOT11_CIPHER_ALGORITHM;
enum _DOT11_PHY_TYPE;
enum _DOT11_RESET_TYPE;
enum _DOT11_TRI_STATE;
enum _DOT11_WFD_DISCOVER_TYPE;
enum _DOT11_WFD_SCAN_TYPE;
enum _DOT11_WFD_SERVICE_DISCOVERY_TYPE;
enum _EVENT_INFO_CLASS;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
enum _FILE_INFORMATION_CLASS;
enum _FSINFOCLASS;
enum _INTERFACE_TYPE;
enum _INTERLOCKED_RESULT;
enum _IO_ALLOCATION_ACTION;
enum _IO_PRIORITY_HINT;
enum _IO_RATE_CONTROL_TYPE;
enum _IRQ_PRIORITY;
enum _JOBOBJECTINFOCLASS;
enum _JOB_STATE_RESUME_FIRMWARE_CONTEXT;
enum _JOB_STATE_SET_POWER;
enum _JOB_STATE_SET_RADIO;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
enum _KWAIT_REASON;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _MINIPORT_INITIALIZE_JOB_STATE;
enum _MM_PAGE_PRIORITY;
enum _MODE;
enum _MS_VENDOR_EXT_OOB_BLOB_TYPE;
enum _NDIS_802_11_WEP_STATUS;
enum _NDIS_DEVICE_PNP_EVENT;
enum _NDIS_DEVICE_POWER_STATE;
enum _NDIS_FRAME_HEADER;
enum _NDIS_HALT_ACTION;
enum _NDIS_INTERFACE_TYPE;
enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE;
enum _NDIS_NBL_TRACKER_LIFETIME_EVENT;
enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT;
enum _NDIS_NET_BUFFER_LIST_INFO;
enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE;
enum _NDIS_PM_WOL_PACKET;
enum _NDIS_PORT_AUTHORIZATION_STATE;
enum _NDIS_PORT_CONTROL_STATE;
enum _NDIS_PROCESSOR_VENDOR;
enum _NDIS_RECEIVE_FILTER_TEST;
enum _NDIS_RECEIVE_FILTER_TYPE;
enum _NDIS_REQUEST_TYPE;
enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS;
enum _NDIS_SHUTDOWN_ACTION;
enum _NL_ECN_CODEPOINT;
enum _NPI_MODULEID_TYPE;
enum _NT_PRODUCT_TYPE;
enum _OB_OPEN_REASON;
enum _POOL_TYPE;
enum _POWER_REQUEST_TYPE;
enum _POWER_REQUEST_TYPE_INTERNAL;
enum _POWER_STATE_TYPE;
enum _PO_MODERN_SLEEP_ACTION;
enum _PS_ATTRIBUTE_NUM;
enum _PS_MITIGATION_OPTION;
enum _PS_PROTECTED_SIGNER;
enum _PS_PROTECTED_TYPE;
enum _PS_STD_HANDLE_STATE;
enum _PS_WAKE_REASON;
enum _REG_NOTIFY_CLASS;
enum _RESET_PORT_JOB_STATE;
enum _RTL_RESOURCE_POLICY_FLAGS;
enum _SCAN_JOB_STATE;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
enum _START_CONNECT_ROAM_CANDIDATE_LIST_CREATION_OPTIONS;
enum _START_CONNECT_ROAM_NO_CANDIDATE_CONTINUE_OPTIONS;
enum _SYSTEM_POWER_STATE;
enum _SYSTEM_PROCESS_CLASSIFICATION;
enum _TP_CALLBACK_PRIORITY;
enum _TRACE_INFORMATION_CLASS;
enum _TlgBlob_t;
enum _USER_ACTIVITY_PRESENCE;
enum _WDFFUNCENUM;
enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS;
enum _WDF_DEVICE_FAILED_ACTION;
enum _WDF_DEVICE_IO_TYPE;
enum _WDF_DEVICE_PNP_STATE;
enum _WDF_DEVICE_POWER_POLICY_STATE;
enum _WDF_DEVICE_POWER_STATE;
enum _WDF_DEVICE_STATE_FLAGS;
enum _WDF_DMA_DIRECTION;
enum _WDF_DMA_PROFILE;
enum _WDF_EXECUTION_LEVEL;
enum _WDF_FILEOBJECT_CLASS;
enum _WDF_INTERRUPT_POLARITY;
enum _WDF_INTERRUPT_POLICY;
enum _WDF_INTERRUPT_PRIORITY;
enum _WDF_IO_FORWARD_PROGRESS_ACTION;
enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY;
enum _WDF_IO_QUEUE_DISPATCH_TYPE;
enum _WDF_IO_QUEUE_STATE;
enum _WDF_IO_TARGET_OPEN_TYPE;
enum _WDF_IO_TARGET_PURGE_IO_ACTION;
enum _WDF_IO_TARGET_SENT_IO_ACTION;
enum _WDF_IO_TARGET_STATE;
enum _WDF_MEMORY_DESCRIPTOR_TYPE;
enum _WDF_POWER_DEVICE_STATE;
enum _WDF_POWER_POLICY_IDLE_TIMEOUT_CONSTANTS;
enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE;
enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES;
enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL;
enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL;
enum _WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE;
enum _WDF_REQUEST_FORWARD_OPTIONS_FLAGS;
enum _WDF_REQUEST_REUSE_FLAGS;
enum _WDF_REQUEST_SEND_OPTIONS_FLAGS;
enum _WDF_REQUEST_TYPE;
enum _WDF_RETRIEVE_CHILD_FLAGS;
enum _WDF_SPECIAL_FILE_TYPE;
enum _WDF_STATE_NOTIFICATION_TYPE;
enum _WDF_SYNCHRONIZATION_SCOPE;
enum _WDF_TRI_STATE;
enum _WDF_WMI_PROVIDER_CONTROL;
enum _WDF_WMI_PROVIDER_FLAGS;
enum _WDI_ASSOC_STATUS;
enum _WDI_AUTH_ALGORITHM;
enum _WDI_BAND_ID;
enum _WDI_BLUETOOTH_COEXISTENCE_SUPPORT;
enum _WDI_BSS_TRANSITION_RESPONSE_RESULT;
enum _WDI_CIPHER_ALGORITHM;
enum _WDI_CIPHER_KEY_DIRECTION;
enum _WDI_CIPHER_KEY_TYPE;
enum _WDI_CONNECTION_QUALITY_HINT;
enum _WDI_DS_INFO;
enum _WDI_EXEMPTION_ACTION_TYPE;
enum _WDI_EXEMPTION_PACKET_TYPE;
enum _WDI_FIPS_MODE;
enum _WDI_FRAME_PAYLOAD_TYPE;
enum _WDI_IHV_TASK_PRIORITY;
enum _WDI_INDICATION_TYPE;
enum _WDI_INTERCONNECT_TYPE;
enum _WDI_OPERATION_MODE;
enum _WDI_OS_POWER_MANAGEMENT_FLAGS;
enum _WDI_P2P_ACTION_FRAME_TYPE;
enum _WDI_P2P_CHANNEL_INDICATE_REASON;
enum _WDI_P2P_DISCOVER_TYPE;
enum _WDI_P2P_GO_INTERNAL_RESET_POLICY;
enum _WDI_P2P_LISTEN_STATE;
enum _WDI_P2P_SCAN_TYPE;
enum _WDI_P2P_SERVICE_DISCOVERY_TYPE;
enum _WDI_PACKET_FILTER_TYPE;
enum _WDI_PHY_TYPE;
enum _WDI_POWER_MODE_REASON_CODE;
enum _WDI_POWER_SAVE_LEVEL;
enum _WDI_ROAM_CONFIGURATION_FLAGS;
enum _WDI_ROAM_DEBUG_CODE;
enum _WDI_ROAM_TRIGGER;
enum _WDI_RX_INDICATION_LEVEL;
enum _WDI_RX_THROTTLE_LEVEL;
enum _WDI_SCAN_TRIGGER;
enum _WDI_SCAN_TYPE;
enum _WDI_TXRX_PEER_QOS_CAPS;
enum _WDI_TX_FRAME_STATUS;
enum _WDI_TX_PAUSE_REASON;
enum _WDI_USB_IDLE_STATE;
enum _WFC_ACCESS_CATEGORY;
enum _WFC_ADAPTER_INITIALIZE_STATE;
enum _WFC_ADAPTER_PHY_INFO_PROPERTY_NAME;
enum _WFC_ADAPTER_PROPERTY_NAME;
enum _WFC_BAND_INFO_PROPERTY_NAME;
enum _WFC_BLOCKED_REASON;
enum _WFC_BSS_ENTRY_FRAME_TYPE;
enum _WFC_CONNECT_SCAN_TYPE;
enum _WFC_DEVICE_COMMAND_TYPE;
enum _WFC_DISCONNECT_TRIGGER;
enum _WFC_EVENT_TYPE;
enum _WFC_FRAME_TYPE;
enum _WFC_JOB_STATE;
enum _WFC_JOB_TYPE;
enum _WFC_PORT_DOT11_STATE;
enum _WFC_PORT_PROPERTY_NAME;
enum _WFC_PORT_TYPE;
enum _WFC_PROPERTY_TYPE;
enum _WFC_ROAM_CONNECT_TRIGGER;
enum _WFC_RX_PEER_STATE;
enum _WFC_RX_STOP_REASON;
enum _WFC_SERIALIZED_JOB_PRIORITY;
enum _WFC_SERIALIZED_JOB_PRIORITY_SCOPE;
enum _WFC_TASK_STATE;
enum _WFC_TIMER_REGISTRATION_STATE;
enum _WFC_TX_QUEUEING_MODE;
enum _WFC_TX_STOP_REASON;
enum _WFD_NOTIFICATION_SOURCE;
enum _WFD_OOB_BLOB_TYPE;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _WHEA_ERROR_SEVERITY;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _XDV_DRIVER_TYPE;
enum _XDV_PLUGIN_TYPE;
enum _XDV_RULE_TYPE;
enum __vc_attributes::aggregatableAttribute::type_e;
enum __vc_attributes::event_receiverAttribute::type_e;
enum __vc_attributes::event_sourceAttribute::optimize_e;
enum __vc_attributes::event_sourceAttribute::type_e;
enum __vc_attributes::helper_attributes::usageAttribute::usage_e;
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;
enum __vc_attributes::moduleAttribute::type_e;
enum __vc_attributes::threadingAttribute::threading_e;
enum eDiagnoseLevel;
enum optimize_e;
enum threading_e;
enum type_e;
enum usage_e;

typedef struct $_TypeDescriptor$_extraBytes_15 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[15];
};

typedef struct $_TypeDescriptor$_extraBytes_17 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[17];
};

typedef struct $_TypeDescriptor$_extraBytes_18 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[18];
};

typedef struct $_TypeDescriptor$_extraBytes_19 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[19];
};

typedef struct $_TypeDescriptor$_extraBytes_20 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[20];
};

typedef struct $_TypeDescriptor$_extraBytes_21 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[21];
};

typedef struct $_TypeDescriptor$_extraBytes_22 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[22];
};

typedef struct $_TypeDescriptor$_extraBytes_23 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[23];
};

typedef struct $_TypeDescriptor$_extraBytes_24 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[24];
};

typedef struct $_TypeDescriptor$_extraBytes_25 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[25];
};

typedef struct $_TypeDescriptor$_extraBytes_26 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[26];
};

typedef struct $_TypeDescriptor$_extraBytes_27 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[27];
};

typedef struct $_TypeDescriptor$_extraBytes_28 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[28];
};

typedef struct $_TypeDescriptor$_extraBytes_29 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[29];
};

typedef struct $_TypeDescriptor$_extraBytes_30 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[30];
};

typedef struct $_TypeDescriptor$_extraBytes_31 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[31];
};

typedef struct $_TypeDescriptor$_extraBytes_32 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[32];
};

typedef struct $_TypeDescriptor$_extraBytes_33 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[33];
};

typedef struct $_TypeDescriptor$_extraBytes_34 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[34];
};

typedef struct $_TypeDescriptor$_extraBytes_35 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[35];
};

typedef struct $_TypeDescriptor$_extraBytes_36 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[36];
};

typedef struct $_TypeDescriptor$_extraBytes_37 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[37];
};

typedef struct $_TypeDescriptor$_extraBytes_38 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[38];
};

typedef struct $_TypeDescriptor$_extraBytes_39 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[39];
};

typedef struct $_TypeDescriptor$_extraBytes_40 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[40];
};

typedef struct $_TypeDescriptor$_extraBytes_41 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[41];
};

typedef struct $_TypeDescriptor$_extraBytes_42 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[42];
};

typedef struct $_TypeDescriptor$_extraBytes_43 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[43];
};

typedef struct $_TypeDescriptor$_extraBytes_44 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[44];
};

typedef struct $_TypeDescriptor$_extraBytes_45 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[45];
};

typedef struct $_TypeDescriptor$_extraBytes_47 {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[47];
};

typedef struct $_s__RTTIBaseClassArray$_extraBytes_16 {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[2];
};

typedef struct $_s__RTTIBaseClassArray$_extraBytes_32 {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[4];
};

typedef struct $_s__RTTIBaseClassArray$_extraBytes_40 {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[5];
};

typedef struct $_s__RTTIBaseClassArray$_extraBytes_48 {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[6];
};

typedef struct $_s__RTTIBaseClassArray$_extraBytes_56 {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[7];
};

typedef struct $_s__RTTIBaseClassArray$_extraBytes_64 {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[8];
};

typedef struct $_s__RTTIBaseClassArray$_extraBytes_8 {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[1];
};

typedef struct ANQP_ACTION_FRAME_PARAMETERS {
    USHORT StatusCode;
    USHORT ComebackDelay;
    UCHAR AdvertisementProtocolID;
    union DOT11_ANQP_FRAGMENT_ID FragmentID;
};

typedef struct ArrayOfElements<ArrayOfElements<unsigned char> > {
    VOID ArrayOfElements<ArrayOfElements<unsigned char> >;
    VOID ArrayOfElements<ArrayOfElements<unsigned char> >;
    VOID ~ArrayOfElements<ArrayOfElements<unsigned char> >;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct ArrayOfElements<unsigned char> *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_GUID> {
    VOID ArrayOfElements<_GUID>;
    VOID ArrayOfElements<_GUID>;
    VOID ~ArrayOfElements<_GUID>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _GUID *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_GUID> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_NDIS_GUID> {
    VOID ArrayOfElements<_NDIS_GUID>;
    VOID ArrayOfElements<_NDIS_GUID>;
    VOID ~ArrayOfElements<_NDIS_GUID>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _NDIS_GUID *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_NDIS_GUID> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_ALGO_PAIRS> {
    VOID ArrayOfElements<_WDI_ALGO_PAIRS>;
    VOID ArrayOfElements<_WDI_ALGO_PAIRS>;
    VOID ~ArrayOfElements<_WDI_ALGO_PAIRS>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_ALGO_PAIRS *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_ALGO_PAIRS> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER> {
    VOID ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER>;
    VOID ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER> {
    VOID ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER>;
    VOID ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_ASSOCIATION_RESULT_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER> {
    VOID ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER>;
    VOID ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_BAND_CHANNEL_LIST_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_BAND_INFO_CONTAINER> {
    VOID ArrayOfElements<_WDI_BAND_INFO_CONTAINER>;
    VOID ArrayOfElements<_WDI_BAND_INFO_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_BAND_INFO_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_BAND_INFO_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_BAND_INFO_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER> {
    VOID ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER>;
    VOID ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_BSS_ENTRY_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY> {
    VOID ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY>;
    VOID ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY>;
    VOID ~ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_CHANNEL_MAPPING_ENTRY *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER> {
    VOID ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER>;
    VOID ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_CONNECT_BSS_ENTRY_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_COUNTRY_REGION_LIST> {
    VOID ArrayOfElements<_WDI_COUNTRY_REGION_LIST>;
    VOID ArrayOfElements<_WDI_COUNTRY_REGION_LIST>;
    VOID ~ArrayOfElements<_WDI_COUNTRY_REGION_LIST>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_COUNTRY_REGION_LIST *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_COUNTRY_REGION_LIST> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_DATA_RATE_LIST> {
    VOID ArrayOfElements<_WDI_DATA_RATE_LIST>;
    VOID ArrayOfElements<_WDI_DATA_RATE_LIST>;
    VOID ~ArrayOfElements<_WDI_DATA_RATE_LIST>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_DATA_RATE_LIST *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_DATA_RATE_LIST> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY> {
    VOID ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY>;
    VOID ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY>;
    VOID ~ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_ETHERTYPE_ENCAPSULATION_ENTRY *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_IPv4_TCP_SYNC> {
    VOID ArrayOfElements<_WDI_IPv4_TCP_SYNC>;
    VOID ArrayOfElements<_WDI_IPv4_TCP_SYNC>;
    VOID ~ArrayOfElements<_WDI_IPv4_TCP_SYNC>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_IPv4_TCP_SYNC *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_IPv4_TCP_SYNC> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_IPv6TCP_SYNC> {
    VOID ArrayOfElements<_WDI_IPv6TCP_SYNC>;
    VOID ArrayOfElements<_WDI_IPv6TCP_SYNC>;
    VOID ~ArrayOfElements<_WDI_IPv6TCP_SYNC>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_IPv6TCP_SYNC *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_IPv6TCP_SYNC> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS> {
    VOID ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS>;
    VOID ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS>;
    VOID ~ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_LINK_QUALITY_BAR_MAP_PARAMETERS *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_MAC_ADDRESS> {
    VOID ArrayOfElements<_WDI_MAC_ADDRESS>;
    VOID ArrayOfElements<_WDI_MAC_ADDRESS>;
    VOID ~ArrayOfElements<_WDI_MAC_ADDRESS>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_MAC_ADDRESS *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_MAC_ADDRESS> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS> {
    VOID ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS>;
    VOID ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS>;
    VOID ~ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_MAC_STATISTICS_PARAMETERS *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER> {
    VOID ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER>;
    VOID ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER> {
    VOID ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER>;
    VOID ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER> {
    VOID ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER>;
    VOID ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_P2P_CHANNEL_ENTRIES_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_P2P_DEVICE_TYPE> {
    VOID ArrayOfElements<_WDI_P2P_DEVICE_TYPE>;
    VOID ArrayOfElements<_WDI_P2P_DEVICE_TYPE>;
    VOID ~ArrayOfElements<_WDI_P2P_DEVICE_TYPE>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_P2P_DEVICE_TYPE *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_P2P_DEVICE_TYPE> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER> {
    VOID ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER>;
    VOID ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER> {
    VOID ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER>;
    VOID ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER> {
    VOID ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER>;
    VOID ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH> {
    VOID ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH>;
    VOID ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH>;
    VOID ~ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_P2P_SERVICE_NAME_HASH *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER> {
    VOID ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER>;
    VOID ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_PACKET_PATTERN_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_PHY_INFO_CONTAINER> {
    VOID ArrayOfElements<_WDI_PHY_INFO_CONTAINER>;
    VOID ArrayOfElements<_WDI_PHY_INFO_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_PHY_INFO_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_PHY_INFO_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_PHY_INFO_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS> {
    VOID ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS>;
    VOID ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS>;
    VOID ~ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_PHY_STATISTICS_PARAMETERS *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT> {
    VOID ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT>;
    VOID ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT>;
    VOID ~ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD> {
    VOID ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD>;
    VOID ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD>;
    VOID ~ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_RECEIVE_COALESCING_FIELD *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER> {
    VOID ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER>;
    VOID ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER> {
    VOID ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER>;
    VOID ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER> {
    VOID ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER>;
    VOID ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER> {
    VOID ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER>;
    VOID ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER>;
    VOID ~ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    struct _WDI_SSID_OFFLOAD_CONTAINER *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<char> {
    VOID ArrayOfElements<char>;
    VOID ArrayOfElements<char>;
    VOID ~ArrayOfElements<char>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    PCHAR pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<char> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<enum _WDI_AUTH_ALGORITHM> {
    VOID ArrayOfElements<enum _WDI_AUTH_ALGORITHM>;
    VOID ArrayOfElements<enum _WDI_AUTH_ALGORITHM>;
    VOID ~ArrayOfElements<enum _WDI_AUTH_ALGORITHM>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    enum _WDI_AUTH_ALGORITHM *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<enum _WDI_AUTH_ALGORITHM> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<enum _WDI_BAND_ID> {
    VOID ArrayOfElements<enum _WDI_BAND_ID>;
    VOID ArrayOfElements<enum _WDI_BAND_ID>;
    VOID ~ArrayOfElements<enum _WDI_BAND_ID>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    enum _WDI_BAND_ID *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<enum _WDI_BAND_ID> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<enum _WDI_CIPHER_ALGORITHM> {
    VOID ArrayOfElements<enum _WDI_CIPHER_ALGORITHM>;
    VOID ArrayOfElements<enum _WDI_CIPHER_ALGORITHM>;
    VOID ~ArrayOfElements<enum _WDI_CIPHER_ALGORITHM>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    enum _WDI_CIPHER_ALGORITHM *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<enum _WDI_CIPHER_ALGORITHM> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<enum _WDI_PHY_TYPE> {
    VOID ArrayOfElements<enum _WDI_PHY_TYPE>;
    VOID ArrayOfElements<enum _WDI_PHY_TYPE>;
    VOID ~ArrayOfElements<enum _WDI_PHY_TYPE>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    enum _WDI_PHY_TYPE *pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<enum _WDI_PHY_TYPE> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<unsigned char> {
    VOID ArrayOfElements<unsigned char>;
    VOID ArrayOfElements<unsigned char>;
    VOID ~ArrayOfElements<unsigned char>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    PUCHAR pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<unsigned char> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<unsigned int> {
    VOID ArrayOfElements<unsigned int>;
    VOID ArrayOfElements<unsigned int>;
    VOID ~ArrayOfElements<unsigned int>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    PULONG pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<unsigned int> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<unsigned long> {
    VOID ArrayOfElements<unsigned long>;
    VOID ArrayOfElements<unsigned long>;
    VOID ~ArrayOfElements<unsigned long>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    PULONG pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<unsigned long> *operator=;
    PVOID __vecDelDtor;
};

typedef struct ArrayOfElements<unsigned short> {
    VOID ArrayOfElements<unsigned short>;
    VOID ArrayOfElements<unsigned short>;
    VOID ~ArrayOfElements<unsigned short>;
    VOID Cleanup;
    VOID Cleanup;
    LONG AllocateElements;
    LONG AllocateElements;
    VOID SimpleAssign;
    LONG SimpleSet;
    LONG SimpleSet;
    VOID FullMove;
    ULONG ElementCount;
    PWCHAR pElements;
    UCHAR MemoryInternallyAllocated;
    struct ArrayOfElements<unsigned short> *operator=;
    PVOID __vecDelDtor;
};

typedef struct DMG {
    union DMG_PARAMETERS DMGParameters;
    UCHAR SpectrumMgmt : 1;
    UCHAR Reserved1 : 3;
    UCHAR RadioMeasurement : 1;
    UCHAR Reserved2 : 3;
};

typedef struct DOT11_ASSOCIATION_COMPLETION_EX_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MacAddr[6];
    ULONG uStatus;
    UCHAR bReAssocReq;
    UCHAR bReAssocResp;
    ULONG uAssocReqOffset;
    ULONG uAssocReqSize;
    ULONG uAssocRespOffset;
    ULONG uAssocRespSize;
    ULONG uBeaconOffset;
    ULONG uBeaconSize;
    ULONG uIHVDataOffset;
    ULONG uIHVDataSize;
    enum _DOT11_AUTH_ALGORITHM AuthAlgo;
    enum _DOT11_CIPHER_ALGORITHM UnicastCipher;
    enum _DOT11_CIPHER_ALGORITHM MulticastCipher;
    ULONG uActivePhyListOffset;
    ULONG uActivePhyListSize;
    UCHAR bFourAddressSupported;
    UCHAR bPortAuthorized;
    UCHAR ucActiveQoSProtocol;
    enum DOT11_DS_INFO DSInfo;
    ULONG uEncapTableOffset;
    ULONG uEncapTableSize;
    enum _DOT11_CIPHER_ALGORITHM MulticastMgmtCipher;
    ULONG uAssocComebackTime;
    enum _DOT11_ASSOCIATION_TYPE AssociationType;
};

typedef struct DOT11_ASSOCIATION_START_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MacAddr[6];
    struct _DOT11_SSID SSID;
    ULONG uIHVDataOffset;
    ULONG uIHVDataSize;
};

typedef struct DOT11_AUTH_CIPHER_PAIR {
    enum _DOT11_AUTH_ALGORITHM AuthAlgoId;
    enum _DOT11_CIPHER_ALGORITHM CipherAlgoId;
};

typedef struct DOT11_BEACON_FRAME {
    ULONG64 Timestamp;
    USHORT BeaconInterval;
    union DOT11_CAPABILITY Capability;
    struct DOT11_INFO_ELEMENT InfoElements;
};

typedef struct DOT11_BSS_ENTRY {
    ULONG uPhyId;
    union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
    UCHAR dot11BSSID[6];
    enum _DOT11_BSS_TYPE dot11BSSType;
    LONG lRSSI;
    ULONG uLinkQuality;
    UCHAR bInRegDomain;
    USHORT usBeaconPeriod;
    ULONG64 ullTimestamp;
    ULONG64 ullHostTimestamp;
    USHORT usCapabilityInformation;
    ULONG uBufferLength;
    UCHAR ucBuffer[1];
};

typedef struct DOT11_BYTE_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfBytes;
    ULONG uTotalNumOfBytes;
    UCHAR ucBuffer[1];
};

typedef struct DOT11_CAPABILITY::DMG {
    union DMG_PARAMETERS DMGParameters;
    UCHAR SpectrumMgmt : 1;
    UCHAR Reserved1 : 3;
    UCHAR RadioMeasurement : 1;
    UCHAR Reserved2 : 3;
};

typedef struct DOT11_CHANNEL_HINT {
    enum _DOT11_PHY_TYPE Dot11PhyType;
    ULONG uChannelNumber;
};

typedef struct DOT11_CIPHER_DEFAULT_KEY_VALUE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uKeyIndex;
    enum _DOT11_CIPHER_ALGORITHM AlgorithmId;
    UCHAR MacAddr[6];
    UCHAR bDelete;
    UCHAR bStatic;
    USHORT usKeyLength;
    UCHAR ucKey[1];
};

typedef struct DOT11_DISASSOCIATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MacAddr[6];
    ULONG uReason;
    ULONG uIHVDataOffset;
    ULONG uIHVDataSize;
};

typedef struct DOT11_EXTSTA_RECV_CONTEXT {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uReceiveFlags;
    ULONG uPhyId;
    ULONG uChCenterFrequency;
    USHORT usNumberOfMPDUsReceived;
    LONG lRSSI;
    UCHAR ucDataRate;
    ULONG uSizeMediaSpecificInfo;
    PVOID pvMediaSpecificInfo;
    ULONG64 ullTimestamp;
};

typedef struct DOT11_INFO_ELEMENT {
    UCHAR ElementID;
    UCHAR Length;
};

typedef struct DOT11_MAC_INFO {
    ULONG uReserved;
    ULONG uNdisPortNumber;
    UCHAR MacAddr[6];
};

typedef struct DOT11_PMKID_ENTRY {
    UCHAR BSSID[6];
    UCHAR PMKID[16];
    ULONG uFlags;
};

typedef struct DOT11_PRIVACY_EXEMPTION {
    USHORT usEtherType;
    USHORT usExemptionActionType;
    USHORT usExemptionPacketType;
};

typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
};

typedef struct LIST_ENTRY64 {
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__ {
    LONG unused;
};

typedef struct POHANDLE__ {
    LONG unused;
};

typedef struct SCOPE_ID {
    ULONG Zone : 28;
    ULONG Level : 4;
    ULONG Value;
};

typedef struct SmoothedThrottleLevel {
    VOID SmoothedThrottleLevel;
    BOOLEAN IncreaseThrottle;
    BOOLEAN DecreaseThrottle;
    enum _WDI_RX_THROTTLE_LEVEL operator enum _WDI_RX_THROTTLE_LEVEL;
    ULONG GetLogValue;
    enum _WDI_RX_THROTTLE_LEVEL ToLevel;
    LONG ShiftAmount;
    ULONG Range;
    ULONG CountIncrements;
    ULONG Delta;
    ULONG m_value;
};

typedef struct WDFCHILDLIST__ {
    LONG unused;
};

typedef struct WDFCMRESLIST__ {
    LONG unused;
};

typedef struct WDFCOLLECTION__ {
    LONG unused;
};

typedef struct WDFCOMMONBUFFER__ {
    LONG unused;
};

typedef struct WDFDEVICE_INIT {
};

typedef struct WDFDEVICE__ {
    LONG unused;
};

typedef struct WDFDMAENABLER__ {
    LONG unused;
};

typedef struct WDFDMATRANSACTION__ {
    LONG unused;
};

typedef struct WDFDPC__ {
    LONG unused;
};

typedef struct WDFDRIVER__ {
    LONG unused;
};

typedef struct WDFFILEOBJECT__ {
    LONG unused;
};

typedef struct WDFINTERRUPT__ {
    LONG unused;
};

typedef struct WDFIORESLIST__ {
    LONG unused;
};

typedef struct WDFIORESREQLIST__ {
    LONG unused;
};

typedef struct WDFIOTARGET__ {
    LONG unused;
};

typedef struct WDFKEY__ {
    LONG unused;
};

typedef struct WDFLOOKASIDE__ {
    LONG unused;
};

typedef struct WDFMEMORY__ {
    LONG unused;
};

typedef struct WDFQUEUE__ {
    LONG unused;
};

typedef struct WDFREQUEST__ {
    LONG unused;
};

typedef struct WDFSPINLOCK__ {
    LONG unused;
};

typedef struct WDFSTRING__ {
    LONG unused;
};

typedef struct WDFTIMER__ {
    LONG unused;
};

typedef struct WDFWAITLOCK__ {
    LONG unused;
};

typedef struct WDFWMIINSTANCE__ {
    LONG unused;
};

typedef struct WDFWMIPROVIDER__ {
    LONG unused;
};

typedef struct WDFWORKITEM__ {
    LONG unused;
};

typedef struct _ACCESS_REASONS {
    ULONG Data[32];
};

typedef struct _ACCESS_STATE {
    struct _LUID OperationID;
    UCHAR SecurityEvaluated;
    UCHAR GenerateAudit;
    UCHAR GenerateOnClose;
    UCHAR PrivilegesAllocated;
    ULONG Flags;
    ULONG RemainingDesiredAccess;
    ULONG PreviouslyGrantedAccess;
    ULONG OriginalDesiredAccess;
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
    PVOID SecurityDescriptor;
    PVOID AuxData;
     <unnamed-type-Privileges>;
    union {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
        struct _PRIVILEGE_SET PrivilegeSet;
    } Privileges;
    UCHAR AuditPrivileges;
    struct _UNICODE_STRING ObjectName;
    struct _UNICODE_STRING ObjectTypeName;
};

typedef struct _ACTIVATION_CONTEXT {
};

typedef struct _ACTIVATION_CONTEXT_DATA {
};

typedef struct _ACTIVATION_CONTEXT_STACK {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
    struct _LIST_ENTRY FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _ADD_RECEIVE_COALESCING_INFO {
     _ADD_RECEIVE_COALESCING_INFO_Optional;
    struct _ADD_RECEIVE_COALESCING_INFO::_ADD_RECEIVE_COALESCING_INFO_Optional Optional;
    struct _WDI_RECEIVE_COALESCING_CONFIG ReceivingCoalesingConfig;
    struct ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD> ReceiveCoalescingField;
    VOID _ADD_RECEIVE_COALESCING_INFO;
    VOID ~_ADD_RECEIVE_COALESCING_INFO;
    PVOID __vecDelDtor;
};

typedef struct _ADD_RECEIVE_COALESCING_INFO::_ADD_RECEIVE_COALESCING_INFO_Optional {
    ULONG ReceiveCoalescingField_IsPresent : 1;
    VOID _ADD_RECEIVE_COALESCING_INFO_Optional;
};

typedef struct _ADD_RECEIVE_COALESCING_INFO_Optional {
    ULONG ReceiveCoalescingField_IsPresent : 1;
    VOID _ADD_RECEIVE_COALESCING_INFO_Optional;
};

typedef struct _ASSEMBLY_STORAGE_MAP {
};

typedef struct _AUX_ACCESS_DATA {
    struct _PRIVILEGE_SET *PrivilegesUsed;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG AccessesToAudit;
    ULONG MaximumAuditMask;
    struct _GUID TransactionId;
    PVOID NewSecurityDescriptor;
    PVOID ExistingSecurityDescriptor;
    PVOID ParentSecurityDescriptor;
    PVOID DeRefSecurityDescriptor;
    PVOID SDLock;
    struct _ACCESS_REASONS AccessReasons;
    UCHAR GenerateStagingEvents;
};

typedef struct _BSSID_CONNECT_HISTORY_ATTEMPT {
    ULONG64 time;
    ULONG linkQuality;
    UCHAR isValid;
};

typedef struct _BSSID_CONNECT_HISTORY_ENTRY {
    struct _BSSID_CONNECT_HISTORY_ATTEMPT connectTimes[10];
    UCHAR isValid;
    UCHAR bssid[6];
};

typedef struct _BSS_ENTRY_BLOCKED_INFO {
    VOID Initialize;
    ULONG BlockedReasons;
    ULONG64 LastAssocFailTime;
    ULONG LastAssocFailLinkQuality;
};

typedef struct _BSS_ENTRY_CONNECT_MATCHING_CRITERIA {
    struct _WFC_CONNECTION_PROFILE_PARAMETERS *pConnectionParameters;
    ULONG64 MaxAgeOfEntry;
    struct _DOT11_WFD_GROUP_ID *pGroupIdMatch;
    PBOOLEAN pRequireSelectedRegistrar;
    PBOOLEAN pRequireGroupFormation;
    BOOLEAN bIncludeCurrentPeer;
    BOOLEAN bPreferToStayWithCurrentPeer;
    enum _WDI_ROAM_CONFIGURATION_FLAGS roamConfigFlags;
};

typedef struct _BSS_ENTRY_WFD_SERVICES_INFO {
    USHORT usNumServices;
    USHORT usNumMatchedServices;
    USHORT usServicesDescriptorOffset;
    USHORT usServiceNamesDescriptorLength;
    struct _WFD_OTA_ADVERTISED_SERVICE_INFO ServiceInfo[1];
};

typedef struct _BUFFER_DOT11_AUTH_ALGO {
    USHORT ElementCount;
    enum _DOT11_AUTH_ALGORITHM *pBuffer;
};

typedef struct _BUFFER_DOT11_CIPHER_ALGO {
    USHORT ElementCount;
    enum _DOT11_CIPHER_ALGORITHM *pBuffer;
};

typedef struct _BUFFER_DOT11_HESSID {
    USHORT ElementCount;
    PUCHAR pBuffer[6];
};

typedef struct _BUFFER_DOT11_SSID {
    USHORT ElementCount;
    struct _DOT11_SSID *pBuffer;
};

typedef struct _BUFFER_MAC_ADDRESS {
    USHORT ElementCount;
    PUCHAR pBuffer[6];
};

typedef struct _BUFFER_UINT8 {
    USHORT ElementCount;
    PUCHAR pBuffer;
};

typedef struct _ByteArray {
    USHORT usLength;
    PVOID pvBuffer;
};

typedef struct _CLIENT_ID {
    PVOID UniqueProcess;
    PVOID UniqueThread;
};

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
     <unnamed-type-u>;
    union {
         <unnamed-type-Generic>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Generic;
         <unnamed-type-Port>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Port;
         <unnamed-type-Interrupt>;
        struct {
            USHORT Level;
            USHORT Group;
            ULONG Vector;
            ULONG64 Affinity;
        } Interrupt;
         <unnamed-type-MessageInterrupt>;
        struct {
            struct {
                USHORT Group;
                USHORT MessageCount;
                ULONG Vector;
                ULONG64 Affinity;
            } Raw;
            struct {
                USHORT Level;
                USHORT Group;
                ULONG Vector;
                ULONG64 Affinity;
            } Translated;
        } MessageInterrupt;
         <unnamed-type-Memory>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Memory;
         <unnamed-type-Dma>;
        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;
         <unnamed-type-DmaV3>;
        struct {
            ULONG Channel;
            ULONG RequestLine;
            UCHAR TransferWidth;
            UCHAR Reserved1;
            UCHAR Reserved2;
            UCHAR Reserved3;
        } DmaV3;
         <unnamed-type-DevicePrivate>;
        struct {
            ULONG Data[3];
        } DevicePrivate;
         <unnamed-type-BusNumber>;
        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;
         <unnamed-type-DeviceSpecificData>;
        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
         <unnamed-type-Memory40>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length40;
        } Memory40;
         <unnamed-type-Memory48>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length48;
        } Memory48;
         <unnamed-type-Memory64>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length64;
        } Memory64;
         <unnamed-type-Connection>;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

typedef struct _COMPRESSED_DATA_INFO {
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};

typedef struct _CONTEXT {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5Home;
    ULONG64 P6Home;
    ULONG ContextFlags;
    ULONG MxCsr;
    USHORT SegCs;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    USHORT SegSs;
    ULONG EFlags;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rbx;
    ULONG64 Rsp;
    ULONG64 Rbp;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Rip;
    struct _XSAVE_FORMAT FltSave;
    struct _M128A Header[2];
    struct _M128A Legacy[8];
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    struct _M128A VectorRegister[26];
    ULONG64 VectorControl;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
};

typedef struct _CPP_LIST_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID pThis;
};

typedef struct _CURDIR {
    struct _UNICODE_STRING DosPath;
    PVOID Handle;
};

typedef struct _DEVICE_CAPABILITIES {
    USHORT Size;
    USHORT Version;
    ULONG DeviceD1 : 1;
    ULONG DeviceD2 : 1;
    ULONG LockSupported : 1;
    ULONG EjectSupported : 1;
    ULONG Removable : 1;
    ULONG DockDevice : 1;
    ULONG UniqueID : 1;
    ULONG SilentInstall : 1;
    ULONG RawDeviceOK : 1;
    ULONG SurpriseRemovalOK : 1;
    ULONG WakeFromD0 : 1;
    ULONG WakeFromD1 : 1;
    ULONG WakeFromD2 : 1;
    ULONG WakeFromD3 : 1;
    ULONG HardwareDisabled : 1;
    ULONG NonDynamic : 1;
    ULONG WarmEjectSupported : 1;
    ULONG NoDisplayInUI : 1;
    ULONG Reserved1 : 1;
    ULONG WakeFromInterrupt : 1;
    ULONG SecureDevice : 1;
    ULONG ChildOfVgaEnabledBridge : 1;
    ULONG DecodeIoOnBoot : 1;
    ULONG Reserved : 9;
    ULONG Address;
    ULONG UINumber;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _SYSTEM_POWER_STATE SystemWake;
    enum _DEVICE_POWER_STATE DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct _DEVICE_OBJECT {
    SHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    struct _IO_TIMER *Timer;
    ULONG Flags;
    ULONG Characteristics;
    struct _VPB *Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CHAR StackSize;
     <unnamed-type-Queue>;
    union {
        struct _LIST_ENTRY ListEntry;
        struct _WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    struct _KDEVICE_QUEUE DeviceQueue;
    struct _KDPC Dpc;
    ULONG ActiveThreadCount;
    PVOID SecurityDescriptor;
    struct _KEVENT DeviceLock;
    USHORT SectorSize;
    USHORT Spare1;
    struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
    PVOID Reserved;
    VOID _DEVICE_OBJECT;
    VOID _DEVICE_OBJECT;
    struct _DEVICE_OBJECT *operator=;
    struct _DEVICE_OBJECT *operator=;
};

typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
};

typedef struct _DEVOBJ_EXTENSION {
    SHORT Type;
    USHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PowerFlags;
    struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
    ULONG ExtensionFlags;
    PVOID DeviceNode;
    struct _DEVICE_OBJECT *AttachedTo;
    LONG StartIoCount;
    LONG StartIoKey;
    ULONG StartIoFlags;
    struct _VPB *Vpb;
    PVOID DependencyNode;
    PVOID InterruptContext;
    PVOID VerifierContext;
};

typedef struct _DEVPROPCOMPKEY {
    struct _DEVPROPKEY Key;
    enum _DEVPROPSTORE Store;
    PWCHAR LocaleName;
};

typedef struct _DEVPROPKEY {
    struct _GUID fmtid;
    ULONG pid;
};

typedef struct _DISPATCHER_HEADER {
    LONG Lock;
    LONG LockNV;
    UCHAR Type;
    UCHAR Signalling;
    UCHAR Size;
    UCHAR Reserved1;
    UCHAR TimerType;
    UCHAR TimerControlFlags;
    UCHAR Absolute : 1;
    UCHAR Wake : 1;
    UCHAR EncodedTolerableDelay : 6;
    UCHAR Hand;
    UCHAR TimerMiscFlags;
    UCHAR Index : 6;
    UCHAR Inserted : 1;
    UCHAR Expired : 1;
    UCHAR Timer2Type;
    UCHAR Timer2Flags;
    UCHAR Timer2Inserted : 1;
    UCHAR Timer2Expiring : 1;
    UCHAR Timer2CancelPending : 1;
    UCHAR Timer2SetPending : 1;
    UCHAR Timer2Running : 1;
    UCHAR Timer2Disabled : 1;
    UCHAR Timer2ReservedFlags : 2;
    UCHAR Timer2ComponentId;
    UCHAR Timer2RelativeId;
    UCHAR QueueType;
    UCHAR QueueControlFlags;
    UCHAR Abandoned : 1;
    UCHAR DisableIncrement : 1;
    UCHAR QueueReservedControlFlags : 6;
    UCHAR QueueSize;
    UCHAR QueueReserved;
    UCHAR ThreadType;
    UCHAR ThreadReserved;
    UCHAR ThreadControlFlags;
    UCHAR CycleProfiling : 1;
    UCHAR CounterProfiling : 1;
    UCHAR GroupScheduling : 1;
    UCHAR AffinitySet : 1;
    UCHAR Tagged : 1;
    UCHAR EnergyProfiling : 1;
    UCHAR SchedulerAssist : 1;
    UCHAR ThreadReservedControlFlags : 1;
    UCHAR DebugActive;
    UCHAR ActiveDR7 : 1;
    UCHAR Instrumented : 1;
    UCHAR Minimal : 1;
    UCHAR Reserved4 : 3;
    UCHAR UmsScheduled : 1;
    UCHAR UmsPrimary : 1;
    UCHAR MutantType;
    UCHAR MutantSize;
    UCHAR DpcActive;
    UCHAR MutantReserved;
    LONG SignalState;
    struct _LIST_ENTRY WaitListHead;
    VOID _DISPATCHER_HEADER;
    VOID _DISPATCHER_HEADER;
    struct _DISPATCHER_HEADER *operator=;
    struct _DISPATCHER_HEADER *operator=;
};

typedef struct _DMA_ADAPTER {
    USHORT Version;
    USHORT Size;
    struct _DMA_OPERATIONS *DmaOperations;
};

typedef struct _DMA_ADAPTER_INFO {
    ULONG Version;
    struct _DMA_ADAPTER_INFO_V1 V1;
};

typedef struct _DMA_ADAPTER_INFO_V1 {
    ULONG ReadDmaCounterAvailable;
    ULONG ScatterGatherLimit;
    ULONG DmaAddressWidth;
    ULONG Flags;
    ULONG MinimumTransferUnit;
};

typedef struct _DMA_OPERATIONS {
    ULONG Size;
    PVOID PutDmaAdapter;
    PVOID *AllocateCommonBuffer;
    PVOID FreeCommonBuffer;
    PLONG AllocateAdapterChannel;
    PUCHAR FlushAdapterBuffers;
    PVOID FreeAdapterChannel;
    PVOID FreeMapRegisters;
    union _LARGE_INTEGER *MapTransfer;
    PULONG GetDmaAlignment;
    PULONG ReadDmaCounter;
    PLONG GetScatterGatherList;
    PVOID PutScatterGatherList;
    PLONG CalculateScatterGatherList;
    PLONG BuildScatterGatherList;
    PLONG BuildMdlFromScatterGatherList;
    PLONG GetDmaAdapterInfo;
    PLONG GetDmaTransferInfo;
    PLONG InitializeDmaTransferContext;
    PVOID *AllocateCommonBufferEx;
    PLONG AllocateAdapterChannelEx;
    PLONG ConfigureAdapterChannel;
    PUCHAR CancelAdapterChannel;
    PLONG MapTransferEx;
    PLONG GetScatterGatherListEx;
    PLONG BuildScatterGatherListEx;
    PLONG FlushAdapterBuffersEx;
    PVOID FreeAdapterObject;
    PLONG CancelMappedTransfer;
    PLONG AllocateDomainCommonBuffer;
    PLONG FlushDmaBuffer;
    PLONG JoinDmaDomain;
    PLONG LeaveDmaDomain;
    PVOID *GetDmaDomain;
    PVOID *AllocateCommonBufferWithBounds;
};

typedef struct _DMA_TRANSFER_INFO {
    ULONG Version;
    struct _DMA_TRANSFER_INFO_V1 V1;
    struct _DMA_TRANSFER_INFO_V2 V2;
};

typedef struct _DMA_TRANSFER_INFO_V1 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
};

typedef struct _DMA_TRANSFER_INFO_V2 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
    ULONG LogicalPageCount;
};

typedef struct _DOT11_ADAPTER_CAPABILITIES {
    UCHAR FirmwareVersion[256];
    ULONG uWindowsWdiVersion;
    ULONG uIhvWdiVersion;
    ULONG uOpModesSupported;
    enum _DOT11_TRI_STATE PromiscuousModeSupported;
    enum _DOT11_TRI_STATE IBSSSupported;
    enum _DOT11_TRI_STATE DiversityAntennaSupported;
    ULONG uNumRxSpatialStreams;
    ULONG uNumTxSpatialStreams;
    ULONG uNumConcurrentChannelOperations;
    enum _DOT11_TRI_STATE Dot11ActionFrameTxRxSupported;
    enum _DOT11_TRI_STATE ANQPServiceInformationDiscoverySupported;
    enum _DOT11_TRI_STATE Dot11k_NeighborReportSupported;
    enum _DOT11_TRI_STATE Dot11k_APChannelReportSupported;
    enum _DOT11_TRI_STATE Dot11w_ProtectedMgmtFramesSupported;
    enum _DOT11_TRI_STATE HotspotHESSIDConnectionSupported;
    ULONG uP2PConcurrentGOPortsCount;
    ULONG uP2PConcurrentClientPortsCount;
    ULONG uP2PMaxMobileAPClientsAllowed;
    enum _DOT11_TRI_STATE P2PPassiveListenAvailabilitySupported;
    enum _DOT11_TRI_STATE P2PGOon5GHzBandSupported;
    ULONG uServiceNameAdvertisementsMaxBytesSupported;
    ULONG uServiceInformationAdvertisementsMaxBytesSupported;
    enum _DOT11_TRI_STATE P2PDeviceDiscoverySupported;
    enum _DOT11_TRI_STATE P2PServiceNameDiscoverySupported;
    enum _DOT11_TRI_STATE P2PServiceInformationDiscoverySupported;
    enum _DOT11_TRI_STATE P2PBackgroundDiscoverySupported;
    enum _DOT11_TRI_STATE D0_NLOSupported;
    enum _DOT11_TRI_STATE Dx_StandbyNLOSupported;
    enum _DOT11_TRI_STATE InstantConnectSupported;
    enum _DOT11_TRI_STATE FIPSSupported;
    enum _DOT11_TRI_STATE eCSASupported;
    enum _DOT11_TRI_STATE FunctionalLevelResetRecoverySupported;
    enum _DOT11_TRI_STATE PlatformLevelResetRecoverySupported;
    enum _DOT11_TRI_STATE MACAddressRandomizationSupported;
    UCHAR MACAddressRandomizationMask[6];
    enum _DOT11_TRI_STATE IHVExtensibilityModuleConfigured;
    enum _DOT11_BLUETOOTH_COEXISTENCE_SUPPORT BluetoothCoexistenceSupport;
    enum _DOT11_TRI_STATE FastTransitionSupported;
    enum _DOT11_TRI_STATE MU_MIMOSupported;
    enum _DOT11_TRI_STATE CannotSupportMiracastSink;
    enum _DOT11_TRI_STATE BSSTransitionSupported;
    enum _DOT11_TRI_STATE WLANBusLevelDeviceResetSupported;
    enum _DOT11_TRI_STATE IPDockingCapable;
    enum _DOT11_TRI_STATE ASP20ServiceNameDiscoverySupported;
    enum _DOT11_TRI_STATE ASP20ServiceInformationDiscoverySupported;
};

typedef struct _DOT11_ANQP_ACTION_FRAME {
    UCHAR Category;
    UCHAR Action;
    UCHAR DialogToken;
    struct {
        struct _DOT11_AVERTISEMENT_PROTOCOL_ELEMENT AdvertisementProtocolElement;
        USHORT QueryRequestLength;
        struct DOT11_INFO_ELEMENT InfoElements;
    } InitialRequest;
    struct {
        USHORT StatusCode;
        USHORT ComebackDelay;
        struct _DOT11_AVERTISEMENT_PROTOCOL_ELEMENT AdvertisementProtocolElement;
        USHORT QueryResponseLength;
        struct DOT11_INFO_ELEMENT InfoElements;
    } InitialResponse;
    struct {
        USHORT StatusCode;
        union DOT11_ANQP_FRAGMENT_ID QueryResponseFragmentID;
        USHORT ComebackDelay;
        struct _DOT11_AVERTISEMENT_PROTOCOL_ELEMENT AdvertisementProtocolElement;
        USHORT QueryResponseLength;
        struct DOT11_INFO_ELEMENT InfoElements;
    } ComebackResponse;
};

typedef struct _DOT11_AVERTISEMENT_PROTOCOL_ELEMENT {
    UCHAR ElementID;
    UCHAR Length;
    struct _DOT11_AVERTISEMENT_PROTOCOL_TUPLE AdvertisementProtocol[1];
};

typedef struct _DOT11_AVERTISEMENT_PROTOCOL_TUPLE {
    UCHAR QueryResponseInfo;
    UCHAR AdvertisementProtocolID;
};

typedef struct _DOT11_BAND_CAPABILITIES {
    ULONG uTotalSize;
    ULONG uBandCount;
    struct _DOT11_BAND_DESCRIPTOR BandDescriptors[1];
};

typedef struct _DOT11_BAND_DESCRIPTOR {
    ULONG uBandID;
    ULONG uBandCommonFrequency;
    enum _DOT11_TRI_STATE BandStateActive;
    ULONG uPhyTypeOffset;
    ULONG uPhyTypeCount;
    ULONG uChannelFrequenciesOffset;
    ULONG uChannelFrequenciesCount;
    ULONG uChannelWidthOffset;
    ULONG uChannelWidthCount;
};

typedef struct _DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR ReceiverAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ReceiverDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_MAC_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uOpmodeMask;
};

typedef struct _DOT11_NEIGHBOR_REPORT_IE {
    UCHAR BSSID[6];
    union _DOT11_BSSID_INFO BSSIDInfo;
    UCHAR OperatingClass;
    UCHAR Channel;
    UCHAR PhyType;
};

typedef struct _DOT11_OFFLOAD_NETWORK_LIST_INFO_V2 {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG ulFlags;
    ULONG FastScanPeriod;
    ULONG FastScanIterations;
    ULONG SlowScanPeriod;
    ULONG uNumOfEntries;
    struct _DOT11_OFFLOAD_NETWORK_V2 offloadNetworkList[1];
};

typedef struct _DOT11_OFFLOAD_NETWORK_V2 {
    struct _DOT11_SSID Ssid;
    enum _DOT11_CIPHER_ALGORITHM UnicastCipher;
    enum _DOT11_AUTH_ALGORITHM AuthAlgo;
    struct DOT11_CHANNEL_HINT Dot11ChannelHints[4];
    UCHAR bIsHidden;
};

typedef struct _DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR ReceiverAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ReceiverDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RESET_REQUEST {
    enum _DOT11_RESET_TYPE dot11ResetType;
    UCHAR dot11MacAddress[6];
    UCHAR bSetDefaultMIB;
};

typedef struct _DOT11_RSN_REKEY_PARAMETERS {
    ULONG Flags;
    UCHAR KCK[16];
    UCHAR KEK[16];
    ULONG64 KeyReplayCounter;
};

typedef struct _DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    PVOID ResponseContext;
    ULONG uSendTimeout;
    UCHAR Status;
    UCHAR GroupCapability;
    struct _DOT11_WFD_GROUP_ID GroupID;
    UCHAR bUseGroupID;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    ULONG uSendTimeout;
    struct _DOT11_WFD_GO_INTENT GroupOwnerIntent;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    UCHAR IntendedInterfaceAddress[6];
    UCHAR GroupCapability;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uSendTimeout;
    UCHAR Status;
    struct _DOT11_WFD_GO_INTENT GroupOwnerIntent;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    UCHAR IntendedInterfaceAddress[6];
    UCHAR GroupCapability;
    struct _DOT11_WFD_GROUP_ID GroupID;
    UCHAR bUseGroupID;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_INVITATION_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR DialogToken;
    UCHAR PeerDeviceAddress[6];
    ULONG uSendTimeout;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    struct _DOT11_WFD_INVITATION_FLAGS InvitationFlags;
    UCHAR GroupBSSID[6];
    UCHAR bUseGroupBSSID;
    struct _DOT11_WFD_CHANNEL OperatingChannel;
    UCHAR bUseSpecifiedOperatingChannel;
    struct _DOT11_WFD_GROUP_ID GroupID;
    UCHAR bLocalGO;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_INVITATION_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ReceiverDeviceAddress[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uSendTimeout;
    UCHAR Status;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    UCHAR GroupBSSID[6];
    UCHAR bUseGroupBSSID;
    struct _DOT11_WFD_CHANNEL OperatingChannel;
    UCHAR bUseSpecifiedOperatingChannel;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SSID {
    ULONG uSSIDLength;
    UCHAR ucSSID[32];
};

typedef struct _DOT11_WFD_BACKGROUND_DISCOVERY_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_WFD_DISCOVER_TYPE DiscoveryType;
    enum _DOT11_WFD_SERVICE_DISCOVERY_TYPE ServiceDiscoveryType;
    ULONG uDeviceEntryTimeout;
    ULONG uDeviceFilterListOffset;
    ULONG uNumDeviceFilters;
    ULONG uIEsOffset;
    ULONG uIEsLength;
    ULONG uNumChannelInfoElements;
    ULONG uChannelInfoListOffset;
    ULONG uChannelInfoListLength;
    ULONG uNumServiceHashes;
    ULONG uServiceHashListOffset;
    ULONG uServiceHashListLength;
    ULONG uNumServiceNames;
    ULONG uServiceNamesListOffset;
    ULONG uServiceNamesListLength;
    ULONG uBufferLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_WFD_CHANNEL {
    UCHAR CountryRegionString[3];
    UCHAR OperatingClass;
    UCHAR ChannelNumber;
};

typedef struct _DOT11_WFD_CONFIGURATION_TIMEOUT {
    UCHAR GOTimeout;
    UCHAR ClientTimeout;
};

typedef struct _DOT11_WFD_DEVICE_ENTRY {
    ULONG uPhyId;
    union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
    UCHAR dot11BSSID[6];
    enum _DOT11_BSS_TYPE dot11BSSType;
    UCHAR TransmitterAddress[6];
    LONG lRSSI;
    ULONG uLinkQuality;
    USHORT usBeaconPeriod;
    ULONG64 ullTimestamp;
    ULONG64 ullBeaconHostTimestamp;
    ULONG64 ullProbeResponseHostTimestamp;
    USHORT usCapabilityInformation;
    ULONG uBeaconIEsOffset;
    ULONG uBeaconIEsLength;
    ULONG uProbeResponseIEsOffset;
    ULONG uProbeResponseIEsLength;
};

typedef struct _DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    LONG Status;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG uListOffset;
    ULONG uListLength;
};

typedef struct _DOT11_WFD_DISCOVER_DEVICE_FILTER {
    UCHAR DeviceID[6];
    UCHAR ucBitmask;
    struct _DOT11_SSID GroupSSID;
};

typedef struct _DOT11_WFD_DISCOVER_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_WFD_DISCOVER_TYPE DiscoverType;
    enum _DOT11_WFD_SCAN_TYPE ScanType;
    ULONG uDiscoverTimeout;
    ULONG uDeviceFilterListOffset;
    ULONG uNumDeviceFilters;
    ULONG uIEsOffset;
    ULONG uIEsLength;
    UCHAR bForceScanLegacyNetworks;
};

typedef struct _DOT11_WFD_GO_INTENT {
    UCHAR TieBreaker : 1;
    UCHAR Intent : 7;
};

typedef struct _DOT11_WFD_GROUP_ID {
    UCHAR DeviceAddress[6];
    struct _DOT11_SSID SSID;
};

typedef struct _DOT11_WFD_INVITATION_FLAGS {
    UCHAR InvitationType : 1;
    UCHAR Reserved : 7;
};

typedef struct _DRIVER_EXTENSION {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG AddDevice;
    ULONG Count;
    struct _UNICODE_STRING ServiceKeyName;
};

typedef struct _DRIVER_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG Flags;
    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    struct _DRIVER_EXTENSION *DriverExtension;
    struct _UNICODE_STRING DriverName;
    struct _UNICODE_STRING *HardwareDatabase;
    struct _FAST_IO_DISPATCH *FastIoDispatch;
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG MajorFunction[28];
};

typedef struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS {
    ULONG Flags;
};

typedef struct _ECP_LIST {
};

typedef struct _EPROCESS {
};

typedef struct _ERESOURCE {
    struct _LIST_ENTRY SystemResourcesList;
    struct _OWNER_ENTRY *OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    UCHAR ReservedLowFlags;
    UCHAR WaiterPriority;
    PVOID SharedWaiters;
    PVOID ExclusiveWaiters;
    struct _OWNER_ENTRY OwnerEntry;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;
    PVOID Reserved2;
    PVOID Address;
    ULONG64 CreatorBackTraceIndex;
    ULONG64 SpinLock;
};

typedef struct _ETHREAD {
};

typedef struct _EVENT_DATA_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Reserved;
    UCHAR Type;
    UCHAR Reserved1;
    USHORT Reserved2;
};

typedef struct _EVENT_DESCRIPTOR {
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONG64 Keyword;
};

typedef struct _EVENT_FILTER_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Type;
};

typedef struct _EXCEPTION_RECORD {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    enum _EXCEPTION_DISPOSITION *Handler;
};

typedef struct _EXT_DELETE_PARAMETERS {
    ULONG Version;
    ULONG Reserved;
    PVOID DeleteCallback;
    PVOID DeleteContext;
};

typedef struct _EXT_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONG64 NoWakeTolerance;
};

typedef struct _EX_PUSH_LOCK {
    ULONG64 Locked : 1;
    ULONG64 Waiting : 1;
    ULONG64 Waking : 1;
    ULONG64 MultipleShared : 1;
    ULONG64 Shared : 60;
    ULONG64 Value;
    PVOID Ptr;
};

typedef struct _EmptyMessageStructureType {
    UCHAR _Reserved;
};

typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PUCHAR FastIoCheckIfPossible;
    PUCHAR FastIoRead;
    PUCHAR FastIoWrite;
    PUCHAR FastIoQueryBasicInfo;
    PUCHAR FastIoQueryStandardInfo;
    PUCHAR FastIoLock;
    PUCHAR FastIoUnlockSingle;
    PUCHAR FastIoUnlockAll;
    PUCHAR FastIoUnlockAllByKey;
    PUCHAR FastIoDeviceControl;
    PVOID AcquireFileForNtCreateSection;
    PVOID ReleaseFileForNtCreateSection;
    PVOID FastIoDetachDevice;
    PUCHAR FastIoQueryNetworkOpenInfo;
    PLONG AcquireForModWrite;
    PUCHAR MdlRead;
    PUCHAR MdlReadComplete;
    PUCHAR PrepareMdlWrite;
    PUCHAR MdlWriteComplete;
    PUCHAR FastIoReadCompressed;
    PUCHAR FastIoWriteCompressed;
    PUCHAR MdlReadCompleteCompressed;
    PUCHAR MdlWriteCompleteCompressed;
    PUCHAR FastIoQueryOpen;
    PLONG ReleaseForModWrite;
    PLONG AcquireForCcFlush;
    PLONG ReleaseForCcFlush;
};

typedef struct _FAST_MUTEX {
    LONG Count;
    PVOID Owner;
    ULONG Contention;
    struct _KEVENT Event;
    ULONG OldIrql;
    VOID _FAST_MUTEX;
    VOID _FAST_MUTEX;
    struct _FAST_MUTEX *operator=;
    struct _FAST_MUTEX *operator=;
};

typedef struct _FILE_BASIC_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};

typedef struct _FILE_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _VPB *Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    struct _SECTION_OBJECT_POINTERS *SectionObjectPointer;
    PVOID PrivateCacheMap;
    LONG FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    UCHAR LockOperation;
    UCHAR DeletePending;
    UCHAR ReadAccess;
    UCHAR WriteAccess;
    UCHAR DeleteAccess;
    UCHAR SharedRead;
    UCHAR SharedWrite;
    UCHAR SharedDelete;
    ULONG Flags;
    struct _UNICODE_STRING FileName;
    union _LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    struct _KEVENT Lock;
    struct _KEVENT Event;
    struct _IO_COMPLETION_CONTEXT *CompletionContext;
    ULONG64 IrpListLock;
    struct _LIST_ENTRY IrpList;
    PVOID FileObjectExtension;
    VOID _FILE_OBJECT;
    VOID _FILE_OBJECT;
    struct _FILE_OBJECT *operator=;
    struct _FILE_OBJECT *operator=;
};

typedef struct _FILE_STANDARD_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FLS_CALLBACK_INFO {
};

typedef struct _GDI_TEB_BATCH {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG64 HDC;
    ULONG Buffer[310];
};

typedef struct _GENERAL_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERAL_LOOKASIDE_POOL {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERIC_MAPPING {
    ULONG GenericRead;
    ULONG GenericWrite;
    ULONG GenericExecute;
    ULONG GenericAll;
};

typedef struct _GROUP_AFFINITY {
    ULONG64 Mask;
    USHORT Group;
    USHORT Reserved[3];
};

typedef struct _GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG VirtualAddress;
    ULONG Size;
};

typedef struct _IMAGE_DOS_HEADER {
    USHORT e_magic;
    USHORT e_cblp;
    USHORT e_cp;
    USHORT e_crlc;
    USHORT e_cparhdr;
    USHORT e_minalloc;
    USHORT e_maxalloc;
    USHORT e_ss;
    USHORT e_sp;
    USHORT e_csum;
    USHORT e_ip;
    USHORT e_cs;
    USHORT e_lfarlc;
    USHORT e_ovno;
    USHORT e_res[4];
    USHORT e_oemid;
    USHORT e_oeminfo;
    USHORT e_res2[10];
    LONG e_lfanew;
};

typedef struct _IMAGE_FILE_HEADER {
    USHORT Machine;
    USHORT NumberOfSections;
    ULONG TimeDateStamp;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
    USHORT SizeOfOptionalHeader;
    USHORT Characteristics;
};

typedef struct _IMAGE_NT_HEADERS64 {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG64 ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG64 SizeOfStackReserve;
    ULONG64 SizeOfStackCommit;
    ULONG64 SizeOfHeapReserve;
    ULONG64 SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[3];
};

typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
};

typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
};

typedef struct _IO_DRIVER_CREATE_CONTEXT {
    SHORT Size;
    struct _ECP_LIST *ExtraCreateParameter;
    PVOID DeviceObjectHint;
    struct _TXN_PARAMETER_BLOCK *TxnParameters;
};

typedef struct _IO_PRIORITY_INFO {
    ULONG Size;
    ULONG ThreadPriority;
    ULONG PagePriority;
    enum _IO_PRIORITY_HINT IoPriority;
};

typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;
    UCHAR ShareDisposition;
    UCHAR Spare1;
    USHORT Flags;
    USHORT Spare2;
     <unnamed-type-u>;
    union {
         <unnamed-type-Port>;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Port;
         <unnamed-type-Memory>;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory;
         <unnamed-type-Interrupt>;
        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
            USHORT AffinityPolicy;
            USHORT Group;
            enum _IRQ_PRIORITY PriorityPolicy;
            ULONG64 TargetedProcessors;
        } Interrupt;
         <unnamed-type-Dma>;
        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;
         <unnamed-type-DmaV3>;
        struct {
            ULONG RequestLine;
            ULONG Reserved;
            ULONG Channel;
            ULONG TransferWidth;
        } DmaV3;
         <unnamed-type-Generic>;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Generic;
         <unnamed-type-DevicePrivate>;
        struct {
            ULONG Data[3];
        } DevicePrivate;
         <unnamed-type-BusNumber>;
        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;
         <unnamed-type-ConfigData>;
        struct {
            ULONG Priority;
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;
         <unnamed-type-Memory40>;
        struct {
            ULONG Length40;
            ULONG Alignment40;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory40;
         <unnamed-type-Memory48>;
        struct {
            ULONG Length48;
            ULONG Alignment48;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory48;
         <unnamed-type-Memory64>;
        struct {
            ULONG Length64;
            ULONG Alignment64;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory64;
         <unnamed-type-Connection>;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    struct _IO_RESOURCE_LIST List[1];
};

typedef struct _IO_SECURITY_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _ACCESS_STATE *AccessState;
    ULONG DesiredAccess;
    ULONG FullCreateOptions;
};

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-CreatePipe>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
        } CreatePipe;
         <unnamed-type-CreateMailslot>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _MAILSLOT_CREATE_PARAMETERS *Parameters;
        } CreateMailslot;
         <unnamed-type-Read>;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Write;
         <unnamed-type-QueryDirectory>;
        struct {
            ULONG Length;
            struct _UNICODE_STRING *FileName;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;
         <unnamed-type-NotifyDirectory>;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;
         <unnamed-type-NotifyDirectoryEx>;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
            enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
        } NotifyDirectoryEx;
         <unnamed-type-QueryFile>;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
        } QueryFile;
         <unnamed-type-SetFile>;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            struct _FILE_OBJECT *FileObject;
            UCHAR ReplaceIfExists;
            UCHAR AdvanceOnly;
            ULONG ClusterCount;
            PVOID DeleteHandle;
        } SetFile;
         <unnamed-type-QueryVolume>;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } QueryVolume;
         <unnamed-type-FileSystemControl>;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
         <unnamed-type-LockControl>;
        struct {
            union _LARGE_INTEGER *Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } LockControl;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-QuerySecurity>;
        struct {
            ULONG SecurityInformation;
            ULONG Length;
        } QuerySecurity;
         <unnamed-type-SetSecurity>;
        struct {
            ULONG SecurityInformation;
            PVOID SecurityDescriptor;
        } SetSecurity;
         <unnamed-type-MountVolume>;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } MountVolume;
         <unnamed-type-VerifyVolume>;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } VerifyVolume;
         <unnamed-type-Scsi>;
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
         <unnamed-type-QueryDeviceRelations>;
        struct {
            enum _DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;
         <unnamed-type-QueryInterface>;
        struct {
            struct _GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            struct _INTERFACE *Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
         <unnamed-type-DeviceCapabilities>;
        struct {
            struct _DEVICE_CAPABILITIES *Capabilities;
        } DeviceCapabilities;
         <unnamed-type-FilterResourceRequirements>;
        struct {
            struct _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
        } FilterResourceRequirements;
         <unnamed-type-ReadWriteConfig>;
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG Length;
        } ReadWriteConfig;
         <unnamed-type-SetLock>;
        struct {
            UCHAR Lock;
        } SetLock;
         <unnamed-type-QueryId>;
        struct {
            enum BUS_QUERY_ID_TYPE IdType;
        } QueryId;
         <unnamed-type-QueryDeviceText>;
        struct {
            enum DEVICE_TEXT_TYPE DeviceTextType;
            ULONG LocaleId;
        } QueryDeviceText;
         <unnamed-type-UsageNotification>;
        struct {
            UCHAR InPath;
            UCHAR Reserved[3];
            enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        } UsageNotification;
         <unnamed-type-WaitWake>;
        struct {
            enum _SYSTEM_POWER_STATE PowerState;
        } WaitWake;
         <unnamed-type-PowerSequence>;
        struct {
            struct _POWER_SEQUENCE *PowerSequence;
        } PowerSequence;
         <unnamed-type-Power>;
        struct {
            ULONG SystemContext;
            struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
            enum _POWER_STATE_TYPE Type;
            union _POWER_STATE State;
            enum POWER_ACTION ShutdownType;
        } Power;
         <unnamed-type-StartDevice>;
        struct {
            struct _CM_RESOURCE_LIST *AllocatedResources;
            struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
        } StartDevice;
         <unnamed-type-WMI>;
        struct {
            ULONG64 ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
         <unnamed-type-Others>;
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    PLONG CompletionRoutine;
    PVOID Context;
};

typedef struct _IO_STATUS_BLOCK {
    LONG Status;
    PVOID Pointer;
    ULONG64 Information;
};

typedef struct _IO_TIMER {
};

typedef struct _IPV4_ARP_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv4Address[4];
    UCHAR HostIPv4Address[4];
    UCHAR MacAddress[6];
};

typedef struct _IPV4_HEADER {
    UCHAR VersionAndHeaderLength;
    UCHAR HeaderLength : 4;
    UCHAR Version : 4;
    UCHAR TypeOfServiceAndEcnField;
    UCHAR EcnField : 2;
    UCHAR TypeOfService : 6;
    USHORT TotalLength;
    USHORT Identification;
    USHORT FlagsAndOffset;
    USHORT DontUse1 : 5;
    USHORT MoreFragments : 1;
    USHORT DontFragment : 1;
    USHORT Reserved : 1;
    USHORT DontUse2 : 8;
    UCHAR TimeToLive;
    UCHAR Protocol;
    USHORT HeaderChecksum;
    struct in_addr SourceAddress;
    struct in_addr DestinationAddress;
};

typedef struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv4SourceAddress[4];
    UCHAR IPv4DestAddress[4];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _IPV6_FRAGMENT_HEADER {
    UCHAR NextHeader;
    UCHAR Reserved;
    USHORT DontUse1 : 8;
    USHORT MoreFragments : 1;
    USHORT ReservedBits : 2;
    USHORT DontUse2 : 5;
    USHORT OffsetAndFlags;
    ULONG Id;
};

typedef struct _IPV6_NS_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv6Address[16];
    UCHAR SolicitedNodeIPv6Address[16];
    UCHAR MacAddress[6];
    UCHAR TargetIPv6Addresses[2][16];
};

typedef struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv6SourceAddress[16];
    UCHAR IPv6DestAddress[16];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _IRP {
    SHORT Type;
    USHORT Size;
    USHORT AllocationProcessorNumber;
    USHORT Reserved;
    struct _MDL *MdlAddress;
    ULONG Flags;
     <unnamed-type-AssociatedIrp>;
    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;
    struct _LIST_ENTRY ThreadListEntry;
    struct _IO_STATUS_BLOCK IoStatus;
    CHAR RequestorMode;
    UCHAR PendingReturned;
    CHAR StackCount;
    CHAR CurrentLocation;
    UCHAR Cancel;
    UCHAR CancelIrql;
    CHAR ApcEnvironment;
    UCHAR AllocationFlags;
    struct _IO_STATUS_BLOCK *UserIosb;
    struct _KEVENT *UserEvent;
     <unnamed-type-Overlay>;
    union {
         <unnamed-type-AsynchronousParameters>;
        struct {
            PVOID UserApcRoutine;
            PVOID IssuingProcess;
            PVOID UserApcContext;
        } AsynchronousParameters;
        union _LARGE_INTEGER AllocationSize;
    } Overlay;
    PVOID CancelRoutine;
    PVOID UserBuffer;
     <unnamed-type-Tail>;
    union {
         <unnamed-type-Overlay>;
        struct {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
            PVOID DriverContext[4];
            struct _ETHREAD *Thread;
            PCHAR AuxiliaryBuffer;
            struct _LIST_ENTRY ListEntry;
            struct _IO_STACK_LOCATION *CurrentStackLocation;
            ULONG PacketType;
            struct _FILE_OBJECT *OriginalFileObject;
            PVOID IrpExtension;
        } Overlay;
        struct _KAPC Apc;
        PVOID CompletionKey;
    } Tail;
};

typedef struct _KAPC {
    UCHAR Type;
    UCHAR SpareByte0;
    UCHAR Size;
    UCHAR SpareByte1;
    ULONG SpareLong0;
    struct _KTHREAD *Thread;
    struct _LIST_ENTRY ApcListEntry;
    PVOID KernelRoutine;
    PVOID RundownRoutine;
    PVOID NormalRoutine;
    PVOID Reserved[3];
    PVOID NormalContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CHAR ApcStateIndex;
    CHAR ApcMode;
    UCHAR Inserted;
};

typedef struct _KDESCRIPTOR {
    USHORT Pad[3];
    USHORT Limit;
    PVOID Base;
};

typedef struct _KDEVICE_QUEUE {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY DeviceListHead;
    ULONG64 Lock;
    UCHAR Busy;
    LONG64 Reserved : 8;
    LONG64 Hint : 56;
};

typedef struct _KDEVICE_QUEUE_ENTRY {
    struct _LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    UCHAR Inserted;
};

typedef struct _KDPC {
    ULONG TargetInfoAsUlong;
    UCHAR Type;
    UCHAR Importance;
    USHORT Number;
    struct _SINGLE_LIST_ENTRY DpcListEntry;
    ULONG64 ProcessorHistory;
    PVOID DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PVOID DpcData;
    VOID _KDPC;
    VOID _KDPC;
    struct _KDPC *operator=;
    struct _KDPC *operator=;
};

typedef struct _KEVENT {
    struct _DISPATCHER_HEADER Header;
    VOID _KEVENT;
    VOID _KEVENT;
    struct _KEVENT *operator=;
    struct _KEVENT *operator=;
};

typedef struct _KFLOATING_SAVE {
    ULONG Dummy;
};

typedef struct _KINTERRUPT {
};

typedef struct _KNODE {
};

typedef struct _KPCR {
    struct _NT_TIB NtTib;
    union _KGDTENTRY64 *GdtBase;
    struct _KTSS64 *TssBase;
    ULONG64 UserRsp;
    struct _KPCR *Self;
    struct _KPRCB *CurrentPrcb;
    struct _KSPIN_LOCK_QUEUE *LockArray;
    PVOID Used_Self;
    union _KIDTENTRY64 *IdtBase;
    ULONG64 Unused[2];
    UCHAR Irql;
    UCHAR SecondLevelCacheAssociativity;
    UCHAR ObsoleteNumber;
    UCHAR Fill0;
    ULONG Unused0[3];
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG StallScaleFactor;
    PVOID Unused1[3];
    ULONG KernelReserved[15];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG Unused2;
    PVOID KdVersionBlock;
    PVOID Unused3;
    ULONG PcrAlign1[24];
    struct _KPRCB Prcb;
    VOID _KPCR;
    VOID _KPCR;
    struct _KPCR *operator=;
    struct _KPCR *operator=;
};

typedef struct _KPRCB {
    ULONG MxCsr;
    UCHAR LegacyNumber;
    UCHAR ReservedMustBeZero;
    UCHAR InterruptRequest;
    UCHAR IdleHalt;
    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;
    UCHAR NestingLevel;
    UCHAR ClockOwner;
    UCHAR PendingTickFlags;
    UCHAR PendingTick : 1;
    UCHAR PendingBackupTick : 1;
    UCHAR IdleState;
    ULONG Number;
    ULONG64 RspBase;
    ULONG64 PrcbLock;
    PCHAR PriorityState;
    CHAR CpuType;
    CHAR CpuID;
    USHORT CpuStep;
    UCHAR CpuStepping;
    UCHAR CpuModel;
    ULONG MHz;
    ULONG64 HalReserved[8];
    USHORT MinorVersion;
    USHORT MajorVersion;
    UCHAR BuildType;
    UCHAR CpuVendor;
    UCHAR CoresPerPhysicalProcessor;
    UCHAR LogicalProcessorsPerCore;
    ULONG64 PrcbPad04[6];
    struct _KNODE *ParentNode;
    ULONG64 GroupSetMember;
    UCHAR Group;
    UCHAR GroupIndex;
    UCHAR PrcbPad05[2];
    ULONG InitialApicId;
    ULONG ScbOffset;
    ULONG ApicMask;
    PVOID AcpiReserved;
    ULONG CFlushSize;
    ULONG64 TrappedSecurityDomain;
    UCHAR BpbState;
    UCHAR BpbCpuIdle : 1;
    UCHAR BpbFlushRsbOnTrap : 1;
    UCHAR BpbIbpbOnReturn : 1;
    UCHAR BpbIbpbOnTrap : 1;
    UCHAR BpbIbpbOnRetpolineExit : 1;
    UCHAR BpbStateReserved : 3;
    UCHAR BpbFeatures;
    UCHAR BpbClearOnIdle : 1;
    UCHAR BpbEnabled : 1;
    UCHAR BpbSmep : 1;
    UCHAR BpbFeaturesReserved : 5;
    UCHAR BpbCurrentSpecCtrl;
    UCHAR BpbKernelSpecCtrl;
    UCHAR BpbNmiSpecCtrl;
    UCHAR BpbUserSpecCtrl;
    SHORT PairRegister;
    ULONG64 PrcbPad11[2];
    struct _KPROCESSOR_STATE ProcessorState;
    struct _XSAVE_AREA_HEADER *ExtendedSupervisorState;
    ULONG ProcessorSignature;
    ULONG ProcessorFlags;
    ULONG64 PrcbPad12a;
    ULONG64 PrcbPad12[3];
    VOID _KPRCB;
    VOID _KPRCB;
    struct _KPRCB *operator=;
    struct _KPRCB *operator=;
};

typedef struct _KPROCESS {
};

typedef struct _KPROCESSOR_STATE {
    struct _KSPECIAL_REGISTERS SpecialRegisters;
    struct _CONTEXT ContextFrame;
};

typedef struct _KSPECIAL_REGISTERS {
    ULONG64 Cr0;
    ULONG64 Cr2;
    ULONG64 Cr3;
    ULONG64 Cr4;
    ULONG64 KernelDr0;
    ULONG64 KernelDr1;
    ULONG64 KernelDr2;
    ULONG64 KernelDr3;
    ULONG64 KernelDr6;
    ULONG64 KernelDr7;
    struct _KDESCRIPTOR Gdtr;
    struct _KDESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG MxCsr;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    ULONG64 Cr8;
    ULONG64 MsrGsBase;
    ULONG64 MsrGsSwap;
    ULONG64 MsrStar;
    ULONG64 MsrLStar;
    ULONG64 MsrCStar;
    ULONG64 MsrSyscallMask;
    ULONG64 Xcr0;
    ULONG64 MsrFsBase;
    ULONG64 SpecialPadding0;
};

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE *Next;
    PULONG64 Lock;
    VOID _KSPIN_LOCK_QUEUE;
    VOID _KSPIN_LOCK_QUEUE;
    struct _KSPIN_LOCK_QUEUE *operator=;
    struct _KSPIN_LOCK_QUEUE *operator=;
};

typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};

typedef struct _KTHREAD {
};

typedef struct _KTSS64 {
    ULONG Reserved0;
    ULONG64 Rsp0;
    ULONG64 Rsp1;
    ULONG64 Rsp2;
    ULONG64 Ist[8];
    ULONG64 Reserved1;
    USHORT Reserved2;
    USHORT IoMapBase;
};

typedef struct _KUSER_SHARED_DATA {
    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;
    struct _KSYSTEM_TIME InterruptTime;
    struct _KSYSTEM_TIME SystemTime;
    struct _KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    WCHAR NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG LargePageMinimum;
    ULONG AitSamplingValue;
    ULONG AppCompatFlag;
    ULONG64 RNGSeedVersion;
    ULONG GlobalValidationRunlevel;
    LONG TimeZoneBiasStamp;
    ULONG NtBuildNumber;
    enum _NT_PRODUCT_TYPE NtProductType;
    UCHAR ProductTypeIsValid;
    UCHAR Reserved0[1];
    USHORT NativeProcessorArchitecture;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    UCHAR ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    ULONG TimeSlip;
    enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
    ULONG BootId;
    union _LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    UCHAR KdDebuggerEnabled;
    UCHAR MitigationPolicies;
    UCHAR NXSupportPolicy : 2;
    UCHAR SEHValidationPolicy : 2;
    UCHAR CurDirDevicesSkippedForDlls : 2;
    UCHAR Reserved : 2;
    UCHAR Reserved6[2];
    ULONG ActiveConsoleId;
    ULONG DismountCount;
    ULONG ComPlusPackage;
    ULONG LastSystemRITEventTickCount;
    ULONG NumberOfPhysicalPages;
    UCHAR SafeBootMode;
    UCHAR VirtualizationFlags;
    UCHAR Reserved12[2];
    ULONG SharedDataFlags;
    ULONG DbgErrorPortPresent : 1;
    ULONG DbgElevationEnabled : 1;
    ULONG DbgVirtEnabled : 1;
    ULONG DbgInstallerDetectEnabled : 1;
    ULONG DbgLkgEnabled : 1;
    ULONG DbgDynProcessorEnabled : 1;
    ULONG DbgConsoleBrokerEnabled : 1;
    ULONG DbgSecureBootEnabled : 1;
    ULONG DbgMultiSessionSku : 1;
    ULONG DbgMultiUsersInSessionSku : 1;
    ULONG DbgStateSeparationEnabled : 1;
    ULONG SpareBits : 21;
    ULONG DataFlagsPad[1];
    ULONG64 TestRetInstruction;
    LONG64 QpcFrequency;
    ULONG SystemCall;
    ULONG SystemCallPad0;
    ULONG64 SystemCallPad[2];
    struct _KSYSTEM_TIME TickCount;
    ULONG64 TickCountQuad;
    ULONG ReservedTickCountOverlay[3];
    ULONG TickCountPad[1];
    ULONG Cookie;
    ULONG CookiePad[1];
    LONG64 ConsoleSessionForegroundProcessId;
    ULONG64 TimeUpdateLock;
    ULONG64 BaselineSystemTimeQpc;
    ULONG64 BaselineInterruptTimeQpc;
    ULONG64 QpcSystemTimeIncrement;
    ULONG64 QpcInterruptTimeIncrement;
    UCHAR QpcSystemTimeIncrementShift;
    UCHAR QpcInterruptTimeIncrementShift;
    USHORT UnparkedProcessorCount;
    ULONG EnclaveFeatureMask[4];
    ULONG TelemetryCoverageRound;
    USHORT UserModeGlobalLogger[16];
    ULONG ImageFileExecutionOptions;
    ULONG LangGenerationCount;
    ULONG64 Reserved4;
    ULONG64 InterruptTimeBias;
    ULONG64 QpcBias;
    ULONG ActiveProcessorCount;
    UCHAR ActiveGroupCount;
    UCHAR Reserved9;
    USHORT QpcData;
    UCHAR QpcBypassEnabled;
    UCHAR QpcShift;
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
    struct _XSTATE_CONFIGURATION XState;
};

typedef struct _LEAP_SECOND_DATA {
};

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
};

typedef struct _LOOKASIDE_LIST_EX {
    struct _GENERAL_LOOKASIDE_POOL L;
};

typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
};

typedef struct _LUID_AND_ATTRIBUTES {
    struct _LUID Luid;
    ULONG Attributes;
};

typedef struct _M128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    union _LARGE_INTEGER ReadTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _MDL {
    struct _MDL *Next;
    SHORT Size;
    SHORT MdlFlags;
    USHORT AllocationProcessorNumber;
    USHORT Reserved;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
};

typedef struct _METHOD {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InputBufferLength;
    ULONG OutputBufferLength;
    ULONG MethodId;
    ULONG BytesWritten;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    union _LARGE_INTEGER DefaultTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD {
    ULONG TransmitChecksumOffloadSupported : 4;
    ULONG ReceiveChecksumOffloadSupported : 4;
    ULONG LsoV2Supported : 4;
    ULONG RssSupported : 4;
    ULONG VmqSupported : 4;
    ULONG MaxHeaderSizeSupported;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 {
    ULONG TransmitChecksumOffloadSupported : 4;
    ULONG ReceiveChecksumOffloadSupported : 4;
    ULONG LsoV2Supported : 4;
    ULONG RssSupported : 4;
    ULONG VmqSupported : 4;
    ULONG Reserved : 12;
    ULONG MaxHeaderSizeSupported;
     _ENCAPSULATION_PROTOCOL_INFO;
    union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO EncapsulationProtocolInfo;
    ULONG Reserved1;
    ULONG Reserved2;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO {
    USHORT VxlanUDPPortNumber;
    USHORT VxlanUDPPortNumberConfigurable : 1;
};

typedef struct _NDIS_EVENT {
    struct _KEVENT Event;
    VOID _NDIS_EVENT;
    VOID _NDIS_EVENT;
    struct _NDIS_EVENT *operator=;
    struct _NDIS_EVENT *operator=;
};

typedef struct _NDIS_GUID {
    struct _GUID Guid;
    ULONG Oid;
    LONG Status;
    ULONG Size;
    ULONG Flags;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V1 {
     <unnamed-type-Supported>;
    struct {
        ULONG Encapsulation;
        ULONG AhEspCombined;
        ULONG TransportTunnelCombined;
        ULONG IPv4Options;
        ULONG Flags;
    } Supported;
     <unnamed-type-IPv4AH>;
    struct {
        ULONG Md5 : 2;
        ULONG Sha_1 : 2;
        ULONG Transport : 2;
        ULONG Tunnel : 2;
        ULONG Send : 2;
        ULONG Receive : 2;
    } IPv4AH;
     <unnamed-type-IPv4ESP>;
    struct {
        ULONG Des : 2;
        ULONG Reserved : 2;
        ULONG TripleDes : 2;
        ULONG NullEsp : 2;
        ULONG Transport : 2;
        ULONG Tunnel : 2;
        ULONG Send : 2;
        ULONG Receive : 2;
    } IPv4ESP;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2 {
    ULONG Encapsulation;
    UCHAR IPv6Supported;
    UCHAR IPv4Options;
    UCHAR IPv6NonIPsecExtensionHeaders;
    UCHAR Ah;
    UCHAR Esp;
    UCHAR AhEspCombined;
    UCHAR Transport;
    UCHAR Tunnel;
    UCHAR TransportTunnelCombined;
    UCHAR LsoSupported;
    UCHAR ExtendedSequenceNumbers;
    ULONG UdpEsp;
    ULONG AuthenticationAlgorithms;
    ULONG EncryptionAlgorithms;
    ULONG SaOffloadCapacity;
};

typedef struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID MiniportAdapterContext;
    ULONG AttributeFlags;
    ULONG CheckForHangTimeInSeconds;
    enum _NDIS_INTERFACE_TYPE InterfaceType;
};

typedef struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Flags;
    PLONG SetOptionsHandler;
    PLONG InitializeHandlerEx;
    PVOID HaltHandlerEx;
    PVOID UnloadHandler;
    PLONG PauseHandler;
    PLONG RestartHandler;
    PLONG OidRequestHandler;
    PVOID SendNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
    PVOID CancelSendHandler;
    PUCHAR CheckForHangHandlerEx;
    PLONG ResetHandlerEx;
    PVOID DevicePnPEventNotifyHandler;
    PVOID ShutdownHandlerEx;
    PVOID CancelOidRequestHandler;
    PLONG DirectOidRequestHandler;
    PVOID CancelDirectOidRequestHandler;
};

typedef struct _NDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG WdiVersion;
    PLONG AllocateAdapterHandler;
    PVOID FreeAdapterHandler;
    PLONG OpenAdapterHandler;
    PLONG CloseAdapterHandler;
    PLONG StartOperationHandler;
    PVOID StopOperationHandler;
    PLONG PostPauseHandler;
    PLONG PostRestartHandler;
    PLONG HangDiagnoseHandler;
    PLONG TalTxRxInitializeHandler;
    PVOID TalTxRxDeinitializeHandler;
    PLONG LeIdleNotificationHandler;
    PVOID LeCancelIdleNotificationHandler;
};

typedef struct _NDIS_MINIPORT_HOOK_DRIVER_CLIENT_DISPATCH {
    PVOID SetDriverContext;
    PVOID SetAdapterContext;
    struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__ **GetHookDriverHandle;
    struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__ **GetHookAdpaterHandle;
    PVOID RawOidRequestComplete;
    PVOID RawDirectOidRequestComplete;
    PVOID RawIndicateStatus;
    PLONG InvokeOidRequestHandler;
    PVOID InvokeCancelOidRequestHandler;
    PLONG InvokeDirectOidRequestHandler;
    PVOID InvokeCancelDirectOidRequestHandler;
};

typedef struct _NDIS_MINIPORT_HOOK_DRIVER_PROVIDER_CHARACTERISTICS {
    enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE HookType;
};

typedef struct _NDIS_MINIPORT_HOOK_DRIVER_PROVIDER_DISPATCH {
    PLONG DriverRegister;
    PVOID DriverDeregister;
    PVOID OnOidRequestComplete;
    PVOID OnDirectOidRequestComplete;
    PVOID OnIndicateStatus;
};

typedef struct _NDIS_MINIPORT_INIT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _CM_PARTIAL_RESOURCE_LIST *AllocatedResources;
    PVOID IMDeviceInstanceContext;
    PVOID MiniportAddDeviceContext;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    struct _NDIS_PORT_AUTHENTICATION_PARAMETERS *DefaultPortAuthStates;
    struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES *PciDeviceCustomProperties;
};

typedef struct _NDIS_MINIPORT_PAUSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PauseReason;
};

typedef struct _NDIS_MINIPORT_RESTART_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_RESTART_ATTRIBUTES *RestartAttributes;
    ULONG Flags;
};

typedef struct _NDIS_MINIPORT_WDI_DATA_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID TxAbortHandler;
    PVOID TxTargetDescInitHandler;
    PVOID TxTargetDescDeInitHandler;
    PVOID TxDataSendHandler;
    PVOID TxTalSendHandler;
    PVOID TxTalSendCompleteHandler;
    PVOID TxTalQueueInOrderHandler;
    PVOID TxPeerBacklogHandler;
    PVOID RxStopHandler;
    PVOID RxFlushHandler;
    PVOID RxRestartHandler;
    PVOID RxGetMpdusHandler;
    PVOID RxReturnFramesHandler;
    PVOID RxResumeHandler;
    PVOID RxThrottleHandler;
    PVOID RxPpduRssiHandler;
    PLONG TalTxRxStartHandler;
    PVOID TalTxRxStopHandler;
    PVOID TalTxRxAddPortHandler;
    PVOID TalTxRxDeletePortHandler;
    PVOID TalTxRxSetPortOpModeHandler;
    PVOID TalTxRxResetPortHandler;
    PVOID TalTxRxPeerConfigHandler;
    PVOID TalTxRxPeerDeleteConfirmHandler;
    PVOID TxSuspectFrameAbortHandler;
};

typedef struct _NDIS_OBJECT_HEADER {
    UCHAR Type;
    UCHAR Revision;
    USHORT Size;
};

typedef struct _NDIS_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD Checksum;
    struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
    struct _NDIS_IPSEC_OFFLOAD_V1 IPsecV1;
    struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
    ULONG Flags;
    struct _NDIS_IPSEC_OFFLOAD_V2 IPsecV2;
    struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD Rsc;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD EncapsulatedPacketTaskOffloadGre;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 EncapsulatedPacketTaskOffloadVxlan;
    UCHAR EncapsulationTypes;
    struct _NDIS_RFC6877_464XLAT_OFFLOAD Rfc6877Xlat;
};

typedef struct _NDIS_OFFLOAD_ENCAPSULATION {
    struct _NDIS_OBJECT_HEADER Header;
     <unnamed-type-IPv4>;
    struct {
        ULONG Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        ULONG Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } IPv6;
};

typedef struct _NDIS_OFFLOAD_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR IPv4Checksum;
    UCHAR TCPIPv4Checksum;
    UCHAR UDPIPv4Checksum;
    UCHAR TCPIPv6Checksum;
    UCHAR UDPIPv6Checksum;
    UCHAR LsoV1;
    UCHAR IPsecV1;
    UCHAR LsoV2IPv4;
    UCHAR LsoV2IPv6;
    UCHAR TcpConnectionIPv4;
    UCHAR TcpConnectionIPv6;
    ULONG Flags;
    UCHAR IPsecV2;
    UCHAR IPsecV2IPv4;
    UCHAR RscIPv4;
    UCHAR RscIPv6;
    UCHAR EncapsulatedPacketTaskOffload;
    UCHAR EncapsulationTypes;
     _ENCAPSULATION_PROTOCOL_PARAMETERS;
    union _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS EncapsulationProtocolParameters;
};

typedef struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS {
    USHORT VxlanUDPPortNumber;
};

typedef struct _NDIS_OID_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_REQUEST_TYPE RequestType;
    ULONG PortNumber;
    ULONG Timeout;
    PVOID RequestId;
    PVOID RequestHandle;
     _REQUEST_DATA;
    union _NDIS_OID_REQUEST::_REQUEST_DATA DATA;
    UCHAR NdisReserved[128];
    UCHAR MiniportReserved[16];
    UCHAR SourceReserved[16];
    UCHAR SupportedRevision;
    UCHAR Reserved1;
    USHORT Reserved2;
    ULONG SwitchId;
    ULONG VPortId;
    ULONG Flags;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InputBufferLength;
    ULONG OutputBufferLength;
    ULONG MethodId;
    ULONG BytesWritten;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG DeviceType;
    ULONG CurrentSpeedAndMode;
    ULONG CurrentPayloadSize;
    ULONG MaxPayloadSize;
    ULONG MaxReadRequestSize;
    ULONG CurrentLinkSpeed;
    ULONG CurrentLinkWidth;
    ULONG MaxLinkSpeed;
    ULONG MaxLinkWidth;
    ULONG PciExpressVersion;
    ULONG InterruptType;
    ULONG MaxInterruptMessages;
};

typedef struct _NDIS_PM_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SupportedWoLPacketPatterns;
    ULONG NumTotalWoLPatterns;
    ULONG MaxWoLPatternSize;
    ULONG MaxWoLPatternOffset;
    ULONG MaxWoLPacketSaveBuffer;
    ULONG SupportedProtocolOffloads;
    ULONG NumArpOffloadIPv4Addresses;
    ULONG NumNSOffloadIPv6Addresses;
    enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
    ULONG SupportedWakeUpEvents;
    ULONG MediaSpecificWakeUpEvents;
};

typedef struct _NDIS_PM_COUNTED_STRING {
    USHORT Length;
    WCHAR String[65];
};

typedef struct _NDIS_PM_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG EnabledWoLPacketPatterns;
    ULONG EnabledProtocolOffloads;
    ULONG WakeUpFlags;
    ULONG MediaSpecificWakeUpEvents;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Priority;
    enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE ProtocolOffloadType;
    struct _NDIS_PM_COUNTED_STRING FriendlyName;
    ULONG ProtocolOffloadId;
    ULONG NextProtocolOffloadOffset;
     _PROTOCOL_OFFLOAD_PARAMETERS;
    union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS ProtocolOffloadParameters;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS {
    ULONG Flags;
    UCHAR KCK[16];
    UCHAR KEK[16];
    ULONG64 KeyReplayCounter;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv4Address[4];
    UCHAR HostIPv4Address[4];
    UCHAR MacAddress[6];
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv6Address[16];
    UCHAR SolicitedNodeIPv6Address[16];
    UCHAR MacAddress[6];
    UCHAR TargetIPv6Addresses[2][16];
};

typedef struct _NDIS_PM_WOL_PATTERN {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Priority;
    enum _NDIS_PM_WOL_PACKET WoLPacketType;
    struct _NDIS_PM_COUNTED_STRING FriendlyName;
    ULONG PatternId;
    ULONG NextWoLPatternOffset;
     _WOL_PATTERN;
    union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN WoLPattern;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS {
    ULONG Flags;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv4SourceAddress[4];
    UCHAR IPv4DestAddress[4];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv6SourceAddress[16];
    UCHAR IPv6DestAddress[16];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN {
    ULONG Flags;
    ULONG MaskOffset;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
};

typedef struct _NDIS_PORT_AUTHENTICATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_PORT_CONTROL_STATE SendControlState;
    enum _NDIS_PORT_CONTROL_STATE RcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
};

typedef struct _NDIS_RECEIVE_FILTER_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG EnabledFilterTypes;
    ULONG EnabledQueueTypes;
    ULONG NumQueues;
    ULONG SupportedQueueProperties;
    ULONG SupportedFilterTests;
    ULONG SupportedHeaders;
    ULONG SupportedMacHeaderFields;
    ULONG MaxMacHeaderFilters;
    ULONG MaxQueueGroups;
    ULONG MaxQueuesPerQueueGroup;
    ULONG MinLookaheadSplitSize;
    ULONG MaxLookaheadSplitSize;
    ULONG SupportedARPHeaderFields;
    ULONG SupportedIPv4HeaderFields;
    ULONG SupportedIPv6HeaderFields;
    ULONG SupportedUdpHeaderFields;
    ULONG MaxFieldTestsPerPacketCoalescingFilter;
    ULONG MaxPacketCoalescingFilters;
    ULONG NdisReserved;
};

typedef struct _NDIS_RECEIVE_FILTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_FILTER_TYPE FilterType;
    ULONG QueueId;
    ULONG FilterId;
    ULONG FieldParametersArrayOffset;
    ULONG FieldParametersArrayNumElements;
    ULONG FieldParametersArrayElementSize;
    ULONG RequestedFilterIdBitCount;
    ULONG MaxCoalescingDelay;
    ULONG VPortId;
};

typedef struct _NDIS_RECEIVE_THROTTLE_PARAMETERS {
    ULONG MaxNblsToIndicate;
    ULONG MoreNblsPending : 1;
};

typedef struct _NDIS_RESTART_ATTRIBUTES {
    struct _NDIS_RESTART_ATTRIBUTES *Next;
    ULONG Oid;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _NDIS_RFC6877_464XLAT_OFFLOAD {
    enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS XlatOffload;
    ULONG Flags;
};

typedef struct _NDIS_SPIN_LOCK {
    ULONG64 SpinLock;
    UCHAR OldIrql;
};

typedef struct _NDIS_STATUS_INDICATION {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID SourceHandle;
    ULONG PortNumber;
    LONG StatusCode;
    ULONG Flags;
    PVOID DestinationHandle;
    PVOID RequestId;
    PVOID StatusBuffer;
    ULONG StatusBufferSize;
    struct _GUID Guid;
    PVOID NdisReserved[4];
};

typedef struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD {
     <unnamed-type-IPv4Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
        ULONG IpChecksum : 2;
    } IPv4Transmit;
     <unnamed-type-IPv4Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
        ULONG IpChecksum : 2;
    } IPv4Receive;
     <unnamed-type-IPv6Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
    } IPv6Transmit;
     <unnamed-type-IPv6Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
    } IPv6Receive;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG TcpOptions : 2;
        ULONG IpOptions : 2;
    } IPv4;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
    } IPv6;
};

typedef struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD {
     <unnamed-type-IPv4>;
    struct {
        UCHAR Enabled;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        UCHAR Enabled;
    } IPv6;
};

typedef struct _NDIS_WDI_DATA_API {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID TxDequeueIndication;
    PVOID TxTransferCompleteIndication;
    PVOID TxSendCompleteIndication;
    PVOID TxQueryRATIDState;
    PVOID TxSendPauseIndication;
    PVOID TxSendRestartIndication;
    PVOID TxReleaseFrameIndication;
    PVOID TxInjectFrameIndication;
    PVOID TxAbortConfirm;
    PVOID RxInorderDataIndication;
    PVOID RxStopConfirm;
    PVOID RxFlushConfirm;
    PVOID PeerCreateIndication;
    PVOID PeerDeleteIndication;
    struct _WDI_FRAME_METADATA **AllocateWiFiFrameMetaData;
    PVOID FreeWiFiFrameMetaData;
    PVOID TxQuerySuspectFrameCompleteStatus;
};

typedef struct _NDIS_WDI_INIT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG WdiVersion;
    PVOID OpenAdapterCompleteHandler;
    PVOID CloseAdapterCompleteHandler;
    PVOID UeIdleNotificationConfirm;
    PVOID UeIdleNotificationComplete;
};

typedef struct _NETIO_NET_BUFFER_CONTEXT {
    ULONG OriginalDataOffset;
    ULONG OriginalDataLength;
    ULONG TruncatedLength;
    ULONG Flags;
    ULONG EcnField : 2;
    ULONG EspTrailerSpaceAllocated : 1;
    ULONG Converted : 1;
    ULONG Restored : 1;
    ULONG EcnForceNotEct : 1;
    ULONG NdPriority : 1;
    ULONG IpsnpiForwardInjection : 1;
    ULONG IpsnpiForwardInjectionCopy : 1;
    PVOID Scratch[2];
};

typedef struct _NETIO_NET_BUFFER_LIST_CONTEXT {
    LONG ReferenceCount;
    struct _NET_BUFFER_LIST *Parent;
    PVOID CompletionRoutine;
    PVOID CompletionContext;
};

typedef struct _NET_BUFFER {
    struct _NET_BUFFER *Next;
    struct _MDL *CurrentMdl;
    ULONG CurrentMdlOffset;
    ULONG DataLength;
    ULONG64 stDataLength;
    struct _MDL *MdlChain;
    ULONG DataOffset;
    union _SLIST_HEADER Link;
    union _NET_BUFFER_HEADER NetBufferHeader;
    USHORT ChecksumBias;
    USHORT Reserved;
    PVOID NdisPoolHandle;
    PVOID NdisReserved[2];
    PVOID ProtocolReserved[6];
    PVOID MiniportReserved[4];
    union _LARGE_INTEGER DataPhysicalAddress;
    struct _NET_BUFFER_SHARED_MEMORY *SharedMemoryInfo;
    struct _SCATTER_GATHER_LIST *ScatterGatherList;
};

typedef struct _NET_BUFFER_DATA {
    struct _NET_BUFFER *Next;
    struct _MDL *CurrentMdl;
    ULONG CurrentMdlOffset;
    union _NET_BUFFER_DATA_LENGTH NbDataLength;
    struct _MDL *MdlChain;
    ULONG DataOffset;
};

typedef struct _NET_BUFFER_LIST {
    struct _NET_BUFFER_LIST *Next;
    struct _NET_BUFFER *FirstNetBuffer;
    union _SLIST_HEADER Link;
    union _NET_BUFFER_LIST_HEADER NetBufferListHeader;
    struct _NET_BUFFER_LIST_CONTEXT *Context;
    struct _NET_BUFFER_LIST *ParentNetBufferList;
    PVOID NdisPoolHandle;
    PVOID NdisReserved[2];
    PVOID ProtocolReserved[4];
    PVOID MiniportReserved[2];
    PVOID Scratch;
    PVOID SourceHandle;
    ULONG NblFlags;
    LONG ChildRefCount;
    ULONG Flags;
    LONG Status;
    ULONG NdisReserved2;
    PVOID NetBufferListInfo[26];
};

typedef struct _NET_BUFFER_LIST_CONTEXT {
    struct _NET_BUFFER_LIST_CONTEXT *Next;
    USHORT Size;
    USHORT Offset;
    UCHAR ContextData[0];
};

typedef struct _NET_BUFFER_LIST_DATA {
    struct _NET_BUFFER_LIST *Next;
    struct _NET_BUFFER *FirstNetBuffer;
};

typedef struct _NET_BUFFER_SHARED_MEMORY {
    struct _NET_BUFFER_SHARED_MEMORY *NextSharedMemorySegment;
    ULONG SharedMemoryFlags;
    PVOID SharedMemoryHandle;
    ULONG SharedMemoryOffset;
    ULONG SharedMemoryLength;
};

typedef struct _NET_DEVICE_PNP_EVENT {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    enum _NDIS_DEVICE_PNP_EVENT DevicePnPEvent;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    UCHAR NdisReserved[16];
};

typedef struct _NPAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _NPI_MODULEID {
    USHORT Length;
    enum _NPI_MODULEID_TYPE Type;
    struct _GUID Guid;
    struct _LUID IfLuid;
};

typedef struct _NPI_PROVIDER_CHARACTERISTICS {
    USHORT Version;
    USHORT Length;
    PLONG ProviderAttachClient;
    PLONG ProviderDetachClient;
    PVOID ProviderCleanupBindingContext;
    struct _NPI_REGISTRATION_INSTANCE ProviderRegistrationInstance;
};

typedef struct _NPI_REGISTRATION_INSTANCE {
    USHORT Version;
    USHORT Size;
    struct _GUID *NpiId;
    struct _NPI_MODULEID *ModuleId;
    ULONG Number;
    PVOID NpiSpecificCharacteristics;
};

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    ULONG Version;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
};

typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
};

typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ULONG GrantedAccess;
};

typedef struct _OBJECT_NAME_INFORMATION {
    struct _UNICODE_STRING Name;
};

typedef struct _OBJECT_TYPE {
    struct _LIST_ENTRY TypeList;
    struct _UNICODE_STRING Name;
    PVOID DefaultObject;
    UCHAR Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;
    struct _EX_PUSH_LOCK TypeLock;
    ULONG Key;
    struct _LIST_ENTRY CallbackList;
};

typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    USHORT ObjectTypeFlags;
    UCHAR CaseInsensitive : 1;
    UCHAR UnnamedObjectsOnly : 1;
    UCHAR UseDefaultObject : 1;
    UCHAR SecurityRequired : 1;
    UCHAR MaintainHandleCount : 1;
    UCHAR MaintainTypeList : 1;
    UCHAR SupportsObjectCallbacks : 1;
    UCHAR CacheAligned : 1;
    UCHAR UseExtendedParameters : 1;
    UCHAR Reserved : 7;
    ULONG ObjectTypeCode;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG RetainAccess;
    enum _POOL_TYPE PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    PVOID DumpProcedure;
    PLONG OpenProcedure;
    PVOID CloseProcedure;
    PVOID DeleteProcedure;
    PLONG ParseProcedure;
    PLONG SecurityProcedure;
    PLONG QueryNameProcedure;
    PUCHAR OkayToCloseProcedure;
    ULONG WaitObjectFlagMask;
    USHORT WaitObjectFlagOffset;
    USHORT WaitObjectPointerOffset;
};

typedef struct _OID_HANDLER_ENTRY {
    ULONG Oid;
    UCHAR Queryable : 1;
    UCHAR Settable : 1;
    UCHAR Method : 1;
    UCHAR QuerySerialized : 1;
    UCHAR SetMethodSerialized : 1;
    UCHAR IsPreemptable : 1;
    UCHAR CanPreempt : 1;
    UCHAR IsDirectOid : 1;
    enum _WFC_SERIALIZED_JOB_PRIORITY_SCOPE PriorityScope;
    enum _WFC_SERIALIZED_JOB_PRIORITY Priority;
    enum _WFC_JOB_TYPE QueryJobType;
    enum _WFC_JOB_TYPE SetMethodJobType;
    ULONG MinBufferSize;
    enum _WFC_PORT_TYPE AllowedPortTypes;
};

typedef struct _OWNER_ENTRY {
    ULONG64 OwnerThread;
    ULONG IoPriorityBoosted : 1;
    ULONG OwnerReferenced : 1;
    ULONG IoQoSPriorityBoosted : 1;
    ULONG OwnerCount : 29;
    ULONG TableSize;
};

typedef struct _PAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _PEB {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR IsLongPathAwareProcess : 1;
    UCHAR Padding0[4];
    PVOID Mutant;
    PVOID ImageBaseAddress;
    struct _PEB_LDR_DATA *Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    struct _RTL_CRITICAL_SECTION *FastPebLock;
    union _SLIST_HEADER *AtlThunkSListPtr;
    PVOID IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ProcessPreviouslyThrottled : 1;
    ULONG ProcessCurrentlyThrottled : 1;
    ULONG ProcessImagesHotPatched : 1;
    ULONG ReservedBits0 : 24;
    UCHAR Padding1[4];
    PVOID KernelCallbackTable;
    PVOID UserSharedInfoPtr;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
    ULONG TlsExpansionCounter;
    UCHAR Padding2[4];
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PVOID SharedData;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG64 HeapSegmentReserve;
    ULONG64 HeapSegmentCommit;
    ULONG64 HeapDeCommitTotalFreeThreshold;
    ULONG64 HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    UCHAR Padding3[4];
    struct _RTL_CRITICAL_SECTION *LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    UCHAR Padding4[4];
    ULONG64 ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[60];
    PVOID PostProcessInitRoutine;
    PVOID TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    UCHAR Padding5[4];
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    PVOID pShimData;
    PVOID AppCompatInfo;
    struct _UNICODE_STRING CSDVersion;
    struct _ACTIVATION_CONTEXT_DATA *ActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
    struct _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
    ULONG64 MinimumStackCommit;
    struct _FLS_CALLBACK_INFO *FlsCallback;
    struct _LIST_ENTRY FlsListHead;
    PVOID FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    PVOID WerRegistrationData;
    PVOID WerShipAssertPtr;
    PVOID pUnused;
    PVOID pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    UCHAR Padding6[4];
    ULONG64 CsrServerReadOnlySharedMemoryBase;
    ULONG64 TppWorkerpListLock;
    struct _LIST_ENTRY TppWorkerpList;
    PVOID WaitOnAddressHashTable[128];
    PVOID TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    struct _LEAP_SECOND_DATA *LeapSecondData;
    ULONG LeapSecondFlags;
    ULONG SixtySecondEnabled : 1;
    ULONG Reserved : 31;
    ULONG NtGlobalFlag2;
    VOID _PEB;
    VOID _PEB;
    struct _PEB *operator=;
    struct _PEB *operator=;
};

typedef struct _PEB_LDR_DATA {
    ULONG Length;
    UCHAR Initialized;
    PVOID SsHandle;
    struct _LIST_ENTRY InLoadOrderModuleList;
    struct _LIST_ENTRY InMemoryOrderModuleList;
    struct _LIST_ENTRY InInitializationOrderModuleList;
    PVOID EntryInProgress;
    UCHAR ShutdownInProgress;
    PVOID ShutdownThreadId;
};

typedef struct _PEER_ROAM_HISTORY {
    VOID Reset;
    ULONG64 RoamAttemptTime;
    ULONG RoamAttemptCount;
    UCHAR LinkQualityHistory;
};

typedef struct _PLACEMENT_NEW_ALLOCATION_CONTEXT {
    ULONG64 cbMaxSize;
    PVOID pbBuffer;
};

typedef struct _PMD {
    LONG mdisp;
    LONG pdisp;
    LONG vdisp;
};

typedef struct _PNP_BUS_INFORMATION {
    struct _GUID BusTypeGuid;
    enum _INTERFACE_TYPE LegacyBusType;
    ULONG BusNumber;
};

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
};

typedef struct _PO_FX_COMPONENT_IDLE_STATE {
    ULONG64 TransitionLatency;
    ULONG64 ResidencyRequirement;
    ULONG NominalPower;
};

typedef struct _PO_FX_COMPONENT_V1 {
    struct _GUID Id;
    ULONG IdleStateCount;
    ULONG DeepestWakeableIdleState;
    struct _PO_FX_COMPONENT_IDLE_STATE *IdleStates;
};

typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[1];
};

typedef struct _PROCESSOR_NUMBER {
    USHORT Group;
    UCHAR Number;
    UCHAR Reserved;
};

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PS_MITIGATION_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _QUAD {
    LONG64 UseThisFieldToCopy;
    DOUBLE DoNotUseThisField;
};

typedef struct _QUERY {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _RECORDER_CONFIGURE_PARAMS {
    ULONG Size;
    UCHAR CreateDefaultLog;
};

typedef struct _RECORDER_LOG_CREATE_PARAMS {
    ULONG Size;
    ULONG LogTag;
    ULONG TotalBufferSize;
    ULONG ErrorPartitionSize;
    ULONG64 LogIdentifierAppendValue;
    UCHAR LogIdentifierAppendValueSet;
    ULONG LogIdentifierSize;
    CHAR LogIdentifier[16];
};

typedef struct _RESET_PORT_REQUEST_CONTEXT {
    BOOLEAN IsResetPending;
    ULONG NdisPortNumber;
    IOperationCompletionCallback *pCompletionCallback;
};

typedef struct _ROAM_CONTROL_PARAMETERS {
    ULONG BetterAPRoamLinkQualityThreshold;
    UCHAR BetterAPRoamOnNonEnterpriseNetworks;
    ULONG BetterAPRoamReattemptCount;
    ULONG APLinkQualitySignificantChangeBar;
    ULONG BetterAPRoamReattemptTimeGapSeconds;
    ULONG BetterAPRoamReattemptFailedBlockTimeSeconds;
    UCHAR ScanCancelOnGoodAPFoundPermitted;
    ULONG FiveGHzLowBoost;
    ULONG FiveGHzBoostLinkQualityStart;
    ULONG FiveGHzBoostLinkQualityEnd;
};

typedef struct _ROAM_TRACELOGGING_DATA {
    BOOLEAN roamOccured;
    BOOLEAN taskOccured;
    BOOLEAN isNeighborReportSupported;
    BOOLEAN isAPChannelReportSupported;
    BOOLEAN isFastTransitionSupportedByNetwork;
    BOOLEAN isCancelled;
    BOOLEAN isOpen;
    BOOLEAN isDeferred;
    ULONG roamDeferCount;
    UCHAR lastScanType;
    enum _WFC_ROAM_CONNECT_TRIGGER connectTrigger;
    enum _WDI_ROAM_CONFIGURATION_FLAGS roamConfigFlags;
    enum _WDI_ASSOC_STATUS roamWabiReason;
    enum _WDI_ASSOC_STATUS associationStatusCode;
    enum _WDI_ROAM_DEBUG_CODE roamDebugCode;
    UCHAR linkQualityPreviousConnect;
    UCHAR linkQualityDuringRoam;
    UCHAR linkQualityCurrent;
    ULONG channel;
    ULONG bandID;
    ULONG roamAPRankIndex;
    ULONG curPeerRank;
    ULONG bestCandidateRank;
    ULONG assocFailureCount;
    ULONG bssCandidateCount;
    ULONG64 initialconnectJobStartTime;
    ULONG64 connectJobStartTime;
    ULONG64 connectJobEndTime;
    ULONG64 connectRoamTaskStartTime;
    ULONG64 connectRoamTaskEndTime;
    ULONG64 disassociationIndicationTime;
    ULONG64 setCipherKeysTime;
    ULONG64 timeToFinishFipsOffloadUpdateMS;
    ULONG64 timeToFinishFipsEncapsulationOffloadUpdateMS;
    ULONG64 timeToFinishPrivacyExemptionListSetMS;
    ULONG64 timeToFinishBSSListUpdateMS;
    ULONG64 timeToFinishScanJobCompletionMS;
    ULONG64 timeToFinishPMKIDUpdateMS;
};

typedef struct _RSCLIB_SERIAL_COALESCING_CONTEXT {
    ULONG64 Reserved[24];
};

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
};

typedef struct _RTL_AVL_TREE {
    struct _RTL_BALANCED_NODE *Root;
};

typedef struct _RTL_BALANCED_NODE {
    struct _RTL_BALANCED_NODE *Children[2];
    struct _RTL_BALANCED_NODE *Left;
    struct _RTL_BALANCED_NODE *Right;
    UCHAR Red : 1;
    UCHAR Balance : 2;
    ULONG64 ParentValue;
};

typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;
    PULONG Buffer;
};

typedef struct _RTL_CRITICAL_SECTION {
};

typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    struct _STRING DosPath;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE {
    ULONG Flags;
    ULONG Shift;
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;
    PVOID Directory;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
    struct _LIST_ENTRY *ChainHead;
    struct _LIST_ENTRY *PrevLinkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
    struct _LIST_ENTRY Linkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    struct _LIST_ENTRY *CurEntry;
    struct _LIST_ENTRY *ChainHead;
    ULONG BucketIndex;
};

typedef struct _RTL_RB_TREE {
    struct _RTL_BALANCED_NODE *Root;
    UCHAR Encoded : 1;
    struct _RTL_BALANCED_NODE *Min;
};

typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
};

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    PVOID ConsoleHandle;
    ULONG ConsoleFlags;
    PVOID StandardInput;
    PVOID StandardOutput;
    PVOID StandardError;
    struct _CURDIR CurrentDirectory;
    struct _UNICODE_STRING DllPath;
    struct _UNICODE_STRING ImagePathName;
    struct _UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    struct _UNICODE_STRING WindowTitle;
    struct _UNICODE_STRING DesktopInfo;
    struct _UNICODE_STRING ShellInfo;
    struct _UNICODE_STRING RuntimeData;
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
    ULONG64 EnvironmentSize;
    ULONG64 EnvironmentVersion;
    PVOID PackageDependencyData;
    ULONG ProcessGroupId;
    ULONG LoaderThreads;
    struct _UNICODE_STRING RedirectionDllName;
};

typedef struct _SCATTER_GATHER_ELEMENT {
    union _LARGE_INTEGER Address;
    ULONG Length;
    ULONG64 Reserved;
};

typedef struct _SCATTER_GATHER_LIST {
    ULONG NumberOfElements;
    ULONG64 Reserved;
    struct _SCATTER_GATHER_ELEMENT Elements[0];
};

typedef struct _SCSI_REQUEST_BLOCK {
};

typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
};

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    UCHAR ContextTrackingMode;
    UCHAR EffectiveOnly;
};

typedef struct _SECURITY_SUBJECT_CONTEXT {
    PVOID ClientToken;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PVOID PrimaryToken;
    PVOID ProcessAuditId;
};

typedef struct _SET {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[1];
};

typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
};

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
};

typedef struct _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
};

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _SYSTEM_POWER_STATE_CONTEXT {
    ULONG Reserved1 : 8;
    ULONG TargetSystemState : 4;
    ULONG EffectiveSystemState : 4;
    ULONG CurrentSystemState : 4;
    ULONG IgnoreHibernationPath : 1;
    ULONG PseudoTransition : 1;
    ULONG KernelSoftReboot : 1;
    ULONG DirectedDripsTransition : 1;
    ULONG Reserved2 : 8;
    ULONG ContextAsUlong;
};

typedef struct _TAL_TXRX_PARAMETERS {
    USHORT MaxOutstandingTransfers;
};

typedef struct _TEB {
    struct _NT_TIB NtTib;
    PVOID EnvironmentPointer;
    struct _CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    struct _PEB *ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    PVOID WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID ReservedForDebuggerInstrumentation[16];
    PVOID SystemReserved1[30];
    CHAR PlaceholderCompatibilityMode;
    UCHAR PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    LONG ExceptionCode;
    UCHAR Padding0[4];
    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer;
    ULONG64 InstrumentationCallbackSp;
    ULONG64 InstrumentationCallbackPreviousPc;
    ULONG64 InstrumentationCallbackPreviousSp;
    ULONG TxFsContext;
    UCHAR InstrumentationCallbackDisabled;
    UCHAR UnalignedLoadStoreExceptions;
    UCHAR Padding1[2];
    struct _GDI_TEB_BATCH GdiTebBatch;
    struct _CLIENT_ID RealClientId;
    PVOID GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    ULONG64 Win32ClientInfo[62];
    PVOID glDispatchTable[233];
    ULONG64 glReserved1[29];
    PVOID glReserved2;
    PVOID glSectionInfo;
    PVOID glSection;
    PVOID glTable;
    PVOID glCurrentRC;
    PVOID glContext;
    ULONG LastStatusValue;
    UCHAR Padding2[4];
    struct _UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    UCHAR Padding3[6];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    struct _LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorMode;
    UCHAR Padding4[4];
    PVOID Instrumentation[11];
    struct _GUID ActivityId;
    PVOID SubProcessTag;
    PVOID PerflibData;
    PVOID EtwTraceData;
    PVOID WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    UCHAR Padding5[4];
    PVOID ReservedForPerf;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
    UCHAR Padding6[4];
    PVOID SavedPriorityState;
    ULONG64 ReservedForCodeCoverage;
    PVOID ThreadPoolData;
    PVOID *TlsExpansionSlots;
    PVOID DeallocationBStore;
    PVOID BStoreLimit;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    PVOID NlsCache;
    PVOID pShimData;
    ULONG HeapData;
    UCHAR Padding7[4];
    PVOID CurrentTransactionHandle;
    struct _TEB_ACTIVE_FRAME *ActiveFrame;
    PVOID FlsData;
    PVOID PreferredLanguages;
    PVOID UserPrefLanguages;
    PVOID MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT LoadOwner : 1;
    USHORT LoaderWorker : 1;
    USHORT SkipLoaderInit : 1;
    USHORT SpareSameTebBits : 1;
    PVOID TxnScopeEnterCallback;
    PVOID TxnScopeExitCallback;
    PVOID TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    PVOID ResourceRetValue;
    PVOID ReservedForWdf;
    ULONG64 ReservedForCrt;
    struct _GUID EffectiveContainerId;
    VOID _TEB;
    VOID _TEB;
    struct _TEB *operator=;
    struct _TEB *operator=;
};

typedef struct _TEB_ACTIVE_FRAME {
    ULONG Flags;
    struct _TEB_ACTIVE_FRAME *Previous;
    struct _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

typedef struct _TEB_ACTIVE_FRAME_CONTEXT {
    ULONG Flags;
    PCHAR FrameName;
};

typedef struct _TEST_AGGREGATE_CONTAINER {
    struct ArrayOfElements<unsigned long> TestField;
    VOID _TEST_AGGREGATE_CONTAINER;
    VOID ~_TEST_AGGREGATE_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _TLV_CONTEXT {
    ULONG64 AllocationContext;
    ULONG PeerVersion;
};

typedef struct _TP_CALLBACK_ENVIRON_V3 {
    ULONG Version;
    struct _TP_POOL *Pool;
    struct _TP_CLEANUP_GROUP *CleanupGroup;
    PVOID CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PVOID FinalizationCallback;
     <unnamed-type-u>;
    union {
        ULONG Flags;
         <unnamed-type-s>;
        struct {
            ULONG LongFunction : 1;
            ULONG Persistent : 1;
            ULONG Private : 30;
        } s;
    } u;
    enum _TP_CALLBACK_PRIORITY CallbackPriority;
    ULONG Size;
};

typedef struct _TP_CALLBACK_INSTANCE {
};

typedef struct _TP_CLEANUP_GROUP {
};

typedef struct _TP_POOL {
};

typedef struct _TXN_PARAMETER_BLOCK {
    USHORT Length;
    USHORT TxFsContext;
    PVOID TransactionObject;
};

typedef struct _TlgProviderMetadata_t {
    UCHAR Type;
    struct _GUID ProviderId;
    USHORT RemainingSize;
};

typedef struct _TlgProvider_t {
    ULONG LevelPlus1;
    PUSHORT ProviderMetadataPtr;
    ULONG64 KeywordAny;
    ULONG64 KeywordAll;
    ULONG64 RegHandle;
    PVOID EnableCallback;
    PVOID CallbackContext;
};

typedef struct _TraceLoggingMetadata_t {
    ULONG Signature;
    USHORT Size;
    UCHAR Version;
    UCHAR Flags;
    ULONG64 Magic;
};

typedef struct _TypeDescriptor {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[0];
};

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWCHAR Buffer;
};

typedef struct _VARIABLE_LENGTH_BUFFER_UINT8 {
    USHORT dataLength;
    USHORT bufferCapacity;
    PUCHAR pBuffer;
};

typedef struct _VPB {
    SHORT Type;
    SHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[32];
};

typedef struct _VXLAN_INFO {
    USHORT VxlanUDPPortNumber;
    USHORT VxlanUDPPortNumberConfigurable : 1;
};

typedef struct _VXLAN_PARAMETERS {
    USHORT VxlanUDPPortNumber;
};

typedef struct _WAIT_CONTEXT_BLOCK {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct _LIST_ENTRY DmaWaitEntry;
    ULONG NumberOfChannels;
    ULONG SyncCallback : 1;
    ULONG DmaContext : 1;
    ULONG ZeroMapRegisters : 1;
    ULONG Reserved : 9;
    ULONG NumberOfRemapPages : 20;
    enum _IO_ALLOCATION_ACTION *DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    struct _KDPC *BufferChainingDpc;
};

typedef struct _WDFMEMORY_OFFSET {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_LIST_CONFIG {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_ITERATOR {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_RETRIEVE_INFO {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_STATE {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DMA_ENABLER_CONFIG {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DPC_CONFIG {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DRIVER_CONFIG {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_GLOBALS {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FILEOBJECT_CONFIG {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_INTERRUPT_CONFIG {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_INFO {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS {
     <unnamed-type-Policy>;
    union {
         <unnamed-type-ExaminePolicy>;
        struct {
            enum _WDF_IO_FORWARD_PROGRESS_ACTION *EvtIoWdmIrpForForwardProgress;
        } ExaminePolicy;
    } Policy;
};

typedef struct _WDF_IO_QUEUE_CONFIG {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TYPE_CONFIG {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_MEMORY_DESCRIPTOR {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_OBJECT_ATTRIBUTES {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_PARAMETERS {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_TIMER_CONFIG {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS {
};

typedef struct _WDF_WMI_INSTANCE_CONFIG {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WORKITEM_CONFIG {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDI_ACTION_FRAME_REQUEST_PARAMETERS {
    ULONG ChannelNumber;
    enum _WDI_BAND_ID BandId;
    struct _WDI_MAC_ADDRESS DestinationAddress;
    ULONG SendTimeout;
    ULONG PostACKDwellTime;
    VOID _WDI_ACTION_FRAME_REQUEST_PARAMETERS;
};

typedef struct _WDI_ADDITIONAL_IES_CONTAINER {
     _WDI_ADDITIONAL_IES_CONTAINER_Optional;
    struct _WDI_ADDITIONAL_IES_CONTAINER::_WDI_ADDITIONAL_IES_CONTAINER_Optional Optional;
    struct ArrayOfElements<unsigned char> AdditionalBeaconIEs;
    struct ArrayOfElements<unsigned char> AdditionalProbeResponseIEs;
    struct ArrayOfElements<unsigned char> AdditionalProbeRequestDefaultIEs;
    VOID _WDI_ADDITIONAL_IES_CONTAINER;
    VOID ~_WDI_ADDITIONAL_IES_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_ADDITIONAL_IES_CONTAINER::_WDI_ADDITIONAL_IES_CONTAINER_Optional {
    ULONG AdditionalBeaconIEs_IsPresent : 1;
    ULONG AdditionalProbeResponseIEs_IsPresent : 1;
    ULONG AdditionalProbeRequestDefaultIEs_IsPresent : 1;
    VOID _WDI_ADDITIONAL_IES_CONTAINER_Optional;
};

typedef struct _WDI_ADDITIONAL_IES_CONTAINER_Optional {
    ULONG AdditionalBeaconIEs_IsPresent : 1;
    ULONG AdditionalProbeResponseIEs_IsPresent : 1;
    ULONG AdditionalProbeRequestDefaultIEs_IsPresent : 1;
    VOID _WDI_ADDITIONAL_IES_CONTAINER_Optional;
};

typedef struct _WDI_ALGO_PAIRS {
    enum _WDI_AUTH_ALGORITHM AuthAlgorithm;
    enum _WDI_CIPHER_ALGORITHM CipherAlgorithm;
    VOID _WDI_ALGO_PAIRS;
};

typedef struct _WDI_AP_ASSOCIATION_REQUEST_PARAMETERS {
    struct _WDI_MAC_ADDRESS PeerMacAddress;
    UCHAR IsReassociationRequest;
    VOID _WDI_AP_ASSOCIATION_REQUEST_PARAMETERS;
};

typedef struct _WDI_AP_ASSOCIATION_RESPONSE_PARAMETERS {
    UCHAR AcceptRequest;
    USHORT ReasonCode;
    VOID _WDI_AP_ASSOCIATION_RESPONSE_PARAMETERS;
};

typedef struct _WDI_AP_ATTRIBUTES_CONTAINER {
    struct _WDI_AP_CAPABILITIES APCapabilities;
    struct ArrayOfElements<_WDI_ALGO_PAIRS> UnicastAlgorithms;
    struct ArrayOfElements<_WDI_ALGO_PAIRS> MulticastDataAlgorithms;
    VOID _WDI_AP_ATTRIBUTES_CONTAINER;
    VOID ~_WDI_AP_ATTRIBUTES_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER {
     _WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional;
    struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER::_WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional Optional;
    enum _WDI_BAND_ID BandID;
    struct ArrayOfElements<unsigned int> ChannelList;
    VOID _WDI_AP_BAND_CHANNEL_LIST_CONTAINER;
    VOID ~_WDI_AP_BAND_CHANNEL_LIST_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER::_WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional {
    ULONG ChannelList_IsPresent : 1;
    VOID _WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional;
};

typedef struct _WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional {
    ULONG ChannelList_IsPresent : 1;
    VOID _WDI_AP_BAND_CHANNEL_LIST_CONTAINER_Optional;
};

typedef struct _WDI_AP_BAND_INFORMATION_CONTAINER {
    enum _WDI_BAND_ID BandID;
    UCHAR IsPCPinPBSS;
    VOID _WDI_AP_BAND_INFORMATION_CONTAINER;
};

typedef struct _WDI_AP_CAPABILITIES {
    ULONG ScanSSIDListSize;
    ULONG DesiredSSIDListSize;
    ULONG PrivacyExemptionListSize;
    ULONG AssociationTableSize;
    ULONG KeyMappingTableSize;
    ULONG DefaultKeyTableSize;
    ULONG WEPKeyValueMaxLength;
    UCHAR RadarDetectionSupported;
    VOID _WDI_AP_CAPABILITIES;
};

typedef struct _WDI_ASSOCIATION_RESULT_CONTAINER {
     _WDI_ASSOCIATION_RESULT_CONTAINER_Optional;
    struct _WDI_ASSOCIATION_RESULT_CONTAINER::_WDI_ASSOCIATION_RESULT_CONTAINER_Optional Optional;
    struct _WDI_MAC_ADDRESS BSSID;
    struct _WDI_ASSOCIATION_RESULT_PARAMETERS AssociationResultParameters;
    struct ArrayOfElements<unsigned char> AssociationRequestFrame;
    struct ArrayOfElements<unsigned char> AssociationResponseFrame;
    struct ArrayOfElements<unsigned char> AuthenticationResponseFrame;
    struct ArrayOfElements<unsigned char> BeaconProbeResponse;
    struct ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY> EthertypeEncapTable;
    struct ArrayOfElements<enum _WDI_PHY_TYPE> ActivePhyTypeList;
    VOID _WDI_ASSOCIATION_RESULT_CONTAINER;
    VOID ~_WDI_ASSOCIATION_RESULT_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_ASSOCIATION_RESULT_CONTAINER::_WDI_ASSOCIATION_RESULT_CONTAINER_Optional {
    ULONG AssociationRequestFrame_IsPresent : 1;
    ULONG AssociationResponseFrame_IsPresent : 1;
    ULONG AuthenticationResponseFrame_IsPresent : 1;
    ULONG BeaconProbeResponse_IsPresent : 1;
    ULONG EthertypeEncapTable_IsPresent : 1;
    VOID _WDI_ASSOCIATION_RESULT_CONTAINER_Optional;
};

typedef struct _WDI_ASSOCIATION_RESULT_CONTAINER_Optional {
    ULONG AssociationRequestFrame_IsPresent : 1;
    ULONG AssociationResponseFrame_IsPresent : 1;
    ULONG AuthenticationResponseFrame_IsPresent : 1;
    ULONG BeaconProbeResponse_IsPresent : 1;
    ULONG EthertypeEncapTable_IsPresent : 1;
    VOID _WDI_ASSOCIATION_RESULT_CONTAINER_Optional;
};

typedef struct _WDI_ASSOCIATION_RESULT_PARAMETERS {
    enum _WDI_ASSOC_STATUS AssociationStatus;
    ULONG StatusCode;
    UCHAR ReAssociation;
    enum _WDI_AUTH_ALGORITHM AuthAlgorithm;
    enum _WDI_CIPHER_ALGORITHM UnicastCipherAlgorithm;
    enum _WDI_CIPHER_ALGORITHM MulticastDataCipherAlgorithm;
    enum _WDI_CIPHER_ALGORITHM MulticastMgmtCipherAlgorithm;
    UCHAR FourAddressSupported;
    UCHAR PortAuthorized;
    UCHAR WMMQoSEnabled;
    enum _WDI_DS_INFO DSInfo;
    ULONG AssociationComebackTime;
    enum _WDI_BAND_ID BandID;
    ULONG IHVAssociationStatus;
    VOID _WDI_ASSOCIATION_RESULT_PARAMETERS;
};

typedef struct _WDI_ASSOC_RESULT_PARAMETERS {
    struct _WDI_MAC_ADDRESS PeerMACAddress;
    UCHAR IsReassociationRequest;
    UCHAR IsReAssociationResponse;
    enum _WDI_AUTH_ALGORITHM AuthAlgorithm;
    enum _WDI_CIPHER_ALGORITHM UnicastCipherAlgorithm;
    enum _WDI_CIPHER_ALGORITHM MulticastCipherAlgorithm;
    VOID _WDI_ASSOC_RESULT_PARAMETERS;
};

typedef struct _WDI_BAND_CAPABILITIES {
    enum _WDI_BAND_ID BandID;
    UCHAR BandState;
    VOID _WDI_BAND_CAPABILITIES;
};

typedef struct _WDI_BAND_CHANNEL_LIST_CONTAINER {
    enum _WDI_BAND_ID BandID;
    struct ArrayOfElements<unsigned int> ChannelList;
    VOID _WDI_BAND_CHANNEL_LIST_CONTAINER;
    VOID ~_WDI_BAND_CHANNEL_LIST_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_BAND_INFO_CONTAINER {
    struct _WDI_BAND_CAPABILITIES BandCapabilities;
    struct ArrayOfElements<enum _WDI_PHY_TYPE> ValidPhyTypes;
    struct ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY> ValidChannelTypes;
    struct ArrayOfElements<unsigned int> ChannelWidthList;
    VOID _WDI_BAND_INFO_CONTAINER;
    VOID ~_WDI_BAND_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_BSSID_INFO_STRUCT {
    UCHAR APReachability;
    UCHAR Security;
    UCHAR KeyScope;
    UCHAR SpectrumManagement;
    UCHAR QoS;
    UCHAR APSD;
    UCHAR RadioMeasurement;
    UCHAR DelayedBlockAck;
    UCHAR ImmediateBlockAck;
    UCHAR MobilityDomain;
    UCHAR HighThroughput;
    VOID _WDI_BSSID_INFO_STRUCT;
};

typedef struct _WDI_BSS_ENTRY_AGE_INFO {
    ULONG64 HostTimeStamp;
    UCHAR CachedInformation;
    VOID _WDI_BSS_ENTRY_AGE_INFO;
};

typedef struct _WDI_BSS_ENTRY_CHANNEL_INFO {
    ULONG ChannelNumber;
    enum _WDI_BAND_ID BandId;
    VOID _WDI_BSS_ENTRY_CHANNEL_INFO;
};

typedef struct _WDI_BSS_ENTRY_CONTAINER {
     _WDI_BSS_ENTRY_CONTAINER_Optional;
    struct _WDI_BSS_ENTRY_CONTAINER::_WDI_BSS_ENTRY_CONTAINER_Optional Optional;
    struct _WDI_MAC_ADDRESS BSSID;
    struct ArrayOfElements<unsigned char> ProbeResponseFrame;
    struct ArrayOfElements<unsigned char> BeaconFrame;
    struct _WDI_SIGNAL_INFO SignalInfo;
    struct _WDI_BSS_ENTRY_CHANNEL_INFO ChannelInfo;
    struct ArrayOfElements<unsigned char> DeviceSpecificContext;
    struct _WDI_BSS_ENTRY_AGE_INFO EntryAgeInfo;
    struct ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER> P2PDiscoveredServiceEntry;
    VOID _WDI_BSS_ENTRY_CONTAINER;
    VOID ~_WDI_BSS_ENTRY_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_BSS_ENTRY_CONTAINER::_WDI_BSS_ENTRY_CONTAINER_Optional {
    ULONG ProbeResponseFrame_IsPresent : 1;
    ULONG BeaconFrame_IsPresent : 1;
    ULONG DeviceSpecificContext_IsPresent : 1;
    ULONG EntryAgeInfo_IsPresent : 1;
    ULONG P2PDiscoveredServiceEntry_IsPresent : 1;
    VOID _WDI_BSS_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_BSS_ENTRY_CONTAINER_Optional {
    ULONG ProbeResponseFrame_IsPresent : 1;
    ULONG BeaconFrame_IsPresent : 1;
    ULONG DeviceSpecificContext_IsPresent : 1;
    ULONG EntryAgeInfo_IsPresent : 1;
    ULONG P2PDiscoveredServiceEntry_IsPresent : 1;
    VOID _WDI_BSS_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_BSS_SELECTION_PARAMETERS_CONTAINER {
    ULONG SelectionFlags;
    VOID _WDI_BSS_SELECTION_PARAMETERS_CONTAINER;
};

typedef struct _WDI_BYTE16 {
    UCHAR Byte[16];
};

typedef struct _WDI_BYTE4 {
    UCHAR Byte[4];
};

typedef struct _WDI_CANCEL_PARAMETERS_STRUCT {
    ULONG OriginalTaskOID;
    ULONG OriginalTransactionId;
    USHORT OriginalPortId;
    VOID _WDI_CANCEL_PARAMETERS_STRUCT;
};

typedef struct _WDI_CHANNEL_MAPPING_ENTRY {
    ULONG ChannelNumber;
    ULONG ChannelCenterFrequency;
};

typedef struct _WDI_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER {
    struct _WDI_IPV4_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER ipv4ChecksumOffload;
    struct _WDI_IPV6_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER ipv6ChecksumOffload;
    VOID _WDI_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER;
};

typedef struct _WDI_CHECKSUM_OFFLOAD_V4_PARAMETERS {
    ULONG Encapsulation;
    ULONG IpOptionsSupported;
    ULONG TcpOptionsSupported;
    ULONG TcpChecksum;
    ULONG UdpChecksum;
    ULONG IpChecksum;
    VOID _WDI_CHECKSUM_OFFLOAD_V4_PARAMETERS;
};

typedef struct _WDI_CHECKSUM_OFFLOAD_V6_PARAMETERS {
    ULONG Encapsulation;
    ULONG IpExtensionHeadersSupported;
    ULONG TcpOptionsSupported;
    ULONG TcpChecksum;
    ULONG UdpChecksum;
    VOID _WDI_CHECKSUM_OFFLOAD_V6_PARAMETERS;
};

typedef struct _WDI_CIPHER_KEY_ID_STRUCT {
    ULONG CipherKeyID;
    VOID _WDI_CIPHER_KEY_ID_STRUCT;
};

typedef struct _WDI_CIPHER_KEY_TKIP_INFO_CONTAINER {
    struct ArrayOfElements<unsigned char> TKIPKey;
    struct ArrayOfElements<unsigned char> TKIPMIC;
    VOID _WDI_CIPHER_KEY_TKIP_INFO_CONTAINER;
    VOID ~_WDI_CIPHER_KEY_TKIP_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_CIPHER_KEY_TYPE_STRUCT {
    enum _WDI_CIPHER_ALGORITHM CipherAlgorithm;
    enum _WDI_CIPHER_KEY_DIRECTION Direction;
    UCHAR Static;
    enum _WDI_CIPHER_KEY_TYPE KeyType;
    VOID _WDI_CIPHER_KEY_TYPE_STRUCT;
};

typedef struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER {
     _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional;
    struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER::_WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional Optional;
    struct _WDI_COMMUNICATION_CAPABILITIES CommunicationCapabilities;
    VOID _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER;
};

typedef struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER::_WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional {
    ULONG CommunicationCapabilities_IsPresent : 1;
    VOID _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional {
    ULONG CommunicationCapabilities_IsPresent : 1;
    VOID _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_COMMUNICATION_CAPABILITIES {
    ULONG MaxCommandSize;
    VOID _WDI_COMMUNICATION_CAPABILITIES;
};

typedef struct _WDI_CONNECTION_SETTINGS {
    UCHAR RoamRequest;
    UCHAR HiddenNetwork;
    UCHAR ExcludeUnencrypted;
    UCHAR MFPEnabled;
    UCHAR HostFIPSModeEnabled;
    ULONG RoamNeededReason;
    enum _WDI_ROAM_TRIGGER RoamTrigger;
    UCHAR BSSTransitionSupported;
    VOID _WDI_CONNECTION_SETTINGS;
};

typedef struct _WDI_CONNECTION_SETTINGSV1_0 {
    UCHAR RoamRequest;
    UCHAR HiddenNetwork;
    UCHAR ExcludeUnencrypted;
    UCHAR MFPEnabled;
    UCHAR HostFIPSModeEnabled;
    ULONG RoamNeededReason;
    enum _WDI_ROAM_TRIGGER RoamTrigger;
    VOID _WDI_CONNECTION_SETTINGSV1_0;
};

typedef struct _WDI_CONNECT_BSS_ENTRY_CONTAINER {
     _WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional;
    struct _WDI_CONNECT_BSS_ENTRY_CONTAINER::_WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional Optional;
    struct _WDI_MAC_ADDRESS BSSID;
    struct ArrayOfElements<unsigned char> ProbeResponseFrame;
    struct ArrayOfElements<unsigned char> BeaconFrame;
    struct _WDI_SIGNAL_INFO SignalInfo;
    struct _WDI_BSS_ENTRY_CHANNEL_INFO ChannelInfo;
    struct ArrayOfElements<unsigned char> DeviceSpecificContext;
    struct ArrayOfElements<unsigned char> PMKID;
    struct ArrayOfElements<unsigned char> AssociationRequestVendorIE;
    struct _WDI_FT_INITIAL_ASSOC_PARAMETERS_CONTAINER FTInitialAssocParameters;
    struct _WDI_FT_REASSOC_PARAMETERS_CONTAINER FTReAssocParameters;
    struct _WDI_BSS_SELECTION_PARAMETERS_CONTAINER BSSSelectionParameters;
    VOID _WDI_CONNECT_BSS_ENTRY_CONTAINER;
    VOID ~_WDI_CONNECT_BSS_ENTRY_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_CONNECT_BSS_ENTRY_CONTAINER::_WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional {
    ULONG ProbeResponseFrame_IsPresent : 1;
    ULONG BeaconFrame_IsPresent : 1;
    ULONG DeviceSpecificContext_IsPresent : 1;
    ULONG PMKID_IsPresent : 1;
    ULONG AssociationRequestVendorIE_IsPresent : 1;
    ULONG FTInitialAssocParameters_IsPresent : 1;
    ULONG FTReAssocParameters_IsPresent : 1;
    ULONG BSSSelectionParameters_IsPresent : 1;
    VOID _WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional {
    ULONG ProbeResponseFrame_IsPresent : 1;
    ULONG BeaconFrame_IsPresent : 1;
    ULONG DeviceSpecificContext_IsPresent : 1;
    ULONG PMKID_IsPresent : 1;
    ULONG AssociationRequestVendorIE_IsPresent : 1;
    ULONG FTInitialAssocParameters_IsPresent : 1;
    ULONG FTReAssocParameters_IsPresent : 1;
    ULONG BSSSelectionParameters_IsPresent : 1;
    VOID _WDI_CONNECT_BSS_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_CONNECT_PARAMETERS_CONTAINER {
     _WDI_CONNECT_PARAMETERS_CONTAINER_Optional;
    struct _WDI_CONNECT_PARAMETERS_CONTAINER::_WDI_CONNECT_PARAMETERS_CONTAINER_Optional Optional;
    struct _WDI_CONNECTION_SETTINGS ConnectionSettings;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > SSIDList;
    struct _WDI_HESSID_INFO_CONTAINER HESSIDInfo;
    struct ArrayOfElements<enum _WDI_AUTH_ALGORITHM> AuthenticationAlgorithms;
    struct ArrayOfElements<enum _WDI_CIPHER_ALGORITHM> MulticastCipherAlgorithms;
    struct ArrayOfElements<enum _WDI_CIPHER_ALGORITHM> UnicastCipherAlgorithms;
    struct ArrayOfElements<unsigned char> AssociationRequestVendorIE;
    struct ArrayOfElements<enum _WDI_PHY_TYPE> ActivePhyTypeList;
    struct ArrayOfElements<_WDI_MAC_ADDRESS> DisallowedBSSIDs;
    struct ArrayOfElements<_WDI_MAC_ADDRESS> AllowedBSSIDs;
    VOID _WDI_CONNECT_PARAMETERS_CONTAINER;
    VOID ~_WDI_CONNECT_PARAMETERS_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_CONNECT_PARAMETERS_CONTAINER::_WDI_CONNECT_PARAMETERS_CONTAINER_Optional {
    ULONG HESSIDInfo_IsPresent : 1;
    ULONG AssociationRequestVendorIE_IsPresent : 1;
    ULONG ActivePhyTypeList_IsPresent : 1;
    ULONG DisallowedBSSIDs_IsPresent : 1;
    ULONG AllowedBSSIDs_IsPresent : 1;
    VOID _WDI_CONNECT_PARAMETERS_CONTAINER_Optional;
};

typedef struct _WDI_CONNECT_PARAMETERS_CONTAINER_Optional {
    ULONG HESSIDInfo_IsPresent : 1;
    ULONG AssociationRequestVendorIE_IsPresent : 1;
    ULONG ActivePhyTypeList_IsPresent : 1;
    ULONG DisallowedBSSIDs_IsPresent : 1;
    ULONG AllowedBSSIDs_IsPresent : 1;
    VOID _WDI_CONNECT_PARAMETERS_CONTAINER_Optional;
};

typedef struct _WDI_COUNTRY_REGION_LIST {
    UCHAR CountryOrRegionString[3];
    VOID _WDI_COUNTRY_REGION_LIST;
};

typedef struct _WDI_CREATE_PORT_COMPLETE_STRUCT {
    struct _WDI_MAC_ADDRESS MacAddress;
    USHORT PortNumber;
    VOID _WDI_CREATE_PORT_COMPLETE_STRUCT;
};

typedef struct _WDI_CREATE_PORT_PARAMETERS {
    USHORT OpModeMask;
    ULONG NdisPortNumber;
    VOID _WDI_CREATE_PORT_PARAMETERS;
};

typedef struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER {
     _WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional;
    struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER::_WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional Optional;
    struct _WDI_DATAPATH_CAPABILITIES DataPathCapabilities;
    VOID _WDI_DATAPATH_ATTRIBUTES_CONTAINER;
};

typedef struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER::_WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional {
    ULONG DataPathCapabilities_IsPresent : 1;
    VOID _WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional {
    ULONG DataPathCapabilities_IsPresent : 1;
    VOID _WDI_DATAPATH_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_DATAPATH_CAPABILITIES {
    ULONG InterconnectType;
    UCHAR MaxNumPeers;
    UCHAR TxTargetPriorityQueueing;
    USHORT TxMaxScatterGatherElementsPerFrame;
    UCHAR TxExplicitSendCompleteFlagRequired;
    USHORT TxMinEffectiveFrameSize;
    USHORT TxFrameSizeGranularity;
    UCHAR RxTxForwarding;
    ULONG RxMaxThroughput;
    VOID _WDI_DATAPATH_CAPABILITIES;
};

typedef struct _WDI_DATA_RATE_LIST {
    UCHAR DataRateFlag;
    USHORT DataRateValue;
    VOID _WDI_DATA_RATE_LIST;
};

typedef struct _WDI_DELETE_PORT_PARAMETERS {
    USHORT PortNumber;
    VOID _WDI_DELETE_PORT_PARAMETERS;
};

typedef struct _WDI_DEVICE_SERVICE_COMMAND_INPUTS {
     _WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional;
    struct _WDI_DEVICE_SERVICE_COMMAND_INPUTS::_WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional Optional;
    struct _WDI_GUID DeviceServiceGUID;
    ULONG Opcode;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > Params;
    VOID _WDI_DEVICE_SERVICE_COMMAND_INPUTS;
    VOID ~_WDI_DEVICE_SERVICE_COMMAND_INPUTS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_DEVICE_SERVICE_COMMAND_INPUTS::_WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional {
    ULONG Params_IsPresent : 1;
    VOID _WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional;
};

typedef struct _WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional {
    ULONG Params_IsPresent : 1;
    VOID _WDI_DEVICE_SERVICE_COMMAND_INPUTS_Optional;
};

typedef struct _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS {
     _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional;
    struct _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS::_WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional Optional;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > Params;
    VOID _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS;
    VOID ~_WDI_DEVICE_SERVICE_COMMAND_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS::_WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional {
    ULONG Params_IsPresent : 1;
    VOID _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional;
};

typedef struct _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional {
    ULONG Params_IsPresent : 1;
    VOID _WDI_DEVICE_SERVICE_COMMAND_PARAMETERS_Optional;
};

typedef struct _WDI_DISCONNECT_INDICATION_PARAMETERS {
    struct _WDI_MAC_ADDRESS MacAddress;
    enum _WDI_ASSOC_STATUS DisassociationWABIReason;
    VOID _WDI_DISCONNECT_INDICATION_PARAMETERS;
};

typedef struct _WDI_DISCONNECT_PARAMETERS {
    struct _WDI_MAC_ADDRESS MacAddress;
    USHORT Disassociation80211Reason;
    VOID _WDI_DISCONNECT_PARAMETERS;
};

typedef struct _WDI_DOT11_RESET_PARAMETERS {
    UCHAR SetDefaultMIB;
    VOID _WDI_DOT11_RESET_PARAMETERS;
};

typedef struct _WDI_ETHERTYPE_ENCAPSULATION_ENTRY {
    USHORT EtherType;
    USHORT EncapsulationType;
};

typedef struct _WDI_FRAME_METADATA {
    struct _LIST_ENTRY Linkage;
    struct _NET_BUFFER_LIST *pNBL;
    USHORT FrameID;
    USHORT wPad;
    ULONG dPad;
     <unnamed-type-u>;
    union {
        struct _WDI_TX_METADATA txMetaData;
        struct _WDI_RX_METADATA rxMetaData;
    } u;
};

typedef struct _WDI_FT_INITIAL_ASSOC_PARAMETERS_CONTAINER {
    struct ArrayOfElements<unsigned char> MDE;
    VOID _WDI_FT_INITIAL_ASSOC_PARAMETERS_CONTAINER;
    VOID ~_WDI_FT_INITIAL_ASSOC_PARAMETERS_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_FT_REASSOC_PARAMETERS_CONTAINER {
    struct ArrayOfElements<unsigned char> MDE;
    struct ArrayOfElements<unsigned char> FTE;
    struct _WDI_PMK_NAME_STRUCT PMKR0Name;
    VOID _WDI_FT_REASSOC_PARAMETERS_CONTAINER;
    VOID ~_WDI_FT_REASSOC_PARAMETERS_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS {
     _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional;
    struct _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS::_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional Optional;
    struct _WDI_COMMUNICATION_ATTRIBUTES_CONTAINER CommunicationAttributes;
    struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER InterfaceAttributes;
    struct _WDI_STATION_ATTRIBUTES_CONTAINER StationAttributes;
    struct _WDI_AP_ATTRIBUTES_CONTAINER APAttributes;
    struct _WDI_VIRTUALIZATION_ATTRIBUTES_CONTAINER VirtualizationAttributes;
    struct _WDI_P2P_ATTRIBUTES_CONTAINER P2PAttributes;
    struct _WDI_DATAPATH_ATTRIBUTES_CONTAINER DatapathAttributes;
    struct ArrayOfElements<_WDI_BAND_INFO_CONTAINER> BandInfo;
    struct ArrayOfElements<_WDI_PHY_INFO_CONTAINER> PhyInfo;
    struct _WDI_PM_CAPABILITIES PmCapabilities;
    struct ArrayOfElements<_WDI_COUNTRY_REGION_LIST> CountryRegionList;
    struct _WDI_RECEIVE_COALESCING_CAPABILITIES ReceiveCoalescingCapabilities;
    struct _WDI_TCP_OFFLOAD_CAPABILITIES_CONTAINER TcpOffloadCapabilities;
    struct ArrayOfElements<_NDIS_GUID> SupportedGuids;
    struct _WDI_OS_POWER_MANAGEMENT_FEATURES OsPowerMgmtFeatures;
    VOID _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS;
    VOID ~_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS::_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional {
    ULONG CommunicationAttributes_IsPresent : 1;
    ULONG APAttributes_IsPresent : 1;
    ULONG VirtualizationAttributes_IsPresent : 1;
    ULONG P2PAttributes_IsPresent : 1;
    ULONG DatapathAttributes_IsPresent : 1;
    ULONG BandInfo_IsPresent : 1;
    ULONG PhyInfo_IsPresent : 1;
    ULONG PmCapabilities_IsPresent : 1;
    ULONG CountryRegionList_IsPresent : 1;
    ULONG ReceiveCoalescingCapabilities_IsPresent : 1;
    ULONG TcpOffloadCapabilities_IsPresent : 1;
    ULONG SupportedGuids_IsPresent : 1;
    ULONG OsPowerMgmtFeatures_IsPresent : 1;
    VOID _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional;
};

typedef struct _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional {
    ULONG CommunicationAttributes_IsPresent : 1;
    ULONG APAttributes_IsPresent : 1;
    ULONG VirtualizationAttributes_IsPresent : 1;
    ULONG P2PAttributes_IsPresent : 1;
    ULONG DatapathAttributes_IsPresent : 1;
    ULONG BandInfo_IsPresent : 1;
    ULONG PhyInfo_IsPresent : 1;
    ULONG PmCapabilities_IsPresent : 1;
    ULONG CountryRegionList_IsPresent : 1;
    ULONG ReceiveCoalescingCapabilities_IsPresent : 1;
    ULONG TcpOffloadCapabilities_IsPresent : 1;
    ULONG SupportedGuids_IsPresent : 1;
    ULONG OsPowerMgmtFeatures_IsPresent : 1;
    VOID _WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS_Optional;
};

typedef struct _WDI_GET_AUTO_POWER_SAVE_RESULTS {
    struct _WDI_GET_AUTO_POWER_SAVE_STRUCT AutoPowerSaveParameters;
    VOID _WDI_GET_AUTO_POWER_SAVE_RESULTS;
};

typedef struct _WDI_GET_AUTO_POWER_SAVE_STRUCT {
    UCHAR EnableAutoPSM;
    UCHAR bReserved;
    USHORT wReserved;
    USHORT BeaconInterval;
    UCHAR ListenInterval;
    UCHAR ListenIntervalInDx;
    enum _WDI_POWER_SAVE_LEVEL PowerMode;
    enum _WDI_POWER_SAVE_LEVEL PowerModeinDx;
    enum _WDI_POWER_MODE_REASON_CODE Reason;
    ULONG64 MillisecondsSinceStart;
    ULONG64 MillisecondsInPowerSave;
    ULONG64 ReceivedMulticastPackets;
    ULONG64 SentMulticastPackets;
    ULONG64 ReceivedUnicastPackets;
    ULONG64 SentUnicastPacket;
    VOID _WDI_GET_AUTO_POWER_SAVE_STRUCT;
};

typedef struct _WDI_GET_BSS_ENTRY_LIST_UPDATE_PARAMETERS {
    struct ArrayOfElements<unsigned char> SSID;
    VOID _WDI_GET_BSS_ENTRY_LIST_UPDATE_PARAMETERS;
    VOID ~_WDI_GET_BSS_ENTRY_LIST_UPDATE_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_GET_NEXT_ACTION_FRAME_DIALOG_TOKEN_PARAMETERS {
    UCHAR NextDialogToken;
    VOID _WDI_GET_NEXT_ACTION_FRAME_DIALOG_TOKEN_PARAMETERS;
};

typedef struct _WDI_GET_PM_PROTOCOL_OFFLOAD_PARAMETERS {
    ULONG GetPMOffload;
    VOID _WDI_GET_PM_PROTOCOL_OFFLOAD_PARAMETERS;
};

typedef struct _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS {
     _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional;
    struct _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS::_WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional Optional;
    struct _WDI_PM_PROTOCOL_OFFLOAD_IPv4ARP_STRUCT ipv4ARPOffload;
    struct _WDI_PM_PROTOCOL_OFFLOAD_IPv6_STRUCT ipv6ARPOffload;
    struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER DOT11RSNREKeyOffload;
    VOID _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS;
    VOID ~_WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS::_WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional {
    ULONG ipv4ARPOffload_IsPresent : 1;
    ULONG ipv6ARPOffload_IsPresent : 1;
    ULONG DOT11RSNREKeyOffload_IsPresent : 1;
    VOID _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional;
};

typedef struct _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional {
    ULONG ipv4ARPOffload_IsPresent : 1;
    ULONG ipv6ARPOffload_IsPresent : 1;
    ULONG DOT11RSNREKeyOffload_IsPresent : 1;
    VOID _WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_Optional;
};

typedef struct _WDI_GET_RECEIVE_COALESCING_MATCH_COUNT_PARAMETERS {
    ULONG64 MatchCount;
    VOID _WDI_GET_RECEIVE_COALESCING_MATCH_COUNT_PARAMETERS;
};

typedef struct _WDI_GET_STATISTICS_PARAMETERS {
    struct ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS> PeerMACStatistics;
    struct ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS> PhyStatistics;
    VOID _WDI_GET_STATISTICS_PARAMETERS;
    VOID ~_WDI_GET_STATISTICS_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_GET_SUPPORTED_DEVICE_SERVICES_PARAMETERS {
    struct ArrayOfElements<_GUID> DeviceServiceGUIDList;
    VOID _WDI_GET_SUPPORTED_DEVICE_SERVICES_PARAMETERS;
    VOID ~_WDI_GET_SUPPORTED_DEVICE_SERVICES_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_GLOBAL_TRIAGE_BLOCK {
    ULONG Signature;
    USHORT Revision;
    USHORT Size;
    USHORT ActiveSerializedJobOffset;
    USHORT ActiveSerializedJobSize;
    USHORT ActiveDeviceCommandOffset;
    USHORT ActiveDeviceCommandSize;
    USHORT CAdapterSize;
    USHORT PortListOffset;
    USHORT MaxNumPorts;
    USHORT CPortSize;
    USHORT TxEntryTableCountOffset;
    USHORT TxEntryTableCountSize;
    USHORT TxEntryTablePointerOffset;
    USHORT TxEntryTableElementSize;
};

typedef struct _WDI_GUID {
    struct _GUID Guid;
    VOID _WDI_GUID;
};

typedef struct _WDI_HESSID_INFO_CONTAINER {
    UCHAR AccessNetworkType;
    struct ArrayOfElements<_WDI_MAC_ADDRESS> HESSIDList;
    struct ArrayOfElements<unsigned char> HSIndicationElement;
    VOID _WDI_HESSID_INFO_CONTAINER;
    VOID ~_WDI_HESSID_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_IHV_REQUEST_PARAMETERS {
     _WDI_IHV_REQUEST_PARAMETERS_Optional;
    struct _WDI_IHV_REQUEST_PARAMETERS::_WDI_IHV_REQUEST_PARAMETERS_Optional Optional;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > IHVData;
    VOID _WDI_IHV_REQUEST_PARAMETERS;
    VOID ~_WDI_IHV_REQUEST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_IHV_REQUEST_PARAMETERS::_WDI_IHV_REQUEST_PARAMETERS_Optional {
    ULONG IHVData_IsPresent : 1;
    VOID _WDI_IHV_REQUEST_PARAMETERS_Optional;
};

typedef struct _WDI_IHV_REQUEST_PARAMETERS_Optional {
    ULONG IHVData_IsPresent : 1;
    VOID _WDI_IHV_REQUEST_PARAMETERS_Optional;
};

typedef struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER {
     _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional;
    struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER::_WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional Optional;
    struct _WDI_AP_ASSOCIATION_REQUEST_PARAMETERS AssocRequestParams;
    struct ArrayOfElements<unsigned char> AssocRequestFrame;
    struct ArrayOfElements<unsigned char> AssocRequestDeviceContext;
    VOID _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER;
    VOID ~_WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER::_WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional {
    ULONG AssocRequestDeviceContext_IsPresent : 1;
    VOID _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional {
    ULONG AssocRequestDeviceContext_IsPresent : 1;
    VOID _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO {
     _WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional;
    struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO::_WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional Optional;
    struct _WDI_P2P_INCOMING_ACTION_FRAME_PARAMETERS FrameParams;
    struct ArrayOfElements<unsigned char> FrameIEs;
    struct ArrayOfElements<unsigned char> DeviceContext;
    VOID _WDI_INCOMING_P2P_ACTION_FRAME_INFO;
    VOID ~_WDI_INCOMING_P2P_ACTION_FRAME_INFO;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO::_WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional {
    ULONG DeviceContext_IsPresent : 1;
    VOID _WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional;
};

typedef struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional {
    ULONG DeviceContext_IsPresent : 1;
    VOID _WDI_INCOMING_P2P_ACTION_FRAME_INFO_Optional;
};

typedef struct _WDI_INDICATION_ACTION_FRAME_RECEIVED_PARAMETERS {
    struct _WDI_MAC_ADDRESS SourceAddress;
    struct _WDI_BSS_ENTRY_CHANNEL_INFO ChannelInfo;
    struct ArrayOfElements<unsigned char> ActionFrameBody;
    VOID _WDI_INDICATION_ACTION_FRAME_RECEIVED_PARAMETERS;
    VOID ~_WDI_INDICATION_ACTION_FRAME_RECEIVED_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_AP_ASSOCIATION_REQUEST_PARAMETERS {
    struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER IncomingRequestInfo;
    VOID _WDI_INDICATION_AP_ASSOCIATION_REQUEST_PARAMETERS;
    VOID ~_WDI_INDICATION_AP_ASSOCIATION_REQUEST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS {
     _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional;
    struct _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS::_WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional Optional;
    struct ArrayOfElements<unsigned short> AssociationParameterTypes;
    struct ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER> BSSEntryList;
    VOID _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS;
    VOID ~_WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS::_WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional {
    ULONG BSSEntryList_IsPresent : 1;
    VOID _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional {
    ULONG BSSEntryList_IsPresent : 1;
    VOID _WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_ASSOCIATION_RESULT_LIST {
    struct ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER> AssociationResults;
    VOID _WDI_INDICATION_ASSOCIATION_RESULT_LIST;
    VOID ~_WDI_INDICATION_ASSOCIATION_RESULT_LIST;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS {
     _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional;
    struct _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS::_WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional Optional;
    struct ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER> DeviceDescriptor;
    VOID _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS;
    VOID ~_WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS::_WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional {
    ULONG DeviceDescriptor_IsPresent : 1;
    VOID _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional {
    ULONG DeviceDescriptor_IsPresent : 1;
    VOID _WDI_INDICATION_BSS_ENTRY_LIST_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_CAN_SUSTAIN_AP_PARAMETERS {
    ULONG Reason;
    VOID _WDI_INDICATION_CAN_SUSTAIN_AP_PARAMETERS;
};

typedef struct _WDI_INDICATION_CIPHER_KEY_UPDATED_PARAMETERS {
    struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER DOT11RSNREKeyOffload;
    VOID _WDI_INDICATION_CIPHER_KEY_UPDATED_PARAMETERS;
    VOID ~_WDI_INDICATION_CIPHER_KEY_UPDATED_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_CREATE_PORT_COMPLETE_PARAMETERS {
    struct _WDI_CREATE_PORT_COMPLETE_STRUCT PortAttributes;
    VOID _WDI_INDICATION_CREATE_PORT_COMPLETE_PARAMETERS;
};

typedef struct _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS {
     _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional;
    struct _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS::_WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional Optional;
    struct _WDI_GUID DeviceServiceGUID;
    ULONG Opcode;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > Params;
    VOID _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS;
    VOID ~_WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS::_WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional {
    ULONG Params_IsPresent : 1;
    VOID _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional {
    ULONG Params_IsPresent : 1;
    VOID _WDI_INDICATION_DEVICE_SERVICE_EVENT_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_DISASSOCIATION_PARAMETERS {
     _WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional;
    struct _WDI_INDICATION_DISASSOCIATION_PARAMETERS::_WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional Optional;
    struct _WDI_DISCONNECT_INDICATION_PARAMETERS DisconnectIndicationParameters;
    struct ArrayOfElements<unsigned char> DeauthFrame;
    struct ArrayOfElements<unsigned char> DisassociationFrame;
    UCHAR NeedPeerStateCleanup;
    VOID _WDI_INDICATION_DISASSOCIATION_PARAMETERS;
    VOID ~_WDI_INDICATION_DISASSOCIATION_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_DISASSOCIATION_PARAMETERS::_WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional {
    ULONG DeauthFrame_IsPresent : 1;
    ULONG DisassociationFrame_IsPresent : 1;
    ULONG NeedPeerStateCleanup_IsPresent : 1;
    VOID _WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional {
    ULONG DeauthFrame_IsPresent : 1;
    ULONG DisassociationFrame_IsPresent : 1;
    ULONG NeedPeerStateCleanup_IsPresent : 1;
    VOID _WDI_INDICATION_DISASSOCIATION_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_FT_ASSOC_PARAMS_NEEDED_PARAMETERS {
    struct _WDI_MAC_ADDRESS BssId;
    struct ArrayOfElements<unsigned char> AuthRequest;
    struct ArrayOfElements<unsigned char> AuthResponse;
    VOID _WDI_INDICATION_FT_ASSOC_PARAMS_NEEDED_PARAMETERS;
    VOID ~_WDI_INDICATION_FT_ASSOC_PARAMS_NEEDED_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_IHV_EVENT_PARAMETERS {
     _WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional;
    struct _WDI_INDICATION_IHV_EVENT_PARAMETERS::_WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional Optional;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > IHVData;
    VOID _WDI_INDICATION_IHV_EVENT_PARAMETERS;
    VOID ~_WDI_INDICATION_IHV_EVENT_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_IHV_EVENT_PARAMETERS::_WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional {
    ULONG IHVData_IsPresent : 1;
    VOID _WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional {
    ULONG IHVData_IsPresent : 1;
    VOID _WDI_INDICATION_IHV_EVENT_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS {
     _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional;
    struct _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS::_WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional Optional;
    enum _WDI_IHV_TASK_PRIORITY RequestedPriority;
    struct ArrayOfElements<unsigned char> IHVSpecificContext;
    VOID _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS;
    VOID ~_WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS::_WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional {
    ULONG IHVSpecificContext_IsPresent : 1;
    VOID _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional {
    ULONG IHVSpecificContext_IsPresent : 1;
    VOID _WDI_INDICATION_IHV_TASK_REQUEST_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_LINK_STATE_CHANGE_PARAMETERS {
    struct _WDI_LINK_STATE_CHANGE_PARAMETERS_STRUCT LinkStateChangeParameters;
    VOID _WDI_INDICATION_LINK_STATE_CHANGE_PARAMETERS;
};

typedef struct _WDI_INDICATION_NLO_DISCOVERY_PARAMETERS {
    struct ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER> DeviceDescriptor;
    VOID _WDI_INDICATION_NLO_DISCOVERY_PARAMETERS;
    VOID ~_WDI_INDICATION_NLO_DISCOVERY_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_P2P_ACTION_FRAME_RECEIVED_PARAMETERS {
    struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO FrameInfo;
    VOID _WDI_INDICATION_P2P_ACTION_FRAME_RECEIVED_PARAMETERS;
    VOID ~_WDI_INDICATION_P2P_ACTION_FRAME_RECEIVED_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_P2P_GROUP_OPERATING_CHANNEL_PARAMETERS {
    struct _WDI_P2P_CHANNEL Channel;
    enum _WDI_P2P_CHANNEL_INDICATE_REASON IndicateReason;
    struct _WDI_AP_BAND_INFORMATION_CONTAINER APBandInformation;
    VOID _WDI_INDICATION_P2P_GROUP_OPERATING_CHANNEL_PARAMETERS;
};

typedef struct _WDI_INDICATION_P2P_OPERATING_CHANNEL_ATTRIBUTES_PARAMETERS {
    struct _WDI_P2P_CHANNEL PreferredOperatingChannel;
    struct _WDI_P2P_CHANNEL_LIST_CONTAINER ChannelList;
    struct _WDI_P2P_CHANNEL PreferredListenChannel;
    VOID _WDI_INDICATION_P2P_OPERATING_CHANNEL_ATTRIBUTES_PARAMETERS;
    VOID ~_WDI_INDICATION_P2P_OPERATING_CHANNEL_ATTRIBUTES_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_P2P_SEND_REQUEST_ACTION_FRAME_COMPLETE_PARAMETERS {
    struct _WDI_P2P_SEND_ACTION_FRAME_RESULT_CONTAINER SendActionFrameResult;
    VOID _WDI_INDICATION_P2P_SEND_REQUEST_ACTION_FRAME_COMPLETE_PARAMETERS;
    VOID ~_WDI_INDICATION_P2P_SEND_REQUEST_ACTION_FRAME_COMPLETE_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_P2P_SEND_RESPONSE_ACTION_FRAME_COMPLETE_PARAMETERS {
    struct _WDI_P2P_SEND_ACTION_FRAME_RESULT_CONTAINER SendActionFrameResult;
    VOID _WDI_INDICATION_P2P_SEND_RESPONSE_ACTION_FRAME_COMPLETE_PARAMETERS;
    VOID ~_WDI_INDICATION_P2P_SEND_RESPONSE_ACTION_FRAME_COMPLETE_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_RADIO_STATUS_PARAMETERS {
    struct _WDI_RADIO_STATUS RadioState;
    VOID _WDI_INDICATION_RADIO_STATUS_PARAMETERS;
};

typedef struct _WDI_INDICATION_ROAMING_NEEDED_PARAMETERS {
    enum _WDI_ASSOC_STATUS RoamingReason;
    VOID _WDI_INDICATION_ROAMING_NEEDED_PARAMETERS;
};

typedef struct _WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS {
    struct _WDI_ASSOC_RESULT_PARAMETERS AssocResponseResult;
    struct ArrayOfElements<unsigned char> AssocResponseFrame;
    struct ArrayOfElements<unsigned char> BeaconIEs;
    struct ArrayOfElements<enum _WDI_PHY_TYPE> ActivePhyList;
    VOID _WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS;
    VOID ~_WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_STOP_AP_PARAMETERS {
    ULONG Reason;
    VOID _WDI_INDICATION_STOP_AP_PARAMETERS;
};

typedef struct _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS {
     _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional;
    struct _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS::_WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional Optional;
    struct _WDI_TCP_OFFLOAD_CAPABILITIES_CONTAINER TcpOffloadCapabilities;
    VOID _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS;
};

typedef struct _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS::_WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional {
    ULONG TcpOffloadCapabilities_IsPresent : 1;
    VOID _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional {
    ULONG TcpOffloadCapabilities_IsPresent : 1;
    VOID _WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_TKIP_MIC_FAILURE_PARAMETERS {
    struct _WDI_TKIP_MIC_FAILURE_PARAMETERS FailureInfo;
    VOID _WDI_INDICATION_TKIP_MIC_FAILURE_PARAMETERS;
};

typedef struct _WDI_INDICATION_WAKE_REASON_PARAMETERS {
     _WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional;
    struct _WDI_INDICATION_WAKE_REASON_PARAMETERS::_WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional Optional;
    ULONG WakeEventCode;
    struct ArrayOfElements<unsigned char> WakePacket;
    ULONG WakePacketPatternId;
    VOID _WDI_INDICATION_WAKE_REASON_PARAMETERS;
    VOID ~_WDI_INDICATION_WAKE_REASON_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INDICATION_WAKE_REASON_PARAMETERS::_WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional {
    ULONG WakePacket_IsPresent : 1;
    ULONG WakePacketPatternId_IsPresent : 1;
    VOID _WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional;
};

typedef struct _WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional {
    ULONG WakePacket_IsPresent : 1;
    ULONG WakePacketPatternId_IsPresent : 1;
    VOID _WDI_INDICATION_WAKE_REASON_PARAMETERS_Optional;
};

typedef struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER {
     _WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional;
    struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER::_WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional Optional;
    struct _WDI_INTERFACE_CAPABILITIES InterfaceCapabilities;
    struct ArrayOfElements<char> FirmwareVersion;
    struct ArrayOfElements<unsigned int> NonWdiOidsList;
    VOID _WDI_INTERFACE_ATTRIBUTES_CONTAINER;
    VOID ~_WDI_INTERFACE_ATTRIBUTES_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER::_WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional {
    ULONG NonWdiOidsList_IsPresent : 1;
    VOID _WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional {
    ULONG NonWdiOidsList_IsPresent : 1;
    VOID _WDI_INTERFACE_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_INTERFACE_CAPABILITIES {
    ULONG MTUSize;
    ULONG MaxMultiCastListSize;
    USHORT BackFillSize;
    struct _WDI_MAC_ADDRESS Address;
    ULONG MaxTxRate;
    ULONG MaxRxRate;
    UCHAR HardwareRadioState;
    UCHAR SoftwareRadioState;
    UCHAR SupportPLR;
    UCHAR SupportFLR;
    UCHAR ActionFramesSupported;
    UCHAR NumRxStreams;
    UCHAR NumTxStreams;
    UCHAR NumChannels;
    UCHAR AntennaDiversity;
    UCHAR Support_eCSA;
    UCHAR MACAddressRandomization;
    struct _WDI_MAC_ADDRESS MACAddressRandomizationMask;
    enum _WDI_BLUETOOTH_COEXISTENCE_SUPPORT BluetoothCoexistenceSupport;
    UCHAR SupportsNonWdiOidRequests;
    UCHAR FastTransitionSupported;
    UCHAR MU_MIMOSupported;
    UCHAR CannotSupportMiracastSink;
    UCHAR BSSTransitionSupported;
    UCHAR IPDockingSupported;
    VOID _WDI_INTERFACE_CAPABILITIES;
};

typedef struct _WDI_INTERFACE_CAPABILITIESV1_0 {
    ULONG MTUSize;
    ULONG MaxMultiCastListSize;
    USHORT BackFillSize;
    struct _WDI_MAC_ADDRESS Address;
    ULONG MaxTxRate;
    ULONG MaxRxRate;
    UCHAR HardwareRadioState;
    UCHAR SoftwareRadioState;
    UCHAR SupportPLR;
    UCHAR SupportFLR;
    UCHAR ActionFramesSupported;
    UCHAR NumRxStreams;
    UCHAR NumTxStreams;
    UCHAR NumChannels;
    UCHAR AntennaDiversity;
    UCHAR Support_eCSA;
    UCHAR MACAddressRandomization;
    struct _WDI_MAC_ADDRESS MACAddressRandomizationMask;
    enum _WDI_BLUETOOTH_COEXISTENCE_SUPPORT BluetoothCoexistenceSupport;
    UCHAR SupportsNonWdiOidRequests;
    UCHAR FastTransitionSupported;
    UCHAR MU_MIMOSupported;
    UCHAR CannotSupportMiracastSink;
    VOID _WDI_INTERFACE_CAPABILITIESV1_0;
};

typedef struct _WDI_INTERFACE_CAPABILITIESV1_0_1 {
    ULONG MTUSize;
    ULONG MaxMultiCastListSize;
    USHORT BackFillSize;
    struct _WDI_MAC_ADDRESS Address;
    ULONG MaxTxRate;
    ULONG MaxRxRate;
    UCHAR HardwareRadioState;
    UCHAR SoftwareRadioState;
    UCHAR SupportPLR;
    UCHAR SupportFLR;
    UCHAR ActionFramesSupported;
    UCHAR NumRxStreams;
    UCHAR NumTxStreams;
    UCHAR NumChannels;
    UCHAR AntennaDiversity;
    UCHAR Support_eCSA;
    UCHAR MACAddressRandomization;
    struct _WDI_MAC_ADDRESS MACAddressRandomizationMask;
    enum _WDI_BLUETOOTH_COEXISTENCE_SUPPORT BluetoothCoexistenceSupport;
    UCHAR SupportsNonWdiOidRequests;
    UCHAR FastTransitionSupported;
    UCHAR MU_MIMOSupported;
    UCHAR CannotSupportMiracastSink;
    UCHAR BSSTransitionSupported;
    VOID _WDI_INTERFACE_CAPABILITIESV1_0_1;
};

typedef struct _WDI_IPV4_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER {
    struct _WDI_CHECKSUM_OFFLOAD_V4_PARAMETERS IpV4Transmit;
    struct _WDI_CHECKSUM_OFFLOAD_V4_PARAMETERS IpV4Receive;
    VOID _WDI_IPV4_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER;
};

typedef struct _WDI_IPV4_LSO_V2 {
    ULONG EncapsulationV4;
    ULONG MaxOffloadSizeV4;
    ULONG MinSegmentCountV4;
    VOID _WDI_IPV4_LSO_V2;
};

typedef struct _WDI_IPV6_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER {
    struct _WDI_CHECKSUM_OFFLOAD_V6_PARAMETERS IpV6Transmit;
    struct _WDI_CHECKSUM_OFFLOAD_V6_PARAMETERS IpV6Receive;
    VOID _WDI_IPV6_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER;
};

typedef struct _WDI_IPV6_LSO_V2 {
    ULONG EncapsulationV6;
    ULONG MaxOffloadSizeV6;
    ULONG MinSegmentCountV6;
    ULONG IpExtensionHeadersSupported;
    ULONG TcpOptionsSupported;
    VOID _WDI_IPV6_LSO_V2;
};

typedef struct _WDI_IPv4_TCP_SYNC {
    ULONG PatternId;
    struct _WDI_BYTE4 IPv4SourceAddr;
    struct _WDI_BYTE4 IPv4DestAddr;
    USHORT TcpSourcePort;
    USHORT TcpDestPort;
    VOID _WDI_IPv4_TCP_SYNC;
};

typedef struct _WDI_IPv6TCP_SYNC {
    ULONG PatternId;
    struct _WDI_BYTE16 IPv6SourceAddr;
    struct _WDI_BYTE16 IPv6DestAddr;
    USHORT TcpSourcePort;
    USHORT TcpDestPort;
    VOID _WDI_IPv6TCP_SYNC;
};

typedef struct _WDI_LINK_QUALITY_BAR_MAP_PARAMETERS {
    UCHAR StartRange;
    UCHAR EndRange;
    UCHAR BarNumber;
    VOID _WDI_LINK_QUALITY_BAR_MAP_PARAMETERS;
};

typedef struct _WDI_LINK_STATE_CHANGE_PARAMETERS_STRUCT {
    struct _WDI_MAC_ADDRESS PeerMACAddress;
    ULONG TxLinkSpeed;
    ULONG RxLinkSpeed;
    UCHAR LinkQuality;
    VOID _WDI_LINK_STATE_CHANGE_PARAMETERS_STRUCT;
};

typedef struct _WDI_LOW_LATENCY_CONNECTION_QUALITY_PARAMETERS {
    UCHAR MaximumOffChannelOperationTime;
    UCHAR RoamingNeededLinkQualityThreshold;
    VOID _WDI_LOW_LATENCY_CONNECTION_QUALITY_PARAMETERS;
};

typedef struct _WDI_LSO_V1_CAPABILITIES {
    ULONG Encapsulation;
    ULONG MaxOffLoadSize;
    ULONG MinSegmentCount;
    ULONG TcpOptions;
    ULONG IpOptions;
    VOID _WDI_LSO_V1_CAPABILITIES;
};

typedef struct _WDI_LSO_V2_CAPABILITIES_CONTAINER {
    struct _WDI_IPV4_LSO_V2 Ipv4LSO;
    struct _WDI_IPV6_LSO_V2 Ipv6LSO;
    VOID _WDI_LSO_V2_CAPABILITIES_CONTAINER;
};

typedef struct _WDI_MAC_ADDRESS {
    UCHAR Address[6];
};

typedef struct _WDI_MAC_STATISTICS_PARAMETERS {
    struct _WDI_MAC_ADDRESS MACAddress;
    ULONG64 TransmittedFrameCount;
    ULONG64 ReceivedFrameCount;
    ULONG64 WEPExcludedCount;
    ULONG64 TKIPLocalMICFailures;
    ULONG64 TKIPReplays;
    ULONG64 TKIPICVErrorCount;
    ULONG64 CCMPFormatErrors;
    ULONG64 CCMPReplays;
    ULONG64 CCMPDecryptErrors;
    ULONG64 WEPUndecryptableCount;
    ULONG64 WEPICVErrorCount;
    ULONG64 DecryptSuccessCount;
    ULONG64 DecryptFailureCount;
    VOID _WDI_MAC_STATISTICS_PARAMETERS;
};

typedef struct _WDI_MESSAGE_HEADER {
    USHORT PortId;
    USHORT Reserved;
    LONG Status;
    ULONG TransactionId;
    ULONG IhvSpecificId;
};

typedef struct _WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER {
    struct _WDI_MAC_ADDRESS Bssid;
    struct _WDI_BSSID_INFO_STRUCT BSSIDInfo;
    UCHAR OperatingClass;
    UCHAR ChannelNumber;
    enum _WDI_PHY_TYPE PhyType;
    VOID _WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER;
};

typedef struct _WDI_NETWORK_LIST_OFFLOAD_CONFIG {
    ULONG ulFlags;
    ULONG DelayStartInSeconds;
    ULONG FastScanPeriodinSeconds;
    ULONG FastScanIterations;
    ULONG SlowScanPeriodinSeconds;
    VOID _WDI_NETWORK_LIST_OFFLOAD_CONFIG;
};

typedef struct _WDI_NETWORK_LIST_OFFLOAD_INFO {
     _WDI_NETWORK_LIST_OFFLOAD_INFO_Optional;
    struct _WDI_NETWORK_LIST_OFFLOAD_INFO::_WDI_NETWORK_LIST_OFFLOAD_INFO_Optional Optional;
    struct _WDI_NETWORK_LIST_OFFLOAD_CONFIG NetworkListOffloadConfig;
    struct ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER> SsidOffload;
    VOID _WDI_NETWORK_LIST_OFFLOAD_INFO;
    VOID ~_WDI_NETWORK_LIST_OFFLOAD_INFO;
    PVOID __vecDelDtor;
};

typedef struct _WDI_NETWORK_LIST_OFFLOAD_INFO::_WDI_NETWORK_LIST_OFFLOAD_INFO_Optional {
    ULONG SsidOffload_IsPresent : 1;
    VOID _WDI_NETWORK_LIST_OFFLOAD_INFO_Optional;
};

typedef struct _WDI_NETWORK_LIST_OFFLOAD_INFO_Optional {
    ULONG SsidOffload_IsPresent : 1;
    VOID _WDI_NETWORK_LIST_OFFLOAD_INFO_Optional;
};

typedef struct _WDI_NETWORK_LIST_OFFLOAD_PARAMETERS {
    struct _WDI_NETWORK_LIST_OFFLOAD_INFO NetworkListOffload;
    VOID _WDI_NETWORK_LIST_OFFLOAD_PARAMETERS;
    VOID ~_WDI_NETWORK_LIST_OFFLOAD_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_OFFLOAD_SCOPE {
    UCHAR ChecksumOffloadSupportedOnAllPorts;
    UCHAR LsoV1OffloadSupportedOnAllPorts;
    UCHAR LsoV2OffloadSupportedOnAllPorts;
    UCHAR RscOffloadSupportedOnAllPorts;
    VOID _WDI_OFFLOAD_SCOPE;
};

typedef struct _WDI_OS_POWER_MANAGEMENT_FEATURES {
    enum _WDI_OS_POWER_MANAGEMENT_FLAGS EnableFlags;
    VOID _WDI_OS_POWER_MANAGEMENT_FEATURES;
};

typedef struct _WDI_P2P_ACTION_FRAME_REQUEST_PARAMETERS {
    enum _WDI_P2P_ACTION_FRAME_TYPE RequestFrameType;
    struct _WDI_MAC_ADDRESS PeerDeviceAddress;
    UCHAR DialogToken;
    ULONG SendTimeout;
    ULONG PostACKDwellTime;
    VOID _WDI_P2P_ACTION_FRAME_REQUEST_PARAMETERS;
};

typedef struct _WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER {
    struct ArrayOfElements<unsigned char> PrefixName;
    struct _WDI_P2P_SERVICE_NAME_HASH ServicePrefixHash;
    VOID _WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER;
    VOID ~_WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER {
     _WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional;
    struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER::_WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional Optional;
    struct ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER> ServiceEntry;
    USHORT ServiceUpdateIndicator;
    VOID _WDI_P2P_ADVERTISED_SERVICES_CONTAINER;
    VOID ~_WDI_P2P_ADVERTISED_SERVICES_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER::_WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional {
    ULONG ServiceEntry_IsPresent : 1;
    VOID _WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional;
};

typedef struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional {
    ULONG ServiceEntry_IsPresent : 1;
    VOID _WDI_P2P_ADVERTISED_SERVICES_CONTAINER_Optional;
};

typedef struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER {
     _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional;
    struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER::_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional Optional;
    struct ArrayOfElements<unsigned char> ServiceName;
    struct _WDI_P2P_SERVICE_NAME_HASH ServiceNameHash;
    struct ArrayOfElements<unsigned char> ServiceInformation;
    UCHAR ServiceStatus;
    ULONG AdvertisementID;
    USHORT ConfigurationMethods;
    VOID _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER;
    VOID ~_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER::_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20 {
     _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional;
    struct _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20::_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional Optional;
    struct ArrayOfElements<unsigned char> ServiceType;
    struct _WDI_P2P_SERVICE_NAME_HASH ServiceTypeHash;
    struct ArrayOfElements<unsigned char> InstanceName;
    struct _WDI_P2P_SERVICE_NAME_HASH InstanceNameHash;
    struct ArrayOfElements<unsigned char> ServiceInformation;
    UCHAR ServiceStatus;
    ULONG AdvertisementID;
    USHORT ConfigurationMethods;
    VOID _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20;
    VOID ~_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20::_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional;
};

typedef struct _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20_Optional;
};

typedef struct _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20 {
     _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional;
    struct _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20::_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional Optional;
    struct ArrayOfElements<unsigned char> ServiceName;
    struct ArrayOfElements<unsigned char> InstanceName;
    struct ArrayOfElements<unsigned char> ServiceInformation;
    USHORT ServiceUpdateIndicator;
    UCHAR ServiceTransactionId;
    VOID _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20;
    VOID ~_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20::_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    ULONG ServiceUpdateIndicator_IsPresent : 1;
    ULONG ServiceTransactionId_IsPresent : 1;
    VOID _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional;
};

typedef struct _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    ULONG ServiceUpdateIndicator_IsPresent : 1;
    ULONG ServiceTransactionId_IsPresent : 1;
    VOID _WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20_Optional;
};

typedef struct _WDI_P2P_ATTRIBUTES_CONTAINER {
    struct _WDI_P2P_CAPABILITIES P2PCapabilities;
    struct ArrayOfElements<_WDI_MAC_ADDRESS> InterfaceAddressList;
    VOID _WDI_P2P_ATTRIBUTES_CONTAINER;
    VOID ~_WDI_P2P_ATTRIBUTES_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_BACKGROUND_DISCOVER_MODE {
    enum _WDI_P2P_DISCOVER_TYPE DiscoveryType;
    enum _WDI_P2P_SERVICE_DISCOVERY_TYPE ServiceDiscoveryType;
    ULONG DeviceVisiblilityTimeout;
    VOID _WDI_P2P_BACKGROUND_DISCOVER_MODE;
};

typedef struct _WDI_P2P_CAPABILITIES {
    UCHAR ConcurrentGOCount;
    UCHAR ConcurrentClientCount;
    ULONG WPSVersionSupport;
    UCHAR ServiceDiscoverySupported;
    UCHAR ServiceNameDiscoverySupported;
    UCHAR ServiceInformationDiscoverySupported;
    ULONG ServiceNameAdvertisementsMaxBytesSupported;
    ULONG ServiceInformationAdvertisementsMaxBytesSupported;
    UCHAR BackgroundDiscoverySupported;
    UCHAR ClientDiscoverabilitySupported;
    UCHAR InfrastructureManagementSupported;
    UCHAR MaxSecondaryAdapterTypeListSize;
    UCHAR DeviceAddress[6];
    ULONG DiscoveryFilterListSize;
    UCHAR GOClientTableSize;
    ULONG MaxVendorSpecificExtensionIESize;
    UCHAR PassiveAvailabilityListenStateSupported;
    UCHAR OperatingChannelUpdatesSupported;
    UCHAR GOon5GHzBandSupported;
    UCHAR ASP20ServiceNameDiscoverySupported;
    UCHAR ASP20ServiceInformationDiscoverySupported;
    VOID _WDI_P2P_CAPABILITIES;
};

typedef struct _WDI_P2P_CAPABILITIES_V1_0_1 {
    UCHAR ConcurrentGOCount;
    UCHAR ConcurrentClientCount;
    ULONG WPSVersionSupport;
    UCHAR ServiceDiscoverySupported;
    UCHAR ServiceNameDiscoverySupported;
    UCHAR ServiceInformationDiscoverySupported;
    ULONG ServiceNameAdvertisementsMaxBytesSupported;
    ULONG ServiceInformationAdvertisementsMaxBytesSupported;
    UCHAR BackgroundDiscoverySupported;
    UCHAR ClientDiscoverabilitySupported;
    UCHAR InfrastructureManagementSupported;
    UCHAR MaxSecondaryAdapterTypeListSize;
    UCHAR DeviceAddress[6];
    ULONG DiscoveryFilterListSize;
    UCHAR GOClientTableSize;
    ULONG MaxVendorSpecificExtensionIESize;
    UCHAR PassiveAvailabilityListenStateSupported;
    UCHAR OperatingChannelUpdatesSupported;
    VOID _WDI_P2P_CAPABILITIES_V1_0_1;
};

typedef struct _WDI_P2P_CAPABILITIES_V1_0_10 {
    UCHAR ConcurrentGOCount;
    UCHAR ConcurrentClientCount;
    ULONG WPSVersionSupport;
    UCHAR ServiceDiscoverySupported;
    UCHAR ServiceNameDiscoverySupported;
    UCHAR ServiceInformationDiscoverySupported;
    ULONG ServiceNameAdvertisementsMaxBytesSupported;
    ULONG ServiceInformationAdvertisementsMaxBytesSupported;
    UCHAR BackgroundDiscoverySupported;
    UCHAR ClientDiscoverabilitySupported;
    UCHAR InfrastructureManagementSupported;
    UCHAR MaxSecondaryAdapterTypeListSize;
    UCHAR DeviceAddress[6];
    ULONG DiscoveryFilterListSize;
    UCHAR GOClientTableSize;
    ULONG MaxVendorSpecificExtensionIESize;
    UCHAR PassiveAvailabilityListenStateSupported;
    UCHAR OperatingChannelUpdatesSupported;
    UCHAR GOon5GHzBandSupported;
    VOID _WDI_P2P_CAPABILITIES_V1_0_10;
};

typedef struct _WDI_P2P_CHANNEL {
    UCHAR CountryOrRegionString[3];
    UCHAR OperatingClass;
    ULONG ChannelNumber;
    VOID _WDI_P2P_CHANNEL;
};

typedef struct _WDI_P2P_CHANNEL_ENTRIES_CONTAINER {
    UCHAR OperatingClass;
    struct ArrayOfElements<unsigned int> ChannelList;
    VOID _WDI_P2P_CHANNEL_ENTRIES_CONTAINER;
    VOID ~_WDI_P2P_CHANNEL_ENTRIES_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_CHANNEL_LIST_CONTAINER {
    struct ArrayOfElements<_WDI_COUNTRY_REGION_LIST> CountryRegionList;
    struct ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER> ChannelEntries;
    VOID _WDI_P2P_CHANNEL_LIST_CONTAINER;
    VOID ~_WDI_P2P_CHANNEL_LIST_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_DEVICE_CAPABILITY_PARAMETERS {
    UCHAR DeviceCapabilityBitmap;
    UCHAR OSSetDeviceCapabilities;
    ULONG WPSVersionsEnabled;
    VOID _WDI_P2P_DEVICE_CAPABILITY_PARAMETERS;
};

typedef struct _WDI_P2P_DEVICE_INFO_CONTAINER {
    struct _WDI_P2P_DEVICE_INFO_PARAMETERS DeviceInfoParameters;
    struct ArrayOfElements<unsigned char> DeviceName;
    VOID _WDI_P2P_DEVICE_INFO_CONTAINER;
    VOID ~_WDI_P2P_DEVICE_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_DEVICE_INFO_PARAMETERS {
    UCHAR DeviceAddress[6];
    USHORT ConfigurationMethods;
    struct _WDI_P2P_DEVICE_TYPE DeviceType;
    VOID _WDI_P2P_DEVICE_INFO_PARAMETERS;
};

typedef struct _WDI_P2P_DEVICE_TYPE {
    USHORT CategoryID;
    UCHAR OUI[4];
    USHORT SubcategoryID;
    VOID _WDI_P2P_DEVICE_TYPE;
};

typedef struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER {
     _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional;
    struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER::_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional Optional;
    struct ArrayOfElements<unsigned char> ServiceName;
    struct ArrayOfElements<unsigned char> ServiceInformation;
    UCHAR ServiceStatus;
    ULONG AdvertisementID;
    USHORT ConfigurationMethods;
    VOID _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER;
    VOID ~_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER::_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER {
    struct _WDI_P2P_LISTEN_DURATION ListenDuration;
    struct ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER> BandChannelList;
    VOID _WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER;
    VOID ~_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_DISCOVER_MODE {
    enum _WDI_P2P_DISCOVER_TYPE DiscoveryType;
    UCHAR ForcedDiscovery;
    enum _WDI_P2P_SCAN_TYPE ScanType;
    enum _WDI_P2P_SERVICE_DISCOVERY_TYPE ServiceDiscoveryType;
    UCHAR ScanRepeatCount;
    ULONG TimeBetweenScans;
    VOID _WDI_P2P_DISCOVER_MODE;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER {
     _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional;
    struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional Optional;
    struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_PARAMETERS ConfirmationParams;
    struct _WDI_P2P_GROUP_ID GroupID;
    struct _WDI_P2P_CHANNEL RemoteListenChannel;
    VOID _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER;
    VOID ~_WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional {
    ULONG GroupID_IsPresent : 1;
    ULONG RemoteListenChannel_IsPresent : 1;
    VOID _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional {
    ULONG GroupID_IsPresent : 1;
    ULONG RemoteListenChannel_IsPresent : 1;
    VOID _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
    UCHAR StatusCode;
    UCHAR GroupCapability;
    UCHAR OSSetGroupCapabilityBitmask;
    VOID _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_PARAMETERS;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER {
     _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional;
    struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional Optional;
    struct _WDI_P2P_GO_NEGOTIATION_REQUEST_PARAMETERS RequestParams;
    struct _WDI_P2P_CHANNEL RemoteListenChannel;
    VOID _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional {
    ULONG RemoteListenChannel_IsPresent : 1;
    VOID _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional {
    ULONG RemoteListenChannel_IsPresent : 1;
    VOID _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_REQUEST_PARAMETERS {
    UCHAR GOIntent;
    UCHAR TieBreaker;
    USHORT GOConfigTimeout;
    USHORT ClientConfigTimeout;
    struct _WDI_MAC_ADDRESS IntendedInterfaceAddress;
    UCHAR GroupCapability;
    UCHAR OSSetGroupCapabilityBitmask;
    VOID _WDI_P2P_GO_NEGOTIATION_REQUEST_PARAMETERS;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER {
     _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional;
    struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional Optional;
    struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_PARAMETERS ResponseParams;
    struct _WDI_P2P_GROUP_ID GroupID;
    VOID _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER;
    VOID ~_WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER::_WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional {
    ULONG GroupID_IsPresent : 1;
    VOID _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional {
    ULONG GroupID_IsPresent : 1;
    VOID _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_PARAMETERS {
    UCHAR StatusCode;
    UCHAR GOIntent;
    UCHAR TieBreaker;
    USHORT GOConfigTimeout;
    USHORT ClientConfigTimeout;
    struct _WDI_MAC_ADDRESS IntendedInterfaceAddress;
    UCHAR GroupCapability;
    UCHAR OSSetGroupCapabilityBitmask;
    VOID _WDI_P2P_GO_NEGOTIATION_RESPONSE_PARAMETERS;
};

typedef struct _WDI_P2P_GROUP_ID {
    struct _WDI_MAC_ADDRESS DeviceAddress;
    struct ArrayOfElements<unsigned char> GroupSSID;
    VOID _WDI_P2P_GROUP_ID;
    VOID ~_WDI_P2P_GROUP_ID;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_GROUP_OWNER_CAPABILITY_PARAMETERS {
    UCHAR GroupCapabilityBitmap;
    UCHAR OSSetGroupCapabilities;
    ULONG MaximumGroupLimit;
    VOID _WDI_P2P_GROUP_OWNER_CAPABILITY_PARAMETERS;
};

typedef struct _WDI_P2P_INCOMING_ACTION_FRAME_PARAMETERS {
    enum _WDI_P2P_ACTION_FRAME_TYPE ActionFrameType;
    struct _WDI_MAC_ADDRESS PeerDeviceAddress;
    UCHAR DialogToken;
    VOID _WDI_P2P_INCOMING_ACTION_FRAME_PARAMETERS;
};

typedef struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER {
     _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional;
    struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER::_WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional Optional;
    struct _WDI_P2P_INVITATION_REQUEST_PARAMETERS RequestParams;
    struct _WDI_MAC_ADDRESS GroupBSSID;
    struct _WDI_P2P_CHANNEL OperatingChannel;
    struct _WDI_P2P_GROUP_ID GroupID;
    VOID _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER;
    VOID ~_WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER::_WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional {
    ULONG GroupBSSID_IsPresent : 1;
    ULONG OperatingChannel_IsPresent : 1;
    VOID _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional {
    ULONG GroupBSSID_IsPresent : 1;
    ULONG OperatingChannel_IsPresent : 1;
    VOID _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_INVITATION_REQUEST_PARAMETERS {
    USHORT GOConfigTimeout;
    USHORT ClientConfigTimeout;
    UCHAR InvitationFlags;
    UCHAR IsLocalGO;
    VOID _WDI_P2P_INVITATION_REQUEST_PARAMETERS;
};

typedef struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER {
     _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional;
    struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER::_WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional Optional;
    struct _WDI_P2P_INVITATION_RESPONSE_PARAMETERS ResponseParams;
    struct _WDI_MAC_ADDRESS GroupBSSID;
    struct _WDI_P2P_CHANNEL OperatingChannel;
    VOID _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER;
};

typedef struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER::_WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional {
    ULONG GroupBSSID_IsPresent : 1;
    ULONG OperatingChannel_IsPresent : 1;
    VOID _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional {
    ULONG GroupBSSID_IsPresent : 1;
    ULONG OperatingChannel_IsPresent : 1;
    VOID _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_INVITATION_RESPONSE_PARAMETERS {
    UCHAR StatusCode;
    USHORT GOConfigTimeout;
    USHORT ClientConfigTimeout;
    VOID _WDI_P2P_INVITATION_RESPONSE_PARAMETERS;
};

typedef struct _WDI_P2P_LISTEN_DURATION {
    ULONG CycleDuration;
    ULONG ListenActiveDuration;
    VOID _WDI_P2P_LISTEN_DURATION;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER {
     _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional;
    struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER::_WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional Optional;
    struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_PARAMETERS RequestParams;
    struct _WDI_P2P_GROUP_ID GroupID;
    struct _WDI_P2P_PROVISION_SERVICE_ATTRIBUTES ServiceAttributes;
    struct _WDI_P2P_GROUP_ID PersistentGroupID;
    struct ArrayOfElements<unsigned char> ServiceSessionInfo;
    VOID _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER;
    VOID ~_WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER::_WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional {
    ULONG GroupID_IsPresent : 1;
    ULONG ServiceAttributes_IsPresent : 1;
    ULONG PersistentGroupID_IsPresent : 1;
    ULONG ServiceSessionInfo_IsPresent : 1;
    VOID _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional {
    ULONG GroupID_IsPresent : 1;
    ULONG ServiceAttributes_IsPresent : 1;
    ULONG PersistentGroupID_IsPresent : 1;
    ULONG ServiceSessionInfo_IsPresent : 1;
    VOID _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_PARAMETERS {
    UCHAR GroupCapability;
    UCHAR OSSetGroupCapabilityBitmask;
    VOID _WDI_P2P_PROVISION_DISCOVERY_REQUEST_PARAMETERS;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER {
     _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional;
    struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER::_WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional Optional;
    struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_PARAMETERS ResponseParams;
    struct _WDI_P2P_PROVISION_SERVICE_ATTRIBUTES ServiceAttributes;
    struct _WDI_P2P_GROUP_ID GroupID;
    struct _WDI_P2P_GROUP_ID PersistentGroupID;
    struct ArrayOfElements<unsigned char> ServiceSessionInfo;
    VOID _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER;
    VOID ~_WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER::_WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional {
    ULONG ServiceAttributes_IsPresent : 1;
    ULONG GroupID_IsPresent : 1;
    ULONG PersistentGroupID_IsPresent : 1;
    ULONG ServiceSessionInfo_IsPresent : 1;
    VOID _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional {
    ULONG ServiceAttributes_IsPresent : 1;
    ULONG GroupID_IsPresent : 1;
    ULONG PersistentGroupID_IsPresent : 1;
    ULONG ServiceSessionInfo_IsPresent : 1;
    VOID _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER_Optional;
};

typedef struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_PARAMETERS {
    UCHAR GroupCapability;
    UCHAR OSSetGroupCapabilityBitmask;
    VOID _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_PARAMETERS;
};

typedef struct _WDI_P2P_PROVISION_SERVICE_ATTRIBUTES {
    UCHAR StatusCode;
    struct _WDI_MAC_ADDRESS IntendedInterfaceAddress;
    UCHAR ConnectionCapability;
    ULONG FeatureCapability;
    ULONG AdvertisementID;
    struct _WDI_MAC_ADDRESS ServiceAddress;
    ULONG SessionID;
    struct _WDI_MAC_ADDRESS SessionAddress;
    USHORT GOConfigTimeout;
    USHORT ClientConfigTimeout;
    UCHAR UsePersistentGroup;
    UCHAR FollowOnProvisionDiscovery;
    VOID _WDI_P2P_PROVISION_SERVICE_ATTRIBUTES;
};

typedef struct _WDI_P2P_SEND_ACTION_FRAME_RESPONSE_PARAMETERS {
    enum _WDI_P2P_ACTION_FRAME_TYPE ResponseFrameType;
    struct _WDI_MAC_ADDRESS PeerDeviceAddress;
    UCHAR DialogToken;
    ULONG SendTimeout;
    ULONG PostACKDwellTime;
    VOID _WDI_P2P_SEND_ACTION_FRAME_RESPONSE_PARAMETERS;
};

typedef struct _WDI_P2P_SEND_ACTION_FRAME_RESULT_CONTAINER {
    struct _WDI_P2P_SEND_ACTION_FRAME_RESULT_PARAMETERS FrameParameters;
    struct ArrayOfElements<unsigned char> FrameIEs;
    VOID _WDI_P2P_SEND_ACTION_FRAME_RESULT_CONTAINER;
    VOID ~_WDI_P2P_SEND_ACTION_FRAME_RESULT_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_SEND_ACTION_FRAME_RESULT_PARAMETERS {
    struct _WDI_MAC_ADDRESS PeerDeviceAddress;
    UCHAR DialogToken;
    VOID _WDI_P2P_SEND_ACTION_FRAME_RESULT_PARAMETERS;
};

typedef struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER {
     _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional;
    struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER::_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional Optional;
    struct ArrayOfElements<unsigned char> ServiceName;
    struct _WDI_P2P_SERVICE_NAME_HASH ServiceNameHash;
    struct ArrayOfElements<unsigned char> ServiceInformation;
    USHORT ServiceUpdateIndicator;
    UCHAR ServiceTransactionId;
    VOID _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER;
    VOID ~_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER::_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional {
    ULONG ServiceInformation_IsPresent : 1;
    VOID _WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_Optional;
};

typedef struct _WDI_P2P_SERVICE_NAME_HASH {
    UCHAR Hash[6];
};

typedef struct _WDI_PACKET_PATTERN_CONTAINER {
    ULONG WakePacketPatternId;
    struct ArrayOfElements<unsigned char> PacketPattern;
    struct ArrayOfElements<unsigned char> PacketPatternMask;
    VOID _WDI_PACKET_PATTERN_CONTAINER;
    VOID ~_WDI_PACKET_PATTERN_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_PHY_CAPABILITIES {
    enum _WDI_PHY_TYPE PhyType;
    UCHAR SupportsCFPoll;
    ULONG MPDUMaxLength;
    ULONG TemperatureClass;
    ULONG DiversitySupport;
    VOID _WDI_PHY_CAPABILITIES;
};

typedef struct _WDI_PHY_INFO_CONTAINER {
    struct _WDI_PHY_CAPABILITIES PhyCapabilities;
    struct ArrayOfElements<unsigned int> TxPowerLevelList;
    struct ArrayOfElements<_WDI_DATA_RATE_LIST> DataRateList;
    VOID _WDI_PHY_INFO_CONTAINER;
    VOID ~_WDI_PHY_INFO_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_PHY_STATISTICS_PARAMETERS {
    enum _WDI_PHY_TYPE PhyType;
    ULONG64 TransmittedFrameCount;
    ULONG64 GroupTransmittedFrameCount;
    ULONG64 FailedCount;
    ULONG64 RetryCount;
    ULONG64 MultipleRetryCount;
    ULONG64 MaxTXLifetimeExceededCount;
    ULONG64 TransmittedFragmentCount;
    ULONG64 RTSSuccessCount;
    ULONG64 RTSFailureCount;
    ULONG64 ACKFailureCount;
    ULONG64 ReceivedFrameCount;
    ULONG64 GroupReceivedFrameCount;
    ULONG64 PromiscuousReceivedFrameCount;
    ULONG64 MaxRXLifetimeExceededCount;
    ULONG64 FrameDuplicateCount;
    ULONG64 ReceivedFragmentCount;
    ULONG64 PromiscuousReceivedFragmentCount;
    ULONG64 FCSErrorCount;
    VOID _WDI_PHY_STATISTICS_PARAMETERS;
};

typedef struct _WDI_PMK_NAME_STRUCT {
    struct _WDI_TYPE_PMK_NAME pmkname;
    VOID _WDI_PMK_NAME_STRUCT;
};

typedef struct _WDI_PM_CAPABILITIES {
    ULONG Flags;
    ULONG SupportedWoLPacketPatterns;
    ULONG NumTotalWoLPatterns;
    ULONG MaxWoLPatternSize;
    ULONG MaxWoLPatternOffset;
    ULONG MaxWoLPacketSaveBuffer;
    ULONG SupportedProtocolOffloads;
    ULONG NumArpOffloadIPv4Addresses;
    ULONG NumNSOffloadIPv6Addresses;
    enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
    ULONG SupportedWakeUpEvents;
    ULONG MediaSpecificWakeUpEvents;
    VOID _WDI_PM_CAPABILITIES;
};

typedef struct _WDI_PM_PROTOCOL_OFFLOAD_80211RSN_REKEY_STRUCT {
    ULONG ProtocolOffloadId;
    ULONG64 ReplayCounter;
    UCHAR KCK_CONTENT[16];
    UCHAR KEK_CONTENT[16];
    VOID _WDI_PM_PROTOCOL_OFFLOAD_80211RSN_REKEY_STRUCT;
};

typedef struct _WDI_PM_PROTOCOL_OFFLOAD_IPv4ARP_STRUCT {
    ULONG ProtocolOffloadId;
    UCHAR RemoteIPV4Address[4];
    UCHAR HostIPV4Address[4];
    struct _WDI_MAC_ADDRESS MacAddress;
    VOID _WDI_PM_PROTOCOL_OFFLOAD_IPv4ARP_STRUCT;
};

typedef struct _WDI_PM_PROTOCOL_OFFLOAD_IPv6_STRUCT {
    ULONG ProtocolOffloadId;
    UCHAR RemoteIPV6Address[16];
    UCHAR SolicitdNodeIPv6Address[16];
    UCHAR TargetIPV6Address1[16];
    UCHAR TargetIPV6Address2[16];
    struct _WDI_MAC_ADDRESS MacAddress;
    VOID _WDI_PM_PROTOCOL_OFFLOAD_IPv6_STRUCT;
};

typedef struct _WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT {
    USHORT EtherType;
    enum _WDI_EXEMPTION_ACTION_TYPE ExemptionActionType;
    enum _WDI_EXEMPTION_PACKET_TYPE ExemptionPacketType;
    VOID _WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT;
};

typedef struct _WDI_RADIO_STATUS {
    UCHAR HardwareState;
    UCHAR SoftwareState;
    VOID _WDI_RADIO_STATUS;
};

typedef struct _WDI_RECEIVE_COALESCE_OFFLOAD_CAPABILITIES {
    UCHAR Ipv4Enabled;
    UCHAR Ipv6Enabled;
    VOID _WDI_RECEIVE_COALESCE_OFFLOAD_CAPABILITIES;
};

typedef struct _WDI_RECEIVE_COALESCING_CAPABILITIES {
    ULONG EnableFilterTypes;
    ULONG EnabledQueueTypes;
    ULONG NumQueues;
    ULONG SupportedQueueProperties;
    ULONG SupportedFilterTests;
    ULONG SupportedHeaders;
    ULONG SupportedMacHeaderFields;
    ULONG MaxMacHeaderFilters;
    ULONG MaxQueueGroups;
    ULONG MaxQueuesPerQueueGroup;
    ULONG MinLookaheadSplitSize;
    ULONG MaxLookaheadSplitSize;
    ULONG SupportedARPHeaderFields;
    ULONG SupportedIPv4HeaderFields;
    ULONG SupportedIPv6HeaderFields;
    ULONG SupportedUdpHeaderFields;
    ULONG MaxFieldTestsPerPacketCoalescingFilter;
    ULONG MaxPacketCoalescingFilters;
    VOID _WDI_RECEIVE_COALESCING_CAPABILITIES;
};

typedef struct _WDI_RECEIVE_COALESCING_CONFIG {
    ULONG QueueId;
    ULONG FilterId;
    ULONG MaxCoalescingDelay;
    VOID _WDI_RECEIVE_COALESCING_CONFIG;
};

typedef struct _WDI_RECEIVE_COALESCING_FIELD {
    ULONG Flags;
    enum _NDIS_FRAME_HEADER FrameHeader;
    enum _NDIS_RECEIVE_FILTER_TEST ReceiveFilterTest;
    ULONG HeaderField;
    struct _WDI_BYTE16 FieldValue;
    struct _WDI_BYTE16 ResultValue;
    VOID _WDI_RECEIVE_COALESCING_FIELD;
};

typedef struct _WDI_RECEIVE_SEQUENCE_COUNT_STRUCT {
    UCHAR ReceiveSequenceCount[6];
    VOID _WDI_RECEIVE_SEQUENCE_COUNT_STRUCT;
};

typedef struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER {
     _WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional;
    struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER::_WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional Optional;
    struct _WDI_PM_PROTOCOL_OFFLOAD_80211RSN_REKEY_STRUCT RsnKeyInfo;
    struct ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER> CipherKey;
    VOID _WDI_RSN_OFFLOAD_KEYS_CONTAINER;
    VOID ~_WDI_RSN_OFFLOAD_KEYS_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER::_WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional {
    ULONG CipherKey_IsPresent : 1;
    VOID _WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional;
};

typedef struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional {
    ULONG CipherKey_IsPresent : 1;
    VOID _WDI_RSN_OFFLOAD_KEYS_CONTAINER_Optional;
};

typedef struct _WDI_RX_DEFRAG_ENTRY {
    USHORT PortId;
    USHORT PeerId;
    USHORT SequenceNumber;
    USHORT FragmentsReceivedMask;
    ULONG64 StartTime;
    struct _NET_BUFFER_LIST *pNblFragmentChain;
    UCHAR IsInUse;
    VOID InsertFragment;
};

typedef struct _WDI_RX_METADATA {
    enum _WDI_FRAME_PAYLOAD_TYPE PayloadType;
};

typedef struct _WDI_RX_PEER_ENTRY {
    USHORT PortId;
    USHORT PeerId;
    enum _WFC_RX_PEER_STATE RxPeerState;
    struct _WDI_MAC_ADDRESS PeerAddr;
};

typedef struct _WDI_SCAN_DWELL_TIME {
    ULONG ActiveChannelDwellTime;
    ULONG PassiveChannelDwellTime;
    ULONG MaximumScanTime;
    VOID _WDI_SCAN_DWELL_TIME;
};

typedef struct _WDI_SCAN_MODE {
    UCHAR ScanRepeatCount;
    enum _WDI_SCAN_TYPE AllowedScanType;
    UCHAR LiveUpdatesNeeded;
    enum _WDI_SCAN_TRIGGER ScanTrigger;
    VOID _WDI_SCAN_MODE;
};

typedef struct _WDI_SCAN_PARAMETERS {
     _WDI_SCAN_PARAMETERS_Optional;
    struct _WDI_SCAN_PARAMETERS::_WDI_SCAN_PARAMETERS_Optional Optional;
    struct _WDI_MAC_ADDRESS BSSID;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > SSIDList;
    struct ArrayOfElements<unsigned char> VendorIEs;
    struct _WDI_SCAN_MODE ScanModeParameters;
    struct _WDI_SCAN_DWELL_TIME DwellTime;
    struct ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER> BandChannelList;
    VOID _WDI_SCAN_PARAMETERS;
    VOID ~_WDI_SCAN_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SCAN_PARAMETERS::_WDI_SCAN_PARAMETERS_Optional {
    ULONG VendorIEs_IsPresent : 1;
    ULONG BandChannelList_IsPresent : 1;
    VOID _WDI_SCAN_PARAMETERS_Optional;
};

typedef struct _WDI_SCAN_PARAMETERS_Optional {
    ULONG VendorIEs_IsPresent : 1;
    ULONG BandChannelList_IsPresent : 1;
    VOID _WDI_SCAN_PARAMETERS_Optional;
};

typedef struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER {
     _WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional;
    struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER::_WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional Optional;
    struct _WDI_MAC_ADDRESS PeerMacAddress;
    struct _WDI_CIPHER_KEY_ID_STRUCT CipherKeyID;
    struct _WDI_CIPHER_KEY_TYPE_STRUCT CipherKeyTypeInfo;
    struct _WDI_RECEIVE_SEQUENCE_COUNT_STRUCT ReceiveSequenceCount;
    struct ArrayOfElements<unsigned char> CCMPKey;
    struct ArrayOfElements<unsigned char> GCMPKey;
    struct _WDI_CIPHER_KEY_TKIP_INFO_CONTAINER TKIPInfo;
    struct ArrayOfElements<unsigned char> BIPKey;
    struct ArrayOfElements<unsigned char> WEPKey;
    struct ArrayOfElements<unsigned char> IHVKey;
    VOID _WDI_SET_ADD_CIPHER_KEYS_CONTAINER;
    VOID ~_WDI_SET_ADD_CIPHER_KEYS_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER::_WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional {
    ULONG PeerMacAddress_IsPresent : 1;
    ULONG CipherKeyID_IsPresent : 1;
    ULONG ReceiveSequenceCount_IsPresent : 1;
    ULONG CCMPKey_IsPresent : 1;
    ULONG GCMPKey_IsPresent : 1;
    ULONG TKIPInfo_IsPresent : 1;
    ULONG BIPKey_IsPresent : 1;
    ULONG WEPKey_IsPresent : 1;
    ULONG IHVKey_IsPresent : 1;
    VOID _WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional;
};

typedef struct _WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional {
    ULONG PeerMacAddress_IsPresent : 1;
    ULONG CipherKeyID_IsPresent : 1;
    ULONG ReceiveSequenceCount_IsPresent : 1;
    ULONG CCMPKey_IsPresent : 1;
    ULONG GCMPKey_IsPresent : 1;
    ULONG TKIPInfo_IsPresent : 1;
    ULONG BIPKey_IsPresent : 1;
    ULONG WEPKey_IsPresent : 1;
    ULONG IHVKey_IsPresent : 1;
    VOID _WDI_SET_ADD_CIPHER_KEYS_CONTAINER_Optional;
};

typedef struct _WDI_SET_ADD_CIPHER_KEYS_PARAMETERS {
    struct ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER> SetCipherKey;
    VOID _WDI_SET_ADD_CIPHER_KEYS_PARAMETERS;
    VOID ~_WDI_SET_ADD_CIPHER_KEYS_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS {
     _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional;
    struct _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS::_WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional Optional;
    struct _WDI_PM_PROTOCOL_OFFLOAD_IPv4ARP_STRUCT ipv4ARPOffload;
    struct _WDI_PM_PROTOCOL_OFFLOAD_IPv6_STRUCT ipv6ARPOffload;
    struct _WDI_RSN_OFFLOAD_KEYS_CONTAINER DOT11RSNREKeyOffload;
    VOID _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS;
    VOID ~_WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS::_WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional {
    ULONG ipv4ARPOffload_IsPresent : 1;
    ULONG ipv6ARPOffload_IsPresent : 1;
    ULONG DOT11RSNREKeyOffload_IsPresent : 1;
    VOID _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional;
};

typedef struct _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional {
    ULONG ipv4ARPOffload_IsPresent : 1;
    ULONG ipv6ARPOffload_IsPresent : 1;
    ULONG DOT11RSNREKeyOffload_IsPresent : 1;
    VOID _WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_Optional;
};

typedef struct _WDI_SET_ADD_WOL_PATTERN_PARAMETERS {
     _WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional;
    struct _WDI_SET_ADD_WOL_PATTERN_PARAMETERS::_WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional Optional;
    struct ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER> WakePacketPattern;
    ULONG WakePacketMagicPacketPatternId;
    struct ArrayOfElements<_WDI_IPv4_TCP_SYNC> WakePacketIpv4TcpSync;
    struct ArrayOfElements<_WDI_IPv6TCP_SYNC> WakePacketIpv6TcpSync;
    ULONG WakePacketEapolRequestIdPatternId;
    VOID _WDI_SET_ADD_WOL_PATTERN_PARAMETERS;
    VOID ~_WDI_SET_ADD_WOL_PATTERN_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_ADD_WOL_PATTERN_PARAMETERS::_WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional {
    ULONG WakePacketPattern_IsPresent : 1;
    ULONG WakePacketMagicPacketPatternId_IsPresent : 1;
    ULONG WakePacketIpv4TcpSync_IsPresent : 1;
    ULONG WakePacketIpv6TcpSync_IsPresent : 1;
    ULONG WakePacketEapolRequestIdPatternId_IsPresent : 1;
    VOID _WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional;
};

typedef struct _WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional {
    ULONG WakePacketPattern_IsPresent : 1;
    ULONG WakePacketMagicPacketPatternId_IsPresent : 1;
    ULONG WakePacketIpv4TcpSync_IsPresent : 1;
    ULONG WakePacketIpv6TcpSync_IsPresent : 1;
    ULONG WakePacketEapolRequestIdPatternId_IsPresent : 1;
    VOID _WDI_SET_ADD_WOL_PATTERN_PARAMETERS_Optional;
};

typedef struct _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS {
     _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional;
    struct _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS::_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional Optional;
    struct _WDI_ADDITIONAL_IES_CONTAINER AdditionalIEs;
    struct _WDI_P2P_DEVICE_INFO_CONTAINER DeviceInformation;
    struct _WDI_P2P_DEVICE_CAPABILITY_PARAMETERS DeviceCapability;
    struct _WDI_P2P_GROUP_OWNER_CAPABILITY_PARAMETERS GroupOwnerCapability;
    struct ArrayOfElements<_WDI_P2P_DEVICE_TYPE> SecondaryDeviceTypeList;
    struct _WDI_P2P_ADVERTISED_SERVICES_CONTAINER AdvertisedServices;
    VOID _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS;
    VOID ~_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS::_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional {
    ULONG AdditionalIEs_IsPresent : 1;
    ULONG DeviceInformation_IsPresent : 1;
    ULONG DeviceCapability_IsPresent : 1;
    ULONG GroupOwnerCapability_IsPresent : 1;
    ULONG SecondaryDeviceTypeList_IsPresent : 1;
    ULONG AdvertisedServices_IsPresent : 1;
    VOID _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional;
};

typedef struct _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional {
    ULONG AdditionalIEs_IsPresent : 1;
    ULONG DeviceInformation_IsPresent : 1;
    ULONG DeviceCapability_IsPresent : 1;
    ULONG GroupOwnerCapability_IsPresent : 1;
    ULONG SecondaryDeviceTypeList_IsPresent : 1;
    ULONG AdvertisedServices_IsPresent : 1;
    VOID _WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS_Optional;
};

typedef struct _WDI_SET_ASSOCIATION_PARAMS_PARAMETERS {
    struct ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER> BSSEntryList;
    VOID _WDI_SET_ASSOCIATION_PARAMS_PARAMETERS;
    VOID ~_WDI_SET_ASSOCIATION_PARAMS_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_CLEAR_RECEIVE_COALESCING_PARAMETERS {
    ULONG FilterId;
    VOID _WDI_SET_CLEAR_RECEIVE_COALESCING_PARAMETERS;
};

typedef struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER {
     _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional;
    struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER::_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional Optional;
    enum _WDI_CIPHER_KEY_TYPE CipherKeyType;
    enum _WDI_CIPHER_ALGORITHM CipherAlgorithm;
    struct _WDI_RECEIVE_SEQUENCE_COUNT_STRUCT ReceiveSequenceCount;
    struct ArrayOfElements<unsigned char> CCMPKey;
    struct ArrayOfElements<unsigned char> GCMPKey;
    struct _WDI_CIPHER_KEY_TKIP_INFO_CONTAINER TKIPInfo;
    struct ArrayOfElements<unsigned char> BIPKey;
    struct ArrayOfElements<unsigned char> WEPKey;
    struct ArrayOfElements<unsigned char> IHVKey;
    VOID _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER;
    VOID ~_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER::_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional {
    ULONG CCMPKey_IsPresent : 1;
    ULONG GCMPKey_IsPresent : 1;
    ULONG TKIPInfo_IsPresent : 1;
    ULONG BIPKey_IsPresent : 1;
    ULONG WEPKey_IsPresent : 1;
    ULONG IHVKey_IsPresent : 1;
    VOID _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional;
};

typedef struct _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional {
    ULONG CCMPKey_IsPresent : 1;
    ULONG GCMPKey_IsPresent : 1;
    ULONG TKIPInfo_IsPresent : 1;
    ULONG BIPKey_IsPresent : 1;
    ULONG WEPKey_IsPresent : 1;
    ULONG IHVKey_IsPresent : 1;
    VOID _WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER_Optional;
};

typedef struct _WDI_SET_CONNECTION_QUALITY_PARAMETERS {
     _WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional;
    struct _WDI_SET_CONNECTION_QUALITY_PARAMETERS::_WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional Optional;
    enum _WDI_CONNECTION_QUALITY_HINT Quality;
    struct _WDI_LOW_LATENCY_CONNECTION_QUALITY_PARAMETERS LowLatencyParameters;
    VOID _WDI_SET_CONNECTION_QUALITY_PARAMETERS;
};

typedef struct _WDI_SET_CONNECTION_QUALITY_PARAMETERS::_WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional {
    ULONG LowLatencyParameters_IsPresent : 1;
    VOID _WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional;
};

typedef struct _WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional {
    ULONG LowLatencyParameters_IsPresent : 1;
    VOID _WDI_SET_CONNECTION_QUALITY_PARAMETERS_Optional;
};

typedef struct _WDI_SET_DEFAULT_KEY_ID_PARAMETERS {
    struct _WDI_SET_DEFAULT_KEY_ID_STRUCT DefaultKeyIdParameters;
    VOID _WDI_SET_DEFAULT_KEY_ID_PARAMETERS;
};

typedef struct _WDI_SET_DEFAULT_KEY_ID_STRUCT {
    ULONG KeyID;
    VOID _WDI_SET_DEFAULT_KEY_ID_STRUCT;
};

typedef struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER {
     _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional;
    struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER::_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional Optional;
    struct _WDI_MAC_ADDRESS PeerMacAddress;
    struct _WDI_CIPHER_KEY_ID_STRUCT CipherKeyID;
    struct _WDI_CIPHER_KEY_TYPE_STRUCT CipherKeyTypeInfo;
    VOID _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER;
};

typedef struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER::_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional {
    ULONG PeerMacAddress_IsPresent : 1;
    ULONG CipherKeyID_IsPresent : 1;
    VOID _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional;
};

typedef struct _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional {
    ULONG PeerMacAddress_IsPresent : 1;
    ULONG CipherKeyID_IsPresent : 1;
    VOID _WDI_SET_DELETE_CIPHER_KEYS_CONTAINER_Optional;
};

typedef struct _WDI_SET_DELETE_CIPHER_KEYS_PARAMETERS {
    struct ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER> CipherKeyInfo;
    VOID _WDI_SET_DELETE_CIPHER_KEYS_PARAMETERS;
    VOID ~_WDI_SET_DELETE_CIPHER_KEYS_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_ENCAPSULATION_OFFLOAD_PARAMS_PARAMETERS {
    UCHAR EnabledV4;
    UCHAR EnabledV6;
    VOID _WDI_SET_ENCAPSULATION_OFFLOAD_PARAMS_PARAMETERS;
};

typedef struct _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND {
     _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional;
    struct _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND::_WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional Optional;
    LONG status;
    struct ArrayOfElements<unsigned char> RSNIE;
    struct ArrayOfElements<unsigned char> MDE;
    struct ArrayOfElements<unsigned char> FTE;
    VOID _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND;
    VOID ~_WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND::_WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional {
    ULONG RSNIE_IsPresent : 1;
    ULONG MDE_IsPresent : 1;
    ULONG FTE_IsPresent : 1;
    VOID _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional;
};

typedef struct _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional {
    ULONG RSNIE_IsPresent : 1;
    ULONG MDE_IsPresent : 1;
    ULONG FTE_IsPresent : 1;
    VOID _WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND_Optional;
};

typedef struct _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS {
     _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional;
    struct _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS::_WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional Optional;
    struct _WDI_MAC_ADDRESS MacAddress;
    ULONG UnreachableDetectionThreshold;
    enum _WDI_P2P_GO_INTERNAL_RESET_POLICY GroupOwnerResetPolicy;
    struct ArrayOfElements<enum _WDI_BAND_ID> DisallowedBandList;
    struct ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS> LinkQualityBarMap;
    enum _WDI_SCAN_TYPE AdapterNloScanMode;
    UCHAR PLDRSupport;
    VOID _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS;
    VOID ~_WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS::_WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional {
    ULONG MacAddress_IsPresent : 1;
    ULONG UnreachableDetectionThreshold_IsPresent : 1;
    ULONG GroupOwnerResetPolicy_IsPresent : 1;
    ULONG DisallowedBandList_IsPresent : 1;
    ULONG AdapterNloScanMode_IsPresent : 1;
    VOID _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional;
};

typedef struct _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional {
    ULONG MacAddress_IsPresent : 1;
    ULONG UnreachableDetectionThreshold_IsPresent : 1;
    ULONG GroupOwnerResetPolicy_IsPresent : 1;
    ULONG DisallowedBandList_IsPresent : 1;
    ULONG AdapterNloScanMode_IsPresent : 1;
    VOID _WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS_Optional;
};

typedef struct _WDI_SET_MULTICAST_LIST_PARAMETERS {
     _WDI_SET_MULTICAST_LIST_PARAMETERS_Optional;
    struct _WDI_SET_MULTICAST_LIST_PARAMETERS::_WDI_SET_MULTICAST_LIST_PARAMETERS_Optional Optional;
    struct ArrayOfElements<_WDI_MAC_ADDRESS> MulticastList;
    VOID _WDI_SET_MULTICAST_LIST_PARAMETERS;
    VOID ~_WDI_SET_MULTICAST_LIST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_MULTICAST_LIST_PARAMETERS::_WDI_SET_MULTICAST_LIST_PARAMETERS_Optional {
    ULONG MulticastList_IsPresent : 1;
    VOID _WDI_SET_MULTICAST_LIST_PARAMETERS_Optional;
};

typedef struct _WDI_SET_MULTICAST_LIST_PARAMETERS_Optional {
    ULONG MulticastList_IsPresent : 1;
    VOID _WDI_SET_MULTICAST_LIST_PARAMETERS_Optional;
};

typedef struct _WDI_SET_NEIGHBOR_REPORT_ENTRIES_PARAMETERS {
    struct ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER> NeighborReportEntry;
    VOID _WDI_SET_NEIGHBOR_REPORT_ENTRIES_PARAMETERS;
    VOID ~_WDI_SET_NEIGHBOR_REPORT_ENTRIES_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_P2P_LISTEN_STATE_PARAMETERS {
     _WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional;
    struct _WDI_SET_P2P_LISTEN_STATE_PARAMETERS::_WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional Optional;
    enum _WDI_P2P_LISTEN_STATE ListenState;
    struct _WDI_P2P_CHANNEL ListenChannel;
    struct _WDI_P2P_LISTEN_DURATION ListenDuration;
    VOID _WDI_SET_P2P_LISTEN_STATE_PARAMETERS;
};

typedef struct _WDI_SET_P2P_LISTEN_STATE_PARAMETERS::_WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional {
    ULONG ListenChannel_IsPresent : 1;
    VOID _WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional;
};

typedef struct _WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional {
    ULONG ListenChannel_IsPresent : 1;
    VOID _WDI_SET_P2P_LISTEN_STATE_PARAMETERS_Optional;
};

typedef struct _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS {
     _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional;
    struct _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS::_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional Optional;
    struct _WDI_P2P_BACKGROUND_DISCOVER_MODE DiscoverMode;
    struct ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER> DiscoveryChannelSettings;
    struct ArrayOfElements<_WDI_MAC_ADDRESS> DeviceFilterList;
    struct ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH> ServiceNameHash;
    struct ArrayOfElements<unsigned char> VendorIEs;
    VOID _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS;
    VOID ~_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS::_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional {
    ULONG DiscoveryChannelSettings_IsPresent : 1;
    ULONG DeviceFilterList_IsPresent : 1;
    ULONG ServiceNameHash_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    VOID _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional;
};

typedef struct _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional {
    ULONG DiscoveryChannelSettings_IsPresent : 1;
    ULONG DeviceFilterList_IsPresent : 1;
    ULONG ServiceNameHash_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    VOID _WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS_Optional;
};

typedef struct _WDI_SET_P2P_WPS_ENABLED_PARAMETERS {
    UCHAR WPSEnabled;
    VOID _WDI_SET_P2P_WPS_ENABLED_PARAMETERS;
};

typedef struct _WDI_SET_POWER_PARAMETERS {
     _WDI_SET_POWER_PARAMETERS_Optional;
    struct _WDI_SET_POWER_PARAMETERS::_WDI_SET_POWER_PARAMETERS_Optional Optional;
    ULONG PowerState;
    struct _WDI_WAKE_EVENT_MASK WakeEventMask;
    ULONG SetPowerDxReason;
    VOID _WDI_SET_POWER_PARAMETERS;
};

typedef struct _WDI_SET_POWER_PARAMETERS::_WDI_SET_POWER_PARAMETERS_Optional {
    ULONG WakeEventMask_IsPresent : 1;
    ULONG SetPowerDxReason_IsPresent : 1;
    VOID _WDI_SET_POWER_PARAMETERS_Optional;
};

typedef struct _WDI_SET_POWER_PARAMETERS_Optional {
    ULONG WakeEventMask_IsPresent : 1;
    ULONG SetPowerDxReason_IsPresent : 1;
    VOID _WDI_SET_POWER_PARAMETERS_Optional;
};

typedef struct _WDI_SET_POWER_RESULTS {
     _WDI_SET_POWER_RESULTS_Optional;
    struct _WDI_SET_POWER_RESULTS::_WDI_SET_POWER_RESULTS_Optional Optional;
    UCHAR bResumeRequired;
    VOID _WDI_SET_POWER_RESULTS;
};

typedef struct _WDI_SET_POWER_RESULTS::_WDI_SET_POWER_RESULTS_Optional {
    ULONG bResumeRequired_IsPresent : 1;
    VOID _WDI_SET_POWER_RESULTS_Optional;
};

typedef struct _WDI_SET_POWER_RESULTS_Optional {
    ULONG bResumeRequired_IsPresent : 1;
    VOID _WDI_SET_POWER_RESULTS_Optional;
};

typedef struct _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS {
     _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional;
    struct _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS::_WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional Optional;
    struct ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT> PrivacyExemptionEntry;
    VOID _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS;
    VOID ~_WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS::_WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional {
    ULONG PrivacyExemptionEntry_IsPresent : 1;
    VOID _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional;
};

typedef struct _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional {
    ULONG PrivacyExemptionEntry_IsPresent : 1;
    VOID _WDI_SET_PRIVACY_EXEMPTION_LIST_PARAMETERS_Optional;
};

typedef struct _WDI_SET_RADIO_STATE_PARAMETERS {
    UCHAR SoftwareRadioState;
    VOID _WDI_SET_RADIO_STATE_PARAMETERS;
};

typedef struct _WDI_SET_RECEIVE_COALESCING_PARAMETERS {
    struct _ADD_RECEIVE_COALESCING_INFO AddReceiveCoalescing;
    VOID _WDI_SET_RECEIVE_COALESCING_PARAMETERS;
    VOID ~_WDI_SET_RECEIVE_COALESCING_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SET_RECEIVE_PACKET_FILTER_PARAMETERS {
    ULONG PacketFilterType;
    VOID _WDI_SET_RECEIVE_PACKET_FILTER_PARAMETERS;
};

typedef struct _WDI_SET_REMOVE_PM_PROTOCOL_OFFLOAD_PARAMETERS {
    ULONG RemovePMOffload;
    VOID _WDI_SET_REMOVE_PM_PROTOCOL_OFFLOAD_PARAMETERS;
};

typedef struct _WDI_SET_REMOVE_WOL_PATTERN_PARAMETERS {
    ULONG PatternId;
    VOID _WDI_SET_REMOVE_WOL_PATTERN_PARAMETERS;
};

typedef struct _WDI_SET_TCP_OFFLOAD_PARAMS_PARAMETERS {
    struct _WDI_SET_TCP_OFFLOAD_PARAMS_PARAMETERS_STRUCT SetOffloadParameters;
    VOID _WDI_SET_TCP_OFFLOAD_PARAMS_PARAMETERS;
};

typedef struct _WDI_SET_TCP_OFFLOAD_PARAMS_PARAMETERS_STRUCT {
    UCHAR IPv4Checksum;
    UCHAR TCPIPv4Checksum;
    UCHAR UDPIPv4Checksum;
    UCHAR TCPIPv6Checksum;
    UCHAR UDPIPv6Checksum;
    UCHAR LsoV1;
    UCHAR IPsecV1;
    UCHAR LsoV2IPv4;
    UCHAR LsoV2IPv6;
    UCHAR TcpConnectionIPv4;
    UCHAR TcpConnectionIPv6;
    UCHAR RscIPv4;
    UCHAR RscIPv6;
    ULONG Flags;
    UCHAR IPsecV2;
    UCHAR IPsecV2IPv4;
    UCHAR EncapsulatedPacketTaskOffload;
    UCHAR EncapsulationTypes;
    VOID _WDI_SET_TCP_OFFLOAD_PARAMS_PARAMETERS_STRUCT;
};

typedef struct _WDI_SIGNAL_INFO {
    LONG RSSI;
    ULONG LinkQuality;
    VOID _WDI_SIGNAL_INFO;
};

typedef struct _WDI_SSID_OFFLOAD_CONTAINER {
     _WDI_SSID_OFFLOAD_CONTAINER_Optional;
    struct _WDI_SSID_OFFLOAD_CONTAINER::_WDI_SSID_OFFLOAD_CONTAINER_Optional Optional;
    struct ArrayOfElements<unsigned char> SsidToScan;
    struct ArrayOfElements<_WDI_ALGO_PAIRS> UnicastAlgorithms;
    struct ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY> ChannellHintList;
    UCHAR IsDirectedProbeForHiddenPermitted;
    VOID _WDI_SSID_OFFLOAD_CONTAINER;
    VOID ~_WDI_SSID_OFFLOAD_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_SSID_OFFLOAD_CONTAINER::_WDI_SSID_OFFLOAD_CONTAINER_Optional {
    ULONG IsDirectedProbeForHiddenPermitted_IsPresent : 1;
    VOID _WDI_SSID_OFFLOAD_CONTAINER_Optional;
};

typedef struct _WDI_SSID_OFFLOAD_CONTAINER_Optional {
    ULONG IsDirectedProbeForHiddenPermitted_IsPresent : 1;
    VOID _WDI_SSID_OFFLOAD_CONTAINER_Optional;
};

typedef struct _WDI_START_AP_PARAMETERS {
    ULONG BeaconPeriod;
    ULONG DTIMPeriod;
    UCHAR ExcludeUnencrypted;
    UCHAR DataRateSupport802_11b;
    UCHAR AcceptNonP2PClients;
    UCHAR MustUseSpecifiedChannels;
    VOID _WDI_START_AP_PARAMETERS;
};

typedef struct _WDI_START_AP_PARAMETERS_V1_0_1 {
    ULONG BeaconPeriod;
    ULONG DTIMPeriod;
    UCHAR ExcludeUnencrypted;
    UCHAR DataRateSupport802_11b;
    VOID _WDI_START_AP_PARAMETERS_V1_0_1;
};

typedef struct _WDI_STATION_ATTRIBUTES_CONTAINER {
     _WDI_STATION_ATTRIBUTES_CONTAINER_Optional;
    struct _WDI_STATION_ATTRIBUTES_CONTAINER::_WDI_STATION_ATTRIBUTES_CONTAINER_Optional Optional;
    struct _WDI_STATION_CAPABILITIES StationCapabilities;
    struct ArrayOfElements<_WDI_ALGO_PAIRS> UnicastAlgorithms;
    struct ArrayOfElements<_WDI_ALGO_PAIRS> MulticastDataAlgorithms;
    struct ArrayOfElements<_WDI_ALGO_PAIRS> MulticastManagementAlgorithms;
    VOID _WDI_STATION_ATTRIBUTES_CONTAINER;
    VOID ~_WDI_STATION_ATTRIBUTES_CONTAINER;
    PVOID __vecDelDtor;
};

typedef struct _WDI_STATION_ATTRIBUTES_CONTAINER::_WDI_STATION_ATTRIBUTES_CONTAINER_Optional {
    ULONG UnicastAlgorithms_IsPresent : 1;
    ULONG MulticastDataAlgorithms_IsPresent : 1;
    ULONG MulticastManagementAlgorithms_IsPresent : 1;
    VOID _WDI_STATION_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_STATION_ATTRIBUTES_CONTAINER_Optional {
    ULONG UnicastAlgorithms_IsPresent : 1;
    ULONG MulticastDataAlgorithms_IsPresent : 1;
    ULONG MulticastManagementAlgorithms_IsPresent : 1;
    VOID _WDI_STATION_ATTRIBUTES_CONTAINER_Optional;
};

typedef struct _WDI_STATION_CAPABILITIES {
    ULONG ScanSSIDListSize;
    ULONG DesiredBSSIDListSize;
    ULONG DesiredSSIDListSize;
    ULONG PrivacyExemptionListSize;
    ULONG KeyMappingTableSize;
    ULONG DefaultKeyTableSize;
    ULONG WEPKeyValueMaxLength;
    ULONG MaxNumPerSTA;
    UCHAR SupportedQOSFlags;
    UCHAR HostFIPSModeImplemented;
    UCHAR MFPCapable;
    UCHAR AutoPowerSaveMode;
    UCHAR BSSListCachemanagement;
    UCHAR ConnectBSSSelectionOverride;
    ULONG uMaxNetworkOffloadListSize;
    UCHAR HESSIDConnectionSupported;
    UCHAR DisconnectedStandbySupported;
    VOID _WDI_STATION_CAPABILITIES;
};

typedef struct _WDI_TASK_ABORT_PARAMETERS {
    struct _WDI_CANCEL_PARAMETERS_STRUCT CancelParameters;
    VOID _WDI_TASK_ABORT_PARAMETERS;
};

typedef struct _WDI_TASK_CHANGE_OPERATION_MODE_PARAMETERS {
    enum _WDI_OPERATION_MODE OperationMode;
    VOID _WDI_TASK_CHANGE_OPERATION_MODE_PARAMETERS;
};

typedef struct _WDI_TASK_CONNECT_PARAMETERS {
    struct _WDI_CONNECT_PARAMETERS_CONTAINER ConnectParameters;
    struct ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER> PreferredBSSEntryList;
    VOID _WDI_TASK_CONNECT_PARAMETERS;
    VOID ~_WDI_TASK_CONNECT_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_CREATE_PORT_PARAMETERS {
     _WDI_TASK_CREATE_PORT_PARAMETERS_Optional;
    struct _WDI_TASK_CREATE_PORT_PARAMETERS::_WDI_TASK_CREATE_PORT_PARAMETERS_Optional Optional;
    struct _WDI_CREATE_PORT_PARAMETERS CreatePortParameters;
    struct _WDI_MAC_ADDRESS MacAddress;
    VOID _WDI_TASK_CREATE_PORT_PARAMETERS;
};

typedef struct _WDI_TASK_CREATE_PORT_PARAMETERS::_WDI_TASK_CREATE_PORT_PARAMETERS_Optional {
    ULONG MacAddress_IsPresent : 1;
    VOID _WDI_TASK_CREATE_PORT_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_CREATE_PORT_PARAMETERS_Optional {
    ULONG MacAddress_IsPresent : 1;
    VOID _WDI_TASK_CREATE_PORT_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_DELETE_PORT_PARAMETERS {
    struct _WDI_DELETE_PORT_PARAMETERS DeletePortParameters;
    VOID _WDI_TASK_DELETE_PORT_PARAMETERS;
};

typedef struct _WDI_TASK_DISCONNECT_PARAMETERS {
    struct _WDI_DISCONNECT_PARAMETERS DisconnectParameters;
    VOID _WDI_TASK_DISCONNECT_PARAMETERS;
};

typedef struct _WDI_TASK_DOT11_RESET_PARAMETERS {
     _WDI_TASK_DOT11_RESET_PARAMETERS_Optional;
    struct _WDI_TASK_DOT11_RESET_PARAMETERS::_WDI_TASK_DOT11_RESET_PARAMETERS_Optional Optional;
    struct _WDI_DOT11_RESET_PARAMETERS Dot11ResetParameters;
    struct _WDI_MAC_ADDRESS ResetMACAddress;
    VOID _WDI_TASK_DOT11_RESET_PARAMETERS;
};

typedef struct _WDI_TASK_DOT11_RESET_PARAMETERS::_WDI_TASK_DOT11_RESET_PARAMETERS_Optional {
    ULONG ResetMACAddress_IsPresent : 1;
    VOID _WDI_TASK_DOT11_RESET_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_DOT11_RESET_PARAMETERS_Optional {
    ULONG ResetMACAddress_IsPresent : 1;
    VOID _WDI_TASK_DOT11_RESET_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_IHV_PARAMETERS {
     _WDI_TASK_IHV_PARAMETERS_Optional;
    struct _WDI_TASK_IHV_PARAMETERS::_WDI_TASK_IHV_PARAMETERS_Optional Optional;
    struct ArrayOfElements<unsigned char> IHVSpecificContext;
    VOID _WDI_TASK_IHV_PARAMETERS;
    VOID ~_WDI_TASK_IHV_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_IHV_PARAMETERS::_WDI_TASK_IHV_PARAMETERS_Optional {
    ULONG IHVSpecificContext_IsPresent : 1;
    VOID _WDI_TASK_IHV_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_IHV_PARAMETERS_Optional {
    ULONG IHVSpecificContext_IsPresent : 1;
    VOID _WDI_TASK_IHV_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_P2P_DISCOVER_PARAMETERS {
     _WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional;
    struct _WDI_TASK_P2P_DISCOVER_PARAMETERS::_WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional Optional;
    struct _WDI_P2P_DISCOVER_MODE DiscoverMode;
    struct _WDI_SCAN_DWELL_TIME DwellTime;
    struct ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER> DiscoveryChannelSettings;
    struct ArrayOfElements<ArrayOfElements<unsigned char> > SSIDList;
    struct ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH> ServiceNameHash;
    struct ArrayOfElements<unsigned char> VendorIEs;
    struct ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER> ServiceInformationDiscoveryEntry;
    UCHAR bIncludeListenChannel;
    VOID _WDI_TASK_P2P_DISCOVER_PARAMETERS;
    VOID ~_WDI_TASK_P2P_DISCOVER_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_P2P_DISCOVER_PARAMETERS::_WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional {
    ULONG DiscoveryChannelSettings_IsPresent : 1;
    ULONG SSIDList_IsPresent : 1;
    ULONG ServiceNameHash_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    ULONG ServiceInformationDiscoveryEntry_IsPresent : 1;
    ULONG bIncludeListenChannel_IsPresent : 1;
    VOID _WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional {
    ULONG DiscoveryChannelSettings_IsPresent : 1;
    ULONG SSIDList_IsPresent : 1;
    ULONG ServiceNameHash_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    ULONG ServiceInformationDiscoveryEntry_IsPresent : 1;
    ULONG bIncludeListenChannel_IsPresent : 1;
    VOID _WDI_TASK_P2P_DISCOVER_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS {
     _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional;
    struct _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional Optional;
    struct _WDI_P2P_ACTION_FRAME_REQUEST_PARAMETERS RequestParams;
    struct _WDI_P2P_GO_NEGOTIATION_REQUEST_INFO_CONTAINER GONegotiationRequestInfo;
    struct _WDI_P2P_INVITATION_REQUEST_INFO_CONTAINER InvitationRequestInfo;
    struct _WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER ProvisionDiscoveryRequestInfo;
    struct _WDI_BSS_ENTRY_CONTAINER DeviceDescriptor;
    struct ArrayOfElements<unsigned char> VendorIEs;
    VOID _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS;
    VOID ~_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional {
    ULONG GONegotiationRequestInfo_IsPresent : 1;
    ULONG InvitationRequestInfo_IsPresent : 1;
    ULONG ProvisionDiscoveryRequestInfo_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    VOID _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional {
    ULONG GONegotiationRequestInfo_IsPresent : 1;
    ULONG InvitationRequestInfo_IsPresent : 1;
    ULONG ProvisionDiscoveryRequestInfo_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    VOID _WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS {
     _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional;
    struct _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional Optional;
    struct _WDI_P2P_SEND_ACTION_FRAME_RESPONSE_PARAMETERS ResponseParams;
    struct _WDI_P2P_GO_NEGOTIATION_RESPONSE_INFO_CONTAINER GONegotiationResponseInfo;
    struct _WDI_P2P_GO_NEGOTIATION_CONFIRMATION_INFO_CONTAINER GONegotiationConfirmationInfo;
    struct _WDI_P2P_INVITATION_RESPONSE_INFO_CONTAINER InvitationResponseInfo;
    struct _WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER ProvisionDiscoveryResponseInfo;
    struct _WDI_INCOMING_P2P_ACTION_FRAME_INFO PrecedingFrameInformation;
    struct ArrayOfElements<unsigned char> VendorIEs;
    VOID _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS;
    VOID ~_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional {
    ULONG GONegotiationResponseInfo_IsPresent : 1;
    ULONG GONegotiationConfirmationInfo_IsPresent : 1;
    ULONG InvitationResponseInfo_IsPresent : 1;
    ULONG ProvisionDiscoveryResponseInfo_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    VOID _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional {
    ULONG GONegotiationResponseInfo_IsPresent : 1;
    ULONG GONegotiationConfirmationInfo_IsPresent : 1;
    ULONG InvitationResponseInfo_IsPresent : 1;
    ULONG ProvisionDiscoveryResponseInfo_IsPresent : 1;
    ULONG VendorIEs_IsPresent : 1;
    VOID _WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_ROAM_PARAMETERS {
    struct _WDI_CONNECT_PARAMETERS_CONTAINER ConnectParameters;
    struct ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER> PreferredBSSEntryList;
    VOID _WDI_TASK_ROAM_PARAMETERS;
    VOID ~_WDI_TASK_ROAM_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS {
     _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional;
    struct _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS::_WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional Optional;
    struct _WDI_AP_ASSOCIATION_RESPONSE_PARAMETERS AssocResponseParameters;
    struct ArrayOfElements<unsigned char> VendorIEs;
    struct _WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER IncomingRequestInfo;
    UCHAR WFDAssociationStatus;
    VOID _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS;
    VOID ~_WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS::_WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional {
    ULONG VendorIEs_IsPresent : 1;
    ULONG WFDAssociationStatus_IsPresent : 1;
    VOID _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional {
    ULONG VendorIEs_IsPresent : 1;
    ULONG WFDAssociationStatus_IsPresent : 1;
    VOID _WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_SEND_REQUEST_ACTION_FRAME_PARAMETERS {
    struct _WDI_ACTION_FRAME_REQUEST_PARAMETERS RequestParams;
    struct ArrayOfElements<unsigned char> ActionFrameBody;
    VOID _WDI_TASK_SEND_REQUEST_ACTION_FRAME_PARAMETERS;
    VOID ~_WDI_TASK_SEND_REQUEST_ACTION_FRAME_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_SEND_RESPONSE_ACTION_FRAME_PARAMETERS {
    struct _WDI_ACTION_FRAME_REQUEST_PARAMETERS ResponseParams;
    struct ArrayOfElements<unsigned char> ActionFrameBody;
    VOID _WDI_TASK_SEND_RESPONSE_ACTION_FRAME_PARAMETERS;
    VOID ~_WDI_TASK_SEND_RESPONSE_ACTION_FRAME_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_START_AP_PARAMETERS {
     _WDI_TASK_START_AP_PARAMETERS_Optional;
    struct _WDI_TASK_START_AP_PARAMETERS::_WDI_TASK_START_AP_PARAMETERS_Optional Optional;
    struct ArrayOfElements<unsigned char> DesiredSSID;
    struct _WDI_START_AP_PARAMETERS StaticParameters;
    struct ArrayOfElements<enum _WDI_AUTH_ALGORITHM> AuthenticationAlgorithms;
    struct ArrayOfElements<enum _WDI_CIPHER_ALGORITHM> MulticastCipherAlgorithms;
    struct ArrayOfElements<enum _WDI_CIPHER_ALGORITHM> UnicastCipherAlgorithms;
    struct _WDI_P2P_CHANNEL AdvertisedOperatingChannel;
    struct ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER> APBandChannelList;
    VOID _WDI_TASK_START_AP_PARAMETERS;
    VOID ~_WDI_TASK_START_AP_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_START_AP_PARAMETERS::_WDI_TASK_START_AP_PARAMETERS_Optional {
    ULONG AdvertisedOperatingChannel_IsPresent : 1;
    ULONG APBandChannelList_IsPresent : 1;
    VOID _WDI_TASK_START_AP_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_START_AP_PARAMETERS_Optional {
    ULONG AdvertisedOperatingChannel_IsPresent : 1;
    ULONG APBandChannelList_IsPresent : 1;
    VOID _WDI_TASK_START_AP_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_TEST_PARAMETERS {
     _WDI_TASK_TEST_PARAMETERS_Optional;
    struct _WDI_TASK_TEST_PARAMETERS::_WDI_TASK_TEST_PARAMETERS_Optional Optional;
    struct ArrayOfElements<unsigned long> Newsocoomomc;
    ULONG Newsocoomosc;
    struct ArrayOfElements<unsigned long> Newsocoosomc;
    ULONG Newsocoososc;
    struct ArrayOfElements<unsigned long> Newsocromomc;
    ULONG Newsocromosc;
    struct ArrayOfElements<unsigned long> Newsocrosomc;
    ULONG Newsocrososc;
    struct ArrayOfElements<unsigned long> Newsrcoomomc;
    ULONG Newsrcoomosc;
    struct ArrayOfElements<unsigned long> Newsrcoosomc;
    struct _TEST_AGGREGATE_CONTAINER Newsrcoososc;
    struct ArrayOfElements<unsigned long> Newsrcromomc;
    ULONG Newsrcromosc;
    struct ArrayOfElements<unsigned long> Newsrcrosomc;
    ULONG Newsrcrososc;
    struct ArrayOfElements<unsigned long> Newnocmc;
    ULONG Newnocsc;
    struct ArrayOfElements<unsigned long> Newnrcmc;
    ULONG Newnrcsc;
    VOID _WDI_TASK_TEST_PARAMETERS;
    VOID ~_WDI_TASK_TEST_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WDI_TASK_TEST_PARAMETERS::_WDI_TASK_TEST_PARAMETERS_Optional {
    ULONG Newsocoomomc_IsPresent : 1;
    ULONG Newsocoomosc_IsPresent : 1;
    ULONG Newsocoosomc_IsPresent : 1;
    ULONG Newsocoososc_IsPresent : 1;
    ULONG Newsocromomc_IsPresent : 1;
    ULONG Newsocromosc_IsPresent : 1;
    ULONG Newsocrosomc_IsPresent : 1;
    ULONG Newsocrososc_IsPresent : 1;
    ULONG Newnocmc_IsPresent : 1;
    ULONG Newnocsc_IsPresent : 1;
    VOID _WDI_TASK_TEST_PARAMETERS_Optional;
};

typedef struct _WDI_TASK_TEST_PARAMETERS_Optional {
    ULONG Newsocoomomc_IsPresent : 1;
    ULONG Newsocoomosc_IsPresent : 1;
    ULONG Newsocoosomc_IsPresent : 1;
    ULONG Newsocoososc_IsPresent : 1;
    ULONG Newsocromomc_IsPresent : 1;
    ULONG Newsocromosc_IsPresent : 1;
    ULONG Newsocrosomc_IsPresent : 1;
    ULONG Newsocrososc_IsPresent : 1;
    ULONG Newnocmc_IsPresent : 1;
    ULONG Newnocsc_IsPresent : 1;
    VOID _WDI_TASK_TEST_PARAMETERS_Optional;
};

typedef struct _WDI_TCP_OFFLOAD_CAPABILITIES_CONTAINER {
    struct _WDI_CHECKSUM_OFFLOAD_CAPABILITIES_CONTAINER ChecksumOffload;
    struct _WDI_LSO_V1_CAPABILITIES LsoV1Capabilities;
    struct _WDI_LSO_V2_CAPABILITIES_CONTAINER LsoV2Capabilities;
    struct _WDI_RECEIVE_COALESCE_OFFLOAD_CAPABILITIES ReceiveOffloadCapabilities;
    struct _WDI_OFFLOAD_SCOPE OffloadScope;
    VOID _WDI_TCP_OFFLOAD_CAPABILITIES_CONTAINER;
};

typedef struct _WDI_TCP_RSC_STATISTICS_PARAMETERS {
    struct _WDI_TCP_RSC_STATISTICS_STRUCT RscStatsParams;
    VOID _WDI_TCP_RSC_STATISTICS_PARAMETERS;
};

typedef struct _WDI_TCP_RSC_STATISTICS_STRUCT {
    ULONG64 CoalescedPkts;
    ULONG64 CoalescedOctets;
    ULONG64 CoalesceEvents;
    ULONG64 Aborts;
    VOID _WDI_TCP_RSC_STATISTICS_STRUCT;
};

typedef struct _WDI_TKIP_MIC_FAILURE_PARAMETERS {
    UCHAR DefaultKeyFailure;
    ULONG KeyIndex;
    struct _WDI_MAC_ADDRESS PeerMacAddress;
    VOID _WDI_TKIP_MIC_FAILURE_PARAMETERS;
};

typedef struct _WDI_TXRX_PARAMETERS {
    struct _WDI_TXRX_TARGET_CAPABILITIES TxRxCapabilities;
};

typedef struct _WDI_TXRX_PEER_CFG {
    enum _WDI_TXRX_PEER_QOS_CAPS PeerQoSConfig;
};

typedef struct _WDI_TXRX_TARGET_CAPABILITIES {
    enum _WDI_INTERCONNECT_TYPE InterconnectType;
     <unnamed-type-TransmitCapabilities>;
    struct {
        UCHAR TargetPriorityQueueing;
        USHORT MaxScatterGatherElementsPerFrame;
        UCHAR ExplicitSendCompleteFlagRequired;
        UCHAR bPad;
        USHORT MinEffectiveSize;
        USHORT FrameSizeGranularity;
    } TransmitCapabilities;
     <unnamed-type-ReceiveCapabilities>;
    struct {
        UCHAR RxTxForwarding;
        ULONG MaxThroughput;
    } ReceiveCapabilities;
};

typedef struct _WDI_TXRX_TARGET_CONFIGURATION {
    struct _WDI_TXRX_PARAMETERS TxRxParams;
    UCHAR MaxNumPorts;
    UCHAR MaxNumPeers;
};

typedef struct _WDI_TX_COMPLETE_DATA {
    USHORT SeqCtl;
    UCHAR PnLength;
    UCHAR RetryCount;
    USHORT wPad;
    union _WDI_TXRX_MPDU_PN MpduPN;
    ULONG64 ReplayIHVReserved0;
    ULONG64 ReplayIHVReserved1;
};

typedef struct _WDI_TX_METADATA {
    USHORT PortID;
    USHORT PeerID;
    UCHAR ExTID;
    UCHAR IsUnicast;
    UCHAR bAllowLegacyRates;
    USHORT Ethertype;
    UCHAR bTxCompleteRequired;
    UCHAR PnLength;
    USHORT TxCost;
    enum _WDI_EXEMPTION_ACTION_TYPE ExemptionAction;
    union _WDI_TXRX_MPDU_PN MpduPn;
    ULONG64 ReplayIHVReserved0;
    ULONG64 ReplayIHVReserved1;
    USHORT SeqCtl;
    USHORT wPad;
};

typedef struct _WDI_TYPE_PMK_NAME {
    UCHAR Name[16];
};

typedef struct _WDI_VIRTUALIZATION_ATTRIBUTES_CONTAINER {
    struct _WDI_VIRTUALIZATION_CAPABILITIES VirtualizationCapabilities;
    VOID _WDI_VIRTUALIZATION_ATTRIBUTES_CONTAINER;
};

typedef struct _WDI_VIRTUALIZATION_CAPABILITIES {
    UCHAR ExtSTACount;
    UCHAR WiFiDirectGroupCount;
    UCHAR APCount;
    UCHAR SimultaneousGoCount;
    UCHAR SimultaneousMultiChannelOperationLimit;
    UCHAR SimultaneousSTAWFDClientCount;
    VOID _WDI_VIRTUALIZATION_CAPABILITIES;
};

typedef struct _WDI_WAKE_EVENT_MASK {
    ULONG EnabledWoLPacketPatterns;
    ULONG EnabledProtocolOffloads;
    ULONG WakeUpFlags;
    ULONG MediaSpecificWakeUpEvents;
    VOID _WDI_WAKE_EVENT_MASK;
};

typedef struct _WFC_AC_ENTRY {
    struct _LIST_ENTRY m_TxQueueList;
    ULONG64 TxQueueCount;
    enum _WFC_ACCESS_CATEGORY Ac;
    USHORT Priority;
};

typedef struct _WFC_BSS_ENTRY_CHANNEL_INFO {
    ULONG Channel;
    enum _WDI_BAND_ID BandId;
};

typedef struct _WFC_BSS_ENTRY_NLO_MATCHING_CRITERIA {
    VOID _WFC_BSS_ENTRY_NLO_MATCHING_CRITERIA;
    struct _BUFFER_DOT11_SSID SSIDList;
};

typedef struct _WFC_BSS_ENTRY_SIGNAL_INFO {
    LONG Rssi;
    ULONG LinkQuality;
};

typedef struct _WFC_COMMAND_METADATA {
    ULONG MappedWdiOid;
    ULONG MinimumOutputLength;
    struct _NDIS_OID_REQUEST *pOriginalOidRequest;
};

typedef struct _WFC_CONNECTION_PROFILE_PARAMETERS {
    VOID _WFC_CONNECTION_PROFILE_PARAMETERS;
    VOID ~_WFC_CONNECTION_PROFILE_PARAMETERS;
    struct _BUFFER_DOT11_SSID SSIDList;
    UCHAR AccessNetworkType;
    struct _BUFFER_DOT11_HESSID HESSIDList;
    struct _BUFFER_UINT8 HotspotIndicationElement;
    struct _BUFFER_DOT11_AUTH_ALGO AuthAlgoList;
    struct _BUFFER_DOT11_CIPHER_ALGO MulticastCipherAlgoList;
    struct _BUFFER_DOT11_CIPHER_ALGO UnicastCipherAlgoList;
    UCHAR RoamRequest;
    UCHAR HiddenNetwork;
    UCHAR ExcludeUnencrypted;
    UCHAR MFPEnabled;
    UCHAR HostFIPSModeEnabled;
    struct _BUFFER_MAC_ADDRESS BSSIDList;
    UCHAR AcceptAnyBSSID;
    struct _BUFFER_MAC_ADDRESS ExcludedMacAddressList;
    UCHAR IgnoreAllMACAddresses;
    PVOID __vecDelDtor;
};

typedef struct _WFC_CONNECT_JOB_PARAMETERS {
    struct _WFC_CONNECTION_PROFILE_PARAMETERS pProfileParameters;
    VOID _WFC_CONNECT_JOB_PARAMETERS;
    USHORT m_PmkidEntryCount;
    struct DOT11_PMKID_ENTRY *pPmkidEntries;
    struct _BUFFER_UINT8 ExtraAssociationRequestIEs;
    ULONG m_ConnectionCandidateCount;
    CBSSEntry **ppConnectionCandidates;
    VOID ~_WFC_CONNECT_JOB_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WFC_DATAPATH_CAPABILITIES {
    enum _WDI_INTERCONNECT_TYPE InterconnectType;
    UCHAR MaxNumPeers;
    UCHAR TxTargetPriorityQueueing;
    USHORT TxMaxScatterGatherElementsPerFrame;
    UCHAR TxExplicitSendCompleteFlagRequired;
    USHORT TxMinEffectiveFrameSize;
    USHORT TxFrameSizeGranularity;
    UCHAR RxTxForwarding;
    ULONG RxMaxThroughput;
};

typedef struct _WFC_FRAME {
    ULONG ulSizeOfThis;
    enum _WFC_FRAME_TYPE FrameType;
    ULONG64 FrameNum;
     <unnamed-type-u>;
    union {
        struct _WFC_TX_FRAME Tx;
        struct _WFC_RX_FRAME Rx;
    } u;
    struct _WDI_FRAME_METADATA WiFiFrameMetadata;
};

typedef struct _WFC_INDICATION_METADATA {
    LONG MappedWdiIndicationCode;
};

typedef struct _WFC_MESSAGE_METADATA {
    ULONG MessageId;
    ULONG MessageLength;
    ULONG UseDirectOidCall : 1;
    ULONG RetryOnSmallBuffer : 1;
    ULONG NonWdiOid : 1;
    enum WFC_MESSAGE_TYPE MessageType;
     _WFC_COMMAND_METADATA;
     _WFC_RESPONSE_METADATA;
     _WFC_INDICATION_METADATA;
    struct _WFC_MESSAGE_METADATA::_WFC_COMMAND_METADATA _Command;
    struct _WFC_MESSAGE_METADATA::_WFC_RESPONSE_METADATA _Response;
    struct _WFC_MESSAGE_METADATA::_WFC_INDICATION_METADATA _Indication;
    struct _WDI_MESSAGE_HEADER Message;
    VOID _WFC_MESSAGE_METADATA;
    VOID Initialize;
    struct _WFC_MESSAGE_METADATA::_WFC_COMMAND_METADATA *Command;
    struct _WFC_MESSAGE_METADATA::_WFC_RESPONSE_METADATA *Response;
    struct _WFC_MESSAGE_METADATA::_WFC_INDICATION_METADATA *Indication;
};

typedef struct _WFC_MESSAGE_METADATA::_WFC_COMMAND_METADATA {
    ULONG MappedWdiOid;
    ULONG MinimumOutputLength;
    struct _NDIS_OID_REQUEST *pOriginalOidRequest;
};

typedef struct _WFC_MESSAGE_METADATA::_WFC_INDICATION_METADATA {
    LONG MappedWdiIndicationCode;
};

typedef struct _WFC_MESSAGE_METADATA::_WFC_RESPONSE_METADATA {
    ULONG MappedWdiOid;
    LONG OidCompletionStatus;
    ULONG OidBytesNeeded;
    ULONG OidBytesWritten;
};

typedef struct _WFC_NETWORK_BLOCKED_INFO {
    VOID Initialize;
    ULONG BlockedReason;
    ULONG64 LastAssocFailTime;
    ULONG NumConsecutive11rFailures;
};

typedef struct _WFC_NETWORK_CHANNEL_ENTRY {
    enum _WDI_BAND_ID BandId;
    ULONG ChannelNumber;
    ULONG ConnectUsageCount;
    BOOLEAN FoundInCandidateList;
    VOID Initialize;
    BOOLEAN IsValid;
};

typedef struct _WFC_PEER_TABLE_ENTRY {
    USHORT PortId;
    USHORT PeerId;
    struct _WDI_MAC_ADDRESS PeerAddr;
    UCHAR bInUse;
};

typedef struct _WFC_PROPERTY_ENTRY {
    VOID _WFC_PROPERTY_ENTRY;
    VOID ~_WFC_PROPERTY_ENTRY;
    VOID CleanUp;
    ULONG Name;
    enum _WFC_PROPERTY_TYPE Type;
    BOOLEAN IsPopulated;
    LONG InitializeFromDefault;
    ULONG ULongProperty;
    UCHAR BooleanProperty;
    UCHAR UcharProperty;
    CPropertyCache *PropertyCacheList;
    struct _WFC_VARIABLE_BUFFER_PROPERTY BufferProperty;
    struct _WFC_PROPERTY_ENTRY *pDefaultEntry;
    PVOID __vecDelDtor;
};

typedef struct _WFC_PROPERTY_LOAD_INFO {
    ULONG PropertyName;
    enum _WFC_PROPERTY_TYPE WfcPropertyType;
    ULONG ElementSourceOffset;
    ULONG ElementSourceSize;
    ULONG ElementCountSourceOffset;
    ULONG ElementCountSourceSize;
};

typedef struct _WFC_RESPONSE_METADATA {
    ULONG MappedWdiOid;
    LONG OidCompletionStatus;
    ULONG OidBytesNeeded;
    ULONG OidBytesWritten;
};

typedef struct _WFC_RX_FRAME {
    USHORT PortId;
    USHORT PeerId;
    UCHAR ExTid;
    struct _NET_BUFFER_LIST *MSDUFragmentNblChain;
    ULONG cbMSDUFragmentMPDUHeaderSize;
    struct DOT11_EXTSTA_RECV_CONTEXT *pDot11RecvContext;
    UCHAR Rssi;
    LONG Cloned;
};

typedef struct _WFC_SCAN_JOB_PARAMETERS {
    VOID InitializeDefaults;
    struct _DOT11_SSID *pSSIDList;
    ULONG SSIDListCount;
    PUCHAR pVendorIEs;
    ULONG VendorIELength;
    PULONG pChannelList24GHz;
    ULONG ChannelList24GHzCount;
    PULONG pChannelList5GHz;
    ULONG ChannelList5GHzCount;
    struct _WDI_SCAN_PARAMETERS WdiScanParameters;
    BOOLEAN BypassScanThrottling;
    BOOLEAN UpdateBSSListCache;
    VOID _WFC_SCAN_JOB_PARAMETERS;
    VOID ~_WFC_SCAN_JOB_PARAMETERS;
    PVOID __vecDelDtor;
};

typedef struct _WFC_TX_ENTRY {
    UCHAR bInUse;
    USHORT TxId;
    USHORT PortId;
    USHORT PeerId;
    ULONG TxEntryState;
    struct _WDI_MAC_ADDRESS MacAddr;
    ULONG InOrderNotifPendingBitmask;
    USHORT BacklogCount;
    USHORT TransferPendingCount;
    USHORT TxPendingCount;
    enum _WDI_TX_PAUSE_REASON TidPauseState[25];
    ULONG MaxQueueCount;
    struct _WFC_TX_QUEUE **ppTxQueue;
};

typedef struct _WFC_TX_FRAME {
    struct _LIST_ENTRY FrameTableLink;
    struct _NET_BUFFER_LIST *pCloneNbl;
    ULONG NumOldDetection;
    enum _WDI_TX_FRAME_STATUS TransferStatus;
    enum _WDI_TX_FRAME_STATUS SendStatus;
    UCHAR bIsDequeued;
    UCHAR bIsTransferStatusSet;
    UCHAR bIsSendStatusSet;
    UCHAR bIsReplayDataSet;
    UCHAR bIsPortPending;
};

typedef struct _WFC_TX_QUEUE {
    struct _LIST_ENTRY BacklogQueue;
    struct _LIST_ENTRY GlobalTxQueueListEntry;
    struct _LIST_ENTRY ACListEntry;
    USHORT BacklogCount;
    USHORT TransferPendingCount;
    USHORT TxPendingCount;
    UCHAR bInUse;
    ULONG TxQueueState;
    UCHAR Tid;
    USHORT PortId;
    USHORT PeerId;
    enum _WFC_ACCESS_CATEGORY Ac;
};

typedef struct _WFC_VARIABLE_BUFFER_PROPERTY {
    VOID _WFC_VARIABLE_BUFFER_PROPERTY;
    VOID Cleanup;
    VOID ~_WFC_VARIABLE_BUFFER_PROPERTY;
    LONG CopyBuffer;
    PUCHAR m_PropertyBuffer;
    ULONG m_CurrentBufferLength;
    ULONG m_MaxBufferLength;
    USHORT m_CurrentElementCount;
    PVOID __vecDelDtor;
};

typedef struct _WFD_OTA_ADVERTISED_SERVICE_DESCRIPTOR {
    ULONG AdvertisementID;
    USHORT ConfigMethods;
    UCHAR ServiceNameLength;
    UCHAR ServiceName[1];
};

typedef struct _WFD_OTA_ADVERTISED_SERVICE_INFO {
    struct _WFD_OTA_ADVERTISED_SERVICE_DESCRIPTOR AdvertisedServiceDescriptors[1];
};

typedef struct _WFD_OTA_GROUP_CAPABILITY {
    UCHAR bOperatingAsGroupOwner : 1;
    UCHAR bIsPersistentGroup : 1;
    UCHAR bGroupLimitReached : 1;
    UCHAR bIntraBSSDistributionSupported : 1;
    UCHAR bCrossConnectionSupported : 1;
    UCHAR bPersistentReconnectSupported : 1;
    UCHAR bGroupFormationEnabled : 1;
    UCHAR bEapolKeyIpAddressAllocationSupported : 1;
};

typedef struct _WHEA_ERROR_PACKET_V2 {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    struct _GUID NotifyType;
    ULONG64 Context;
    enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
    ULONG Reserved1;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG PshedDataOffset;
    ULONG PshedDataLength;
};

typedef struct _WHEA_ERROR_RECORD {
    struct _WHEA_ERROR_RECORD_HEADER Header;
    struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
};

typedef struct _WHEA_ERROR_RECORD_HEADER {
    ULONG Signature;
    union _WHEA_REVISION Revision;
    ULONG SignatureEnd;
    USHORT SectionCount;
    enum _WHEA_ERROR_SEVERITY Severity;
    union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
    ULONG Length;
    union _WHEA_TIMESTAMP Timestamp;
    struct _GUID PlatformId;
    struct _GUID PartitionId;
    struct _GUID CreatorId;
    struct _GUID NotifyType;
    ULONG64 RecordId;
    union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
    union _WHEA_PERSISTENCE_INFO PersistenceInfo;
    UCHAR Reserved[12];
};

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
    ULONG SectionOffset;
    ULONG SectionLength;
    union _WHEA_REVISION Revision;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
    UCHAR Reserved;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
    struct _GUID SectionType;
    struct _GUID FRUId;
    enum _WHEA_ERROR_SEVERITY SectionSeverity;
    CHAR FRUText[20];
};

typedef struct _WHEA_EVENT_LOG_ENTRY {
    struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
};

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
    ULONG OwnerTag;
    enum _WHEA_EVENT_LOG_ENTRY_ID Id;
    union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
    ULONG PayloadLength;
};

typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
};

typedef struct _WOL_BITMAP_PATTERN {
    ULONG Flags;
    ULONG MaskOffset;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
};

typedef struct _WORK_QUEUE_ITEM {
    struct _LIST_ENTRY List;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _XDV_CONTEXT_HEADER {
    struct _LIST_ENTRY Entry;
    enum _XDV_DRIVER_TYPE Type;
    LONG BlobLock;
    UCHAR OldIrql;
    struct _XDV_DEBUGGER_STATE DebuggerContext;
    ULONG BlobSize;
    PVOID Blob;
    ULONG Pause;
    union _LARGE_INTEGER BlobLockStartTime;
    union _LARGE_INTEGER TimeSpentUnderBlobLock;
    ULONG64 Prevent;
    ULONG BlobLockTimeSpentLog[64];
    LONG BlobLockTimeSpentLogNext;
};

typedef struct _XDV_DEBUGGER_STATE {
    PVOID TimedExtensions;
};

typedef struct _XDV_EXPORT_TABLE {
    PLONG CreateState;
    PVOID *LoadState;
    PVOID FreeState;
    PVOID CreateWatchedState;
    PVOID FindWatchedState;
    PVOID FindCreateWatchedState;
    PVOID GetFirstWatchedState;
    PVOID GetNextWatchedState;
    struct _XDV_WATCH_HEAD **FreeWatchedState;
    PVOID StartCriticalSection;
    PVOID EndCriticalSection;
    PVOID BugcheckStateful;
    PVOID BugcheckStateless;
    PUCHAR StartTimedExtension;
    PUCHAR StopTimedExtension;
    PLONG GetTimeTick;
    PUCHAR GetCurrentIrql;
    PVOID *AllocatePool;
    PVOID FreePool;
    PULONG ReadExtensionConfiguration;
    PVOID *GetPluginExportTable;
    PUCHAR ReadRegistryKeyDword;
};

typedef struct _XDV_WATCH_HEAD {
    struct _LIST_ENTRY Entry;
    ULONG Size;
    PVOID Guard;
    PVOID Stack[10];
};

typedef struct _XSAVE_AREA_HEADER {
    ULONG64 Mask;
    ULONG64 CompactionMask;
    ULONG64 Reserved2[6];
};

typedef struct _XSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    UCHAR TagWord;
    UCHAR Reserved1;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    USHORT ErrorSelector;
    USHORT Reserved2;
    ULONG DataOffset;
    USHORT DataSelector;
    USHORT Reserved3;
    ULONG MxCsr;
    ULONG MxCsr_Mask;
    struct _M128A FloatRegisters[8];
    struct _M128A XmmRegisters[16];
    UCHAR Reserved4[96];
};

typedef struct _XSTATE_CONFIGURATION {
    ULONG64 EnabledFeatures;
    ULONG64 EnabledVolatileFeatures;
    ULONG Size;
    ULONG ControlFlags;
    ULONG OptimizedSave : 1;
    ULONG CompactionEnabled : 1;
    struct _XSTATE_FEATURE Features[64];
    ULONG64 EnabledSupervisorFeatures;
    ULONG64 AlignedFeatures;
    ULONG AllFeatureSize;
    ULONG AllFeatures[64];
    ULONG64 EnabledUserVisibleSupervisorFeatures;
};

typedef struct _XSTATE_FEATURE {
    ULONG Offset;
    ULONG Size;
};

typedef struct __vc_attributes::aggregatableAttribute {
    LONG type_e;
    VOID aggregatableAttribute;
    VOID aggregatableAttribute;
    enum __vc_attributes::aggregatableAttribute::type_e type;
};

typedef struct __vc_attributes::event_receiverAttribute {
    LONG type_e;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    enum __vc_attributes::event_receiverAttribute::type_e type;
    BOOLEAN layout_dependent;
};

typedef struct __vc_attributes::event_sourceAttribute {
    LONG type_e;
    LONG optimize_e;
    VOID event_sourceAttribute;
    VOID event_sourceAttribute;
    enum __vc_attributes::event_sourceAttribute::type_e type;
    enum __vc_attributes::event_sourceAttribute::optimize_e optimize;
    BOOLEAN decorate;
};

typedef struct __vc_attributes::helper_attributes::usageAttribute {
    LONG usage_e;
    VOID usageAttribute;
    ULONG value;
};

typedef struct __vc_attributes::helper_attributes::v1_alttypeAttribute {
    LONG type_e;
    VOID v1_alttypeAttribute;
    enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

typedef struct __vc_attributes::moduleAttribute {
    LONG type_e;
    VOID moduleAttribute;
    VOID moduleAttribute;
    VOID moduleAttribute;
    enum __vc_attributes::moduleAttribute::type_e type;
    PCHAR name;
    PCHAR version;
    PCHAR uuid;
    LONG lcid;
    BOOLEAN control;
    PCHAR helpstring;
    LONG helpstringcontext;
    PCHAR helpstringdll;
    PCHAR helpfile;
    LONG helpcontext;
    BOOLEAN hidden;
    BOOLEAN restricted;
    PCHAR custom;
    PCHAR resource_name;
};

typedef struct __vc_attributes::threadingAttribute {
    LONG threading_e;
    VOID threadingAttribute;
    VOID threadingAttribute;
    enum __vc_attributes::threadingAttribute::threading_e value;
};

typedef struct _ldiv_t {
    LONG quot;
    LONG rem;
};

typedef struct _s__RTTIBaseClassArray {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[0];
};

typedef struct _s__RTTIBaseClassDescriptor2 {
    struct _TypeDescriptor *pTypeDescriptor;
    ULONG numContainedBases;
    struct _PMD where;
    ULONG attributes;
    struct _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

typedef struct _s__RTTIClassHierarchyDescriptor {
    ULONG signature;
    ULONG attributes;
    ULONG numBaseClasses;
    struct _s__RTTIBaseClassArray *pBaseClassArray;
};

typedef struct _s__RTTICompleteObjectLocator2 {
    ULONG signature;
    ULONG offset;
    ULONG cdOffset;
    struct _TypeDescriptor *pTypeDescriptor;
    struct _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
    struct _s__RTTICompleteObjectLocator2 *pSelf;
};

typedef struct in6_addr {
     <unnamed-type-u>;
    union {
        UCHAR Byte[16];
        USHORT Word[8];
    } u;
};

typedef struct in_addr {
     <unnamed-type-S_un>;
    union {
         <unnamed-type-S_un_b>;
        struct {
            UCHAR s_b1;
            UCHAR s_b2;
            UCHAR s_b3;
            UCHAR s_b4;
        } S_un_b;
         <unnamed-type-S_un_w>;
        struct {
            USHORT s_w1;
            USHORT s_w2;
        } S_un_w;
        ULONG S_addr;
    } S_un;
};

typedef struct sockaddr {
    USHORT sa_family;
    CHAR sa_data[14];
};

typedef struct sockaddr_in {
    USHORT sin_family;
    USHORT sin_port;
    struct in_addr sin_addr;
    CHAR sin_zero[8];
};

typedef struct sockaddr_in6 {
    USHORT sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    struct in6_addr sin6_addr;
    ULONG sin6_scope_id;
    struct SCOPE_ID sin6_scope_struct;
};

typedef union DMG_PARAMETERS {
    UCHAR BSSType : 2;
    UCHAR CBAPOnly : 1;
    UCHAR CBAPSource : 1;
    UCHAR DMGPrivacy : 1;
    UCHAR ECAPCPolicyEnforced : 1;
    UCHAR Reserved : 2;
    UCHAR ucValue;
};

typedef union DOT11_ANQP_FRAGMENT_ID {
    UCHAR Value;
    UCHAR FragmentID : 7;
    UCHAR MoreFragments : 1;
};

typedef union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO {
    ULONG uChCenterFrequency;
     <unnamed-type-FHSS>;
    struct {
        ULONG uHopPattern;
        ULONG uHopSet;
        ULONG uDwellTime;
    } FHSS;
};

typedef union DOT11_CAPABILITY {
    USHORT ESS : 1;
    USHORT IBSS : 1;
    USHORT CFPollable : 1;
    USHORT CFPollRequest : 1;
    USHORT Privacy : 1;
    USHORT ShortPreamble : 1;
    USHORT PBCC : 1;
    USHORT ChannelAgility : 1;
    USHORT SpectrumMgmt : 1;
    USHORT QoS : 1;
    USHORT ShortSlotTime : 1;
    USHORT APSD : 1;
    USHORT Reserved : 1;
    USHORT DSSSOFDM : 1;
    USHORT DelayedBlockACK : 1;
    USHORT ImmediateBlockACK : 1;
     DMG;
    struct DOT11_CAPABILITY::DMG DMG;
    USHORT usValue;
};

typedef union DOT11_SEQUENCE_CONTROL {
    USHORT FragmentNumber : 4;
    USHORT SequenceNumber : 12;
    USHORT usValue;
};

typedef union _DL_EI48 {
    UCHAR Byte[3];
};

typedef union _DL_EUI48 {
    UCHAR Byte[6];
    union _DL_OUI Oui;
    union _DL_EI48 Ei48;
};

typedef union _DL_OUI {
    UCHAR Byte[3];
    UCHAR Group : 1;
    UCHAR Local : 1;
};

typedef union _DOT11_BSSID_INFO {
    UCHAR APReachability : 2;
    UCHAR Security : 1;
    UCHAR KeyScope : 1;
    UCHAR SpectrumManagement : 1;
    UCHAR QoS : 1;
    UCHAR APSD : 1;
    UCHAR RadioMeasurement : 1;
    UCHAR DelayedBlockAck : 1;
    UCHAR ImmediateBlockAck : 1;
    UCHAR MobilityDomain : 1;
    UCHAR HighThroughput : 1;
    ULONG Value;
};

typedef union _ENCAPSULATION_PROTOCOL_INFO {
     _VXLAN_INFO;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO VxlanInfo;
    ULONG Value;
};

typedef union _ENCAPSULATION_PROTOCOL_PARAMETERS {
     _VXLAN_PARAMETERS;
    struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS VxlanParameters;
    ULONG Value;
};

typedef union _KGDTENTRY64 {
    USHORT LimitLow;
    USHORT BaseLow;
    struct {
        UCHAR BaseMiddle;
        UCHAR Flags1;
        UCHAR Flags2;
        UCHAR BaseHigh;
    } Bytes;
    struct {
        ULONG BaseMiddle : 8;
        ULONG Type : 5;
        ULONG Dpl : 2;
        ULONG Present : 1;
        ULONG LimitHigh : 4;
        ULONG System : 1;
        ULONG LongMode : 1;
        ULONG DefaultBig : 1;
        ULONG Granularity : 1;
        ULONG BaseHigh : 8;
    } Bits;
    ULONG BaseUpper;
    ULONG MustBeZero;
    LONG64 DataLow;
    LONG64 DataHigh;
};

typedef union _KIDTENTRY64 {
    USHORT OffsetLow;
    USHORT Selector;
    USHORT IstIndex : 3;
    USHORT Reserved0 : 5;
    USHORT Type : 5;
    USHORT Dpl : 2;
    USHORT Present : 1;
    USHORT OffsetMiddle;
    ULONG OffsetHigh;
    ULONG Reserved1;
    ULONG64 Alignment;
};

typedef union _LARGE_INTEGER {
    ULONG LowPart;
    LONG HighPart;
     <unnamed-type-u>;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONG64 QuadPart;
};

typedef union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO {
     _VXLAN_INFO;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO VxlanInfo;
    ULONG Value;
};

typedef union _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS {
     _VXLAN_PARAMETERS;
    struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS VxlanParameters;
    ULONG Value;
};

typedef union _NDIS_OID_REQUEST::_REQUEST_DATA {
     _QUERY;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY QUERY_INFORMATION;
     _SET;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET SET_INFORMATION;
     _METHOD;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD METHOD_INFORMATION;
};

typedef union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS {
     _IPV4_ARP_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS IPv4ARPParameters;
     _IPV6_NS_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS IPv6NSParameters;
     _DOT11_RSN_REKEY_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
};

typedef union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN {
     _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
     _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
     _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
     _WOL_BITMAP_PATTERN;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN WoLBitMapPattern;
};

typedef union _NET_BUFFER_DATA_LENGTH {
    ULONG DataLength;
    ULONG64 stDataLength;
};

typedef union _NET_BUFFER_HEADER {
    struct _NET_BUFFER_DATA NetBufferData;
    union _SLIST_HEADER Link;
};

typedef union _NET_BUFFER_LIST_HEADER {
    struct _NET_BUFFER_LIST_DATA NetBufferListData;
    union _SLIST_HEADER Link;
};

typedef union _NET_LUID_LH {
    ULONG64 Value;
     <unnamed-type-Info>;
    struct {
        ULONG64 Reserved : 24;
        ULONG64 NetLuidIndex : 24;
        ULONG64 IfType : 16;
    } Info;
};

typedef union _POWER_STATE {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
};

typedef union _PROTOCOL_OFFLOAD_PARAMETERS {
     _IPV4_ARP_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS IPv4ARPParameters;
     _IPV6_NS_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS IPv6NSParameters;
     _DOT11_RSN_REKEY_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
};

typedef union _REFERENCE_OBJECT {
    ULONG Deleting : 1;
    ULONG ReferenceCount : 30;
    ULONG Overflow : 1;
    LONG Value;
};

typedef union _REQUEST_DATA {
     _QUERY;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY QUERY_INFORMATION;
     _SET;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET SET_INFORMATION;
     _METHOD;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD METHOD_INFORMATION;
};

typedef union _SLIST_HEADER {
    ULONG64 Alignment;
    ULONG64 Region;
     <unnamed-type-HeaderX64>;
    struct {
        ULONG64 Depth : 16;
        ULONG64 Sequence : 48;
        ULONG64 Reserved : 4;
        ULONG64 NextEntry : 60;
    } HeaderX64;
};

typedef union _ULARGE_INTEGER {
    ULONG LowPart;
    ULONG HighPart;
     <unnamed-type-u>;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONG64 QuadPart;
};

typedef union _WDI_TXRX_MPDU_PN {
    ULONG Pn24;
    ULONG64 Pn48;
    ULONG64 Pn128[2];
};

typedef union _WFC_COUNTED_GATE_REFERENCE_OBJECT {
    ULONG Closed : 1;
    ULONG ReferenceCount : 30;
    ULONG Overflow : 1;
    LONG Value;
};

typedef union _WHEA_ERROR_PACKET_FLAGS {
    ULONG PreviousError : 1;
    ULONG Reserved1 : 1;
    ULONG HypervisorError : 1;
    ULONG Simulated : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved2 : 26;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
    ULONG Recovered : 1;
    ULONG PreviousError : 1;
    ULONG Simulated : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
    ULONG PlatformId : 1;
    ULONG Timestamp : 1;
    ULONG PartitionId : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
    ULONG Primary : 1;
    ULONG ContainmentWarning : 1;
    ULONG Reset : 1;
    ULONG ThresholdExceeded : 1;
    ULONG ResourceNotAvailable : 1;
    ULONG LatentError : 1;
    ULONG Propagated : 1;
    ULONG Reserved : 25;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
    UCHAR FRUId : 1;
    UCHAR FRUText : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS {
    ULONG Reserved : 32;
    ULONG AsULONG;
};

typedef union _WHEA_PERSISTENCE_INFO {
    ULONG64 Signature : 16;
    ULONG64 Length : 24;
    ULONG64 Identifier : 16;
    ULONG64 Attributes : 2;
    ULONG64 DoNotLog : 1;
    ULONG64 Reserved : 5;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_REVISION {
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    USHORT AsUSHORT;
};

typedef union _WHEA_TIMESTAMP {
    ULONG64 Seconds : 8;
    ULONG64 Minutes : 8;
    ULONG64 Hours : 8;
    ULONG64 Precise : 1;
    ULONG64 Reserved : 7;
    ULONG64 Day : 8;
    ULONG64 Month : 8;
    ULONG64 Year : 8;
    ULONG64 Century : 8;
    union _LARGE_INTEGER AsLARGE_INTEGER;
};

typedef union _WOL_PATTERN {
     _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
     _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
     _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
     _WOL_BITMAP_PATTERN;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN WoLBitMapPattern;
};

typedef union __m128 {
    FLOAT m128_f32[4];
    ULONG64 m128_u64[2];
    CHAR m128_i8[16];
    SHORT m128_i16[8];
    LONG m128_i32[4];
    LONG64 m128_i64[2];
    UCHAR m128_u8[16];
    USHORT m128_u16[8];
    ULONG m128_u32[4];
};

typedef union __m64 {
    ULONG64 m64_u64;
    FLOAT m64_f32[2];
    CHAR m64_i8[8];
    SHORT m64_i16[4];
    LONG m64_i32[2];
    LONG64 m64_i64;
    UCHAR m64_u8[8];
    USHORT m64_u16[4];
    ULONG m64_u32[2];
};

typedef enum BUS_QUERY_ID_TYPE {
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5
};

typedef enum CConnectJob::_START_CONNECT_ROAM_CANDIDATE_LIST_CREATION_OPTIONS {
    START_CONNECT_ROAM_RECREATE_CANDIDATE_LIST = 0,
    START_CONNECT_ROAM_CANDIDATE_LIST_AVAILABLE = 1
};

typedef enum CConnectJob::_START_CONNECT_ROAM_NO_CANDIDATE_CONTINUE_OPTIONS {
    START_CONNECT_ROAM_STOP_IF_NO_CANDIDATES_FOUND = 0,
    START_CONNECT_ROAM_CONTINUE_IF_NO_CANDIDATE_FOUND = 1
};

typedef enum CPort::PauseWaitForRxReturn {
    NoWaitForRxReturn = 0,
    WaitForRxReturn = 1
};

typedef enum CRxMgr::RxMgrState {
    rmsWaitingForData = 0,
    rmsWithData = 1,
    rmsWaitingForStop = 2,
    rmsWaitingForStopWithData = 3,
    rmsWaitingForFlush = 4,
    rmsWaitingForFlushWithData = 5,
    rmsWaitingForDrain = 9,
    rmsStopFlushDrainMask = 14
};

typedef enum DEVICE_REGISTRY_PROPERTY {
    DevicePropertyDeviceDescription = 0,
    DevicePropertyHardwareID = 1,
    DevicePropertyCompatibleIDs = 2,
    DevicePropertyBootConfiguration = 3,
    DevicePropertyBootConfigurationTranslated = 4,
    DevicePropertyClassName = 5,
    DevicePropertyClassGuid = 6,
    DevicePropertyDriverKeyName = 7,
    DevicePropertyManufacturer = 8,
    DevicePropertyFriendlyName = 9,
    DevicePropertyLocationInformation = 10,
    DevicePropertyPhysicalDeviceObjectName = 11,
    DevicePropertyBusTypeGuid = 12,
    DevicePropertyLegacyBusType = 13,
    DevicePropertyBusNumber = 14,
    DevicePropertyEnumeratorName = 15,
    DevicePropertyAddress = 16,
    DevicePropertyUINumber = 17,
    DevicePropertyInstallState = 18,
    DevicePropertyRemovalPolicy = 19,
    DevicePropertyResourceRequirements = 20,
    DevicePropertyAllocatedResources = 21,
    DevicePropertyContainerID = 22
};

typedef enum DEVICE_TEXT_TYPE {
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1
};

typedef enum DL_ADDRESS_TYPE {
    DlUnicast = 0,
    DlMulticast = 1,
    DlBroadcast = 2
};

typedef enum DMA_COMPLETION_STATUS {
    DmaComplete = 0,
    DmaAborted = 1,
    DmaError = 2,
    DmaCancelled = 3
};

typedef enum DOT11_DATA_SUBTYPE {
    DOT11_DATA_SUBTYPE_CFA_FLAG = 1,
    DOT11_DATA_SUBTYPE_CFP_FLAG = 2,
    DOT11_DATA_SUBTYPE_NULL_FLAG = 4,
    DOT11_DATA_SUBTYPE_QOS_FLAG = 8,
    DOT11_DATA_SUBTYPE_DATA = 0,
    DOT11_DATA_SUBTYPE_DATA_CFA = 1,
    DOT11_DATA_SUBTYPE_DATA_CFP = 2,
    DOT11_DATA_SUBTYPE_DATA_CFA_CFP = 3,
    DOT11_DATA_SUBTYPE_NULL = 4,
    DOT11_DATA_SUBTYPE_NULL_CFA = 5,
    DOT11_DATA_SUBTYPE_NULL_CFP = 6,
    DOT11_DATA_SUBTYPE_NULL_CFA_CFP = 7,
    DOT11_DATA_SUBTYPE_QOS_DATA = 8,
    DOT11_DATA_SUBTYPE_QOS_CFA = 9,
    DOT11_DATA_SUBTYPE_QOS_DATA_CFP = 10,
    DOT11_DATA_SUBTYPE_QOS_DATA_CFA_CFP = 11,
    DOT11_DATA_SUBTYPE_QOS_NULL = 12,
    DOT11_DATA_SUBTYPE_RESERVED = 13,
    DOT11_DATA_SUBTYPE_QOS_NULL_CFP = 14,
    DOT11_DATA_SUBTYPE_QOS_NULL_CFA_CFP = 15
};

typedef enum DOT11_DS_INFO {
    DOT11_DS_CHANGED = 0,
    DOT11_DS_UNCHANGED = 1,
    DOT11_DS_UNKNOWN = 2
};

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
};

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
};

typedef enum MANAGEMENT_FRAME_TYPE {
    MANAGEMENT_FRAME_TYPE_BEACON = 0,
    MANAGEMENT_FRAME_TYPE_PROBE_REQUEST = 1,
    MANAGEMENT_FRAME_TYPE_PROBE_RESPONSE = 2,
    MANAGEMENT_FRAME_TYPE_ASSOCIATION_REQUEST = 3,
    MANAGEMENT_FRAME_TYPE_ASSOCIATION_RESPONSE = 4,
    MANAGEMENT_FRAME_TYPE_GO_NEGOTIATION_REQUEST = 5,
    MANAGEMENT_FRAME_TYPE_GO_NEGOTIATION_RESPONSE = 6,
    MANAGEMENT_FRAME_TYPE_GO_NEGOTIATION_CONFIRMATION = 7,
    MANAGEMENT_FRAME_TYPE_INVITATION_REQUEST = 8,
    MANAGEMENT_FRAME_TYPE_INVITATION_RESPONSE = 9,
    MANAGEMENT_FRAME_TYPE_PROVISION_DISCOVERY_REQUEST = 10,
    MANAGEMENT_FRAME_TYPE_PROVISION_DISCOVERY_RESPONSE = 11,
    MANAGEMENT_FRAME_TYPE_MAX_FRAMES = 12
};

typedef enum NL_ADDRESS_TYPE {
    NlatUnspecified = 0,
    NlatUnicast = 1,
    NlatAnycast = 2,
    NlatMulticast = 3,
    NlatBroadcast = 4,
    NlatInvalid = 5
};

typedef enum POWER_ACTION {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8
};

typedef enum POWER_POLICY_DEVICE_TYPE {
    PolicyDeviceSystemButton = 0,
    PolicyDeviceThermalZone = 1,
    PolicyDeviceBattery = 2,
    PolicyDeviceMemory = 3,
    PolicyInitiatePowerActionAPI = 4,
    PolicySetPowerStateAPI = 5,
    PolicyImmediateDozeS4 = 6,
    PolicySystemIdle = 7,
    PolicyDeviceWakeAlarm = 8,
    PolicyDeviceFan = 9,
    PolicyCsBatterySaver = 10,
    PolicyImmediateDozeS4Predicted = 11,
    PolicyImmediateDozeS4PredictedNoWake = 12,
    PolicyImmediateDozeS4AdaptiveBudget = 13,
    PolicyImmediateDozeS4AdaptiveReserveNoWake = 14,
    PolicySystemInitiatedShutdown = 15,
    PolicyDeviceMax = 16
};

typedef enum PS_CREATE_STATE {
    PsCreateInitialState = 0,
    PsCreateFailOnFileOpen = 1,
    PsCreateFailOnSectionCreate = 2,
    PsCreateFailExeFormat = 3,
    PsCreateFailMachineMismatch = 4,
    PsCreateFailExeName = 5,
    PsCreateSuccess = 6,
    PsCreateMaximumStates = 7
};

typedef enum PauseWaitForRxReturn {
    NoWaitForRxReturn = 0,
    WaitForRxReturn = 1
};

typedef enum ReplacesCorHdrNumericDefines {
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
    COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
};

typedef enum RxMgrState {
    rmsWaitingForData = 0,
    rmsWithData = 1,
    rmsWaitingForStop = 2,
    rmsWaitingForStopWithData = 3,
    rmsWaitingForFlush = 4,
    rmsWaitingForFlushWithData = 5,
    rmsWaitingForDrain = 9,
    rmsStopFlushDrainMask = 14
};

typedef enum SCOPE_LEVEL {
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14,
    ScopeLevelCount = 16
};

typedef enum SE_WS_APPX_SIGNATURE_ORIGIN {
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4
};

typedef enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT {
    SpmScenarioStopReasonUnspecified = 16,
    SpmScenarioStopReasonCsExit = 17,
    SpmScenarioStopReasonMax = 18
};

typedef enum TCP_UPLOAD_REASON {
    LowActivity = 1,
    HighDropRate = 2,
    SmallIO = 3,
    NoBufferPreposting = 4,
    NoBufferProposting = 4,
    ReceivedUrgentData = 5,
    HighFragmentation = 6,
    HighOutOfOrderPackets = 7,
    TimeoutExpiration = 8,
    InvalidState = 9,
    UploadRequested = 10,
    HardwareFailure = 11,
    MaxUploadReason = 12
};

typedef enum TlgIn_t {
    TlgInNULL = 0,
    TlgInUNICODESTRING = 1,
    TlgInANSISTRING = 2,
    TlgInINT8 = 3,
    TlgInUINT8 = 4,
    TlgInINT16 = 5,
    TlgInUINT16 = 6,
    TlgInINT32 = 7,
    TlgInUINT32 = 8,
    TlgInINT64 = 9,
    TlgInUINT64 = 10,
    TlgInFLOAT = 11,
    TlgInDOUBLE = 12,
    TlgInBOOL32 = 13,
    TlgInBINARY = 14,
    TlgInGUID = 15,
    _TlgInPOINTER_unsupported = 16,
    TlgInFILETIME = 17,
    TlgInSYSTEMTIME = 18,
    TlgInSID = 19,
    TlgInHEXINT32 = 20,
    TlgInHEXINT64 = 21,
    TlgInCOUNTEDSTRING = 22,
    TlgInCOUNTEDANSISTRING = 23,
    _TlgInSTRUCT = 24,
    TlgInCOUNTEDBINARY = 25,
    _TlgInMax = 26,
    TlgInINTPTR = 9,
    TlgInUINTPTR = 10,
    TlgInPOINTER = 21,
    _TlgInCcount = 32,
    TlgInVcount = 64,
    _TlgInChain = 128,
    _TlgInCustom = 96,
    _TlgInTypeMask = 31,
    _TlgInCountMask = 96,
    _TlgInFlagMask = 224
};

typedef enum TlgOut_t {
    TlgOutNULL = 0,
    TlgOutNOPRINT = 1,
    TlgOutSTRING = 2,
    TlgOutBOOLEAN = 3,
    TlgOutHEX = 4,
    TlgOutPID = 5,
    TlgOutTID = 6,
    TlgOutPORT = 7,
    TlgOutIPV4 = 8,
    TlgOutIPV6 = 9,
    TlgOutSOCKETADDRESS = 10,
    TlgOutXML = 11,
    TlgOutJSON = 12,
    TlgOutWIN32ERROR = 13,
    TlgOutNTSTATUS = 14,
    TlgOutHRESULT = 15,
    TlgOutFILETIME = 16,
    TlgOutSIGNED = 17,
    TlgOutUNSIGNED = 18,
    TlgOutUTF8 = 35,
    TlgOutPKCS7_WITH_TYPE_INFO = 36,
    TlgOutCODE_POINTER = 37,
    _TlgOutMax = 38,
    _TlgOutChain = 128,
    _TlgOutTypeMask = 127
};

typedef enum WFC_MESSAGE_TYPE {
    WfcMessageCommand = 1,
    WfcMessageResponse = 3,
    WfcMessageIndication = 4
};

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2
};

typedef enum _BI_BROADCAST_CHANNEL_NAME {
    ChannelUserLogOn = 0,
    ChannelUserLogOff = 1,
    ChannelSessionConnect = 2,
    ChannelSessionDisconnect = 3,
    ChannelApplicationUninstall = 4,
    ChannelApplicationServicingStart = 5,
    ChannelApplicationServicingStop = 6,
    ChannelLockScreenUpdate = 7,
    ChannelEventDeletion = 8,
    ChannelQuietModeUpdate = 9,
    ChannelNotifyNewSession = 10,
    ChannelNotifyCloseSession = 11,
    BroadcastChannelNameMaximum = 12
};

typedef enum _BI_LATCH_REASON {
    LatchReasonInvalid = 0,
    LatchReasonFirstValid = 256,
    LatchReasonTrigger = 256,
    LatchReasonServicing = 512,
    LatchReasonTermination = 768,
    LatchReasonPower = 1024,
    LatchReasonBuffered = 1280,
    LatchReasonPushButtonReset = 1536,
    LatchReasonResourcePolicy = 1792,
    LatchReasonUninstalling = 2048,
    LatchReasonQuietMode = 2304,
    LatchReasonExtensionPolicy = 2560,
    LatchReasonWerReportInProgress = 2816,
    LatchReasonCoalesced = 3072,
    LatchReasonDisconnectedStandby = 3328,
    LatchReasonExecutionPolicy = 3584,
    LatchReasonCrmPolicy = 3840,
    LatchReasonMaximum = 4096
};

typedef enum _CREATE_PORT_JOB_STATE {
    CreatePortJobNotStarted = 0,
    CreatePortJobWaitingForPortCreate = 1,
    CreatePortJobWaitingForPortReset = 2
};

typedef enum _ConnectionResourceConsumerDesc {
    ConnectionResourceConsumerDescIsUndefined = 0,
    ConnectionResourceConsumerDescIsDevice = 1,
    ConnectionResourceConsumerDescIsOpregion = 2,
    ConnectionResourceConsumerDescMax = 3
};

typedef enum _DELETE_PORT_JOB_STATE {
    DeletePortJobNotStarted = 0,
    DeletePortJobWaitingForStopBackgroundDiscovery = 1,
    DeletePortJobWaitingForPortDelete = 2,
    DeletePortJobWaitingForPortJobsCleanup = 3
};

typedef enum _DEVICE_COMMAND_SCHEDULER_STATE {
    DeviceCommandSchedulerStateInit = 0,
    DeviceCommandSchedulerStateSendingCommand = 1,
    DeviceCommandSchedulerStateWaitForCommandCompletion = 2,
    DeviceCommandSchedulerStateCommandComplete = 3
};

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
};

typedef enum _DEVICE_RELATION_TYPE {
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5
};

typedef enum _DEVICE_WAKE_DEPTH {
    DeviceWakeDepthNotWakeable = 0,
    DeviceWakeDepthD0 = 1,
    DeviceWakeDepthD1 = 2,
    DeviceWakeDepthD2 = 3,
    DeviceWakeDepthD3hot = 4,
    DeviceWakeDepthD3cold = 5,
    DeviceWakeDepthMaximum = 6
};

typedef enum _DEVPROPSTORE {
    DEVPROP_STORE_SYSTEM = 0,
    DEVPROP_STORE_USER = 1
};

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2
};

typedef enum _DMA_WIDTH {
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5
};

typedef enum _DOT11_ACTION_FRAME_PUBLIC_ACTION_TYPE {
    DOT11_PUBLIC_ACTION_FRAME_TYPE_GAS_INITIAL_REQUEST = 10,
    DOT11_PUBLIC_ACTION_FRAME_TYPE_GAS_INITIAL_RESPONSE = 11,
    DOT11_PUBLIC_ACTION_FRAME_TYPE_GAS_COMEBACK_REQUEST = 12,
    DOT11_PUBLIC_ACTION_FRAME_TYPE_GAS_COMEBACK_RESPONSE = 13
};

typedef enum _DOT11_AC_PARAM {
    dot11_AC_param_BE = 0,
    dot11_AC_param_BK = 1,
    dot11_AC_param_VI = 2,
    dot11_AC_param_VO = 3,
    dot11_AC_param_max = 4
};

typedef enum _DOT11_ASSOCIATION_STATE {
    dot11_assoc_state_zero = 0,
    dot11_assoc_state_unauth_unassoc = 1,
    dot11_assoc_state_auth_unassoc = 2,
    dot11_assoc_state_auth_assoc = 3
};

typedef enum _DOT11_ASSOCIATION_TYPE {
    DOT11_ASSOCIATION_TYPE_GENERAL = 0,
    DOT11_ASSOCIATION_TYPE_FT = 1,
    DOT11_ASSOCIATION_TYPE_PBSS_NOT_IN_DS = 2
};

typedef enum _DOT11_AUTH_ALGORITHM {
    DOT11_AUTH_ALGO_80211_OPEN = 1,
    DOT11_AUTH_ALGO_80211_SHARED_KEY = 2,
    DOT11_AUTH_ALGO_WPA = 3,
    DOT11_AUTH_ALGO_WPA_PSK = 4,
    DOT11_AUTH_ALGO_WPA_NONE = 5,
    DOT11_AUTH_ALGO_RSNA = 6,
    DOT11_AUTH_ALGO_RSNA_PSK = 7,
    DOT11_AUTH_ALGO_IHV_START = -2147483648,
    DOT11_AUTH_ALGO_IHV_END = -1
};

typedef enum _DOT11_BLUETOOTH_COEXISTENCE_SUPPORT {
    DOT11_BLUETOOTH_COEXISTENCE_UNKNOWN = 0,
    DOT11_BLUETOOTH_COEXISTENCE_PERFORMANCE_MAINTAINED = 1,
    DOT11_BLUETOOTH_COEXISTENCE_WIFI_DEGRADED_TO_1x1 = 2,
    DOT11_BLUETOOTH_COEXISTENCE_WIFI_THROUGHPUT_DEGRADED = 3,
    DOT11_BLUETOOTH_COEXISTENCE_MUTUALLY_EXCLUSIVE = 4,
    DOT11_BLUETOOTH_COEXISTENCE_MAX = 5
};

typedef enum _DOT11_BSS_TYPE {
    dot11_BSS_type_infrastructure = 1,
    dot11_BSS_type_independent = 2,
    dot11_BSS_type_any = 3
};

typedef enum _DOT11_CIPHER_ALGORITHM {
    DOT11_CIPHER_ALGO_NONE = 0,
    DOT11_CIPHER_ALGO_WEP40 = 1,
    DOT11_CIPHER_ALGO_TKIP = 2,
    DOT11_CIPHER_ALGO_CCMP = 4,
    DOT11_CIPHER_ALGO_WEP104 = 5,
    DOT11_CIPHER_ALGO_BIP = 6,
    DOT11_CIPHER_ALGO_GCMP = 8,
    DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_WEP = 257,
    DOT11_CIPHER_ALGO_IHV_START = -2147483648,
    DOT11_CIPHER_ALGO_IHV_END = -1
};

typedef enum _DOT11_PHY_TYPE {
    dot11_phy_type_unknown = 0,
    dot11_phy_type_any = 0,
    dot11_phy_type_fhss = 1,
    dot11_phy_type_dsss = 2,
    dot11_phy_type_irbaseband = 3,
    dot11_phy_type_ofdm = 4,
    dot11_phy_type_hrdsss = 5,
    dot11_phy_type_erp = 6,
    dot11_phy_type_ht = 7,
    dot11_phy_type_vht = 8,
    dot11_phy_type_dmg = 9,
    dot11_phy_type_he = 10,
    dot11_phy_type_IHV_start = -2147483648,
    dot11_phy_type_IHV_end = -1
};

typedef enum _DOT11_RESET_TYPE {
    dot11_reset_type_phy = 1,
    dot11_reset_type_mac = 2,
    dot11_reset_type_phy_and_mac = 3
};

typedef enum _DOT11_TRI_STATE {
    dot11_tri_state_false = 0,
    dot11_tri_state_true = 1,
    dot11_tri_state_unknown = 2
};

typedef enum _DOT11_WFD_DISCOVER_TYPE {
    dot11_wfd_discover_type_scan_only = 1,
    dot11_wfd_discover_type_find_only = 2,
    dot11_wfd_discover_type_auto = 3,
    dot11_wfd_discover_type_scan_social_channels = 4,
    dot11_wfd_discover_type_forced = -2147483648
};

typedef enum _DOT11_WFD_SCAN_TYPE {
    dot11_wfd_scan_type_active = 1,
    dot11_wfd_scan_type_passive = 2,
    dot11_wfd_scan_type_auto = 3
};

typedef enum _DOT11_WFD_SERVICE_DISCOVERY_TYPE {
    dot11_wfd_service_discovery_type_no_service_discovery = 0,
    dot11_wfd_service_discovery_type_service_name_only = 1,
    dot11_wfd_service_discovery_type_service_information = 3,
    dot11_wfd_service_discovery_type_max_value = -1
};

typedef enum _EVENT_INFO_CLASS {
    EventProviderBinaryTrackInfo = 0,
    EventProviderSetReserved1 = 1,
    EventProviderSetTraits = 2,
    EventProviderUseDescriptorType = 3,
    MaxEventInfo = 4
};

typedef enum _EVENT_TYPE {
    NotificationEvent = 0,
    SynchronizationEvent = 1
};

typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3
};

typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileDesiredStorageClassInformation = 67,
    FileStatInformation = 68,
    FileMemoryPartitionInformation = 69,
    FileStatLxInformation = 70,
    FileCaseSensitiveInformation = 71,
    FileLinkInformationEx = 72,
    FileLinkInformationExBypassAccessCheck = 73,
    FileStorageReserveIdInformation = 74,
    FileCaseSensitiveInformationForceAccessCheck = 75,
    FileMaximumInformation = 76
};

typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsMaximumInformation = 15
};

typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18
};

typedef enum _INTERLOCKED_RESULT {
    ResultNegative = 1,
    ResultZero = 0,
    ResultPositive = 2
};

typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject = 2,
    DeallocateObjectKeepRegisters = 3
};

typedef enum _IO_PRIORITY_HINT {
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5
};

typedef enum _IO_RATE_CONTROL_TYPE {
    IoRateControlTypeCapMin = 0,
    IoRateControlTypeIopsCap = 0,
    IoRateControlTypeBandwidthCap = 1,
    IoRateControlTypeTimePercentCap = 2,
    IoRateControlTypeCapMax = 2,
    IoRateControlTypeReservationMin = 3,
    IoRateControlTypeIopsReservation = 3,
    IoRateControlTypeBandwidthReservation = 4,
    IoRateControlTypeTimePercentReservation = 5,
    IoRateControlTypeReservationMax = 5,
    IoRateControlTypeCriticalReservationMin = 6,
    IoRateControlTypeIopsCriticalReservation = 6,
    IoRateControlTypeBandwidthCriticalReservation = 7,
    IoRateControlTypeTimePercentCriticalReservation = 8,
    IoRateControlTypeCriticalReservationMax = 8,
    IoRateControlTypeSoftCapMin = 9,
    IoRateControlTypeIopsSoftCap = 9,
    IoRateControlTypeBandwidthSoftCap = 10,
    IoRateControlTypeTimePercentSoftCap = 11,
    IoRateControlTypeSoftCapMax = 11,
    IoRateControlTypeLimitExcessNotifyMin = 12,
    IoRateControlTypeIopsLimitExcessNotify = 12,
    IoRateControlTypeBandwidthLimitExcessNotify = 13,
    IoRateControlTypeTimePercentLimitExcessNotify = 14,
    IoRateControlTypeLimitExcessNotifyMax = 14,
    IoRateControlTypeMax = 15
};

typedef enum _IRQ_PRIORITY {
    IrqPriorityUndefined = 0,
    IrqPriorityLow = 1,
    IrqPriorityNormal = 2,
    IrqPriorityHigh = 3
};

typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectFreezeInformation = 18,
    JobObjectExtendedAccountingInformation = 19,
    JobObjectWakeInformation = 20,
    JobObjectBackgroundInformation = 21,
    JobObjectSchedulingRankBiasInformation = 22,
    JobObjectTimerVirtualizationInformation = 23,
    JobObjectCycleTimeNotification = 24,
    JobObjectClearEvent = 25,
    JobObjectInterferenceInformation = 26,
    JobObjectClearPeakJobMemoryUsed = 27,
    JobObjectMemoryUsageInformation = 28,
    JobObjectSharedCommit = 29,
    JobObjectContainerId = 30,
    JobObjectIoRateControlInformation = 31,
    JobObjectSiloRootDirectory = 37,
    JobObjectServerSiloBasicInformation = 38,
    JobObjectServerSiloUserSharedData = 39,
    JobObjectServerSiloInitialize = 40,
    JobObjectServerSiloRunningState = 41,
    JobObjectIoAttribution = 42,
    JobObjectMemoryPartitionInformation = 43,
    JobObjectContainerTelemetryId = 44,
    JobObjectSiloSystemRoot = 45,
    JobObjectEnergyTrackingState = 46,
    JobObjectThreadImpersonationInformation = 47,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass = 48
};

typedef enum _JOB_STATE_RESUME_FIRMWARE_CONTEXT {
    JobStateSubNotStarted = 0,
    JobStateResumeFwAwaitResumePacketFilterComplete = 1,
    JobStateResumeFwAwaitResumeMulticastList8023Complete = 2,
    JobStateResumeFwAwaitResumeMulticastListDot11Complete = 3,
    JobStateResumeFwAwaitResumeAutoPsmComplete = 4,
    JobStateResumeFwAwaitResumeOffloadsStart = 5,
    JobStateResumeFwAwaitResumeOffloadsComplete = 6,
    JobStateResumeFwAwaitResumeWolPatternsComplete = 7,
    JobStateResumeFwAwaitResumeCoalescingComplete = 8,
    JobStateResumeFwAwaitResumePrivacyExemptionComplete = 9,
    JobStateResumeFwAwaitResumeDefaultKeyComplete = 10,
    JobStateResumeFwAwaitResumeDefaultKeyIdComplete = 11,
    JobStateResumeFwAwaitResumeP2pPortComplete = 12,
    JobStateResumeFwAwaitComplete = 13
};

typedef enum _JOB_STATE_SET_POWER {
    JobStateNotStarted = 0,
    JobStateAwaitDot11ResetJobComplete = 1,
    JobStateDot11ResetJobCompleted = 2,
    JobStateAwaitReplumbNloCmdComplete = 3,
    JobStateAwaitDisconnectTaskComplete = 4,
    JobStateAwaitSetPowerCommandComplete = 5,
    JobStateAwaitPauseCompleteForDx = 6,
    JobStateAwaitCloseFirmwareCompleteForD3 = 7,
    JobStateAwaitOpenFirmwareCompleteForD0 = 8,
    JobStateAwaitD0ReinitComplete = 9,
    JobStateAwaitD0RoamComplete = 10
};

typedef enum _JOB_STATE_SET_RADIO {
    JobStateUnspecified = 0,
    JobStateAwaitResetComplete = 1,
    JobStateAwaitSetCommandComplete = 2
};

typedef enum _KINTERRUPT_MODE {
    LevelSensitive = 0,
    Latched = 1
};

typedef enum _KINTERRUPT_POLARITY {
    InterruptPolarityUnknown = 0,
    InterruptActiveHigh = 1,
    InterruptRisingEdge = 1,
    InterruptActiveLow = 2,
    InterruptFallingEdge = 2,
    InterruptActiveBoth = 3,
    InterruptActiveBothTriggerLow = 3,
    InterruptActiveBothTriggerHigh = 4
};

typedef enum _KWAIT_REASON {
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrSpare0 = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    WrKeyedEvent = 21,
    WrTerminated = 22,
    WrProcessInSwap = 23,
    WrCpuRateControl = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    WrAlertByThreadId = 37,
    WrDeferredPreempt = 38,
    WrPhysicalFault = 39,
    MaximumWaitReason = 40
};

typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = 2,
    MmHardwareCoherentCached = 3,
    MmNonCachedUnordered = 4,
    MmUSWCCached = 5,
    MmMaximumCacheType = 6,
    MmNotMapped = -1
};

typedef enum _MEMORY_CACHING_TYPE_ORIG {
    MmFrameBufferCached = 2
};

typedef enum _MINIPORT_INITIALIZE_JOB_STATE {
    MiniportInitializeJobNotStarted = 0,
    MiniportInitializeJobPerformingAllocateAdapter = 1,
    MiniportInitializeJobWaitingForOpenTaskComplete = 2,
    MiniportInitializeJobWaitingForFirmwareCapabilities = 3,
    MiniportInitializeJobWaitingForFirmwareConfiguration = 4,
    MiniportInitializeJobWaitingForDataPathQueryInterfaceComplete = 5,
    MiniportInitializeJobWaitingForCreatePortComplete = 6,
    MiniportInitializeJobWaitingForSetRadioStateComplete = 7,
    MiniportInitializeJobSettingMiniportAttributes = 8,
    MiniportInitializeJobStartingIHVOperations = 9,
    MiniportInitializeJobSucceeded = 10
};

typedef enum _MM_PAGE_PRIORITY {
    LowPagePriority = 0,
    NormalPagePriority = 16,
    HighPagePriority = 32
};

typedef enum _MODE {
    KernelMode = 0,
    UserMode = 1,
    MaximumMode = 2
};

typedef enum _MS_VENDOR_EXT_OOB_BLOB_TYPE {
    WfdMsVendorExtensionOobTypeUnknown = 0,
    WfdLegacyWcnOobProvisioning = 255,
    WfdMsVendorExtensionOobTypeMax = 255
};

typedef enum _NDIS_802_11_WEP_STATUS {
    Ndis802_11WEPEnabled = 0,
    Ndis802_11Encryption1Enabled = 0,
    Ndis802_11WEPDisabled = 1,
    Ndis802_11EncryptionDisabled = 1,
    Ndis802_11WEPKeyAbsent = 2,
    Ndis802_11Encryption1KeyAbsent = 2,
    Ndis802_11WEPNotSupported = 3,
    Ndis802_11EncryptionNotSupported = 3,
    Ndis802_11Encryption2Enabled = 4,
    Ndis802_11Encryption2KeyAbsent = 5,
    Ndis802_11Encryption3Enabled = 6,
    Ndis802_11Encryption3KeyAbsent = 7
};

typedef enum _NDIS_DEVICE_PNP_EVENT {
    NdisDevicePnPEventQueryRemoved = 0,
    NdisDevicePnPEventRemoved = 1,
    NdisDevicePnPEventSurpriseRemoved = 2,
    NdisDevicePnPEventQueryStopped = 3,
    NdisDevicePnPEventStopped = 4,
    NdisDevicePnPEventPowerProfileChanged = 5,
    NdisDevicePnPEventFilterListChanged = 6,
    NdisDevicePnPEventMaximum = 7
};

typedef enum _NDIS_DEVICE_POWER_STATE {
    NdisDeviceStateUnspecified = 0,
    NdisDeviceStateD0 = 1,
    NdisDeviceStateD1 = 2,
    NdisDeviceStateD2 = 3,
    NdisDeviceStateD3 = 4,
    NdisDeviceStateMaximum = 5
};

typedef enum _NDIS_FRAME_HEADER {
    NdisFrameHeaderUndefined = 0,
    NdisFrameHeaderMac = 1,
    NdisFrameHeaderArp = 2,
    NdisFrameHeaderIPv4 = 3,
    NdisFrameHeaderIPv6 = 4,
    NdisFrameHeaderUdp = 5,
    NdisFrameHeaderMaximum = 6
};

typedef enum _NDIS_HALT_ACTION {
    NdisHaltDeviceDisabled = 0,
    NdisHaltDeviceInstanceDeInitialized = 1,
    NdisHaltDevicePoweredDown = 2,
    NdisHaltDeviceSurpriseRemoved = 3,
    NdisHaltDeviceFailed = 4,
    NdisHaltDeviceInitializationFailed = 5,
    NdisHaltDeviceStopped = 6
};

typedef enum _NDIS_INTERFACE_TYPE {
    NdisInterfaceInternal = 0,
    NdisInterfaceIsa = 1,
    NdisInterfaceEisa = 2,
    NdisInterfaceMca = 3,
    NdisInterfaceTurboChannel = 4,
    NdisInterfacePci = 5,
    NdisInterfacePcMcia = 8,
    NdisInterfaceCBus = 9,
    NdisInterfaceMPIBus = 10,
    NdisInterfaceMPSABus = 11,
    NdisInterfaceProcessorInternal = 12,
    NdisInterfaceInternalPowerBus = 13,
    NdisInterfacePNPISABus = 14,
    NdisInterfacePNPBus = 15,
    NdisInterfaceUSB = 16,
    NdisInterfaceIrda = 17,
    NdisInterface1394 = 18,
    NdisMaximumInterfaceType = 19
};

typedef enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE {
    NdisMiniportHookDriverTypeNone = 0,
    NdisMiniportHookDriverTypeWdi = 1,
    NdisMiniportHookDriverType_Maximum = 2
};

typedef enum _NDIS_NBL_TRACKER_LIFETIME_EVENT {
    NdisNblTrackerEvent_QueuedByNdis = 1,
    NdisNblTrackerEvent_NblAllocated = 2,
    NdisNblTrackerEvent_NblAllocatedWithNb = 3,
    NdisNblTrackerEvent_NblFreed = 4,
    NdisNblTrackerEvent_NblAllocatedClone = 5,
    NdisNblTrackerEvent_NblFreedClone = 6,
    NdisNblTrackerEvent_NblAllocatedFragment = 7,
    NdisNblTrackerEvent_NblFreedFragment = 8,
    NdisNblTrackerEvent_NblAllocatedReassembled = 9,
    NdisNblTrackerEvent_NetioAllocatedClone = 10,
    NdisNblTrackerEvent_NetioFreedClone = 11,
    NdisNblTrackerEvent_CustomAllocatedChild = 12,
    NdisNblTrackerEvent_CustomFreedChild = 13,
    NdisNblTrackerEvent_CustomAllocatedNbl = 14,
    NdisNblTrackerEvent_CustomFreedNbl = 15,
    NdisNblTrackerEvent_OtherNotDatapath = 16,
    NdisNblTrackerEvent_PacketTranslationCached = 17,
    NdisNblTrackerEvent_PacketTranslationReused = 18,
    NdisNblTrackerEvent_Translate6To5TxOut = 19,
    NdisNblTrackerEvent_Translate6To5TxReturn = 20,
    NdisNblTrackerEvent_Translate5To6TxOut = 21,
    NdisNblTrackerEvent_Translate5To6TxReturn = 22,
    NdisNblTrackerEvent_Translate5To5TxOut = 23,
    NdisNblTrackerEvent_Translate5To5TxReturn = 24,
    NdisNblTrackerEvent_Translate6To5RxOut = 25,
    NdisNblTrackerEvent_Translate6To5RxReturn = 26,
    NdisNblTrackerEvent_Translate5To6RxOut = 27,
    NdisNblTrackerEvent_Translate5To6RxReturn = 28,
    NdisNblTrackerEvent_Translate5To5RxOut = 29,
    NdisNblTrackerEvent_Translate5To5RxReturn = 30,
    NdisNblTrackerEvent_LifetimeMax = 31
};

typedef enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT {
    NdisNblTrackerEvent_MiniportIndicated = 128,
    NdisNblTrackerEvent_MiniportIndicatedResources = 129,
    NdisNblTrackerEvent_FilterIndicated = 130,
    NdisNblTrackerEvent_FilterIndicatedResources = 131,
    NdisNblTrackerEvent_IndicatedToProtocol = 132,
    NdisNblTrackerEvent_IndicatedToProtocolResources = 133,
    NdisNblTrackerEvent_IndicatedToProtocolPacket = 134,
    NdisNblTrackerEvent_ProtocolReturned = 135,
    NdisNblTrackerEvent_ProtocolReturnedResources = 136,
    NdisNblTrackerEvent_ProtocolReturnedPacket = 137,
    NdisNblTrackerEvent_FilterReturned = 138,
    NdisNblTrackerEvent_ReturnedToFilter = 139,
    NdisNblTrackerEvent_ReturnedToFilterResources = 140,
    NdisNblTrackerEvent_ReturnedToMiniport = 141,
    NdisNblTrackerEvent_ReturnedToMiniportResources = 142,
    NdisNblTrackerEvent_ProtocolSent = 143,
    NdisNblTrackerEvent_FilterSent = 144,
    NdisNblTrackerEvent_SentToFilter = 145,
    NdisNblTrackerEvent_SentToMiniport = 146,
    NdisNblTrackerEvent_MiniportSendCompleted = 147,
    NdisNblTrackerEvent_FilterSendCompleted = 148,
    NdisNblTrackerEvent_SendCompletedToOpen = 149,
    NdisNblTrackerEvent_CustomReceived = 150,
    NdisNblTrackerEvent_CustomReturned = 151,
    NdisNblTrackerEvent_CustomSent = 152,
    NdisNblTrackerEvent_CustomSendCompleted = 153,
    NdisNblTrackerEvent_OtherDatapath = 154,
    NdisNblTrackerEvent_LoopbackIndicated = 155,
    NdisNblTrackerEvent_LoopbackReturned = 156,
    NdisNblTrackerEvent_OwnershipMax = 157
};

typedef enum _NDIS_NET_BUFFER_LIST_INFO {
    TcpIpChecksumNetBufferListInfo = 0,
    TcpOffloadBytesTransferred = 0,
    IPsecOffloadV1NetBufferListInfo = 1,
    IPsecOffloadV2NetBufferListInfo = 1,
    TcpLargeSendNetBufferListInfo = 2,
    TcpReceiveNoPush = 2,
    ClassificationHandleNetBufferListInfo = 3,
    Ieee8021QNetBufferListInfo = 4,
    NetBufferListCancelId = 5,
    MediaSpecificInformation = 6,
    NetBufferListFrameType = 7,
    NetBufferListProtocolId = 7,
    NetBufferListHashValue = 8,
    NetBufferListHashInfo = 9,
    WfpNetBufferListInfo = 10,
    IPsecOffloadV2TunnelNetBufferListInfo = 11,
    IPsecOffloadV2HeaderNetBufferListInfo = 12,
    NetBufferListCorrelationId = 13,
    NetBufferListFilteringInfo = 14,
    MediaSpecificInformationEx = 15,
    NblOriginalInterfaceIfIndex = 16,
    NblReAuthWfpFlowContext = 16,
    TcpReceiveBytesTransferred = 17,
    NrtNameResolutionId = 17,
    SwitchForwardingReserved = 18,
    SwitchForwardingDetail = 19,
    VirtualSubnetInfo = 20,
    IMReserved = 21,
    TcpRecvSegCoalesceInfo = 22,
    RscTcpTimestampDelta = 23,
    TcpSendOffloadsSupplementalNetBufferListInfo = 23,
    GftOffloadInformation = 24,
    GftFlowEntryId = 25,
    MaxNetBufferListInfo = 26
};

typedef enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE {
    NdisPMProtocolOffloadIdUnspecified = 0,
    NdisPMProtocolOffloadIdIPv4ARP = 1,
    NdisPMProtocolOffloadIdIPv6NS = 2,
    NdisPMProtocolOffload80211RSNRekey = 3,
    NdisPMProtocolOffloadIdMaximum = 4
};

typedef enum _NDIS_PM_WOL_PACKET {
    NdisPMWoLPacketUnspecified = 0,
    NdisPMWoLPacketBitmapPattern = 1,
    NdisPMWoLPacketMagicPacket = 2,
    NdisPMWoLPacketIPv4TcpSyn = 3,
    NdisPMWoLPacketIPv6TcpSyn = 4,
    NdisPMWoLPacketEapolRequestIdMessage = 5,
    NdisPMWoLPacketMaximum = 6
};

typedef enum _NDIS_PORT_AUTHORIZATION_STATE {
    NdisPortAuthorizationUnknown = 0,
    NdisPortAuthorized = 1,
    NdisPortUnauthorized = 2,
    NdisPortReauthorizing = 3
};

typedef enum _NDIS_PORT_CONTROL_STATE {
    NdisPortControlStateUnknown = 0,
    NdisPortControlStateControlled = 1,
    NdisPortControlStateUncontrolled = 2
};

typedef enum _NDIS_PROCESSOR_VENDOR {
    NdisProcessorVendorUnknown = 0,
    NdisProcessorVendorGenuinIntel = 1,
    NdisProcessorVendorGenuineIntel = 1,
    NdisProcessorVendorAuthenticAMD = 2
};

typedef enum _NDIS_RECEIVE_FILTER_TEST {
    NdisReceiveFilterTestUndefined = 0,
    NdisReceiveFilterTestEqual = 1,
    NdisReceiveFilterTestMaskEqual = 2,
    NdisReceiveFilterTestNotEqual = 3,
    NdisReceiveFilterTestMaximum = 4
};

typedef enum _NDIS_RECEIVE_FILTER_TYPE {
    NdisReceiveFilterTypeUndefined = 0,
    NdisReceiveFilterTypeVMQueue = 1,
    NdisReceiveFilterTypePacketCoalescing = 2,
    NdisReceiveFilterTypeMaximum = 3
};

typedef enum _NDIS_REQUEST_TYPE {
    NdisRequestQueryInformation = 0,
    NdisRequestSetInformation = 1,
    NdisRequestQueryStatistics = 2,
    NdisRequestOpen = 3,
    NdisRequestClose = 4,
    NdisRequestSend = 5,
    NdisRequestTransferData = 6,
    NdisRequestReset = 7,
    NdisRequestGeneric1 = 8,
    NdisRequestGeneric2 = 9,
    NdisRequestGeneric3 = 10,
    NdisRequestGeneric4 = 11,
    NdisRequestMethod = 12
};

typedef enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS {
    NDIS_RFC6877_464XLAT_OFFLOAD_NOT_SUPPORTED = 0,
    NDIS_RFC6877_464XLAT_OFFLOAD_DISABLED = 1,
    NDIS_RFC6877_464XLAT_OFFLOAD_ENABLED = 2,
    NDIS_RFC6877_464XLAT_OFFLOAD_ON_DEMAND = 3
};

typedef enum _NDIS_SHUTDOWN_ACTION {
    NdisShutdownPowerOff = 0,
    NdisShutdownBugCheck = 1
};

typedef enum _NL_ECN_CODEPOINT {
    NlEcnCodepointNotEct = 0,
    NlEcnCodepointEct1 = 1,
    NlEcnCodepointEct0 = 2,
    NlEcnCodepointCe = 3
};

typedef enum _NPI_MODULEID_TYPE {
    MIT_GUID = 1,
    MIT_IF_LUID = 2
};

typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3
};

typedef enum _OB_OPEN_REASON {
    ObCreateHandle = 0,
    ObOpenHandle = 1,
    ObDuplicateHandle = 2,
    ObInheritHandle = 3,
    ObMaxOpenReason = 4
};

typedef enum _POOL_TYPE {
    NonPagedPool = 0,
    NonPagedPoolExecute = 0,
    PagedPool = 1,
    NonPagedPoolMustSucceed = 2,
    DontUseThisType = 3,
    NonPagedPoolCacheAligned = 4,
    PagedPoolCacheAligned = 5,
    NonPagedPoolCacheAlignedMustS = 6,
    MaxPoolType = 7,
    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = 2,
    NonPagedPoolBaseCacheAligned = 4,
    NonPagedPoolBaseCacheAlignedMustS = 6,
    NonPagedPoolSession = 32,
    PagedPoolSession = 33,
    NonPagedPoolMustSucceedSession = 34,
    DontUseThisTypeSession = 35,
    NonPagedPoolCacheAlignedSession = 36,
    PagedPoolCacheAlignedSession = 37,
    NonPagedPoolCacheAlignedMustSSession = 38,
    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = 516,
    NonPagedPoolSessionNx = 544
};

typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3
};

typedef enum _POWER_REQUEST_TYPE_INTERNAL {
    PowerRequestDisplayRequiredInternal = 0,
    PowerRequestSystemRequiredInternal = 1,
    PowerRequestAwayModeRequiredInternal = 2,
    PowerRequestExecutionRequiredInternal = 3,
    PowerRequestPerfBoostRequiredInternal = 4,
    PowerRequestActiveLockScreenInternal = 5,
    PowerRequestInternalInvalid = 6
};

typedef enum _POWER_STATE_TYPE {
    SystemPowerState = 0,
    DevicePowerState = 1
};

typedef enum _PO_MODERN_SLEEP_ACTION {
    PoModernSleepActionGlobalActivatorsVeto = 0,
    PoModernSleepActionNonBlockingPhases = 1,
    PoModernSleepActionForceIdle = 2,
    PoModernSleepActionMinimalBlockingNotificationClients = 3,
    PoModernSleepActionMax = 4
};

typedef enum _PS_ATTRIBUTE_NUM {
    PsAttributeParentProcess = 0,
    PsAttributeDebugObject = 1,
    PsAttributeToken = 2,
    PsAttributeClientId = 3,
    PsAttributeTebAddress = 4,
    PsAttributeImageName = 5,
    PsAttributeImageInfo = 6,
    PsAttributeMemoryReserve = 7,
    PsAttributePriorityClass = 8,
    PsAttributeErrorMode = 9,
    PsAttributeStdHandleInfo = 10,
    PsAttributeHandleList = 11,
    PsAttributeGroupAffinity = 12,
    PsAttributePreferredNode = 13,
    PsAttributeIdealProcessor = 14,
    PsAttributeUmsThread = 15,
    PsAttributeMitigationOptions = 16,
    PsAttributeProtectionLevel = 17,
    PsAttributeSecureProcess = 18,
    PsAttributeJobList = 19,
    PsAttributeChildProcessPolicy = 20,
    PsAttributeAllApplicationPackagesPolicy = 21,
    PsAttributeWin32kFilter = 22,
    PsAttributeSafeOpenPromptOriginClaim = 23,
    PsAttributeBnoIsolation = 24,
    PsAttributeDesktopAppPolicy = 25,
    PsAttributeChpe = 26,
    PsAttributeMax = 27
};

typedef enum _PS_MITIGATION_OPTION {
    PS_MITIGATION_OPTION_NX = 0,
    PS_MITIGATION_OPTION_SEHOP = 1,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    PS_MITIGATION_OPTION_CET_SHADOW_STACKS = 31
};

typedef enum _PS_PROTECTED_SIGNER {
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerWinSystem = 7,
    PsProtectedSignerApp = 8,
    PsProtectedSignerMax = 9
};

typedef enum _PS_PROTECTED_TYPE {
    PsProtectedTypeNone = 0,
    PsProtectedTypeProtectedLight = 1,
    PsProtectedTypeProtected = 2,
    PsProtectedTypeMax = 3
};

typedef enum _PS_STD_HANDLE_STATE {
    PsNeverDuplicate = 0,
    PsRequestDuplicate = 1,
    PsAlwaysDuplicate = 2,
    PsMaxStdHandleStates = 3
};

typedef enum _PS_WAKE_REASON {
    PsWakeReasonUser = 0,
    PsWakeReasonExecutionRequired = 1,
    PsWakeReasonKernel = 2,
    PsWakeReasonInstrumentation = 3,
    PsWakeReasonPreserveProcess = 4,
    PsWakeReasonActivityReference = 5,
    PsWakeReasonWorkOnBehalf = 6,
    PsMaxWakeReasons = 7
};

typedef enum _REG_NOTIFY_CLASS {
    RegNtDeleteKey = 0,
    RegNtPreDeleteKey = 0,
    RegNtSetValueKey = 1,
    RegNtPreSetValueKey = 1,
    RegNtDeleteValueKey = 2,
    RegNtPreDeleteValueKey = 2,
    RegNtSetInformationKey = 3,
    RegNtPreSetInformationKey = 3,
    RegNtRenameKey = 4,
    RegNtPreRenameKey = 4,
    RegNtEnumerateKey = 5,
    RegNtPreEnumerateKey = 5,
    RegNtEnumerateValueKey = 6,
    RegNtPreEnumerateValueKey = 6,
    RegNtQueryKey = 7,
    RegNtPreQueryKey = 7,
    RegNtQueryValueKey = 8,
    RegNtPreQueryValueKey = 8,
    RegNtQueryMultipleValueKey = 9,
    RegNtPreQueryMultipleValueKey = 9,
    RegNtPreCreateKey = 10,
    RegNtPostCreateKey = 11,
    RegNtPreOpenKey = 12,
    RegNtPostOpenKey = 13,
    RegNtKeyHandleClose = 14,
    RegNtPreKeyHandleClose = 14,
    RegNtPostDeleteKey = 15,
    RegNtPostSetValueKey = 16,
    RegNtPostDeleteValueKey = 17,
    RegNtPostSetInformationKey = 18,
    RegNtPostRenameKey = 19,
    RegNtPostEnumerateKey = 20,
    RegNtPostEnumerateValueKey = 21,
    RegNtPostQueryKey = 22,
    RegNtPostQueryValueKey = 23,
    RegNtPostQueryMultipleValueKey = 24,
    RegNtPostKeyHandleClose = 25,
    RegNtPreCreateKeyEx = 26,
    RegNtPostCreateKeyEx = 27,
    RegNtPreOpenKeyEx = 28,
    RegNtPostOpenKeyEx = 29,
    RegNtPreFlushKey = 30,
    RegNtPostFlushKey = 31,
    RegNtPreLoadKey = 32,
    RegNtPostLoadKey = 33,
    RegNtPreUnLoadKey = 34,
    RegNtPostUnLoadKey = 35,
    RegNtPreQueryKeySecurity = 36,
    RegNtPostQueryKeySecurity = 37,
    RegNtPreSetKeySecurity = 38,
    RegNtPostSetKeySecurity = 39,
    RegNtCallbackObjectContextCleanup = 40,
    RegNtPreRestoreKey = 41,
    RegNtPostRestoreKey = 42,
    RegNtPreSaveKey = 43,
    RegNtPostSaveKey = 44,
    RegNtPreReplaceKey = 45,
    RegNtPostReplaceKey = 46,
    RegNtPreQueryKeyName = 47,
    RegNtPostQueryKeyName = 48,
    MaxRegNtNotifyClass = 49
};

typedef enum _RESET_PORT_JOB_STATE {
    ResetPortJobStateNotStarted = 0,
    ResetPortJobStateWaitingForDisconnectCompletion = 1,
    ResetPortJobStateWaitingForActiveJobsCompletion = 2,
    ResetPortJobStateWaitingForDataPathCleanup = 3,
    ResetPortJobStateWaitingForPortINITState = 4
};

typedef enum _RTL_RESOURCE_POLICY_FLAGS {
    RTL_RESOURCE_POLICY_FLAGS_NONE = 0
};

typedef enum _SCAN_JOB_STATE {
    WiFiScanJobStateInit = 0,
    WiFiScanJobStateWaitingForScanTaskCompletion = 1,
    WiFiScanJobStateWaitingForBSSCacheUpdate = 2,
    WiFiScanJobStateCompleted = 3
};

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
};

typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor = 0,
    QuerySecurityDescriptor = 1,
    DeleteSecurityDescriptor = 2,
    AssignSecurityDescriptor = 3
};

typedef enum _START_CONNECT_ROAM_CANDIDATE_LIST_CREATION_OPTIONS {
    START_CONNECT_ROAM_RECREATE_CANDIDATE_LIST = 0,
    START_CONNECT_ROAM_CANDIDATE_LIST_AVAILABLE = 1
};

typedef enum _START_CONNECT_ROAM_NO_CANDIDATE_CONTINUE_OPTIONS {
    START_CONNECT_ROAM_STOP_IF_NO_CANDIDATES_FOUND = 0,
    START_CONNECT_ROAM_CONTINUE_IF_NO_CANDIDATE_FOUND = 1
};

typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
};

typedef enum _SYSTEM_PROCESS_CLASSIFICATION {
    SystemProcessClassificationNormal = 0,
    SystemProcessClassificationSystem = 1,
    SystemProcessClassificationSecureSystem = 2,
    SystemProcessClassificationMemCompression = 3,
    SystemProcessClassificationRegistry = 4,
    SystemProcessClassificationMaximum = 5
};

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3
};

typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass = 0,
    TraceHandleClass = 1,
    TraceEnableFlagsClass = 2,
    TraceEnableLevelClass = 3,
    GlobalLoggerHandleClass = 4,
    EventLoggerHandleClass = 5,
    AllLoggerHandlesClass = 6,
    TraceHandleByNameClass = 7,
    LoggerEventsLostClass = 8,
    TraceSessionSettingsClass = 9,
    LoggerEventsLoggedClass = 10,
    DiskIoNotifyRoutinesClass = 11,
    TraceInformationClassReserved1 = 12,
    AllPossibleNotifyRoutinesClass = 12,
    FltIoNotifyRoutinesClass = 13,
    TraceInformationClassReserved2 = 14,
    WdfNotifyRoutinesClass = 15,
    MaxTraceInformationClass = 16
};

typedef enum _TlgBlob_t {
    _TlgBlobNone = 0,
    _TlgBlobEnd = 1,
    _TlgBlobProvider = 2,
    _TlgBlobEvent3 = 3,
    _TlgBlobProvider3 = 4,
    _TlgBlobEvent2 = 5,
    _TlgBlobMax = 6
};

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3
};

typedef enum _WDFFUNCENUM {
    WdfChildListCreateTableIndex = 0,
    WdfChildListGetDeviceTableIndex = 1,
    WdfChildListRetrievePdoTableIndex = 2,
    WdfChildListRetrieveAddressDescriptionTableIndex = 3,
    WdfChildListBeginScanTableIndex = 4,
    WdfChildListEndScanTableIndex = 5,
    WdfChildListBeginIterationTableIndex = 6,
    WdfChildListRetrieveNextDeviceTableIndex = 7,
    WdfChildListEndIterationTableIndex = 8,
    WdfChildListAddOrUpdateChildDescriptionAsPresentTableIndex = 9,
    WdfChildListUpdateChildDescriptionAsMissingTableIndex = 10,
    WdfChildListUpdateAllChildDescriptionsAsPresentTableIndex = 11,
    WdfChildListRequestChildEjectTableIndex = 12,
    WdfCollectionCreateTableIndex = 13,
    WdfCollectionGetCountTableIndex = 14,
    WdfCollectionAddTableIndex = 15,
    WdfCollectionRemoveTableIndex = 16,
    WdfCollectionRemoveItemTableIndex = 17,
    WdfCollectionGetItemTableIndex = 18,
    WdfCollectionGetFirstItemTableIndex = 19,
    WdfCollectionGetLastItemTableIndex = 20,
    WdfCommonBufferCreateTableIndex = 21,
    WdfCommonBufferGetAlignedVirtualAddressTableIndex = 22,
    WdfCommonBufferGetAlignedLogicalAddressTableIndex = 23,
    WdfCommonBufferGetLengthTableIndex = 24,
    WdfControlDeviceInitAllocateTableIndex = 25,
    WdfControlDeviceInitSetShutdownNotificationTableIndex = 26,
    WdfControlFinishInitializingTableIndex = 27,
    WdfDeviceGetDeviceStateTableIndex = 28,
    WdfDeviceSetDeviceStateTableIndex = 29,
    WdfWdmDeviceGetWdfDeviceHandleTableIndex = 30,
    WdfDeviceWdmGetDeviceObjectTableIndex = 31,
    WdfDeviceWdmGetAttachedDeviceTableIndex = 32,
    WdfDeviceWdmGetPhysicalDeviceTableIndex = 33,
    WdfDeviceWdmDispatchPreprocessedIrpTableIndex = 34,
    WdfDeviceAddDependentUsageDeviceObjectTableIndex = 35,
    WdfDeviceAddRemovalRelationsPhysicalDeviceTableIndex = 36,
    WdfDeviceRemoveRemovalRelationsPhysicalDeviceTableIndex = 37,
    WdfDeviceClearRemovalRelationsDevicesTableIndex = 38,
    WdfDeviceGetDriverTableIndex = 39,
    WdfDeviceRetrieveDeviceNameTableIndex = 40,
    WdfDeviceAssignMofResourceNameTableIndex = 41,
    WdfDeviceGetIoTargetTableIndex = 42,
    WdfDeviceGetDevicePnpStateTableIndex = 43,
    WdfDeviceGetDevicePowerStateTableIndex = 44,
    WdfDeviceGetDevicePowerPolicyStateTableIndex = 45,
    WdfDeviceAssignS0IdleSettingsTableIndex = 46,
    WdfDeviceAssignSxWakeSettingsTableIndex = 47,
    WdfDeviceOpenRegistryKeyTableIndex = 48,
    WdfDeviceSetSpecialFileSupportTableIndex = 49,
    WdfDeviceSetCharacteristicsTableIndex = 50,
    WdfDeviceGetCharacteristicsTableIndex = 51,
    WdfDeviceGetAlignmentRequirementTableIndex = 52,
    WdfDeviceSetAlignmentRequirementTableIndex = 53,
    WdfDeviceInitFreeTableIndex = 54,
    WdfDeviceInitSetPnpPowerEventCallbacksTableIndex = 55,
    WdfDeviceInitSetPowerPolicyEventCallbacksTableIndex = 56,
    WdfDeviceInitSetPowerPolicyOwnershipTableIndex = 57,
    WdfDeviceInitRegisterPnpStateChangeCallbackTableIndex = 58,
    WdfDeviceInitRegisterPowerStateChangeCallbackTableIndex = 59,
    WdfDeviceInitRegisterPowerPolicyStateChangeCallbackTableIndex = 60,
    WdfDeviceInitSetIoTypeTableIndex = 61,
    WdfDeviceInitSetExclusiveTableIndex = 62,
    WdfDeviceInitSetPowerNotPageableTableIndex = 63,
    WdfDeviceInitSetPowerPageableTableIndex = 64,
    WdfDeviceInitSetPowerInrushTableIndex = 65,
    WdfDeviceInitSetDeviceTypeTableIndex = 66,
    WdfDeviceInitAssignNameTableIndex = 67,
    WdfDeviceInitAssignSDDLStringTableIndex = 68,
    WdfDeviceInitSetDeviceClassTableIndex = 69,
    WdfDeviceInitSetCharacteristicsTableIndex = 70,
    WdfDeviceInitSetFileObjectConfigTableIndex = 71,
    WdfDeviceInitSetRequestAttributesTableIndex = 72,
    WdfDeviceInitAssignWdmIrpPreprocessCallbackTableIndex = 73,
    WdfDeviceInitSetIoInCallerContextCallbackTableIndex = 74,
    WdfDeviceCreateTableIndex = 75,
    WdfDeviceSetStaticStopRemoveTableIndex = 76,
    WdfDeviceCreateDeviceInterfaceTableIndex = 77,
    WdfDeviceSetDeviceInterfaceStateTableIndex = 78,
    WdfDeviceRetrieveDeviceInterfaceStringTableIndex = 79,
    WdfDeviceCreateSymbolicLinkTableIndex = 80,
    WdfDeviceQueryPropertyTableIndex = 81,
    WdfDeviceAllocAndQueryPropertyTableIndex = 82,
    WdfDeviceSetPnpCapabilitiesTableIndex = 83,
    WdfDeviceSetPowerCapabilitiesTableIndex = 84,
    WdfDeviceSetBusInformationForChildrenTableIndex = 85,
    WdfDeviceIndicateWakeStatusTableIndex = 86,
    WdfDeviceSetFailedTableIndex = 87,
    WdfDeviceStopIdleNoTrackTableIndex = 88,
    WdfDeviceResumeIdleNoTrackTableIndex = 89,
    WdfDeviceGetFileObjectTableIndex = 90,
    WdfDeviceEnqueueRequestTableIndex = 91,
    WdfDeviceGetDefaultQueueTableIndex = 92,
    WdfDeviceConfigureRequestDispatchingTableIndex = 93,
    WdfDmaEnablerCreateTableIndex = 94,
    WdfDmaEnablerGetMaximumLengthTableIndex = 95,
    WdfDmaEnablerGetMaximumScatterGatherElementsTableIndex = 96,
    WdfDmaEnablerSetMaximumScatterGatherElementsTableIndex = 97,
    WdfDmaTransactionCreateTableIndex = 98,
    WdfDmaTransactionInitializeTableIndex = 99,
    WdfDmaTransactionInitializeUsingRequestTableIndex = 100,
    WdfDmaTransactionExecuteTableIndex = 101,
    WdfDmaTransactionReleaseTableIndex = 102,
    WdfDmaTransactionDmaCompletedTableIndex = 103,
    WdfDmaTransactionDmaCompletedWithLengthTableIndex = 104,
    WdfDmaTransactionDmaCompletedFinalTableIndex = 105,
    WdfDmaTransactionGetBytesTransferredTableIndex = 106,
    WdfDmaTransactionSetMaximumLengthTableIndex = 107,
    WdfDmaTransactionGetRequestTableIndex = 108,
    WdfDmaTransactionGetCurrentDmaTransferLengthTableIndex = 109,
    WdfDmaTransactionGetDeviceTableIndex = 110,
    WdfDpcCreateTableIndex = 111,
    WdfDpcEnqueueTableIndex = 112,
    WdfDpcCancelTableIndex = 113,
    WdfDpcGetParentObjectTableIndex = 114,
    WdfDpcWdmGetDpcTableIndex = 115,
    WdfDriverCreateTableIndex = 116,
    WdfDriverGetRegistryPathTableIndex = 117,
    WdfDriverWdmGetDriverObjectTableIndex = 118,
    WdfDriverOpenParametersRegistryKeyTableIndex = 119,
    WdfWdmDriverGetWdfDriverHandleTableIndex = 120,
    WdfDriverRegisterTraceInfoTableIndex = 121,
    WdfDriverRetrieveVersionStringTableIndex = 122,
    WdfDriverIsVersionAvailableTableIndex = 123,
    WdfFdoInitWdmGetPhysicalDeviceTableIndex = 124,
    WdfFdoInitOpenRegistryKeyTableIndex = 125,
    WdfFdoInitQueryPropertyTableIndex = 126,
    WdfFdoInitAllocAndQueryPropertyTableIndex = 127,
    WdfFdoInitSetEventCallbacksTableIndex = 128,
    WdfFdoInitSetFilterTableIndex = 129,
    WdfFdoInitSetDefaultChildListConfigTableIndex = 130,
    WdfFdoQueryForInterfaceTableIndex = 131,
    WdfFdoGetDefaultChildListTableIndex = 132,
    WdfFdoAddStaticChildTableIndex = 133,
    WdfFdoLockStaticChildListForIterationTableIndex = 134,
    WdfFdoRetrieveNextStaticChildTableIndex = 135,
    WdfFdoUnlockStaticChildListFromIterationTableIndex = 136,
    WdfFileObjectGetFileNameTableIndex = 137,
    WdfFileObjectGetFlagsTableIndex = 138,
    WdfFileObjectGetDeviceTableIndex = 139,
    WdfFileObjectWdmGetFileObjectTableIndex = 140,
    WdfInterruptCreateTableIndex = 141,
    WdfInterruptQueueDpcForIsrTableIndex = 142,
    WdfInterruptSynchronizeTableIndex = 143,
    WdfInterruptAcquireLockTableIndex = 144,
    WdfInterruptReleaseLockTableIndex = 145,
    WdfInterruptEnableTableIndex = 146,
    WdfInterruptDisableTableIndex = 147,
    WdfInterruptWdmGetInterruptTableIndex = 148,
    WdfInterruptGetInfoTableIndex = 149,
    WdfInterruptSetPolicyTableIndex = 150,
    WdfInterruptGetDeviceTableIndex = 151,
    WdfIoQueueCreateTableIndex = 152,
    WdfIoQueueGetStateTableIndex = 153,
    WdfIoQueueStartTableIndex = 154,
    WdfIoQueueStopTableIndex = 155,
    WdfIoQueueStopSynchronouslyTableIndex = 156,
    WdfIoQueueGetDeviceTableIndex = 157,
    WdfIoQueueRetrieveNextRequestTableIndex = 158,
    WdfIoQueueRetrieveRequestByFileObjectTableIndex = 159,
    WdfIoQueueFindRequestTableIndex = 160,
    WdfIoQueueRetrieveFoundRequestTableIndex = 161,
    WdfIoQueueDrainSynchronouslyTableIndex = 162,
    WdfIoQueueDrainTableIndex = 163,
    WdfIoQueuePurgeSynchronouslyTableIndex = 164,
    WdfIoQueuePurgeTableIndex = 165,
    WdfIoQueueReadyNotifyTableIndex = 166,
    WdfIoTargetCreateTableIndex = 167,
    WdfIoTargetOpenTableIndex = 168,
    WdfIoTargetCloseForQueryRemoveTableIndex = 169,
    WdfIoTargetCloseTableIndex = 170,
    WdfIoTargetStartTableIndex = 171,
    WdfIoTargetStopTableIndex = 172,
    WdfIoTargetGetStateTableIndex = 173,
    WdfIoTargetGetDeviceTableIndex = 174,
    WdfIoTargetQueryTargetPropertyTableIndex = 175,
    WdfIoTargetAllocAndQueryTargetPropertyTableIndex = 176,
    WdfIoTargetQueryForInterfaceTableIndex = 177,
    WdfIoTargetWdmGetTargetDeviceObjectTableIndex = 178,
    WdfIoTargetWdmGetTargetPhysicalDeviceTableIndex = 179,
    WdfIoTargetWdmGetTargetFileObjectTableIndex = 180,
    WdfIoTargetWdmGetTargetFileHandleTableIndex = 181,
    WdfIoTargetSendReadSynchronouslyTableIndex = 182,
    WdfIoTargetFormatRequestForReadTableIndex = 183,
    WdfIoTargetSendWriteSynchronouslyTableIndex = 184,
    WdfIoTargetFormatRequestForWriteTableIndex = 185,
    WdfIoTargetSendIoctlSynchronouslyTableIndex = 186,
    WdfIoTargetFormatRequestForIoctlTableIndex = 187,
    WdfIoTargetSendInternalIoctlSynchronouslyTableIndex = 188,
    WdfIoTargetFormatRequestForInternalIoctlTableIndex = 189,
    WdfIoTargetSendInternalIoctlOthersSynchronouslyTableIndex = 190,
    WdfIoTargetFormatRequestForInternalIoctlOthersTableIndex = 191,
    WdfMemoryCreateTableIndex = 192,
    WdfMemoryCreatePreallocatedTableIndex = 193,
    WdfMemoryGetBufferTableIndex = 194,
    WdfMemoryAssignBufferTableIndex = 195,
    WdfMemoryCopyToBufferTableIndex = 196,
    WdfMemoryCopyFromBufferTableIndex = 197,
    WdfLookasideListCreateTableIndex = 198,
    WdfMemoryCreateFromLookasideTableIndex = 199,
    WdfDeviceMiniportCreateTableIndex = 200,
    WdfDriverMiniportUnloadTableIndex = 201,
    WdfObjectGetTypedContextWorkerTableIndex = 202,
    WdfObjectAllocateContextTableIndex = 203,
    WdfObjectContextGetObjectTableIndex = 204,
    WdfObjectReferenceActualTableIndex = 205,
    WdfObjectDereferenceActualTableIndex = 206,
    WdfObjectCreateTableIndex = 207,
    WdfObjectDeleteTableIndex = 208,
    WdfObjectQueryTableIndex = 209,
    WdfPdoInitAllocateTableIndex = 210,
    WdfPdoInitSetEventCallbacksTableIndex = 211,
    WdfPdoInitAssignDeviceIDTableIndex = 212,
    WdfPdoInitAssignInstanceIDTableIndex = 213,
    WdfPdoInitAddHardwareIDTableIndex = 214,
    WdfPdoInitAddCompatibleIDTableIndex = 215,
    WdfPdoInitAddDeviceTextTableIndex = 216,
    WdfPdoInitSetDefaultLocaleTableIndex = 217,
    WdfPdoInitAssignRawDeviceTableIndex = 218,
    WdfPdoMarkMissingTableIndex = 219,
    WdfPdoRequestEjectTableIndex = 220,
    WdfPdoGetParentTableIndex = 221,
    WdfPdoRetrieveIdentificationDescriptionTableIndex = 222,
    WdfPdoRetrieveAddressDescriptionTableIndex = 223,
    WdfPdoUpdateAddressDescriptionTableIndex = 224,
    WdfPdoAddEjectionRelationsPhysicalDeviceTableIndex = 225,
    WdfPdoRemoveEjectionRelationsPhysicalDeviceTableIndex = 226,
    WdfPdoClearEjectionRelationsDevicesTableIndex = 227,
    WdfDeviceAddQueryInterfaceTableIndex = 228,
    WdfRegistryOpenKeyTableIndex = 229,
    WdfRegistryCreateKeyTableIndex = 230,
    WdfRegistryCloseTableIndex = 231,
    WdfRegistryWdmGetHandleTableIndex = 232,
    WdfRegistryRemoveKeyTableIndex = 233,
    WdfRegistryRemoveValueTableIndex = 234,
    WdfRegistryQueryValueTableIndex = 235,
    WdfRegistryQueryMemoryTableIndex = 236,
    WdfRegistryQueryMultiStringTableIndex = 237,
    WdfRegistryQueryUnicodeStringTableIndex = 238,
    WdfRegistryQueryStringTableIndex = 239,
    WdfRegistryQueryULongTableIndex = 240,
    WdfRegistryAssignValueTableIndex = 241,
    WdfRegistryAssignMemoryTableIndex = 242,
    WdfRegistryAssignMultiStringTableIndex = 243,
    WdfRegistryAssignUnicodeStringTableIndex = 244,
    WdfRegistryAssignStringTableIndex = 245,
    WdfRegistryAssignULongTableIndex = 246,
    WdfRequestCreateTableIndex = 247,
    WdfRequestCreateFromIrpTableIndex = 248,
    WdfRequestReuseTableIndex = 249,
    WdfRequestChangeTargetTableIndex = 250,
    WdfRequestFormatRequestUsingCurrentTypeTableIndex = 251,
    WdfRequestWdmFormatUsingStackLocationTableIndex = 252,
    WdfRequestSendTableIndex = 253,
    WdfRequestGetStatusTableIndex = 254,
    WdfRequestMarkCancelableTableIndex = 255,
    WdfRequestUnmarkCancelableTableIndex = 256,
    WdfRequestIsCanceledTableIndex = 257,
    WdfRequestCancelSentRequestTableIndex = 258,
    WdfRequestIsFrom32BitProcessTableIndex = 259,
    WdfRequestSetCompletionRoutineTableIndex = 260,
    WdfRequestGetCompletionParamsTableIndex = 261,
    WdfRequestAllocateTimerTableIndex = 262,
    WdfRequestCompleteTableIndex = 263,
    WdfRequestCompleteWithPriorityBoostTableIndex = 264,
    WdfRequestCompleteWithInformationTableIndex = 265,
    WdfRequestGetParametersTableIndex = 266,
    WdfRequestRetrieveInputMemoryTableIndex = 267,
    WdfRequestRetrieveOutputMemoryTableIndex = 268,
    WdfRequestRetrieveInputBufferTableIndex = 269,
    WdfRequestRetrieveOutputBufferTableIndex = 270,
    WdfRequestRetrieveInputWdmMdlTableIndex = 271,
    WdfRequestRetrieveOutputWdmMdlTableIndex = 272,
    WdfRequestRetrieveUnsafeUserInputBufferTableIndex = 273,
    WdfRequestRetrieveUnsafeUserOutputBufferTableIndex = 274,
    WdfRequestSetInformationTableIndex = 275,
    WdfRequestGetInformationTableIndex = 276,
    WdfRequestGetFileObjectTableIndex = 277,
    WdfRequestProbeAndLockUserBufferForReadTableIndex = 278,
    WdfRequestProbeAndLockUserBufferForWriteTableIndex = 279,
    WdfRequestGetRequestorModeTableIndex = 280,
    WdfRequestForwardToIoQueueTableIndex = 281,
    WdfRequestGetIoQueueTableIndex = 282,
    WdfRequestRequeueTableIndex = 283,
    WdfRequestStopAcknowledgeTableIndex = 284,
    WdfRequestWdmGetIrpTableIndex = 285,
    WdfIoResourceRequirementsListSetSlotNumberTableIndex = 286,
    WdfIoResourceRequirementsListSetInterfaceTypeTableIndex = 287,
    WdfIoResourceRequirementsListAppendIoResListTableIndex = 288,
    WdfIoResourceRequirementsListInsertIoResListTableIndex = 289,
    WdfIoResourceRequirementsListGetCountTableIndex = 290,
    WdfIoResourceRequirementsListGetIoResListTableIndex = 291,
    WdfIoResourceRequirementsListRemoveTableIndex = 292,
    WdfIoResourceRequirementsListRemoveByIoResListTableIndex = 293,
    WdfIoResourceListCreateTableIndex = 294,
    WdfIoResourceListAppendDescriptorTableIndex = 295,
    WdfIoResourceListInsertDescriptorTableIndex = 296,
    WdfIoResourceListUpdateDescriptorTableIndex = 297,
    WdfIoResourceListGetCountTableIndex = 298,
    WdfIoResourceListGetDescriptorTableIndex = 299,
    WdfIoResourceListRemoveTableIndex = 300,
    WdfIoResourceListRemoveByDescriptorTableIndex = 301,
    WdfCmResourceListAppendDescriptorTableIndex = 302,
    WdfCmResourceListInsertDescriptorTableIndex = 303,
    WdfCmResourceListGetCountTableIndex = 304,
    WdfCmResourceListGetDescriptorTableIndex = 305,
    WdfCmResourceListRemoveTableIndex = 306,
    WdfCmResourceListRemoveByDescriptorTableIndex = 307,
    WdfStringCreateTableIndex = 308,
    WdfStringGetUnicodeStringTableIndex = 309,
    WdfObjectAcquireLockTableIndex = 310,
    WdfObjectReleaseLockTableIndex = 311,
    WdfWaitLockCreateTableIndex = 312,
    WdfWaitLockAcquireTableIndex = 313,
    WdfWaitLockReleaseTableIndex = 314,
    WdfSpinLockCreateTableIndex = 315,
    WdfSpinLockAcquireTableIndex = 316,
    WdfSpinLockReleaseTableIndex = 317,
    WdfTimerCreateTableIndex = 318,
    WdfTimerStartTableIndex = 319,
    WdfTimerStopTableIndex = 320,
    WdfTimerGetParentObjectTableIndex = 321,
    WdfUsbTargetDeviceCreateTableIndex = 322,
    WdfUsbTargetDeviceRetrieveInformationTableIndex = 323,
    WdfUsbTargetDeviceGetDeviceDescriptorTableIndex = 324,
    WdfUsbTargetDeviceRetrieveConfigDescriptorTableIndex = 325,
    WdfUsbTargetDeviceQueryStringTableIndex = 326,
    WdfUsbTargetDeviceAllocAndQueryStringTableIndex = 327,
    WdfUsbTargetDeviceFormatRequestForStringTableIndex = 328,
    WdfUsbTargetDeviceGetNumInterfacesTableIndex = 329,
    WdfUsbTargetDeviceSelectConfigTableIndex = 330,
    WdfUsbTargetDeviceWdmGetConfigurationHandleTableIndex = 331,
    WdfUsbTargetDeviceRetrieveCurrentFrameNumberTableIndex = 332,
    WdfUsbTargetDeviceSendControlTransferSynchronouslyTableIndex = 333,
    WdfUsbTargetDeviceFormatRequestForControlTransferTableIndex = 334,
    WdfUsbTargetDeviceIsConnectedSynchronousTableIndex = 335,
    WdfUsbTargetDeviceResetPortSynchronouslyTableIndex = 336,
    WdfUsbTargetDeviceCyclePortSynchronouslyTableIndex = 337,
    WdfUsbTargetDeviceFormatRequestForCyclePortTableIndex = 338,
    WdfUsbTargetDeviceSendUrbSynchronouslyTableIndex = 339,
    WdfUsbTargetDeviceFormatRequestForUrbTableIndex = 340,
    WdfUsbTargetPipeGetInformationTableIndex = 341,
    WdfUsbTargetPipeIsInEndpointTableIndex = 342,
    WdfUsbTargetPipeIsOutEndpointTableIndex = 343,
    WdfUsbTargetPipeGetTypeTableIndex = 344,
    WdfUsbTargetPipeSetNoMaximumPacketSizeCheckTableIndex = 345,
    WdfUsbTargetPipeWriteSynchronouslyTableIndex = 346,
    WdfUsbTargetPipeFormatRequestForWriteTableIndex = 347,
    WdfUsbTargetPipeReadSynchronouslyTableIndex = 348,
    WdfUsbTargetPipeFormatRequestForReadTableIndex = 349,
    WdfUsbTargetPipeConfigContinuousReaderTableIndex = 350,
    WdfUsbTargetPipeAbortSynchronouslyTableIndex = 351,
    WdfUsbTargetPipeFormatRequestForAbortTableIndex = 352,
    WdfUsbTargetPipeResetSynchronouslyTableIndex = 353,
    WdfUsbTargetPipeFormatRequestForResetTableIndex = 354,
    WdfUsbTargetPipeSendUrbSynchronouslyTableIndex = 355,
    WdfUsbTargetPipeFormatRequestForUrbTableIndex = 356,
    WdfUsbInterfaceGetInterfaceNumberTableIndex = 357,
    WdfUsbInterfaceGetNumEndpointsTableIndex = 358,
    WdfUsbInterfaceGetDescriptorTableIndex = 359,
    WdfUsbInterfaceSelectSettingTableIndex = 360,
    WdfUsbInterfaceGetEndpointInformationTableIndex = 361,
    WdfUsbTargetDeviceGetInterfaceTableIndex = 362,
    WdfUsbInterfaceGetConfiguredSettingIndexTableIndex = 363,
    WdfUsbInterfaceGetNumConfiguredPipesTableIndex = 364,
    WdfUsbInterfaceGetConfiguredPipeTableIndex = 365,
    WdfUsbTargetPipeWdmGetPipeHandleTableIndex = 366,
    WdfVerifierDbgBreakPointTableIndex = 367,
    WdfVerifierKeBugCheckTableIndex = 368,
    WdfWmiProviderCreateTableIndex = 369,
    WdfWmiProviderGetDeviceTableIndex = 370,
    WdfWmiProviderIsEnabledTableIndex = 371,
    WdfWmiProviderGetTracingHandleTableIndex = 372,
    WdfWmiInstanceCreateTableIndex = 373,
    WdfWmiInstanceRegisterTableIndex = 374,
    WdfWmiInstanceDeregisterTableIndex = 375,
    WdfWmiInstanceGetDeviceTableIndex = 376,
    WdfWmiInstanceGetProviderTableIndex = 377,
    WdfWmiInstanceFireEventTableIndex = 378,
    WdfWorkItemCreateTableIndex = 379,
    WdfWorkItemEnqueueTableIndex = 380,
    WdfWorkItemGetParentObjectTableIndex = 381,
    WdfWorkItemFlushTableIndex = 382,
    WdfCommonBufferCreateWithConfigTableIndex = 383,
    WdfDmaEnablerGetFragmentLengthTableIndex = 384,
    WdfDmaEnablerWdmGetDmaAdapterTableIndex = 385,
    WdfUsbInterfaceGetNumSettingsTableIndex = 386,
    WdfDeviceRemoveDependentUsageDeviceObjectTableIndex = 387,
    WdfDeviceGetSystemPowerActionTableIndex = 388,
    WdfInterruptSetExtendedPolicyTableIndex = 389,
    WdfIoQueueAssignForwardProgressPolicyTableIndex = 390,
    WdfPdoInitAssignContainerIDTableIndex = 391,
    WdfPdoInitAllowForwardingRequestToParentTableIndex = 392,
    WdfRequestMarkCancelableExTableIndex = 393,
    WdfRequestIsReservedTableIndex = 394,
    WdfRequestForwardToParentDeviceIoQueueTableIndex = 395,
    WdfCxDeviceInitAllocateTableIndex = 396,
    WdfCxDeviceInitAssignWdmIrpPreprocessCallbackTableIndex = 397,
    WdfCxDeviceInitSetIoInCallerContextCallbackTableIndex = 398,
    WdfCxDeviceInitSetRequestAttributesTableIndex = 399,
    WdfCxDeviceInitSetFileObjectConfigTableIndex = 400,
    WdfDeviceWdmDispatchIrpTableIndex = 401,
    WdfDeviceWdmDispatchIrpToIoQueueTableIndex = 402,
    WdfDeviceInitSetRemoveLockOptionsTableIndex = 403,
    WdfDeviceConfigureWdmIrpDispatchCallbackTableIndex = 404,
    WdfDmaEnablerConfigureSystemProfileTableIndex = 405,
    WdfDmaTransactionInitializeUsingOffsetTableIndex = 406,
    WdfDmaTransactionGetTransferInfoTableIndex = 407,
    WdfDmaTransactionSetChannelConfigurationCallbackTableIndex = 408,
    WdfDmaTransactionSetTransferCompleteCallbackTableIndex = 409,
    WdfDmaTransactionSetImmediateExecutionTableIndex = 410,
    WdfDmaTransactionAllocateResourcesTableIndex = 411,
    WdfDmaTransactionSetDeviceAddressOffsetTableIndex = 412,
    WdfDmaTransactionFreeResourcesTableIndex = 413,
    WdfDmaTransactionCancelTableIndex = 414,
    WdfDmaTransactionWdmGetTransferContextTableIndex = 415,
    WdfInterruptQueueWorkItemForIsrTableIndex = 416,
    WdfInterruptTryToAcquireLockTableIndex = 417,
    WdfIoQueueStopAndPurgeTableIndex = 418,
    WdfIoQueueStopAndPurgeSynchronouslyTableIndex = 419,
    WdfIoTargetPurgeTableIndex = 420,
    WdfUsbTargetDeviceCreateWithParametersTableIndex = 421,
    WdfUsbTargetDeviceQueryUsbCapabilityTableIndex = 422,
    WdfUsbTargetDeviceCreateUrbTableIndex = 423,
    WdfUsbTargetDeviceCreateIsochUrbTableIndex = 424,
    WdfDeviceWdmAssignPowerFrameworkSettingsTableIndex = 425,
    WdfDmaTransactionStopSystemTransferTableIndex = 426,
    WdfCxVerifierKeBugCheckTableIndex = 427,
    WdfInterruptReportActiveTableIndex = 428,
    WdfInterruptReportInactiveTableIndex = 429,
    WdfDeviceInitSetReleaseHardwareOrderOnFailureTableIndex = 430,
    WdfGetTriageInfoTableIndex = 431,
    WdfDeviceInitSetIoTypeExTableIndex = 432,
    WdfDeviceQueryPropertyExTableIndex = 433,
    WdfDeviceAllocAndQueryPropertyExTableIndex = 434,
    WdfDeviceAssignPropertyTableIndex = 435,
    WdfFdoInitQueryPropertyExTableIndex = 436,
    WdfFdoInitAllocAndQueryPropertyExTableIndex = 437,
    WdfDeviceStopIdleActualTableIndex = 438,
    WdfDeviceResumeIdleActualTableIndex = 439,
    WdfDeviceGetSelfIoTargetTableIndex = 440,
    WdfDeviceInitAllowSelfIoTargetTableIndex = 441,
    WdfIoTargetSelfAssignDefaultIoQueueTableIndex = 442,
    WdfDeviceOpenDevicemapKeyTableIndex = 443,
    WdfFunctionTableNumEntries = 444
};

typedef enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS {
    WdfChildListRetrieveDeviceUndefined = 0,
    WdfChildListRetrieveDeviceSuccess = 1,
    WdfChildListRetrieveDeviceNotYetCreated = 2,
    WdfChildListRetrieveDeviceNoSuchDevice = 3
};

typedef enum _WDF_DEVICE_FAILED_ACTION {
    WdfDeviceFailedUndefined = 0,
    WdfDeviceFailedAttemptRestart = 1,
    WdfDeviceFailedNoRestart = 2
};

typedef enum _WDF_DEVICE_IO_TYPE {
    WdfDeviceIoUndefined = 0,
    WdfDeviceIoNeither = 1,
    WdfDeviceIoBuffered = 2,
    WdfDeviceIoDirect = 3,
    WdfDeviceIoBufferedOrDirect = 4,
    WdfDeviceIoMaximum = 5
};

typedef enum _WDF_DEVICE_PNP_STATE {
    WdfDevStatePnpInvalid = 0,
    WdfDevStatePnpObjectCreated = 256,
    WdfDevStatePnpCheckForDevicePresence = 257,
    WdfDevStatePnpEjectFailed = 258,
    WdfDevStatePnpEjectHardware = 259,
    WdfDevStatePnpEjectedWaitingForRemove = 260,
    WdfDevStatePnpInit = 261,
    WdfDevStatePnpInitStarting = 262,
    WdfDevStatePnpInitSurpriseRemoved = 263,
    WdfDevStatePnpHardwareAvailable = 264,
    WdfDevStatePnpEnableInterfaces = 265,
    WdfDevStatePnpHardwareAvailablePowerPolicyFailed = 266,
    WdfDevStatePnpQueryRemoveAskDriver = 267,
    WdfDevStatePnpQueryRemovePending = 268,
    WdfDevStatePnpQueryRemoveStaticCheck = 269,
    WdfDevStatePnpQueriedRemoving = 270,
    WdfDevStatePnpQueryStopAskDriver = 271,
    WdfDevStatePnpQueryStopPending = 272,
    WdfDevStatePnpQueryStopStaticCheck = 273,
    WdfDevStatePnpQueryCanceled = 274,
    WdfDevStatePnpRemoved = 275,
    WdfDevStatePnpPdoRemoved = 276,
    WdfDevStatePnpRemovedPdoWait = 277,
    WdfDevStatePnpRemovedPdoSurpriseRemoved = 278,
    WdfDevStatePnpRemovingDisableInterfaces = 279,
    WdfDevStatePnpRestarting = 280,
    WdfDevStatePnpStarted = 281,
    WdfDevStatePnpStartedCancelStop = 282,
    WdfDevStatePnpStartedCancelRemove = 283,
    WdfDevStatePnpStartedRemoving = 284,
    WdfDevStatePnpStartingFromStopped = 285,
    WdfDevStatePnpStopped = 286,
    WdfDevStatePnpStoppedWaitForStartCompletion = 287,
    WdfDevStatePnpStartedStopping = 288,
    WdfDevStatePnpSurpriseRemove = 289,
    WdfDevStatePnpInitQueryRemove = 290,
    WdfDevStatePnpInitQueryRemoveCanceled = 291,
    WdfDevStatePnpFdoRemoved = 292,
    WdfDevStatePnpRemovedWaitForChildren = 293,
    WdfDevStatePnpQueriedSurpriseRemove = 294,
    WdfDevStatePnpSurpriseRemoveIoStarted = 295,
    WdfDevStatePnpFailedPowerDown = 296,
    WdfDevStatePnpFailedIoStarting = 297,
    WdfDevStatePnpFailedOwnHardware = 298,
    WdfDevStatePnpFailed = 299,
    WdfDevStatePnpFailedSurpriseRemoved = 300,
    WdfDevStatePnpFailedStarted = 301,
    WdfDevStatePnpFailedWaitForRemove = 302,
    WdfDevStatePnpFailedInit = 303,
    WdfDevStatePnpPdoInitFailed = 304,
    WdfDevStatePnpRestart = 305,
    WdfDevStatePnpRestartReleaseHardware = 306,
    WdfDevStatePnpRestartHardwareAvailable = 307,
    WdfDevStatePnpPdoRestart = 308,
    WdfDevStatePnpFinal = 309,
    WdfDevStatePnpRemovedChildrenRemoved = 310,
    WdfDevStatePnpQueryRemoveEnsureDeviceAwake = 311,
    WdfDevStatePnpQueryStopEnsureDeviceAwake = 312,
    WdfDevStatePnpFailedPowerPolicyRemoved = 313,
    WdfDevStatePnpNull = 314
};

typedef enum _WDF_DEVICE_POWER_POLICY_STATE {
    WdfDevStatePwrPolInvalid = 0,
    WdfDevStatePwrPolObjectCreated = 1280,
    WdfDevStatePwrPolStarting = 1281,
    WdfDevStatePwrPolStartingSucceeded = 1282,
    WdfDevStatePwrPolStartingFailed = 1283,
    WdfDevStatePwrPolStartingDecideS0Wake = 1284,
    WdfDevStatePwrPolStartedIdleCapable = 1285,
    WdfDevStatePwrPolTimerExpiredNoWake = 1286,
    WdfDevStatePwrPolTimerExpiredNoWakeCompletePowerDown = 1287,
    WdfDevStatePwrPolWaitingUnarmed = 1288,
    WdfDevStatePwrPolWaitingUnarmedQueryIdle = 1289,
    WdfDevStatePwrPolS0NoWakePowerUp = 1290,
    WdfDevStatePwrPolS0NoWakeCompletePowerUp = 1291,
    WdfDevStatePwrPolSystemSleepFromDeviceWaitingUnarmed = 1292,
    WdfDevStatePwrPolSystemSleepNeedWake = 1293,
    WdfDevStatePwrPolSystemSleepNeedWakeCompletePowerUp = 1294,
    WdfDevStatePwrPolSystemSleepPowerRequestFailed = 1295,
    WdfDevStatePwrPolCheckPowerPageable = 1296,
    WdfDevStatePwrPolSleepingWakeWakeArrived = 1297,
    WdfDevStatePwrPolSleepingWakeRevertArmWake = 1298,
    WdfDevStatePwrPolSystemAsleepWakeArmed = 1299,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabled = 1300,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceled = 1301,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisarm = 1302,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggered = 1303,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0 = 1304,
    WdfDevStatePwrPolSystemWakeDeviceWokeDisarm = 1305,
    WdfDevStatePwrPolSleepingWakeWakeArrivedNP = 0x851a,
    WdfDevStatePwrPolSleepingWakeRevertArmWakeNP = 0x851b,
    WdfDevStatePwrPolSleepingWakePowerDownFailed = 1308,
    WdfDevStatePwrPolSleepingWakePowerDownFailedWakeCanceled = 1309,
    WdfDevStatePwrPolSystemAsleepWakeArmedNP = 0x851e,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledNP = 0x851f,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceledNP = 0x8520,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisarmNP = 0x8521,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredNP = 0x8522,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0NP = 0x8523,
    WdfDevStatePwrPolSystemWakeDeviceWokeDisarmNP = 0x8524,
    WdfDevStatePwrPolSystemWakeDeviceWakeCompletePowerUp = 1317,
    WdfDevStatePwrPolSleeping = 1318,
    WdfDevStatePwrPolSleepingNoWakePowerDown = 1319,
    WdfDevStatePwrPolSleepingNoWakeCompletePowerDown = 1320,
    WdfDevStatePwrPolSleepingNoWakeDxRequestFailed = 1321,
    WdfDevStatePwrPolSleepingWakePowerDown = 1322,
    WdfDevStatePwrPolSleepingSendWake = 1323,
    WdfDevStatePwrPolSystemAsleepNoWake = 1324,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisabled = 1325,
    WdfDevStatePwrPolSystemWakeDeviceToD0 = 1326,
    WdfDevStatePwrPolSystemWakeDeviceToD0CompletePowerUp = 1327,
    WdfDevStatePwrPolSystemWakeQueryIdle = 1328,
    WdfDevStatePwrPolStartedWakeCapable = 1329,
    WdfDevStatePwrPolTimerExpiredDecideUsbSS = 1330,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDown = 1331,
    WdfDevStatePwrPolTimerExpiredWakeCapableSendWake = 1332,
    WdfDevStatePwrPolTimerExpiredWakeCapableUsbSS = 1333,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeArrived = 1334,
    WdfDevStatePwrPolTimerExpiredWakeCapableCancelWake = 1335,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeCanceled = 1336,
    WdfDevStatePwrPolTimerExpiredWakeCapableCleanup = 1337,
    WdfDevStatePwrPolTimerExpiredWakeCapableDxAllocFailed = 1338,
    WdfDevStatePwrPolTimerExpiredWakeCompletedPowerDown = 1339,
    WdfDevStatePwrPolTimerExpiredWakeCompletedPowerUp = 1340,
    WdfDevStatePwrPolWaitingArmedUsbSS = 1341,
    WdfDevStatePwrPolWaitingArmed = 1342,
    WdfDevStatePwrPolWaitingArmedQueryIdle = 1343,
    WdfDevStatePwrPolIoPresentArmed = 1344,
    WdfDevStatePwrPolIoPresentArmedWakeCanceled = 1345,
    WdfDevStatePwrPolS0WakeDisarm = 1346,
    WdfDevStatePwrPolS0WakeCompletePowerUp = 1347,
    WdfDevStatePwrPolTimerExpiredWakeSucceeded = 1348,
    WdfDevStatePwrPolTimerExpiredWakeCompletedDisarm = 1349,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeSucceeded = 1350,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeFailed = 1351,
    WdfDevStatePwrPolWakeFailedUsbSS = 1352,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedCancelWake = 1353,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeCanceled = 1354,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedUsbSS = 1355,
    WdfDevStatePwrPolCancelingWakeForSystemSleep = 1356,
    WdfDevStatePwrPolCancelingWakeForSystemSleepWakeCanceled = 1357,
    WdfDevStatePwrPolDisarmingWakeForSystemSleepCompletePowerUp = 1358,
    WdfDevStatePwrPolPowerUpForSystemSleepFailed = 1359,
    WdfDevStatePwrPolWokeFromS0UsbSS = 1360,
    WdfDevStatePwrPolWokeFromS0 = 1361,
    WdfDevStatePwrPolWokeFromS0NotifyDriver = 1362,
    WdfDevStatePwrPolStoppingResetDevice = 1363,
    WdfDevStatePwrPolStoppingResetDeviceCompletePowerUp = 1364,
    WdfDevStatePwrPolStoppingResetDeviceFailed = 1365,
    WdfDevStatePwrPolStoppingD0 = 1366,
    WdfDevStatePwrPolStoppingD0Failed = 1367,
    WdfDevStatePwrPolStoppingDisarmWake = 1368,
    WdfDevStatePwrPolStoppingDisarmWakeCancelWake = 1369,
    WdfDevStatePwrPolStoppingDisarmWakeWakeCanceled = 1370,
    WdfDevStatePwrPolStopping = 1371,
    WdfDevStatePwrPolStoppingFailed = 1372,
    WdfDevStatePwrPolStoppingSendStatus = 1373,
    WdfDevStatePwrPolStoppingCancelTimer = 1374,
    WdfDevStatePwrPolStoppingWaitForIdleTimeout = 1375,
    WdfDevStatePwrPolStoppingCancelUsbSS = 1376,
    WdfDevStatePwrPolStoppingWaitForUsbSSCompletion = 1377,
    WdfDevStatePwrPolStoppingCancelWake = 1378,
    WdfDevStatePwrPolStopped = 1379,
    WdfDevStatePwrPolCancelUsbSS = 1380,
    WdfDevStatePwrPolStarted = 1381,
    WdfDevStatePwrPolStartedCancelTimer = 1382,
    WdfDevStatePwrPolStartedWaitForIdleTimeout = 1383,
    WdfDevStatePwrPolStartedWakeCapableCancelTimerForSleep = 1384,
    WdfDevStatePwrPolStartedWakeCapableWaitForIdleTimeout = 1385,
    WdfDevStatePwrPolStartedWakeCapableSleepingUsbSS = 1386,
    WdfDevStatePwrPolStartedIdleCapableCancelTimerForSleep = 1387,
    WdfDevStatePwrPolStartedIdleCapableWaitForIdleTimeout = 1388,
    WdfDevStatePwrPolDeviceD0PowerRequestFailed = 1389,
    WdfDevStatePwrPolDevicePowerRequestFailed = 1390,
    WdfDevStatePwrPolGotoDx = 1391,
    WdfDevStatePwrPolGotoDxInDx = 1392,
    WdfDevStatePwrPolDx = 1393,
    WdfDevStatePwrPolGotoD0 = 1394,
    WdfDevStatePwrPolGotoD0InD0 = 1395,
    WdfDevStatePwrPolFinal = 1396,
    WdfDevStatePwrPolSleepingPowerDownNotProcessed = 1397,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownNotProcessed = 1398,
    WdfDevStatePwrPolTimerExpiredNoWakePowerDownNotProcessed = 1399,
    WdfDevStatePwrPolTimerExpiredNoWakePoweredDownDisableIdleTimer = 1400,
    WdfDevStatePwrPolStoppingWaitingForImplicitPowerDown = 1401,
    WdfDevStatePwrPolStoppingPoweringUp = 1402,
    WdfDevStatePwrPolStoppingPoweringDown = 1403,
    WdfDevStatePwrPolPowerUpForSystemSleepNotSeen = 1404,
    WdfDevStatePwrPolWaitingArmedStoppingCancelUsbSS = 1405,
    WdfDevStatePwrPolWaitingArmedWakeFailedCancelUsbSS = 1406,
    WdfDevStatePwrPolWaitingArmedIoPresentCancelUsbSS = 1407,
    WdfDevStatePwrPolWaitingArmedWakeSucceededCancelUsbSS = 1408,
    WdfDevStatePwrPolCancelingUsbSSForSystemSleep = 1409,
    WdfDevStatePwrPolStoppingD0CancelUsbSS = 1410,
    WdfDevStatePwrPolStartingPoweredUp = 1411,
    WdfDevStatePwrPolIdleCapableDeviceIdle = 1412,
    WdfDevStatePwrPolDeviceIdleReturnToActive = 1413,
    WdfDevStatePwrPolDeviceIdleSleeping = 1414,
    WdfDevStatePwrPolDeviceIdleStopping = 1415,
    WdfDevStatePwrPolTimerExpiredNoWakeUndoPowerDown = 1416,
    WdfDevStatePwrPolWakeCapableDeviceIdle = 1417,
    WdfDevStatePwrPolWakeCapableUsbSSCompleted = 1418,
    WdfDevStatePwrPolTimerExpiredWakeCapableUndoPowerDown = 1419,
    WdfDevStatePwrPolTimerExpiredWakeCompletedHardwareStarted = 1420,
    WdfDevStatePwrPolStoppedRemoving = 1421,
    WdfDevStatePwrPolRemoved = 1422,
    WdfDevStatePwrPolRestarting = 1423,
    WdfDevStatePwrPolRestartingFailed = 1424,
    WdfDevStatePwrPolStartingPoweredUpFailed = 1425,
    WdfDevStatePwrPolTimerExpiredNoWakeReturnToActive = 1426,
    WdfDevStatePwrPolWaitingArmedWakeInterruptFired = 1427,
    WdfDevStatePwrPolSystemWakeDeviceWakeInterruptFired = 1428,
    WdfDevStatePwrPolSystemWakeDeviceWakeInterruptFiredNP = 0x8595,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeInterruptArrived = 1430,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeInterruptArrived = 1431,
    WdfDevStatePwrPolWaitingArmedWakeInterruptFiredDuringPowerDown = 1432,
    WdfDevStatePwrPolNull = 1433
};

typedef enum _WDF_DEVICE_POWER_STATE {
    WdfDevStatePowerInvalid = 0,
    WdfDevStatePowerObjectCreated = 768,
    WdfDevStatePowerCheckDeviceType = 769,
    WdfDevStatePowerCheckDeviceTypeNP = 0x8302,
    WdfDevStatePowerCheckParentState = 771,
    WdfDevStatePowerCheckParentStateNP = 0x8304,
    WdfDevStatePowerEnablingWakeAtBus = 773,
    WdfDevStatePowerEnablingWakeAtBusNP = 0x8306,
    WdfDevStatePowerD0 = 775,
    WdfDevStatePowerD0NP = 0x8308,
    WdfDevStatePowerD0BusWakeOwner = 777,
    WdfDevStatePowerD0BusWakeOwnerNP = 0x830a,
    WdfDevStatePowerD0ArmedForWake = 779,
    WdfDevStatePowerD0ArmedForWakeNP = 0x830c,
    WdfDevStatePowerD0DisarmingWakeAtBus = 781,
    WdfDevStatePowerD0DisarmingWakeAtBusNP = 0x830e,
    WdfDevStatePowerD0Starting = 783,
    WdfDevStatePowerD0StartingConnectInterrupt = 784,
    WdfDevStatePowerD0StartingDmaEnable = 785,
    WdfDevStatePowerD0StartingStartSelfManagedIo = 786,
    WdfDevStatePowerDecideD0State = 787,
    WdfDevStatePowerGotoD3Stopped = 788,
    WdfDevStatePowerStopped = 789,
    WdfDevStatePowerStartingCheckDeviceType = 790,
    WdfDevStatePowerStartingChild = 791,
    WdfDevStatePowerDxDisablingWakeAtBus = 792,
    WdfDevStatePowerDxDisablingWakeAtBusNP = 0x8319,
    WdfDevStatePowerGotoDx = 794,
    WdfDevStatePowerGotoDxNP = 0x831b,
    WdfDevStatePowerGotoDxIoStopped = 796,
    WdfDevStatePowerGotoDxIoStoppedNP = 0x831d,
    WdfDevStatePowerGotoDxNPFailed = 0x831e,
    WdfDevStatePowerDx = 799,
    WdfDevStatePowerDxNP = 0x8320,
    WdfDevStatePowerGotoDxArmedForWake = 801,
    WdfDevStatePowerGotoDxArmedForWakeNP = 0x8322,
    WdfDevStatePowerGotoDxIoStoppedArmedForWake = 803,
    WdfDevStatePowerGotoDxIoStoppedArmedForWakeNP = 0x8324,
    WdfDevStatePowerDxArmedForWake = 805,
    WdfDevStatePowerDxArmedForWakeNP = 0x8326,
    WdfDevStatePowerCheckParentStateArmedForWake = 807,
    WdfDevStatePowerCheckParentStateArmedForWakeNP = 0x8328,
    WdfDevStatePowerWaitForParentArmedForWake = 809,
    WdfDevStatePowerWaitForParentArmedForWakeNP = 0x832a,
    WdfDevStatePowerStartSelfManagedIo = 811,
    WdfDevStatePowerStartSelfManagedIoNP = 0x832c,
    WdfDevStatePowerStartSelfManagedIoFailed = 813,
    WdfDevStatePowerStartSelfManagedIoFailedNP = 0x832e,
    WdfDevStatePowerWaitForParent = 815,
    WdfDevStatePowerWaitForParentNP = 0x8330,
    WdfDevStatePowerWakePending = 817,
    WdfDevStatePowerWakePendingNP = 0x8332,
    WdfDevStatePowerWaking = 819,
    WdfDevStatePowerWakingNP = 0x8334,
    WdfDevStatePowerWakingConnectInterrupt = 821,
    WdfDevStatePowerWakingConnectInterruptNP = 0x8336,
    WdfDevStatePowerWakingConnectInterruptFailed = 823,
    WdfDevStatePowerWakingConnectInterruptFailedNP = 0x8338,
    WdfDevStatePowerWakingDmaEnable = 825,
    WdfDevStatePowerWakingDmaEnableNP = 0x833a,
    WdfDevStatePowerWakingDmaEnableFailed = 827,
    WdfDevStatePowerWakingDmaEnableFailedNP = 0x833c,
    WdfDevStatePowerReportPowerUpFailedDerefParent = 829,
    WdfDevStatePowerReportPowerUpFailed = 830,
    WdfDevStatePowerPowerFailedPowerDown = 831,
    WdfDevStatePowerReportPowerDownFailed = 832,
    WdfDevStatePowerInitialConnectInterruptFailed = 833,
    WdfDevStatePowerInitialDmaEnableFailed = 834,
    WdfDevStatePowerInitialSelfManagedIoFailed = 835,
    WdfDevStatePowerInitialPowerUpFailedDerefParent = 836,
    WdfDevStatePowerInitialPowerUpFailed = 837,
    WdfDevStatePowerDxStoppedDisarmWake = 838,
    WdfDevStatePowerDxStoppedDisarmWakeNP = 0x8347,
    WdfDevStatePowerGotoDxStoppedDisableInterruptNP = 0x8348,
    WdfDevStatePowerGotoDxStopped = 841,
    WdfDevStatePowerDxStopped = 842,
    WdfDevStatePowerGotoStopped = 843,
    WdfDevStatePowerStoppedCompleteDx = 844,
    WdfDevStatePowerDxStoppedDecideDxState = 845,
    WdfDevStatePowerDxStoppedArmForWake = 846,
    WdfDevStatePowerDxStoppedArmForWakeNP = 0x834f,
    WdfDevStatePowerFinalPowerDownFailed = 848,
    WdfDevStatePowerFinal = 849,
    WdfDevStatePowerGotoImplicitD3DisarmWakeAtBus = 850,
    WdfDevStatePowerUpFailed = 851,
    WdfDevStatePowerUpFailedDerefParent = 852,
    WdfDevStatePowerGotoDxFailed = 853,
    WdfDevStatePowerGotoDxStoppedDisableInterrupt = 854,
    WdfDevStatePowerUpFailedNP = 0x8357,
    WdfDevStatePowerUpFailedDerefParentNP = 0x8358,
    WdfDevStatePowerNotifyingD0ExitToWakeInterrupts = 857,
    WdfDevStatePowerNotifyingD0EntryToWakeInterrupts = 858,
    WdfDevStatePowerNotifyingD0ExitToWakeInterruptsNP = 0x835b,
    WdfDevStatePowerNotifyingD0EntryToWakeInterruptsNP = 0x835c,
    WdfDevStatePowerNull = 861
};

typedef enum _WDF_DEVICE_STATE_FLAGS {
    WdfDevStateNP = 0x8000
};

typedef enum _WDF_DMA_DIRECTION {
    WdfDmaDirectionReadFromDevice = 0,
    WdfDmaDirectionWriteToDevice = 1
};

typedef enum _WDF_DMA_PROFILE {
    WdfDmaProfileInvalid = 0,
    WdfDmaProfilePacket = 1,
    WdfDmaProfileScatterGather = 2,
    WdfDmaProfilePacket64 = 3,
    WdfDmaProfileScatterGather64 = 4,
    WdfDmaProfileScatterGatherDuplex = 5,
    WdfDmaProfileScatterGather64Duplex = 6,
    WdfDmaProfileSystem = 7,
    WdfDmaProfileSystemDuplex = 8
};

typedef enum _WDF_EXECUTION_LEVEL {
    WdfExecutionLevelInvalid = 0,
    WdfExecutionLevelInheritFromParent = 1,
    WdfExecutionLevelPassive = 2,
    WdfExecutionLevelDispatch = 3
};

typedef enum _WDF_FILEOBJECT_CLASS {
    WdfFileObjectInvalid = 0,
    WdfFileObjectNotRequired = 1,
    WdfFileObjectWdfCanUseFsContext = 2,
    WdfFileObjectWdfCanUseFsContext2 = 3,
    WdfFileObjectWdfCannotUseFsContexts = 4,
    WdfFileObjectCanBeOptional = -2147483648
};

typedef enum _WDF_INTERRUPT_POLARITY {
    WdfInterruptPolarityUnknown = 0,
    WdfInterruptActiveHigh = 1,
    WdfInterruptActiveLow = 2
};

typedef enum _WDF_INTERRUPT_POLICY {
    WdfIrqPolicyMachineDefault = 0,
    WdfIrqPolicyAllCloseProcessors = 1,
    WdfIrqPolicyOneCloseProcessor = 2,
    WdfIrqPolicyAllProcessorsInMachine = 3,
    WdfIrqPolicySpecifiedProcessors = 4,
    WdfIrqPolicySpreadMessagesAcrossAllProcessors = 5
};

typedef enum _WDF_INTERRUPT_PRIORITY {
    WdfIrqPriorityUndefined = 0,
    WdfIrqPriorityLow = 1,
    WdfIrqPriorityNormal = 2,
    WdfIrqPriorityHigh = 3
};

typedef enum _WDF_IO_FORWARD_PROGRESS_ACTION {
    WdfIoForwardProgressActionInvalid = 0,
    WdfIoForwardProgressActionFailRequest = 1,
    WdfIoForwardProgressActionUseReservedRequest = 2
};

typedef enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY {
    WdfIoForwardProgressInvalidPolicy = 0,
    WdfIoForwardProgressReservedPolicyAlwaysUseReservedRequest = 1,
    WdfIoForwardProgressReservedPolicyUseExamine = 2,
    WdfIoForwardProgressReservedPolicyPagingIO = 3
};

typedef enum _WDF_IO_QUEUE_DISPATCH_TYPE {
    WdfIoQueueDispatchInvalid = 0,
    WdfIoQueueDispatchSequential = 1,
    WdfIoQueueDispatchParallel = 2,
    WdfIoQueueDispatchManual = 3,
    WdfIoQueueDispatchMax = 4
};

typedef enum _WDF_IO_QUEUE_STATE {
    WdfIoQueueAcceptRequests = 1,
    WdfIoQueueDispatchRequests = 2,
    WdfIoQueueNoRequests = 4,
    WdfIoQueueDriverNoRequests = 8,
    WdfIoQueuePnpHeld = 16
};

typedef enum _WDF_IO_TARGET_OPEN_TYPE {
    WdfIoTargetOpenUndefined = 0,
    WdfIoTargetOpenUseExistingDevice = 1,
    WdfIoTargetOpenByName = 2,
    WdfIoTargetOpenReopen = 3,
    WdfIoTargetOpenLocalTargetByFile = 4
};

typedef enum _WDF_IO_TARGET_PURGE_IO_ACTION {
    WdfIoTargetPurgeIoUndefined = 0,
    WdfIoTargetPurgeIoAndWait = 1,
    WdfIoTargetPurgeIo = 2
};

typedef enum _WDF_IO_TARGET_SENT_IO_ACTION {
    WdfIoTargetSentIoUndefined = 0,
    WdfIoTargetCancelSentIo = 1,
    WdfIoTargetWaitForSentIoToComplete = 2,
    WdfIoTargetLeaveSentIoPending = 3
};

typedef enum _WDF_IO_TARGET_STATE {
    WdfIoTargetStateUndefined = 0,
    WdfIoTargetStarted = 1,
    WdfIoTargetStopped = 2,
    WdfIoTargetClosedForQueryRemove = 3,
    WdfIoTargetClosed = 4,
    WdfIoTargetDeleted = 5,
    WdfIoTargetPurged = 6
};

typedef enum _WDF_MEMORY_DESCRIPTOR_TYPE {
    WdfMemoryDescriptorTypeInvalid = 0,
    WdfMemoryDescriptorTypeBuffer = 1,
    WdfMemoryDescriptorTypeMdl = 2,
    WdfMemoryDescriptorTypeHandle = 3
};

typedef enum _WDF_POWER_DEVICE_STATE {
    WdfPowerDeviceInvalid = 0,
    WdfPowerDeviceD0 = 1,
    WdfPowerDeviceD1 = 2,
    WdfPowerDeviceD2 = 3,
    WdfPowerDeviceD3 = 4,
    WdfPowerDeviceD3Final = 5,
    WdfPowerDevicePrepareForHibernation = 6,
    WdfPowerDeviceMaximum = 7
};

typedef enum _WDF_POWER_POLICY_IDLE_TIMEOUT_CONSTANTS {
    IdleTimeoutDefaultConstant = 0
};

typedef enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE {
    DriverManagedIdleTimeout = 0,
    SystemManagedIdleTimeout = 1,
    SystemManagedIdleTimeoutWithHint = 2
};

typedef enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES {
    IdleCapsInvalid = 0,
    IdleCannotWakeFromS0 = 1,
    IdleCanWakeFromS0 = 2,
    IdleUsbSelectiveSuspend = 3
};

typedef enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL {
    IdleUserControlInvalid = 0,
    IdleDoNotAllowUserControl = 1,
    IdleAllowUserControl = 2
};

typedef enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL {
    WakeUserControlInvalid = 0,
    WakeDoNotAllowUserControl = 1,
    WakeAllowUserControl = 2
};

typedef enum _WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE {
    WdfReleaseHardwareOrderOnFailureInvalid = 0,
    WdfReleaseHardwareOrderOnFailureEarly = 1,
    WdfReleaseHardwareOrderOnFailureAfterDescendants = 2
};

typedef enum _WDF_REQUEST_FORWARD_OPTIONS_FLAGS {
    WDF_REQUEST_FORWARD_OPTION_SEND_AND_FORGET = 1
};

typedef enum _WDF_REQUEST_REUSE_FLAGS {
    WDF_REQUEST_REUSE_NO_FLAGS = 0,
    WDF_REQUEST_REUSE_SET_NEW_IRP = 1
};

typedef enum _WDF_REQUEST_SEND_OPTIONS_FLAGS {
    WDF_REQUEST_SEND_OPTION_TIMEOUT = 1,
    WDF_REQUEST_SEND_OPTION_SYNCHRONOUS = 2,
    WDF_REQUEST_SEND_OPTION_IGNORE_TARGET_STATE = 4,
    WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET = 8,
    WDF_REQUEST_SEND_OPTION_IMPERSONATE_CLIENT = 0x10000,
    WDF_REQUEST_SEND_OPTION_IMPERSONATION_IGNORE_FAILURE = 0x20000
};

typedef enum _WDF_REQUEST_TYPE {
    WdfRequestTypeCreate = 0,
    WdfRequestTypeCreateNamedPipe = 1,
    WdfRequestTypeClose = 2,
    WdfRequestTypeRead = 3,
    WdfRequestTypeWrite = 4,
    WdfRequestTypeQueryInformation = 5,
    WdfRequestTypeSetInformation = 6,
    WdfRequestTypeQueryEA = 7,
    WdfRequestTypeSetEA = 8,
    WdfRequestTypeFlushBuffers = 9,
    WdfRequestTypeQueryVolumeInformation = 10,
    WdfRequestTypeSetVolumeInformation = 11,
    WdfRequestTypeDirectoryControl = 12,
    WdfRequestTypeFileSystemControl = 13,
    WdfRequestTypeDeviceControl = 14,
    WdfRequestTypeDeviceControlInternal = 15,
    WdfRequestTypeShutdown = 16,
    WdfRequestTypeLockControl = 17,
    WdfRequestTypeCleanup = 18,
    WdfRequestTypeCreateMailSlot = 19,
    WdfRequestTypeQuerySecurity = 20,
    WdfRequestTypeSetSecurity = 21,
    WdfRequestTypePower = 22,
    WdfRequestTypeSystemControl = 23,
    WdfRequestTypeDeviceChange = 24,
    WdfRequestTypeQueryQuota = 25,
    WdfRequestTypeSetQuota = 26,
    WdfRequestTypePnp = 27,
    WdfRequestTypeOther = 28,
    WdfRequestTypeUsb = 64,
    WdfRequestTypeNoFormat = 255,
    WdfRequestTypeMax = 256
};

typedef enum _WDF_RETRIEVE_CHILD_FLAGS {
    WdfRetrieveUnspecified = 0,
    WdfRetrievePresentChildren = 1,
    WdfRetrieveMissingChildren = 2,
    WdfRetrievePendingChildren = 4,
    WdfRetrieveAddedChildren = 5,
    WdfRetrieveAllChildren = 7
};

typedef enum _WDF_SPECIAL_FILE_TYPE {
    WdfSpecialFileUndefined = 0,
    WdfSpecialFilePaging = 1,
    WdfSpecialFileHibernation = 2,
    WdfSpecialFileDump = 3,
    WdfSpecialFileBoot = 4,
    WdfSpecialFileMax = 5
};

typedef enum _WDF_STATE_NOTIFICATION_TYPE {
    StateNotificationInvalid = 0,
    StateNotificationEnterState = 1,
    StateNotificationPostProcessState = 2,
    StateNotificationLeaveState = 4,
    StateNotificationAllStates = 7
};

typedef enum _WDF_SYNCHRONIZATION_SCOPE {
    WdfSynchronizationScopeInvalid = 0,
    WdfSynchronizationScopeInheritFromParent = 1,
    WdfSynchronizationScopeDevice = 2,
    WdfSynchronizationScopeQueue = 3,
    WdfSynchronizationScopeNone = 4
};

typedef enum _WDF_TRI_STATE {
    WdfFalse = 0,
    WdfTrue = 1,
    WdfUseDefault = 2
};

typedef enum _WDF_WMI_PROVIDER_CONTROL {
    WdfWmiControlInvalid = 0,
    WdfWmiEventControl = 1,
    WdfWmiInstanceControl = 2
};

typedef enum _WDF_WMI_PROVIDER_FLAGS {
    WdfWmiProviderEventOnly = 1,
    WdfWmiProviderExpensive = 2,
    WdfWmiProviderTracing = 4,
    WdfWmiProviderValidFlags = 7
};

typedef enum _WDI_ASSOC_STATUS {
    WDI_ASSOC_STATUS_SUCCESS = 0,
    WDI_ASSOC_STATUS_FAILURE = 1,
    WDI_ASSOC_STATUS_UNREACHABLE = 2,
    WDI_ASSOC_STATUS_RADIO_OFF = 3,
    WDI_ASSOC_STATUS_PHY_DISABLED = 4,
    WDI_ASSOC_STATUS_ABORTED = 5,
    WDI_ASSOC_STATUS_CANDIDATE_LIST_EXHAUSTED = 6,
    WDI_ASSOC_STATUS_PROBE_TX_FAILURE = 30,
    WDI_ASSOC_STATUS_NO_BEACON_PROBE_RESPONSE = 31,
    WDI_ASSOC_STATUS_AUTH_REQUEST_NO_ACK = 40,
    WDI_ASSOC_STATUS_NO_AUTH_RESPONSE = 41,
    WDI_ASSOC_STATUS_AUTH_RESPONSE_CAPABILITY_MISMATCH = 42,
    WDI_ASSOC_STATUS_BAD_AUTH_RESPONSE = 43,
    WDI_ASSOC_STATUS_AUTH_FAILED_BY_PEER = 44,
    WDI_ASSOC_STATUS_AUTH_EXCHANGE_FAILURE = 45,
    WDI_ASSOC_STATUS_ASSOC_REQUEST_NO_ACK = 50,
    WDI_ASSOC_STATUS_NO_ASSOC_RESPONSE = 51,
    WDI_ASSOC_STATUS_ASSOC_RESPONSE_CAPABILITY_MISMATCH = 52,
    WDI_ASSOC_STATUS_BAD_ASSOC_RESPONSE = 53,
    WDI_ASSOC_STATUS_ASSOC_FAILED_BY_PEER = 54,
    WDI_ASSOC_STATUS_ASSOC_EXCHANGE_FAILURE = 55,
    WDI_ASSOC_STATUS_DISASSOCIATED_BY_HOST = 7,
    WDI_ASSOC_STATUS_DISASSOCIATE_BY_DEVICE_RESET = 60,
    WDI_ASSOC_STATUS_DISASSOCIATE_UNABLE_TO_MAINTAIN = 61,
    WDI_ASSOC_STATUS_DISASSOCIATE_NOT_VISIBLE = 62,
    WDI_ASSOC_STATUS_DISASSOCIATE_NEEDED_REASSOC = 63,
    WDI_ASSOC_STATUS_PEER_DEAUTHENTICATED = 13,
    WDI_ASSOC_STATUS_PEER_DISASSOCIATED = 14,
    WDI_ASSOC_STATUS_ROAMING_BETTER_AP_FOUND = 10,
    WDI_ASSOC_STATUS_ROAMING_ASSOCIATION_LOST = 11,
    WDI_ASSOC_STATUS_ROAMING_LOW_LINK_QUALITY = 15,
    WDI_ASSOC_STATUS_RESERVED_0 = 0x1000000
};

typedef enum _WDI_AUTH_ALGORITHM {
    WDI_AUTH_ALGO_80211_OPEN = 1,
    WDI_AUTH_ALGO_80211_SHARED_KEY = 2,
    WDI_AUTH_ALGO_WPA = 3,
    WDI_AUTH_ALGO_WPA_PSK = 4,
    WDI_AUTH_ALGO_WPA_NONE = 5,
    WDI_AUTH_ALGO_RSNA = 6,
    WDI_AUTH_ALGO_RSNA_PSK = 7,
    WDI_AUTH_ALGO_IHV_START = -2147483648,
    WDI_AUTH_ALGO_IHV_END = -1
};

typedef enum _WDI_BAND_ID {
    WDI_BAND_ID_UNKNOWN = 0,
    WDI_BAND_ID_2400 = 1,
    WDI_BAND_ID_5000 = 2,
    WDI_BAND_ID_60000 = 3,
    WDI_BAND_ID_900 = 4,
    WDI_BAND_ID_IHV_CUSTOM_START = -2147483648,
    WDI_BAND_ID_IHV_CUSTOM_END = -2130706432,
    WDI_BAND_ID_ANY = -1
};

typedef enum _WDI_BLUETOOTH_COEXISTENCE_SUPPORT {
    WDI_BLUETOOTH_COEXISTENCE_UNKNOWN = 0,
    WDI_BLUETOOTH_COEXISTENCE_PERFORMANCE_MAINTAINED = 1,
    WDI_BLUETOOTH_COEXISTENCE_WIFI_DEGRADED_TO_1x1 = 2,
    WDI_BLUETOOTH_COEXISTENCE_WIFI_THROUGHPUT_DEGRADED = 3,
    WDI_BLUETOOTH_COEXISTENCE_MUTUALLY_EXCLUSIVE = 4,
    WDI_BLUETOOTH_COEXISTENCE_MAX = 5
};

typedef enum _WDI_BSS_TRANSITION_RESPONSE_RESULT {
    WDI_BSS_TRANSITION_ACCEPT = 0,
    WDI_BSS_TRANSITION_REJECT_UNSPECIFIED_REASON = 1,
    WDI_BSS_TRANSITION_REJECT_INSUFFICIENT_BEACON_PROBE_RESP_FRAMES = 2,
    WDI_BSS_TRANSITION_REJECT_INSUFFICIENT_AVAILABLE_CAPACITY = 3,
    WDI_BSS_TRANSITION_REJECT_BSS_TERMINATION_UNDESIRED = 4,
    WDI_BSS_TRANSITION_REJECT_BSS_TERMINATION_DELAY_REQUESTED = 5,
    WDI_BSS_TRANSITION_REJECT_STA_BSS_CANDIDATE_LIST_PROVIDED = 6,
    WDI_BSS_TRANSITION_REJECT_NO_SUITABLE_BSS_CANDIDATES = 7,
    WDI_BSS_TRANSITION_REJECT_LEAVING_ESS = 8,
    WDI_BSS_TRANSITION_MAX = 9
};

typedef enum _WDI_CIPHER_ALGORITHM {
    WDI_CIPHER_ALGO_NONE = 0,
    WDI_CIPHER_ALGO_WEP40 = 1,
    WDI_CIPHER_ALGO_TKIP = 2,
    WDI_CIPHER_ALGO_CCMP = 4,
    WDI_CIPHER_ALGO_WEP104 = 5,
    WDI_CIPHER_ALGO_BIP = 6,
    WDI_CIPHER_ALGO_GCMP = 8,
    WDI_CIPHER_ALGO_WPA_USE_GROUP = 256,
    WDI_CIPHER_ALGO_RSN_USE_GROUP = 256,
    WDI_CIPHER_ALGO_WEP = 257,
    WDI_CIPHER_ALGO_IHV_START = -2147483648,
    WDI_CIPHER_ALGO_IHV_END = -1
};

typedef enum _WDI_CIPHER_KEY_DIRECTION {
    WDI_CIPHER_KEY_DIRECTION_INBOUND = 1,
    WDI_CIPHER_KEY_DIRECTION_OUTBOUND = 2,
    WDI_CIPHER_KEY_DIRECTION_BOTH = 3
};

typedef enum _WDI_CIPHER_KEY_TYPE {
    WDI_CIPHER_KEY_TYPE_PAIRWISE_KEY = 1,
    WDI_CIPHER_KEY_TYPE_GROUP_KEY = 2,
    WDI_CIPHER_KEY_TYPE_IGTK = 3
};

typedef enum _WDI_CONNECTION_QUALITY_HINT {
    WDI_CONNECTION_QUALITY_AUTO_POWER_SAVE = 1,
    WDI_CONNECTION_QUALITY_LOW_LATENCY = 2,
    WDI_CONNECTION_QUALITY_HIGH_THROUGHPUT = 3,
    WDI_CONNECTION_QUALITY_NO_POWER_SAVE = 4
};

typedef enum _WDI_DS_INFO {
    WDI_DS_CHANGED = 1,
    WDI_DS_UNCHANGED = 2,
    WDI_DS_UNKNOWN = 3,
    WDI_DS_MAX = -1
};

typedef enum _WDI_EXEMPTION_ACTION_TYPE {
    WDI_EXEMPT_NO_EXEMPTION = 0,
    WDI_EXEMPT_ALWAYS = 1,
    WDI_EXEMPT_ON_KEY_MAPPING_KEY_UNAVAILABLE = 2
};

typedef enum _WDI_EXEMPTION_PACKET_TYPE {
    WDI_EXEMPT_PACKET_TYPE_UNICAST = 1,
    WDI_EXEMPT_PACKET_TYPE_MULTICAST = 2,
    WDI_EXEMPT_PACKET_TYPE_BOTH = 3
};

typedef enum _WDI_FIPS_MODE {
    WDI_FIPS_MODE_DISABLED = 0,
    WDI_FIPS_MODE_ENABLED = 1,
    WDI_FIPS_MODE_UNKNOWN = 2
};

typedef enum _WDI_FRAME_PAYLOAD_TYPE {
    WDI_FRAME_MSDU = 0,
    WDI_FRAME_MSDU_FRAGMENT = 1
};

typedef enum _WDI_IHV_TASK_PRIORITY {
    WDI_IHV_TASK_PRIORITY_HIGH = 1,
    WDI_IHV_TASK_PRIORITY_MEDIUM = 2,
    WDI_IHV_TASK_PRIORITY_LOW = 3
};

typedef enum _WDI_INDICATION_TYPE {
    WiFiIndicationInvalid = 0,
    WiFiIndicationDisassociation = 51,
    WiFiIndicationRoamingNeeded = 52,
    WiFiIndicationLinkStateChange = 53,
    WiFiIndicationP2PActionFrameReceived = 54,
    WiFiIndicationApAssociationRequestReceived = 55,
    WiFiIndicationNloDiscovery = 56,
    WiFiIndicationWakeReason = 57,
    WiFiIndicationPmkIdCandidateListUpdate = 58,
    WiFiIndicationTkipMicFailure = 59,
    WiFiIndicationBssEntryList = 62,
    WiFiIndicationRadioStatus = 67,
    WiFiIndicationAssociationResult = 76,
    WiFiIndicationP2POperatingChannel = 84,
    WiFiIndicationP2POperatingChannelAttributes = 122,
    WiFiIndicationIHVEvent = 94,
    WiFiIndicationActionFrameReceived = 103,
    WiFiIndicationTaskOffloadCurrentConfig = 104,
    WiFiIndicationFirmwareStalled = 121,
    WiFiIndicationAssociationParametersRequest = 98,
    WiFiIndicationStopAP = 115,
    WiFiIndicationCanSustainAP = 116,
    WiFiIndicationIhvTaskRequest = 110,
    WiFiIndicationIhvTaskComplete = 111,
    WiFiIndicationFTParametersNeeded = 126,
    WiFiIndicationCipherKeyUpdated = 132,
    WiFiIndicationDeviceServiceEvent = 133
};

typedef enum _WDI_INTERCONNECT_TYPE {
    WDI_INTERCONNECT_MEMORY_MAPPED = 0,
    WDI_INTERCONNECT_MESSAGE_BASED = 1,
    WDI_INTERCONNECT_UNKNOWN = 255
};

typedef enum _WDI_OPERATION_MODE {
    WDI_OPERATION_MODE_STA = 1,
    WDI_OPERATION_MODE_P2P_DEVICE = 8,
    WDI_OPERATION_MODE_P2P_CLIENT = 16,
    WDI_OPERATION_MODE_P2P_GO = 32
};

typedef enum _WDI_OS_POWER_MANAGEMENT_FLAGS {
    WDI_OS_POWER_MANAGEMENT_NONE = 0,
    WDI_OS_POWER_MANAGEMENT_ENABLE_STANDBY_NAPS = 1,
    WDI_OS_POWER_MANAGEMENT_ENABLE_S0_NAPS = 2
};

typedef enum _WDI_P2P_ACTION_FRAME_TYPE {
    WDI_P2P_ACTION_FRAME_GO_NEGOTIATION_REQUEST = 1,
    WDI_P2P_ACTION_FRAME_GO_NEGOTIATION_RESPONSE = 2,
    WDI_P2P_ACTION_FRAME_GO_NEGOTIATION_CONFIRM = 3,
    WDI_P2P_ACTION_FRAME_INVITATION_REQUEST = 4,
    WDI_P2P_ACTION_FRAME_INVITATION_RESPONSE = 5,
    WDI_P2P_ACTION_FRAME_PROVISION_DISCOVERY_REQUEST = 6,
    WDI_P2P_ACTION_FRAME_PROVISION_DISCOVERY_RESPONSE = 7,
    WDI_P2P_ACTION_FRAME_MAX_VALUE = -1
};

typedef enum _WDI_P2P_CHANNEL_INDICATE_REASON {
    WDI_P2P_CHANNEL_INDICATE_REASON_UNKNOWN = 0,
    WDI_P2P_CHANNEL_INDICATE_REASON_NEW_CONNECTION = 1,
    WDI_P2P_CHANNEL_INDICATE_REASON_ECSA_REQUESTED = 2,
    WDI_P2P_CHANNEL_INDICATE_REASON_ECSA_GO_INITIATED = 3,
    WDI_P2P_CHANNEL_INDICATE_REASON_MAX = -1
};

typedef enum _WDI_P2P_DISCOVER_TYPE {
    WDI_P2P_DISCOVER_TYPE_SCAN_ONLY = 1,
    WDI_P2P_DISCOVER_TYPE_FIND_ONLY = 2,
    WDI_P2P_DISCOVER_TYPE_AUTO = 3,
    WDI_P2P_DISCOVER_TYPE_SCAN_SOCIAL_CHANNELS = 4,
    WDI_P2P_DISCOVER_TYPE_MAX_VALUE = -1
};

typedef enum _WDI_P2P_GO_INTERNAL_RESET_POLICY {
    WDI_P2P_GO_INTERNAL_RESET_POLICY_USE_LAST_CHANNEL = 1,
    WDI_P2P_GO_INTERNAL_RESET_POLICY_ALLOW_CHANNEL_OPTIMIZATION = 2,
    WDI_P2P_GO_INTERNAL_RESET_POLICY_MAX = -1
};

typedef enum _WDI_P2P_LISTEN_STATE {
    WDI_P2P_LISTEN_STATE_OFF = 0,
    WDI_P2P_LISTEN_STATE_PASSIVE_AVAILABILITY = 8,
    WDI_P2P_LISTEN_STATE_AUTOMATIC_AVAILABILITY = 16,
    WDI_P2P_LISTEN_STATE_HIGH_AVAILABILITY = 24,
    WDI_P2P_LISTEN_STATE_DUMMY_MAX_VALUE = -1
};

typedef enum _WDI_P2P_SCAN_TYPE {
    WDI_P2P_SCAN_TYPE_ACTIVE = 1,
    WDI_P2P_SCAN_TYPE_PASSIVE = 2,
    WDI_P2P_SCAN_TYPE_AUTO = 3,
    WDI_P2P_SCAN_TYPE_MAX_VALUE = -1
};

typedef enum _WDI_P2P_SERVICE_DISCOVERY_TYPE {
    WDI_P2P_SERVICE_DISCOVERY_TYPE_NO_SERVICE_DISCOVERY = 1,
    WDI_P2P_SERVICE_DISCOVERY_TYPE_SERVICE_NAME_ONLY = 2,
    WDI_P2P_SERVICE_DISCOVERY_TYPE_SERVICE_INFORMATION = 3,
    WDI_P2P_SERVICE_DISCOVERY_TYPE_MAX_VALUE = -1
};

typedef enum _WDI_PACKET_FILTER_TYPE {
    WDI_PACKET_FILTER_NONE = 0,
    WDI_PACKET_FILTER_DIRECTED = 1,
    WDI_PACKET_FILTER_MULTICAST = 2,
    WDI_PACKET_FILTER_ALL_MULTICAST = 4,
    WDI_PACKET_FILTER_BROADCAST = 8,
    WDI_PACKET_FILTER_PROMISCUOUS = 32,
    WDI_PACKET_FILTER_802_11_RAW_DATA = 0x10000,
    WDI_PACKET_FILTER_802_11_DIRECTED_MGMT = 0x20000,
    WDI_PACKET_FILTER_802_11_BROADCAST_MGMT = 0x40000,
    WDI_PACKET_FILTER_802_11_MULTICAST_MGMT = 0x80000,
    WDI_PACKET_FILTER_802_11_ALL_MULTICAST_MGMT = 0x100000,
    WDI_PACKET_FILTER_802_11_PROMISCUOUS_MGMT = 0x200000,
    WDI_PACKET_FILTER_802_11_RAW_MGMT = 0x400000,
    WDI_PACKET_FILTER_802_11_DIRECTED_CTRL = 0x800000,
    WDI_PACKET_FILTER_802_11_BROADCAST_CTRL = 0x1000000,
    WDI_PACKET_FILTER_802_11_PROMISCUOUS_CTRL = 0x2000000,
    WDI_PACKET_FILTER_ALL = 0x3ff002f
};

typedef enum _WDI_PHY_TYPE {
    WDI_PHY_TYPE_UNKNOWN = 0,
    WDI_PHY_TYPE_ANY = 0,
    WDI_PHY_TYPE_FHSS = 1,
    WDI_PHY_TYPE_DSSS = 2,
    WDI_PHY_TYPE_IRBASEBAND = 3,
    WDI_PHY_TYPE_OFDM = 4,
    WDI_PHY_TYPE_HRDSSS = 5,
    WDI_PHY_TYPE_ERP = 6,
    WDI_PHY_TYPE_HT = 7,
    WDI_PHY_TYPE_VHT = 8,
    WDI_PHY_TYPE_DMG = 9,
    WDI_PHY_TYPE_HE = 10,
    WDI_PHY_TYPE_IHV_START = -2147483648,
    WDI_PHY_TYPE_IHV_END = -1
};

typedef enum _WDI_POWER_MODE_REASON_CODE {
    WDI_POWER_MODE_REASON_CODE_NO_CHANGE = 0,
    WDI_POWER_MODE_REASON_CODE_NONCOMPLANT_AP = 1,
    WDI_POWER_MODE_REASON_CODE_LEGACY_P2P_DEVICE = 2,
    WDI_POWER_MODE_REASON_CODE_COMPLIANT_AP = 3,
    WDI_POWER_MODE_REASON_CODE_COMPLIANT_P2P_DEVICE = 4,
    WDI_POWER_MODE_REASON_CODE_OTHERS = 5
};

typedef enum _WDI_POWER_SAVE_LEVEL {
    WDI_POWER_SAVE_LEVEL_NO_POWER_SAVE = 0,
    WDI_POWER_SAVE_LEVEL_FAST_PSP = 8,
    WDI_POWER_SAVE_LEVEL_MAX_PSP = 16,
    WDI_POWER_SAVE_LEVEL_MAXIMUM_LEVEL = 24
};

typedef enum _WDI_ROAM_CONFIGURATION_FLAGS {
    RC_CONNECT = 1,
    RC_RECONNECT = 2,
    RC_CONNECTED_ROAM = 4,
    RC_BSS_TRANSITION_MANAGEMENT_REQUEST = 8,
    RC_BSS_TRANSITION_MANAGEMENT_REQUEST_CRITICAL = 16,
    RC_BYPASS_SCAN_THROTTLING = 32,
    RC_RESUME_FROM_DX = 64,
    RC_BEST_EFFORT = 128,
    RC_CHECK_GOOD_ENOUGH_AP = 256,
    RC_USE_CHANNEL_HISTORY = 512,
    RC_INCLUDE_SSID = 1024,
    RC_USE_ROAM_EXPIRY_TIME = 2048,
    RC_DEFERRABLE_ROAM = 4096,
    RC_PERFORM_FULL_SCAN = 8192,
    RC_MAX = -2147483648
};

typedef enum _WDI_ROAM_DEBUG_CODE {
    WdiRoamDebugCodeNotSet = 0,
    WdiRoamDebugCodeNoBetterAPFound = 1,
    WdiRoamDebugCodeBestCandidateNotBetterEnough = 2,
    WdiRoamDebugCodeScanDidNotExecute = 3,
    WdiRoamDebugCodeNoBetterAPIHVRequestedRoam = 4,
    WdiRoamDebugCodeNoCandidatesFound = 5,
    WdiRoamDebugCodeNoSetKeys = 6,
    WdiRoamDebugCodeNloMatchFound = 7,
    WdiRoamDebugCodeConnectRequeueFailed = 8
};

typedef enum _WDI_ROAM_TRIGGER {
    WDI_ROAM_TRIGGER_OTHER = 0,
    WDI_ROAM_TRIGGER_CRITICAL_BSS_TRANSITION_REQUEST = 1
};

typedef enum _WDI_RX_INDICATION_LEVEL {
    WDI_RX_INDICATION_DISPATCH_GENERAL = 0,
    WDI_RX_INDICATION_DISPATCH_FIRST_OF_DPC = 1,
    WDI_RX_INDICATION_FROM_RX_RESUME_FRAMES = 2,
    WDI_RX_INDICATION_PASSIVE = 3,
    WDI_RX_INDICATION_FLAG_RESOURCES = -2147483648,
    WDI_RX_INDICATION_DISPATCH_GENERAL_WITH_LOW_RESOURCES = -2147483648,
    WDI_RX_INDICATION_DISPATCH_FIRST_OF_DPC_WITH_LOW_RESSOURCES = -2147483647,
    WDI_RX_INDICATION_FROM_RX_RESUME_FRAMES_WITH_LOW_RESOURCES = -2147483646,
    WDI_RX_INDICATION_PASSIVE_WITH_LOW_RESOURCES = -2147483645
};

typedef enum _WDI_RX_THROTTLE_LEVEL {
    WDI_RxThrottleLevelNone = 0,
    WDI_RxThrottleLevelMedium = 1,
    WDI_RxThrottleLevelAggressive = 2,
    WDI_RxThrottleLevelMax = 15
};

typedef enum _WDI_SCAN_TRIGGER {
    WDI_SCAN_TRIGGER_MANUAL = 1,
    WDI_SCAN_TRIGGER_BACKGROUND = 2,
    WDI_SCAN_TRIGGER_ROAM = 3,
    WDI_SCAN_TRIGGER_CONNECT = 4,
    WDI_SCAN_TRIGGER_ANQP_QUERY = 5,
    WDI_SCAN_TRIGGER_FAST_ROAM = 6
};

typedef enum _WDI_SCAN_TYPE {
    WDI_SCAN_TYPE_ACTIVE_ONLY = 1,
    WDI_SCAN_TYPE_PASSIVE_ONLY = 2,
    WDI_SCAN_TYPE_AUTO = 3,
    WDI_SCAN_TYPE_MAX_VALUE = 0xffff
};

typedef enum _WDI_TXRX_PEER_QOS_CAPS {
    WDI_TXRX_PeerCfgQosNone = 0,
    WDI_TXRX_PeerCfgQosCapable = 1,
    WDI_TXRX_PeerCfgUapsdTids = 2
};

typedef enum _WDI_TX_FRAME_STATUS {
    WDI_TxFrameStatus_Ok = 0,
    WDI_TxFrameStatus_Discard = 1,
    WDI_TxFrameStatus_NoAck = 2,
    WDI_TxFrameStatus_TransferCancelled = 3,
    WDI_TxFrameStatus_SendCancelled = 4,
    WDI_TxFrameStatus_SendPostponed = 5,
    WDI_TxFrameStatus_TransferFailed = 128
};

typedef enum _WDI_TX_PAUSE_REASON {
    WDI_TX_PAUSE_REASON_NULL = 0,
    WDI_TX_PAUSE_REASON_CREDIT = 1,
    WDI_TX_PAUSE_REASON_PEER_CREATE = 2,
    WDI_TX_PAUSE_REASON_PS = 4,
    WDI_TX_PAUSE_REASON_IHV_START = 0x1000000,
    WDI_TX_PAUSE_REASON_IHV_END = -2147483648
};

typedef enum _WDI_USB_IDLE_STATE {
    WdiUsbIdleStateInit = 0,
    WdiUsbIdleStatePending = 1,
    WdiUsbIdleStateConfirm = 2
};

typedef enum _WFC_ACCESS_CATEGORY {
    AC_BE = 0,
    AC_BK = 1,
    AC_VI = 2,
    AC_VO = 3,
    AC_PR0 = 4,
    AC_PR1 = 5,
    AC_PR2 = 6,
    AC_PR3 = 7,
    AC_MAX = 8
};

typedef enum _WFC_ADAPTER_INITIALIZE_STATE {
    WfcAdapterInitializeNotStarted = 0,
    WfcAdapterInitializeControlPathInitialized = 1,
    WfcAdapterInitializeIhvAdapterAllocated = 2,
    WfcAdapterInitializeOpenTaskCompleted = 4,
    WfcAdapterInitializeDataPathInitialized = 8,
    WfcAdapterInitializeDataPathStarted = 16,
    WfcAdapterInitializeIhvOperationStarted = 32,
    WfcAdapterInitializeCompleted = 0x8000
};

typedef enum _WFC_ADAPTER_PHY_INFO_PROPERTY_NAME {
    WfcAdapterPhyType = 0,
    WfcAdapterPhyCFPoll = 1,
    WfcAdapterPhyMPDUMax = 2,
    WfcAdapterPhyTempertureClass = 3,
    WfcAdapterPhyAntenaDiversitySupported = 4,
    WfcAdapterPhyTxPowerLevelList = 5,
    WfcAdapterPhyDataRateList = 6,
    WfcAdapterDot11PhyID = 7,
    WfcAdapterPhyInfoNameMax = 8
};

typedef enum _WFC_ADAPTER_PROPERTY_NAME {
    WfcAdapterPropertyInfraSupportedUcastAlgoPairs = 0,
    WfcAdapterPropertyInfraSupportedMcastAlgoPairs = 1,
    WfcAdapterPropertyBandInfo = 2,
    WfcAdapterPropertyPhyInfo = 3,
    WfcAdapterPhyTypeDot11PhyIDMap = 4,
    WfcAdapterPropertyScanSSIDListSize = 5,
    WfcAdapterPropertyDesiredBSSIDListSize = 6,
    WfcAdapterPropertyDesiredSSIDListSize = 7,
    WfcAdapterPropertyPrivacyExemptionListSize = 8,
    WfcAdapterPropertyKeyMappingTableSize = 9,
    WfcAdapterPropertyDefaultKeyTableSize = 10,
    WfcAdapterPropertyWEPKeyValueMaxLength = 11,
    WfcAdapterPropertyMaxNumPerSTADefaultKeyTables = 12,
    WfcAdapterPropertyBSSListCachemanagement = 13,
    WfcAdapterPropertyConnectBSSSelectionOverride = 14,
    WfcAdapterPropertyHESSIDConnectionSupported = 15,
    WfcAdapterPropertyMaxCommandSize = 16,
    WfcAdapterPropertyMaxMulticastListSize = 17,
    WfcAdapterPropertyPermanentMacAddress = 18,
    WfcAdapterPropertySupportedOpModes = 19,
    WfcAdapterResetRecoveryOff = 20,
    WfcAdapterTaskTimeout = 21,
    WfcAdapterCommandTimeout = 22,
    WfcAdapterPropertyRegUnreachableThreshold = 23,
    WfcAdapterPropertyEnhancedCapabilities = 24,
    WfcAdapterPropertyBandCapabilities = 25,
    WfcAdapterPropertyActionFramesSupported = 26,
    WfcAdapterPropertyMACRandomizationSupported = 27,
    WfcAdapterPropertyNonWdiOidsSupported = 28,
    WfcAdapterPMCapabilitiesFlags = 29,
    WfcAdapterPMCapabilitiesSupportedWoLPacketPatterns = 30,
    WfcAdapterPMCapabilitiesNumTotalWoLPatterns = 31,
    WfcAdapterPMCapabilitiesMaxWoLPatternSize = 32,
    WfcAdapterPMCapabilitiesMaxWoLPatternOffset = 33,
    WfcAdapterPMCapabilitiesMaxWoLPacketSaveBuffer = 34,
    WfcAdapterPMCapabilitiesSupportedProtocolOffloads = 35,
    WfcAdapterPMCapabilitiesNumArpOffloadIPv4Addresses = 36,
    WfcAdapterPMCapabilitiesNumNSOffloadIPv6Addresses = 37,
    WfcAdapterPMCapabilitiesMinMagicPacketWakeUp = 38,
    WfcAdapterPMCapabilitiesMinPatternWakeUp = 39,
    WfcAdapterPMCapabilitiesMinLinkChangeWakeUp = 40,
    WfcAdapterPMCapabilitiesSupportedWakeUpEvents = 41,
    WfcAdapterPMCapabilitiesMediaSpecificWakeUpEvents = 42,
    WfcAdapterCurrentPhyID = 43,
    WfcAdapterPacketCoalescing = 44,
    WfcAdapterHardwareRadioOff = 45,
    WfcAdapterSoftwareRadioOff = 46,
    WfcAdapterPropertyRegTest_FeatureMask = 47,
    WfcAdapterPropertyRegTest_BSSChannel = 48,
    WfcAdapterProperty_LastActionFrameIndicationEventBuffer = 49,
    WfcAdapterProperty_LastAssociationRequestEventBuffer = 50,
    WfcAdapterPropertyCurrentListenState = 51,
    WfcAdapterPropertyMediaStreamingRefcount = 52,
    WfcAdapterPropertyRegRoamControlParametersIndex = 53,
    WfcAdapterPropertyRegRoamLQThreshold = 54,
    WfcAdapterPropertyRegRoamLQChangeBar = 55,
    WfcAdapterPropertyRegRoamTimeGap = 56,
    WfcAdapterPropertyRegRoamAllowScanCancel = 57,
    WfcAdapterPropertyRegRoamFiveGhzParams = 58,
    WfcAdapterPropertyRegRoamThrottleRoamingNeeded = 59,
    WfcAdapterPropertyRegRoamFullPassiveScan = 60,
    WfcAdapterPropertyRegMaxBssEntryCount = 61,
    WfcAdapterPropertyRegHungAtWdiCommandPasses = 62,
    WfcAdapterPropertyRegHungResetRecoveryIterations = 63,
    WfcAdapterPropertyTestEnableResetRecovery = 64,
    WfcAdapterPropertyRegMaxBackgroundScanSkipCount = 65,
    WfcAdapterPropertyStaLastConnectedChannel = 66,
    WfcAdapterPropertyStaLastConnectedBandId = 67,
    WfcAdapterPropertyChecksumV4TxEncapsulation = 68,
    WfcAdapterPropertyChecksumV4TxIpOptionsSupported = 69,
    WfcAdapterPropertyChecksumV4TxTcpOptionsSupported = 70,
    WfcAdapterPropertyChecksumV4TxTcpChecksum = 71,
    WfcAdapterPropertyChecksumV4TxUdpChecksum = 72,
    WfcAdapterPropertyChecksumV4TxIpChecksum = 73,
    WfcAdapterPropertyChecksumV4RxEncapsulation = 74,
    WfcAdapterPropertyChecksumV4RxIpOptionsSupported = 75,
    WfcAdapterPropertyChecksumV4RxTcpOptionsSupported = 76,
    WfcAdapterPropertyChecksumV4RxTcpChecksum = 77,
    WfcAdapterPropertyChecksumV4RxUdpChecksum = 78,
    WfcAdapterPropertyChecksumV4RxIpChecksum = 79,
    WfcAdapterPropertyChecksumV6TxEncapsulation = 80,
    WfcAdapterPropertyChecksumV6TxIpExtensionHeadersSupported = 81,
    WfcAdapterPropertyChecksumV6TxTcpOptionsSupported = 82,
    WfcAdapterPropertyChecksumV6TxTcpChecksum = 83,
    WfcAdapterPropertyChecksumV6TxUdpChecksum = 84,
    WfcAdapterPropertyChecksumV6RxEncapsulation = 85,
    WfcAdapterPropertyChecksumV6RxIpExtensionHeadersSupported = 86,
    WfcAdapterPropertyChecksumV6RxTcpOptionsSupported = 87,
    WfcAdapterPropertyChecksumV6RxTcpChecksum = 88,
    WfcAdapterPropertyChecksumV6RxUdpChecksum = 89,
    WfcAdapterPropertyLargeSendOffloadV1Encapsulation = 90,
    WfcAdapterPropertyLargeSendOffloadV1MaxOffLoadSize = 91,
    WfcAdapterPropertyLargeSendOffloadV1MinSegmentCount = 92,
    WfcAdapterPropertyLargeSendOffloadV1TcpOptions = 93,
    WfcAdapterPropertyLargeSendOffloadV1IpOptions = 94,
    WfcAdapterPropertyLargeSendOffloadV2EncapsulationV4 = 95,
    WfcAdapterPropertyLargeSendOffloadV2MaxOffloadSizeV4 = 96,
    WfcAdapterPropertyLargeSendOffloadV2MinSegmentCountV4 = 97,
    WfcAdapterPropertyLargeSendOffloadV2EncapsulationV6 = 98,
    WfcAdapterPropertyLargeSendOffloadV2MaxOffloadSizeV6 = 99,
    WfcAdapterPropertyLargeSendOffloadV2MinSegmentCountV6 = 100,
    WfcAdapterPropertyLargeSendOffloadV2IpExtensionHeadersSupported = 101,
    WfcAdapterPropertyLargeSendOffloadV2TcpOptionsSupported = 102,
    WfcAdapterPropertyRSCIpv4Enabled = 103,
    WfcAdapterPropertyRSCIpv6Enabled = 104,
    WfcAdapterPropertyChecksumOffloadSupportedOnAllPorts = 105,
    WfcAdapterPropertyLsoV1OffloadSupportedOnAllPorts = 106,
    WfcAdapterPropertyLsoV2OffloadSupportedOnAllPorts = 107,
    WfcAdapterPropertyRscOffloadSupportedOnAllPorts = 108,
    WfcAdapterPropertyRRDiagnoseLevel = 109,
    WfcAdapterPropertyBackFillSize = 110,
    WfcAdapterPropertyRegScanOptChannelCount = 111,
    WfcAdapterPropertyRegAdapterCapabilityOverride = 112,
    WfcAdapterPropertyScanModePassiveOnly = 113,
    WfcAdapterPropertyRegDisableOpportunisticRoam = 114,
    WfcAdapterPropertyRegOpportunisticRoamDelay = 115,
    WfcAdapterDesiredSoftwareRadioOff = 116,
    WfcAdapterSupportedGuids = 117,
    WfcAdapterPropertyRegMaxRoamDeferCount = 118,
    WfcAdapterPropertyRegCSExcessiveRoamDetectionEnable = 119,
    WfcAdapterPropertyRegCSExcessiveRoamDetectionAPCount = 120,
    WfcAdapterPropertyRegCSExcessiveRoamDetectionMaxRoamCount = 121,
    WfcAdapterPropertyRegCSExcessiveRoamDetectionRoamWindow = 122,
    WfcAdapterPropertyRegCSExcessiveRoamDetectionMaxLinkQualityDeviation = 123,
    WfcAdapterPropertyRegCSExcessiveRoamDetectionLinkQualityThreshold = 124,
    WfcAdapterPropertyRegAoAcNAPSCapability = 125,
    WfcAdapterPropertyRegLQThresholdForLinkDegradedDetection = 126,
    WfcAdapterPropertyRegLQChangeBarForLinkDegradedDetection = 127,
    WfcAdapterPropertyRegRSCIPv4Keyword = 128,
    WfcAdapterPropertyRegRSCIPv6Keyword = 129,
    WfcAdapterPropertyRegWdiRSCIPv4Keyword = 130,
    WfcAdapterPropertyRegWdiRSCIPv6Keyword = 131,
    WfcAdapterPropertyWdiRSCActive = 132,
    WfcAdapterProperty11adBandPresent = 133,
    WfcAdapterPropertyRegEnableDMGCapabilityMapping = 134,
    WfcAdapterPropertyRegApplyOffloadsToAllPorts = 135,
    WfcAdapterPropertyRegAllowSoftwareRSC = 136,
    WfcAdapterPropertySupportsOffloads = 137,
    WfcAdapterPropertyRegMergeDriverEntriesInPMKIDResponse = 138,
    WfcAdapterPropertyLimitedDisruptionModeRefCount = 139,
    WfcAdapterPropertyHighChannelAvailabilityModeRefCount = 140,
    WfcAdapterPropertyNameMax = 141
};

typedef enum _WFC_BAND_INFO_PROPERTY_NAME {
    WfcBandInfoBandId = 0,
    WfcBandInfoBandState = 1,
    WfcBandInfoTempType = 2,
    WfcBandInfoPhyTypeList = 3,
    WfcBandInfoChannelList = 4,
    WfcBandInfoChannelWidthList = 5,
    WfcBandInfoNameMax = 6
};

typedef enum _WFC_BLOCKED_REASON {
    WFC_BLOCKED_REASON_NONE = 0,
    WFC_BLOCKED_REASON_ASSOC_REJECTED_OR_PEER_DISCONNECTED = 1,
    WFC_BLOCKED_REASON_ASSOC_OR_DISASSOC_BSS_UNREACHABLE = 2,
    WFC_BLOCKED_REASON_ALL = 255
};

typedef enum _WFC_BSS_ENTRY_FRAME_TYPE {
    WFC_BSS_ENTRY_BEACON_FRAME = 0,
    WFC_BSS_ENTRY_PROBE_RESPONSE_FRAME = 1,
    WFC_BSS_ENTRY_TYPE_UNKNOWN = 2
};

typedef enum _WFC_CONNECT_SCAN_TYPE {
    WfcConnectScanTypeNone = 0,
    WfcConnectScanTypeNeighborOrInstantConnect = 1,
    WfcConnectScanTypeChannelHint = 2,
    WfcConnectScanTypeActiveOnly = 3,
    WfcConnectScanTypeFull = 4,
    WfcConnectScanTypeMaximumAllowed = 5
};

typedef enum _WFC_DEVICE_COMMAND_TYPE {
    WfcDeviceCommandTypeInvalid = 0,
    WfcDeviceCommandTypeProperty = 1,
    WfcDeviceCommandTypeTask = 2
};

typedef enum _WFC_DISCONNECT_TRIGGER {
    WfcDisconnectTriggerUnknown = 0,
    WfcDisconnectTriggerDisconnectOid = 1,
    WfcDisconnectTriggerLimitedConnectivityRoam = 2,
    WfcDisconnectTriggerExcessiveRoamDetection = 3,
    WfcDisconnectTriggerUnexpectedNonFTRoam = 4,
    WfcDisconnectTriggerExcludedMacAddressList = 5,
    WfcDisconnectTriggerFTHandshakeFailure = 6,
    WfcDisconnectTriggerDot11Reset = 7,
    WfcDisconnectTriggerGoingToSleep = 8
};

typedef enum _WFC_EVENT_TYPE {
    WiFiEventInvalid = 0,
    WiFiEventDeferredOperationCompletion = 1,
    WiFiEventDeferredNotifyOperationStarted = 2,
    WiFiEventQueueSerializedJob = 3,
    WiFiEventAddActiveJob = 4,
    WiFiEventStartJob = 5,
    WiFiEventStartTask = 6,
    WiFiEventDeviceCommandSchedulerQueueDeviceCommand = 7,
    WiFiEventDeviceCommandSchedulerQueueCtlPlaneSendCommandComplete = 8,
    WiFiEventNotificationManagerNotifyRegisteredClients = 9,
    WiFiEventDeferredTimerCallback = 10,
    WiFiEventDeferredSafeDeinitialize = 11,
    WiFiEventDeferredThreadpoolCallback = 12,
    WiFiEventJobOperationCompletedCallback = 13
};

typedef enum _WFC_FRAME_TYPE {
    WFC_FRAME_TYPE_UNINITIALIZED = 0,
    TX_INJECTED_FRAME = 1,
    TX_NDIS_FRAME = 2,
    RX_FRAME_TYPE_IHV = 3,
    RX_FRAME_TYPE_DERIVED = 4,
    RX_FRAME_TYPE_DEFRAGMENTED_MSDU = 5,
    RX_FRAME_TYPE_FIPS_DEFRAGMENTED_MSDU = 6,
    RX_FRAME_TYPE_MSDU = 7,
    RX_FRAME_TYPE_AMSDU = 8,
    WFC_FRAME_TYPE_MAX = 9
};

typedef enum _WFC_JOB_STATE {
    WiFiJobStateInit = 0,
    WiFiJobStateStartOrContinue = 1,
    WiFiJobStateStepPending = 2
};

typedef enum _WFC_JOB_TYPE {
    WiFiJobTypeInvalid = 0,
    WiFiJobOIDSetNotYetImplemented = 1,
    WiFiJobOIDQueryNotYetImplemented = 2,
    WiFiJobMiniportInitialize = 3,
    WiFiJobMiniportHalt = 4,
    WiFiJobMiniportPause = 5,
    WiFiJobMiniportRestart = 6,
    WiFiJobMiniportSurpriseRemoval = 7,
    WiFiJobCreatePort = 8,
    WiFiJobDeletePort = 9,
    WiFiJobQuerySupportedGuids = 10,
    WiFiJobSetPacketFilter = 11,
    WiFiJobQuery8023MulticastList = 12,
    WiFiJobSet8023MulticastList = 13,
    WiFiJobQueryDot11MulticastList = 14,
    WiFiJobSetDot11MulticastList = 15,
    WiFiJobDot11ResetPort = 16,
    WiFiJobQueryOperationMode = 17,
    WiFiJobSetOperationMode = 18,
    WiFiJobTypeConnect = 19,
    WiFiJobSetPower = 20,
    WiFiJobQueryPower = 21,
    WiFiJobSetAutoPowerSave = 22,
    WiFiJobGetAutoPowerSave = 23,
    WiFiJobSetPowerMgmtRequest = 24,
    WiFiJobGetPowerMgmtRequest = 25,
    WiFiJobSetNlo = 26,
    WiFiJobQueryDesiredBssType = 27,
    WiFiJobSetDesiredBssType = 28,
    WiFiJobQueryEnabledAuthAlgo = 29,
    WiFiJobSetEnabledAuthAlgo = 30,
    WiFiJobSetFTParameters = 31,
    WiFiJobQueryEnabledMulticastCipherAlgo = 32,
    WiFiJobSetEnabledMulticastCipherAlgo = 33,
    WiFiJobQueryEnabledUnicastCipherAlgo = 34,
    WiFiJobSetEnabledUnicastCipherAlgo = 35,
    WiFiJobQueryPhyId = 36,
    WiFiJobSetPhyId = 37,
    WiFiJobScan = 38,
    WiFiJobScanOidRequest = 39,
    WiFiJobEnumBSSList = 40,
    WiFiJobQueryDesiredSSIDList = 41,
    WiFiJobSetDesiredSSIDList = 42,
    WiFiJobQueryDesiredHESSIDList = 43,
    WiFiJobSetDesiredHESSIDList = 44,
    WiFiJobQueryHiddenNetworkEnabled = 45,
    WiFiJobSetHiddenNetworkEnabled = 46,
    WiFiJobQueryExcludeUnencrypted = 47,
    WiFiJobSetExcludeUnencrypted = 48,
    WiFiJobConnectRequest = 49,
    WiFiJobQueryOperationalRateSet = 50,
    WiFiJobDisconnectRequest = 51,
    WiFiJobSetPrivacyExemptionList = 52,
    WiFiJobSetDefaultKey = 53,
    WiFiJobSetDefaultKeyId = 54,
    WiFiJobSetKeyMappingKey = 55,
    WiFiJobSetAddWolPattern = 56,
    WiFiJobSetRemoveWolPattern = 57,
    WiFiJobQueryDesiredBSSIDList = 58,
    WiFiJobSetDesiredBSSIDList = 59,
    WiFiJobQueryStaAssociationIEs = 60,
    WiFiJobSetStaAssociationIEs = 61,
    WiFiJobGetPmParameters = 62,
    WiFiJobSetPmParameters = 63,
    WiFiJobSetAddPmProtocolOffload = 64,
    WiFiJobSetRemovePmProtocolOffload = 65,
    WiFiJobGetPmProtocolOffload = 66,
    WiFiJobGetReceiveCoalescingMatchCount = 67,
    WiFiJobSetReceiveCoalescing = 68,
    WiFiJobSetClearReceiveCoalescing = 69,
    WiFiJobFlushBssList = 70,
    WiFiJobEnumAssociationInfo = 71,
    WiFiJobRoam = 72,
    WiFiJobCreateMac = 73,
    WiFiJobDeleteMac = 74,
    WiFiJobQueryNicPowerState = 75,
    WiFiJobSetNicPowerState = 76,
    WiFiJobQueryOperationModeCapability = 77,
    WiFiJobQueryMacAddress = 78,
    WiFiJobQueryHardwareAddress = 79,
    WiFiJobSetOperationalRateSet = 80,
    WiFiJobQueryMediaStreamingEnabled = 81,
    WiFiJobSetMediaStreamingEnabled = 82,
    WiFiJobQueryHardwarePhyState = 83,
    WiFiJobQueryPrivacyExemptionList = 84,
    WiFiJobQueryDefaultKeyId = 85,
    WiFiJobQueryActivePhyList = 86,
    WiFiJobQueryAutoConfigEnabled = 87,
    WiFiJobSetAutoConfigEnabled = 88,
    WiFiJobQueryDesiredPhyList = 89,
    WiFiJobSetDesiredPhyList = 90,
    WiFiJobQueryExcludedMacAddressList = 91,
    WiFiJobSetExcludedMacAddressList = 92,
    WiFiJobQueryPMKIDList = 93,
    WiFiJobSetPMKIDList = 94,
    WiFiJobQuerySupportedMulticastAlgorithmPair = 95,
    WiFiJobQuerySupportedUnicastAlgorithmPair = 96,
    WiFiJobQueryUnicastUseGroupEnabled = 97,
    WiFiJobSetUnicastUseGroupEnable = 98,
    WiFiJobQueryVendorDescription = 99,
    WiFiJobQueryVendorDriverVersion = 100,
    WiFiJobQueryVendorID = 101,
    WiFiJobQueryRTSThreshold = 102,
    WiFiJobSetRTSThreshold = 103,
    WiFiJobQueryFragmentationThreshold = 104,
    WiFiJobSetFragmentationThreshold = 105,
    WiFiJobQueryCurrentRegDomain = 106,
    WiFiJobQueryCurrentChannel = 107,
    WiFiJobSetCurrentChannel = 108,
    WiFiJobQueryCurrentFrequency = 109,
    WiFiJobSetCurrentFrequency = 110,
    WiFiJobQueryRegDomainsSupportValue = 111,
    WiFiJobQueryUnreachableDetectionThreshold = 112,
    WiFiJobSetUnreachableDetectionThreshold = 113,
    WiFiJobQueryIBSSParams = 114,
    WiFiJobSetIBSSParams = 115,
    WiFiJobQuerySafeModeEnabled = 116,
    WiFiJobSetSafeModeEnabled = 117,
    WiFiJobQueryExtSTACapability = 118,
    WiFiJobQueryStatistics = 119,
    WiFiJobOIDQueryBeaconPeriod = 120,
    WiFiJobOIDSetBeaconPeriod = 121,
    WiFiJobSetRadioState = 122,
    WiFiJobGetRadioState = 123,
    WiFiJobP2PSetDeviceCapability = 124,
    WiFiJobP2PSetAdditionalIE = 125,
    WiFiJobP2PConnectRequest = 126,
    WiFiJobP2PSetDesiredGroupID = 127,
    WiFiJobP2PSetDeviceInfo = 128,
    WiFiJobP2PDisconnectPeerRequest = 129,
    WiFiJobP2PDiscover = 130,
    WiFiJobP2PSetGroupJoinParameters = 131,
    WiFiJobP2PSetGroupOwnerCapability = 132,
    WiFiJobP2PSetListenState = 133,
    WiFiJobP2PSetListenStatePassiveAvailability = 134,
    WiFiJobP2PGetAdvertisementList = 135,
    WiFiJobP2PSetAdvertisementList = 136,
    WiFiJobP2PStartBackgroundDiscovery = 137,
    WiFiJobP2PStopBackgroundDiscovery = 138,
    WiFiJobP2PSetSecondaryDeviceTypeList = 139,
    WiFiJobP2PSendActionFrameRequest = 140,
    WiFiJobP2PSetGroupStartParameters = 141,
    WiFiJobP2PSendActionFrameResponse = 142,
    WiFiJobStartP2PAp = 143,
    WiFiJobStartLegacyAp = 144,
    WiFiJobStopAp = 145,
    WiFiJobP2PCancelDiscover = 146,
    WiFiJobSendAssociationResponse = 147,
    WiFiJobSetWpsEnabled = 148,
    WiFiJobP2PEnumDeviceList = 149,
    WiFiJobP2PGetDialogToken = 150,
    WiFiJobP2PFlushDeviceList = 151,
    WiFiJobGetPeerInfo = 152,
    WiFiJobSetQoSParams = 153,
    WiFiJobGetQoSParams = 154,
    WiFiJobResumeFirmware = 155,
    WiFiJobResumeP2pPort = 156,
    WiFiJobNicSpecificExtension = 157,
    WiFiJobUpdateBSSList = 158,
    WiFiJobResetRecovery = 159,
    WiFiJobSendActionFrameRequest = 160,
    WiFiJobANQPQuery = 161,
    WiFiJobQueryTcpOffloadCurrentConfig = 162,
    WiFiJobQueryTcpOffloadVirtualPortConfig = 163,
    WiFiJobQueryTcpOffloadHardwareCaps = 164,
    WiFiJobSetTcpOffloadParameters = 165,
    WiFiJobQueryTcpRscStatistics = 166,
    WiFiJobAssociationParametersRequestResponder = 167,
    WiFiJobUpdateConnectionQuality = 168,
    WiFiJobSetEncapsulationOffload = 169,
    WiFiJobRandomMacForScan = 170,
    WiFiJobP2PEnableHrdssDevices = 171,
    WiFiJobGetAdapterEnhancedCapabilities = 172,
    WiFiJobGetAdapterBandCapabilities = 173,
    WiFiJobGeneralStatistics = 174,
    WiFiJobUnrecognizedOidHandler = 175,
    WiFiJobIhvTaskRequest = 176,
    WiFiJobSetFTReassociationParameters = 177,
    WiFiJobSetNeighborReportEntries = 178,
    WiFiJobQueryXmitOk = 179,
    WiFiJobQueryRcvOk = 180,
    WiFiJobSetEndDwellOnChannel = 181,
    WiFiJobRoamRequest = 182,
    WiFiJobLowPowerNotify = 183,
    WiFiJobSetNapsDelay = 184,
    WiFiJobP2PSetCurrentASP2SessionID = 185,
    WiFiJobGetSupportedDeviceServices = 186,
    WiFiJobDeviceServiceCommand = 187,
    WiFiJobGetCipherKey = 188,
    WiFiJobSetLimitedDisruptionModeEnabled = 189,
    WiFiJobSetHighChannelAvailabilityModeEnabled = 190
};

typedef enum _WFC_PORT_DOT11_STATE {
    WfcPortDot11StateInit = 0,
    WfcPortDot11StateOp = 1
};

typedef enum _WFC_PORT_PROPERTY_NAME {
    WfcPortPropertyNamePacketFilter = 0,
    WfcPortPropertyNameDefaultKeyId = 1,
    WfcPortPropertyNameTxLinkSpeed = 2,
    WfcPortPropertyNameRxLinkSpeed = 3,
    WfcPortPropertyNameLinkQuality = 4,
    WfcPortPropertySSID = 5,
    WfcPortPropertyHESSID = 6,
    WfcPortPropertyAuthAlgoList = 7,
    WfcPortPropertyMulticastCipherAlgoList = 8,
    WfcPortPropertyUnicastCipherAlgoList = 9,
    WfcPortPropertyExcludeUnencrypted = 10,
    WfcPortPropertyHiddenNetwork = 11,
    WfcPortPropertyExtraAssociationRequestIEs = 12,
    WfcPortPropertyAnyBSSIDAllowed = 13,
    WfcPortPropertyDesiredBSSIDList = 14,
    WfcPortPropertyIsConnected = 15,
    WfcPortPropertyConnectedBSSID = 16,
    WfcPortPropertyPMKR0Name = 17,
    WfcPortPropertyR0KHID = 18,
    WfcPortPropertySNonce = 19,
    WfcPortPropertyCurrentConnectionFT = 20,
    WfcPortProperty8023MulticastList = 21,
    WfcPortPropertyDot11MulticastList = 22,
    WfcPortPropertyRadioState_Temp = 23,
    WfcPortCurrentOperationalMode = 24,
    WfcPortCurrentBeaconPeriod = 25,
    WfcPortOSConfiguredPhyID = 26,
    WfcPortBssType = 27,
    WfcPortPropertyMediaStreamingEnabled = 28,
    WfcPortPropertyAutoConfigEnabled = 29,
    WfcPortPropertyUnicastUseGroupEnabled_Dummy = 30,
    WfcPortPropertySafeModeEnabled = 31,
    WfcPortPropertyMultipleBSSIDNetwork = 32,
    WfcPortPropertyMFPAllowed = 33,
    WfcPortPropertyRTSThreshold_Dummy = 34,
    WfcPortPropertyFragmentationThreshold_Dummy = 35,
    WfcPortPropertyUnreachableThreshold_Dummy = 36,
    WfcPortPropertyCurrentChannelNumber = 37,
    WfcPortPropertyCurrentBandID = 38,
    WfcPortPropertyNamePrivacyExemptionList = 39,
    WfcPortPropertyExcludedMacAddressList = 40,
    WfcPortPropertyIgnoreAllMacAddresses = 41,
    WfcPortPropertyPMKIDList = 42,
    WfcPortPropertyNamePMKIDRequestCounter = 43,
    WfcPortPropertyNamePMKIDResponseCounter = 44,
    WfcPortPropertyAssociationParameterPMKIDUpdatePending = 45,
    WfcPortPropertyPMKIDSupported = 46,
    WfcPortPropertyDesiredPhyList_Dummy = 47,
    WfcPortPropertyActivePhyList_Dummy = 48,
    WfcPortPropertyConnectionQuality = 49,
    WfcPortPropertyMostDesiredPhyIndex = 50,
    WfcPortPropertyP2PDeviceCaps = 51,
    WfcPortPropertyP2PGroupCaps = 52,
    WfcPortPropertyP2PDeviceInfo = 53,
    WfcPortPropertyP2PSecondaryDeviceTypeList = 54,
    WfcPortPropertyP2PAdditionalIEs = 55,
    WfcPortPropertyP2PDesiredGroupID = 56,
    WfcPortPropertyP2PAdvertisementList = 57,
    WfcPortPropertyP2PBackgroundDiscoverySettings = 58,
    WfcPortPropertyP2PCurrentASP2SessionID = 59,
    WfcPortPropertyCurrentListenState = 60,
    WfcPortPropertyP2PGroupJoinParameters = 61,
    WfcPortPropertyAPState = 62,
    WfcPortPropertyP2PGroupStartParameters = 63,
    WfcPortPropertyBeaconPeriod = 64,
    WfcPortPropertyDTIMPeriod = 65,
    WfcPortPropertyWpsEnabled = 66,
    WfcPortProperty802_11bDataRateSupport = 67,
    WfcPortPropertyAcceptNonP2PClients = 68,
    WfcPortPropertyP2PGOOperatingChannel = 69,
    WfcPortPropertyQoSProtocolFlags = 70,
    WfcPortPropertyGoodScanStartTime = 71,
    WfcPortPropertyAutoPsm = 72,
    WfcPortPropertyProtocolOffloadList = 73,
    WfcPortPropertyProtocolOffload = 74,
    WfcPortPropertyWolPatternList = 75,
    WfcPortPropertyWolPattern = 76,
    WfcPortPropertyReceiveCoalesceList = 77,
    WfcPortPropertyReceiveCoalesce = 78,
    WfcPortPropertyRoamAtResumeD0 = 79,
    WfcPortPropertyCreateOpMask = 80,
    WfcPortPropertyIhvRoamRequested = 81,
    WfcPortPropertyTimeOfIhvRoamRequest = 82,
    WfcPortPropertyIhvRoamReason = 83,
    WfcPortPropertyTaskOffloadsDisabledForFIPS = 84,
    WfcPortPropertyWasFipsPreviouslyEnabled = 85,
    WfcPortPropertyChecksumV4TxEncapsulation = 86,
    WfcPortPropertyChecksumV4TxIpOptionsSupported = 87,
    WfcPortPropertyChecksumV4TxTcpOptionsSupported = 88,
    WfcPortPropertyChecksumV4TxTcpChecksum = 89,
    WfcPortPropertyChecksumV4TxUdpChecksum = 90,
    WfcPortPropertyChecksumV4TxIpChecksum = 91,
    WfcPortPropertyChecksumV4RxEncapsulation = 92,
    WfcPortPropertyChecksumV4RxIpOptionsSupported = 93,
    WfcPortPropertyChecksumV4RxTcpOptionsSupported = 94,
    WfcPortPropertyChecksumV4RxTcpChecksum = 95,
    WfcPortPropertyChecksumV4RxUdpChecksum = 96,
    WfcPortPropertyChecksumV4RxIpChecksum = 97,
    WfcPortPropertyChecksumV6TxEncapsulation = 98,
    WfcPortPropertyChecksumV6TxIpExtensionHeadersSupported = 99,
    WfcPortPropertyChecksumV6TxTcpOptionsSupported = 100,
    WfcPortPropertyChecksumV6TxTcpChecksum = 101,
    WfcPortPropertyChecksumV6TxUdpChecksum = 102,
    WfcPortPropertyChecksumV6RxEncapsulation = 103,
    WfcPortPropertyChecksumV6RxIpExtensionHeadersSupported = 104,
    WfcPortPropertyChecksumV6RxTcpOptionsSupported = 105,
    WfcPortPropertyChecksumV6RxTcpChecksum = 106,
    WfcPortPropertyChecksumV6RxUdpChecksum = 107,
    WfcPortPropertyLargeSendOffloadV1Encapsulation = 108,
    WfcPortPropertyLargeSendOffloadV1MaxOffLoadSize = 109,
    WfcPortPropertyLargeSendOffloadV1MinSegmentCount = 110,
    WfcPortPropertyLargeSendOffloadV1TcpOptions = 111,
    WfcPortPropertyLargeSendOffloadV1IpOptions = 112,
    WfcPortPropertyLargeSendOffloadV2EncapsulationV4 = 113,
    WfcPortPropertyLargeSendOffloadV2MaxOffloadSizeV4 = 114,
    WfcPortPropertyLargeSendOffloadV2MinSegmentCountV4 = 115,
    WfcPortPropertyLargeSendOffloadV2EncapsulationV6 = 116,
    WfcPortPropertyLargeSendOffloadV2MaxOffloadSizeV6 = 117,
    WfcPortPropertyLargeSendOffloadV2MinSegmentCountV6 = 118,
    WfcPortPropertyLargeSendOffloadV2IpExtensionHeadersSupported = 119,
    WfcPortPropertyLargeSendOffloadV2TcpOptionsSupported = 120,
    WfcPortPropertyRSCIpv4Enabled = 121,
    WfcPortPropertyRSCIpv6Enabled = 122,
    WfcPortPropertyChecksumOffloadSupportedOnAllPorts = 123,
    WfcPortPropertyLsoV1OffloadSupportedOnAllPorts = 124,
    WfcPortPropertyLsoV2OffloadSupportedOnAllPorts = 125,
    WfcPortPropertyRscOffloadSupportedOnAllPorts = 126,
    WfcPortPropertyResumeNLOList = 127,
    WfcPortPropertyLastSleepWasWakeEnabled = 128,
    WfcPortPropertyWfdDevicePortResetCount = 129,
    WfcPortPropertyLimitedDisruptionModeEnabled = 130,
    WfcPortPropertyHighChannelAvailabilityModeEnabled = 131,
    WfcPortPropertyNameMax = 132
};

typedef enum _WFC_PORT_TYPE {
    WfcPortTypeUnspecified = 0,
    WfcPortTypeExtSTA = 1,
    WfcPortTypeExtAP = 2,
    WfcPortTypeWFDDevice = 4,
    WfcPortTypeWFDRole = 8,
    WfcPortTypeAll = 15,
    WfcPortTypeWithDataPath = 11
};

typedef enum _WFC_PROPERTY_TYPE {
    WfcPropertyTypeInvalid = 0,
    WfcPropertyTypeULong = 1,
    WfcPropertyTypeBoolean = 2,
    WfcPropertyTypeUchar = 3,
    WfcPropertyTypeVariableBuffer = 4,
    WfcPropertyTypeVariableBufferPtr = 5,
    WfcPropertyTypePropertyCacheList = 6,
    WfcPropertyTypeList = 7
};

typedef enum _WFC_ROAM_CONNECT_TRIGGER {
    WfcRoamConnectTriggerFirstTimeConnect = 0,
    WfcRoamConnectTriggerAssociationLoss = 1,
    WfcRoamConnectTriggerToFindBetterAP_BestEffort = 2,
    WfcRoamConnectTriggerToFindBetterAP_Critical = 3,
    WfcRoamConnectTriggerBssTransitionRequest = 4,
    WfcRoamConnectTriggerBssTransitionRequestCritical = 5,
    WfcRoamConnectTriggerResumeFromDx = 6,
    WfcRoamConnectTriggerToFindBetterAP_Opportunistic = 7,
    WfcRoamConnectTriggerLimitedConnectivityRoam = 8
};

typedef enum _WFC_RX_PEER_STATE {
    RxPeerStateInvalid = 0,
    RxPeerStateStopped = 1,
    RxPeerStatePausedForAssoc = 2,
    RxPeerStatePausedForAssocWithData = 3,
    RxPeerStateStarted = 4
};

typedef enum _WFC_RX_STOP_REASON {
    RxStopReasonPause = 1,
    RxStopReasonDot11Reset = 2,
    RxStopReasonHalt = 3,
    RxStopReasonReenumerate = 4
};

typedef enum _WFC_SERIALIZED_JOB_PRIORITY {
    WiFiSerializedJobPriority_0 = 0,
    WiFiSerializedJobPriority_1 = 1,
    WiFiSerializedJobPriority_2 = 2,
    WiFiSerializedJobPriority_3 = 3,
    WiFiSerializedJobPriority_4 = 4,
    WiFiSerializedJobPriority_5 = 5,
    WiFiSerializedJobPriority_6 = 6,
    WiFiSerializedJobPriority_7 = 7,
    WiFiSerializedJobPriority_8 = 8,
    WiFiSerializedJobPriority_9 = 9,
    WiFiSerializedJobPriority_10 = 10,
    WiFiSerializedJobPriority_11 = 11,
    WiFiSerializedJobPriority_Lowest = 12
};

typedef enum _WFC_SERIALIZED_JOB_PRIORITY_SCOPE {
    WiFiPriorityScopePort = 0,
    WiFiPriorityScopeAdapter = 1
};

typedef enum _WFC_TASK_STATE {
    WiFiTaskStateInit = 0,
    WiFiTaskStateStarting = 1,
    WiFiTaskStatePending = 2,
    WiFiTaskStateCompleted = 3
};

typedef enum _WFC_TIMER_REGISTRATION_STATE {
    TimerRegistrationStateInvalid = 0,
    TimerRegistrationStateInit = 1,
    TimerRegistrationStateTimerSet = 2,
    TimerRegistrationStateDone = 3
};

typedef enum _WFC_TX_QUEUEING_MODE {
    PEER_QUEUEING = 0,
    PORT_QUEUEING = 1
};

typedef enum _WFC_TX_STOP_REASON {
    TxStopReasonControlPath = 1,
    TxStopReasonPeerDelete = 2,
    TxStopReasonReenumerate = 3
};

typedef enum _WFD_NOTIFICATION_SOURCE {
    wfd_notification_source_none = 0,
    wfd_notification_source_wfd = 1024,
    wfd_notification_source_all = 1024
};

typedef enum _WFD_OOB_BLOB_TYPE {
    WfdOobBlobTypeUnidirectionalProvisioningData = 0,
    WfdOobBlobTypeProvisioningListenerData = 1,
    WfdOobBlobTypeProvisioningConnectorData = 2,
    WfdOobBlobTypeWfaP2P = 3,
    WfdOobBlobTypeServicesOutPairData = 4,
    WfdOobBlobTypeServicesInPairData = 5,
    WfdOobBlobTypeDeviceOutPairData = 6,
    WfdOobBlobTypeDeviceInPairData = 7,
    WfdOobBlobTypeVendorExtension = 221,
    WfdOobBlobTypeMax = 221
};

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA = 1,
    WheaDataFormatMemory = 2,
    WheaDataFormatPCIExpress = 3,
    WheaDataFormatNMIPort = 4,
    WheaDataFormatPCIXBus = 5,
    WheaDataFormatPCIXDevice = 6,
    WheaDataFormatGeneric = 7,
    WheaDataFormatMax = 8
};

typedef enum _WHEA_ERROR_SEVERITY {
    WheaErrSevRecoverable = 0,
    WheaErrSevFatal = 1,
    WheaErrSevCorrected = 2,
    WheaErrSevInformational = 3
};

typedef enum _WHEA_ERROR_SOURCE_TYPE {
    WheaErrSrcTypeMCE = 0,
    WheaErrSrcTypeCMC = 1,
    WheaErrSrcTypeCPE = 2,
    WheaErrSrcTypeNMI = 3,
    WheaErrSrcTypePCIe = 4,
    WheaErrSrcTypeGeneric = 5,
    WheaErrSrcTypeINIT = 6,
    WheaErrSrcTypeBOOT = 7,
    WheaErrSrcTypeSCIGeneric = 8,
    WheaErrSrcTypeIPFMCA = 9,
    WheaErrSrcTypeIPFCMC = 10,
    WheaErrSrcTypeIPFCPE = 11,
    WheaErrSrcTypeGenericV2 = 12,
    WheaErrSrcTypeSCIGenericV2 = 13,
    WheaErrSrcTypeMax = 14
};

typedef enum _WHEA_ERROR_TYPE {
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory = 1,
    WheaErrTypePCIExpress = 2,
    WheaErrTypeNMI = 3,
    WheaErrTypePCIXBus = 4,
    WheaErrTypePCIXDevice = 5,
    WheaErrTypeGeneric = 6
};

typedef enum _WHEA_EVENT_LOG_ENTRY_ID {
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
    WheaEventLogEntryIdWheaInit = -2147483646,
    WheaEventLogEntryIdMax = -2147483645
};

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE {
    WheaEventLogEntryTypeInformational = 0,
    WheaEventLogEntryTypeWarning = 1,
    WheaEventLogEntryTypeError = 2
};

typedef enum _XDV_DRIVER_TYPE {
    WdmGroup = 0,
    WdfGroup = 1,
    NdisGroup = 2,
    KsGroup = 3,
    PcGroup = 4,
    MaxGroup = 5
};

typedef enum _XDV_PLUGIN_TYPE {
    XdvPluginDefault = 0,
    XdvPluginAutofail = 1,
    XdvPluginEtw = 2
};

typedef enum _XDV_RULE_TYPE {
    XDV_RULE_WDM_STATELESS = 0,
    XDV_RULE_WDM_STATEFUL = 1,
    XDV_RULE_WDM_TIMED = 2,
    XDV_RULE_WDF_STATELESS = 3,
    XDV_RULE_WDF_STATEFUL = 4,
    XDV_RULE_WDF_TIMED = 5,
    XDV_RULE_NDIS_STATELESS = 6,
    XDV_RULE_NDIS_STATEFUL = 7,
    XDV_RULE_NDIS_TIMED = 8,
    XDV_RULE_KS_STATELESS = 9,
    XDV_RULE_KS_STATEFUL = 10,
    XDV_RULE_KS_TIMED = 11,
    XDV_RULE_PC_STATELESS = 12,
    XDV_RULE_PC_STATEFUL = 13,
    XDV_RULE_PC_TIMED = 14,
    XDV_RULE_MAX = 15
};

typedef enum __vc_attributes::aggregatableAttribute::type_e {
    never = 0,
    allowed = 1,
    always = 2
};

typedef enum __vc_attributes::event_receiverAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::event_sourceAttribute::optimize_e {
    speed = 0,
    size = 1
};

typedef enum __vc_attributes::event_sourceAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::helper_attributes::usageAttribute::usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

typedef enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e {
    eBoolean = 0,
    eInteger = 1,
    eFloat = 2,
    eDouble = 3
};

typedef enum __vc_attributes::moduleAttribute::type_e {
    dll = 1,
    exe = 2,
    service = 3,
    unspecified = 4,
    EXE = 2,
    SERVICE = 3
};

typedef enum __vc_attributes::threadingAttribute::threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum eDiagnoseLevel {
    DiagnoseLevelNone = 0,
    DiagnoseLevelHardwareRegisters = 1,
    DiagnoseLevelFirmwareImageDump = 2,
    DiagnoseLevelDriverStateDump = 3
};

typedef enum optimize_e {
    speed = 0,
    size = 1
};

typedef enum threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum type_e {
    eBoolean = 0,
    eInteger = 1,
    eFloat = 2,
    eDouble = 3
};

typedef enum usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

ActiveJobsList::`vftable';
CANQPQueryJob::`vftable';
CAPResetJob::`vftable';
CAdapter::`vftable';
CAssociationParametersRequestResponderJob::`vftable';
CBSSListManager::`vftable';
CBSSListUpdateJob::`vftable';
CBssTransitionResponseJob::`vftable';
CConnectJob::`vftable';
CConnectedPeerList::`vftable';
CConnectionQualityOidJob::`vftable';
CCreateMacOidJob::`vftable';
CCreatePortJob::`vftable';
CCtlPlane::`vftable';
CDeleteMacOidJob::`vftable';
CDeletePortJob::`vftable';
CDeviceCommandOidJobBase::`vftable';
CDeviceServiceCommandJob::`vftable';
CDisconnectJob::`vftable';
CDot11RandomMacForScan::`vftable';
CDot11ResetJob::`vftable';
CDummyQueryReturnTrueJob::`vftable';
CDummySetJob::`vftable';
CEnumAssociationInfoJob::`vftable';
CEnumBSSListJob::`vftable';
CFlushBSSListJob::`vftable';
CGetAdapterCapabilitiesJob::`vftable';
CGetAutoPowerSaveJob::`vftable';
CGetCipherKey::`vftable';
CGetNextDialogTokenJob::`vftable';
CGetPmParametersJob::`vftable';
CGetPmProtocolOffloadJob::`vftable';
CGetPowerMgmtRequestJob::`vftable';
CGetRadioStateJob::`vftable';
CGetReceiveCoalescingMatchCountJob::`vftable';
CGetSupportedDeviceServicesJob::`vftable';
CGetWFDAdvertisementSettings::`vftable';
CIhvTaskRequestJob::`vftable';
CJobBase::`vftable';
CJobCompleteNotifier::`vftable';
CLowPowerNotifyJob::`vftable';
CMiniportHaltJob::`vftable';
CMiniportInitializeJob::`vftable';
CMiniportJobBase::`vftable';
CMiniportPauseJob::`vftable';
CMiniportRestartJob::`vftable';
CMiniportSurpriseRemovalJob::`vftable';
CNdisEventContext::`vftable';
CNicSpecificExtensionJob::`vftable';
COidJobBase::`vftable';
COidJobNotificationHandler::`vftable';
CP2PDisconnectJob::`vftable';
CP2PDiscoverCancelJob::`vftable';
CP2PDiscoverJob::`vftable';
CP2PEnableHrdssDevices::`vftable';
CP2PSendActionFrameRequestJob::`vftable';
CP2PSendActionFrameResponseJob::`vftable';
CPort::`vftable';
CPortJobNotifier::`vftable';
CQueryCurrentRegDomainJob::`vftable';
CQueryDesiredHESSIDList::`vftable';
CQueryExtSTACapabilityJob::`vftable';
CQueryHardwareAddressJob::`vftable';
CQueryMacAddressJob::`vftable';
CQueryMediaStreamingEnabledOidJob::`vftable';
CQueryMulticastListJob::`vftable';
CQueryOperationModeCapabilityJob::`vftable';
CQueryOperationModeJob::`vftable';
CQueryOperationalRateSet::`vftable';
CQueryPhyIdJob::`vftable';
CQueryPowerJob::`vftable';
CQueryRegDomainsSupportJob::`vftable';
CQueryStatisticsJob::`vftable';
CQuerySupportedAlgorithmPairJobBase::`vftable';
CQuerySupportedGuidsJob::`vftable';
CQuerySupportedMulticastAlgorithmPairJob::`vftable';
CQuerySupportedUnicastAlgorithmPairJob::`vftable';
CQueryVendorDescriptionJob::`vftable';
CQueryVendorDriverVersionJob::`vftable';
CQueryVendorIDJob::`vftable';
CResetRecoveryJob::`vftable';
CResumeAdvSettingJob::`vftable';
CResumeAutoPsmJob::`vftable';
CResumeCoalesceJob::`vftable';
CResumeDefaultKeyIdJob::`vftable';
CResumeDefaultKeyJob::`vftable';
CResumeFirmwareJob::`vftable';
CResumeMulticastListJob::`vftable';
CResumeOffloadJob::`vftable';
CResumeP2pPortJob::`vftable';
CResumePacketFilterJob::`vftable';
CResumePrivacyExemptionJob::`vftable';
CResumeWolPatternJob::`vftable';
CRoamOidJob::`vftable';
CRoamReconnectJob::`vftable';
CScanJob::`vftable';
CScanOidJob::`vftable';
CSendActionFrameRequestJob::`vftable';
CSendAssociationResponseJob::`vftable';
CSendNeighborReportRequestJob::`vftable';
CServicesManager::`vftable';
CSetAPGroupStartParametersJob::`vftable';
CSetAddPmProtocolOffloadJob::`vftable';
CSetAddWolPatternJob::`vftable';
CSetAutoPowerSaveJob::`vftable';
CSetClearReceiveCoalescingJob::`vftable';
CSetDefaultKeyIdJob::`vftable';
CSetDefaultKeyJob::`vftable';
CSetDesiredBSSIDListJob::`vftable';
CSetDesiredHESSIDList::`vftable';
CSetDesirerdBssTypeJob::`vftable';
CSetEndDwellOnChannel::`vftable';
CSetExcludedMacAddressListJob::`vftable';
CSetFTParametersJob::`vftable';
CSetFTReassociationParametersJob::`vftable';
CSetHighChannelAvailabilityModeJob::`vftable';
CSetKeyMappingKeyJob::`vftable';
CSetLimitedDisruptionModeJob::`vftable';
CSetMediaStreamingEnabledOidJob::`vftable';
CSetMulticastListJob::`vftable';
CSetNapsDelay::`vftable';
CSetNeighborReportEntriesJob::`vftable';
CSetNloJob::`vftable';
CSetOperationModeJob::`vftable';
CSetP2PDesiredGroupIDJob::`vftable';
CSetP2PGroupJoinParameters::`vftable';
CSetPMKIDList::`vftable';
CSetPacketFilterJob::`vftable';
CSetPhyIdJob::`vftable';
CSetPmParametersJob::`vftable';
CSetPowerJob::`vftable';
CSetPowerMgmtRequestJob::`vftable';
CSetPrivacyExemptionListJob::`vftable';
CSetRadioStateJob::`vftable';
CSetReceiveCoalescingJob::`vftable';
CSetRemovePmProtocolOffloadJob::`vftable';
CSetRemoveWolPatternJob::`vftable';
CSetStaAssociationIEsJob::`vftable';
CSetWFDAdvertisementSettings::`vftable';
CSetWFDListenState::`vftable';
CSetWFDStartBackgroundDiscovery::`vftable';
CSetWFDStopBackgroundDiscovery::`vftable';
CSetWpsEnabledJob::`vftable';
CSimpleMethodDeviceCommandOidJob::`vftable';
CSimplePropertyCacheBooleanQueryOidJob::`vftable';
CSimplePropertyCacheBooleanSetOidJob::`vftable';
CSimplePropertyCacheListQueryOidJob::`vftable';
CSimplePropertyCacheListSetOidJob::`vftable';
CSimplePropertyCacheUCharWithHeaderQueryOidJob::`vftable';
CSimplePropertyCacheUCharWithHeaderSetOidJob::`vftable';
CSimplePropertyCacheULongQueryOidJob::`vftable';
CSimplePropertyCacheULongSetOidJob::`vftable';
CSimpleQueryDeviceCommandOidJob::`vftable';
CSimpleQueryOidJob::`vftable';
CSimpleSetDeviceCommandOidJob::`vftable';
CSimpleSetOidJob::`vftable';
CStartAPJob::`vftable';
CSystem::m_IsVerifierEnabled;
CSystem::m_VerifierLevel;
CSystem::m_pVerifierCallbackTable;
CTcpEncapsulationOffloadParametersJob::`vftable';
CTcpOffloadCurrentConfigJob::`vftable';
CTcpOffloadHardwareCapsJob::`vftable';
CTcpOffloadOffloadRscStatisticsJob::`vftable';
CTcpOffloadSetParametersJob::`vftable';
CTcpOffloadVirtualPortConfigJob::`vftable';
CTxMgr::`vftable';
CUnrecognizedOidHandlerJob::`vftable';
CUpdateConnectionQualityJob::`vftable';
CWdfTimerContext::`vftable';
CWdfWorkItemContext::`vftable';
CWfdChangeListenStateJob::`vftable';
CancelDeviceCommand::`vftable';
DeviceCommand::`vftable';
DeviceCommandScheduler::`vftable';
EventQueue::`vftable';
GUID_LOW_POWER_EPOCH;
IEventQueueCallback::`vftable';
INotifyDeviceIndicationCallback::`vftable';
IOperationCompletionCallback::`vftable';
IPropertyCacheDirectory::`vftable';
ITimerCallback::`vftable';
ITimerContext::`vftable';
IWorkItemContext::`vftable';
NPI_MS_WDIWIFI_MODULEID;
NPI_NDIS_MINIPORT_HOOK_ID;
NotificationManager::`vftable';
OidHandlerTable;
SDDL_DEVOBJ_KERNEL_ONLY;
SDDL_DEVOBJ_KERNEL_ONLY_buffer;
SerializedJobList::`vftable';
Task::`vftable';
TimerRegistrationContext::`vftable';
TraceLoggingMetadata;
TraceLoggingMetadataEnd;
WDF_WFC_TIMER_CONTEXT_TYPE_INFO;
WDF_WFC_WORK_ITEM_CONTEXT_TYPE_INFO;
WDI_TLV::DUMPER::s_cAllDumpers;
WDI_TLV::DUMPER::s_pfnMapFieldNameToString;
WDI_TLV::DUMPER::s_pfnMapTlvIdToString;
WDI_TLV::DUMPER::s_pfnMapTypeNameToString;
WDI_TLV::DUMPER::s_rgAllDumpers;
WDI_TLV::PARSER::s_empty;
WDI_TLV::g_ArrayHelpers;
WFAVE_TLV_FORMAT;
WPPTraceSuite;
WPP_03604deedd50315f8e0f9995a9d124b6_Traceguids;
WPP_080ea6a33a01338eb2a3638f3bf965af_Traceguids;
WPP_09c3ba8cd8a232dc946a4dbb987b91a4_Traceguids;
WPP_11580d86e0c139a0b74d41a4979f5930_Traceguids;
WPP_1a350e74dbd1311a5e3671045d93d479_Traceguids;
WPP_26d3cc7915d43bd714c4890900018ea1_Traceguids;
WPP_2757622811c73345e184712de08ca313_Traceguids;
WPP_28e83f63900f3dcaf6bf7a504b881077_Traceguids;
WPP_2df9fec0bdcd3bc4e077182b9d8a1b3b_Traceguids;
WPP_34a4890ae6dc3680a05e0888be6e2bde_Traceguids;
WPP_3543a898cdc63ef8fbf2615b22fd1e99_Traceguids;
WPP_42dc3aef5c4132ab91d3455343257174_Traceguids;
WPP_449a9dc026b834746da8a1f6efdc47a7_Traceguids;
WPP_4b976fe5e174356756ad87b1b1640249_Traceguids;
WPP_4d9ab85ce1023a6f2179d294edb90a08_Traceguids;
WPP_4f89caf1f8e534feb6a2d7e8d21ed46d_Traceguids;
WPP_50152a4fcaf235d66d7fc38d208e08c8_Traceguids;
WPP_571c4b53a7e93995593833a71eb533d1_Traceguids;
WPP_581f72c2b7e4358e74eb2b0a83b4b5fc_Traceguids;
WPP_611a4f6b67fe3d08417b0bbbd51ac9dc_Traceguids;
WPP_63585465e52838f0a9d38b7f9034d42a_Traceguids;
WPP_661dc024a0df3a8ccee6336340f9e340_Traceguids;
WPP_66807f7bb163329366ce85a70aaeebd6_Traceguids;
WPP_6c9870eb1fcd318642a0776db98cd652_Traceguids;
WPP_7580f55429453083edd1c71fa9f63bbc_Traceguids;
WPP_75f795e9ce253ca996de33f7c8f05c2a_Traceguids;
WPP_7b13a1be840b39ba6bc17d6150b900b8_Traceguids;
WPP_7c4c7ec48b133297f2fa01f620a11ef7_Traceguids;
WPP_8bd8cbcd9e993a64c12f1e96901d88e5_Traceguids;
WPP_8ca9a6cbb54f3a2a6d3e80822a7b3db9_Traceguids;
WPP_91d1cff145463b68a5adeafaa019c5b3_Traceguids;
WPP_95b1dafc7dda3a7128ddb57eed87edd6_Traceguids;
WPP_983731aa4cbd38c939d2cb57b6e4f6ef_Traceguids;
WPP_9a5e2fee20ef352105e6eb224cdcf65f_Traceguids;
WPP_GLOBAL_Control;
WPP_MAIN_CB;
WPP_ThisDir_CTLGUID_WdiLibraryCtlGuid;
WPP_a37603820b5738df8275949069903d34_Traceguids;
WPP_aa0d532eb3cd3ffda2a53048ac2e9b18_Traceguids;
WPP_aaefc32eb4ca392a49e6863775273f24_Traceguids;
WPP_ad81bb6283113ddc078093a0bc189c7c_Traceguids;
WPP_b42a04d3933a34779ef4a58236101ea6_Traceguids;
WPP_bede69083f5b3e0d77383e0f23d5876a_Traceguids;
WPP_c2464cc8287433ec0dcd38bc39c07755_Traceguids;
WPP_c32dbc5fdc1632737d2141b5f100d813_Traceguids;
WPP_cce3f1c14f253dc3f7740393fb896e9a_Traceguids;
WPP_d27801f62af533c2e9d983db87ad072b_Traceguids;
WPP_d987d07b3e4d39bb0e2db6eb4a91e8c2_Traceguids;
WPP_db29815880be3bdc43badafeee4b29cb_Traceguids;
WPP_de8d28d002bf3c58b59f5b6ba1d095de_Traceguids;
WPP_e869ecfb09723cae98e33dac4ec4671c_Traceguids;
WPP_eb9001b731023bd9775f098d577fe058_Traceguids;
WPP_ebf4cc0c194c387b555d715473aac400_Traceguids;
WPP_f98655ef8c2a382d44058bf92adcfdc2_Traceguids;
WPP_fc26d94ba0653557a41ad6a34e32054a_Traceguids;
WPP_fd8f667c1815398f41a13542c144ea98_Traceguids;
WPP_ff3333f9df19379713c8a1817131d4fc_Traceguids;
WPS_TLV_FORMAT;
WdfBindInfo;
WdfDriverGlobals;
WdfFunctions_01015;
_IMPORT_DESCRIPTOR_NDIS;
_IMPORT_DESCRIPTOR_NETIO;
_IMPORT_DESCRIPTOR_WDFLDR;
_IMPORT_DESCRIPTOR_WppRecorder;
_IMPORT_DESCRIPTOR_cng;
_IMPORT_DESCRIPTOR_ntoskrnl;
_NULL_IMPORT_DESCRIPTOR;
__KMDF_CLASS_BIND_END;
__KMDF_CLASS_BIND_START;
__KMDF_TYPE_INIT_END;
__KMDF_TYPE_INIT_START;
__PchSym_;
_guard_check_icall_fptr;
_guard_dispatch_icall_fptr;
_guard_fids_table;
_guard_iat_table;
_imp_ConvertInterfaceLuidToGuid;
_imp_DbgPrintEx;
_imp_EtwRegister;
_imp_EtwUnregister;
_imp_EtwWriteTransfer;
_imp_ExAllocatePoolWithTag;
_imp_ExDeleteNPagedLookasideList;
_imp_ExFreePoolWithTag;
_imp_ExInitializeNPagedLookasideList;
_imp_ExQueryDepthSList;
_imp_ExpInterlockedPopEntrySList;
_imp_ExpInterlockedPushEntrySList;
_imp_IoBuildDeviceIoControlRequest;
_imp_IoGetDeviceObjectPointer;
_imp_IoWMIRegistrationControl;
_imp_IofCallDriver;
_imp_KeAcquireSpinLockRaiseToDpc;
_imp_KeInitializeEvent;
_imp_KeInitializeSpinLock;
_imp_KeQueryDpcWatchdogInformation;
_imp_KeReleaseSpinLock;
_imp_KeWaitForSingleObject;
_imp_MmGetSystemRoutineAddress;
_imp_MmIsVerifierEnabled;
_imp_MmMapLockedPagesSpecifyCache;
_imp_NdisAdvanceNetBufferDataStart;
_imp_NdisAdvanceNetBufferListDataStart;
_imp_NdisAllocateCloneNetBufferList;
_imp_NdisAllocateIoWorkItem;
_imp_NdisAllocateNetBufferListContext;
_imp_NdisCloseConfiguration;
_imp_NdisCopyFromNetBufferToNetBuffer;
_imp_NdisFreeCloneNetBufferList;
_imp_NdisFreeIoWorkItem;
_imp_NdisFreeNetBufferListContext;
_imp_NdisGetDataBuffer;
_imp_NdisGetRoutineAddress;
_imp_NdisGetSystemUpTimeEx;
_imp_NdisGetVersion;
_imp_NdisInitializeEvent;
_imp_NdisMAllocatePort;
_imp_NdisMDeregisterMiniportDriver;
_imp_NdisMFreePort;
_imp_NdisMIdleNotificationComplete;
_imp_NdisMIdleNotificationConfirm;
_imp_NdisMIndicateReceiveNetBufferLists;
_imp_NdisMIndicateStatusEx;
_imp_NdisMNetPnPEvent;
_imp_NdisMOidRequestComplete;
_imp_NdisMPauseComplete;
_imp_NdisMRegisterMiniportDriver;
_imp_NdisMRestartComplete;
_imp_NdisMSendNetBufferListsComplete;
_imp_NdisMSetMiniportAttributes;
_imp_NdisMSleep;
_imp_NdisOpenConfigurationEx;
_imp_NdisQueryNetBufferPhysicalCount;
_imp_NdisQueueIoWorkItem;
_imp_NdisReadConfiguration;
_imp_NdisReadNetworkAddress;
_imp_NdisResetEvent;
_imp_NdisRetreatNetBufferDataStart;
_imp_NdisRetreatNetBufferListDataStart;
_imp_NdisSetEvent;
_imp_NdisSetOptionalHandlers;
_imp_NdisWaitEvent;
_imp_NdisWriteConfiguration;
_imp_NdisWriteErrorLogEntry;
_imp_NmrDeregisterProvider;
_imp_NmrRegisterProvider;
_imp_NmrWaitForProviderDeregisterComplete;
_imp_ObfDereferenceObject;
_imp_PoRegisterPowerSettingCallback;
_imp_PoUnregisterPowerSettingCallback;
_imp_RtlCompareMemory;
_imp_RtlCopyUnicodeString;
_imp_RtlEqualUnicodeString;
_imp_RtlInitUnicodeString;
_imp_RtlUTF8ToUnicodeN;
_imp_SystemPrng;
_imp_WdfVersionBind;
_imp_WdfVersionBindClass;
_imp_WdfVersionUnbind;
_imp_WdfVersionUnbindClass;
_imp_WppAutoLogStart;
_imp_WppAutoLogStop;
_imp_WppAutoLogTrace;
_imp_ZwClose;
_imp_ZwOpenKey;
_imp_ZwPowerInformation;
_imp_ZwQueryValueKey;
_imp___chkstk;
_imp__purecall;
_imp_imp_WppRecorderDumpLiveDriverData;
_imp_imp_WppRecorderLogDumpLiveData;
_imp_imp_WppRecorderLogGetDefault;
_imp_qsort;
_imp_tolower;
_imp_wcscat_s;
_imp_wcscpy_s;
_security_cookie;
_security_cookie_complement;
_xmm;
`IActivityId::get_NextActivityId'::`2'::s_NextActivityId;
`TraceLoggingSetInformation'::`2'::strEtwSetInformation;
g_AdapterRegTable;
g_DebugFailDriverEntry;
g_NdisMReenumerateFailedAdapter;
g_PowerNotifyCharacteristics;
g_ReenumerateCharacteristics;
g_RegisterMPDriverRefCount;
g_RegisteredWithTraceLogging;
g_RoamControlParametersTable;
g_Test_FeatureMask;
g_UnrecognizedOidForwardHandlerInfo;
g_UsbSsCharacteristics;
g_WdiGlobalTriageBlock;
g_WdiVersion;
g_pWdiDriver;
g_tmpZeroAutoPSMNloPm;
load_config_used;
pfnEtwRegisterClassicProvider;
pfnEtwUnregister;
pfnWppGetVersion;
pfnWppQueryTraceInformation;
pfnWppTraceMessage;
s_CurrentRegistrationToken;
s_NextCommandToken;
NDIS_NULL_THUNK_DATA;
NETIO_NULL_THUNK_DATA;
WDFLDR_NULL_THUNK_DATA;
WppRecorder_NULL_THUNK_DATA;
cng_NULL_THUNK_DATA;
ntoskrnl_NULL_THUNK_DATA;

<lambda_d811e4903c233a27193b186e0ac1d68c>::operator()();
ActiveJobsList::CountOrCancelResettableJobs();
ActiveJobsList::Initialize();
ActiveJobsList::OnAddJobEventHandler();
ActiveJobsList::OnEventQueueCallback();
ActiveJobsList::OnOperationCompleted();
ActiveJobsList::ProcessJobQueueForResetRequests();
ActiveJobsList::StartAddNewJob();
AdapterAllocateWifiFrameMetadata();
AdapterFreeWifiFrameMetadata();
AdapterPeerCreateInd();
AdapterPeerDeleteInd();
AdapterRxFlushConfirm();
AdapterRxInorderDataInd();
AdapterRxStopConfirm();
AdapterTxAbortConfirm();
AdapterTxDequeueInd();
AdapterTxInjectFrameInd();
AdapterTxQueryRaTidState();
AdapterTxQuerySuspectFrameCompleteStatus();
AdapterTxReleaseFramesInd();
AdapterTxSendCompleteInd();
AdapterTxSendPauseInd();
AdapterTxSendRestartInd();
AdapterTxTransferCompleteInd();
AdvanceFragmentedBytes();
AdvanceFragmentedBytesWFDService();
AdvanceToNextWfdIeData();
AdvanceToNextWfdIeDataWFDService();
ArrayOfElements<ArrayOfElements<unsigned char> >::AllocateElements();
ArrayOfElements<ArrayOfElements<unsigned char> >::Cleanup();
ArrayOfElements<_GUID>::AllocateElements();
ArrayOfElements<_GUID>::Cleanup();
ArrayOfElements<_NDIS_GUID>::AllocateElements();
ArrayOfElements<_NDIS_GUID>::Cleanup();
ArrayOfElements<_WDI_ALGO_PAIRS>::AllocateElements();
ArrayOfElements<_WDI_ALGO_PAIRS>::Cleanup();
ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_AP_BAND_CHANNEL_LIST_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_ASSOCIATION_RESULT_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_BAND_CHANNEL_LIST_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_BAND_INFO_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_BAND_INFO_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_BSS_ENTRY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY>::AllocateElements();
ArrayOfElements<_WDI_CHANNEL_MAPPING_ENTRY>::Cleanup();
ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_CONNECT_BSS_ENTRY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_COUNTRY_REGION_LIST>::AllocateElements();
ArrayOfElements<_WDI_COUNTRY_REGION_LIST>::Cleanup();
ArrayOfElements<_WDI_DATA_RATE_LIST>::AllocateElements();
ArrayOfElements<_WDI_DATA_RATE_LIST>::Cleanup();
ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY>::AllocateElements();
ArrayOfElements<_WDI_ETHERTYPE_ENCAPSULATION_ENTRY>::Cleanup();
ArrayOfElements<_WDI_IPv4_TCP_SYNC>::AllocateElements();
ArrayOfElements<_WDI_IPv4_TCP_SYNC>::Cleanup();
ArrayOfElements<_WDI_IPv6TCP_SYNC>::AllocateElements();
ArrayOfElements<_WDI_IPv6TCP_SYNC>::Cleanup();
ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS>::AllocateElements();
ArrayOfElements<_WDI_LINK_QUALITY_BAR_MAP_PARAMETERS>::Cleanup();
ArrayOfElements<_WDI_MAC_ADDRESS>::AllocateElements();
ArrayOfElements<_WDI_MAC_ADDRESS>::Cleanup();
ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS>::AllocateElements();
ArrayOfElements<_WDI_MAC_STATISTICS_PARAMETERS>::Cleanup();
ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_NEIGHBOR_REPORT_ENTRY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20>::AllocateElements();
ArrayOfElements<_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20>::Cleanup();
ArrayOfElements<_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20>::AllocateElements();
ArrayOfElements<_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20>::Cleanup();
ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_P2P_CHANNEL_ENTRIES_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_P2P_DEVICE_TYPE>::AllocateElements();
ArrayOfElements<_WDI_P2P_DEVICE_TYPE>::Cleanup();
ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH>::AllocateElements();
ArrayOfElements<_WDI_P2P_SERVICE_NAME_HASH>::Cleanup();
ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_PACKET_PATTERN_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_PHY_INFO_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_PHY_INFO_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS>::AllocateElements();
ArrayOfElements<_WDI_PHY_STATISTICS_PARAMETERS>::Cleanup();
ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT>::AllocateElements();
ArrayOfElements<_WDI_PRIVACY_EXEMPTION_PARAMETERS_STRUCT>::Cleanup();
ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD>::AllocateElements();
ArrayOfElements<_WDI_RECEIVE_COALESCING_FIELD>::Cleanup();
ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_SET_ADD_CIPHER_KEYS_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_SET_DELETE_CIPHER_KEYS_CONTAINER>::Cleanup();
ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER>::AllocateElements();
ArrayOfElements<_WDI_SSID_OFFLOAD_CONTAINER>::Cleanup();
ArrayOfElements<char>::AllocateElements();
ArrayOfElements<char>::Cleanup();
ArrayOfElements<enum _WDI_AUTH_ALGORITHM>::AllocateElements();
ArrayOfElements<enum _WDI_AUTH_ALGORITHM>::Cleanup();
ArrayOfElements<enum _WDI_BAND_ID>::AllocateElements();
ArrayOfElements<enum _WDI_BAND_ID>::Cleanup();
ArrayOfElements<enum _WDI_CIPHER_ALGORITHM>::AllocateElements();
ArrayOfElements<enum _WDI_CIPHER_ALGORITHM>::Cleanup();
ArrayOfElements<enum _WDI_PHY_TYPE>::AllocateElements();
ArrayOfElements<enum _WDI_PHY_TYPE>::Cleanup();
ArrayOfElements<unsigned char>::AllocateElements();
ArrayOfElements<unsigned char>::Cleanup();
ArrayOfElements<unsigned char>::SimpleSet();
ArrayOfElements<unsigned char>::`vector deleting destructor'();
ArrayOfElements<unsigned int>::AllocateElements();
ArrayOfElements<unsigned int>::Cleanup();
ArrayOfElements<unsigned int>::SimpleSet();
ArrayOfElements<unsigned long>::AllocateElements();
ArrayOfElements<unsigned long>::Cleanup();
ArrayOfElements<unsigned short>::AllocateElements();
ArrayOfElements<unsigned short>::Cleanup();
BSSIDRankCompare();
CACList::AddTxQueue();
CACList::CACList();
CACList::GetTxQueueFromMaxAC();
CACList::RemoveTxQueue();
CACList::`scalar deleting destructor'();
CANQPQueryJob::BuildAndSendANQPRequestActionFrame();
CANQPQueryJob::CANQPQueryJob();
CANQPQueryJob::CacheANQPFragment();
CANQPQueryJob::CheckAndMarkPendingJobs();
CANQPQueryJob::CleanupAndCompleteJob();
CANQPQueryJob::FindCachedBSSEntry();
CANQPQueryJob::HandleFinalANQPResponseReceived();
CANQPQueryJob::InitializeFromOidRequest();
CANQPQueryJob::OnActionFrameReceived();
CANQPQueryJob::OnDeviceIndicationArrived();
CANQPQueryJob::OnJobCancelled();
CANQPQueryJob::OnJobStarted();
CANQPQueryJob::OnJobStepCompleted();
CANQPQueryJob::OnOidJobCompletedEvent();
CANQPQueryJob::OnOidJobStartedEvent();
CANQPQueryJob::OnTimerCallback();
CANQPQueryJob::StartANQPQueryTask();
CANQPQueryJob::`scalar deleting destructor'();
CANQPQueryJob::`vector deleting destructor'();
CANQPQueryJob::~CANQPQueryJob();
CAPResetJob::InitializeFromJob();
CAPResetJob::InitializeFromOidRequest();
CAPResetJob::OnJobCancelled();
CAPResetJob::OnJobStarted();
CAPResetJob::OnJobStepCompleted();
CAPResetJob::OnOidJobCompletedEvent();
CAPResetJob::`scalar deleting destructor'();
CAPResetJob::`vector deleting destructor'();
CAdapter::AllocateWfcFrame();
CAdapter::CAdapter();
CAdapter::CleanupControlPath();
CAdapter::CollectDebugData();
CAdapter::CompleteOidRequest();
CAdapter::ControlResetRecovery();
CAdapter::ConvertNdisPortNumberToPortId();
CAdapter::ConvertPortIdToNdisPortNumber();
CAdapter::CopyNetBufferLists();
CAdapter::DelayActivatePort();
CAdapter::DelayDeactivateAndFreePort();
CAdapter::FreeCopiedNetBufferLists();
CAdapter::FreeWfcFrame();
CAdapter::GetAdapterPropertyCache();
CAdapter::GetBandInformation();
CAdapter::GetPortFromNdisPortNumberAndLock();
CAdapter::GetPortPropertyCache();
CAdapter::Halt();
CAdapter::HandleOidRequest();
CAdapter::HandlePnPEventNotify();
CAdapter::IndicateStatus();
CAdapter::Initialize();
CAdapter::InitializeControlPath();
CAdapter::InitializeDataPath();
CAdapter::InitializeNPagedLookaside();
CAdapter::IsLowPowerTransitionPending();
CAdapter::IsOperationalPowerState();
CAdapter::IsP2PActive();
CAdapter::IsWdiRscActive();
CAdapter::OnDeviceIndicationArrived();
CAdapter::OnFirmwareStalledIndication();
CAdapter::OnIhvTaskRequestReceived();
CAdapter::OnOperationCompleted();
CAdapter::OnRadioStateIndication();
CAdapter::OnWorkItemCallback();
CAdapter::PreprocessOid();
CAdapter::ReadRegDword();
CAdapter::ReenumerateFailedAdapter();
CAdapter::ReturnNetBufferLists();
CAdapter::SaveEnhancedCapabilities();
CAdapter::SendCompleteNbl();
CAdapter::SetDataPathApis();
CAdapter::SetFirmwareCapabilitiesProperties();
CAdapter::SimulateFirmwareHang();
CAdapter::StartDataPath();
CAdapter::TraceLoggingDiagnosisDuration();
CAdapter::TraceLoggingResetRecovery();
CAdapter::TriggerControlPathDiagnostics();
CAdapter::~CAdapter();
CAdapterPropertyCache::CreateBandCacheHelperForBandID();
CAdapterPropertyCache::GetAuthAlgorithmPairs();
CAdapterPropertyCache::GetBandIDForStartingFrequency();
CAdapterPropertyCache::GetDot11PhyIDFromPhyType();
CAdapterPropertyCache::GetPermanentMacAddress();
CAdapterPropertyCache::GetPhyTypeFromDot11PhyID();
CAdapterPropertyCache::GetTCPOffloadCapabilities();
CAdapterPropertyCache::Initialize();
CAdapterPropertyCache::PopulateTcpOffloadCapabilities();
CAdapterPropertyCache::SetFirmwareCapabilitiesProperties();
CAssociationParametersRequestResponderJob::CAssociationParametersRequestResponderJob();
CAssociationParametersRequestResponderJob::InitializeFromAssociationParametersRequest();
CAssociationParametersRequestResponderJob::OnDeviceIndicationArrived();
CAssociationParametersRequestResponderJob::OnJobCancelled();
CAssociationParametersRequestResponderJob::OnJobStarted();
CAssociationParametersRequestResponderJob::OnJobStepCompleted();
CAssociationParametersRequestResponderJob::OnPMKIDListUpdateNotificationArrived();
CAssociationParametersRequestResponderJob::OnTimerCallback();
CAssociationParametersRequestResponderJob::SendAssociationParametersResponse();
CAssociationParametersRequestResponderJob::StartWaitForPMKIDList();
CAssociationParametersRequestResponderJob::StopWaitForPMKIDList();
CAssociationParametersRequestResponderJob::`scalar deleting destructor'();
CAssociationParametersRequestResponderJob::`vector deleting destructor'();
CBSSEntry::Block();
CBSSEntry::CBSSEntry();
CBSSEntry::CalculateRank();
CBSSEntry::FillDot11WfdDeviceEntry();
CBSSEntry::FillIEs();
CBSSEntry::GetBeaconOrProbeFrame();
CBSSEntry::GetIEBlobFromBeaconOrProbeReponse();
CBSSEntry::GetSSID();
CBSSEntry::IsGroupIdMatch();
CBSSEntry::IsMatchingBssEntryForConnect();
CBSSEntry::LogOTAFrames();
CBSSEntry::SetBeaconOrProbeResponse();
CBSSEntry::SetChannelAndPhyID();
CBSSEntry::UpdateBackgroundDeviceExpired();
CBSSEntry::UpdateBackgroundDeviceLastQueriedTime();
CBSSEntry::UpdateFastBSSTransitionCapabilities();
CBSSEntry::UpdateP2PFields();
CBSSEntry::UpdateRMEnabledCapabilities();
CBSSEntry::UpdateRSNAInfo();
CBSSEntry::UpdateVariableBuffers();
CBSSEntry::`scalar deleting destructor'();
CBSSListManager::AddBSSEntry();
CBSSListManager::CopyWfdDevicesList();
CBSSListManager::FindBSSEntry();
CBSSListManager::FindBSSEntryByGroupID();
CBSSListManager::FindMatchingBSSEntriesForConnect();
CBSSListManager::FindMatchingBSSEntriesForNlo();
CBSSListManager::FlushAllEntries();
CBSSListManager::GetChannelListsForNeighborScan();
CBSSListManager::GetDot11BSSEntryList();
CBSSListManager::GetWfdDiscoverRequestResultList();
CBSSListUpdateJob::CBSSListUpdateJob();
CBSSListUpdateJob::Initialize();
CBSSListUpdateJob::OnJobCancelled();
CBSSListUpdateJob::OnJobStarted();
CBSSListUpdateJob::OnJobStepCompleted();
CBSSListUpdateJob::`scalar deleting destructor'();
CBSSListUpdateJob::`vector deleting destructor'();
CBSSListUpdateJob::~CBSSListUpdateJob();
CBssTransitionResponseJob::InitializeBSSTransitionResponseFrame();
CBssTransitionResponseJob::OnJobStarted();
CBssTransitionResponseJob::`scalar deleting destructor'();
CBssTransitionResponseJob::`vector deleting destructor'();
CBssidConnectHistory::AddEntry();
CBssidConnectHistory::Initialize();
CBssidConnectHistory::IsExcessiveRoamDetected();
CChannelListManager::AddChannel();
CConnectHelpers::FillConnectBSSEntryTLV();
CConnectHelpers::GetRoamConfig();
CConnectHelpers::GetRoamControlParameters();
CConnectHelpers::IsFastTransitionAllowed();
CConnectHelpers::PopulateConnectionParameters();
CConnectJob::CConnectJob();
CConnectJob::CheckAndRequestPMKIDUpdate();
CConnectJob::CheckAndStartConnectProcess();
CConnectJob::CheckAndStartScanProcess();
CConnectJob::CheckAndUpdateCandidates();
CConnectJob::CompleteConnectTask();
CConnectJob::CompleteScanJob();
CConnectJob::CompleteSendResponseActionFrameJob();
CConnectJob::FillConnectRoamTaskParameters();
CConnectJob::FillConnectionProfileParameters();
CConnectJob::FinishJob();
CConnectJob::GenerateConnectTaskTlv();
CConnectJob::GenerateRoamTaskTlv();
CConnectJob::InitializeForRoamReconnectRequest();
CConnectJob::InitializeFromOidRequest();
CConnectJob::NotifyAssociationStartAndCompletionIfNecessary();
CConnectJob::NotifyRoamingAttemptExhausted();
CConnectJob::OnAssociationNotificationArrived();
CConnectJob::OnBssEntryListNotification();
CConnectJob::OnDeviceIndicationArrived();
CConnectJob::OnJobCancelled();
CConnectJob::OnJobStarted();
CConnectJob::OnJobStepCompleted();
CConnectJob::OnOidJobCompletedEvent();
CConnectJob::OnOidJobStartedEvent();
CConnectJob::OnPMKIDListUpdateNotificationArrived();
CConnectJob::OnTimerCallback();
CConnectJob::PickCandidates();
CConnectJob::ReorderAssociationPhyTypesList();
CConnectJob::StartBssListUpdate();
CConnectJob::StartConnectRoamTask();
CConnectJob::StartFipsEncapsulationOffloadUpdate();
CConnectJob::StartFipsOffloadUpdate();
CConnectJob::StartScanJob();
CConnectJob::StartSetPrivacyExemptionIfNecessary();
CConnectJob::StartWaitForPMKIDList();
CConnectJob::StopWaitForPMKIDList();
CConnectJob::`scalar deleting destructor'();
CConnectJob::`vector deleting destructor'();
CConnectedPeerList::AddPeer();
CConnectedPeerList::CleanupPeerObject();
CConnectedPeerList::DeletePeer();
CConnectedPeerList::FindPeerByAddress();
CConnectedPeerList::FindPeerByAssociationState();
CConnectedPeerList::FindPeerInTable();
CConnectedPeerList::FlushPeerList();
CConnectedPeerList::Initialize();
CConnectionQualityOidJob::CConnectionQualityOidJob();
CConnectionQualityOidJob::InitializeFromOidRequest();
CConnectionQualityOidJob::OnJobCancelled();
CConnectionQualityOidJob::OnJobStarted();
CConnectionQualityOidJob::OnJobStepCompleted();
CConnectionQualityOidJob::OnOidJobCompletedEvent();
CConnectionQualityOidJob::ValidateChangeAllowed();
CConnectionQualityOidJob::`scalar deleting destructor'();
CConnectionQualityOidJob::`vector deleting destructor'();
CCreateMacOidJob::AllocateNdisPort();
CCreateMacOidJob::CCreateMacOidJob();
CCreateMacOidJob::InitializeForResume();
CCreateMacOidJob::InitializeFromOidRequest();
CCreateMacOidJob::OnJobCancelled();
CCreateMacOidJob::OnJobStarted();
CCreateMacOidJob::OnJobStepCompleted();
CCreateMacOidJob::OnOidJobCompletedEvent();
CCreateMacOidJob::`scalar deleting destructor'();
CCreateMacOidJob::`vector deleting destructor'();
CCreatePortJob::CCreatePortJob();
CCreatePortJob::CompleteCreatePortTask();
CCreatePortJob::InitializeFromJob();
CCreatePortJob::OnJobCancelled();
CCreatePortJob::OnJobStarted();
CCreatePortJob::OnJobStepCompleted();
CCreatePortJob::StartCreatePortTask();
CCreatePortJob::StartPortResetJob();
CCreatePortJob::`scalar deleting destructor'();
CCreatePortJob::`vector deleting destructor'();
CCreatePortJob::~CCreatePortJob();
CCtlPlane::ForwardRawOid();
CCtlPlane::FreeMemory();
CCtlPlane::OnRawOidRequestCompleteFromMiniport();
CCtlPlane::OnStatusIndicationFromMiniport();
CCtlPlane::OnWdiOidRequestCompleteFromMiniport();
CCtlPlane::SendWdiCommand();
CDeleteMacOidJob::CDeleteMacOidJob();
CDeleteMacOidJob::InitializeFromOidRequest();
CDeleteMacOidJob::OnJobCancelled();
CDeleteMacOidJob::OnJobStarted();
CDeleteMacOidJob::OnJobStepCompleted();
CDeleteMacOidJob::OnOidJobCompletedEvent();
CDeleteMacOidJob::OnOperationStarted();
CDeleteMacOidJob::`scalar deleting destructor'();
CDeleteMacOidJob::`vector deleting destructor'();
CDeletePortJob::CDeletePortJob();
CDeletePortJob::CompleteDeletePortTask();
CDeletePortJob::FinishJob();
CDeletePortJob::InitializeFromJob();
CDeletePortJob::OnJobCancelled();
CDeletePortJob::OnJobStarted();
CDeletePortJob::OnJobStepCompleted();
CDeletePortJob::StartDeletePortTask();
CDeletePortJob::StartPortJobCleanup();
CDeletePortJob::`scalar deleting destructor'();
CDeletePortJob::`vector deleting destructor'();
CDeletePortJob::~CDeletePortJob();
CDeviceCommandOidJobBase::CDeviceCommandOidJobBase();
CDeviceCommandOidJobBase::CompleteJobHelper();
CDeviceCommandOidJobBase::HandleCommandCompletion();
CDeviceCommandOidJobBase::HandleNextDeviceCommand();
CDeviceCommandOidJobBase::OnJobCancelled();
CDeviceCommandOidJobBase::OnJobStarted();
CDeviceCommandOidJobBase::OnJobStepCompleted();
CDeviceCommandOidJobBase::`scalar deleting destructor'();
CDeviceCommandOidJobBase::`vector deleting destructor'();
CDeviceServiceCommandJob::GetDeviceCommandData();
CDeviceServiceCommandJob::OnDeviceCommandCompletion();
CDeviceServiceCommandJob::`scalar deleting destructor'();
CDeviceServiceCommandJob::`vector deleting destructor'();
CDisconnectJob::CDisconnectJob();
CDisconnectJob::InitializeFromJob();
CDisconnectJob::InitializeFromOidRequest();
CDisconnectJob::OnJobCancelled();
CDisconnectJob::OnJobStarted();
CDisconnectJob::OnJobStepCompleted();
CDisconnectJob::OnOidJobCompletedEvent();
CDisconnectJob::`scalar deleting destructor'();
CDisconnectJob::`vector deleting destructor'();
CDisconnectJob::~CDisconnectJob();
CDispatchRundown::WaitForRundown();
CDot11RandomMacForScan::CDot11RandomMacForScan();
CDot11RandomMacForScan::InitializeFromOidRequest();
CDot11RandomMacForScan::OnJobCancelled();
CDot11RandomMacForScan::OnJobStarted();
CDot11RandomMacForScan::OnJobStepCompleted();
CDot11RandomMacForScan::OnOidJobCompletedEvent();
CDot11RandomMacForScan::StartNLOParameterResetJob();
CDot11RandomMacForScan::StartPowerParameterRestoreJob();
CDot11RandomMacForScan::StartResetJob();
CDot11RandomMacForScan::`scalar deleting destructor'();
CDot11RandomMacForScan::`vector deleting destructor'();
CDot11ResetJob::CDot11ResetJob();
CDot11ResetJob::CompletePortSwitchToINITState();
CDot11ResetJob::FinishJob();
CDot11ResetJob::InitializeFromJob();
CDot11ResetJob::InitializeFromOidRequest();
CDot11ResetJob::OnJobCancelled();
CDot11ResetJob::OnJobStarted();
CDot11ResetJob::OnJobStepCompleted();
CDot11ResetJob::OnOidJobCompletedEvent();
CDot11ResetJob::StartPortActiveJobsCompletion();
CDot11ResetJob::StartPortDataPathCleanup();
CDot11ResetJob::StartPortDisconnect();
CDot11ResetJob::StartPortSwitchToINITState();
CDot11ResetJob::`scalar deleting destructor'();
CDot11ResetJob::`vector deleting destructor'();
CDot11ResetJob::~CDot11ResetJob();
CDot11ToWabiConverter::MapAuthAlgorithm();
CDot11ToWabiConverter::MapCipherAlgorithm();
CDot11ToWabiConverter::MapPacketFilterType();
CDot11ToWabiConverter::MapWFDChannelInfo();
CDot11ToWabiConverter::SplitToArrayOfByteArrays();
CDummyQueryReturnTrueJob::QueryData();
CDummyQueryReturnTrueJob::`scalar deleting destructor'();
CDummyQueryReturnTrueJob::`vector deleting destructor'();
CDummySetJob::SetData();
CDummySetJob::`scalar deleting destructor'();
CDummySetJob::`vector deleting destructor'();
CEnumAssociationInfoJob::QueryData();
CEnumAssociationInfoJob::`scalar deleting destructor'();
CEnumAssociationInfoJob::`vector deleting destructor'();
CEnumBSSListJob::CEnumBSSListJob();
CEnumBSSListJob::CompleteBSSListEnum();
CEnumBSSListJob::InitializeFromOidRequest();
CEnumBSSListJob::OnJobCancelled();
CEnumBSSListJob::OnJobStarted();
CEnumBSSListJob::OnJobStepCompleted();
CEnumBSSListJob::OnOidJobCompletedEvent();
CEnumBSSListJob::`scalar deleting destructor'();
CEnumBSSListJob::`vector deleting destructor'();
CEnumBSSListJob::~CEnumBSSListJob();
CFlushBSSListJob::CFlushBSSListJob();
CFlushBSSListJob::InitializeFromOidRequest();
CFlushBSSListJob::OnJobCancelled();
CFlushBSSListJob::OnJobStarted();
CFlushBSSListJob::OnJobStepCompleted();
CFlushBSSListJob::OnOidJobCompletedEvent();
CFlushBSSListJob::`scalar deleting destructor'();
CFlushBSSListJob::`vector deleting destructor'();
CFlushBSSListJob::~CFlushBSSListJob();
CFrameIdLookupTable::AssignAndMapFrameId();
CFrameIdLookupTable::FreeAndUnmapFrameId();
CFrameIdLookupTable::GetSuspectFrames();
CFrameIdLookupTable::Initialize();
CFrameIdLookupTable::LogFramesWithOldFrameNum();
CFrameIdLookupTable::~CFrameIdLookupTable();
CGetAdapterCapabilitiesJob::QueryData();
CGetAdapterCapabilitiesJob::`scalar deleting destructor'();
CGetAdapterCapabilitiesJob::`vector deleting destructor'();
CGetAutoPowerSaveJob::InitializeFromOidRequest();
CGetAutoPowerSaveJob::OnJobCancelled();
CGetAutoPowerSaveJob::OnJobStarted();
CGetAutoPowerSaveJob::OnJobStepCompleted();
CGetAutoPowerSaveJob::OnOidJobCompletedEvent();
CGetAutoPowerSaveJob::OnOidJobStartedEvent();
CGetAutoPowerSaveJob::`scalar deleting destructor'();
CGetAutoPowerSaveJob::`vector deleting destructor'();
CGetCipherKey::GetDeviceCommandData();
CGetCipherKey::OnDeviceCommandCompletion();
CGetCipherKey::`scalar deleting destructor'();
CGetCipherKey::`vector deleting destructor'();
CGetNextDialogTokenJob::GetDeviceCommandId();
CGetNextDialogTokenJob::OnDeviceCommandCompletion();
CGetNextDialogTokenJob::`scalar deleting destructor'();
CGetNextDialogTokenJob::`vector deleting destructor'();
CGetPmParametersJob::QueryData();
CGetPmParametersJob::`scalar deleting destructor'();
CGetPmParametersJob::`vector deleting destructor'();
CGetPmProtocolOffloadJob::InitializeFromOidRequest();
CGetPmProtocolOffloadJob::OnJobCancelled();
CGetPmProtocolOffloadJob::OnJobStarted();
CGetPmProtocolOffloadJob::OnJobStepCompleted();
CGetPmProtocolOffloadJob::OnOidJobCompletedEvent();
CGetPmProtocolOffloadJob::OnOidJobStartedEvent();
CGetPmProtocolOffloadJob::StartGetPmProtocolOffloadCommand();
CGetPmProtocolOffloadJob::`scalar deleting destructor'();
CGetPmProtocolOffloadJob::`vector deleting destructor'();
CGetPowerMgmtRequestJob::QueryData();
CGetPowerMgmtRequestJob::`scalar deleting destructor'();
CGetPowerMgmtRequestJob::`vector deleting destructor'();
CGetRadioStateJob::QueryData();
CGetRadioStateJob::`scalar deleting destructor'();
CGetRadioStateJob::`vector deleting destructor'();
CGetReceiveCoalescingMatchCountJob::InitializeFromOidRequest();
CGetReceiveCoalescingMatchCountJob::OnJobCancelled();
CGetReceiveCoalescingMatchCountJob::OnJobStarted();
CGetReceiveCoalescingMatchCountJob::OnJobStepCompleted();
CGetReceiveCoalescingMatchCountJob::OnOidJobCompletedEvent();
CGetReceiveCoalescingMatchCountJob::OnOidJobStartedEvent();
CGetReceiveCoalescingMatchCountJob::`scalar deleting destructor'();
CGetReceiveCoalescingMatchCountJob::`vector deleting destructor'();
CGetSupportedDeviceServicesJob::GetDeviceCommandId();
CGetSupportedDeviceServicesJob::OnDeviceCommandCompletion();
CGetSupportedDeviceServicesJob::`scalar deleting destructor'();
CGetSupportedDeviceServicesJob::`vector deleting destructor'();
CGetWFDAdvertisementSettings::QueryData();
CGetWFDAdvertisementSettings::`scalar deleting destructor'();
CGetWFDAdvertisementSettings::`vector deleting destructor'();
CGlobalCtlDevice::Initialize();
CGlobalTxQueueList::AddTxQueue();
CGlobalTxQueueList::RemoveTxQueue();
CGlobalTxQueueList::~CGlobalTxQueueList();
CIhvTaskRequestJob::CIhvTaskRequestJob();
CIhvTaskRequestJob::InitializeFromJob();
CIhvTaskRequestJob::OnJobCancelled();
CIhvTaskRequestJob::OnJobStarted();
CIhvTaskRequestJob::OnJobStepCompleted();
CIhvTaskRequestJob::`scalar deleting destructor'();
CIhvTaskRequestJob::`vector deleting destructor'();
CJobBase::CJobBase();
CJobBase::CancelActivePendingCommand();
CJobBase::CompleteJob();
CJobBase::Initialize();
CJobBase::InitializeAndStartTask();
CJobBase::NotifyStarted();
CJobBase::OnAborted();
CJobBase::OnEventQueueCallback();
CJobBase::OnOperationCompleted();
CJobBase::OnStartJobEventHandler();
CJobBase::QueueDeviceCommand();
CJobBase::QueueSerializedJob();
CJobBase::SetPending();
CJobBase::StartChildJob();
CJobBase::StartJob();
CJobBase::StartTask();
CJobBase::`scalar deleting destructor'();
CJobBase::`vector deleting destructor'();
CJobCompleteNotifier::OnOperationCompleted();
CLowPowerNotifyJob::Initialize();
CLowPowerNotifyJob::OnJobCancelled();
CLowPowerNotifyJob::OnJobStarted();
CLowPowerNotifyJob::OnJobStepCompleted();
CLowPowerNotifyJob::`scalar deleting destructor'();
CLowPowerNotifyJob::`vector deleting destructor'();
CMessageHelper::FitMessageToBufferSize();
CMessageHelper::GetStatusFromCommandResult();
CMessageHelper::GetStatusFromTaskOutput();
CMessageHelper::LogMessage();
CMiniportDriver::CheckForNapsWhiteList();
CMiniportDriver::MPInitializeEx();
CMiniportDriver::RegisterWdiMiniportDriver();
CMiniportHaltJob::CompleteCloseTask();
CMiniportHaltJob::DataPathReleaseInterface();
CMiniportHaltJob::OnJobCancelled();
CMiniportHaltJob::OnJobStarted();
CMiniportHaltJob::OnJobStepCompleted();
CMiniportHaltJob::StartCloseTask();
CMiniportHaltJob::StartDeleteAllPorts();
CMiniportHaltJob::`scalar deleting destructor'();
CMiniportHaltJob::`vector deleting destructor'();
CMiniportInitializeJob::ApplyAdapterCapabilitiesOverride();
CMiniportInitializeJob::ApplyDriverCapabilities();
CMiniportInitializeJob::CMiniportInitializeJob();
CMiniportInitializeJob::CompleteGetFirmwareCapabilities();
CMiniportInitializeJob::CompleteOpenTask();
CMiniportInitializeJob::CompleteSetFirmwareConfiguration();
CMiniportInitializeJob::FinishJob();
CMiniportInitializeJob::Is11adBandPresent();
CMiniportInitializeJob::OnJobCancelled();
CMiniportInitializeJob::OnJobStarted();
CMiniportInitializeJob::OnJobStepCompleted();
CMiniportInitializeJob::PerformAllocateAdapter();
CMiniportInitializeJob::SetMiniportAttributes();
CMiniportInitializeJob::StartCreatePortJob();
CMiniportInitializeJob::StartGetFirmwareCapabilities();
CMiniportInitializeJob::StartOpenTask();
CMiniportInitializeJob::StartSetFirmwareConfiguration();
CMiniportInitializeJob::StartSetRadioStateTask();
CMiniportInitializeJob::`scalar deleting destructor'();
CMiniportInitializeJob::`vector deleting destructor'();
CMiniportInitializeJob::~CMiniportInitializeJob();
CMiniportJobBase::CMiniportJobBase();
CMiniportJobBase::Initialize();
CMiniportJobBase::OnJobCancelled();
CMiniportJobBase::OnJobStarted();
CMiniportJobBase::OnJobStepCompleted();
CMiniportJobBase::StartPortJobNext();
CMiniportJobBase::`scalar deleting destructor'();
CMiniportJobBase::`vector deleting destructor'();
CMiniportJobBase::~CMiniportJobBase();
CMiniportPauseJob::PortJobCallback();
CMiniportPauseJob::PortOperationCompletedCallback();
CMiniportPauseJob::`scalar deleting destructor'();
CMiniportPauseJob::`vector deleting destructor'();
CMiniportRestartJob::PortJobCallback();
CMiniportRestartJob::PortOperationCompletedCallback();
CMiniportRestartJob::`scalar deleting destructor'();
CMiniportRestartJob::`vector deleting destructor'();
CMiniportSurpriseRemovalJob::PortJobCallback();
CMiniportSurpriseRemovalJob::PortOperationCompletedCallback();
CMiniportSurpriseRemovalJob::`scalar deleting destructor'();
CMiniportSurpriseRemovalJob::`vector deleting destructor'();
CNdisEventContext::Reset();
CNdisEventContext::Set();
CNdisEventContext::Wait();
CNdisHook::Cleanup();
CNdisSpinLock::CreateInstance();
CNetworkHistory::FindOrAddChannelEntry();
CNetworkHistoryList::FindNetworkBySsid();
CNetworkHistoryList::Initialize();
CNetworkHistoryList::UpdateOrAddNetworkToTable();
CNicSpecificExtensionJob::GetDeviceCommandData();
CNicSpecificExtensionJob::OnDeviceCommandCompletion();
CNicSpecificExtensionJob::`scalar deleting destructor'();
CNicSpecificExtensionJob::`vector deleting destructor'();
COidJobBase::COidJobBase();
COidJobBase::GetPortPropertyCache();
COidJobBase::InitializeForOid();
COidJobBase::InitializeWithoutOid();
COidJobBase::OnOidJobStartedEvent();
COidJobBase::`scalar deleting destructor'();
COidJobBase::`vector deleting destructor'();
COidJobBase::s_CreateOidJob();
COidJobBase::s_FindOidHandlerEntry();
COidJobBase::s_GetSupportedOidsList();
COidJobNotificationHandler::OnOperationCompleted();
COidJobNotificationHandler::OnOperationStarted();
CP2PDisconnectJob::CP2PDisconnectJob();
CP2PDisconnectJob::InitializeFromOidRequest();
CP2PDisconnectJob::OnNotifyJobCompletion();
CP2PDisconnectJob::OnOidJobCompletedEvent();
CP2PDisconnectJob::QueryNextCommandInfo();
CP2PDisconnectJob::`scalar deleting destructor'();
CP2PDisconnectJob::`vector deleting destructor'();
CP2PDiscoverCancelJob::SetData();
CP2PDiscoverCancelJob::`scalar deleting destructor'();
CP2PDiscoverCancelJob::`vector deleting destructor'();
CP2PDiscoverJob::CP2PDiscoverJob();
CP2PDiscoverJob::InitializeDiscoverByGroupID();
CP2PDiscoverJob::InitializeFromOidRequest();
CP2PDiscoverJob::IsDeviceFilterSatisfied();
CP2PDiscoverJob::OnAborted();
CP2PDiscoverJob::OnDeviceIndicationArrived();
CP2PDiscoverJob::OnJobCancelled();
CP2PDiscoverJob::OnJobStarted();
CP2PDiscoverJob::OnJobStepCompleted();
CP2PDiscoverJob::OnOidJobCompletedEvent();
CP2PDiscoverJob::OnOidJobStartedEvent();
CP2PDiscoverJob::OnTimerCallback();
CP2PDiscoverJob::PrepareCompletionIndication();
CP2PDiscoverJob::TriggerDiscover();
CP2PDiscoverJob::`scalar deleting destructor'();
CP2PDiscoverJob::`vector deleting destructor'();
CP2PDiscoverJob::~CP2PDiscoverJob();
CP2PEnableHrdssDevices::SetData();
CP2PEnableHrdssDevices::`scalar deleting destructor'();
CP2PEnableHrdssDevices::`vector deleting destructor'();
CP2PSendActionFrameRequestJob::CP2PSendActionFrameRequestJob();
CP2PSendActionFrameRequestJob::ConstructCompletionIndication();
CP2PSendActionFrameRequestJob::CopyExtraIEsToByteBlob();
CP2PSendActionFrameRequestJob::InitializeFromOidRequest();
CP2PSendActionFrameRequestJob::OnJobCancelled();
CP2PSendActionFrameRequestJob::OnJobStarted();
CP2PSendActionFrameRequestJob::OnJobStepCompleted();
CP2PSendActionFrameRequestJob::OnOidJobCompletedEvent();
CP2PSendActionFrameRequestJob::OnOidJobStartedEvent();
CP2PSendActionFrameRequestJob::PopulateBSSEntry();
CP2PSendActionFrameRequestJob::PopulateGONegotiationRequestParameters();
CP2PSendActionFrameRequestJob::PopulateInvitationRequestParameters();
CP2PSendActionFrameRequestJob::PopulateProvisionDiscoveryRequestParameters();
CP2PSendActionFrameRequestJob::TrySendActionRequestFrame();
CP2PSendActionFrameRequestJob::`scalar deleting destructor'();
CP2PSendActionFrameRequestJob::`vector deleting destructor'();
CP2PSendActionFrameResponseJob::CP2PSendActionFrameResponseJob();
CP2PSendActionFrameResponseJob::CopyExtraIEsToByteBlob();
CP2PSendActionFrameResponseJob::HandleCommandCompletion();
CP2PSendActionFrameResponseJob::InitializeFromOidRequest();
CP2PSendActionFrameResponseJob::OnNotifyJobCompletion();
CP2PSendActionFrameResponseJob::OnOidJobCompletedEvent();
CP2PSendActionFrameResponseJob::PopulateGONegotiationConfirmationParameters();
CP2PSendActionFrameResponseJob::PopulateGONegotiationResponseParameters();
CP2PSendActionFrameResponseJob::PopulateInvitationResponseParameters();
CP2PSendActionFrameResponseJob::PopulateProvisionDiscoveryResponseParameters();
CP2PSendActionFrameResponseJob::QueryNextCommandInfo();
CP2PSendActionFrameResponseJob::`scalar deleting destructor'();
CP2PSendActionFrameResponseJob::`vector deleting destructor'();
CPMKIDCacheHelpers::AppendBSSCandidateEntriesToDriverPMKIDList();
CPMKIDCacheHelpers::SaveNewPMKIDEntriesInPMKIDCache();
CPMKIDCacheHelpers::SetPMKIDsForBSSEntries();
CPeerTable::AddPeer();
CPeerTable::AssignPeerEntry();
CPeerTable::GetPeerId();
CPeerTable::Initialize();
CPeerTable::RemovePeer();
CPeerTable::~CPeerTable();
CPort::AddWfcFrameToPendingCount();
CPort::CPort();
CPort::CancelOpportunisticRoam();
CPort::CheckAndNotifyLinkDegradedStatus();
CPort::CompletePendingCancelSendsOrHaltJobs();
CPort::CompleteTxPortQueue();
CPort::DetermineIfSwitchToBetterAPNeeded();
CPort::Dot11Reset();
CPort::FreeTxWfcFrame();
CPort::GetChannelListsFromChannelHistory();
CPort::GetPortOffloads();
CPort::IncorporateBSSEntryList();
CPort::IndicateAllPeersDisassociated();
CPort::IndicateFrames();
CPort::IndicateSinglePeerDisassociated();
CPort::Initialize();
CPort::OnAssociationParametersRequestReceived();
CPort::OnBSSEntryNotification();
CPort::OnBSSListChanged();
CPort::OnBssTransitionManagementRequestReceived();
CPort::OnCanSustainAPReceived();
CPort::OnCipherKeyUpdatedReceived();
CPort::OnDeviceIndicationArrived();
CPort::OnDeviceServiceEventReceived();
CPort::OnDisassociated();
CPort::OnFTAssocParamsNeededIndicationArrived();
CPort::OnIhvEvent();
CPort::OnIhvTaskRequestReceived();
CPort::OnIncomingActionFrameReceived();
CPort::OnIncomingAssociationRequestReceived();
CPort::OnIncomingP2PActionFrameReceived();
CPort::OnLinkStateChange();
CPort::OnNeighborReportReceived();
CPort::OnNeighborReportRequestTimerCallback();
CPort::OnNloDiscovery();
CPort::OnOperatingChannelAttributesIndication();
CPort::OnOperatingChannelIndication();
CPort::OnOperationCompleted();
CPort::OnOpportunisticRoamTimerCallback();
CPort::OnPublicActionFrameReceived();
CPort::OnRoamingNeeded();
CPort::OnRxFlushConfirm();
CPort::OnStopAPReceived();
CPort::OnTaskOffloadCurrentConfigReceived();
CPort::OnTimerCallback();
CPort::OnTkipMicFailure();
CPort::OnWakeReason();
CPort::Pause();
CPort::PerformPMKIDRequest();
CPort::PopulateTaskOffloadVirtualPortParameters();
CPort::QueueNeighborReportRequest();
CPort::QueueOpportunisticRoam();
CPort::Restart();
CPort::RestartSendAndReceivesLE();
CPort::ReturnNBLs();
CPort::SaveNetworkCandidatesHistory();
CPort::SaveNetworkConnectHistory();
CPort::SendANQPQueryResponse();
CPort::SendCompleteNetBufferLists();
CPort::SendNetBufferLists();
CPort::SendQueuedNetBufferLists();
CPort::SendResponseBSSTransitionFrame();
CPort::SendResponseToServiceQueryComebackRequest();
CPort::SendResponseToServiceQueryInitialRequest();
CPort::SetMacAddress();
CPort::StartRoamJob();
CPort::StopSendAndReceivesLE();
CPort::TraceLoggingRoamFinished();
CPort::TriggerDisconnectAndReconnect();
CPort::TriggerIHVRequestedRoam();
CPort::TriggerReconnect();
CPort::TriggerWdiInitiatedRoam();
CPort::UpdateLinkState();
CPort::UpdateNLOSchedule();
CPort::UpdateSSIDBlockInfoFor11r();
CPort::UpdateStoredNLOParameterBuffer();
CPort::UpdateTaskOffloadCurrentConfigForFIPS();
CPort::~CPort();
CPortJobNotifier::OnOperationCompleted();
CPortPropertyCache::AddCiphersToSupportedList();
CPortPropertyCache::Dot11Reset();
CPortPropertyCache::GetTCPOffloadCapabilities();
CPortPropertyCache::NdisReset();
CPortPropertyCache::SetTCPOffloadCapabilities();
CPropertyCache::GetPropertyBoolean();
CPropertyCache::GetPropertyBooleanOrDefault();
CPropertyCache::GetPropertyBuffer();
CPropertyCache::GetPropertyEntryForPropertyName();
CPropertyCache::GetPropertyList();
CPropertyCache::GetPropertyPropertyCacheList();
CPropertyCache::GetPropertyULong();
CPropertyCache::GetPropertyULongOrDefault();
CPropertyCache::GetPropertyUchar();
CPropertyCache::Initialize();
CPropertyCache::LoadProperties();
CPropertyCache::LoadPropertyListProperty();
CPropertyCache::SetPropertyBoolean();
CPropertyCache::SetPropertyBuffer();
CPropertyCache::SetPropertyList();
CPropertyCache::SetPropertyPropertyCacheList();
CPropertyCache::SetPropertyULong();
CPropertyCache::SetPropertyUchar();
CPropertyCache::~CPropertyCache();
CPropertyCacheSetBufferOidJob::SetData();
CQueryCurrentRegDomainJob::QueryData();
CQueryCurrentRegDomainJob::`scalar deleting destructor'();
CQueryCurrentRegDomainJob::`vector deleting destructor'();
CQueryDesiredHESSIDList::QueryData();
CQueryDesiredHESSIDList::`scalar deleting destructor'();
CQueryDesiredHESSIDList::`vector deleting destructor'();
CQueryExtSTACapabilityJob::QueryData();
CQueryExtSTACapabilityJob::`scalar deleting destructor'();
CQueryExtSTACapabilityJob::`vector deleting destructor'();
CQueryHardwareAddressJob::QueryData();
CQueryHardwareAddressJob::`scalar deleting destructor'();
CQueryHardwareAddressJob::`vector deleting destructor'();
CQueryMacAddressJob::QueryData();
CQueryMacAddressJob::`scalar deleting destructor'();
CQueryMacAddressJob::`vector deleting destructor'();
CQueryMediaStreamingEnabledOidJob::`scalar deleting destructor'();
CQueryMediaStreamingEnabledOidJob::`vector deleting destructor'();
CQueryMulticastListJob::QueryData();
CQueryMulticastListJob::`scalar deleting destructor'();
CQueryMulticastListJob::`vector deleting destructor'();
CQueryOperationModeCapabilityJob::QueryData();
CQueryOperationModeCapabilityJob::`scalar deleting destructor'();
CQueryOperationModeCapabilityJob::`vector deleting destructor'();
CQueryOperationModeJob::QueryData();
CQueryOperationModeJob::`scalar deleting destructor'();
CQueryOperationModeJob::`vector deleting destructor'();
CQueryOperationalRateSet::QueryData();
CQueryOperationalRateSet::`scalar deleting destructor'();
CQueryOperationalRateSet::`vector deleting destructor'();
CQueryPhyIdJob::QueryData();
CQueryPhyIdJob::`scalar deleting destructor'();
CQueryPhyIdJob::`vector deleting destructor'();
CQueryPowerJob::InitializeFromOidRequest();
CQueryPowerJob::OnJobCancelled();
CQueryPowerJob::OnJobStarted();
CQueryPowerJob::OnJobStepCompleted();
CQueryPowerJob::OnOidJobCompletedEvent();
CQueryPowerJob::OnOidJobStartedEvent();
CQueryPowerJob::`scalar deleting destructor'();
CQueryPowerJob::`vector deleting destructor'();
CQueryRegDomainsSupportJob::QueryData();
CQueryRegDomainsSupportJob::`scalar deleting destructor'();
CQueryRegDomainsSupportJob::`vector deleting destructor'();
CQueryStatisticsJob::GetDeviceCommandId();
CQueryStatisticsJob::OnDeviceCommandCompletion();
CQueryStatisticsJob::`scalar deleting destructor'();
CQueryStatisticsJob::`vector deleting destructor'();
CQuerySupportedAlgorithmPairJobBase::CQuerySupportedAlgorithmPairJobBase();
CQuerySupportedAlgorithmPairJobBase::QuerySupportedAlgorithmPairData();
CQuerySupportedAlgorithmPairJobBase::`scalar deleting destructor'();
CQuerySupportedAlgorithmPairJobBase::`vector deleting destructor'();
CQuerySupportedGuidsJob::QueryData();
CQuerySupportedGuidsJob::`scalar deleting destructor'();
CQuerySupportedGuidsJob::`vector deleting destructor'();
CQuerySupportedMulticastAlgorithmPairJob::QueryData();
CQuerySupportedMulticastAlgorithmPairJob::`scalar deleting destructor'();
CQuerySupportedMulticastAlgorithmPairJob::`vector deleting destructor'();
CQuerySupportedUnicastAlgorithmPairJob::QueryData();
CQuerySupportedUnicastAlgorithmPairJob::`scalar deleting destructor'();
CQuerySupportedUnicastAlgorithmPairJob::`vector deleting destructor'();
CQueryVendorDescriptionJob::QueryData();
CQueryVendorDescriptionJob::`scalar deleting destructor'();
CQueryVendorDescriptionJob::`vector deleting destructor'();
CQueryVendorDriverVersionJob::QueryData();
CQueryVendorDriverVersionJob::`scalar deleting destructor'();
CQueryVendorDriverVersionJob::`vector deleting destructor'();
CQueryVendorIDJob::QueryData();
CQueryVendorIDJob::`scalar deleting destructor'();
CQueryVendorIDJob::`vector deleting destructor'();
CRegistryHelper::LoadPropertiesFromRegistry();
CRegistryHelper::Open();
CRegistryHelper::ReadAdapterRegistryBinaries();
CRegistryHelper::ReadAdapterRegistryDword();
CRegistryHelper::SavePropertyToRegistry();
CRegistryHelper::WriteAdapterRegistryBinaries();
CRegistryHelper::WriteAdapterRegistryEntry();
CRegistryHelper::~CRegistryHelper();
CResetRecoveryJob::SetData();
CResetRecoveryJob::`scalar deleting destructor'();
CResetRecoveryJob::`vector deleting destructor'();
CResumeAdvSettingJob::InitializeForResume();
CResumeAdvSettingJob::`scalar deleting destructor'();
CResumeAdvSettingJob::`vector deleting destructor'();
CResumeAutoPsmJob::InitializeForResume();
CResumeAutoPsmJob::`scalar deleting destructor'();
CResumeAutoPsmJob::`vector deleting destructor'();
CResumeCoalesceJob::`scalar deleting destructor'();
CResumeCoalesceJob::`vector deleting destructor'();
CResumeDefaultKeyIdJob::InitializeForResume();
CResumeDefaultKeyIdJob::OnOidJobCompletedEvent();
CResumeDefaultKeyIdJob::`scalar deleting destructor'();
CResumeDefaultKeyIdJob::`vector deleting destructor'();
CResumeDefaultKeyJob::InitializeForResume();
CResumeDefaultKeyJob::OnOidJobCompletedEvent();
CResumeDefaultKeyJob::`scalar deleting destructor'();
CResumeDefaultKeyJob::`vector deleting destructor'();
CResumeFirmwareJob::CResumeFirmwareJob();
CResumeFirmwareJob::OnJobStepCompleted();
CResumeFirmwareJob::ResumeFirmwareContext();
CResumeFirmwareJob::StartOpenTask();
CResumeFirmwareJob::`scalar deleting destructor'();
CResumeFirmwareJob::`vector deleting destructor'();
CResumeFirmwareJob::~CResumeFirmwareJob();
CResumeMulticastListJob::InitializeForResume();
CResumeMulticastListJob::`scalar deleting destructor'();
CResumeMulticastListJob::`vector deleting destructor'();
CResumeOffloadJob::`scalar deleting destructor'();
CResumeOffloadJob::`vector deleting destructor'();
CResumeP2pPortJob::GetNextAdvertisement();
CResumeP2pPortJob::OnJobCancelled();
CResumeP2pPortJob::OnJobStarted();
CResumeP2pPortJob::OnJobStepCompleted();
CResumeP2pPortJob::`scalar deleting destructor'();
CResumeP2pPortJob::`vector deleting destructor'();
CResumeP2pPortJob::~CResumeP2pPortJob();
CResumePacketFilterJob::InitializeForResume();
CResumePacketFilterJob::`scalar deleting destructor'();
CResumePacketFilterJob::`vector deleting destructor'();
CResumePrivacyExemptionJob::GetDeviceCommandData();
CResumePrivacyExemptionJob::InitializeForResume();
CResumePrivacyExemptionJob::OnDeviceCommandCompletion();
CResumePrivacyExemptionJob::OnOidJobCompletedEvent();
CResumePrivacyExemptionJob::`scalar deleting destructor'();
CResumePrivacyExemptionJob::`vector deleting destructor'();
CResumeWolPatternJob::`scalar deleting destructor'();
CResumeWolPatternJob::`vector deleting destructor'();
CRoamOidJob::SetData();
CRoamOidJob::`scalar deleting destructor'();
CRoamOidJob::`vector deleting destructor'();
CRoamReconnectJob::CompleteAndRequeueConnectJobIfNecessary();
CRoamReconnectJob::CompleteConnectJob();
CRoamReconnectJob::FinishJob();
CRoamReconnectJob::Initialize();
CRoamReconnectJob::NotifyRoamingCompletionIfNecessary();
CRoamReconnectJob::NotifyRoamingStart();
CRoamReconnectJob::OnDisassociationProcessed();
CRoamReconnectJob::OnJobCancelled();
CRoamReconnectJob::OnJobStarted();
CRoamReconnectJob::OnJobStepCompleted();
CRoamReconnectJob::OnOperationStarted();
CRoamReconnectJob::StartConnectJob();
CRoamReconnectJob::`scalar deleting destructor'();
CRoamReconnectJob::`vector deleting destructor'();
CRxDefragTable::AddFragment();
CRxDefragTable::AddFragmentToEntry();
CRxDefragTable::FlushFragmentList();
CRxDefragTable::ForceFreeFragmentEntry();
CRxDefragTable::Initialize();
CRxDefragTable::RemovePeerFragments();
CRxDefragTable::RemovePortFragments();
CRxMgr::Initialize();
CRxMgr::OnAssociationComplete();
CRxMgr::OnNdisReturnNetBufferLists();
CRxMgr::RemovePeerId();
CRxMgr::RequeuePendingRxNbls();
CRxMgr::RxClassify();
CRxMgr::RxDefragmentMSDU();
CRxMgr::RxInOrderDataInd();
CRxMgr::RxIndicatePortFrames();
CRxMgr::RxIndicateStopFlushComplete();
CRxMgr::RxNblAddRecvContext();
CRxMgr::RxProcessAndIndicateNblChain();
CRxMgr::RxReturnFrames();
CRxMgr::RxSendDecreaseThrottle();
CRxMgr::RxSendIncreaseThrottle();
CRxMgr::RxStopConfirm();
CRxPeerTable::RxPeerEntryAdd();
CRxPeerTable::RxPeerGetPeerId();
CRxPeerTable::RxPeerPauseWithData();
CRxPeerTable::RxPeersForPortSetState();
CScanJob::CScanJob();
CScanJob::CompleteScanTask();
CScanJob::FinishJob();
CScanJob::InitializeFromScanParams();
CScanJob::IsScanAllowed();
CScanJob::OnJobCancelled();
CScanJob::OnJobStarted();
CScanJob::OnJobStepCompleted();
CScanJob::StartScanTask();
CScanJob::`scalar deleting destructor'();
CScanJob::`vector deleting destructor'();
CScanJob::~CScanJob();
CScanOidJob::CScanOidJob();
CScanOidJob::InitializeFromOidRequest();
CScanOidJob::OnJobCancelled();
CScanOidJob::OnJobStarted();
CScanOidJob::OnJobStepCompleted();
CScanOidJob::OnOidJobCompletedEvent();
CScanOidJob::OnTimerCallback();
CScanOidJob::StartScanJob();
CScanOidJob::ValidateScanRequest();
CScanOidJob::`scalar deleting destructor'();
CScanOidJob::`vector deleting destructor'();
CSendActionFrameRequestJob::CSendActionFrameRequestJob();
CSendActionFrameRequestJob::GenerateANQPFrame();
CSendActionFrameRequestJob::Initialize();
CSendActionFrameRequestJob::InitializeActionFrame();
CSendActionFrameRequestJob::InitializePublicActionFrame();
CSendActionFrameRequestJob::OnJobCancelled();
CSendActionFrameRequestJob::OnJobStarted();
CSendActionFrameRequestJob::OnJobStepCompleted();
CSendActionFrameRequestJob::QueryNextDialogToken();
CSendActionFrameRequestJob::SendActionFrameRequest();
CSendActionFrameRequestJob::`scalar deleting destructor'();
CSendActionFrameRequestJob::`vector deleting destructor'();
CSendActionFrameRequestJob::~CSendActionFrameRequestJob();
CSendAssociationResponseJob::CSendAssociationResponseJob();
CSendAssociationResponseJob::HandleCommandCompletion();
CSendAssociationResponseJob::InitializeFromOidRequest();
CSendAssociationResponseJob::OnNotifyJobCompletion();
CSendAssociationResponseJob::OnOidJobCompletedEvent();
CSendAssociationResponseJob::QueryNextCommandInfo();
CSendAssociationResponseJob::`scalar deleting destructor'();
CSendAssociationResponseJob::`vector deleting destructor'();
CSendNeighborReportRequestJob::InitializeActionFrame();
CSendNeighborReportRequestJob::`scalar deleting destructor'();
CSendNeighborReportRequestJob::`vector deleting destructor'();
CServiceComebackResponseContext::GetNextFragmentToSend();
CServicesManager::AddComebackResponseContext();
CServicesManager::CheckForExpiredDevicesAndServices();
CServicesManager::CheckForNewServices();
CServicesManager::CheckStartDeviceUpdateNotificationTimer();
CServicesManager::ExpireOldComebackEntries();
CServicesManager::FindComebackResponseContext();
CServicesManager::FlushDiscoveryContexts();
CServicesManager::Initialize();
CServicesManager::InitializeForP2PDeviceQuery();
CServicesManager::MarkP2PBackgroundServicesQueried();
CServicesManager::OnTimerCallback();
CServicesManager::RemoveComebackResponseContext();
CServicesManager::SetNewBackgroundDiscoveryContexts();
CServicesManager::StartDeviceExpiryNotificationTimer();
CServicesManager::UpdateBackgroundDeviceIndicatedByDriver();
CServicesManager::~CServicesManager();
CSetAPGroupStartParametersJob::CSetAPGroupStartParametersJob();
CSetAPGroupStartParametersJob::`scalar deleting destructor'();
CSetAPGroupStartParametersJob::`vector deleting destructor'();
CSetAddPmProtocolOffloadJob::AddOffloadToPropertyCache();
CSetAddPmProtocolOffloadJob::CSetAddPmProtocolOffloadJob();
CSetAddPmProtocolOffloadJob::GenerateOffloadTlv();
CSetAddPmProtocolOffloadJob::InitializeFromOidRequest();
CSetAddPmProtocolOffloadJob::OnJobCancelled();
CSetAddPmProtocolOffloadJob::OnJobStarted();
CSetAddPmProtocolOffloadJob::OnJobStepCompleted();
CSetAddPmProtocolOffloadJob::OnOidJobCompletedEvent();
CSetAddPmProtocolOffloadJob::OnOidJobStartedEvent();
CSetAddPmProtocolOffloadJob::`scalar deleting destructor'();
CSetAddPmProtocolOffloadJob::`vector deleting destructor'();
CSetAddWolPatternJob::AddWolPatternToPropertyCache();
CSetAddWolPatternJob::CSetAddWolPatternJob();
CSetAddWolPatternJob::InitializeFromOidRequest();
CSetAddWolPatternJob::OnJobCancelled();
CSetAddWolPatternJob::OnJobStarted();
CSetAddWolPatternJob::OnJobStepCompleted();
CSetAddWolPatternJob::OnOidJobCompletedEvent();
CSetAddWolPatternJob::OnOidJobStartedEvent();
CSetAddWolPatternJob::SetupInfoForTlvGenerator();
CSetAddWolPatternJob::StartSetAddWolPatternCommand();
CSetAddWolPatternJob::`scalar deleting destructor'();
CSetAddWolPatternJob::`vector deleting destructor'();
CSetAutoPowerSaveJob::InitializeFromOidRequest();
CSetAutoPowerSaveJob::OnJobCancelled();
CSetAutoPowerSaveJob::OnJobStarted();
CSetAutoPowerSaveJob::OnJobStepCompleted();
CSetAutoPowerSaveJob::OnOidJobCompletedEvent();
CSetAutoPowerSaveJob::OnOidJobStartedEvent();
CSetAutoPowerSaveJob::`scalar deleting destructor'();
CSetAutoPowerSaveJob::`vector deleting destructor'();
CSetClearReceiveCoalescingJob::InitializeFromOidRequest();
CSetClearReceiveCoalescingJob::OnJobCancelled();
CSetClearReceiveCoalescingJob::OnJobStarted();
CSetClearReceiveCoalescingJob::OnJobStepCompleted();
CSetClearReceiveCoalescingJob::OnOidJobCompletedEvent();
CSetClearReceiveCoalescingJob::OnOidJobStartedEvent();
CSetClearReceiveCoalescingJob::RemoveReceiveCoalesceFromPropertyCache();
CSetClearReceiveCoalescingJob::StartSetClearReceiveCoalescingCommand();
CSetClearReceiveCoalescingJob::`scalar deleting destructor'();
CSetClearReceiveCoalescingJob::`vector deleting destructor'();
CSetDefaultKeyIdJob::GetDeviceCommandData();
CSetDefaultKeyIdJob::`scalar deleting destructor'();
CSetDefaultKeyIdJob::`vector deleting destructor'();
CSetDefaultKeyJob::GetDeviceCommandData();
CSetDefaultKeyJob::InitializeFromOidRequest();
CSetDefaultKeyJob::OnOidJobCompletedEvent();
CSetDefaultKeyJob::`scalar deleting destructor'();
CSetDefaultKeyJob::`vector deleting destructor'();
CSetDesiredBSSIDListJob::SetData();
CSetDesiredBSSIDListJob::`scalar deleting destructor'();
CSetDesiredBSSIDListJob::`vector deleting destructor'();
CSetDesiredHESSIDList::SetData();
CSetDesiredHESSIDList::`scalar deleting destructor'();
CSetDesiredHESSIDList::`vector deleting destructor'();
CSetDesirerdBssTypeJob::SetData();
CSetDesirerdBssTypeJob::`scalar deleting destructor'();
CSetDesirerdBssTypeJob::`vector deleting destructor'();
CSetEndDwellOnChannel::GetDeviceCommandData();
CSetEndDwellOnChannel::OnDeviceCommandCompletion();
CSetEndDwellOnChannel::`scalar deleting destructor'();
CSetEndDwellOnChannel::`vector deleting destructor'();
CSetExcludedMacAddressListJob::SetData();
CSetExcludedMacAddressListJob::`scalar deleting destructor'();
CSetExcludedMacAddressListJob::`vector deleting destructor'();
CSetFTParametersJob::SetData();
CSetFTParametersJob::`scalar deleting destructor'();
CSetFTParametersJob::`vector deleting destructor'();
CSetFTReassociationParametersJob::InitializeFromOidRequest();
CSetFTReassociationParametersJob::OnNotifyJobCompletion();
CSetFTReassociationParametersJob::OnOidJobCompletedEvent();
CSetFTReassociationParametersJob::QueryNextCommandInfo();
CSetFTReassociationParametersJob::`scalar deleting destructor'();
CSetFTReassociationParametersJob::`vector deleting destructor'();
CSetHighChannelAvailabilityModeJob::ValidateChangeAllowed();
CSetHighChannelAvailabilityModeJob::`scalar deleting destructor'();
CSetHighChannelAvailabilityModeJob::`vector deleting destructor'();
CSetKeyMappingKeyJob::GetDeviceCommandData();
CSetKeyMappingKeyJob::InitializeFromOidRequest();
CSetKeyMappingKeyJob::OnJobStarted();
CSetKeyMappingKeyJob::`scalar deleting destructor'();
CSetKeyMappingKeyJob::`vector deleting destructor'();
CSetLimitedDisruptionModeJob::SetData();
CSetLimitedDisruptionModeJob::UpdateAdapterRefCount();
CSetLimitedDisruptionModeJob::UpdateProperties();
CSetLimitedDisruptionModeJob::`scalar deleting destructor'();
CSetLimitedDisruptionModeJob::`vector deleting destructor'();
CSetMediaStreamingEnabledOidJob::`scalar deleting destructor'();
CSetMediaStreamingEnabledOidJob::`vector deleting destructor'();
CSetMulticastListJob::GetDeviceCommandData();
CSetMulticastListJob::OnDeviceCommandCompletion();
CSetMulticastListJob::`scalar deleting destructor'();
CSetMulticastListJob::`vector deleting destructor'();
CSetNapsDelay::SetData();
CSetNapsDelay::`scalar deleting destructor'();
CSetNapsDelay::`vector deleting destructor'();
CSetNeighborReportEntriesJob::InitializeFromNeighborReportEntries();
CSetNeighborReportEntriesJob::OnJobCancelled();
CSetNeighborReportEntriesJob::OnJobStarted();
CSetNeighborReportEntriesJob::OnJobStepCompleted();
CSetNeighborReportEntriesJob::`scalar deleting destructor'();
CSetNeighborReportEntriesJob::`vector deleting destructor'();
CSetNloJob::InitializeFromOidRequest();
CSetNloJob::OnJobCancelled();
CSetNloJob::OnJobStarted();
CSetNloJob::OnJobStepCompleted();
CSetNloJob::OnOidJobCompletedEvent();
CSetNloJob::OnOidJobStartedEvent();
CSetNloJob::SetupInfoForTlvGenerator();
CSetNloJob::StartSetNloCommand();
CSetNloJob::`scalar deleting destructor'();
CSetNloJob::`vector deleting destructor'();
CSetOperationModeJob::CSetOperationModeJob();
CSetOperationModeJob::InitializeFromOidRequest();
CSetOperationModeJob::OnJobCancelled();
CSetOperationModeJob::OnJobStarted();
CSetOperationModeJob::OnJobStepCompleted();
CSetOperationModeJob::OnOidJobCompletedEvent();
CSetOperationModeJob::OnOidJobStartedEvent();
CSetOperationModeJob::`scalar deleting destructor'();
CSetOperationModeJob::`vector deleting destructor'();
CSetP2PDesiredGroupIDJob::CSetP2PDesiredGroupIDJob();
CSetP2PDesiredGroupIDJob::`scalar deleting destructor'();
CSetP2PDesiredGroupIDJob::`vector deleting destructor'();
CSetP2PGroupJoinParameters::CSetP2PGroupJoinParameters();
CSetP2PGroupJoinParameters::`scalar deleting destructor'();
CSetP2PGroupJoinParameters::`vector deleting destructor'();
CSetPMKIDList::OnOidJobCompletedEvent();
CSetPMKIDList::SetData();
CSetPMKIDList::`scalar deleting destructor'();
CSetPMKIDList::`vector deleting destructor'();
CSetPacketFilterJob::GetDeviceCommandData();
CSetPacketFilterJob::OnDeviceCommandCompletion();
CSetPacketFilterJob::`scalar deleting destructor'();
CSetPacketFilterJob::`vector deleting destructor'();
CSetPhyIdJob::SetData();
CSetPhyIdJob::`scalar deleting destructor'();
CSetPhyIdJob::`vector deleting destructor'();
CSetPmParametersJob::SetData();
CSetPmParametersJob::`scalar deleting destructor'();
CSetPmParametersJob::`vector deleting destructor'();
CSetPowerJob::CSetPowerJob();
CSetPowerJob::D3DefaultPortArmedStepCompleted();
CSetPowerJob::D3DefaultPortNoArmStepCompleted();
CSetPowerJob::GetNextNon0Port();
CSetPowerJob::InitializeFromOidRequest();
CSetPowerJob::OnJobCancelled();
CSetPowerJob::OnJobStarted();
CSetPowerJob::OnJobStepCompleted();
CSetPowerJob::OnOidJobCompletedEvent();
CSetPowerJob::OnOidJobStartedEvent();
CSetPowerJob::StartDot11ResetSubJob();
CSetPowerJob::StartReplumbNloCmd();
CSetPowerJob::StartSetPowerCommand();
CSetPowerJob::`scalar deleting destructor'();
CSetPowerJob::`vector deleting destructor'();
CSetPowerMgmtRequestJob::SetData();
CSetPowerMgmtRequestJob::`scalar deleting destructor'();
CSetPowerMgmtRequestJob::`vector deleting destructor'();
CSetPrivacyExemptionListJob::GetDeviceCommandData();
CSetPrivacyExemptionListJob::OnDeviceCommandCompletion();
CSetPrivacyExemptionListJob::`scalar deleting destructor'();
CSetPrivacyExemptionListJob::`vector deleting destructor'();
CSetRadioStateJob::CSetRadioStateJob();
CSetRadioStateJob::GetNextPortToReset();
CSetRadioStateJob::InitializeFromOidRequest();
CSetRadioStateJob::OnJobCancelled();
CSetRadioStateJob::OnJobStarted();
CSetRadioStateJob::OnJobStepCompleted();
CSetRadioStateJob::OnOidJobCompletedEvent();
CSetRadioStateJob::OnOidJobStartedEvent();
CSetRadioStateJob::StartDot11ResetSubJob();
CSetRadioStateJob::StartSetRadioStateCommand();
CSetRadioStateJob::`scalar deleting destructor'();
CSetRadioStateJob::`vector deleting destructor'();
CSetReceiveCoalescingJob::AddReceiveCoalesceToPropertyCache();
CSetReceiveCoalescingJob::CSetReceiveCoalescingJob();
CSetReceiveCoalescingJob::InitializeFromOidRequest();
CSetReceiveCoalescingJob::OnJobCancelled();
CSetReceiveCoalescingJob::OnJobStarted();
CSetReceiveCoalescingJob::OnJobStepCompleted();
CSetReceiveCoalescingJob::OnOidJobCompletedEvent();
CSetReceiveCoalescingJob::OnOidJobStartedEvent();
CSetReceiveCoalescingJob::StartSetReceiveCoalescingCommand();
CSetReceiveCoalescingJob::`scalar deleting destructor'();
CSetReceiveCoalescingJob::`vector deleting destructor'();
CSetRemovePmProtocolOffloadJob::InitializeFromOidRequest();
CSetRemovePmProtocolOffloadJob::OnJobCancelled();
CSetRemovePmProtocolOffloadJob::OnJobStarted();
CSetRemovePmProtocolOffloadJob::OnJobStepCompleted();
CSetRemovePmProtocolOffloadJob::OnOidJobCompletedEvent();
CSetRemovePmProtocolOffloadJob::OnOidJobStartedEvent();
CSetRemovePmProtocolOffloadJob::RemoveOffloadFromPropertyCache();
CSetRemovePmProtocolOffloadJob::StartSetRemovePmProtocolOffloadCommand();
CSetRemovePmProtocolOffloadJob::`scalar deleting destructor'();
CSetRemovePmProtocolOffloadJob::`vector deleting destructor'();
CSetRemoveWolPatternJob::InitializeFromOidRequest();
CSetRemoveWolPatternJob::OnJobCancelled();
CSetRemoveWolPatternJob::OnJobStarted();
CSetRemoveWolPatternJob::OnJobStepCompleted();
CSetRemoveWolPatternJob::OnOidJobCompletedEvent();
CSetRemoveWolPatternJob::OnOidJobStartedEvent();
CSetRemoveWolPatternJob::RemoveWolPatternFromPropertyCache();
CSetRemoveWolPatternJob::StartSetRemoveWolPatternCommand();
CSetRemoveWolPatternJob::`scalar deleting destructor'();
CSetRemoveWolPatternJob::`vector deleting destructor'();
CSetStaAssociationIEsJob::SetData();
CSetStaAssociationIEsJob::`scalar deleting destructor'();
CSetStaAssociationIEsJob::`vector deleting destructor'();
CSetWFDAdvertisementSettings::CSetWFDAdvertisementSettings();
CSetWFDAdvertisementSettings::GetDeviceCommandData();
CSetWFDAdvertisementSettings::OnDeviceCommandCompletion();
CSetWFDAdvertisementSettings::`scalar deleting destructor'();
CSetWFDAdvertisementSettings::`vector deleting destructor'();
CSetWFDListenState::CSetWFDListenState();
CSetWFDListenState::GetDeviceCommandData();
CSetWFDListenState::OnDeviceCommandCompletion();
CSetWFDListenState::`scalar deleting destructor'();
CSetWFDListenState::`vector deleting destructor'();
CSetWFDStartBackgroundDiscovery::BuildBackgroundDiscoveryWdiBuffer();
CSetWFDStartBackgroundDiscovery::GetDeviceCommandData();
CSetWFDStartBackgroundDiscovery::OnDeviceCommandCompletion();
CSetWFDStartBackgroundDiscovery::`scalar deleting destructor'();
CSetWFDStartBackgroundDiscovery::`vector deleting destructor'();
CSetWFDStopBackgroundDiscovery::GetDeviceCommandData();
CSetWFDStopBackgroundDiscovery::InitializeFromJob();
CSetWFDStopBackgroundDiscovery::OnDeviceCommandCompletion();
CSetWFDStopBackgroundDiscovery::`scalar deleting destructor'();
CSetWFDStopBackgroundDiscovery::`vector deleting destructor'();
CSetWpsEnabledJob::GetDeviceCommandData();
CSetWpsEnabledJob::OnDeviceCommandCompletion();
CSetWpsEnabledJob::`scalar deleting destructor'();
CSetWpsEnabledJob::`vector deleting destructor'();
CSimpleMethodDeviceCommandOidJob::CSimpleMethodDeviceCommandOidJob();
CSimpleMethodDeviceCommandOidJob::InitializeFromOidRequest();
CSimpleMethodDeviceCommandOidJob::OnJobCancelled();
CSimpleMethodDeviceCommandOidJob::OnJobStarted();
CSimpleMethodDeviceCommandOidJob::OnJobStepCompleted();
CSimpleMethodDeviceCommandOidJob::OnOidJobCompletedEvent();
CSimpleMethodDeviceCommandOidJob::`scalar deleting destructor'();
CSimpleMethodDeviceCommandOidJob::`vector deleting destructor'();
CSimpleMethodDeviceCommandOidJob::~CSimpleMethodDeviceCommandOidJob();
CSimplePropertyCacheBooleanQueryOidJob::CSimplePropertyCacheBooleanQueryOidJob();
CSimplePropertyCacheBooleanQueryOidJob::QueryData();
CSimplePropertyCacheBooleanQueryOidJob::`scalar deleting destructor'();
CSimplePropertyCacheBooleanQueryOidJob::`vector deleting destructor'();
CSimplePropertyCacheBooleanSetOidJob::SetData();
CSimplePropertyCacheBooleanSetOidJob::`scalar deleting destructor'();
CSimplePropertyCacheBooleanSetOidJob::`vector deleting destructor'();
CSimplePropertyCacheListQueryOidJob::QueryData();
CSimplePropertyCacheListQueryOidJob::`scalar deleting destructor'();
CSimplePropertyCacheListQueryOidJob::`vector deleting destructor'();
CSimplePropertyCacheListSetOidJob::CSimplePropertyCacheListSetOidJob();
CSimplePropertyCacheListSetOidJob::SetData();
CSimplePropertyCacheListSetOidJob::`scalar deleting destructor'();
CSimplePropertyCacheListSetOidJob::`vector deleting destructor'();
CSimplePropertyCacheUCharWithHeaderQueryOidJob::QueryData();
CSimplePropertyCacheUCharWithHeaderQueryOidJob::`scalar deleting destructor'();
CSimplePropertyCacheUCharWithHeaderQueryOidJob::`vector deleting destructor'();
CSimplePropertyCacheUCharWithHeaderSetOidJob::SetData();
CSimplePropertyCacheUCharWithHeaderSetOidJob::`scalar deleting destructor'();
CSimplePropertyCacheUCharWithHeaderSetOidJob::`vector deleting destructor'();
CSimplePropertyCacheULongQueryOidJob::QueryData();
CSimplePropertyCacheULongQueryOidJob::`scalar deleting destructor'();
CSimplePropertyCacheULongQueryOidJob::`vector deleting destructor'();
CSimplePropertyCacheULongSetOidJob::CSimplePropertyCacheULongSetOidJob();
CSimplePropertyCacheULongSetOidJob::SetData();
CSimplePropertyCacheULongSetOidJob::`scalar deleting destructor'();
CSimplePropertyCacheULongSetOidJob::`vector deleting destructor'();
CSimpleQueryDeviceCommandOidJob::CSimpleQueryDeviceCommandOidJob();
CSimpleQueryDeviceCommandOidJob::InitializeFromOidRequest();
CSimpleQueryDeviceCommandOidJob::OnJobCancelled();
CSimpleQueryDeviceCommandOidJob::OnJobStarted();
CSimpleQueryDeviceCommandOidJob::OnJobStepCompleted();
CSimpleQueryDeviceCommandOidJob::OnOidJobCompletedEvent();
CSimpleQueryDeviceCommandOidJob::QueryData();
CSimpleQueryDeviceCommandOidJob::`scalar deleting destructor'();
CSimpleQueryDeviceCommandOidJob::`vector deleting destructor'();
CSimpleQueryDeviceCommandOidJob::~CSimpleQueryDeviceCommandOidJob();
CSimpleQueryOidJob::CSimpleQueryOidJob();
CSimpleQueryOidJob::InitializeFromOidRequest();
CSimpleQueryOidJob::OnJobCancelled();
CSimpleQueryOidJob::OnJobStarted();
CSimpleQueryOidJob::OnJobStepCompleted();
CSimpleQueryOidJob::OnOidJobCompletedEvent();
CSimpleQueryOidJob::`scalar deleting destructor'();
CSimpleQueryOidJob::`vector deleting destructor'();
CSimpleSetDeviceCommandOidJob::CSimpleSetDeviceCommandOidJob();
CSimpleSetDeviceCommandOidJob::InitializeFromOidRequest();
CSimpleSetDeviceCommandOidJob::OnDeviceCommandCompletion();
CSimpleSetDeviceCommandOidJob::OnJobCancelled();
CSimpleSetDeviceCommandOidJob::OnJobStarted();
CSimpleSetDeviceCommandOidJob::OnJobStepCompleted();
CSimpleSetDeviceCommandOidJob::OnOidJobCompletedEvent();
CSimpleSetDeviceCommandOidJob::`scalar deleting destructor'();
CSimpleSetDeviceCommandOidJob::`vector deleting destructor'();
CSimpleSetDeviceCommandOidJob::~CSimpleSetDeviceCommandOidJob();
CSimpleSetOidJob::CSimpleSetOidJob();
CSimpleSetOidJob::InitializeFromOidRequest();
CSimpleSetOidJob::OnJobCancelled();
CSimpleSetOidJob::OnJobStarted();
CSimpleSetOidJob::OnJobStepCompleted();
CSimpleSetOidJob::OnOidJobCompletedEvent();
CSimpleSetOidJob::`scalar deleting destructor'();
CSimpleSetOidJob::`vector deleting destructor'();
CStartAPJob::CStartAPJob();
CStartAPJob::GetCipherForGO();
CStartAPJob::InitializeFromOidRequest();
CStartAPJob::OnNotifyJobCompletion();
CStartAPJob::OnOidJobCompletedEvent();
CStartAPJob::QueryNextCommandInfo();
CStartAPJob::`scalar deleting destructor'();
CStartAPJob::`vector deleting destructor'();
CSystem::Init();
CTcpEncapsulationOffloadParametersJob::GetDeviceCommandData();
CTcpEncapsulationOffloadParametersJob::`scalar deleting destructor'();
CTcpEncapsulationOffloadParametersJob::`vector deleting destructor'();
CTcpOffloadCurrentConfigJob::QueryData();
CTcpOffloadCurrentConfigJob::`scalar deleting destructor'();
CTcpOffloadCurrentConfigJob::`vector deleting destructor'();
CTcpOffloadHardwareCapsJob::QueryData();
CTcpOffloadHardwareCapsJob::`scalar deleting destructor'();
CTcpOffloadHardwareCapsJob::`vector deleting destructor'();
CTcpOffloadOffloadRscStatisticsJob::GetDeviceCommandId();
CTcpOffloadOffloadRscStatisticsJob::OnDeviceCommandCompletion();
CTcpOffloadOffloadRscStatisticsJob::QueryData();
CTcpOffloadOffloadRscStatisticsJob::`scalar deleting destructor'();
CTcpOffloadOffloadRscStatisticsJob::`vector deleting destructor'();
CTcpOffloadSetParametersJob::GetDeviceCommandData();
CTcpOffloadSetParametersJob::`scalar deleting destructor'();
CTcpOffloadSetParametersJob::`vector deleting destructor'();
CTcpOffloadVirtualPortConfigJob::QueryData();
CTcpOffloadVirtualPortConfigJob::`scalar deleting destructor'();
CTcpOffloadVirtualPortConfigJob::`vector deleting destructor'();
CTxEntryTable::AssignTxEntry();
CTxEntryTable::GetNextPortPeerEntry();
CTxEntryTable::GetNextTxEntry();
CTxEntryTable::GetTxEntry();
CTxEntryTable::Initialize();
CTxEntryTable::InitializeTxEntry();
CTxEntryTable::RemoveTxEntry();
CTxEntryTable::~CTxEntryTable();
CTxMgr::AddNBLToTxQueue();
CTxMgr::AddPortId();
CTxMgr::CheckForOldFrames();
CTxMgr::CompleteDivertedNBLs();
CTxMgr::CompleteIhvNbl();
CTxMgr::CompleteNBLs();
CTxMgr::CompleteNdisNbl();
CTxMgr::CompleteQueuedSuspectFrames();
CTxMgr::Deinitialize();
CTxMgr::DivertNBLs();
CTxMgr::Initialize();
CTxMgr::InitializeTxQueue();
CTxMgr::InitializeTxWfcFrame();
CTxMgr::LogOldFrameStateChangeTelemetryEvent();
CTxMgr::LogSuspectFramesInWDIQueue();
CTxMgr::OnTimerCallback();
CTxMgr::PausePeerEntry();
CTxMgr::PausePortEntry();
CTxMgr::PeerAbortConfirm();
CTxMgr::PeerDeleteBegin();
CTxMgr::PeerDeleteConfirm();
CTxMgr::ProcessNBL();
CTxMgr::ProcessPortQueuesWorkitemRoutine();
CTxMgr::ProcessSuspectFrameList();
CTxMgr::QueueOldFrameDetectionTimer();
CTxMgr::RemovePortId();
CTxMgr::RequeueNbl();
CTxMgr::RestartSend();
CTxMgr::RestartSendTxEntry();
CTxMgr::ResumePeerEntry();
CTxMgr::ResumePortEntry();
CTxMgr::SchedulePrequeueWorkitem();
CTxMgr::ServiceQueues();
CTxMgr::StopCancelSend();
CTxMgr::StopCancelSendTxEntry();
CTxMgr::TxAbortConfirm();
CTxMgr::TxAbortRequest();
CTxMgr::TxDequeueInd();
CTxMgr::TxInjectIhvFrame();
CTxMgr::TxQueryRaTidStateInd();
CTxMgr::TxQuerySuspectFrameCompleteStatus();
CTxMgr::TxReleaseFramesInd();
CTxMgr::TxSendCompleteInd();
CTxMgr::TxSendPauseInd();
CTxMgr::TxSendRestartInd();
CTxMgr::TxTargetDescDeinit();
CTxMgr::TxTargetDescInit();
CTxMgr::TxTransferCompleteInd();
CTxMgr::~CTxMgr();
CUnrecognizedOidHandlerJob::CUnrecognizedOidHandlerJob();
CUnrecognizedOidHandlerJob::InitializeFromOidRequest();
CUnrecognizedOidHandlerJob::OnJobCancelled();
CUnrecognizedOidHandlerJob::OnJobStarted();
CUnrecognizedOidHandlerJob::OnJobStepCompleted();
CUnrecognizedOidHandlerJob::OnOidJobCompletedEvent();
CUnrecognizedOidHandlerJob::`scalar deleting destructor'();
CUnrecognizedOidHandlerJob::`vector deleting destructor'();
CUnrecognizedOidHandlerJob::~CUnrecognizedOidHandlerJob();
CUpdateConnectionQualityJob::CUpdateConnectionQualityJob();
CUpdateConnectionQualityJob::InitializeFromJob();
CUpdateConnectionQualityJob::OnJobCancelled();
CUpdateConnectionQualityJob::OnJobStarted();
CUpdateConnectionQualityJob::OnJobStepCompleted();
CUpdateConnectionQualityJob::StartConnectionQualityUpdateOnPort();
CUpdateConnectionQualityJob::`scalar deleting destructor'();
CUpdateConnectionQualityJob::`vector deleting destructor'();
CUpdateConnectionQualityJob::~CUpdateConnectionQualityJob();
CWFCExclusiveAsyncGate::Leave();
CWabiToDot11Converter::CombineArrayOfByteArrays();
CWabiToDot11Converter::GetCipherKeyInfo();
CWabiToDot11Converter::MapAssocStatus();
CWabiToDot11Converter::MapAuthAlgorithm();
CWabiToDot11Converter::MapCipherAlgorithm();
CWabiToDot11Converter::MapCipherKeyParams();
CWabiToDot11Converter::MapTcpOffloadCapabilitiesToNdisOffload();
CWdfTimerContext::CancelTimer();
CWdfTimerContext::Initialize();
CWdfTimerContext::SetTimer();
CWdfTimerContext::`scalar deleting destructor'();
CWdfTimerContext::`vector deleting destructor'();
CWdfTimerContext::s_TimerCallback();
CWdfWorkItemContext::Initialize();
CWdfWorkItemContext::QueueWorkItem();
CWdfWorkItemContext::WaitForCompletion();
CWdfWorkItemContext::`scalar deleting destructor'();
CWdfWorkItemContext::`vector deleting destructor'();
CWdfWorkItemContext::s_WdfWorkItemCallback();
CWdiDriver::CWdiDriver();
CWdiDriver::DeregisterWdiMiniportDriver();
CWdiDriver::GetAdapterFromAdapterContext();
CWdiDriver::GetAdapterFromAdapterHandle();
CWdiDriver::GetMiniportDriverFromDriverHandle();
CWdiDriver::Initialize();
CWdiDriver::RegisterWdiMiniportDriver();
CWdiDriver::ReleaseAdapter();
CWdiDriver::`scalar deleting destructor'();
CWfdChangeListenStateJob::Initialize();
CWfdChangeListenStateJob::OnJobCancelled();
CWfdChangeListenStateJob::OnJobStarted();
CWfdChangeListenStateJob::OnJobStepCompleted();
CWfdChangeListenStateJob::`scalar deleting destructor'();
CWfdChangeListenStateJob::`vector deleting destructor'();
CancelDeviceCommand::Initialize();
CancelDeviceCommand::`scalar deleting destructor'();
CancelDeviceCommand::`vector deleting destructor'();
ChannelUsageCompare();
CheckAdvListForOldVersion();
CleanupParsedWdiIndicationIhvTaskRequestFromIhv();
ConvertP2PChannelToBandChannel();
CopyMgmtFrameFromNetwork();
DeviceCommand::DeviceCommand();
DeviceCommand::Initialize();
DeviceCommand::`scalar deleting destructor'();
DeviceCommand::`vector deleting destructor'();
DeviceCommand::get_CommandResult();
DeviceCommand::get_CommandToken();
DeviceCommand::get_CommandType();
DeviceCommand::get_InputBuffer();
DeviceCommand::get_IsInitialized();
DeviceCommand::get_PortId();
DeviceCommand::set_CommandResult();
DeviceCommand::set_CompletionCallback();
DeviceCommand::~DeviceCommand();
DeviceCommandScheduler::CancelTask();
DeviceCommandScheduler::CompleteSendCommand_PostHangCheck();
DeviceCommandScheduler::Initialize();
DeviceCommandScheduler::OnActiveCommandCompleteHandler();
DeviceCommandScheduler::OnCtlPlaneWdiOidCompleteCallback();
DeviceCommandScheduler::OnEventQueueCallback();
DeviceCommandScheduler::OnIssueNextCommandHandler();
DeviceCommandScheduler::OnOperationCompleted();
DeviceCommandScheduler::OnTimerCallback();
DeviceCommandScheduler::ProcessCtlPlaneSendCommandCompleteEvent();
DeviceCommandScheduler::StartCommand();
DeviceCommandScheduler::s_CtlPlaneWdiOidCompleteCallback();
DeviceCommandScheduler::~DeviceCommandScheduler();
DllInitialize();
DllUnload();
Dot11CopySSIDFromIEBlob();
Dot11GetDeviceAddressAndSSIDFromBSSEntry();
Dot11GetInfoElementFromIEBlob();
Dot11ParseRSNIE();
DriverEntry();
Event::Event();
Event::PopulateEvent();
EventQueue::Cleanup();
EventQueue::DeferNotifyOperationStarted();
EventQueue::DeferToWorkItem();
EventQueue::DeregisterTimeoutCallback();
EventQueue::HandleTimerCallback();
EventQueue::Initialize();
EventQueue::OnEventQueueCallback();
EventQueue::OnWorkItemCallback();
EventQueue::PopulateAndQueueDeferredCallback();
EventQueue::ProcessEventQueueUntilEmpty();
EventQueue::QueueEvent();
EventQueue::RegisterTimeoutCallbackWithLevelAndReuse();
EventQueue::StartTimer();
EventQueue::StopTimer();
EvtDriverUnload();
FactoryCreateJob();
FindAttributeInFragmentedP2PIEs();
FindAttributeInFragmentedP2PIEsWFDService();
FindFirstP2PIE();
FindFirstP2PIEWFDService();
FreeGenerated();
FxDriverEntry();
FxDriverEntryWorker();
FxStubBindClasses();
FxStubDriverUnload();
FxStubDriverUnloadCommon();
GenerateWdiAbortTaskToIhv();
GenerateWdiDeviceServiceCommandToIhv();
GenerateWdiGetPmProtocolOffloadToIhv();
GenerateWdiIhvRequest();
GenerateWdiSetAdapterConfigurationToIhv();
GenerateWdiSetAddCipherKeysToIhv();
GenerateWdiSetAddPmProtocolOffloadToIhv();
GenerateWdiSetAddWolPatternToIhv();
GenerateWdiSetAdvertisementInformationToIhv();
GenerateWdiSetAssociationParametersToIhv();
GenerateWdiSetClearReceiveCoalescingToIhv();
GenerateWdiSetConnectionQualityToIhv();
GenerateWdiSetDefaultKeyIdToIhv();
GenerateWdiSetDeleteCipherKeysToIhv();
GenerateWdiSetEncapsulationOffloadToIhv();
GenerateWdiSetEndDwellTime();
GenerateWdiSetFastBssTransitionParametersToIhv();
GenerateWdiSetMulticastListToIhv();
GenerateWdiSetNeighborReportEntriesToIhv();
GenerateWdiSetNetworkListOffloadToIhv();
GenerateWdiSetP2pListenStateToIhv();
GenerateWdiSetP2pStartBackgroundDiscoveryToIhv();
GenerateWdiSetP2pStopBackgroundDiscovery();
GenerateWdiSetP2pWpsEnabledToIhv();
GenerateWdiSetPowerStateToIhv();
GenerateWdiSetPrivacyExemptionListToIhv();
GenerateWdiSetReceiveCoalescingToIhv();
GenerateWdiSetReceivePacketFilterToIhv();
GenerateWdiSetRemovePmProtocolOffloadToIhv();
GenerateWdiSetRemoveWolPatternToIhv();
GenerateWdiSetTcpOffloadParametersToIhv();
GenerateWdiTaskChangeOperationModeToIhv();
GenerateWdiTaskConnectToIhv();
GenerateWdiTaskCreatePortToIhv();
GenerateWdiTaskDeletePortToIhv();
GenerateWdiTaskDisconnectToIhv();
GenerateWdiTaskDot11ResetToIhv();
GenerateWdiTaskIhvToIhv();
GenerateWdiTaskP2pDiscoverToIhv();
GenerateWdiTaskP2pSendRequestActionFrameToIhv();
GenerateWdiTaskP2pSendResponseActionFrameToIhv();
GenerateWdiTaskRoamToIhv();
GenerateWdiTaskScanToIhv();
GenerateWdiTaskSendApAssociationResponseToIhv();
GenerateWdiTaskSendRequestActionFrameToIhv();
GenerateWdiTaskSendResponseActionFrameToIhv();
GenerateWdiTaskSetRadioStateToIhv();
GenerateWdiTaskStartApToIhv();
GenerateWdiTaskStopAp();
GetAttributeBytes();
GetAttributeBytesWFDService();
GetFragmentedAttributeInfo();
GetFragmentedAttributeInfoWFDService();
GetIEInfo();
GetIEInfoWFDServiceShim();
GetSimpleAttribute();
IEventContext::CreateInstance();
ITimerContext::CreateInstance();
ITimerContext::`scalar deleting destructor'();
ITimerContext::`vector deleting destructor'();
IWorkItemContext::CreateInstance();
IWorkItemContext::`scalar deleting destructor'();
IWorkItemContext::`vector deleting destructor'();
KmWlanStateSeparation_GetMutableRegistryKey();
MPHookOnMiniportDirectOidRequestComplete();
MPHookOnMiniportIndicateStatus();
MPHookOnMiniportOidRequestComplete();
MPHookWdiDriverDeregister();
MPHookWdiDriverRegister();
MPLiveDumpCallback();
MPReenumerateFailedAdapter();
MPWrapperCancelDirectOidRequest();
MPWrapperCancelOidRequest();
MPWrapperCancelSendNetBufferLists();
MPWrapperDirectOidRequest();
MPWrapperHalt();
MPWrapperInitializeEx();
MPWrapperOidRequest();
MPWrapperPause();
MPWrapperPnPEventNotify();
MPWrapperReset();
MPWrapperRestart();
MPWrapperReturnNetBufferLists();
MPWrapperSendNetBufferLists();
MPWrapperSetOptions();
MPWrapperShutdown();
MapInversePriToTid();
MiniportCancelIdleNotificationHandler();
MiniportDeviceLowPowerNotifyHandler();
MiniportIdleNotificationHandler();
NMRProviderAttachClientThunk();
NMRProviderCleanupBindingContextThunk();
NMRProviderDetachClientThunk();
NotificationContext::Cleanup();
NotificationContext::Initialize();
NotificationContext::get_IndicationHeader();
NotificationManager::Cleanup();
NotificationManager::DeregisterNotificationHandler();
NotificationManager::Initialize();
NotificationManager::OnDeviceIndicationArrived();
NotificationManager::OnEventQueueCallback();
NotificationManager::OnNotifyRegisteredClientsEventHandler();
NotificationManager::RegisterForNotifications();
NotificationManager::s_OnDeviceIndicationArrived();
OnPowerSettingLowEpochNotificationWDI();
ParseDeviceType();
ParseGuid();
ParseInteger();
ParseMacAddressList();
ParseMsVendorExtension();
ParseString();
ParseVendorExtension();
ParseWdiDeviceServiceCommandFromIhv();
ParseWdiGetAdapterCapabilitiesFromIhv();
ParseWdiGetAutoPowerSaveFromIhv();
ParseWdiGetNextActionFrameDialogTokenFromIhv();
ParseWdiGetPmProtocolOffloadFromIhv();
ParseWdiGetReceiveCoalescingMatchCountFromIhv();
ParseWdiGetStatisticsFromIhv();
ParseWdiGetSupportedDeviceServicesFromIhv();
ParseWdiIhvRequest();
ParseWdiIndicationActionFrameReceivedFromIhv();
ParseWdiIndicationApAssociationRequestReceivedFromIhv();
ParseWdiIndicationAssociationParametersRequestFromIhv();
ParseWdiIndicationAssociationResultFromIhv();
ParseWdiIndicationBssEntryListFromIhv();
ParseWdiIndicationCanSustainApFromIhv();
ParseWdiIndicationCipherKeyUpdatedFromIhv();
ParseWdiIndicationCreatePortCompleteFromIhv();
ParseWdiIndicationDeviceServiceEventFromIhv();
ParseWdiIndicationDisassociationFromIhv();
ParseWdiIndicationFtAssocParamsNeededFromIhv();
ParseWdiIndicationIhvEventFromIhv();
ParseWdiIndicationIhvTaskRequestFromIhv();
ParseWdiIndicationLinkStateChangeFromIhv();
ParseWdiIndicationP2pActionFrameReceivedFromIhv();
ParseWdiIndicationP2pGroupOperatingChannelFromIhv();
ParseWdiIndicationP2pOperatingChannelAttributesFromIhv();
ParseWdiIndicationP2pSendRequestActionFrameCompleteFromIhv();
ParseWdiIndicationP2pSendResponseActionFrameCompleteFromIhv();
ParseWdiIndicationRadioStatusFromIhv();
ParseWdiIndicationRoamingNeededFromIhv();
ParseWdiIndicationSendApAssociationResponseCompleteFromIhv();
ParseWdiIndicationStopApFromIhv();
ParseWdiIndicationTaskOffloadCurrentConfigFromIhv();
ParseWdiIndicationTkipMicFailureFromIhv();
ParseWdiIndicationWakeReasonFromIhv();
ParseWdiSetNetworkListOffloadToIhv();
ParseWdiSetPowerStateFromIhv();
ParseWdiTcpRscStatisticsFromIhv();
ParseWfaVendorExtension();
PhyListCompare();
RSCLIBCoalesceNBL();
RSCLIBFlushContext();
RSCLIBUncoalesceNBLChain();
ReadNextFragmentedBytes();
ReadNextFragmentedBytesWFDService();
RscLibExCoalesceSegmentWithScu();
RscLibExFlushScu();
RscLibExIsNBLFitForCoalescing();
RxMgrWorkItemRoutine();
SerializedJobList::ActivateNextSerializedJob();
SerializedJobList::AddJobToQueueHandler();
SerializedJobList::CancelJob();
SerializedJobList::CompleteQueuedJob();
SerializedJobList::FlushQueuedJobs();
SerializedJobList::Initialize();
SerializedJobList::OnEventQueueCallback();
SerializedJobList::OnOperationCompleted();
SerializedJobList::PreemptActiveJobIfNecessary();
SerializedJobList::QueueSerializedJob();
Task::CancelTask();
Task::Initialize();
Task::IssueDeviceCommandToCommandScheduler();
Task::OnDeviceIndicationArrived();
Task::OnEventQueueCallback();
Task::OnOperationCompleted();
Task::OnStartTaskHandler();
Task::OnTaskCompletedHandler();
Task::OnTaskStartedHandler();
Task::OnTimerCallback();
Task::StartTask();
Task::Task();
Task::`scalar deleting destructor'();
Task::`vector deleting destructor'();
Task::get_OutputBuffer();
Task::get_TaskDeviceCommand();
Task::~Task();
TimerRegistrationContext::Initialize();
TimerRegistrationContext::OnTimerCallback();
TimerRegistrationContext::StopTimer();
TlgDefineProvider_annotation__Tlgg_hProviderProv();
TlgEnableCallback();
TlgWrite();
TlvConvertReplacedFieldFromParse<15,_WDI_INTERFACE_CAPABILITIES,_WDI_INTERFACE_CAPABILITIESV1_0>();
TlvConvertReplacedFieldFromParse<15,_WDI_INTERFACE_CAPABILITIES,_WDI_INTERFACE_CAPABILITIESV1_0_1>();
TlvConvertReplacedFieldFromParse<25,enum _WDI_PHY_TYPE,enum _WDI_PHY_TYPE>();
TlvConvertReplacedFieldFromParse<99,_WDI_RSN_OFFLOAD_KEYS_CONTAINER,_WDI_PM_PROTOCOL_OFFLOAD_80211RSN_REKEY_STRUCT>();
TlvReconstructRemovedFieldForGenerate<272,_WDI_P2P_ADVERTISED_SERVICES_CONTAINER,_WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER>();
TlvReconstructRemovedFieldForGenerate<301,_WDI_TASK_P2P_DISCOVER_PARAMETERS,_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20>();
TlvReconstructRemovedFieldForGenerate<302,_WDI_P2P_ADVERTISED_SERVICES_CONTAINER,_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20>();
TlvReconstructReplacedFieldForGenerate<15,_WDI_INTERFACE_CAPABILITIES,_WDI_INTERFACE_CAPABILITIESV1_0>();
TlvReconstructReplacedFieldForGenerate<15,_WDI_INTERFACE_CAPABILITIES,_WDI_INTERFACE_CAPABILITIESV1_0_1>();
TlvReconstructReplacedFieldForGenerate<23,_WDI_P2P_CAPABILITIES,_WDI_P2P_CAPABILITIES_V1_0_10>();
TlvReconstructReplacedFieldForGenerate<23,_WDI_P2P_CAPABILITIES,_WDI_P2P_CAPABILITIES_V1_0_1>();
TlvReconstructReplacedFieldForGenerate<25,enum _WDI_PHY_TYPE,enum _WDI_PHY_TYPE>();
TlvReconstructReplacedFieldForGenerate<99,_WDI_RSN_OFFLOAD_KEYS_CONTAINER,_WDI_PM_PROTOCOL_OFFLOAD_80211RSN_REKEY_STRUCT>();
TraceMessageTlvByteStream();
TxAbortStub();
TxMgrDeferSendCompletion();
TxMgrProcessPendingFrames();
TxPeerBacklogStub();
UeIdleNotificationCompleteHandler();
UeIdleNotificationConfirmHandler();
WDICloseAdapterCompleteHandler();
WDIOpenAdapterCompleteHandler();
WDI_TLV::CONTAINERS::WDI_ASSOCIATION_RESULT_CONTAINER_HELPER::GenerateHelper8();
WDI_TLV::CONTAINERS::WDI_ASSOCIATION_RESULT_CONTAINER_HELPER::ParseHelper8();
WDI_TLV::CONTAINERS::WDI_CONNECT_PARAMETERS_CONTAINER_HELPER::GenerateHelper1();
WDI_TLV::CONTAINERS::WDI_CONNECT_PARAMETERS_CONTAINER_HELPER::ParseHelper1();
WDI_TLV::CONTAINERS::WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_HELPER::GenerateHelper3();
WDI_TLV::CONTAINERS::WDI_GET_PM_PROTOCOL_OFFLOAD_RESULTS_HELPER::ParseHelper3();
WDI_TLV::CONTAINERS::WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS_HELPER::GenerateHelper4();
WDI_TLV::CONTAINERS::WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS_HELPER::ParseHelper4();
WDI_TLV::CONTAINERS::WDI_INTERFACE_ATTRIBUTES_CONTAINER_HELPER::GenerateHelper1();
WDI_TLV::CONTAINERS::WDI_INTERFACE_ATTRIBUTES_CONTAINER_HELPER::GenerateHelper2();
WDI_TLV::CONTAINERS::WDI_INTERFACE_ATTRIBUTES_CONTAINER_HELPER::ParseHelper1();
WDI_TLV::CONTAINERS::WDI_INTERFACE_ATTRIBUTES_CONTAINER_HELPER::ParseHelper2();
WDI_TLV::CONTAINERS::WDI_P2P_ADVERTISED_SERVICES_CONTAINER_HELPER::GenerateHelper1();
WDI_TLV::CONTAINERS::WDI_P2P_ADVERTISED_SERVICES_CONTAINER_HELPER::GenerateHelper2();
WDI_TLV::CONTAINERS::WDI_P2P_ADVERTISED_SERVICES_CONTAINER_HELPER::ParseHelper1();
WDI_TLV::CONTAINERS::WDI_P2P_ADVERTISED_SERVICES_CONTAINER_HELPER::ParseHelper2();
WDI_TLV::CONTAINERS::WDI_P2P_ATTRIBUTES_CONTAINER_HELPER::GenerateHelper1();
WDI_TLV::CONTAINERS::WDI_P2P_ATTRIBUTES_CONTAINER_HELPER::GenerateHelper2();
WDI_TLV::CONTAINERS::WDI_P2P_ATTRIBUTES_CONTAINER_HELPER::ParseHelper1();
WDI_TLV::CONTAINERS::WDI_P2P_ATTRIBUTES_CONTAINER_HELPER::ParseHelper2();
WDI_TLV::CONTAINERS::WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_HELPER::GenerateHelper4();
WDI_TLV::CONTAINERS::WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_HELPER::GenerateHelper6();
WDI_TLV::CONTAINERS::WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_HELPER::ParseHelper4();
WDI_TLV::CONTAINERS::WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER_HELPER::ParseHelper6();
WDI_TLV::CONTAINERS::WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_HELPER::GenerateHelper3();
WDI_TLV::CONTAINERS::WDI_SET_ADD_PM_PROTOCOL_OFFLOAD_PARAMETERS_PARAMETERS_HELPER::ParseHelper3();
WDI_TLV::CONTAINERS::WDI_TASK_P2P_DISCOVER_PARAMETERS_HELPER::GenerateHelper7();
WDI_TLV::CONTAINERS::WDI_TASK_P2P_DISCOVER_PARAMETERS_HELPER::ParseHelper7();
WDI_TLV::CONTAINERS::WDI_TASK_START_AP_PARAMETERS_HELPER::GenerateHelper2();
WDI_TLV::CONTAINERS::WDI_TASK_START_AP_PARAMETERS_HELPER::ParseHelper2();
WDI_TLV::DUMPER::DumpBoolField();
WDI_TLV::DUMPER::DumpByteArrayHelper();
WDI_TLV::DUMPER::DumpEndTlvType();
WDI_TLV::DUMPER::DumpKeyBlob();
WDI_TLV::DUMPER::DumpKeyBlobAsString();
WDI_TLV::DUMPER::DumpKeyBlobBody();
WDI_TLV::DUMPER::DumpKeyValue();
WDI_TLV::DUMPER::DumpKeyValueBool();
WDI_TLV::DUMPER::DumpMissingField();
WDI_TLV::DUMPER::DumpOtherField();
WDI_TLV::DUMPER::DumpPrivateKeyBlob();
WDI_TLV::DUMPER::DumpSimpleContainer();
WDI_TLV::DUMPER::DumpSimpleField<__int64>();
WDI_TLV::DUMPER::DumpSimpleField<int>();
WDI_TLV::DUMPER::DumpSimpleField<short>();
WDI_TLV::DUMPER::DumpSimpleField<signed char>();
WDI_TLV::DUMPER::DumpSimpleField<unsigned __int64>();
WDI_TLV::DUMPER::DumpSimpleField<unsigned char>();
WDI_TLV::DUMPER::DumpSimpleField<unsigned int>();
WDI_TLV::DUMPER::DumpSimpleField<unsigned short>();
WDI_TLV::DUMPER::DumpStringHelper();
WDI_TLV::DUMPER::DumpTlvLength();
WDI_TLV::DUMPER::DumpTlvType();
WDI_TLV::DUMPER::DumpTlvs();
WDI_TLV::DUMPER::DumpTypedKeyBlob();
WDI_TLV::DUMPER::DumpZeroNotAllowed();
WDI_TLV::DUMPER::SanitizeString();
WDI_TLV::GENERATOR::AllocateAndGenerateOldContainer();
WDI_TLV::GENERATOR::GenerateAggregate();
WDI_TLV::GENERATOR::GenerateEmptyMessage();
WDI_TLV::GENERATOR::GenerateMessage();
WDI_TLV::GENERATOR::GenerateMultiContainer();
WDI_TLV::GENERATOR::GenerateSingleContainer();
WDI_TLV::GENERATOR::IsOptionalAggregateFieldPresent();
WDI_TLV::PARSER::AllocateAndParseOldAggregateField();
WDI_TLV::PARSER::CleanupAllocations();
WDI_TLV::PARSER::FindTlv();
WDI_TLV::PARSER::ParseAggregateContainer();
WDI_TLV::PARSER::ParseAggregateField();
WDI_TLV::PARSER::ParseMessage();
WDI_TLV::PARSER::ParseSimpleContainer();
WFDCompareAdvertisedServiceInfo();
WFDConvertGroupIDFromOTAtoDot11();
WFDGetAdvertisedServiceInfo();
WFDGetAdvertisedServiceInfoSizeAndCount();
WFDGetCapability();
WFDGetDeviceInfo();
WFDGetGroupID();
WFDSvcANQPAdvanceBufferPointer();
WFDSvcANQPSetLengthFields();
WFDSvcANQPWriteBytes();
WFDSvcBuildANQPHeader();
WFDSvcEncodeANQPResponse();
WFDSvcFindStringMatch();
WFDSvcParseANQPRequest();
WPP_RECORDER_SF_();
WPP_RECORDER_SF_D();
WPP_RECORDER_SF_DD();
WPP_RECORDER_SF_DDD();
WPP_RECORDER_SF_DDDD();
WPP_RECORDER_SF_DDDDD();
WPP_RECORDER_SF_DDDDDD();
WPP_RECORDER_SF_DDDDDDD();
WPP_RECORDER_SF_DDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDDDDDDDDD();
WPP_RECORDER_SF_DDDDDDDDDs();
WPP_RECORDER_SF_DDDDDDDDs();
WPP_RECORDER_SF_DDDDDDDs();
WPP_RECORDER_SF_DDDDDDs();
WPP_RECORDER_SF_DDDDDs();
WPP_RECORDER_SF_DDDDI();
WPP_RECORDER_SF_DDDDs();
WPP_RECORDER_SF_DDD_MAC_();
WPP_RECORDER_SF_DDD_SSID__MAC_();
WPP_RECORDER_SF_DDDs();
WPP_RECORDER_SF_DD_MAC_();
WPP_RECORDER_SF_DD_MAC_d();
WPP_RECORDER_SF_DDd();
WPP_RECORDER_SF_DDqq();
WPP_RECORDER_SF_DDs();
WPP_RECORDER_SF_DHHHH();
WPP_RECORDER_SF_D_MAC_d();
WPP_RECORDER_SF_Dd();
WPP_RECORDER_SF_DdD();
WPP_RECORDER_SF_DdDdddd();
WPP_RECORDER_SF_Ddd();
WPP_RECORDER_SF_Dq();
WPP_RECORDER_SF_Dqq();
WPP_RECORDER_SF_IDDDLILDDDD();
WPP_RECORDER_SF_II();
WPP_RECORDER_SF_Iq();
WPP_RECORDER_SF_L();
WPP_RECORDER_SF_LD();
WPP_RECORDER_SF_LDD();
WPP_RECORDER_SF_LDDD();
WPP_RECORDER_SF_LDL();
WPP_RECORDER_SF_LDd();
WPP_RECORDER_SF_LL();
WPP_RECORDER_SF_LLD();
WPP_RECORDER_SF_LLdd();
WPP_RECORDER_SF_LPD();
WPP_RECORDER_SF_Ld();
WPP_RECORDER_SF_LdL();
WPP_RECORDER_SF_Ldd();
WPP_RECORDER_SF_Lddd();
WPP_RECORDER_SF_LiL();
WPP_RECORDER_SF_PD();
WPP_RECORDER_SF_PDD();
WPP_RECORDER_SF_PP();
WPP_RECORDER_SF_SD();
WPP_RECORDER_SF_Z();
WPP_RECORDER_SF__HEX_();
WPP_RECORDER_SF__MAC_();
WPP_RECORDER_SF__MAC_D();
WPP_RECORDER_SF__MAC_DD();
WPP_RECORDER_SF__MAC_DddDdddddd();
WPP_RECORDER_SF__MAC_LLL();
WPP_RECORDER_SF__MAC_Ll();
WPP_RECORDER_SF__MAC__HEX_();
WPP_RECORDER_SF__MAC__SSID_();
WPP_RECORDER_SF__MAC__SSID_ddd();
WPP_RECORDER_SF__MAC_d();
WPP_RECORDER_SF__MAC_dD();
WPP_RECORDER_SF__MAC_dDdq();
WPP_RECORDER_SF__MAC_dd();
WPP_RECORDER_SF__MAC_ddd();
WPP_RECORDER_SF__MAC_dddddddd();
WPP_RECORDER_SF__SSID_();
WPP_RECORDER_SF__SSID_D();
WPP_RECORDER_SF__SSID_Dd();
WPP_RECORDER_SF__SSID__MAC_();
WPP_RECORDER_SF__SSID_d();
WPP_RECORDER_SF__SSID_dd();
WPP_RECORDER_SF__guid_id();
WPP_RECORDER_SF_d();
WPP_RECORDER_SF_dD();
WPP_RECORDER_SF_dDD();
WPP_RECORDER_SF_dDDD();
WPP_RECORDER_SF_dDDDD();
WPP_RECORDER_SF_dDDds();
WPP_RECORDER_SF_dD_MAC_LD();
WPP_RECORDER_SF_dD_SSID__MAC_DD();
WPP_RECORDER_SF_dDd();
WPP_RECORDER_SF_dII();
WPP_RECORDER_SF_dL();
WPP_RECORDER_SF_dLL();
WPP_RECORDER_SF_d_MAC_();
WPP_RECORDER_SF_d_MAC_D();
WPP_RECORDER_SF_d_MAC_d();
WPP_RECORDER_SF_d_MAC_ddddd();
WPP_RECORDER_SF_dd();
WPP_RECORDER_SF_ddD();
WPP_RECORDER_SF_dd_MAC_();
WPP_RECORDER_SF_ddd();
WPP_RECORDER_SF_dddD();
WPP_RECORDER_SF_dddDDDd();
WPP_RECORDER_SF_dddd();
WPP_RECORDER_SF_ddddD();
WPP_RECORDER_SF_ddddd();
WPP_RECORDER_SF_ddddd_MAC_();
WPP_RECORDER_SF_dddddd();
WPP_RECORDER_SF_dddddddddddd();
WPP_RECORDER_SF_ddq();
WPP_RECORDER_SF_dds();
WPP_RECORDER_SF_dq();
WPP_RECORDER_SF_iD();
WPP_RECORDER_SF_l();
WPP_RECORDER_SF_q();
WPP_RECORDER_SF_qD();
WPP_RECORDER_SF_qDD();
WPP_RECORDER_SF_qDDD();
WPP_RECORDER_SF_qDDDD();
WPP_RECORDER_SF_qDDDDD();
WPP_RECORDER_SF_qDDDDDD();
WPP_RECORDER_SF_qDDDDDd();
WPP_RECORDER_SF_qDDDDd();
WPP_RECORDER_SF_qDDDDdD();
WPP_RECORDER_SF_qDDDDddd();
WPP_RECORDER_SF_qDDDd();
WPP_RECORDER_SF_qDDDdddd();
WPP_RECORDER_SF_qDD_MAC__MAC_();
WPP_RECORDER_SF_qDD_MAC_d();
WPP_RECORDER_SF_qDDd();
WPP_RECORDER_SF_qDDdd();
WPP_RECORDER_SF_qDDddd();
WPP_RECORDER_SF_qDDdddd();
WPP_RECORDER_SF_qDDddddd();
WPP_RECORDER_SF_qDDdddddD();
WPP_RECORDER_SF_qDDdddddd();
WPP_RECORDER_SF_qDDddddddddd();
WPP_RECORDER_SF_qDDqd();
WPP_RECORDER_SF_qDDs();
WPP_RECORDER_SF_qDII();
WPP_RECORDER_SF_qDL();
WPP_RECORDER_SF_qDLD();
WPP_RECORDER_SF_qDLL();
WPP_RECORDER_SF_qDLd();
WPP_RECORDER_SF_qD_MAC_();
WPP_RECORDER_SF_qD_MAC_D();
WPP_RECORDER_SF_qD_MAC__MAC_();
WPP_RECORDER_SF_qD_MAC_d();
WPP_RECORDER_SF_qD_MAC_dd();
WPP_RECORDER_SF_qD_MAC_ddddd();
WPP_RECORDER_SF_qD_SSID__MAC_ddd();
WPP_RECORDER_SF_qDd();
WPP_RECORDER_SF_qDdD();
WPP_RECORDER_SF_qDdDDDDDDD();
WPP_RECORDER_SF_qDdDDDiiDDDD();
WPP_RECORDER_SF_qDdDddd();
WPP_RECORDER_SF_qDdDdddd();
WPP_RECORDER_SF_qDdI();
WPP_RECORDER_SF_qDd_MAC_();
WPP_RECORDER_SF_qDd_MAC__MAC_();
WPP_RECORDER_SF_qDd_MAC_ddd();
WPP_RECORDER_SF_qDdd();
WPP_RECORDER_SF_qDddD();
WPP_RECORDER_SF_qDddDDD();
WPP_RECORDER_SF_qDddDDdd();
WPP_RECORDER_SF_qDddd();
WPP_RECORDER_SF_qDdddd();
WPP_RECORDER_SF_qDddddd();
WPP_RECORDER_SF_qDdddddd();
WPP_RECORDER_SF_qDdsd();
WPP_RECORDER_SF_qDl();
WPP_RECORDER_SF_qDq();
WPP_RECORDER_SF_qDqD();
WPP_RECORDER_SF_qDqDD();
WPP_RECORDER_SF_qDqL();
WPP_RECORDER_SF_qDqdd();
WPP_RECORDER_SF_qDqddd();
WPP_RECORDER_SF_qDqq();
WPP_RECORDER_SF_qDqqq();
WPP_RECORDER_SF_qDqqqD();
WPP_RECORDER_SF_qDs();
WPP_RECORDER_SF_qDsdd();
WPP_RECORDER_SF_qIDDDDDDDL();
WPP_RECORDER_SF_qddd();
WPP_RECORDER_SF_s();
WdiCleanup();
WdiInitialize();
Wdi_NdisMDeregisterWdiMiniportDriver();
Wdi_NdisMIndicateStatusEx();
Wdi_NdisMOidRequestComplete();
Wdi_NdisMRegisterWdiMiniportDriver();
WfdParseWpsIe();
WppAutoLogTrace();
WppClassicProviderCallback();
WppCleanupKm();
WppInitKm();
WppLoadTracingSupport();
WppTraceCallback();
_GSHandlerCheck();
_GSHandlerCheckCommon();
_WDI_ADDITIONAL_IES_CONTAINER::~_WDI_ADDITIONAL_IES_CONTAINER();
_WDI_AP_ATTRIBUTES_CONTAINER::~_WDI_AP_ATTRIBUTES_CONTAINER();
_WDI_AP_BAND_CHANNEL_LIST_CONTAINER::`vector deleting destructor'();
_WDI_ASSOCIATION_RESULT_CONTAINER::`vector deleting destructor'();
_WDI_ASSOCIATION_RESULT_CONTAINER::~_WDI_ASSOCIATION_RESULT_CONTAINER();
_WDI_BAND_CHANNEL_LIST_CONTAINER::`vector deleting destructor'();
_WDI_BAND_INFO_CONTAINER::`vector deleting destructor'();
_WDI_BAND_INFO_CONTAINER::~_WDI_BAND_INFO_CONTAINER();
_WDI_BSS_ENTRY_CONTAINER::`vector deleting destructor'();
_WDI_BSS_ENTRY_CONTAINER::~_WDI_BSS_ENTRY_CONTAINER();
_WDI_CIPHER_KEY_TKIP_INFO_CONTAINER::~_WDI_CIPHER_KEY_TKIP_INFO_CONTAINER();
_WDI_CONNECT_BSS_ENTRY_CONTAINER::_WDI_CONNECT_BSS_ENTRY_CONTAINER();
_WDI_CONNECT_BSS_ENTRY_CONTAINER::`vector deleting destructor'();
_WDI_CONNECT_BSS_ENTRY_CONTAINER::~_WDI_CONNECT_BSS_ENTRY_CONTAINER();
_WDI_CONNECT_PARAMETERS_CONTAINER::_WDI_CONNECT_PARAMETERS_CONTAINER();
_WDI_CONNECT_PARAMETERS_CONTAINER::~_WDI_CONNECT_PARAMETERS_CONTAINER();
_WDI_FT_REASSOC_PARAMETERS_CONTAINER::~_WDI_FT_REASSOC_PARAMETERS_CONTAINER();
_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS::_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS();
_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS::~_WDI_GET_ADAPTER_CAPABILITIES_PARAMETERS();
_WDI_GET_STATISTICS_PARAMETERS::~_WDI_GET_STATISTICS_PARAMETERS();
_WDI_HESSID_INFO_CONTAINER::~_WDI_HESSID_INFO_CONTAINER();
_WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER::~_WDI_INCOMING_ASSOCIATION_REQUEST_INFO_CONTAINER();
_WDI_INCOMING_P2P_ACTION_FRAME_INFO::~_WDI_INCOMING_P2P_ACTION_FRAME_INFO();
_WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS::~_WDI_INDICATION_ASSOCIATION_PARAMS_REQUEST_PARAMETERS();
_WDI_INDICATION_DISASSOCIATION_PARAMETERS::~_WDI_INDICATION_DISASSOCIATION_PARAMETERS();
_WDI_INDICATION_FT_ASSOC_PARAMS_NEEDED_PARAMETERS::~_WDI_INDICATION_FT_ASSOC_PARAMS_NEEDED_PARAMETERS();
_WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS::~_WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE_PARAMETERS();
_WDI_INTERFACE_ATTRIBUTES_CONTAINER::~_WDI_INTERFACE_ATTRIBUTES_CONTAINER();
_WDI_P2P_ADVERTISED_PREFIX_ENTRY_CONTAINER::`vector deleting destructor'();
_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER::`vector deleting destructor'();
_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER::~_WDI_P2P_ADVERTISED_SERVICE_ENTRY_CONTAINER();
_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20::~_WDI_P2P_ASP2_ADVERTISED_SERVICE_ENTRY_CONTAINERV1_0_20();
_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20::~_WDI_P2P_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINERV1_0_20();
_WDI_P2P_CHANNEL_ENTRIES_CONTAINER::`vector deleting destructor'();
_WDI_P2P_CHANNEL_LIST_CONTAINER::~_WDI_P2P_CHANNEL_LIST_CONTAINER();
_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER::`vector deleting destructor'();
_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER::~_WDI_P2P_DISCOVERED_SERVICE_ENTRY_CONTAINER();
_WDI_P2P_DISCOVERY_CHANNEL_SETTINGS_CONTAINER::`vector deleting destructor'();
_WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER::~_WDI_P2P_PROVISION_DISCOVERY_REQUEST_INFO_CONTAINER();
_WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER::~_WDI_P2P_PROVISION_DISCOVERY_RESPONSE_INFO_CONTAINER();
_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER::`vector deleting destructor'();
_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER::~_WDI_P2P_SERVICE_INFORMATION_DISCOVERY_ENTRY_CONTAINER();
_WDI_PACKET_PATTERN_CONTAINER::`vector deleting destructor'();
_WDI_PACKET_PATTERN_CONTAINER::~_WDI_PACKET_PATTERN_CONTAINER();
_WDI_PHY_INFO_CONTAINER::`vector deleting destructor'();
_WDI_PHY_INFO_CONTAINER::~_WDI_PHY_INFO_CONTAINER();
_WDI_SCAN_PARAMETERS::~_WDI_SCAN_PARAMETERS();
_WDI_SET_ADD_CIPHER_KEYS_CONTAINER::`vector deleting destructor'();
_WDI_SET_ADD_CIPHER_KEYS_CONTAINER::~_WDI_SET_ADD_CIPHER_KEYS_CONTAINER();
_WDI_SET_ADD_WOL_PATTERN_PARAMETERS::~_WDI_SET_ADD_WOL_PATTERN_PARAMETERS();
_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS::_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS();
_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS::~_WDI_SET_ADVERTISEMENT_INFORMATION_PARAMETERS();
_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER::`vector deleting destructor'();
_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER::~_WDI_SET_CONFIGURED_CIPHER_KEY_CONTAINER();
_WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND::~_WDI_SET_FAST_BSS_TRANSITION_PARAMETERS_COMMAND();
_WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS::~_WDI_SET_FIRMWARE_CONFIGURATION_PARAMETERS();
_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS::_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS();
_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS::~_WDI_SET_P2P_START_BACKGROUND_DISCOVERY_PARAMETERS();
_WDI_SSID_OFFLOAD_CONTAINER::`vector deleting destructor'();
_WDI_SSID_OFFLOAD_CONTAINER::~_WDI_SSID_OFFLOAD_CONTAINER();
_WDI_STATION_ATTRIBUTES_CONTAINER::~_WDI_STATION_ATTRIBUTES_CONTAINER();
_WDI_TASK_P2P_DISCOVER_PARAMETERS::~_WDI_TASK_P2P_DISCOVER_PARAMETERS();
_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS();
_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS::~_WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME_PARAMETERS();
_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS::_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS();
_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS::~_WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME_PARAMETERS();
_WDI_TASK_START_AP_PARAMETERS::~_WDI_TASK_START_AP_PARAMETERS();
_WFC_PROPERTY_ENTRY::CleanUp();
_WFC_PROPERTY_ENTRY::~_WFC_PROPERTY_ENTRY();
_WFC_VARIABLE_BUFFER_PROPERTY::CopyBuffer();
_chkstk();
_report_gsfailure();
_security_check_cookie();
_security_init_cookie();
guard_check_icall_nop();
guard_dispatch_icall_nop();
memcmp();
memcpy();
memmove();
memset();
operator delete();
operator new();
purecall();
tcpxsum();
tcpxsum_end();
tcpxsum_start();
