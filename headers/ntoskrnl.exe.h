struct BATTERY_REPORTING_SCALE;
struct CMP_OFFSET_ARRAY;
struct DEBUG_DEVICE_ADDRESS;
struct DEBUG_MEMORY_REQUIREMENTS;
struct DOCK_INTERFACE;
struct HAL_PRIVATE_DISPATCH;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct PEPHANDLE__;
struct POHANDLE__;
struct POWER_ACTION_POLICY;
struct PO_MEMORY_IMAGE;
struct PROCESSOR_IDLESTATE_INFO;
struct PROCESSOR_IDLESTATE_POLICY;
struct PROCESSOR_PERFSTATE_POLICY;
struct SYSTEM_POWER_CAPABILITIES;
struct SYSTEM_POWER_LEVEL;
struct VACB_LEVEL_ALLOCATION_LIST;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACL;
struct _ACPI_METHOD_ARGUMENT_V1;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
struct _ACTIVATION_CONTEXT_STACK32;
struct _ACTIVATION_CONTEXT_STACK64;
struct _ADAPTER_OBJECT;
struct _AGGREGATED_PAYLOAD_FILTER;
struct _ALPC_COMMUNICATION_INFO;
struct _ALPC_COMPLETION_LIST;
struct _ALPC_COMPLETION_LIST_HEADER;
struct _ALPC_COMPLETION_LIST_STATE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
struct _ALPC_DISPATCH_CONTEXT;
struct _ALPC_HANDLE_ENTRY;
struct _ALPC_HANDLE_TABLE;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _ALPC_PORT;
struct _ALPC_PORT_ATTRIBUTES;
struct _ALPC_PROCESS_CONTEXT;
struct _ALPC_WORK_ON_BEHALF_TICKET;
struct _AMD64_DBGKD_CONTROL_SET;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
struct _ARBITER_ALLOCATION_STATE;
struct _ARBITER_ALTERNATIVE;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_CONFLICT_INFO;
struct _ARBITER_INSTANCE;
struct _ARBITER_INTERFACE;
struct _ARBITER_LIST_ENTRY;
struct _ARBITER_ORDERING;
struct _ARBITER_ORDERING_LIST;
struct _ARBITER_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARC_DISK_INFORMATION;
struct _ARM64_DBGKD_CONTROL_SET;
struct _ARMCE_DBGKD_CONTROL_SET;
struct _ARM_DBGKD_CONTROL_SET;
struct _ARM_LOADER_BLOCK;
struct _ASSEMBLY_STORAGE_MAP;
struct _ASYNC_READ_THREAD_STATS;
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
struct _AUX_ACCESS_DATA;
struct _BITMAP_RANGE;
struct _BLOB;
struct _BLOB_COUNTERS;
struct _BLOB_TYPE;
struct _BOOT_ENTROPY_LDR_RESULT;
struct _BOOT_ENTROPY_SOURCE_LDR_RESULT;
struct _BUS_EXTENSION_LIST;
struct _BUS_HANDLER;
struct _CACHED_CHILD_LIST;
struct _CACHED_KSTACK_LIST;
struct _CACHE_DESCRIPTOR;
struct _CACHE_MANAGER_CALLBACKS;
struct _CACHE_UNINITIALIZE_EVENT;
struct _CALLBACK_OBJECT;
struct _CALL_HASH_ENTRY;
struct _CALL_PERFORMANCE_DATA;
struct _CC_ASYNC_READ_CONTEXT;
struct _CC_EXTERNAL_CACHE_INFO;
struct _CC_PARTITION;
struct _CELL_DATA;
struct _CHILD_LIST;
struct _CI_NGEN_PATHS;
struct _CLIENT_ID;
struct _CLIENT_ID32;
struct _CLIENT_ID64;
struct _CMHIVE;
struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT;
struct _CMP_VOLUME_CONTEXT;
struct _CMP_VOLUME_MANAGER;
struct _CMSI_PROCESS_TUPLE;
struct _CMSI_RW_LOCK;
struct _CM_BIG_DATA;
struct _CM_CACHED_VALUE_INDEX;
struct _CM_COMPONENT_HASH;
struct _CM_DIRTY_VECTOR_LOG;
struct _CM_DIRTY_VECTOR_LOG_ENTRY;
struct _CM_FAST_LEAF_HINT;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_INDEX;
struct _CM_INDEX_HINT_BLOCK;
struct _CM_INTENT_LOCK;
struct _CM_KCB_LAYER_INFO;
struct _CM_KCB_UOW;
struct _CM_KEY_BODY;
struct _CM_KEY_CONTROL_BLOCK;
struct _CM_KEY_HASH;
struct _CM_KEY_HASH_TABLE_ENTRY;
struct _CM_KEY_INDEX;
struct _CM_KEY_NODE;
struct _CM_KEY_REFERENCE;
struct _CM_KEY_SECURITY;
struct _CM_KEY_SECURITY_CACHE;
struct _CM_KEY_SECURITY_CACHE_ENTRY;
struct _CM_KEY_VALUE;
struct _CM_NAME_CONTROL_BLOCK;
struct _CM_NAME_HASH;
struct _CM_NOTIFY_BLOCK;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_PATH_HASH;
struct _CM_RESOURCE_LIST;
struct _CM_RM;
struct _CM_TRANS;
struct _CM_UOW_KEY_STATE_MODIFICATION;
struct _CM_UOW_SET_SD_DATA;
struct _CM_UOW_SET_VALUE_KEY_DATA;
struct _CM_UOW_SET_VALUE_LIST_DATA;
struct _CM_WORKITEM;
struct _COMPRESSED_DATA_INFO;
struct _CONFIGURATION_COMPONENT;
struct _CONFIGURATION_COMPONENT_DATA;
struct _CONTEXT;
struct _CONTROL_AREA;
struct _COUNTER_READING;
struct _CRITICAL_PROCESS_EXCEPTION_DATA;
struct _CURDIR;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
struct _DBGKD_ANY_CONTROL_SET;
struct _DBGKD_BREAKPOINTEX;
struct _DBGKD_CONTEXT_EX;
struct _DBGKD_CONTINUE;
struct _DBGKD_CONTINUE2;
struct _DBGKD_FILL_MEMORY;
struct _DBGKD_GET_CONTEXT;
struct _DBGKD_GET_INTERNAL_BREAKPOINT32;
struct _DBGKD_GET_INTERNAL_BREAKPOINT64;
struct _DBGKD_GET_SET_BUS_DATA;
struct _DBGKD_GET_VERSION32;
struct _DBGKD_GET_VERSION64;
struct _DBGKD_LOAD_SYMBOLS32;
struct _DBGKD_LOAD_SYMBOLS64;
struct _DBGKD_MANIPULATE_STATE32;
struct _DBGKD_MANIPULATE_STATE64;
struct _DBGKD_QUERY_MEMORY;
struct _DBGKD_QUERY_SPECIAL_CALLS;
struct _DBGKD_READ_MEMORY32;
struct _DBGKD_READ_MEMORY64;
struct _DBGKD_READ_WRITE_IO32;
struct _DBGKD_READ_WRITE_IO64;
struct _DBGKD_READ_WRITE_IO_EXTENDED32;
struct _DBGKD_READ_WRITE_IO_EXTENDED64;
struct _DBGKD_READ_WRITE_MSR;
struct _DBGKD_RESTORE_BREAKPOINT;
struct _DBGKD_SEARCH_MEMORY;
struct _DBGKD_SET_CONTEXT;
struct _DBGKD_SET_INTERNAL_BREAKPOINT32;
struct _DBGKD_SET_INTERNAL_BREAKPOINT64;
struct _DBGKD_SET_SPECIAL_CALL32;
struct _DBGKD_SET_SPECIAL_CALL64;
struct _DBGKD_SWITCH_PARTITION;
struct _DBGKD_WRITE_BREAKPOINT32;
struct _DBGKD_WRITE_BREAKPOINT64;
struct _DBGKD_WRITE_CUSTOM_BREAKPOINT;
struct _DBGKD_WRITE_MEMORY32;
struct _DBGKD_WRITE_MEMORY64;
struct _DBGKM_EXCEPTION32;
struct _DBGKM_EXCEPTION64;
struct _DBGKP_ERROR_PORT;
struct _DBGK_SILOSTATE;
struct _DEBUG_DEVICE_DESCRIPTOR;
struct _DEBUG_TRANSPORT_DATA;
struct _DEFERRED_WRITE;
struct _DELAY_ACK_FO;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_DATA_SET_RANGE;
struct _DEVICE_DESCRIPTION;
struct _DEVICE_DSM_DEFINITION;
struct _DEVICE_FAULT_CONFIGURATION;
struct _DEVICE_FLAGS;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
struct _DEVICE_MAP;
struct _DEVICE_NODE;
struct _DEVICE_NODE_IOMMU_EXTENSION;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_LIST;
struct _DEVICE_OBJECT_LIST_ENTRY;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVICE_RELATIONS;
struct _DEVOBJ_EXTENSION;
struct _DIAGNOSTIC_BUFFER;
struct _DIAGNOSTIC_CONTEXT;
struct _DIRTY_PAGE_STATISTICS;
struct _DIRTY_PAGE_THRESHOLDS;
struct _DISALLOWED_GUIDS;
struct _DISPATCHER_HEADER;
struct _DMA_IOMMU_INTERFACE;
struct _DOMAIN_CONFIGURATION;
struct _DOMAIN_CONFIGURATION_ARM64;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _DUAL;
struct _DUMMY_FILE_OBJECT;
struct _DUMP_INITIALIZATION_CONTEXT;
struct _DUMP_STACK_CONTEXT;
struct _DYNAMIC_FUNCTION_TABLE;
struct _ECP_LIST;
struct _EFI_FIRMWARE_INFORMATION;
struct _EJOB;
struct _ENODE;
struct _EPARTITION;
struct _EPROCESS;
struct _EPROCESS_QUOTA_BLOCK;
struct _EPROCESS_VALUES;
struct _ERESOURCE;
struct _ESERVERSILO_GLOBALS;
struct _ETHREAD;
struct _ETIMER;
struct _ETWP_NOTIFICATION_HEADER;
struct _ETW_APC_ENTRY;
struct _ETW_BUFFER_CONTEXT;
struct _ETW_BUFFER_QUEUE;
struct _ETW_COUNTERS;
struct _ETW_DEBUGID_TRACKING_ENTRY;
struct _ETW_DECODE_CONTROL_ENTRY;
struct _ETW_EVENT_CALLBACK_CONTEXT;
struct _ETW_FILTER_EVENT_NAME_DATA;
struct _ETW_FILTER_HEADER;
struct _ETW_FILTER_PID;
struct _ETW_FILTER_STRING_TOKEN;
struct _ETW_FILTER_STRING_TOKEN_ELEMENT;
struct _ETW_GUID_ENTRY;
struct _ETW_HASH_BUCKET;
struct _ETW_HW_TRACE_EXT_INTERFACE;
struct _ETW_IPT_SUPPORT;
struct _ETW_LAST_ENABLE_INFO;
struct _ETW_LBR_SUPPORT;
struct _ETW_LOGGER_HANDLE;
struct _ETW_PAYLOAD_FILTER;
struct _ETW_PERFECT_HASH_FUNCTION;
struct _ETW_PERF_COUNTERS;
struct _ETW_PMC_SUPPORT;
struct _ETW_PRIV_HANDLE_DEMUX_TABLE;
struct _ETW_PROVIDER_TRAITS;
struct _ETW_QUEUE_ENTRY;
struct _ETW_REALTIME_CONSUMER;
struct _ETW_REF_CLOCK;
struct _ETW_REG_ENTRY;
struct _ETW_REPLY_QUEUE;
struct _ETW_SESSION_PERF_COUNTERS;
struct _ETW_SILODRIVERSTATE;
struct _ETW_SILO_TRACING_BLOCK;
struct _ETW_SOFT_RESTART_CONTEXT;
struct _ETW_STACK_CACHE;
struct _ETW_STACK_TRACE_BLOCK;
struct _ETW_SYSTEMTIME;
struct _ETW_SYSTEM_LOGGER;
struct _ETW_SYSTEM_LOGGER_SETTINGS;
struct _ETW_WMITRACE_WORK;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EVENT_FILTER_HEADER;
struct _EVENT_FILTER_LEVEL_KW;
struct _EVENT_HEADER;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
struct _EVENT_PAYLOAD_PREDICATE;
struct _EVENT_RECORD;
struct _EWOW64PROCESS;
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_RECORD32;
struct _EXCEPTION_RECORD64;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EXHANDLE;
struct _EXT_DELETE_PARAMETERS;
struct _EXT_IOMMU_DEVICE_ID;
struct _EXT_IOMMU_DEVICE_ID_ACPI;
struct _EXT_IOMMU_DEVICE_ID_GIC;
struct _EXT_IOMMU_DEVICE_ID_PCI;
struct _EXT_IOMMU_DEVICE_ID_TEST;
struct _EXT_SET_PARAMETERS_V0;
struct _EX_FAST_REF;
struct _EX_PARTITION;
struct _EX_PUSH_LOCK;
struct _EX_PUSH_LOCK_AUTO_EXPAND;
struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE;
struct _EX_RUNDOWN_REF;
struct _EX_RUNDOWN_REF_CACHE_AWARE;
struct _EX_TIMER;
struct _EX_WNF_SUBSCRIPTION;
struct _EX_WORK_QUEUE;
struct _EX_WORK_QUEUE_MANAGER;
struct _FAKE_HEAP_ENTRY;
struct _FAST_ERESOURCE;
struct _FAST_ERESOURCE_INTERNAL;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FAST_OWNER_ENTRY;
struct _FAST_OWNER_ENTRY_INTERNAL;
struct _FAULT_INFORMATION;
struct _FAULT_INFORMATION_ARM64;
struct _FAULT_INFORMATION_ARM64_FLAGS;
struct _FILESYSTEM_DISK_COUNTERS;
struct _FILE_BASIC_INFORMATION;
struct _FILE_GET_QUOTA_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_STANDARD_INFORMATION;
struct _FIRMWARE_INFORMATION_LOADER_BLOCK;
struct _FLS_CALLBACK_INFO;
struct _FREE_DISPLAY;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _FS_FILTER_CALLBACKS;
struct _FS_FILTER_CALLBACK_DATA;
struct _FS_FILTER_SECTION_SYNC_OUTPUT;
struct _GDI_TEB_BATCH;
struct _GDI_TEB_BATCH32;
struct _GDI_TEB_BATCH64;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERIC_MAPPING;
struct _GROUP_AFFINITY;
struct _GUID;
struct _HAL_CHANNEL_MEMORY_RANGES;
struct _HAL_CLOCK_TIMER_CONFIGURATION;
struct _HAL_DP_REPLACE_PARAMETERS;
struct _HAL_HV_DMA_DOMAIN_INFO;
struct _HAL_HV_SVM_DEVICE_CAPABILITIES;
struct _HAL_HV_SVM_SYSTEM_CAPABILITIES;
struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION;
struct _HAL_IOMMU_DISPATCH;
struct _HAL_LBR_ENTRY;
struct _HAL_LOG_REGISTER_CONTEXT;
struct _HAL_NODE_RANGE;
struct _HAL_PMC_COUNTERS;
struct _HAL_UNMASKED_INTERRUPT_INFORMATION;
struct _HANDLE_REVOCATION_INFO;
struct _HANDLE_TABLE;
struct _HANDLE_TABLE_ENTRY_INFO;
struct _HANDLE_TABLE_FREE_LIST;
struct _HANDLE_TRACE_DB_ENTRY;
struct _HANDLE_TRACE_DEBUG_INFO;
struct _HARDWARE_PTE;
struct _HBASE_BLOCK;
struct _HBIN;
struct _HCELL;
struct _HEADLESS_LOADER_BLOCK;
struct _HEAP;
struct _HEAP_COUNTERS;
struct _HEAP_ENTRY;
struct _HEAP_ENTRY_EXTRA;
struct _HEAP_EXTENDED_ENTRY;
struct _HEAP_FAILURE_INFORMATION;
struct _HEAP_FREE_ENTRY;
struct _HEAP_FREE_ENTRY_EXTRA;
struct _HEAP_GLOBAL_APPCOMPAT_FLAGS;
struct _HEAP_LIST_LOOKUP;
struct _HEAP_LOCK;
struct _HEAP_PSEUDO_TAG_ENTRY;
struct _HEAP_SEGMENT;
struct _HEAP_STOP_ON_TAG;
struct _HEAP_STOP_ON_VALUES;
struct _HEAP_SUBALLOCATOR_CALLBACKS;
struct _HEAP_TAG_ENTRY;
struct _HEAP_TUNING_PARAMETERS;
struct _HEAP_UCR_DESCRIPTOR;
struct _HEAP_UNPACKED_ENTRY;
struct _HEAP_VAMGR_ALLOCATOR;
struct _HEAP_VAMGR_CTX;
struct _HEAP_VAMGR_RANGE;
struct _HEAP_VAMGR_VASPACE;
struct _HEAP_VIRTUAL_ALLOC_ENTRY;
struct _HHIVE;
struct _HIVE_LIST_ENTRY;
struct _HIVE_LOAD_FAILURE;
struct _HIVE_WAIT_PACKET;
struct _HIVE_WRITE_WAIT_QUEUE;
struct _HMAP_DIRECTORY;
struct _HMAP_ENTRY;
struct _HMAP_TABLE;
struct _HVP_VIEW_MAP;
struct _HV_GET_BIN_CONTEXT;
struct _HV_GET_CELL_CONTEXT;
struct _HV_X64_HYPERVISOR_FEATURES;
struct _I386_LOADER_BLOCK;
struct _IA64_DBGKD_CONTROL_SET;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_OPTIONAL_HEADER64;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_SECTION_HEADER;
struct _IMAGE_SECURITY_CONTEXT;
struct _INITIAL_PRIVILEGE_SET;
struct _INPUT_MAPPING_ELEMENT;
struct _INTERFACE;
struct _INTERRUPT_CONNECTION_DATA;
struct _INTERRUPT_HT_INTR_INFO;
struct _INTERRUPT_REMAPPING_INFO;
struct _INTERRUPT_VECTOR_DATA;
struct _INVERTED_FUNCTION_TABLE;
struct _INVERTED_FUNCTION_TABLE_ENTRY;
struct _IOMMU_DMA_DOMAIN;
struct _IOP_FILE_OBJECT_EXTENSION;
struct _IOP_IRP_EXTENSION;
struct _IOP_IRP_EXTENSION_STATUS;
struct _IOP_IRP_STACK_PROFILER;
struct _IOV_FORCED_PENDING_TRACE;
struct _IOV_IRP_TRACE;
struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;
struct _IO_ADAPTER_CRYPTO_PARAMETERS;
struct _IO_CLIENT_EXTENSION;
struct _IO_COMPLETION_CONTEXT;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
struct _IO_MINI_COMPLETION_PACKET_USER;
struct _IO_PRIORITY_INFO;
struct _IO_REMOVE_LOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_TIMER;
struct _IO_WORKITEM;
struct _IRP;
struct _ISRDPCSTATS;
struct _ISR_THUNK;
struct _JOBOBJECT_WAKE_FILTER;
struct _JOB_ACCESS_STATE;
struct _JOB_CPU_RATE_CONTROL;
struct _JOB_NET_RATE_CONTROL;
struct _JOB_NOTIFICATION_INFORMATION;
struct _JOB_RATE_CONTROL_HEADER;
struct _KAFFINITY_EX;
struct _KALPC_HANDLE_DATA;
struct _KALPC_MESSAGE;
struct _KALPC_MESSAGE_ATTRIBUTES;
struct _KALPC_REGION;
struct _KALPC_RESERVE;
struct _KALPC_SECTION;
struct _KALPC_SECURITY_DATA;
struct _KALPC_VIEW;
struct _KALPC_WORK_ON_BEHALF_DATA;
struct _KAPC;
struct _KAPC_STATE;
struct _KDESCRIPTOR;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KDPC_DATA;
struct _KDPC_LIST;
struct _KENLISTMENT;
struct _KENLISTMENT_HISTORY;
struct _KENTROPY_TIMING_STATE;
struct _KERNEL_STACK_SEGMENT;
struct _KEVENT;
struct _KEXCEPTION_FRAME;
struct _KFLOATING_SAVE;
struct _KGATE;
struct _KHETERO_PROCESSOR_SET;
struct _KINTERRUPT;
struct _KIST_BASE_FRAME;
struct _KIST_LINK_FRAME;
struct _KLDR_DATA_TABLE_ENTRY;
struct _KLOCK_ENTRY;
struct _KLOCK_ENTRY_LOCK_STATE;
struct _KLOCK_QUEUE_HANDLE;
struct _KMUTANT;
struct _KNODE;
struct _KPCR;
struct _KPRCB;
struct _KPRIQUEUE;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KQUEUE;
struct _KREQUEST_PACKET;
struct _KRESOURCEMANAGER;
struct _KRESOURCEMANAGER_COMPLETION_BINDING;
struct _KSCB;
struct _KSCHEDULING_GROUP;
struct _KSCHEDULING_GROUP_POLICY;
struct _KSECONDARY_IDT_ENTRY;
struct _KSECURE_FAULT_INFORMATION;
struct _KSEMAPHORE;
struct _KSHARED_READY_QUEUE;
struct _KSPECIAL_REGISTERS;
struct _KSPIN_LOCK_QUEUE;
struct _KSTACK_CONTROL;
struct _KSYSTEM_TIME;
struct _KTB_FLUSH_VA;
struct _KTHREAD;
struct _KTHREAD_COUNTERS;
struct _KTIMER;
struct _KTIMER2;
struct _KTIMER2_COLLECTION;
struct _KTIMER_EXPIRATION_TRACE;
struct _KTIMER_TABLE;
struct _KTIMER_TABLE_ENTRY;
struct _KTM;
struct _KTMNOTIFICATION_PACKET;
struct _KTMOBJECT_NAMESPACE;
struct _KTMOBJECT_NAMESPACE_LINK;
struct _KTRANSACTION;
struct _KTRANSACTION_HISTORY;
struct _KTRAP_FRAME;
struct _KTSS64;
struct _KUMS_CONTEXT_HEADER;
struct _KUSER_SHARED_DATA;
struct _KWAIT_BLOCK;
struct _KWAIT_CHAIN;
struct _KWAIT_CHAIN_ENTRY;
struct _LAZY_WRITER;
struct _LDRP_CSLIST;
struct _LDRP_LOAD_CONTEXT;
struct _LDR_DATA_TABLE_ENTRY;
struct _LDR_DDAG_NODE;
struct _LDR_SERVICE_TAG_RECORD;
struct _LEAP_SECOND_DATA;
struct _LEARNING_MODE_DATA;
struct _LIST_ENTRY;
struct _LOADER_BUGCHECK_PARAMETERS;
struct _LOADER_HIVE_RECOVERY_INFO;
struct _LOADER_PARAMETER_BLOCK;
struct _LOADER_PARAMETER_CI_EXTENSION;
struct _LOADER_PARAMETER_EXTENSION;
struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION;
struct _LOADER_PERFORMANCE_DATA;
struct _LOADER_RESET_REASON;
struct _LOCK_HEADER;
struct _LOCK_TRACKER;
struct _LOGGED_STREAM_CALLBACK_V1;
struct _LOGGED_STREAM_CALLBACK_V2;
struct _LOG_HANDLE_CONTEXT;
struct _LOOKASIDE_LIST_EX;
struct _LPCP_MESSAGE;
struct _LPCP_NONPAGED_PORT_QUEUE;
struct _LPCP_PORT_OBJECT;
struct _LPCP_PORT_QUEUE;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _M128A;
struct _MACHINE_CHECK_CONTEXT;
struct _MACHINE_FRAME;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MAPPED_FILE_SEGMENT;
struct _MAP_REGISTER_ENTRY;
struct _MBCB;
struct _MCGEN_TRACE_CONTEXT;
struct _MCUPDATE_INFO;
struct _MDL;
struct _MEMORY_ALLOCATION_DESCRIPTOR;
struct _MIPFNBLINK;
struct _MI_ACCESS_LOG_STATE;
struct _MI_ACCESS_VIOLATION_RANGE;
struct _MI_ACTIVE_PFN;
struct _MI_ALIGNED_SLIST;
struct _MI_AVAILABLE_PAGE_WAIT_STATES;
struct _MI_BAD_MEMORY_EVENT_ENTRY;
struct _MI_CACHED_PTE;
struct _MI_CACHED_PTES;
struct _MI_CLONE_BLOCK_FLAGS;
struct _MI_COMBINE_PAGE_LISTHEAD;
struct _MI_COMBINE_STATE;
struct _MI_COMBINE_WORKITEM;
struct _MI_COMMON_PAGE_STATE;
struct _MI_CONTROL_AREA_WAIT_BLOCK;
struct _MI_CROSS_PARTITION_CHARGES;
struct _MI_DEBUGGER_STATE;
struct _MI_DECAY_TIMER_LINK;
struct _MI_DECAY_TIMER_LINKAGE;
struct _MI_DRIVER_VA;
struct _MI_DYNAMIC_BITMAP;
struct _MI_ERROR_STATE;
struct _MI_EXTRA_IMAGE_INFORMATION;
struct _MI_FORCED_COMMITS;
struct _MI_FREE_LARGE_PAGES;
struct _MI_FREE_LARGE_PAGE_LIST;
struct _MI_HARDWARE_STATE;
struct _MI_HARD_FAULT_STATE;
struct _MI_HUGE_SYSTEM_VIEW_HEAD;
struct _MI_HYPER_SPACE;
struct _MI_IMAGE_SECURITY_REFERENCE;
struct _MI_IO_CACHE_STATS;
struct _MI_IO_PAGE_STATE;
struct _MI_LARGEPAGE_IMAGE_INFO;
struct _MI_LARGE_PAGE_CANDIDATES;
struct _MI_LDW_WORK_CONTEXT;
struct _MI_MODWRITE_DATA;
struct _MI_NODE_INFORMATION;
struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY;
struct _MI_PAGEFILE_TRACES;
struct _MI_PAGELIST_STATE;
struct _MI_PAGE_COLORS;
struct _MI_PAGE_COMBINE_STATISTICS;
struct _MI_PAGE_COMBINING_SUPPORT;
struct _MI_PAGING_FILE_SPACE_BITMAPS;
struct _MI_PAGING_IO_STATE;
struct _MI_PARTITION;
struct _MI_PARTITION_COMMIT;
struct _MI_PARTITION_CORE;
struct _MI_PARTITION_FLAGS;
struct _MI_PARTITION_MODWRITES;
struct _MI_PARTITION_PAGE_LISTS;
struct _MI_PARTITION_SEGMENTS;
struct _MI_PARTITION_STATE;
struct _MI_PARTITION_STORES;
struct _MI_PARTITION_ZEROING;
struct _MI_PER_SESSION_PROTOS;
struct _MI_POOL_FAILURE_REASONS;
struct _MI_POOL_STATE;
struct _MI_PROBE_RAISE_TRACKER;
struct _MI_PROCESS_STATE;
struct _MI_PROTOTYPE_PTES_NODE;
struct _MI_PTE_CHAIN_HEAD;
struct _MI_REBUILD_LARGE_PAGE_TIMER;
struct _MI_RESAVAIL_FAILURES;
struct _MI_RESTRICTED_MODWRITES;
struct _MI_RESUME_WORKITEM;
struct _MI_REVERSE_VIEW_MAP;
struct _MI_SECTION_IMAGE_INFORMATION;
struct _MI_SECTION_STATE;
struct _MI_SESSION_DRIVER_UNLOAD;
struct _MI_SESSION_STATE;
struct _MI_SHUTDOWN_STATE;
struct _MI_SLAB_ALLOCATOR_CONTEXT;
struct _MI_SLAB_ALLOCATOR_ENTRY;
struct _MI_SPECIAL_POOL;
struct _MI_STANDBY_STATE;
struct _MI_STORE_INPAGE_COMPLETE_FLAGS;
struct _MI_SUB64K_FREE_RANGES;
struct _MI_SUBSECTION_ENTRY1;
struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES;
struct _MI_SYSTEM_IMAGE_STATE;
struct _MI_SYSTEM_INFORMATION;
struct _MI_SYSTEM_NODE_INFORMATION;
struct _MI_SYSTEM_PTE_STATE;
struct _MI_SYSTEM_PTE_TYPE;
struct _MI_SYSTEM_TRIM_STATE;
struct _MI_SYSTEM_VA_ASSIGNMENT;
struct _MI_SYSTEM_VA_STATE;
struct _MI_TRIAGE_DUMP_DATA;
struct _MI_ULTRA_MDL_NODE;
struct _MI_ULTRA_VA_CONTEXT;
struct _MI_VAD_EVENT_BLOCK;
struct _MI_VAD_SEQUENTIAL_INFO;
struct _MI_VERIFIER_POOL_HEADER;
struct _MI_VISIBLE_PARTITION;
struct _MI_VISIBLE_STATE;
struct _MI_WSLE;
struct _MI_ZERO_COST_COUNTS;
struct _MI_ZERO_THREAD_CONTEXT;
struct _MMADDRESS_LIST;
struct _MMCLONE_BLOCK;
struct _MMCLONE_DESCRIPTOR;
struct _MMCLONE_HEADER;
struct _MMDEREFERENCE_SEGMENT_HEADER;
struct _MMEXTEND_INFO;
struct _MMINPAGE_FLAGS;
struct _MMINPAGE_SUPPORT;
struct _MMINPAGE_SUPPORT_FLOW_THROUGH;
struct _MMMOD_WRITER_LISTHEAD;
struct _MMMOD_WRITER_MDL_ENTRY;
struct _MMPAGE_FILE_EXPANSION;
struct _MMPAGE_FILE_EXPANSION_FLAGS;
struct _MMPAGING_FILE;
struct _MMPFN;
struct _MMPFNENTRY1;
struct _MMPFNENTRY3;
struct _MMPFNLIST;
struct _MMPFNLIST_SHORT;
struct _MMPTE;
struct _MMPTE_HARDWARE;
struct _MMPTE_LIST;
struct _MMPTE_PROTOTYPE;
struct _MMPTE_SOFTWARE;
struct _MMPTE_SUBSECTION;
struct _MMPTE_TIMESTAMP;
struct _MMPTE_TRANSITION;
struct _MMSECTION_FLAGS;
struct _MMSECTION_FLAGS2;
struct _MMSECURE_FLAGS;
struct _MMSESSION;
struct _MMSUBSECTION_FLAGS;
struct _MMSUPPORT_AGGREGATION;
struct _MMSUPPORT_FLAGS;
struct _MMSUPPORT_FULL;
struct _MMSUPPORT_INSTANCE;
struct _MMSUPPORT_SHARED;
struct _MMVAD;
struct _MMVAD_FLAGS;
struct _MMVAD_FLAGS1;
struct _MMVAD_FLAGS2;
struct _MMVAD_SHORT;
struct _MMWORKING_SET_EXPANSION_HEAD;
struct _MMWSL_INSTANCE;
struct _MM_DRIVER_VERIFIER_DATA;
struct _MM_PAGED_POOL_INFO;
struct _MM_PAGE_ACCESS_INFO;
struct _MM_PAGE_ACCESS_INFO_HEADER;
struct _MM_SESSION_SPACE;
struct _MM_SESSION_SPACE_FLAGS;
struct _MM_SYSTEM_PAGE_COUNTS;
struct _MODWRITER_FLAGS;
struct _MSUBSECTION;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NB10;
struct _NETWORK_LOADER_BLOCK;
struct _NLS_DATA_BLOCK;
struct _NONOPAQUE_OPLOCK;
struct _NON_PAGED_DEBUG_INFO;
struct _NPAGED_LOOKASIDE_LIST;
struct _NT_TIB;
struct _NT_TIB32;
struct _NT_TIB64;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_CREATE_INFORMATION;
struct _OBJECT_DIRECTORY;
struct _OBJECT_DIRECTORY_ENTRY;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_FOOTER;
struct _OBJECT_HANDLE_COUNT_DATABASE;
struct _OBJECT_HANDLE_COUNT_ENTRY;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_HEADER;
struct _OBJECT_HEADER_AUDIT_INFO;
struct _OBJECT_HEADER_CREATOR_INFO;
struct _OBJECT_HEADER_EXTENDED_INFO;
struct _OBJECT_HEADER_HANDLE_INFO;
struct _OBJECT_HEADER_NAME_INFO;
struct _OBJECT_HEADER_PADDING_INFO;
struct _OBJECT_HEADER_PROCESS_INFO;
struct _OBJECT_HEADER_QUOTA_INFO;
struct _OBJECT_NAMESPACE_LOOKUPTABLE;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_REF_INFO;
struct _OBJECT_REF_STACK_INFO;
struct _OBJECT_REF_TRACE;
struct _OBJECT_SYMBOLIC_LINK;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OBP_LOOKUP_CONTEXT;
struct _OBP_SILODRIVERSTATE;
struct _OBP_SYSTEM_DOS_DEVICE_STATE;
struct _OB_DUPLICATE_OBJECT_STATE;
struct _OB_EXTENDED_PARSE_PARAMETERS;
struct _OB_EXTENDED_USER_INFO;
struct _OB_HANDLE_REVOCATION_BLOCK;
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
struct _OPEN_PACKET;
struct _OWNER_ENTRY;
struct _PAGED_LOOKASIDE_LIST;
struct _PAGEFAULT_HISTORY;
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK;
struct _PCAT_FIRMWARE_INFORMATION;
struct _PCI_BUSMASTER_DESCRIPTOR;
struct _PCW_BUFFER;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_DATA;
struct _PCW_INSTANCE;
struct _PCW_MASK_INFORMATION;
struct _PCW_PROCESSOR_INFO;
struct _PCW_REGISTRATION;
struct _PCW_REGISTRATION_INFORMATION;
struct _PEB;
struct _PEB32;
struct _PEB64;
struct _PEBS_DS_SAVE_AREA;
struct _PEB_LDR_DATA;
struct _PENDING_RELATIONS_LIST_ENTRY;
struct _PEP_ACPI_EXTENDED_ADDRESS;
struct _PEP_ACPI_GPIO_RESOURCE;
struct _PEP_ACPI_INTERRUPT_RESOURCE;
struct _PEP_ACPI_IO_MEMORY_RESOURCE;
struct _PEP_ACPI_SPB_I2C_RESOURCE;
struct _PEP_ACPI_SPB_RESOURCE;
struct _PEP_ACPI_SPB_SPI_RESOURCE;
struct _PEP_ACPI_SPB_UART_RESOURCE;
struct _PEP_CRASHDUMP_INFORMATION;
struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;
struct _PEP_WORK_ACPI_NOTIFY;
struct _PEP_WORK_ACTIVE_COMPLETE;
struct _PEP_WORK_COMPLETE_IDLE_STATE;
struct _PEP_WORK_COMPLETE_PERF_STATE;
struct _PEP_WORK_DEVICE_IDLE;
struct _PEP_WORK_DEVICE_POWER;
struct _PEP_WORK_IDLE_STATE;
struct _PEP_WORK_INFORMATION;
struct _PEP_WORK_POWER_CONTROL;
struct _PERFINFO_GROUPMASK;
struct _PERFINFO_PPM_STATE_SELECTION;
struct _PERF_CONTROL_STATE_SELECTION;
struct _PERIODIC_CAPTURE_STATE_GUIDS;
struct _PF_KERNEL_GLOBALS;
struct _PHYSICAL_MEMORY_DESCRIPTOR;
struct _PHYSICAL_MEMORY_RUN;
struct _PI_BUS_EXTENSION;
struct _PI_RESOURCE_ARBITER_ENTRY;
struct _PLATFORM_IDLE_ACCOUNTING;
struct _PLATFORM_IDLE_STATE_ACCOUNTING;
struct _PLUGPLAY_EVENT_BLOCK;
struct _PNP_ASSIGN_RESOURCES_CONTEXT;
struct _PNP_DEVICE_ACTION_ENTRY;
struct _PNP_DEVICE_COMPLETION_QUEUE;
struct _PNP_DEVICE_COMPLETION_REQUEST;
struct _PNP_DEVICE_EVENT_ENTRY;
struct _PNP_DEVICE_EVENT_LIST;
struct _PNP_REBALANCE_TRACE_CONTEXT;
struct _PNP_REPLACE_PROCESSOR_LIST;
struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT;
struct _PNP_RESOURCE_REQUEST;
struct _PNP_WATCHDOG;
struct _POOL_DESCRIPTOR;
struct _POOL_HEADER;
struct _POOL_TRACKER_BIG_PAGES;
struct _POOL_TRACKER_TABLE;
struct _POP_ACTION_TRIGGER;
struct _POP_COOLING_EXTENSION;
struct _POP_CURRENT_BROADCAST;
struct _POP_DEVICE_SYS_STATE;
struct _POP_FX_ACCOUNTING;
struct _POP_FX_ACTIVE_TIME_ACCOUNTING;
struct _POP_FX_COMPONENT;
struct _POP_FX_DEPENDENT;
struct _POP_FX_DEVICE;
struct _POP_FX_DRIPS_WATCHDOG_CONTEXT;
struct _POP_FX_DRIVER_CALLBACKS;
struct _POP_FX_IDLE_STATE;
struct _POP_FX_LOG_ENTRY;
struct _POP_FX_PERF_INFO;
struct _POP_FX_PERF_SET;
struct _POP_FX_PLUGIN;
struct _POP_FX_PROVIDER;
struct _POP_FX_WORK_ORDER;
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO;
struct _POP_HIBER_CONTEXT;
struct _POP_IO_INFO;
struct _POP_IRP_DATA;
struct _POP_IRP_WORKER_ENTRY;
struct _POP_PER_PROCESSOR_CONTEXT;
struct _POP_POLICY_DEVICE;
struct _POP_POWER_ACTION;
struct _POP_POWER_SETTING_VALUES;
struct _POP_PPM_PROFILE;
struct _POP_RW_LOCK;
struct _POP_SHUTDOWN_BUG_CHECK;
struct _POP_THERMAL_TELEMETRY_TRACKER;
struct _POP_THERMAL_ZONE;
struct _POP_TRIGGER_WAIT;
struct _PORT_MESSAGE;
struct _PORT_MESSAGE32;
struct _POWER_SEQUENCE;
struct _PO_DEVICE_NOTIFY;
struct _PO_DEVICE_NOTIFY_ORDER;
struct _PO_DIAG_STACK_RECORD;
struct _PO_DIRECTED_DRIPS_STATE;
struct _PO_FX_COMPONENT_PERF_SET;
struct _PO_FX_PERF_STATE;
struct _PO_FX_PERF_STATE_CHANGE;
struct _PO_HIBER_PERF;
struct _PO_IRP_MANAGER;
struct _PO_IRP_QUEUE;
struct _PO_NOTIFY_ORDER_LEVEL;
struct _PO_PROCESS_ENERGY_CONTEXT;
struct _PPC_DBGKD_CONTROL_SET;
struct _PPM_CONCURRENCY_ACCOUNTING;
struct _PPM_COORDINATED_SELECTION;
struct _PPM_ENGINE_SETTINGS;
struct _PPM_FFH_THROTTLE_STATE_INFO;
struct _PPM_IDLE_STATE;
struct _PPM_IDLE_STATES;
struct _PPM_PLATFORM_STATE;
struct _PPM_PLATFORM_STATES;
struct _PPM_SELECTION_DEPENDENCY;
struct _PPM_SELECTION_MENU;
struct _PPM_SELECTION_MENU_ENTRY;
struct _PPM_SELECTION_STATISTICS;
struct _PPM_VETO_ACCOUNTING;
struct _PPM_VETO_ENTRY;
struct _PP_LOOKASIDE_LIST;
struct _PRIVATE_CACHE_MAP;
struct _PRIVATE_CACHE_MAP_FLAGS;
struct _PRIVILEGE_SET;
struct _PROCESSOR_IDLE_CONSTRAINTS;
struct _PROCESSOR_IDLE_DEPENDENCY;
struct _PROCESSOR_IDLE_PREPARE_INFO;
struct _PROCESSOR_NUMBER;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
struct _PROCESSOR_POWER_STATE;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
struct _PROCESS_DISK_COUNTERS;
struct _PROCESS_ENERGY_VALUES;
struct _PROCESS_ENERGY_VALUES_EXTENSION;
struct _PROCESS_EXTENDED_ENERGY_VALUES;
struct _PROC_FEEDBACK;
struct _PROC_FEEDBACK_COUNTER;
struct _PROC_IDLE_ACCOUNTING;
struct _PROC_IDLE_POLICY;
struct _PROC_IDLE_SNAP;
struct _PROC_IDLE_STATE_ACCOUNTING;
struct _PROC_IDLE_STATE_BUCKET;
struct _PROC_PERF_CHECK;
struct _PROC_PERF_CHECK_SNAP;
struct _PROC_PERF_CONSTRAINT;
struct _PROC_PERF_DOMAIN;
struct _PROC_PERF_HISTORY;
struct _PROC_PERF_HISTORY_ENTRY;
struct _PROC_PERF_LOAD;
struct _PROC_PERF_QOS_CLASS_POLICY;
struct _PROFILE_PARAMETER_BLOCK;
struct _PSP_STORAGE;
struct _PS_IO_CONTROL_ENTRY;
struct _PS_JOB_WAKE_INFORMATION;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _PS_PROCESS_WAKE_INFORMATION;
struct _PS_PROPERTY_SET;
struct _PS_PROTECTION;
struct _PS_TRUSTLET_ATTRIBUTE_DATA;
struct _PS_TRUSTLET_ATTRIBUTE_HEADER;
struct _PS_TRUSTLET_ATTRIBUTE_TYPE;
struct _PS_TRUSTLET_CREATE_ATTRIBUTES;
struct _PS_TRUSTLET_TKSESSION_ID;
struct _PTE_TRACKER;
struct _QUAD;
struct _RELATION_LIST;
struct _RELATIVE_SYMLINK_INFO;
struct _REMOTE_PORT_VIEW;
struct _REQUEST_MAILBOX;
struct _RH_OP_CONTEXT;
struct _RSDS;
struct _RTLP_HP_ALLOC_TRACKER;
struct _RTLP_HP_HEAP_GLOBALS;
struct _RTLP_HP_HEAP_MANAGER;
struct _RTLP_HP_METADATA_HEAP_CTX;
struct _RTLP_HP_PADDING_HEADER;
struct _RTLP_RANGE_LIST_ENTRY;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_ATOM_TABLE;
struct _RTL_ATOM_TABLE_ENTRY;
struct _RTL_ATOM_TABLE_REFERENCE;
struct _RTL_AVL_TABLE;
struct _RTL_AVL_TREE;
struct _RTL_BALANCED_LINKS;
struct _RTL_BALANCED_NODE;
struct _RTL_BITMAP;
struct _RTL_BITMAP_EX;
struct _RTL_CHASH_ENTRY;
struct _RTL_CHASH_TABLE;
struct _RTL_CRITICAL_SECTION;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _RTL_CSPARSE_BITMAP;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_HASH_ENTRY;
struct _RTL_HASH_TABLE;
struct _RTL_HASH_TABLE_ITERATOR;
struct _RTL_HEAP_MEMORY_LIMIT_DATA;
struct _RTL_HP_LFH_CONFIG;
struct _RTL_HP_SUB_ALLOCATOR_CONFIGS;
struct _RTL_HP_VS_CONFIG;
struct _RTL_RANGE;
struct _RTL_RANGE_LIST;
struct _RTL_RB_TREE;
struct _RTL_RETPOLINE_ROUTINES;
struct _RTL_SPARSE_ARRAY;
struct _RTL_SPLAY_LINKS;
struct _RTL_SRWLOCK;
struct _RTL_TIME_ZONE_INFORMATION;
struct _RTL_UMS_CONTEXT;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCSI_REQUEST_BLOCK;
struct _SECTION;
struct _SECTION_IMAGE_INFORMATION;
struct _SECTION_OBJECT_POINTERS;
struct _SECURITY_CLIENT_CONTEXT;
struct _SECURITY_DESCRIPTOR;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SEGMENT;
struct _SEGMENT_FLAGS;
struct _SEGMENT_HEAP;
struct _SEGMENT_HEAP_EXTRA;
struct _SEP_AUDIT_POLICY;
struct _SEP_CACHED_HANDLES_ENTRY;
struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;
struct _SEP_CACHED_HANDLES_TABLE;
struct _SEP_LOGON_SESSION_REFERENCES;
struct _SEP_LOWBOX_NUMBER_ENTRY;
struct _SEP_LOWBOX_NUMBER_MAPPING;
struct _SEP_LUID_TO_INDEX_MAP_ENTRY;
struct _SEP_RM_LSA_CONNECTION_STATE;
struct _SEP_SID_VALUES_BLOCK;
struct _SEP_SILOSTATE;
struct _SEP_TOKEN_DIAG_TRACK_ENTRY;
struct _SEP_TOKEN_PRIVILEGES;
struct _SESSION_LOWBOX_MAP;
struct _SE_AUDIT_PROCESS_CREATION_INFO;
struct _SHARED_CACHE_MAP;
struct _SHARED_CACHE_MAP_LIST_CURSOR;
struct _SID;
struct _SID_AND_ATTRIBUTES;
struct _SID_AND_ATTRIBUTES_HASH;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SILO_USER_SHARED_DATA;
struct _SINGLE_LIST_ENTRY;
struct _SINGLE_LIST_ENTRY32;
struct _SK_CRASH_MINIDUMP;
struct _SK_CRASH_MODULE;
struct _SK_CRASH_STACK_FRAME;
struct _SLIST_ENTRY;
struct _SMBIOS3_TABLE_HEADER;
struct _STACK_TABLE;
struct _STRING;
struct _STRING32;
struct _STRING64;
struct _SUBSECTION;
struct _SUPPORTED_RANGE;
struct _SUPPORTED_RANGES;
struct _SYNCH_COUNTERS;
struct _SYSPTES_HEADER;
struct _SYSTEM_POWER_POLICY;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _TEB;
struct _TEB32;
struct _TEB64;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TERMINATION_PORT;
struct _THERMAL_COOLING_INTERFACE;
struct _THERMAL_INFORMATION;
struct _THERMAL_INFORMATION_EX;
struct _THERMAL_POLICY;
struct _THERMAL_ZONE_COUNTERS;
struct _THREAD_ENERGY_VALUES;
struct _THREAD_PERFORMANCE_DATA;
struct _TIME_FIELDS;
struct _TOKEN;
struct _TOKEN_ACCESS_INFORMATION;
struct _TOKEN_AUDIT_POLICY;
struct _TOKEN_CONTROL;
struct _TOKEN_MANDATORY_POLICY;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_SOURCE;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
struct _TP_CLEANUP_GROUP;
struct _TP_POOL;
struct _TRACE_ENABLE_INFO;
struct _TRACE_LOGFILE_HEADER;
struct _TRIAGE_9F_PNP;
struct _TRIAGE_9F_POWER;
struct _TRIAGE_DEVICE_NODE;
struct _TRIAGE_EX_WORK_QUEUE;
struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE;
struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST;
struct _TRIAGE_POP_FX_DEVICE;
struct _TRIAGE_POP_IRP_DATA;
struct _TRUSTLET_COLLABORATION_ID;
struct _TRUSTLET_MAILBOX_KEY;
struct _TXN_PARAMETER_BLOCK;
struct _TlgProviderMetadata_t;
struct _TlgProvider_t;
struct _TraceLoggingMetadata_t;
struct _UMS_CONTROL_BLOCK;
struct _UNEXPECTED_INTERRUPT;
struct _UNICODE_STRING;
struct _VACB;
struct _VACB_ARRAY_HEADER;
struct _VACB_LEVEL_REFERENCE;
struct _VERIFIER_SHARED_EXPORT_THUNK;
struct _VF_ADDRESS_RANGE;
struct _VF_AVL_TABLE;
struct _VF_AVL_TREE;
struct _VF_AVL_TREE_NODE;
struct _VF_AVL_TREE_NODE_EX;
struct _VF_DRIVER_IO_CALLBACKS;
struct _VF_KE_CRITICAL_REGION_TRACE;
struct _VF_POOL_TRACE;
struct _VF_SUSPECT_DRIVER_ENTRY;
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;
struct _VF_TARGET_DRIVER;
struct _VF_TARGET_VERIFIED_DRIVER_DATA;
struct _VF_TRACKER;
struct _VF_TRACKER_STAMP;
struct _VF_WATCHDOG_IRP;
struct _VIRTUAL_EFI_RUNTIME_SERVICES;
struct _VI_DEADLOCK_GLOBALS;
struct _VI_DEADLOCK_NODE;
struct _VI_DEADLOCK_RESOURCE;
struct _VI_DEADLOCK_THREAD;
struct _VI_FAULT_TRACE;
struct _VI_POOL_ENTRY;
struct _VI_POOL_ENTRY_INUSE;
struct _VI_POOL_PAGE_HEADER;
struct _VI_TRACK_IRQL;
struct _VI_VERIFIER_ISSUE;
struct _VOLUME_CACHE_MAP;
struct _VPB;
struct _WAITING_IRP;
struct _WAIT_CONTEXT_BLOCK;
struct _WHEAP_ERROR_RECORD_WRAPPER;
struct _WHEAP_ERROR_SOURCE;
struct _WHEAP_ERROR_SOURCE_TABLE;
struct _WHEAP_INFO_BLOCK;
struct _WHEAP_WORK_QUEUE;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
struct _WHEA_EVENT_LOG_ENTRY;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_IPF_MCA_DESCRIPTOR;
struct _WHEA_MEMORY_ERROR_SECTION;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
struct _WHEA_PCI_SLOT_NUMBER;
struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION;
struct _WHEA_RECOVERY_CONTEXT;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_MCE_DESCRIPTOR;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WMI_BUFFER_HEADER;
struct _WMI_LOGGER_CONTEXT;
struct _WNF_LOCK;
struct _WNF_SCOPE_MAP;
struct _WNF_SILODRIVERSTATE;
struct _WNF_STATE_NAME;
struct _WORK_QUEUE_ENTRY;
struct _WORK_QUEUE_ITEM;
struct _WRITE_BEHIND_THROUGHPUT;
struct _X86_DBGKD_CONTROL_SET;
struct _X86_KTRAP_FRAME;
struct _X86_KTRAP_FRAME_BLUE;
struct _XSAVE_AREA;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_FORMAT;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_CONTEXT;
struct _XSTATE_FEATURE;
struct _XSTATE_SAVE;
struct _flags;
struct _iobuf;
struct tagSWITCH_CONTEXT;
struct tagSWITCH_CONTEXT_ATTRIBUTE;
struct tagSWITCH_CONTEXT_DATA;

union _AER_BRIDGE_DESCRIPTOR_FLAGS;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
union _CLS_LSN;
union _CM_TRANS_PTR;
union _CPU_INFO;
union _CVDD;
union _ENERGY_STATE_DURATION;
union _FILE_SEGMENT_ELEMENT;
union _FS_FILTER_PARAMETERS;
union _HAL_UNMASKED_INTERRUPT_FLAGS;
union _HANDLE_TABLE_ENTRY;
union _HV_PARTITION_PRIVILEGE_MASK;
union _INVPCID_DESCRIPTOR;
union _IOMMU_SVM_CAPABILITIES;
union _JOBOBJECT_ENERGY_TRACKING_STATE;
union _KALPC_DIRECT_EVENT;
union _KEXECUTE_OPTIONS;
union _KGDTENTRY64;
union _KIDTENTRY64;
union _KLOCK_ENTRY_BOOST_BITMAP;
union _KPRCBFLAG;
union _KSTACK_COUNT;
union _KWAIT_STATUS_REGISTER;
union _LARGE_INTEGER;
union _MI_FLAGS;
union _MI_RESERVATION_CLUSTER_INFO;
union _MM_PAGE_ACCESS_INFO_FLAGS;
union _MM_STORE_KEY;
union _PCW_CALLBACK_INFORMATION;
union _PEP_ACPI_RESOURCE;
union _PEP_ACPI_RESOURCE_FLAGS;
union _POP_FX_COMPONENT_FLAGS;
union _POP_FX_DEVICE_STATUS;
union _POP_FX_PERF_FLAGS;
union _POWER_STATE;
union _PPM_COORDINATED_SYNCHRONIZATION;
union _PPM_IDLE_SYNCHRONIZATION_STATE;
union _PPM_POLICY_SETTINGS_MASK;
union _PS_CLIENT_SECURITY_CONTEXT;
union _PS_INTERLOCKED_TIMER_DELAY_VALUES;
union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
union _RTL_RUN_ONCE;
union _SLIST_HEADER;
union _TIMELINE_BITMAP;
union _ULARGE_INTEGER;
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;
union _WHEA_ERROR_PACKET_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_ERROR_STATUS;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
union _WHEA_NOTIFICATION_FLAGS;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
union _XPF_MCE_FLAGS;
union _XPF_MC_BANK_FLAGS;
union _u;

enum BUS_QUERY_ID_TYPE;
enum DEVICE_TEXT_TYPE;
enum ETW_COMPRESSION_RESUMPTION_MODE;
enum HAL_APIC_DESTINATION_MODE;
enum HSTORAGE_TYPE;
enum INTERRUPT_CONNECTION_TYPE;
enum IRPLOCK;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum KD_CALLBACK_ACTION;
enum KD_NAMESPACE_ENUM;
enum KTM_STATE;
enum LSA_FOREST_TRUST_RECORD_TYPE;
enum PDCCLIENTID;
enum PDC_ACTIVITY_TYPE;
enum PDC_CS_PHASE;
enum PDC_RESOURCE;
enum POWER_ACTION;
enum POWER_POLICY_DEVICE_TYPE;
enum PPM_IDLE_BUCKET_TIME_TYPE;
enum PROFILE_DEPARTURE_STYLE;
enum PROFILE_STATUS;
enum PS_CREATE_STATE;
enum RTLP_CSPARSE_BITMAP_STATE;
enum ReplacesCorHdrNumericDefines;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT;
enum SYSTEM_POWER_CONDITION;
enum TlgIn_t;
enum TlgOut_t;
enum UoWActionType;
enum _ADD_DRIVER_STAGE;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _ARBITER_ACTION;
enum _ARBITER_REQUEST_SOURCE;
enum _ARBITER_RESULT;
enum _BLOB_ID;
enum _BOOT_ENTROPY_SOURCE_ID;
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE;
enum _BUS_DATA_TYPE;
enum _CMP_FAILURE_INJECTION_POINT;
enum _CM_DIRTY_VECTOR_OPERATION;
enum _CM_LOAD_FAILURE_TYPE;
enum _CM_SHARE_DISPOSITION;
enum _CONFIGURATION_CLASS;
enum _CONFIGURATION_TYPE;
enum _CREATE_FILE_TYPE;
enum _ConnectionResourceConsumerDesc;
enum _DEVICE_POWER_STATE;
enum _DEVICE_RELATION_LEVEL;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
enum _DEVPROP_OPERATOR;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum _DMA_SPEED;
enum _DMA_WIDTH;
enum _DOMAIN_CONFIGURATION_ARCH;
enum _DUMP_EVENTS;
enum _ETW_BUFFER_STATE;
enum _ETW_GUID_TYPE;
enum _ETW_HEADER_TYPE;
enum _ETW_NOTIFICATION_TYPE;
enum _ETW_PERFECT_HASH_FUNCTION_TYPE;
enum _ETW_PERIODIC_TIMER_STATE;
enum _ETW_RT_EVENT_LOSS;
enum _ETW_STRING_TOKEN_TYPE;
enum _EVENT_INFO_CLASS;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
enum _EXQUEUEINDEX;
enum _EXT_IOMMU_DEVICE_TYPE;
enum _EX_GEN_RANDOM_DOMAIN;
enum _EX_POOL_PRIORITY;
enum _FAULT_INFORMATION_ARCH;
enum _FAULT_INFORMATION_ARM64_TYPE;
enum _FILE_INFORMATION_CLASS;
enum _FILE_OBJECT_EXTENSION_TYPE;
enum _FSINFOCLASS;
enum _FS_FILTER_SECTION_SYNC_TYPE;
enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE;
enum _FUNCTION_TABLE_TYPE;
enum _GPIO_PIN_CONFIG_TYPE;
enum _GPIO_PIN_IORESTRICTION_TYPE;
enum _HAL_CLOCK_TIMER_MODE;
enum _HAL_PROCESSOR_STAT_TYPE;
enum _HARDWARE_COUNTER_TYPE;
enum _HEAP_FAILURE_TYPE;
enum _HV_EXT_EPF_MODE;
enum _INTERFACE_TYPE;
enum _INTERLOCKED_RESULT;
enum _INVPCID_TYPE;
enum _IOP_PRIORITY_HINT;
enum _IO_ALLOCATION_ACTION;
enum _IO_PRIORITY_HINT;
enum _IO_RATE_CONTROL_TYPE;
enum _IO_SESSION_STATE;
enum _IRQ_PRIORITY;
enum _JOBOBJECTINFOCLASS;
enum _KENLISTMENT_STATE;
enum _KERNEL_STACK_LIMITS;
enum _KE_WAKE_SOURCE_TYPE;
enum _KHETERO_CPU_POLICY;
enum _KHETERO_CPU_QOS;
enum _KHETERO_RUNNING_TYPE;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
enum _KI_CALLBACK;
enum _KOBJECTS;
enum _KPROCESS_PPM_POLICY;
enum _KPROCESS_STATE;
enum _KPROFILE_SOURCE;
enum _KRESOURCEMANAGER_STATE;
enum _KTHREAD_PPM_POLICY;
enum _KTHREAD_STATE;
enum _KTHREAD_TAG;
enum _KTIMER2_COLLECTION_INDEX;
enum _KTRANSACTION_OUTCOME;
enum _KTRANSACTION_STATE;
enum _KWAIT_BLOCK_STATE;
enum _KWAIT_REASON;
enum _KWAIT_STATE;
enum _LDR_DDAG_STATE;
enum _LDR_DLL_LOAD_REASON;
enum _LOCK_OPERATION;
enum _MACHINE_CHECK_NESTING_LEVEL;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _MI_ALTERNATE_LOCK_VA_TYPE;
enum _MI_ASSIGNED_REGION_TYPES;
enum _MI_AVAILABLE_PAGE_WAIT_TYPES;
enum _MI_CFG_BITMAP_TYPE;
enum _MI_CROSS_PARTITION_CHARGE_TYPE;
enum _MI_DYNAMICBASE_BITMAP;
enum _MI_ENCLAVE_TYPE;
enum _MI_IO_PFN_TYPE;
enum _MI_KSTACK_TYPE;
enum _MI_MEMORY_EVENT_TYPES;
enum _MI_MEMORY_HIGHLOW;
enum _MI_MIRROR_BITMAP_TYPES;
enum _MI_NODE_NONPAGED_POOL_BITMAP;
enum _MI_PARTITION_THREAD;
enum _MI_PFN_CACHE_ATTRIBUTE;
enum _MI_SHARED_USER_PAGE_TYPES;
enum _MI_SLAB_ALLOCATOR_PROTECTION;
enum _MI_SUBVAD_LISTS;
enum _MI_SYSTEM_VA_TYPE;
enum _MI_VAD_64K_TYPES;
enum _MI_VAD_ALLOCATION_CELL_TYPE;
enum _MI_WORKING_SET_TYPE;
enum _MMLISTS;
enum _MM_PAGE_ACCESS_TYPE;
enum _MM_POOL_PRIORITIES;
enum _MM_POOL_TYPES;
enum _MM_PREEMPTIVE_TRIMS;
enum _MODE;
enum _NT_PRODUCT_TYPE;
enum _OBJECT_INFORMATION_CLASS;
enum _OB_OPEN_REASON;
enum _PCI_BUSMASTER_RID_TYPE;
enum _PCW_CALLBACK_TYPE;
enum _PEP_ACPI_RESOURCE_TYPE;
enum _PEP_WORK_TYPE;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _PERFINFO_MM_STAT;
enum _PF_FILE_ACCESS_TYPE;
enum _PLUGPLAY_EVENT_CATEGORY;
enum _PNP_DEVICE_ACTION_REQUEST;
enum _PNP_DEVICE_DELETE_TYPE;
enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;
enum _PNP_DEVNODE_STATE;
enum _PNP_REBALANCE_FAILURE;
enum _PNP_REBALANCE_REASON;
enum _PNP_VETO_TYPE;
enum _PNP_WATCHDOG_TYPE;
enum _POLICY_AUDIT_EVENT_TYPE;
enum _POOL_TYPE;
enum _POP_DEEP_SLEEP_DISENGAGE_REASON;
enum _POP_DEVICE_IDLE_TYPE;
enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;
enum _POP_IO_STATUS;
enum _POP_SLEEP_CHECKPOINT;
enum _POP_SLEEP_CHECKPOINT_STATUS;
enum _POWER_INFORMATION_LEVEL_INTERNAL;
enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;
enum _POWER_REQUEST_TYPE;
enum _POWER_REQUEST_TYPE_INTERNAL;
enum _POWER_STATE_TYPE;
enum _PO_CS_DEVICE_NOTIFICATION_TYPE;
enum _PO_FX_PERF_STATE_TYPE;
enum _PO_FX_PERF_STATE_UNIT;
enum _PO_HIBER_FORCE_DISABLE_REASON;
enum _PO_MODERN_SLEEP_ACTION;
enum _PPM_PERF_QOS_DISABLE_REASON;
enum _PP_NPAGED_LOOKASIDE_NUMBER;
enum _PROCESSOR_CACHE_TYPE;
enum _PROCESS_SECTION_TYPE;
enum _PROCESS_TERMINATE_REQUEST_REASON;
enum _PROCESS_VA_TYPE;
enum _PROC_HYPERVISOR_STATE;
enum _PS_ATTRIBUTE_NUM;
enum _PS_MITIGATION_OPTION;
enum _PS_PROTECTED_SIGNER;
enum _PS_PROTECTED_TYPE;
enum _PS_RESOURCE_TYPE;
enum _PS_STD_HANDLE_STATE;
enum _PS_WAKE_REASON;
enum _REG_NOTIFY_CLASS;
enum _REQUESTER_TYPE;
enum _RTLP_HP_ADDRESS_SPACE_TYPE;
enum _RTLP_HP_LOCK_TYPE;
enum _RTLP_HP_MEMORY_TYPE;
enum _RTL_GENERIC_COMPARE_RESULTS;
enum _RTL_MEMORY_TYPE;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
enum _SEP_CACHED_HANDLES_ENTRY_TYPE;
enum _SERVERSILO_STATE;
enum _SKSERVICE;
enum _SYSTEM_DLL_TYPE;
enum _SYSTEM_POWER_STATE;
enum _SYSTEM_PROCESS_CLASSIFICATION;
enum _THREAD_WORKLOAD_CLASS;
enum _TOKEN_TYPE;
enum _TP_CALLBACK_PRIORITY;
enum _TRACE_INFORMATION_CLASS;
enum _TRANSFER_TYPE;
enum _TYPE_OF_MEMORY;
enum _TlgBlob_t;
enum _USER_ACTIVITY_PRESENCE;
enum _VERIFIER_RULE_CLASS_ID;
enum _VI_DEADLOCK_RESOURCE_TYPE;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _WHEA_ERROR_SEVERITY;
enum _WHEA_ERROR_SOURCE_STATE;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _WORKING_SET_TYPE;
enum _WOW64_SHARED_INFORMATION;

typedef struct BATTERY_REPORTING_SCALE {
    ULONG Granularity;
    ULONG Capacity;
};

typedef struct CMP_OFFSET_ARRAY {
    ULONG FileOffset;
    PVOID DataBuffer;
    ULONG DataLength;
};

typedef struct DEBUG_DEVICE_ADDRESS {
    UCHAR Type;
    UCHAR Valid;
    UCHAR Reserved[2];
    UCHAR BitWidth;
    UCHAR AccessSize;
    PUCHAR TranslatedAddress;
    ULONG Length;
};

typedef struct DEBUG_MEMORY_REQUIREMENTS {
    union _LARGE_INTEGER Start;
    union _LARGE_INTEGER MaxEnd;
    PVOID VirtualAddress;
    ULONG Length;
    UCHAR Cached;
    UCHAR Aligned;
};

typedef struct DOCK_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ProfileDepartureSetMode;
    PULONG ProfileDepartureUpdate;
};

typedef struct HAL_PRIVATE_DISPATCH {
    ULONG Version;
    struct _BUS_HANDLER **HalHandlerForBus;
    struct _BUS_HANDLER **HalHandlerForConfigSpace;
    PVOID HalLocateHiberRanges;
    PLONG HalRegisterBusHandler;
    PVOID HalSetWakeEnable;
    PLONG HalSetWakeAlarm;
    PUCHAR HalPciTranslateBusAddress;
    PLONG HalPciAssignSlotResources;
    PVOID HalHaltSystem;
    PUCHAR HalFindBusAddressTranslation;
    PUCHAR HalResetDisplay;
    PLONG HalAllocateMapRegisters;
    PLONG KdSetupPciDeviceForDebugging;
    PLONG KdReleasePciDeviceForDebugging;
    PVOID *KdGetAcpiTablePhase0;
    PVOID KdCheckPowerButton;
    PUCHAR HalVectorToIDTEntry;
    PVOID *KdMapPhysicalMemory64;
    PVOID KdUnmapVirtualAddress;
    PULONG KdGetPciDataByOffset;
    PULONG KdSetPciDataByOffset;
    PULONG HalGetInterruptVectorOverride;
    PLONG HalGetVectorInputOverride;
    PLONG HalLoadMicrocode;
    PLONG HalUnloadMicrocode;
    PLONG HalPostMicrocodeUpdate;
    PLONG HalAllocateMessageTargetOverride;
    PVOID HalFreeMessageTargetOverride;
    PLONG HalDpReplaceBegin;
    PVOID HalDpReplaceTarget;
    PLONG HalDpReplaceControl;
    PVOID HalDpReplaceEnd;
    PVOID HalPrepareForBugcheck;
    PUCHAR HalQueryWakeTime;
    PVOID HalReportIdleStateUsage;
    PVOID HalTscSynchronization;
    PLONG HalWheaInitProcessorGenericSection;
    PVOID HalStopLegacyUsbInterrupts;
    PLONG HalReadWheaPhysicalMemory;
    PLONG HalWriteWheaPhysicalMemory;
    PLONG HalDpMaskLevelTriggeredInterrupts;
    PLONG HalDpUnmaskLevelTriggeredInterrupts;
    PLONG HalDpGetInterruptReplayState;
    PLONG HalDpReplayInterrupts;
    PUCHAR HalQueryIoPortAccessSupported;
    PLONG KdSetupIntegratedDeviceForDebugging;
    PLONG KdReleaseIntegratedDeviceForDebugging;
    PVOID HalGetEnlightenmentInformation;
    PVOID *HalAllocateEarlyPages;
    PVOID *HalMapEarlyPages;
    PVOID Dummy1;
    PVOID Dummy2;
    PVOID HalNotifyProcessorFreeze;
    PLONG HalPrepareProcessorForIdle;
    PVOID HalRegisterLogRoutine;
    PVOID HalResumeProcessorFromIdle;
    PVOID Dummy;
    PULONG HalVectorToIDTEntryEx;
    PLONG HalSecondaryInterruptQueryPrimaryInformation;
    PLONG HalMaskInterrupt;
    PLONG HalUnmaskInterrupt;
    PUCHAR HalIsInterruptTypeSecondary;
    PLONG HalAllocateGsivForSecondaryInterrupt;
    PLONG HalAddInterruptRemapping;
    PVOID HalRemoveInterruptRemapping;
    PVOID HalSaveAndDisableHvEnlightenment;
    PVOID HalRestoreHvEnlightenment;
    PVOID HalFlushIoBuffersExternalCache;
    PVOID HalFlushExternalCache;
    PLONG HalPciEarlyRestore;
    PLONG HalGetProcessorId;
    PLONG HalAllocatePmcCounterSet;
    PVOID HalCollectPmcCounters;
    PVOID HalFreePmcCounterSet;
    PLONG HalProcessorHalt;
    PULONG64 HalTimerQueryCycleCounter;
    PVOID Dummy3;
    PVOID HalPciMarkHiberPhase;
    PLONG HalQueryProcessorRestartEntryPoint;
    PLONG HalRequestInterrupt;
    PLONG HalEnumerateUnmaskedInterrupts;
    PVOID HalFlushAndInvalidatePageExternalCache;
    PLONG KdEnumerateDebuggingDevices;
    PVOID HalFlushIoRectangleExternalCache;
    PVOID HalPowerEarlyRestore;
    PLONG HalQueryCapsuleCapabilities;
    PLONG HalUpdateCapsule;
    PUCHAR HalPciMultiStageResumeCapable;
    PVOID HalDmaFreeCrashDumpRegisters;
    PUCHAR HalAcpiAoacCapable;
    PLONG HalInterruptSetDestination;
    PVOID HalGetClockConfiguration;
    PVOID HalClockTimerActivate;
    PVOID HalClockTimerInitialize;
    PVOID HalClockTimerStop;
    PLONG HalClockTimerArm;
    PUCHAR HalTimerOnlyClockInterruptPending;
    PVOID *HalAcpiGetMultiNode;
    PVOID *HalPowerSetRebootHandler;
    PVOID HalIommuRegisterDispatchTable;
    PVOID HalTimerWatchdogStart;
    PVOID HalTimerWatchdogResetCountdown;
    PVOID HalTimerWatchdogStop;
    PUCHAR HalTimerWatchdogGeneratedLastReset;
    PLONG HalTimerWatchdogTriggerSystemReset;
    PLONG HalInterruptVectorDataToGsiv;
    PLONG HalInterruptGetHighestPriorityInterrupt;
    PLONG HalProcessorOn;
    PLONG HalProcessorOff;
    PLONG HalProcessorFreeze;
    PLONG HalDmaLinkDeviceObjectByToken;
    PLONG HalDmaCheckAdapterToken;
    PVOID Dummy4;
    PLONG HalTimerConvertPerformanceCounterToAuxiliaryCounter;
    PLONG HalTimerConvertAuxiliaryCounterToPerformanceCounter;
    PLONG HalTimerQueryAuxiliaryCounterFrequency;
    PLONG HalConnectThermalInterrupt;
    PUCHAR HalIsEFIRuntimeActive;
    PUCHAR HalTimerQueryAndResetRtcErrors;
    PVOID HalAcpiLateRestore;
    PLONG KdWatchdogDelayExpiration;
    PLONG HalGetProcessorStats;
    PULONG64 HalTimerWatchdogQueryDueTime;
    PLONG HalConnectSyntheticInterrupt;
    PVOID HalPreprocessNmi;
    PLONG HalEnumerateEnvironmentVariablesWithFilter;
    PLONG HalCaptureLastBranchRecordStack;
    PUCHAR HalClearLastBranchRecordStack;
    PLONG HalConfigureLastBranchRecord;
    PUCHAR HalGetLastBranchInformation;
    PVOID HalResumeLastBranchRecord;
    PLONG HalStartLastBranchRecord;
    PLONG HalStopLastBranchRecord;
    PLONG HalIommuBlockDevice;
    PLONG HalIommuUnblockDevice;
    PLONG HalGetIommuInterface;
    PLONG HalRequestGenericErrorRecovery;
    PLONG HalTimerQueryHostPerformanceCounter;
    PLONG HalTopologyQueryProcessorRelationships;
    PVOID HalInitPlatformDebugTriggers;
    PVOID HalRunPlatformDebugTriggers;
    PVOID *HalTimerGetReferencePage;
};

typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
};

typedef struct LIST_ENTRY64 {
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct PEPHANDLE__ {
    LONG unused;
};

typedef struct POHANDLE__ {
    LONG unused;
};

typedef struct POWER_ACTION_POLICY {
    enum POWER_ACTION Action;
    ULONG Flags;
    ULONG EventCode;
};

typedef struct PO_MEMORY_IMAGE {
    ULONG Signature;
    ULONG ImageType;
    ULONG CheckSum;
    ULONG LengthSelf;
    ULONG64 PageSelf;
    ULONG PageSize;
    union _LARGE_INTEGER SystemTime;
    ULONG64 InterruptTime;
    ULONG64 FeatureFlags;
    UCHAR HiberFlags;
    UCHAR spare[3];
    ULONG NoHiberPtes;
    ULONG64 HiberVa;
    ULONG NoFreePages;
    ULONG FreeMapCheck;
    ULONG WakeCheck;
    ULONG64 NumPagesForLoader;
    ULONG64 FirstSecureRestorePage;
    ULONG64 FirstBootRestorePage;
    ULONG64 FirstKernelRestorePage;
    ULONG64 FirstChecksumRestorePage;
    ULONG64 NoChecksumEntries;
    struct _PO_HIBER_PERF PerfInfo;
    ULONG FirmwareRuntimeInformationPages;
    ULONG64 FirmwareRuntimeInformation[1];
    ULONG SpareUlong;
    ULONG NoBootLoaderLogPages;
    ULONG64 BootLoaderLogPages[24];
    ULONG NotUsed;
    ULONG ResumeContextCheck;
    ULONG ResumeContextPages;
    UCHAR Hiberboot;
    UCHAR SecureLaunched;
    UCHAR SecureBoot;
    ULONG64 HvCr3;
    ULONG64 HvEntryPoint;
    ULONG64 HvReservedTransitionAddress;
    ULONG64 HvReservedTransitionAddressSize;
    ULONG64 BootFlags;
    ULONG64 RestoreProcessorStateRoutine;
    ULONG64 HighestPhysicalPage;
    ULONG64 BitlockerKeyPfns[4];
    ULONG HardwareSignature;
    union _LARGE_INTEGER SMBiosTablePhysicalAddress;
    ULONG SMBiosTableLength;
    UCHAR SMBiosMajorVersion;
    UCHAR SMBiosMinorVersion;
    UCHAR HiberResumeXhciHandoffSkip;
    UCHAR InitializeUSBCore;
    UCHAR ValidUSBCoreId;
    UCHAR USBCoreId;
    UCHAR SkipMemoryMapValidation;
};

typedef struct PROCESSOR_IDLESTATE_INFO {
    ULONG TimeCheck;
    UCHAR DemotePercent;
    UCHAR PromotePercent;
    UCHAR Spare[2];
};

typedef struct PROCESSOR_IDLESTATE_POLICY {
    USHORT Revision;
    union {
        USHORT AsUSHORT;
        USHORT AllowScaling : 1;
        USHORT Disabled : 1;
        USHORT Reserved : 14;
    } Flags;
    ULONG PolicyCount;
    struct PROCESSOR_IDLESTATE_INFO Policy[3];
};

typedef struct PROCESSOR_PERFSTATE_POLICY {
    ULONG Revision;
    UCHAR MaxThrottle;
    UCHAR MinThrottle;
    UCHAR BusyAdjThreshold;
    UCHAR Spare;
    union {
        UCHAR AsUCHAR;
        UCHAR NoDomainAccounting : 1;
        UCHAR IncreasePolicy : 2;
        UCHAR DecreasePolicy : 2;
        UCHAR Reserved : 3;
    } Flags;
    ULONG TimeCheck;
    ULONG IncreaseTime;
    ULONG DecreaseTime;
    ULONG IncreasePercent;
    ULONG DecreasePercent;
};

typedef struct SYSTEM_POWER_CAPABILITIES {
    UCHAR PowerButtonPresent;
    UCHAR SleepButtonPresent;
    UCHAR LidPresent;
    UCHAR SystemS1;
    UCHAR SystemS2;
    UCHAR SystemS3;
    UCHAR SystemS4;
    UCHAR SystemS5;
    UCHAR HiberFilePresent;
    UCHAR FullWake;
    UCHAR VideoDimPresent;
    UCHAR ApmPresent;
    UCHAR UpsPresent;
    UCHAR ThermalControl;
    UCHAR ProcessorThrottle;
    UCHAR ProcessorMinThrottle;
    UCHAR ProcessorMaxThrottle;
    UCHAR FastSystemS4;
    UCHAR Hiberboot;
    UCHAR WakeAlarmPresent;
    UCHAR AoAc;
    UCHAR DiskSpinDown;
    UCHAR HiberFileType;
    UCHAR AoAcConnectivitySupported;
    UCHAR spare3[6];
    UCHAR SystemBatteriesPresent;
    UCHAR BatteriesAreShortTerm;
    struct BATTERY_REPORTING_SCALE BatteryScale[3];
    enum _SYSTEM_POWER_STATE AcOnLineWake;
    enum _SYSTEM_POWER_STATE SoftLidWake;
    enum _SYSTEM_POWER_STATE RtcWake;
    enum _SYSTEM_POWER_STATE MinDeviceWakeState;
    enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
};

typedef struct SYSTEM_POWER_LEVEL {
    UCHAR Enable;
    UCHAR Spare[3];
    ULONG BatteryLevel;
    struct POWER_ACTION_POLICY PowerPolicy;
    enum _SYSTEM_POWER_STATE MinSystemState;
};

typedef struct VACB_LEVEL_ALLOCATION_LIST {
    struct _LIST_ENTRY VacbLevelList;
    PVOID VacbLevelWithBcbListHeads;
    ULONG VacbLevelsAllocated;
};

typedef struct _ACCESS_REASONS {
    ULONG Data[32];
};

typedef struct _ACCESS_STATE {
    struct _LUID OperationID;
    UCHAR SecurityEvaluated;
    UCHAR GenerateAudit;
    UCHAR GenerateOnClose;
    UCHAR PrivilegesAllocated;
    ULONG Flags;
    ULONG RemainingDesiredAccess;
    ULONG PreviouslyGrantedAccess;
    ULONG OriginalDesiredAccess;
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
    PVOID SecurityDescriptor;
    PVOID AuxData;
    union {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
        struct _PRIVILEGE_SET PrivilegeSet;
    } Privileges;
    UCHAR AuditPrivileges;
    struct _UNICODE_STRING ObjectName;
    struct _UNICODE_STRING ObjectTypeName;
};

typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
};

typedef struct _ACPI_METHOD_ARGUMENT_V1 {
    USHORT Type;
    USHORT DataLength;
    ULONG Argument;
    UCHAR Data[1];
};

typedef struct _ACTIVATION_CONTEXT {
};

typedef struct _ACTIVATION_CONTEXT_DATA {
};

typedef struct _ACTIVATION_CONTEXT_STACK {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
    struct _LIST_ENTRY FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _ACTIVATION_CONTEXT_STACK32 {
    ULONG ActiveFrame;
    struct LIST_ENTRY32 FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _ACTIVATION_CONTEXT_STACK64 {
    ULONG64 ActiveFrame;
    struct LIST_ENTRY64 FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _ADAPTER_OBJECT {
};

typedef struct _AGGREGATED_PAYLOAD_FILTER {
    USHORT MagicValue : 12;
    USHORT DescriptorVersion : 4;
    USHORT Size;
    USHORT PredicateCount;
    USHORT Reserved;
    ULONG64 HashedEventIdBitmap;
    struct _GUID ProviderGuid;
    USHORT EachEventTableOffset;
    USHORT EachEventTableLength;
    USHORT PayloadDecoderTableOffset;
    USHORT PayloadDecoderTableLength;
    USHORT EventFilterTableOffset;
    USHORT EventFilterTableLength;
    USHORT UNICODEStringTableOffset;
    USHORT UNICODEStringTableLength;
    USHORT ANSIStringTableOffset;
    USHORT ANSIStringTableLength;
    struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];
};

typedef struct _ALPC_COMMUNICATION_INFO {
    struct _ALPC_PORT *ConnectionPort;
    struct _ALPC_PORT *ServerCommunicationPort;
    struct _ALPC_PORT *ClientCommunicationPort;
    struct _LIST_ENTRY CommunicationList;
    struct _ALPC_HANDLE_TABLE HandleTable;
    struct _KALPC_MESSAGE *CloseMessage;
};

typedef struct _ALPC_COMPLETION_LIST {
    struct _LIST_ENTRY Entry;
    struct _EPROCESS *OwnerProcess;
    struct _EX_PUSH_LOCK CompletionListLock;
    struct _MDL *Mdl;
    PVOID UserVa;
    PVOID UserLimit;
    PVOID DataUserVa;
    PVOID SystemVa;
    ULONG64 TotalSize;
    struct _ALPC_COMPLETION_LIST_HEADER *Header;
    PVOID List;
    ULONG64 ListSize;
    PVOID Bitmap;
    ULONG64 BitmapSize;
    PVOID Data;
    ULONG64 DataSize;
    ULONG BitmapLimit;
    ULONG BitmapNextHint;
    ULONG ConcurrencyCount;
    ULONG AttributeFlags;
    ULONG AttributeSize;
};

typedef struct _ALPC_COMPLETION_LIST_HEADER {
    ULONG64 StartMagic;
    ULONG TotalSize;
    ULONG ListOffset;
    ULONG ListSize;
    ULONG BitmapOffset;
    ULONG BitmapSize;
    ULONG DataOffset;
    ULONG DataSize;
    ULONG AttributeFlags;
    ULONG AttributeSize;
    struct _ALPC_COMPLETION_LIST_STATE State;
    ULONG LastMessageId;
    ULONG LastCallbackId;
    ULONG PostCount;
    ULONG ReturnCount;
    ULONG LogSequenceNumber;
    struct _RTL_SRWLOCK UserLock;
    ULONG64 EndMagic;
};

typedef struct _ALPC_COMPLETION_LIST_STATE {
    union {
        struct {
            ULONG64 Head : 24;
            ULONG64 Tail : 24;
            ULONG64 ActiveThreadCount : 16;
        } s1;
        LONG64 Value;
    } u1;
};

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE {
    ULONG64 Lock;
    ULONG Size;
    ULONG ActiveCount;
    ULONG PendingNullCount;
    ULONG PendingCheckCompletionListCount;
    ULONG PendingDelete;
    struct _SINGLE_LIST_ENTRY FreeListHead;
    PVOID CompletionPort;
    PVOID CompletionKey;
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];
};

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY {
    struct _SINGLE_LIST_ENTRY ListEntry;
    struct _IO_MINI_COMPLETION_PACKET_USER *Packet;
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE *Lookaside;
};

typedef struct _ALPC_DISPATCH_CONTEXT {
    struct _ALPC_PORT *PortObject;
    struct _KALPC_MESSAGE *Message;
    struct _ALPC_COMMUNICATION_INFO *CommunicationInfo;
    struct _ETHREAD *TargetThread;
    struct _ALPC_PORT *TargetPort;
    union _KALPC_DIRECT_EVENT DirectEvent;
    ULONG Flags;
    USHORT TotalLength;
    USHORT Type;
    USHORT DataInfoOffset;
    UCHAR SignalCompletion;
    UCHAR PostedToCompletionList;
};

typedef struct _ALPC_HANDLE_ENTRY {
    PVOID Object;
};

typedef struct _ALPC_HANDLE_TABLE {
    struct _ALPC_HANDLE_ENTRY *Handles;
    ULONG TotalHandles;
    ULONG Flags;
    struct _EX_PUSH_LOCK Lock;
};

typedef struct _ALPC_MESSAGE_ATTRIBUTES {
    ULONG AllocatedAttributes;
    ULONG ValidAttributes;
};

typedef struct _ALPC_PORT {
    struct _LIST_ENTRY PortListEntry;
    struct _ALPC_COMMUNICATION_INFO *CommunicationInfo;
    struct _EPROCESS *OwnerProcess;
    PVOID CompletionPort;
    PVOID CompletionKey;
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE *CompletionPacketLookaside;
    PVOID PortContext;
    struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
    struct _EX_PUSH_LOCK IncomingQueueLock;
    struct _LIST_ENTRY MainQueue;
    struct _LIST_ENTRY LargeMessageQueue;
    struct _EX_PUSH_LOCK PendingQueueLock;
    struct _LIST_ENTRY PendingQueue;
    struct _EX_PUSH_LOCK DirectQueueLock;
    struct _LIST_ENTRY DirectQueue;
    struct _EX_PUSH_LOCK WaitQueueLock;
    struct _LIST_ENTRY WaitQueue;
    struct _KSEMAPHORE *Semaphore;
    struct _KEVENT *DummyEvent;
    struct _ALPC_PORT_ATTRIBUTES PortAttributes;
    struct _EX_PUSH_LOCK ResourceListLock;
    struct _LIST_ENTRY ResourceListHead;
    struct _EX_PUSH_LOCK PortObjectLock;
    struct _ALPC_COMPLETION_LIST *CompletionList;
    struct _CALLBACK_OBJECT *CallbackObject;
    PVOID CallbackContext;
    struct _LIST_ENTRY CanceledQueue;
    LONG SequenceNo;
    LONG ReferenceNo;
    struct _PALPC_PORT_REFERENCE_WAIT_BLOCK *ReferenceNoWait;
    union {
        struct {
            ULONG Initialized : 1;
            ULONG Type : 2;
            ULONG ConnectionPending : 1;
            ULONG ConnectionRefused : 1;
            ULONG Disconnected : 1;
            ULONG Closed : 1;
            ULONG NoFlushOnClose : 1;
            ULONG ReturnExtendedInfo : 1;
            ULONG Waitable : 1;
            ULONG DynamicSecurity : 1;
            ULONG Wow64CompletionList : 1;
            ULONG Lpc : 1;
            ULONG LpcToLpc : 1;
            ULONG HasCompletionList : 1;
            ULONG HadCompletionList : 1;
            ULONG EnableCompletionList : 1;
        } s1;
        ULONG State;
    } u1;
    struct _ALPC_PORT *TargetQueuePort;
    struct _ALPC_PORT *TargetSequencePort;
    struct _KALPC_MESSAGE *CachedMessage;
    ULONG MainQueueLength;
    ULONG LargeMessageQueueLength;
    ULONG PendingQueueLength;
    ULONG DirectQueueLength;
    ULONG CanceledQueueLength;
    ULONG WaitQueueLength;
};

typedef struct _ALPC_PORT_ATTRIBUTES {
    ULONG Flags;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    ULONG64 MaxMessageLength;
    ULONG64 MemoryBandwidth;
    ULONG64 MaxPoolUsage;
    ULONG64 MaxSectionSize;
    ULONG64 MaxViewSize;
    ULONG64 MaxTotalSectionSize;
    ULONG DupObjectTypes;
    ULONG Reserved;
};

typedef struct _ALPC_PROCESS_CONTEXT {
    struct _EX_PUSH_LOCK Lock;
    struct _LIST_ENTRY ViewListHead;
    ULONG64 PagedPoolQuotaCache;
};

typedef struct _ALPC_WORK_ON_BEHALF_TICKET {
    ULONG ThreadId;
    ULONG ThreadCreationTimeLow;
};

typedef struct _AMD64_DBGKD_CONTROL_SET {
    ULONG TraceFlag;
    ULONG64 Dr7;
    ULONG64 CurrentSymbolStart;
    ULONG64 CurrentSymbolEnd;
};

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS {
    struct _DEVICE_OBJECT *ReserveDevice;
};

typedef struct _ARBITER_ALLOCATION_STATE {
    ULONG64 Start;
    ULONG64 End;
    ULONG64 CurrentMinimum;
    ULONG64 CurrentMaximum;
    struct _ARBITER_LIST_ENTRY *Entry;
    struct _ARBITER_ALTERNATIVE *CurrentAlternative;
    ULONG AlternativeCount;
    struct _ARBITER_ALTERNATIVE *Alternatives;
    USHORT Flags;
    UCHAR RangeAttributes;
    UCHAR RangeAvailableAttributes;
    ULONG64 WorkSpace;
};

typedef struct _ARBITER_ALTERNATIVE {
    ULONG64 Minimum;
    ULONG64 Maximum;
    ULONG64 Length;
    ULONG64 Alignment;
    LONG Priority;
    ULONG Flags;
    struct _IO_RESOURCE_DESCRIPTOR *Descriptor;
    ULONG Reserved[3];
};

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_CONFLICT_INFO {
    struct _DEVICE_OBJECT *OwningObject;
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_INSTANCE {
    ULONG Signature;
    struct _KEVENT *MutexEvent;
    PWCHAR Name;
    PWCHAR OrderingName;
    LONG ResourceType;
    struct _RTL_RANGE_LIST *Allocation;
    struct _RTL_RANGE_LIST *PossibleAllocation;
    struct _ARBITER_ORDERING_LIST OrderingList;
    struct _ARBITER_ORDERING_LIST ReservedList;
    LONG ReferenceCount;
    struct _ARBITER_INTERFACE *Interface;
    ULONG AllocationStackMaxSize;
    struct _ARBITER_ALLOCATION_STATE *AllocationStack;
    PLONG UnpackRequirement;
    PLONG PackResource;
    PLONG UnpackResource;
    PLONG ScoreRequirement;
    PLONG TestAllocation;
    PLONG RetestAllocation;
    PLONG CommitAllocation;
    PLONG RollbackAllocation;
    PLONG BootAllocation;
    PLONG QueryArbitrate;
    PLONG QueryConflict;
    PLONG AddReserved;
    PLONG StartArbiter;
    PLONG PreprocessEntry;
    PLONG AllocateEntry;
    PUCHAR GetNextAllocationRange;
    PUCHAR FindSuitableRange;
    PVOID AddAllocation;
    PVOID BacktrackAllocation;
    PUCHAR OverrideConflict;
    PLONG InitializeRangeList;
    PLONG DeleteOwnerRanges;
    UCHAR TransactionInProgress;
    struct _KEVENT *TransactionEvent;
    PVOID Extension;
    struct _DEVICE_OBJECT *BusDeviceObject;
    PVOID ConflictCallbackContext;
    PUCHAR ConflictCallback;
};

typedef struct _ARBITER_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG ArbiterHandler;
    ULONG Flags;
};

typedef struct _ARBITER_LIST_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG AlternativeCount;
    struct _IO_RESOURCE_DESCRIPTOR *Alternatives;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    enum _ARBITER_REQUEST_SOURCE RequestSource;
    ULONG Flags;
    LONG64 WorkSpace;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG SlotNumber;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *Assignment;
    struct _IO_RESOURCE_DESCRIPTOR *SelectedAlternative;
    enum _ARBITER_RESULT Result;
};

typedef struct _ARBITER_ORDERING {
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_ORDERING_LIST {
    USHORT Count;
    USHORT Maximum;
    struct _ARBITER_ORDERING *Orderings;
};

typedef struct _ARBITER_PARAMETERS {
    union {
        struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
        struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
        struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
        struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
        struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
        struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
        struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    } Parameters;
};

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS {
    struct _CM_PARTIAL_RESOURCE_LIST **AllocatedResources;
};

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _IO_RESOURCE_DESCRIPTOR *ConflictingResource;
    PULONG ConflictCount;
    struct _ARBITER_CONFLICT_INFO **Conflicts;
};

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARC_DISK_INFORMATION {
    struct _LIST_ENTRY DiskSignatures;
};

typedef struct _ARM64_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG TraceFlag;
    ULONG64 CurrentSymbolStart;
    ULONG64 CurrentSymbolEnd;
};

typedef struct _ARMCE_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _ARM_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _ARM_LOADER_BLOCK {
    ULONG PlaceHolder;
};

typedef struct _ASSEMBLY_STORAGE_MAP {
};

typedef struct _ASYNC_READ_THREAD_STATS {
    ULONG CurrentLoad[101];
};

typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION {
    ULONG DeviceGroupsCount;
    struct _SID_AND_ATTRIBUTES *pDeviceGroups;
    ULONG RestrictedDeviceGroupsCount;
    struct _SID_AND_ATTRIBUTES *pRestrictedDeviceGroups;
    struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;
    struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pUserSecurityAttributes;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pDeviceSecurityAttributes;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pRestrictedUserSecurityAttributes;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pRestrictedDeviceSecurityAttributes;
};

typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION {
    ULONG SecurityAttributeCount;
    struct _LIST_ENTRY SecurityAttributesList;
    ULONG WorkingSecurityAttributeCount;
    struct _LIST_ENTRY WorkingSecurityAttributesList;
};

typedef struct _AUX_ACCESS_DATA {
    struct _PRIVILEGE_SET *PrivilegesUsed;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG AccessesToAudit;
    ULONG MaximumAuditMask;
    struct _GUID TransactionId;
    PVOID NewSecurityDescriptor;
    PVOID ExistingSecurityDescriptor;
    PVOID ParentSecurityDescriptor;
    PVOID DeRefSecurityDescriptor;
    PVOID SDLock;
    struct _ACCESS_REASONS AccessReasons;
    UCHAR GenerateStagingEvents;
};

typedef struct _BITMAP_RANGE {
    struct _LIST_ENTRY Links;
    LONG64 BasePage;
    ULONG FirstDirtyPage;
    ULONG LastDirtyPage;
    ULONG DirtyPages;
    PULONG Bitmap;
};

typedef struct _BLOB {
    struct _LIST_ENTRY ResourceList;
    struct _SLIST_ENTRY FreeListEntry;
    union {
        struct {
            UCHAR ReferenceCache : 1;
            UCHAR Lookaside : 1;
            UCHAR Initializing : 1;
            UCHAR Deleted : 1;
        } s1;
        UCHAR Flags;
    } u1;
    UCHAR ResourceId;
    SHORT CachedReferences;
    LONG64 ReferenceCount;
    struct _EX_PUSH_LOCK Lock;
};

typedef struct _BLOB_COUNTERS {
    ULONG CreatedObjects;
    ULONG DeletedObjects;
};

typedef struct _BLOB_TYPE {
    enum _BLOB_ID ResourceId;
    ULONG PoolTag;
    ULONG LookasideIndex;
    ULONG Flags;
    struct _BLOB_COUNTERS *Counters;
    PVOID CleanupProcedure;
    PVOID DeleteProcedure;
    PLONG DestroyProcedure;
    ULONG64 UsualSize;
};

typedef struct _BOOT_ENTROPY_LDR_RESULT {
    ULONG maxEntropySources;
    struct _BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[10];
    UCHAR SeedBytesForCng[48];
    UCHAR RngBytesForNtoskrnl[1024];
    UCHAR KdEntropy[32];
};

typedef struct _BOOT_ENTROPY_SOURCE_LDR_RESULT {
    enum _BOOT_ENTROPY_SOURCE_ID SourceId;
    ULONG64 Policy;
    enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
    LONG ResultStatus;
    ULONG64 Time;
    ULONG EntropyLength;
    UCHAR EntropyData[64];
};

typedef struct _BUS_EXTENSION_LIST {
    PVOID Next;
    struct _PI_BUS_EXTENSION *BusExtension;
};

typedef struct _BUS_HANDLER {
    ULONG Version;
    enum _INTERFACE_TYPE InterfaceType;
    enum _BUS_DATA_TYPE ConfigurationType;
    ULONG BusNumber;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _BUS_HANDLER *ParentHandler;
    PVOID BusData;
    ULONG DeviceControlExtensionSize;
    struct _SUPPORTED_RANGES *BusAddresses;
    ULONG Reserved[4];
    PULONG GetBusData;
    PULONG SetBusData;
    PLONG AdjustResourceList;
    PLONG AssignSlotResources;
    PUCHAR TranslateBusAddress;
    PVOID Spare1;
    PVOID Spare2;
    PVOID Spare3;
    PVOID Spare4;
    PVOID Spare5;
    PVOID Spare6;
    PVOID Spare7;
    PVOID Spare8;
};

typedef struct _CACHED_CHILD_LIST {
    ULONG Count;
    ULONG64 ValueList;
    struct _CM_KEY_CONTROL_BLOCK *RealKcb;
};

typedef struct _CACHED_KSTACK_LIST {
    union _SLIST_HEADER SListHead;
    LONG MinimumFree;
    ULONG Misses;
    ULONG MissesLast;
    ULONG AllStacksInUse;
};

typedef struct _CACHE_DESCRIPTOR {
    UCHAR Level;
    UCHAR Associativity;
    USHORT LineSize;
    ULONG Size;
    enum _PROCESSOR_CACHE_TYPE Type;
};

typedef struct _CACHE_MANAGER_CALLBACKS {
    PUCHAR AcquireForLazyWrite;
    PVOID ReleaseFromLazyWrite;
    PUCHAR AcquireForReadAhead;
    PVOID ReleaseFromReadAhead;
};

typedef struct _CACHE_UNINITIALIZE_EVENT {
    struct _CACHE_UNINITIALIZE_EVENT *Next;
    struct _KEVENT Event;
};

typedef struct _CALLBACK_OBJECT {
};

typedef struct _CALL_HASH_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID CallersAddress;
    PVOID CallersCaller;
    ULONG CallCount;
};

typedef struct _CALL_PERFORMANCE_DATA {
    ULONG64 SpinLock;
    struct _LIST_ENTRY HashTable[64];
};

typedef struct _CC_ASYNC_READ_CONTEXT {
    PUCHAR CompletionRoutine;
    PVOID Context;
    struct _MDL *Mdl;
    CHAR RequestorMode;
    ULONG NestingLevel;
};

typedef struct _CC_EXTERNAL_CACHE_INFO {
    PVOID Callback;
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
    struct _LIST_ENTRY Links;
};

typedef struct _CC_PARTITION {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    struct _EPARTITION *PartitionObject;
    struct _LIST_ENTRY CleanSharedCacheMapList;
    struct _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;
    struct _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;
    struct _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;
    struct _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;
    ULONG64 PrivateLock;
    ULONG ConsecutiveWorklessLazyScanCount;
    UCHAR ForcedDisableLazywriteScan;
    ULONG64 WorkQueueLock;
    ULONG NumberWorkerThreads;
    ULONG NumberActiveWorkerThreads;
    struct _LIST_ENTRY IdleWorkerThreadList;
    struct _LIST_ENTRY FastTeardownWorkQueue;
    struct _LIST_ENTRY ExpressWorkQueue;
    struct _LIST_ENTRY RegularWorkQueue;
    struct _LIST_ENTRY PostTickWorkQueue;
    struct _LIST_ENTRY IdleExtraWriteBehindThreadList;
    ULONG ActiveExtraWriteBehindThreads;
    ULONG MaxExtraWriteBehindThreads;
    UCHAR QueueThrottle;
    ULONG PostTickWorkItemCount;
    ULONG ThreadsActiveBeforeThrottle;
    ULONG ExtraWBThreadsActiveBeforeThrottle;
    ULONG ExecutingWriteBehindWorkItems;
    ULONG ExecutingHighPriorityWorkItem;
    struct _KEVENT LowMemoryEvent;
    struct _KEVENT PowerEvent;
    struct _KEVENT PeriodicEvent;
    struct _KEVENT WaitingForTeardownEvent;
    struct _KEVENT CoalescingFlushEvent;
    ULONG PagesYetToWrite;
    struct _LAZY_WRITER LazyWriter;
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
    struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
    struct _WRITE_BEHIND_THROUGHPUT *ThroughputStats;
    LONG ThroughputTrend;
    ULONG64 AverageAvailablePages;
    ULONG64 AverageDirtyPages;
    ULONG64 PagesSkippedDueToHotSpot;
    union _LARGE_INTEGER PrevRegularQueueItemRunTime;
    union _LARGE_INTEGER PrevExtraWBThreadCheckTime;
    UCHAR AddExtraWriteBehindThreads;
    UCHAR RemoveExtraThreadPending;
    struct _LIST_ENTRY DeferredWrites;
    ULONG64 DeferredWriteSpinLock;
    struct _LIST_ENTRY *IdleAsyncReadWorkerThreadList;
    PULONG NumberActiveAsyncReadWorkerThreads;
    PULONG NumberActiveCompleteAsyncReadWorkItems;
    struct _LIST_ENTRY *AsyncReadWorkQueue;
    struct _LIST_ENTRY *AsyncReadCompletionWorkQueue;
    struct _KEVENT *NewAsyncReadRequestEvent;
    struct _ASYNC_READ_THREAD_STATS *ReaderThreadsStats;
    struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;
    struct _LIST_ENTRY VacbFreeHighPriorityList;
    ULONG NumberOfFreeHighPriorityVacbs;
    struct _ETHREAD *LowPriWorkerThread;
    struct _SHARED_CACHE_MAP *LowPriSharedCacheMap;
    LONG LowPriOldCpuPriority;
    enum _IO_PRIORITY_HINT LowPriOldIoPriority;
    struct _EX_PUSH_LOCK LowPriorityWorkerThreadLock;
    ULONG MaxNumberOfWriteBehindThreads;
    UCHAR CoalescingState;
    UCHAR ActivePartition;
    UCHAR RundownPhase;
    LONG64 RefCount;
    struct _KEVENT ExitEvent;
    struct _KEVENT FinalDereferenceEvent;
    PVOID LazyWriteScanThreadHandle;
};

typedef struct _CELL_DATA {
    union _u u;
};

typedef struct _CHILD_LIST {
    ULONG Count;
    ULONG List;
};

typedef struct _CI_NGEN_PATHS {
};

typedef struct _CLIENT_ID {
    PVOID UniqueProcess;
    PVOID UniqueThread;
};

typedef struct _CLIENT_ID32 {
    ULONG UniqueProcess;
    ULONG UniqueThread;
};

typedef struct _CLIENT_ID64 {
    ULONG64 UniqueProcess;
    ULONG64 UniqueThread;
};

typedef struct _CMHIVE {
    struct _HHIVE Hive;
    PVOID FileHandles[6];
    struct _LIST_ENTRY NotifyList;
    struct _LIST_ENTRY HiveList;
    struct _LIST_ENTRY PreloadedHiveList;
    struct _EX_RUNDOWN_REF HiveRundown;
    struct _CM_KEY_HASH_TABLE_ENTRY *KcbCacheTable;
    ULONG KcbCacheTableSize;
    struct _CM_KEY_HASH_TABLE_ENTRY *DeletedKcbTable;
    ULONG DeletedKcbTableSize;
    ULONG Identity;
    struct _CMSI_RW_LOCK HiveLock;
    struct _RTL_BITMAP FlushDirtyVector;
    ULONG FlushDirtyVectorSize;
    PUCHAR FlushLogEntry;
    ULONG FlushLogEntrySize;
    ULONG FlushHiveTruncated;
    UCHAR FlushBaseBlockDirty;
    struct _RTL_BITMAP CapturedUnreconciledVector;
    ULONG CapturedUnreconciledVectorSize;
    struct CMP_OFFSET_ARRAY *UnreconciledOffsetArray;
    ULONG UnreconciledOffsetArrayCount;
    struct _HBASE_BLOCK *UnreconciledBaseBlock;
    struct _EX_PUSH_LOCK SecurityLock;
    ULONG LastShrinkHiveSize;
    union _LARGE_INTEGER ActualFileSize;
    union _LARGE_INTEGER LogFileSizes[2];
    struct _UNICODE_STRING FileFullPath;
    struct _UNICODE_STRING FileUserName;
    struct _UNICODE_STRING HiveRootPath;
    ULONG SecurityCount;
    ULONG SecurityCacheSize;
    LONG SecurityHitHint;
    struct _CM_KEY_SECURITY_CACHE_ENTRY *SecurityCache;
    struct _LIST_ENTRY SecurityHash[64];
    ULONG UnloadEventCount;
    struct _KEVENT **UnloadEventArray;
    struct _CM_KEY_CONTROL_BLOCK *RootKcb;
    UCHAR Frozen;
    struct _CM_WORKITEM *UnloadWorkItem;
    struct _CM_WORKITEM UnloadWorkItemHolder;
    struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;
    ULONG Flags;
    struct _LIST_ENTRY TrustClassEntry;
    ULONG64 DirtyTime;
    ULONG64 UnreconciledTime;
    struct _CM_RM *CmRm;
    ULONG CmRmInitFailPoint;
    LONG CmRmInitFailStatus;
    struct _KTHREAD *CreatorOwner;
    struct _KTHREAD *RundownThread;
    union _LARGE_INTEGER LastWriteTime;
    struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;
    struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;
    ULONG FlushFlags;
    ULONG FlushActive : 1;
    ULONG ReconcileActive : 1;
    ULONG PrimaryFilePurged : 1;
    ULONG DiskFileBad : 1;
    ULONG PrimaryFileSizeBeforeLastFlush;
    LONG ReferenceCount;
    LONG UnloadHistoryIndex;
    ULONG UnloadHistory[128];
    ULONG BootStart;
    ULONG UnaccessedStart;
    ULONG UnaccessedEnd;
    ULONG LoadedKeyCount;
    ULONG HandleClosePending;
    struct _EX_PUSH_LOCK HandleClosePendingEvent;
    UCHAR FinalFlushSucceeded;
    struct _CMP_VOLUME_CONTEXT *VolumeContext;
};

typedef struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT {
    struct _CM_KEY_CONTROL_BLOCK *BaseKcb;
    LONG PrepareStatus;
    struct _LIST_ENTRY ClonedKcbListHead;
};

typedef struct _CMP_VOLUME_CONTEXT {
    struct _LIST_ENTRY VolumeContextListEntry;
    struct _CMP_VOLUME_MANAGER *VolumeManager;
    LONG64 RefCount;
    struct _GUID VolumeGuid;
    PVOID VolumeFileObject;
    struct _CMSI_RW_LOCK VolumeContextLock;
    UCHAR DeviceUsageNotificationSent;
};

typedef struct _CMP_VOLUME_MANAGER {
    struct _CMSI_RW_LOCK VolumeContextListLock;
    struct _LIST_ENTRY VolumeContextListHead;
};

typedef struct _CMSI_PROCESS_TUPLE {
    PVOID ProcessHandle;
    PVOID ProcessReference;
};

typedef struct _CMSI_RW_LOCK {
    PVOID Reserved;
};

typedef struct _CM_BIG_DATA {
    USHORT Signature;
    USHORT Count;
    ULONG List;
};

typedef struct _CM_CACHED_VALUE_INDEX {
    ULONG CellIndex;
    union {
        struct _CELL_DATA CellData;
        ULONG64 List[1];
    } Data;
};

typedef struct _CM_COMPONENT_HASH {
    ULONG Hash;
};

typedef struct _CM_DIRTY_VECTOR_LOG {
    ULONG Next;
    ULONG Size;
    struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];
};

typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY {
    struct _ETHREAD *Thread;
    enum _CM_DIRTY_VECTOR_OPERATION Operation;
    union {
        struct {
            ULONG Start;
            ULONG Length;
        } DirtyVectorModifiedContext;
        struct {
            ULONG RangeCount;
            ULONG SetBitCount;
        } DirtyDataCaptureContext;
        struct {
            ULONG Context1;
            ULONG Context2;
        } Raw;
    } Data;
    PVOID Stack[6];
};

typedef struct _CM_FAST_LEAF_HINT {
    UCHAR Characters[4];
    ULONG FullHint;
};

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

typedef struct _CM_INDEX {
    ULONG Cell;
    struct _CM_FAST_LEAF_HINT NameHint;
    struct _CM_COMPONENT_HASH HashKey;
};

typedef struct _CM_INDEX_HINT_BLOCK {
    ULONG Count;
    ULONG HashKey[1];
};

typedef struct _CM_INTENT_LOCK {
    ULONG OwnerCount;
    struct _CM_KCB_UOW **OwnerTable;
};

typedef struct _CM_KCB_LAYER_INFO {
    struct _LIST_ENTRY LayerListEntry;
    struct _CM_KEY_CONTROL_BLOCK *Kcb;
    struct _CM_KCB_LAYER_INFO *LowerLayer;
    struct _LIST_ENTRY UpperLayerListHead;
};

typedef struct _CM_KCB_UOW {
    struct _LIST_ENTRY TransactionListEntry;
    struct _CM_INTENT_LOCK *KCBLock;
    struct _CM_INTENT_LOCK *KeyLock;
    struct _LIST_ENTRY KCBListEntry;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_TRANS *Transaction;
    ULONG UoWState;
    enum UoWActionType ActionType;
    enum HSTORAGE_TYPE StorageType;
    struct _CM_KCB_UOW *ParentUoW;
    struct _CM_KEY_CONTROL_BLOCK *ChildKCB;
    ULONG VolatileKeyCell;
    ULONG OldValueCell;
    ULONG NewValueCell;
    ULONG UserFlags;
    union _LARGE_INTEGER LastWriteTime;
    struct _CM_KEY_SECURITY_CACHE *TxCachedSecurity;
    ULONG TxSecurityCell;
    struct _CM_KEY_CONTROL_BLOCK *OldChildKCB;
    struct _CM_KEY_CONTROL_BLOCK *NewChildKCB;
    struct _CM_KEY_CONTROL_BLOCK *OtherChildKCB;
    ULONG ThisVolatileKeyCell;
    PVOID PrepareDataPointer;
    struct _CM_UOW_SET_SD_DATA *SecurityData;
    struct _CM_UOW_KEY_STATE_MODIFICATION *ModifyKeysData;
    struct _CM_UOW_SET_VALUE_LIST_DATA *SetValueData;
    struct _CM_UOW_SET_VALUE_KEY_DATA *ValueData;
    struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT *DiscardReplaceContext;
};

typedef struct _CM_KEY_BODY {
    ULONG Type;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_NOTIFY_BLOCK *NotifyBlock;
    PVOID ProcessID;
    struct _LIST_ENTRY KeyBodyList;
    ULONG Flags : 16;
    ULONG HandleTags : 16;
    union _CM_TRANS_PTR Trans;
    struct _GUID *KtmUow;
    struct _LIST_ENTRY ContextListHead;
    PVOID EnumerationResumeContext;
};

typedef struct _CM_KEY_CONTROL_BLOCK {
    ULONG RefCount;
    ULONG ExtFlags : 16;
    ULONG PrivateAlloc : 1;
    ULONG Discarded : 1;
    ULONG HiveUnloaded : 1;
    ULONG Decommissioned : 1;
    ULONG SpareExtFlag : 1;
    ULONG TotalLevels : 10;
    struct _CM_KEY_HASH KeyHash;
    struct _CM_PATH_HASH ConvKey;
    struct _CM_KEY_HASH *NextHash;
    struct _HHIVE *KeyHive;
    ULONG KeyCell;
    struct _EX_PUSH_LOCK KcbPushlock;
    struct _KTHREAD *Owner;
    LONG SharedCount;
    UCHAR DelayedDeref : 1;
    UCHAR DelayedClose : 1;
    UCHAR Parking : 1;
    UCHAR LayerSemantics;
    SHORT LayerHeight;
    ULONG Spare1;
    struct _CM_KEY_CONTROL_BLOCK *ParentKcb;
    struct _CM_NAME_CONTROL_BLOCK *NameBlock;
    struct _CM_KEY_SECURITY_CACHE *CachedSecurity;
    struct _CACHED_CHILD_LIST ValueCache;
    struct _CM_INDEX_HINT_BLOCK *IndexHint;
    ULONG HashKey;
    ULONG SubKeyCount;
    struct _LIST_ENTRY KeyBodyListHead;
    struct _LIST_ENTRY FreeListEntry;
    struct _CM_KEY_BODY *KeyBodyArray[4];
    union _LARGE_INTEGER KcbLastWriteTime;
    USHORT KcbMaxNameLen;
    USHORT KcbMaxValueNameLen;
    ULONG KcbMaxValueDataLen;
    ULONG KcbUserFlags : 4;
    ULONG KcbVirtControlFlags : 4;
    ULONG KcbDebug : 8;
    ULONG Flags : 16;
    ULONG Spare3;
    struct _CM_KCB_LAYER_INFO *LayerInfo;
    PCHAR RealKeyName;
    struct _LIST_ENTRY KCBUoWListHead;
    struct _LIST_ENTRY DelayQueueEntry;
    PUCHAR Stolen;
    struct _CM_TRANS *TransKCBOwner;
    struct _CM_INTENT_LOCK KCBLock;
    struct _CM_INTENT_LOCK KeyLock;
    struct _CHILD_LIST TransValueCache;
    struct _CM_TRANS *TransValueListOwner;
    struct _UNICODE_STRING *FullKCBName;
    ULONG64 FullKCBNameStale : 1;
    ULONG64 Reserved : 63;
    ULONG64 SequenceNumber;
};

typedef struct _CM_KEY_HASH {
    struct _CM_PATH_HASH ConvKey;
    struct _CM_KEY_HASH *NextHash;
    struct _HHIVE *KeyHive;
    ULONG KeyCell;
};

typedef struct _CM_KEY_HASH_TABLE_ENTRY {
    struct _EX_PUSH_LOCK Lock;
    struct _KTHREAD *Owner;
    struct _CM_KEY_HASH *Entry;
};

typedef struct _CM_KEY_INDEX {
    USHORT Signature;
    USHORT Count;
    ULONG List[1];
};

typedef struct _CM_KEY_NODE {
    USHORT Signature;
    USHORT Flags;
    union _LARGE_INTEGER LastWriteTime;
    UCHAR AccessBits;
    UCHAR LayerSemantics : 2;
    UCHAR Spare1 : 5;
    UCHAR InheritClass : 1;
    USHORT Spare2;
    ULONG Parent;
    ULONG SubKeyCounts[2];
    ULONG SubKeyLists[2];
    struct _CHILD_LIST ValueList;
    struct _CM_KEY_REFERENCE ChildHiveReference;
    ULONG Security;
    ULONG Class;
    ULONG MaxNameLen : 16;
    ULONG UserFlags : 4;
    ULONG VirtControlFlags : 4;
    ULONG Debug : 8;
    ULONG MaxClassLen;
    ULONG MaxValueNameLen;
    ULONG MaxValueDataLen;
    ULONG WorkVar;
    USHORT NameLength;
    USHORT ClassLength;
    WCHAR Name[1];
};

typedef struct _CM_KEY_REFERENCE {
    ULONG KeyCell;
    struct _HHIVE *KeyHive;
};

typedef struct _CM_KEY_SECURITY {
    USHORT Signature;
    USHORT Reserved;
    ULONG Flink;
    ULONG Blink;
    ULONG ReferenceCount;
    ULONG DescriptorLength;
    struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
};

typedef struct _CM_KEY_SECURITY_CACHE {
    ULONG Cell;
    ULONG ConvKey;
    struct _LIST_ENTRY List;
    ULONG DescriptorLength;
    ULONG RealRefCount;
    struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
};

typedef struct _CM_KEY_SECURITY_CACHE_ENTRY {
    ULONG Cell;
    struct _CM_KEY_SECURITY_CACHE *CachedSecurity;
};

typedef struct _CM_KEY_VALUE {
    USHORT Signature;
    USHORT NameLength;
    ULONG DataLength;
    ULONG Data;
    ULONG Type;
    USHORT Flags;
    USHORT Spare;
    WCHAR Name[1];
};

typedef struct _CM_NAME_CONTROL_BLOCK {
    ULONG Compressed : 1;
    ULONG RefCount : 31;
    struct _CM_NAME_HASH NameHash;
    struct _CM_COMPONENT_HASH ConvKey;
    struct _CM_KEY_HASH *NextHash;
    USHORT NameLength;
    WCHAR Name[1];
};

typedef struct _CM_NAME_HASH {
    struct _CM_COMPONENT_HASH ConvKey;
    struct _CM_NAME_HASH *NextHash;
    USHORT NameLength;
    WCHAR Name[1];
};

typedef struct _CM_NOTIFY_BLOCK {
    struct _LIST_ENTRY HiveList;
    struct _LIST_ENTRY PostList;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_KEY_BODY *KeyBody;
    ULONG Filter : 30;
    ULONG WatchTree : 1;
    ULONG NotifyPending : 1;
    struct _SECURITY_SUBJECT_CONTEXT SubjectContext;
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
    union {
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Generic;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Port;
        struct {
            USHORT Level;
            USHORT Group;
            ULONG Vector;
            ULONG64 Affinity;
        } Interrupt;
        struct {
            struct {
                USHORT Group;
                USHORT MessageCount;
                ULONG Vector;
                ULONG64 Affinity;
            } Raw;
            struct {
                USHORT Level;
                USHORT Group;
                ULONG Vector;
                ULONG64 Affinity;
            } Translated;
        } MessageInterrupt;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Memory;
        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;
        struct {
            ULONG Channel;
            ULONG RequestLine;
            UCHAR TransferWidth;
            UCHAR Reserved1;
            UCHAR Reserved2;
            UCHAR Reserved3;
        } DmaV3;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length40;
        } Memory40;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length48;
        } Memory48;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length64;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

typedef struct _CM_PATH_HASH {
    ULONG Hash;
};

typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

typedef struct _CM_RM {
    struct _LIST_ENTRY RmListEntry;
    struct _LIST_ENTRY TransactionListHead;
    PVOID TmHandle;
    PVOID Tm;
    PVOID RmHandle;
    PVOID KtmRm;
    ULONG RefCount;
    ULONG ContainerNum;
    ULONG64 ContainerSize;
    struct _CMHIVE *CmHive;
    PVOID LogFileObject;
    PVOID MarshallingContext;
    ULONG RmFlags;
    LONG LogStartStatus1;
    LONG LogStartStatus2;
    ULONG64 BaseLsn;
    struct _ERESOURCE *RmLock;
};

typedef struct _CM_TRANS {
    struct _LIST_ENTRY TransactionListEntry;
    struct _LIST_ENTRY KCBUoWListHead;
    struct _LIST_ENTRY LazyCommitListEntry;
    ULONG Prepared : 1;
    ULONG Aborted : 1;
    ULONG Committed : 1;
    ULONG Initializing : 1;
    ULONG Invalid : 1;
    ULONG UseReservation : 1;
    ULONG TmCallbacksActive : 1;
    ULONG LightWeight : 1;
    ULONG Freed1 : 1;
    ULONG Freed2 : 1;
    ULONG Spare1 : 2;
    ULONG Freed : 1;
    ULONG Spare : 19;
    ULONG TransState;
    union _CM_TRANS_PTR Trans;
    struct _CM_RM *CmRm;
    struct _KENLISTMENT *KtmEnlistmentObject;
    PVOID KtmEnlistmentHandle;
    struct _GUID KtmUow;
    ULONG64 StartLsn;
    ULONG HiveCount;
    struct _CMHIVE *HiveArray[8];
};

typedef struct _CM_UOW_KEY_STATE_MODIFICATION {
    ULONG RefCount;
    ULONG SubKeyListCount[2];
    ULONG NewSubKeyList[2];
};

typedef struct _CM_UOW_SET_SD_DATA {
    ULONG SecurityCell;
};

typedef struct _CM_UOW_SET_VALUE_KEY_DATA {
    ULONG PreparedCell;
    ULONG OldValueCell;
    USHORT NameLength;
    ULONG DataSize;
};

typedef struct _CM_UOW_SET_VALUE_LIST_DATA {
    ULONG RefCount;
    struct _CHILD_LIST ValueList;
};

typedef struct _CM_WORKITEM {
    struct _LIST_ENTRY ListEntry;
    ULONG Private;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _COMPRESSED_DATA_INFO {
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};

typedef struct _CONFIGURATION_COMPONENT {
    enum _CONFIGURATION_CLASS Class;
    enum _CONFIGURATION_TYPE Type;
    struct _DEVICE_FLAGS Flags;
    USHORT Version;
    USHORT Revision;
    ULONG Key;
    ULONG AffinityMask;
    USHORT Group;
    USHORT GroupIndex;
    ULONG ConfigurationDataLength;
    ULONG IdentifierLength;
    PCHAR Identifier;
};

typedef struct _CONFIGURATION_COMPONENT_DATA {
    struct _CONFIGURATION_COMPONENT_DATA *Parent;
    struct _CONFIGURATION_COMPONENT_DATA *Child;
    struct _CONFIGURATION_COMPONENT_DATA *Sibling;
    struct _CONFIGURATION_COMPONENT ComponentEntry;
    PVOID ConfigurationData;
};

typedef struct _CONTEXT {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5Home;
    ULONG64 P6Home;
    ULONG ContextFlags;
    ULONG MxCsr;
    USHORT SegCs;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    USHORT SegSs;
    ULONG EFlags;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rbx;
    ULONG64 Rsp;
    ULONG64 Rbp;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Rip;
    struct _XSAVE_FORMAT FltSave;
    struct _M128A Header[2];
    struct _M128A Legacy[8];
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    struct _M128A VectorRegister[26];
    ULONG64 VectorControl;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
};

typedef struct _CONTROL_AREA {
    struct _SEGMENT *Segment;
    struct _LIST_ENTRY ListHead;
    PVOID AweContext;
    ULONG64 NumberOfSectionReferences;
    ULONG64 NumberOfPfnReferences;
    ULONG64 NumberOfMappedViews;
    ULONG64 NumberOfUserReferences;
    union {
        ULONG LongFlags;
        struct _MMSECTION_FLAGS Flags;
    } u;
    union {
        ULONG LongFlags;
        struct _MMSECTION_FLAGS2 Flags;
    } u1;
    struct _EX_FAST_REF FilePointer;
    LONG ControlAreaLock;
    ULONG ModifiedWriteCount;
    struct _MI_CONTROL_AREA_WAIT_BLOCK *WaitList;
    union {
        struct {
            ULONG NumberOfSystemCacheViews;
            ULONG ImageRelocationStartBit;
            LONG WritableUserReferences;
            ULONG ImageRelocationSizeIn64k : 16;
            ULONG LargePage : 1;
            ULONG AweSection : 1;
            ULONG SystemImage : 1;
            ULONG StrongCode : 2;
            ULONG CantMove : 1;
            ULONG BitMap : 2;
            ULONG ImageActive : 1;
            ULONG ImageBaseOkToReuse : 1;
            ULONG FlushInProgressCount;
            ULONG NumberOfSubsections;
            struct _MI_IMAGE_SECURITY_REFERENCE *SeImageStub;
        } e2;
    } u2;
    struct _EX_PUSH_LOCK FileObjectLock;
    ULONG64 LockedPages;
    union {
        ULONG64 IoAttributionContext : 61;
        ULONG64 Spare : 3;
        ULONG64 ImageCrossPartitionCharge;
        ULONG64 CommittedPageCount : 36;
    } u3;
};

typedef struct _COUNTER_READING {
    enum _HARDWARE_COUNTER_TYPE Type;
    ULONG Index;
    ULONG64 Start;
    ULONG64 Total;
};

typedef struct _CRITICAL_PROCESS_EXCEPTION_DATA {
    struct _GUID ReportId;
    struct _UNICODE_STRING ModuleName;
    ULONG ModuleTimestamp;
    ULONG ModuleSize;
    ULONG64 Offset;
};

typedef struct _CURDIR {
    struct _UNICODE_STRING DosPath;
    PVOID Handle;
};

typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
    ULONG Size;
    PWCHAR TriggerId;
};

typedef struct _DBGKD_ANY_CONTROL_SET {
    struct _X86_DBGKD_CONTROL_SET X86ControlSet;
    ULONG AlphaControlSet;
    struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;
    struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
    struct _ARM_DBGKD_CONTROL_SET ArmControlSet;
    struct _ARM64_DBGKD_CONTROL_SET Arm64ControlSet;
    struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
    struct _PPC_DBGKD_CONTROL_SET PpcControlSet;
};

typedef struct _DBGKD_BREAKPOINTEX {
    ULONG BreakPointCount;
    LONG ContinueStatus;
};

typedef struct _DBGKD_CONTEXT_EX {
    ULONG Offset;
    ULONG ByteCount;
    ULONG BytesCopied;
};

typedef struct _DBGKD_CONTINUE {
    LONG ContinueStatus;
};

typedef struct _DBGKD_CONTINUE2 {
    LONG ContinueStatus;
    struct _AMD64_DBGKD_CONTROL_SET ControlSet;
    struct _DBGKD_ANY_CONTROL_SET AnyControlSet;
};

typedef struct _DBGKD_FILL_MEMORY {
    ULONG64 Address;
    ULONG Length;
    USHORT Flags;
    USHORT PatternLength;
};

typedef struct _DBGKD_GET_CONTEXT {
    ULONG Unused;
};

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32 {
    ULONG BreakpointAddress;
    ULONG Flags;
    ULONG Calls;
    ULONG MaxCallsPerPeriod;
    ULONG MinInstructions;
    ULONG MaxInstructions;
    ULONG TotalInstructions;
};

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64 {
    ULONG64 BreakpointAddress;
    ULONG Flags;
    ULONG Calls;
    ULONG MaxCallsPerPeriod;
    ULONG MinInstructions;
    ULONG MaxInstructions;
    ULONG TotalInstructions;
};

typedef struct _DBGKD_GET_SET_BUS_DATA {
    ULONG BusDataType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Offset;
    ULONG Length;
};

typedef struct _DBGKD_GET_VERSION32 {
    USHORT MajorVersion;
    USHORT MinorVersion;
    USHORT ProtocolVersion;
    USHORT Flags;
    ULONG KernBase;
    ULONG PsLoadedModuleList;
    USHORT MachineType;
    USHORT ThCallbackStack;
    USHORT NextCallback;
    USHORT FramePointer;
    ULONG KiCallUserMode;
    ULONG KeUserCallbackDispatcher;
    ULONG BreakpointWithStatus;
    ULONG DebuggerDataList;
};

typedef struct _DBGKD_GET_VERSION64 {
    USHORT MajorVersion;
    USHORT MinorVersion;
    UCHAR ProtocolVersion;
    UCHAR KdSecondaryVersion;
    USHORT Flags;
    USHORT MachineType;
    UCHAR MaxPacketType;
    UCHAR MaxStateChange;
    UCHAR MaxManipulate;
    UCHAR Simulation;
    USHORT Unused[1];
    ULONG64 KernBase;
    ULONG64 PsLoadedModuleList;
    ULONG64 DebuggerDataList;
};

typedef struct _DBGKD_LOAD_SYMBOLS32 {
    ULONG PathNameLength;
    ULONG BaseOfDll;
    ULONG ProcessId;
    ULONG CheckSum;
    ULONG SizeOfImage;
    UCHAR UnloadSymbols;
};

typedef struct _DBGKD_LOAD_SYMBOLS64 {
    ULONG PathNameLength;
    ULONG64 BaseOfDll;
    ULONG64 ProcessId;
    ULONG CheckSum;
    ULONG SizeOfImage;
    UCHAR UnloadSymbols;
};

typedef struct _DBGKD_MANIPULATE_STATE32 {
    ULONG ApiNumber;
    USHORT ProcessorLevel;
    USHORT Processor;
    LONG ReturnStatus;
    union {
        struct _DBGKD_READ_MEMORY32 ReadMemory;
        struct _DBGKD_WRITE_MEMORY32 WriteMemory;
        struct _DBGKD_READ_MEMORY64 ReadMemory64;
        struct _DBGKD_WRITE_MEMORY64 WriteMemory64;
        struct _DBGKD_GET_CONTEXT GetContext;
        struct _DBGKD_SET_CONTEXT SetContext;
        struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
        struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
        struct _DBGKD_CONTINUE Continue;
        struct _DBGKD_CONTINUE2 Continue2;
        struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;
        struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
        struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
        struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
        struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
        struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
        struct _DBGKD_GET_VERSION32 GetVersion32;
        struct _DBGKD_BREAKPOINTEX BreakPointEx;
        struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
        struct _DBGKD_SEARCH_MEMORY SearchMemory;
        struct _DBGKD_CONTEXT_EX GetContextEx;
        struct _DBGKD_CONTEXT_EX SetContextEx;
    } u;
};

typedef struct _DBGKD_MANIPULATE_STATE64 {
    ULONG ApiNumber;
    USHORT ProcessorLevel;
    USHORT Processor;
    LONG ReturnStatus;
    union {
        struct _DBGKD_READ_MEMORY64 ReadMemory;
        struct _DBGKD_WRITE_MEMORY64 WriteMemory;
        struct _DBGKD_GET_CONTEXT GetContext;
        struct _DBGKD_SET_CONTEXT SetContext;
        struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
        struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
        struct _DBGKD_CONTINUE Continue;
        struct _DBGKD_CONTINUE2 Continue2;
        struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;
        struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
        struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
        struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
        struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
        struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
        struct _DBGKD_GET_VERSION64 GetVersion64;
        struct _DBGKD_BREAKPOINTEX BreakPointEx;
        struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
        struct _DBGKD_SEARCH_MEMORY SearchMemory;
        struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;
        struct _DBGKD_FILL_MEMORY FillMemory;
        struct _DBGKD_QUERY_MEMORY QueryMemory;
        struct _DBGKD_SWITCH_PARTITION SwitchPartition;
        struct _DBGKD_CONTEXT_EX GetContextEx;
        struct _DBGKD_CONTEXT_EX SetContextEx;
        struct _DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;
    } u;
};

typedef struct _DBGKD_QUERY_MEMORY {
    ULONG64 Address;
    ULONG64 Reserved;
    ULONG AddressSpace;
    ULONG Flags;
};

typedef struct _DBGKD_QUERY_SPECIAL_CALLS {
    ULONG NumberOfSpecialCalls;
};

typedef struct _DBGKD_READ_MEMORY32 {
    ULONG TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesRead;
};

typedef struct _DBGKD_READ_MEMORY64 {
    ULONG64 TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesRead;
};

typedef struct _DBGKD_READ_WRITE_IO32 {
    ULONG DataSize;
    ULONG IoAddress;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_IO64 {
    ULONG64 IoAddress;
    ULONG DataSize;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32 {
    ULONG DataSize;
    ULONG InterfaceType;
    ULONG BusNumber;
    ULONG AddressSpace;
    ULONG IoAddress;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64 {
    ULONG DataSize;
    ULONG InterfaceType;
    ULONG BusNumber;
    ULONG AddressSpace;
    ULONG64 IoAddress;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_MSR {
    ULONG Msr;
    ULONG DataValueLow;
    ULONG DataValueHigh;
};

typedef struct _DBGKD_RESTORE_BREAKPOINT {
    ULONG BreakPointHandle;
};

typedef struct _DBGKD_SEARCH_MEMORY {
    ULONG64 SearchAddress;
    ULONG64 FoundAddress;
    ULONG64 SearchLength;
    ULONG PatternLength;
};

typedef struct _DBGKD_SET_CONTEXT {
    ULONG ContextFlags;
};

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32 {
    ULONG BreakpointAddress;
    ULONG Flags;
};

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64 {
    ULONG64 BreakpointAddress;
    ULONG Flags;
};

typedef struct _DBGKD_SET_SPECIAL_CALL32 {
    ULONG SpecialCall;
};

typedef struct _DBGKD_SET_SPECIAL_CALL64 {
    ULONG64 SpecialCall;
};

typedef struct _DBGKD_SWITCH_PARTITION {
    ULONG Partition;
};

typedef struct _DBGKD_WRITE_BREAKPOINT32 {
    ULONG BreakPointAddress;
    ULONG BreakPointHandle;
};

typedef struct _DBGKD_WRITE_BREAKPOINT64 {
    ULONG64 BreakPointAddress;
    ULONG BreakPointHandle;
};

typedef struct _DBGKD_WRITE_CUSTOM_BREAKPOINT {
    ULONG64 BreakPointAddress;
    ULONG64 BreakPointInstruction;
    ULONG BreakPointHandle;
    UCHAR BreakPointInstructionSize;
    UCHAR BreakPointInstructionAlignment;
};

typedef struct _DBGKD_WRITE_MEMORY32 {
    ULONG TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesWritten;
};

typedef struct _DBGKD_WRITE_MEMORY64 {
    ULONG64 TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesWritten;
};

typedef struct _DBGKM_EXCEPTION32 {
    struct _EXCEPTION_RECORD32 ExceptionRecord;
    ULONG FirstChance;
};

typedef struct _DBGKM_EXCEPTION64 {
    struct _EXCEPTION_RECORD64 ExceptionRecord;
    ULONG FirstChance;
};

typedef struct _DBGKP_ERROR_PORT {
};

typedef struct _DBGK_SILOSTATE {
    struct _EX_PUSH_LOCK ErrorPortLock;
    struct _DBGKP_ERROR_PORT *ErrorPort;
    struct _EPROCESS *ErrorProcess;
    struct _KEVENT *ErrorPortRegisteredEvent;
};

typedef struct _DEBUG_DEVICE_DESCRIPTOR {
    ULONG Bus;
    ULONG Slot;
    USHORT Segment;
    USHORT VendorID;
    USHORT DeviceID;
    UCHAR BaseClass;
    UCHAR SubClass;
    UCHAR ProgIf;
    UCHAR Flags;
    UCHAR DbgHalScratchAllocated : 1;
    UCHAR DbgBarsMapped : 1;
    UCHAR DbgScratchAllocated : 1;
    UCHAR Initialized;
    UCHAR Configured;
    struct DEBUG_DEVICE_ADDRESS BaseAddress[6];
    struct DEBUG_MEMORY_REQUIREMENTS Memory;
    USHORT PortType;
    USHORT PortSubtype;
    PVOID OemData;
    ULONG OemDataLength;
    enum KD_NAMESPACE_ENUM NameSpace;
    PWCHAR NameSpacePath;
    ULONG NameSpacePathLength;
    ULONG TransportType;
    struct _DEBUG_TRANSPORT_DATA TransportData;
};

typedef struct _DEBUG_TRANSPORT_DATA {
    ULONG HwContextSize;
    UCHAR UseSerialFraming;
    UCHAR ValidUSBCoreId;
    UCHAR USBCoreId;
};

typedef struct _DEFERRED_WRITE {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    struct _FILE_OBJECT *FileObject;
    ULONG BytesToWrite;
    struct _LIST_ENTRY DeferredWriteLinks;
    struct _KEVENT *Event;
    PVOID PostRoutine;
    PVOID Context1;
    PVOID Context2;
    struct _CC_PARTITION *Partition;
};

typedef struct _DELAY_ACK_FO {
    struct _LIST_ENTRY Links;
    struct _FILE_OBJECT *OriginalFileObject;
};

typedef struct _DEVICE_CAPABILITIES {
    USHORT Size;
    USHORT Version;
    ULONG DeviceD1 : 1;
    ULONG DeviceD2 : 1;
    ULONG LockSupported : 1;
    ULONG EjectSupported : 1;
    ULONG Removable : 1;
    ULONG DockDevice : 1;
    ULONG UniqueID : 1;
    ULONG SilentInstall : 1;
    ULONG RawDeviceOK : 1;
    ULONG SurpriseRemovalOK : 1;
    ULONG WakeFromD0 : 1;
    ULONG WakeFromD1 : 1;
    ULONG WakeFromD2 : 1;
    ULONG WakeFromD3 : 1;
    ULONG HardwareDisabled : 1;
    ULONG NonDynamic : 1;
    ULONG WarmEjectSupported : 1;
    ULONG NoDisplayInUI : 1;
    ULONG Reserved1 : 1;
    ULONG WakeFromInterrupt : 1;
    ULONG SecureDevice : 1;
    ULONG ChildOfVgaEnabledBridge : 1;
    ULONG DecodeIoOnBoot : 1;
    ULONG Reserved : 9;
    ULONG Address;
    ULONG UINumber;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _SYSTEM_POWER_STATE SystemWake;
    enum _DEVICE_POWER_STATE DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct _DEVICE_DATA_SET_RANGE {
    LONG64 StartingOffset;
    ULONG64 LengthInBytes;
};

typedef struct _DEVICE_DESCRIPTION {
    ULONG Version;
    UCHAR Master;
    UCHAR ScatterGather;
    UCHAR DemandMode;
    UCHAR AutoInitialize;
    UCHAR Dma32BitAddresses;
    UCHAR IgnoreCount;
    UCHAR Reserved1;
    UCHAR Dma64BitAddresses;
    ULONG BusNumber;
    ULONG DmaChannel;
    enum _INTERFACE_TYPE InterfaceType;
    enum _DMA_WIDTH DmaWidth;
    enum _DMA_SPEED DmaSpeed;
    ULONG MaximumLength;
    ULONG DmaPort;
    ULONG DmaAddressWidth;
    ULONG DmaControllerInstance;
    ULONG DmaRequestLine;
    union _LARGE_INTEGER DeviceAddress;
};

typedef struct _DEVICE_DSM_DEFINITION {
    ULONG Action;
    UCHAR SingleRange;
    ULONG ParameterBlockAlignment;
    ULONG ParameterBlockLength;
    UCHAR HasOutput;
    ULONG OutputBlockAlignment;
    ULONG OutputBlockLength;
};

typedef struct _DEVICE_FAULT_CONFIGURATION {
    PVOID FaultHandler;
    PVOID FaultContext;
};

typedef struct _DEVICE_FLAGS {
    ULONG Failed : 1;
    ULONG ReadOnly : 1;
    ULONG Removable : 1;
    ULONG ConsoleIn : 1;
    ULONG ConsoleOut : 1;
    ULONG Input : 1;
    ULONG Output : 1;
};

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
    ULONG Size;
    ULONG Action;
    ULONG Flags;
    ULONG ParameterBlockOffset;
    ULONG ParameterBlockLength;
    ULONG DataSetRangesOffset;
    ULONG DataSetRangesLength;
};

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {
    ULONG Size;
    ULONG Action;
    ULONG Flags;
    ULONG OperationStatus;
    ULONG ExtendedError;
    ULONG TargetDetailedError;
    ULONG ReservedStatus;
    ULONG OutputBlockOffset;
    ULONG OutputBlockLength;
};

typedef struct _DEVICE_MAP {
    struct _OBJECT_DIRECTORY *DosDevicesDirectory;
    struct _OBJECT_DIRECTORY *GlobalDosDevicesDirectory;
    PVOID DosDevicesDirectoryHandle;
    LONG ReferenceCount;
    ULONG DriveMap;
    UCHAR DriveType[32];
    struct _EJOB *ServerSilo;
};

typedef struct _DEVICE_NODE {
    struct _DEVICE_NODE *Sibling;
    struct _DEVICE_NODE *Child;
    struct _DEVICE_NODE *Parent;
    struct _DEVICE_NODE *LastChild;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _UNICODE_STRING InstancePath;
    struct _UNICODE_STRING ServiceName;
    struct _IRP *PendingIrp;
    struct _POP_FX_DEVICE *FxDevice;
    LONG FxDeviceLock;
    struct _KEVENT FxRemoveEvent;
    LONG FxActivationCount;
    LONG FxSleepCount;
    struct _POP_FX_PLUGIN *Plugin;
    ULONG Level;
    union _POWER_STATE CurrentPowerState;
    struct _PO_DEVICE_NOTIFY Notify;
    struct _PO_IRP_MANAGER PoIrpManager;
    struct _UNICODE_STRING UniqueId;
    ULONG PowerFlags;
    enum _PNP_DEVNODE_STATE State;
    enum _PNP_DEVNODE_STATE PreviousState;
    enum _PNP_DEVNODE_STATE StateHistory[20];
    ULONG StateHistoryEntry;
    LONG CompletionStatus;
    ULONG Flags;
    ULONG UserFlags;
    ULONG Problem;
    LONG ProblemStatus;
    struct _CM_RESOURCE_LIST *ResourceList;
    struct _CM_RESOURCE_LIST *ResourceListTranslated;
    struct _DEVICE_OBJECT *DuplicatePDO;
    struct _IO_RESOURCE_REQUIREMENTS_LIST *ResourceRequirements;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    enum _INTERFACE_TYPE ChildInterfaceType;
    ULONG ChildBusNumber;
    USHORT ChildBusTypeIndex;
    UCHAR RemovalPolicy;
    UCHAR HardwareRemovalPolicy;
    struct _LIST_ENTRY TargetDeviceNotify;
    struct _LIST_ENTRY DeviceArbiterList;
    struct _LIST_ENTRY DeviceTranslatorList;
    USHORT NoTranslatorMask;
    USHORT QueryTranslatorMask;
    USHORT NoArbiterMask;
    USHORT QueryArbiterMask;
    union {
        struct _DEVICE_NODE *LegacyDeviceNode;
        struct _DEVICE_RELATIONS *PendingDeviceRelations;
        PVOID Information;
    } OverUsed1;
    union {
        struct _DEVICE_NODE *NextResourceDeviceNode;
    } OverUsed2;
    struct _CM_RESOURCE_LIST *BootResources;
    struct _CM_RESOURCE_LIST *BootResourcesTranslated;
    ULONG CapabilityFlags;
    struct {
        enum PROFILE_STATUS DockStatus;
        struct _LIST_ENTRY ListEntry;
        PWCHAR SerialNumber;
    } DockInfo;
    ULONG DisableableDepends;
    struct _LIST_ENTRY PendedSetInterfaceState;
    struct _LIST_ENTRY LegacyBusListEntry;
    ULONG DriverUnloadRetryCount;
    struct _DEVICE_NODE *PreviousParent;
    LONG DeletedChildren;
    ULONG NumaNodeIndex;
    struct _GUID ContainerID;
    UCHAR OverrideFlags;
    ULONG DeviceIdsHash;
    UCHAR RequiresUnloadedDriver;
    struct _PENDING_RELATIONS_LIST_ENTRY *PendingEjectRelations;
    ULONG StateFlags;
    struct _PNP_REBALANCE_TRACE_CONTEXT *RebalanceContext;
    struct _DEVICE_NODE_IOMMU_EXTENSION *IommuExtension;
    struct _PO_DIRECTED_DRIPS_STATE DirectedDripsState;
};

typedef struct _DEVICE_NODE_IOMMU_EXTENSION {
};

typedef struct _DEVICE_OBJECT {
    SHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    struct _IO_TIMER *Timer;
    ULONG Flags;
    ULONG Characteristics;
    struct _VPB *Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CHAR StackSize;
    union {
        struct _LIST_ENTRY ListEntry;
        struct _WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    struct _KDEVICE_QUEUE DeviceQueue;
    struct _KDPC Dpc;
    ULONG ActiveThreadCount;
    PVOID SecurityDescriptor;
    struct _KEVENT DeviceLock;
    USHORT SectorSize;
    USHORT Spare1;
    struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
    PVOID Reserved;
};

typedef struct _DEVICE_OBJECT_LIST {
    ULONG Count;
    ULONG MaxCount;
    ULONG TagCount;
    enum _PNP_DEVICE_DELETE_TYPE OperationCode;
    struct _DEVICE_OBJECT_LIST_ENTRY Devices[1];
};

typedef struct _DEVICE_OBJECT_LIST_ENTRY {
    struct _DEVICE_OBJECT *DeviceObject;
    enum _DEVICE_RELATION_LEVEL RelationLevel;
    ULONG Ordinal;
    ULONG Flags;
};

typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
    ULONG IdleCount;
    ULONG BusyCount;
    ULONG BusyReference;
    ULONG TotalBusyCount;
    ULONG ConservationIdleTime;
    ULONG PerformanceIdleTime;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _LIST_ENTRY IdleList;
    enum _POP_DEVICE_IDLE_TYPE IdleType;
    enum _DEVICE_POWER_STATE IdleState;
    enum _DEVICE_POWER_STATE CurrentState;
    struct _POP_COOLING_EXTENSION *CoolingExtension;
    struct _LIST_ENTRY Volume;
    union {
        struct {
            ULONG IdleTime;
            ULONG NonIdleTime;
        } Disk;
    } Specific;
};

typedef struct _DEVICE_RELATIONS {
    ULONG Count;
    struct _DEVICE_OBJECT *Objects[1];
};

typedef struct _DEVOBJ_EXTENSION {
    SHORT Type;
    USHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PowerFlags;
    struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
    ULONG ExtensionFlags;
    PVOID DeviceNode;
    struct _DEVICE_OBJECT *AttachedTo;
    LONG StartIoCount;
    LONG StartIoKey;
    ULONG StartIoFlags;
    struct _VPB *Vpb;
    PVOID DependencyNode;
    PVOID InterruptContext;
    PVOID VerifierContext;
};

typedef struct _DIAGNOSTIC_BUFFER {
    ULONG64 Size;
    enum _REQUESTER_TYPE CallerType;
    ULONG64 ProcessImageNameOffset;
    ULONG ProcessId;
    ULONG ServiceTag;
    ULONG64 DeviceDescriptionOffset;
    ULONG64 DevicePathOffset;
    ULONG64 ReasonOffset;
};

typedef struct _DIAGNOSTIC_CONTEXT {
    enum _REQUESTER_TYPE CallerType;
    struct _EPROCESS *Process;
    ULONG ServiceTag;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG64 ReasonSize;
};

typedef struct _DIRTY_PAGE_STATISTICS {
    ULONG64 DirtyPages;
    ULONG64 DirtyPagesLastScan;
    ULONG DirtyPagesScheduledLastScan;
};

typedef struct _DIRTY_PAGE_THRESHOLDS {
    ULONG64 DirtyPageThreshold;
    ULONG64 DirtyPageThresholdTop;
    ULONG64 DirtyPageThresholdBottom;
    ULONG DirtyPageTarget;
    ULONG64 AggregateAvailablePages;
    ULONG64 AggregateDirtyPages;
    ULONG AvailableHistory;
};

typedef struct _DISALLOWED_GUIDS {
    USHORT Count;
    struct _GUID *Guids;
};

typedef struct _DISPATCHER_HEADER {
    LONG Lock;
    LONG LockNV;
    UCHAR Type;
    UCHAR Signalling;
    UCHAR Size;
    UCHAR Reserved1;
    UCHAR TimerType;
    UCHAR TimerControlFlags;
    UCHAR Absolute : 1;
    UCHAR Wake : 1;
    UCHAR EncodedTolerableDelay : 6;
    UCHAR Hand;
    UCHAR TimerMiscFlags;
    UCHAR Index : 6;
    UCHAR Inserted : 1;
    UCHAR Expired : 1;
    UCHAR Timer2Type;
    UCHAR Timer2Flags;
    UCHAR Timer2Inserted : 1;
    UCHAR Timer2Expiring : 1;
    UCHAR Timer2CancelPending : 1;
    UCHAR Timer2SetPending : 1;
    UCHAR Timer2Running : 1;
    UCHAR Timer2Disabled : 1;
    UCHAR Timer2ReservedFlags : 2;
    UCHAR Timer2ComponentId;
    UCHAR Timer2RelativeId;
    UCHAR QueueType;
    UCHAR QueueControlFlags;
    UCHAR Abandoned : 1;
    UCHAR DisableIncrement : 1;
    UCHAR QueueReservedControlFlags : 6;
    UCHAR QueueSize;
    UCHAR QueueReserved;
    UCHAR ThreadType;
    UCHAR ThreadReserved;
    UCHAR ThreadControlFlags;
    UCHAR CycleProfiling : 1;
    UCHAR CounterProfiling : 1;
    UCHAR GroupScheduling : 1;
    UCHAR AffinitySet : 1;
    UCHAR Tagged : 1;
    UCHAR EnergyProfiling : 1;
    UCHAR SchedulerAssist : 1;
    UCHAR ThreadReservedControlFlags : 1;
    UCHAR DebugActive;
    UCHAR ActiveDR7 : 1;
    UCHAR Instrumented : 1;
    UCHAR Minimal : 1;
    UCHAR Reserved4 : 3;
    UCHAR UmsScheduled : 1;
    UCHAR UmsPrimary : 1;
    UCHAR MutantType;
    UCHAR MutantSize;
    UCHAR DpcActive;
    UCHAR MutantReserved;
    LONG SignalState;
    struct _LIST_ENTRY WaitListHead;
};

typedef struct _DMA_IOMMU_INTERFACE {
    ULONG Version;
    PLONG CreateDomain;
    PLONG DeleteDomain;
    PLONG AttachDevice;
    PLONG DetachDevice;
    PLONG FlushDomain;
    PLONG FlushDomainByVaList;
    PLONG QueryInputMappings;
    PLONG MapLogicalRange;
    PLONG UnmapLogicalRange;
    PLONG MapIdentityRange;
    PLONG UnmapIdentityRange;
    PLONG SetDeviceFaultReporting;
    PLONG ConfigureDomain;
};

typedef struct _DOMAIN_CONFIGURATION {
    enum _DOMAIN_CONFIGURATION_ARCH Type;
    struct _DOMAIN_CONFIGURATION_ARM64 Arm64;
};

typedef struct _DOMAIN_CONFIGURATION_ARM64 {
    union _LARGE_INTEGER Ttbr0;
    union _LARGE_INTEGER Ttbr1;
    ULONG Mair0;
    ULONG Mair1;
    UCHAR InputSize0;
    UCHAR InputSize1;
    UCHAR CoherentTableWalks;
    UCHAR TranslationEnabled;
};

typedef struct _DRIVER_EXTENSION {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG AddDevice;
    ULONG Count;
    struct _UNICODE_STRING ServiceKeyName;
    struct _IO_CLIENT_EXTENSION *ClientDriverExtension;
    struct _FS_FILTER_CALLBACKS *FsFilterCallbacks;
    PVOID KseCallbacks;
    PVOID DvCallbacks;
    PVOID VerifierContext;
};

typedef struct _DRIVER_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG Flags;
    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    struct _DRIVER_EXTENSION *DriverExtension;
    struct _UNICODE_STRING DriverName;
    struct _UNICODE_STRING *HardwareDatabase;
    struct _FAST_IO_DISPATCH *FastIoDispatch;
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG MajorFunction[28];
};

typedef struct _DUAL {
    ULONG Length;
    struct _HMAP_DIRECTORY *Map;
    struct _HMAP_TABLE *SmallDir;
    ULONG Guard;
    struct _FREE_DISPLAY FreeDisplay[24];
    struct _LIST_ENTRY FreeBins;
    ULONG FreeSummary;
};

typedef struct _DUMMY_FILE_OBJECT {
    struct _OBJECT_HEADER ObjectHeader;
    CHAR FileObjectBody[216];
};

typedef struct _DUMP_INITIALIZATION_CONTEXT {
    ULONG Length;
    ULONG Reserved;
    PVOID MemoryBlock;
    PVOID CommonBuffer[2];
    union _LARGE_INTEGER PhysicalAddress[2];
    PVOID StallRoutine;
    PUCHAR OpenRoutine;
    PLONG WriteRoutine;
    PVOID FinishRoutine;
    struct _ADAPTER_OBJECT *AdapterObject;
    PVOID MappedRegisterBase;
    PVOID PortConfiguration;
    UCHAR CrashDump;
    UCHAR MarkMemoryOnly;
    UCHAR HiberResume;
    UCHAR Reserved1;
    ULONG MaximumTransferSize;
    ULONG CommonBufferSize;
    PVOID TargetAddress;
    PLONG WritePendingRoutine;
    ULONG PartitionStyle;
    union {
        struct {
            ULONG Signature;
            ULONG CheckSum;
        } Mbr;
        struct {
            struct _GUID DiskId;
        } Gpt;
    } DiskInfo;
    PLONG ReadRoutine;
    PLONG GetDriveTelemetryRoutine;
    ULONG LogSectionTruncateSize;
    ULONG Parameters[16];
    PVOID GetTransferSizesRoutine;
    PVOID DumpNotifyRoutine;
};

typedef struct _DUMP_STACK_CONTEXT {
    struct _DUMP_INITIALIZATION_CONTEXT Init;
    union _LARGE_INTEGER PartitionOffset;
    PVOID DumpPointers;
    PVOID StorageInfo;
    UCHAR UseStorageInfo;
    ULONG PointersLength;
    PWCHAR ModulePrefix;
    struct _LIST_ENTRY DriverList;
    struct _STRING InitMsg;
    struct _STRING ProgMsg;
    struct _STRING DoneMsg;
    PVOID FileObject;
    enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;
};

typedef struct _DYNAMIC_FUNCTION_TABLE {
    struct _LIST_ENTRY ListEntry;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionTable;
    union _LARGE_INTEGER TimeStamp;
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 BaseAddress;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY **Callback;
    PVOID Context;
    PWCHAR OutOfProcessCallbackDll;
    enum _FUNCTION_TABLE_TYPE Type;
    ULONG EntryCount;
    struct _RTL_BALANCED_NODE TreeNode;
};

typedef struct _ECP_LIST {
    ULONG Signature;
    ULONG Flags;
    struct _LIST_ENTRY EcpList;
};

typedef struct _EFI_FIRMWARE_INFORMATION {
    ULONG FirmwareVersion;
    struct _VIRTUAL_EFI_RUNTIME_SERVICES *VirtualEfiRuntimeServices;
    LONG SetVirtualAddressMapStatus;
    ULONG MissedMappingsCount;
    struct _LIST_ENTRY FirmwareResourceList;
    PVOID EfiMemoryMap;
    ULONG EfiMemoryMapSize;
    ULONG EfiMemoryMapDescriptorSize;
};

typedef struct _EJOB {
    struct _KEVENT Event;
    struct _LIST_ENTRY JobLinks;
    struct _LIST_ENTRY ProcessListHead;
    struct _ERESOURCE JobLock;
    union _LARGE_INTEGER TotalUserTime;
    union _LARGE_INTEGER TotalKernelTime;
    union _LARGE_INTEGER TotalCycleTime;
    union _LARGE_INTEGER ThisPeriodTotalUserTime;
    union _LARGE_INTEGER ThisPeriodTotalKernelTime;
    ULONG64 TotalContextSwitches;
    ULONG TotalPageFaultCount;
    ULONG TotalProcesses;
    ULONG ActiveProcesses;
    ULONG TotalTerminatedProcesses;
    union _LARGE_INTEGER PerProcessUserTimeLimit;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG64 MinimumWorkingSetSize;
    ULONG64 MaximumWorkingSetSize;
    ULONG LimitFlags;
    ULONG ActiveProcessLimit;
    struct _KAFFINITY_EX Affinity;
    struct _JOB_ACCESS_STATE *AccessState;
    PVOID AccessStateQuotaReference;
    ULONG UIRestrictionsClass;
    ULONG EndOfJobTimeAction;
    PVOID CompletionPort;
    PVOID CompletionKey;
    ULONG64 CompletionCount;
    ULONG SessionId;
    ULONG SchedulingClass;
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 OtherOperationCount;
    ULONG64 ReadTransferCount;
    ULONG64 WriteTransferCount;
    ULONG64 OtherTransferCount;
    struct _PROCESS_DISK_COUNTERS DiskIoInfo;
    ULONG64 ProcessMemoryLimit;
    ULONG64 JobMemoryLimit;
    ULONG64 JobTotalMemoryLimit;
    ULONG64 PeakProcessMemoryUsed;
    ULONG64 PeakJobMemoryUsed;
    struct _KAFFINITY_EX EffectiveAffinity;
    union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
    ULONG64 EffectiveMinimumWorkingSetSize;
    ULONG64 EffectiveMaximumWorkingSetSize;
    ULONG64 EffectiveProcessMemoryLimit;
    struct _EJOB *EffectiveProcessMemoryLimitJob;
    struct _EJOB *EffectivePerProcessUserTimeLimitJob;
    struct _EJOB *EffectiveNetIoRateLimitJob;
    struct _EJOB *EffectiveHeapAttributionJob;
    ULONG EffectiveLimitFlags;
    ULONG EffectiveSchedulingClass;
    ULONG EffectiveFreezeCount;
    ULONG EffectiveBackgroundCount;
    ULONG EffectiveSwapCount;
    ULONG EffectiveNotificationLimitCount;
    UCHAR EffectivePriorityClass;
    UCHAR PriorityClass;
    UCHAR NestingDepth;
    UCHAR Reserved1[1];
    ULONG CompletionFilter;
    struct _WNF_STATE_NAME WakeChannel;
    struct _PS_JOB_WAKE_INFORMATION WakeInfo;
    struct _JOBOBJECT_WAKE_FILTER WakeFilter;
    ULONG LowEdgeLatchFilter;
    struct _EJOB *NotificationLink;
    ULONG64 CurrentJobMemoryUsed;
    struct _JOB_NOTIFICATION_INFORMATION *NotificationInfo;
    PVOID NotificationInfoQuotaReference;
    struct _IO_MINI_COMPLETION_PACKET_USER *NotificationPacket;
    struct _JOB_CPU_RATE_CONTROL *CpuRateControl;
    PVOID EffectiveSchedulingGroup;
    ULONG64 ReadyTime;
    struct _EX_PUSH_LOCK MemoryLimitsLock;
    struct _LIST_ENTRY SiblingJobLinks;
    struct _LIST_ENTRY ChildJobListHead;
    struct _EJOB *ParentJob;
    struct _EJOB *RootJob;
    struct _LIST_ENTRY IteratorListHead;
    ULONG64 AncestorCount;
    struct _EJOB **Ancestors;
    PVOID SessionObject;
    struct _EPROCESS_VALUES Accounting;
    ULONG ShadowActiveProcessCount;
    ULONG ActiveAuxiliaryProcessCount;
    ULONG SequenceNumber;
    ULONG JobId;
    struct _GUID ContainerId;
    struct _GUID ContainerTelemetryId;
    struct _ESERVERSILO_GLOBALS *ServerSiloGlobals;
    struct _PS_PROPERTY_SET PropertySet;
    struct _PSP_STORAGE *Storage;
    struct _JOB_NET_RATE_CONTROL *NetRateControl;
    ULONG JobFlags;
    ULONG CloseDone : 1;
    ULONG MultiGroup : 1;
    ULONG OutstandingNotification : 1;
    ULONG NotificationInProgress : 1;
    ULONG UILimits : 1;
    ULONG CpuRateControlActive : 1;
    ULONG OwnCpuRateControl : 1;
    ULONG Terminating : 1;
    ULONG WorkingSetLock : 1;
    ULONG JobFrozen : 1;
    ULONG Background : 1;
    ULONG WakeNotificationAllocated : 1;
    ULONG WakeNotificationEnabled : 1;
    ULONG WakeNotificationPending : 1;
    ULONG LimitNotificationRequired : 1;
    ULONG ZeroCountNotificationRequired : 1;
    ULONG CycleTimeNotificationRequired : 1;
    ULONG CycleTimeNotificationPending : 1;
    ULONG TimersVirtualized : 1;
    ULONG JobSwapped : 1;
    ULONG ViolationDetected : 1;
    ULONG EmptyJobNotified : 1;
    ULONG NoSystemCharge : 1;
    ULONG DropNoWakeCharges : 1;
    ULONG NoWakeChargePolicyDecided : 1;
    ULONG NetRateControlActive : 1;
    ULONG OwnNetRateControl : 1;
    ULONG IoRateControlActive : 1;
    ULONG OwnIoRateControl : 1;
    ULONG DisallowNewProcesses : 1;
    ULONG Silo : 1;
    ULONG ContainerTelemetryIdSet : 1;
    ULONG JobFlags2;
    ULONG ParentLocked : 1;
    ULONG EnableUsermodeSiloThreadImpersonation : 1;
    ULONG DisallowUsermodeSiloThreadImpersonation : 1;
    struct _PROCESS_EXTENDED_ENERGY_VALUES *EnergyValues;
    ULONG64 SharedCommitCharge;
    ULONG DiskIoAttributionUserRefCount;
    ULONG DiskIoAttributionRefCount;
    PVOID DiskIoAttributionContext;
    struct _EJOB *DiskIoAttributionOwnerJob;
    struct _JOB_RATE_CONTROL_HEADER IoRateControlHeader;
    struct _PS_IO_CONTROL_ENTRY GlobalIoControl;
    LONG IoControlStateLock;
    struct _RTL_RB_TREE VolumeIoControlTree;
    ULONG64 IoRateOverQuotaHistory;
    ULONG IoRateCurrentGeneration;
    ULONG IoRateLastQueryGeneration;
    ULONG IoRateGenerationLength;
    ULONG IoRateOverQuotaNotifySequenceId;
    ULONG64 LastThrottledIoTime;
    struct _EX_PUSH_LOCK IoControlLock;
    ULONG64 SiloHardReferenceCount;
    struct _WORK_QUEUE_ITEM RundownWorkItem;
    PVOID PartitionObject;
    struct _EJOB *PartitionOwnerJob;
    union _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;
};

typedef struct _ENODE {
    struct _KNODE Ncb;
    struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem;
};

typedef struct _EPARTITION {
    PVOID MmPartition;
    PVOID CcPartition;
    PVOID ExPartition;
    LONG64 HardReferenceCount;
    LONG64 OpenHandleCount;
    struct _LIST_ENTRY ActivePartitionLinks;
    struct _EPARTITION *ParentPartition;
    struct _WORK_QUEUE_ITEM TeardownWorkItem;
    struct _EX_PUSH_LOCK TeardownLock;
    struct _EPROCESS *SystemProcess;
    PVOID SystemProcessHandle;
    ULONG PartitionFlags;
    ULONG PairedWithJob : 1;
};

typedef struct _EPROCESS {
    struct _KPROCESS Pcb;
    struct _EX_PUSH_LOCK ProcessLock;
    PVOID UniqueProcessId;
    struct _LIST_ENTRY ActiveProcessLinks;
    struct _EX_RUNDOWN_REF RundownProtect;
    ULONG Flags2;
    ULONG JobNotReallyActive : 1;
    ULONG AccountingFolded : 1;
    ULONG NewProcessReported : 1;
    ULONG ExitProcessReported : 1;
    ULONG ReportCommitChanges : 1;
    ULONG LastReportMemory : 1;
    ULONG ForceWakeCharge : 1;
    ULONG CrossSessionCreate : 1;
    ULONG NeedsHandleRundown : 1;
    ULONG RefTraceEnabled : 1;
    ULONG PicoCreated : 1;
    ULONG EmptyJobEvaluated : 1;
    ULONG DefaultPagePriority : 3;
    ULONG PrimaryTokenFrozen : 1;
    ULONG ProcessVerifierTarget : 1;
    ULONG RestrictSetThreadContext : 1;
    ULONG AffinityPermanent : 1;
    ULONG AffinityUpdateEnable : 1;
    ULONG PropagateNode : 1;
    ULONG ExplicitAffinity : 1;
    ULONG ProcessExecutionState : 2;
    ULONG EnableReadVmLogging : 1;
    ULONG EnableWriteVmLogging : 1;
    ULONG FatalAccessTerminationRequested : 1;
    ULONG DisableSystemAllowedCpuSet : 1;
    ULONG ProcessStateChangeRequest : 2;
    ULONG ProcessStateChangeInProgress : 1;
    ULONG InPrivate : 1;
    ULONG Flags;
    ULONG CreateReported : 1;
    ULONG NoDebugInherit : 1;
    ULONG ProcessExiting : 1;
    ULONG ProcessDelete : 1;
    ULONG ManageExecutableMemoryWrites : 1;
    ULONG VmDeleted : 1;
    ULONG OutswapEnabled : 1;
    ULONG Outswapped : 1;
    ULONG FailFastOnCommitFail : 1;
    ULONG Wow64VaSpace4Gb : 1;
    ULONG AddressSpaceInitialized : 2;
    ULONG SetTimerResolution : 1;
    ULONG BreakOnTermination : 1;
    ULONG DeprioritizeViews : 1;
    ULONG WriteWatch : 1;
    ULONG ProcessInSession : 1;
    ULONG OverrideAddressSpace : 1;
    ULONG HasAddressSpace : 1;
    ULONG LaunchPrefetched : 1;
    ULONG Background : 1;
    ULONG VmTopDown : 1;
    ULONG ImageNotifyDone : 1;
    ULONG PdeUpdateNeeded : 1;
    ULONG VdmAllowed : 1;
    ULONG ProcessRundown : 1;
    ULONG ProcessInserted : 1;
    ULONG DefaultIoPriority : 3;
    ULONG ProcessSelfDelete : 1;
    ULONG SetTimerResolutionLink : 1;
    union _LARGE_INTEGER CreateTime;
    ULONG64 ProcessQuotaUsage[2];
    ULONG64 ProcessQuotaPeak[2];
    ULONG64 PeakVirtualSize;
    ULONG64 VirtualSize;
    struct _LIST_ENTRY SessionProcessLinks;
    PVOID ExceptionPortData;
    ULONG64 ExceptionPortValue;
    ULONG64 ExceptionPortState : 3;
    struct _EX_FAST_REF Token;
    ULONG64 MmReserved;
    struct _EX_PUSH_LOCK AddressCreationLock;
    struct _EX_PUSH_LOCK PageTableCommitmentLock;
    struct _ETHREAD *RotateInProgress;
    struct _ETHREAD *ForkInProgress;
    struct _EJOB *CommitChargeJob;
    struct _RTL_AVL_TREE CloneRoot;
    ULONG64 NumberOfPrivatePages;
    ULONG64 NumberOfLockedPages;
    PVOID Win32Process;
    struct _EJOB *Job;
    PVOID SectionObject;
    PVOID SectionBaseAddress;
    ULONG Cookie;
    struct _PAGEFAULT_HISTORY *WorkingSetWatch;
    PVOID Win32WindowStation;
    PVOID InheritedFromUniqueProcessId;
    PVOID Spare0;
    ULONG64 OwnerProcessId;
    struct _PEB *Peb;
    struct _MM_SESSION_SPACE *Session;
    PVOID Spare1;
    struct _EPROCESS_QUOTA_BLOCK *QuotaBlock;
    struct _HANDLE_TABLE *ObjectTable;
    PVOID DebugPort;
    struct _EWOW64PROCESS *WoW64Process;
    PVOID DeviceMap;
    PVOID EtwDataSource;
    ULONG64 PageDirectoryPte;
    struct _FILE_OBJECT *ImageFilePointer;
    UCHAR ImageFileName[15];
    UCHAR PriorityClass;
    PVOID SecurityPort;
    struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
    struct _LIST_ENTRY JobLinks;
    PVOID HighestUserAddress;
    struct _LIST_ENTRY ThreadListHead;
    ULONG ActiveThreads;
    ULONG ImagePathHash;
    ULONG DefaultHardErrorProcessing;
    LONG LastThreadExitStatus;
    struct _EX_FAST_REF PrefetchTrace;
    PVOID LockedPagesList;
    union _LARGE_INTEGER ReadOperationCount;
    union _LARGE_INTEGER WriteOperationCount;
    union _LARGE_INTEGER OtherOperationCount;
    union _LARGE_INTEGER ReadTransferCount;
    union _LARGE_INTEGER WriteTransferCount;
    union _LARGE_INTEGER OtherTransferCount;
    ULONG64 CommitChargeLimit;
    ULONG64 CommitCharge;
    ULONG64 CommitChargePeak;
    struct _MMSUPPORT_FULL Vm;
    struct _LIST_ENTRY MmProcessLinks;
    ULONG ModifiedPageCount;
    LONG ExitStatus;
    struct _RTL_AVL_TREE VadRoot;
    PVOID VadHint;
    ULONG64 VadCount;
    ULONG64 VadPhysicalPages;
    ULONG64 VadPhysicalPagesLimit;
    struct _ALPC_PROCESS_CONTEXT AlpcContext;
    struct _LIST_ENTRY TimerResolutionLink;
    struct _PO_DIAG_STACK_RECORD *TimerResolutionStackRecord;
    ULONG RequestedTimerResolution;
    ULONG SmallestTimerResolution;
    union _LARGE_INTEGER ExitTime;
    struct _INVERTED_FUNCTION_TABLE *InvertedFunctionTable;
    struct _EX_PUSH_LOCK InvertedFunctionTableLock;
    ULONG ActiveThreadsHighWatermark;
    ULONG LargePrivateVadCount;
    struct _EX_PUSH_LOCK ThreadListLock;
    PVOID WnfContext;
    struct _EJOB *ServerSilo;
    UCHAR SignatureLevel;
    UCHAR SectionSignatureLevel;
    struct _PS_PROTECTION Protection;
    UCHAR HangCount : 3;
    UCHAR GhostCount : 3;
    UCHAR PrefilterException : 1;
    ULONG Flags3;
    ULONG Minimal : 1;
    ULONG ReplacingPageRoot : 1;
    ULONG Crashed : 1;
    ULONG JobVadsAreTracked : 1;
    ULONG VadTrackingDisabled : 1;
    ULONG AuxiliaryProcess : 1;
    ULONG SubsystemProcess : 1;
    ULONG IndirectCpuSets : 1;
    ULONG RelinquishedCommit : 1;
    ULONG HighGraphicsPriority : 1;
    ULONG CommitFailLogged : 1;
    ULONG ReserveFailLogged : 1;
    ULONG SystemProcess : 1;
    ULONG HideImageBaseAddresses : 1;
    ULONG AddressPolicyFrozen : 1;
    ULONG ProcessFirstResume : 1;
    ULONG ForegroundExternal : 1;
    ULONG ForegroundSystem : 1;
    ULONG HighMemoryPriority : 1;
    ULONG EnableProcessSuspendResumeLogging : 1;
    ULONG EnableThreadSuspendResumeLogging : 1;
    ULONG SecurityDomainChanged : 1;
    ULONG SecurityFreezeComplete : 1;
    ULONG VmProcessorHost : 1;
    LONG DeviceAsid;
    PVOID SvmData;
    struct _EX_PUSH_LOCK SvmProcessLock;
    ULONG64 SvmLock;
    struct _LIST_ENTRY SvmProcessDeviceListHead;
    ULONG64 LastFreezeInterruptTime;
    struct _PROCESS_DISK_COUNTERS *DiskCounters;
    PVOID PicoContext;
    PVOID EnclaveTable;
    ULONG64 EnclaveNumber;
    struct _EX_PUSH_LOCK EnclaveLock;
    ULONG HighPriorityFaultsAllowed;
    struct _PO_PROCESS_ENERGY_CONTEXT *EnergyContext;
    PVOID VmContext;
    ULONG64 SequenceNumber;
    ULONG64 CreateInterruptTime;
    ULONG64 CreateUnbiasedInterruptTime;
    ULONG64 TotalUnbiasedFrozenTime;
    ULONG64 LastAppStateUpdateTime;
    ULONG64 LastAppStateUptime : 61;
    ULONG64 LastAppState : 3;
    ULONG64 SharedCommitCharge;
    struct _EX_PUSH_LOCK SharedCommitLock;
    struct _LIST_ENTRY SharedCommitLinks;
    ULONG64 AllowedCpuSets;
    ULONG64 DefaultCpuSets;
    PULONG64 AllowedCpuSetsIndirect;
    PULONG64 DefaultCpuSetsIndirect;
    PVOID DiskIoAttribution;
    PVOID DxgProcess;
    ULONG Win32KFilterSet;
    union _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;
    ULONG KTimerSets;
    ULONG KTimer2Sets;
    ULONG ThreadTimerSets;
    ULONG64 VirtualTimerListLock;
    struct _LIST_ENTRY VirtualTimerListHead;
    struct _WNF_STATE_NAME WakeChannel;
    struct _PS_PROCESS_WAKE_INFORMATION WakeInfo;
    ULONG MitigationFlags;
    struct {
        ULONG ControlFlowGuardEnabled : 1;
        ULONG ControlFlowGuardExportSuppressionEnabled : 1;
        ULONG ControlFlowGuardStrict : 1;
        ULONG DisallowStrippedImages : 1;
        ULONG ForceRelocateImages : 1;
        ULONG HighEntropyASLREnabled : 1;
        ULONG StackRandomizationDisabled : 1;
        ULONG ExtensionPointDisable : 1;
        ULONG DisableDynamicCode : 1;
        ULONG DisableDynamicCodeAllowOptOut : 1;
        ULONG DisableDynamicCodeAllowRemoteDowngrade : 1;
        ULONG AuditDisableDynamicCode : 1;
        ULONG DisallowWin32kSystemCalls : 1;
        ULONG AuditDisallowWin32kSystemCalls : 1;
        ULONG EnableFilteredWin32kAPIs : 1;
        ULONG AuditFilteredWin32kAPIs : 1;
        ULONG DisableNonSystemFonts : 1;
        ULONG AuditNonSystemFontLoading : 1;
        ULONG PreferSystem32Images : 1;
        ULONG ProhibitRemoteImageMap : 1;
        ULONG AuditProhibitRemoteImageMap : 1;
        ULONG ProhibitLowILImageMap : 1;
        ULONG AuditProhibitLowILImageMap : 1;
        ULONG SignatureMitigationOptIn : 1;
        ULONG AuditBlockNonMicrosoftBinaries : 1;
        ULONG AuditBlockNonMicrosoftBinariesAllowStore : 1;
        ULONG LoaderIntegrityContinuityEnabled : 1;
        ULONG AuditLoaderIntegrityContinuity : 1;
        ULONG EnableModuleTamperingProtection : 1;
        ULONG EnableModuleTamperingProtectionNoInherit : 1;
        ULONG RestrictIndirectBranchPrediction : 1;
        ULONG IsolateSecurityDomain : 1;
    } MitigationFlagsValues;
    ULONG MitigationFlags2;
    struct {
        ULONG EnableExportAddressFilter : 1;
        ULONG AuditExportAddressFilter : 1;
        ULONG EnableExportAddressFilterPlus : 1;
        ULONG AuditExportAddressFilterPlus : 1;
        ULONG EnableRopStackPivot : 1;
        ULONG AuditRopStackPivot : 1;
        ULONG EnableRopCallerCheck : 1;
        ULONG AuditRopCallerCheck : 1;
        ULONG EnableRopSimExec : 1;
        ULONG AuditRopSimExec : 1;
        ULONG EnableImportAddressFilter : 1;
        ULONG AuditImportAddressFilter : 1;
        ULONG DisablePageCombine : 1;
        ULONG SpeculativeStoreBypassDisable : 1;
        ULONG CetShadowStacks : 1;
    } MitigationFlags2Values;
    PVOID PartitionObject;
    ULONG64 SecurityDomain;
    ULONG64 ParentSecurityDomain;
    PVOID CoverageSamplerContext;
    PVOID MmHotPatchContext;
};

typedef struct _EPROCESS_QUOTA_BLOCK {
};

typedef struct _EPROCESS_VALUES {
    ULONG64 KernelTime;
    ULONG64 UserTime;
    ULONG64 ReadyTime;
    ULONG64 CycleTime;
    ULONG64 ContextSwitches;
    LONG64 ReadOperationCount;
    LONG64 WriteOperationCount;
    LONG64 OtherOperationCount;
    LONG64 ReadTransferCount;
    LONG64 WriteTransferCount;
    LONG64 OtherTransferCount;
};

typedef struct _ERESOURCE {
    struct _LIST_ENTRY SystemResourcesList;
    struct _OWNER_ENTRY *OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    UCHAR ReservedLowFlags;
    UCHAR WaiterPriority;
    PVOID SharedWaiters;
    PVOID ExclusiveWaiters;
    struct _OWNER_ENTRY OwnerEntry;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;
    PVOID Reserved2;
    PVOID Address;
    ULONG64 CreatorBackTraceIndex;
    ULONG64 SpinLock;
};

typedef struct _ESERVERSILO_GLOBALS {
    struct _OBP_SILODRIVERSTATE ObSiloState;
    struct _SEP_SILOSTATE SeSiloState;
    struct _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;
    struct _ETW_SILODRIVERSTATE *EtwSiloState;
    struct _EPROCESS *MiSessionLeaderProcess;
    struct _EPROCESS *ExpDefaultErrorPortProcess;
    PVOID ExpDefaultErrorPort;
    ULONG HardErrorState;
    struct _WNF_SILODRIVERSTATE WnfSiloState;
    struct _DBGK_SILOSTATE DbgkSiloState;
    struct _UNICODE_STRING PsProtectedCurrentDirectory;
    struct _UNICODE_STRING PsProtectedEnvironment;
    PVOID ApiSetSection;
    PVOID ApiSetSchema;
    UCHAR OneCoreForwardersEnabled;
    struct _UNICODE_STRING NtSystemRoot;
    struct _UNICODE_STRING SiloRootDirectoryName;
    struct _PSP_STORAGE *Storage;
    enum _SERVERSILO_STATE State;
    LONG ExitStatus;
    struct _KEVENT *DeleteEvent;
    struct _SILO_USER_SHARED_DATA *UserSharedData;
    PVOID UserSharedSection;
    struct _WORK_QUEUE_ITEM TerminateWorkItem;
};

typedef struct _ETHREAD {
    struct _KTHREAD Tcb;
    union _LARGE_INTEGER CreateTime;
    union _LARGE_INTEGER ExitTime;
    struct _LIST_ENTRY KeyedWaitChain;
    struct _LIST_ENTRY PostBlockList;
    PVOID ForwardLinkShadow;
    PVOID StartAddress;
    struct _TERMINATION_PORT *TerminationPort;
    struct _ETHREAD *ReaperLink;
    PVOID KeyedWaitValue;
    ULONG64 ActiveTimerListLock;
    struct _LIST_ENTRY ActiveTimerListHead;
    struct _CLIENT_ID Cid;
    struct _KSEMAPHORE KeyedWaitSemaphore;
    struct _KSEMAPHORE AlpcWaitSemaphore;
    union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
    struct _LIST_ENTRY IrpList;
    ULONG64 TopLevelIrp;
    struct _DEVICE_OBJECT *DeviceToVerify;
    PVOID Win32StartAddress;
    PVOID ChargeOnlySession;
    PVOID LegacyPowerObject;
    struct _LIST_ENTRY ThreadListEntry;
    struct _EX_RUNDOWN_REF RundownProtect;
    struct _EX_PUSH_LOCK ThreadLock;
    ULONG ReadClusterSize;
    LONG MmLockOrdering;
    ULONG CrossThreadFlags;
    ULONG Terminated : 1;
    ULONG ThreadInserted : 1;
    ULONG HideFromDebugger : 1;
    ULONG ActiveImpersonationInfo : 1;
    ULONG HardErrorsAreDisabled : 1;
    ULONG BreakOnTermination : 1;
    ULONG SkipCreationMsg : 1;
    ULONG SkipTerminationMsg : 1;
    ULONG CopyTokenOnOpen : 1;
    ULONG ThreadIoPriority : 3;
    ULONG ThreadPagePriority : 3;
    ULONG RundownFail : 1;
    ULONG UmsForceQueueTermination : 1;
    ULONG IndirectCpuSets : 1;
    ULONG DisableDynamicCodeOptOut : 1;
    ULONG ExplicitCaseSensitivity : 1;
    ULONG PicoNotifyExit : 1;
    ULONG DbgWerUserReportActive : 1;
    ULONG ForcedSelfTrimActive : 1;
    ULONG SamplingCoverage : 1;
    ULONG ReservedCrossThreadFlags : 8;
    ULONG SameThreadPassiveFlags;
    ULONG ActiveExWorker : 1;
    ULONG MemoryMaker : 1;
    ULONG StoreLockThread : 2;
    ULONG ClonedThread : 1;
    ULONG KeyedEventInUse : 1;
    ULONG SelfTerminate : 1;
    ULONG RespectIoPriority : 1;
    ULONG ActivePageLists : 1;
    ULONG SecureContext : 1;
    ULONG ZeroPageThread : 1;
    ULONG WorkloadClass : 1;
    ULONG ReservedSameThreadPassiveFlags : 20;
    ULONG SameThreadApcFlags;
    UCHAR OwnsProcessAddressSpaceExclusive : 1;
    UCHAR OwnsProcessAddressSpaceShared : 1;
    UCHAR HardFaultBehavior : 1;
    UCHAR StartAddressInvalid : 1;
    UCHAR EtwCalloutActive : 1;
    UCHAR SuppressSymbolLoad : 1;
    UCHAR Prefetching : 1;
    UCHAR OwnsVadExclusive : 1;
    UCHAR SystemPagePriorityActive : 1;
    UCHAR SystemPagePriority : 3;
    UCHAR AllowWritesToExecutableMemory : 1;
    UCHAR OwnsVadShared : 1;
    UCHAR CacheManagerActive;
    UCHAR DisablePageFaultClustering;
    UCHAR ActiveFaultCount;
    UCHAR LockOrderState;
    ULONG64 AlpcMessageId;
    PVOID AlpcMessage;
    ULONG AlpcReceiveAttributeSet;
    struct _LIST_ENTRY AlpcWaitListEntry;
    LONG ExitStatus;
    ULONG CacheManagerCount;
    ULONG IoBoostCount;
    ULONG IoQoSBoostCount;
    ULONG IoQoSThrottleCount;
    ULONG KernelStackReference;
    struct _LIST_ENTRY BoostList;
    struct _LIST_ENTRY DeboostList;
    ULONG64 BoostListLock;
    ULONG64 IrpListLock;
    PVOID ReservedForSynchTracking;
    struct _SINGLE_LIST_ENTRY CmCallbackListHead;
    struct _GUID *ActivityId;
    struct _SINGLE_LIST_ENTRY SeLearningModeListHead;
    PVOID VerifierContext;
    PVOID AdjustedClientToken;
    PVOID WorkOnBehalfThread;
    struct _PS_PROPERTY_SET PropertySet;
    PVOID PicoContext;
    ULONG64 UserFsBase;
    ULONG64 UserGsBase;
    struct _THREAD_ENERGY_VALUES *EnergyValues;
    PVOID CmDbgInfo;
    ULONG64 SelectedCpuSets;
    PULONG64 SelectedCpuSetsIndirect;
    struct _EJOB *Silo;
    struct _UNICODE_STRING *ThreadName;
    struct _CONTEXT *SetContextState;
    ULONG LastExpectedRunTime;
    ULONG HeapData;
    struct _LIST_ENTRY OwnerEntryListHead;
    ULONG64 DisownedOwnerEntryListLock;
    struct _LIST_ENTRY DisownedOwnerEntryListHead;
};

typedef struct _ETIMER {
    struct _KTIMER KeTimer;
    ULONG64 Lock;
    struct _KAPC TimerApc;
    struct _KDPC TimerDpc;
    struct _LIST_ENTRY ActiveTimerListEntry;
    ULONG Period;
    CHAR TimerFlags;
    UCHAR ApcAssociated : 1;
    UCHAR FlushDpcs : 1;
    UCHAR Paused : 1;
    UCHAR Spare1 : 5;
    UCHAR DueTimeType;
    USHORT Spare2;
    struct _DIAGNOSTIC_CONTEXT *WakeReason;
    struct _LIST_ENTRY WakeTimerListEntry;
    PVOID VirtualizedTimerCookie;
    struct _LIST_ENTRY VirtualizedTimerLinks;
    ULONG64 DueTime;
    ULONG CoalescingWindow;
};

typedef struct _ETWP_NOTIFICATION_HEADER {
    enum _ETW_NOTIFICATION_TYPE NotificationType;
    ULONG NotificationSize;
    LONG RefCount;
    UCHAR ReplyRequested;
    ULONG ReplyIndex;
    ULONG Timeout;
    ULONG ReplyCount;
    ULONG NotifyeeCount;
    ULONG64 ReplyHandle;
    PVOID ReplyObject;
    ULONG RegIndex;
    ULONG TargetPID;
    ULONG SourcePID;
    struct _GUID DestinationGuid;
    struct _GUID SourceGuid;
};

typedef struct _ETW_APC_ENTRY {
    struct _SLIST_ENTRY SListEntry;
    struct _KAPC Apc;
};

typedef struct _ETW_BUFFER_CONTEXT {
    UCHAR ProcessorNumber;
    UCHAR Alignment;
    USHORT ProcessorIndex;
    USHORT LoggerId;
};

typedef struct _ETW_BUFFER_QUEUE {
    struct _SINGLE_LIST_ENTRY *QueueTail;
    struct _SINGLE_LIST_ENTRY QueueEntry;
};

typedef struct _ETW_COUNTERS {
    LONG GuidCount;
    LONG PoolUsage[2];
    LONG SessionCount;
};

typedef struct _ETW_DEBUGID_TRACKING_ENTRY {
    struct _LIST_ENTRY ListEntry;
    UCHAR ConsumersNotified;
    UCHAR Spare[3];
    ULONG DebugIdSize;
    union _CVDD DebugId;
};

typedef struct _ETW_DECODE_CONTROL_ENTRY {
    struct _ETW_DECODE_CONTROL_ENTRY *Next;
    struct _GUID Decode;
    struct _GUID Control;
    UCHAR ConsumersNotified;
};

typedef struct _ETW_EVENT_CALLBACK_CONTEXT {
};

typedef struct _ETW_FILTER_EVENT_NAME_DATA {
    UCHAR FilterIn;
    UCHAR Level;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    struct _RTL_HASH_TABLE NameTable;
};

typedef struct _ETW_FILTER_HEADER {
    LONG FilterFlags;
    struct _ETW_FILTER_PID *PidFilter;
    struct _ETW_FILTER_STRING_TOKEN *ExeFilter;
    struct _ETW_FILTER_STRING_TOKEN *PkgIdFilter;
    struct _ETW_FILTER_STRING_TOKEN *PkgAppIdFilter;
    struct _ETW_PERFECT_HASH_FUNCTION *StackWalkIdFilter;
    struct _ETW_FILTER_EVENT_NAME_DATA *StackWalkNameFilter;
    struct _EVENT_FILTER_LEVEL_KW *StackWalkLevelKwFilter;
    struct _ETW_PERFECT_HASH_FUNCTION *EventIdFilter;
    struct _ETW_PAYLOAD_FILTER *PayloadFilter;
    struct _EVENT_FILTER_HEADER *ProviderSideFilter;
    struct _ETW_FILTER_EVENT_NAME_DATA *EventNameFilter;
};

typedef struct _ETW_FILTER_PID {
    ULONG Count;
    ULONG Pids[8];
};

typedef struct _ETW_FILTER_STRING_TOKEN {
    USHORT Count;
    struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];
};

typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT {
    USHORT Length;
    PWCHAR String;
};

typedef struct _ETW_GUID_ENTRY {
    struct _LIST_ENTRY GuidList;
    LONG64 RefCount;
    struct _GUID Guid;
    struct _LIST_ENTRY RegListHead;
    PVOID SecurityDescriptor;
    struct _ETW_LAST_ENABLE_INFO LastEnable;
    ULONG64 MatchId;
    struct _TRACE_ENABLE_INFO ProviderEnableInfo;
    struct _TRACE_ENABLE_INFO EnableInfo[8];
    struct _ETW_FILTER_HEADER *FilterData;
    struct _ETW_SILODRIVERSTATE *SiloState;
    struct _EX_PUSH_LOCK Lock;
    struct _ETHREAD *LockOwner;
};

typedef struct _ETW_HASH_BUCKET {
    struct _LIST_ENTRY ListHead[3];
    struct _EX_PUSH_LOCK BucketLock;
};

typedef struct _ETW_HW_TRACE_EXT_INTERFACE {
    PLONG StartProcessorTraceOnEachCore;
    PLONG StopProcessorTraceOnEachCore;
    PLONG LogProcessorTraceOnCurrentCore;
};

typedef struct _ETW_IPT_SUPPORT {
    PVOID IptHandle;
    ULONG64 IptOption;
    struct _ETW_HW_TRACE_EXT_INTERFACE *EtwHwTraceExtInterface;
    ULONG HookIdCount;
    USHORT HookId[4];
};

typedef struct _ETW_LAST_ENABLE_INFO {
    union _LARGE_INTEGER EnableFlags;
    USHORT LoggerId;
    UCHAR Level;
    UCHAR Enabled : 1;
    UCHAR InternalFlag : 7;
};

typedef struct _ETW_LBR_SUPPORT {
    ULONG LbrHandle;
    ULONG LbrOptions;
    ULONG HookIdCount;
    USHORT HookId[4];
};

typedef struct _ETW_LOGGER_HANDLE {
    UCHAR DereferenceAndLeave;
};

typedef struct _ETW_PAYLOAD_FILTER {
    LONG RefCount;
    struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter;
};

typedef struct _ETW_PERFECT_HASH_FUNCTION {
};

typedef struct _ETW_PERF_COUNTERS {
    LONG TotalActiveSessions;
    LONG TotalBufferMemoryNonPagedPool;
    LONG TotalBufferMemoryPagedPool;
    LONG TotalGuidsEnabled;
    LONG TotalGuidsNotEnabled;
    LONG TotalGuidsPreEnabled;
};

typedef struct _ETW_PMC_SUPPORT {
    enum _KPROFILE_SOURCE Source[8];
    ULONG HookIdCount;
    USHORT HookId[4];
    ULONG CountersCount;
    struct _HAL_PMC_COUNTERS *ProcessorCtrs[1];
};

typedef struct _ETW_PRIV_HANDLE_DEMUX_TABLE {
    struct _RTL_RB_TREE Tree;
    struct _EX_PUSH_LOCK Lock;
    USHORT SequenceNumber;
};

typedef struct _ETW_PROVIDER_TRAITS {
    struct _RTL_BALANCED_NODE Node;
    ULONG ReferenceCount;
    UCHAR Traits[1];
};

typedef struct _ETW_QUEUE_ENTRY {
    struct _LIST_ENTRY ListEntry;
    struct _ETWP_NOTIFICATION_HEADER *DataBlock;
    struct _ETW_REG_ENTRY *RegEntry;
    struct _ETW_REG_ENTRY *ReplyObject;
    PVOID WakeReference;
    USHORT RegIndex;
    USHORT ReplyIndex;
    ULONG Flags;
};

typedef struct _ETW_REALTIME_CONSUMER {
    struct _LIST_ENTRY Links;
    PVOID ProcessHandle;
    struct _EPROCESS *ProcessObject;
    PVOID NextNotDelivered;
    PVOID RealtimeConnectContext;
    struct _KEVENT *DisconnectEvent;
    struct _KEVENT *DataAvailableEvent;
    PULONG UserBufferCount;
    struct _SINGLE_LIST_ENTRY *UserBufferListHead;
    ULONG BuffersLost;
    ULONG EmptyBuffersCount;
    USHORT LoggerId;
    UCHAR Flags;
    UCHAR ShutDownRequested : 1;
    UCHAR NewBuffersLost : 1;
    UCHAR Disconnected : 1;
    UCHAR Notified : 1;
    UCHAR Wow : 1;
    struct _RTL_BITMAP ReservedBufferSpaceBitMap;
    PUCHAR ReservedBufferSpace;
    ULONG ReservedBufferSpaceSize;
    ULONG UserPagesAllocated;
    ULONG UserPagesReused;
    PULONG EventsLostCount;
    PULONG BuffersLostCount;
    struct _ETW_SILODRIVERSTATE *SiloState;
};

typedef struct _ETW_REF_CLOCK {
    union _LARGE_INTEGER StartTime;
    union _LARGE_INTEGER StartPerfClock;
};

typedef struct _ETW_REG_ENTRY {
    struct _LIST_ENTRY RegList;
    struct _LIST_ENTRY GroupRegList;
    struct _ETW_GUID_ENTRY *GuidEntry;
    struct _ETW_GUID_ENTRY *GroupEntry;
    struct _ETW_REPLY_QUEUE *ReplyQueue;
    struct _ETW_QUEUE_ENTRY *ReplySlot[4];
    PVOID Caller;
    ULONG SessionId;
    struct _EPROCESS *Process;
    PVOID CallbackContext;
    PVOID Callback;
    USHORT Index;
    USHORT Flags;
    USHORT DbgKernelRegistration : 1;
    USHORT DbgUserRegistration : 1;
    USHORT DbgReplyRegistration : 1;
    USHORT DbgClassicRegistration : 1;
    USHORT DbgSessionSpaceRegistration : 1;
    USHORT DbgModernRegistration : 1;
    USHORT DbgClosed : 1;
    USHORT DbgInserted : 1;
    USHORT DbgWow64 : 1;
    USHORT DbgUseDescriptorType : 1;
    USHORT DbgDropProviderTraits : 1;
    UCHAR EnableMask;
    UCHAR GroupEnableMask;
    struct _ETW_PROVIDER_TRAITS *Traits;
};

typedef struct _ETW_REPLY_QUEUE {
    struct _KQUEUE Queue;
    LONG EventsLost;
};

typedef struct _ETW_SESSION_PERF_COUNTERS {
    LONG BufferMemoryPagedPool;
    LONG BufferMemoryNonPagedPool;
    ULONG64 EventsLoggedCount;
    LONG EventsLost;
    LONG NumConsumers;
};

typedef struct _ETW_SILODRIVERSTATE {
    struct _EJOB *Silo;
    struct _ESERVERSILO_GLOBALS *SiloGlobals;
    ULONG MaxLoggers;
    struct _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;
    struct _EX_RUNDOWN_REF_CACHE_AWARE **EtwpLoggerRundown;
    struct _WMI_LOGGER_CONTEXT **EtwpLoggerContext;
    struct _ETW_HASH_BUCKET EtwpGuidHashTable[64];
    USHORT EtwpSecurityLoggers[8];
    UCHAR EtwpSecurityProviderEnableMask;
    LONG EtwpShutdownInProgress;
    ULONG EtwpSecurityProviderPID;
    struct _ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable;
    struct _ETW_COUNTERS EtwpCounters;
    union _LARGE_INTEGER LogfileBytesWritten;
    struct _ETW_SILO_TRACING_BLOCK *ProcessorBlocks;
    struct _EX_WNF_SUBSCRIPTION *ContainerRestoreWnfSubscription;
    struct _GUID PartitionId;
    struct _GUID ParentId;
    union _LARGE_INTEGER QpcOffsetFromRoot;
    ULONG PartitionType;
    struct _ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings;
};

typedef struct _ETW_SILO_TRACING_BLOCK {
    struct _EX_FAST_REF *ProcessorBuffers;
    PULONG64 EventsLoggedCount;
    PLONG64 QpcDelta;
};

typedef struct _ETW_SOFT_RESTART_CONTEXT {
};

typedef struct _ETW_STACK_CACHE {
};

typedef struct _ETW_STACK_TRACE_BLOCK {
    union _LARGE_INTEGER RelatedTimestamp;
    struct _ETHREAD *Thread;
    struct _KDPC StackWalkDpc;
    union _SLIST_HEADER ApcListHead;
    struct _ETW_APC_ENTRY *ApcEntry;
    ULONG ApcEntryCount;
    LONG Flags;
    LONG ApcCount;
    LONG MaxApcCount;
};

typedef struct _ETW_SYSTEMTIME {
    USHORT Year;
    USHORT Month;
    USHORT DayOfWeek;
    USHORT Day;
    USHORT Hour;
    USHORT Minute;
    USHORT Second;
    USHORT Milliseconds;
};

typedef struct _ETW_SYSTEM_LOGGER {
    UCHAR LoggerId;
    UCHAR ClockType;
};

typedef struct _ETW_SYSTEM_LOGGER_SETTINGS {
    struct _ETW_SYSTEM_LOGGER EtwpSystemLogger[8];
    ULONG EtwpActiveSystemLoggers;
    struct _PERFINFO_GROUPMASK SiloGlobalGroupMask;
    struct _PERFINFO_GROUPMASK EtwpGroupMasks[10];
};

typedef struct _ETW_WMITRACE_WORK {
    ULONG LoggerId;
    ULONG SiloSessionId;
    CHAR LoggerName[65];
    CHAR FileName[129];
    ULONG MaximumFileSize;
    ULONG MinBuffers;
    ULONG MaxBuffers;
    ULONG BufferSize;
    ULONG Mode;
    ULONG FlushTimer;
    ULONG64 MatchAny;
    ULONG64 MatchAll;
    ULONG EnableProperty;
    struct _GUID Guid;
    UCHAR Level;
    LONG Status;
};

typedef struct _EVENT_DATA_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Reserved;
    UCHAR Type;
    UCHAR Reserved1;
    USHORT Reserved2;
};

typedef struct _EVENT_DESCRIPTOR {
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONG64 Keyword;
};

typedef struct _EVENT_FILTER_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Type;
};

typedef struct _EVENT_FILTER_HEADER {
    USHORT Id;
    UCHAR Version;
    UCHAR Reserved[5];
    ULONG64 InstanceId;
    ULONG Size;
    ULONG NextOffset;
};

typedef struct _EVENT_FILTER_LEVEL_KW {
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    UCHAR Level;
    UCHAR FilterIn;
};

typedef struct _EVENT_HEADER {
    USHORT Size;
    USHORT HeaderType;
    USHORT Flags;
    USHORT EventProperty;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID ProviderId;
    struct _EVENT_DESCRIPTOR EventDescriptor;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    struct _GUID ActivityId;
};

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM {
    USHORT Reserved1;
    USHORT ExtType;
    USHORT Linkage : 1;
    USHORT Reserved2 : 15;
    USHORT DataSize;
    ULONG64 DataPtr;
};

typedef struct _EVENT_PAYLOAD_PREDICATE {
    USHORT FieldIndex;
    USHORT CompareOp;
    ULONG64 Value[2];
};

typedef struct _EVENT_RECORD {
    struct _EVENT_HEADER EventHeader;
    struct _ETW_BUFFER_CONTEXT BufferContext;
    USHORT ExtendedDataCount;
    USHORT UserDataLength;
    struct _EVENT_HEADER_EXTENDED_DATA_ITEM *ExtendedData;
    PVOID UserData;
    PVOID UserContext;
};

typedef struct _EWOW64PROCESS {
    PVOID Peb;
    USHORT Machine;
    enum _SYSTEM_DLL_TYPE NtdllType;
};

typedef struct _EXCEPTION_POINTERS {
    struct _EXCEPTION_RECORD *ExceptionRecord;
    struct _CONTEXT *ContextRecord;
};

typedef struct _EXCEPTION_RECORD {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD32 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG ExceptionRecord;
    ULONG ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD64 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG NumberParameters;
    ULONG __unusedAlignment;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    enum _EXCEPTION_DISPOSITION *Handler;
};

typedef struct _EXHANDLE {
    ULONG TagBits : 2;
    ULONG Index : 30;
    PVOID GenericHandleOverlay;
    ULONG64 Value;
};

typedef struct _EXT_DELETE_PARAMETERS {
    ULONG Version;
    ULONG Reserved;
    PVOID DeleteCallback;
    PVOID DeleteContext;
};

typedef struct _EXT_IOMMU_DEVICE_ID {
    enum _EXT_IOMMU_DEVICE_TYPE DeviceType;
    struct _EXT_IOMMU_DEVICE_ID_PCI Pci;
    struct _EXT_IOMMU_DEVICE_ID_ACPI Acpi;
    UCHAR IoApicId;
    ULONG64 LogicalId;
    struct _EXT_IOMMU_DEVICE_ID_TEST Test;
    struct _EXT_IOMMU_DEVICE_ID_GIC Gic;
};

typedef struct _EXT_IOMMU_DEVICE_ID_ACPI {
    PCHAR ObjectName;
};

typedef struct _EXT_IOMMU_DEVICE_ID_GIC {
    ULONG LineNumber;
};

typedef struct _EXT_IOMMU_DEVICE_ID_PCI {
    ULONG64 AsUINT64;
    USHORT PciSegmentNumber;
    USHORT PhantomFunctionBits : 2;
    USHORT BusRange : 1;
    USHORT DevicePathLength : 5;
    USHORT StartBusNumber : 8;
    USHORT Bdf;
    UCHAR SubordinateBus;
    UCHAR SecondaryBus;
    PWCHAR DevicePath;
};

typedef struct _EXT_IOMMU_DEVICE_ID_TEST {
    ULONG64 UniqueId;
};

typedef struct _EXT_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONG64 NoWakeTolerance;
};

typedef struct _EX_FAST_REF {
    PVOID Object;
    ULONG64 RefCnt : 4;
    ULONG64 Value;
};

typedef struct _EX_PARTITION {
    struct _EPARTITION *PartitionObject;
    struct _EX_WORK_QUEUE ***WorkQueues;
    struct _EX_WORK_QUEUE_MANAGER **WorkQueueManagers;
    LONG QueueAllocationMask;
};

typedef struct _EX_PUSH_LOCK {
    ULONG64 Locked : 1;
    ULONG64 Waiting : 1;
    ULONG64 Waking : 1;
    ULONG64 MultipleShared : 1;
    ULONG64 Shared : 60;
    ULONG64 Value;
    PVOID Ptr;
};

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND {
    struct _EX_PUSH_LOCK LocalLock;
    struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State;
    ULONG Stats;
};

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE {
    ULONG Expanded : 1;
    ULONG Transitioning : 1;
    ULONG Pageable : 1;
    ULONG Value;
};

typedef struct _EX_RUNDOWN_REF {
    ULONG64 Count;
    PVOID Ptr;
};

typedef struct _EX_RUNDOWN_REF_CACHE_AWARE {
    struct _EX_RUNDOWN_REF *RunRefs;
    PVOID PoolToFree;
    ULONG RunRefSize;
    ULONG Number;
};

typedef struct _EX_TIMER {
};

typedef struct _EX_WNF_SUBSCRIPTION {
};

typedef struct _EX_WORK_QUEUE {
    struct _KPRIQUEUE WorkPriQueue;
    struct _EX_PARTITION *Partition;
    struct _ENODE *Node;
    ULONG WorkItemsProcessed;
    ULONG WorkItemsProcessedLastPass;
    LONG ThreadCount;
    LONG MinThreads : 31;
    ULONG TryFailed : 1;
    LONG MaxThreads;
    enum _EXQUEUEINDEX QueueIndex;
    struct _KEVENT *AllThreadsExitedEvent;
};

typedef struct _EX_WORK_QUEUE_MANAGER {
    struct _EX_PARTITION *Partition;
    struct _ENODE *Node;
    struct _KEVENT Event;
    struct _KTIMER DeadlockTimer;
    struct _KEVENT ReaperEvent;
    struct _KTIMER2 ReaperTimer;
    PVOID ThreadHandle;
    ULONG ExitThread;
    ULONG ThreadSeed;
};

typedef struct _FAKE_HEAP_ENTRY {
    ULONG64 Size;
    ULONG64 PreviousSize;
};

typedef struct _FAST_ERESOURCE {
    PVOID Reserved1[3];
    ULONG Reserved2;
    PVOID Reserved3[4];
    ULONG Reserved4[4];
    PVOID Reserved5;
    PVOID Reserved6[2];
};

typedef struct _FAST_ERESOURCE_INTERNAL {
    struct _LIST_ENTRY SystemResourcesList;
    PVOID ReservedPointer;
    SHORT ActiveCount;
    USHORT Flag;
    struct _KWAIT_CHAIN SharedWaiters;
    struct _KWAIT_CHAIN ExclusiveWaiters;
    struct _LIST_ENTRY OwnerEntryListHead;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;
    PVOID ReservedWin64OnlyPointer;
    PVOID Address;
    ULONG64 CreatorBackTraceIndex;
    ULONG64 SpinLock;
};

typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PUCHAR FastIoCheckIfPossible;
    PUCHAR FastIoRead;
    PUCHAR FastIoWrite;
    PUCHAR FastIoQueryBasicInfo;
    PUCHAR FastIoQueryStandardInfo;
    PUCHAR FastIoLock;
    PUCHAR FastIoUnlockSingle;
    PUCHAR FastIoUnlockAll;
    PUCHAR FastIoUnlockAllByKey;
    PUCHAR FastIoDeviceControl;
    PVOID AcquireFileForNtCreateSection;
    PVOID ReleaseFileForNtCreateSection;
    PVOID FastIoDetachDevice;
    PUCHAR FastIoQueryNetworkOpenInfo;
    PLONG AcquireForModWrite;
    PUCHAR MdlRead;
    PUCHAR MdlReadComplete;
    PUCHAR PrepareMdlWrite;
    PUCHAR MdlWriteComplete;
    PUCHAR FastIoReadCompressed;
    PUCHAR FastIoWriteCompressed;
    PUCHAR MdlReadCompleteCompressed;
    PUCHAR MdlWriteCompleteCompressed;
    PUCHAR FastIoQueryOpen;
    PLONG ReleaseForModWrite;
    PLONG AcquireForCcFlush;
    PLONG ReleaseForCcFlush;
};

typedef struct _FAST_MUTEX {
    LONG Count;
    PVOID Owner;
    ULONG Contention;
    struct _KEVENT Event;
    ULONG OldIrql;
};

typedef struct _FAST_OWNER_ENTRY {
    PVOID Reserved[9];
};

typedef struct _FAST_OWNER_ENTRY_INTERNAL {
    struct _LIST_ENTRY ListEntry;
    UCHAR AbLockHandle;
    UCHAR Disowned : 1;
    UCHAR DynamicallyAllocated : 1;
    UCHAR CallerExclusive : 1;
    UCHAR IsSublistHead;
    UCHAR IsWaiting;
    PVOID LockAddress;
    PVOID ThreadAddress;
    struct _LIST_ENTRY SublistHead;
    struct _LIST_ENTRY LockListEntry;
};

typedef struct _FAULT_INFORMATION {
    enum _FAULT_INFORMATION_ARCH Type;
    struct _FAULT_INFORMATION_ARM64 Arm64;
};

typedef struct _FAULT_INFORMATION_ARM64 {
    PVOID DomainHandle;
    PVOID FaultAddress;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    ULONG InputMappingId;
    struct _FAULT_INFORMATION_ARM64_FLAGS Flags;
    enum _FAULT_INFORMATION_ARM64_TYPE Type;
};

typedef struct _FAULT_INFORMATION_ARM64_FLAGS {
    ULONG WriteNotRead : 1;
    ULONG InstructionNotData : 1;
    ULONG Privileged : 1;
    ULONG FaultAddressValid : 1;
    ULONG Reserved : 28;
};

typedef struct _FILESYSTEM_DISK_COUNTERS {
    ULONG64 FsBytesRead;
    ULONG64 FsBytesWritten;
};

typedef struct _FILE_BASIC_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};

typedef struct _FILE_GET_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    struct _SID Sid;
};

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};

typedef struct _FILE_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _VPB *Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    struct _SECTION_OBJECT_POINTERS *SectionObjectPointer;
    PVOID PrivateCacheMap;
    LONG FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    UCHAR LockOperation;
    UCHAR DeletePending;
    UCHAR ReadAccess;
    UCHAR WriteAccess;
    UCHAR DeleteAccess;
    UCHAR SharedRead;
    UCHAR SharedWrite;
    UCHAR SharedDelete;
    ULONG Flags;
    struct _UNICODE_STRING FileName;
    union _LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    struct _KEVENT Lock;
    struct _KEVENT Event;
    struct _IO_COMPLETION_CONTEXT *CompletionContext;
    ULONG64 IrpListLock;
    struct _LIST_ENTRY IrpList;
    PVOID FileObjectExtension;
};

typedef struct _FILE_STANDARD_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK {
    ULONG FirmwareTypeUefi : 1;
    ULONG EfiRuntimeUseIum : 1;
    ULONG EfiRuntimePageProtectionSupported : 1;
    ULONG Reserved : 29;
    union {
        struct _EFI_FIRMWARE_INFORMATION EfiInformation;
        struct _PCAT_FIRMWARE_INFORMATION PcatInformation;
    } u;
};

typedef struct _FLS_CALLBACK_INFO {
};

typedef struct _FREE_DISPLAY {
    ULONG RealVectorSize;
    ULONG Hint;
    struct _RTL_BITMAP Display;
};

typedef struct _FSRTL_ADVANCED_FCB_HEADER {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    UCHAR Flags;
    UCHAR IsFastIoPossible;
    UCHAR Flags2;
    UCHAR Reserved : 4;
    UCHAR Version : 4;
    struct _ERESOURCE *Resource;
    struct _ERESOURCE *PagingIoResource;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER FileSize;
    union _LARGE_INTEGER ValidDataLength;
    struct _FAST_MUTEX *FastMutex;
    struct _LIST_ENTRY FilterContexts;
    struct _EX_PUSH_LOCK PushLock;
    PVOID *FileContextSupportPointer;
    PVOID Oplock;
    PVOID ReservedForRemote;
    PVOID ReservedContext;
};

typedef struct _FS_FILTER_CALLBACKS {
    ULONG SizeOfFsFilterCallbacks;
    ULONG Reserved;
    PLONG PreAcquireForSectionSynchronization;
    PVOID PostAcquireForSectionSynchronization;
    PLONG PreReleaseForSectionSynchronization;
    PVOID PostReleaseForSectionSynchronization;
    PLONG PreAcquireForCcFlush;
    PVOID PostAcquireForCcFlush;
    PLONG PreReleaseForCcFlush;
    PVOID PostReleaseForCcFlush;
    PLONG PreAcquireForModifiedPageWriter;
    PVOID PostAcquireForModifiedPageWriter;
    PLONG PreReleaseForModifiedPageWriter;
    PVOID PostReleaseForModifiedPageWriter;
    PLONG PreQueryOpen;
    PVOID PostQueryOpen;
};

typedef struct _FS_FILTER_CALLBACK_DATA {
    ULONG SizeOfFsFilterCallbackData;
    UCHAR Operation;
    UCHAR Reserved;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    union _FS_FILTER_PARAMETERS Parameters;
};

typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT {
    ULONG StructureSize;
    ULONG SizeReturned;
    ULONG Flags;
    ULONG DesiredReadAlignment;
};

typedef struct _GDI_TEB_BATCH {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG64 HDC;
    ULONG Buffer[310];
};

typedef struct _GDI_TEB_BATCH32 {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG HDC;
    ULONG Buffer[310];
};

typedef struct _GDI_TEB_BATCH64 {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG64 HDC;
    ULONG Buffer[310];
};

typedef struct _GENERAL_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERAL_LOOKASIDE_POOL {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERIC_MAPPING {
    ULONG GenericRead;
    ULONG GenericWrite;
    ULONG GenericExecute;
    ULONG GenericAll;
};

typedef struct _GROUP_AFFINITY {
    ULONG64 Mask;
    USHORT Group;
    USHORT Reserved[3];
};

typedef struct _GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct _HAL_CHANNEL_MEMORY_RANGES {
    ULONG64 PageFrameIndex;
    USHORT MpnId;
    USHORT Node;
    USHORT Channel;
    UCHAR IsPowerManageable;
    UCHAR DeepPowerState;
};

typedef struct _HAL_CLOCK_TIMER_CONFIGURATION {
    UCHAR Flags;
    UCHAR AlwaysOnTimer : 1;
    UCHAR HighLatency : 1;
    UCHAR PerCpuTimer : 1;
    UCHAR DynamicTickSupported : 1;
    ULONG KnownType;
    ULONG Capabilities;
    ULONG64 MaxIncrement;
    ULONG MinIncrement;
};

typedef struct _HAL_DP_REPLACE_PARAMETERS {
    ULONG Flags;
    struct _PNP_REPLACE_PROCESSOR_LIST *TargetProcessors;
    struct _PNP_REPLACE_PROCESSOR_LIST *SpareProcessors;
};

typedef struct _HAL_HV_DMA_DOMAIN_INFO {
    ULONG DomainId;
    UCHAR IsStage1;
};

typedef struct _HAL_HV_SVM_DEVICE_CAPABILITIES {
    ULONG SvmSupported : 1;
    ULONG PciExecute : 1;
    ULONG NoExecute : 1;
    ULONG Reserved : 28;
    ULONG OverflowPossible : 1;
    ULONG PasidCount;
    ULONG IommuIndex;
};

typedef struct _HAL_HV_SVM_SYSTEM_CAPABILITIES {
    ULONG SvmSupported : 1;
    ULONG GpaAlwaysValid : 1;
    ULONG MaxPasidSpaceCount;
    ULONG MaxPasidSpacePasidCount;
    ULONG MaxPrqSize;
    ULONG IommuCount;
    ULONG MinIommuPasidCount;
};

typedef struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION {
    ULONG Enlightenments;
    ULONG HypervisorConnected;
    PVOID EndOfInterrupt;
    PVOID ApicWriteIcr;
    ULONG Reserved0;
    ULONG SpinCountMask;
    PVOID LongSpinWait;
    PULONG64 GetReferenceTime;
    PLONG SetSystemSleepProperty;
    PLONG EnterSleepState;
    PLONG NotifyDebugDeviceAvailable;
    PLONG MapDeviceInterrupt;
    PLONG UnmapDeviceInterrupt;
    PLONG RetargetDeviceInterrupt;
    PLONG SetHpetConfig;
    PLONG NotifyHpetEnabled;
    PLONG QueryAssociatedProcessors;
    PLONG ReadMultipleMsr;
    PLONG WriteMultipleMsr;
    PLONG ReadCpuid;
    PLONG LpWritebackInvalidate;
    PLONG GetMachineCheckContext;
    PLONG SuspendPartition;
    PLONG ResumePartition;
    PLONG SetSystemMachineCheckProperty;
    PLONG WheaErrorNotification;
    PULONG GetProcessorIndexFromVpIndex;
    PLONG SyntheticClusterIpi;
    PUCHAR VpStartEnabled;
    PLONG StartVirtualProcessor;
    PLONG GetVpIndexFromApicId;
    PLONG IumAccessPciDevice;
    PULONG64 IumEfiRuntimeService;
    PVOID SvmGetSystemCapabilities;
    PLONG SvmGetDeviceCapabilities;
    PLONG SvmCreatePasidSpace;
    PLONG SvmSetPasidAddressSpace;
    PVOID SvmFlushPasid;
    PLONG SvmAttachPasidSpace;
    PLONG SvmDetachPasidSpace;
    PLONG SvmEnablePasid;
    PLONG SvmDisablePasid;
    PLONG SvmAcknowledgePageRequest;
    PLONG SvmCreatePrQueue;
    PLONG SvmDeletePrQueue;
    PLONG SvmClearPrqStalled;
    PLONG SvmSetDeviceEnabled;
    PLONG HvDebuggerPowerHandler;
    PLONG SetQpcBias;
    PULONG64 GetQpcBias;
    PLONG RegisterDeviceId;
    PLONG UnregisterDeviceId;
    PLONG AllocateDeviceDomain;
    PLONG AttachDeviceDomain;
    PLONG DetachDeviceDomain;
    PLONG DeleteDeviceDomain;
    PLONG MapDeviceLogicalRange;
    PLONG UnmapDeviceLogicalRange;
    PLONG MapDeviceSparsePages;
    PLONG UnmapDeviceSparsePages;
    PLONG GetDmaGuardEnabled;
    PLONG UpdateMicrocode;
};

typedef struct _HAL_IOMMU_DISPATCH {
    PUCHAR HalIommuSupportEnabled;
    PLONG HalIommuGetConfiguration;
    PLONG HalIommuGetLibraryContext;
    PLONG HalIommuMapDevice;
    PLONG HalIommuEnableDevicePasid;
    PLONG HalIommuSetAddressSpace;
    PLONG HalIommuDisableDevicePasid;
    PLONG HalIommuUnmapDevice;
    PLONG HalIommuFreeLibraryContext;
    PVOID HalIommuFlushTb;
    PVOID HalIommuFlushAllPasid;
    PUCHAR HalIommuProcessPageRequestQueue;
    PVOID HalIommuFaultRoutine;
    PVOID *HalIommuReferenceAsid;
    PVOID HalIommuDereferenceAsid;
    PLONG HalIommuServicePageFault;
    PLONG HalIommuDevicePowerChange;
    PLONG HalIommuBeginDeviceReset;
    PLONG HalIommuFinalizeDeviceReset;
};

typedef struct _HAL_LBR_ENTRY {
    PVOID FromAddress;
    PVOID ToAddress;
    PVOID Reserved;
};

typedef struct _HAL_LOG_REGISTER_CONTEXT {
    PVOID LogRoutine;
    ULONG Flag;
};

typedef struct _HAL_NODE_RANGE {
    ULONG64 PageFrameIndex;
    ULONG Node;
};

typedef struct _HAL_PMC_COUNTERS {
};

typedef struct _HAL_UNMASKED_INTERRUPT_INFORMATION {
    USHORT Version;
    USHORT Size;
    union _HAL_UNMASKED_INTERRUPT_FLAGS Flags;
    enum _KINTERRUPT_MODE Mode;
    enum _KINTERRUPT_POLARITY Polarity;
    ULONG Gsiv;
    USHORT PinNumber;
    PVOID DeviceHandle;
};

typedef struct _HANDLE_REVOCATION_INFO {
    struct _LIST_ENTRY ListEntry;
    struct _OB_HANDLE_REVOCATION_BLOCK *RevocationBlock;
    UCHAR AllowHandleRevocation;
    UCHAR Padding1[3];
    UCHAR Padding2[4];
};

typedef struct _HANDLE_TABLE {
    ULONG NextHandleNeedingPool;
    LONG ExtraInfoPages;
    ULONG64 TableCode;
    struct _EPROCESS *QuotaProcess;
    struct _LIST_ENTRY HandleTableList;
    ULONG UniqueProcessId;
    ULONG Flags;
    UCHAR StrictFIFO : 1;
    UCHAR EnableHandleExceptions : 1;
    UCHAR Rundown : 1;
    UCHAR Duplicated : 1;
    UCHAR RaiseUMExceptionOnInvalidHandleClose : 1;
    struct _EX_PUSH_LOCK HandleContentionEvent;
    struct _EX_PUSH_LOCK HandleTableLock;
    struct _HANDLE_TABLE_FREE_LIST FreeLists[1];
    UCHAR ActualEntry[32];
    struct _HANDLE_TRACE_DEBUG_INFO *DebugInfo;
};

typedef struct _HANDLE_TABLE_ENTRY_INFO {
    ULONG AuditMask;
    ULONG MaxRelativeAccessMask;
};

typedef struct _HANDLE_TABLE_FREE_LIST {
    struct _EX_PUSH_LOCK FreeListLock;
    union _HANDLE_TABLE_ENTRY *FirstFreeHandleEntry;
    union _HANDLE_TABLE_ENTRY *LastFreeHandleEntry;
    LONG HandleCount;
    ULONG HighWaterMark;
};

typedef struct _HANDLE_TRACE_DB_ENTRY {
    struct _CLIENT_ID ClientId;
    PVOID Handle;
    ULONG Type;
    PVOID StackTrace[16];
};

typedef struct _HANDLE_TRACE_DEBUG_INFO {
    LONG RefCount;
    ULONG TableSize;
    ULONG BitMaskFlags;
    struct _FAST_MUTEX CloseCompactionLock;
    ULONG CurrentStackIndex;
    struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];
};

typedef struct _HARDWARE_PTE {
    ULONG64 Valid : 1;
    ULONG64 Write : 1;
    ULONG64 Owner : 1;
    ULONG64 WriteThrough : 1;
    ULONG64 CacheDisable : 1;
    ULONG64 Accessed : 1;
    ULONG64 Dirty : 1;
    ULONG64 LargePage : 1;
    ULONG64 Global : 1;
    ULONG64 CopyOnWrite : 1;
    ULONG64 Prototype : 1;
    ULONG64 reserved0 : 1;
    ULONG64 PageFrameNumber : 36;
    ULONG64 reserved1 : 4;
    ULONG64 SoftwareWsIndex : 11;
    ULONG64 NoExecute : 1;
};

typedef struct _HBASE_BLOCK {
    ULONG Signature;
    ULONG Sequence1;
    ULONG Sequence2;
    union _LARGE_INTEGER TimeStamp;
    ULONG Major;
    ULONG Minor;
    ULONG Type;
    ULONG Format;
    ULONG RootCell;
    ULONG Length;
    ULONG Cluster;
    UCHAR FileName[64];
    struct _GUID RmId;
    struct _GUID LogId;
    ULONG Flags;
    struct _GUID TmId;
    ULONG GuidSignature;
    ULONG64 LastReorganizeTime;
    ULONG Reserved1[83];
    ULONG CheckSum;
    ULONG Reserved2[882];
    struct _GUID ThawTmId;
    struct _GUID ThawRmId;
    struct _GUID ThawLogId;
    ULONG BootType;
    ULONG BootRecover;
};

typedef struct _HBIN {
    ULONG Signature;
    ULONG FileOffset;
    ULONG Size;
    ULONG Reserved1[2];
    union _LARGE_INTEGER TimeStamp;
    ULONG Spare;
};

typedef struct _HCELL {
    LONG Size;
    union {
        struct {
            union {
                ULONG UserData;
                ULONG Next;
            } u;
        } NewCell;
    } u;
};

typedef struct _HEADLESS_LOADER_BLOCK {
    UCHAR UsedBiosSettings;
    UCHAR DataBits;
    UCHAR StopBits;
    UCHAR Parity;
    ULONG BaudRate;
    ULONG PortNumber;
    PUCHAR PortAddress;
    USHORT PciDeviceId;
    USHORT PciVendorId;
    UCHAR PciBusNumber;
    USHORT PciBusSegment;
    UCHAR PciSlotNumber;
    UCHAR PciFunctionNumber;
    ULONG PciFlags;
    struct _GUID SystemGUID;
    UCHAR IsMMIODevice;
    UCHAR TerminalType;
    UCHAR InterfaceType;
    UCHAR RegisterBitWidth;
    UCHAR RegisterAccessSize;
};

typedef struct _HEAP {
    struct _HEAP_SEGMENT Segment;
    struct _HEAP_ENTRY Entry;
    ULONG SegmentSignature;
    ULONG SegmentFlags;
    struct _LIST_ENTRY SegmentListEntry;
    struct _HEAP *Heap;
    PVOID BaseAddress;
    ULONG NumberOfPages;
    struct _HEAP_ENTRY *FirstEntry;
    struct _HEAP_ENTRY *LastValidEntry;
    ULONG NumberOfUnCommittedPages;
    ULONG NumberOfUnCommittedRanges;
    USHORT SegmentAllocatorBackTraceIndex;
    USHORT Reserved;
    struct _LIST_ENTRY UCRSegmentList;
    ULONG Flags;
    ULONG ForceFlags;
    ULONG CompatibilityFlags;
    ULONG EncodeFlagMask;
    struct _HEAP_ENTRY Encoding;
    ULONG Interceptor;
    ULONG VirtualMemoryThreshold;
    ULONG Signature;
    ULONG64 SegmentReserve;
    ULONG64 SegmentCommit;
    ULONG64 DeCommitFreeBlockThreshold;
    ULONG64 DeCommitTotalFreeThreshold;
    ULONG64 TotalFreeSize;
    ULONG64 MaximumAllocationSize;
    USHORT ProcessHeapsListIndex;
    USHORT HeaderValidateLength;
    PVOID HeaderValidateCopy;
    USHORT NextAvailableTagIndex;
    USHORT MaximumTagIndex;
    struct _HEAP_TAG_ENTRY *TagEntries;
    struct _LIST_ENTRY UCRList;
    ULONG64 AlignRound;
    ULONG64 AlignMask;
    struct _LIST_ENTRY VirtualAllocdBlocks;
    struct _LIST_ENTRY SegmentList;
    USHORT AllocatorBackTraceIndex;
    ULONG NonDedicatedListLength;
    PVOID BlocksIndex;
    PVOID UCRIndex;
    struct _HEAP_PSEUDO_TAG_ENTRY *PseudoTagEntries;
    struct _LIST_ENTRY FreeLists;
    struct _HEAP_LOCK *LockVariable;
    PLONG CommitRoutine;
    union _RTL_RUN_ONCE StackTraceInitVar;
    struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;
    PVOID FrontEndHeap;
    USHORT FrontHeapLockCount;
    UCHAR FrontEndHeapType;
    UCHAR RequestedFrontEndHeapType;
    PWCHAR FrontEndHeapUsageData;
    USHORT FrontEndHeapMaximumIndex;
    UCHAR FrontEndHeapStatusBitmap[129];
    struct _HEAP_COUNTERS Counters;
    struct _HEAP_TUNING_PARAMETERS TuningParameters;
};

typedef struct _HEAP_COUNTERS {
    ULONG64 TotalMemoryReserved;
    ULONG64 TotalMemoryCommitted;
    ULONG64 TotalMemoryLargeUCR;
    ULONG64 TotalSizeInVirtualBlocks;
    ULONG TotalSegments;
    ULONG TotalUCRs;
    ULONG CommittOps;
    ULONG DeCommitOps;
    ULONG LockAcquires;
    ULONG LockCollisions;
    ULONG CommitRate;
    ULONG DecommittRate;
    ULONG CommitFailures;
    ULONG InBlockCommitFailures;
    ULONG PollIntervalCounter;
    ULONG DecommitsSinceLastCheck;
    ULONG HeapPollInterval;
    ULONG AllocAndFreeOps;
    ULONG AllocationIndicesActive;
    ULONG InBlockDeccommits;
    ULONG64 InBlockDeccomitSize;
    ULONG64 HighWatermarkSize;
    ULONG64 LastPolledSize;
};

typedef struct _HEAP_ENTRY {
    struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    PVOID PreviousBlockPrivateData;
    USHORT Size;
    UCHAR Flags;
    UCHAR SmallTagIndex;
    ULONG SubSegmentCode;
    USHORT PreviousSize;
    UCHAR SegmentOffset;
    UCHAR LFHFlags;
    UCHAR UnusedBytes;
    ULONG64 CompactHeader;
    struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    PVOID Reserved;
    USHORT FunctionIndex;
    USHORT ContextValue;
    ULONG InterceptorValue;
    USHORT UnusedBytesLength;
    UCHAR EntryOffset;
    UCHAR ExtendedBlockSignature;
    PVOID ReservedForAlignment;
    ULONG Code1;
    USHORT Code2;
    UCHAR Code3;
    UCHAR Code4;
    ULONG Code234;
    ULONG64 AgregateCode;
};

typedef struct _HEAP_ENTRY_EXTRA {
    USHORT AllocatorBackTraceIndex;
    USHORT TagIndex;
    ULONG64 Settable;
    ULONG64 ZeroInit;
    ULONG64 ZeroInit1;
};

typedef struct _HEAP_EXTENDED_ENTRY {
    PVOID Reserved;
    USHORT FunctionIndex;
    USHORT ContextValue;
    ULONG InterceptorValue;
    USHORT UnusedBytesLength;
    UCHAR EntryOffset;
    UCHAR ExtendedBlockSignature;
};

typedef struct _HEAP_FAILURE_INFORMATION {
    ULONG Version;
    ULONG StructureSize;
    enum _HEAP_FAILURE_TYPE FailureType;
    PVOID HeapAddress;
    PVOID Address;
    PVOID Param1;
    PVOID Param2;
    PVOID Param3;
    PVOID PreviousBlock;
    PVOID NextBlock;
    struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
    PVOID StackTrace[32];
    UCHAR HeapMajorVersion;
    UCHAR HeapMinorVersion;
    struct _EXCEPTION_RECORD ExceptionRecord;
    struct _CONTEXT ContextRecord;
};

typedef struct _HEAP_FREE_ENTRY {
    struct _HEAP_ENTRY HeapEntry;
    struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    PVOID PreviousBlockPrivateData;
    USHORT Size;
    UCHAR Flags;
    UCHAR SmallTagIndex;
    ULONG SubSegmentCode;
    USHORT PreviousSize;
    UCHAR SegmentOffset;
    UCHAR LFHFlags;
    UCHAR UnusedBytes;
    ULONG64 CompactHeader;
    struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    PVOID Reserved;
    USHORT FunctionIndex;
    USHORT ContextValue;
    ULONG InterceptorValue;
    USHORT UnusedBytesLength;
    UCHAR EntryOffset;
    UCHAR ExtendedBlockSignature;
    PVOID ReservedForAlignment;
    ULONG Code1;
    USHORT Code2;
    UCHAR Code3;
    UCHAR Code4;
    ULONG Code234;
    ULONG64 AgregateCode;
    struct _LIST_ENTRY FreeList;
};

typedef struct _HEAP_FREE_ENTRY_EXTRA {
    USHORT TagIndex;
    USHORT FreeBackTraceIndex;
};

typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS {
    ULONG SafeInputValidation : 1;
    ULONG Padding : 1;
    ULONG CommitLFHSubsegments : 1;
    ULONG AllocateHeapFromEnv : 1;
};

typedef struct _HEAP_LIST_LOOKUP {
    struct _HEAP_LIST_LOOKUP *ExtendedLookup;
    ULONG ArraySize;
    ULONG ExtraItem;
    ULONG ItemCount;
    ULONG OutOfRangeItems;
    ULONG BaseIndex;
    struct _LIST_ENTRY *ListHead;
    PULONG ListsInUseUlong;
    struct _LIST_ENTRY **ListHints;
};

typedef struct _HEAP_LOCK {
    union {
        struct _RTL_CRITICAL_SECTION CriticalSection;
        struct _ERESOURCE Resource;
    } Lock;
};

typedef struct _HEAP_PSEUDO_TAG_ENTRY {
    ULONG Allocs;
    ULONG Frees;
    ULONG64 Size;
};

typedef struct _HEAP_SEGMENT {
    struct _HEAP_ENTRY Entry;
    ULONG SegmentSignature;
    ULONG SegmentFlags;
    struct _LIST_ENTRY SegmentListEntry;
    struct _HEAP *Heap;
    PVOID BaseAddress;
    ULONG NumberOfPages;
    struct _HEAP_ENTRY *FirstEntry;
    struct _HEAP_ENTRY *LastValidEntry;
    ULONG NumberOfUnCommittedPages;
    ULONG NumberOfUnCommittedRanges;
    USHORT SegmentAllocatorBackTraceIndex;
    USHORT Reserved;
    struct _LIST_ENTRY UCRSegmentList;
};

typedef struct _HEAP_STOP_ON_TAG {
    ULONG HeapAndTagIndex;
    USHORT TagIndex;
    USHORT HeapIndex;
};

typedef struct _HEAP_STOP_ON_VALUES {
    ULONG64 AllocAddress;
    struct _HEAP_STOP_ON_TAG AllocTag;
    ULONG64 ReAllocAddress;
    struct _HEAP_STOP_ON_TAG ReAllocTag;
    ULONG64 FreeAddress;
    struct _HEAP_STOP_ON_TAG FreeTag;
};

typedef struct _HEAP_SUBALLOCATOR_CALLBACKS {
    ULONG64 Allocate;
    ULONG64 Free;
    ULONG64 Commit;
    ULONG64 Decommit;
    ULONG64 ExtendContext;
};

typedef struct _HEAP_TAG_ENTRY {
    ULONG Allocs;
    ULONG Frees;
    ULONG64 Size;
    USHORT TagIndex;
    USHORT CreatorBackTraceIndex;
    WCHAR TagName[24];
};

typedef struct _HEAP_TUNING_PARAMETERS {
    ULONG CommittThresholdShift;
    ULONG64 MaxPreCommittThreshold;
};

typedef struct _HEAP_UCR_DESCRIPTOR {
    struct _LIST_ENTRY ListEntry;
    struct _LIST_ENTRY SegmentEntry;
    PVOID Address;
    ULONG64 Size;
};

typedef struct _HEAP_UNPACKED_ENTRY {
    PVOID PreviousBlockPrivateData;
    USHORT Size;
    UCHAR Flags;
    UCHAR SmallTagIndex;
    ULONG SubSegmentCode;
    USHORT PreviousSize;
    UCHAR SegmentOffset;
    UCHAR LFHFlags;
    UCHAR UnusedBytes;
    ULONG64 CompactHeader;
};

typedef struct _HEAP_VAMGR_ALLOCATOR {
    ULONG64 TreeLock;
    struct _RTL_RB_TREE FreeRanges;
    struct _HEAP_VAMGR_VASPACE *VaSpace;
    PVOID PartitionHandle;
    USHORT ChunksPerRegion;
    USHORT RefCount;
    UCHAR AllocatorIndex;
    UCHAR NumaNode;
    UCHAR LockType : 1;
    UCHAR MemoryType : 2;
    UCHAR ConstrainedVA : 1;
    UCHAR AllowFreeHead : 1;
    UCHAR Spare0 : 3;
    UCHAR Spare1;
};

typedef struct _HEAP_VAMGR_CTX {
    struct _HEAP_VAMGR_VASPACE VaSpace;
    ULONG64 AllocatorLock;
    ULONG AllocatorCount;
    struct _HEAP_VAMGR_ALLOCATOR Allocators[255];
};

typedef struct _HEAP_VAMGR_RANGE {
    struct _RTL_BALANCED_NODE RbNode;
    struct _SINGLE_LIST_ENTRY Next;
    UCHAR Allocated : 1;
    UCHAR Internal : 1;
    UCHAR Standalone : 1;
    UCHAR Spare0 : 5;
    UCHAR AllocatorIndex;
    ULONG64 OwnerCtx[2];
    ULONG64 SizeInChunks;
    USHORT ChunkCount;
    USHORT PrevChunkCount;
    ULONG64 Signature;
};

typedef struct _HEAP_VAMGR_VASPACE {
    enum _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType;
    ULONG64 BaseAddress;
    struct _RTL_SPARSE_ARRAY VaRangeArray;
};

typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY {
    struct _LIST_ENTRY Entry;
    struct _HEAP_ENTRY_EXTRA ExtraStuff;
    ULONG64 CommitSize;
    ULONG64 ReserveSize;
    struct _HEAP_ENTRY BusyBlock;
};

typedef struct _HHIVE {
    ULONG Signature;
    struct _CELL_DATA **GetCellRoutine;
    PVOID ReleaseCellRoutine;
    PVOID *Allocate;
    PVOID Free;
    PLONG FileWrite;
    PLONG FileRead;
    PVOID HiveLoadFailure;
    struct _HBASE_BLOCK *BaseBlock;
    struct _CMSI_RW_LOCK FlusherLock;
    struct _CMSI_RW_LOCK WriterLock;
    struct _RTL_BITMAP DirtyVector;
    ULONG DirtyCount;
    ULONG DirtyAlloc;
    struct _RTL_BITMAP UnreconciledVector;
    ULONG UnreconciledCount;
    ULONG BaseBlockAlloc;
    ULONG Cluster;
    UCHAR Flat : 1;
    UCHAR ReadOnly : 1;
    UCHAR Reserved : 6;
    UCHAR DirtyFlag;
    ULONG HvBinHeadersUse;
    ULONG HvFreeCellsUse;
    ULONG HvUsedCellsUse;
    ULONG CmUsedCellsUse;
    ULONG HiveFlags;
    ULONG CurrentLog;
    ULONG CurrentLogSequence;
    ULONG CurrentLogMinimumSequence;
    ULONG CurrentLogOffset;
    ULONG MinimumLogSequence;
    ULONG LogFileSizeCap;
    UCHAR LogDataPresent[2];
    UCHAR PrimaryFileValid;
    UCHAR BaseBlockDirty;
    union _LARGE_INTEGER LastLogSwapTime;
    USHORT FirstLogFile : 3;
    USHORT SecondLogFile : 3;
    USHORT HeaderRecovered : 1;
    USHORT LegacyRecoveryIndicated : 1;
    USHORT RecoveryInformationReserved : 8;
    USHORT RecoveryInformation;
    UCHAR LogEntriesRecovered[2];
    ULONG RefreshCount;
    ULONG StorageTypeCount;
    ULONG Version;
    struct _HVP_VIEW_MAP ViewMap;
    struct _DUAL Storage[2];
};

typedef struct _HIVE_LIST_ENTRY {
    PWCHAR FileName;
    PWCHAR BaseName;
    PWCHAR RegRootName;
    struct _CMHIVE *CmHive;
    ULONG HHiveFlags;
    ULONG CmHiveFlags;
    ULONG CmKcbCacheSize;
    struct _CMHIVE *CmHive2;
    UCHAR HiveMounted;
    UCHAR ThreadFinished;
    UCHAR ThreadStarted;
    UCHAR Allocate;
    UCHAR WinPERequired;
    struct _KEVENT StartEvent;
    struct _KEVENT FinishedEvent;
    struct _KEVENT MountLock;
    struct _UNICODE_STRING FilePath;
};

typedef struct _HIVE_LOAD_FAILURE {
    struct _HHIVE *Hive;
    USHORT Index;
    USHORT RecoverableIndex;
    struct {
        enum _CM_LOAD_FAILURE_TYPE Failure;
        LONG Status;
        ULONG Point;
    } Locations[8];
    struct {
        enum _CM_LOAD_FAILURE_TYPE Failure;
        LONG Status;
        ULONG Point;
    } RecoverableLocations[8];
    struct {
        ULONG Action;
        PVOID Handle;
        LONG Status;
    } RegistryIO;
    struct {
        PVOID CheckStack;
    } CheckRegistry2;
    struct {
        ULONG Cell;
        struct _CELL_DATA *CellPoint;
        PVOID RootPoint;
        ULONG Index;
    } CheckKey;
    struct {
        struct _CELL_DATA *List;
        ULONG Index;
        ULONG Cell;
        struct _CELL_DATA *CellPoint;
    } CheckValueList;
    struct {
        ULONG Space;
        ULONG MapPoint;
        struct _HBIN *BinPoint;
    } CheckHive;
    struct {
        ULONG Space;
        ULONG MapPoint;
        struct _HBIN *BinPoint;
    } CheckHive1;
    struct {
        struct _HBIN *Bin;
        struct _HCELL *CellPoint;
    } CheckBin;
    struct {
        ULONG FileOffset;
    } RecoverData;
};

typedef struct _HIVE_WAIT_PACKET {
    struct _KEVENT WakeEvent;
    LONG Status;
    struct _HIVE_WAIT_PACKET *Next;
};

typedef struct _HIVE_WRITE_WAIT_QUEUE {
    struct _ETHREAD *ActiveThread;
    struct _HIVE_WAIT_PACKET *WaitList;
    ULONG OwnerBoosted;
};

typedef struct _HMAP_DIRECTORY {
    struct _HMAP_TABLE *Directory[1024];
};

typedef struct _HMAP_ENTRY {
    ULONG64 BlockOffset;
    ULONG64 PermanentBinAddress;
    ULONG MemAlloc;
};

typedef struct _HMAP_TABLE {
    struct _HMAP_ENTRY Table[512];
};

typedef struct _HVP_VIEW_MAP {
    PVOID SectionReference;
    LONG64 StorageEndFileOffset;
    LONG64 SectionEndFileOffset;
    struct _CMSI_PROCESS_TUPLE *ProcessTuple;
    ULONG Flags;
    struct _RTL_RB_TREE ViewTree;
};

typedef struct _HV_GET_BIN_CONTEXT {
    USHORT OutstandingReference : 1;
};

typedef struct _HV_GET_CELL_CONTEXT {
    ULONG Cell;
    struct _HV_GET_BIN_CONTEXT BinContext;
};

typedef struct _HV_X64_HYPERVISOR_FEATURES {
    union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;
    ULONG MaxSupportedCState : 4;
    ULONG HpetNeededForC3PowerState_Deprecated : 1;
    ULONG Reserved : 27;
    ULONG MwaitAvailable_Deprecated : 1;
    ULONG GuestDebuggingAvailable : 1;
    ULONG PerformanceMonitorsAvailable : 1;
    ULONG CpuDynamicPartitioningAvailable : 1;
    ULONG XmmRegistersForFastHypercallAvailable : 1;
    ULONG GuestIdleAvailable : 1;
    ULONG HypervisorSleepStateSupportAvailable : 1;
    ULONG NumaDistanceQueryAvailable : 1;
    ULONG FrequencyRegsAvailable : 1;
    ULONG SyntheticMachineCheckAvailable : 1;
    ULONG GuestCrashRegsAvailable : 1;
    ULONG DebugRegsAvailable : 1;
    ULONG Npiep1Available : 1;
    ULONG DisableHypervisorAvailable : 1;
    ULONG ExtendedGvaRangesForFlushVirtualAddressListAvailable : 1;
    ULONG FastHypercallOutputAvailable : 1;
    ULONG SvmFeaturesAvailable : 1;
    ULONG SintPollingModeAvailable : 1;
    ULONG HypercallMsrLockAvailable : 1;
    ULONG DirectSyntheticTimers : 1;
    ULONG RegisterPatAvailable : 1;
    ULONG RegisterBndcfgsAvailable : 1;
    ULONG WatchdogTimerAvailable : 1;
    ULONG SyntheticTimeUnhaltedTimerAvailable : 1;
    ULONG DeviceDomainsAvailable : 1;
    ULONG S1DeviceDomainsAvailable : 1;
    ULONG LbrAvailable : 1;
    ULONG Reserved1 : 5;
};

typedef struct _I386_LOADER_BLOCK {
    PVOID CommonDataArea;
    ULONG MachineType;
    ULONG VirtualBias;
};

typedef struct _IA64_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG64 CurrentSymbolStart;
    ULONG64 CurrentSymbolEnd;
};

typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG VirtualAddress;
    ULONG Size;
};

typedef struct _IMAGE_DEBUG_DIRECTORY {
    ULONG Characteristics;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG Type;
    ULONG SizeOfData;
    ULONG AddressOfRawData;
    ULONG PointerToRawData;
};

typedef struct _IMAGE_DOS_HEADER {
    USHORT e_magic;
    USHORT e_cblp;
    USHORT e_cp;
    USHORT e_crlc;
    USHORT e_cparhdr;
    USHORT e_minalloc;
    USHORT e_maxalloc;
    USHORT e_ss;
    USHORT e_sp;
    USHORT e_csum;
    USHORT e_ip;
    USHORT e_cs;
    USHORT e_lfarlc;
    USHORT e_ovno;
    USHORT e_res[4];
    USHORT e_oemid;
    USHORT e_oeminfo;
    USHORT e_res2[10];
    LONG e_lfanew;
};

typedef struct _IMAGE_FILE_HEADER {
    USHORT Machine;
    USHORT NumberOfSections;
    ULONG TimeDateStamp;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
    USHORT SizeOfOptionalHeader;
    USHORT Characteristics;
};

typedef struct _IMAGE_NT_HEADERS64 {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG64 ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG64 SizeOfStackReserve;
    ULONG64 SizeOfStackCommit;
    ULONG64 SizeOfHeapReserve;
    ULONG64 SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG BaseOfData;
    ULONG BaseOfBss;
    ULONG GprMask;
    ULONG CprMask[4];
    ULONG GpValue;
};

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG EndAddress;
    ULONG UnwindInfoAddress;
    ULONG UnwindData;
};

typedef struct _IMAGE_SECTION_HEADER {
    UCHAR Name[8];
    union {
        ULONG PhysicalAddress;
        ULONG VirtualSize;
    } Misc;
    ULONG VirtualAddress;
    ULONG SizeOfRawData;
    ULONG PointerToRawData;
    ULONG PointerToRelocations;
    ULONG PointerToLinenumbers;
    USHORT NumberOfRelocations;
    USHORT NumberOfLinenumbers;
    ULONG Characteristics;
};

typedef struct _IMAGE_SECURITY_CONTEXT {
    PVOID PageHashes;
    ULONG64 Value;
    ULONG64 SecurityBeingCreated : 2;
    ULONG64 SecurityMandatory : 1;
    ULONG64 PageHashPointer : 61;
};

typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[3];
};

typedef struct _INPUT_MAPPING_ELEMENT {
    ULONG InputMappingId;
};

typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
};

typedef struct _INTERRUPT_CONNECTION_DATA {
    ULONG Count;
    struct _INTERRUPT_VECTOR_DATA Vectors[1];
};

typedef struct _INTERRUPT_HT_INTR_INFO {
    union {
        struct {
            ULONG Mask : 1;
            ULONG Polarity : 1;
            ULONG MessageType : 3;
            ULONG RequestEOI : 1;
            ULONG DestinationMode : 1;
            ULONG MessageType3 : 1;
            ULONG Destination : 8;
            ULONG Vector : 8;
            ULONG ExtendedAddress : 8;
        } bits;
        ULONG AsULONG;
    } LowPart;
    union {
        struct {
            ULONG ExtendedDestination : 24;
            ULONG Reserved : 6;
            ULONG PassPW : 1;
            ULONG WaitingForEOI : 1;
        } bits;
        ULONG AsULONG;
    } HighPart;
};

typedef struct _INTERRUPT_REMAPPING_INFO {
    ULONG IrtIndex : 30;
    ULONG FlagHalInternal : 1;
    ULONG FlagTranslated : 1;
    union {
        struct {
            ULONG MessageAddressHigh;
            ULONG MessageAddressLow;
            USHORT MessageData;
            USHORT Reserved;
        } Msi;
    } u;
};

typedef struct _INTERRUPT_VECTOR_DATA {
    enum INTERRUPT_CONNECTION_TYPE Type;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_POLARITY Polarity;
    enum _KINTERRUPT_MODE Mode;
    struct _GROUP_AFFINITY TargetProcessors;
    struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
    struct {
        ULONG Gsiv;
        ULONG WakeInterrupt : 1;
        ULONG ReservedFlags : 31;
    } ControllerInput;
    ULONG64 HvDeviceId;
    struct {
        union _LARGE_INTEGER Address;
        ULONG DataPayload;
    } XapicMessage;
    struct {
        struct _INTERRUPT_HT_INTR_INFO IntrInfo;
    } Hypertransport;
    struct {
        union _LARGE_INTEGER Address;
        ULONG DataPayload;
    } GenericMessage;
    struct {
        enum HAL_APIC_DESTINATION_MODE DestinationMode;
    } MessageRequest;
};

typedef struct _INVERTED_FUNCTION_TABLE {
    ULONG CurrentSize;
    ULONG MaximumSize;
    ULONG Epoch;
    UCHAR Overflow;
    struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[256];
};

typedef struct _INVERTED_FUNCTION_TABLE_ENTRY {
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionTable;
    struct _DYNAMIC_FUNCTION_TABLE *DynamicTable;
    PVOID ImageBase;
    ULONG SizeOfImage;
    ULONG SizeOfTable;
};

typedef struct _IOMMU_DMA_DOMAIN {
};

typedef struct _IOP_FILE_OBJECT_EXTENSION {
    ULONG FoExtFlags;
    PVOID FoExtPerTypeExtension[9];
    enum _IOP_PRIORITY_HINT FoIoPriorityHint;
};

typedef struct _IOP_IRP_EXTENSION {
    USHORT ExtensionFlags;
    USHORT Allocated : 1;
    USHORT PropagateId : 1;
    USHORT SpareBits : 14;
    USHORT TypesAllocated;
    UCHAR GenericExtension[4];
    PVOID VerifierContext;
    ULONG64 DiskIoAttributionHandle;
    struct _GUID ActivityId;
    union _LARGE_INTEGER Timestamp;
    ULONG ZeroingOffset;
    struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *FsTrackOffsetBlob;
    LONG64 FsTrackedOffset;
    struct _IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters;
};

typedef struct _IOP_IRP_EXTENSION_STATUS {
    ULONG Flags;
    ULONG ActivityId;
    ULONG IoTracking;
};

typedef struct _IOP_IRP_STACK_PROFILER {
    ULONG Profile[20];
    ULONG TotalIrps;
};

typedef struct _IOV_FORCED_PENDING_TRACE {
    struct _IRP *Irp;
    struct _ETHREAD *Thread;
    PVOID StackTrace[62];
};

typedef struct _IOV_IRP_TRACE {
    struct _IRP *Irp;
    struct _KTHREAD *Thread;
    SHORT KernelApcDisable;
    SHORT SpecialApcDisable;
    ULONG CombinedApcDisable;
    UCHAR Irql;
    PVOID StackTrace[13];
};

typedef struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR {
    ULONG Version;
    ULONG Size;
    ULONG CryptoIndex;
    ULONG AlgorithmId;
    ULONG DataUnitSize;
    ULONG KeySize;
    UCHAR KeyHash[32];
    PVOID KeyVirtualAddress;
    union _LARGE_INTEGER KeyPhysicalAddress;
};

typedef struct _IO_ADAPTER_CRYPTO_PARAMETERS {
    ULONG64 Tweak;
    struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR *KeyDescriptor;
};

typedef struct _IO_CLIENT_EXTENSION {
    struct _IO_CLIENT_EXTENSION *NextExtension;
    PVOID ClientIdentificationAddress;
};

typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
};

typedef struct _IO_DRIVER_CREATE_CONTEXT {
    SHORT Size;
    struct _ECP_LIST *ExtraCreateParameter;
    PVOID DeviceObjectHint;
    struct _TXN_PARAMETER_BLOCK *TxnParameters;
    struct _EJOB *SiloContext;
};

typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
    USHORT Validation;
    USHORT Flags;
    PVOID TrackedOffsetCallback;
};

typedef struct _IO_MINI_COMPLETION_PACKET_USER {
    struct _LIST_ENTRY ListEntry;
    ULONG PacketType;
    PVOID KeyContext;
    PVOID ApcContext;
    LONG IoStatus;
    ULONG64 IoStatusInformation;
    PVOID MiniPacketCallback;
    PVOID Context;
    UCHAR Allocated;
};

typedef struct _IO_PRIORITY_INFO {
    ULONG Size;
    ULONG ThreadPriority;
    ULONG PagePriority;
    enum _IO_PRIORITY_HINT IoPriority;
};

typedef struct _IO_REMOVE_LOCK {
    struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
};

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
    UCHAR Removed;
    UCHAR Reserved[3];
    LONG IoCount;
    struct _KEVENT RemoveEvent;
};

typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;
    UCHAR ShareDisposition;
    UCHAR Spare1;
    USHORT Flags;
    USHORT Spare2;
    union {
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Port;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory;
        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
            USHORT AffinityPolicy;
            USHORT Group;
            enum _IRQ_PRIORITY PriorityPolicy;
            ULONG64 TargetedProcessors;
        } Interrupt;
        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;
        struct {
            ULONG RequestLine;
            ULONG Reserved;
            ULONG Channel;
            ULONG TransferWidth;
        } DmaV3;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Generic;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG Priority;
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;
        struct {
            ULONG Length40;
            ULONG Alignment40;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory40;
        struct {
            ULONG Length48;
            ULONG Alignment48;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory48;
        struct {
            ULONG Length64;
            ULONG Alignment64;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    struct _IO_RESOURCE_LIST List[1];
};

typedef struct _IO_SECURITY_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _ACCESS_STATE *AccessState;
    ULONG DesiredAccess;
    ULONG FullCreateOptions;
};

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;
    union {
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
        } CreatePipe;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _MAILSLOT_CREATE_PARAMETERS *Parameters;
        } CreateMailslot;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Read;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Write;
        struct {
            ULONG Length;
            struct _UNICODE_STRING *FileName;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
            enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
        } NotifyDirectoryEx;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
        } QueryFile;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            struct _FILE_OBJECT *FileObject;
            UCHAR ReplaceIfExists;
            UCHAR AdvanceOnly;
            ULONG ClusterCount;
            PVOID DeleteHandle;
        } SetFile;
        struct {
            ULONG Length;
            PVOID EaList;
            ULONG EaListLength;
            ULONG EaIndex;
        } QueryEa;
        struct {
            ULONG Length;
        } SetEa;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } QueryVolume;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } SetVolume;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
        struct {
            union _LARGE_INTEGER *Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } LockControl;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
        struct {
            ULONG SecurityInformation;
            ULONG Length;
        } QuerySecurity;
        struct {
            ULONG SecurityInformation;
            PVOID SecurityDescriptor;
        } SetSecurity;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } MountVolume;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } VerifyVolume;
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
        struct {
            ULONG Length;
            PVOID StartSid;
            struct _FILE_GET_QUOTA_INFORMATION *SidList;
            ULONG SidListLength;
        } QueryQuota;
        struct {
            ULONG Length;
        } SetQuota;
        struct {
            enum _DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;
        struct {
            struct _GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            struct _INTERFACE *Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
        struct {
            struct _DEVICE_CAPABILITIES *Capabilities;
        } DeviceCapabilities;
        struct {
            struct _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
        } FilterResourceRequirements;
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG Length;
        } ReadWriteConfig;
        struct {
            UCHAR Lock;
        } SetLock;
        struct {
            enum BUS_QUERY_ID_TYPE IdType;
        } QueryId;
        struct {
            enum DEVICE_TEXT_TYPE DeviceTextType;
            ULONG LocaleId;
        } QueryDeviceText;
        struct {
            UCHAR InPath;
            UCHAR Reserved[3];
            enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        } UsageNotification;
        struct {
            enum _SYSTEM_POWER_STATE PowerState;
        } WaitWake;
        struct {
            struct _POWER_SEQUENCE *PowerSequence;
        } PowerSequence;
        struct {
            ULONG SystemContext;
            struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
            enum _POWER_STATE_TYPE Type;
            union _POWER_STATE State;
            enum POWER_ACTION ShutdownType;
        } Power;
        struct {
            struct _CM_RESOURCE_LIST *AllocatedResources;
            struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
        } StartDevice;
        struct {
            ULONG64 ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    PLONG CompletionRoutine;
    PVOID Context;
};

typedef struct _IO_STATUS_BLOCK {
    LONG Status;
    PVOID Pointer;
    ULONG64 Information;
};

typedef struct _IO_TIMER {
    SHORT Type;
    SHORT TimerFlag;
    struct _LIST_ENTRY TimerList;
    PVOID TimerRoutine;
    PVOID Context;
    struct _DEVICE_OBJECT *DeviceObject;
};

typedef struct _IO_WORKITEM {
    struct _WORK_QUEUE_ITEM WorkItem;
    PVOID Routine;
    PVOID IoObject;
    PVOID Context;
    struct _ETHREAD *WorkOnBehalfThread;
    ULONG Type;
    struct _GUID ActivityId;
};

typedef struct _IRP {
    SHORT Type;
    USHORT Size;
    USHORT AllocationProcessorNumber;
    USHORT Reserved;
    struct _MDL *MdlAddress;
    ULONG Flags;
    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;
    struct _LIST_ENTRY ThreadListEntry;
    struct _IO_STATUS_BLOCK IoStatus;
    CHAR RequestorMode;
    UCHAR PendingReturned;
    CHAR StackCount;
    CHAR CurrentLocation;
    UCHAR Cancel;
    UCHAR CancelIrql;
    CHAR ApcEnvironment;
    UCHAR AllocationFlags;
    struct _IO_STATUS_BLOCK *UserIosb;
    struct _KEVENT *UserEvent;
    union {
        struct {
            PVOID UserApcRoutine;
            PVOID IssuingProcess;
            PVOID UserApcContext;
        } AsynchronousParameters;
        union _LARGE_INTEGER AllocationSize;
    } Overlay;
    PVOID CancelRoutine;
    PVOID UserBuffer;
    union {
        struct {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
            PVOID DriverContext[4];
            struct _ETHREAD *Thread;
            PCHAR AuxiliaryBuffer;
            struct _LIST_ENTRY ListEntry;
            struct _IO_STACK_LOCATION *CurrentStackLocation;
            ULONG PacketType;
            struct _FILE_OBJECT *OriginalFileObject;
            PVOID IrpExtension;
        } Overlay;
        struct _KAPC Apc;
        PVOID CompletionKey;
    } Tail;
};

typedef struct _ISRDPCSTATS {
    ULONG64 IsrTime;
    ULONG64 IsrTimeStart;
    ULONG64 IsrCount;
    ULONG64 DpcTime;
    ULONG64 DpcTimeStart;
    ULONG64 DpcCount;
    UCHAR IsrActive;
    UCHAR Reserved[15];
};

typedef struct _ISR_THUNK {
    UCHAR PushImm;
    UCHAR Vector;
    UCHAR PushRbp;
    UCHAR JmpOp;
    LONG JmpOffset;
};

typedef struct _JOBOBJECT_WAKE_FILTER {
    ULONG HighEdgeFilter;
    ULONG LowEdgeFilter;
};

typedef struct _JOB_ACCESS_STATE {
};

typedef struct _JOB_CPU_RATE_CONTROL {
};

typedef struct _JOB_NET_RATE_CONTROL {
};

typedef struct _JOB_NOTIFICATION_INFORMATION {
};

typedef struct _JOB_RATE_CONTROL_HEADER {
    PVOID RateControlQuotaReference;
    struct _RTL_BITMAP OverQuotaHistory;
    PUCHAR BitMapBuffer;
    ULONG64 BitMapBufferSize;
};

typedef struct _KAFFINITY_EX {
    USHORT Count;
    USHORT Size;
    ULONG Reserved;
    ULONG64 Bitmap[20];
};

typedef struct _KALPC_HANDLE_DATA {
    ULONG ObjectType;
    ULONG Count;
    struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext;
};

typedef struct _KALPC_MESSAGE {
    struct _LIST_ENTRY Entry;
    struct _ALPC_PORT *PortQueue;
    struct _ALPC_PORT *OwnerPort;
    struct _ETHREAD *WaitingThread;
    union {
        struct {
            ULONG QueueType : 3;
            ULONG QueuePortType : 4;
            ULONG Canceled : 1;
            ULONG Ready : 1;
            ULONG ReleaseMessage : 1;
            ULONG SharedQuota : 1;
            ULONG ReplyWaitReply : 1;
            ULONG OwnerPortReference : 1;
            ULONG ReceiverReference : 1;
            ULONG ViewAttributeRetrieved : 1;
            ULONG InDispatch : 1;
        } s1;
        ULONG State;
    } u1;
    LONG SequenceNo;
    struct _EPROCESS *QuotaProcess;
    PVOID QuotaBlock;
    struct _ALPC_PORT *CancelSequencePort;
    struct _ALPC_PORT *CancelQueuePort;
    LONG CancelSequenceNo;
    struct _LIST_ENTRY CancelListEntry;
    struct _KALPC_RESERVE *Reserve;
    struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;
    PVOID DataUserVa;
    struct _ALPC_COMMUNICATION_INFO *CommunicationInfo;
    struct _ALPC_PORT *ConnectionPort;
    struct _ETHREAD *ServerThread;
    PVOID WakeReference;
    PVOID WakeReference2;
    PVOID ExtensionBuffer;
    ULONG64 ExtensionBufferSize;
    struct _PORT_MESSAGE PortMessage;
};

typedef struct _KALPC_MESSAGE_ATTRIBUTES {
    PVOID ClientContext;
    PVOID ServerContext;
    PVOID PortContext;
    PVOID CancelPortContext;
    struct _KALPC_SECURITY_DATA *SecurityData;
    struct _KALPC_VIEW *View;
    struct _KALPC_HANDLE_DATA *HandleData;
    union _KALPC_DIRECT_EVENT DirectEvent;
    struct _KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData;
};

typedef struct _KALPC_REGION {
    struct _LIST_ENTRY RegionListEntry;
    struct _KALPC_SECTION *Section;
    ULONG64 Offset;
    ULONG64 Size;
    ULONG64 ViewSize;
    union {
        struct {
            ULONG Secure : 1;
        } s1;
    } u1;
    ULONG NumberOfViews;
    struct _LIST_ENTRY ViewListHead;
    struct _KALPC_VIEW *ReadOnlyView;
    struct _KALPC_VIEW *ReadWriteView;
};

typedef struct _KALPC_RESERVE {
    struct _ALPC_PORT *OwnerPort;
    struct _ALPC_HANDLE_TABLE *HandleTable;
    PVOID Handle;
    struct _KALPC_MESSAGE *Message;
    LONG Active;
};

typedef struct _KALPC_SECTION {
    PVOID SectionObject;
    ULONG64 Size;
    struct _ALPC_HANDLE_TABLE *HandleTable;
    PVOID SectionHandle;
    struct _EPROCESS *OwnerProcess;
    struct _ALPC_PORT *OwnerPort;
    union {
        struct {
            ULONG Internal : 1;
            ULONG Secure : 1;
        } s1;
    } u1;
    ULONG NumberOfRegions;
    struct _LIST_ENTRY RegionListHead;
};

typedef struct _KALPC_SECURITY_DATA {
    struct _ALPC_HANDLE_TABLE *HandleTable;
    PVOID ContextHandle;
    struct _EPROCESS *OwningProcess;
    struct _ALPC_PORT *OwnerPort;
    struct _SECURITY_CLIENT_CONTEXT DynamicSecurity;
    union {
        struct {
            ULONG Revoked : 1;
            ULONG Impersonated : 1;
        } s1;
    } u1;
};

typedef struct _KALPC_VIEW {
    struct _LIST_ENTRY ViewListEntry;
    struct _KALPC_REGION *Region;
    struct _ALPC_PORT *OwnerPort;
    struct _EPROCESS *OwnerProcess;
    PVOID Address;
    ULONG64 Size;
    PVOID SecureViewHandle;
    PVOID WriteAccessHandle;
    union {
        struct {
            ULONG WriteAccess : 1;
            ULONG AutoRelease : 1;
            ULONG ForceUnlink : 1;
            ULONG SystemSpace : 1;
        } s1;
    } u1;
    ULONG NumberOfOwnerMessages;
    struct _LIST_ENTRY ProcessViewListEntry;
};

typedef struct _KALPC_WORK_ON_BEHALF_DATA {
    struct _ALPC_WORK_ON_BEHALF_TICKET Ticket;
};

typedef struct _KAPC {
    UCHAR Type;
    UCHAR SpareByte0;
    UCHAR Size;
    UCHAR SpareByte1;
    ULONG SpareLong0;
    struct _KTHREAD *Thread;
    struct _LIST_ENTRY ApcListEntry;
    PVOID KernelRoutine;
    PVOID RundownRoutine;
    PVOID NormalRoutine;
    PVOID Reserved[3];
    PVOID NormalContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CHAR ApcStateIndex;
    CHAR ApcMode;
    UCHAR Inserted;
};

typedef struct _KAPC_STATE {
    struct _LIST_ENTRY ApcListHead[2];
    struct _KPROCESS *Process;
    UCHAR InProgressFlags;
    UCHAR KernelApcInProgress : 1;
    UCHAR SpecialApcInProgress : 1;
    UCHAR KernelApcPending;
    UCHAR UserApcPendingAll;
    UCHAR SpecialUserApcPending : 1;
    UCHAR UserApcPending : 1;
};

typedef struct _KDESCRIPTOR {
    USHORT Pad[3];
    USHORT Limit;
    PVOID Base;
};

typedef struct _KDEVICE_QUEUE {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY DeviceListHead;
    ULONG64 Lock;
    UCHAR Busy;
    LONG64 Reserved : 8;
    LONG64 Hint : 56;
};

typedef struct _KDEVICE_QUEUE_ENTRY {
    struct _LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    UCHAR Inserted;
};

typedef struct _KDPC {
    ULONG TargetInfoAsUlong;
    UCHAR Type;
    UCHAR Importance;
    USHORT Number;
    struct _SINGLE_LIST_ENTRY DpcListEntry;
    ULONG64 ProcessorHistory;
    PVOID DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PVOID DpcData;
};

typedef struct _KDPC_DATA {
    struct _KDPC_LIST DpcList;
    ULONG64 DpcLock;
    LONG DpcQueueDepth;
    ULONG DpcCount;
    struct _KDPC *ActiveDpc;
};

typedef struct _KDPC_LIST {
    struct _SINGLE_LIST_ENTRY ListHead;
    struct _SINGLE_LIST_ENTRY *LastEntry;
};

typedef struct _KENLISTMENT {
    ULONG cookie;
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
    struct _GUID EnlistmentId;
    struct _KMUTANT Mutex;
    struct _LIST_ENTRY NextSameTx;
    struct _LIST_ENTRY NextSameRm;
    struct _KRESOURCEMANAGER *ResourceManager;
    struct _KTRANSACTION *Transaction;
    enum _KENLISTMENT_STATE State;
    ULONG Flags;
    ULONG NotificationMask;
    PVOID Key;
    ULONG KeyRefCount;
    PVOID RecoveryInformation;
    ULONG RecoveryInformationLength;
    PVOID DynamicNameInformation;
    ULONG DynamicNameInformationLength;
    struct _KTMNOTIFICATION_PACKET *FinalNotification;
    struct _KENLISTMENT *SupSubEnlistment;
    PVOID SupSubEnlHandle;
    PVOID SubordinateTxHandle;
    struct _GUID CrmEnlistmentEnId;
    struct _GUID CrmEnlistmentTmId;
    struct _GUID CrmEnlistmentRmId;
    ULONG NextHistory;
    struct _KENLISTMENT_HISTORY History[20];
};

typedef struct _KENLISTMENT_HISTORY {
    ULONG Notification;
    enum _KENLISTMENT_STATE NewState;
};

typedef struct _KENTROPY_TIMING_STATE {
    ULONG EntropyCount;
    ULONG Buffer[64];
    struct _KDPC Dpc;
    ULONG LastDeliveredBuffer;
};

typedef struct _KERNEL_STACK_SEGMENT {
    ULONG64 StackBase;
    ULONG64 StackLimit;
    ULONG64 KernelStack;
    ULONG64 InitialStack;
};

typedef struct _KEVENT {
    struct _DISPATCHER_HEADER Header;
};

typedef struct _KEXCEPTION_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;
    ULONG64 Spare1;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    ULONG64 TrapFrame;
    ULONG64 OutputBuffer;
    ULONG64 OutputLength;
    ULONG64 Spare2;
    ULONG64 MxCsr;
    ULONG64 Rbp;
    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Return;
};

typedef struct _KFLOATING_SAVE {
    ULONG Dummy;
};

typedef struct _KGATE {
    struct _DISPATCHER_HEADER Header;
};

typedef struct _KHETERO_PROCESSOR_SET {
    ULONG64 IdealMask;
    ULONG64 PreferredMask;
    ULONG64 AvailableMask;
};

typedef struct _KINTERRUPT {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY InterruptListEntry;
    PUCHAR ServiceRoutine;
    PUCHAR MessageServiceRoutine;
    ULONG MessageIndex;
    PVOID ServiceContext;
    ULONG64 SpinLock;
    ULONG TickCount;
    PULONG64 ActualLock;
    PVOID DispatchAddress;
    ULONG Vector;
    UCHAR Irql;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
    UCHAR Connected;
    ULONG Number;
    UCHAR ShareVector;
    UCHAR EmulateActiveBoth;
    USHORT ActiveCount;
    LONG InternalState;
    enum _KINTERRUPT_MODE Mode;
    enum _KINTERRUPT_POLARITY Polarity;
    ULONG ServiceCount;
    ULONG DispatchCount;
    struct _KEVENT *PassiveEvent;
    struct _KTRAP_FRAME *TrapFrame;
    PVOID DisconnectData;
    struct _KTHREAD *ServiceThread;
    struct _INTERRUPT_CONNECTION_DATA *ConnectionData;
    PVOID IntTrackEntry;
    struct _ISRDPCSTATS IsrDpcStats;
    PVOID RedirectObject;
    UCHAR Padding[8];
};

typedef struct _KIST_BASE_FRAME {
    struct _KPCR *KernelGsBase;
    struct _KIST_LINK_FRAME *IstStack;
    ULONG64 PreviousGsBase;
    ULONG64 PreviousCr3;
};

typedef struct _KIST_LINK_FRAME {
    struct _KIST_BASE_FRAME *IstBaseFrame;
    ULONG Signature;
    ULONG Reserved0;
    ULONG64 Reserved[2];
};

typedef struct _KLDR_DATA_TABLE_ENTRY {
    struct _LIST_ENTRY InLoadOrderLinks;
    PVOID ExceptionTable;
    ULONG ExceptionTableSize;
    PVOID GpValue;
    struct _NON_PAGED_DEBUG_INFO *NonPagedDebugInfo;
    PVOID DllBase;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    struct _UNICODE_STRING FullDllName;
    struct _UNICODE_STRING BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    union {
        USHORT SignatureLevel : 4;
        USHORT SignatureType : 3;
        USHORT Unused : 9;
        USHORT EntireField;
    } u1;
    PVOID SectionPointer;
    ULONG CheckSum;
    ULONG CoverageSectionSize;
    PVOID CoverageSection;
    PVOID LoadedImports;
    PVOID Spare;
    ULONG SizeOfImageNotRounded;
    ULONG TimeDateStamp;
};

typedef struct _KLOCK_ENTRY {
    struct _RTL_BALANCED_NODE TreeNode;
    struct _SINGLE_LIST_ENTRY FreeListEntry;
    ULONG EntryFlags;
    UCHAR EntryOffset;
    UCHAR ThreadLocalFlags;
    UCHAR WaitingBit : 1;
    UCHAR Spare0 : 7;
    UCHAR AcquiredByte;
    UCHAR AcquiredBit : 1;
    UCHAR CrossThreadFlags;
    UCHAR HeadNodeBit : 1;
    UCHAR IoPriorityBit : 1;
    UCHAR IoQoSWaiter : 1;
    UCHAR Spare1 : 5;
    ULONG StaticState : 8;
    ULONG AllFlags : 24;
    ULONG SpareFlags;
    struct _KLOCK_ENTRY_LOCK_STATE LockState;
    PVOID LockUnsafe;
    UCHAR CrossThreadReleasableAndBusyByte;
    UCHAR Reserved[6];
    UCHAR InTreeByte;
    PVOID SessionState;
    ULONG SessionId;
    ULONG SessionPad;
    struct _RTL_RB_TREE OwnerTree;
    struct _RTL_RB_TREE WaiterTree;
    CHAR CpuPriorityKey;
    ULONG64 EntryLock;
    union _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;
    ULONG SparePad;
};

typedef struct _KLOCK_ENTRY_LOCK_STATE {
    ULONG64 CrossThreadReleasable : 1;
    ULONG64 Busy : 1;
    ULONG64 Reserved : 61;
    ULONG64 InTree : 1;
    PVOID LockState;
    PVOID SessionState;
    ULONG SessionId;
    ULONG SessionPad;
};

typedef struct _KLOCK_QUEUE_HANDLE {
    struct _KSPIN_LOCK_QUEUE LockQueue;
    UCHAR OldIrql;
};

typedef struct _KMUTANT {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY MutantListEntry;
    struct _KTHREAD *OwnerThread;
    UCHAR Abandoned;
    UCHAR ApcDisable;
};

typedef struct _KNODE {
    ULONG64 IdleNonParkedCpuSet;
    ULONG64 IdleSmtSet;
    ULONG64 IdleCpuSet;
    ULONG64 DeepIdleSet;
    ULONG64 IdleConstrainedSet;
    ULONG64 NonParkedSet;
    ULONG64 NonIsrTargetedSet;
    LONG ParkLock;
    ULONG Seed;
    ULONG SiblingMask;
    struct _GROUP_AFFINITY Affinity;
    UCHAR AffinityFill[10];
    USHORT NodeNumber;
    USHORT PrimaryNodeNumber;
    UCHAR Stride;
    UCHAR Spare0;
    ULONG64 SharedReadyQueueLeaders;
    ULONG ProximityId;
    ULONG Lowest;
    ULONG Highest;
    UCHAR MaximumProcessors;
    struct _flags Flags;
    UCHAR Spare10;
    struct _KHETERO_PROCESSOR_SET HeteroSets[5];
    ULONG64 PpmConfiguredQosSets[4];
};

typedef struct _KPCR {
    struct _NT_TIB NtTib;
    union _KGDTENTRY64 *GdtBase;
    struct _KTSS64 *TssBase;
    ULONG64 UserRsp;
    struct _KPCR *Self;
    struct _KPRCB *CurrentPrcb;
    struct _KSPIN_LOCK_QUEUE *LockArray;
    PVOID Used_Self;
    union _KIDTENTRY64 *IdtBase;
    ULONG64 Unused[2];
    UCHAR Irql;
    UCHAR SecondLevelCacheAssociativity;
    UCHAR ObsoleteNumber;
    UCHAR Fill0;
    ULONG Unused0[3];
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG StallScaleFactor;
    PVOID Unused1[3];
    ULONG KernelReserved[15];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG Unused2;
    PVOID KdVersionBlock;
    PVOID Unused3;
    ULONG PcrAlign1[24];
    struct _KPRCB Prcb;
};

typedef struct _KPRCB {
    ULONG MxCsr;
    UCHAR LegacyNumber;
    UCHAR ReservedMustBeZero;
    UCHAR InterruptRequest;
    UCHAR IdleHalt;
    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;
    UCHAR NestingLevel;
    UCHAR ClockOwner;
    UCHAR PendingTickFlags;
    UCHAR PendingTick : 1;
    UCHAR PendingBackupTick : 1;
    UCHAR IdleState;
    ULONG Number;
    ULONG64 RspBase;
    ULONG64 PrcbLock;
    PCHAR PriorityState;
    CHAR CpuType;
    CHAR CpuID;
    USHORT CpuStep;
    UCHAR CpuStepping;
    UCHAR CpuModel;
    ULONG MHz;
    ULONG64 HalReserved[8];
    USHORT MinorVersion;
    USHORT MajorVersion;
    UCHAR BuildType;
    UCHAR CpuVendor;
    UCHAR CoresPerPhysicalProcessor;
    UCHAR LogicalProcessorsPerCore;
    ULONG64 PrcbPad04[6];
    struct _KNODE *ParentNode;
    ULONG64 GroupSetMember;
    UCHAR Group;
    UCHAR GroupIndex;
    UCHAR PrcbPad05[2];
    ULONG InitialApicId;
    ULONG ScbOffset;
    ULONG ApicMask;
    PVOID AcpiReserved;
    ULONG CFlushSize;
    union _KPRCBFLAG PrcbFlags;
    ULONG64 TrappedSecurityDomain;
    UCHAR BpbState;
    UCHAR BpbCpuIdle : 1;
    UCHAR BpbFlushRsbOnTrap : 1;
    UCHAR BpbIbpbOnReturn : 1;
    UCHAR BpbIbpbOnTrap : 1;
    UCHAR BpbIbpbOnRetpolineExit : 1;
    UCHAR BpbStateReserved : 3;
    UCHAR BpbFeatures;
    UCHAR BpbClearOnIdle : 1;
    UCHAR BpbEnabled : 1;
    UCHAR BpbSmep : 1;
    UCHAR BpbFeaturesReserved : 5;
    UCHAR BpbCurrentSpecCtrl;
    UCHAR BpbKernelSpecCtrl;
    UCHAR BpbNmiSpecCtrl;
    UCHAR BpbUserSpecCtrl;
    SHORT PairRegister;
    ULONG64 PrcbPad11[2];
    struct _KPROCESSOR_STATE ProcessorState;
    struct _XSAVE_AREA_HEADER *ExtendedSupervisorState;
    ULONG ProcessorSignature;
    ULONG ProcessorFlags;
    UCHAR BpbRetpolineExitSpecCtrl;
    UCHAR BpbTrappedRetpolineExitSpecCtrl;
    UCHAR BpbTrappedBpbState;
    UCHAR BpbTrappedCpuIdle : 1;
    UCHAR BpbTrappedFlushRsbOnTrap : 1;
    UCHAR BpbTrappedIbpbOnReturn : 1;
    UCHAR BpbTrappedIbpbOnTrap : 1;
    UCHAR BpbTrappedIbpbOnRetpolineExit : 1;
    UCHAR BpbtrappedBpbStateReserved : 3;
    UCHAR BpbRetpolineState;
    UCHAR BpbRunningNonRetpolineCode : 1;
    UCHAR BpbIndirectCallsSafe : 1;
    UCHAR BpbRetpolineEnabled : 1;
    UCHAR BpbRetpolineStateReserved : 5;
    ULONG PrcbPad12b;
    ULONG64 PrcbPad12a;
    ULONG64 PrcbPad12[3];
    struct _KSPIN_LOCK_QUEUE LockQueue[17];
    struct _PP_LOOKASIDE_LIST PPLookasideList[16];
    struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
    struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
    struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
    ULONG64 PrcbPad20;
    struct _SINGLE_LIST_ENTRY DeferredReadyListHead;
    LONG MmPageFaultCount;
    LONG MmCopyOnWriteCount;
    LONG MmTransitionCount;
    LONG MmDemandZeroCount;
    LONG MmPageReadCount;
    LONG MmPageReadIoCount;
    LONG MmDirtyPagesWriteCount;
    LONG MmDirtyWriteIoCount;
    LONG MmMappedPagesWriteCount;
    LONG MmMappedWriteIoCount;
    ULONG KeSystemCalls;
    ULONG KeContextSwitches;
    ULONG PrcbPad40;
    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadNotPossible;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;
    LONG IoReadOperationCount;
    LONG IoWriteOperationCount;
    LONG IoOtherOperationCount;
    union _LARGE_INTEGER IoReadTransferCount;
    union _LARGE_INTEGER IoWriteTransferCount;
    union _LARGE_INTEGER IoOtherTransferCount;
    LONG PacketBarrier;
    LONG TargetCount;
    ULONG IpiFrozen;
    ULONG PrcbPad30;
    PVOID IsrDpcStats;
    ULONG DeviceInterrupts;
    LONG LookasideIrpFloat;
    ULONG InterruptLastCount;
    ULONG InterruptRate;
    ULONG64 LastNonHrTimerExpiration;
    struct _KPRCB *PairPrcb;
    ULONG64 PrcbPad35[1];
    union _SLIST_HEADER InterruptObjectPool;
    ULONG64 PrcbPad41[6];
    struct _KDPC_DATA DpcData[2];
    PVOID DpcStack;
    LONG MaximumDpcQueueDepth;
    ULONG DpcRequestRate;
    ULONG MinimumDpcRate;
    ULONG DpcLastCount;
    UCHAR ThreadDpcEnable;
    UCHAR QuantumEnd;
    UCHAR DpcRoutineActive;
    UCHAR IdleSchedule;
    LONG DpcRequestSummary;
    SHORT DpcRequestSlot[2];
    SHORT NormalDpcState;
    SHORT ThreadDpcState;
    ULONG DpcNormalProcessingActive : 1;
    ULONG DpcNormalProcessingRequested : 1;
    ULONG DpcNormalThreadSignal : 1;
    ULONG DpcNormalTimerExpiration : 1;
    ULONG DpcNormalDpcPresent : 1;
    ULONG DpcNormalLocalInterrupt : 1;
    ULONG DpcNormalSpare : 10;
    ULONG DpcThreadActive : 1;
    ULONG DpcThreadRequested : 1;
    ULONG DpcThreadSpare : 14;
    ULONG LastTimerHand;
    ULONG LastTick;
    ULONG ClockInterrupts;
    ULONG ReadyScanTick;
    PVOID InterruptObject[256];
    struct _KTIMER_TABLE TimerTable;
    struct _KGATE DpcGate;
    PVOID PrcbPad52;
    struct _KDPC CallDpc;
    LONG ClockKeepAlive;
    UCHAR PrcbPad60[2];
    USHORT NmiActive;
    LONG DpcWatchdogPeriod;
    LONG DpcWatchdogCount;
    LONG KeSpinLockOrdering;
    ULONG DpcWatchdogProfileCumulativeDpcThreshold;
    PVOID CachedPtes;
    struct _LIST_ENTRY WaitListHead;
    ULONG64 WaitLock;
    ULONG ReadySummary;
    LONG AffinitizedSelectionMask;
    ULONG QueueIndex;
    ULONG PrcbPad75[3];
    struct _KDPC TimerExpirationDpc;
    struct _RTL_RB_TREE ScbQueue;
    struct _LIST_ENTRY DispatcherReadyListHead[32];
    ULONG InterruptCount;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG DpcTime;
    ULONG InterruptTime;
    ULONG AdjustDpcThreshold;
    UCHAR DebuggerSavedIRQL;
    UCHAR GroupSchedulingOverQuota;
    UCHAR DeepSleep;
    UCHAR PrcbPad80;
    ULONG DpcTimeCount;
    ULONG DpcTimeLimit;
    ULONG PeriodicCount;
    ULONG PeriodicBias;
    ULONG AvailableTime;
    ULONG KeExceptionDispatchCount;
    ULONG ReadyThreadCount;
    ULONG64 ReadyQueueExpectedRunTime;
    ULONG64 StartCycles;
    ULONG64 TaggedCyclesStart;
    ULONG64 TaggedCycles[2];
    ULONG64 GenerationTarget;
    ULONG64 AffinitizedCycles;
    ULONG64 ImportantCycles;
    ULONG64 UnimportantCycles;
    ULONG DpcWatchdogProfileSingleDpcThreshold;
    LONG MmSpinLockOrdering;
    PVOID CachedStack;
    ULONG PageColor;
    ULONG NodeColor;
    ULONG NodeShiftedColor;
    ULONG SecondaryColorMask;
    UCHAR PrcbPad81[7];
    UCHAR TbFlushListActive;
    ULONG64 PrcbPad82[2];
    ULONG64 CycleTime;
    ULONG64 Cycles[4][2];
    ULONG CcFastMdlReadNoWait;
    ULONG CcFastMdlReadWait;
    ULONG CcFastMdlReadNotPossible;
    ULONG CcMapDataNoWait;
    ULONG CcMapDataWait;
    ULONG CcPinMappedDataCount;
    ULONG CcPinReadNoWait;
    ULONG CcPinReadWait;
    ULONG CcMdlReadNoWait;
    ULONG CcMdlReadWait;
    ULONG CcLazyWriteHotSpots;
    ULONG CcLazyWriteIos;
    ULONG CcLazyWritePages;
    ULONG CcDataFlushes;
    ULONG CcDataPages;
    ULONG CcLostDelayedWrites;
    ULONG CcFastReadResourceMiss;
    ULONG CcCopyReadWaitMiss;
    ULONG CcFastMdlReadResourceMiss;
    ULONG CcMapDataNoWaitMiss;
    ULONG CcMapDataWaitMiss;
    ULONG CcPinReadNoWaitMiss;
    ULONG CcPinReadWaitMiss;
    ULONG CcMdlReadNoWaitMiss;
    ULONG CcMdlReadWaitMiss;
    ULONG CcReadAheadIos;
    LONG MmCacheTransitionCount;
    LONG MmCacheReadCount;
    LONG MmCacheIoCount;
    ULONG PrcbPad91;
    PVOID MmInternal;
    struct _PROCESSOR_POWER_STATE PowerState;
    PVOID HyperPte;
    struct _LIST_ENTRY ScbList;
    struct _KDPC ForceIdleDpc;
    struct _KDPC DpcWatchdogDpc;
    struct _KTIMER DpcWatchdogTimer;
    struct _CACHE_DESCRIPTOR Cache[5];
    ULONG CacheCount;
    ULONG CachedCommit;
    ULONG CachedResidentAvailable;
    PVOID WheaInfo;
    PVOID EtwSupport;
    PVOID ExSaPageArray;
    ULONG KeAlignmentFixupCount;
    ULONG PrcbPad95;
    union _SLIST_HEADER HypercallPageList;
    PULONG64 StatisticsPage;
    ULONG64 PrcbPad85[5];
    PVOID HypercallCachedPages;
    PVOID VirtualApicAssist;
    struct _KAFFINITY_EX PackageProcessorSet;
    ULONG64 PrcbPad86;
    ULONG64 SharedReadyQueueMask;
    struct _KSHARED_READY_QUEUE *SharedReadyQueue;
    ULONG SharedQueueScanOwner;
    ULONG ScanSiblingIndex;
    ULONG64 CoreProcessorSet;
    ULONG64 ScanSiblingMask;
    ULONG64 LLCMask;
    ULONG64 CacheProcessorMask[5];
    struct _PROCESSOR_PROFILE_CONTROL_AREA *ProcessorProfileControlArea;
    PVOID ProfileEventIndexAddress;
    PVOID *DpcWatchdogProfile;
    PVOID *DpcWatchdogProfileCurrentEmptyCapture;
    PVOID SchedulerAssist;
    struct _SYNCH_COUNTERS SynchCounters;
    ULONG64 PrcbPad94;
    struct _FILESYSTEM_DISK_COUNTERS FsCounters;
    UCHAR VendorString[13];
    UCHAR PrcbPad100[3];
    ULONG64 FeatureBits;
    union _LARGE_INTEGER UpdateSignature;
    ULONG64 PteBitCache;
    ULONG PteBitOffset;
    ULONG PrcbPad105;
    struct _CONTEXT *Context;
    ULONG ContextFlagsInit;
    ULONG PrcbPad115;
    struct _XSAVE_AREA *ExtendedState;
    PVOID IsrStack;
    struct _KENTROPY_TIMING_STATE EntropyTimingState;
    ULONG64 PrcbPad110;
    struct {
        ULONG UpdateCycle;
        SHORT PairLocal;
        UCHAR PairLocalLow;
        UCHAR PairLocalForceStibp : 1;
        UCHAR Reserved : 4;
        UCHAR Frozen : 1;
        UCHAR ForceUntrusted : 1;
        UCHAR SynchIpi : 1;
        SHORT PairRemote;
        UCHAR PairRemoteLow;
        UCHAR Reserved2;
        UCHAR Trace[24];
        ULONG64 LocalDomain;
        ULONG64 RemoteDomain;
        struct _KTHREAD *Thread;
    } StibpPairingTrace;
    struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
    struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;
    struct _KDPC AbDpc;
    struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;
    struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;
    struct _KSECURE_FAULT_INFORMATION SecureFault;
    ULONG64 PrcbPad120;
    struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;
    ULONG64 PrcbPad125[2];
    ULONG TimerExpirationTraceCount;
    ULONG PrcbPad127;
    struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];
    ULONG64 PrcbPad128[7];
    struct _REQUEST_MAILBOX *Mailbox;
    ULONG64 PrcbPad130[7];
    struct _MACHINE_CHECK_CONTEXT McheckContext[2];
    ULONG64 PrcbPad134[4];
    struct _KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];
    ULONG64 PrcbPad134a[4];
    UCHAR PrcbPad138[960];
    ULONG64 KernelDirectoryTableBase;
    ULONG64 RspBaseShadow;
    ULONG64 UserRspShadow;
    ULONG ShadowFlags;
    ULONG DbgMceNestingLevel;
    ULONG DbgMceFlags;
    ULONG PrcbPad139;
    ULONG64 PrcbPad140[507];
    struct _REQUEST_MAILBOX RequestMailbox[1];
};

typedef struct _KPRIQUEUE {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY EntryListHead[32];
    LONG CurrentCount[32];
    ULONG MaximumCount;
    struct _LIST_ENTRY ThreadListHead;
};

typedef struct _KPROCESS {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY ProfileListHead;
    ULONG64 DirectoryTableBase;
    struct _LIST_ENTRY ThreadListHead;
    ULONG ProcessLock;
    ULONG ProcessTimerDelay;
    ULONG64 DeepFreezeStartTime;
    struct _KAFFINITY_EX Affinity;
    struct _LIST_ENTRY ReadyListHead;
    struct _SINGLE_LIST_ENTRY SwapListEntry;
    struct _KAFFINITY_EX ActiveProcessors;
    ULONG AutoAlignment : 1;
    ULONG DisableBoost : 1;
    ULONG DisableQuantum : 1;
    ULONG DeepFreeze : 1;
    ULONG TimerVirtualization : 1;
    ULONG CheckStackExtents : 1;
    ULONG CacheIsolationEnabled : 1;
    ULONG PpmPolicy : 3;
    ULONG ActiveGroupsMask : 20;
    ULONG VaSpaceDeleted : 1;
    ULONG ReservedFlags : 1;
    LONG ProcessFlags;
    CHAR BasePriority;
    CHAR QuantumReset;
    CHAR Visited;
    union _KEXECUTE_OPTIONS Flags;
    ULONG ThreadSeed[20];
    USHORT IdealNode[20];
    USHORT IdealGlobalNode;
    USHORT Spare1;
    union _KSTACK_COUNT StackCount;
    struct _LIST_ENTRY ProcessListEntry;
    ULONG64 CycleTime;
    ULONG64 ContextSwitches;
    struct _KSCHEDULING_GROUP *SchedulingGroup;
    ULONG FreezeCount;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG ReadyTime;
    ULONG64 UserDirectoryTableBase;
    UCHAR AddressPolicy;
    UCHAR Spare2[71];
    PVOID InstrumentationCallback;
    union {
        ULONG64 SecureHandle;
        struct {
            ULONG64 SecureProcess : 1;
            ULONG64 Unused : 1;
        } Flags;
    } SecureState;
};

typedef struct _KPROCESSOR_STATE {
    struct _KSPECIAL_REGISTERS SpecialRegisters;
    struct _CONTEXT ContextFrame;
};

typedef struct _KQUEUE {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY EntryListHead;
    ULONG CurrentCount;
    ULONG MaximumCount;
    struct _LIST_ENTRY ThreadListHead;
};

typedef struct _KREQUEST_PACKET {
    PVOID CurrentPacket[3];
    PVOID WorkerRoutine;
};

typedef struct _KRESOURCEMANAGER {
    struct _KEVENT NotificationAvailable;
    ULONG cookie;
    enum _KRESOURCEMANAGER_STATE State;
    ULONG Flags;
    struct _KMUTANT Mutex;
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
    struct _GUID RmId;
    struct _KQUEUE NotificationQueue;
    struct _KMUTANT NotificationMutex;
    struct _LIST_ENTRY EnlistmentHead;
    ULONG EnlistmentCount;
    PLONG NotificationRoutine;
    PVOID Key;
    struct _LIST_ENTRY ProtocolListHead;
    struct _LIST_ENTRY PendingPropReqListHead;
    struct _LIST_ENTRY CRMListEntry;
    struct _KTM *Tm;
    struct _UNICODE_STRING Description;
    struct _KTMOBJECT_NAMESPACE Enlistments;
    struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
};

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING {
    struct _LIST_ENTRY NotificationListHead;
    PVOID Port;
    ULONG64 Key;
    struct _EPROCESS *BindingProcess;
};

typedef struct _KSCB {
    ULONG64 GenerationCycles;
    ULONG64 MinQuotaCycleTarget;
    ULONG64 MaxQuotaCycleTarget;
    ULONG64 RankCycleTarget;
    ULONG64 LongTermCycles;
    ULONG64 LastReportedCycles;
    ULONG64 OverQuotaHistory;
    ULONG64 ReadyTime;
    ULONG64 InsertTime;
    struct _LIST_ENTRY PerProcessorList;
    struct _RTL_BALANCED_NODE QueueNode;
    UCHAR Inserted : 1;
    UCHAR MaxOverQuota : 1;
    UCHAR MinOverQuota : 1;
    UCHAR RankBias : 1;
    UCHAR SoftCap : 1;
    UCHAR ShareRankOwner : 1;
    UCHAR Spare1 : 2;
    UCHAR Depth;
    USHORT ReadySummary;
    ULONG Rank;
    PULONG ShareRank;
    ULONG OwnerShareRank;
    struct _LIST_ENTRY ReadyListHead[16];
    struct _RTL_RB_TREE ChildScbQueue;
    struct _KSCB *Parent;
    struct _KSCB *Root;
};

typedef struct _KSCHEDULING_GROUP {
    struct _KSCHEDULING_GROUP_POLICY Policy;
    ULONG RelativeWeight;
    ULONG ChildMinRate;
    ULONG ChildMinWeight;
    ULONG ChildTotalWeight;
    ULONG64 QueryHistoryTimeStamp;
    LONG64 NotificationCycles;
    LONG64 MaxQuotaLimitCycles;
    LONG64 MaxQuotaCyclesRemaining;
    struct _LIST_ENTRY SchedulingGroupList;
    struct _LIST_ENTRY Sibling;
    struct _KDPC *NotificationDpc;
    struct _LIST_ENTRY ChildList;
    struct _KSCHEDULING_GROUP *Parent;
    struct _KSCB PerProcessor[1];
};

typedef struct _KSCHEDULING_GROUP_POLICY {
    ULONG Value;
    USHORT Weight;
    USHORT MinRate;
    USHORT MaxRate;
    ULONG AllFlags;
    ULONG Type : 1;
    ULONG Disabled : 1;
    ULONG RankBias : 1;
    ULONG Spare1 : 29;
};

typedef struct _KSECONDARY_IDT_ENTRY {
    ULONG64 SpinLock;
    struct _KEVENT ConnectLock;
    UCHAR LineMasked;
    struct _KINTERRUPT *InterruptList;
};

typedef struct _KSECURE_FAULT_INFORMATION {
    ULONG64 FaultCode;
    ULONG64 FaultVa;
};

typedef struct _KSEMAPHORE {
    struct _DISPATCHER_HEADER Header;
    LONG Limit;
};

typedef struct _KSHARED_READY_QUEUE {
    ULONG64 Lock;
    ULONG ReadySummary;
    struct _LIST_ENTRY ReadyListHead[32];
    CHAR RunningSummary[64];
    UCHAR Span;
    UCHAR LowProcIndex;
    UCHAR QueueIndex;
    UCHAR ProcCount;
    UCHAR ScanOwner;
    UCHAR Spare[3];
    ULONG64 Affinity;
    ULONG ReadyThreadCount;
    ULONG64 ReadyQueueExpectedRunTime;
};

typedef struct _KSPECIAL_REGISTERS {
    ULONG64 Cr0;
    ULONG64 Cr2;
    ULONG64 Cr3;
    ULONG64 Cr4;
    ULONG64 KernelDr0;
    ULONG64 KernelDr1;
    ULONG64 KernelDr2;
    ULONG64 KernelDr3;
    ULONG64 KernelDr6;
    ULONG64 KernelDr7;
    struct _KDESCRIPTOR Gdtr;
    struct _KDESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG MxCsr;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    ULONG64 Cr8;
    ULONG64 MsrGsBase;
    ULONG64 MsrGsSwap;
    ULONG64 MsrStar;
    ULONG64 MsrLStar;
    ULONG64 MsrCStar;
    ULONG64 MsrSyscallMask;
    ULONG64 Xcr0;
    ULONG64 MsrFsBase;
    ULONG64 SpecialPadding0;
};

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE *Next;
    PULONG64 Lock;
};

typedef struct _KSTACK_CONTROL {
    ULONG64 StackBase;
    ULONG64 ActualLimit;
    ULONG64 StackExpansion : 1;
    struct _KERNEL_STACK_SEGMENT Previous;
};

typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};

typedef struct _KTB_FLUSH_VA {
    union {
        ULONG64 NumberOfEntries : 10;
        ULONG64 PageSize : 2;
        PVOID Va;
        ULONG64 VaLong;
    } u1;
};

typedef struct _KTHREAD {
    struct _DISPATCHER_HEADER Header;
    PVOID SListFaultAddress;
    ULONG64 QuantumTarget;
    PVOID InitialStack;
    PVOID StackLimit;
    PVOID StackBase;
    ULONG64 ThreadLock;
    ULONG64 CycleTime;
    ULONG CurrentRunTime;
    ULONG ExpectedRunTime;
    PVOID KernelStack;
    struct _XSAVE_FORMAT *StateSaveArea;
    struct _KSCHEDULING_GROUP *SchedulingGroup;
    union _KWAIT_STATUS_REGISTER WaitRegister;
    UCHAR Running;
    UCHAR Alerted[2];
    ULONG AutoBoostActive : 1;
    ULONG ReadyTransition : 1;
    ULONG WaitNext : 1;
    ULONG SystemAffinityActive : 1;
    ULONG Alertable : 1;
    ULONG UserStackWalkActive : 1;
    ULONG ApcInterruptRequest : 1;
    ULONG QuantumEndMigrate : 1;
    ULONG UmsDirectedSwitchEnable : 1;
    ULONG TimerActive : 1;
    ULONG SystemThread : 1;
    ULONG ProcessDetachActive : 1;
    ULONG CalloutActive : 1;
    ULONG ScbReadyQueue : 1;
    ULONG ApcQueueable : 1;
    ULONG ReservedStackInUse : 1;
    ULONG UmsPerformingSyscall : 1;
    ULONG TimerSuspended : 1;
    ULONG SuspendedWaitMode : 1;
    ULONG SuspendSchedulerApcWait : 1;
    ULONG CetShadowStack : 1;
    ULONG Reserved : 11;
    LONG MiscFlags;
    ULONG BamQosLevel : 2;
    ULONG AutoAlignment : 1;
    ULONG DisableBoost : 1;
    ULONG AlertedByThreadId : 1;
    ULONG QuantumDonation : 1;
    ULONG EnableStackSwap : 1;
    ULONG GuiThread : 1;
    ULONG DisableQuantum : 1;
    ULONG ChargeOnlySchedulingGroup : 1;
    ULONG DeferPreemption : 1;
    ULONG QueueDeferPreemption : 1;
    ULONG ForceDeferSchedule : 1;
    ULONG SharedReadyQueueAffinity : 1;
    ULONG FreezeCount : 1;
    ULONG TerminationApcRequest : 1;
    ULONG AutoBoostEntriesExhausted : 1;
    ULONG KernelStackResident : 1;
    ULONG TerminateRequestReason : 2;
    ULONG ProcessStackCountDecremented : 1;
    ULONG RestrictedGuiThread : 1;
    ULONG VpBackingThread : 1;
    ULONG ThreadFlagsSpare : 1;
    ULONG EtwStackTraceApcInserted : 8;
    LONG ThreadFlags;
    UCHAR Tag;
    UCHAR SystemHeteroCpuPolicy;
    UCHAR UserHeteroCpuPolicy : 7;
    UCHAR ExplicitSystemHeteroCpuPolicy : 1;
    UCHAR RunningNonRetpolineCode : 1;
    UCHAR SpecCtrlSpare : 7;
    UCHAR SpecCtrl;
    ULONG SystemCallNumber;
    ULONG ReadyTime;
    PVOID FirstArgument;
    struct _KTRAP_FRAME *TrapFrame;
    struct _KAPC_STATE ApcState;
    UCHAR ApcStateFill[43];
    CHAR Priority;
    ULONG UserIdealProcessor;
    LONG64 WaitStatus;
    struct _KWAIT_BLOCK *WaitBlockList;
    struct _LIST_ENTRY WaitListEntry;
    struct _SINGLE_LIST_ENTRY SwapListEntry;
    struct _DISPATCHER_HEADER *Queue;
    PVOID Teb;
    ULONG64 RelativeTimerBias;
    struct _KTIMER Timer;
    struct _KWAIT_BLOCK WaitBlock[4];
    UCHAR WaitBlockFill4[20];
    ULONG ContextSwitches;
    UCHAR WaitBlockFill5[68];
    UCHAR State;
    CHAR Spare13;
    UCHAR WaitIrql;
    CHAR WaitMode;
    UCHAR WaitBlockFill6[116];
    ULONG WaitTime;
    UCHAR WaitBlockFill7[164];
    SHORT KernelApcDisable;
    SHORT SpecialApcDisable;
    ULONG CombinedApcDisable;
    UCHAR WaitBlockFill8[40];
    struct _KTHREAD_COUNTERS *ThreadCounters;
    UCHAR WaitBlockFill9[88];
    struct _XSTATE_SAVE *XStateSave;
    UCHAR WaitBlockFill10[136];
    PVOID Win32Thread;
    UCHAR WaitBlockFill11[176];
    struct _UMS_CONTROL_BLOCK *Ucb;
    struct _KUMS_CONTEXT_HEADER *Uch;
    PVOID Spare21;
    struct _LIST_ENTRY QueueListEntry;
    ULONG NextProcessor;
    ULONG NextProcessorNumber : 31;
    ULONG SharedReadyQueue : 1;
    LONG QueuePriority;
    struct _KPROCESS *Process;
    struct _GROUP_AFFINITY UserAffinity;
    UCHAR UserAffinityFill[10];
    CHAR PreviousMode;
    CHAR BasePriority;
    CHAR PriorityDecrement;
    UCHAR ForegroundBoost : 4;
    UCHAR UnusualBoost : 4;
    UCHAR Preempted;
    UCHAR AdjustReason;
    CHAR AdjustIncrement;
    ULONG64 AffinityVersion;
    struct _GROUP_AFFINITY Affinity;
    UCHAR AffinityFill[10];
    UCHAR ApcStateIndex;
    UCHAR WaitBlockCount;
    ULONG IdealProcessor;
    ULONG64 NpxState;
    struct _KAPC_STATE SavedApcState;
    UCHAR SavedApcStateFill[43];
    UCHAR WaitReason;
    CHAR SuspendCount;
    CHAR Saturation;
    USHORT SListFaultCount;
    struct _KAPC SchedulerApc;
    UCHAR SchedulerApcFill0[1];
    UCHAR ResourceIndex;
    UCHAR SchedulerApcFill1[3];
    UCHAR QuantumReset;
    UCHAR SchedulerApcFill2[4];
    ULONG KernelTime;
    UCHAR SchedulerApcFill3[64];
    struct _KPRCB *WaitPrcb;
    UCHAR SchedulerApcFill4[72];
    PVOID LegoData;
    UCHAR SchedulerApcFill5[83];
    UCHAR CallbackNestingLevel;
    ULONG UserTime;
    struct _KEVENT SuspendEvent;
    struct _LIST_ENTRY ThreadListEntry;
    struct _LIST_ENTRY MutantListHead;
    UCHAR AbEntrySummary;
    UCHAR AbWaitEntryCount;
    UCHAR AbAllocationRegionCount;
    CHAR SystemPriority;
    ULONG SecureThreadCookie;
    struct _KLOCK_ENTRY LockEntries[6];
    struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;
    struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
    UCHAR PriorityFloorCounts[16];
    ULONG PriorityFloorSummary;
    LONG AbCompletedIoBoostCount;
    LONG AbCompletedIoQoSBoostCount;
    SHORT KeReferenceCount;
    UCHAR AbOrphanedEntrySummary;
    UCHAR AbOwnedEntryCount;
    ULONG ForegroundLossTime;
    struct _LIST_ENTRY GlobalForegroundListEntry;
    struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
    ULONG64 InGlobalForegroundList;
    LONG64 ReadOperationCount;
    LONG64 WriteOperationCount;
    LONG64 OtherOperationCount;
    LONG64 ReadTransferCount;
    LONG64 WriteTransferCount;
    LONG64 OtherTransferCount;
    struct _KSCB *QueuedScb;
    ULONG ThreadTimerDelay;
    LONG ThreadFlags2;
    ULONG PpmPolicy : 2;
    ULONG ThreadFlags2Reserved : 30;
    PVOID SchedulerAssist;
};

typedef struct _KTHREAD_COUNTERS {
    ULONG64 WaitReasonBitMap;
    struct _THREAD_PERFORMANCE_DATA *UserData;
    ULONG Flags;
    ULONG ContextSwitches;
    ULONG64 CycleTimeBias;
    ULONG64 HardwareCounters;
    struct _COUNTER_READING HwCounter[16];
};

typedef struct _KTIMER {
    struct _DISPATCHER_HEADER Header;
    union _ULARGE_INTEGER DueTime;
    struct _LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;
    ULONG Processor;
    ULONG Period;
};

typedef struct _KTIMER2 {
    struct _DISPATCHER_HEADER Header;
    struct _RTL_BALANCED_NODE RbNodes[2];
    struct _LIST_ENTRY ListEntry;
    ULONG64 DueTime[2];
    LONG64 Period;
    PVOID Callback;
    PVOID CallbackContext;
    PVOID DisableCallback;
    PVOID DisableContext;
    UCHAR AbsoluteSystemTime;
    UCHAR TypeFlags;
    UCHAR Unused : 1;
    UCHAR IdleResilient : 1;
    UCHAR HighResolution : 1;
    UCHAR NoWake : 1;
    UCHAR Unused1 : 4;
    UCHAR CollectionIndex[2];
};

typedef struct _KTIMER2_COLLECTION {
    struct _RTL_RB_TREE Tree;
    ULONG64 NextDueTime;
};

typedef struct _KTIMER_EXPIRATION_TRACE {
    ULONG64 InterruptTime;
    union _LARGE_INTEGER PerformanceCounter;
};

typedef struct _KTIMER_TABLE {
    struct _KTIMER *TimerExpiry[64];
    struct _KTIMER_TABLE_ENTRY TimerEntries[256];
};

typedef struct _KTIMER_TABLE_ENTRY {
    ULONG64 Lock;
    struct _LIST_ENTRY Entry;
    union _ULARGE_INTEGER Time;
};

typedef struct _KTM {
    ULONG cookie;
    struct _KMUTANT Mutex;
    enum KTM_STATE State;
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
    struct _GUID TmIdentity;
    ULONG Flags;
    ULONG VolatileFlags;
    struct _UNICODE_STRING LogFileName;
    struct _FILE_OBJECT *LogFileObject;
    PVOID MarshallingContext;
    PVOID LogManagementContext;
    struct _KTMOBJECT_NAMESPACE Transactions;
    struct _KTMOBJECT_NAMESPACE ResourceManagers;
    struct _KMUTANT LsnOrderedMutex;
    struct _LIST_ENTRY LsnOrderedList;
    union _LARGE_INTEGER CommitVirtualClock;
    struct _FAST_MUTEX CommitVirtualClockMutex;
    union _CLS_LSN BaseLsn;
    union _CLS_LSN CurrentReadLsn;
    union _CLS_LSN LastRecoveredLsn;
    PVOID TmRmHandle;
    struct _KRESOURCEMANAGER *TmRm;
    struct _KEVENT LogFullNotifyEvent;
    struct _WORK_QUEUE_ITEM CheckpointWorkItem;
    union _CLS_LSN CheckpointTargetLsn;
    struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem;
    struct _ERESOURCE LogWriteResource;
    ULONG LogFlags;
    LONG LogFullStatus;
    LONG RecoveryStatus;
    union _CLS_LSN LastCheckBaseLsn;
    struct _LIST_ENTRY RestartOrderedList;
    struct _WORK_QUEUE_ITEM OfflineWorkItem;
};

typedef struct _KTMNOTIFICATION_PACKET {
};

typedef struct _KTMOBJECT_NAMESPACE {
    struct _RTL_AVL_TABLE Table;
    struct _KMUTANT Mutex;
    USHORT LinksOffset;
    USHORT GuidOffset;
    UCHAR Expired;
};

typedef struct _KTMOBJECT_NAMESPACE_LINK {
    struct _RTL_BALANCED_LINKS Links;
    UCHAR Expired;
};

typedef struct _KTRANSACTION {
    struct _KEVENT OutcomeEvent;
    ULONG cookie;
    struct _KMUTANT Mutex;
    struct _KTRANSACTION *TreeTx;
    struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
    struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
    struct _GUID UOW;
    enum _KTRANSACTION_STATE State;
    ULONG Flags;
    struct _LIST_ENTRY EnlistmentHead;
    ULONG EnlistmentCount;
    ULONG RecoverableEnlistmentCount;
    ULONG PrePrepareRequiredEnlistmentCount;
    ULONG PrepareRequiredEnlistmentCount;
    ULONG OutcomeRequiredEnlistmentCount;
    ULONG PendingResponses;
    struct _KENLISTMENT *SuperiorEnlistment;
    union _CLS_LSN LastLsn;
    struct _LIST_ENTRY PromotedEntry;
    struct _KTRANSACTION *PromoterTransaction;
    PVOID PromotePropagation;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    union _LARGE_INTEGER Timeout;
    struct _UNICODE_STRING Description;
    struct _KTHREAD *RollbackThread;
    struct _WORK_QUEUE_ITEM RollbackWorkItem;
    struct _KDPC RollbackDpc;
    struct _KTIMER RollbackTimer;
    struct _LIST_ENTRY LsnOrderedEntry;
    enum _KTRANSACTION_OUTCOME Outcome;
    struct _KTM *Tm;
    LONG64 CommitReservation;
    struct _KTRANSACTION_HISTORY TransactionHistory[10];
    ULONG TransactionHistoryCount;
    PVOID DTCPrivateInformation;
    ULONG DTCPrivateInformationLength;
    struct _KMUTANT DTCPrivateInformationMutex;
    PVOID PromotedTxSelfHandle;
    ULONG PendingPromotionCount;
    struct _KEVENT PromotionCompletedEvent;
};

typedef struct _KTRANSACTION_HISTORY {
    enum {
        KTMOH_CommitTransaction_Result = 1,
        KTMOH_RollbackTransaction_Result = 2
    } RecordType;
    ULONG Payload;
};

typedef struct _KTRAP_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;
    CHAR PreviousMode;
    UCHAR InterruptRetpolineState;
    UCHAR PreviousIrql;
    UCHAR FaultIndicator;
    UCHAR NmiMsrIbrs;
    UCHAR ExceptionActive;
    ULONG MxCsr;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 GsBase;
    ULONG64 GsSwap;
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    ULONG64 FaultAddress;
    ULONG64 ContextRecord;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    ULONG64 TrapFrame;
    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 Rbp;
    ULONG64 ErrorCode;
    ULONG64 ExceptionFrame;
    ULONG64 Rip;
    USHORT SegCs;
    UCHAR Fill0;
    UCHAR Logging;
    USHORT Fill1[2];
    ULONG EFlags;
    ULONG Fill2;
    ULONG64 Rsp;
    USHORT SegSs;
    USHORT Fill3;
    ULONG Fill4;
};

typedef struct _KTSS64 {
    ULONG Reserved0;
    ULONG64 Rsp0;
    ULONG64 Rsp1;
    ULONG64 Rsp2;
    ULONG64 Ist[8];
    ULONG64 Reserved1;
    USHORT Reserved2;
    USHORT IoMapBase;
};

typedef struct _KUMS_CONTEXT_HEADER {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    PVOID StackTop;
    ULONG64 StackSize;
    ULONG64 RspOffset;
    ULONG64 Rip;
    struct _XSAVE_FORMAT *FltSave;
    ULONG64 Volatile : 1;
    ULONG64 Reserved : 63;
    ULONG64 Flags;
    struct _KTRAP_FRAME *TrapFrame;
    struct _KEXCEPTION_FRAME *ExceptionFrame;
    struct _KTHREAD *SourceThread;
    ULONG64 Return;
};

typedef struct _KUSER_SHARED_DATA {
    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;
    struct _KSYSTEM_TIME InterruptTime;
    struct _KSYSTEM_TIME SystemTime;
    struct _KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    WCHAR NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG LargePageMinimum;
    ULONG AitSamplingValue;
    ULONG AppCompatFlag;
    ULONG64 RNGSeedVersion;
    ULONG GlobalValidationRunlevel;
    LONG TimeZoneBiasStamp;
    ULONG NtBuildNumber;
    enum _NT_PRODUCT_TYPE NtProductType;
    UCHAR ProductTypeIsValid;
    UCHAR Reserved0[1];
    USHORT NativeProcessorArchitecture;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    UCHAR ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    ULONG TimeSlip;
    enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
    ULONG BootId;
    union _LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    UCHAR KdDebuggerEnabled;
    UCHAR MitigationPolicies;
    UCHAR NXSupportPolicy : 2;
    UCHAR SEHValidationPolicy : 2;
    UCHAR CurDirDevicesSkippedForDlls : 2;
    UCHAR Reserved : 2;
    UCHAR Reserved6[2];
    ULONG ActiveConsoleId;
    ULONG DismountCount;
    ULONG ComPlusPackage;
    ULONG LastSystemRITEventTickCount;
    ULONG NumberOfPhysicalPages;
    UCHAR SafeBootMode;
    UCHAR VirtualizationFlags;
    UCHAR Reserved12[2];
    ULONG SharedDataFlags;
    ULONG DbgErrorPortPresent : 1;
    ULONG DbgElevationEnabled : 1;
    ULONG DbgVirtEnabled : 1;
    ULONG DbgInstallerDetectEnabled : 1;
    ULONG DbgLkgEnabled : 1;
    ULONG DbgDynProcessorEnabled : 1;
    ULONG DbgConsoleBrokerEnabled : 1;
    ULONG DbgSecureBootEnabled : 1;
    ULONG DbgMultiSessionSku : 1;
    ULONG DbgMultiUsersInSessionSku : 1;
    ULONG DbgStateSeparationEnabled : 1;
    ULONG SpareBits : 21;
    ULONG DataFlagsPad[1];
    ULONG64 TestRetInstruction;
    LONG64 QpcFrequency;
    ULONG SystemCall;
    ULONG SystemCallPad0;
    ULONG64 SystemCallPad[2];
    struct _KSYSTEM_TIME TickCount;
    ULONG64 TickCountQuad;
    ULONG ReservedTickCountOverlay[3];
    ULONG TickCountPad[1];
    ULONG Cookie;
    ULONG CookiePad[1];
    LONG64 ConsoleSessionForegroundProcessId;
    ULONG64 TimeUpdateLock;
    ULONG64 BaselineSystemTimeQpc;
    ULONG64 BaselineInterruptTimeQpc;
    ULONG64 QpcSystemTimeIncrement;
    ULONG64 QpcInterruptTimeIncrement;
    UCHAR QpcSystemTimeIncrementShift;
    UCHAR QpcInterruptTimeIncrementShift;
    USHORT UnparkedProcessorCount;
    ULONG EnclaveFeatureMask[4];
    ULONG TelemetryCoverageRound;
    USHORT UserModeGlobalLogger[16];
    ULONG ImageFileExecutionOptions;
    ULONG LangGenerationCount;
    ULONG64 Reserved4;
    ULONG64 InterruptTimeBias;
    ULONG64 QpcBias;
    ULONG ActiveProcessorCount;
    UCHAR ActiveGroupCount;
    UCHAR Reserved9;
    USHORT QpcData;
    UCHAR QpcBypassEnabled;
    UCHAR QpcShift;
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
    struct _XSTATE_CONFIGURATION XState;
};

typedef struct _KWAIT_BLOCK {
    struct _LIST_ENTRY WaitListEntry;
    UCHAR WaitType;
    UCHAR BlockState;
    USHORT WaitKey;
    LONG SpareLong;
    struct _KTHREAD *Thread;
    struct _KQUEUE *NotificationQueue;
    PVOID Object;
    PVOID SparePtr;
};

typedef struct _KWAIT_CHAIN {
    PVOID Head;
};

typedef struct _KWAIT_CHAIN_ENTRY {
    struct _LIST_ENTRY ListEntry;
    struct _KTHREAD *Thread;
    struct _KEVENT Event;
};

typedef struct _LAZY_WRITER {
    struct _KDPC ScanDpc;
    struct _KTIMER ScanTimer;
    UCHAR ScanActive;
    UCHAR OtherWork;
    UCHAR PendingTeardownScan;
    UCHAR PendingPeriodicScan;
    UCHAR PendingLowMemoryScan;
    UCHAR PendingPowerScan;
    UCHAR PendingCoalescingFlushScan;
};

typedef struct _LDRP_CSLIST {
    struct _SINGLE_LIST_ENTRY *Tail;
};

typedef struct _LDRP_LOAD_CONTEXT {
};

typedef struct _LDR_DATA_TABLE_ENTRY {
    struct _LIST_ENTRY InLoadOrderLinks;
    struct _LIST_ENTRY InMemoryOrderLinks;
    struct _LIST_ENTRY InInitializationOrderLinks;
    PVOID DllBase;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    struct _UNICODE_STRING FullDllName;
    struct _UNICODE_STRING BaseDllName;
    UCHAR FlagGroup[4];
    ULONG Flags;
    ULONG PackagedBinary : 1;
    ULONG MarkedForRemoval : 1;
    ULONG ImageDll : 1;
    ULONG LoadNotificationsSent : 1;
    ULONG TelemetryEntryProcessed : 1;
    ULONG ProcessStaticImport : 1;
    ULONG InLegacyLists : 1;
    ULONG InIndexes : 1;
    ULONG ShimDll : 1;
    ULONG InExceptionTable : 1;
    ULONG ReservedFlags1 : 2;
    ULONG LoadInProgress : 1;
    ULONG LoadConfigProcessed : 1;
    ULONG EntryProcessed : 1;
    ULONG ProtectDelayLoad : 1;
    ULONG ReservedFlags3 : 2;
    ULONG DontCallForThreads : 1;
    ULONG ProcessAttachCalled : 1;
    ULONG ProcessAttachFailed : 1;
    ULONG CorDeferredValidate : 1;
    ULONG CorImage : 1;
    ULONG DontRelocate : 1;
    ULONG CorILOnly : 1;
    ULONG ChpeImage : 1;
    ULONG ReservedFlags5 : 2;
    ULONG Redirected : 1;
    ULONG ReservedFlags6 : 2;
    ULONG CompatDatabaseProcessed : 1;
    USHORT ObsoleteLoadCount;
    USHORT TlsIndex;
    struct _LIST_ENTRY HashLinks;
    ULONG TimeDateStamp;
    struct _ACTIVATION_CONTEXT *EntryPointActivationContext;
    PVOID Lock;
    struct _LDR_DDAG_NODE *DdagNode;
    struct _LIST_ENTRY NodeModuleLink;
    struct _LDRP_LOAD_CONTEXT *LoadContext;
    PVOID ParentDllBase;
    PVOID SwitchBackContext;
    struct _RTL_BALANCED_NODE BaseAddressIndexNode;
    struct _RTL_BALANCED_NODE MappingInfoIndexNode;
    ULONG64 OriginalBase;
    union _LARGE_INTEGER LoadTime;
    ULONG BaseNameHashValue;
    enum _LDR_DLL_LOAD_REASON LoadReason;
    ULONG ImplicitPathOptions;
    ULONG ReferenceCount;
    ULONG DependentLoadFlags;
    UCHAR SigningLevel;
};

typedef struct _LDR_DDAG_NODE {
    struct _LIST_ENTRY Modules;
    struct _LDR_SERVICE_TAG_RECORD *ServiceTagList;
    ULONG LoadCount;
    ULONG LoadWhileUnloadingCount;
    ULONG LowestLink;
    struct _LDRP_CSLIST Dependencies;
    struct _LDRP_CSLIST IncomingDependencies;
    enum _LDR_DDAG_STATE State;
    struct _SINGLE_LIST_ENTRY CondenseLink;
    ULONG PreorderNumber;
};

typedef struct _LDR_SERVICE_TAG_RECORD {
    struct _LDR_SERVICE_TAG_RECORD *Next;
    ULONG ServiceTag;
};

typedef struct _LEAP_SECOND_DATA {
    UCHAR Enabled;
    ULONG Count;
    union _LARGE_INTEGER Data[1];
};

typedef struct _LEARNING_MODE_DATA {
    ULONG Settings;
    UCHAR Enabled;
    UCHAR PermissiveModeEnabled;
};

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
};

typedef struct _LOADER_BUGCHECK_PARAMETERS {
    ULONG BugcheckCode;
    ULONG64 BugcheckParameter1;
    ULONG64 BugcheckParameter2;
    ULONG64 BugcheckParameter3;
    ULONG64 BugcheckParameter4;
};

typedef struct _LOADER_HIVE_RECOVERY_INFO {
    ULONG Recovered : 1;
    ULONG LegacyRecovery : 1;
    ULONG SoftRebootConflict : 1;
    ULONG MostRecentLog : 3;
    ULONG Spare : 27;
    ULONG LogNextSequence;
    ULONG LogMinimumSequence;
    ULONG LogCurrentOffset;
};

typedef struct _LOADER_PARAMETER_BLOCK {
    ULONG OsMajorVersion;
    ULONG OsMinorVersion;
    ULONG Size;
    ULONG OsLoaderSecurityVersion;
    struct _LIST_ENTRY LoadOrderListHead;
    struct _LIST_ENTRY MemoryDescriptorListHead;
    struct _LIST_ENTRY BootDriverListHead;
    struct _LIST_ENTRY EarlyLaunchListHead;
    struct _LIST_ENTRY CoreDriverListHead;
    struct _LIST_ENTRY CoreExtensionsDriverListHead;
    struct _LIST_ENTRY TpmCoreDriverListHead;
    ULONG64 KernelStack;
    ULONG64 Prcb;
    ULONG64 Process;
    ULONG64 Thread;
    ULONG KernelStackSize;
    ULONG RegistryLength;
    PVOID RegistryBase;
    struct _CONFIGURATION_COMPONENT_DATA *ConfigurationRoot;
    PCHAR ArcBootDeviceName;
    PCHAR ArcHalDeviceName;
    PCHAR NtBootPathName;
    PCHAR NtHalPathName;
    PCHAR LoadOptions;
    struct _NLS_DATA_BLOCK *NlsData;
    struct _ARC_DISK_INFORMATION *ArcDiskInformation;
    struct _LOADER_PARAMETER_EXTENSION *Extension;
    union {
        struct _I386_LOADER_BLOCK I386;
        struct _ARM_LOADER_BLOCK Arm;
    } u;
    struct _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;
    PCHAR OsBootstatPathName;
    PCHAR ArcOSDataDeviceName;
    PCHAR ArcWindowsSysPartName;
};

typedef struct _LOADER_PARAMETER_CI_EXTENSION {
    ULONG CodeIntegrityOptions;
    ULONG UpgradeInProgress : 1;
    ULONG IsWinPE : 1;
    ULONG CustomKernelSignersAllowed : 1;
    ULONG Reserved : 29;
    union _LARGE_INTEGER WhqlEnforcementDate;
    ULONG RevocationListOffset;
    ULONG RevocationListSize;
    ULONG CodeIntegrityPolicyOffset;
    ULONG CodeIntegrityPolicySize;
    ULONG CodeIntegrityPolicyHashOffset;
    ULONG CodeIntegrityPolicyHashSize;
    ULONG CodeIntegrityPolicyOriginalHashOffset;
    ULONG CodeIntegrityPolicyOriginalHashSize;
    LONG WeakCryptoPolicyLoadStatus;
    ULONG WeakCryptoPolicyOffset;
    ULONG WeakCryptoPolicySize;
    ULONG SecureBootPolicyOffset;
    ULONG SecureBootPolicySize;
    ULONG Reserved2;
    UCHAR SerializedData[1];
};

typedef struct _LOADER_PARAMETER_EXTENSION {
    ULONG Size;
    struct _PROFILE_PARAMETER_BLOCK Profile;
    PVOID EmInfFileImage;
    ULONG EmInfFileSize;
    PVOID TriageDumpBlock;
    struct _HEADLESS_LOADER_BLOCK *HeadlessLoaderBlock;
    struct _SMBIOS3_TABLE_HEADER *SMBiosEPSHeader;
    PVOID DrvDBImage;
    ULONG DrvDBSize;
    struct _NETWORK_LOADER_BLOCK *NetworkLoaderBlock;
    struct _LIST_ENTRY FirmwareDescriptorListHead;
    PVOID AcpiTable;
    ULONG AcpiTableSize;
    ULONG LastBootSucceeded : 1;
    ULONG LastBootShutdown : 1;
    ULONG IoPortAccessSupported : 1;
    ULONG BootDebuggerActive : 1;
    ULONG StrongCodeGuarantees : 1;
    ULONG HardStrongCodeGuarantees : 1;
    ULONG SidSharingDisabled : 1;
    ULONG TpmInitialized : 1;
    ULONG VsmConfigured : 1;
    ULONG IumEnabled : 1;
    ULONG IsSmbboot : 1;
    ULONG BootLogEnabled : 1;
    ULONG DriverVerifierEnabled : 1;
    ULONG Unused : 8;
    ULONG FeatureSimulations : 6;
    ULONG MicrocodeSelfHosting : 1;
    ULONG XhciLegacyHandoffSkip : 1;
    ULONG DisableInsiderOptInHVCI : 1;
    ULONG MicrocodeMinVerSupported : 1;
    ULONG GpuIommuEnabled : 1;
    struct _LOADER_PERFORMANCE_DATA LoaderPerformanceData;
    struct _LIST_ENTRY BootApplicationPersistentData;
    PVOID WmdTestResult;
    struct _GUID BootIdentifier;
    ULONG ResumePages;
    PVOID DumpHeader;
    PVOID BgContext;
    PVOID NumaLocalityInfo;
    PVOID NumaGroupAssignment;
    struct _LIST_ENTRY AttachedHives;
    ULONG MemoryCachingRequirementsCount;
    PVOID MemoryCachingRequirements;
    struct _BOOT_ENTROPY_LDR_RESULT BootEntropyResult;
    ULONG64 ProcessorCounterFrequency;
    struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;
    struct _GUID HardwareConfigurationId;
    struct _LIST_ENTRY HalExtensionModuleList;
    union _LARGE_INTEGER SystemTime;
    ULONG64 TimeStampAtSystemTimeRead;
    ULONG64 BootFlags;
    ULONG64 DbgMenuOsSelection : 1;
    ULONG64 DbgHiberBoot : 1;
    ULONG64 DbgSoftRestart : 1;
    ULONG64 DbgMeasuredLaunch : 1;
    ULONG64 InternalBootFlags;
    ULONG64 DbgUtcBootTime : 1;
    ULONG64 DbgRtcBootTime : 1;
    ULONG64 DbgNoLegacyServices : 1;
    PVOID WfsFPData;
    ULONG WfsFPDataSize;
    struct _LOADER_BUGCHECK_PARAMETERS BugcheckParameters;
    PVOID ApiSetSchema;
    ULONG ApiSetSchemaSize;
    struct _LIST_ENTRY ApiSetSchemaExtensions;
    struct _UNICODE_STRING AcpiBiosVersion;
    struct _UNICODE_STRING SmbiosVersion;
    struct _UNICODE_STRING EfiVersion;
    struct _DEBUG_DEVICE_DESCRIPTOR *KdDebugDevice;
    struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable;
    struct _UNICODE_STRING ManufacturingProfile;
    PVOID BbtBuffer;
    ULONG64 XsaveAllowedFeatures;
    ULONG XsaveFlags;
    PVOID BootOptions;
    ULONG IumEnablement;
    ULONG IumPolicy;
    LONG IumStatus;
    ULONG BootId;
    struct _LOADER_PARAMETER_CI_EXTENSION *CodeIntegrityData;
    ULONG CodeIntegrityDataSize;
    struct _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;
    ULONG SoftRestartCount;
    LONG64 SoftRestartTime;
    PVOID HypercallCodeVa;
    PVOID HalVirtualAddress;
    ULONG64 HalNumberOfBytes;
    struct _LEAP_SECOND_DATA *LeapSecondData;
    ULONG MajorRelease;
    ULONG Reserved1;
    CHAR NtBuildLab[224];
    CHAR NtBuildLabEx[224];
    struct _LOADER_RESET_REASON ResetReason;
    ULONG MaxPciBusNumber;
    ULONG FeatureSettings;
    ULONG HotPatchReserveSize;
    ULONG RetpolineReserveSize;
};

typedef struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION {
    ULONG InitialHypervisorCrashdumpAreaPageCount;
    ULONG HypervisorCrashdumpAreaPageCount;
    ULONG64 InitialHypervisorCrashdumpAreaSpa;
    ULONG64 HypervisorCrashdumpAreaSpa;
    ULONG64 HypervisorLaunchStatus;
    ULONG64 HypervisorLaunchStatusArg1;
    ULONG64 HypervisorLaunchStatusArg2;
    ULONG64 HypervisorLaunchStatusArg3;
    ULONG64 HypervisorLaunchStatusArg4;
};

typedef struct _LOADER_PERFORMANCE_DATA {
    ULONG64 StartTime;
    ULONG64 EndTime;
    ULONG64 PreloadEndTime;
    ULONG64 TcbLoaderStartTime;
    ULONG64 LoadHypervisorTime;
    ULONG64 LaunchHypervisorTime;
    ULONG64 LoadVsmTime;
    ULONG64 LaunchVsmTime;
    ULONG64 LoadDriversTime;
};

typedef struct _LOADER_RESET_REASON {
    UCHAR Supplied;
    union {
        struct {
            UCHAR Pch;
            UCHAR EmbeddedController;
            UCHAR Reserved[6];
        } Component;
        ULONG64 AsULONG64;
        UCHAR AsBytes[8];
    } Basic;
    ULONG AdditionalInfo[8];
};

typedef struct _LOCK_HEADER {
    struct _RTL_AVL_TREE LockTree;
    struct _RTL_AVL_TREE LockMdlSwitchedTree;
    ULONG64 Count;
    ULONG64 Lock;
    ULONG Valid;
};

typedef struct _LOCK_TRACKER {
    struct _RTL_BALANCED_NODE LockTrackerNode;
    struct _MDL *Mdl;
    PVOID StartVa;
    ULONG64 Count;
    ULONG Offset;
    ULONG Length;
    ULONG Who;
    ULONG Hash;
    ULONG64 Page;
    PVOID StackTrace[8];
    struct _EPROCESS *Process;
};

typedef struct _LOGGED_STREAM_CALLBACK_V1 {
    PVOID LogHandle;
    PVOID FlushToLsnRoutine;
};

typedef struct _LOGGED_STREAM_CALLBACK_V2 {
    struct _LOG_HANDLE_CONTEXT *LogHandleContext;
};

typedef struct _LOG_HANDLE_CONTEXT {
    PVOID LogHandle;
    PVOID FlushToLsnRoutine;
    PVOID QueryLogHandleInfoRoutine;
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
    struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
    ULONG AdditionalPagesToWrite;
    ULONG CcLWScanDPThreshold;
    union _LARGE_INTEGER LargestLsnForCurrentLWScan;
    struct _FILE_OBJECT *RelatedFileObject;
    ULONG64 LargestLsnFileObjectKey;
    union _LARGE_INTEGER LastLWTimeStamp;
    ULONG Flags;
};

typedef struct _LOOKASIDE_LIST_EX {
    struct _GENERAL_LOOKASIDE_POOL L;
};

typedef struct _LPCP_MESSAGE {
    struct _LIST_ENTRY Entry;
    struct _SINGLE_LIST_ENTRY FreeEntry;
    ULONG Reserved0;
    PVOID SenderPort;
    struct _ETHREAD *RepliedToThread;
    PVOID PortContext;
    struct _PORT_MESSAGE Request;
};

typedef struct _LPCP_NONPAGED_PORT_QUEUE {
    struct _KSEMAPHORE Semaphore;
    struct _LPCP_PORT_OBJECT *BackPointer;
};

typedef struct _LPCP_PORT_OBJECT {
    struct _LPCP_PORT_OBJECT *ConnectionPort;
    struct _LPCP_PORT_OBJECT *ConnectedPort;
    struct _LPCP_PORT_QUEUE MsgQueue;
    struct _CLIENT_ID Creator;
    PVOID ClientSectionBase;
    PVOID ServerSectionBase;
    PVOID PortContext;
    struct _ETHREAD *ClientThread;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
    struct _LIST_ENTRY LpcReplyChainHead;
    struct _LIST_ENTRY LpcDataInfoChainHead;
    struct _EPROCESS *ServerProcess;
    struct _EPROCESS *MappingProcess;
    USHORT MaxMessageLength;
    USHORT MaxConnectionInfoLength;
    ULONG Flags;
    struct _KEVENT WaitEvent;
};

typedef struct _LPCP_PORT_QUEUE {
    struct _LPCP_NONPAGED_PORT_QUEUE *NonPagedPortQueue;
    struct _KSEMAPHORE *Semaphore;
    struct _LIST_ENTRY ReceiveHead;
};

typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
};

typedef struct _LUID_AND_ATTRIBUTES {
    struct _LUID Luid;
    ULONG Attributes;
};

typedef struct _M128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _MACHINE_CHECK_CONTEXT {
    struct _MACHINE_FRAME MachineFrame;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 GsBase;
    ULONG64 Cr3;
};

typedef struct _MACHINE_FRAME {
    ULONG64 Rip;
    USHORT SegCs;
    USHORT Fill1[3];
    ULONG EFlags;
    ULONG Fill2;
    ULONG64 Rsp;
    USHORT SegSs;
    USHORT Fill3[3];
};

typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    union _LARGE_INTEGER ReadTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _MAPPED_FILE_SEGMENT {
    struct _CONTROL_AREA *ControlArea;
    ULONG TotalNumberOfPtes;
    struct _SEGMENT_FLAGS SegmentFlags;
    ULONG64 NumberOfCommittedPages;
    ULONG64 SizeOfSegment;
    struct _MMEXTEND_INFO *ExtendInfo;
    PVOID BasedAddress;
    struct _EX_PUSH_LOCK SegmentLock;
};

typedef struct _MAP_REGISTER_ENTRY {
    PVOID MapRegister;
    UCHAR WriteToDevice;
};

typedef struct _MBCB {
    SHORT NodeTypeCode;
    SHORT NodeIsInZone;
    ULONG PagesToWrite;
    ULONG DirtyPages;
    ULONG Reserved;
    struct _LIST_ENTRY BitmapRanges;
    LONG64 ResumeWritePage;
    LONG64 MostRecentlyDirtiedPage;
    struct _BITMAP_RANGE BitmapRange1;
    struct _BITMAP_RANGE BitmapRange2;
    struct _BITMAP_RANGE BitmapRange3;
};

typedef struct _MCGEN_TRACE_CONTEXT {
    ULONG64 RegistrationHandle;
    ULONG64 Logger;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    ULONG Flags;
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserve;
    USHORT EnableBitsCount;
    PULONG EnableBitMask;
    PULONG64 EnableKeyWords;
    PUCHAR EnableLevel;
};

typedef struct _MCUPDATE_INFO {
    struct _LIST_ENTRY List;
    ULONG Status;
    ULONG64 Id;
    ULONG64 VendorScratch[2];
};

typedef struct _MDL {
    struct _MDL *Next;
    SHORT Size;
    SHORT MdlFlags;
    USHORT AllocationProcessorNumber;
    USHORT Reserved;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
};

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR {
    struct _LIST_ENTRY ListEntry;
    enum _TYPE_OF_MEMORY MemoryType;
    ULONG64 BasePage;
    ULONG64 PageCount;
};

typedef struct _MIPFNBLINK {
    ULONG64 Blink : 36;
    ULONG64 NodeBlinkHigh : 20;
    ULONG64 TbFlushStamp : 4;
    ULONG64 Unused : 2;
    ULONG64 PageBlinkDeleteBit : 1;
    ULONG64 PageBlinkLockBit : 1;
    ULONG64 ShareCount : 62;
    ULONG64 PageShareCountDeleteBit : 1;
    ULONG64 PageShareCountLockBit : 1;
    ULONG64 EntireField;
    LONG64 Lock;
    ULONG64 LockNotUsed : 62;
    ULONG64 DeleteBit : 1;
    ULONG64 LockBit : 1;
};

typedef struct _MI_ACCESS_LOG_STATE {
    struct _MM_PAGE_ACCESS_INFO_HEADER *CcAccessLog;
    struct _WORK_QUEUE_ITEM DisableAccessLogging;
    ULONG Enabled;
    ULONG MinLoggingPriority;
    ULONG64 AccessLoggingLock;
};

typedef struct _MI_ACCESS_VIOLATION_RANGE {
    struct _RTL_BALANCED_NODE Node;
    PVOID Va;
    PVOID EndVaInclusive;
};

typedef struct _MI_ACTIVE_PFN {
    struct {
        ULONG64 Tradable : 1;
        ULONG64 NonPagedBuddy : 43;
    } Leaf;
    struct {
        ULONG64 Tradable : 1;
        ULONG64 WsleAge : 3;
        ULONG64 OldestWsleLeafEntries : 10;
        ULONG64 OldestWsleLeafAge : 3;
        ULONG64 NonPagedBuddy : 43;
    } PageTable;
    ULONG64 EntireActiveField;
};

typedef struct _MI_ALIGNED_SLIST {
    union _SLIST_HEADER SList;
};

typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES {
    struct _KEVENT Event;
    ULONG EventSets;
};

typedef struct _MI_BAD_MEMORY_EVENT_ENTRY {
    ULONG BugCheckCode;
    LONG Active;
    ULONG Data;
    union _LARGE_INTEGER PhysicalAddress;
    struct _WORK_QUEUE_ITEM WorkItem;
};

typedef struct _MI_CACHED_PTE {
    ULONG GlobalTimeStamp;
    ULONG PteIndex;
    LONG64 Long;
};

typedef struct _MI_CACHED_PTES {
    struct _MI_CACHED_PTE Bins[8];
    LONG CachedPteCount;
};

typedef struct _MI_CLONE_BLOCK_FLAGS {
    ULONG64 ActualCloneCommit : 59;
    ULONG64 CloneProtection : 5;
};

typedef struct _MI_COMBINE_PAGE_LISTHEAD {
    struct _RTL_AVL_TREE Table;
    LONG Lock;
};

typedef struct _MI_COMBINE_STATE {
    LONG ActiveSpinLock;
    ULONG CombiningThreadCount;
    struct _RTL_AVL_TREE ActiveThreadTree;
    ULONG64 ZeroPageHashValue;
};

typedef struct _MI_COMBINE_WORKITEM {
    PVOID NextEntry;
    struct _WORK_QUEUE_ITEM WorkItem;
};

typedef struct _MI_COMMON_PAGE_STATE {
    struct _MMPFN *PageOfOnesPfn;
    ULONG64 PageOfOnes;
    struct _MMPFN *DummyPagePfn;
    ULONG64 DummyPage;
    ULONG64 PageOfZeroes;
    PVOID ZeroMapping;
    PVOID OnesMapping;
    ULONG64 ZeroCrc;
    ULONG64 OnesCrc;
    ULONG64 BitmapGapFrames[4];
    ULONG64 PfnGapFrames[4];
    ULONG64 PageTableOfZeroes;
    struct _MMPTE PdeOfZeroes;
    ULONG64 PageTableOfOnes;
    struct _MMPTE PdeOfOnes;
};

typedef struct _MI_CONTROL_AREA_WAIT_BLOCK {
    struct _MI_CONTROL_AREA_WAIT_BLOCK *Next;
    ULONG WaitReason;
    ULONG WaitResponse;
    struct _KGATE Gate;
};

typedef struct _MI_CROSS_PARTITION_CHARGES {
    ULONG64 CurrentCharges;
    ULONG64 ChargeFailures;
    ULONG64 ChargePeak;
    ULONG64 ChargeMinimum;
};

typedef struct _MI_DEBUGGER_STATE {
    UCHAR TransientWrite;
    UCHAR CodePageEdited;
    struct _MMPTE *DebugPte;
    ULONG PoisonedTb;
    LONG InDebugger;
    PVOID Pfns[32];
};

typedef struct _MI_DECAY_TIMER_LINK {
    union {
        ULONG64 Long;
        struct _MI_DECAY_TIMER_LINKAGE e1;
    } u1;
};

typedef struct _MI_DECAY_TIMER_LINKAGE {
    ULONG64 Spare0 : 1;
    ULONG64 PreviousDecayPfn : 31;
    ULONG64 Spare1 : 1;
    ULONG64 NextDecayPfn : 31;
};

typedef struct _MI_DRIVER_VA {
    struct _MI_DRIVER_VA *Next;
    struct _MMPTE *PointerPte;
    struct _RTL_BITMAP BitMap;
    ULONG Hint;
    ULONG Flags;
};

typedef struct _MI_DYNAMIC_BITMAP {
    struct _RTL_BITMAP_EX Bitmap;
    ULONG64 MaximumSize;
    ULONG64 Hint;
    PVOID BaseVa;
    ULONG64 SizeTopDown;
    ULONG64 HintTopDown;
    PVOID BaseVaTopDown;
    ULONG64 SpinLock;
};

typedef struct _MI_ERROR_STATE {
    struct _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry;
    ULONG64 PageOfInterest;
    struct _MI_PROBE_RAISE_TRACKER ProbeRaises;
    struct _MI_FORCED_COMMITS ForcedCommits;
    ULONG WsleFailures[1];
    ULONG PageHashErrors;
    ULONG CheckZeroCount;
    LONG ZeroedPageSingleBitErrorsDetected;
    LONG BadPagesDetected;
    LONG ScrubPasses;
    LONG ScrubBadPagesFound;
    ULONG UserViewFailures;
    ULONG UserViewCollisionFailures;
    ULONG UserAllocateFailures;
    ULONG UserAllocateCollisionFailures;
    struct _MI_RESAVAIL_FAILURES ResavailFailures;
    UCHAR PendingBadPages;
    UCHAR InitFailure;
    UCHAR StopBadMaps;
};

typedef struct _MI_EXTRA_IMAGE_INFORMATION {
    ULONG SizeOfHeaders;
    ULONG SizeOfImage;
    ULONG TimeDateStamp;
};

typedef struct _MI_FORCED_COMMITS {
    ULONG Regular;
    ULONG Wrap;
};

typedef struct _MI_FREE_LARGE_PAGES {
    ULONG64 LargePageFreeCount[2];
    ULONG64 LargePagesCount[2][2][4];
    struct _MI_FREE_LARGE_PAGE_LIST *LargePageEntries[2][2][4];
};

typedef struct _MI_FREE_LARGE_PAGE_LIST {
    struct _LIST_ENTRY ListHead;
    ULONG64 EntryCount;
};

typedef struct _MI_HARDWARE_STATE {
    ULONG NodeMask;
    ULONG NumaLastRangeIndex;
    UCHAR NumaTableCaptured;
    UCHAR NodeShift;
    UCHAR ChannelShift;
    PWCHAR NodeGraph;
    struct _MI_SYSTEM_NODE_INFORMATION *SystemNodeInformation;
    struct _HAL_NODE_RANGE *NumaMemoryRanges;
    struct _HAL_CHANNEL_MEMORY_RANGES *ChannelMemoryRanges;
    ULONG SecondLevelCacheSize;
    ULONG FirstLevelCacheSize;
    ULONG PhysicalAddressBits;
    UCHAR ProcessorCachesFlushedOnPowerLoss;
    ULONG64 TotalPagesAllowed;
    ULONG SecondaryColorMask;
    ULONG SecondaryColors;
    ULONG FlushTbForAttributeChange;
    ULONG FlushCacheForAttributeChange;
    ULONG FlushCacheForPageAttributeChange;
    ULONG CacheFlushPromoteThreshold;
    ULONG64 InvalidPteMask;
    ULONG LargePageColors[3];
    ULONG64 FlushTbThreshold;
    enum _MI_PFN_CACHE_ATTRIBUTE OptimalZeroingAttribute[4][4];
    UCHAR AttributeChangeRequiresReZero;
    struct _MI_ZERO_COST_COUNTS ZeroCostCounts[2];
    ULONG64 VsmKernelPageCount;
    struct _RTL_AVL_TREE EnclaveRegions;
    PVOID EnclaveMetadataPage;
    struct _RTL_BITMAP *EnclaveMetadataBitMap;
    struct _EX_PUSH_LOCK EnclaveMetadataEntryLock;
    LONG EnclaveMetadataPageLock;
};

typedef struct _MI_HARD_FAULT_STATE {
    struct _MMPFN *SwapPfn;
    struct _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags;
};

typedef struct _MI_HUGE_SYSTEM_VIEW_HEAD {
    struct _RTL_AVL_TREE ViewRoot;
    ULONG ViewCount;
    LONG Lock;
};

typedef struct _MI_HYPER_SPACE {
    UCHAR VadBitmap[268435456];
    UCHAR PageDirectoryCommitmentBitmap[16384];
    UCHAR PageTableCommitmentBitmap[8388608];
};

typedef struct _MI_IMAGE_SECURITY_REFERENCE {
    struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
    PVOID DynamicRelocations;
    struct _IMAGE_SECURITY_CONTEXT SecurityContext;
    ULONG64 StrongImageReference;
};

typedef struct _MI_IO_CACHE_STATS {
    ULONG64 UnusedBlocks;
    ULONG ActiveCacheMatch;
    ULONG ActiveCacheOverride;
    ULONG UnmappedCacheFlush;
    ULONG UnmappedCacheMatch;
    ULONG UnmappedCacheConflict;
    ULONG PermanentIoAttributeConflict;
    ULONG PermanentIoNodeConflict;
};

typedef struct _MI_IO_PAGE_STATE {
    LONG IoPfnLock;
    struct _RTL_AVL_TREE IoPfnRoot[3];
    struct _LIST_ENTRY UnusedCachedMaps;
    ULONG OldestCacheFlushTimeStamp;
    struct _MI_IO_CACHE_STATS IoCacheStats;
    struct _RTL_AVL_TREE InvariantIoSpace;
};

typedef struct _MI_LARGEPAGE_IMAGE_INFO {
    UCHAR LargeImageBias;
    UCHAR Spare[3];
    ULONG64 ActualImageViewSize;
};

typedef struct _MI_LARGE_PAGE_CANDIDATES {
    USHORT Hand;
    USHORT ActiveEntryCount;
    UCHAR Overflowed;
    ULONG64 PageFrames[64];
};

typedef struct _MI_LDW_WORK_CONTEXT {
    struct _WORK_QUEUE_ITEM WorkItem;
    struct _FILE_OBJECT *FileObject;
    LONG ErrorStatus;
    LONG Active;
    UCHAR FreeWhenDone;
};

typedef struct _MI_MODWRITE_DATA {
    LONG64 PagesLoad;
    ULONG64 PagesAverage;
    ULONG64 AverageAvailablePages;
    ULONG64 PagesWritten;
    ULONG WritesIssued;
    ULONG IgnoredReservationsCount;
    ULONG FreedReservationsCount;
    ULONG WriteBurstCount;
    ULONG64 IgnoreReservationsStartTime;
    union _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo;
    USHORT IgnoreReservations : 1;
    USHORT Spare : 15;
    USHORT Spare1;
};

typedef struct _MI_NODE_INFORMATION {
    struct _MI_FREE_LARGE_PAGES FreeLargePages[3];
    struct _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer;
    struct _MMPFNLIST_SHORT StandbyPageList[4][8];
    struct _RTL_BITMAP FreePageListHeadsBitmap[2];
    ULONG FreePageListHeadsBitmapBuffer[16];
    ULONG64 FreeCount[2];
    ULONG64 TotalPages[4];
    ULONG64 TotalPagesEntireNode;
    ULONG MmShiftedColor;
    ULONG Color;
    ULONG64 ChannelFreeCount[4][2];
    struct {
        ULONG ChannelsHotCold : 1;
        ULONG Spare : 31;
    } Flags;
    struct _EX_PUSH_LOCK NodeLock;
    ULONG64 ZeroThreadHugeMapLock;
    UCHAR LargeListMoveInProgress;
    UCHAR ChannelStatus;
    UCHAR ChannelOrdering[4];
    UCHAR LockedChannelOrdering[4];
    UCHAR PowerAttribute[4];
    ULONG64 LargePageLock;
    struct _MI_PAGE_COLORS PageColorTable;
};

typedef struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY {
    struct _RTL_BALANCED_NODE LengthTreeNode;
    struct _LIST_ENTRY FreeListEntry;
    struct _RTL_BALANCED_NODE LocationTreeNode;
    ULONG StartingIndex;
    ULONG Length;
};

typedef struct _MI_PAGEFILE_TRACES {
    LONG Status;
    USHORT PartitionId;
    UCHAR Priority;
    UCHAR IrpPriority;
    UCHAR ReservationWrite;
    union _LARGE_INTEGER CurrentTime;
    ULONG64 AvailablePages;
    ULONG64 ModifiedPagesTotal;
    ULONG64 ModifiedPagefilePages;
    ULONG64 ModifiedNoWritePages;
    ULONG64 ModifiedPagefileNoReservationPages;
    struct {
        struct _MDL Mdl;
        ULONG64 Page[1];
    } MdlHack;
};

typedef struct _MI_PAGELIST_STATE {
    LONG ActiveSpinLock;
    struct _RTL_AVL_TREE ActiveThreadTree;
    LONG ActiveZeroSpinLock;
    struct _RTL_AVL_TREE ActiveZeroThreadTree;
    ULONG NumberOfLargePageListHeads;
};

typedef struct _MI_PAGE_COLORS {
    ULONG PageSize[4];
};

typedef struct _MI_PAGE_COMBINE_STATISTICS {
    ULONG64 PagesScannedActive;
    ULONG64 PagesScannedStandby;
    ULONG64 PagesCombined;
    ULONG CombineScanCount;
    LONG CombinedBlocksInUse;
    LONG SumCombinedBlocksReferenceCount;
};

typedef struct _MI_PAGE_COMBINING_SUPPORT {
    struct _MI_PARTITION *Partition;
    struct _LIST_ENTRY ArbitraryPfnMapList;
    struct _MI_COMBINE_WORKITEM FreeCombinePoolItem;
    ULONG CombiningThreadCount;
    struct _LIST_ENTRY CombinePageFreeList;
    ULONG64 CombineFreeListLock;
    struct _MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];
    struct _MI_PAGE_COMBINE_STATISTICS PageCombineStats;
};

typedef struct _MI_PAGING_FILE_SPACE_BITMAPS {
    ULONG RefCount;
    struct _MI_PAGING_FILE_SPACE_BITMAPS *Anchor;
    struct _RTL_BITMAP AllocationBitmap;
    struct _RTL_BITMAP ReservationBitmap;
    struct _RTL_BITMAP EvictedBitmap;
};

typedef struct _MI_PAGING_IO_STATE {
    struct _RTL_AVL_TREE PageFileHead;
    LONG PageFileHeadSpinLock;
    LONG PrefetchSeekThreshold;
    union _SLIST_HEADER InPageSupportSListHead[2];
    UCHAR InPageSupportSListMinimum[2];
    ULONG InPageSinglePages;
    LONG DelayPageFaults;
    ULONG FileCompressionBoundary;
    UCHAR MdlsAdjusted;
};

typedef struct _MI_PARTITION {
    struct _MI_PARTITION_CORE Core;
    struct _MI_PARTITION_MODWRITES Modwriter;
    struct _MI_PARTITION_STORES Store;
    struct _MI_PARTITION_SEGMENTS Segments;
    struct _MI_PARTITION_PAGE_LISTS PageLists;
    struct _MI_PARTITION_COMMIT Commit;
    struct _MI_PARTITION_ZEROING Zeroing;
    struct _MI_PAGE_COMBINING_SUPPORT PageCombine;
    PVOID WorkingSetControl;
    struct _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead;
    struct _MI_VISIBLE_PARTITION Vp;
};

typedef struct _MI_PARTITION_COMMIT {
    ULONG64 PeakCommitment;
    ULONG64 TotalCommitLimitMaximum;
    LONG Popups[2];
    ULONG64 LowCommitThreshold;
    ULONG64 HighCommitThreshold;
    ULONG64 EventLock;
    ULONG64 SystemCommitReserve;
    ULONG64 OverCommit;
};

typedef struct _MI_PARTITION_CORE {
    USHORT PartitionId;
    union {
        ULONG LongFlags;
        struct _MI_PARTITION_FLAGS Flags;
    } u;
    ULONG Signature;
    UCHAR MemoryConfigurationChanged;
    struct _MI_NODE_INFORMATION *NodeInformation;
    struct _RTL_AVL_TREE PageRoot;
    struct _PHYSICAL_MEMORY_DESCRIPTOR *MemoryNodeRuns;
    ULONG64 MemoryBlockReferences;
    struct _WORK_QUEUE_ITEM PfnUnmapWorkItem;
    ULONG64 PfnUnmapCount;
    PVOID PfnUnmapWaitList;
    struct _PHYSICAL_MEMORY_DESCRIPTOR *MemoryRuns;
    struct _KEVENT ExitEvent;
    PVOID SystemThreadHandles[5];
    struct _EPARTITION *PartitionObject;
    struct _EX_PUSH_LOCK PartitionSystemThreadsLock;
    struct _EX_PUSH_LOCK DynamicMemoryPushLock;
    LONG DynamicMemoryLock;
    UCHAR PfnUnmapActive;
    struct _KEVENT TemporaryMemoryEvent;
    PVOID RootDirectory;
    PVOID KernelObjectsDirectory;
    struct _KEVENT *MemoryEvents[11];
    PVOID MemoryEventHandles[11];
    ULONG64 NonChargedSecurePages;
};

typedef struct _MI_PARTITION_FLAGS {
    ULONG BeingDeleted : 1;
    ULONG PageListsInitialized : 1;
    ULONG StoreReservedPagesCharged : 1;
    ULONG UseSlabAllocators : 1;
    ULONG PureHoldingPartition : 1;
    ULONG ZeroPagesOptional : 1;
};

typedef struct _MI_PARTITION_MODWRITES {
    struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
    struct _MMPAGE_FILE_EXPANSION PageFileContract;
    ULONG64 NumberOfMappedMdls;
    LONG NumberOfMappedMdlsInUse;
    ULONG NumberOfMappedMdlsInUsePeak;
    struct _MMMOD_WRITER_LISTHEAD MappedFileHeader;
    UCHAR NeedMappedMdl;
    UCHAR NeedPageFileMdl;
    UCHAR ModwriterActive;
    UCHAR TransitionInserted;
    LONG LastModifiedWriteError;
    LONG LastMappedWriteError;
    ULONG MappedFileWriteSucceeded;
    ULONG MappedWriteBurstCount;
    ULONG LowPriorityModWritesOutstanding;
    struct _KEVENT BoostModWriteIoPriorityEvent;
    LONG ModifiedWriterThreadPriority;
    ULONG64 ModifiedPagesLowPriorityGoal;
    struct _KEVENT ModifiedPageWriterEvent;
    struct _KEVENT ModifiedWriterExitedEvent;
    LONG WriteAllPagefilePages;
    LONG WriteAllMappedPages;
    struct _KEVENT MappedPageWriterEvent;
    struct _MI_MODWRITE_DATA ModWriteData;
    struct _KEVENT RescanPageFilesEvent;
    struct _MMMOD_WRITER_LISTHEAD PagingFileHeader;
    struct _ETHREAD *ModifiedPageWriterThread;
    struct _EX_RUNDOWN_REF ModifiedPageWriterRundown;
    struct _WORK_QUEUE_ITEM PagefileScanWorkItem;
    ULONG PagefileScanCount;
    LONG ClusterRestrictionLock;
    struct _MI_RESTRICTED_MODWRITES ClusterRestrictions[2];
    struct _KEVENT NotifyStoreMemoryConditions;
    UCHAR DelayMappedWrite;
    ULONG PagefileReservationsEnabled;
    struct _EX_PUSH_LOCK PageFileCreationLock;
    struct _WORK_QUEUE_ITEM TrimPagefileWorkItem;
    ULONG64 LastTrimPagefileTime;
    struct _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem;
    LONG WsSwapPageFileContractionInProgress;
    struct _EX_PUSH_LOCK WorkingSetSwapLock;
    LONG WorkingSetInswapLock;
};

typedef struct _MI_PARTITION_PAGE_LISTS {
    struct _MMPFNLIST *FreePagesByColor[2];
    struct _MMPFNLIST ZeroedPageListHead;
    struct _MMPFNLIST FreePageListHead;
    struct _MMPFNLIST StandbyPageListHead;
    struct _MMPFNLIST StandbyPageListByPriority[8];
    struct _MMPFNLIST ModifiedPageListNoReservation;
    struct _MMPFNLIST ModifiedPageListByReservation[16];
    struct _MMPFNLIST MappedPageListHead[16];
    struct _MMPFNLIST BadPageListHead;
    struct _MMPFNLIST EnclavePageListHead;
    union _SLIST_HEADER *FreePageSlist[2];
    struct _MMPFNLIST *PageLocationList[8];
    ULONG StandbyRepurposedByPriority[8];
    ULONG64 TransitionSharedPages;
    ULONG64 TransitionSharedPagesPeak[6];
    struct _KEVENT MappedPageListHeadEvent[16];
    struct _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];
    ULONG DecayHand;
    UCHAR StandbyListDiscard;
    UCHAR FreeListDiscard;
    UCHAR PfnBitMapsReady;
    ULONG64 LastDecayHandUpdateTime;
    struct _MI_LDW_WORK_CONTEXT LastChanceLdwContext;
    ULONG64 AvailableEventsLock;
    struct _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];
    PVOID MirrorListLocks;
    ULONG64 TransitionPrivatePages;
    struct _RTL_BITMAP_EX LargePfnBitMap[2];
    struct _MI_FREE_LARGE_PAGE_LIST *LargePageListHeads;
    struct _MI_LARGE_PAGE_CANDIDATES LargePageCandidates[2];
    struct _WORK_QUEUE_ITEM RebuildLargePageWorkItem;
    UCHAR RebuildLargePageActive;
    LONG LargePageRebuildLock;
    ULONG64 LowMemoryThreshold;
    ULONG64 HighMemoryThreshold;
    struct _MI_SLAB_ALLOCATOR_CONTEXT SlabContexts[3];
    struct _RTL_BITMAP_EX SlabPfnBitMap;
};

typedef struct _MI_PARTITION_SEGMENTS {
    LONG SegmentListLock;
    ULONG DeleteOnCloseCount;
    LONG64 FsControlAreaCount;
    LONG64 PfControlAreaCount;
    LONG64 CloneHeaderCount;
    struct _KEVENT DeleteSubsectionCleanup;
    struct _KEVENT UnusedSegmentCleanup;
    ULONG64 SubsectionDeletePtes;
    struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
    struct _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader;
    struct _LIST_ENTRY DeleteOnCloseList;
    struct _KTIMER DeleteOnCloseTimer;
    UCHAR DeleteOnCloseTimerActive;
    UCHAR SegmentDereferenceThreadExists;
    PVOID SegmentDereferenceActiveControlArea;
    ULONG64 UnusedSegmentPagedPool;
    struct _LIST_ENTRY UnusedSegmentList;
    struct _LIST_ENTRY UnusedSubsectionList;
    struct _LIST_ENTRY DeleteSubsectionList;
    struct _KEVENT ControlAreaDeleteEvent;
    struct _SINGLE_LIST_ENTRY ControlAreaDeleteList;
    struct _MI_PTE_CHAIN_HEAD FreeSystemCache;
    struct _KEVENT CloneDereferenceEvent;
    union _SLIST_HEADER CloneProtosSListHead;
    struct _EX_PUSH_LOCK SystemCacheInitLock;
    ULONG PagefileExtensionWaiters;
    ULONG PagefileExtensionRequests;
    struct _KEVENT PagefileExtensionWaitEvent;
    struct _MI_CROSS_PARTITION_CHARGES SharedCharges[7];
    struct _KEVENT *SharedChargesDrainEvent;
    struct _KEVENT *ControlAreasDrainEvent;
    struct _KEVENT *CloneHeaderDrainEvent;
    struct _EX_RUNDOWN_REF_CACHE_AWARE *ProbeRundownReference;
};

typedef struct _MI_PARTITION_STATE {
    ULONG64 PartitionLock;
    struct _EX_PUSH_LOCK PartitionIdLock;
    ULONG64 InitialPartitionIdBits;
    struct _LIST_ENTRY PartitionList;
    struct _RTL_BITMAP *PartitionIdBitmap;
    struct _RTL_BITMAP InitialPartitionIdBitmap;
    struct _MI_PARTITION *TempPartitionPointers[1];
    struct _MI_PARTITION **Partition;
    ULONG64 TotalPagesInChildPartitions;
    ULONG CrossPartitionDenials;
    UCHAR MultiplePartitionsExist;
};

typedef struct _MI_PARTITION_STORES {
    union {
        LONG FlushCompleting : 1;
        LONG FlushInProgress : 31;
        LONG Long;
    } WriteAllStoreHintedPages;
    ULONG VirtualPageFileNumber;
    ULONG Registered;
    ULONG ReadClusterSizeMax;
    ULONG EvictFlushRequestCount;
    ULONG ModifiedWriteDisableCount;
    ULONG WriteIssueFailures;
    ULONG WritesOutstanding;
    LONG EvictFlushLock;
    struct _ETHREAD *EvictionThread;
    struct _KEVENT EvictEvent;
    union _SLIST_HEADER WriteSupportSListHead;
    struct _KEVENT EvictFlushCompleteEvent;
    struct _RTL_BITMAP *ModifiedWriteFailedBitmap;
    struct _EPROCESS *StoreProcess;
    ULONG DeleteStoredPages;
};

typedef struct _MI_PARTITION_ZEROING {
    struct _KEVENT PageEvent;
    UCHAR ThreadActive;
    UCHAR ThreadPriorityStatic;
    LONG ZeroFreePageSlistMinimum;
    struct _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem;
    LONG ThreadCount;
    struct _KGATE Gate;
    struct _MI_ZERO_THREAD_CONTEXT *ThreadContext;
};

typedef struct _MI_PER_SESSION_PROTOS {
    struct _RTL_BALANCED_NODE SessionProtoNode;
    struct _SINGLE_LIST_ENTRY FreeList;
    PVOID DriverAddress;
    struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
    ULONG64 NumberOfPtes;
    ULONG SessionId;
    struct _SUBSECTION *Subsection;
    struct _MMPTE *SubsectionBase;
    union {
        ULONG ReferenceCount;
        ULONG NumberOfPtesToFree;
    } u2;
};

typedef struct _MI_POOL_FAILURE_REASONS {
    ULONG NonPagedNoPtes;
    ULONG PriorityTooLow;
    ULONG NonPagedNoPagesAvailable;
    ULONG PagedNoPtes;
    ULONG SessionPagedNoPtes;
    ULONG PagedNoPagesAvailable;
    ULONG SessionPagedNoPagesAvailable;
    ULONG PagedNoCommit;
    ULONG SessionPagedNoCommit;
    ULONG NonPagedNoResidentAvailable;
    ULONG NonPagedNoCommit;
};

typedef struct _MI_POOL_STATE {
    ULONG64 MaximumNonPagedPoolThreshold;
    ULONG NonPagedPoolSListMaximum[3];
    ULONG64 AllocatedNonPagedPool;
    struct _SINGLE_LIST_ENTRY BadPoolHead;
    ULONG HighEventSets;
    UCHAR HighEventSetsValid;
    ULONG PoolFailures[3][3];
    struct _MI_POOL_FAILURE_REASONS PoolFailureReasons;
    ULONG64 LowPagedPoolThreshold;
    ULONG64 HighPagedPoolThreshold;
    ULONG PagedPoolSListMaximum;
    ULONG PreemptiveTrims[4];
    ULONG64 SpecialPagesInUsePeak;
    ULONG SpecialPoolRejected[6];
    ULONG64 SpecialPagesNonPaged;
    LONG SpecialPoolPdes;
    ULONG SessionSpecialPoolPdesMax;
    LONG PermittedFaultsLock;
    struct _RTL_AVL_TREE PermittedFaultsTree;
    struct _MI_ACCESS_VIOLATION_RANGE PermittedFaultsInitialNode[2];
    ULONG64 TotalPagedPoolQuota;
    ULONG64 TotalNonPagedPoolQuota;
};

typedef struct _MI_PROBE_RAISE_TRACKER {
    ULONG UserRangeInKernel;
    ULONG FaultFailed;
    ULONG WriteFaultFailed;
    ULONG LargePageFailed;
    ULONG UserAccessToKernelPte;
    ULONG BadPageLocation;
    ULONG InsufficientCharge;
    ULONG PageTableCharge;
    ULONG NoPhysicalMapping;
    ULONG NoIoReference;
    ULONG ProbeFailed;
    ULONG PteIsZero;
    ULONG StrongCodeWrite;
    ULONG ReducedCloneCommitChargeFailed;
    ULONG CopyOnWriteAtDispatchNoPages;
    ULONG NoPageTablesAllowed;
    ULONG EnclavePageFailed;
};

typedef struct _MI_PROCESS_STATE {
    PVOID SystemDllBase;
    ULONG ColorSeed;
    LONG RotatingUniprocessorNumber;
    union _LARGE_INTEGER CriticalSectionTimeout;
    struct _LIST_ENTRY ProcessList;
    struct _MMPTE *SharedUserDataPte[2];
    PVOID HypervisorSharedVa;
    ULONG64 VadSecureCookie;
};

typedef struct _MI_PROTOTYPE_PTES_NODE {
    struct _RTL_BALANCED_NODE Node;
    union {
        struct {
            ULONG64 AllocationType : 3;
            ULONG64 Inserted : 1;
        } e1;
        struct {
            ULONG64 PrototypePtesFlags;
        } e2;
    } u1;
};

typedef struct _MI_PTE_CHAIN_HEAD {
    struct _MMPTE Flink;
    struct _MMPTE Blink;
    struct _MMPTE *PteBase;
};

typedef struct _MI_REBUILD_LARGE_PAGE_TIMER {
    struct _WORK_QUEUE_ITEM WorkItem;
    UCHAR SecondsLeft;
    UCHAR RebuildActive;
    UCHAR NextPassDelta;
    UCHAR LargeSubPagesActive;
};

typedef struct _MI_RESAVAIL_FAILURES {
    ULONG Wrap;
    ULONG NoCharge;
};

typedef struct _MI_RESTRICTED_MODWRITES {
    UCHAR MaximumClusterPages;
    UCHAR ReducedClusterWrites;
    UCHAR ImposeDelay;
};

typedef struct _MI_RESUME_WORKITEM {
    struct _KEVENT ResumeCompleteEvent;
    struct _WORK_QUEUE_ITEM WorkItem;
};

typedef struct _MI_REVERSE_VIEW_MAP {
    struct _LIST_ENTRY ViewLinks;
    PVOID SystemCacheVa;
    PVOID SessionViewVa;
    struct _EPROCESS *VadsProcess;
    ULONG64 Type : 2;
    struct _SUBSECTION *Subsection;
    ULONG64 SubsectionType : 1;
    struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES SystemCacheAttributes;
    ULONG64 SectionOffset;
};

typedef struct _MI_SECTION_IMAGE_INFORMATION {
    struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;
    struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;
};

typedef struct _MI_SECTION_STATE {
    LONG SectionObjectPointersLock;
    struct _RTL_AVL_TREE SectionBasedRoot;
    struct _EX_PUSH_LOCK SectionBasedLock;
    ULONG64 UnusedSegmentPagedPool;
    ULONG DataSectionProtectionMask;
    PVOID HighSectionBase;
    struct _MSUBSECTION PhysicalSubsection;
    struct _CONTROL_AREA PhysicalControlArea;
    struct _MMPFNLIST PurgingExtentPages;
    struct _MMPFN *DanglingExtentPages;
    struct _WORK_QUEUE_ITEM DanglingExtentsWorkItem;
    struct _KEVENT DanglingExtentsDeletionComplete;
    UCHAR DanglingExtentsWorkerActive;
    UCHAR PurgingExtentsNeedWatchdog;
    struct _RTL_AVL_TREE PrototypePtesTree;
    LONG PrototypePtesTreeSpinLock;
    ULONG ImageBias;
    struct _EX_PUSH_LOCK RelocateBitmapsLock;
    struct _RTL_BITMAP ImageBitMap;
    ULONG ImageBias64Low;
    ULONG ImageBias64High;
    struct _RTL_BITMAP ImageBitMap64Low;
    struct _RTL_BITMAP ImageBitMap64High;
    struct _RTL_BITMAP ImageBitMapWow64Dll;
    PVOID ApiSetSection;
    PVOID ApiSetSchema;
    ULONG64 ApiSetSchemaSize;
    ULONG LostDataFiles;
    ULONG LostDataPages;
    ULONG ImageFailureReason;
    struct _SECTION *CfgBitMapSection32;
    struct _CONTROL_AREA *CfgBitMapControlArea32;
    struct _SECTION *CfgBitMapSection64;
    struct _CONTROL_AREA *CfgBitMapControlArea64;
    struct _RTL_BITMAP_EX KernelCfgBitMap;
    struct _EX_PUSH_LOCK KernelCfgBitMapLock;
    ULONG ImageCfgFailure;
    ULONG RetpolineReservePages;
    struct _MDL *RetpolineStubMdl;
    struct _RTL_BITMAP_EX KernelRetpolineBitMap;
    struct _RTL_RETPOLINE_ROUTINES *RetpolineRoutines;
    struct _MMPTE *RetpolineRevertPte;
    ULONG RetpolineStubPages;
    ULONG ImageBreakpointEnabled;
    ULONG ImageBreakpointChecksum;
    ULONG ImageBreakpointSize;
    LONG ImageValidationFailed;
    ULONG HotPatchReserveSize;
};

typedef struct _MI_SESSION_DRIVER_UNLOAD {
    PVOID Function;
    ULONG64 FunctionValue;
};

typedef struct _MI_SESSION_STATE {
    struct _MMSESSION SystemSession;
    ULONG DetachTimeStamp;
    UCHAR CodePageEdited;
    PULONG DynamicPoolBitBuffer;
    PULONG64 DynamicVaBitBuffer;
    ULONG64 DynamicVaBitBufferPages;
    PVOID DynamicVaStart;
    PVOID ImageVaStart;
    struct _MI_HUGE_SYSTEM_VIEW_HEAD SystemViewBuckets[256];
    PULONG DynamicPtesBitBuffer;
    struct _EX_PUSH_LOCK IdLock;
    struct _EPROCESS *LeaderProcess;
    struct _EX_PUSH_LOCK InitializeLock;
    struct _MMWSL_INSTANCE *WorkingSetList;
    PVOID SessionBase;
    PVOID SessionCore;
};

typedef struct _MI_SHUTDOWN_STATE {
    UCHAR CrashDumpInitialized;
    UCHAR ConnectedStandbyActive;
    UCHAR ZeroPageFileAtShutdown;
    ULONG SystemShutdown;
    LONG ShutdownFlushInProgress;
    ULONG MirroringActive;
    struct _MI_RESUME_WORKITEM ResumeItem;
    struct _ETHREAD *MirrorHoldsPfn;
    struct _RTL_BITMAP_EX MirrorBitMaps[2];
    struct _MMPTE *CrashDumpPte;
};

typedef struct _MI_SLAB_ALLOCATOR_CONTEXT {
    struct _RTL_RB_TREE AllocationsTree;
    LONG Lock;
    struct _MI_SLAB_ALLOCATOR_ENTRY *SlabEntryHint;
    ULONG64 FreePageCount;
    ULONG64 SlabEntryCount;
    enum _MI_SLAB_ALLOCATOR_PROTECTION Protection;
    union {
        ULONG EntryBecameEmpty : 1;
        ULONG Spare : 31;
        ULONG AllFlags;
    } Flags;
    ULONG64 LastReplenishTime;
    ULONG64 LastFailureTime;
};

typedef struct _MI_SLAB_ALLOCATOR_ENTRY {
};

typedef struct _MI_SPECIAL_POOL {
    ULONG64 Lock;
    struct _MI_PTE_CHAIN_HEAD Paged;
    struct _MI_PTE_CHAIN_HEAD NonPaged;
    ULONG64 PagesInUse;
};

typedef struct _MI_STANDBY_STATE {
    ULONG64 FirstDecayPage;
    union _SLIST_HEADER PfnDecayFreeSList;
    struct _MM_PAGE_ACCESS_INFO_HEADER *PfnRepurposeLog;
    struct _KDPC AllocatePfnRepurposeDpc;
    union _SLIST_HEADER PageHeatListSlist;
    LONG PageHeatListDisableAllocation;
};

typedef struct _MI_STORE_INPAGE_COMPLETE_FLAGS {
    ULONG EntireFlags;
    ULONG StoreFault : 1;
    ULONG LowResourceFailure : 1;
    ULONG Spare : 14;
    ULONG RemainingPageCount : 16;
};

typedef struct _MI_SUB64K_FREE_RANGES {
    struct _RTL_BITMAP_EX BitMap;
    struct _LIST_ENTRY ListEntry;
    struct _MMVAD_SHORT *Vad;
    ULONG SetBits;
    ULONG FullSetBits;
    ULONG SubListIndex : 2;
    ULONG Hint : 30;
};

typedef struct _MI_SUBSECTION_ENTRY1 {
    ULONG CrossPartitionReferences : 30;
    ULONG SubsectionMappedLarge : 2;
};

typedef struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES {
    ULONG64 NumberOfPtes : 6;
    ULONG64 PartitionId : 10;
    ULONG64 Spare : 2;
    ULONG64 SectionOffset : 48;
};

typedef struct _MI_SYSTEM_IMAGE_STATE {
    struct _LIST_ENTRY FixupList;
    struct _KMUTANT LoadLock;
    LONG FixupLock;
    UCHAR FirstLoadEver;
    UCHAR LargePageAll;
    ULONG64 LastPage;
    struct _LIST_ENTRY LargePageList;
    struct _LIST_ENTRY StrongCodeLoadFailureList;
    struct _KLDR_DATA_TABLE_ENTRY *BeingDeleted;
    struct _EX_PUSH_LOCK MappingRangesPushLock;
    struct _MI_DRIVER_VA *MappingRanges[2];
    ULONG64 PageCount;
    struct _MM_SYSTEM_PAGE_COUNTS PageCounts;
    struct _EX_PUSH_LOCK CollidedLock;
    struct _RTL_AVL_TREE ImageTree;
};

typedef struct _MI_SYSTEM_INFORMATION {
    struct _MI_POOL_STATE Pools;
    struct _MI_SECTION_STATE Sections;
    struct _MI_SYSTEM_IMAGE_STATE SystemImages;
    struct _MI_SESSION_STATE Sessions;
    struct _MI_PROCESS_STATE Processes;
    struct _MI_HARDWARE_STATE Hardware;
    struct _MI_SYSTEM_VA_STATE SystemVa;
    struct _MI_COMBINE_STATE PageCombines;
    struct _MI_PAGELIST_STATE PageLists;
    struct _MI_PARTITION_STATE Partitions;
    struct _MI_SHUTDOWN_STATE Shutdowns;
    struct _MI_ERROR_STATE Errors;
    struct _MI_ACCESS_LOG_STATE AccessLog;
    struct _MI_DEBUGGER_STATE Debugger;
    struct _MI_STANDBY_STATE Standby;
    struct _MI_SYSTEM_PTE_STATE SystemPtes;
    struct _MI_IO_PAGE_STATE IoPages;
    struct _MI_PAGING_IO_STATE PagingIo;
    struct _MI_COMMON_PAGE_STATE CommonPages;
    struct _MI_SYSTEM_TRIM_STATE Trims;
    ULONG64 Cookie;
    PVOID *BootRegistryRuns;
    LONG ZeroingDisabled;
    UCHAR FullyInitialized;
    UCHAR SafeBooted;
    struct _TlgProvider_t *TraceLogging;
    struct _MI_VISIBLE_STATE Vs;
};

typedef struct _MI_SYSTEM_NODE_INFORMATION {
    union _SLIST_HEADER PagedPoolSListHead;
    union _SLIST_HEADER NonPagedPoolSListHead[3];
    union _SLIST_HEADER NonPagedPoolSListHeadNx[3];
    struct _CACHED_KSTACK_LIST CachedKernelStacks[2];
    ULONG64 NonPagedBitMapMaximum;
    struct _MI_DYNAMIC_BITMAP DynamicBitMapNonPagedPool;
    ULONG64 NonPagedPoolLowestPage;
    ULONG64 NonPagedPoolHighestPage;
    ULONG64 AllocatedNonPagedPool;
    ULONG64 PartialLargePoolRegions;
    ULONG64 PagesInPartialLargePoolRegions;
    ULONG64 CachedNonPagedPoolCount;
    ULONG64 NonPagedPoolSpinLock;
    struct _MMPFN *CachedNonPagedPool;
    PVOID NonPagedPoolFirstVa;
    PVOID NonPagedPoolLastVa;
    struct _RTL_BITMAP_EX NonPagedBitMap[3];
    ULONG64 NonPagedHint[2];
};

typedef struct _MI_SYSTEM_PTE_STATE {
    struct _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside;
    union _SLIST_HEADER DeadPteTrackerSListHead;
    ULONG64 PteTrackerLock;
    struct _RTL_BITMAP_EX PteTrackingBitmap;
    struct _MI_CACHED_PTES *CachedPteHeads;
    struct _MI_CACHED_PTES *CachedKernelStackPteHeads;
    struct _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;
    struct _MI_SYSTEM_PTE_TYPE KernelStackPteInfo;
    ULONG StackGrowthFailures;
    UCHAR KernelStackPages;
    UCHAR TrackPtesAborted;
    UCHAR AdjustCounter;
    LONG ReservedMappingLock;
    struct _RTL_AVL_TREE ReservedMappingTree;
    struct _MMPFN *ReservedMappingPageTablePfns;
    struct _RTL_AVL_TREE OutswappedKernelStackRoot;
    LONG OutswappedKernelStackLock;
    struct _MI_ULTRA_VA_CONTEXT UltraSpaceContext;
    ULONG NumberOfUltraMdlMaps;
    struct _MI_ULTRA_MDL_NODE *UltraMdlNodeMappings;
};

typedef struct _MI_SYSTEM_PTE_TYPE {
    struct _RTL_BITMAP_EX Bitmap;
    struct _MMPTE *BasePte;
    ULONG Flags;
    enum _MI_SYSTEM_VA_TYPE VaType;
    PULONG FailureCount;
    ULONG PteFailures;
    ULONG64 SpinLock;
    struct _EX_PUSH_LOCK *GlobalPushLock;
    ULONG64 TotalSystemPtes;
    ULONG64 Hint;
    ULONG64 LowestBitEverAllocated;
    struct _MI_CACHED_PTES *CachedPtes;
    ULONG64 TotalFreeSystemPtes;
};

typedef struct _MI_SYSTEM_TRIM_STATE {
    ULONG64 ExpansionLock;
    LONG TrimInProgressCount;
    struct _KEVENT PeriodicWorkingSetEvent;
    ULONG TrimAllPageFaultCount[3];
};

typedef struct _MI_SYSTEM_VA_ASSIGNMENT {
    PVOID BaseAddress;
    ULONG64 NumberOfBytes;
};

typedef struct _MI_SYSTEM_VA_STATE {
    ULONG64 SystemTablesLock;
    ULONG64 AvailableSystemCacheVa;
    struct _MI_DYNAMIC_BITMAP DynamicBitMapKernelStacks;
    struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemPtes;
    struct _MI_DYNAMIC_BITMAP DynamicBitMapDriverImages[2];
    struct _MI_DYNAMIC_BITMAP DynamicBitMapPagedPool;
    struct _MI_DYNAMIC_BITMAP DynamicBitMapSpecialPool[2];
    struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemCache;
    PVOID HalPrivateVaStart;
    ULONG64 HalPrivateVaSize;
    ULONG SystemVaAssignment[8];
    ULONG SystemVaAssignmentHint;
    ULONG TopLevelPteLockBits[32];
    LONG DeleteKvaLock;
    struct _MI_WSLE *WsleArrays[8];
    struct _MI_HYPER_SPACE *PagableHyperSpace;
    PVOID HyperSpaceEnd;
    struct _KEVENT FreeSystemCacheVa;
    ULONG64 SystemVaLock;
    ULONG64 SystemCacheViewLock;
    struct _MMWSL_INSTANCE SystemWorkingSetList[8];
    ULONG64 SelfmapLock[4];
};

typedef struct _MI_TRIAGE_DUMP_DATA {
    ULONG64 BadPageCount;
    LONG BadPagesDetected;
    LONG ZeroedPageSingleBitErrorsDetected;
    LONG ScrubPasses;
    LONG ScrubBadPagesFound;
    ULONG PageHashErrors;
    ULONG64 FeatureBits;
    ULONG TimeZoneId;
    union _MI_FLAGS Flags;
    PVOID VsmConnection;
};

typedef struct _MI_ULTRA_MDL_NODE {
    struct _MI_ALIGNED_SLIST UltraMdlMaps[8];
};

typedef struct _MI_ULTRA_VA_CONTEXT {
    ULONG64 Lock;
    PVOID ZeroMapping;
    ULONG64 AllocationHintBit;
    struct _RTL_BITMAP_EX Bitmap[2];
    LONG ConcurrencyMaximum;
    LONG ConcurrencyCount;
};

typedef struct _MI_VAD_EVENT_BLOCK {
    struct _MI_VAD_EVENT_BLOCK *Next;
    struct _KGATE Gate;
    struct _MMADDRESS_LIST SecureInfo;
    struct _RTL_BITMAP_EX BitMap;
    struct _MMINPAGE_SUPPORT *InPageSupport;
    struct _MI_LARGEPAGE_IMAGE_INFO LargePage;
    struct _ETHREAD *CreatingThread;
    struct _MI_SUB64K_FREE_RANGES PebTeb;
    struct _MMVAD_SHORT *PlaceholderVad;
    ULONG WaitReason;
};

typedef struct _MI_VAD_SEQUENTIAL_INFO {
    ULONG64 Length : 12;
    ULONG64 Vpn : 52;
};

typedef struct _MI_VERIFIER_POOL_HEADER {
    struct _VI_POOL_ENTRY *VerifierPoolEntry;
};

typedef struct _MI_VISIBLE_PARTITION {
    ULONG64 LowestPhysicalPage;
    ULONG64 HighestPhysicalPage;
    ULONG64 NumberOfPhysicalPages;
    ULONG NumberOfPagingFiles;
    UCHAR SystemCacheInitialized;
    struct _MMPAGING_FILE *PagingFile[16];
    ULONG64 AvailablePages;
    ULONG64 ResidentAvailablePages;
    struct _MMSUPPORT_INSTANCE PartitionWs[1];
    struct _MMWSL_INSTANCE PartitionWorkingSetLists[1];
    ULONG64 TotalCommittedPages;
    struct _MMPFNLIST ModifiedPageListHead;
    struct _MMPFNLIST ModifiedNoWritePageListHead;
    ULONG64 TotalCommitLimit;
    ULONG64 TotalPagesForPagingFile;
    ULONG64 VadPhysicalPages;
    ULONG64 ProcessLockedFilePages;
    ULONG64 SharedCommit;
    ULONG64 SlabAllocatorPages;
    ULONG ChargeCommitmentFailures[4];
    LONG PageFileTraceIndex;
    struct _MI_PAGEFILE_TRACES PageFileTraces[32];
};

typedef struct _MI_VISIBLE_STATE {
    struct _MI_SPECIAL_POOL SpecialPool;
    struct _LIST_ENTRY SessionWsList;
    struct _RTL_BITMAP *SessionIdBitmap;
    struct _MM_PAGED_POOL_INFO PagedPoolInfo;
    ULONG64 MaximumNonPagedPoolInPages;
    ULONG64 SizeOfPagedPoolInPages;
    struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
    ULONG64 NonPagedPoolCommit;
    ULONG64 SmallNonPagedPtesCommit;
    ULONG64 BootCommit;
    ULONG64 MdlPagesAllocated;
    ULONG64 SystemPageTableCommit;
    ULONG64 SpecialPagesInUse;
    ULONG64 ProcessCommit;
    LONG DriverCommit;
    ULONG64 PfnDatabaseCommit;
    struct _MMSUPPORT_FULL SystemWs[6];
    struct _MMSUPPORT_SHARED SystemCacheShared;
    struct _MMSUPPORT_AGGREGATION AggregateSystemWs[1];
    ULONG MapCacheFailures;
    ULONG64 PagefileHashPages;
    struct _SYSPTES_HEADER PteHeader;
    struct _MI_SPECIAL_POOL *SessionSpecialPool;
    ULONG64 SystemVaTypeCount[16];
    UCHAR SystemVaType[256];
    struct _MI_SYSTEM_VA_ASSIGNMENT SystemVaRegions[14];
};

typedef struct _MI_WSLE {
    union {
        struct {
            UCHAR Age : 4;
            UCHAR Protection : 3;
            UCHAR Reserved : 1;
        } e1;
        struct {
            UCHAR EntireWsle;
        } e2;
    } u1;
};

typedef struct _MI_ZERO_COST_COUNTS {
    ULONG64 NativeSum;
    ULONG64 CachedSum;
};

typedef struct _MI_ZERO_THREAD_CONTEXT {
};

typedef struct _MMADDRESS_LIST {
    union {
        struct _MMSECURE_FLAGS Flags;
        ULONG FlagsLong;
        PVOID StartVa;
    } u1;
    PVOID EndVa;
};

typedef struct _MMCLONE_BLOCK {
    struct _MMPTE ProtoPte;
    ULONG64 CrossPartitionReferences;
    ULONG64 CloneCommitCount;
    struct _MI_CLONE_BLOCK_FLAGS u1;
    ULONG64 CloneRefCount;
};

typedef struct _MMCLONE_DESCRIPTOR {
    struct _RTL_BALANCED_NODE CloneNode;
    struct _MMCLONE_DESCRIPTOR *Next;
    struct _MMCLONE_BLOCK *StartingCloneBlock;
    struct _MMCLONE_BLOCK *EndingCloneBlock;
    ULONG64 NumberOfPtes;
    ULONG64 NumberOfReferences;
    struct _MMCLONE_HEADER *CloneHeader;
    ULONG64 NonPagedPoolQuotaCharge;
    struct _SLIST_ENTRY DeleteList;
    ULONG64 NestingLevel;
};

typedef struct _MMCLONE_HEADER {
    ULONG64 NumberOfPtes;
    ULONG64 NumberOfProcessReferences;
    struct _MMCLONE_BLOCK *ClonePtes;
    struct _MI_PARTITION *Partition;
};

typedef struct _MMDEREFERENCE_SEGMENT_HEADER {
    struct _KSEMAPHORE Semaphore;
    struct _LIST_ENTRY ControlAreaDeleteListHead;
    struct _LIST_ENTRY UnusedSegmentDeleteListHead;
    struct _LIST_ENTRY PagefileExtensionListHead;
};

typedef struct _MMEXTEND_INFO {
    ULONG64 CommittedSize;
    ULONG ReferenceCount;
};

typedef struct _MMINPAGE_FLAGS {
    ULONG GetExtents : 1;
    ULONG PrefetchSystemVmType : 2;
    ULONG VaPrefetchReadBlock : 1;
    ULONG CollidedFlowThrough : 1;
    ULONG ForceCollisions : 1;
    ULONG InPageExpanded : 1;
    ULONG IssuedAtLowPriority : 1;
    ULONG FaultFromStore : 1;
    ULONG PagePriority : 3;
    ULONG ClusteredPagePriority : 3;
    ULONG MakeClusterValid : 1;
    ULONG PerformRelocations : 1;
    ULONG ZeroLastPage : 1;
    ULONG UserFault : 1;
    ULONG StandbyProtectionNeeded : 1;
    ULONG PteChanged : 1;
    ULONG PageFileFault : 1;
    ULONG PageFilePageHashActive : 1;
    ULONG CoalescedIo : 1;
    ULONG VmLockNotNeeded : 1;
    ULONG Spare0 : 1;
    ULONG Spare1 : 6;
};

typedef struct _MMINPAGE_SUPPORT {
    struct _LIST_ENTRY ListEntry;
    struct _LIST_ENTRY ListHead;
    struct _KEVENT Event;
    struct _KEVENT CollidedEvent;
    struct _IO_STATUS_BLOCK IoStatus;
    union _LARGE_INTEGER ReadOffset;
    union {
        struct _KAPC_STATE ApcState;
        struct _MI_HARD_FAULT_STATE HardFaultState;
    } u2;
    struct _ETHREAD *Thread;
    struct _MMPFN *LockedProtoPfn;
    struct _MMPTE PteContents;
    LONG WaitCount;
    LONG InjectRetry;
    ULONG ByteCount;
    union {
        ULONG ImagePteOffset;
        ULONG TossPage;
    } u3;
    union {
        struct _MMINPAGE_FLAGS e1;
        ULONG LongFlags;
    } u1;
    struct _FILE_OBJECT *FilePointer;
    struct _CONTROL_AREA *ControlArea;
    struct _SUBSECTION *Subsection;
    PVOID Autoboost;
    PVOID FaultingAddress;
    struct _MMPTE *PointerPte;
    struct _MMPTE *BasePte;
    struct _MMPFN *Pfn;
    struct _MDL *PrefetchMdl;
    LONG64 ProbeCount;
    struct _MDL Mdl;
    ULONG64 Page[16];
    struct _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough;
};

typedef struct _MMINPAGE_SUPPORT_FLOW_THROUGH {
    ULONG64 Page[1];
    struct _MMINPAGE_SUPPORT *InitialInPageSupport;
    struct _MMPAGING_FILE *PagingFile;
    ULONG64 PageFileOffset;
    struct _RTL_BALANCED_NODE Node;
};

typedef struct _MMMOD_WRITER_LISTHEAD {
    struct _LIST_ENTRY ListHead;
    struct _KGATE Gate;
    struct _KEVENT Event;
};

typedef struct _MMMOD_WRITER_MDL_ENTRY {
    struct _LIST_ENTRY Links;
    union {
        struct _IO_STATUS_BLOCK IoStatus;
    } u;
    struct _IRP *Irp;
    struct _MODWRITER_FLAGS u1;
    ULONG StoreWriteRefCount;
    struct _KAPC StoreWriteCompletionApc;
    ULONG ByteCount;
    ULONG ChargedPages;
    struct _MMPAGING_FILE *PagingFile;
    struct _FILE_OBJECT *File;
    struct _CONTROL_AREA *ControlArea;
    struct _ERESOURCE *FileResource;
    union _LARGE_INTEGER WriteOffset;
    union _LARGE_INTEGER IssueTime;
    struct _MI_PARTITION *Partition;
    struct _MDL *PointerMdl;
    struct _MDL Mdl;
    ULONG64 Page[1];
};

typedef struct _MMPAGE_FILE_EXPANSION {
    struct _SEGMENT *Segment;
    struct _LIST_ENTRY DereferenceList;
    struct _MI_PARTITION *Partition;
    ULONG64 RequestedExpansionSize;
    ULONG64 ActualExpansion;
    struct _KEVENT Event;
    LONG InProgress;
    union {
        ULONG LongFlags;
        struct _MMPAGE_FILE_EXPANSION_FLAGS Flags;
    } u1;
    PVOID *ActiveEntry;
};

typedef struct _MMPAGE_FILE_EXPANSION_FLAGS {
    UCHAR PageFileNumber : 8;
    UCHAR Spare1 : 8;
    UCHAR Spare2 : 8;
    UCHAR IgnoreCurrentCommit : 1;
    UCHAR IncreaseMinimumSize : 1;
    UCHAR AttemptForCantExtend : 1;
    UCHAR UnusedSegmentDeletion : 1;
    UCHAR PageFileContract : 1;
    UCHAR Spare3 : 3;
};

typedef struct _MMPAGING_FILE {
    ULONG64 Size;
    ULONG64 MaximumSize;
    ULONG64 MinimumSize;
    ULONG64 FreeSpace;
    ULONG64 PeakUsage;
    ULONG64 HighestPage;
    ULONG64 FreeReservationSpace;
    struct _FILE_OBJECT *File;
    struct _MMMOD_WRITER_MDL_ENTRY *Entry[2];
    union _SLIST_HEADER PfnsToFree;
    struct _UNICODE_STRING PageFileName;
    struct _MI_PAGING_FILE_SPACE_BITMAPS *Bitmaps;
    ULONG AllocationBitmapHint;
    ULONG LargestAllocationCluster;
    ULONG RefreshAllocationCluster;
    ULONG LastRefreshAllocationCluster;
    ULONG ReservedClusterSizeAggregate;
    ULONG MaximumRunLengthInBitmaps;
    struct _RTL_RB_TREE BitmapsCacheLengthTree;
    struct _RTL_RB_TREE BitmapsCacheLocationTree;
    struct _LIST_ENTRY BitmapsCacheFreeList;
    struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY *BitmapsCacheEntries;
    ULONG ToBeEvictedCount;
    ULONG HybridPriority;
    USHORT PageFileNumber : 4;
    USHORT WsSwapPagefile : 1;
    USHORT NoReservations : 1;
    USHORT VirtualStorePagefile : 1;
    USHORT SwapSupported : 1;
    USHORT NodeInserted : 1;
    USHORT StackNotified : 1;
    USHORT BackedBySCM : 1;
    USHORT Spare0 : 4;
    UCHAR AdriftMdls : 1;
    UCHAR Spare1 : 7;
    UCHAR IgnoreReservations : 1;
    UCHAR Spare2 : 7;
    ULONG PageHashPages;
    ULONG PageHashPagesPeak;
    PULONG PageHash;
    PVOID FileHandle;
    ULONG64 Lock;
    struct _ETHREAD *LockOwner;
    struct _RTL_AVL_TREE FlowThroughReadRoot;
    struct _MI_PARTITION *Partition;
    struct _RTL_BALANCED_NODE FileObjectNode;
};

typedef struct _MMPFN {
    struct _LIST_ENTRY ListEntry;
    struct _RTL_BALANCED_NODE TreeNode;
    union {
        struct _SINGLE_LIST_ENTRY NextSlistPfn;
        PVOID Next;
        ULONG64 Flink : 36;
        ULONG64 NodeFlinkHigh : 28;
        struct _MI_ACTIVE_PFN Active;
    } u1;
    struct _MMPTE *PteAddress;
    ULONG64 PteLong;
    struct _MMPTE OriginalPte;
    struct _MIPFNBLINK u2;
    union {
        USHORT ReferenceCount;
        struct _MMPFNENTRY1 e1;
        struct _MMPFNENTRY3 e3;
        struct {
            USHORT ReferenceCount;
        } e2;
        struct {
            ULONG EntireField;
        } e4;
    } u3;
    USHORT NodeBlinkLow;
    UCHAR Unused : 4;
    UCHAR Unused2 : 4;
    UCHAR ViewCount;
    UCHAR NodeFlinkLow;
    union {
        ULONG64 PteFrame : 36;
        ULONG64 Channel : 2;
        ULONG64 Unused1 : 1;
        ULONG64 Unused2 : 1;
        ULONG64 Partition : 10;
        ULONG64 Spare : 2;
        ULONG64 FileOnly : 1;
        ULONG64 PfnExists : 1;
        ULONG64 PageIdentity : 3;
        ULONG64 PrototypePte : 1;
        ULONG64 PageColor : 6;
        ULONG64 EntireField;
    } u4;
};

typedef struct _MMPFNENTRY1 {
    UCHAR PageLocation : 3;
    UCHAR WriteInProgress : 1;
    UCHAR Modified : 1;
    UCHAR ReadInProgress : 1;
    UCHAR CacheAttribute : 2;
};

typedef struct _MMPFNENTRY3 {
    UCHAR Priority : 3;
    UCHAR OnProtectedStandby : 1;
    UCHAR InPageError : 1;
    UCHAR SystemChargedPage : 1;
    UCHAR RemovalRequested : 1;
    UCHAR ParityError : 1;
};

typedef struct _MMPFNLIST {
    ULONG64 Total;
    enum _MMLISTS ListName;
    ULONG64 Flink;
    ULONG64 Blink;
    ULONG64 Lock;
};

typedef struct _MMPFNLIST_SHORT {
    ULONG64 Total;
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct _MMPTE {
    union {
        ULONG64 Long;
        ULONG64 VolatileLong;
        struct _MMPTE_HARDWARE Hard;
        struct _MMPTE_PROTOTYPE Proto;
        struct _MMPTE_SOFTWARE Soft;
        struct _MMPTE_TIMESTAMP TimeStamp;
        struct _MMPTE_TRANSITION Trans;
        struct _MMPTE_SUBSECTION Subsect;
        struct _MMPTE_LIST List;
    } u;
};

typedef struct _MMPTE_HARDWARE {
    ULONG64 Valid : 1;
    ULONG64 Dirty1 : 1;
    ULONG64 Owner : 1;
    ULONG64 WriteThrough : 1;
    ULONG64 CacheDisable : 1;
    ULONG64 Accessed : 1;
    ULONG64 Dirty : 1;
    ULONG64 LargePage : 1;
    ULONG64 Global : 1;
    ULONG64 CopyOnWrite : 1;
    ULONG64 Unused : 1;
    ULONG64 Write : 1;
    ULONG64 PageFrameNumber : 36;
    ULONG64 ReservedForHardware : 4;
    ULONG64 ReservedForSoftware : 4;
    ULONG64 WsleAge : 4;
    ULONG64 WsleProtection : 3;
    ULONG64 NoExecute : 1;
};

typedef struct _MMPTE_LIST {
    ULONG64 Valid : 1;
    ULONG64 OneEntry : 1;
    ULONG64 filler0 : 2;
    ULONG64 SwizzleBit : 1;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Transition : 1;
    ULONG64 filler1 : 16;
    ULONG64 NextEntry : 36;
};

typedef struct _MMPTE_PROTOTYPE {
    ULONG64 Valid : 1;
    ULONG64 DemandFillProto : 1;
    ULONG64 HiberVerifyConverted : 1;
    ULONG64 ReadOnly : 1;
    ULONG64 SwizzleBit : 1;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Combined : 1;
    ULONG64 Unused1 : 4;
    LONG64 ProtoAddress : 48;
};

typedef struct _MMPTE_SOFTWARE {
    ULONG64 Valid : 1;
    ULONG64 PageFileReserved : 1;
    ULONG64 PageFileAllocated : 1;
    ULONG64 ColdPage : 1;
    ULONG64 SwizzleBit : 1;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Transition : 1;
    ULONG64 PageFileLow : 4;
    ULONG64 UsedPageTableEntries : 10;
    ULONG64 ShadowStack : 1;
    ULONG64 Unused : 5;
    ULONG64 PageFileHigh : 32;
};

typedef struct _MMPTE_SUBSECTION {
    ULONG64 Valid : 1;
    ULONG64 Unused0 : 3;
    ULONG64 SwizzleBit : 1;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 ColdPage : 1;
    ULONG64 Unused1 : 3;
    ULONG64 ExecutePrivilege : 1;
    LONG64 SubsectionAddress : 48;
};

typedef struct _MMPTE_TIMESTAMP {
    ULONG64 MustBeZero : 1;
    ULONG64 Unused : 3;
    ULONG64 SwizzleBit : 1;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Transition : 1;
    ULONG64 PageFileLow : 4;
    ULONG64 Reserved : 16;
    ULONG64 GlobalTimeStamp : 32;
};

typedef struct _MMPTE_TRANSITION {
    ULONG64 Valid : 1;
    ULONG64 Write : 1;
    ULONG64 Spare : 1;
    ULONG64 IoTracker : 1;
    ULONG64 SwizzleBit : 1;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Transition : 1;
    ULONG64 PageFrameNumber : 36;
    ULONG64 Unused : 16;
};

typedef struct _MMSECTION_FLAGS {
    ULONG BeingDeleted : 1;
    ULONG BeingCreated : 1;
    ULONG BeingPurged : 1;
    ULONG NoModifiedWriting : 1;
    ULONG FailAllIo : 1;
    ULONG Image : 1;
    ULONG Based : 1;
    ULONG File : 1;
    ULONG AttemptingDelete : 1;
    ULONG PrefetchCreated : 1;
    ULONG PhysicalMemory : 1;
    ULONG ImageControlAreaOnRemovableMedia : 1;
    ULONG Reserve : 1;
    ULONG Commit : 1;
    ULONG NoChange : 1;
    ULONG WasPurged : 1;
    ULONG UserReference : 1;
    ULONG GlobalMemory : 1;
    ULONG DeleteOnClose : 1;
    ULONG FilePointerNull : 1;
    ULONG PreferredNode : 6;
    ULONG GlobalOnlyPerSession : 1;
    ULONG UserWritable : 1;
    ULONG SystemVaAllocated : 1;
    ULONG PreferredFsCompressionBoundary : 1;
    ULONG UsingFileExtents : 1;
    ULONG PageSize64K : 1;
};

typedef struct _MMSECTION_FLAGS2 {
    USHORT PartitionId : 10;
    UCHAR NoCrossPartitionAccess : 1;
    UCHAR SubsectionCrossPartitionReferenceOverflow : 1;
};

typedef struct _MMSECURE_FLAGS {
    ULONG ReadOnly : 1;
    ULONG ReadWrite : 1;
    ULONG SecNoChange : 1;
    ULONG NoDelete : 1;
    ULONG RequiresPteReversal : 1;
    ULONG ExclusiveSecure : 1;
    ULONG UserModeOnly : 1;
    ULONG NoInherit : 1;
    ULONG CheckVad : 1;
    ULONG Spare : 3;
};

typedef struct _MMSESSION {
    struct _EX_PUSH_LOCK SystemSpaceViewLock;
    struct _EX_PUSH_LOCK *SystemSpaceViewLockPointer;
    struct _RTL_AVL_TREE ViewRoot;
    ULONG ViewCount;
    ULONG BitmapFailures;
};

typedef struct _MMSUBSECTION_FLAGS {
    USHORT SubsectionAccessed : 1;
    USHORT Protection : 5;
    USHORT StartingSector4132 : 10;
    USHORT SubsectionStatic : 1;
    USHORT GlobalMemory : 1;
    USHORT Spare : 1;
    USHORT OnDereferenceList : 1;
    USHORT SectorEndOffset : 12;
};

typedef struct _MMSUPPORT_AGGREGATION {
    ULONG PageFaultCount;
    ULONG64 WorkingSetSize;
    ULONG64 WorkingSetLeafSize;
    ULONG64 PeakWorkingSetSize;
};

typedef struct _MMSUPPORT_FLAGS {
    UCHAR WorkingSetType : 3;
    UCHAR Reserved0 : 3;
    UCHAR MaximumWorkingSetHard : 1;
    UCHAR MinimumWorkingSetHard : 1;
    UCHAR SessionMaster : 1;
    UCHAR TrimmerState : 2;
    UCHAR Reserved : 1;
    UCHAR PageStealers : 4;
    USHORT u1;
    UCHAR MemoryPriority;
    UCHAR WsleDeleted : 1;
    UCHAR SvmEnabled : 1;
    UCHAR ForceAge : 1;
    UCHAR ForceTrim : 1;
    UCHAR NewMaximum : 1;
    UCHAR CommitReleaseState : 2;
    UCHAR u2;
};

typedef struct _MMSUPPORT_FULL {
    struct _MMSUPPORT_INSTANCE Instance;
    struct _MMSUPPORT_SHARED Shared;
};

typedef struct _MMSUPPORT_INSTANCE {
    ULONG NextPageColor;
    ULONG PageFaultCount;
    ULONG64 TrimmedPageCount;
    struct _MMWSL_INSTANCE *VmWorkingSetList;
    struct _LIST_ENTRY WorkingSetExpansionLinks;
    ULONG64 AgeDistribution[8];
    struct _KGATE *ExitOutswapGate;
    ULONG64 MinimumWorkingSetSize;
    ULONG64 WorkingSetLeafSize;
    ULONG64 WorkingSetLeafPrivateSize;
    ULONG64 WorkingSetSize;
    ULONG64 WorkingSetPrivateSize;
    ULONG64 MaximumWorkingSetSize;
    ULONG64 PeakWorkingSetSize;
    ULONG HardFaultCount;
    USHORT LastTrimStamp;
    USHORT PartitionId;
    ULONG64 SelfmapLock;
    struct _MMSUPPORT_FLAGS Flags;
};

typedef struct _MMSUPPORT_SHARED {
    LONG WorkingSetLock;
    LONG GoodCitizenWaiting;
    ULONG64 ReleasedCommitDebt;
    ULONG64 ResetPagesRepurposedCount;
    PVOID WsSwapSupport;
    PVOID CommitReleaseContext;
    LONG WorkingSetCoreLock;
    PVOID AccessLog;
    ULONG64 ChargedWslePages;
    ULONG64 ActualWslePages;
    PVOID ShadowMapping;
};

typedef struct _MMVAD {
    struct _MMVAD_SHORT Core;
    union {
        ULONG LongFlags2;
        struct _MMVAD_FLAGS2 VadFlags2;
    } u2;
    struct _SUBSECTION *Subsection;
    struct _MMPTE *FirstPrototypePte;
    struct _MMPTE *LastContiguousPte;
    struct _LIST_ENTRY ViewLinks;
    struct _EPROCESS *VadsProcess;
    union {
        struct _MI_VAD_SEQUENTIAL_INFO SequentialVa;
        struct _MMEXTEND_INFO *ExtendedInfo;
    } u4;
    struct _FILE_OBJECT *FileObject;
};

typedef struct _MMVAD_FLAGS {
    ULONG VadType : 3;
    ULONG Protection : 5;
    ULONG PreferredNode : 6;
    ULONG PrivateMemory : 1;
    ULONG PrivateFixup : 1;
    ULONG Graphics : 1;
    ULONG Enclave : 1;
    ULONG PageSize64K : 1;
    ULONG ShadowStack : 1;
    ULONG Spare : 6;
    ULONG HotPatchAllowed : 1;
    ULONG NoChange : 1;
    ULONG ManySubsections : 1;
    ULONG DeleteInProgress : 1;
    ULONG LockContended : 1;
    ULONG Lock : 1;
};

typedef struct _MMVAD_FLAGS1 {
    ULONG CommitCharge : 31;
    ULONG MemCommit : 1;
};

typedef struct _MMVAD_FLAGS2 {
    ULONG FileOffset : 24;
    ULONG Large : 1;
    ULONG TrimBehind : 1;
    ULONG Inherit : 1;
    ULONG NoValidationNeeded : 1;
    ULONG PrivateDemandZero : 1;
    ULONG Spare : 3;
};

typedef struct _MMVAD_SHORT {
    struct _MMVAD_SHORT *NextVad;
    PVOID ExtraCreateInfo;
    struct _RTL_BALANCED_NODE VadNode;
    ULONG StartingVpn;
    ULONG EndingVpn;
    UCHAR StartingVpnHigh;
    UCHAR EndingVpnHigh;
    UCHAR CommitChargeHigh;
    UCHAR SpareNT64VadUChar;
    LONG ReferenceCount;
    struct _EX_PUSH_LOCK PushLock;
    union {
        ULONG LongFlags;
        struct _MMVAD_FLAGS VadFlags;
        ULONG VolatileVadLong;
    } u;
    union {
        ULONG LongFlags1;
        struct _MMVAD_FLAGS1 VadFlags1;
    } u1;
    struct _MI_VAD_EVENT_BLOCK *EventList;
};

typedef struct _MMWORKING_SET_EXPANSION_HEAD {
    struct _LIST_ENTRY ListHead;
};

typedef struct _MMWSL_INSTANCE {
    struct _MMPTE *NextPteToTrim;
    struct _MMPTE *NextPteToAge;
    struct _MMPTE *NextPteToAccessClear;
    ULONG LastAccessClearingRemainder;
    ULONG LastAgingRemainder;
    ULONG64 LockedEntries;
};

typedef struct _MM_DRIVER_VERIFIER_DATA {
    ULONG Level;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsAttempted;
    ULONG AllocationsSucceeded;
    ULONG AllocationsSucceededSpecialPool;
    ULONG AllocationsWithNoTag;
    ULONG TrimRequests;
    ULONG Trims;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG Loads;
    ULONG Unloads;
    ULONG UnTrackedPool;
    ULONG UserTrims;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    ULONG64 PagedBytes;
    ULONG64 NonPagedBytes;
    ULONG64 PeakPagedBytes;
    ULONG64 PeakNonPagedBytes;
    ULONG BurstAllocationsFailedDeliberately;
    ULONG SessionTrims;
    ULONG OptionChanges;
    ULONG VerifyMode;
    struct _UNICODE_STRING PreviousBucketName;
    ULONG ExecutePoolTypes;
    ULONG ExecutePageProtections;
    ULONG ExecutePageMappings;
    ULONG ExecuteWriteSections;
    ULONG SectionAlignmentFailures;
    ULONG IATInExecutableSection;
};

typedef struct _MM_PAGED_POOL_INFO {
    struct _EX_PUSH_LOCK Lock;
    struct _RTL_BITMAP_EX PagedPoolAllocationMap;
    struct _MMPTE *FirstPteForPagedPool;
    ULONG64 MaximumSize;
    ULONG64 PagedPoolHint;
    ULONG64 AllocatedPagedPool;
};

typedef struct _MM_PAGE_ACCESS_INFO {
    union _MM_PAGE_ACCESS_INFO_FLAGS Flags;
    ULONG64 FileOffset;
    PVOID VirtualAddress;
    PVOID PointerProtoPte;
};

typedef struct _MM_PAGE_ACCESS_INFO_HEADER {
    struct _SINGLE_LIST_ENTRY Link;
    enum _MM_PAGE_ACCESS_TYPE Type;
    ULONG EmptySequenceNumber;
    ULONG CurrentFileIndex;
    ULONG64 CreateTime;
    ULONG64 EmptyTime;
    struct _MM_PAGE_ACCESS_INFO *TempEntry;
    struct _MM_PAGE_ACCESS_INFO *PageEntry;
    PULONG64 FileEntry;
    PULONG64 FirstFileEntry;
    struct _EPROCESS *Process;
    ULONG SessionId;
    PULONG64 PageFrameEntry;
    PULONG64 LastPageFrameEntry;
};

typedef struct _MM_SESSION_SPACE {
    LONG ReferenceCount;
    union {
        ULONG LongFlags;
        struct _MM_SESSION_SPACE_FLAGS Flags;
    } u;
    ULONG SessionId;
    LONG ProcessReferenceToSession;
    struct _LIST_ENTRY ProcessList;
    ULONG64 SessionPageDirectoryIndex;
    ULONG64 NonPagablePages;
    ULONG64 CommittedPages;
    PVOID PagedPoolStart;
    PVOID PagedPoolEnd;
    PVOID SessionObject;
    PVOID SessionObjectHandle;
    ULONG SessionPoolAllocationFailures[4];
    struct _RTL_AVL_TREE ImageTree;
    ULONG LocaleId;
    ULONG AttachCount;
    struct _KGATE AttachGate;
    struct _LIST_ENTRY WsListEntry;
    struct _MM_PAGED_POOL_INFO PagedPoolInfo;
    struct _GENERAL_LOOKASIDE Lookaside[21];
    struct _MMSESSION Session;
    struct _MMSUPPORT_FULL Vm;
    struct _MMWSL_INSTANCE WorkingSetList;
    struct _MMSUPPORT_AGGREGATION AggregateSessionWs;
    PVOID HeapState;
    struct _POOL_DESCRIPTOR PagedPool;
    struct _MI_SESSION_DRIVER_UNLOAD DriverUnload;
    ULONG TopLevelPteLockBits[32];
    struct _MMPTE PageDirectory;
    struct _EX_PUSH_LOCK SessionVaLock;
    struct _RTL_BITMAP_EX DynamicVaBitMap;
    ULONG64 DynamicVaHint;
    struct _MI_SPECIAL_POOL SpecialPool;
    struct _EX_PUSH_LOCK SessionPteLock;
    LONG PoolBigEntriesInUse;
    ULONG PagedPoolPdeCount;
    ULONG SpecialPoolPdeCount;
    ULONG DynamicSessionPdeCount;
    struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
    PVOID PoolTrackTableExpansion;
    ULONG64 PoolTrackTableExpansionSize;
    PVOID PoolTrackBigPages;
    ULONG64 PoolTrackBigPagesSize;
    struct _RTL_AVL_TREE PermittedFaultsTree;
    enum _IO_SESSION_STATE IoState;
    ULONG IoStateSequence;
    struct _KEVENT IoNotificationEvent;
    struct _EJOB *ServerSilo;
    ULONG64 CreateTime;
    UCHAR PoolTags[8192];
};

typedef struct _MM_SESSION_SPACE_FLAGS {
    ULONG Initialized : 1;
    ULONG DeletePending : 1;
    ULONG PoolInitialized : 1;
    ULONG DynamicVaInitialized : 1;
    ULONG WsInitialized : 1;
    ULONG PoolDestroyed : 1;
    ULONG ObjectInitialized : 1;
    ULONG LeakedPoolDeliberately : 1;
    ULONG SessionHeapInitialized : 1;
    ULONG SessionHeapDestroyed : 1;
    ULONG Filler : 22;
};

typedef struct _MM_SYSTEM_PAGE_COUNTS {
    ULONG SystemCodePage;
    ULONG SystemDriverPage;
    LONG TotalSystemCodePages;
    LONG TotalSystemDriverPages;
};

typedef struct _MODWRITER_FLAGS {
    ULONG KeepForever : 1;
    ULONG Networked : 1;
    ULONG IoPriority : 3;
    ULONG ModifiedStoreWrite : 1;
};

typedef struct _MSUBSECTION {
    struct _SUBSECTION Core;
    struct _RTL_BALANCED_NODE SubsectionNode;
    struct _LIST_ENTRY DereferenceList;
    ULONG64 NumberOfMappedViews;
    ULONG NumberOfPfnReferences;
    ULONG LargeViews;
    struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
};

typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    union _LARGE_INTEGER DefaultTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _NB10 {
    ULONG Signature;
    ULONG Offset;
    ULONG TimeStamp;
    ULONG Age;
    CHAR PdbName[1];
};

typedef struct _NETWORK_LOADER_BLOCK {
    PUCHAR DHCPServerACK;
    ULONG DHCPServerACKLength;
    PUCHAR BootServerReplyPacket;
    ULONG BootServerReplyPacketLength;
};

typedef struct _NLS_DATA_BLOCK {
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
};

typedef struct _NONOPAQUE_OPLOCK {
    struct _IRP *IrpExclusiveOplock;
    struct _FILE_OBJECT *FileObject;
    struct _EPROCESS *ExclusiveOplockOwner;
    struct _ETHREAD *ExclusiveOplockOwnerThread;
    UCHAR WaiterPriority;
    struct _LIST_ENTRY IrpOplocksR;
    struct _LIST_ENTRY IrpOplocksRH;
    struct _LIST_ENTRY RHBreakQueue;
    struct _LIST_ENTRY WaitingIrps;
    struct _LIST_ENTRY DelayAckFileObjectQueue;
    struct _LIST_ENTRY AtomicQueue;
    struct _GUID *DeleterParentKey;
    ULONG OplockState;
    struct _FAST_MUTEX *FastMutex;
};

typedef struct _NON_PAGED_DEBUG_INFO {
    USHORT Signature;
    USHORT Flags;
    ULONG Size;
    USHORT Machine;
    USHORT Characteristics;
    ULONG TimeDateStamp;
    ULONG CheckSum;
    ULONG SizeOfImage;
    ULONG64 ImageBase;
};

typedef struct _NPAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    ULONG Version;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
};

typedef struct _NT_TIB32 {
    ULONG ExceptionList;
    ULONG StackBase;
    ULONG StackLimit;
    ULONG SubSystemTib;
    ULONG FiberData;
    ULONG Version;
    ULONG ArbitraryUserPointer;
    ULONG Self;
};

typedef struct _NT_TIB64 {
    ULONG64 ExceptionList;
    ULONG64 StackBase;
    ULONG64 StackLimit;
    ULONG64 SubSystemTib;
    ULONG64 FiberData;
    ULONG Version;
    ULONG64 ArbitraryUserPointer;
    ULONG64 Self;
};

typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    PVOID RootDirectory;
    struct _UNICODE_STRING *ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
};

typedef struct _OBJECT_CREATE_INFORMATION {
    ULONG Attributes;
    PVOID RootDirectory;
    CHAR ProbeMode;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG SecurityDescriptorCharge;
    PVOID SecurityDescriptor;
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
};

typedef struct _OBJECT_DIRECTORY {
    struct _OBJECT_DIRECTORY_ENTRY *HashBuckets[37];
    struct _EX_PUSH_LOCK Lock;
    struct _DEVICE_MAP *DeviceMap;
    struct _OBJECT_DIRECTORY *ShadowDirectory;
    PVOID NamespaceEntry;
    PVOID SessionObject;
    ULONG Flags;
    ULONG SessionId;
};

typedef struct _OBJECT_DIRECTORY_ENTRY {
    struct _OBJECT_DIRECTORY_ENTRY *ChainLink;
    PVOID Object;
    ULONG HashValue;
};

typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
};

typedef struct _OBJECT_FOOTER {
    struct _HANDLE_REVOCATION_INFO HandleRevocationInfo;
    struct _OB_EXTENDED_USER_INFO ExtendedUserInfo;
};

typedef struct _OBJECT_HANDLE_COUNT_DATABASE {
    ULONG CountEntries;
    struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];
};

typedef struct _OBJECT_HANDLE_COUNT_ENTRY {
    struct _EPROCESS *Process;
    ULONG HandleCount : 24;
    ULONG LockCount : 8;
};

typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ULONG GrantedAccess;
};

typedef struct _OBJECT_HEADER {
    LONG64 PointerCount;
    LONG64 HandleCount;
    PVOID NextToFree;
    struct _EX_PUSH_LOCK Lock;
    UCHAR TypeIndex;
    UCHAR TraceFlags;
    UCHAR DbgRefTrace : 1;
    UCHAR DbgTracePermanent : 1;
    UCHAR InfoMask;
    UCHAR Flags;
    UCHAR NewObject : 1;
    UCHAR KernelObject : 1;
    UCHAR KernelOnlyAccess : 1;
    UCHAR ExclusiveObject : 1;
    UCHAR PermanentObject : 1;
    UCHAR DefaultSecurityQuota : 1;
    UCHAR SingleHandleEntry : 1;
    UCHAR DeletedInline : 1;
    ULONG Reserved;
    struct _OBJECT_CREATE_INFORMATION *ObjectCreateInfo;
    PVOID QuotaBlockCharged;
    PVOID SecurityDescriptor;
    struct _QUAD Body;
};

typedef struct _OBJECT_HEADER_AUDIT_INFO {
    PVOID SecurityDescriptor;
    ULONG64 Reserved;
};

typedef struct _OBJECT_HEADER_CREATOR_INFO {
    struct _LIST_ENTRY TypeList;
    PVOID CreatorUniqueProcess;
    USHORT CreatorBackTraceIndex;
    USHORT Reserved1;
    ULONG Reserved2;
};

typedef struct _OBJECT_HEADER_EXTENDED_INFO {
    struct _OBJECT_FOOTER *Footer;
    ULONG64 Reserved;
};

typedef struct _OBJECT_HEADER_HANDLE_INFO {
    struct _OBJECT_HANDLE_COUNT_DATABASE *HandleCountDataBase;
    struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
};

typedef struct _OBJECT_HEADER_NAME_INFO {
    struct _OBJECT_DIRECTORY *Directory;
    struct _UNICODE_STRING Name;
    LONG ReferenceCount;
    ULONG Reserved;
};

typedef struct _OBJECT_HEADER_PADDING_INFO {
    ULONG PaddingAmount;
};

typedef struct _OBJECT_HEADER_PROCESS_INFO {
    struct _EPROCESS *ExclusiveProcess;
    ULONG64 Reserved;
};

typedef struct _OBJECT_HEADER_QUOTA_INFO {
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG SecurityDescriptorCharge;
    ULONG Reserved1;
    PVOID SecurityDescriptorQuotaBlock;
    ULONG64 Reserved2;
};

typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE {
    struct _LIST_ENTRY HashBuckets[37];
    struct _EX_PUSH_LOCK Lock;
    ULONG NumberOfPrivateSpaces;
};

typedef struct _OBJECT_NAME_INFORMATION {
    struct _UNICODE_STRING Name;
};

typedef struct _OBJECT_REF_INFO {
    struct _OBJECT_HEADER *ObjectHeader;
    PVOID NextRef;
    UCHAR ImageFileName[16];
    USHORT NextPos;
    USHORT MaxStacks;
    struct _OBJECT_REF_STACK_INFO StackInfo[0];
};

typedef struct _OBJECT_REF_STACK_INFO {
    ULONG Sequence;
    USHORT Index;
    USHORT NumTraces;
    ULONG Tag;
};

typedef struct _OBJECT_REF_TRACE {
    PVOID StackTrace[16];
};

typedef struct _OBJECT_SYMBOLIC_LINK {
    union _LARGE_INTEGER CreationTime;
    struct _UNICODE_STRING LinkTarget;
    PLONG Callback;
    PVOID CallbackContext;
    ULONG DosDeviceDriveIndex;
    ULONG Flags;
    ULONG AccessMask;
};

typedef struct _OBJECT_TYPE {
    struct _LIST_ENTRY TypeList;
    struct _UNICODE_STRING Name;
    PVOID DefaultObject;
    UCHAR Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;
    struct _EX_PUSH_LOCK TypeLock;
    ULONG Key;
    struct _LIST_ENTRY CallbackList;
};

typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    USHORT ObjectTypeFlags;
    UCHAR CaseInsensitive : 1;
    UCHAR UnnamedObjectsOnly : 1;
    UCHAR UseDefaultObject : 1;
    UCHAR SecurityRequired : 1;
    UCHAR MaintainHandleCount : 1;
    UCHAR MaintainTypeList : 1;
    UCHAR SupportsObjectCallbacks : 1;
    UCHAR CacheAligned : 1;
    UCHAR UseExtendedParameters : 1;
    UCHAR Reserved : 7;
    ULONG ObjectTypeCode;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG RetainAccess;
    enum _POOL_TYPE PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    PVOID DumpProcedure;
    PLONG OpenProcedure;
    PVOID CloseProcedure;
    PVOID DeleteProcedure;
    PLONG ParseProcedure;
    PLONG ParseProcedureEx;
    PLONG SecurityProcedure;
    PLONG QueryNameProcedure;
    PUCHAR OkayToCloseProcedure;
    ULONG WaitObjectFlagMask;
    USHORT WaitObjectFlagOffset;
    USHORT WaitObjectPointerOffset;
};

typedef struct _OBP_LOOKUP_CONTEXT {
    struct _OBJECT_DIRECTORY *Directory;
    PVOID Object;
    struct _OBJECT_DIRECTORY_ENTRY **EntryLink;
    ULONG HashValue;
    USHORT HashIndex;
    UCHAR DirectoryLocked;
    UCHAR LockedExclusive;
    ULONG LockStateSignature;
};

typedef struct _OBP_SILODRIVERSTATE {
    struct _DEVICE_MAP *SystemDeviceMap;
    struct _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;
    struct _EX_PUSH_LOCK DeviceMapLock;
    struct _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable;
};

typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE {
    ULONG GlobalDeviceMap;
    ULONG LocalDeviceCount[26];
};

typedef struct _OB_DUPLICATE_OBJECT_STATE {
    struct _EPROCESS *SourceProcess;
    PVOID SourceHandle;
    PVOID Object;
    ULONG TargetAccess;
    struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo;
    ULONG HandleAttributes;
};

typedef struct _OB_EXTENDED_PARSE_PARAMETERS {
    USHORT Length;
    ULONG RestrictedAccessMask;
    struct _EJOB *Silo;
};

typedef struct _OB_EXTENDED_USER_INFO {
    PVOID Context1;
    PVOID Context2;
};

typedef struct _OB_HANDLE_REVOCATION_BLOCK {
    struct _LIST_ENTRY RevocationInfos;
    struct _EX_PUSH_LOCK Lock;
    struct _EX_RUNDOWN_REF Rundown;
};

typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 {
    ULONG Version;
    ULONG AbnormalResetOccurred;
    ULONG OfflineMemoryDumpCapable;
    union _LARGE_INTEGER ResetDataAddress;
    ULONG ResetDataSize;
};

typedef struct _OPEN_PACKET {
    SHORT Type;
    SHORT Size;
    struct _FILE_OBJECT *FileObject;
    LONG FinalStatus;
    ULONG64 Information;
    ULONG ParseCheck;
    struct _FILE_OBJECT *RelatedFileObject;
    struct _DEVICE_OBJECT *ReferencedDeviceObject;
    struct _OBJECT_ATTRIBUTES *OriginalAttributes;
    union _LARGE_INTEGER AllocationSize;
    ULONG CreateOptions;
    USHORT FileAttributes;
    USHORT ShareAccess;
    PVOID EaBuffer;
    ULONG EaLength;
    ULONG Options;
    ULONG Disposition;
    struct _FILE_BASIC_INFORMATION *BasicInformation;
    struct _FILE_NETWORK_OPEN_INFORMATION *NetworkInformation;
    PVOID FileInformation;
    enum _CREATE_FILE_TYPE CreateFileType;
    PVOID MailslotOrPipeParameters;
    UCHAR Override;
    UCHAR QueryOnly;
    UCHAR DeleteOnly;
    UCHAR FullAttributes;
    struct _DUMMY_FILE_OBJECT *LocalFileObject;
    ULONG InternalFlags;
    CHAR AccessMode;
    struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;
    enum _FILE_INFORMATION_CLASS FileInformationClass;
    ULONG FileInformationLength;
    UCHAR FilterQuery;
};

typedef struct _OWNER_ENTRY {
    ULONG64 OwnerThread;
    ULONG IoPriorityBoosted : 1;
    ULONG OwnerReferenced : 1;
    ULONG IoQoSPriorityBoosted : 1;
    ULONG OwnerCount : 29;
    ULONG TableSize;
};

typedef struct _PAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _PAGEFAULT_HISTORY {
};

typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK {
    struct _KEVENT DesiredReferenceNoEvent;
    LONG DesiredReferenceNo;
};

typedef struct _PCAT_FIRMWARE_INFORMATION {
    ULONG PlaceHolder;
};

typedef struct _PCI_BUSMASTER_DESCRIPTOR {
    enum _PCI_BUSMASTER_RID_TYPE Type;
    ULONG Segment;
    struct {
        UCHAR Bus;
        UCHAR Device;
        UCHAR Function;
        UCHAR Reserved;
    } DeviceRid;
    struct {
        UCHAR Bus;
        UCHAR Device;
        UCHAR Function;
        UCHAR Reserved;
    } BridgeRid;
    struct {
        UCHAR SecondaryBus;
        UCHAR SubordinateBus;
    } MultipleBridges;
};

typedef struct _PCW_BUFFER {
};

typedef struct _PCW_COUNTER_DESCRIPTOR {
    USHORT Id;
    USHORT StructIndex;
    USHORT Offset;
    USHORT Size;
};

typedef struct _PCW_COUNTER_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
};

typedef struct _PCW_DATA {
    PVOID Data;
    ULONG Size;
};

typedef struct _PCW_INSTANCE {
};

typedef struct _PCW_MASK_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
    ULONG InstanceId;
    UCHAR CollectMultiple;
    struct _PCW_BUFFER *Buffer;
    struct _KEVENT *CancelEvent;
};

typedef struct _PCW_PROCESSOR_INFO {
    ULONG64 IdleTime;
    ULONG64 AvailableTime;
    ULONG64 UserTime;
    ULONG64 KernelTime;
    ULONG Interrupts;
    ULONG64 DpcTime;
    ULONG64 InterruptTime;
    ULONG ClockInterrupts;
    ULONG DpcCount;
    ULONG DpcRate;
    ULONG64 C1Time;
    ULONG64 C2Time;
    ULONG64 C3Time;
    ULONG64 C1Transitions;
    ULONG64 C2Transitions;
    ULONG64 C3Transitions;
    ULONG64 StallTime;
    ULONG ParkingStatus;
    ULONG CurrentFrequency;
    ULONG PercentMaxFrequency;
    ULONG StateFlags;
    ULONG NominalThroughput;
    ULONG ActiveThroughput;
    ULONG64 ScaledThroughput;
    ULONG64 ScaledKernelThroughput;
    ULONG64 AverageIdleTime;
    ULONG64 IdleBreakEvents;
    ULONG PerformanceLimit;
    ULONG PerformanceLimitFlags;
};

typedef struct _PCW_REGISTRATION {
};

typedef struct _PCW_REGISTRATION_INFORMATION {
    ULONG Version;
    struct _UNICODE_STRING *Name;
    ULONG CounterCount;
    struct _PCW_COUNTER_DESCRIPTOR *Counters;
    PLONG Callback;
    PVOID CallbackContext;
};

typedef struct _PEB {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR IsLongPathAwareProcess : 1;
    UCHAR Padding0[4];
    PVOID Mutant;
    PVOID ImageBaseAddress;
    struct _PEB_LDR_DATA *Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    struct _RTL_CRITICAL_SECTION *FastPebLock;
    union _SLIST_HEADER *AtlThunkSListPtr;
    PVOID IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ProcessPreviouslyThrottled : 1;
    ULONG ProcessCurrentlyThrottled : 1;
    ULONG ProcessImagesHotPatched : 1;
    ULONG ReservedBits0 : 24;
    UCHAR Padding1[4];
    PVOID KernelCallbackTable;
    PVOID UserSharedInfoPtr;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
    ULONG TlsExpansionCounter;
    UCHAR Padding2[4];
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PVOID SharedData;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG64 HeapSegmentReserve;
    ULONG64 HeapSegmentCommit;
    ULONG64 HeapDeCommitTotalFreeThreshold;
    ULONG64 HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    UCHAR Padding3[4];
    struct _RTL_CRITICAL_SECTION *LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    UCHAR Padding4[4];
    ULONG64 ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[60];
    PVOID PostProcessInitRoutine;
    PVOID TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    UCHAR Padding5[4];
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    PVOID pShimData;
    PVOID AppCompatInfo;
    struct _UNICODE_STRING CSDVersion;
    struct _ACTIVATION_CONTEXT_DATA *ActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
    struct _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
    ULONG64 MinimumStackCommit;
    struct _FLS_CALLBACK_INFO *FlsCallback;
    struct _LIST_ENTRY FlsListHead;
    PVOID FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    PVOID WerRegistrationData;
    PVOID WerShipAssertPtr;
    PVOID pUnused;
    PVOID pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    UCHAR Padding6[4];
    ULONG64 CsrServerReadOnlySharedMemoryBase;
    ULONG64 TppWorkerpListLock;
    struct _LIST_ENTRY TppWorkerpList;
    PVOID WaitOnAddressHashTable[128];
    PVOID TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    struct _LEAP_SECOND_DATA *LeapSecondData;
    ULONG LeapSecondFlags;
    ULONG SixtySecondEnabled : 1;
    ULONG Reserved : 31;
    ULONG NtGlobalFlag2;
};

typedef struct _PEB32 {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR IsLongPathAwareProcess : 1;
    ULONG Mutant;
    ULONG ImageBaseAddress;
    ULONG Ldr;
    ULONG ProcessParameters;
    ULONG SubSystemData;
    ULONG ProcessHeap;
    ULONG FastPebLock;
    ULONG AtlThunkSListPtr;
    ULONG IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ProcessPreviouslyThrottled : 1;
    ULONG ProcessCurrentlyThrottled : 1;
    ULONG ProcessImagesHotPatched : 1;
    ULONG ReservedBits0 : 24;
    ULONG KernelCallbackTable;
    ULONG UserSharedInfoPtr;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    ULONG ApiSetMap;
    ULONG TlsExpansionCounter;
    ULONG TlsBitmap;
    ULONG TlsBitmapBits[2];
    ULONG ReadOnlySharedMemoryBase;
    ULONG SharedData;
    ULONG ReadOnlyStaticServerData;
    ULONG AnsiCodePageData;
    ULONG OemCodePageData;
    ULONG UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG HeapSegmentReserve;
    ULONG HeapSegmentCommit;
    ULONG HeapDeCommitTotalFreeThreshold;
    ULONG HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    ULONG ProcessHeaps;
    ULONG GdiSharedHandleTable;
    ULONG ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    ULONG LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    ULONG ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[34];
    ULONG PostProcessInitRoutine;
    ULONG TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    ULONG pShimData;
    ULONG AppCompatInfo;
    struct _STRING32 CSDVersion;
    ULONG ActivationContextData;
    ULONG ProcessAssemblyStorageMap;
    ULONG SystemDefaultActivationContextData;
    ULONG SystemAssemblyStorageMap;
    ULONG MinimumStackCommit;
    ULONG FlsCallback;
    struct LIST_ENTRY32 FlsListHead;
    ULONG FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    ULONG WerRegistrationData;
    ULONG WerShipAssertPtr;
    ULONG pUnused;
    ULONG pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    ULONG64 CsrServerReadOnlySharedMemoryBase;
    ULONG TppWorkerpListLock;
    struct LIST_ENTRY32 TppWorkerpList;
    ULONG WaitOnAddressHashTable[128];
    ULONG TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    ULONG LeapSecondData;
    ULONG LeapSecondFlags;
    ULONG SixtySecondEnabled : 1;
    ULONG Reserved : 31;
    ULONG NtGlobalFlag2;
};

typedef struct _PEB64 {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR IsLongPathAwareProcess : 1;
    UCHAR Padding0[4];
    ULONG64 Mutant;
    ULONG64 ImageBaseAddress;
    ULONG64 Ldr;
    ULONG64 ProcessParameters;
    ULONG64 SubSystemData;
    ULONG64 ProcessHeap;
    ULONG64 FastPebLock;
    ULONG64 AtlThunkSListPtr;
    ULONG64 IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ProcessPreviouslyThrottled : 1;
    ULONG ProcessCurrentlyThrottled : 1;
    ULONG ProcessImagesHotPatched : 1;
    ULONG ReservedBits0 : 24;
    UCHAR Padding1[4];
    ULONG64 KernelCallbackTable;
    ULONG64 UserSharedInfoPtr;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    ULONG64 ApiSetMap;
    ULONG TlsExpansionCounter;
    UCHAR Padding2[4];
    ULONG64 TlsBitmap;
    ULONG TlsBitmapBits[2];
    ULONG64 ReadOnlySharedMemoryBase;
    ULONG64 SharedData;
    ULONG64 ReadOnlyStaticServerData;
    ULONG64 AnsiCodePageData;
    ULONG64 OemCodePageData;
    ULONG64 UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG64 HeapSegmentReserve;
    ULONG64 HeapSegmentCommit;
    ULONG64 HeapDeCommitTotalFreeThreshold;
    ULONG64 HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    ULONG64 ProcessHeaps;
    ULONG64 GdiSharedHandleTable;
    ULONG64 ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    UCHAR Padding3[4];
    ULONG64 LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    UCHAR Padding4[4];
    ULONG64 ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[60];
    ULONG64 PostProcessInitRoutine;
    ULONG64 TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    UCHAR Padding5[4];
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    ULONG64 pShimData;
    ULONG64 AppCompatInfo;
    struct _STRING64 CSDVersion;
    ULONG64 ActivationContextData;
    ULONG64 ProcessAssemblyStorageMap;
    ULONG64 SystemDefaultActivationContextData;
    ULONG64 SystemAssemblyStorageMap;
    ULONG64 MinimumStackCommit;
    ULONG64 FlsCallback;
    struct LIST_ENTRY64 FlsListHead;
    ULONG64 FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    ULONG64 WerRegistrationData;
    ULONG64 WerShipAssertPtr;
    ULONG64 pUnused;
    ULONG64 pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    UCHAR Padding6[4];
    ULONG64 CsrServerReadOnlySharedMemoryBase;
    ULONG64 TppWorkerpListLock;
    struct LIST_ENTRY64 TppWorkerpList;
    ULONG64 WaitOnAddressHashTable[128];
    ULONG64 TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    ULONG64 LeapSecondData;
    ULONG LeapSecondFlags;
    ULONG SixtySecondEnabled : 1;
    ULONG Reserved : 31;
    ULONG NtGlobalFlag2;
};

typedef struct _PEBS_DS_SAVE_AREA {
    ULONG64 BtsBufferBase;
    ULONG64 BtsIndex;
    ULONG64 BtsAbsoluteMaximum;
    ULONG64 BtsInterruptThreshold;
    ULONG64 PebsBufferBase;
    ULONG64 PebsIndex;
    ULONG64 PebsAbsoluteMaximum;
    ULONG64 PebsInterruptThreshold;
    ULONG64 PebsCounterReset0;
    ULONG64 PebsCounterReset1;
    ULONG64 PebsCounterReset2;
    ULONG64 PebsCounterReset3;
};

typedef struct _PEB_LDR_DATA {
    ULONG Length;
    UCHAR Initialized;
    PVOID SsHandle;
    struct _LIST_ENTRY InLoadOrderModuleList;
    struct _LIST_ENTRY InMemoryOrderModuleList;
    struct _LIST_ENTRY InInitializationOrderModuleList;
    PVOID EntryInProgress;
    UCHAR ShutdownInProgress;
    PVOID ShutdownThreadId;
};

typedef struct _PENDING_RELATIONS_LIST_ENTRY {
    struct _LIST_ENTRY Link;
    struct _WORK_QUEUE_ITEM WorkItem;
    struct _PNP_DEVICE_EVENT_ENTRY *DeviceEvent;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _RELATION_LIST *RelationsList;
    struct _IRP *EjectIrp;
    enum IRPLOCK Lock;
    ULONG Problem;
    UCHAR ProfileChangingEject;
    UCHAR DisplaySafeRemovalDialog;
    enum _SYSTEM_POWER_STATE LightestSleepState;
    struct DOCK_INTERFACE *DockInterface;
    UCHAR DequeuePending;
    enum _PNP_DEVICE_DELETE_TYPE DeleteType;
};

typedef struct _PEP_ACPI_EXTENDED_ADDRESS {
    enum _PEP_ACPI_RESOURCE_TYPE Type;
    union _PEP_ACPI_RESOURCE_FLAGS Flags;
    UCHAR ResourceFlags;
    UCHAR GeneralFlags;
    UCHAR TypeSpecificFlags;
    UCHAR RevisionId;
    UCHAR Reserved;
    ULONG64 Granularity;
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 TranslationAddress;
    ULONG64 AddressLength;
    ULONG64 TypeAttribute;
    struct _UNICODE_STRING *DescriptorName;
};

typedef struct _PEP_ACPI_GPIO_RESOURCE {
    enum _PEP_ACPI_RESOURCE_TYPE Type;
    union _PEP_ACPI_RESOURCE_FLAGS Flags;
    enum _KINTERRUPT_MODE InterruptType;
    enum _KINTERRUPT_POLARITY InterruptPolarity;
    enum _GPIO_PIN_CONFIG_TYPE PinConfig;
    enum _GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType;
    USHORT DriveStrength;
    USHORT DebounceTimeout;
    PWCHAR PinTable;
    USHORT PinCount;
    UCHAR ResourceSourceIndex;
    struct _UNICODE_STRING *ResourceSourceName;
    PUCHAR VendorData;
    USHORT VendorDataLength;
};

typedef struct _PEP_ACPI_INTERRUPT_RESOURCE {
    enum _PEP_ACPI_RESOURCE_TYPE Type;
    enum _KINTERRUPT_MODE InterruptType;
    enum _KINTERRUPT_POLARITY InterruptPolarity;
    union _PEP_ACPI_RESOURCE_FLAGS Flags;
    UCHAR Count;
    PULONG Pins;
};

typedef struct _PEP_ACPI_IO_MEMORY_RESOURCE {
    enum _PEP_ACPI_RESOURCE_TYPE Type;
    UCHAR Information;
    union _LARGE_INTEGER MinimumAddress;
    union _LARGE_INTEGER MaximumAddress;
    ULONG Alignment;
    ULONG Length;
};

typedef struct _PEP_ACPI_SPB_I2C_RESOURCE {
    struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
    ULONG ConnectionSpeed;
    USHORT SlaveAddress;
};

typedef struct _PEP_ACPI_SPB_RESOURCE {
    enum _PEP_ACPI_RESOURCE_TYPE Type;
    union _PEP_ACPI_RESOURCE_FLAGS Flags;
    USHORT TypeSpecificFlags;
    UCHAR ResourceSourceIndex;
    struct _UNICODE_STRING *ResourceSourceName;
    PCHAR VendorData;
    USHORT VendorDataLength;
};

typedef struct _PEP_ACPI_SPB_SPI_RESOURCE {
    struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
    ULONG ConnectionSpeed;
    UCHAR DataBitLength;
    UCHAR Phase;
    UCHAR Polarity;
    USHORT DeviceSelection;
};

typedef struct _PEP_ACPI_SPB_UART_RESOURCE {
    struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
    ULONG BaudRate;
    USHORT RxBufferSize;
    USHORT TxBufferSize;
    UCHAR Parity;
    UCHAR LinesInUse;
};

typedef struct _PEP_CRASHDUMP_INFORMATION {
    struct PEPHANDLE__ *DeviceHandle;
    PVOID DeviceContext;
};

typedef struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE {
    struct POHANDLE__ *DeviceHandle;
    ULONG CompletionFlags;
    LONG MethodStatus;
    PVOID CompletionContext;
    ULONG64 OutputArgumentSize;
    struct _ACPI_METHOD_ARGUMENT_V1 *OutputArguments;
};

typedef struct _PEP_WORK_ACPI_NOTIFY {
    struct POHANDLE__ *DeviceHandle;
    ULONG NotifyCode;
};

typedef struct _PEP_WORK_ACTIVE_COMPLETE {
    struct POHANDLE__ *DeviceHandle;
    ULONG Component;
};

typedef struct _PEP_WORK_COMPLETE_IDLE_STATE {
    struct POHANDLE__ *DeviceHandle;
    ULONG Component;
};

typedef struct _PEP_WORK_COMPLETE_PERF_STATE {
    struct POHANDLE__ *DeviceHandle;
    ULONG Component;
    UCHAR Succeeded;
};

typedef struct _PEP_WORK_DEVICE_IDLE {
    struct POHANDLE__ *DeviceHandle;
    UCHAR IgnoreIdleTimeout;
};

typedef struct _PEP_WORK_DEVICE_POWER {
    struct POHANDLE__ *DeviceHandle;
    UCHAR PowerRequired;
};

typedef struct _PEP_WORK_IDLE_STATE {
    struct POHANDLE__ *DeviceHandle;
    ULONG Component;
    ULONG State;
};

typedef struct _PEP_WORK_INFORMATION {
    enum _PEP_WORK_TYPE WorkType;
    struct _PEP_WORK_ACTIVE_COMPLETE ActiveComplete;
    struct _PEP_WORK_IDLE_STATE IdleState;
    struct _PEP_WORK_DEVICE_POWER DevicePower;
    struct _PEP_WORK_POWER_CONTROL PowerControl;
    struct _PEP_WORK_DEVICE_IDLE DeviceIdle;
    struct _PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState;
    struct _PEP_WORK_COMPLETE_PERF_STATE CompletePerfState;
    struct _PEP_WORK_ACPI_NOTIFY AcpiNotify;
    struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete;
};

typedef struct _PEP_WORK_POWER_CONTROL {
    struct POHANDLE__ *DeviceHandle;
    struct _GUID *PowerControlCode;
    PVOID RequestContext;
    PVOID InBuffer;
    ULONG64 InBufferSize;
    PVOID OutBuffer;
    ULONG64 OutBufferSize;
};

typedef struct _PERFINFO_GROUPMASK {
    ULONG Masks[8];
};

typedef struct _PERFINFO_PPM_STATE_SELECTION {
    ULONG SelectedState;
    ULONG VetoedStates;
    ULONG VetoReason[1];
};

typedef struct _PERF_CONTROL_STATE_SELECTION {
    ULONG64 SelectedState;
    ULONG SelectedPercent;
    ULONG SelectedFrequency;
    ULONG MinPercent;
    ULONG MaxPercent;
    ULONG TolerancePercent;
    ULONG EppPercent;
    ULONG AutonomousActivityWindow;
    UCHAR Autonomous;
    UCHAR InheritFromDomain;
};

typedef struct _PERIODIC_CAPTURE_STATE_GUIDS {
    USHORT ProviderCount;
    struct _GUID *Providers;
};

typedef struct _PF_KERNEL_GLOBALS {
    ULONG64 AccessBufferAgeThreshold;
    struct _EX_RUNDOWN_REF AccessBufferRef;
    struct _KEVENT AccessBufferExistsEvent;
    ULONG AccessBufferMax;
    union _SLIST_HEADER AccessBufferList;
    LONG StreamSequenceNumber;
    ULONG Flags;
    LONG ScenarioPrefetchCount;
};

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR {
    ULONG NumberOfRuns;
    ULONG64 NumberOfPages;
    struct _PHYSICAL_MEMORY_RUN Run[1];
};

typedef struct _PHYSICAL_MEMORY_RUN {
    ULONG64 BasePage;
    ULONG64 PageCount;
};

typedef struct _PI_BUS_EXTENSION {
    ULONG Flags;
    UCHAR NumberCSNs;
    PUCHAR ReadDataPort;
    UCHAR DataPortMapped;
    PUCHAR AddressPort;
    UCHAR AddrPortMapped;
    PUCHAR CommandPort;
    UCHAR CmdPortMapped;
    ULONG NextSlotNumber;
    struct _SINGLE_LIST_ENTRY DeviceList;
    struct _SINGLE_LIST_ENTRY CardList;
    struct _DEVICE_OBJECT *PhysicalBusDevice;
    struct _DEVICE_OBJECT *FunctionalBusDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    ULONG BusNumber;
    enum _SYSTEM_POWER_STATE SystemPowerState;
    enum _DEVICE_POWER_STATE DevicePowerState;
};

typedef struct _PI_RESOURCE_ARBITER_ENTRY {
    struct _LIST_ENTRY DeviceArbiterList;
    UCHAR ResourceType;
    struct _ARBITER_INTERFACE *ArbiterInterface;
    struct _DEVICE_NODE *DeviceNode;
    struct _LIST_ENTRY ResourceList;
    struct _LIST_ENTRY BestResourceList;
    struct _LIST_ENTRY BestConfig;
    struct _LIST_ENTRY ActiveArbiterList;
    UCHAR State;
    UCHAR ResourcesChanged;
};

typedef struct _PLATFORM_IDLE_ACCOUNTING {
    ULONG ResetCount;
    ULONG StateCount;
    ULONG DeepSleepCount;
    enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
    ULONG64 StartTime;
    struct _PLATFORM_IDLE_STATE_ACCOUNTING State[1];
};

typedef struct _PLATFORM_IDLE_STATE_ACCOUNTING {
    ULONG CancelCount;
    ULONG FailureCount;
    ULONG SuccessCount;
    ULONG64 MaxTime;
    ULONG64 MinTime;
    ULONG64 TotalTime;
    ULONG InvalidBucketIndex;
    struct _PPM_SELECTION_STATISTICS SelectionStatistics;
    struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
};

typedef struct _PLUGPLAY_EVENT_BLOCK {
    struct _GUID EventGuid;
    enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
    PULONG Result;
    ULONG Flags;
    ULONG TotalSize;
    PVOID DeviceObject;
    union {
        struct {
            struct _GUID ClassGuid;
            WCHAR SymbolicLinkName[1];
        } DeviceClass;
        struct {
            WCHAR DeviceId[1];
        } TargetDevice;
        struct {
            WCHAR DeviceId[1];
        } InstallDevice;
        struct {
            PVOID NotificationStructure;
            WCHAR DeviceId[1];
        } CustomNotification;
        struct {
            PVOID Notification;
        } ProfileNotification;
        struct {
            ULONG NotificationCode;
            ULONG NotificationData;
        } PowerNotification;
        struct {
            enum _PNP_VETO_TYPE VetoType;
            WCHAR DeviceIdVetoNameBuffer[1];
        } VetoNotification;
        struct {
            struct _GUID BlockedDriverGuid;
        } BlockedDriverNotification;
        struct {
            WCHAR ParentId[1];
        } InvalidIDNotification;
        struct {
            struct _GUID PowerSettingGuid;
            ULONG Flags;
            ULONG SessionId;
            ULONG DataLength;
            UCHAR Data[1];
        } PowerSettingNotification;
        struct {
            WCHAR DeviceId[1];
        } PropertyChangeNotification;
        struct {
            WCHAR DeviceId[1];
        } DeviceInstanceNotification;
    } u;
};

typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT {
    ULONG IncludeFailedDevices;
    ULONG DeviceCount;
    struct _DEVICE_OBJECT *DeviceList[1];
};

typedef struct _PNP_DEVICE_ACTION_ENTRY {
    struct _LIST_ENTRY ListEntry;
    struct _DEVICE_OBJECT *DeviceObject;
    enum _PNP_DEVICE_ACTION_REQUEST RequestType;
    UCHAR ReorderingBarrier;
    ULONG64 RequestArgument;
    struct _KEVENT *CompletionEvent;
    PLONG CompletionStatus;
    struct _GUID ActivityId;
    LONG RefCount;
    UCHAR Dequeued;
    struct _EX_PUSH_LOCK CancelLock;
    UCHAR CancelRequested;
};

typedef struct _PNP_DEVICE_COMPLETION_QUEUE {
    struct _LIST_ENTRY DispatchedList;
    ULONG DispatchedCount;
    struct _LIST_ENTRY CompletedList;
    struct _KSEMAPHORE CompletedSemaphore;
    ULONG64 SpinLock;
};

typedef struct _PNP_DEVICE_COMPLETION_REQUEST {
    struct _LIST_ENTRY ListEntry;
    struct _DEVICE_NODE *DeviceNode;
    PVOID Context;
    enum _PNP_DEVNODE_STATE CompletionState;
    ULONG IrpPended;
    LONG Status;
    PVOID Information;
    LONG ReferenceCount;
    struct _FAST_MUTEX PnpDeviceCompletionQueueWatchdogLock;
    struct _PNP_WATCHDOG *Watchdog;
};

typedef struct _PNP_DEVICE_EVENT_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG Argument;
    LONG ArgumentStatus;
    struct _KEVENT *CallerEvent;
    PVOID Callback;
    PVOID Context;
    enum _PNP_VETO_TYPE *VetoType;
    struct _UNICODE_STRING *VetoName;
    ULONG RefCount;
    ULONG Lock;
    UCHAR Cancel;
    struct _PNP_DEVICE_EVENT_ENTRY *Parent;
    struct _GUID ActivityId;
    struct _PNP_WATCHDOG *Watchdog;
    struct _PLUGPLAY_EVENT_BLOCK Data;
};

typedef struct _PNP_DEVICE_EVENT_LIST {
    LONG Status;
    struct _KMUTANT EventQueueMutex;
    struct _FAST_MUTEX Lock;
    struct _LIST_ENTRY List;
};

typedef struct _PNP_REBALANCE_TRACE_CONTEXT {
    ULONG DeviceCount;
    ULONG RebalancePhase;
    enum _PNP_REBALANCE_REASON Reason[2];
    enum _PNP_REBALANCE_FAILURE Failure[2];
    struct _DEVICE_NODE *SubtreeRoot;
    UCHAR SubtreeIncludesRoot;
    struct _DEVICE_NODE *TriggerRoot;
    UCHAR RebalanceDueToDynamicPartitioning;
    ULONG64 BeginTime;
    struct _DEVICE_NODE *VetoNode[2];
    enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON VetoQueryRebalanceReason[2];
    struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext;
};

typedef struct _PNP_REPLACE_PROCESSOR_LIST {
    PULONG64 Affinity;
    ULONG GroupCount;
    ULONG AllocatedCount;
    ULONG Count;
    ULONG ApicIds[1];
};

typedef struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT {
    UCHAR ResourceType;
    ULONG AlternativeCount;
    struct _IO_RESOURCE_DESCRIPTOR *ResourceRequests;
    PVOID ArbiterInstance;
};

typedef struct _PNP_RESOURCE_REQUEST {
    struct _DEVICE_OBJECT *PhysicalDevice;
    ULONG Flags;
    enum _ARBITER_REQUEST_SOURCE AllocationType;
    ULONG Priority;
    ULONG Position;
    struct _IO_RESOURCE_REQUIREMENTS_LIST *ResourceRequirements;
    PVOID ReqList;
    struct _CM_RESOURCE_LIST *ResourceAssignment;
    struct _CM_RESOURCE_LIST *TranslatedResourceAssignment;
    LONG Status;
};

typedef struct _PNP_WATCHDOG {
    ULONG64 WatchdogStart;
    struct _KTIMER WatchdogTimer;
    struct _KDPC WatchdogDpc;
    UCHAR WatchdogEnabled;
    UCHAR WatchdogSecondChance;
    struct _KEVENT WatchdogComplete;
    struct _WORK_QUEUE_ITEM WatchdogWorkItem;
    enum _PNP_WATCHDOG_TYPE WatchdogContextType;
    PVOID WatchdogContext;
};

typedef struct _POOL_DESCRIPTOR {
    enum _POOL_TYPE PoolType;
    struct _FAST_MUTEX PagedLock;
    ULONG64 NonPagedLock;
    LONG RunningAllocs;
    ULONG64 PagesAllocated;
    ULONG64 BigPagesAllocated;
    ULONG64 BytesAllocated;
    LONG RunningDeallocs;
    ULONG64 PagesDeallocated;
    ULONG64 BigPagesDeallocated;
    ULONG64 BytesDeallocated;
    ULONG PoolIndex;
    enum _POOL_TYPE PoolTypeCopy;
    struct _SINGLE_LIST_ENTRY PendingFrees;
    LONG ThreadsProcessingDeferrals;
    LONG PendingFreeDepth;
    struct _LIST_ENTRY ListHeads[256];
};

typedef struct _POOL_HEADER {
    USHORT PreviousSize : 8;
    USHORT PoolIndex : 8;
    USHORT BlockSize : 8;
    USHORT PoolType : 8;
    ULONG Ulong1;
    ULONG PoolTag;
    struct _EPROCESS *ProcessBilled;
    USHORT AllocatorBackTraceIndex;
    USHORT PoolTagHash;
};

typedef struct _POOL_TRACKER_BIG_PAGES {
    ULONG64 Va;
    ULONG Key;
    ULONG Pattern : 8;
    ULONG PoolType : 12;
    ULONG SlushSize : 12;
    ULONG64 NumberOfBytes;
};

typedef struct _POOL_TRACKER_TABLE {
    LONG Key;
    ULONG64 NonPagedBytes;
    ULONG64 NonPagedAllocs;
    ULONG64 NonPagedFrees;
    ULONG64 PagedBytes;
    ULONG64 PagedAllocs;
    ULONG64 PagedFrees;
};

typedef struct _POP_ACTION_TRIGGER {
    enum POWER_POLICY_DEVICE_TYPE Type;
    ULONG Flags;
    struct _POP_TRIGGER_WAIT *Wait;
    struct {
        ULONG PercentLevel;
    } Battery;
    struct {
        ULONG Type;
    } Button;
};

typedef struct _POP_COOLING_EXTENSION {
    struct _LIST_ENTRY Link;
    struct _LIST_ENTRY RequestListHead;
    struct _POP_RW_LOCK Lock;
    struct _DEVICE_OBJECT *DeviceObject;
    PVOID NotificationEntry;
    UCHAR Enabled;
    UCHAR ActiveEngaged;
    UCHAR ThrottleLimit;
    UCHAR UpdatingToCurrent;
    struct _KEVENT *RemovalFlushEvent;
    struct _KEVENT *PnpFlushEvent;
    struct _THERMAL_COOLING_INTERFACE Interface;
};

typedef struct _POP_CURRENT_BROADCAST {
    UCHAR InProgress;
    struct _SYSTEM_POWER_STATE_CONTEXT SystemContext;
    enum POWER_ACTION PowerAction;
    struct _POP_DEVICE_SYS_STATE *DeviceState;
};

typedef struct _POP_DEVICE_SYS_STATE {
    UCHAR IrpMinor;
    enum _SYSTEM_POWER_STATE SystemState;
    ULONG64 SpinLock;
    struct _KTHREAD *Thread;
    struct _KEVENT *AbortEvent;
    struct _KSEMAPHORE *ReadySemaphore;
    struct _KSEMAPHORE *FinishedSemaphore;
    struct _PO_DEVICE_NOTIFY_ORDER Order;
    struct _LIST_ENTRY Pending;
    LONG Status;
    struct _DEVICE_OBJECT *FailedDevice;
    UCHAR Waking;
    UCHAR Cancelled;
    UCHAR IgnoreErrors;
    UCHAR IgnoreNotImplemented;
    UCHAR TimeRefreshLockAcquired;
};

typedef struct _POP_FX_ACCOUNTING {
    ULONG64 Lock;
    UCHAR Active;
    ULONG DripsRequiredState;
    LONG Level;
    LONG64 ActiveStamp;
    struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsActiveTimeAccounting;
    struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsCriticalActiveTimeAccounting;
};

typedef struct _POP_FX_ACTIVE_TIME_ACCOUNTING {
    ULONG64 Total;
    ULONG64 Unattributed;
    ULONG64 Buckets[5];
    ULONG64 PerBucket[5];
};

typedef struct _POP_FX_COMPONENT {
    struct _GUID Id;
    ULONG Index;
    struct _POP_FX_WORK_ORDER WorkOrder;
    struct _POP_FX_DEVICE *Device;
    union _POP_FX_COMPONENT_FLAGS Flags;
    LONG Resident;
    struct _KEVENT ActiveEvent;
    ULONG64 IdleLock;
    LONG IdleConditionComplete;
    LONG IdleStateComplete;
    ULONG64 IdleStamp;
    ULONG CurrentIdleState;
    ULONG IdleStateCount;
    struct _POP_FX_IDLE_STATE *IdleStates;
    ULONG DeepestWakeableIdleState;
    ULONG ProviderCount;
    struct _POP_FX_PROVIDER *Providers;
    ULONG IdleProviderCount;
    ULONG DependentCount;
    struct _POP_FX_DEPENDENT *Dependents;
    struct _POP_FX_ACCOUNTING Accounting;
    struct _POP_FX_PERF_INFO *Performance;
};

typedef struct _POP_FX_DEPENDENT {
    ULONG Index;
    ULONG ProviderIndex;
};

typedef struct _POP_FX_DEVICE {
    struct _LIST_ENTRY Link;
    struct _IRP *Irp;
    struct _POP_IRP_DATA *IrpData;
    union _POP_FX_DEVICE_STATUS Status;
    LONG PowerReqCall;
    LONG PowerNotReqCall;
    struct _DEVICE_NODE *DevNode;
    struct PEPHANDLE__ *DpmContext;
    struct _POP_FX_PLUGIN *Plugin;
    struct PEPHANDLE__ *PluginHandle;
    struct _POP_FX_PLUGIN *AcpiPlugin;
    struct PEPHANDLE__ *AcpiPluginHandle;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *TargetDevice;
    struct _POP_FX_DRIVER_CALLBACKS Callbacks;
    PVOID DriverContext;
    struct _LIST_ENTRY AcpiLink;
    struct _UNICODE_STRING DeviceId;
    struct _IO_REMOVE_LOCK RemoveLock;
    struct _IO_REMOVE_LOCK AcpiRemoveLock;
    struct _POP_FX_WORK_ORDER WorkOrder;
    ULONG64 IdleLock;
    struct _KTIMER IdleTimer;
    struct _KDPC IdleDpc;
    ULONG64 IdleTimeout;
    ULONG64 IdleStamp;
    struct _DEVICE_OBJECT *NextIrpDeviceObject[2];
    union _POWER_STATE NextIrpPowerState[2];
    PVOID NextIrpCallerCompletion[2];
    PVOID NextIrpCallerContext[2];
    struct _KEVENT IrpCompleteEvent;
    PUCHAR PowerOnDumpDeviceCallback;
    struct _POP_FX_ACCOUNTING Accounting;
    ULONG Flags;
    ULONG ComponentCount;
    struct _POP_FX_COMPONENT **Components;
    ULONG LogEntries;
    struct _POP_FX_LOG_ENTRY *Log;
    LONG LogIndex;
    struct _DRIVER_OBJECT *DripsWatchdogDriverObject;
    struct _POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext;
    ULONG DirectedTimeout;
    struct _POP_FX_WORK_ORDER DirectedWorkOrder;
    LONG DirectedTransitionCallCount;
    PVOID DirectedTransitionCompletionContext;
    struct _UNICODE_STRING FriendlyName;
};

typedef struct _POP_FX_DRIPS_WATCHDOG_CONTEXT {
    struct _LIST_ENTRY Link;
    ULONG ComponentIndex;
    struct _DEVICE_NODE **ChildDevices;
    ULONG ChildDeviceCount;
};

typedef struct _POP_FX_DRIVER_CALLBACKS {
    PVOID ComponentActive;
    PVOID ComponentIdle;
    PVOID ComponentIdleState;
    PVOID DevicePowerRequired;
    PVOID DevicePowerNotRequired;
    PLONG PowerControl;
    PVOID ComponentCriticalTransition;
    PVOID DripsWatchdogCallback;
    PVOID DirectedPowerTransitionCallback;
};

typedef struct _POP_FX_IDLE_STATE {
    ULONG64 TransitionLatency;
    ULONG64 ResidencyRequirement;
    ULONG NominalPower;
};

typedef struct _POP_FX_LOG_ENTRY {
    ULONG64 Timestamp;
    UCHAR Operation;
    UCHAR Component;
    USHORT Processor;
    USHORT Process;
    USHORT Thread;
    ULONG64 Information;
};

typedef struct _POP_FX_PERF_INFO {
    struct _POP_FX_COMPONENT *Component;
    struct _KEVENT CompletedEvent;
    PVOID ComponentPerfState;
    union _POP_FX_PERF_FLAGS Flags;
    struct _PO_FX_PERF_STATE_CHANGE *LastChange;
    ULONG LastChangeCount;
    ULONG64 LastChangeStamp;
    UCHAR LastChangeNominal;
    UCHAR PepRegistered;
    UCHAR QueryOnIdleStates;
    PVOID RequestDriverContext;
    struct _POP_FX_WORK_ORDER WorkOrder;
    ULONG SetsCount;
    struct _POP_FX_PERF_SET *Sets;
};

typedef struct _POP_FX_PERF_SET {
    struct _PO_FX_COMPONENT_PERF_SET *PerfSet;
    ULONG64 CurrentPerf;
    ULONG64 CurrentPerfStamp;
    UCHAR CurrentPerfNominal;
};

typedef struct _POP_FX_PLUGIN {
    struct _LIST_ENTRY Link;
    ULONG Version;
    ULONG64 Flags;
    struct _KQUEUE WorkQueue;
    PUCHAR AcceptDeviceNotification;
    PUCHAR AcceptProcessorNotification;
    PUCHAR AcceptAcpiNotification;
    ULONG WorkOrderCount;
    struct _POP_FX_WORK_ORDER WorkOrders[1];
};

typedef struct _POP_FX_PROVIDER {
    ULONG Index;
    UCHAR Activating;
};

typedef struct _POP_FX_WORK_ORDER {
    struct _WORK_QUEUE_ITEM WorkItem;
    LONG WorkCount;
    PVOID Context;
    struct _POP_FX_WORK_ORDER_WATCHDOG_INFO *WatchdogTimerInfo;
};

typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO {
    struct _LIST_ENTRY Link;
    struct _KTIMER Timer;
    struct _KDPC Dpc;
    struct _POP_FX_WORK_ORDER *WorkOrder;
    struct _PEP_WORK_INFORMATION *CurrentWorkInfo;
    ULONG64 WatchdogStart;
    struct _KTHREAD *WorkerThread;
};

typedef struct _POP_HIBER_CONTEXT {
    UCHAR Reset;
    UCHAR HiberFlags;
    UCHAR WroteHiberFile;
    UCHAR KernelPhaseVerificationActive;
    UCHAR InitializationFinished;
    LONG NextTableLockHeld;
    LONG BootPhaseFinishedBarrier;
    LONG KernelResumeFinishedBarrier;
    LONG HvCaptureReadyBarrier;
    LONG HvCaptureCompletedBarrier;
    UCHAR MapFrozen;
    struct _RTL_BITMAP DiscardMap;
    struct _RTL_BITMAP KernelPhaseMap;
    struct _RTL_BITMAP BootPhaseMap;
    struct _LIST_ENTRY ClonedRanges;
    ULONG ClonedRangeCount;
    ULONG64 ClonedPageCount;
    struct _RTL_BITMAP *CurrentMap;
    struct _LIST_ENTRY *NextCloneRange;
    ULONG64 NextPreserve;
    struct _MDL *LoaderMdl;
    struct _MDL *AllocatedMdl;
    ULONG64 PagesOut;
    PVOID IoPages;
    ULONG IoPagesCount;
    PVOID CurrentMcb;
    struct _DUMP_STACK_CONTEXT *DumpStack;
    struct _KPROCESSOR_STATE *WakeState;
    ULONG IoProgress;
    LONG Status;
    ULONG GraphicsProc;
    struct PO_MEMORY_IMAGE *MemoryImage;
    PULONG PerformanceStats;
    struct _MDL *BootLoaderLogMdl;
    struct _MDL *FirmwareRuntimeInformationMdl;
    PVOID FirmwareRuntimeInformationVa;
    PVOID ResumeContext;
    ULONG ResumeContextPages;
    ULONG SecurePages;
    ULONG ProcessorCount;
    struct _POP_PER_PROCESSOR_CONTEXT *ProcessorContext;
    PCHAR ProdConsBuffer;
    ULONG ProdConsSize;
    ULONG MaxDataPages;
    PVOID ExtraBuffer;
    ULONG64 ExtraBufferSize;
    PVOID ExtraMapVa;
    ULONG64 BitlockerKeyPFN;
    struct _POP_IO_INFO IoInfo;
    PWCHAR IoChecksums;
    ULONG64 IoChecksumsSize;
    ULONG HardwareConfigurationSignature;
    UCHAR IumEnabled;
    UCHAR SecureBoot;
};

typedef struct _POP_IO_INFO {
    struct _MDL *DumpMdl;
    enum _POP_IO_STATUS IoStatus;
    ULONG64 IoStartCount;
    ULONG64 IoBytesCompleted;
    ULONG64 IoBytesInProgress;
    ULONG64 RequestSize;
    union _LARGE_INTEGER IoLocation;
    ULONG64 FileOffset;
    PVOID Buffer;
    UCHAR AsyncCapable;
    ULONG64 BytesToRead;
    ULONG Pages;
    ULONG64 HighestChecksumIndex;
    USHORT PreviousChecksum;
};

typedef struct _POP_IRP_DATA {
    struct _LIST_ENTRY Link;
    struct _IRP *Irp;
    struct _DEVICE_OBJECT *Pdo;
    struct _DEVICE_OBJECT *TargetDevice;
    struct _DEVICE_OBJECT *CurrentDevice;
    ULONG64 WatchdogStart;
    struct _KTIMER WatchdogTimer;
    struct _KDPC WatchdogDpc;
    UCHAR MinorFunction;
    enum _POWER_STATE_TYPE PowerStateType;
    union _POWER_STATE PowerState;
    UCHAR WatchdogEnabled;
    struct _POP_FX_DEVICE *FxDevice;
    UCHAR SystemTransition;
    UCHAR NotifyPEP;
    LONG IrpSequenceID;
    struct {
        PVOID CallerCompletion;
        PVOID CallerContext;
        struct _DEVICE_OBJECT *CallerDevice;
        UCHAR SystemWake;
    } Device;
    struct {
        struct _PO_DEVICE_NOTIFY *NotifyDevice;
        UCHAR FxDeviceActivated;
    } System;
};

typedef struct _POP_IRP_WORKER_ENTRY {
    struct _LIST_ENTRY Link;
    struct _ETHREAD *Thread;
    struct _IRP *Irp;
    struct _DEVICE_OBJECT *Device;
    UCHAR Static;
};

typedef struct _POP_PER_PROCESSOR_CONTEXT {
    PUCHAR UncompressedData;
    PVOID MappingVa;
    PVOID XpressEncodeWorkspace;
    PUCHAR CompressedDataBuffer;
    ULONG64 CopyTicks;
    ULONG64 CompressTicks;
    ULONG64 BytesCopied;
    ULONG64 PagesProcessed;
    ULONG64 DecompressTicks;
    ULONG64 ResumeCopyTicks;
    ULONG64 SharedBufferTicks;
    ULONG64 DecompressTicksByMethod[2];
    ULONG64 DecompressSizeByMethod[2];
    ULONG CompressCount;
    ULONG HuffCompressCount;
};

typedef struct _POP_POLICY_DEVICE {
    struct _LIST_ENTRY Link;
    enum POWER_POLICY_DEVICE_TYPE DeviceType;
    PVOID Notification;
    struct _UNICODE_STRING Name;
    struct _DEVICE_OBJECT *Device;
    struct _IRP *Irp;
};

typedef struct _POP_POWER_ACTION {
    UCHAR Updates;
    UCHAR State;
    UCHAR Shutdown;
    enum POWER_ACTION Action;
    enum _SYSTEM_POWER_STATE LightestState;
    ULONG Flags;
    LONG Status;
    enum POWER_POLICY_DEVICE_TYPE DeviceType;
    ULONG DeviceTypeFlags;
    UCHAR IrpMinor;
    UCHAR Waking;
    enum _SYSTEM_POWER_STATE SystemState;
    enum _SYSTEM_POWER_STATE NextSystemState;
    enum _SYSTEM_POWER_STATE EffectiveSystemState;
    enum _SYSTEM_POWER_STATE CurrentSystemState;
    struct _POP_SHUTDOWN_BUG_CHECK *ShutdownBugCode;
    struct _POP_DEVICE_SYS_STATE *DevState;
    struct _POP_HIBER_CONTEXT *HiberContext;
    ULONG64 WakeTime;
    ULONG64 SleepTime;
    ULONG64 WakeFirstUnattendedTime;
    enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;
    struct {
        ULONG64 RequestedTime;
        ULONG64 ProgrammedTime;
        struct _DIAGNOSTIC_BUFFER *TimerInfo;
    } WakeAlarm[3];
    UCHAR WakeAlarmPaused;
    ULONG64 WakeAlarmLastTime;
    ULONG64 DozeDeferralStartTime;
    struct SYSTEM_POWER_CAPABILITIES FilteredCapabilities;
};

typedef struct _POP_POWER_SETTING_VALUES {
    ULONG StructureSize;
    struct _SYSTEM_POWER_POLICY PopPolicy;
    enum SYSTEM_POWER_CONDITION CurrentAcDcPowerState;
    UCHAR AwayModeEnabled;
    UCHAR AwayModeEngaged;
    UCHAR AwayModePolicyAllowed;
    LONG AwayModeIgnoreUserPresent;
    LONG AwayModeIgnoreAction;
    UCHAR DisableFastS4;
    UCHAR DisableStandbyStates;
    ULONG UnattendSleepTimeout;
    ULONG DiskIgnoreTime;
    ULONG DeviceIdlePolicy;
    ULONG VideoDimTimeout;
    ULONG VideoNormalBrightness;
    ULONG VideoDimBrightness;
    ULONG AlsOffset;
    ULONG AlsEnabled;
    ULONG EsBrightness;
    UCHAR SwitchShutdownForced;
    ULONG SystemCoolingPolicy;
    UCHAR MediaBufferingEngaged;
    UCHAR AudioActivity;
    UCHAR FullscreenVideoPlayback;
    ULONG EsBatteryThreshold;
    UCHAR EsAggressive;
    UCHAR EsUserAwaySetting;
    ULONG ConnectivityInStandby;
    ULONG DisconnectedStandbyMode;
    ULONG UserPresencePredictionEnabled;
    UCHAR AirplaneModeEnabled;
    UCHAR BluetoothDeviceCharging;
};

typedef struct _POP_PPM_PROFILE {
    PWCHAR Name;
    UCHAR Id;
    struct _GUID Guid;
    ULONG Flags;
    UCHAR Priority;
    struct _PPM_ENGINE_SETTINGS Settings[2];
    ULONG64 StartTime;
    ULONG64 Count;
    ULONG64 MaxDuration;
    ULONG64 MinDuration;
    ULONG64 TotalDuration;
};

typedef struct _POP_RW_LOCK {
    struct _EX_PUSH_LOCK Lock;
    struct _KTHREAD *Thread;
};

typedef struct _POP_SHUTDOWN_BUG_CHECK {
    struct _ETHREAD *InitiatingThread;
    struct _EPROCESS *InitiatingProcess;
    PVOID ThreadId;
    PVOID ProcessId;
    ULONG Code;
    ULONG64 Parameter1;
    ULONG64 Parameter2;
    ULONG64 Parameter3;
    ULONG64 Parameter4;
};

typedef struct _POP_THERMAL_TELEMETRY_TRACKER {
    UCHAR AccountingDisabled;
    ULONG64 LastPassiveUpdateTime;
    ULONG64 TotalPassiveTime[21];
    ULONG64 PassiveTimeSnap[21];
};

typedef struct _POP_THERMAL_ZONE {
    struct _POP_POLICY_DEVICE PolicyDevice;
    struct _LIST_ENTRY Link;
    enum POWER_POLICY_DEVICE_TYPE DeviceType;
    PVOID Notification;
    struct _UNICODE_STRING Name;
    struct _DEVICE_OBJECT *Device;
    struct _IRP *Irp;
    UCHAR State;
    UCHAR Flags;
    UCHAR Removing;
    UCHAR Mode;
    UCHAR PendingMode;
    UCHAR ActivePoint;
    UCHAR PendingActivePoint;
    UCHAR Critical;
    UCHAR ThermalStandby;
    UCHAR OverThrottled;
    LONG HighPrecisionThrottle;
    LONG Throttle;
    LONG PendingThrottle;
    ULONG ThrottleReasons;
    ULONG64 LastPassiveTime;
    ULONG SampleRate;
    ULONG LastTemp;
    struct _THERMAL_INFORMATION_EX Info;
    struct _THERMAL_POLICY Policy;
    UCHAR PolicyDriver;
    ULONG PollingRate;
    ULONG64 LastTemperatureTime;
    ULONG64 LastActiveStartTime;
    ULONG64 LastPassiveStartTime;
    struct _WORK_QUEUE_ITEM WorkItem;
    struct _KTIMER2 ZoneUpdateTimer;
    struct _POP_RW_LOCK Lock;
    struct _KEVENT ZoneStopped;
    struct _KEVENT TemperatureUpdated;
    ULONG InstanceId;
    struct _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker;
    struct _UNICODE_STRING Description;
};

typedef struct _POP_TRIGGER_WAIT {
    struct _KEVENT Event;
    LONG Status;
    struct _LIST_ENTRY Link;
    struct _POP_ACTION_TRIGGER *Trigger;
};

typedef struct _PORT_MESSAGE {
    union {
        struct {
            SHORT DataLength;
            SHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
    union {
        struct {
            SHORT Type;
            SHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    struct _CLIENT_ID ClientId;
    DOUBLE DoNotUseThisField;
    ULONG MessageId;
    ULONG64 ClientViewSize;
    ULONG CallbackId;
};

typedef struct _PORT_MESSAGE32 {
    union {
        struct {
            SHORT DataLength;
            SHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
    union {
        struct {
            SHORT Type;
            SHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    struct _CLIENT_ID32 ClientId;
    DOUBLE DoNotUseThisField;
    ULONG MessageId;
    ULONG ClientViewSize;
    ULONG CallbackId;
};

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
};

typedef struct _PO_DEVICE_NOTIFY {
    struct _LIST_ENTRY Link;
    struct _LIST_ENTRY PowerChildren;
    struct _LIST_ENTRY PowerParents;
    struct _DEVICE_OBJECT *TargetDevice;
    UCHAR OrderLevel;
    struct _DEVICE_OBJECT *DeviceObject;
    PWCHAR DeviceName;
    PWCHAR DriverName;
    ULONG ChildCount;
    ULONG ActiveChild;
    ULONG ParentCount;
    ULONG ActiveParent;
};

typedef struct _PO_DEVICE_NOTIFY_ORDER {
    UCHAR Locked;
    struct _DEVICE_OBJECT **WarmEjectPdoPointer;
    struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];
    ULONG Flags;
};

typedef struct _PO_DIAG_STACK_RECORD {
    ULONG StackDepth;
    PVOID Stack[1];
};

typedef struct _PO_DIRECTED_DRIPS_STATE {
    struct _LIST_ENTRY QueueLink;
    struct _LIST_ENTRY VisitedQueueLink;
    ULONG Flags;
    ULONG CachedFlags;
    ULONG DeviceUsageCount;
    PVOID Diagnostic;
};

typedef struct _PO_FX_COMPONENT_PERF_SET {
    struct _UNICODE_STRING Name;
    ULONG64 Flags;
    enum _PO_FX_PERF_STATE_UNIT Unit;
    enum _PO_FX_PERF_STATE_TYPE Type;
    struct {
        ULONG Count;
        struct _PO_FX_PERF_STATE *States;
    } Discrete;
    struct {
        ULONG64 Minimum;
        ULONG64 Maximum;
    } Range;
};

typedef struct _PO_FX_PERF_STATE {
    ULONG64 Value;
    PVOID Context;
};

typedef struct _PO_FX_PERF_STATE_CHANGE {
    ULONG Set;
    ULONG StateIndex;
    ULONG64 StateValue;
};

typedef struct _PO_HIBER_PERF {
    ULONG64 HiberIoTicks;
    ULONG64 HiberIoCpuTicks;
    ULONG64 HiberInitTicks;
    ULONG64 HiberHiberFileTicks;
    ULONG64 HiberCompressTicks;
    ULONG64 HiberSharedBufferTicks;
    ULONG64 HiberChecksumTicks;
    ULONG64 HiberChecksumIoTicks;
    union _LARGE_INTEGER TotalHibernateTime;
    union _LARGE_INTEGER HibernateCompleteTimestamp;
    ULONG POSTTime;
    ULONG ResumeBootMgrTime;
    ULONG BootmgrUserInputTime;
    ULONG64 ResumeAppTicks;
    ULONG64 ResumeAppStartTimestamp;
    ULONG64 ResumeLibraryInitTicks;
    ULONG64 ResumeInitTicks;
    ULONG64 ResumeRestoreImageStartTimestamp;
    ULONG64 ResumeHiberFileTicks;
    ULONG64 ResumeIoTicks;
    ULONG64 ResumeDecompressTicks;
    ULONG64 ResumeAllocateTicks;
    ULONG64 ResumeUserInOutTicks;
    ULONG64 ResumeMapTicks;
    ULONG64 ResumeUnmapTicks;
    ULONG64 ResumeChecksumTicks;
    ULONG64 ResumeChecksumIoTicks;
    ULONG64 ResumeKernelSwitchTimestamp;
    ULONG64 CyclesPerMs;
    ULONG64 WriteLogDataTimestamp;
    ULONG64 KernelReturnFromHandler;
    ULONG64 TimeStampCounterAtSwitchTime;
    ULONG64 HalTscOffset;
    ULONG64 HvlTscOffset;
    ULONG64 SleeperThreadEnd;
    ULONG64 PostCmosUpdateTimestamp;
    ULONG64 KernelReturnSystemPowerStateTimestamp;
    ULONG64 IoBoundedness;
    ULONG64 KernelDecompressTicks;
    ULONG64 KernelIoTicks;
    ULONG64 KernelCopyTicks;
    ULONG64 ReadCheckCount;
    ULONG64 KernelInitTicks;
    ULONG64 KernelResumeHiberFileTicks;
    ULONG64 KernelIoCpuTicks;
    ULONG64 KernelSharedBufferTicks;
    ULONG64 KernelAnimationTicks;
    ULONG64 KernelChecksumTicks;
    ULONG64 KernelChecksumIoTicks;
    union _LARGE_INTEGER AnimationStart;
    union _LARGE_INTEGER AnimationStop;
    ULONG DeviceResumeTime;
    ULONG64 SecurePagesProcessed;
    ULONG64 BootPagesProcessed;
    ULONG64 KernelPagesProcessed;
    ULONG64 BootBytesWritten;
    ULONG64 KernelBytesWritten;
    ULONG64 BootPagesWritten;
    ULONG64 KernelPagesWritten;
    ULONG64 BytesWritten;
    ULONG PagesWritten;
    ULONG FileRuns;
    ULONG NoMultiStageResumeReason;
    ULONG MaxHuffRatio;
    ULONG64 AdjustedTotalResumeTime;
    ULONG64 ResumeCompleteTimestamp;
};

typedef struct _PO_IRP_MANAGER {
    struct _PO_IRP_QUEUE DeviceIrpQueue;
    struct _PO_IRP_QUEUE SystemIrpQueue;
};

typedef struct _PO_IRP_QUEUE {
    struct _IRP *CurrentIrp;
    struct _IRP *PendingIrpList;
};

typedef struct _PO_NOTIFY_ORDER_LEVEL {
    ULONG DeviceCount;
    ULONG ActiveCount;
    struct _LIST_ENTRY WaitSleep;
    struct _LIST_ENTRY ReadySleep;
    struct _LIST_ENTRY ReadyS0;
    struct _LIST_ENTRY WaitS0;
};

typedef struct _PO_PROCESS_ENERGY_CONTEXT {
};

typedef struct _PPC_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _PPM_CONCURRENCY_ACCOUNTING {
    ULONG64 Lock;
    ULONG Processors;
    ULONG ActiveProcessors;
    ULONG64 LastUpdateTime;
    ULONG64 TotalTime;
    ULONG64 AccumulatedTime[1];
};

typedef struct _PPM_COORDINATED_SELECTION {
    ULONG MaximumStates;
    ULONG SelectedStates;
    ULONG DefaultSelection;
    PULONG Selection;
};

typedef struct _PPM_ENGINE_SETTINGS {
    union _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];
    UCHAR ThrottlingPolicy;
    ULONG PerfTimeCheck;
    UCHAR PerfHistoryCount[2];
    UCHAR PerfMinPolicy[2];
    UCHAR PerfMaxPolicy[2];
    UCHAR PerfDecreaseTime[2];
    UCHAR PerfIncreaseTime[2];
    UCHAR PerfDecreasePolicy[2];
    UCHAR PerfIncreasePolicy[2];
    UCHAR PerfDecreaseThreshold[2];
    UCHAR PerfIncreaseThreshold[2];
    ULONG PerfFrequencyCap[2];
    ULONG PerfBoostPolicy;
    ULONG PerfBoostMode;
    ULONG PerfReductionTolerance;
    ULONG EnergyPerfPreference[2];
    ULONG AutonomousActivityWindow;
    UCHAR AutonomousPreference;
    UCHAR LatencyHintPerf[2];
    UCHAR LatencyHintUnpark[2];
    ULONG ResponsivenessDisableThreshold[2];
    ULONG ResponsivenessEnableThreshold[2];
    UCHAR ResponsivenessDisableTime[2];
    UCHAR ResponsivenessEnableTime[2];
    ULONG ResponsivenessEppCeiling[2];
    ULONG ResponsivenessPerfFloor[2];
    UCHAR DutyCycling;
    UCHAR ParkingPerfState[2];
    UCHAR DistributeUtility;
    UCHAR CoreParkingOverUtilizationThreshold;
    UCHAR CoreParkingConcurrencyThreshold;
    UCHAR CoreParkingHeadroomThreshold;
    UCHAR CoreParkingDistributionThreshold;
    UCHAR CoreParkingDecreasePolicy;
    UCHAR CoreParkingIncreasePolicy;
    ULONG CoreParkingDecreaseTime;
    ULONG CoreParkingIncreaseTime;
    UCHAR CoreParkingMinCores[2];
    UCHAR CoreParkingMaxCores[2];
    UCHAR AllowScaling;
    UCHAR IdleDisabled;
    ULONG IdleTimeCheck;
    UCHAR IdleDemotePercent;
    UCHAR IdlePromotePercent;
    UCHAR IdleStateMax;
    UCHAR HeteroDecreaseTime;
    UCHAR HeteroIncreaseTime;
    UCHAR HeteroDecreaseThreshold[1280];
    UCHAR HeteroIncreaseThreshold[1280];
    UCHAR Class0FloorPerformance;
    UCHAR Class1InitialPerformance;
    enum _KHETERO_CPU_POLICY ThreadPolicies[2];
};

typedef struct _PPM_FFH_THROTTLE_STATE_INFO {
    UCHAR EnableLogging;
    ULONG MismatchCount;
    UCHAR Initialized;
    ULONG64 LastValue;
    union _LARGE_INTEGER LastLogTickCount;
};

typedef struct _PPM_IDLE_STATE {
    struct _KAFFINITY_EX DomainMembers;
    struct _UNICODE_STRING Name;
    ULONG Latency;
    ULONG BreakEvenDuration;
    ULONG Power;
    ULONG StateFlags;
    struct _PPM_VETO_ACCOUNTING VetoAccounting;
    UCHAR StateType;
    UCHAR InterruptsEnabled;
    UCHAR Interruptible;
    UCHAR ContextRetained;
    UCHAR CacheCoherent;
    UCHAR WakesSpuriously;
    UCHAR PlatformOnly;
    UCHAR NoCState;
};

typedef struct _PPM_IDLE_STATES {
    UCHAR InterfaceVersion;
    UCHAR IdleOverride;
    UCHAR EstimateIdleDuration;
    UCHAR ExitLatencyTraceEnabled;
    UCHAR NonInterruptibleTransition;
    UCHAR UnaccountedTransition;
    UCHAR IdleDurationLimited;
    UCHAR IdleCheckLimited;
    UCHAR StrictVetoBias;
    ULONG ExitLatencyCountdown;
    ULONG TargetState;
    ULONG ActualState;
    ULONG OldState;
    ULONG OverrideIndex;
    ULONG ProcessorIdleCount;
    ULONG Type;
    ULONG64 LevelId;
    USHORT ReasonFlags;
    ULONG64 InitiateWakeStamp;
    LONG PreviousStatus;
    ULONG PreviousCancelReason;
    struct _KAFFINITY_EX PrimaryProcessorMask;
    struct _KAFFINITY_EX SecondaryProcessorMask;
    PVOID IdlePrepare;
    PLONG IdlePreExecute;
    PLONG IdleExecute;
    PULONG IdlePreselect;
    PULONG IdleTest;
    PULONG IdleAvailabilityCheck;
    PVOID IdleComplete;
    PVOID IdleCancel;
    PUCHAR IdleIsHalted;
    PUCHAR IdleInitiateWake;
    struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;
    struct _KAFFINITY_EX DeepIdleSnapshot;
    struct _PERFINFO_PPM_STATE_SELECTION *Tracing;
    struct _PERFINFO_PPM_STATE_SELECTION *CoordinatedTracing;
    struct _PPM_SELECTION_MENU ProcessorMenu;
    struct _PPM_SELECTION_MENU CoordinatedMenu;
    struct _PPM_COORDINATED_SELECTION CoordinatedSelection;
    struct _PPM_IDLE_STATE State[1];
};

typedef struct _PPM_PLATFORM_STATE {
    ULONG64 LevelId;
    ULONG Latency;
    ULONG BreakEvenDuration;
    struct _PPM_VETO_ACCOUNTING VetoAccounting;
    UCHAR TransitionDebugger;
    UCHAR Platform;
    ULONG DependencyListCount;
    struct _KAFFINITY_EX Processors;
    struct _UNICODE_STRING Name;
    struct _PPM_SELECTION_DEPENDENCY *DependencyLists;
    union _PPM_COORDINATED_SYNCHRONIZATION Synchronization;
    ULONG64 EnterTime;
    LONG RefCount;
    UCHAR CacheAlign0[64];
};

typedef struct _PPM_PLATFORM_STATES {
    ULONG StateCount;
    ULONG InterfaceVersion;
    ULONG ProcessorCount;
    UCHAR CoordinatedInterface;
    PULONG IdleTest;
    PLONG IdlePreExecute;
    PVOID IdleComplete;
    PLONG QueryPlatformStateResidency;
    struct _PLATFORM_IDLE_ACCOUNTING *Accounting;
    UCHAR DeepSleepEnabled;
    struct _PPM_PLATFORM_STATE State[1];
};

typedef struct _PPM_SELECTION_DEPENDENCY {
    ULONG Processor;
    struct _PPM_SELECTION_MENU Menu;
};

typedef struct _PPM_SELECTION_MENU {
    ULONG Count;
    struct _PPM_SELECTION_MENU_ENTRY *Entries;
};

typedef struct _PPM_SELECTION_MENU_ENTRY {
    UCHAR StrictDependency;
    UCHAR InitiatingState;
    UCHAR DependentState;
    ULONG StateIndex;
    ULONG Dependencies;
    struct _PPM_SELECTION_DEPENDENCY *DependencyList;
};

typedef struct _PPM_SELECTION_STATISTICS {
    ULONG64 SelectedCount;
    ULONG64 VetoCount;
    ULONG64 PreVetoCount;
    ULONG64 WrongProcessorCount;
    ULONG64 LatencyCount;
    ULONG64 IdleDurationCount;
    ULONG64 DeviceDependencyCount;
    ULONG64 ProcessorDependencyCount;
    ULONG64 PlatformOnlyCount;
    ULONG64 InterruptibleCount;
    ULONG64 LegacyOverrideCount;
    ULONG64 CstateCheckCount;
    ULONG64 NoCStateCount;
    ULONG64 CoordinatedDependencyCount;
    ULONG64 NotClockOwnerCount;
    struct _PPM_VETO_ACCOUNTING *PreVetoAccounting;
};

typedef struct _PPM_VETO_ACCOUNTING {
    LONG VetoPresent;
    struct _LIST_ENTRY VetoListHead;
    UCHAR CsAccountingBlocks;
    UCHAR BlocksDrips;
    ULONG PreallocatedVetoCount;
    struct _PPM_VETO_ENTRY *PreallocatedVetoList;
};

typedef struct _PPM_VETO_ENTRY {
    struct _LIST_ENTRY Link;
    ULONG VetoReason;
    ULONG ReferenceCount;
    ULONG64 HitCount;
    ULONG64 LastActivationTime;
    ULONG64 TotalActiveTime;
    ULONG64 CsActivationTime;
    ULONG64 CsActiveTime;
};

typedef struct _PP_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE *P;
    struct _GENERAL_LOOKASIDE *L;
};

typedef struct _PRIVATE_CACHE_MAP {
    SHORT NodeTypeCode;
    struct _PRIVATE_CACHE_MAP_FLAGS Flags;
    ULONG ReadAheadMask;
    struct _FILE_OBJECT *FileObject;
    union _LARGE_INTEGER FileOffset1;
    union _LARGE_INTEGER BeyondLastByte1;
    union _LARGE_INTEGER FileOffset2;
    union _LARGE_INTEGER BeyondLastByte2;
    ULONG SequentialReadCount;
    ULONG ReadAheadLength;
    union _LARGE_INTEGER ReadAheadOffset;
    union _LARGE_INTEGER ReadAheadBeyondLastByte;
    ULONG64 PrevReadAheadBeyondLastByte;
    ULONG64 ReadAheadSpinLock;
    ULONG PipelinedReadAheadRequestSize;
    ULONG ReadAheadGrowth;
    struct _LIST_ENTRY PrivateLinks;
    PVOID ReadAheadWorkItem;
};

typedef struct _PRIVATE_CACHE_MAP_FLAGS {
    ULONG DontUse : 16;
    ULONG ReadAheadActive : 1;
    ULONG ReadAheadEnabled : 1;
    ULONG PagePriority : 3;
    ULONG PipelineReadAheads : 1;
    ULONG Available : 10;
};

typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[1];
};

typedef struct _PROCESSOR_IDLE_CONSTRAINTS {
    ULONG64 TotalTime;
    ULONG64 IdleTime;
    ULONG64 ExpectedIdleDuration;
    ULONG64 MaxIdleDuration;
    ULONG OverrideState;
    ULONG TimeCheck;
    UCHAR PromotePercent;
    UCHAR DemotePercent;
    UCHAR Parked;
    UCHAR Interruptible;
    UCHAR PlatformIdle;
    UCHAR ExpectedWakeReason;
    UCHAR IdleStateMax;
};

typedef struct _PROCESSOR_IDLE_DEPENDENCY {
    ULONG ProcessorIndex;
    UCHAR ExpectedState;
    UCHAR AllowDeeperStates;
    UCHAR LooseDependency;
};

typedef struct _PROCESSOR_IDLE_PREPARE_INFO {
    PVOID Context;
    struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;
    ULONG DependencyCount;
    ULONG DependencyUsed;
    struct _PROCESSOR_IDLE_DEPENDENCY *DependencyArray;
    ULONG PlatformIdleStateIndex;
    ULONG ProcessorIdleStateIndex;
    ULONG IdleSelectFailureMask;
};

typedef struct _PROCESSOR_NUMBER {
    USHORT Group;
    UCHAR Number;
    UCHAR Reserved;
};

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES {
    ULONG Count;
    struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];
};

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY {
    ULONG64 Residency;
    ULONG64 TransitionCount;
};

typedef struct _PROCESSOR_POWER_STATE {
    struct _PPM_IDLE_STATES *IdleStates;
    struct _PROC_IDLE_ACCOUNTING *IdleAccounting;
    ULONG64 IdleTimeLast;
    ULONG64 IdleTimeTotal;
    ULONG64 IdleTimeEntry;
    ULONG64 IdleTimeExpiration;
    UCHAR NonInterruptibleTransition;
    UCHAR PepWokenTransition;
    UCHAR HvTargetState;
    UCHAR Reserved;
    ULONG TargetIdleState;
    struct _PROC_IDLE_POLICY IdlePolicy;
    union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
    struct _PROC_FEEDBACK PerfFeedback;
    enum _PROC_HYPERVISOR_STATE Hypervisor;
    ULONG LastSysTime;
    ULONG64 WmiDispatchPtr;
    LONG WmiInterfaceEnabled;
    struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
    struct _KDPC PerfActionDpc;
    LONG PerfActionMask;
    struct _PROC_IDLE_SNAP HvIdleCheck;
    struct _PROC_PERF_CHECK *PerfCheck;
    struct _PROC_PERF_DOMAIN *Domain;
    struct _PROC_PERF_CONSTRAINT *PerfConstraint;
    struct _PPM_CONCURRENCY_ACCOUNTING *Concurrency;
    struct _PPM_CONCURRENCY_ACCOUNTING *ClassConcurrency;
    struct _PROC_PERF_LOAD *Load;
    struct _PROC_PERF_HISTORY *PerfHistory;
    UCHAR ArchitecturalEfficiencyClass;
    UCHAR PerformanceSchedulingClass;
    UCHAR EfficiencySchedulingClass;
    UCHAR GuaranteedPerformancePercent;
    UCHAR Parked;
    UCHAR LongPriorQosPeriod;
    USHORT LatestAffinitizedPercent;
    ULONG LatestPerformancePercent;
    ULONG AveragePerformancePercent;
    ULONG RelativePerformance;
    ULONG Utility;
    ULONG AffinitizedUtility;
    ULONG64 SnapTimeLast;
    ULONG64 EnergyConsumed;
    ULONG64 ActiveTime;
    ULONG64 TotalTime;
    struct _POP_FX_DEVICE *FxDevice;
    ULONG64 LastQosTranstionTsc;
    ULONG64 QosTransitionHysteresis;
    enum _KHETERO_CPU_QOS RequestedQosClass;
    enum _KHETERO_CPU_QOS ResolvedQosClass;
    USHORT QosEquivalencyMask;
    USHORT HwFeedbackTableIndex;
    UCHAR HwFeedbackParkHint;
    UCHAR HwFeedbackPerformanceClass;
    UCHAR HwFeedbackEfficiencyClass;
    UCHAR HeteroCoreType;
};

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA {
    struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
};

typedef struct _PROCESS_DISK_COUNTERS {
    ULONG64 BytesRead;
    ULONG64 BytesWritten;
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 FlushOperationCount;
};

typedef struct _PROCESS_ENERGY_VALUES {
    ULONG64 Cycles[4][2];
    ULONG64 DiskEnergy;
    ULONG64 NetworkTailEnergy;
    ULONG64 MBBTailEnergy;
    ULONG64 NetworkTxRxBytes;
    ULONG64 MBBTxRxBytes;
    union _ENERGY_STATE_DURATION Durations[3];
    union _ENERGY_STATE_DURATION ForegroundDuration;
    union _ENERGY_STATE_DURATION DesktopVisibleDuration;
    union _ENERGY_STATE_DURATION PSMForegroundDuration;
    ULONG CompositionRendered;
    ULONG CompositionDirtyGenerated;
    ULONG CompositionDirtyPropagated;
    ULONG Reserved1;
    ULONG64 AttributedCycles[4][2];
    ULONG64 WorkOnBehalfCycles[4][2];
};

typedef struct _PROCESS_ENERGY_VALUES_EXTENSION {
    union _TIMELINE_BITMAP Timelines[14];
    union _TIMELINE_BITMAP CpuTimeline;
    union _TIMELINE_BITMAP DiskTimeline;
    union _TIMELINE_BITMAP NetworkTimeline;
    union _TIMELINE_BITMAP MBBTimeline;
    union _TIMELINE_BITMAP ForegroundTimeline;
    union _TIMELINE_BITMAP DesktopVisibleTimeline;
    union _TIMELINE_BITMAP CompositionRenderedTimeline;
    union _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
    union _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
    union _TIMELINE_BITMAP InputTimeline;
    union _TIMELINE_BITMAP AudioInTimeline;
    union _TIMELINE_BITMAP AudioOutTimeline;
    union _TIMELINE_BITMAP DisplayRequiredTimeline;
    union _TIMELINE_BITMAP KeyboardInputTimeline;
    union _ENERGY_STATE_DURATION Durations[5];
    union _ENERGY_STATE_DURATION InputDuration;
    union _ENERGY_STATE_DURATION AudioInDuration;
    union _ENERGY_STATE_DURATION AudioOutDuration;
    union _ENERGY_STATE_DURATION DisplayRequiredDuration;
    union _ENERGY_STATE_DURATION PSMBackgroundDuration;
    ULONG KeyboardInput;
    ULONG MouseInput;
};

typedef struct _PROCESS_EXTENDED_ENERGY_VALUES {
    struct _PROCESS_ENERGY_VALUES Base;
    struct _PROCESS_ENERGY_VALUES_EXTENSION Extension;
};

typedef struct _PROC_FEEDBACK {
    ULONG64 Lock;
    ULONG64 CyclesLast;
    ULONG64 CyclesActive;
    struct _PROC_FEEDBACK_COUNTER *Counters[2];
    ULONG64 LastUpdateTime;
    ULONG64 UnscaledTime;
    LONG64 UnaccountedTime;
    ULONG64 ScaledTime[2];
    ULONG64 UnaccountedKernelTime;
    ULONG64 PerformanceScaledKernelTime;
    ULONG UserTimeLast;
    ULONG KernelTimeLast;
    ULONG64 IdleGenerationNumberLast;
    ULONG64 HvActiveTimeLast;
    ULONG64 StallCyclesLast;
    ULONG64 StallTime;
    UCHAR KernelTimesIndex;
    UCHAR CounterDiscardsIdleTime;
};

typedef struct _PROC_FEEDBACK_COUNTER {
    PVOID InstantaneousRead;
    PVOID DifferentialRead;
    ULONG64 LastActualCount;
    ULONG64 LastReferenceCount;
    ULONG CachedValue;
    UCHAR Affinitized;
    UCHAR Differential;
    UCHAR DiscardIdleTime;
    UCHAR Scaling;
    ULONG64 Context;
};

typedef struct _PROC_IDLE_ACCOUNTING {
    ULONG StateCount;
    ULONG TotalTransitions;
    ULONG ResetCount;
    ULONG AbortCount;
    ULONG64 StartTime;
    ULONG64 PriorIdleTime;
    enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
    struct _PROC_IDLE_STATE_ACCOUNTING State[1];
};

typedef struct _PROC_IDLE_POLICY {
    UCHAR PromotePercent;
    UCHAR DemotePercent;
    UCHAR PromotePercentBase;
    UCHAR DemotePercentBase;
    UCHAR AllowScaling;
    UCHAR ForceLightIdle;
};

typedef struct _PROC_IDLE_SNAP {
    ULONG64 Time;
    ULONG64 Idle;
};

typedef struct _PROC_IDLE_STATE_ACCOUNTING {
    ULONG64 TotalTime;
    ULONG CancelCount;
    ULONG FailureCount;
    ULONG SuccessCount;
    ULONG InvalidBucketIndex;
    ULONG64 MinTime;
    ULONG64 MaxTime;
    struct _PPM_SELECTION_STATISTICS SelectionStatistics;
    struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
};

typedef struct _PROC_IDLE_STATE_BUCKET {
    ULONG64 TotalTime;
    ULONG64 MinTime;
    ULONG64 MaxTime;
    ULONG Count;
};

typedef struct _PROC_PERF_CHECK {
    ULONG64 LastActive;
    ULONG64 LastTime;
    ULONG64 LastStall;
    ULONG LastResponsivenessEvents;
    struct _PROC_PERF_CHECK_SNAP LastPerfCheckSnap;
    struct _PROC_PERF_CHECK_SNAP CurrentSnap;
    struct _PROC_PERF_CHECK_SNAP LastDeliveredSnap;
    ULONG LastDeliveredPerformance;
    ULONG LastDeliveredFrequency;
    UCHAR TaggedThreadPercent[2];
    UCHAR Class0FloorPerfSelection;
    UCHAR Class1MinimumPerfSelection;
    ULONG CurrentResponsivenessEvents;
};

typedef struct _PROC_PERF_CHECK_SNAP {
    ULONG64 Time;
    ULONG64 Active;
    ULONG64 Stall;
    ULONG64 FrequencyScaledActive;
    ULONG64 PerformanceScaledActive;
    ULONG64 PerformanceScaledKernelActive;
    ULONG64 CyclesActive;
    ULONG64 CyclesAffinitized;
    ULONG64 TaggedThreadCycles[2];
    ULONG ResponsivenessEvents;
};

typedef struct _PROC_PERF_CONSTRAINT {
    struct _KPRCB *Prcb;
    ULONG64 PerfContext;
    ULONG PlatformCap;
    ULONG ThermalCap;
    ULONG LimitReasons;
    ULONG64 PlatformCapStartTime;
    ULONG ProcCap;
    ULONG ProcFloor;
    ULONG TargetPercent;
    UCHAR EngageResponsivenessOverrides;
    UCHAR ResponsivenessChangeCount;
    struct _PERF_CONTROL_STATE_SELECTION Selection;
    ULONG DomainSelectionGeneration;
    ULONG PreviousFrequency;
    ULONG PreviousPercent;
    ULONG LatestFrequencyPercent;
    UCHAR Force;
    UCHAR UseQosUpdateLock;
    ULONG64 QosUpdateLock;
};

typedef struct _PROC_PERF_DOMAIN {
    struct _LIST_ENTRY Link;
    struct _KPRCB *Master;
    struct _KAFFINITY_EX Members;
    ULONG64 DomainContext;
    ULONG ProcessorCount;
    UCHAR EfficiencyClass;
    UCHAR NominalPerformanceClass;
    UCHAR HighestPerformanceClass;
    UCHAR Spare;
    struct _PROC_PERF_CONSTRAINT *Processors;
    PVOID GetFFHThrottleState;
    PVOID TimeWindowHandler;
    PVOID BoostPolicyHandler;
    PVOID BoostModeHandler;
    PVOID AutonomousActivityWindowHandler;
    PVOID AutonomousModeHandler;
    PVOID ReinitializeHandler;
    PULONG PerfSelectionHandler;
    PVOID PerfControlHandler;
    PVOID DomainPerfControlHandler;
    ULONG MaxFrequency;
    ULONG NominalFrequency;
    ULONG MaxPercent;
    ULONG MinPerfPercent;
    ULONG MinThrottlePercent;
    ULONG AdvertizedMaximumFrequency;
    ULONG64 MinimumRelativePerformance;
    ULONG64 NominalRelativePerformance;
    UCHAR NominalRelativePerformancePercent;
    UCHAR Coordination;
    UCHAR HardPlatformCap;
    UCHAR AffinitizeControl;
    UCHAR EfficientThrottle;
    UCHAR AllowSchedulerDirectedPerfStates;
    UCHAR InitiateAllProcessors;
    UCHAR AutonomousMode;
    UCHAR ProvideGuidance;
    ULONG DesiredPercent;
    ULONG GuaranteedPercent;
    UCHAR EngageResponsivenessOverrides;
    struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[4];
    ULONG QosDisableReasons[4];
    USHORT QosEquivalencyMasks[4];
    UCHAR QosSupported;
    ULONG SelectionGeneration;
    struct _PERF_CONTROL_STATE_SELECTION QosSelection[4];
    ULONG64 PerfChangeTime;
    ULONG PerfChangeIntervalCount;
    UCHAR Force;
};

typedef struct _PROC_PERF_HISTORY {
    ULONG Count;
    ULONG Slot;
    ULONG UtilityTotal;
    ULONG AffinitizedUtilityTotal;
    ULONG FrequencyTotal;
    ULONG TaggedPercentTotal[2];
    struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];
};

typedef struct _PROC_PERF_HISTORY_ENTRY {
    USHORT Utility;
    USHORT AffinitizedUtility;
    UCHAR Frequency;
    UCHAR TaggedPercent[2];
};

typedef struct _PROC_PERF_LOAD {
    UCHAR BusyPercentage;
    UCHAR FrequencyPercentage;
};

typedef struct _PROC_PERF_QOS_CLASS_POLICY {
    ULONG MaxPolicyPercent;
    ULONG MaxEquivalentFrequencyPercent;
    ULONG MinPolicyPercent;
    ULONG AutonomousActivityWindow;
    ULONG EnergyPerfPreference;
    UCHAR ProvideGuidance;
    UCHAR AllowThrottling;
    UCHAR PerfBoostMode;
    UCHAR LatencyHintPerf;
    UCHAR TrackDesiredCrossClass;
};

typedef struct _PROFILE_PARAMETER_BLOCK {
    USHORT Status;
    USHORT Reserved;
    USHORT DockingState;
    USHORT Capabilities;
    ULONG DockID;
    ULONG SerialNumber;
};

typedef struct _PSP_STORAGE {
};

typedef struct _PS_IO_CONTROL_ENTRY {
    struct _RTL_BALANCED_NODE VolumeTreeNode;
    struct _LIST_ENTRY FreeListEntry;
    ULONG64 ReservedForParentValue;
    ULONG64 VolumeKey;
    struct _EX_RUNDOWN_REF Rundown;
    PVOID IoControl;
    PVOID VolumeIoAttribution;
};

typedef struct _PS_JOB_WAKE_INFORMATION {
    ULONG64 NotificationChannel;
    ULONG64 WakeCounters[7];
    ULONG64 NoWakeCounter;
};

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PS_MITIGATION_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PS_PROCESS_WAKE_INFORMATION {
    ULONG64 NotificationChannel;
    ULONG WakeCounters[7];
    struct _JOBOBJECT_WAKE_FILTER WakeFilter;
    ULONG NoWakeCounter;
};

typedef struct _PS_PROPERTY_SET {
    struct _LIST_ENTRY ListHead;
    ULONG64 Lock;
};

typedef struct _PS_PROTECTION {
    UCHAR Level;
    UCHAR Type : 3;
    UCHAR Audit : 1;
    UCHAR Signer : 4;
};

typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA {
    struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header;
    ULONG64 Data[1];
};

typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER {
    struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;
    ULONG InstanceNumber : 8;
    ULONG Reserved : 24;
};

typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE {
    UCHAR Version;
    UCHAR DataCount;
    UCHAR SemanticType;
    union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;
    ULONG AttributeType;
};

typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES {
    ULONG64 TrustletIdentity;
    struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];
};

typedef struct _PS_TRUSTLET_TKSESSION_ID {
    ULONG64 SessionId[4];
};

typedef struct _PTE_TRACKER {
    struct _LIST_ENTRY ListEntry;
    struct _MDL *Mdl;
    ULONG64 Count;
    PVOID SystemVa;
    PVOID StartVa;
    ULONG Offset;
    ULONG Length;
    ULONG64 Page;
    ULONG IoMapping : 1;
    ULONG Matched : 1;
    ULONG CacheAttribute : 2;
    ULONG GuardPte : 1;
    ULONG Spare : 27;
    PVOID StackTrace[7];
};

typedef struct _QUAD {
    LONG64 UseThisFieldToCopy;
    DOUBLE DoNotUseThisField;
};

typedef struct _RELATION_LIST {
    struct _DEVICE_OBJECT_LIST *DeviceObjectList;
    UCHAR Sorted;
};

typedef struct _RELATIVE_SYMLINK_INFO {
    USHORT ExposedNamespaceLength;
    USHORT Flags;
    USHORT DeviceNameLength;
    USHORT Reserved;
    struct _RELATIVE_SYMLINK_INFO *InteriorMountPoint;
    struct _UNICODE_STRING OpenedName;
};

typedef struct _REMOTE_PORT_VIEW {
    ULONG Length;
    ULONG64 ViewSize;
    PVOID ViewBase;
};

typedef struct _REQUEST_MAILBOX {
    struct _REQUEST_MAILBOX *Next;
    ULONG64 RequestSummary;
    struct _KREQUEST_PACKET RequestPacket;
    PLONG NodeTargetCountAddr;
    LONG NodeTargetCount;
};

typedef struct _RH_OP_CONTEXT {
    struct _LIST_ENTRY Links;
    struct _IRP *OplockRequestIrp;
    struct _FILE_OBJECT *OplockRequestFileObject;
    struct _EPROCESS *OplockRequestProcess;
    struct _ETHREAD *OplockOwnerThread;
    ULONG Flags;
    struct _LIST_ENTRY AtomicLinks;
};

typedef struct _RSDS {
    ULONG Signature;
    struct _GUID Guid;
    ULONG Age;
    CHAR PdbName[1];
};

typedef struct _RTLP_HP_ALLOC_TRACKER {
    struct _RTL_CSPARSE_BITMAP AllocTrackerBitmap;
    ULONG64 BaseAddress;
};

typedef struct _RTLP_HP_HEAP_GLOBALS {
    ULONG64 HeapKey;
    ULONG64 LfhKey;
    struct _HEAP_FAILURE_INFORMATION *FailureInfo;
    struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;
};

typedef struct _RTLP_HP_HEAP_MANAGER {
    struct _RTLP_HP_HEAP_GLOBALS *Globals;
    struct _RTLP_HP_ALLOC_TRACKER AllocTracker;
    struct _HEAP_VAMGR_CTX VaMgr;
    struct _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];
    struct _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs;
};

typedef struct _RTLP_HP_METADATA_HEAP_CTX {
    struct _SEGMENT_HEAP *Heap;
    union _RTL_RUN_ONCE InitOnce;
};

typedef struct _RTLP_HP_PADDING_HEADER {
    ULONG64 PaddingSize;
    ULONG64 Spare;
};

typedef struct _RTLP_RANGE_LIST_ENTRY {
    ULONG64 Start;
    ULONG64 End;
    struct {
        PVOID UserData;
        PVOID Owner;
    } Allocated;
    struct {
        struct _LIST_ENTRY ListHead;
    } Merged;
    UCHAR Attributes;
    UCHAR PublicFlags;
    USHORT PrivateFlags;
    struct _LIST_ENTRY ListEntry;
};

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *Previous;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    ULONG Flags;
};

typedef struct _RTL_ATOM_TABLE {
    ULONG Signature;
    LONG ReferenceCount;
    struct _EX_PUSH_LOCK PushLock;
    struct _HANDLE_TABLE *ExHandleTable;
    ULONG Flags;
    ULONG NumberOfBuckets;
    struct _RTL_ATOM_TABLE_ENTRY *Buckets[1];
};

typedef struct _RTL_ATOM_TABLE_ENTRY {
    struct _RTL_ATOM_TABLE_ENTRY *HashLink;
    USHORT HandleIndex;
    USHORT Atom;
    struct _RTL_ATOM_TABLE_REFERENCE Reference;
    UCHAR NameLength;
    WCHAR Name[1];
};

typedef struct _RTL_ATOM_TABLE_REFERENCE {
    struct _LIST_ENTRY LowBoxList;
    ULONG LowBoxID;
    USHORT ReferenceCount;
    USHORT Flags;
};

typedef struct _RTL_AVL_TABLE {
    struct _RTL_BALANCED_LINKS BalancedRoot;
    PVOID OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    ULONG DepthOfTree;
    struct _RTL_BALANCED_LINKS *RestartKey;
    ULONG DeleteCount;
    enum _RTL_GENERIC_COMPARE_RESULTS *CompareRoutine;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    PVOID TableContext;
};

typedef struct _RTL_AVL_TREE {
    struct _RTL_BALANCED_NODE *Root;
};

typedef struct _RTL_BALANCED_LINKS {
    struct _RTL_BALANCED_LINKS *Parent;
    struct _RTL_BALANCED_LINKS *LeftChild;
    struct _RTL_BALANCED_LINKS *RightChild;
    CHAR Balance;
    UCHAR Reserved[3];
};

typedef struct _RTL_BALANCED_NODE {
    struct _RTL_BALANCED_NODE *Children[2];
    struct _RTL_BALANCED_NODE *Left;
    struct _RTL_BALANCED_NODE *Right;
    UCHAR Red : 1;
    UCHAR Balance : 2;
    ULONG64 ParentValue;
};

typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;
    PULONG Buffer;
};

typedef struct _RTL_BITMAP_EX {
    ULONG64 SizeOfBitMap;
    PULONG64 Buffer;
};

typedef struct _RTL_CHASH_ENTRY {
    ULONG64 Key;
};

typedef struct _RTL_CHASH_TABLE {
    struct _RTL_CHASH_ENTRY *Table;
    ULONG EntrySizeShift;
    ULONG EntryMax;
    ULONG EntryCount;
};

typedef struct _RTL_CRITICAL_SECTION {
    struct _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    PVOID OwningThread;
    PVOID LockSemaphore;
    ULONG64 SpinCount;
};

typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    USHORT Type;
    USHORT CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    struct _LIST_ENTRY ProcessLocksList;
    ULONG EntryCount;
    ULONG ContentionCount;
    ULONG Flags;
    USHORT CreatorBackTraceIndexHigh;
    USHORT SpareUSHORT;
};

typedef struct _RTL_CSPARSE_BITMAP {
    ULONG64 CommitDirectory;
    PULONG64 CommitBitmap;
    PULONG64 UserBitmap;
    LONG64 BitCount;
    ULONG64 BitmapLock;
    ULONG64 DecommitPageIndex;
    ULONG64 RtlpCSparseBitmapWakeLock;
    UCHAR LockType;
    UCHAR AddressSpace;
    UCHAR MemType;
    UCHAR AllocAlignment;
};

typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    struct _STRING DosPath;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE {
    ULONG Flags;
    ULONG Shift;
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;
    PVOID Directory;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
    struct _LIST_ENTRY *ChainHead;
    struct _LIST_ENTRY *PrevLinkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
    struct _LIST_ENTRY Linkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    struct _LIST_ENTRY *CurEntry;
    struct _LIST_ENTRY *ChainHead;
    ULONG BucketIndex;
};

typedef struct _RTL_HASH_ENTRY {
    struct _SINGLE_LIST_ENTRY BucketLink;
    ULONG64 Key;
};

typedef struct _RTL_HASH_TABLE {
    ULONG EntryCount;
    ULONG MaskBitCount : 5;
    ULONG BucketCount : 27;
    struct _SINGLE_LIST_ENTRY *Buckets;
};

typedef struct _RTL_HASH_TABLE_ITERATOR {
    struct _RTL_HASH_TABLE *Hash;
    struct _RTL_HASH_ENTRY *HashEntry;
    struct _SINGLE_LIST_ENTRY *Bucket;
};

typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA {
    ULONG64 CommitLimitBytes;
    ULONG64 CommitLimitFailureCode;
    ULONG64 MaxAllocationSizeBytes;
    ULONG64 AllocationLimitFailureCode;
};

typedef struct _RTL_HP_LFH_CONFIG {
    USHORT MaxBlockSize;
    USHORT WitholdPageCrossingBlocks : 1;
};

typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS {
    struct _RTL_HP_LFH_CONFIG LfhConfigs;
    struct _RTL_HP_VS_CONFIG VsConfigs;
};

typedef struct _RTL_HP_VS_CONFIG {
    struct {
        ULONG PageAlignLargeAllocs : 1;
        ULONG FullDecommit : 1;
        ULONG EnableDelayFree : 1;
    } Flags;
};

typedef struct _RTL_RANGE {
    ULONG64 Start;
    ULONG64 End;
    PVOID UserData;
    PVOID Owner;
    UCHAR Attributes;
    UCHAR Flags;
};

typedef struct _RTL_RANGE_LIST {
    struct _LIST_ENTRY ListHead;
    ULONG Flags;
    ULONG Count;
    ULONG Stamp;
};

typedef struct _RTL_RB_TREE {
    struct _RTL_BALANCED_NODE *Root;
    UCHAR Encoded : 1;
    struct _RTL_BALANCED_NODE *Min;
};

typedef struct _RTL_RETPOLINE_ROUTINES {
    ULONG UnwindDataOffset;
    ULONG SwitchtableJump[16];
    ULONG CfgIndirectRax;
    ULONG NonCfgIndirectRax;
    ULONG ImportR10;
};

typedef struct _RTL_SPARSE_ARRAY {
    struct _RTL_CSPARSE_BITMAP Bitmap;
    ULONG64 ElementCount;
    ULONG ElementSizeShift;
};

typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
};

typedef struct _RTL_SRWLOCK {
    ULONG64 Locked : 1;
    ULONG64 Waiting : 1;
    ULONG64 Waking : 1;
    ULONG64 MultipleShared : 1;
    ULONG64 Shared : 60;
    ULONG64 Value;
    PVOID Ptr;
};

typedef struct _RTL_TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    struct _TIME_FIELDS StandardStart;
    LONG StandardBias;
    WCHAR DaylightName[32];
    struct _TIME_FIELDS DaylightStart;
    LONG DaylightBias;
};

typedef struct _RTL_UMS_CONTEXT {
    struct _SINGLE_LIST_ENTRY Link;
    struct _CONTEXT Context;
    PVOID Teb;
    PVOID UserContext;
    ULONG ScheduledThread : 1;
    ULONG Suspended : 1;
    ULONG VolatileContext : 1;
    ULONG Terminated : 1;
    ULONG DebugActive : 1;
    ULONG RunningOnSelfThread : 1;
    ULONG DenyRunningOnSelfThread : 1;
    LONG Flags;
    ULONG64 KernelUpdateLock : 2;
    ULONG64 PrimaryClientID : 62;
    ULONG64 ContextLock;
    struct _RTL_UMS_CONTEXT *PrimaryUmsContext;
    ULONG SwitchCount;
    ULONG KernelYieldCount;
    ULONG MixedYieldCount;
    ULONG YieldCount;
};

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    PVOID ConsoleHandle;
    ULONG ConsoleFlags;
    PVOID StandardInput;
    PVOID StandardOutput;
    PVOID StandardError;
    struct _CURDIR CurrentDirectory;
    struct _UNICODE_STRING DllPath;
    struct _UNICODE_STRING ImagePathName;
    struct _UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    struct _UNICODE_STRING WindowTitle;
    struct _UNICODE_STRING DesktopInfo;
    struct _UNICODE_STRING ShellInfo;
    struct _UNICODE_STRING RuntimeData;
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
    ULONG64 EnvironmentSize;
    ULONG64 EnvironmentVersion;
    PVOID PackageDependencyData;
    ULONG ProcessGroupId;
    ULONG LoaderThreads;
    struct _UNICODE_STRING RedirectionDllName;
};

typedef struct _SCSI_REQUEST_BLOCK {
};

typedef struct _SECTION {
    struct _RTL_BALANCED_NODE SectionNode;
    ULONG64 StartingVpn;
    ULONG64 EndingVpn;
    union {
        struct _CONTROL_AREA *ControlArea;
        struct _FILE_OBJECT *FileObject;
        ULONG64 RemoteImageFileObject : 1;
        ULONG64 RemoteDataFileObject : 1;
    } u1;
    ULONG64 SizeOfSection;
    union {
        ULONG LongFlags;
        struct _MMSECTION_FLAGS Flags;
    } u;
    ULONG InitialPageProtection : 12;
    ULONG SessionId : 19;
    ULONG NoValidationNeeded : 1;
};

typedef struct _SECTION_IMAGE_INFORMATION {
    PVOID TransferAddress;
    ULONG ZeroBits;
    ULONG64 MaximumStackSize;
    ULONG64 CommittedStackSize;
    ULONG SubSystemType;
    USHORT SubSystemMinorVersion;
    USHORT SubSystemMajorVersion;
    ULONG SubSystemVersion;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    ULONG OperatingSystemVersion;
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    UCHAR ImageContainsCode;
    UCHAR ImageFlags;
    UCHAR ComPlusNativeReady : 1;
    UCHAR ComPlusILOnly : 1;
    UCHAR ImageDynamicallyRelocated : 1;
    UCHAR ImageMappedFlat : 1;
    UCHAR BaseBelow4gb : 1;
    UCHAR ComPlusPrefer32bit : 1;
    UCHAR Reserved : 2;
    ULONG LoaderFlags;
    ULONG ImageFileSize;
    ULONG CheckSum;
};

typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
};

typedef struct _SECURITY_CLIENT_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    PVOID ClientToken;
    UCHAR DirectlyAccessClientToken;
    UCHAR DirectAccessEffectiveOnly;
    UCHAR ServerIsRemote;
    struct _TOKEN_CONTROL ClientTokenControl;
};

typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    PVOID Owner;
    PVOID Group;
    struct _ACL *Sacl;
    struct _ACL *Dacl;
};

typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    ULONG Owner;
    ULONG Group;
    ULONG Sacl;
    ULONG Dacl;
};

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    UCHAR ContextTrackingMode;
    UCHAR EffectiveOnly;
};

typedef struct _SECURITY_SUBJECT_CONTEXT {
    PVOID ClientToken;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PVOID PrimaryToken;
    PVOID ProcessAuditId;
};

typedef struct _SEGMENT {
    struct _CONTROL_AREA *ControlArea;
    ULONG TotalNumberOfPtes;
    struct _SEGMENT_FLAGS SegmentFlags;
    ULONG64 NumberOfCommittedPages;
    ULONG64 SizeOfSegment;
    struct _MMEXTEND_INFO *ExtendInfo;
    PVOID BasedAddress;
    struct _EX_PUSH_LOCK SegmentLock;
    union {
        ULONG64 ImageCommitment;
        ULONG CreatingProcessId;
    } u1;
    union {
        struct _MI_SECTION_IMAGE_INFORMATION *ImageInformation;
        PVOID FirstMappedVa;
    } u2;
    struct _MMPTE *PrototypePte;
};

typedef struct _SEGMENT_FLAGS {
    USHORT TotalNumberOfPtes4132 : 10;
    USHORT Spare0 : 2;
    USHORT LargePages : 1;
    USHORT DebugSymbolsLoaded : 1;
    USHORT WriteCombined : 1;
    USHORT NoCache : 1;
    USHORT Short0;
    UCHAR Unused : 1;
    UCHAR DefaultProtectionMask : 5;
    UCHAR Binary32 : 1;
    UCHAR ContainsDebug : 1;
    UCHAR UChar1;
    UCHAR ForceCollision : 1;
    UCHAR ImageSigningType : 3;
    UCHAR ImageSigningLevel : 4;
    UCHAR UChar2;
};

typedef struct _SEGMENT_HEAP {
};

typedef struct _SEGMENT_HEAP_EXTRA {
    USHORT AllocationTag;
    UCHAR InterceptorIndex : 4;
    UCHAR UserFlags : 4;
    UCHAR ExtraSizeInUnits;
    PVOID Settable;
};

typedef struct _SEP_AUDIT_POLICY {
    struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;
    UCHAR PolicySetStatus;
};

typedef struct _SEP_CACHED_HANDLES_ENTRY {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    LONG64 ReferenceCount;
    struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor;
    ULONG HandleCount;
    PVOID *Handles;
};

typedef struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR {
    enum _SEP_CACHED_HANDLES_ENTRY_TYPE DescriptorType;
    PVOID PackageSid;
    struct _UNICODE_STRING IsolationPrefix;
};

typedef struct _SEP_CACHED_HANDLES_TABLE {
    struct _EX_PUSH_LOCK Lock;
    struct _RTL_DYNAMIC_HASH_TABLE *HashTable;
};

typedef struct _SEP_LOGON_SESSION_REFERENCES {
    struct _SEP_LOGON_SESSION_REFERENCES *Next;
    struct _LUID LogonId;
    struct _LUID BuddyLogonId;
    LONG64 ReferenceCount;
    ULONG Flags;
    struct _DEVICE_MAP *pDeviceMap;
    PVOID Token;
    struct _UNICODE_STRING AccountName;
    struct _UNICODE_STRING AuthorityName;
    struct _SEP_CACHED_HANDLES_TABLE CachedHandlesTable;
    struct _EX_PUSH_LOCK SharedDataLock;
    struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION *SharedClaimAttributes;
    struct _SEP_SID_VALUES_BLOCK *SharedSidValues;
    struct _OB_HANDLE_REVOCATION_BLOCK RevocationBlock;
    struct _EJOB *ServerSilo;
    struct _LUID SiblingAuthId;
    struct _LIST_ENTRY TokenList;
};

typedef struct _SEP_LOWBOX_NUMBER_ENTRY {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    LONG64 ReferenceCount;
    PVOID PackageSid;
    ULONG LowboxNumber;
    PVOID AtomTable;
};

typedef struct _SEP_LOWBOX_NUMBER_MAPPING {
    struct _EX_PUSH_LOCK Lock;
    struct _RTL_BITMAP Bitmap;
    struct _RTL_DYNAMIC_HASH_TABLE *HashTable;
    UCHAR Active;
};

typedef struct _SEP_LUID_TO_INDEX_MAP_ENTRY {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    LONG64 ReferenceCount;
    ULONG64 Luid;
    ULONG64 IndexIntoGlobalSingletonTable;
    UCHAR MarkedForDeletion;
};

typedef struct _SEP_RM_LSA_CONNECTION_STATE {
    PVOID LsaProcessHandle;
    PVOID LsaCommandPortHandle;
    PVOID SepRmThreadHandle;
    PVOID RmCommandPortHandle;
    PVOID RmCommandServerPortHandle;
    PVOID LsaCommandPortSectionHandle;
    union _LARGE_INTEGER LsaCommandPortSectionSize;
    PVOID LsaViewPortMemory;
    PVOID RmViewPortMemory;
    LONG LsaCommandPortMemoryDelta;
    UCHAR LsaCommandPortActive;
};

typedef struct _SEP_SID_VALUES_BLOCK {
    ULONG BlockLength;
    LONG64 ReferenceCount;
    ULONG SidCount;
    ULONG64 SidValuesStart;
};

typedef struct _SEP_SILOSTATE {
    struct _SEP_LOGON_SESSION_REFERENCES *SystemLogonSession;
    struct _SEP_LOGON_SESSION_REFERENCES *AnonymousLogonSession;
    PVOID AnonymousLogonToken;
    PVOID AnonymousLogonTokenNoEveryone;
    struct _UNICODE_STRING *UncSystemPaths;
    struct _CI_NGEN_PATHS *NgenPaths;
};

typedef struct _SEP_TOKEN_DIAG_TRACK_ENTRY {
    PVOID ProcessCid;
    PVOID ThreadCid;
    UCHAR ImageFileName[16];
    ULONG CreateMethod;
    ULONG64 CreateTrace[30];
    LONG Count;
    LONG CaptureCount;
};

typedef struct _SEP_TOKEN_PRIVILEGES {
    ULONG64 Present;
    ULONG64 Enabled;
    ULONG64 EnabledByDefault;
};

typedef struct _SESSION_LOWBOX_MAP {
    struct _LIST_ENTRY ListEntry;
    ULONG SessionId;
    struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;
};

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO {
    struct _OBJECT_NAME_INFORMATION *ImageFileName;
};

typedef struct _SHARED_CACHE_MAP {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    ULONG OpenCount;
    union _LARGE_INTEGER FileSize;
    struct _LIST_ENTRY BcbList;
    union _LARGE_INTEGER SectionSize;
    union _LARGE_INTEGER ValidDataLength;
    union _LARGE_INTEGER ValidDataGoal;
    struct _VACB *InitialVacbs[4];
    struct _VACB **Vacbs;
    struct _EX_FAST_REF FileObjectFastRef;
    struct _EX_PUSH_LOCK VacbLock;
    ULONG DirtyPages;
    struct _LIST_ENTRY LoggedStreamLinks;
    struct _LIST_ENTRY SharedCacheMapLinks;
    ULONG Flags;
    LONG Status;
    struct _MBCB *Mbcb;
    PVOID Section;
    struct _KEVENT *CreateEvent;
    struct _KEVENT *WaitOnActiveCount;
    ULONG PagesToWrite;
    LONG64 BeyondLastFlush;
    struct _CACHE_MANAGER_CALLBACKS *Callbacks;
    PVOID LazyWriteContext;
    struct _LIST_ENTRY PrivateList;
    struct _LOGGED_STREAM_CALLBACK_V1 V1;
    struct _LOGGED_STREAM_CALLBACK_V2 V2;
    union _LARGE_INTEGER LargestLSN;
    ULONG DirtyPageThreshold;
    ULONG LazyWritePassCount;
    struct _CACHE_UNINITIALIZE_EVENT *UninitializeEvent;
    struct _FAST_MUTEX BcbLock;
    union _LARGE_INTEGER LastUnmapBehindOffset;
    struct _KEVENT Event;
    union _LARGE_INTEGER HighWaterMappingOffset;
    struct _PRIVATE_CACHE_MAP PrivateCacheMap;
    PVOID WriteBehindWorkQueueEntry;
    struct _VOLUME_CACHE_MAP *VolumeCacheMap;
    ULONG ProcImagePathHash;
    ULONG WritesInProgress;
    ULONG AsyncReadRequestCount;
    struct _CC_PARTITION *Partition;
    ULONG InternalRefCount;
};

typedef struct _SHARED_CACHE_MAP_LIST_CURSOR {
    struct _LIST_ENTRY SharedCacheMapLinks;
    ULONG Flags;
};

typedef struct _SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[1];
};

typedef struct _SID_AND_ATTRIBUTES {
    PVOID Sid;
    ULONG Attributes;
};

typedef struct _SID_AND_ATTRIBUTES_HASH {
    ULONG SidCount;
    struct _SID_AND_ATTRIBUTES *SidAttr;
    ULONG64 Hash[32];
};

typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
};

typedef struct _SILO_USER_SHARED_DATA {
    ULONG ServiceSessionId;
    ULONG ActiveConsoleId;
    LONG64 ConsoleSessionForegroundProcessId;
    enum _NT_PRODUCT_TYPE NtProductType;
    ULONG SuiteMask;
    ULONG SharedUserSessionId;
    UCHAR IsMultiSessionSku;
    WCHAR NtSystemRoot[260];
    USHORT UserModeGlobalLogger[16];
};

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
};

typedef struct _SINGLE_LIST_ENTRY32 {
    ULONG Next;
};

typedef struct _SK_CRASH_MINIDUMP {
    ULONG Size;
    ULONG Version;
    ULONG ModuleCount;
    ULONG FrameCount;
    struct _SK_CRASH_MODULE Modules[16];
    struct _SK_CRASH_STACK_FRAME StackFrames[366];
};

typedef struct _SK_CRASH_MODULE {
    WCHAR ImageName[32];
    ULONG SizeOfImage;
    ULONG TimeDateStamp;
};

typedef struct _SK_CRASH_STACK_FRAME {
    ULONG ModuleId;
    ULONG Rva;
    ULONG64 Pc;
};

typedef struct _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
};

typedef struct _SMBIOS3_TABLE_HEADER {
    UCHAR Signature[5];
    UCHAR Checksum;
    UCHAR Length;
    UCHAR MajorVersion;
    UCHAR MinorVersion;
    UCHAR Docrev;
    UCHAR EntryPointRevision;
    UCHAR Reserved;
    ULONG StructureTableMaximumSize;
    ULONG64 StructureTableAddress;
};

typedef struct _STACK_TABLE {
    USHORT NumStackTraces;
    USHORT TraceCapacity;
    struct _OBJECT_REF_TRACE *StackTrace[16];
    USHORT StackTableHash[16381];
};

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _STRING32 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG Buffer;
};

typedef struct _STRING64 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG64 Buffer;
};

typedef struct _SUBSECTION {
    struct _CONTROL_AREA *ControlArea;
    struct _MMPTE *SubsectionBase;
    struct _SUBSECTION *NextSubsection;
    struct _RTL_AVL_TREE GlobalPerSessionHead;
    struct _MI_CONTROL_AREA_WAIT_BLOCK *CreationWaitList;
    struct _MI_PER_SESSION_PROTOS *SessionDriverProtos;
    union {
        ULONG LongFlags;
        struct _MMSUBSECTION_FLAGS SubsectionFlags;
    } u;
    ULONG StartingSector;
    ULONG NumberOfFullSectors;
    ULONG PtesInSubsection;
    union {
        struct _MI_SUBSECTION_ENTRY1 e1;
        ULONG EntireField;
    } u1;
    ULONG UnusedPtes : 30;
    ULONG ExtentQueryNeeded : 1;
    ULONG DirtyPages : 1;
};

typedef struct _SUPPORTED_RANGE {
    struct _SUPPORTED_RANGE *Next;
    ULONG SystemAddressSpace;
    LONG64 SystemBase;
    LONG64 Base;
    LONG64 Limit;
};

typedef struct _SUPPORTED_RANGES {
    USHORT Version;
    UCHAR Sorted;
    UCHAR Reserved;
    ULONG NoIO;
    struct _SUPPORTED_RANGE IO;
    ULONG NoMemory;
    struct _SUPPORTED_RANGE Memory;
    ULONG NoPrefetchMemory;
    struct _SUPPORTED_RANGE PrefetchMemory;
    ULONG NoDma;
    struct _SUPPORTED_RANGE Dma;
};

typedef struct _SYNCH_COUNTERS {
    ULONG SpinLockAcquireCount;
    ULONG SpinLockContentionCount;
    ULONG SpinLockSpinCount;
    ULONG IpiSendRequestBroadcastCount;
    ULONG IpiSendRequestRoutineCount;
    ULONG IpiSendSoftwareInterruptCount;
    ULONG ExInitializeResourceCount;
    ULONG ExReInitializeResourceCount;
    ULONG ExDeleteResourceCount;
    ULONG ExecutiveResourceAcquiresCount;
    ULONG ExecutiveResourceContentionsCount;
    ULONG ExecutiveResourceReleaseExclusiveCount;
    ULONG ExecutiveResourceReleaseSharedCount;
    ULONG ExecutiveResourceConvertsCount;
    ULONG ExAcqResExclusiveAttempts;
    ULONG ExAcqResExclusiveAcquiresExclusive;
    ULONG ExAcqResExclusiveAcquiresExclusiveRecursive;
    ULONG ExAcqResExclusiveWaits;
    ULONG ExAcqResExclusiveNotAcquires;
    ULONG ExAcqResSharedAttempts;
    ULONG ExAcqResSharedAcquiresExclusive;
    ULONG ExAcqResSharedAcquiresShared;
    ULONG ExAcqResSharedAcquiresSharedRecursive;
    ULONG ExAcqResSharedWaits;
    ULONG ExAcqResSharedNotAcquires;
    ULONG ExAcqResSharedStarveExclusiveAttempts;
    ULONG ExAcqResSharedStarveExclusiveAcquiresExclusive;
    ULONG ExAcqResSharedStarveExclusiveAcquiresShared;
    ULONG ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
    ULONG ExAcqResSharedStarveExclusiveWaits;
    ULONG ExAcqResSharedStarveExclusiveNotAcquires;
    ULONG ExAcqResSharedWaitForExclusiveAttempts;
    ULONG ExAcqResSharedWaitForExclusiveAcquiresExclusive;
    ULONG ExAcqResSharedWaitForExclusiveAcquiresShared;
    ULONG ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
    ULONG ExAcqResSharedWaitForExclusiveWaits;
    ULONG ExAcqResSharedWaitForExclusiveNotAcquires;
    ULONG ExSetResOwnerPointerExclusive;
    ULONG ExSetResOwnerPointerSharedNew;
    ULONG ExSetResOwnerPointerSharedOld;
    ULONG ExTryToAcqExclusiveAttempts;
    ULONG ExTryToAcqExclusiveAcquires;
    ULONG ExBoostExclusiveOwner;
    ULONG ExBoostSharedOwners;
    ULONG ExEtwSynchTrackingNotificationsCount;
    ULONG ExEtwSynchTrackingNotificationsAccountedCount;
};

typedef struct _SYSPTES_HEADER {
    struct _LIST_ENTRY ListHead[16];
    ULONG64 Count;
    ULONG64 NumberOfEntries;
    ULONG64 NumberOfEntriesPeak;
};

typedef struct _SYSTEM_POWER_POLICY {
    ULONG Revision;
    struct POWER_ACTION_POLICY PowerButton;
    struct POWER_ACTION_POLICY SleepButton;
    struct POWER_ACTION_POLICY LidClose;
    enum _SYSTEM_POWER_STATE LidOpenWake;
    ULONG Reserved;
    struct POWER_ACTION_POLICY Idle;
    ULONG IdleTimeout;
    UCHAR IdleSensitivity;
    UCHAR DynamicThrottle;
    UCHAR Spare2[2];
    enum _SYSTEM_POWER_STATE MinSleep;
    enum _SYSTEM_POWER_STATE MaxSleep;
    enum _SYSTEM_POWER_STATE ReducedLatencySleep;
    ULONG WinLogonFlags;
    ULONG Spare3;
    ULONG DozeS4Timeout;
    ULONG BroadcastCapacityResolution;
    struct SYSTEM_POWER_LEVEL DischargePolicy[4];
    ULONG VideoTimeout;
    UCHAR VideoDimDisplay;
    ULONG VideoReserved[3];
    ULONG SpindownTimeout;
    UCHAR OptimizeForPower;
    UCHAR FanThrottleTolerance;
    UCHAR ForcedThrottle;
    UCHAR MinThrottle;
    struct POWER_ACTION_POLICY OverThrottled;
};

typedef struct _SYSTEM_POWER_STATE_CONTEXT {
    ULONG Reserved1 : 8;
    ULONG TargetSystemState : 4;
    ULONG EffectiveSystemState : 4;
    ULONG CurrentSystemState : 4;
    ULONG IgnoreHibernationPath : 1;
    ULONG PseudoTransition : 1;
    ULONG KernelSoftReboot : 1;
    ULONG DirectedDripsTransition : 1;
    ULONG Reserved2 : 8;
    ULONG ContextAsUlong;
};

typedef struct _TEB {
    struct _NT_TIB NtTib;
    PVOID EnvironmentPointer;
    struct _CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    struct _PEB *ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    PVOID WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID ReservedForDebuggerInstrumentation[16];
    PVOID SystemReserved1[30];
    CHAR PlaceholderCompatibilityMode;
    UCHAR PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    LONG ExceptionCode;
    UCHAR Padding0[4];
    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer;
    ULONG64 InstrumentationCallbackSp;
    ULONG64 InstrumentationCallbackPreviousPc;
    ULONG64 InstrumentationCallbackPreviousSp;
    ULONG TxFsContext;
    UCHAR InstrumentationCallbackDisabled;
    UCHAR UnalignedLoadStoreExceptions;
    UCHAR Padding1[2];
    struct _GDI_TEB_BATCH GdiTebBatch;
    struct _CLIENT_ID RealClientId;
    PVOID GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    ULONG64 Win32ClientInfo[62];
    PVOID glDispatchTable[233];
    ULONG64 glReserved1[29];
    PVOID glReserved2;
    PVOID glSectionInfo;
    PVOID glSection;
    PVOID glTable;
    PVOID glCurrentRC;
    PVOID glContext;
    ULONG LastStatusValue;
    UCHAR Padding2[4];
    struct _UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    UCHAR Padding3[6];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    struct _LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorMode;
    UCHAR Padding4[4];
    PVOID Instrumentation[11];
    struct _GUID ActivityId;
    PVOID SubProcessTag;
    PVOID PerflibData;
    PVOID EtwTraceData;
    PVOID WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    UCHAR Padding5[4];
    PVOID ReservedForPerf;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
    UCHAR Padding6[4];
    PVOID SavedPriorityState;
    ULONG64 ReservedForCodeCoverage;
    PVOID ThreadPoolData;
    PVOID *TlsExpansionSlots;
    PVOID DeallocationBStore;
    PVOID BStoreLimit;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    PVOID NlsCache;
    PVOID pShimData;
    ULONG HeapData;
    UCHAR Padding7[4];
    PVOID CurrentTransactionHandle;
    struct _TEB_ACTIVE_FRAME *ActiveFrame;
    PVOID FlsData;
    PVOID PreferredLanguages;
    PVOID UserPrefLanguages;
    PVOID MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT LoadOwner : 1;
    USHORT LoaderWorker : 1;
    USHORT SkipLoaderInit : 1;
    USHORT SpareSameTebBits : 1;
    PVOID TxnScopeEnterCallback;
    PVOID TxnScopeExitCallback;
    PVOID TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    PVOID ResourceRetValue;
    PVOID ReservedForWdf;
    ULONG64 ReservedForCrt;
    struct _GUID EffectiveContainerId;
};

typedef struct _TEB32 {
    struct _NT_TIB32 NtTib;
    ULONG EnvironmentPointer;
    struct _CLIENT_ID32 ClientId;
    ULONG ActiveRpcHandle;
    ULONG ThreadLocalStoragePointer;
    ULONG ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    ULONG CsrClientThread;
    ULONG Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    ULONG WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    ULONG ReservedForDebuggerInstrumentation[16];
    ULONG SystemReserved1[26];
    CHAR PlaceholderCompatibilityMode;
    UCHAR PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    struct _ACTIVATION_CONTEXT_STACK32 _ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    LONG ExceptionCode;
    ULONG ActivationContextStackPointer;
    ULONG InstrumentationCallbackSp;
    ULONG InstrumentationCallbackPreviousPc;
    ULONG InstrumentationCallbackPreviousSp;
    UCHAR InstrumentationCallbackDisabled;
    UCHAR SpareBytes[23];
    ULONG TxFsContext;
    struct _GDI_TEB_BATCH32 GdiTebBatch;
    struct _CLIENT_ID32 RealClientId;
    ULONG GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    ULONG GdiThreadLocalInfo;
    ULONG Win32ClientInfo[62];
    ULONG glDispatchTable[233];
    ULONG glReserved1[29];
    ULONG glReserved2;
    ULONG glSectionInfo;
    ULONG glSection;
    ULONG glTable;
    ULONG glCurrentRC;
    ULONG glContext;
    ULONG LastStatusValue;
    struct _STRING32 StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    ULONG DeallocationStack;
    ULONG TlsSlots[64];
    struct LIST_ENTRY32 TlsLinks;
    ULONG Vdm;
    ULONG ReservedForNtRpc;
    ULONG DbgSsReserved[2];
    ULONG HardErrorMode;
    ULONG Instrumentation[9];
    struct _GUID ActivityId;
    ULONG SubProcessTag;
    ULONG PerflibData;
    ULONG EtwTraceData;
    ULONG WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    ULONG ReservedForPerf;
    ULONG ReservedForOle;
    ULONG WaitingOnLoaderLock;
    ULONG SavedPriorityState;
    ULONG ReservedForCodeCoverage;
    ULONG ThreadPoolData;
    ULONG TlsExpansionSlots;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    ULONG NlsCache;
    ULONG pShimData;
    ULONG HeapData;
    ULONG CurrentTransactionHandle;
    ULONG ActiveFrame;
    ULONG FlsData;
    ULONG PreferredLanguages;
    ULONG UserPrefLanguages;
    ULONG MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT LoadOwner : 1;
    USHORT LoaderWorker : 1;
    USHORT SkipLoaderInit : 1;
    USHORT SpareSameTebBits : 1;
    ULONG TxnScopeEnterCallback;
    ULONG TxnScopeExitCallback;
    ULONG TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    ULONG ResourceRetValue;
    ULONG ReservedForWdf;
    ULONG64 ReservedForCrt;
    struct _GUID EffectiveContainerId;
};

typedef struct _TEB64 {
    struct _NT_TIB64 NtTib;
    ULONG64 EnvironmentPointer;
    struct _CLIENT_ID64 ClientId;
    ULONG64 ActiveRpcHandle;
    ULONG64 ThreadLocalStoragePointer;
    ULONG64 ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    ULONG64 CsrClientThread;
    ULONG64 Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    ULONG64 WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    ULONG64 ReservedForDebuggerInstrumentation[16];
    ULONG64 SystemReserved1[30];
    CHAR PlaceholderCompatibilityMode;
    UCHAR PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    struct _ACTIVATION_CONTEXT_STACK64 _ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    LONG ExceptionCode;
    UCHAR Padding0[4];
    ULONG64 ActivationContextStackPointer;
    ULONG64 InstrumentationCallbackSp;
    ULONG64 InstrumentationCallbackPreviousPc;
    ULONG64 InstrumentationCallbackPreviousSp;
    ULONG TxFsContext;
    UCHAR InstrumentationCallbackDisabled;
    UCHAR UnalignedLoadStoreExceptions;
    UCHAR Padding1[2];
    struct _GDI_TEB_BATCH64 GdiTebBatch;
    struct _CLIENT_ID64 RealClientId;
    ULONG64 GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    ULONG64 GdiThreadLocalInfo;
    ULONG64 Win32ClientInfo[62];
    ULONG64 glDispatchTable[233];
    ULONG64 glReserved1[29];
    ULONG64 glReserved2;
    ULONG64 glSectionInfo;
    ULONG64 glSection;
    ULONG64 glTable;
    ULONG64 glCurrentRC;
    ULONG64 glContext;
    ULONG LastStatusValue;
    UCHAR Padding2[4];
    struct _STRING64 StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    UCHAR Padding3[6];
    ULONG64 DeallocationStack;
    ULONG64 TlsSlots[64];
    struct LIST_ENTRY64 TlsLinks;
    ULONG64 Vdm;
    ULONG64 ReservedForNtRpc;
    ULONG64 DbgSsReserved[2];
    ULONG HardErrorMode;
    UCHAR Padding4[4];
    ULONG64 Instrumentation[11];
    struct _GUID ActivityId;
    ULONG64 SubProcessTag;
    ULONG64 PerflibData;
    ULONG64 EtwTraceData;
    ULONG64 WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    UCHAR Padding5[4];
    ULONG64 ReservedForPerf;
    ULONG64 ReservedForOle;
    ULONG WaitingOnLoaderLock;
    UCHAR Padding6[4];
    ULONG64 SavedPriorityState;
    ULONG64 ReservedForCodeCoverage;
    ULONG64 ThreadPoolData;
    ULONG64 TlsExpansionSlots;
    ULONG64 DeallocationBStore;
    ULONG64 BStoreLimit;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    ULONG64 NlsCache;
    ULONG64 pShimData;
    ULONG HeapData;
    UCHAR Padding7[4];
    ULONG64 CurrentTransactionHandle;
    ULONG64 ActiveFrame;
    ULONG64 FlsData;
    ULONG64 PreferredLanguages;
    ULONG64 UserPrefLanguages;
    ULONG64 MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT LoadOwner : 1;
    USHORT LoaderWorker : 1;
    USHORT SkipLoaderInit : 1;
    USHORT SpareSameTebBits : 1;
    ULONG64 TxnScopeEnterCallback;
    ULONG64 TxnScopeExitCallback;
    ULONG64 TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    ULONG64 ResourceRetValue;
    ULONG64 ReservedForWdf;
    ULONG64 ReservedForCrt;
    struct _GUID EffectiveContainerId;
};

typedef struct _TEB_ACTIVE_FRAME {
    ULONG Flags;
    struct _TEB_ACTIVE_FRAME *Previous;
    struct _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

typedef struct _TEB_ACTIVE_FRAME_CONTEXT {
    ULONG Flags;
    PCHAR FrameName;
};

typedef struct _TERMINATION_PORT {
    struct _TERMINATION_PORT *Next;
    PVOID Port;
};

typedef struct _THERMAL_COOLING_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    ULONG Flags;
    PVOID ActiveCooling;
    PVOID PassiveCooling;
};

typedef struct _THERMAL_INFORMATION {
    ULONG ThermalStamp;
    ULONG ThermalConstant1;
    ULONG ThermalConstant2;
    ULONG64 Processors;
    ULONG SamplingPeriod;
    ULONG CurrentTemperature;
    ULONG PassiveTripPoint;
    ULONG CriticalTripPoint;
    UCHAR ActiveTripPointCount;
    ULONG ActiveTripPoint[10];
};

typedef struct _THERMAL_INFORMATION_EX {
    ULONG ThermalStamp;
    ULONG ThermalConstant1;
    ULONG ThermalConstant2;
    ULONG SamplingPeriod;
    ULONG CurrentTemperature;
    ULONG PassiveTripPoint;
    ULONG ThermalStandbyTripPoint;
    ULONG CriticalTripPoint;
    UCHAR ActiveTripPointCount;
    ULONG ActiveTripPoint[10];
    ULONG S4TransitionTripPoint;
    ULONG MinimumThrottle;
    ULONG OverThrottleThreshold;
    ULONG PollingPeriod;
};

typedef struct _THERMAL_POLICY {
    ULONG Version;
    UCHAR WaitForUpdate;
    UCHAR Hibernate;
    UCHAR Critical;
    UCHAR ThermalStandby;
    ULONG ActivationReasons;
    ULONG PassiveLimit;
    ULONG ActiveLevel;
    UCHAR OverThrottled;
};

typedef struct _THERMAL_ZONE_COUNTERS {
    ULONG Temperature;
    ULONG ThrottleLimit;
    ULONG ThrottleReasons;
    ULONG TemperatureHighPrecision;
};

typedef struct _THREAD_ENERGY_VALUES {
    ULONG64 Cycles[4][2];
    ULONG64 AttributedCycles[4][2];
    ULONG64 WorkOnBehalfCycles[4][2];
    union _TIMELINE_BITMAP CpuTimeline;
};

typedef struct _THREAD_PERFORMANCE_DATA {
    USHORT Size;
    USHORT Version;
    struct _PROCESSOR_NUMBER ProcessorNumber;
    ULONG ContextSwitches;
    ULONG HwCountersCount;
    ULONG64 UpdateCount;
    ULONG64 WaitReasonBitMap;
    ULONG64 HardwareCounters;
    struct _COUNTER_READING CycleTime;
    struct _COUNTER_READING HwCounters[16];
};

typedef struct _TIME_FIELDS {
    SHORT Year;
    SHORT Month;
    SHORT Day;
    SHORT Hour;
    SHORT Minute;
    SHORT Second;
    SHORT Milliseconds;
    SHORT Weekday;
};

typedef struct _TOKEN {
    struct _TOKEN_SOURCE TokenSource;
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    struct _LUID ParentTokenId;
    union _LARGE_INTEGER ExpirationTime;
    struct _ERESOURCE *TokenLock;
    struct _LUID ModifiedId;
    struct _SEP_TOKEN_PRIVILEGES Privileges;
    struct _SEP_AUDIT_POLICY AuditPolicy;
    ULONG SessionId;
    ULONG UserAndGroupCount;
    ULONG RestrictedSidCount;
    ULONG VariableLength;
    ULONG DynamicCharged;
    ULONG DynamicAvailable;
    ULONG DefaultOwnerIndex;
    struct _SID_AND_ATTRIBUTES *UserAndGroups;
    struct _SID_AND_ATTRIBUTES *RestrictedSids;
    PVOID PrimaryGroup;
    PULONG DynamicPart;
    struct _ACL *DefaultDacl;
    enum _TOKEN_TYPE TokenType;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    ULONG TokenFlags;
    UCHAR TokenInUse;
    ULONG IntegrityLevelIndex;
    ULONG MandatoryPolicy;
    struct _SEP_LOGON_SESSION_REFERENCES *LogonSession;
    struct _LUID OriginatingLogonSession;
    struct _SID_AND_ATTRIBUTES_HASH SidHash;
    struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pSecurityAttributes;
    PVOID Package;
    struct _SID_AND_ATTRIBUTES *Capabilities;
    ULONG CapabilityCount;
    struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    struct _SEP_LOWBOX_NUMBER_ENTRY *LowboxNumberEntry;
    struct _SEP_CACHED_HANDLES_ENTRY *LowboxHandlesEntry;
    struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION *pClaimAttributes;
    PVOID TrustLevelSid;
    struct _TOKEN *TrustLinkedToken;
    PVOID IntegrityLevelSidValue;
    struct _SEP_SID_VALUES_BLOCK *TokenSidValues;
    struct _SEP_LUID_TO_INDEX_MAP_ENTRY *IndexEntry;
    struct _SEP_TOKEN_DIAG_TRACK_ENTRY *DiagnosticInfo;
    struct _SEP_CACHED_HANDLES_ENTRY *BnoIsolationHandlesEntry;
    PVOID SessionObject;
    ULONG64 VariablePart;
};

typedef struct _TOKEN_ACCESS_INFORMATION {
    struct _SID_AND_ATTRIBUTES_HASH *SidHash;
    struct _SID_AND_ATTRIBUTES_HASH *RestrictedSidHash;
    struct _TOKEN_PRIVILEGES *Privileges;
    struct _LUID AuthenticationId;
    enum _TOKEN_TYPE TokenType;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;
    ULONG Flags;
    ULONG AppContainerNumber;
    PVOID PackageSid;
    struct _SID_AND_ATTRIBUTES_HASH *CapabilitiesHash;
    PVOID TrustLevelSid;
    PVOID SecurityAttributes;
};

typedef struct _TOKEN_AUDIT_POLICY {
    UCHAR PerUserPolicy[30];
};

typedef struct _TOKEN_CONTROL {
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    struct _LUID ModifiedId;
    struct _TOKEN_SOURCE TokenSource;
};

typedef struct _TOKEN_MANDATORY_POLICY {
    ULONG Policy;
};

typedef struct _TOKEN_PRIVILEGES {
    ULONG PrivilegeCount;
    struct _LUID_AND_ATTRIBUTES Privileges[1];
};

typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    struct _LUID SourceIdentifier;
};

typedef struct _TP_CALLBACK_ENVIRON_V3 {
    ULONG Version;
    struct _TP_POOL *Pool;
    struct _TP_CLEANUP_GROUP *CleanupGroup;
    PVOID CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PVOID FinalizationCallback;
    union {
        ULONG Flags;
        struct {
            ULONG LongFunction : 1;
            ULONG Persistent : 1;
            ULONG Private : 30;
        } s;
    } u;
    enum _TP_CALLBACK_PRIORITY CallbackPriority;
    ULONG Size;
};

typedef struct _TP_CALLBACK_INSTANCE {
};

typedef struct _TP_CLEANUP_GROUP {
};

typedef struct _TP_POOL {
};

typedef struct _TRACE_ENABLE_INFO {
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserved1;
    USHORT LoggerId;
    ULONG EnableProperty;
    ULONG Reserved2;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
};

typedef struct _TRACE_LOGFILE_HEADER {
    ULONG BufferSize;
    ULONG Version;
    struct {
        UCHAR MajorVersion;
        UCHAR MinorVersion;
        UCHAR SubVersion;
        UCHAR SubMinorVersion;
    } VersionDetail;
    ULONG ProviderVersion;
    ULONG NumberOfProcessors;
    union _LARGE_INTEGER EndTime;
    ULONG TimerResolution;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG BuffersWritten;
    struct _GUID LogInstanceGuid;
    ULONG StartBuffers;
    ULONG PointerSize;
    ULONG EventsLost;
    ULONG CpuSpeedInMHz;
    PWCHAR LoggerName;
    PWCHAR LogFileName;
    struct _RTL_TIME_ZONE_INFORMATION TimeZone;
    union _LARGE_INTEGER BootTime;
    union _LARGE_INTEGER PerfFreq;
    union _LARGE_INTEGER StartTime;
    ULONG ReservedFlags;
    ULONG BuffersLost;
};

typedef struct _TRIAGE_9F_PNP {
    USHORT Signature;
    USHORT Revision;
    struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE *CompletionQueue;
    struct _TRIAGE_EX_WORK_QUEUE *DelayedWorkQueue;
    struct _TRIAGE_EX_WORK_QUEUE *DelayedIoWorkQueue;
};

typedef struct _TRIAGE_9F_POWER {
    USHORT Signature;
    USHORT Revision;
    struct _LIST_ENTRY *IrpList;
    struct _LIST_ENTRY *ThreadList;
    struct _TRIAGE_EX_WORK_QUEUE *DelayedWorkQueue;
    struct _TRIAGE_EX_WORK_QUEUE *DelayedIoWorkQueue;
};

typedef struct _TRIAGE_DEVICE_NODE {
    struct _TRIAGE_DEVICE_NODE *Sibling;
    struct _TRIAGE_DEVICE_NODE *Child;
    struct _TRIAGE_DEVICE_NODE *Parent;
    struct _TRIAGE_DEVICE_NODE *LastChild;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _UNICODE_STRING InstancePath;
    struct _UNICODE_STRING ServiceName;
    struct _IRP *PendingIrp;
    struct _TRIAGE_POP_FX_DEVICE *FxDevice;
};

typedef struct _TRIAGE_EX_WORK_QUEUE {
    struct _KPRIQUEUE WorkPriQueue;
};

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE {
    struct _LIST_ENTRY DispatchedList;
};

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST {
    struct _LIST_ENTRY ListEntry;
    struct _TRIAGE_DEVICE_NODE *DeviceNode;
};

typedef struct _TRIAGE_POP_FX_DEVICE {
    struct _LIST_ENTRY Link;
    struct _IRP *Irp;
    struct _TRIAGE_POP_IRP_DATA *IrpData;
    LONG Status;
    LONG PowerReqCall;
    LONG PowerNotReqCall;
    struct _TRIAGE_DEVICE_NODE *DeviceNode;
};

typedef struct _TRIAGE_POP_IRP_DATA {
    struct _LIST_ENTRY Link;
    struct _IRP *Irp;
    struct _DEVICE_OBJECT *Pdo;
};

typedef struct _TRUSTLET_COLLABORATION_ID {
    ULONG64 Value[2];
};

typedef struct _TRUSTLET_MAILBOX_KEY {
    ULONG64 SecretValue[2];
};

typedef struct _TXN_PARAMETER_BLOCK {
    USHORT Length;
    USHORT TxFsContext;
    PVOID TransactionObject;
};

typedef struct _TlgProviderMetadata_t {
    UCHAR Type;
    struct _GUID ProviderId;
    USHORT RemainingSize;
};

typedef struct _TlgProvider_t {
    ULONG LevelPlus1;
    PUSHORT ProviderMetadataPtr;
    ULONG64 KeywordAny;
    ULONG64 KeywordAll;
    ULONG64 RegHandle;
    PVOID EnableCallback;
    PVOID CallbackContext;
};

typedef struct _TraceLoggingMetadata_t {
    ULONG Signature;
    USHORT Size;
    UCHAR Version;
    UCHAR Flags;
    ULONG64 Magic;
};

typedef struct _UMS_CONTROL_BLOCK {
    struct _RTL_UMS_CONTEXT *UmsContext;
    struct _SINGLE_LIST_ENTRY *CompletionListEntry;
    struct _KEVENT *CompletionListEvent;
    ULONG ServiceSequenceNumber;
    struct _KQUEUE UmsQueue;
    struct _LIST_ENTRY QueueEntry;
    struct _RTL_UMS_CONTEXT *YieldingUmsContext;
    PVOID YieldingParam;
    PVOID UmsTeb;
    struct _KQUEUE *UmsAssociatedQueue;
    struct _LIST_ENTRY *UmsQueueListEntry;
    struct _KEVENT UmsWaitEvent;
    PVOID StagingArea;
    ULONG UmsPrimaryDeliveredContext : 1;
    ULONG UmsAssociatedQueueUsed : 1;
    ULONG UmsThreadParked : 1;
    ULONG UmsFlags;
};

typedef struct _UNEXPECTED_INTERRUPT {
    UCHAR PushImm;
    UCHAR Vector;
    UCHAR PushRbp;
    UCHAR JmpOp;
    LONG JmpOffset;
};

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWCHAR Buffer;
};

typedef struct _VACB {
    PVOID BaseAddress;
    struct _SHARED_CACHE_MAP *SharedCacheMap;
    union {
        union _LARGE_INTEGER FileOffset;
        USHORT ActiveCount;
        struct _LIST_ENTRY Links;
    } Overlay;
    struct _VACB_ARRAY_HEADER *ArrayHead;
};

typedef struct _VACB_ARRAY_HEADER {
    ULONG VacbArrayIndex;
    ULONG MappingCount;
    ULONG HighestMappedIndex;
    ULONG Reserved;
};

typedef struct _VACB_LEVEL_REFERENCE {
    LONG Reference;
    LONG SpecialReference;
};

typedef struct _VERIFIER_SHARED_EXPORT_THUNK {
};

typedef struct _VF_ADDRESS_RANGE {
    PUCHAR Start;
    PUCHAR End;
};

typedef struct _VF_AVL_TABLE {
    struct _RTL_AVL_TABLE RtlTable;
    struct _VF_AVL_TREE_NODE *ReservedNode;
    PVOID NodeToFree;
    LONG Lock;
};

typedef struct _VF_AVL_TREE {
    ULONG64 NodeRangeSize;
    ULONG64 NodeCount;
    struct _VF_AVL_TABLE *Tables;
    ULONG TablesNo;
    UCHAR UseSessionId;
    union {
        ULONG NodeSize;
        ULONG UseLookaside;
    } u1;
};

typedef struct _VF_AVL_TREE_NODE {
    PVOID p;
    ULONG64 RangeSize;
};

typedef struct _VF_AVL_TREE_NODE_EX {
    struct _VF_AVL_TREE_NODE Base;
    ULONG SessionId;
};

typedef struct _VF_DRIVER_IO_CALLBACKS {
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG AddDevice;
    PLONG MajorFunction[28];
};

typedef struct _VF_KE_CRITICAL_REGION_TRACE {
    struct _ETHREAD *Thread;
    PVOID StackTrace[7];
};

typedef struct _VF_POOL_TRACE {
    PVOID Address;
    ULONG64 Size;
    struct _ETHREAD *Thread;
    PVOID StackTrace[13];
};

typedef struct _VF_SUSPECT_DRIVER_ENTRY {
    struct _LIST_ENTRY Links;
    ULONG Loads;
    ULONG Unloads;
    struct _UNICODE_STRING BaseName;
};

typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS {
    struct _VERIFIER_SHARED_EXPORT_THUNK *SharedExportThunks;
    struct _VERIFIER_SHARED_EXPORT_THUNK *PoolSharedExportThunks;
    struct _VERIFIER_SHARED_EXPORT_THUNK *OrderDependentSharedExportThunks;
    struct _VERIFIER_SHARED_EXPORT_THUNK *XdvSharedExportThunks;
};

typedef struct _VF_TARGET_DRIVER {
    struct _VF_AVL_TREE_NODE_EX TreeNode;
    union {
        struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;
        struct {
            ULONG SnapSharedExportsFailed : 1;
            ULONG Spare : 31;
        } Flags;
    } u1;
    struct _VF_TARGET_VERIFIED_DRIVER_DATA *VerifiedData;
};

typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA {
    struct _VF_SUSPECT_DRIVER_ENTRY *SuspectDriverEntry;
    PVOID WMICallback;
    struct _LIST_ENTRY EtwHandlesListHead;
    union {
        struct {
            ULONG MissedEtwRegistration : 1;
            ULONG Spare : 31;
        } Flags;
        ULONG Whole;
    } u1;
    ULONG64 Signature;
    UCHAR SeSigningLevel;
    union _SLIST_HEADER PoolPageHeaders;
    union _SLIST_HEADER PoolTrackers;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    ULONG64 PagedBytes;
    ULONG64 NonPagedBytes;
    ULONG64 PeakPagedBytes;
    ULONG64 PeakNonPagedBytes;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsWithNoTag;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG64 LockedBytes;
    ULONG64 PeakLockedBytes;
    ULONG64 MappedLockedBytes;
    ULONG64 PeakMappedLockedBytes;
    ULONG64 MappedIoSpaceBytes;
    ULONG64 PeakMappedIoSpaceBytes;
    ULONG64 PagesForMdlBytes;
    ULONG64 PeakPagesForMdlBytes;
    ULONG64 ContiguousMemoryBytes;
    ULONG64 PeakContiguousMemoryBytes;
    struct _LIST_ENTRY ContiguousMemoryListHead;
    ULONG ExecutePoolTypes;
    ULONG ExecutePageProtections;
    ULONG ExecutePageMappings;
    ULONG ExecuteWriteSections;
    ULONG SectionAlignmentFailures;
    ULONG IATInExecutableSection;
};

typedef struct _VF_TRACKER {
    ULONG TrackerFlags;
    ULONG TrackerSize;
    ULONG TrackerIndex;
    ULONG TraceDepth;
};

typedef struct _VF_TRACKER_STAMP {
    PVOID Thread;
    UCHAR Flags : 8;
    UCHAR OldIrql : 8;
    UCHAR NewIrql : 8;
    UCHAR Processor : 8;
};

typedef struct _VF_WATCHDOG_IRP {
    struct _LIST_ENTRY ListEntry;
    struct _IRP *Irp;
    ULONG DueTickCount;
    UCHAR Inserted;
    CHAR TrackedStackLocation;
    USHORT CancelTimeoutTicks;
};

typedef struct _VIRTUAL_EFI_RUNTIME_SERVICES {
    ULONG64 GetTime;
    ULONG64 SetTime;
    ULONG64 GetWakeupTime;
    ULONG64 SetWakeupTime;
    ULONG64 SetVirtualAddressMap;
    ULONG64 ConvertPointer;
    ULONG64 GetVariable;
    ULONG64 GetNextVariableName;
    ULONG64 SetVariable;
    ULONG64 GetNextHighMonotonicCount;
    ULONG64 ResetSystem;
    ULONG64 UpdateCapsule;
    ULONG64 QueryCapsuleCapabilities;
    ULONG64 QueryVariableInfo;
};

typedef struct _VI_DEADLOCK_GLOBALS {
    LONG64 TimeAcquire;
    LONG64 TimeRelease;
    struct _LIST_ENTRY *ResourceDatabase;
    ULONG64 ResourceDatabaseCount;
    struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];
    struct _LIST_ENTRY *ThreadDatabase;
    ULONG64 ThreadDatabaseCount;
    struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];
    ULONG AllocationFailures;
    ULONG NodesTrimmedBasedOnAge;
    ULONG NodesTrimmedBasedOnCount;
    ULONG NodesSearched;
    ULONG MaxNodesSearched;
    ULONG SequenceNumber;
    ULONG RecursionDepthLimit;
    ULONG SearchedNodesLimit;
    ULONG DepthLimitHits;
    ULONG SearchLimitHits;
    ULONG StackLimitHits;
    ULONG ABC_ACB_Skipped;
    ULONG OutOfOrderReleases;
    ULONG NodesReleasedOutOfOrder;
    ULONG TotalReleases;
    ULONG RootNodesDeleted;
    ULONG ForgetHistoryCounter;
    PVOID Instigator;
    ULONG NumberOfParticipants;
    struct _VI_DEADLOCK_NODE *Participant[32];
    LONG ChildrenCountWatermark;
    enum _KERNEL_STACK_LIMITS StackType;
    ULONG64 StackLowLimit;
    ULONG64 StackHighLimit;
};

typedef struct _VI_DEADLOCK_NODE {
    struct _VI_DEADLOCK_NODE *Parent;
    struct _LIST_ENTRY ChildrenList;
    struct _LIST_ENTRY SiblingsList;
    struct _LIST_ENTRY ResourceList;
    struct _LIST_ENTRY FreeListEntry;
    struct _VI_DEADLOCK_RESOURCE *Root;
    struct _VI_DEADLOCK_THREAD *ThreadEntry;
    union {
        ULONG Active : 1;
        ULONG OnlyTryAcquireUsed : 1;
        ULONG ReleasedOutOfOrder : 1;
        ULONG SequenceNumber : 29;
        ULONG Whole;
    } u1;
    LONG ChildrenCount;
    PVOID StackTrace[8];
    PVOID ParentStackTrace[8];
};

typedef struct _VI_DEADLOCK_RESOURCE {
    enum _VI_DEADLOCK_RESOURCE_TYPE Type;
    ULONG NodeCount : 16;
    ULONG RecursionCount : 16;
    PVOID ResourceAddress;
    struct _VI_DEADLOCK_THREAD *ThreadOwner;
    struct _LIST_ENTRY ResourceList;
    struct _LIST_ENTRY HashChainList;
    struct _LIST_ENTRY FreeListEntry;
    PVOID StackTrace[8];
    PVOID LastAcquireTrace[8];
    PVOID LastReleaseTrace[8];
};

typedef struct _VI_DEADLOCK_THREAD {
    struct _KTHREAD *Thread;
    struct _VI_DEADLOCK_NODE *CurrentSpinNode;
    struct _VI_DEADLOCK_NODE *CurrentOtherNode;
    struct _LIST_ENTRY ListEntry;
    struct _LIST_ENTRY FreeListEntry;
    ULONG NodeCount;
    ULONG PagingCount;
    UCHAR ThreadUsesEresources;
};

typedef struct _VI_FAULT_TRACE {
    struct _ETHREAD *Thread;
    PVOID StackTrace[8];
};

typedef struct _VI_POOL_ENTRY {
    struct _VI_POOL_PAGE_HEADER PageHeader;
    struct _VI_POOL_ENTRY_INUSE InUse;
    struct _SLIST_ENTRY *NextFree;
};

typedef struct _VI_POOL_ENTRY_INUSE {
    PVOID VirtualAddress;
    PVOID CallingAddress;
    ULONG64 NumberOfBytes;
    ULONG64 Tag;
};

typedef struct _VI_POOL_PAGE_HEADER {
    struct _SLIST_ENTRY *NextPage;
    PVOID VerifierEntry;
    ULONG64 Signature;
};

typedef struct _VI_TRACK_IRQL {
    PVOID Thread;
    UCHAR OldIrql;
    UCHAR NewIrql;
    USHORT Processor;
    ULONG TickCount;
    PVOID StackTrace[5];
};

typedef struct _VI_VERIFIER_ISSUE {
    ULONG64 IssueType;
    PVOID Address;
    ULONG64 Parameters[2];
};

typedef struct _VOLUME_CACHE_MAP {
    SHORT NodeTypeCode;
    SHORT NodeByteCode;
    ULONG UseCount;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _LIST_ENTRY VolumeCacheMapLinks;
    ULONG64 DirtyPages;
    struct _LOG_HANDLE_CONTEXT LogHandleContext;
    ULONG Flags;
    ULONG PagesQueuedToDisk;
    ULONG LoggedPagesQueuedToDisk;
};

typedef struct _VPB {
    SHORT Type;
    SHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[32];
};

typedef struct _WAITING_IRP {
    struct _LIST_ENTRY Links;
    struct _IRP *Irp;
    PVOID CompletionRoutine;
    PVOID Context;
    struct _KEVENT *Event;
    ULONG Information;
    UCHAR BreakAllRH;
    UCHAR OplockBreakNotify;
    struct _FILE_OBJECT *FileObject;
};

typedef struct _WAIT_CONTEXT_BLOCK {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct _LIST_ENTRY DmaWaitEntry;
    ULONG NumberOfChannels;
    ULONG SyncCallback : 1;
    ULONG DmaContext : 1;
    ULONG ZeroMapRegisters : 1;
    ULONG Reserved : 9;
    ULONG NumberOfRemapPages : 20;
    enum _IO_ALLOCATION_ACTION *DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    struct _KDPC *BufferChainingDpc;
};

typedef struct _WHEAP_ERROR_RECORD_WRAPPER {
    struct _LIST_ENTRY WorkEntry;
    ULONG Length;
    ULONG ProcessorNumber;
    union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;
    LONG InUse;
    struct _WHEAP_ERROR_SOURCE *ErrorSource;
    struct _WHEA_ERROR_RECORD ErrorRecord;
};

typedef struct _WHEAP_ERROR_SOURCE {
    struct _LIST_ENTRY ListEntry;
    ULONG FailedAllocations;
    ULONG PlatformErrorSourceId;
    LONG ErrorCount;
    ULONG RecordCount;
    ULONG RecordLength;
    ULONG PoolTag;
    enum _WHEA_ERROR_SOURCE_TYPE Type;
    struct _WHEAP_ERROR_RECORD_WRAPPER *Records;
    PVOID Context;
    ULONG SectionCount;
    ULONG SectionLength;
    union _LARGE_INTEGER TickCountAtLastError;
    ULONG AccumulatedErrors;
    ULONG TotalErrors;
    UCHAR Deferred;
    struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;
};

typedef struct _WHEAP_ERROR_SOURCE_TABLE {
    ULONG Signature;
    LONG Count;
    struct _LIST_ENTRY Items;
    struct _KEVENT InsertLock;
};

typedef struct _WHEAP_INFO_BLOCK {
    ULONG ErrorSourceCount;
    struct _WHEAP_ERROR_SOURCE_TABLE *ErrorSourceTable;
    struct _WHEAP_WORK_QUEUE *WorkQueue;
};

typedef struct _WHEAP_WORK_QUEUE {
    struct _LIST_ENTRY ListHead;
    ULONG64 ListLock;
    LONG ItemCount;
    struct _KDPC Dpc;
    struct _WORK_QUEUE_ITEM WorkItem;
    PVOID WorkRoutine;
};

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG SecondaryUncorrectableErrorMask;
    ULONG SecondaryUncorrectableErrorSev;
    ULONG SecondaryCapsAndControl;
};

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
};

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG RootErrorCommand;
};

typedef struct _WHEA_ERROR_PACKET_V2 {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    struct _GUID NotifyType;
    ULONG64 Context;
    enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
    ULONG Reserved1;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG PshedDataOffset;
    ULONG PshedDataLength;
};

typedef struct _WHEA_ERROR_RECORD {
    struct _WHEA_ERROR_RECORD_HEADER Header;
    struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
};

typedef struct _WHEA_ERROR_RECORD_HEADER {
    ULONG Signature;
    union _WHEA_REVISION Revision;
    ULONG SignatureEnd;
    USHORT SectionCount;
    enum _WHEA_ERROR_SEVERITY Severity;
    union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
    ULONG Length;
    union _WHEA_TIMESTAMP Timestamp;
    struct _GUID PlatformId;
    struct _GUID PartitionId;
    struct _GUID CreatorId;
    struct _GUID NotifyType;
    ULONG64 RecordId;
    union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
    union _WHEA_PERSISTENCE_INFO PersistenceInfo;
    UCHAR Reserved[12];
};

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
    ULONG SectionOffset;
    ULONG SectionLength;
    union _WHEA_REVISION Revision;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
    UCHAR Reserved;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
    struct _GUID SectionType;
    struct _GUID FRUId;
    enum _WHEA_ERROR_SEVERITY SectionSeverity;
    CHAR FRUText[20];
};

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR {
    ULONG Length;
    ULONG Version;
    enum _WHEA_ERROR_SOURCE_TYPE Type;
    enum _WHEA_ERROR_SOURCE_STATE State;
    ULONG MaxRawDataLength;
    ULONG NumRecordsToPreallocate;
    ULONG MaxSectionsPerRecord;
    ULONG ErrorSourceId;
    ULONG PlatformErrorSourceId;
    ULONG Flags;
    union {
        struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
        struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
        struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
        struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
        struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
        struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
        struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
        struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
        struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;
    } Info;
};

typedef struct _WHEA_EVENT_LOG_ENTRY {
    struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
};

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
    ULONG OwnerTag;
    enum _WHEA_EVENT_LOG_ENTRY_ID Id;
    union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
    ULONG PayloadLength;
};

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR {
    USHORT Type;
    UCHAR Reserved;
    UCHAR Enabled;
    ULONG ErrStatusBlockLength;
    ULONG RelatedErrorSourceId;
    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    union _LARGE_INTEGER ErrStatusAddress;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
};

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
    USHORT Type;
    UCHAR Reserved;
    UCHAR Enabled;
    ULONG ErrStatusBlockLength;
    ULONG RelatedErrorSourceId;
    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    union _LARGE_INTEGER ErrStatusAddress;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
    UCHAR ReadAckAddressSpaceID;
    UCHAR ReadAckAddressBitWidth;
    UCHAR ReadAckAddressBitOffset;
    UCHAR ReadAckAddressAccessSize;
    union _LARGE_INTEGER ReadAckAddress;
    ULONG64 ReadAckPreserveMask;
    ULONG64 ReadAckWriteMask;
};

typedef struct _WHEA_IPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_CPE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_MCA_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_MEMORY_ERROR_SECTION {
    union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    ULONG64 PhysicalAddress;
    ULONG64 PhysicalAddressMask;
    USHORT Node;
    USHORT Card;
    USHORT Module;
    USHORT Bank;
    USHORT Device;
    USHORT Row;
    USHORT Column;
    USHORT BitPosition;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 TargetId;
    UCHAR ErrorType;
    UCHAR Extended;
    USHORT RankNumber;
    USHORT CardHandle;
    USHORT ModuleHandle;
};

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR {
    UCHAR Type;
    UCHAR Length;
    union _WHEA_NOTIFICATION_FLAGS Flags;
    union {
        struct {
            ULONG PollInterval;
        } Polled;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Interrupt;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } LocalInterrupt;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sci;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Nmi;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sea;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sei;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Gsiv;
    } u;
};

typedef struct _WHEA_PCI_SLOT_NUMBER {
    union {
        struct {
            ULONG DeviceNumber : 5;
            ULONG FunctionNumber : 3;
            ULONG Reserved : 24;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION {
    union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;
    UCHAR ProcessorType;
    UCHAR InstructionSet;
    UCHAR ErrorType;
    UCHAR Operation;
    UCHAR Flags;
    UCHAR Level;
    USHORT Reserved;
    ULONG64 CPUVersion;
    UCHAR CPUBrandString[128];
    ULONG64 ProcessorId;
    ULONG64 TargetAddress;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 InstructionPointer;
};

typedef struct _WHEA_RECOVERY_CONTEXT {
    struct {
        ULONG64 Address;
        UCHAR Consumed;
        USHORT ErrorCode;
        UCHAR ErrorIpValid;
        UCHAR RestartIpValid;
    } MemoryError;
    ULONG64 PartitionId;
    ULONG VpIndex;
};

typedef struct _WHEA_XPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    ULONG Reserved;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_MCE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    union _XPF_MCE_FLAGS Flags;
    ULONG64 MCG_Capability;
    ULONG64 MCG_GlobalControl;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR {
    UCHAR BankNumber;
    UCHAR ClearOnInitialization;
    UCHAR StatusDataFormat;
    union _XPF_MC_BANK_FLAGS Flags;
    ULONG ControlMsr;
    ULONG StatusMsr;
    ULONG AddressMsr;
    ULONG MiscMsr;
    ULONG64 ControlData;
};

typedef struct _WHEA_XPF_NMI_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
};

typedef struct _WMI_BUFFER_HEADER {
    ULONG BufferSize;
    ULONG SavedOffset;
    ULONG CurrentOffset;
    LONG ReferenceCount;
    union _LARGE_INTEGER TimeStamp;
    LONG64 SequenceNumber;
    ULONG64 ClockType : 3;
    ULONG64 Frequency : 61;
    struct _SINGLE_LIST_ENTRY SlistEntry;
    struct _WMI_BUFFER_HEADER *NextBuffer;
    struct _ETW_BUFFER_CONTEXT ClientContext;
    enum _ETW_BUFFER_STATE State;
    ULONG Offset;
    USHORT BufferFlag;
    USHORT BufferType;
    ULONG Padding1[4];
    struct _ETW_REF_CLOCK ReferenceTime;
    struct _LIST_ENTRY GlobalEntry;
    PVOID Pointer0;
    PVOID Pointer1;
};

typedef struct _WMI_LOGGER_CONTEXT {
    ULONG LoggerId;
    ULONG BufferSize;
    ULONG MaximumEventSize;
    ULONG LoggerMode;
    LONG AcceptNewEvents;
    ULONG EventMarker[2];
    ULONG ErrorMarker;
    ULONG SizeMask;
    PLONG64 GetCpuClock;
    struct _ETHREAD *LoggerThread;
    LONG LoggerStatus;
    ULONG FailureReason;
    struct _ETW_BUFFER_QUEUE BufferQueue;
    struct _ETW_BUFFER_QUEUE OverflowQueue;
    struct _LIST_ENTRY GlobalList;
    struct _LIST_ENTRY DebugIdTrackingList;
    struct _ETW_DECODE_CONTROL_ENTRY *DecodeControlList;
    ULONG DecodeControlCount;
    struct _WMI_BUFFER_HEADER *BatchedBufferList;
    struct _EX_FAST_REF CurrentBuffer;
    struct _UNICODE_STRING LoggerName;
    struct _UNICODE_STRING LogFileName;
    struct _UNICODE_STRING LogFilePattern;
    struct _UNICODE_STRING NewLogFileName;
    ULONG ClockType;
    ULONG LastFlushedBuffer;
    ULONG FlushTimer;
    ULONG FlushThreshold;
    union _LARGE_INTEGER ByteOffset;
    ULONG MinimumBuffers;
    LONG BuffersAvailable;
    LONG NumberOfBuffers;
    ULONG MaximumBuffers;
    ULONG EventsLost;
    LONG PeakBuffersCount;
    ULONG BuffersWritten;
    ULONG LogBuffersLost;
    ULONG RealTimeBuffersDelivered;
    ULONG RealTimeBuffersLost;
    PLONG SequencePtr;
    ULONG LocalSequence;
    struct _GUID InstanceGuid;
    ULONG MaximumFileSize;
    LONG FileCounter;
    enum _POOL_TYPE PoolType;
    struct _ETW_REF_CLOCK ReferenceTime;
    LONG CollectionOn;
    ULONG ProviderInfoSize;
    struct _LIST_ENTRY Consumers;
    ULONG NumConsumers;
    struct _ETW_REALTIME_CONSUMER *TransitionConsumer;
    PVOID RealtimeLogfileHandle;
    struct _UNICODE_STRING RealtimeLogfileName;
    union _LARGE_INTEGER RealtimeWriteOffset;
    union _LARGE_INTEGER RealtimeReadOffset;
    union _LARGE_INTEGER RealtimeLogfileSize;
    ULONG64 RealtimeLogfileUsage;
    ULONG64 RealtimeMaximumFileSize;
    ULONG RealtimeBuffersSaved;
    struct _ETW_REF_CLOCK RealtimeReferenceTime;
    enum _ETW_RT_EVENT_LOSS NewRTEventsLost;
    struct _KEVENT LoggerEvent;
    struct _KEVENT FlushEvent;
    struct _KTIMER FlushTimeOutTimer;
    struct _KDPC LoggerDpc;
    struct _KMUTANT LoggerMutex;
    struct _EX_PUSH_LOCK LoggerLock;
    ULONG64 BufferListSpinLock;
    struct _EX_PUSH_LOCK BufferListPushLock;
    struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;
    struct _TOKEN_ACCESS_INFORMATION *TokenAccessInformation;
    struct _EX_FAST_REF SecurityDescriptor;
    union _LARGE_INTEGER StartTime;
    PVOID LogFileHandle;
    LONG64 BufferSequenceNumber;
    ULONG Flags;
    ULONG Persistent : 1;
    ULONG AutoLogger : 1;
    ULONG FsReady : 1;
    ULONG RealTime : 1;
    ULONG Wow : 1;
    ULONG KernelTrace : 1;
    ULONG NoMoreEnable : 1;
    ULONG StackTracing : 1;
    ULONG ErrorLogged : 1;
    ULONG RealtimeLoggerContextFreed : 1;
    ULONG PebsTracing : 1;
    ULONG PmcCounters : 1;
    ULONG PageAlignBuffers : 1;
    ULONG StackLookasideListAllocated : 1;
    ULONG SecurityTrace : 1;
    ULONG LastBranchTracing : 1;
    ULONG SystemLoggerIndex : 8;
    ULONG StackCaching : 1;
    ULONG ProviderTracking : 1;
    ULONG ProcessorTrace : 1;
    ULONG QpcDeltaTracking : 1;
    ULONG SpareFlags2 : 4;
    ULONG RequestFlag;
    ULONG DbgRequestNewFile : 1;
    ULONG DbgRequestUpdateFile : 1;
    ULONG DbgRequestFlush : 1;
    ULONG DbgRequestDisableRealtime : 1;
    ULONG DbgRequestDisconnectConsumer : 1;
    ULONG DbgRequestConnectConsumer : 1;
    ULONG DbgRequestNotifyConsumer : 1;
    ULONG DbgRequestUpdateHeader : 1;
    ULONG DbgRequestDeferredFlush : 1;
    ULONG DbgRequestDeferredFlushTimer : 1;
    ULONG DbgRequestFlushTimer : 1;
    ULONG DbgRequestUpdateDebugger : 1;
    ULONG DbgSpareRequestFlags : 20;
    struct _ETW_STACK_TRACE_BLOCK StackTraceBlock;
    struct _RTL_BITMAP HookIdMap;
    struct _ETW_STACK_CACHE *StackCache;
    struct _ETW_PMC_SUPPORT *PmcData;
    struct _ETW_LBR_SUPPORT *LbrData;
    struct _ETW_IPT_SUPPORT *IptData;
    struct _LIST_ENTRY BinaryTrackingList;
    struct _WMI_BUFFER_HEADER **ScratchArray;
    struct _DISALLOWED_GUIDS DisallowedGuids;
    LONG64 RelativeTimerDueTime;
    struct _PERIODIC_CAPTURE_STATE_GUIDS PeriodicCaptureStateGuids;
    struct _EX_TIMER *PeriodicCaptureStateTimer;
    enum _ETW_PERIODIC_TIMER_STATE PeriodicCaptureStateTimerState;
    struct _ETW_SOFT_RESTART_CONTEXT *SoftRestartContext;
    struct _ETW_SILODRIVERSTATE *SiloState;
    struct _WORK_QUEUE_ITEM CompressionWorkItem;
    LONG CompressionWorkItemState;
    struct _EX_PUSH_LOCK CompressionLock;
    struct _WMI_BUFFER_HEADER *CompressionTarget;
    PVOID CompressionWorkspace;
    LONG CompressionOn;
    ULONG CompressionRatioGuess;
    ULONG PartialBufferCompressionLevel;
    enum ETW_COMPRESSION_RESUMPTION_MODE CompressionResumptionMode;
    struct _SINGLE_LIST_ENTRY PlaceholderList;
    struct _KDPC CompressionDpc;
    union _LARGE_INTEGER LastBufferSwitchTime;
    union _LARGE_INTEGER BufferWriteDuration;
    union _LARGE_INTEGER BufferCompressDuration;
    LONG64 ReferenceQpcDelta;
    struct _ETW_EVENT_CALLBACK_CONTEXT *CallbackContext;
};

typedef struct _WNF_LOCK {
    struct _EX_PUSH_LOCK PushLock;
};

typedef struct _WNF_SCOPE_MAP {
};

typedef struct _WNF_SILODRIVERSTATE {
    struct _WNF_SCOPE_MAP *ScopeMap;
    PVOID PermanentNameStoreRootKey;
    PVOID PersistentNameStoreRootKey;
    LONG64 PermanentNameSequenceNumber;
    struct _WNF_LOCK PermanentNameSequenceNumberLock;
    LONG64 PermanentNameSequenceNumberPool;
    LONG64 RuntimeNameSequenceNumber;
};

typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
};

typedef struct _WORK_QUEUE_ENTRY {
    struct _LIST_ENTRY WorkQueueLinks;
    union {
        struct {
            struct _FILE_OBJECT *FileObject;
            PVOID DiskIoAttribution;
        } Read;
        struct {
            struct _SHARED_CACHE_MAP *SharedCacheMap;
        } Write;
        struct {
            struct _KEVENT *Event;
        } Event;
        struct {
            ULONG Reason;
        } Notification;
        struct {
            struct _SHARED_CACHE_MAP *SharedCacheMap;
            struct _IO_STATUS_BLOCK *IoStatus;
            struct _KEVENT CallerWaitEvent;
            UCHAR IsLowPriWriteBehind;
        } LowPriWrite;
        struct {
            struct _SHARED_CACHE_MAP *SharedCacheMap;
            union _LARGE_INTEGER FileOffset;
            struct _FILE_OBJECT *FileObject;
            ULONG Length;
            struct _SINGLE_LIST_ENTRY *PrefetchList;
            ULONG PrefetchPagePriority;
            struct _MDL *Mdl;
            struct _IO_STATUS_BLOCK *IoStatusBlock;
            struct _CC_ASYNC_READ_CONTEXT *CallbackContext;
            struct _EPROCESS *OriginatingProcess;
            struct _ETHREAD *IoIssuerThread;
            PVOID DiskIoAttribution;
            CHAR RequestorMode;
            ULONG NestingLevel;
        } AsyncRead;
    } Parameters;
    UCHAR Function;
    struct _CC_PARTITION *Partition;
};

typedef struct _WORK_QUEUE_ITEM {
    struct _LIST_ENTRY List;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _WRITE_BEHIND_THROUGHPUT {
    ULONG PagesYetToWrite;
    ULONG Throughput;
};

typedef struct _X86_DBGKD_CONTROL_SET {
    ULONG TraceFlag;
    ULONG Dr7;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _X86_KTRAP_FRAME {
    ULONG DbgEbp;
    ULONG DbgEip;
    ULONG DbgArgMark;
    ULONG DbgArgPointer;
    ULONG TempSegCs;
    ULONG TempEsp;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    ULONG SegGs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    UCHAR PreviousPreviousMode;
    UCHAR EntropyQueueDpc;
    UCHAR Reserved[2];
    ULONG ExceptionList;
    ULONG SegFs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Ebp;
    ULONG ErrCode;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG HardwareEsp;
    ULONG HardwareSegSs;
    ULONG V86Es;
    ULONG V86Ds;
    ULONG V86Fs;
    ULONG V86Gs;
};

typedef struct _X86_KTRAP_FRAME_BLUE {
    ULONG DbgEbp;
    ULONG DbgEip;
    ULONG DbgArgMark;
    USHORT TempSegCs;
    UCHAR Logging;
    UCHAR FrameType;
    ULONG TempEsp;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    ULONG SegGs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    UCHAR PreviousPreviousMode;
    UCHAR EntropyQueueDpc;
    UCHAR Reserved[2];
    ULONG MxCsr;
    ULONG ExceptionList;
    ULONG SegFs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Ebp;
    ULONG ErrCode;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG HardwareEsp;
    ULONG HardwareSegSs;
    ULONG V86Es;
    ULONG V86Ds;
    ULONG V86Fs;
    ULONG V86Gs;
};

typedef struct _XSAVE_AREA {
    struct _XSAVE_FORMAT LegacyState;
    struct _XSAVE_AREA_HEADER Header;
};

typedef struct _XSAVE_AREA_HEADER {
    ULONG64 Mask;
    ULONG64 CompactionMask;
    ULONG64 Reserved2[6];
};

typedef struct _XSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    UCHAR TagWord;
    UCHAR Reserved1;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    USHORT ErrorSelector;
    USHORT Reserved2;
    ULONG DataOffset;
    USHORT DataSelector;
    USHORT Reserved3;
    ULONG MxCsr;
    ULONG MxCsr_Mask;
    struct _M128A FloatRegisters[8];
    struct _M128A XmmRegisters[16];
    UCHAR Reserved4[96];
};

typedef struct _XSTATE_CONFIGURATION {
    ULONG64 EnabledFeatures;
    ULONG64 EnabledVolatileFeatures;
    ULONG Size;
    ULONG ControlFlags;
    ULONG OptimizedSave : 1;
    ULONG CompactionEnabled : 1;
    struct _XSTATE_FEATURE Features[64];
    ULONG64 EnabledSupervisorFeatures;
    ULONG64 AlignedFeatures;
    ULONG AllFeatureSize;
    ULONG AllFeatures[64];
    ULONG64 EnabledUserVisibleSupervisorFeatures;
};

typedef struct _XSTATE_CONTEXT {
    ULONG64 Mask;
    ULONG Length;
    ULONG Reserved1;
    struct _XSAVE_AREA *Area;
    PVOID Buffer;
};

typedef struct _XSTATE_FEATURE {
    ULONG Offset;
    ULONG Size;
};

typedef struct _XSTATE_SAVE {
    struct _XSTATE_SAVE *Prev;
    struct _KTHREAD *Thread;
    UCHAR Level;
    struct _XSTATE_CONTEXT XStateContext;
};

typedef struct _flags {
    UCHAR Removable : 1;
    UCHAR GroupAssigned : 1;
    UCHAR GroupCommitted : 1;
    UCHAR GroupAssignmentFixed : 1;
    UCHAR Fill : 4;
};

typedef struct _iobuf {
    PCHAR _ptr;
    LONG _cnt;
    PCHAR _base;
    LONG _flag;
    LONG _file;
    LONG _charbuf;
    LONG _bufsiz;
    PCHAR _tmpfname;
};

typedef struct tagSWITCH_CONTEXT {
    struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute;
    struct tagSWITCH_CONTEXT_DATA Data;
};

typedef struct tagSWITCH_CONTEXT_ATTRIBUTE {
    ULONG64 ulContextUpdateCounter;
    LONG fAllowContextUpdate;
    LONG fEnableTrace;
    ULONG64 EtwHandle;
};

typedef struct tagSWITCH_CONTEXT_DATA {
    ULONG64 ullOsMaxVersionTested;
    ULONG ulTargetPlatform;
    ULONG64 ullContextMinimum;
    struct _GUID guPlatform;
    struct _GUID guMinPlatform;
    ULONG ulContextSource;
    ULONG ulElementCount;
    struct _GUID guElements[48];
};

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT SecondaryUncorrectableErrorMaskRW : 1;
    USHORT SecondaryUncorrectableErrorSevRW : 1;
    USHORT SecondaryCapsAndControlRW : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT Reserved : 12;
    USHORT AsUSHORT;
};

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT RootErrorCommandRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _CLS_LSN {
    struct {
        ULONG idxRecord;
        ULONG cidContainer;
    } offset;
    ULONG64 ullOffset;
};

typedef union _CM_TRANS_PTR {
    ULONG64 LightWeight : 1;
    PVOID TransPtr;
};

typedef union _CPU_INFO {
    ULONG AsUINT32[4];
    ULONG Eax;
    ULONG Ebx;
    ULONG Ecx;
    ULONG Edx;
};

typedef union _CVDD {
    ULONG Signature;
    struct _NB10 NB10;
    struct _RSDS RsDs;
};

typedef union _ENERGY_STATE_DURATION {
    ULONG64 Value;
    ULONG LastChangeTime;
    ULONG Duration : 31;
    ULONG IsInState : 1;
};

typedef union _FILE_SEGMENT_ELEMENT {
    PVOID Buffer;
    ULONG64 Alignment;
};

typedef union _FS_FILTER_PARAMETERS {
    struct {
        union _LARGE_INTEGER *EndingOffset;
        struct _ERESOURCE **ResourceToRelease;
    } AcquireForModifiedPageWriter;
    struct {
        struct _ERESOURCE *ResourceToRelease;
    } ReleaseForModifiedPageWriter;
    struct {
        enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;
        ULONG PageProtection;
        struct _FS_FILTER_SECTION_SYNC_OUTPUT *OutputInformation;
    } AcquireForSectionSynchronization;
    struct {
        enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;
        UCHAR SafeToRecurse;
    } NotifyStreamFileObject;
    struct {
        struct _IRP *Irp;
        PVOID FileInformation;
        PULONG Length;
        enum _FILE_INFORMATION_CLASS FileInformationClass;
        LONG CompletionStatus;
    } QueryOpen;
    struct {
        PVOID Argument1;
        PVOID Argument2;
        PVOID Argument3;
        PVOID Argument4;
        PVOID Argument5;
    } Others;
};

typedef union _HAL_UNMASKED_INTERRUPT_FLAGS {
    USHORT SecondaryInterrupt : 1;
    USHORT Reserved : 15;
    USHORT AsUSHORT;
};

typedef union _HANDLE_TABLE_ENTRY {
    LONG64 VolatileLowValue;
    LONG64 LowValue;
    struct _HANDLE_TABLE_ENTRY_INFO *InfoTable;
    LONG64 HighValue;
    union _HANDLE_TABLE_ENTRY *NextFreeHandleEntry;
    struct _EXHANDLE LeafHandleValue;
    LONG64 RefCountField;
    ULONG64 Unlocked : 1;
    ULONG64 RefCnt : 16;
    ULONG64 Attributes : 3;
    ULONG64 ObjectPointerBits : 44;
    ULONG GrantedAccessBits : 25;
    ULONG NoRightsUpgrade : 1;
    ULONG Spare1 : 6;
    ULONG Spare2;
};

typedef union _HV_PARTITION_PRIVILEGE_MASK {
    ULONG64 AsUINT64;
    ULONG64 AccessVpRunTimeReg : 1;
    ULONG64 AccessPartitionReferenceCounter : 1;
    ULONG64 AccessSynicRegs : 1;
    ULONG64 AccessSyntheticTimerRegs : 1;
    ULONG64 AccessIntrCtrlRegs : 1;
    ULONG64 AccessHypercallMsrs : 1;
    ULONG64 AccessVpIndex : 1;
    ULONG64 AccessResetReg : 1;
    ULONG64 AccessStatsReg : 1;
    ULONG64 AccessPartitionReferenceTsc : 1;
    ULONG64 AccessGuestIdleReg : 1;
    ULONG64 AccessFrequencyRegs : 1;
    ULONG64 AccessDebugRegs : 1;
    ULONG64 AccessReenlightenmentControls : 1;
    ULONG64 AccessRootSchedulerReg : 1;
    ULONG64 Reserved1 : 17;
    ULONG64 CreatePartitions : 1;
    ULONG64 AccessPartitionId : 1;
    ULONG64 AccessMemoryPool : 1;
    ULONG64 AdjustMessageBuffers : 1;
    ULONG64 PostMessages : 1;
    ULONG64 SignalEvents : 1;
    ULONG64 CreatePort : 1;
    ULONG64 ConnectPort : 1;
    ULONG64 AccessStats : 1;
    ULONG64 Reserved2 : 2;
    ULONG64 Debugging : 1;
    ULONG64 CpuManagement : 1;
    ULONG64 ConfigureProfiler : 1;
    ULONG64 AccessVpExitTracing : 1;
    ULONG64 EnableExtendedGvaRangesForFlushVirtualAddressList : 1;
    ULONG64 AccessVsm : 1;
    ULONG64 AccessVpRegisters : 1;
    ULONG64 UnusedBit : 1;
    ULONG64 FastHypercallOutput : 1;
    ULONG64 EnableExtendedHypercalls : 1;
    ULONG64 StartVirtualProcessor : 1;
    ULONG64 Isolation : 1;
    ULONG64 Reserved3 : 9;
};

typedef union _INVPCID_DESCRIPTOR {
    struct {
        ULONG64 Pcid : 12;
        ULONG64 Reserved : 52;
        ULONG64 EntirePcid;
        ULONG64 Virtual;
    } IndividualAddress;
    struct {
        ULONG64 Pcid : 12;
        ULONG64 Reserved : 52;
        ULONG64 EntirePcid;
        ULONG64 Reserved2;
    } SingleContext;
    struct {
        ULONG64 Reserved[2];
    } AllContextAndGlobals;
    struct {
        ULONG64 Reserved[2];
    } AllContext;
};

typedef union _IOMMU_SVM_CAPABILITIES {
    ULONG AtsCapability : 1;
    ULONG PriCapability : 1;
    ULONG PasidCapability : 1;
    struct {
        ULONG PasidMaxWidth : 5;
        ULONG PasidExePerm : 1;
        ULONG PasidPrivMode : 1;
        ULONG AtsPageAlignedRequest : 1;
        ULONG AtsGlobalInvalidate : 1;
        ULONG AtsInvalidateQueueDepth : 5;
    } CapReg;
    ULONG Rsvd : 15;
    ULONG AsULONG;
};

typedef union _JOBOBJECT_ENERGY_TRACKING_STATE {
    ULONG64 Value;
    ULONG UpdateMask;
    ULONG DesiredState;
};

typedef union _KALPC_DIRECT_EVENT {
    ULONG64 Event;
    ULONG64 Referenced : 1;
    ULONG64 Reserved : 63;
};

typedef union _KEXECUTE_OPTIONS {
    UCHAR ExecuteDisable : 1;
    UCHAR ExecuteEnable : 1;
    UCHAR DisableThunkEmulation : 1;
    UCHAR Permanent : 1;
    UCHAR ExecuteDispatchEnable : 1;
    UCHAR ImageDispatchEnable : 1;
    UCHAR DisableExceptionChainValidation : 1;
    UCHAR Spare : 1;
    UCHAR ExecuteOptions;
    UCHAR ExecuteOptionsNV;
};

typedef union _KGDTENTRY64 {
    USHORT LimitLow;
    USHORT BaseLow;
    struct {
        UCHAR BaseMiddle;
        UCHAR Flags1;
        UCHAR Flags2;
        UCHAR BaseHigh;
    } Bytes;
    struct {
        ULONG BaseMiddle : 8;
        ULONG Type : 5;
        ULONG Dpl : 2;
        ULONG Present : 1;
        ULONG LimitHigh : 4;
        ULONG System : 1;
        ULONG LongMode : 1;
        ULONG DefaultBig : 1;
        ULONG Granularity : 1;
        ULONG BaseHigh : 8;
    } Bits;
    ULONG BaseUpper;
    ULONG MustBeZero;
    LONG64 DataLow;
    LONG64 DataHigh;
};

typedef union _KIDTENTRY64 {
    USHORT OffsetLow;
    USHORT Selector;
    USHORT IstIndex : 3;
    USHORT Reserved0 : 5;
    USHORT Type : 5;
    USHORT Dpl : 2;
    USHORT Present : 1;
    USHORT OffsetMiddle;
    ULONG OffsetHigh;
    ULONG Reserved1;
    ULONG64 Alignment;
};

typedef union _KLOCK_ENTRY_BOOST_BITMAP {
    ULONG AllFields;
    ULONG AllBoosts : 17;
    ULONG Reserved : 15;
    USHORT CpuBoostsBitmap : 15;
    USHORT IoBoost : 1;
    USHORT IoQoSBoost : 1;
    USHORT IoNormalPriorityWaiterCount : 8;
    USHORT IoQoSWaiterCount : 7;
};

typedef union _KPRCBFLAG {
    LONG PrcbFlags;
    ULONG BamQosLevel : 2;
    ULONG PendingQosUpdate : 2;
    ULONG CacheIsolationEnabled : 1;
    ULONG PrcbFlagsReserved : 27;
};

typedef union _KSTACK_COUNT {
    LONG Value;
    ULONG State : 3;
    ULONG StackCount : 29;
};

typedef union _KWAIT_STATUS_REGISTER {
    UCHAR Flags;
    UCHAR State : 3;
    UCHAR Affinity : 1;
    UCHAR Priority : 1;
    UCHAR Apc : 1;
    UCHAR UserApc : 1;
    UCHAR Alert : 1;
};

typedef union _LARGE_INTEGER {
    ULONG LowPart;
    LONG HighPart;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONG64 QuadPart;
};

typedef union _MI_FLAGS {
    LONG EntireFlags;
    ULONG VerifierEnabled : 1;
    ULONG KernelVerifierEnabled : 1;
    ULONG LargePageKernel : 1;
    ULONG StopOn4d : 1;
    ULONG InitializationPhase : 2;
    ULONG PageKernelStacks : 1;
    ULONG CheckZeroPages : 1;
    ULONG ProcessorPrewalks : 1;
    ULONG ProcessorPostwalks : 1;
    ULONG CoverageBuild : 1;
    ULONG AccessBitReplacementDisabled : 1;
    ULONG CheckExecute : 1;
    ULONG ProtectedPagesEnabled : 1;
    ULONG SecureRelocations : 1;
    ULONG StrongPageIdentity : 1;
    ULONG StrongCodeGuarantees : 1;
    ULONG HardCodeGuarantees : 1;
    ULONG ExecutePagePrivilegeRequired : 1;
    ULONG SecureKernelCfgEnabled : 1;
    ULONG FullHvci : 1;
    ULONG BootDebuggerActive : 1;
    ULONG ExceptionHandlingReady : 1;
    ULONG ShadowStacksSupported : 1;
    ULONG AccessBitFenceRequired : 1;
    ULONG PfnDatabaseExists : 1;
};

typedef union _MI_RESERVATION_CLUSTER_INFO {
    ULONG ClusterSize : 10;
    ULONG SequenceNumber : 22;
    LONG EntireInfo;
};

typedef union _MM_PAGE_ACCESS_INFO_FLAGS {
    struct {
        ULONG FilePointerIndex : 9;
        ULONG HardFault : 1;
        ULONG Image : 1;
        ULONG Spare0 : 1;
    } File;
    struct {
        ULONG FilePointerIndex : 9;
        ULONG HardFault : 1;
        ULONG Spare1 : 2;
    } Private;
};

typedef union _MM_STORE_KEY {
    ULONG64 KeyLow : 60;
    ULONG64 KeyHigh : 4;
    ULONG64 EntireKey;
};

typedef union _PCW_CALLBACK_INFORMATION {
    struct _PCW_COUNTER_INFORMATION AddCounter;
    struct _PCW_COUNTER_INFORMATION RemoveCounter;
    struct _PCW_MASK_INFORMATION EnumerateInstances;
    struct _PCW_MASK_INFORMATION CollectData;
};

typedef union _PEP_ACPI_RESOURCE {
    enum _PEP_ACPI_RESOURCE_TYPE Type;
    struct _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;
    struct _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;
    struct _PEP_ACPI_GPIO_RESOURCE Gpio;
    struct _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;
    struct _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;
    struct _PEP_ACPI_SPB_UART_RESOURCE SpbUart;
    struct _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress;
};

typedef union _PEP_ACPI_RESOURCE_FLAGS {
    ULONG AsULong;
    ULONG Shared : 1;
    ULONG Wake : 1;
    ULONG ResourceUsage : 1;
    ULONG SlaveMode : 1;
    ULONG AddressingMode : 1;
    ULONG SharedMode : 1;
    ULONG Reserved : 26;
};

typedef union _POP_FX_COMPONENT_FLAGS {
    LONG Value;
    LONG Value2;
    ULONG RefCount : 30;
    ULONG Idling : 1;
    ULONG Active : 1;
    ULONG CriticalIdleOverride : 1;
    ULONG ResidentOverride : 1;
    ULONG Reserved : 30;
};

typedef union _POP_FX_DEVICE_STATUS {
    LONG Value;
    ULONG SystemTransition : 1;
    ULONG PepD0Notify : 1;
    ULONG IdleTimerOn : 1;
    ULONG IgnoreIdleTimeout : 1;
    ULONG IrpInUse : 1;
    ULONG IrpPending : 1;
    ULONG DPNRDeviceNotified : 1;
    ULONG DPNRReceivedFromPep : 1;
    ULONG IrpFirstPendingIndex : 1;
    ULONG IrpLastPendingIndex : 1;
    ULONG SIrpBlocked : 1;
    ULONG BlockFastResume : 1;
    ULONG DirectedPoweredDown : 1;
    ULONG DirectedTransitionInProgress : 1;
    ULONG Reserved : 18;
};

typedef union _POP_FX_PERF_FLAGS {
    LONG Value;
    ULONG Progress : 3;
    ULONG Reserved : 24;
    ULONG Synchronicity : 2;
    ULONG RequestPepCompleted : 1;
    ULONG RequestSucceeded : 1;
    ULONG NestedCallback : 1;
};

typedef union _POWER_STATE {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
};

typedef union _PPM_COORDINATED_SYNCHRONIZATION {
    LONG AsLong;
    ULONG EnterProcessor : 12;
    ULONG ExitProcessor : 12;
    ULONG Transition : 2;
    ULONG Entered : 1;
    ULONG EntryPriority : 5;
};

typedef union _PPM_IDLE_SYNCHRONIZATION_STATE {
    LONG AsLong;
    LONG RefCount : 24;
    ULONG State : 8;
};

typedef union _PPM_POLICY_SETTINGS_MASK {
    ULONG64 Value;
    ULONG PerfDecreaseTime : 1;
    ULONG PerfIncreaseTime : 1;
    ULONG PerfDecreasePolicy : 1;
    ULONG PerfIncreasePolicy : 1;
    ULONG PerfDecreaseThreshold : 1;
    ULONG PerfIncreaseThreshold : 1;
    ULONG PerfMinPolicy : 1;
    ULONG PerfMaxPolicy : 1;
    ULONG PerfTimeCheck : 1;
    ULONG PerfBoostPolicy : 1;
    ULONG PerfBoostMode : 1;
    ULONG AllowThrottling : 1;
    ULONG PerfHistoryCount : 1;
    ULONG ParkingPerfState : 1;
    ULONG LatencyHintPerf : 1;
    ULONG LatencyHintUnpark : 1;
    ULONG CoreParkingMinCores : 1;
    ULONG CoreParkingMaxCores : 1;
    ULONG CoreParkingDecreasePolicy : 1;
    ULONG CoreParkingIncreasePolicy : 1;
    ULONG CoreParkingDecreaseTime : 1;
    ULONG CoreParkingIncreaseTime : 1;
    ULONG CoreParkingOverUtilizationThreshold : 1;
    ULONG CoreParkingDistributeUtility : 1;
    ULONG CoreParkingConcurrencyThreshold : 1;
    ULONG CoreParkingHeadroomThreshold : 1;
    ULONG CoreParkingDistributionThreshold : 1;
    ULONG IdleAllowScaling : 1;
    ULONG IdleDisable : 1;
    ULONG IdleTimeCheck : 1;
    ULONG IdleDemoteThreshold : 1;
    ULONG IdlePromoteThreshold : 1;
    ULONG HeteroDecreaseTime : 1;
    ULONG HeteroIncreaseTime : 1;
    ULONG HeteroDecreaseThreshold : 1;
    ULONG HeteroIncreaseThreshold : 1;
    ULONG Class0FloorPerformance : 1;
    ULONG Class1InitialPerformance : 1;
    ULONG EnergyPerfPreference : 1;
    ULONG AutonomousActivityWindow : 1;
    ULONG AutonomousMode : 1;
    ULONG DutyCycling : 1;
    ULONG FrequencyCap : 1;
    ULONG ThreadPolicy : 1;
    ULONG ShortThreadPolicy : 1;
    ULONG IdleStateMax : 1;
    ULONG ResponsivenessDisableThreshold : 1;
    ULONG ResponsivenessEnableThreshold : 1;
    ULONG ResponsivenessDisableTime : 1;
    ULONG ResponsivenessEnableTime : 1;
    ULONG ResponsivenessEppCeiling : 1;
    ULONG ResponsivenessPerfFloor : 1;
    ULONG Spare : 12;
};

typedef union _PS_CLIENT_SECURITY_CONTEXT {
    ULONG64 ImpersonationData;
    PVOID ImpersonationToken;
    ULONG64 ImpersonationLevel : 2;
    ULONG64 EffectiveOnly : 1;
};

typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES {
    ULONG64 DelayMs : 30;
    ULONG64 CoalescingWindowMs : 30;
    ULONG64 Reserved : 1;
    ULONG64 NewTimerWheel : 1;
    ULONG64 Retry : 1;
    ULONG64 Locked : 1;
    ULONG64 All;
};

typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS {
    UCHAR Trustlet : 1;
    UCHAR Ntos : 1;
    UCHAR WriteHandle : 1;
    UCHAR ReadHandle : 1;
    UCHAR Reserved : 4;
    UCHAR AccessRights;
};

typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
    ULONG64 Value;
    ULONG64 State : 2;
};

typedef union _SLIST_HEADER {
    ULONG64 Alignment;
    ULONG64 Region;
    struct {
        ULONG64 Depth : 16;
        ULONG64 Sequence : 48;
        ULONG64 Reserved : 4;
        ULONG64 NextEntry : 60;
    } HeaderX64;
};

typedef union _TIMELINE_BITMAP {
    ULONG64 Value;
    ULONG EndTime;
    ULONG Bitmap;
};

typedef union _ULARGE_INTEGER {
    ULONG LowPart;
    ULONG HighPart;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONG64 QuadPart;
};

typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS {
    ULONG Preallocated : 1;
    ULONG FromPersistentStore : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved : 28;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_PACKET_FLAGS {
    ULONG PreviousError : 1;
    ULONG Reserved1 : 1;
    ULONG HypervisorError : 1;
    ULONG Simulated : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved2 : 26;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
    ULONG Recovered : 1;
    ULONG PreviousError : 1;
    ULONG Simulated : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
    ULONG PlatformId : 1;
    ULONG Timestamp : 1;
    ULONG PartitionId : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
    ULONG Primary : 1;
    ULONG ContainmentWarning : 1;
    ULONG Reset : 1;
    ULONG ThresholdExceeded : 1;
    ULONG ResourceNotAvailable : 1;
    ULONG LatentError : 1;
    ULONG Propagated : 1;
    ULONG Reserved : 25;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
    UCHAR FRUId : 1;
    UCHAR FRUText : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _WHEA_ERROR_STATUS {
    ULONG64 ErrorStatus;
    ULONG64 Reserved1 : 8;
    ULONG64 ErrorType : 8;
    ULONG64 Address : 1;
    ULONG64 Control : 1;
    ULONG64 Data : 1;
    ULONG64 Responder : 1;
    ULONG64 Requester : 1;
    ULONG64 FirstError : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved2 : 41;
};

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS {
    ULONG Reserved : 32;
    ULONG AsULONG;
};

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 PhysicalAddress : 1;
    ULONG64 PhysicalAddressMask : 1;
    ULONG64 Node : 1;
    ULONG64 Card : 1;
    ULONG64 Module : 1;
    ULONG64 Bank : 1;
    ULONG64 Device : 1;
    ULONG64 Row : 1;
    ULONG64 Column : 1;
    ULONG64 BitPosition : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 TargetId : 1;
    ULONG64 ErrorType : 1;
    ULONG64 RankNumber : 1;
    ULONG64 CardHandle : 1;
    ULONG64 ModuleHandle : 1;
    ULONG64 ExtendedRow : 1;
    ULONG64 BankGroup : 1;
    ULONG64 BankAddress : 1;
    ULONG64 ChipIdentification : 1;
    ULONG64 Reserved : 42;
    ULONG64 ValidBits;
};

typedef union _WHEA_NOTIFICATION_FLAGS {
    USHORT PollIntervalRW : 1;
    USHORT SwitchToPollingThresholdRW : 1;
    USHORT SwitchToPollingWindowRW : 1;
    USHORT ErrorThresholdRW : 1;
    USHORT ErrorThresholdWindowRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _WHEA_PERSISTENCE_INFO {
    ULONG64 Signature : 16;
    ULONG64 Length : 24;
    ULONG64 Identifier : 16;
    ULONG64 Attributes : 2;
    ULONG64 DoNotLog : 1;
    ULONG64 Reserved : 5;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS {
    ULONG64 ProcessorType : 1;
    ULONG64 InstructionSet : 1;
    ULONG64 ErrorType : 1;
    ULONG64 Operation : 1;
    ULONG64 Flags : 1;
    ULONG64 Level : 1;
    ULONG64 CPUVersion : 1;
    ULONG64 CPUBrandString : 1;
    ULONG64 ProcessorId : 1;
    ULONG64 TargetAddress : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 InstructionPointer : 1;
    ULONG64 Reserved : 51;
    ULONG64 ValidBits;
};

typedef union _WHEA_REVISION {
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    USHORT AsUSHORT;
};

typedef union _WHEA_TIMESTAMP {
    ULONG64 Seconds : 8;
    ULONG64 Minutes : 8;
    ULONG64 Hours : 8;
    ULONG64 Precise : 1;
    ULONG64 Reserved : 7;
    ULONG64 Day : 8;
    ULONG64 Month : 8;
    ULONG64 Year : 8;
    ULONG64 Century : 8;
    union _LARGE_INTEGER AsLARGE_INTEGER;
};

typedef union _XPF_MCE_FLAGS {
    ULONG MCG_CapabilityRW : 1;
    ULONG MCG_GlobalControlRW : 1;
    ULONG Reserved : 30;
    ULONG AsULONG;
};

typedef union _XPF_MC_BANK_FLAGS {
    UCHAR ClearOnInitializationRW : 1;
    UCHAR ControlDataRW : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _u {
    struct _CM_KEY_NODE KeyNode;
    struct _CM_KEY_VALUE KeyValue;
    struct _CM_KEY_SECURITY KeySecurity;
    struct _CM_KEY_INDEX KeyIndex;
    struct _CM_BIG_DATA ValueData;
    ULONG KeyList[1];
    WCHAR KeyString[1];
};

typedef enum BUS_QUERY_ID_TYPE {
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5
};

typedef enum DEVICE_TEXT_TYPE {
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1
};

typedef enum ETW_COMPRESSION_RESUMPTION_MODE {
    EtwCompressionModeRestart = 0,
    EtwCompressionModeNoDisable = 1,
    EtwCompressionModeNoRestart = 2
};

typedef enum HAL_APIC_DESTINATION_MODE {
    ApicDestinationModePhysical = 1,
    ApicDestinationModeLogicalFlat = 2,
    ApicDestinationModeLogicalClustered = 3,
    ApicDestinationModeUnknown = 4
};

typedef enum HSTORAGE_TYPE {
    Stable = 0,
    Volatile = 1,
    InvalidStorage = 2
};

typedef enum INTERRUPT_CONNECTION_TYPE {
    InterruptTypeControllerInput = 0,
    InterruptTypeXapicMessage = 1,
    InterruptTypeHypertransport = 2,
    InterruptTypeMessageRequest = 3
};

typedef enum IRPLOCK {
    IRPLOCK_CANCELABLE = 0,
    IRPLOCK_CANCEL_STARTED = 1,
    IRPLOCK_CANCEL_COMPLETE = 2,
    IRPLOCK_COMPLETED = 3
};

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
};

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
};

typedef enum KD_CALLBACK_ACTION {
    KdConfigureDeviceAndContinue = 0,
    KdSkipDeviceAndContinue = 1,
    KdConfigureDeviceAndStop = 2,
    KdSkipDeviceAndStop = 3
};

typedef enum KD_NAMESPACE_ENUM {
    KdNameSpacePCI = 0,
    KdNameSpaceACPI = 1,
    KdNameSpaceAny = 2,
    KdNameSpaceNone = 3,
    KdNameSpaceMax = 4
};

typedef enum KTM_STATE {
    KKtmUninitialized = 0,
    KKtmInitialized = 1,
    KKtmRecovering = 2,
    KKtmOnline = 3,
    KKtmRecoveryFailed = 4,
    KKtmOffline = 5
};

typedef enum LSA_FOREST_TRUST_RECORD_TYPE {
    ForestTrustTopLevelName = 0,
    ForestTrustTopLevelNameEx = 1,
    ForestTrustDomainInfo = 2,
    ForestTrustRecordTypeLast = 2
};

typedef enum PDCCLIENTID {
    PDC_INVALID_CLIENT = 0,
    PDC_PLM_CLIENT = 1,
    PDC_NQM_CLIENT = 2,
    PDC_WNS_CLIENT = 3,
    PDC_DAM_CLIENT = 4,
    PDC_WCM_CLIENT = 5,
    PDC_NCSI_CLIENT = 7,
    PDC_DHCP_CLIENT = 8,
    PDC_TCPIP_CLIENT = 9,
    PDC_WU_CLIENT = 11,
    PDC_GP_CLIENT = 12,
    PDC_NCA_CLIENT = 14,
    PDC_BI_CLIENT = 15,
    PDC_MSCHED_CLIENT = 16,
    PDC_SUSPENDRESUME_CLIENT = 17,
    PDC_INTERNAL_CLIENT = 18,
    PDC_ACTIVATION_TEST_CLIENT = 19,
    PDC_PLM_PHASE_TEST_CLIENT = 20,
    PDC_DAM_PHASE_TEST_CLIENT = 21,
    PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
    PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
    PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
    PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
    PDC_DAM_KM_TEST_CLIENT = 26,
    PDC_DAM_UM_TEST_CLIENT = 27,
    PDC_SINGLETON_TEST_CLIENT = 28,
    PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
    PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
    PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
    PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
    PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
    PDC_SHELL_CLIENT = 34,
    PDC_MAINTENANCE_CLIENT = 35,
    PDC_SYNC_CLIENT = 36,
    PDC_IDM_CLIENT = 37,
    PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
    PDC_TETHERING_CLIENT = 39,
    PDC_AUDIO_CLIENT = 40,
    PDC_LOCK_SCREEN = 41,
    PDC_LREC_CLIENT = 42,
    PDC_WP_BW_CLIENT = 43,
    PDC_WP_MEDIA_STREAMING_CLIENT = 44,
    PDC_WP_MAPS_CLIENT = 46,
    PDC_WP_SYNC_CLIENT = 47,
    PDC_SETTING_SYNC_CLIENT = 48,
    PDC_WP_EDM_CLIENT = 49,
    PDC_WP_WALLET_CLIENT = 50,
    PDC_WP_LOCATION_CLIENT = 51,
    PDC_WP_CM_CLIENT = 53,
    PDC_WP_DCP_CLIENT = 54,
    PDC_WP_WIFIAUTO_CLIENT = 55,
    PDC_BITLOCKER_CLIENT = 56,
    PDC_MDM_CERTINSTALLER_CLIENT = 57,
    PDC_WP_IM_CLIENT = 58,
    PDC_WP_MMS_CLIENT = 59,
    PDC_DEVICEENROLLER_CLIENT = 60,
    PDC_WP_WIFI_SCANNING_CLIENT = 61,
    PDC_WP_OMADM_CLIENT = 62,
    PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
    PDC_WP_DIS_CLIENT = 64,
    PDC_BITS_CLIENT = 65,
    PDC_WP_VOIP_EXECUTION_CLIENT = 66,
    PDC_WP_RESERVED_CLIENT3 = 67,
    PDC_SLEEP_STUDY_CLIENT = 68,
    PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
    PDC_HYPERV_CLIENT = 70,
    PDC_KM_SIGNAL_CLIENT = 71,
    PDC_UM_SIGNAL_CLIENT = 72,
    PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
    PDC_XB_SYSTEM_CLIENT = 74,
    PDC_XB_HOST_CLIENT = 75,
    PDC_PRINT_JOB_MANAGER_CLIENT = 76,
    PDC_TELEMETRY_CLIENT = 77,
    PDC_ERROR_REPORTING_CLIENT = 78,
    PDC_XBOX_NTM = 79,
    PDC_CBE_CLIENT = 80,
    PDC_FIND_MY_PHONE_CLIENT = 81,
    PDC_COMMAND_CHANNEL_CLIENT = 82,
    PDC_PPM_PROFILES_CLIENT = 83,
    PDC_WIFI_CALLING_CLIENT = 84,
    PDC_WU_REBOOT_CLIENT = 85,
    PDC_SYSMAIN_CLIENT = 86,
    PDC_XBOX_UPDATE_CLIENT = 87,
    PDC_CHAT_SERVICE_CLIENT = 88,
    PDC_FIND_MY_DEVICE_CLIENT = 89,
    PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
    PDC_INSTALL_AGENT_CLIENT = 91,
    PDC_XBOX_WAKE_ON_VOICE = 92,
    PDC_PLM_AUDIO_CLIENT = 93,
    PDC_WP_BCKAUDIO_CLIENT = 94,
    PDC_WAKE_ON_LAN_CLIENT = 95,
    PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
    PDC_DATA_MIGRATION_MANAGER = 97,
    PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
    PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
    PDC_HAM_CLIENT = 100,
    PDC_FILESHARINGSERVER_CLIENT = 101,
    PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
    PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
    PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
    PDC_HTTPSDATASOURCE_CLIENT = 105,
    PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
    PDC_TERMINALSERVER_SESSION_CLIENT = 107,
    PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
    PDC_XBOX_NUI_CLIENT = 110,
    PDC_WIFI_CALLING_IMS_CLIENT = 111,
    PDC_NUMBER_OF_CLIENTS = 112
};

typedef enum PDC_ACTIVITY_TYPE {
    PdcNetwork = 0,
    PdcSystem = 1,
    PdcTimer = 2,
    PdcAllNetworks = 3,
    PdcAnyNetwork = 4,
    PdcInvalidActivity = 5,
    PdcMaxActivity = 5
};

typedef enum PDC_CS_PHASE {
    PdcNoCsPhase = 0,
    PdcConnectionPhase = 1,
    PdcShellPhase = 2,
    PdcPlmPhase = 3,
    PdcMaintenancePhase = 4,
    PdcDamPhase = 5,
    PdcLowPowerPhase = 6,
    PdcResiliencyNotificationPhase = 7,
    PdcResiliencyPhase = 8,
    PdcInvalidPhase = 9,
    PdcMaxPhase = 9
};

typedef enum PDC_RESOURCE {
    PdcResourceSystemForeground = 0,
    PdcResourceUniversalApplications = 1,
    PdcResourceWin32 = 2,
    PdcResourceNetwork = 3,
    PdcResourceSystemBackground = 4,
    PdcResourceMin = 0,
    PdcResourceMax = 4
};

typedef enum POWER_ACTION {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8
};

typedef enum POWER_POLICY_DEVICE_TYPE {
    PolicyDeviceSystemButton = 0,
    PolicyDeviceThermalZone = 1,
    PolicyDeviceBattery = 2,
    PolicyDeviceMemory = 3,
    PolicyInitiatePowerActionAPI = 4,
    PolicySetPowerStateAPI = 5,
    PolicyImmediateDozeS4 = 6,
    PolicySystemIdle = 7,
    PolicyDeviceWakeAlarm = 8,
    PolicyDeviceFan = 9,
    PolicyCsBatterySaver = 10,
    PolicyImmediateDozeS4Predicted = 11,
    PolicyImmediateDozeS4PredictedNoWake = 12,
    PolicyImmediateDozeS4AdaptiveBudget = 13,
    PolicyImmediateDozeS4AdaptiveReserveNoWake = 14,
    PolicySystemInitiatedShutdown = 15,
    PolicyDeviceMax = 16
};

typedef enum PPM_IDLE_BUCKET_TIME_TYPE {
    PpmIdleBucketTimeInQpc = 0,
    PpmIdleBucketTimeIn100ns = 1,
    PpmIdleBucketTimeMaximum = 2
};

typedef enum PROFILE_DEPARTURE_STYLE {
    PDS_UPDATE_DEFAULT = 1,
    PDS_UPDATE_ON_REMOVE = 2,
    PDS_UPDATE_ON_INTERFACE = 3,
    PDS_UPDATE_ON_EJECT = 4
};

typedef enum PROFILE_STATUS {
    DOCK_NOTDOCKDEVICE = 0,
    DOCK_QUIESCENT = 1,
    DOCK_ARRIVING = 2,
    DOCK_DEPARTING = 3,
    DOCK_EJECTIRP_COMPLETED = 4
};

typedef enum PS_CREATE_STATE {
    PsCreateInitialState = 0,
    PsCreateFailOnFileOpen = 1,
    PsCreateFailOnSectionCreate = 2,
    PsCreateFailExeFormat = 3,
    PsCreateFailMachineMismatch = 4,
    PsCreateFailExeName = 5,
    PsCreateSuccess = 6,
    PsCreateMaximumStates = 7
};

typedef enum RTLP_CSPARSE_BITMAP_STATE {
    CommitBitmapInvalid = 0,
    UserBitmapInvalid = 1,
    UserBitmapValid = 2
};

typedef enum ReplacesCorHdrNumericDefines {
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
    COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
};

typedef enum SE_WS_APPX_SIGNATURE_ORIGIN {
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4
};

typedef enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT {
    SpmScenarioStopReasonUnspecified = 16,
    SpmScenarioStopReasonCsExit = 17,
    SpmScenarioStopReasonMax = 18
};

typedef enum SYSTEM_POWER_CONDITION {
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3
};

typedef enum TlgIn_t {
    TlgInNULL = 0,
    TlgInUNICODESTRING = 1,
    TlgInANSISTRING = 2,
    TlgInINT8 = 3,
    TlgInUINT8 = 4,
    TlgInINT16 = 5,
    TlgInUINT16 = 6,
    TlgInINT32 = 7,
    TlgInUINT32 = 8,
    TlgInINT64 = 9,
    TlgInUINT64 = 10,
    TlgInFLOAT = 11,
    TlgInDOUBLE = 12,
    TlgInBOOL32 = 13,
    TlgInBINARY = 14,
    TlgInGUID = 15,
    _TlgInPOINTER_unsupported = 16,
    TlgInFILETIME = 17,
    TlgInSYSTEMTIME = 18,
    TlgInSID = 19,
    TlgInHEXINT32 = 20,
    TlgInHEXINT64 = 21,
    TlgInCOUNTEDSTRING = 22,
    TlgInCOUNTEDANSISTRING = 23,
    _TlgInSTRUCT = 24,
    TlgInCOUNTEDBINARY = 25,
    _TlgInMax = 26,
    TlgInINTPTR = 9,
    TlgInUINTPTR = 10,
    TlgInPOINTER = 21,
    _TlgInCcount = 32,
    TlgInVcount = 64,
    _TlgInChain = 128,
    _TlgInCustom = 96,
    _TlgInTypeMask = 31,
    _TlgInCountMask = 96,
    _TlgInFlagMask = 224
};

typedef enum TlgOut_t {
    TlgOutNULL = 0,
    TlgOutNOPRINT = 1,
    TlgOutSTRING = 2,
    TlgOutBOOLEAN = 3,
    TlgOutHEX = 4,
    TlgOutPID = 5,
    TlgOutTID = 6,
    TlgOutPORT = 7,
    TlgOutIPV4 = 8,
    TlgOutIPV6 = 9,
    TlgOutSOCKETADDRESS = 10,
    TlgOutXML = 11,
    TlgOutJSON = 12,
    TlgOutWIN32ERROR = 13,
    TlgOutNTSTATUS = 14,
    TlgOutHRESULT = 15,
    TlgOutFILETIME = 16,
    TlgOutSIGNED = 17,
    TlgOutUNSIGNED = 18,
    TlgOutUTF8 = 35,
    TlgOutPKCS7_WITH_TYPE_INFO = 36,
    TlgOutCODE_POINTER = 37,
    _TlgOutMax = 38,
    _TlgOutChain = 128,
    _TlgOutTypeMask = 127
};

typedef enum UoWActionType {
    UoWAddThisKey = 0,
    UoWAddChildKey = 1,
    UoWDeleteThisKey = 2,
    UoWDeleteChildKey = 3,
    UoWSetValueNew = 4,
    UoWSetValueExisting = 5,
    UoWDeleteValue = 6,
    UoWSetKeyUserFlags = 7,
    UoWSetLastWriteTime = 8,
    UoWSetSecurityDescriptor = 9,
    UoWRenameSubKey = 10,
    UoWRenameOldSubKey = 11,
    UoWRenameNewSubKey = 12,
    UoWIsolation = 13,
    UoWInvalid = 14
};

typedef enum _ADD_DRIVER_STAGE {
    ClassConfigFilters = 0,
    LowerDeviceFilters = 1,
    LowerClassFilters = 2,
    DeviceService = 3,
    UpperDeviceFilters = 4,
    UpperClassFilters = 5,
    MaximumAddStage = 6
};

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2
};

typedef enum _ARBITER_ACTION {
    ArbiterActionTestAllocation = 0,
    ArbiterActionRetestAllocation = 1,
    ArbiterActionCommitAllocation = 2,
    ArbiterActionRollbackAllocation = 3,
    ArbiterActionQueryAllocatedResources = 4,
    ArbiterActionWriteReservedResources = 5,
    ArbiterActionQueryConflict = 6,
    ArbiterActionQueryArbitrate = 7,
    ArbiterActionAddReserved = 8,
    ArbiterActionBootAllocation = 9
};

typedef enum _ARBITER_REQUEST_SOURCE {
    ArbiterRequestUndefined = -1,
    ArbiterRequestLegacyReported = 0,
    ArbiterRequestHalReported = 1,
    ArbiterRequestLegacyAssigned = 2,
    ArbiterRequestPnpDetected = 3,
    ArbiterRequestPnpEnumerated = 4
};

typedef enum _ARBITER_RESULT {
    ArbiterResultUndefined = -1,
    ArbiterResultSuccess = 0,
    ArbiterResultExternalConflict = 1,
    ArbiterResultNullRequest = 2
};

typedef enum _BLOB_ID {
    BLOB_TYPE_UNKNOWN = 0,
    BLOB_TYPE_CONNECTION_INFO = 1,
    BLOB_TYPE_MESSAGE = 2,
    BLOB_TYPE_SECURITY_CONTEXT = 3,
    BLOB_TYPE_SECTION = 4,
    BLOB_TYPE_REGION = 5,
    BLOB_TYPE_VIEW = 6,
    BLOB_TYPE_RESERVE = 7,
    BLOB_TYPE_DIRECT_TRANSFER = 8,
    BLOB_TYPE_HANDLE_DATA = 9,
    BLOB_TYPE_MAX_ID = 10
};

typedef enum _BOOT_ENTROPY_SOURCE_ID {
    BootEntropySourceNone = 0,
    BootEntropySourceSeedfile = 1,
    BootEntropySourceExternal = 2,
    BootEntropySourceTpm = 3,
    BootEntropySourceRdrand = 4,
    BootEntropySourceTime = 5,
    BootEntropySourceAcpiOem0 = 6,
    BootEntropySourceUefi = 7,
    BootEntropySourceCng = 8,
    BootEntropySourceTcbTpm = 9,
    BootEntropySourceTcbRdrand = 10,
    BootMaxEntropySources = 10
};

typedef enum _BOOT_ENTROPY_SOURCE_RESULT_CODE {
    BootEntropySourceStructureUninitialized = 0,
    BootEntropySourceDisabledByPolicy = 1,
    BootEntropySourceNotPresent = 2,
    BootEntropySourceError = 3,
    BootEntropySourceSuccess = 4
};

typedef enum _BUS_DATA_TYPE {
    ConfigurationSpaceUndefined = -1,
    Cmos = 0,
    EisaConfiguration = 1,
    Pos = 2,
    CbusConfiguration = 3,
    PCIConfiguration = 4,
    VMEConfiguration = 5,
    NuBusConfiguration = 6,
    PCMCIAConfiguration = 7,
    MPIConfiguration = 8,
    MPSAConfiguration = 9,
    PNPISAConfiguration = 10,
    SgiInternalConfiguration = 11,
    MaximumBusDataType = 12
};

typedef enum _CMP_FAILURE_INJECTION_POINT {
    CmpFailurePointPoolAllocation = 0,
    CmpFailurePointViewMapping = 1,
    CmpFailurePointViewPinning = 2,
    CmpFailurePointResourceCharging = 3,
    CmpFailurePointFileWrite = 4,
    CmpFailurePointFileRead = 5,
    CmpFailurePointCacheFlush = 6,
    CmpFailurePointFlush = 7,
    CmpFailurePointFlushAndPurge = 8,
    CmpFailurePointForceLargeBin = 9,
    CmpFailurePointDontFixAlignment = 10,
    CmpFailurePointAllocateCell = 11,
    CmpFailurePointMarkDirty = 12,
    CmpFailurePointForceMultiLevelMap = 13,
    CmpFailurePointAllocateKcb = 14,
    CmpFailurePointCreateKeyBody = 15,
    CmpFailurePointForcePoolAllocateKcb = 16,
    CmpFailurePointForceFreeKcb = 17,
    CmpFailurePointKeyEnumResumeContextVerification = 18,
    CmpFailurePointKeyEnumForceRetry = 19,
    CmpFailurePointForceLazyCOWByPolicy = 20,
    CmpFailureInjectionPointCount = 21
};

typedef enum _CM_DIRTY_VECTOR_OPERATION {
    DirtyVectorModified = 0,
    DirtyDataCaptureStart = 1,
    DirtyDataCaptureEnd = 2
};

typedef enum _CM_LOAD_FAILURE_TYPE {
    _None = 0,
    _CmCreateHive = 1,
    _HvpBuildMap = 3,
    _HvpBuildMapForLoaderHive = 4,
    _HvpInitMap = 5,
    _HvLoadHive = 6,
    _HvpMapHiveImage = 7,
    _HvpRecoverData = 8,
    _CmpValidateHiveSecurityDescriptors = 9,
    _HvpEnlistBinInMap = 10,
    _CmCheckRegistry = 11,
    _CmRegistryIO = 12,
    _CmCheckRegistry2 = 13,
    _CmpCheckKey = 14,
    _CmpCheckValueList = 15,
    _HvCheckHive = 16,
    _HvCheckBin = 17,
    _HvpGetLogEntryDirtyVector = 18,
    _HvpReadLogEntryHeader = 19,
    _HvpReadLogEntry = 20,
    _CmpMountPreloadedHives = 21,
    _CmpLoadHiveThread = 22,
    _CmpCheckLeaf = 23,
    _HvHiveStartFileBacked = 24,
    _HvStartHiveMemoryBacked = 25,
    _HvpEnlistFreeCells = 26,
    _HvpPerformLogFileRecovery = 27
};

typedef enum _CM_SHARE_DISPOSITION {
    CmResourceShareUndetermined = 0,
    CmResourceShareDeviceExclusive = 1,
    CmResourceShareDriverExclusive = 2,
    CmResourceShareShared = 3
};

typedef enum _CONFIGURATION_CLASS {
    SystemClass = 0,
    ProcessorClass = 1,
    CacheClass = 2,
    AdapterClass = 3,
    ControllerClass = 4,
    PeripheralClass = 5,
    MemoryClass = 6,
    MaximumClass = 7
};

typedef enum _CONFIGURATION_TYPE {
    ArcSystem = 0,
    CentralProcessor = 1,
    FloatingPointProcessor = 2,
    PrimaryIcache = 3,
    PrimaryDcache = 4,
    SecondaryIcache = 5,
    SecondaryDcache = 6,
    SecondaryCache = 7,
    EisaAdapter = 8,
    TcAdapter = 9,
    ScsiAdapter = 10,
    DtiAdapter = 11,
    MultiFunctionAdapter = 12,
    DiskController = 13,
    TapeController = 14,
    CdromController = 15,
    WormController = 16,
    SerialController = 17,
    NetworkController = 18,
    DisplayController = 19,
    ParallelController = 20,
    PointerController = 21,
    KeyboardController = 22,
    AudioController = 23,
    OtherController = 24,
    DiskPeripheral = 25,
    FloppyDiskPeripheral = 26,
    TapePeripheral = 27,
    ModemPeripheral = 28,
    MonitorPeripheral = 29,
    PrinterPeripheral = 30,
    PointerPeripheral = 31,
    KeyboardPeripheral = 32,
    TerminalPeripheral = 33,
    OtherPeripheral = 34,
    LinePeripheral = 35,
    NetworkPeripheral = 36,
    SystemMemory = 37,
    DockingInformation = 38,
    RealModeIrqRoutingTable = 39,
    RealModePCIEnumeration = 40,
    MaximumType = 41
};

typedef enum _CREATE_FILE_TYPE {
    CreateFileTypeNone = 0,
    CreateFileTypeNamedPipe = 1,
    CreateFileTypeMailslot = 2
};

typedef enum _ConnectionResourceConsumerDesc {
    ConnectionResourceConsumerDescIsUndefined = 0,
    ConnectionResourceConsumerDescIsDevice = 1,
    ConnectionResourceConsumerDescIsOpregion = 2,
    ConnectionResourceConsumerDescMax = 3
};

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
};

typedef enum _DEVICE_RELATION_LEVEL {
    RELATION_LEVEL_REMOVE_EJECT = 0,
    RELATION_LEVEL_DEPENDENT = 1,
    RELATION_LEVEL_DIRECT_DESCENDANT = 2
};

typedef enum _DEVICE_RELATION_TYPE {
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5
};

typedef enum _DEVICE_WAKE_DEPTH {
    DeviceWakeDepthNotWakeable = 0,
    DeviceWakeDepthD0 = 1,
    DeviceWakeDepthD1 = 2,
    DeviceWakeDepthD2 = 3,
    DeviceWakeDepthD3hot = 4,
    DeviceWakeDepthD3cold = 5,
    DeviceWakeDepthMaximum = 6
};

typedef enum _DEVPROP_OPERATOR {
    DEVPROP_OPERATOR_MODIFIER_NOT = 0x10000,
    DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 0x20000,
    DEVPROP_OPERATOR_NONE = 0,
    DEVPROP_OPERATOR_EXISTS = 1,
    DEVPROP_OPERATOR_NOT_EXISTS = 0x10001,
    DEVPROP_OPERATOR_EQUALS = 2,
    DEVPROP_OPERATOR_NOT_EQUALS = 0x10002,
    DEVPROP_OPERATOR_GREATER_THAN = 3,
    DEVPROP_OPERATOR_LESS_THAN = 4,
    DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
    DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
    DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 0x20002,
    DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 0x30002,
    DEVPROP_OPERATOR_BITWISE_AND = 7,
    DEVPROP_OPERATOR_BITWISE_OR = 8,
    DEVPROP_OPERATOR_BEGINS_WITH = 9,
    DEVPROP_OPERATOR_ENDS_WITH = 10,
    DEVPROP_OPERATOR_CONTAINS = 11,
    DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 0x20009,
    DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 0x2000a,
    DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 0x2000b,
    DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
    DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 0x21000,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 0x22000,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 0x23000,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 0x24000,
    DEVPROP_OPERATOR_AND_OPEN = 0x100000,
    DEVPROP_OPERATOR_AND_CLOSE = 0x200000,
    DEVPROP_OPERATOR_OR_OPEN = 0x300000,
    DEVPROP_OPERATOR_OR_CLOSE = 0x400000,
    DEVPROP_OPERATOR_NOT_OPEN = 0x500000,
    DEVPROP_OPERATOR_NOT_CLOSE = 0x600000,
    DEVPROP_OPERATOR_ARRAY_CONTAINS = 0x10000000,
    DEVPROP_OPERATOR_MASK_EVAL = 4095,
    DEVPROP_OPERATOR_MASK_LIST = 0xf000,
    DEVPROP_OPERATOR_MASK_MODIFIER = 0xf0000,
    DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,
    DEVPROP_OPERATOR_MASK_LOGICAL = 0xff00000,
    DEVPROP_OPERATOR_MASK_ARRAY = -268435456
};

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2
};

typedef enum _DMA_SPEED {
    Compatible = 0,
    TypeA = 1,
    TypeB = 2,
    TypeC = 3,
    TypeF = 4,
    MaximumDmaSpeed = 5
};

typedef enum _DMA_WIDTH {
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5
};

typedef enum _DOMAIN_CONFIGURATION_ARCH {
    DomainConfigurationArm64 = 0,
    DomainConfigurationInvalid = 1
};

typedef enum _DUMP_EVENTS {
    DUMP_EVENT_NONE = 0,
    DUMP_EVENT_HIBER_RESUME = 1,
    DUMP_EVENT_HIBER_RESUME_END = 2
};

typedef enum _ETW_BUFFER_STATE {
    EtwBufferStateFree = 0,
    EtwBufferStateGeneralLogging = 1,
    EtwBufferStateCSwitch = 2,
    EtwBufferStateFlush = 3,
    EtwBufferStatePendingCompression = 4,
    EtwBufferStateCompressed = 5,
    EtwBufferStatePlaceholder = 6,
    EtwBufferStateMaximum = 7
};

typedef enum _ETW_GUID_TYPE {
    EtwTraceGuidType = 0,
    EtwNotificationGuidType = 1,
    EtwGroupGuidType = 2,
    EtwGuidTypeMax = 3
};

typedef enum _ETW_HEADER_TYPE {
    EtwHeaderTypeNative = 0,
    EtwHeaderTypeWow = 1,
    EtwHeaderTypeMax = 2
};

typedef enum _ETW_NOTIFICATION_TYPE {
    EtwNotificationTypeNoReply = 1,
    EtwNotificationTypeLegacyEnable = 2,
    EtwNotificationTypeEnable = 3,
    EtwNotificationTypePrivateLogger = 4,
    EtwNotificationTypePerflib = 5,
    EtwNotificationTypeAudio = 6,
    EtwNotificationTypeSession = 7,
    EtwNotificationTypeReserved = 8,
    EtwNotificationTypeCredentialUI = 9,
    EtwNotificationTypeInProcSession = 10,
    EtwNotificationTypeFilteredPrivateLogger = 11,
    EtwNotificationTypeMax = 12
};

typedef enum _ETW_PERFECT_HASH_FUNCTION_TYPE {
    ETW_PHF_EVENT_ID = 0,
    ETW_PHF_STACK_WALK = 1,
    ETW_PHF_MAX_COUNT = 2
};

typedef enum _ETW_PERIODIC_TIMER_STATE {
    EtwpPeriodicTimerUnset = 0,
    EtwpPeriodicTimerSet = 1
};

typedef enum _ETW_RT_EVENT_LOSS {
    EtwRtEventNoLoss = 0,
    EtwRtEventLost = 1,
    EtwRtBufferLost = 2,
    EtwRtBackupLost = 3,
    EtwRtEventLossMax = 4
};

typedef enum _ETW_STRING_TOKEN_TYPE {
    ETW_STRING_TOKEN_EXE = 0,
    ETW_STRING_TOKEN_PACKAGE_ID = 1,
    ETW_STRING_TOKEN_PKG_APP_ID = 2,
    ETW_STRING_TOKEN_MAX_COUNT = 3
};

typedef enum _EVENT_INFO_CLASS {
    EventProviderBinaryTrackInfo = 0,
    EventProviderSetReserved1 = 1,
    EventProviderSetTraits = 2,
    EventProviderUseDescriptorType = 3,
    MaxEventInfo = 4
};

typedef enum _EVENT_TYPE {
    NotificationEvent = 0,
    SynchronizationEvent = 1
};

typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3
};

typedef enum _EXQUEUEINDEX {
    ExPoolUntrusted = 0,
    IoPoolUntrusted = 1,
    ExPoolMax = 8
};

typedef enum _EXT_IOMMU_DEVICE_TYPE {
    EXT_IOMMU_DEVICE_TYPE_INVALID = 0,
    EXT_IOMMU_DEVICE_TYPE_PCI = 1,
    EXT_IOMMU_DEVICE_TYPE_ACPI = 2,
    EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,
    EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4,
    EXT_IOMMU_DEVICE_TYPE_GIC = 5,
    EXT_IOMMU_DEVICE_TYPE_TEST = 6,
    EXT_IOMMU_DEVICE_TYPE_MAX = 7
};

typedef enum _EX_GEN_RANDOM_DOMAIN {
    ExGenRandomDomainKernel = 0,
    ExGenRandomDomainFirst = 0,
    ExGenRandomDomainUserVisible = 1,
    ExGenRandomDomainMax = 2
};

typedef enum _EX_POOL_PRIORITY {
    LowPoolPriority = 0,
    LowPoolPrioritySpecialPoolOverrun = 8,
    LowPoolPrioritySpecialPoolUnderrun = 9,
    NormalPoolPriority = 16,
    NormalPoolPrioritySpecialPoolOverrun = 24,
    NormalPoolPrioritySpecialPoolUnderrun = 25,
    HighPoolPriority = 32,
    HighPoolPrioritySpecialPoolOverrun = 40,
    HighPoolPrioritySpecialPoolUnderrun = 41
};

typedef enum _FAULT_INFORMATION_ARCH {
    FaultInformationInvalid = 0,
    FaultInformationArm64 = 1
};

typedef enum _FAULT_INFORMATION_ARM64_TYPE {
    UnsupportedUpstreamTransaction = 0,
    AddressSizeFault = 1,
    TlbMatchConflict = 2,
    ExternalFault = 3,
    PermissionFault = 4,
    AccessFlagFault = 5,
    TranslationFault = 6,
    MaxFaultType = 7
};

typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileDesiredStorageClassInformation = 67,
    FileStatInformation = 68,
    FileMemoryPartitionInformation = 69,
    FileStatLxInformation = 70,
    FileCaseSensitiveInformation = 71,
    FileLinkInformationEx = 72,
    FileLinkInformationExBypassAccessCheck = 73,
    FileStorageReserveIdInformation = 74,
    FileCaseSensitiveInformationForceAccessCheck = 75,
    FileMaximumInformation = 76
};

typedef enum _FILE_OBJECT_EXTENSION_TYPE {
    FoExtTypeTransactionParams = 0,
    FoExtTypeInternal = 1,
    FoExtTypeIosbRange = 2,
    FoExtTypeGeneric = 3,
    FoExtTypeSfio = 4,
    FoExtTypeSymlink = 5,
    FoExtTypeOplockKey = 6,
    FoExtTypeSilo = 7,
    FoExtTypeMemoryPartitionInfo = 8,
    MaxFoExtTypes = 9
};

typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsMaximumInformation = 15
};

typedef enum _FS_FILTER_SECTION_SYNC_TYPE {
    SyncTypeOther = 0,
    SyncTypeCreateSection = 1
};

typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE {
    NotifyTypeCreate = 0,
    NotifyTypeRetired = 1
};

typedef enum _FUNCTION_TABLE_TYPE {
    RF_SORTED = 0,
    RF_UNSORTED = 1,
    RF_CALLBACK = 2,
    RF_KERNEL_DYNAMIC = 3
};

typedef enum _GPIO_PIN_CONFIG_TYPE {
    PullDefault = 0,
    PullUp = 1,
    PullDown = 2,
    PullNone = 3
};

typedef enum _GPIO_PIN_IORESTRICTION_TYPE {
    IoRestrictionNone = 0,
    IoRestrictionInputOnly = 1,
    IoRestrictionOutputOnly = 2,
    IoRestrictionNoneAndPreserve = 3
};

typedef enum _HAL_CLOCK_TIMER_MODE {
    HalClockTimerModePeriodic = 0,
    HalClockTimerModeOneShot = 1,
    HalClockTimerModeMax = 2
};

typedef enum _HAL_PROCESSOR_STAT_TYPE {
    HalProcessorStatResidency = 0,
    HalProcessorStatCount = 1,
    HalProcessorStatMax = 2
};

typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter = 0,
    MaxHardwareCounterType = 1
};

typedef enum _HEAP_FAILURE_TYPE {
    heap_failure_internal = 0,
    heap_failure_unknown = 1,
    heap_failure_generic = 2,
    heap_failure_entry_corruption = 3,
    heap_failure_multiple_entries_corruption = 4,
    heap_failure_virtual_block_corruption = 5,
    heap_failure_buffer_overrun = 6,
    heap_failure_buffer_underrun = 7,
    heap_failure_block_not_busy = 8,
    heap_failure_invalid_argument = 9,
    heap_failure_invalid_allocation_type = 10,
    heap_failure_usage_after_free = 11,
    heap_failure_cross_heap_operation = 12,
    heap_failure_freelists_corruption = 13,
    heap_failure_listentry_corruption = 14,
    heap_failure_lfh_bitmap_mismatch = 15,
    heap_failure_segment_lfh_bitmap_corruption = 16,
    heap_failure_segment_lfh_double_free = 17,
    heap_failure_vs_subsegment_corruption = 18,
    heap_failure_null_heap = 19,
    heap_failure_allocation_limit = 20,
    heap_failure_commit_limit = 21
};

typedef enum _HV_EXT_EPF_MODE {
    HvExtEpfModeMin = 0,
    HvExtEpfModeNt = 0,
    HvExtEpfModeMax = 1
};

typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18
};

typedef enum _INTERLOCKED_RESULT {
    ResultNegative = 1,
    ResultZero = 0,
    ResultPositive = 2
};

typedef enum _INVPCID_TYPE {
    InvpcidIndividualAddress = 0,
    InvpcidSingleContext = 1,
    InvpcidAllContextAndGlobals = 2,
    InvpcidAllContext = 3
};

typedef enum _IOP_PRIORITY_HINT {
    IopIoPriorityNotSet = 0,
    IopIoPriorityVeryLow = 1,
    IopIoPriorityLow = 2,
    IopIoPriorityNormal = 3,
    IopIoPriorityHigh = 4,
    IopIoPriorityCritical = 5,
    MaxIopIoPriorityTypes = 6
};

typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject = 2,
    DeallocateObjectKeepRegisters = 3
};

typedef enum _IO_PRIORITY_HINT {
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5
};

typedef enum _IO_RATE_CONTROL_TYPE {
    IoRateControlTypeCapMin = 0,
    IoRateControlTypeIopsCap = 0,
    IoRateControlTypeBandwidthCap = 1,
    IoRateControlTypeTimePercentCap = 2,
    IoRateControlTypeCapMax = 2,
    IoRateControlTypeReservationMin = 3,
    IoRateControlTypeIopsReservation = 3,
    IoRateControlTypeBandwidthReservation = 4,
    IoRateControlTypeTimePercentReservation = 5,
    IoRateControlTypeReservationMax = 5,
    IoRateControlTypeCriticalReservationMin = 6,
    IoRateControlTypeIopsCriticalReservation = 6,
    IoRateControlTypeBandwidthCriticalReservation = 7,
    IoRateControlTypeTimePercentCriticalReservation = 8,
    IoRateControlTypeCriticalReservationMax = 8,
    IoRateControlTypeSoftCapMin = 9,
    IoRateControlTypeIopsSoftCap = 9,
    IoRateControlTypeBandwidthSoftCap = 10,
    IoRateControlTypeTimePercentSoftCap = 11,
    IoRateControlTypeSoftCapMax = 11,
    IoRateControlTypeLimitExcessNotifyMin = 12,
    IoRateControlTypeIopsLimitExcessNotify = 12,
    IoRateControlTypeBandwidthLimitExcessNotify = 13,
    IoRateControlTypeTimePercentLimitExcessNotify = 14,
    IoRateControlTypeLimitExcessNotifyMax = 14,
    IoRateControlTypeMax = 15
};

typedef enum _IO_SESSION_STATE {
    IoSessionStateCreated = 1,
    IoSessionStateInitialized = 2,
    IoSessionStateConnected = 3,
    IoSessionStateDisconnected = 4,
    IoSessionStateDisconnectedLoggedOn = 5,
    IoSessionStateLoggedOn = 6,
    IoSessionStateLoggedOff = 7,
    IoSessionStateTerminated = 8,
    IoSessionStateMax = 9
};

typedef enum _IRQ_PRIORITY {
    IrqPriorityUndefined = 0,
    IrqPriorityLow = 1,
    IrqPriorityNormal = 2,
    IrqPriorityHigh = 3
};

typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectFreezeInformation = 18,
    JobObjectExtendedAccountingInformation = 19,
    JobObjectWakeInformation = 20,
    JobObjectBackgroundInformation = 21,
    JobObjectSchedulingRankBiasInformation = 22,
    JobObjectTimerVirtualizationInformation = 23,
    JobObjectCycleTimeNotification = 24,
    JobObjectClearEvent = 25,
    JobObjectInterferenceInformation = 26,
    JobObjectClearPeakJobMemoryUsed = 27,
    JobObjectMemoryUsageInformation = 28,
    JobObjectSharedCommit = 29,
    JobObjectContainerId = 30,
    JobObjectIoRateControlInformation = 31,
    JobObjectSiloRootDirectory = 37,
    JobObjectServerSiloBasicInformation = 38,
    JobObjectServerSiloUserSharedData = 39,
    JobObjectServerSiloInitialize = 40,
    JobObjectServerSiloRunningState = 41,
    JobObjectIoAttribution = 42,
    JobObjectMemoryPartitionInformation = 43,
    JobObjectContainerTelemetryId = 44,
    JobObjectSiloSystemRoot = 45,
    JobObjectEnergyTrackingState = 46,
    JobObjectThreadImpersonationInformation = 47,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass = 48
};

typedef enum _KENLISTMENT_STATE {
    KEnlistmentUninitialized = 0,
    KEnlistmentActive = 256,
    KEnlistmentPreparing = 257,
    KEnlistmentPrepared = 258,
    KEnlistmentInDoubt = 259,
    KEnlistmentCommitted = 260,
    KEnlistmentCommittedNotify = 261,
    KEnlistmentCommitRequested = 262,
    KEnlistmentAborted = 263,
    KEnlistmentDelegated = 264,
    KEnlistmentDelegatedDisconnected = 265,
    KEnlistmentPrePreparing = 266,
    KEnlistmentForgotten = 267,
    KEnlistmentRecovering = 268,
    KEnlistmentAborting = 269,
    KEnlistmentReadOnly = 270,
    KEnlistmentOutcomeUnavailable = 271,
    KEnlistmentOffline = 272,
    KEnlistmentPrePrepared = 273,
    KEnlistmentInitialized = 274
};

typedef enum _KERNEL_STACK_LIMITS {
    BugcheckStackLimits = 0,
    DPCStackLimits = 1,
    ExpandedStackLimits = 2,
    NormalStackLimits = 3,
    Win32kStackLimits = 4,
    SwapBusyStackLimits = 5,
    IsrStackLimits = 6,
    DebuggerStackLimits = 7,
    NmiStackLimits = 8,
    MachineCheckStackLimits = 9,
    MaximumStackLimits = 10
};

typedef enum _KE_WAKE_SOURCE_TYPE {
    KeWakeSourceTypeSpuriousWake = 0,
    KeWakeSourceTypeSpuriousClock = 1,
    KeWakeSourceTypeSpuriousInterrupt = 2,
    KeWakeSourceTypeQueryFailure = 3,
    KeWakeSourceTypeAccountingFailure = 4,
    KeWakeSourceTypeStaticSourceMax = 4,
    KeWakeSourceTypeInterrupt = 5,
    KeWakeSourceTypeIRTimer = 6,
    KeWakeSourceTypeMax = 7
};

typedef enum _KHETERO_CPU_POLICY {
    KHeteroCpuPolicyAll = 0,
    KHeteroCpuPolicyLarge = 1,
    KHeteroCpuPolicyLargeOrIdle = 2,
    KHeteroCpuPolicySmall = 3,
    KHeteroCpuPolicySmallOrIdle = 4,
    KHeteroCpuPolicyDynamic = 5,
    KHeteroCpuPolicyStaticMax = 5,
    KHeteroCpuPolicyBiasedSmall = 6,
    KHeteroCpuPolicyBiasedLarge = 7,
    KHeteroCpuPolicyDefault = 8,
    KHeteroCpuPolicyMax = 9
};

typedef enum _KHETERO_CPU_QOS {
    KHeteroCpuQosDefault = 0,
    KHeteroCpuQosHigh = 0,
    KHeteroCpuQosMedium = 1,
    KHeteroCpuQosLow = 2,
    KHeteroCpuQosMultimedia = 3,
    KHeteroCpuQosDynamic = 4,
    KHeteroCpuQosMax = 4
};

typedef enum _KHETERO_RUNNING_TYPE {
    KHeteroShortRunning = 0,
    KHeteroLongRunning = 1,
    KHeteroRunningTypeMax = 2
};

typedef enum _KINTERRUPT_MODE {
    LevelSensitive = 0,
    Latched = 1
};

typedef enum _KINTERRUPT_POLARITY {
    InterruptPolarityUnknown = 0,
    InterruptActiveHigh = 1,
    InterruptRisingEdge = 1,
    InterruptActiveLow = 2,
    InterruptFallingEdge = 2,
    InterruptActiveBoth = 3,
    InterruptActiveBothTriggerLow = 3,
    InterruptActiveBothTriggerHigh = 4
};

typedef enum _KI_CALLBACK {
    KiCallbackNmi = 0,
    KiCallbackBound = 1,
    KiCallbackSx = 2,
    KiCallbackCount = 3,
    KiFirstCallback = 0
};

typedef enum _KOBJECTS {
    EventNotificationObject = 0,
    EventSynchronizationObject = 1,
    MutantObject = 2,
    ProcessObject = 3,
    QueueObject = 4,
    SemaphoreObject = 5,
    ThreadObject = 6,
    GateObject = 7,
    TimerNotificationObject = 8,
    TimerSynchronizationObject = 9,
    Spare2Object = 10,
    Spare3Object = 11,
    Spare4Object = 12,
    Spare5Object = 13,
    Spare6Object = 14,
    Spare7Object = 15,
    Spare8Object = 16,
    ProfileCallbackObject = 17,
    ApcObject = 18,
    DpcObject = 19,
    DeviceQueueObject = 20,
    PriQueueObject = 21,
    InterruptObject = 22,
    ProfileObject = 23,
    Timer2NotificationObject = 24,
    Timer2SynchronizationObject = 25,
    ThreadedDpcObject = 26,
    MaximumKernelObject = 27
};

typedef enum _KPROCESS_PPM_POLICY {
    ProcessPpmDefault = 0,
    ProcessPpmThrottle = 1,
    ProcessPpmSemiThrottle = 2,
    ProcessPpmNoThrottle = 3,
    ProcessPpmWindowMinimized = 4,
    ProcessPpmWindowOccluded = 5,
    ProcessPpmWindowVisible = 6,
    ProcessPpmWindowInFocus = 7,
    MaxProcessPpmPolicy = 8
};

typedef enum _KPROCESS_STATE {
    ProcessInMemory = 0,
    ProcessOutOfMemory = 1,
    ProcessInTransition = 2,
    ProcessOutTransition = 3,
    ProcessInSwap = 4,
    ProcessOutSwap = 5,
    ProcessRetryOutSwap = 6,
    ProcessAllSwapStates = 7
};

typedef enum _KPROFILE_SOURCE {
    ProfileTime = 0,
    ProfileAlignmentFixup = 1,
    ProfileTotalIssues = 2,
    ProfilePipelineDry = 3,
    ProfileLoadInstructions = 4,
    ProfilePipelineFrozen = 5,
    ProfileBranchInstructions = 6,
    ProfileTotalNonissues = 7,
    ProfileDcacheMisses = 8,
    ProfileIcacheMisses = 9,
    ProfileCacheMisses = 10,
    ProfileBranchMispredictions = 11,
    ProfileStoreInstructions = 12,
    ProfileFpInstructions = 13,
    ProfileIntegerInstructions = 14,
    Profile2Issue = 15,
    Profile3Issue = 16,
    Profile4Issue = 17,
    ProfileSpecialInstructions = 18,
    ProfileTotalCycles = 19,
    ProfileIcacheIssues = 20,
    ProfileDcacheAccesses = 21,
    ProfileMemoryBarrierCycles = 22,
    ProfileLoadLinkedIssues = 23,
    ProfileMaximum = 24
};

typedef enum _KRESOURCEMANAGER_STATE {
    KResourceManagerUninitialized = 0,
    KResourceManagerOffline = 1,
    KResourceManagerOnline = 2
};

typedef enum _KTHREAD_PPM_POLICY {
    ThreadPpmDefault = 0,
    ThreadPpmThrottle = 1,
    ThreadPpmSemiThrottle = 2,
    ThreadPpmNoThrottle = 3,
    MaxThreadPpmPolicy = 4
};

typedef enum _KTHREAD_STATE {
    Initialized = 0,
    Ready = 1,
    Running = 2,
    Standby = 3,
    Terminated = 4,
    Waiting = 5,
    Transition = 6,
    DeferredReady = 7,
    GateWaitObsolete = 8,
    WaitingForProcessInSwap = 9
};

typedef enum _KTHREAD_TAG {
    KThreadTagNone = 0,
    KThreadTagMediaBuffering = 1,
    KThreadTagMax = 2
};

typedef enum _KTIMER2_COLLECTION_INDEX {
    KTimer2CollectionNoWake = 0,
    KTimer2CollectionHr = 1,
    KTimer2CollectionFinite = 2,
    KTimer2CollectionIr = 3,
    KTimer2CollectionNotInserted = 16,
    KTimer2CollectionInvalid = 20,
    KTimer2CollectionOptional = 32,
    KTimer2CollectionMin = 0,
    KTimer2CollectionMax = 4,
    KTimer2CollectionNode1 = 2
};

typedef enum _KTRANSACTION_OUTCOME {
    KTxOutcomeUninitialized = 0,
    KTxOutcomeUndetermined = 1,
    KTxOutcomeCommitted = 2,
    KTxOutcomeAborted = 3,
    KTxOutcomeUnavailable = 4
};

typedef enum _KTRANSACTION_STATE {
    KTransactionUninitialized = 0,
    KTransactionActive = 1,
    KTransactionPreparing = 2,
    KTransactionPrepared = 3,
    KTransactionInDoubt = 4,
    KTransactionCommitted = 5,
    KTransactionAborted = 6,
    KTransactionDelegated = 7,
    KTransactionPrePreparing = 8,
    KTransactionForgotten = 9,
    KTransactionRecovering = 10,
    KTransactionPrePrepared = 11
};

typedef enum _KWAIT_BLOCK_STATE {
    WaitBlockBypassStart = 0,
    WaitBlockBypassComplete = 1,
    WaitBlockSuspendBypassStart = 2,
    WaitBlockSuspendBypassComplete = 3,
    WaitBlockActive = 4,
    WaitBlockInactive = 5,
    WaitBlockSuspended = 6,
    WaitBlockAllStates = 7
};

typedef enum _KWAIT_REASON {
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrSpare0 = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    WrKeyedEvent = 21,
    WrTerminated = 22,
    WrProcessInSwap = 23,
    WrCpuRateControl = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    WrAlertByThreadId = 37,
    WrDeferredPreempt = 38,
    WrPhysicalFault = 39,
    MaximumWaitReason = 40
};

typedef enum _KWAIT_STATE {
    WaitInProgress = 0,
    WaitCommitted = 1,
    WaitAborted = 2,
    WaitSuspendInProgress = 3,
    WaitSuspended = 4,
    WaitResumeInProgress = 5,
    WaitResumeAborted = 6,
    WaitFirstSuspendState = 3,
    WaitLastSuspendState = 6,
    MaximumWaitState = 7
};

typedef enum _LDR_DDAG_STATE {
    LdrModulesMerged = -5,
    LdrModulesInitError = -4,
    LdrModulesSnapError = -3,
    LdrModulesUnloaded = -2,
    LdrModulesUnloading = -1,
    LdrModulesPlaceHolder = 0,
    LdrModulesMapping = 1,
    LdrModulesMapped = 2,
    LdrModulesWaitingForDependencies = 3,
    LdrModulesSnapping = 4,
    LdrModulesSnapped = 5,
    LdrModulesCondensed = 6,
    LdrModulesReadyToInit = 7,
    LdrModulesInitializing = 8,
    LdrModulesReadyToRun = 9
};

typedef enum _LDR_DLL_LOAD_REASON {
    LoadReasonStaticDependency = 0,
    LoadReasonStaticForwarderDependency = 1,
    LoadReasonDynamicForwarderDependency = 2,
    LoadReasonDelayloadDependency = 3,
    LoadReasonDynamicLoad = 4,
    LoadReasonAsImageLoad = 5,
    LoadReasonAsDataLoad = 6,
    LoadReasonEnclavePrimary = 7,
    LoadReasonEnclaveDependency = 8,
    LoadReasonUnknown = -1
};

typedef enum _LOCK_OPERATION {
    IoReadAccess = 0,
    IoWriteAccess = 1,
    IoModifyAccess = 2
};

typedef enum _MACHINE_CHECK_NESTING_LEVEL {
    McheckNormal = 0,
    McheckNmi = 1,
    McheckNestingLevels = 2
};

typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = 2,
    MmHardwareCoherentCached = 3,
    MmNonCachedUnordered = 4,
    MmUSWCCached = 5,
    MmMaximumCacheType = 6,
    MmNotMapped = -1
};

typedef enum _MEMORY_CACHING_TYPE_ORIG {
    MmFrameBufferCached = 2
};

typedef enum _MI_ALTERNATE_LOCK_VA_TYPE {
    AlternateLockVaTypeSystemPtes = 0,
    AlternateLockVaTypeNonPagedPool = 1,
    AlternateLockVaTypeUser = 2,
    AlternateLockVaTypeSystem = 3,
    AlternateLockVaTypeMaximum = 4
};

typedef enum _MI_ASSIGNED_REGION_TYPES {
    AssignedRegionNonPagedPool = 0,
    AssignedRegionPagedPool = 1,
    AssignedRegionSystemCache = 2,
    AssignedRegionSystemPtes = 3,
    AssignedRegionUltraZero = 4,
    AssignedRegionPfnDatabase = 5,
    AssignedRegionCfg = 6,
    AssignedRegionHyperSpace = 7,
    AssignedRegionKernelStacks = 8,
    AssignedRegionPageTables = 9,
    AssignedRegionSpecialPoolPaged = 10,
    AssignedRegionSpecialPoolNonPaged = 11,
    AssignedRegionSession = 12,
    AssignedRegionSystemImages = 13,
    AssignedRegionMaximum = 14
};

typedef enum _MI_AVAILABLE_PAGE_WAIT_TYPES {
    AvailablePagesWaitLow = 0,
    AvailablePagesWaitHigh = 1,
    AvailablePagesWaitVeryHigh = 2,
    AvailablePagesWaitMaximum = 3
};

typedef enum _MI_CFG_BITMAP_TYPE {
    CfgBitMapNative = 0,
    CfgBitMapWow64 = 1,
    CfgBitMapMax = 2
};

typedef enum _MI_CROSS_PARTITION_CHARGE_TYPE {
    MiCrossPartitionSectionResAvailCharge = 0,
    MiCrossPartitionSectionCommitCharge = 1,
    MiCrossPartitionPageCombineResAvailCharge = 2,
    MiCrossPartitionPageCombineCommitCharge = 3,
    MiCrossPartitionLargePageResAvailCharge = 4,
    MiCrossPartitionLargePageCommitCharge = 5,
    MiCrossPartitionPageCloneResAvailCharge = 6,
    MiCrossPartitionMaximumCharge = 7
};

typedef enum _MI_DYNAMICBASE_BITMAP {
    DynamicBaseBitMap32 = 0,
    DynamicBaseBitMap64Low = 1,
    DynamicBaseBitMap64High = 2,
    DynamicBaseBitMapWow64Dll = 3,
    LastDynamicBaseBitMap = 4
};

typedef enum _MI_ENCLAVE_TYPE {
    MiEnclaveNone = 0,
    MiEnclaveHardware = 1,
    MiEnclaveVsm = 2,
    MiEnclaveMax = 3
};

typedef enum _MI_IO_PFN_TYPE {
    MiIoPfnProbes = 0,
    MiIoPfnMaps = 1,
    MiIoPfnUnmapped = 2,
    MiMaximumIoPfnType = 3
};

typedef enum _MI_KSTACK_TYPE {
    MiRegularKstack = 0,
    MiShortLivedKstack = 1,
    MiMaximumKstack = 2
};

typedef enum _MI_MEMORY_EVENT_TYPES {
    LowPagedPoolEvent = 0,
    HighPagedPoolEvent = 1,
    LowNonPagedPoolEvent = 2,
    HighNonPagedPoolEvent = 3,
    LowAvailablePagesEvent = 4,
    HighAvailablePagesEvent = 5,
    LowCommitEvent = 6,
    HighCommitEvent = 7,
    MaximumCommitEvent = 8,
    BadMemoryDetectedEvent = 9,
    PhysicalMemoryChangeEvent = 10,
    TotalNumberOfMemoryEvents = 11
};

typedef enum _MI_MEMORY_HIGHLOW {
    MiMemoryHigh = 0,
    MiMemoryLow = 1,
    MiMemoryHighLow = 2
};

typedef enum _MI_MIRROR_BITMAP_TYPES {
    MirrorBitmapTypeNormal = 0,
    MirrorBitmapTypeInterlocked = 1,
    MirrorBitmapTypeMaximum = 2
};

typedef enum _MI_NODE_NONPAGED_POOL_BITMAP {
    NonPagedPoolLargePdeNx = 0,
    NonPagedPoolSmallPde = 1,
    NonPagedPoolPerPage = 2
};

typedef enum _MI_PARTITION_THREAD {
    MiZeroPageThreadSlot = 0,
    MiPartitionWorkingSetManagerSlot = 1,
    MiDereferenceSegmentThreadSlot = 2,
    MiModifiedPageWriterSlot = 3,
    MiMappedPageWriterSlot = 4,
    MiNumberOfPartitionThreads = 5
};

typedef enum _MI_PFN_CACHE_ATTRIBUTE {
    MiNonCached = 0,
    MiCached = 1,
    MiWriteCombined = 2,
    MiNotMapped = 3
};

typedef enum _MI_SHARED_USER_PAGE_TYPES {
    MiSharedUserPageKernel = 0,
    MiSharedUserPageHypervisor = 1,
    MiSharedUserPageMaximum = 2
};

typedef enum _MI_SLAB_ALLOCATOR_PROTECTION {
    MiSlabAllocatorProtectionReadExecute = 0,
    MiSlabAllocatorProtectionReadOnly = 1,
    MiSlabAllocatorProtectionNoAccess = 2,
    MiSlabAllocatorProtectionMax = 3
};

typedef enum _MI_SUBVAD_LISTS {
    MiSubVadPebTebAny = 0,
    MiSubVadPebTebBelow2gb = 1,
    MiSubVadPebTebBelow4gb = 2,
    MiSubVadMaximum = 3
};

typedef enum _MI_SYSTEM_VA_TYPE {
    MiVaUnused = 0,
    MiVaSessionSpace = 1,
    MiVaProcessSpace = 2,
    MiVaBootLoaded = 3,
    MiVaPfnDatabase = 4,
    MiVaNonPagedPool = 5,
    MiVaPagedPool = 6,
    MiVaSpecialPoolPaged = 7,
    MiVaSystemCache = 8,
    MiVaSystemPtes = 9,
    MiVaHal = 10,
    MiVaSessionGlobalSpace = 11,
    MiVaDriverImages = 12,
    MiVaSpecialPoolNonPaged = 13,
    MiVaSystemPtesLarge = 14,
    MiVaKernelStacks = 15,
    MiVaMaximumType = 16
};

typedef enum _MI_VAD_64K_TYPES {
    MiVad64KPrivate = 0,
    MiVad64KShared = 1,
    MiVad64KTypes = 2
};

typedef enum _MI_VAD_ALLOCATION_CELL_TYPE {
    MiVadBottomUp = 0,
    MiVadStackPebTeb = 1,
    MiVadReserved64 = 2,
    MiVadAllocationCellMaximum = 3
};

typedef enum _MI_WORKING_SET_TYPE {
    MiWorkingSetTypeSystemCache = 0,
    MiWorkingSetTypeSystemViews = 1,
    MiWorkingSetTypePartitionMaximum = 1,
    MiWorkingSetTypePagedPool = 2,
    MiWorkingSetTypePagableMaximum = 2,
    MiWorkingSetTypeSystemPtes = 3,
    MiWorkingSetTypeKernelStacks = 4,
    MiWorkingSetTypeNonPagedPool = 5,
    MiWorkingSetTypeMaximum = 6
};

typedef enum _MMLISTS {
    ZeroedPageList = 0,
    FreePageList = 1,
    StandbyPageList = 2,
    ModifiedPageList = 3,
    ModifiedNoWritePageList = 4,
    BadPageList = 5,
    ActiveAndValid = 6,
    TransitionPage = 7
};

typedef enum _MM_PAGE_ACCESS_TYPE {
    MmPteAccessType = 0,
    MmCcReadAheadType = 1,
    MmPfnRepurposeType = 2,
    MmMaximumPageAccessType = 3
};

typedef enum _MM_POOL_PRIORITIES {
    MmHighPriority = 0,
    MmNormalPriority = 1,
    MmLowPriority = 2,
    MmMaximumPoolPriority = 3
};

typedef enum _MM_POOL_TYPES {
    MmNonPagedPool = 0,
    MmPagedPool = 1,
    MmSessionPagedPool = 2,
    MmMaximumPoolType = 3
};

typedef enum _MM_PREEMPTIVE_TRIMS {
    MmPreemptForNonPaged = 0,
    MmPreemptForPaged = 1,
    MmPreemptForNonPagedPriority = 2,
    MmPreemptForPagedPriority = 3,
    MmMaximumPreempt = 4
};

typedef enum _MODE {
    KernelMode = 0,
    UserMode = 1,
    MaximumMode = 2
};

typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3
};

typedef enum _OBJECT_INFORMATION_CLASS {
    ObjectBasicInformation = 0,
    ObjectNameInformation = 1,
    ObjectTypeInformation = 2,
    ObjectTypesInformation = 3,
    ObjectHandleFlagInformation = 4,
    ObjectSessionInformation = 5,
    ObjectSessionObjectInformation = 6,
    MaxObjectInfoClass = 7
};

typedef enum _OB_OPEN_REASON {
    ObCreateHandle = 0,
    ObOpenHandle = 1,
    ObDuplicateHandle = 2,
    ObInheritHandle = 3,
    ObMaxOpenReason = 4
};

typedef enum _PCI_BUSMASTER_RID_TYPE {
    BusmasterRidFromDeviceRid = 0,
    BusmasterRidFromBridgeRid = 1,
    BusmasterRidFromMultipleBridges = 2
};

typedef enum _PCW_CALLBACK_TYPE {
    PcwCallbackAddCounter = 0,
    PcwCallbackRemoveCounter = 1,
    PcwCallbackEnumerateInstances = 2,
    PcwCallbackCollectData = 3
};

typedef enum _PEP_ACPI_RESOURCE_TYPE {
    PepAcpiMemory = 0,
    PepAcpiIoPort = 1,
    PepAcpiInterrupt = 2,
    PepAcpiGpioIo = 3,
    PepAcpiGpioInt = 4,
    PepAcpiSpbI2c = 5,
    PepAcpiSpbSpi = 6,
    PepAcpiSpbUart = 7,
    PepAcpiExtendedMemory = 8,
    PepAcpiExtendedIo = 9
};

typedef enum _PEP_WORK_TYPE {
    PepWorkActiveComplete = 0,
    PepWorkRequestIdleState = 1,
    PepWorkDevicePower = 2,
    PepWorkRequestPowerControl = 3,
    PepWorkDeviceIdle = 4,
    PepWorkCompleteIdleState = 5,
    PepWorkCompletePerfState = 6,
    PepWorkAcpiNotify = 7,
    PepWorkAcpiEvaluateControlMethodComplete = 8,
    PepWorkMax = 9
};

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE {
    PerfInfoMemUsagePfnMetadata = 0,
    PerfInfoMemUsageMax = 1
};

typedef enum _PERFINFO_MM_STAT {
    PerfInfoMMStatNotUsed = 0,
    PerfInfoMMStatAggregatePageCombine = 1,
    PerfInfoMMStatIterationPageCombine = 2,
    PerfInfoMMStatMax = 3
};

typedef enum _PF_FILE_ACCESS_TYPE {
    PfFileAccessTypeRead = 0,
    PfFileAccessTypeWrite = 1,
    PfFileAccessTypeMax = 2
};

typedef enum _PLUGPLAY_EVENT_CATEGORY {
    HardwareProfileChangeEvent = 0,
    TargetDeviceChangeEvent = 1,
    DeviceClassChangeEvent = 2,
    CustomDeviceEvent = 3,
    DeviceInstallEvent = 4,
    DeviceArrivalEvent = 5,
    VetoEvent = 6,
    BlockedDriverEvent = 7,
    InvalidIDEvent = 8,
    DevicePropertyChangeEvent = 9,
    DeviceInstanceRemovalEvent = 10,
    DeviceInstanceStartedEvent = 11,
    MaxPlugEventCategory = 12
};

typedef enum _PNP_DEVICE_ACTION_REQUEST {
    AssignResources = 0,
    ClearDeviceProblem = 1,
    ClearProblem = 2,
    ClearEjectProblem = 3,
    HaltDevice = 4,
    QueryPowerRelations = 5,
    Rebalance = 6,
    ReenumerateBootDevices = 7,
    ReenumerateDeviceOnly = 8,
    ReenumerateDeviceTree = 9,
    ReenumerateRootDevices = 10,
    RequeryDeviceState = 11,
    ResetDevice = 12,
    ResourceRequirementsChanged = 13,
    RestartEnumeration = 14,
    SetDeviceProblem = 15,
    StartDevice = 16,
    StartSystemDevicesPass0 = 17,
    StartSystemDevicesPass1 = 18,
    NotifyTransportRelationsChange = 19,
    NotifyEjectionRelationsChange = 20,
    ConfigureDevice = 21,
    ConfigureDeviceClass = 22,
    ConfigureDeviceExtensions = 23,
    ConfigureDeviceReset = 24,
    ClearDmaGuardProblem = 25
};

typedef enum _PNP_DEVICE_DELETE_TYPE {
    QueryRemoveDevice = 0,
    CancelRemoveDevice = 1,
    RemoveDevice = 2,
    SurpriseRemoveDevice = 3,
    EjectDevice = 4,
    RemoveFailedDevice = 5,
    RemoveUnstartedFailedDevice = 6,
    MaxDeviceDeleteType = 7
};

typedef enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON {
    DeviceQueryRebalanceSucceeded = 0,
    DeviceQueryStopFailed = 1,
    DeviceFailedGetNewResourceRequirement = 2,
    DeviceInUnexpectedState = 3,
    DeviceNotSupportQueryRebalance = 4
};

typedef enum _PNP_DEVNODE_STATE {
    DeviceNodeUnspecified = 768,
    DeviceNodeUninitialized = 769,
    DeviceNodeInitialized = 770,
    DeviceNodeDriversAdded = 771,
    DeviceNodeResourcesAssigned = 772,
    DeviceNodeStartPending = 773,
    DeviceNodeStartCompletion = 774,
    DeviceNodeStartPostWork = 775,
    DeviceNodeStarted = 776,
    DeviceNodeQueryStopped = 777,
    DeviceNodeStopped = 778,
    DeviceNodeRestartCompletion = 779,
    DeviceNodeEnumeratePending = 780,
    DeviceNodeEnumerateCompletion = 781,
    DeviceNodeAwaitingQueuedDeletion = 782,
    DeviceNodeAwaitingQueuedRemoval = 783,
    DeviceNodeQueryRemoved = 784,
    DeviceNodeRemovePendingCloses = 785,
    DeviceNodeRemoved = 786,
    DeviceNodeDeletePendingCloses = 787,
    DeviceNodeDeleted = 788,
    MaxDeviceNodeState = 789
};

typedef enum _PNP_REBALANCE_FAILURE {
    RebalanceFailureNone = 0,
    RebalanceFailureDisabled = 1,
    RebalanceFailureNoMemory = 2,
    RebalanceFailureQueryStopUnexpectedVeto = 3,
    RebalanceFailureNoRequirements = 4,
    RebalanceFailureNoCandidates = 5,
    RebalanceFailureNoConfiguration = 6
};

typedef enum _PNP_REBALANCE_REASON {
    RebalanceReasonUnknown = 0,
    RebalanceReasonRequirementsChanged = 1,
    RebalanceReasonNewDevice = 2
};

typedef enum _PNP_VETO_TYPE {
    PNP_VetoTypeUnknown = 0,
    PNP_VetoLegacyDevice = 1,
    PNP_VetoPendingClose = 2,
    PNP_VetoWindowsApp = 3,
    PNP_VetoWindowsService = 4,
    PNP_VetoOutstandingOpen = 5,
    PNP_VetoDevice = 6,
    PNP_VetoDriver = 7,
    PNP_VetoIllegalDeviceRequest = 8,
    PNP_VetoInsufficientPower = 9,
    PNP_VetoNonDisableable = 10,
    PNP_VetoLegacyDriver = 11,
    PNP_VetoInsufficientRights = 12
};

typedef enum _PNP_WATCHDOG_TYPE {
    PNP_EVENT_WORKER_WATCHDOG = 1,
    PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2,
    PNP_DELAYED_REMOVE_WORKER_WATCHDOG = 3
};

typedef enum _POLICY_AUDIT_EVENT_TYPE {
    AuditCategorySystem = 0,
    AuditCategoryLogon = 1,
    AuditCategoryObjectAccess = 2,
    AuditCategoryPrivilegeUse = 3,
    AuditCategoryDetailedTracking = 4,
    AuditCategoryPolicyChange = 5,
    AuditCategoryAccountManagement = 6,
    AuditCategoryDirectoryServiceAccess = 7,
    AuditCategoryAccountLogon = 8
};

typedef enum _POOL_TYPE {
    NonPagedPool = 0,
    NonPagedPoolExecute = 0,
    PagedPool = 1,
    NonPagedPoolMustSucceed = 2,
    DontUseThisType = 3,
    NonPagedPoolCacheAligned = 4,
    PagedPoolCacheAligned = 5,
    NonPagedPoolCacheAlignedMustS = 6,
    MaxPoolType = 7,
    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = 2,
    NonPagedPoolBaseCacheAligned = 4,
    NonPagedPoolBaseCacheAlignedMustS = 6,
    NonPagedPoolSession = 32,
    PagedPoolSession = 33,
    NonPagedPoolMustSucceedSession = 34,
    DontUseThisTypeSession = 35,
    NonPagedPoolCacheAlignedSession = 36,
    PagedPoolCacheAlignedSession = 37,
    NonPagedPoolCacheAlignedMustSSession = 38,
    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = 516,
    NonPagedPoolSessionNx = 544
};

typedef enum _POP_DEEP_SLEEP_DISENGAGE_REASON {
    PopDeepSleepDisengageReasonInactive = 0,
    PopDeepSleepDisengageReasonNonAoAc = 1,
    PopDeepSleepDisengageReasonPendingIrps = 2,
    PopDeepSleepDisengageReasonPowerSettings = 3,
    PopDeepSleepDisengageReasonDozeS4WorkerQueued = 4,
    PopDeepSleepDisengageReasonSystemPowerTransition = 5,
    PopDeepSleepDisengageReasonDeviceBlockingDrips = 6,
    PopDeepSleepDisengageReasonAcpi = 7,
    PopDeepSleepDisengageReasonDirectedDripsTransition = 8,
    PopDeepSleepDisengageReasonPepPreVeto = 9,
    PopDeepSleepDisengageReasonMax = 10
};

typedef enum _POP_DEVICE_IDLE_TYPE {
    DeviceIdleNormal = 0,
    DeviceIdleDisk = 1
};

typedef enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON {
    DirectedDripsProblemDeviceReasonSpecialDevice = 0,
    DirectedDripsProblemDeviceReasonNoDfx = 1,
    DirectedDripsProblemDeviceReasonNoPs4 = 2,
    DirectedDripsProblemDeviceReasonNoPs4Root = 3,
    DirectedDripsProblemDeviceReasonMax = 4
};

typedef enum _POP_IO_STATUS {
    IoReady = 0,
    IoPending = 1,
    IoDone = 2
};

typedef enum _POP_SLEEP_CHECKPOINT {
    PopSleepCheckpointInvalid = 0,
    PopSleepCheckpointPowerTransitionStart = 1,
    PopSleepCheckpointSuspendAppsBefore = 2,
    PopSleepCheckpointSuspendAppsAfter = 3,
    PopSleepCheckpointSuspendServicesBefore = 4,
    PopSleepCheckpointSuspendServicesAfter = 5,
    PopSleepCheckpointNotifySuperfetchBefore = 6,
    PopSleepCheckpointNotifySuperfetchAfter = 7,
    PopSleepCheckpointNotifyCallbacksBefore = 8,
    PopSleepCheckpointNotifyCallbacksAfter = 9,
    PopSleepCheckpointSleepTransactionCommitted = 10,
    PopSleepCheckpointQueryDriversBefore = 11,
    PopSleepCheckpointQueryDriversAfter = 12,
    PopSleepCheckpointAllocatingHiberContext = 13,
    PopSleepCheckpointSuspendDriversBefore = 14,
    PopSleepCheckpointPreSleepNotification = 16,
    PopSleepCheckpointInterruptsDisabledBegin = 17,
    PopSleepCheckpointInvokeHandlerBefore = 18,
    PopSleepCheckpointSaveHiberContextBegin = 19,
    PopSleepCheckpointInitializeDumpStackFailed = 20,
    PopSleepCheckpointHiberWriteFailed = 21,
    PopSleepCheckpointHiberFileTooSmall = 22,
    PopSleepCheckpointSaveHiberContextFailed = 23,
    PopSleepCheckpointSaveHiberContextEnd = 24,
    PopSleepCheckpointHiberKernelHandoff = 25,
    PopSleepCheckpointInvokeHandlerAfter = 26,
    PopSleepCheckpointReadHiberfileBefore = 27,
    PopSleepCheckpointInitializeDumpStackForReadFailed = 28,
    PopSleepCheckpointHiberReadFailed = 29,
    PopSleepCheckpointChecksumFailure = 30,
    PopSleepCheckpointDecompressionFailed = 31,
    PopSleepCheckpointReadHiberfileAfter = 32,
    PopSleepCheckpointInterruptsDisabledEnd = 33,
    PopSleepCheckpointWakeDriversAfter = 36,
    PopSleepCheckpointResumeAppsBefore = 37,
    PopSleepCheckpointResumeAppsAfter = 38,
    PopSleepCheckpointResumeServicesBefore = 39,
    PopSleepCheckpointResumeServicesAfter = 40,
    PopSleepCheckpointPowerTransitionEnd = 41,
    PopSleepCheckpointAllocatingHiberContextNoFileObject = 42,
    PopSleepCheckpointAllocatingHiberContextGetDumpStackFailed = 43,
    PopSleepCheckpointAllocatingHiberContextLoadResumeContextFailed = 44,
    PopSleepCheckpointAllocatingHiberContextBcdOpenFailed = 45,
    PopSleepCheckpointAllocatingHiberContextEstablishResumeObjectFailed = 46,
    PopSleepCheckpointAllocatingHiberContextSetPendingResumeFailed = 47,
    PopSleepCheckpointAllocatingHiberContextAllocateIoPagesPagesFailed = 48,
    PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid1 = 49,
    PopSleepCheckpointAllocatingHiberContextAllocateDumpPagesFailed = 50,
    PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid2 = 51,
    PopSleepCheckpointAllocatingHiberContextUnHibernatedMdlFailed = 52,
    PopSleepCheckpointAllocatingHiberContextSecureResourcesFailed = 53,
    PopSleepCheckpointMax = 54
};

typedef enum _POP_SLEEP_CHECKPOINT_STATUS {
    PopSleepCheckpointStatusDisabled = 0,
    PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1,
    PopSleepCheckpointStatusEnabledManually = 4,
    PopSleepCheckpointStatusEnabledMax = 7,
    PopSleepCheckpointStatusFailedNotEfiSystem = 8,
    PopSleepCheckpointStatusFailedInsufficientSpace = 9,
    PopSleepCheckpointStatusFailedOtherError = 15,
    PopSleepCheckpointStatusMax = 15
};

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL {
    PowerInternalAcpiInterfaceRegister = 0,
    PowerInternalS0LowPowerIdleInfo = 1,
    PowerInternalReapplyBrightnessSettings = 2,
    PowerInternalUserAbsencePrediction = 3,
    PowerInternalUserAbsencePredictionCapability = 4,
    PowerInternalPoProcessorLatencyHint = 5,
    PowerInternalStandbyNetworkRequest = 6,
    PowerInternalDirtyTransitionInformation = 7,
    PowerInternalSetBackgroundTaskState = 8,
    PowerInternalReservedDoNotUseEnum9 = 9,
    PowerInternalReservedDoNotUseEnum10 = 10,
    PowerInternalReservedDoNotUseEnum11 = 11,
    PowerInternalReservedDoNotUseEnum12 = 12,
    PowerInternalReservedDoNotUseEnum13 = 13,
    PowerInternalReservedDoNotUseEnum14 = 14,
    PowerInternalReservedDoNotUseEnum15 = 15,
    PowerInternalReservedDoNotUseEnum16 = 16,
    PowerInternalReservedDoNotUseEnum17 = 17,
    PowerInternalBootSessionStandbyActivationInformation = 18,
    PowerInternalSessionPowerState = 19,
    PowerInternalSessionTerminalInput = 20,
    PowerInternalSetWatchdog = 21,
    PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,
    PowerInternalExternalMonitorConnected = 23,
    PowerInternalHighPrecisionBrightnessSettings = 24,
    PowerInternalWinrtScreenToggle = 25,
    PowerInternalPpmQosDisable = 26,
    PowerInternalTransitionCheckpoint = 27,
    PowerInternalInputControllerState = 28,
    PowerInternalFirmwareResetReason = 29,
    PowerInternalPpmSchedulerQosSupport = 30,
    PowerInternalBootStatGet = 31,
    PowerInternalBootStatSet = 32,
    PowerInternalCallHasNotReturnedWatchdog = 33,
    PowerInternalBootStatCheckIntegrity = 34,
    PowerInternalBootStatRestoreDefaults = 35,
    PowerInternalHostEsStateUpdate = 36,
    PowerInternalGetPowerActionState = 37,
    PowerInternalBootStatUnlock = 38,
    PowerInternalWakeOnVoiceState = 39,
    PowerInternalDeepSleepBlock = 40,
    PowerInternalIsPoFxDevice = 41,
    PowerInternalPowerTransitionExtensionAtBoot = 42,
    PowerInternalProcessorBrandedFrequency = 43,
    PowerInternalTimeBrokerExpirationReason = 44,
    PowerInternalNotifyUserShutdownStatus = 45,
    PowerInternalPowerRequestTerminalCoreWindow = 46,
    PowerInternalProcessorIdleVeto = 47,
    PowerInternalPlatformIdleVeto = 48,
    PowerInternalIsLongPowerButtonBugcheckEnabled = 49,
    PowerInternalAutoChkCausedReboot = 50,
    PowerInformationInternalMaximum = 51
};

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI {
    PowerInformationInternalTtmFirst = 4096,
    PowerInternalTtmOpenTerminal = 4096,
    PowerInternalTtmCreateTerminal = 4097,
    PowerInternalTtmEvacuateDevices = 4098,
    PowerInternalTtmCreateTerminalEventQueue = 4099,
    PowerInternalTtmGetTerminalEvent = 4100,
    PowerInternalTtmSetDefaultDeviceAssignment = 4101,
    PowerInternalTtmAssignDevice = 4102,
    PowerInternalTtmSetDisplayState = 4103,
    PowerInternalTtmSetDisplayTimeouts = 4104,
    PowerInternalTtmSetDisplayPowerRequest = 4105,
    PowerInformationInternalTtmLast = 4105
};

typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3
};

typedef enum _POWER_REQUEST_TYPE_INTERNAL {
    PowerRequestDisplayRequiredInternal = 0,
    PowerRequestSystemRequiredInternal = 1,
    PowerRequestAwayModeRequiredInternal = 2,
    PowerRequestExecutionRequiredInternal = 3,
    PowerRequestPerfBoostRequiredInternal = 4,
    PowerRequestActiveLockScreenInternal = 5,
    PowerRequestInternalInvalid = 6
};

typedef enum _POWER_STATE_TYPE {
    SystemPowerState = 0,
    DevicePowerState = 1
};

typedef enum _PO_CS_DEVICE_NOTIFICATION_TYPE {
    PoCsDeviceNotificationStorage = 0,
    PoCsDeviceNotificationWiFi = 1,
    PoCsDeviceNotificationMbn = 2,
    PoCsDeviceNotificationAudio = 3,
    PoCsDeviceNotificationEthernet = 4,
    PoCsDeviceNotificationMaximum = 5
};

typedef enum _PO_FX_PERF_STATE_TYPE {
    PoFxPerfStateTypeDiscrete = 0,
    PoFxPerfStateTypeRange = 1,
    PoFxPerfStateTypeMaximum = 2
};

typedef enum _PO_FX_PERF_STATE_UNIT {
    PoFxPerfStateUnitOther = 0,
    PoFxPerfStateUnitFrequency = 1,
    PoFxPerfStateUnitBandwidth = 2,
    PoFxPerfStateUnitMaximum = 3
};

typedef enum _PO_HIBER_FORCE_DISABLE_REASON {
    PoHiberForceDisableReasonPolicy = 0,
    PoHiberForceDisableReasonGuardedHost = 1,
    PoHiberForceDisableReasonMax = 2
};

typedef enum _PO_MODERN_SLEEP_ACTION {
    PoModernSleepActionGlobalActivatorsVeto = 0,
    PoModernSleepActionNonBlockingPhases = 1,
    PoModernSleepActionForceIdle = 2,
    PoModernSleepActionMinimalBlockingNotificationClients = 3,
    PoModernSleepActionMax = 4
};

typedef enum _PPM_PERF_QOS_DISABLE_REASON {
    PpmPerfQosDisableInternal = 0,
    PpmPerfQosDisableNoProfile = 1,
    PpmPerfQosDisableNoPolicy = 2,
    PpmPerfQosDisableInsufficientPolicy = 3,
    PpmPerfQosDisableMaxOverride = 4,
    PpmPerfQosDisableLowLatency = 5,
    PpmPerfQosDisableSmtScheduler = 6,
    PpmPerfQosDisableNoHardwareSupport = 7,
    PpmPerfQosDisableGroupPolicy = 8,
    PpmPerfQosDisableMax = 9
};

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER {
    LookasideSmallIrpList = 0,
    LookasideMediumIrpList = 1,
    LookasideLargeIrpList = 2,
    LookasideMdlList = 3,
    LookasideCreateInfoList = 4,
    LookasideNameBufferList = 5,
    LookasideTwilightList = 6,
    LookasideCompletionList = 7,
    LookasideScratchBufferList = 8,
    LookasideMaximumList = 9
};

typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified = 0,
    CacheInstruction = 1,
    CacheData = 2,
    CacheTrace = 3
};

typedef enum _PROCESS_SECTION_TYPE {
    ProcessSectionData = 0,
    ProcessSectionImage = 1,
    ProcessSectionImageNx = 2,
    ProcessSectionPagefileBacked = 3,
    ProcessSectionMax = 4
};

typedef enum _PROCESS_TERMINATE_REQUEST_REASON {
    ProcessTerminateRequestReasonNone = 0,
    ProcessTerminateCommitFail = 1,
    ProcessTerminateWriteToExecuteMemory = 2,
    ProcessTerminateAttachedWriteToExecuteMemory = 3,
    ProcessTerminateRequestReasonMax = 4
};

typedef enum _PROCESS_VA_TYPE {
    ProcessVAImage = 0,
    ProcessVASection = 1,
    ProcessVAPrivate = 2,
    ProcessVAMax = 3
};

typedef enum _PROC_HYPERVISOR_STATE {
    ProcHypervisorNone = 0,
    ProcHypervisorPresent = 1,
    ProcHypervisorPower = 2,
    ProcHypervisorHvCounters = 3
};

typedef enum _PS_ATTRIBUTE_NUM {
    PsAttributeParentProcess = 0,
    PsAttributeDebugObject = 1,
    PsAttributeToken = 2,
    PsAttributeClientId = 3,
    PsAttributeTebAddress = 4,
    PsAttributeImageName = 5,
    PsAttributeImageInfo = 6,
    PsAttributeMemoryReserve = 7,
    PsAttributePriorityClass = 8,
    PsAttributeErrorMode = 9,
    PsAttributeStdHandleInfo = 10,
    PsAttributeHandleList = 11,
    PsAttributeGroupAffinity = 12,
    PsAttributePreferredNode = 13,
    PsAttributeIdealProcessor = 14,
    PsAttributeUmsThread = 15,
    PsAttributeMitigationOptions = 16,
    PsAttributeProtectionLevel = 17,
    PsAttributeSecureProcess = 18,
    PsAttributeJobList = 19,
    PsAttributeChildProcessPolicy = 20,
    PsAttributeAllApplicationPackagesPolicy = 21,
    PsAttributeWin32kFilter = 22,
    PsAttributeSafeOpenPromptOriginClaim = 23,
    PsAttributeBnoIsolation = 24,
    PsAttributeDesktopAppPolicy = 25,
    PsAttributeChpe = 26,
    PsAttributeMax = 27
};

typedef enum _PS_MITIGATION_OPTION {
    PS_MITIGATION_OPTION_NX = 0,
    PS_MITIGATION_OPTION_SEHOP = 1,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    PS_MITIGATION_OPTION_CET_SHADOW_STACKS = 31
};

typedef enum _PS_PROTECTED_SIGNER {
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerWinSystem = 7,
    PsProtectedSignerApp = 8,
    PsProtectedSignerMax = 9
};

typedef enum _PS_PROTECTED_TYPE {
    PsProtectedTypeNone = 0,
    PsProtectedTypeProtectedLight = 1,
    PsProtectedTypeProtected = 2,
    PsProtectedTypeMax = 3
};

typedef enum _PS_RESOURCE_TYPE {
    PsResourceNonPagedPool = 0,
    PsResourcePagedPool = 1,
    PsResourcePageFile = 2,
    PsResourceWorkingSet = 3,
    PsResourceMax = 4
};

typedef enum _PS_STD_HANDLE_STATE {
    PsNeverDuplicate = 0,
    PsRequestDuplicate = 1,
    PsAlwaysDuplicate = 2,
    PsMaxStdHandleStates = 3
};

typedef enum _PS_WAKE_REASON {
    PsWakeReasonUser = 0,
    PsWakeReasonExecutionRequired = 1,
    PsWakeReasonKernel = 2,
    PsWakeReasonInstrumentation = 3,
    PsWakeReasonPreserveProcess = 4,
    PsWakeReasonActivityReference = 5,
    PsWakeReasonWorkOnBehalf = 6,
    PsMaxWakeReasons = 7
};

typedef enum _REG_NOTIFY_CLASS {
    RegNtDeleteKey = 0,
    RegNtPreDeleteKey = 0,
    RegNtSetValueKey = 1,
    RegNtPreSetValueKey = 1,
    RegNtDeleteValueKey = 2,
    RegNtPreDeleteValueKey = 2,
    RegNtSetInformationKey = 3,
    RegNtPreSetInformationKey = 3,
    RegNtRenameKey = 4,
    RegNtPreRenameKey = 4,
    RegNtEnumerateKey = 5,
    RegNtPreEnumerateKey = 5,
    RegNtEnumerateValueKey = 6,
    RegNtPreEnumerateValueKey = 6,
    RegNtQueryKey = 7,
    RegNtPreQueryKey = 7,
    RegNtQueryValueKey = 8,
    RegNtPreQueryValueKey = 8,
    RegNtQueryMultipleValueKey = 9,
    RegNtPreQueryMultipleValueKey = 9,
    RegNtPreCreateKey = 10,
    RegNtPostCreateKey = 11,
    RegNtPreOpenKey = 12,
    RegNtPostOpenKey = 13,
    RegNtKeyHandleClose = 14,
    RegNtPreKeyHandleClose = 14,
    RegNtPostDeleteKey = 15,
    RegNtPostSetValueKey = 16,
    RegNtPostDeleteValueKey = 17,
    RegNtPostSetInformationKey = 18,
    RegNtPostRenameKey = 19,
    RegNtPostEnumerateKey = 20,
    RegNtPostEnumerateValueKey = 21,
    RegNtPostQueryKey = 22,
    RegNtPostQueryValueKey = 23,
    RegNtPostQueryMultipleValueKey = 24,
    RegNtPostKeyHandleClose = 25,
    RegNtPreCreateKeyEx = 26,
    RegNtPostCreateKeyEx = 27,
    RegNtPreOpenKeyEx = 28,
    RegNtPostOpenKeyEx = 29,
    RegNtPreFlushKey = 30,
    RegNtPostFlushKey = 31,
    RegNtPreLoadKey = 32,
    RegNtPostLoadKey = 33,
    RegNtPreUnLoadKey = 34,
    RegNtPostUnLoadKey = 35,
    RegNtPreQueryKeySecurity = 36,
    RegNtPostQueryKeySecurity = 37,
    RegNtPreSetKeySecurity = 38,
    RegNtPostSetKeySecurity = 39,
    RegNtCallbackObjectContextCleanup = 40,
    RegNtPreRestoreKey = 41,
    RegNtPostRestoreKey = 42,
    RegNtPreSaveKey = 43,
    RegNtPostSaveKey = 44,
    RegNtPreReplaceKey = 45,
    RegNtPostReplaceKey = 46,
    RegNtPreQueryKeyName = 47,
    RegNtPostQueryKeyName = 48,
    MaxRegNtNotifyClass = 49
};

typedef enum _REQUESTER_TYPE {
    KernelRequester = 0,
    UserProcessRequester = 1,
    UserSharedServiceRequester = 2
};

typedef enum _RTLP_HP_ADDRESS_SPACE_TYPE {
    HeapAddressUser = 0,
    HeapAddressKernel = 1,
    HeapAddressSession = 2,
    HeapAddressTypeMax = 3
};

typedef enum _RTLP_HP_LOCK_TYPE {
    HeapLockPaged = 0,
    HeapLockNonPaged = 1,
    HeapLockTypeMax = 2
};

typedef enum _RTLP_HP_MEMORY_TYPE {
    HeapMemoryPaged = 0,
    HeapMemoryNonPaged = 1,
    HeapMemoryLargePage = 2,
    HeapMemoryHugePage = 3,
    HeapMemoryTypeMax = 4
};

typedef enum _RTL_GENERIC_COMPARE_RESULTS {
    GenericLessThan = 0,
    GenericGreaterThan = 1,
    GenericEqual = 2
};

typedef enum _RTL_MEMORY_TYPE {
    MemoryTypePaged = 0,
    MemoryTypeNonPaged = 1,
    MemoryTypeLargePage = 2,
    MemoryTypeHugePage = 3,
    MemoryTypeMax = 4
};

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
};

typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor = 0,
    QuerySecurityDescriptor = 1,
    DeleteSecurityDescriptor = 2,
    AssignSecurityDescriptor = 3
};

typedef enum _SEP_CACHED_HANDLES_ENTRY_TYPE {
    SepCachedHandlesEntryLowbox = 0,
    SepCachedHandlesEntryBnoIsolation = 1
};

typedef enum _SERVERSILO_STATE {
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED = 1,
    SERVERSILO_SHUTTING_DOWN = 2,
    SERVERSILO_TERMINATING = 3,
    SERVERSILO_TERMINATED = 4
};

typedef enum _SKSERVICE {
    SECURESERVICE_NONE = 0,
    SECURESERVICE_PHASE4_INIT = 1,
    SECURESERVICE_START_PROCESSOR = 2,
    SECURESERVICE_FINISH_START_PROCESSOR = 3,
    SECURESERVICE_REGISTER_SYSTEM_DLLS = 4,
    SECURESERVICE_REGISTER_SYSTEM_PROCESS = 5,
    SECURESERVICE_CREATE_PROCESS = 6,
    SECURESERVICE_INITIALIZE_PROCESS = 7,
    SECURESERVICE_CREATE_THREAD = 8,
    SECURESERVICE_REQUEST_THREAD_EXIT = 9,
    SECURESERVICE_TERMINATE_THREAD = 10,
    SECURESERVICE_RUNDOWN_PROCESS = 11,
    SECURESERVICE_DEBUG_PROCESS = 12,
    SECURESERVICE_GET_TEB_ADDRESS = 13,
    SECURESERVICE_GET_CONTEXT = 14,
    SECURESERVICE_SET_CONTEXT = 15,
    SECURESERVICE_SEND_ATTACH_NOTIFICATIONS = 16,
    SECURESERVICE_GET_ETW_DEBUG_ID = 17,
    SECURESERVICE_GET_ON_DEMAND_DEBUG_CHALLENGE = 18,
    SECURESERVICE_ENABLE_ON_DEMAND_DEBUG_WITH_RESPONSE = 19,
    SECURESERVICE_RETRIEVE_MAILBOX = 20,
    SECURESERVICE_IS_TRUSTLET_RUNNING = 21,
    SECURESERVICE_CREATE_SECURE_ALLOCATION = 22,
    SECURESERVICE_FILL_SECURE_ALLOCATION = 23,
    SECURESERVICE_MAKE_CODE_CATALOG = 24,
    SECURESERVICE_CREATE_SECURE_IMAGE = 25,
    SECURESERVICE_FINALIZE_SECURE_IMAGE_HASH = 26,
    SECURESERVICE_FINISH_SECURE_IMAGE_VALIDATION = 27,
    SECURESERVICE_PREPARE_IMAGE_RELOCATIONS = 28,
    SECURESERVICE_RELOCATE_IMAGE = 29,
    SECURESERVICE_CLOSE_SECURE_HANDLE = 30,
    SECURESERVICE_VALIDATE_DYNAMIC_CODE = 31,
    SECURESERVICE_TRANSFER_IMAGE_VERSION_RESOURCE = 32,
    SECURESERVICE_SET_CODE_INTEGRITY_POLICY = 33,
    SECURESERVICE_EXCHANGE_ENTROPY = 34,
    SECURESERVICE_ALLOCATE_HIBERNATE_RESOURCES = 35,
    SECURESERVICE_FREE_HIBERNATE_RESOURCES = 36,
    SECURESERVICE_CONFIGURE_DYNAMIC_MEMORY = 37,
    SECURESERVICE_DEBUG_PROTECT_MEMORY = 38,
    SECURESERVICE_DEBUG_READ_WRITE_MEMORY = 39,
    SECURESERVICE_QUERY_VIRTUAL_MEMORY = 40,
    SECURESERVICE_CREATE_ENCLAVE = 41,
    SECURESERVICE_LOAD_ENCLAVE_MODULE = 42,
    SECURESERVICE_INITIALIZE_ENCLAVE = 43,
    SECURESERVICE_TERMINATE_ENCLAVE = 44,
    SECURESERVICE_DELETE_ENCLAVE = 45,
    SECURESERVICE_CONNECT_SW_INTERRUPT = 46,
    SECURESERVICE_RELAX_HYPERGUARD_QUOTA = 47,
    SECURESERVICE_LIVEDUMP_QUERY_SECONDARYDATA_SIZE = 48,
    SECURESERVICE_LIVEDUMP_START = 49,
    SECURESERVICE_LIVEDUMP_ADD_BUFFER = 50,
    SECURESERVICE_LIVEDUMP_SETUP_BUFFER = 51,
    SECURESERVICE_LIVEDUMP_FINALIZE = 52,
    SECURESERVICE_LIVEDUMP_ABORT = 53,
    SECURESERVICE_LIVEDUMP_CAPTURE_PROCESS = 54,
    SECURESERVICE_NOTIFY_POWER_STATE = 55,
    SECURESERVICE_QUERY_PROFILE_INFORMATION = 56,
    SECURESERVICE_UPDATE_FREEZE_BIAS = 57,
    SECURESERVICE_CREATE_SECURE_SECTION = 58,
    SECURESERVICE_DELETE_SECURE_SECTION = 59,
    SECURESERVICE_QUERY_SECURE_DEVICE = 60,
    SECURESERVICE_UNPROTECT_SECURE_DEVICE = 61,
    SECURESERVICE_DETERMINE_HOT_PATCH_TYPE = 62,
    SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE_SIZE = 63,
    SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE = 64,
    SECURESERVICE_APPLY_HOT_PATCH = 65,
    SECURESERVICE_REVERT_HOT_PATCH = 66,
    SECURESERVICE_PROVISION_DUMP_KEYS = 67,
    SECURESERVICE_NO_TRACING_FIRST = 191,
    SECURESERVICE_GET_PEB_ADDRESS = 192,
    SECURESERVICE_VALIDATE_SECURE_IMAGE_PAGES = 193,
    SECURESERVICE_PRE_INIT_FIRST = 207,
    SECURESERVICE_PHASE3_INIT = 208,
    SECURESERVICE_PERIODIC = 209,
    SECURESERVICE_WORK_QUEUE = 210,
    SECURESERVICE_RESERVE_PROTECTED_PAGES = 211,
    SECURESERVICE_APPLY_DYNAMIC_RELOCATIONS = 212,
    SECURESERVICE_ETW_ENABLE_CALLBACK = 213,
    SECURESERVICE_INITIALIZE_KERNEL_CFG = 214,
    SECURESERVICE_LOAD_DRIVER = 215,
    SECURESERVICE_UNLOAD_DRIVER = 216,
    SECURESERVICE_RELOCATE_BOOT_DRIVER = 217,
    SECURESERVICE_ENABLE_CFG_TARGET = 218,
    SECURESERVICE_COMPLETE_SLAB_CONFIGURATION = 219,
    SECURESERVICE_INITIALIZE_RETPOLINE = 220,
    SECURESERVICE_PERFORM_RETPOLINE_RELOCATIONS = 221,
    SECURESERVICE_UPDATE_IMPORT_RELOCATIONS = 222,
    SECURESERVICE_DISPATCH_LEVEL_FIRST = 223,
    SECURESERVICE_FLUSH_ADDRESS_SPACE = 224,
    SECURESERVICE_FAST_FLUSH_RANGE_LIST = 225,
    SECURESERVICE_SLOW_FLUSH_RANGE_LIST = 226,
    SECURESERVICE_REMOVE_PROTECTED_PAGE = 227,
    SECURESERVICE_COPY_PROTECTED_PAGE = 228,
    SECURESERVICE_REGISTER_PROTECTED_PAGE = 229,
    SECURESERVICE_MAKE_PROTECTED_PAGE_WRITABLE = 230,
    SECURESERVICE_MAKE_PROTECTED_PAGE_EXECUTABLE = 231,
    SECURESERVICE_QUERY_STRONG_CODE_FEATURES = 232,
    SECURESERVICE_INVOKE_EFI_RUNTIME_SERVICE = 233,
    SECURESERVICE_LIVEDUMP_COLLECT_LIVE_DUMP = 234,
    SECURESERVICE_REGISTER_LOG_PAGES = 235,
    SECURESERVICE_RECLAIM_PARTITION_PAGES = 236,
    SECURESERVICE_BIND_NT_KERNEL_IMPORTS = 237,
    SECURESERVICE_SET_PLACEHOLDER_PAGES = 238,
    SECURESERVICE_VERIFY_PAGE = 239,
    SECURESERVICE_PREPARE_FOR_HIBERNATION = 240,
    SECURESERVICE_PREPARE_FOR_CRASHDUMP = 241,
    SECURESERVICE_REPORT_BUGCHECK_PROGRESS = 242,
    SECURESERVICE_SHUTDOWN = 243,
    SECURESERVICE_QUERY_SECURE_PCI_INFO = 244,
    SECURESERVICE_ACCESS_PCI_DEVICE = 245,
    SECURESERVICE_REINITIALIZE_DEBUGGER_TRANSPORT = 246,
    SECURESERVICE_KSR_CALL = 247,
    SECURESERVICE_SVC_CALL = 248,
    SECURESERVICE_BUGCHECK = 1792,
    SECURESERVICE_LIMITED_MODE_SERVICE_START = 2048
};

typedef enum _SYSTEM_DLL_TYPE {
    PsNativeSystemDll = 0,
    PsWowX86SystemDll = 1,
    PsWowArm32SystemDll = 2,
    PsWowAmd64SystemDll = 3,
    PsWowChpeX86SystemDll = 4,
    PsVsmEnclaveRuntimeDll = 5,
    PsSystemDllTotalTypes = 6
};

typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
};

typedef enum _SYSTEM_PROCESS_CLASSIFICATION {
    SystemProcessClassificationNormal = 0,
    SystemProcessClassificationSystem = 1,
    SystemProcessClassificationSecureSystem = 2,
    SystemProcessClassificationMemCompression = 3,
    SystemProcessClassificationRegistry = 4,
    SystemProcessClassificationMaximum = 5
};

typedef enum _THREAD_WORKLOAD_CLASS {
    ThreadWorkloadClassDefault = 0,
    ThreadWorkloadClassGraphics = 1,
    MaxThreadWorkloadClass = 2
};

typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation = 2
};

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3
};

typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass = 0,
    TraceHandleClass = 1,
    TraceEnableFlagsClass = 2,
    TraceEnableLevelClass = 3,
    GlobalLoggerHandleClass = 4,
    EventLoggerHandleClass = 5,
    AllLoggerHandlesClass = 6,
    TraceHandleByNameClass = 7,
    LoggerEventsLostClass = 8,
    TraceSessionSettingsClass = 9,
    LoggerEventsLoggedClass = 10,
    DiskIoNotifyRoutinesClass = 11,
    TraceInformationClassReserved1 = 12,
    AllPossibleNotifyRoutinesClass = 12,
    FltIoNotifyRoutinesClass = 13,
    TraceInformationClassReserved2 = 14,
    WdfNotifyRoutinesClass = 15,
    MaxTraceInformationClass = 16
};

typedef enum _TRANSFER_TYPE {
    ReadTransfer = 0,
    WriteTransfer = 1,
    OtherTransfer = 2
};

typedef enum _TYPE_OF_MEMORY {
    LoaderExceptionBlock = 0,
    LoaderSystemBlock = 1,
    LoaderFree = 2,
    LoaderBad = 3,
    LoaderLoadedProgram = 4,
    LoaderFirmwareTemporary = 5,
    LoaderFirmwarePermanent = 6,
    LoaderOsloaderHeap = 7,
    LoaderOsloaderStack = 8,
    LoaderSystemCode = 9,
    LoaderHalCode = 10,
    LoaderBootDriver = 11,
    LoaderConsoleInDriver = 12,
    LoaderConsoleOutDriver = 13,
    LoaderStartupDpcStack = 14,
    LoaderStartupKernelStack = 15,
    LoaderStartupPanicStack = 16,
    LoaderStartupPcrPage = 17,
    LoaderStartupPdrPage = 18,
    LoaderRegistryData = 19,
    LoaderMemoryData = 20,
    LoaderNlsData = 21,
    LoaderSpecialMemory = 22,
    LoaderBBTMemory = 23,
    LoaderZero = 24,
    LoaderXIPRom = 25,
    LoaderHALCachedMemory = 26,
    LoaderLargePageFiller = 27,
    LoaderErrorLogMemory = 28,
    LoaderVsmMemory = 29,
    LoaderFirmwareCode = 30,
    LoaderFirmwareData = 31,
    LoaderFirmwareReserved = 32,
    LoaderEnclaveMemory = 33,
    LoaderFirmwareKsr = 34,
    LoaderEnclaveKsr = 35,
    LoaderSkMemory = 36,
    LoaderMaximum = 37
};

typedef enum _TlgBlob_t {
    _TlgBlobNone = 0,
    _TlgBlobEnd = 1,
    _TlgBlobProvider = 2,
    _TlgBlobEvent3 = 3,
    _TlgBlobProvider3 = 4,
    _TlgBlobEvent2 = 5,
    _TlgBlobMax = 6
};

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3
};

typedef enum _VERIFIER_RULE_CLASS_ID {
    VrfSpecialPoolRuleClass = 0,
    VrfForceIrqlRuleClass = 1,
    VrfAllocationFailuresRuleClass = 2,
    VrfTrackingPoolAllocationsRuleClass = 3,
    VrfIORuleClass = 4,
    VrfDeadlockPreventionRuleClass = 5,
    VrfEnhancedIORuleClass = 6,
    VrfDMARuleClass = 7,
    VrfSecurityRuleClass = 8,
    VrfForcePendingIORequestRuleClass = 9,
    VrfIRPTrackingRuleClass = 10,
    VrfMiscellaneousRuleClass = 11,
    VrfMoreDebuggingRuleClass = 12,
    VrfMDLInvariantStackRuleClass = 13,
    VrfMDLInvariantDriverRuleClass = 14,
    VrfPowerDelayFuzzingRuleClass = 15,
    VrfPortMiniportRuleClass = 16,
    VrfStandardDDIRuleClass = 17,
    VrfAutoFailRuleClass = 18,
    VrfAdditionalDDIRuleClass = 19,
    VrfRuleClassBase = 20,
    VrfNdisWifiRuleClass = 21,
    VrfDriverLoggingRuleClass = 22,
    VrfSyncDelayFuzzingRuleClass = 23,
    VrfVMSwitchingRuleClass = 24,
    VrfCodeIntegrityRuleClass = 25,
    VrfBelow4GBAllocationRuleClass = 26,
    VrfProcessorBranchTraceRuleClass = 27,
    VrfAdvancedMMRuleClass = 28,
    VrfExtendingXDVTimeLimit = 29,
    VrfSystemBIOSRuleClass = 30,
    VrfHardwareRuleClass = 31,
    VrfStateSepRuleClass = 32,
    VrfWDFRuleClass = 33,
    VrfMoreIrqlRuleClass = 34,
    ReservedForDVRF35 = 35,
    ReservedForDVRF36 = 36,
    ReservedForDVRF37 = 37,
    ReservedForDVRF38 = 38,
    ReservedForDVRF39 = 39,
    ReservedForDVRF40 = 40,
    ReservedForDVRF41 = 41,
    ReservedForDVRF42 = 42,
    ReservedForDVRF43 = 43,
    ReservedForDVRF44 = 44,
    ReservedForDVRF45 = 45,
    ReservedForDVRF46 = 46,
    ReservedForDVRF47 = 47,
    ReservedForDVRF48 = 48,
    ReservedForDVRF49 = 49,
    ReservedForDVRF50 = 50,
    ReservedForDVRF51 = 51,
    ReservedForDVRF52 = 52,
    ReservedForDVRF53 = 53,
    ReservedForDVRF54 = 54,
    ReservedForDVRF55 = 55,
    ReservedForDVRF56 = 56,
    ReservedForDVRF57 = 57,
    ReservedForDVRF58 = 58,
    ReservedForDVRF59 = 59,
    ReservedForDVRF60 = 60,
    ReservedForDVRF61 = 61,
    ReservedForDVRF62 = 62,
    ReservedForDVRF63 = 63,
    VrfRuleClassSizeMax = 64
};

typedef enum _VI_DEADLOCK_RESOURCE_TYPE {
    VfDeadlockUnknown = 0,
    VfDeadlockMutex = 1,
    VfDeadlockMutexAbandoned = 2,
    VfDeadlockFastMutex = 3,
    VfDeadlockFastMutexUnsafe = 4,
    VfDeadlockSpinLock = 5,
    VfDeadlockInStackQueuedSpinLock = 6,
    VfDeadlockUnusedSpinLock = 7,
    VfDeadlockEresource = 8,
    VfDeadlockTypeMaximum = 9
};

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA = 1,
    WheaDataFormatMemory = 2,
    WheaDataFormatPCIExpress = 3,
    WheaDataFormatNMIPort = 4,
    WheaDataFormatPCIXBus = 5,
    WheaDataFormatPCIXDevice = 6,
    WheaDataFormatGeneric = 7,
    WheaDataFormatMax = 8
};

typedef enum _WHEA_ERROR_SEVERITY {
    WheaErrSevRecoverable = 0,
    WheaErrSevFatal = 1,
    WheaErrSevCorrected = 2,
    WheaErrSevInformational = 3
};

typedef enum _WHEA_ERROR_SOURCE_STATE {
    WheaErrSrcStateStopped = 1,
    WheaErrSrcStateStarted = 2
};

typedef enum _WHEA_ERROR_SOURCE_TYPE {
    WheaErrSrcTypeMCE = 0,
    WheaErrSrcTypeCMC = 1,
    WheaErrSrcTypeCPE = 2,
    WheaErrSrcTypeNMI = 3,
    WheaErrSrcTypePCIe = 4,
    WheaErrSrcTypeGeneric = 5,
    WheaErrSrcTypeINIT = 6,
    WheaErrSrcTypeBOOT = 7,
    WheaErrSrcTypeSCIGeneric = 8,
    WheaErrSrcTypeIPFMCA = 9,
    WheaErrSrcTypeIPFCMC = 10,
    WheaErrSrcTypeIPFCPE = 11,
    WheaErrSrcTypeGenericV2 = 12,
    WheaErrSrcTypeSCIGenericV2 = 13,
    WheaErrSrcTypeMax = 14
};

typedef enum _WHEA_ERROR_TYPE {
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory = 1,
    WheaErrTypePCIExpress = 2,
    WheaErrTypeNMI = 3,
    WheaErrTypePCIXBus = 4,
    WheaErrTypePCIXDevice = 5,
    WheaErrTypeGeneric = 6
};

typedef enum _WHEA_EVENT_LOG_ENTRY_ID {
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
    WheaEventLogEntryIdWheaInit = -2147483646,
    WheaEventLogEntryIdMax = -2147483645
};

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE {
    WheaEventLogEntryTypeInformational = 0,
    WheaEventLogEntryTypeWarning = 1,
    WheaEventLogEntryTypeError = 2
};

typedef enum _WORKING_SET_TYPE {
    WorkingSetTypeUser = 0,
    WorkingSetTypeSession = 1,
    WorkingSetTypeSystemTypes = 2,
    WorkingSetTypeSystemCache = 2,
    WorkingSetTypePagedPool = 3,
    WorkingSetTypeSystemViews = 4,
    WorkingSetTypePagableMaximum = 4,
    WorkingSetTypeSystemPtes = 5,
    WorkingSetTypeKernelStacks = 6,
    WorkingSetTypeNonPagedPool = 7,
    WorkingSetTypeMaximum = 8
};

typedef enum _WOW64_SHARED_INFORMATION {
    SharedNtdll32LdrInitializeThunk = 0,
    SharedNtdll32KiUserExceptionDispatcher = 1,
    SharedNtdll32KiUserApcDispatcher = 2,
    SharedNtdll32KiUserCallbackDispatcher = 3,
    SharedNtdll32RtlUserThreadStart = 4,
    SharedNtdll32pQueryProcessDebugInformationRemote = 5,
    SharedNtdll32BaseAddress = 6,
    SharedNtdll32LdrSystemDllInitBlock = 7,
    SharedNtdll32RtlpFreezeTimeBias = 8,
    Wow64SharedPageEntriesCount = 9
};

 ?? ::EKOMKFNL::`string';
 ?? ::GHGBBCHJ::`string';
 ?? ::LBKOJDO::`string';
$$20;
$$21;
$$22;
$$23;
$$29;
$$2a;
APPCOMPAT_REG_WRP_ACCESS_DENIED;
AUDIO_STATS_ID;
AccessCheckLog;
AcquireOpsEvent;
AcquireOpsReservePool;
ActionNames;
ActiveConnectList;
ActiveConnectListLock;
ActivityAttributes;
AdminlessAccessFailureLog;
AdtpAccessIdsStringBuffer;
AdtpEventIdStringSpecific;
AdtpEventIdStringStandard;
AdtpKnownPrivilege;
AdtpNullGuid;
AdtpNullLuid;
AdtpNullSid;
AdtpPerCategoryCount;
AdtpRegisteredWithEtw;
AdtpSourceModuleLock;
AdtpSourceModules;
AdtpStandardAccessTypes;
AdtpWellKnownPrivilegeMaxLen;
AfdWorkQueueSpinLock;
AllowedCachedObjectNames;
AlpcConnectionType;
AlpcConnectionTypeCounters;
AlpcHandleDataType;
AlpcHandleDataTypeCounters;
AlpcMessageTable;
AlpcMessageType;
AlpcMessageTypeCounters;
AlpcPortObjectType;
AlpcRegionType;
AlpcRegionTypeCounters;
AlpcReserveType;
AlpcReserveTypeCounters;
AlpcSectionType;
AlpcSectionTypeCounters;
AlpcSecurityType;
AlpcSecurityTypeCounters;
AlpcViewType;
AlpcViewTypeCounters;
AlpcpCompletionListDatabase;
AlpcpDummyEvent;
AlpcpFreeMessageLogListHead;
AlpcpFreeMessageSnapshotListHead;
AlpcpLogCallbackListHead;
AlpcpLogEnabled;
AlpcpLogLock;
AlpcpLookasides;
AlpcpMessageLogEnabled;
AlpcpMessageLogListHead;
AlpcpMessageLogLock;
AlpcpMessageLogLookupTable;
AlpcpNPLookasides;
AlpcpNextCallbackId;
AlpcpPortList;
AlpcpPortListLock;
AlpcpPortMapping;
AlpcpRegionGranularity;
AlpcpRegisteredTypes;
AlpcpSecondaryMessageTables;
AlpcpViewGranularity;
AlpcpWakePolicyDefault;
AltResMemBlockCount;
AlternateResourceModuleCount;
AlternateResourceModules;
AnimBarPos;
ArbMmConfigRange;
AslpCrc32Table;
AttemptOfflineStallCount;
AttributeTokenIntegrityLevel;
AttributeTokenIntegrityLevel_buffer;
AttributeTokenPrivileges;
AttributeTokenPrivileges_buffer;
AttributeTokenProtectionLevel;
AttributeTokenProtectionLevel_buffer;
AttributeTokenProtectionType;
AttributeTokenProtectionType_buffer;
AuditLoggerGuid;
BATTERY_ETW_PROVIDER;
BATTERY_EVT_BATTERY_PERCENT_REMAINING;
BATTERY_EVT_SYSTEM_BATTERY_STATUS_CHANGE;
BATTERY_EVT_SYSTEM_BATTERY_STATUS_RUNDOWN;
BBTBuffer;
BBTMemoryDescriptor;
BBTPagesToReserve;
BOOTENV_ETW_PROVIDER;
BOOT_ENVIRONMENT_VSM_POLICY_ENABLEMENT;
BOOT_ENVIRONMENT_VSM_POLICY_ENABLEMENT_FAILURE;
BOOT_FW_BOOT_PERF_DATA;
BOOT_PROVIDER_GUID;
BUGCHECK_EFI_GUID;
BatteryChargeTrajectoryThresholdMilliPercent;
BcdMutantHandle;
BcdSyncMutantName;
BcpCursor;
BcpDisplayParameters;
BcpErrorMessageOffset;
BcpLastProgressDisplayed;
BcpLastProgressUpdateTicks;
BcpProgressEnd;
BcpProgressOffset;
BcpStartTicks;
BcpStringsAndSizes;
BcpTextBoxLeftEdgeOverride;
BcpTextBoxRightEdgeOverride;
BcpWorkspace;
BgInternal;
BgpAnimationRegionSave;
BgpConsoleInterface;
BgpTextRegionSave;
BiBcdMutantDescriptor;
BiosBegin;
BootDriverLock;
BootPerformanceData;
BootStatDataCache;
BootStatDisableFlush;
BootStatFileHandle;
BootStatFileHandleAcquired;
BootStatKeepHandleOpen;
BugCheckProgressEFICalled;
BuiltinCallbackReg;
BurnMemoryDescriptor;
BvgaBootDriverFullyInitialized;
BvgaBootDriverInstalled;
BvgaDisplayState;
BvgaOldIrql;
BvgaProgressIndicator;
BvgaProgressState;
BvgaResetDisplayParameters;
BvgaTerminalBkgdColor;
BvgaTerminalTextColor;
CAP_AUTHORITY;
CCSwapNumLoggersPerClockType;
CKCLGuid;
CLFS_LSN_INVALID_EXT;
CLFS_LSN_NULL_EXT;
CMFCacheIndex;
CMFDirectorySectionPointer;
CMFFirstAccess;
CMFFlagsCache;
CMFHitsLastFlushTime;
CMFHitsSectionPointer;
CMFLock;
CMFSecurityDescriptor;
CMFSegmentSectionPointer;
CVEAuditProviderGuid;
CVE_AUDIT_DETECT_KM;
CallbackListDeleteEvent;
CallbackListHead;
CapSid;
CapeFlags;
CapeName;
CapePredicate;
CapeSD;
CapeStagedSD;
CapsuleDumpAllowed;
CapsuleTriageDumpBlock;
CapsuleTriageDumpBlockInitialized;
Cc10Milliseconds;
Cc5Milliseconds;
CcAggressiveZeroCount;
CcAggressiveZeroThreshold;
CcBcbSpinLock;
CcBcbTrimNotificationList;
CcBcbTrimNotificationListLock;
CcBitmapLookasideList;
CcChangeSharedCacheMapFileLock;
CcCoalescingFlushEvent;
CcCoalescingRegistration;
CcCollisionDelay;
CcDbgAdditionalPagesQueuedCount;
CcDbgDisableDAX;
CcDbgForcedLogPercentFull;
CcDbgFoundAsyncReadThreadListEmpty;
CcDbgLsnLargerThanHint;
CcDbgNumberOfAbortedTeardowns;
CcDbgNumberOfCcUnmapInactiveViews;
CcDbgNumberOfFailedBitmapAllocations;
CcDbgNumberOfFailedHighPriorityMappingsDueToCcResources;
CcDbgNumberOfFailedHighPriorityMappingsDueToMmResources;
CcDbgNumberOfFailedWorkQueueEntryAllocations;
CcDbgNumberOfNoopedReadAheads;
CcDbgRandomFailed;
CcDbgSkippedReductions;
CcEnableReadAheadInAsyncRead;
CcExternalCacheList;
CcExternalCacheListLock;
CcExtraWBThreadDelay;
CcFastMdlReadWait;
CcFirstDelay;
CcGlobalPartitionLock;
CcIdleDelay;
CcIdleDelayTick;
CcInitializationComplete;
CcMasterLock;
CcMasterSpinLock;
CcMaxAsyncReadWorkerThreads;
CcMaxLazyWritePages;
CcMaxLazyWritePagesOverride;
CcMaxNestingLevel;
CcMaxNumberCompleteAsyncReadExWorkItems;
CcMaxVacbLevelsSeen;
CcMaxWorklessLazywriteScans;
CcMaxZeroTransferSize;
CcMinimumFreeHighPriorityVacbs;
CcNoDelay;
CcNumberAsyncReadCacheHits;
CcNumberAsyncReadPrefetches;
CcNumberAsyncReadRefaulted;
CcNumberOfExternalCaches;
CcNumberOfFreeVacbs;
CcNumberOfMappedVacbs;
CcPartitionCount;
CcRandomSeed;
CcRemoteFileDPInlineFlushThreshold;
CcSystemPartitionDirtyPageStatistics;
CcSystemPartitionDirtyPageThresholds;
CcTestControlData;
CcTwilightLookasideList;
CcUnmapBehindLength;
CcVacbArrays;
CcVacbArraysAllocated;
CcVacbArraysHighestUsedIndex;
CcVacbFreeList;
CcVacbLevelLookasideList;
CcVacbLevelWithBcbListHeadsLookasideList;
CcVacbSpinLock;
CcVolumeCacheMapList;
CheckHeapFillPattern;
CmBootAcceptFirstTime;
CmCSDVersionString;
CmClassRegPropMap;
CmControlHive;
CmControlVector;
CmDefaultLanguageId;
CmDefaultLanguageIdLength;
CmDefaultLanguageIdType;
CmDeviceRegPropMap;
CmFastBoot;
CmFileNameExtensions;
CmFirstTime;
CmFreezeThawTimeoutInSeconds;
CmGlobalValidationRunlevel;
CmHiveIdentity;
CmInstallUILanguageFallbackToOOBm;
CmInstallUILanguageId;
CmInstallUILanguageIdLength;
CmInstallUILanguageIdType;
CmIoFileObjectType;
CmKeyObjectType;
CmLegacyAltitude;
CmMpsSvcKeySubstring;
CmNtCSDReleaseType;
CmNtCSDVersion;
CmNtGlobalFlag;
CmNtGlobalFlag2;
CmNtSpBuildNumber;
CmOSDataRootPath;
CmPerfCounters;
CmPhysicalAddressExtension;
CmProcessorMismatch;
CmRegistryAppName;
CmRegistryContainersName;
CmRegistryIODebug;
CmRegistryMachineHardwareDescriptionName;
CmRegistryMachineHardwareDescriptionSystemName;
CmRegistryMachineHardwareDeviceMapName;
CmRegistryMachineHardwareName;
CmRegistryMachineHardwareOwnerMapName;
CmRegistryMachineHardwareResourceMapName;
CmRegistryMachineName;
CmRegistryMachineSystemCurrentControlSet;
CmRegistryMachineSystemCurrentControlSetControlBootLog;
CmRegistryMachineSystemCurrentControlSetControlClass;
CmRegistryMachineSystemCurrentControlSetControlSafeBoot;
CmRegistryMachineSystemCurrentControlSetControlSessionManagerMemoryManagement;
CmRegistryMachineSystemCurrentControlSetEnumName;
CmRegistryMachineSystemCurrentControlSetEnumRootName;
CmRegistryMachineSystemCurrentControlSetHardwareProfilesCurrent;
CmRegistryMachineSystemCurrentControlSetServices;
CmRegistryMachineSystemCurrentControlSetServicesEventLog;
CmRegistryMachineSystemName;
CmRegistryProcessName;
CmRegistryRootName;
CmRegistrySizeLimit;
CmRegistrySizeLimitLength;
CmRegistrySizeLimitType;
CmRegistryTransactionType;
CmRegistryUserName;
CmRmSystem;
CmSIDMappingCacheHit;
CmSelfHeal;
CmStateSeparationAllHivesVolatile;
CmStateSeparationDevMode;
CmStateSeparationEnabled;
CmSuiteBuffer;
CmSuiteBufferLength;
CmSuiteBufferType;
CmSymbolicLinkValueName;
CmSystemHiveLimitSize;
CmSystemRootPath;
CmTypeName;
CmTypeString;
CmVEEnabled;
CmVersionString;
CmpAccessBitForPhase;
CmpAcpString;
CmpActiveAppHiveUnloadCount;
CmpActiveAppHiveUnloadEvent;
CmpActiveHiveRundownCount;
CmpActiveHiveRundownEvent;
CmpAdminSystemFileSecurityDescriptor;
CmpAllocBucketLock;
CmpAllocInited;
CmpAllowedFeaturesString;
CmpApiSetSchemaExtensionsString;
CmpAppHiveLoadList;
CmpAppHiveLoadListLock;
CmpAsyncKernelPostList;
CmpBackupCount;
CmpBackupCountValueName;
CmpBootDriverFlagsString;
CmpBootFlagsString;
CmpBootLoadControl;
CmpBootPageFilesCreated;
CmpBootServerReplyString;
CmpBootType;
CmpBounceBufferLookaside;
CmpBspMerge;
CmpCCSString;
CmpCallBackCount;
CmpCallbackContextSList;
CmpCallbackCookie;
CmpCallbackListLock;
CmpCannotWriteConfiguration;
CmpCheckHiveIndex;
CmpClfsLogPrefix;
CmpCoalescingCallbackActive;
CmpCoalescingRegistration;
CmpCodePageString;
CmpConfigurationAreaSize;
CmpConfigurationData;
CmpConfigurationManagerKeyName;
CmpConfigurationManagerString;
CmpContainerSuffix;
CmpContextListLock;
CmpControlIdConfigDbString;
CmpControlPathString;
CmpControlSessionManagerPathString;
CmpControlSetOverride;
CmpControlString;
CmpCrashControlString;
CmpCsdBuildNumberString;
CmpCsdVersionString;
CmpCurrentBuildNumberString;
CmpCurrentConfigString;
CmpCurrentControlSetControlNlsLanguagePathString;
CmpCurrentControlSetControlPxePathString;
CmpCurrentControlSetString;
CmpCurrentMajorVersionString;
CmpCurrentMinorVersionString;
CmpCurrentString;
CmpCurrentTypeString;
CmpCurrentVersionString;
CmpDelayCloseWorkItem;
CmpDelayCloseWorkItemActive;
CmpDelayDerefKCBLimit;
CmpDelayDerefKCBListHead;
CmpDelayDerefKCBLock;
CmpDelayDerefKCBTimer;
CmpDelayDerefKCBWorkItem;
CmpDelayDerefKCBWorkItemActive;
CmpDelayFreeRMDpc;
CmpDelayFreeRMListHead;
CmpDelayFreeRMLock;
CmpDelayFreeRMTimer;
CmpDelayFreeRMWorkItem;
CmpDelayFreeRMWorkItemActive;
CmpDelayedCloseElements;
CmpDelayedCloseSize;
CmpDelayedCloseTableLock;
CmpDelayedLRUListHead;
CmpDependOnFirmwareString;
CmpDeviceIndexTable;
CmpDevicesHiveName;
CmpDevicesHiveNameString;
CmpDhcpServerAckString;
CmpDirtySectorCount;
CmpDirtyShutdownCountString;
CmpDisableEmoticonString;
CmpDiskFullWorkerPopupDisplayed;
CmpDisplayDisabledString;
CmpDisplayParametersString;
CmpDisplayPreReleaseColorString;
CmpDoIdleProcessing;
CmpDriverDependencyString;
CmpDriverLoadPolicyString;
CmpDriverStateSourceIdName;
CmpDriverWildcardString;
CmpDsaDatabaseFileString;
CmpDummyThreadEvent;
CmpEarlyLaunchString;
CmpEnableLazyFlushBootDelayInterval;
CmpEnableLazyFlushDpc;
CmpEnableLazyFlushTimer;
CmpEnableLazyFlushTimerInitialized;
CmpEnabledString;
CmpErrataString;
CmpErrorControlString;
CmpExtendedStateString;
CmpFailPrimarySave;
CmpFeatureBits;
CmpFeatureSettings;
CmpFeatureSettingsOverride;
CmpFeatureSettingsOverrideMask;
CmpFeatureSimulations;
CmpFileNameString;
CmpFirmwareBootDeviceString;
CmpFirmwareResourcesString;
CmpFirstReorganize;
CmpFlagsString;
CmpForceFlushPending;
CmpForceFlushWorkItem;
CmpForceSynchronousMachineHiveLoad;
CmpFreeKCBListHead;
CmpFreezeListLock;
CmpFreezeThawDpc;
CmpFreezeThawPending;
CmpFreezeThawState;
CmpFreezeThawTimer;
CmpFreezeThawWaitListHead;
CmpFreezeThawWorkItem;
CmpGlobalFlushControlFlags;
CmpGlobalQuota;
CmpGlobalQuotaAllowed;
CmpGlobalQuotaUsed;
CmpGlobalQuotaWarning;
CmpGpuIommuSetting;
CmpGroupAssignmentString;
CmpGroupOrderListString;
CmpGroupString;
CmpHardwareConfigString;
CmpHardwareProfilesCurrentString;
CmpHardwareProfilesString;
CmpHiveFileListHandle;
CmpHiveListHead;
CmpHiveListHeadLock;
CmpHiveRedirectionFileListHandle;
CmpHoldLazyFlush;
CmpHotPatchTableSize;
CmpIdString;
CmpImagePathString;
CmpInfNameString;
CmpInitRmLogOnLoad;
CmpInstallLanguageString;
CmpKernelString;
CmpKeyLockTracker;
CmpKeyTypeNameString;
CmpKeysString;
CmpLKGEnabled;
CmpLargePageMinimum;
CmpLastAttemptStatusString;
CmpLastBootShutdownString;
CmpLastBootSucceededString;
CmpLastKnownGoodString;
CmpLazyCommitDpc;
CmpLazyCommitListHead;
CmpLazyCommitTimer;
CmpLazyCommitWorkItem;
CmpLazyCommitWorkItemActive;
CmpLazyFlushIntervalInSeconds;
CmpLazyLocalizeIntervalInSeconds;
CmpLazyReconcileIntervalInSeconds;
CmpLazyWriterData;
CmpLightTransactionList;
CmpListString;
CmpLoadHiveLock;
CmpLoadHiveLockOwner;
CmpLoadOptions;
CmpLoadWorkerDebugEvent;
CmpLoadWorkerEvent;
CmpLoadWorkerIncrement;
CmpLoadingSystemHivesActive;
CmpLogExt;
CmpLogFileSizeCap;
CmpLogPath;
CmpLogPrefix;
CmpMHz;
CmpMachineHiveList;
CmpManufacturingModeString;
CmpMasterHive;
CmpMemoryManagementString;
CmpMiniNTBoot;
CmpMountThread;
CmpMpsSvcKeySubstring;
CmpNameCacheTable;
CmpNameString;
CmpNlsString;
CmpNoMasterCreates;
CmpNoMoreTx;
CmpNoWrite;
CmpNodeDistanceString;
CmpNtdsString;
CmpNumaString;
CmpOemCpString;
CmpOsBootstatPathString;
CmpParametersString;
CmpPendingDriverOperationsString;
CmpPerflibPathString;
CmpPeriodicBackupFlushHiveCount;
CmpPhaseString;
CmpPlatformSpecificField1;
CmpPlatformSpecificField2;
CmpPoliciesString;
CmpPostLock;
CmpPreloadedHivesCount;
CmpPreloadedHivesList;
CmpPrevIdleProcessingState;
CmpPreviousUpdateRevision;
CmpProcessorControl;
CmpProcessorNameString;
CmpProcessorStringAmd;
CmpProcessorStringIntel;
CmpProcessorStringVia;
CmpProductOptionsString;
CmpProductTypeString;
CmpProfileLoaded;
CmpPuntBoot;
CmpQuotaExplicitlySet;
CmpQuotaWarningPopupDisplayed;
CmpRegistryAppString;
CmpRegistryContainersString;
CmpRegistryLock;
CmpRegistryMachineHardwareDescriptionString;
CmpRegistryMachineHardwareDescriptionSystemString;
CmpRegistryMachineHardwareDeviceMapString;
CmpRegistryMachineHardwareOwnerMapString;
CmpRegistryMachineHardwareResourceMapString;
CmpRegistryMachineHardwareString;
CmpRegistryMachineSoftwareMicrosoftWindowsCurrentVersionShutdownString;
CmpRegistryMachineSoftwareMicrosoftWindowsNtCurrentVersionString;
CmpRegistryMachineString;
CmpRegistryMachineSystemCurrentControlSetControlBootLogString;
CmpRegistryMachineSystemCurrentControlSetControlClassString;
CmpRegistryMachineSystemCurrentControlSetControlSafeBootString;
CmpRegistryMachineSystemCurrentControlSetControlSessionManagerMemoryManagementString;
CmpRegistryMachineSystemCurrentControlSetEnumRootString;
CmpRegistryMachineSystemCurrentControlSetEnumString;
CmpRegistryMachineSystemCurrentControlSetHardwareProfilesCurrentString;
CmpRegistryMachineSystemCurrentControlSetServicesEventLogString;
CmpRegistryMachineSystemCurrentControlSetServicesString;
CmpRegistryMachineSystemCurrentControlSetString;
CmpRegistryMachineSystemString;
CmpRegistryProcess;
CmpRegistryProcessName;
CmpRegistryRootKeyPath;
CmpRegistryRootObject;
CmpRegistryRootString;
CmpRegistrySystemFileNameString;
CmpRegistryUserString;
CmpReorganizeDelayDays;
CmpReorganizeLastRun;
CmpReorganizeLimit;
CmpReorganizeTotalBytesSaved;
CmpResetString;
CmpRmListHead;
CmpRmListLock;
CmpSIDMappingLock;
CmpSIDToHiveMapping;
CmpSIDToHiveMappingCount;
CmpSIDToHiveMappingSize;
CmpSelectString;
CmpSelfHeal;
CmpServiceGroupOrderString;
CmpServiceWildcardString;
CmpServicesString;
CmpServicesSubKeyPath;
CmpSessionManagerString;
CmpShareSystemHives;
CmpShutdownLock;
CmpShutdownRundown;
CmpSidSharingPolicyString;
CmpSiloContextSlot;
CmpSizeOfPagedPoolInBytes;
CmpSpecialBootCondition;
CmpSrmString;
CmpStartOverrideString;
CmpStartString;
CmpStateSepRedirectionMapString;
CmpStrAliasString;
CmpStrCapabilitiesString;
CmpStrCurrentDockInfoString;
CmpStrDockIdString;
CmpStrDockingStateString;
CmpStrProfileNumberString;
CmpStrSerialNumberString;
CmpSymbolicLinkValueName;
CmpSystemBiosVersionString;
CmpSystemBootDeviceString;
CmpSystemFileName;
CmpSystemHiveHysteresisCallback;
CmpSystemHiveHysteresisContext;
CmpSystemHiveHysteresisHigh;
CmpSystemHiveHysteresisHighSeen;
CmpSystemHiveHysteresisHitRatio;
CmpSystemHiveHysteresisLow;
CmpSystemHiveHysteresisLowSeen;
CmpSystemHiveName;
CmpSystemHiveNameString;
CmpSystemQuotaWarningPopupDisplayed;
CmpSystemRootString;
CmpSystemStartOptionsString;
CmpTagString;
CmpTargetNtPathString;
CmpTraceRoutine;
CmpTraceTxrRoutine;
CmpTransactionInitializingCount;
CmpTransactionInitializingEvent;
CmpTransactionListLock;
CmpTransactionTypeNameString;
CmpTrustedInstallerSid;
CmpTypeString;
CmpUnsupportedOperationHits;
CmpUpdateRevision;
CmpUpdateStatus;
CmpUseSectionBackedHives;
CmpUserPresent;
CmpVEEnabled;
CmpVendorID;
CmpVerifierOptions;
CmpVerifyDriverLevelString;
CmpVolatileBoot;
CmpVolumeManager;
CmpWasSetupBoot;
CmpWellKnownVolumeList;
CmpWildcardString;
CmpWindowsNtString;
CmpWindowsSysPartString;
CmpWorkerDataInitialized;
CmpWorkerEngineFinishedEvent;
CmpWorkerEngineListHead;
CmpWorkerEngineLock;
CmpWorkerEngineWorkItem;
CmpWorkerEngineWorkItemActive;
ContainedCapes;
ControlLookup;
CrashdmpCallTable;
CrashdmpDumpBlock;
CrashdmpGuid;
CrashdmpImageBase;
CrashdmpImageEntry;
CrashdmpInitialized;
Crc32Ctrl;
Crc64Ctrl;
CritSecGuid;
CriticalProcessExceptionData;
CsSessionEnergyCounter;
DAM_PDC_NOTIFICATION_CLIENT;
DEVPKEY_DeviceClass_Characteristics;
DEVPKEY_DeviceClass_ClassCoInstallers;
DEVPKEY_DeviceClass_ClassInstaller;
DEVPKEY_DeviceClass_ClassName;
DEVPKEY_DeviceClass_CompatibleFeatureScores;
DEVPKEY_DeviceClass_CompoundLowerFilters;
DEVPKEY_DeviceClass_CompoundUpperFilters;
DEVPKEY_DeviceClass_ConfigFilters;
DEVPKEY_DeviceClass_ConfigNotifyWnfTriggers;
DEVPKEY_DeviceClass_Configurable;
DEVPKEY_DeviceClass_ConfigurableClassVersion;
DEVPKEY_DeviceClass_ConfigurableOverride;
DEVPKEY_DeviceClass_DHPRebalanceOptOut;
DEVPKEY_DeviceClass_DefaultService;
DEVPKEY_DeviceClass_DevType;
DEVPKEY_DeviceClass_Exclusive;
DEVPKEY_DeviceClass_FSFilterClass;
DEVPKEY_DeviceClass_Icon;
DEVPKEY_DeviceClass_IconPath;
DEVPKEY_DeviceClass_LastDeleteDate;
DEVPKEY_DeviceClass_LowerFilters;
DEVPKEY_DeviceClass_LowerLogoVersion;
DEVPKEY_DeviceClass_Name;
DEVPKEY_DeviceClass_NoDisplayClass;
DEVPKEY_DeviceClass_NoInstallClass;
DEVPKEY_DeviceClass_NoUseClass;
DEVPKEY_DeviceClass_PolicyExempt;
DEVPKEY_DeviceClass_PropPageProvider;
DEVPKEY_DeviceClass_Security;
DEVPKEY_DeviceClass_SecuritySDS;
DEVPKEY_DeviceClass_SilentInstall;
DEVPKEY_DeviceClass_UpperFilters;
DEVPKEY_DeviceContainer_BatteryLevel;
DEVPKEY_DeviceContainer_BatteryLow;
DEVPKEY_DeviceContainer_ConfigFlags;
DEVPKEY_DeviceContainer_HasProblem;
DEVPKEY_DeviceContainer_IsConnected;
DEVPKEY_DeviceContainer_IsLocalMachine;
DEVPKEY_DeviceContainer_IsRebootRequired;
DEVPKEY_DeviceId_DriverInfMatches;
DEVPKEY_DeviceId_DriverInfNames;
DEVPKEY_DeviceInterfaceClass_DefaultInterface;
DEVPKEY_DeviceInterfaceClass_Name;
DEVPKEY_DeviceInterface_ClassGuid;
DEVPKEY_DeviceInterface_Enabled;
DEVPKEY_DeviceInterface_FriendlyName;
DEVPKEY_DeviceInterface_ReferenceString;
DEVPKEY_DevicePanel_Color;
DEVPKEY_DevicePanel_ContainerId;
DEVPKEY_DevicePanel_Group;
DEVPKEY_DevicePanel_Height;
DEVPKEY_DevicePanel_JointDetachable;
DEVPKEY_DevicePanel_JointPositionCurrent;
DEVPKEY_DevicePanel_JointPositionDefault;
DEVPKEY_DevicePanel_JointPositionMax;
DEVPKEY_DevicePanel_JointPositionMin;
DEVPKEY_DevicePanel_JointRotationCurrent;
DEVPKEY_DevicePanel_JointRotationDefault;
DEVPKEY_DevicePanel_JointRotationMax;
DEVPKEY_DevicePanel_JointRotationMin;
DEVPKEY_DevicePanel_JointSourcePanelEdge;
DEVPKEY_DevicePanel_JointTargetPanelEdge;
DEVPKEY_DevicePanel_JointTargetPanelId;
DEVPKEY_DevicePanel_JointTargetPositionX;
DEVPKEY_DevicePanel_JointTargetPositionY;
DEVPKEY_DevicePanel_JointTargetPositionZ;
DEVPKEY_DevicePanel_JointTargetRotationX;
DEVPKEY_DevicePanel_JointTargetRotationY;
DEVPKEY_DevicePanel_JointTargetRotationZ;
DEVPKEY_DevicePanel_JointType;
DEVPKEY_DevicePanel_Side;
DEVPKEY_DevicePanel_Width;
DEVPKEY_Device_AdditionalSoftwareRequested;
DEVPKEY_Device_Address;
DEVPKEY_Device_BaseContainerId;
DEVPKEY_Device_BiosDeviceName;
DEVPKEY_Device_BusNumber;
DEVPKEY_Device_BusRelations;
DEVPKEY_Device_BusReportedDeviceDesc;
DEVPKEY_Device_BusTypeGuid;
DEVPKEY_Device_Capabilities;
DEVPKEY_Device_Characteristics;
DEVPKEY_Device_Children;
DEVPKEY_Device_Class;
DEVPKEY_Device_ClassGuid;
DEVPKEY_Device_CompatibleIds;
DEVPKEY_Device_ConfigFlags;
DEVPKEY_Device_ConfigurationId;
DEVPKEY_Device_ContainerId;
DEVPKEY_Device_DHP_Rebalance_Policy;
DEVPKEY_Device_DebuggerSafe;
DEVPKEY_Device_DependencyDependents;
DEVPKEY_Device_DependencyProviders;
DEVPKEY_Device_DevNodeStatus;
DEVPKEY_Device_DevNodeStatusDeviceDisconnected;
DEVPKEY_Device_DevNodeStatusHasProblem;
DEVPKEY_Device_DevNodeStatusNeedRestart;
DEVPKEY_Device_DevNodeStatusPrivateProblem;
DEVPKEY_Device_DevNodeStatusStarted;
DEVPKEY_Device_DevType;
DEVPKEY_Device_DeviceDesc;
DEVPKEY_Device_DmaRemappingPolicy;
DEVPKEY_Device_Driver;
DEVPKEY_Device_DriverCoInstallers;
DEVPKEY_Device_DriverDate;
DEVPKEY_Device_DriverDesc;
DEVPKEY_Device_DriverExtendedInfs;
DEVPKEY_Device_DriverInGroup;
DEVPKEY_Device_DriverIncludedConfigs;
DEVPKEY_Device_DriverIncludedInfs;
DEVPKEY_Device_DriverInfPath;
DEVPKEY_Device_DriverInfSection;
DEVPKEY_Device_DriverInfSectionExt;
DEVPKEY_Device_DriverLogoLevel;
DEVPKEY_Device_DriverNodeStrongName;
DEVPKEY_Device_DriverProblemDesc;
DEVPKEY_Device_DriverPropPageProvider;
DEVPKEY_Device_DriverProvider;
DEVPKEY_Device_DriverRank;
DEVPKEY_Device_DriverVersion;
DEVPKEY_Device_EjectionRelations;
DEVPKEY_Device_EnumeratorName;
DEVPKEY_Device_Exclusive;
DEVPKEY_Device_ExtendedAddress;
DEVPKEY_Device_ExtendedConfigurationIds;
DEVPKEY_Device_FirstInstallDate;
DEVPKEY_Device_FriendlyName;
DEVPKEY_Device_FriendlyNameAttributes;
DEVPKEY_Device_GenericDriverInstalled;
DEVPKEY_Device_HardwareConfigurationIndex;
DEVPKEY_Device_HardwareIds;
DEVPKEY_Device_HasProblem;
DEVPKEY_Device_InLocalMachineContainer;
DEVPKEY_Device_InstallDate;
DEVPKEY_Device_InstallError;
DEVPKEY_Device_InstallFlags;
DEVPKEY_Device_InstallState;
DEVPKEY_Device_InstanceId;
DEVPKEY_Device_IsConnected;
DEVPKEY_Device_IsPresent;
DEVPKEY_Device_IsRebootRequired;
DEVPKEY_Device_LastArrivalDate;
DEVPKEY_Device_LastKnownParent;
DEVPKEY_Device_LastRemovalDate;
DEVPKEY_Device_LegacyBusType;
DEVPKEY_Device_LocationInfo;
DEVPKEY_Device_LocationPaths;
DEVPKEY_Device_LowerFilters;
DEVPKEY_Device_Manufacturer;
DEVPKEY_Device_MatchingDeviceId;
DEVPKEY_Device_MatchingTargetComputerId;
DEVPKEY_Device_MigrationRank;
DEVPKEY_Device_Numa_Node;
DEVPKEY_Device_Numa_Proximity_Domain;
DEVPKEY_Device_OmitFromSystemSpec;
DEVPKEY_Device_Owners;
DEVPKEY_Device_PDOName;
DEVPKEY_Device_PanelColor;
DEVPKEY_Device_PanelGroup;
DEVPKEY_Device_PanelHeight;
DEVPKEY_Device_PanelId;
DEVPKEY_Device_PanelLength;
DEVPKEY_Device_PanelPositionX;
DEVPKEY_Device_PanelPositionY;
DEVPKEY_Device_PanelPositionZ;
DEVPKEY_Device_PanelRotationX;
DEVPKEY_Device_PanelRotationY;
DEVPKEY_Device_PanelRotationZ;
DEVPKEY_Device_PanelSide;
DEVPKEY_Device_PanelVisible;
DEVPKEY_Device_PanelWidth;
DEVPKEY_Device_Parent;
DEVPKEY_Device_PendingConfigurationIds;
DEVPKEY_Device_PendingSoftwareInstall;
DEVPKEY_Device_PhysicalDeviceLocation;
DEVPKEY_Device_PhysicalDeviceLocationJoint;
DEVPKEY_Device_PhysicalDeviceLocationPanel;
DEVPKEY_Device_PhysicalDeviceLocationSpatial;
DEVPKEY_Device_PowerData;
DEVPKEY_Device_PowerRelations;
DEVPKEY_Device_PresenceNotForDevice;
DEVPKEY_Device_PreventDriverLoad;
DEVPKEY_Device_ProblemCode;
DEVPKEY_Device_ProblemStatus;
DEVPKEY_Device_ProblemStatusOverride;
DEVPKEY_Device_RemovalPolicy;
DEVPKEY_Device_RemovalPolicyDefault;
DEVPKEY_Device_RemovalPolicyOverride;
DEVPKEY_Device_RemovalRelations;
DEVPKEY_Device_Reported;
DEVPKEY_Device_ReportedDeviceIdsHash;
DEVPKEY_Device_RequestConfigurationIds;
DEVPKEY_Device_ResourcePickerExceptions;
DEVPKEY_Device_ResourcePickerTags;
DEVPKEY_Device_RestrictedSD;
DEVPKEY_Device_RollbackDriverNode;
DEVPKEY_Device_SafeRemovalRequired;
DEVPKEY_Device_SafeRemovalRequiredOverride;
DEVPKEY_Device_Security;
DEVPKEY_Device_SecuritySDS;
DEVPKEY_Device_Service;
DEVPKEY_Device_SessionId;
DEVPKEY_Device_Siblings;
DEVPKEY_Device_Stack;
DEVPKEY_Device_StateDirectoryId;
DEVPKEY_Device_TransportRelations;
DEVPKEY_Device_UINumber;
DEVPKEY_Device_UINumberDescFormat;
DEVPKEY_Device_UpdateWithUngroupedDrivers;
DEVPKEY_Device_UpperFilters;
DEVPKEY_Device_UserSelectedDriverInstalled;
DEVPKEY_DriverDatabase_AccessMask;
DEVPKEY_DriverDatabase_ConfigMode;
DEVPKEY_DriverDatabase_ConfigOptions;
DEVPKEY_DriverDatabase_Disabled;
DEVPKEY_DriverDatabase_FilePath;
DEVPKEY_DriverDatabase_LastUpdateDate;
DEVPKEY_DriverDatabase_LoadStatus;
DEVPKEY_DriverDatabase_Loaded;
DEVPKEY_DriverDatabase_OemDriverInfFileMap;
DEVPKEY_DriverDatabase_ProcessorArchitecture;
DEVPKEY_DriverDatabase_RegistryPath;
DEVPKEY_DriverDatabase_SchemaVersion;
DEVPKEY_DriverDatabase_Selected;
DEVPKEY_DriverDatabase_SetupOptions;
DEVPKEY_DriverDatabase_SetupStatus;
DEVPKEY_DriverDatabase_SystemRoot;
DEVPKEY_DriverDatabase_UnloadTimeout;
DEVPKEY_DriverDatabase_Updated;
DEVPKEY_DriverDatabase_Version;
DEVPKEY_DriverFile_DriverInfName;
DEVPKEY_DriverFile_SubDirectory;
DEVPKEY_DriverInfFile_ActiveConfigurations;
DEVPKEY_DriverInfFile_ActiveDriverPackage;
DEVPKEY_DriverInfFile_DriverPackages;
DEVPKEY_DriverInfFile_Locked;
DEVPKEY_DriverPackage_BootCritical;
DEVPKEY_DriverPackage_CatalogFile;
DEVPKEY_DriverPackage_ClassGuid;
DEVPKEY_DriverPackage_ClassVersion;
DEVPKEY_DriverPackage_Configurable;
DEVPKEY_DriverPackage_ConfigurableFlags;
DEVPKEY_DriverPackage_ConfigurableOverride;
DEVPKEY_DriverPackage_ConfigurationScopes;
DEVPKEY_DriverPackage_Configurations;
DEVPKEY_DriverPackage_DriverDate;
DEVPKEY_DriverPackage_DriverFlightIds;
DEVPKEY_DriverPackage_DriverInfName;
DEVPKEY_DriverPackage_DriverVersion;
DEVPKEY_DriverPackage_EffectiveFileSize;
DEVPKEY_DriverPackage_ExtensionContractIds;
DEVPKEY_DriverPackage_ExtensionId;
DEVPKEY_DriverPackage_F6;
DEVPKEY_DriverPackage_FamilyId;
DEVPKEY_DriverPackage_FileSize;
DEVPKEY_DriverPackage_GroupIds;
DEVPKEY_DriverPackage_ImportDate;
DEVPKEY_DriverPackage_Inbox;
DEVPKEY_DriverPackage_Locale;
DEVPKEY_DriverPackage_LockLevel;
DEVPKEY_DriverPackage_NeedsReconfig;
DEVPKEY_DriverPackage_OriginalInfName;
DEVPKEY_DriverPackage_ProcessorArchitecture;
DEVPKEY_DriverPackage_ProductName;
DEVPKEY_DriverPackage_ProviderName;
DEVPKEY_DriverPackage_Published;
DEVPKEY_DriverPackage_SignerName;
DEVPKEY_DriverPackage_SignerScore;
DEVPKEY_DriverPackage_SourceMediaPath;
DEVPKEY_DriverPackage_StatusFlags;
DEVPKEY_DriverPackage_SystemCritical;
DEVPKEY_DriverPackage_TargetComputerIds;
DEVPKEY_NAME;
DEVPKEY_Spare_Memory;
DEVPKEY_Spare_Processor_Apic_Id;
DEVPKEY_WIA_DeviceType;
DbgkDebugObjectType;
DbgkEnableWerUserReporting;
DbgkErrorPortCommTimeout;
DbgkErrorPortStartTimeout;
DbgkWerReportExceptionWorker;
DbgkpBusy;
DbgkpLkmdLiveDumpDiagnosticInformation;
DbgkpMaxModuleMsgs;
DbgkpProcessDebugPortMutex;
DbgkpWerDefaultPolicy;
DbgkpWerDeferredWriteTimeoutSeconds;
DbgkpWerInitialized;
DefaultCapName;
DefaultCapeName;
DefaultKey;
DesiredAccessForFunction;
DeviceStateNames;
DiskProvGuid;
DriveMappingArray;
DumpPolicyAttemptOffline;
ECP_TYPE_IO_STOP_ON_SYMLINK_FILTER_GUID;
EM_RULE_DISABLE_FASTS4_GUID;
EM_RULE_DISABLE_MULTI_PHASE_RESUME;
EM_RULE_IGNORE_INCORRECT_LID_NOTIFICATIONS;
ETW_EVENT_BACKING_FILE_FULL;
ETW_EVENT_CHANGE_SESSION_SD;
ETW_EVENT_ENABLE_INFO;
ETW_EVENT_FLUSH_TRACE;
ETW_EVENT_GROUP_ENTRY_INFO;
ETW_EVENT_GROUP_JOIN;
ETW_EVENT_GUID_ENTRY_INFO;
ETW_EVENT_LOST_EVENT;
ETW_EVENT_MAX_FILE_SIZE_REACHED;
ETW_EVENT_PROVIDER_DISABLED;
ETW_EVENT_PROVIDER_ENABLED;
ETW_EVENT_PROVIDER_REGISTER;
ETW_EVENT_PROVIDER_UNREGISTERS;
ETW_EVENT_REG_ENTRY_INFO;
ETW_EVENT_SAVE_PERSISTED_LOGGER_ERROR;
ETW_EVENT_SAVE_PERSISTED_LOGGER_START;
ETW_EVENT_SAVE_PERSISTED_LOGGER_STOP;
ETW_EVENT_SESSION_END_FAILED;
ETW_EVENT_SESSION_INFO;
ETW_EVENT_SESSION_START_FAILED;
ETW_EVENT_SET_TRAITS_FAILED;
ETW_EVENT_START_TRACE;
ETW_EVENT_STOP_TRACE;
ETW_EVENT_SWITCH_TO_NEW_FILE_FAILED;
ETW_EVENT_UPDATE_TRACE;
ETW_EVENT_USER_STACK_TRACE;
ETW_EVENT_WRITE_FAILED;
ETW_REGISTRY_EVENT_CLOSE_KEY;
ETW_REGISTRY_EVENT_CREATE_KEY;
ETW_REGISTRY_EVENT_DELETE_KEY;
ETW_REGISTRY_EVENT_DELETE_VALUE_KEY;
ETW_REGISTRY_EVENT_ENUMERATE_KEY;
ETW_REGISTRY_EVENT_ENUMERATE_VALUE_KEY;
ETW_REGISTRY_EVENT_FLUSH_KEY;
ETW_REGISTRY_EVENT_OPEN_KEY;
ETW_REGISTRY_EVENT_QUERY_KEY;
ETW_REGISTRY_EVENT_QUERY_MULTIPLE_VALUE_KEY;
ETW_REGISTRY_EVENT_QUERY_SECURITY_KEY;
ETW_REGISTRY_EVENT_QUERY_VALUE_KEY;
ETW_REGISTRY_EVENT_SET_INFORMATION_KEY;
ETW_REGISTRY_EVENT_SET_SECURITY_KEY;
ETW_REGISTRY_EVENT_SET_VALUE_KEY;
EVENT_WHEA_ERROR;
EVENT_WHEA_INIT_OP;
EVENT_WHEA_LOG_ENTRY;
EVENT_WHEA_MEMORY_OFFLINE;
EVENT_WHEA_PROCESS_TERMINATE;
EfiBootVariablesGuid;
EfiDriverVariablesGuid;
EmBuiltinProviderHandle;
EmpBadS3Page;
EmpCachedBiosDate;
EmpCallbackListHead;
EmpDatabaseLock;
EmpEntryListHead;
EmpEvaluationQueueLock;
EmpNumberOfCallbacks;
EmpNumberOfEntryTypes;
EmpNumberOfRules;
EmpNumberOfStrings;
EmpNumberOfTargetRules;
EmpPagingLock;
EmpPagingStatus;
EmpParseLock;
EmpRuleListHead;
EmpRuleUpdateQueue;
EmpRuleUpdateWorker;
EmpStringTable;
EmpTargetRuleListHead;
EmpWorkerBusy;
EmptyUnicodeString;
EmptyValue;
EnableProcessTracingCallbacks;
End;
ErrorLogSessionOpened;
EtwAdminlessProvRegHandle;
EtwApiCallsProvRegHandle;
EtwAppCompatProvRegHandle;
EtwBootPerfData;
EtwCPUSpeedInMHz;
EtwCVEAuditProvRegHandle;
EtwKernelProvRegHandle;
EtwLpacProvRegHandle;
EtwPerfFreq;
EtwSecondaryDumpDataGuid;
EtwSecurityMitigationsRegHandle;
EtwThreatIntProvRegHandle;
EtwWmitraceWork;
EtwpAdjustBuffersWorkItem;
EtwpAllNotifyRoutines;
EtwpAppStateChangeSequenceNumber;
EtwpBootTime;
EtwpBufferAdjustmentActive;
EtwpBufferAdjustmentCount;
EtwpBugCheckCallback;
EtwpComponentName;
EtwpCovSampGlobals;
EtwpCoverageContext;
EtwpCoverageCoreTracingEnabled;
EtwpCoverageEntryCount;
EtwpCoverageFlushPeriod;
EtwpCoverageLock;
EtwpCoverageLockOwner;
EtwpCoverageNonPagedContext;
EtwpCoverageResetPeriod;
EtwpCrimsonMaskMutex;
EtwpDebuggerData;
EtwpDefaultTraceSecurityDescriptor;
EtwpDiskIoNotifyRoutines;
EtwpDiskProvRegHandle;
EtwpDumpCallbackContext;
EtwpEnableFlagMap;
EtwpEthreadSyncTrackingSequence;
EtwpEventTracingProvRegHandle;
EtwpExecutiveResourceContentionSampleRate;
EtwpExecutiveResourceReleaseSampleRate;
EtwpExecutiveResourceTimeout;
EtwpFileIoNotifyRoutines;
EtwpFileProvRegHandle;
EtwpFileSystemReady;
EtwpFltIoNotifyRoutines;
EtwpGenericMapping;
EtwpGlobalMutex;
EtwpGlobalSequence;
EtwpGroupMaskMutex;
EtwpHostSiloState;
EtwpHwTraceExtensionHost;
EtwpInitialized;
EtwpKsrCallbackObject;
EtwpKsrGuid;
EtwpKsrPrepared;
EtwpLastBranchLookAsideList;
EtwpLastBranchStackSize;
EtwpLastBranchSupportedOptions;
EtwpLoggerSaveEvent;
EtwpLoggerSaveInProgress;
EtwpMaxNonPagedPoolUsage;
EtwpMemInfoInterval;
EtwpMemInfoTimer;
EtwpMemoryProvRegHandle;
EtwpMutableSecurityKeyHandle;
EtwpNetProvRegHandle;
EtwpNull;
EtwpObjectTypeFilter;
EtwpOneMs;
EtwpOneSecond;
EtwpPagingDisabled;
EtwpPmcProfile;
EtwpPoolTagFilter;
EtwpProfileInterval;
EtwpProfileObject;
EtwpProviderTraitsKmMutex;
EtwpProviderTraitsKmTree;
EtwpProviderTraitsUmMutex;
EtwpProviderTraitsUmTree;
EtwpPsProvRegHandle;
EtwpRTBacklogFileRoot;
EtwpRealTimeConnectionObjectType;
EtwpRefQpcDelta;
EtwpRefTimeCycle;
EtwpRefTimePerfCounter;
EtwpRefTimeSystem;
EtwpRegTraceCookie;
EtwpRegTraceHandle;
EtwpRegTraceOptions;
EtwpRegTracingEnabled;
EtwpRegistrationObjectType;
EtwpReplyListHead;
EtwpReplyListLock;
EtwpSecurityKeyHandle;
EtwpSecurityLock;
EtwpSessionDemuxObjectType;
EtwpShortTime;
EtwpSiloAllowedGroupMask;
EtwpSpinLockAcquireSampleRate;
EtwpSpinLockContentionSampleRate;
EtwpSpinLockCountersCount;
EtwpSpinLockHoldThreshold;
EtwpSpinLockSpinThreshold;
EtwpSplitIoNotifyRoutines;
EtwpStackCaptureTimeout;
EtwpStackLookAsideList;
EtwpStackMatchId;
EtwpStartTraceMutex;
EtwpStopTraceCount;
EtwpTdiIoNotify;
EtwpUmglProviders;
EtwpWdfNotifyRoutines;
EtwpWmitraceParams;
EventTracingProvGuid;
ExBootAppFailureStatus;
ExBootDeviceList;
ExBootDeviceListSpinLock;
ExBootDeviceRemovalHandler;
ExBootDevicesRemovedEvent;
ExBootLoaderMetadata;
ExCallbackObjectType;
ExCbEnlightenmentState;
ExCbPhase1InitComplete;
ExCbPowerState;
ExCbProcessorAdd;
ExCbSeImageVerificationDriverInfo;
ExCbSetSystemState;
ExCbSetSystemTime;
ExCompositionObjectType;
ExCoreMessagingObjectType;
ExCovMaxPagedPoolToUse;
ExCriticalWorkerThreads;
ExDelayedWorkerThreads;
ExDesktopObjectType;
ExEventObjectType;
ExExternalBootSupportInitializationEvent;
ExHandleTraceDbDefaultStacks;
ExHandleTraceDbMaxStacks;
ExHandleTraceDbMinStacks;
ExKsrInterface;
ExLeapSecondData;
ExLeapSecondDataLastParseResult;
ExLeapSecondDataSectionPointer;
ExMinimumLookasideDepth;
ExMutantObjectType;
ExNPagedLookasideListHead;
ExNPagedLookasideLock;
ExNode0;
ExNumMissingBootDevices;
ExPageLockHandle;
ExPagedLookasideListHead;
ExPagedLookasideLock;
ExPoolCodeEnd;
ExPoolCodeStart;
ExPoolFailures;
ExPoolLookasideListHead;
ExPoolState;
ExPoolTagTables;
ExProfileObjectType;
ExRawInputManagerObjectType;
ExReadyForErrors;
ExResourceCheckFlags;
ExResourceTimeoutCount;
ExSaNonPagedSlotAllocator;
ExSaPageArrays;
ExSaPageGroupDescriptorArray;
ExSaPageGroupDescriptorArrayLock;
ExSaPagedSlotAllocator;
ExSemaphoreObjectType;
ExShortTime;
ExSoftRebootFlags;
ExSoftRebootState;
ExSystemLookasideListHead;
ExTbFlushActive;
ExTimerObjectType;
ExTraceAllTables;
ExWindowStationObjectType;
ExWorkerQueue;
ExecutionRequiredStopWatchCollection;
ExpAdditionalCriticalWorkerThreads;
ExpAdditionalDelayedWorkerThreads;
ExpAeCycleCountScaler;
ExpAeCycleCountThreshold;
ExpAeSamplingPeriodMask;
ExpAltTimeZoneBias;
ExpBigTableExpansionFailed;
ExpBootEntropyInit;
ExpBootEnvironmentInformation;
ExpBuiltinPriorities;
ExpCacheLineSize;
ExpCacheProviderPolicyNamesCounterBase;
ExpCallBackFlush;
ExpCallbackEvent;
ExpCallbackListHead;
ExpCallbackListLock;
ExpCallbackMapping;
ExpCenturyDpc;
ExpCenturyTimer;
ExpCenturyWorkItem;
ExpCheckTestSigningInit;
ExpClockIntervalRequest;
ExpCompositionMapping;
ExpCompressionProcessName;
ExpConDrvLoadLock;
ExpControlKey;
ExpCoreMessagingMapping;
ExpCovCurrentPagedPoolInUse;
ExpCovPushLock;
ExpCovUnloadedModuleList;
ExpCpuSetSecurityDescriptor;
ExpCritSecOutOfMemoryEvent;
ExpCurrentProfileUsage;
ExpCurrentTimeZoneId;
ExpDebuggerDpc;
ExpDebuggerPageIn;
ExpDebuggerProcessAttach;
ExpDebuggerProcessKill;
ExpDebuggerWork;
ExpDebuggerWorkItem;
ExpDesktopMapping;
ExpEnvironmentLock;
ExpEventMapping;
ExpFirmwarePageProtectionSupported;
ExpFirmwareTableProviderListHead;
ExpFirmwareTableResource;
ExpFreeListCount;
ExpFullProcessInfoInit;
ExpFullProcessInformationSid;
ExpGenuinePolicyKDPThrottleOverride;
ExpHeapBackedPoolEnabledState;
ExpHostList;
ExpHostListLock;
ExpHotTagArray;
ExpHpGCInitialized;
ExpHpGCScheduledNonPaged;
ExpHpGCScheduledPaged;
ExpHpGCTimerNonPaged;
ExpHpGCTimerPaged;
ExpHpGCWorkItemNonPaged;
ExpHpGCWorkItemPaged;
ExpIRTimerDescs;
ExpIRTimerExpiryCounts;
ExpIRTimerObjectType;
ExpInitializeCallback;
ExpKernelRequestedTimerResolution;
ExpKernelResolutionCount;
ExpKernelResolutionLock;
ExpKeyManipLock;
ExpKeyedEventObjectType;
ExpLFGRngLock;
ExpLFGRngState;
ExpLargePoolTableLock;
ExpLastDynamicTimeZoneYear;
ExpLastRequestedTime;
ExpLastTimeZoneBias;
ExpLeapSecondDataLock;
ExpLeapSecondDataRegistryNotify;
ExpLeapSecondRegkeyPath;
ExpLeapSecondRegkeyValueEnabled;
ExpLeapSecondRegkeyValueLeapSeconds;
ExpLeftoverBootRngData;
ExpLicenseInfo;
ExpLicenseInfoCount;
ExpLuid;
ExpLuidIncrement;
ExpManufacturingInformation;
ExpMaxTimeSeperationBeforeCorrect;
ExpMaximumKernelWorkerThreads;
ExpMultiUserTS;
ExpMutantMapping;
ExpNextCenturyTimeFieldsInLocalTime;
ExpNextCenturyTimeInUTC;
ExpNextSystemCutoverInUTC;
ExpNextYearDpc;
ExpNextYearTimeFieldsInLocalTime;
ExpNextYearTimeInUTC;
ExpNextYearTimer;
ExpNextYearWorkItem;
ExpNonPagedPoolDescriptor;
ExpNtExpirationDate;
ExpNumberOfNonPagedPools;
ExpNumberOfPagedPools;
ExpOkToTimeRefresh;
ExpOkToTimeZoneRefresh;
ExpPagedPoolDescriptor;
ExpPcwEnableState;
ExpPcwExtensionHost;
ExpPlatformBinaryLock;
ExpPlatformBinaryTableInformation;
ExpPlatformCapabilitiesCached;
ExpPlatformFlushCapabilities;
ExpPoolBigEntriesInUse;
ExpPoolFlags;
ExpPoolIndex;
ExpPoolQuotaCookie;
ExpPoolScanCount;
ExpProductInfoSuiteTypeMap;
ExpProductTypeChangeBuffer;
ExpProductTypeIoSb;
ExpProductTypeKey;
ExpProductTypeValueInfo;
ExpProfileMapping;
ExpProfileStateMutex;
ExpRNGAuxiliarySeed;
ExpRawInputManagerMapping;
ExpRealTimeIsUniversal;
ExpRefreshFailures;
ExpRemainingLeftoverBootRngData;
ExpResourceEnforceOwnerTransfer;
ExpResourceIoBoosted;
ExpResourceIoBoostedShared;
ExpResourceSpinLock;
ExpRestrictedGenericMapping;
ExpScanCount;
ExpScratchBufferLookasideList;
ExpSecureBootVendorGuid;
ExpSecureSystemProcessName;
ExpSecurityCookieRandomData;
ExpSemaphoreMapping;
ExpSessionPoolLookaside;
ExpSessionPoolSmallLists;
ExpSessionPoolTrackTable;
ExpSessionPoolTrackTableMask;
ExpSessionPoolTrackTableSize;
ExpSetupKey;
ExpSetupModeDetected;
ExpShuttingDown;
ExpSpecialAllocations;
ExpSpinCount;
ExpSubscriptionPfn;
ExpSubscriptionPfnInitialized;
ExpSvmAgents;
ExpSvmDeviceListLock;
ExpSvmDevices;
ExpSvmIommuSystemContext;
ExpSvmNumberOfWorkQueues;
ExpSvmStaticWorkQueue;
ExpSvmWorkQueues;
ExpSystemIsInCmosMode;
ExpSystemProcessName;
ExpSystemResourcesList;
ExpSystemSetupInProgress;
ExpTaggedPoolLock;
ExpTestSigningEnabled;
ExpTickCountMultiplier;
ExpTimeRefreshDpc;
ExpTimeRefreshInterval;
ExpTimeRefreshLock;
ExpTimeRefreshTimer;
ExpTimeRefreshWorkItem;
ExpTimeZoneBias;
ExpTimeZoneDpc;
ExpTimeZoneInformation;
ExpTimeZoneTimer;
ExpTimeZoneWorkItem;
ExpTimeout;
ExpTimerFreedCookie;
ExpTimerMapping;
ExpTimerResolutionCount;
ExpTimerResolutionListHead;
ExpTooLateForErrors;
ExpTotalTraceBuffers;
ExpUnknownDeviceGuid;
ExpUuidCacheValid;
ExpUuidCachedValues;
ExpUuidLastTimeAllocated;
ExpUuidLock;
ExpUuidSeedGenericMapping;
ExpUuidSequenceNumber;
ExpUuidSequenceNumberNotSaved;
ExpUuidSequenceNumberRegName;
ExpUuidSequenceNumberValid;
ExpUuidTimeSequenceNumber;
ExpValidAttributes;
ExpWakeTimerList;
ExpWakeTimerLock;
ExpWakeTimerSecurityDescriptor;
ExpWatchProductTypeWorkItem;
ExpWindowStationMapping;
ExpWnfDispatcher;
ExpWnfNameStoreDescriptors;
ExpWnfNotificationMapping;
ExpWnfPermanentNameSequenceNumberValueName;
ExpWnfPermanentNameSequenceNumberValueName_buffer;
ExpWnfProcessesListHead;
ExpWnfProcessesListLock;
ExpWnfSubcriptionIdCounter;
ExpWnfWellKnownNameStoreRootKey;
ExpWorkerActivityIdSetMessage;
ExpWorkerFactoryDeferredLongTimeout;
ExpWorkerFactoryDeferredMediumTimeout;
ExpWorkerFactoryDeferredShortTimeout;
ExpWorkerFactoryManagerQueue;
ExpWorkerFactoryMapping;
ExpWorkerFactoryObjectType;
ExpWorkerFactoryThreadCreationBlock;
ExpWorkerFactoryThreadCreationList;
ExpWorkerFactoryThreadCreationState;
ExpWorkerFactoryThreadCreationTimeoutInSeconds;
ExpWorkerFactoryThreadCreationTimer;
ExpWorkerFactoryThreadIdleTimeoutInSeconds;
ExpWorkerQueueTestFlags;
ExpWorkerSwapinMutex;
ExpWorkerSystemAffinityActiveMessage;
ExpWorkerThreadTimeoutInSeconds;
ExpWorkersCanSwap;
ExpWstrCallback;
FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE;
FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE;
FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE;
FastIoDispatch;
Feature_Leap_Seconds_Sixty_Second__private_propertyCache;
Feature_Leap_Seconds_Sixty_Second_logged_traits;
Feature_OneShotHRTimer__private_propertyCache;
Feature_OneShotHRTimer_logged_traits;
Feature_PdttSupport__private_propertyCache;
Feature_PdttSupport_logged_traits;
Feature_PowerButtonBugcheck__private_propertyCache;
Feature_PowerButtonBugcheck_logged_traits;
Feature_RelaxTcbForUWP__private_propertyCache;
Feature_RelaxTcbForUWP_logged_traits;
Feature_SchedulerAggressiveForegroundBoost__private_propertyCache;
Feature_SchedulerAggressiveForegroundBoost_logged_traits;
Feature_SchedulerAssistAllowRealTime__private_propertyCache;
Feature_SchedulerAssistAllowRealTime_logged_traits;
Feature_SchedulerAssistEnableBAM__private_propertyCache;
Feature_SchedulerAssistEnableBAM_logged_traits;
Feature_SchedulerAssistForegroundBoostBias__private_propertyCache;
Feature_SchedulerAssistForegroundBoostBias_logged_traits;
Feature_SchedulerAssistHRTimer__private_propertyCache;
Feature_SchedulerAssistHRTimer_logged_traits;
Feature_SchedulerAssistLongSpinWait__private_propertyCache;
Feature_SchedulerAssistLongSpinWait_logged_traits;
Feature_SchedulerAssistPreemptionPriorityKick__private_propertyCache;
Feature_SchedulerAssistPreemptionPriorityKick_logged_traits;
Feature_SchedulerAssistReflectPriority__private_propertyCache;
Feature_SchedulerAssistReflectPriority_logged_traits;
Feature_SchedulerAssistSystemIrql__private_propertyCache;
Feature_SchedulerAssistSystemIrql_logged_traits;
Feature_SchedulerAssistThreadFlag__private_propertyCache;
Feature_SchedulerAssistThreadFlag_logged_traits;
Feature_UnCOWOnWellKnownVolumes__private_propertyCache;
Feature_UnCOWOnWellKnownVolumes_logged_traits;
Feature_WCOSDeveloperMode__private_propertyCache;
Feature_WCOSDeveloperMode_logged_traits;
Feature_WldpDeveloperMode__private_propertyCache;
Feature_WldpDeveloperMode_logged_traits;
FileProvGuid;
FltMgrCallbacks;
FontLibraryInitialized;
FopFontFileListHead;
ForceDumpDisabled;
FourBitPalette;
FsRtlCreateLockInfo;
FsRtlEcpListLookaside;
FsRtlExclusiveLockLookasideList;
FsRtlFastMutexLookasideList;
FsRtlFileLockCancelCollideList;
FsRtlFileLockCancelCollideLock;
FsRtlFileLockLookasideList;
FsRtlFirstMappingLookasideList;
FsRtlHalfSecond;
FsRtlLegalAnsiCharacterArray;
FsRtlLockInfoLookasideList;
FsRtlLockTreeNodeLookasideList;
FsRtlPagingIoResourceSelector;
FsRtlPagingIoResources;
FsRtlSafeExtensions;
FsRtlSharedLockLookasideList;
FsRtlTieringHeatData;
FsRtlVirtualDiskMaxTreeDepth;
FsRtlWaitingLockLookasideList;
FsRtlWorkerQueues;
FsRtlpRedirs;
FsRtlpUncSemaphore;
FsRtlpVolumeStartupApplicationsComplete;
GENERIC_SECTION_GUID;
GUIDS_BATTERY_DISCHARGE_ACTION;
GUIDS_BATTERY_DISCHARGE_FLAGS;
GUIDS_BATTERY_DISCHARGE_LEVEL;
GUID_ACDC_DISPLAY_BURST_SUPPRESS;
GUID_ACDC_POWER_SOURCE;
GUID_ADAPTIVE_INPUT_CONTROLLER_STATE;
GUID_ALLOW_AWAYMODE;
GUID_ALLOW_RTC_WAKE;
GUID_ALLOW_STANDBY_STATES;
GUID_ARBITER_INTERFACE_STANDARD;
GUID_BACKGROUND_TASK_NOTIFICATION;
GUID_BAD_MEMORY_GROUP;
GUID_BATTERY_COUNT;
GUID_BATTERY_DISCHARGE_ACTION_0;
GUID_BATTERY_DISCHARGE_ACTION_1;
GUID_BATTERY_DISCHARGE_ACTION_2;
GUID_BATTERY_DISCHARGE_ACTION_3;
GUID_BATTERY_DISCHARGE_FLAGS_0;
GUID_BATTERY_DISCHARGE_FLAGS_1;
GUID_BATTERY_DISCHARGE_FLAGS_2;
GUID_BATTERY_DISCHARGE_FLAGS_3;
GUID_BATTERY_DISCHARGE_LEVEL_0;
GUID_BATTERY_DISCHARGE_LEVEL_1;
GUID_BATTERY_DISCHARGE_LEVEL_2;
GUID_BATTERY_DISCHARGE_LEVEL_3;
GUID_BATTERY_PERCENTAGE_REMAINING;
GUID_BOGUS_INTERFACE;
GUID_BTHPORT_DEVICE_INTERFACE;
GUID_BUS_INTERFACE_STANDARD;
GUID_BUS_RESOURCE_UPDATE_INTERFACE;
GUID_BUS_TYPE_PCI;
GUID_BUS_TYPE_SW_DEVICE;
GUID_CONNECTIVITY_IN_STANDBY;
GUID_CONSOLE_DISPLAY_STATE;
GUID_CONSOLE_INPUT_TIMEOUT;
GUID_CONSOLE_LOCKED;
GUID_CONSOLE_VIDEO_TIMEOUT;
GUID_CURRENT_BOOT_ENTRY;
GUID_DEEP_SLEEP_ENABLED;
GUID_DEFAULT_BOOT_ENTRY;
GUID_DEVCLASS_MEDIA;
GUID_DEVCLASS_SMRDISK;
GUID_DEVICE_ACPI_TIME;
GUID_DEVICE_ARRIVAL;
GUID_DEVICE_BATTERY;
GUID_DEVICE_CLASS_KBD_DEVICE;
GUID_DEVICE_CLASS_MOUSE_DEVICE;
GUID_DEVICE_CLASS_USB_CONTROLLER;
GUID_DEVICE_CLASS_VOLUME;
GUID_DEVICE_EJECT;
GUID_DEVICE_ENUMERATED;
GUID_DEVICE_FAN;
GUID_DEVICE_HIBERNATE_VETOED;
GUID_DEVICE_IDLE_POLICY;
GUID_DEVICE_INTERFACE_ARRIVAL;
GUID_DEVICE_INTERFACE_REMOVAL;
GUID_DEVICE_INVALID_ID;
GUID_DEVICE_KERNEL_INITIATED_EJECT;
GUID_DEVICE_MEMORY;
GUID_DEVICE_NOOP;
GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
GUID_DEVICE_PROCESSOR;
GUID_DEVICE_PROPERTY_CHANGED;
GUID_DEVICE_QUERY_AND_REMOVE;
GUID_DEVICE_REMOVE_PENDING;
GUID_DEVICE_SAFE_REMOVAL;
GUID_DEVICE_STANDBY_VETOED;
GUID_DEVICE_SURPRISE_REMOVAL;
GUID_DEVICE_THERMAL_ZONE;
GUID_DEVICE_WARM_EJECT_VETOED;
GUID_DEVINST_REMOVE_COMPLETE;
GUID_DEVINTERFACE_CDROM;
GUID_DEVINTERFACE_COMPORT;
GUID_DEVINTERFACE_DISK;
GUID_DEVINTERFACE_HPMI;
GUID_DEVINTERFACE_PARALLEL;
GUID_DEVINTERFACE_SURFACE_VIRTUAL_DRIVE;
GUID_DEVINTERFACE_VOLUME;
GUID_DISCONNECTED_STANDBY_MODE;
GUID_DISK_BURST_IGNORE_THRESHOLD;
GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
GUID_DISK_IDLE_TIMEOUT;
GUID_DISK_POWERDOWN_TIMEOUT;
GUID_DOCK_INTERFACE;
GUID_DRIVER_BLOCKED;
GUID_DRVMAIN_SDB;
GUID_ECP_CREATE_USER_PROCESS;
GUID_ECP_DUAL_OPLOCK_KEY;
GUID_ECP_IO_DEVICE_HINT;
GUID_ECP_NETWORK_OPEN_CONTEXT;
GUID_ECP_OPLOCK_KEY;
GUID_EFI_VARIABLE_SERVICE;
GUID_EM_ALWAYS_FALSE_CALLBACK;
GUID_EM_ALWAYS_TRUE_CALLBACK;
GUID_EM_CALLBACK_BIOS_DATE;
GUID_EM_CALLBACK_REMOVE_BAD_S3_PAGES;
GUID_EM_CPU_MATCH_CALLBACK;
GUID_EM_CPU_TYPE_INTEL_DTT_DISABLE;
GUID_EM_PEP_UPADTE_DEVICE_CONTRAINT;
GUID_EM_PO_CALLER_MODULE_MATCH_CALLBACK;
GUID_EM_PO_CALLER_MODULE_NAME_TYPE;
GUID_EM_PO_CONSOLE_STATE_CHANGE_REMAP_RULE;
GUID_EM_PO_UPDATE_DEVICE_CONTRAINT_CALLBACK;
GUID_EM_REMOVE_BAD_S3_PAGE_RULE;
GUID_EM_RULE_ALLOW_INPUT_SUPPRESSION_NOTIFICATION;
GUID_EM_RULE_DISABLE_DIRECTED_DRIPS_CPU_MATCH;
GUID_EM_RULE_SKIP_HIBERNATE_MEMORY_MAP_VALIDATION;
GUID_EM_RULE_SKIP_MEMORY_OVERWRITE_REQUEST_CONTROL_LOCK_ACTION;
GUID_EM_SYSTEM_ARCHITECTURE_CALLBACK;
GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
GUID_ENERGY_SAVER_BATTERY_THRESHOLD;
GUID_ENERGY_SAVER_BRIGHTNESS;
GUID_ENERGY_SAVER_POLICY;
GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
GUID_FIRMWARE_BOOTMGR;
GUID_GLOBAL_USER_PRESENCE;
GUID_HIBERNATE_FASTS4_POLICY;
GUID_HIBERNATE_TIMEOUT;
GUID_HWPROFILE_CHANGE_CANCELLED;
GUID_HWPROFILE_CHANGE_COMPLETE;
GUID_HWPROFILE_QUERY_CHANGE;
GUID_IDLE_BACKGROUND_TASK;
GUID_IDLE_RESILIENCY_PERIOD;
GUID_INPUT_SUPPRESS_REQUESTED;
GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
GUID_INTSTEER_MODE;
GUID_INTSTEER_TIME_UNPARK_TRIGGER;
GUID_IOMMU_BUS_INTERFACE;
GUID_IO_VOLUME_BACKGROUND_FORMAT;
GUID_IO_VOLUME_CHANGE;
GUID_IO_VOLUME_CHANGE_SIZE;
GUID_IO_VOLUME_DISMOUNT;
GUID_IO_VOLUME_DISMOUNT_FAILED;
GUID_IO_VOLUME_FORCE_CLOSED;
GUID_IO_VOLUME_INFO_MAKE_COMPAT;
GUID_IO_VOLUME_LOCK;
GUID_IO_VOLUME_LOCK_FAILED;
GUID_IO_VOLUME_MOUNT;
GUID_IO_VOLUME_NAME_CHANGE;
GUID_IO_VOLUME_NEED_CHKDSK;
GUID_IO_VOLUME_PREPARING_EJECT;
GUID_IO_VOLUME_UNLOCK;
GUID_IO_VOLUME_WEARING_OUT;
GUID_IO_VOLUME_WORM_NEAR_FULL;
GUID_LEGACY_DEVICE_DETECTION_STANDARD;
GUID_LEGACY_RTC_MITIGATION;
GUID_LIDCLOSE_ACTION;
GUID_LIDOPEN_POWERSTATE;
GUID_LIDSWITCH_STATE_CHANGE;
GUID_LOCK_CONSOLE_ON_WAKE;
GUID_LOW_POWER_EPOCH;
GUID_MIXED_REALITY_MODE;
GUID_MOF_RESOURCE_ADDED_NOTIFICATION;
GUID_MOF_RESOURCE_REMOVED_NOTIFICATION;
GUID_MONITOR_POWER_ON;
GUID_MSIMAIN_SDB;
GUID_NDIS_LAN_CLASS;
GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
GUID_NULL;
GUID_PARTITION_UNIT_INTERFACE_STANDARD;
GUID_PDC_IDLE_RESILIENCY_ENGAGED;
GUID_PLATFORM_IDLE_UPDATE;
GUID_PLATFORM_IDLE_VETO;
GUID_PNP_CUSTOM_NOTIFICATION;
GUID_PNP_EXTENDED_ADDRESS_INTERFACE;
GUID_PNP_LOCATION_INTERFACE;
GUID_POWERBUTTON_ACTION;
GUID_POWER_POLICY_PROFILE_BACKGROUND;
GUID_POWER_POLICY_PROFILE_DEFAULT;
GUID_POWER_POLICY_PROFILE_ENTRY_LEVEL_PERF;
GUID_POWER_POLICY_PROFILE_LOW_LATENCY;
GUID_POWER_POLICY_PROFILE_LOW_POWER;
GUID_POWER_POLICY_PROFILE_QOS_MULTIMEDIA;
GUID_POWER_SAVING_STATUS;
GUID_PROCESSOR_ALLOW_THROTTLING;
GUID_PROCESSOR_CLASS0_FLOOR_PERF;
GUID_PROCESSOR_CLASS1_INITIAL_PERF;
GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
GUID_PROCESSOR_DISTRIBUTE_UTILITY;
GUID_PROCESSOR_DUTY_CYCLING;
GUID_PROCESSOR_FREQUENCY_LIMIT;
GUID_PROCESSOR_HETEROGENEOUS_POLICY;
GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD;
GUID_PROCESSOR_HETERO_DECREASE_TIME;
GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD;
GUID_PROCESSOR_HETERO_INCREASE_TIME;
GUID_PROCESSOR_IDLE_ALLOW_SCALING;
GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
GUID_PROCESSOR_IDLE_DISABLE;
GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
GUID_PROCESSOR_IDLE_TIME_CHECK;
GUID_PROCESSOR_IDLE_UPDATE;
GUID_PROCESSOR_IDLE_VETO;
GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK;
GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD;
GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
GUID_PROCESSOR_PARKING_PERF_STATE;
GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW;
GUID_PROCESSOR_PERF_AUTONOMOUS_MODE;
GUID_PROCESSOR_PERF_BOOST_MODE;
GUID_PROCESSOR_PERF_BOOST_POLICY;
GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
GUID_PROCESSOR_PERF_DECREASE_HISTORY;
GUID_PROCESSOR_PERF_DECREASE_POLICY;
GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
GUID_PROCESSOR_PERF_DECREASE_TIME;
GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE;
GUID_PROCESSOR_PERF_HISTORY;
GUID_PROCESSOR_PERF_INCREASE_HISTORY;
GUID_PROCESSOR_PERF_INCREASE_POLICY;
GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
GUID_PROCESSOR_PERF_INCREASE_TIME;
GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
GUID_PROCESSOR_PERF_TIME_CHECK;
GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD;
GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME;
GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD;
GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME;
GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING;
GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR;
GUID_PROCESSOR_SETTINGS_SUBGROUP;
GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY;
GUID_PROCESSOR_THREAD_SCHEDULING_POLICY;
GUID_PROCESSOR_THROTTLE_MAXIMUM;
GUID_PROCESSOR_THROTTLE_MINIMUM;
GUID_PROC_CAP_BASE;
GUID_PROC_FLOOR_BASE;
GUID_RESUME_LOADER_SETTINGS_GROUP;
GUID_SDEV_IDENTIFIER_INTERFACE;
GUID_SECURE_DRIVER_INTERFACE;
GUID_SESSION_DISPLAY_STATUS;
GUID_SESSION_USER_PRESENCE;
GUID_SLEEPBUTTON_ACTION;
GUID_SLEEPSTUDY_BLOCKER_DAM_PHASE;
GUID_SLEEPSTUDY_BLOCKER_DAM_PHASE_LATENCY;
GUID_SLEEPSTUDY_BLOCKER_PARENT_PREVETO;
GUID_SLEEPSTUDY_BLOCKER_TOP_LEVEL_SOC_SUBSYSTEM;
GUID_SPM_DEFAULT;
GUID_SPM_LOW_POWER_CS;
GUID_SPR_ACTIVE_SESSION_CHANGE;
GUID_STANDBY_BUDGET_PERCENT;
GUID_STANDBY_TIMEOUT;
GUID_SYSMAIN_SDB;
GUID_SYSTEM_AWAYMODE;
GUID_SYSTEM_COOLING_POLICY;
GUID_TARGET_DEVICE_QUERY_REMOVE;
GUID_TARGET_DEVICE_REMOVE_CANCELLED;
GUID_TARGET_DEVICE_REMOVE_COMPLETE;
GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
GUID_THERMAL_COOLING_INTERFACE;
GUID_TRANSLATOR_INTERFACE_STANDARD;
GUID_TS_INPUT_TIMEOUT;
GUID_UNATTEND_SLEEP_TIMEOUT;
GUID_USER_PRESENCE_PREDICTION;
GUID_VERIFIER_WMI_INTERFACE;
GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
GUID_VIDEO_BRIGHTNESS_CAPABLE;
GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
GUID_VIDEO_DIM_TIMEOUT;
GUID_VIDEO_POWERDOWN_TIMEOUT;
GUID_WINDOWS_BOOTMGR;
GenericMappingForMembershipCheck;
GlfsrXorLookup1;
GlfsrXorLookup2;
GlfsrXorLookup3;
GlfsrXorLookup4;
GlfsrXorLookup5;
GlfsrXorLookupTables;
GlobalLoggerGuid;
GlobalSaclKeyPrefix;
GuidFormat;
HV_EVENTLOG_BAL_HYPERVISOR_INIT_FAILED;
HV_EVENTLOG_BAL_TOO_MANY_RS_MEMORY_RANGES;
HV_EVENTLOG_GUEST_STATE_SCRUBBING;
HV_EVENTLOG_GUEST_STATE_SCRUBBING_DISABLED_CORE_SCHEDULER;
HV_EVENTLOG_IOMMU_FAILED_INVALID_IOAPIC;
HV_EVENTLOG_IOMMU_FAILED_NO_DEVICE_ASSIGNMENT;
HV_EVENTLOG_IOMMU_FAILED_NO_RESOURCES;
HV_EVENTLOG_IOMMU_FAILED_RESERVED_DEVICE;
HV_EVENTLOG_IOMMU_FAILED_RID_CONFLICT;
HV_EVENTLOG_IOMMU_INIT;
HV_EVENTLOG_IOMMU_INIT_POLICY_ENABLE;
HV_EVENTLOG_IOMMU_WARNING_SCOPE_CONFLICT;
HV_EVENTLOG_PROCESSOR_CPUID_VALIDATION_ERROR;
HV_EVENTLOG_PROCESSOR_STARTUP_FAILED;
HV_EVENTLOG_SCHEDULER_TYPE;
HV_EVENTLOG_START_SUCCEEDED;
HV_EVENTLOG_TSC_SYNC_FAILED;
HalDispatchTable;
HalIommuDispatch;
HalIommuDispatchTable;
HalPrivateDispatchTable;
HandleTableListHead;
HandleTableListLock;
HdlpsPcAnsiToUnicode;
HeadlessGlobals;
HeapGuid;
HeapRangeGuid;
HeapSummaryGuid;
HvShutdownComplete;
HvSymcryptSeed;
HvcallCodeVa;
HvlCrashdumpGuid;
HvlEnableIdleYield;
HvlEnlightenments;
HvlGlobalSystemEventsGuid;
HvlGlobalSystemEventsHandle;
HvlHyperVRootPartition;
HvlHypervisorConnected;
HvlLongSpinCountMask;
HvlPartitionId;
HvlSkCrashdumpGuid;
HvlVpStartDisabled;
HvlpComponentName;
HvlpCoreCount;
HvlpCpuVendor;
HvlpCrashdumpData;
HvlpCrashdumpIterationState;
HvlpEnlightenments;
HvlpFallbackScratchPage;
HvlpFlags;
HvlpHibernateScratchPage;
HvlpHvIdentityInfoCallbackRecord;
HvlpHypercallCodeVa;
HvlpHypervisorStatsPage;
HvlpHypervisorVersion;
HvlpInterruptCallback;
HvlpIteratorCrashdump;
HvlpIteratorHibernate;
HvlpLegacyPowerSettingList;
HvlpLogicalProcessorCount;
HvlpLogicalProcessorRegions;
HvlpMaximumProcessors;
HvlpNodeCount;
HvlpNodes;
HvlpPackageCount;
HvlpPowerSettingList;
HvlpQueryNodeDistance;
HvlpQueryProcessorNode;
HvlpQueryProximityId;
HvlpQueryProximityNode;
HvlpReferenceTscPage;
HvlpRescindedEnlightenments;
HvlpRootFlags;
HvlpRootSchedulerEnabled;
HvlpSchedulerType;
HvlpSecondaryDumpDataGuid;
HvlpVirtualProcessorMapping;
HvlpVirtualProcessorsIdentityMapped;
HvlpVsmVtlCallVa;
HvlpWheaErrorNotificationCallback;
INTERRUPT_CONNECTION_DATA_PKEY;
INTSTEER_ETW_PROVIDER;
ImageLoad;
ImageLoadGuid;
ImageUnload;
InMemData;
IndexToActionName;
InitAnsiCodePageDataOffset;
InitConsoleFlags;
InitForceInline;
InitIsWinPEMode;
InitNlsSectionPointer;
InitNlsTableBase;
InitNlsTableSize;
InitOemCodePageDataOffset;
InitSafeBootMode;
InitTableInfo;
InitTickRolloverDelay;
InitTickRolloverDelayLength;
InitTickRolloverDelayType;
InitUnicodeCaseTableDataOffset;
InitWinPEModeType;
InitializationPhase;
InstanceName;
IoAdapterObjectType;
IoArcBootDeviceName;
IoArcHalDeviceName;
IoArcTableListHead;
IoAsynchronousPageWriteIrpAllocationFailure;
IoAsynchronousPageWriteNonPagefileIrpAllocationFailure;
IoBlanketBoostCount;
IoBoostedPagingIrpCount;
IoBoostedThreadedIrpCount;
IoCompletionObjectType;
IoControllerObjectType;
IoDeviceHandlerObjectSize;
IoDeviceHandlerObjectType;
IoDeviceObjectType;
IoDriverObjectType;
IoFileObjectType;
IoInitSystem_deviceNameBuffer;
IoInitSystem_valueBuffer;
IoKernelIssuedIoBoostedCount;
IoLoaderArcBootDeviceName;
IoLowPriorityReadOperationCount;
IoLowPriorityWriteOperationCount;
IoMgrProvider;
IoMgrTraceHandle;
IoMgr_DumpEncryptionFailure;
IoMgr_LegacyFsFilterBlockedByPolicy;
IoMgr_LegacyFsFilterBlockedOnScm;
IoMgr_MountBegin;
IoMgr_MountFailed;
IoMgr_MountSucceeded;
IoOtherOperationCount;
IoOtherTransferCount;
IoPageReadIrpAllocationFailure;
IoPageReadNonPagefileIrpAllocationFailure;
IoPagingReadLowPriorityBumpedCount;
IoPagingReadLowPriorityCount;
IoPagingWriteLowPriorityBumpedCount;
IoPagingWriteLowPriorityCount;
IoReadOperationCount;
IoReadTransferCount;
IoStatisticsLock;
IoStatusBlockRangeTable;
IoStatusBlockRangeTableLock;
IoSynchronousPageWriteIrpAllocationFailure;
IoSynchronousPageWriteNonPagefileIrpAllocationFailure;
IoTraceHandle;
IoTraceProvider;
IoTrace_ActivityIdTransfer;
IoTrace_KernelIo_AllocateIrp;
IoTrace_KernelIo_ReuseIrp;
IoTrace_UserInitiatedIo;
IoWorkerQueue;
IoWriteOperationCount;
IoWriteTransferCount;
IopAllocateBootResourcesRoutine;
IopAllowLoadCrashDumpDriver;
IopAmbiguousSystemDisk;
IopAutoReboot;
IopBlockLegacyFsFilters;
IopBootConfigsReserved;
IopBootDriverReinitCompleted;
IopBootDriverReinitializeQueueHead;
IopCacheHitIncrement;
IopCancelSpinLock;
IopCaseInsensitive;
IopCdRomFileSystemQueueHead;
IopCompletionLock;
IopCompletionLookasideList;
IopCompletionMapping;
IopCrashDumpLock;
IopCurrentHardError;
IopDatabaseLock;
IopDatabaseResource;
IopDeadIrps;
IopDeviceTreeLock;
IopDisableBufferedIoInit;
IopDiskFileSystemQueueHead;
IopDiskIoAttributionBaseIoSize;
IopDiskIoAttributionKey;
IopDiskIoAttributionLock;
IopDiskIoAttributionTree;
IopDispatchAllocateIrp;
IopDispatchCallDriver;
IopDispatchCompleteRequest;
IopDispatchFreeIrp;
IopDriverLoadResource;
IopDriverReinitializeQueueHead;
IopErrorLogAllocation;
IopErrorLogDisabledThisBoot;
IopErrorLogListHead;
IopErrorLogLock;
IopErrorLogSession;
IopErrorLogSessionPending;
IopErrorLogWorkItem;
IopFailZeroAccessCreate;
IopFileMapping;
IopFilesystemDatabaseShutdownRundown;
IopFsNotifyChangeQueueHead;
IopFsRegistrationInProgress;
IopFsRegistrationOps;
IopFunctionPointerLock;
IopFunctionPointerMask;
IopGroupIndex;
IopGroupListHead;
IopGroupTable;
IopHardError;
IopInitHalDeviceNode;
IopInitHalResources;
IopInitReservedResourceList;
IopInitSystemCompletedEnoughForReInitRoutines;
IopIoRateExtensionHost;
IopIoRateHostTable;
IopIrpCompletionTimeoutInSeconds;
IopIrpCreditsEnabled;
IopIrpExtensionStatus;
IopIrpStackProfilerDpc;
IopIrpStackProfilerFlags;
IopIrpStackProfilerMinSizeThreshold;
IopIrpStackProfilerSampleSize;
IopKeepAliveTracker;
IopLargeIrpLookasideList;
IopLargeIrpStackLocations;
IopLegacyBusInformationTable;
IopLegacyDeviceNode;
IopLinkTrackingPacket;
IopLinkTrackingPortObject;
IopLinkTrackingServiceEvent;
IopLinkTrackingServiceObject;
IopLiveDumpContext;
IopLiveDumpEtwEnabled;
IopLiveDumpEtwRegHandle;
IopLiveDumpLock;
IopMdlLookasideList;
IopMediumIrpLookasideList;
IopMediumIrpStackLocations;
IopMountCompletionEvent;
IopMountCompletionWaiters;
IopMountsInProgress;
IopNetworkFileSystemQueueHead;
IopNotifyLastChanceShutdownQueueHead;
IopNotifyShutdownQueueHead;
IopNumTriageDumpDataBlocks;
IopNumberDeviceNodes;
IopOplockFoExtLookasideList;
IopPendingEjects;
IopPendingSurpriseRemovals;
IopPerfDriverUniqueMatchId;
IopPerfIoTrackingListHead;
IopPerfIoTrackingLock;
IopPerfStatus;
IopQueryFsOperationAccess;
IopQueryFsOperationLength;
IopQueryOperationAccess;
IopQueryOperationLength;
IopQuerySetAlignmentRequirement;
IopQuerySetFsAlignmentRequirement;
IopRegistryRegisteredCallbacks;
IopReportBugCheckProgress;
IopReserveIrps;
IopRevocationExtension;
IopRootBusNumberArbiter;
IopRootDeviceNode;
IopRootDmaArbiter;
IopRootIrqArbiter;
IopRootMemArbiter;
IopRootPortArbiter;
IopRunTimeContextOffsets;
IopSafeCompletionLookasideList;
IopSecurityResource;
IopSessionCallbackObject;
IopSessionEventType;
IopSessionNotificationLock;
IopSessionNotificationQueueHead;
IopSessionZeroAccessCheckEnabled;
IopSetFsOperationAccess;
IopSetFsOperationLength;
IopSetOperationAccess;
IopSetOperationLength;
IopSmallIrpLookasideList;
IopStaticRevocationExtension;
IopSurpriseRemoveListLock;
IopSymlinkECPGuid;
IopSymlinkEnabledTypes;
IopSymlinkInfoLookasideList;
IopSysEnvFunctionTableHal;
IopSysEnvFunctionTableSysEnv;
IopSysEnvFunctionTableTrEE;
IopSysEnvOverrideFlags;
IopTapeFileSystemQueueHead;
IopTimer;
IopTimerCount;
IopTimerDpc;
IopTimerLock;
IopTimerQueueHead;
IopTriageDumpDataBlocks;
IopUniqueDeviceObjectNumber;
IopUpdatePriorityCallbackRoutine;
IopUpdatePriorityCallbackRoutineCount;
IopUseCompletionOptimization;
IopVpbSpinLock;
IopWaitCompletionMapping;
IopWaitCompletionPacketObjectType;
IopWarmEjectLock;
IopWarmEjectPdo;
IopWstrHal;
IopWstrLoaderReservedMemory;
IopWstrPhysicalMemory;
IopWstrSpecialMemory;
IopWstrSystem;
IovDriverListHead;
IovIrpTraces;
IovIrpTracesIndex;
IovIrpTracesLength;
IovMdlInvariant10Milliseconds;
IovUtilVerifierEnabled;
IovpDisabledWithoutReboot;
IovpEnabledInThePast;
IrpHandlingTable;
IrpMajorNames;
IumBugCheckVariables;
JobServerSiloStateChange;
JobStart;
JobTerminate;
KDskEvt_Flush;
KDskEvt_Read;
KDskEvt_Write;
KERNEL_AUDIT_API_CREATESYMBOLICLINKOBJECT;
KERNEL_AUDIT_API_IOREGISTERLASTCHANCESHUTDOWNNOTIFICATION;
KERNEL_AUDIT_API_IOREGISTERSHUTDOWNNOTIFICATION;
KERNEL_AUDIT_API_OPENPROCESS;
KERNEL_AUDIT_API_OPENTHREAD;
KERNEL_AUDIT_API_PSSETLOADIMAGENOTIFYROUTINE;
KERNEL_AUDIT_API_SETCONTEXTTHREAD;
KERNEL_AUDIT_API_TERMINATEPROCESS;
KERNEL_MEM_EVENT_ACG;
KERNEL_MEM_EVENT_MEMINFO;
KERNEL_MEM_EVENT_MEMINFO_SESSIONWS;
KERNEL_MEM_EVENT_MEMINFO_WS;
KERNEL_MEM_EVENT_WS_INSWAP_START;
KERNEL_MEM_EVENT_WS_INSWAP_STOP;
KERNEL_MEM_EVENT_WS_INSWAP_STORE_FAIL;
KERNEL_MEM_EVENT_WS_OUTSWAP_START;
KERNEL_MEM_EVENT_WS_OUTSWAP_STOP;
KFileEvt_Cleanup;
KFileEvt_Close;
KFileEvt_Create;
KFileEvt_CreateNewFile;
KFileEvt_Delete;
KFileEvt_DeletePath;
KFileEvt_DirEnum;
KFileEvt_DirNotify;
KFileEvt_FSCTL;
KFileEvt_Flush;
KFileEvt_NameCreate;
KFileEvt_NameDelete;
KFileEvt_OperationEnd;
KFileEvt_QueryEA;
KFileEvt_QueryInformation;
KFileEvt_QuerySecurity;
KFileEvt_Read;
KFileEvt_Rename;
KFileEvt_RenamePath;
KFileEvt_SetEA;
KFileEvt_SetInformation;
KFileEvt_SetLink;
KFileEvt_SetLinkPath;
KFileEvt_SetSecurity;
KFileEvt_Write;
KMBootEvt_SystemBoot_Start;
KMPnPEvt_AssignResources_Start;
KMPnPEvt_AssignResources_Stop;
KMPnPEvt_BootDriverReinit_Start;
KMPnPEvt_BootDriverReinit_Stop;
KMPnPEvt_BootInit_Start;
KMPnPEvt_BootInit_Stop;
KMPnPEvt_BootStart_Start;
KMPnPEvt_BootStart_Stop;
KMPnPEvt_CfgMgr_DeviceInterfaceList_Start;
KMPnPEvt_CfgMgr_DeviceInterfaceList_Stop;
KMPnPEvt_CfgMgr_DeviceList_Start;
KMPnPEvt_CfgMgr_DeviceList_Stop;
KMPnPEvt_CfgMgr_QueryRemove_Start;
KMPnPEvt_CfgMgr_QueryRemove_Stop;
KMPnPEvt_ConfigureDevice_Queue;
KMPnPEvt_ConfigureDevice_Start;
KMPnPEvt_ConfigureDevice_Stop;
KMPnPEvt_DevQuery_ProcessingStart;
KMPnPEvt_DevQuery_ProcessingStop;
KMPnPEvt_DevQuery_QueryStart;
KMPnPEvt_DevQuery_QueryStop;
KMPnPEvt_DeviceAction_Queue;
KMPnPEvt_DeviceAction_Start;
KMPnPEvt_DeviceAction_Stop;
KMPnPEvt_DeviceAdd_Start;
KMPnPEvt_DeviceAdd_Stop;
KMPnPEvt_DeviceConfig_Blocked;
KMPnPEvt_DeviceConfig_Failure;
KMPnPEvt_DeviceConfig_RebootRequired;
KMPnPEvt_DeviceConfig_Start;
KMPnPEvt_DeviceConfig_Stop;
KMPnPEvt_DeviceConfig_Success;
KMPnPEvt_DeviceDelete_Failure;
KMPnPEvt_DeviceDelete_Success;
KMPnPEvt_DeviceEject_Pend;
KMPnPEvt_DeviceEject_Start;
KMPnPEvt_DeviceEject_Stop;
KMPnPEvt_DeviceEnum_Pend;
KMPnPEvt_DeviceEnum_Start;
KMPnPEvt_DeviceEnum_Stop;
KMPnPEvt_DeviceInstall_Requested;
KMPnPEvt_DeviceMigrate_Failure;
KMPnPEvt_DeviceMigrate_Success;
KMPnPEvt_DeviceMigrate_Warning;
KMPnPEvt_DeviceRemoval_Queue;
KMPnPEvt_DeviceRemoval_Start;
KMPnPEvt_DeviceRemoval_Stop;
KMPnPEvt_DeviceReset_Start;
KMPnPEvt_DeviceReset_Stop;
KMPnPEvt_DeviceStart_Failure;
KMPnPEvt_DeviceStart_Pend;
KMPnPEvt_DeviceStart_RebootRequired;
KMPnPEvt_DeviceStart_Start;
KMPnPEvt_DeviceStart_Stop;
KMPnPEvt_DeviceStart_Success;
KMPnPEvt_DriverDatabaseLoad_Start;
KMPnPEvt_DriverDatabaseLoad_Stop;
KMPnPEvt_DriverDatabaseLoaded_Start;
KMPnPEvt_DriverDatabaseLoaded_Stop;
KMPnPEvt_DriverDatabaseUnload_Pend;
KMPnPEvt_DriverDatabaseUnload_Start;
KMPnPEvt_DriverDatabaseUnload_Stop;
KMPnPEvt_DriverInitPhase_Start;
KMPnPEvt_DriverInitPhase_Stop;
KMPnPEvt_DriverInit_Start;
KMPnPEvt_DriverInit_Stop;
KMPnPEvt_DriverLoad_Fail;
KMPnPEvt_DriverLoad_Start;
KMPnPEvt_DriverLoad_Stop;
KMPnPEvt_DriverOverride_SetOverride;
KMPnPEvt_DriverUnload_Start;
KMPnPEvt_DriverUnload_Stop;
KMPnPEvt_Driver_Blocked;
KMPnPEvt_EarlyLaunch_LoadNotification_Start;
KMPnPEvt_EarlyLaunch_LoadNotification_Stop;
KMPnPEvt_EarlyLaunch_PolicyCheck;
KMPnPEvt_EarlyLaunch_StatusNotification_Start;
KMPnPEvt_EarlyLaunch_StatusNotification_Stop;
KMPnPEvt_OsLoader_Time;
KMPnPEvt_ProcessDeviceRestart_Start;
KMPnPEvt_ProcessDeviceRestart_Stop;
KMPnPEvt_ProcessDeviceStart_Start;
KMPnPEvt_ProcessDeviceStart_Stop;
KMPnPEvt_ProcessNewDevice_InstancePath;
KMPnPEvt_ProcessNewDevice_Start;
KMPnPEvt_ProcessNewDevice_Stop;
KMPnPEvt_Rebalance_Start;
KMPnPEvt_Rebalance_Stop;
KMPnPEvt_ReenumerateDeviceOnly_Queue;
KMPnPEvt_ReenumerateDeviceOnly_Start;
KMPnPEvt_ReenumerateDeviceOnly_Stop;
KMPnPEvt_ReenumerateDeviceTree_Queue;
KMPnPEvt_ReenumerateDeviceTree_Start;
KMPnPEvt_ReenumerateDeviceTree_Stop;
KMPnPEvt_SystemStartDriverReinit_Start;
KMPnPEvt_SystemStartDriverReinit_Stop;
KMPnPEvt_SystemStartLegacyEnum_Start;
KMPnPEvt_SystemStartLegacyEnum_Stop;
KMPnPEvt_SystemStartPnPEnum_Start;
KMPnPEvt_SystemStartPnPEnum_Stop;
KMPnPEvt_SystemStart_Start;
KMPnPEvt_SystemStart_Stop;
KMPnPRundownEvt_SleepStudy_ConnectionResource;
KMPnPRundownEvt_SleepStudy_ParentDevNode;
KMPnPRundownEvt_SleepStudy_ParentPdo;
KNetEvt_AcceptIPV4;
KNetEvt_AcceptIPV6;
KNetEvt_ConnectIPV4;
KNetEvt_ConnectIPV6;
KNetEvt_DisconnectIPV4;
KNetEvt_DisconnectIPV6;
KNetEvt_Fail;
KNetEvt_FailUdp;
KNetEvt_ReconnectIPV4;
KNetEvt_ReconnectIPV6;
KNetEvt_RecvIPV4;
KNetEvt_RecvIPV4Udp;
KNetEvt_RecvIPV6;
KNetEvt_RecvIPV6Udp;
KNetEvt_RetransmitIPV4;
KNetEvt_RetransmitIPV6;
KNetEvt_SendIPV4;
KNetEvt_SendIPV4Udp;
KNetEvt_SendIPV6;
KNetEvt_SendIPV6Udp;
KNetEvt_TcpCopyIPV4;
KNetEvt_TcpCopyIPV6;
KSCATEGORY_AUDIO;
KShimErrorMessage;
KShimInfoMessage;
KdAutoEnableOnEvent;
KdBlockEnable;
KdBreakAfterSymbolLoad;
KdComponentTable;
KdDebugDevice;
KdDebuggerDataBlock;
KdDebuggerEnabled;
KdDebuggerEnteredCount;
KdDebuggerEnteredWithoutLock;
KdDebuggerLock;
KdDebuggerLockMaxWaitTime;
KdDebuggerNotPresent;
KdDisableCount;
KdDumpEnableOffset;
KdEnteredDebugger;
KdEventLoggingEnabled;
KdEventLoggingPresent;
KdHvComPortInUse;
KdIgnoreUmExceptions;
KdIgnoredSavingSupervisorXStateFeatures;
KdLocalDebugEnabled;
KdLogBuffer;
KdPageDebuggerSection;
KdPerformanceCounterRate;
KdPitchDebugger;
KdPortLocked;
KdPreviouslyEnabled;
KdPrintBufferAllocateSize;
KdPrintBufferChanges;
KdPrintBufferSize;
KdPrintCircularBuffer;
KdPrintDefaultCircularBuffer;
KdPrintRolloverCount;
KdPrintSkippedCount;
KdPrintTruncatedCount;
KdPrintWritePointer;
KdResetUmAttachPid;
KdResetUmBreakPid;
KdTimerDifference;
KdTimerStart;
KdTimerStop;
KdTransportMaxPacketSize;
KdUmAttachPid;
KdUmBreakMarker;
KdUmBreakPid;
KdVersionBlock;
Kd_ACPI_Mask;
Kd_ALPC_Mask;
Kd_AMLI_Mask;
Kd_APPCOMPAT_Mask;
Kd_AUTOCHK_Mask;
Kd_BURNENG_Mask;
Kd_CACHEMGR_Mask;
Kd_CAPIMG_Mask;
Kd_CDAUDIO_Mask;
Kd_CDROM_Mask;
Kd_CFR_Mask;
Kd_CLASSPNP_Mask;
Kd_CNG_Mask;
Kd_CONFIG_Mask;
Kd_COVERAGE_Mask;
Kd_CRASHDUMPXHCI_Mask;
Kd_CRASHDUMP_Mask;
Kd_DCOMSS_Mask;
Kd_DEFAULT_Mask;
Kd_DFRGIFC_Mask;
Kd_DFSC_Mask;
Kd_DISK_Mask;
Kd_DMADMIN_Mask;
Kd_DMCONFIG_Mask;
Kd_DMIO_Mask;
Kd_DMSERVER_Mask;
Kd_DMSYNTH_Mask;
Kd_DRIVEEXTENDER_Mask;
Kd_EMS_Mask;
Kd_ENDOFTABLE_Mask;
Kd_ENVIRON_Mask;
Kd_EXFAT_Mask;
Kd_FASTFAT_Mask;
Kd_FCPORT_Mask;
Kd_FDC_Mask;
Kd_FILETRACE_Mask;
Kd_FLOPPY_Mask;
Kd_FLTMGR_Mask;
Kd_FLTREGRESS_Mask;
Kd_FSLIB_Mask;
Kd_FSTUB_Mask;
Kd_FUSION_Mask;
Kd_FVEVOL_Mask;
Kd_GPIO_Mask;
Kd_HALIA64_Mask;
Kd_HEAP_Mask;
Kd_HPS_Mask;
Kd_I8042PRT_Mask;
Kd_IDEP_Mask;
Kd_IDLETASK_Mask;
Kd_IHVAUDIO_Mask;
Kd_IHVBUS_Mask;
Kd_IHVDRIVER_Mask;
Kd_IHVNETWORK_Mask;
Kd_IHVSTREAMING_Mask;
Kd_IHVVIDEO_Mask;
Kd_IMAPI_Mask;
Kd_INFINIBAND_Mask;
Kd_IOSTRESS_Mask;
Kd_ISAPNP_Mask;
Kd_KBDCLASS_Mask;
Kd_KBDHID_Mask;
Kd_KSECDD_Mask;
Kd_KTM_Mask;
Kd_LDR_Mask;
Kd_LSASS_Mask;
Kd_LSERMOUS_Mask;
Kd_LUAFV_Mask;
Kd_MCHGR_Mask;
Kd_MMCSS_Mask;
Kd_MM_Mask;
Kd_MOUCLASS_Mask;
Kd_MOUHID_Mask;
Kd_MOUNTMGR_Mask;
Kd_MPIO_Mask;
Kd_MSDSM_Mask;
Kd_NDIS_Mask;
Kd_NETAPI_Mask;
Kd_NTFS_Mask;
Kd_NTOSPNP_Mask;
Kd_NVCTRACE_Mask;
Kd_PCIIDE_Mask;
Kd_PCI_Mask;
Kd_PERFLIB_Mask;
Kd_PNPMEM_Mask;
Kd_PNPMGR_Mask;
Kd_POWER_Mask;
Kd_PREFETCHER_Mask;
Kd_PRINTSPOOLER_Mask;
Kd_PROCESSOR_Mask;
Kd_PSHED_Mask;
Kd_REDBOOK_Mask;
Kd_REFS_Mask;
Kd_RPCPROXY_Mask;
Kd_RSFILTER_Mask;
Kd_RTLTHREADPOOL_Mask;
Kd_SAMSS_Mask;
Kd_SBP2PORT_Mask;
Kd_SCCLIENT_Mask;
Kd_SCSERVER_Mask;
Kd_SCSIMINIPORT_Mask;
Kd_SCSIPORT_Mask;
Kd_SERENUM_Mask;
Kd_SERIAL_Mask;
Kd_SERMOUSE_Mask;
Kd_SETUP_Mask;
Kd_SE_Mask;
Kd_SHPC_Mask;
Kd_SIS_Mask;
Kd_SMSS_Mask;
Kd_SOFTPCI_Mask;
Kd_SR_Mask;
Kd_SSPICLI_Mask;
Kd_STORAGECLASSMEMORY_Mask;
Kd_STORMINIPORT_Mask;
Kd_STORPORT_Mask;
Kd_STORPROP_Mask;
Kd_STORVSP_Mask;
Kd_SVCHOST_Mask;
Kd_SXS_Mask;
Kd_SYSTEM_Mask;
Kd_TAPE_Mask;
Kd_TCPIP6_Mask;
Kd_TCPIP_Mask;
Kd_TERMSRV_Mask;
Kd_THREADORDER_Mask;
Kd_TPM_Mask;
Kd_TWOTRACK_Mask;
Kd_TXF_Mask;
Kd_UDFS_Mask;
Kd_UHCD_Mask;
Kd_UNIMODEM_Mask;
Kd_USBSTOR_Mask;
Kd_USERGDI_Mask;
Kd_VDSBAS_Mask;
Kd_VDSDYNDR_Mask;
Kd_VDSDYN_Mask;
Kd_VDSLDR_Mask;
Kd_VDSUTIL_Mask;
Kd_VDS_Mask;
Kd_VERIFIER_Mask;
Kd_VIDEOPRT_Mask;
Kd_VIDEO_Mask;
Kd_VPCI_Mask;
Kd_VSSDYNDISK_Mask;
Kd_VSS_Mask;
Kd_W32TIME_Mask;
Kd_WDI_Mask;
Kd_WDT_Mask;
Kd_WER_Mask;
Kd_WHEA_Mask;
Kd_WIN2000_Mask;
Kd_WMICORE_Mask;
Kd_WMILIB_Mask;
Kd_WOW64_Mask;
Kd_WSOCKTRANSPORT_Mask;
Kd_XSAVE_Mask;
KdpBootedNodebug;
KdpBreakpointChangeCount;
KdpBreakpointTable;
KdpContext;
KdpContextSent;
KdpControlCPressed;
KdpDataBlockEncoded;
KdpDataSpinLock;
KdpDebugRoutineSelect;
KdpDebuggerDataListHead;
KdpDebuggerStructuresInitialized;
KdpLoaderDebuggerBlock;
KdpMessageBuffer;
KdpOweBreakpoint;
KdpPathBuffer;
KdpPowerListHead;
KdpPowerSpinLock;
KdpPrintSpinLock;
KdpRemoteFiles;
KdpSearchAddressRangeEnd;
KdpSearchAddressRangeStart;
KdpSearchCheckPoint;
KdpSearchEndPageFrame;
KdpSearchInProgress;
KdpSearchPageHitIndex;
KdpSearchPageHitOffsets;
KdpSearchPageHits;
KdpSearchPfnValue;
KdpSearchStartPageFrame;
KdpTimeSlipDpc;
KdpTimeSlipEvent;
KdpTimeSlipEventLock;
KdpTimeSlipPending;
KdpTimeSlipTimer;
KdpTimeSlipWorkItem;
KeActiveProcessors;
KeBootTime;
KeBootTimeBias;
KeBootprocSpecified;
KeBugCheckAddRemovePagesCallbackListHead;
KeBugCheckCallbackListHead;
KeBugCheckCallbackLock;
KeBugCheckReasonCallbackListHead;
KeBugCheckTriageDumpDataArrayListHead;
KeDpcWatchdogPeriod;
KeDpcWatchdogProfileGlobalTriageBlock;
KeDpcWatchdogProfileOffset;
KeDynamicPartitioningSupported;
KeEnableWatchdogTimeout;
KeExecuteUmsThread;
KeFeatureBits;
KeFeatureBits2;
KeForceGroupAwareness;
KeHeteroSystem;
KeHeteroSystemQos;
KeHeteroSystemVirtual;
KeHypervisorNumprocSpecified;
KeKernelStackSize;
KeLargestCacheLine;
KeLastBranchMSR;
KeLoaderBlock;
KeLoaderBlockExported;
KeMaximumIncrement;
KeMaximumProcessors;
KeMinimumIncrement;
KeMtrrComparisonFailed;
KeNodeBlock;
KeNodeDistance;
KeNonHrTimeIncrement;
KeNumberNodes;
KeNumberProcessors;
KeNumberProcessorsGroup0;
KeNumprocSpecified;
KeProcessorArchitecture;
KeProcessorLevel;
KeProcessorRevision;
KeRaiseUserExceptionDispatcher;
KeRegisteredProcessors;
KeRootProcNumaNodes;
KeRootProcNumaNodesSpecified;
KeRootProcPerCoreSpecified;
KeRootProcPerNodeSpecified;
KeRootProcSpecified;
KeServiceDescriptorTable;
KeServiceDescriptorTableFilter;
KeServiceDescriptorTableShadow;
KeSleepingProcessors;
KeTestDisableXSave;
KeTestRemovedFeatureMask;
KeThreadDpcEnable;
KeThreadSwitchCounters;
KeTimeAdjustmentFrequency;
KeTimeIncrement;
KeTimeSynchronization;
KeTimerCheckFlags;
KeUmsExecuteYieldThreadEnd;
KeUmsThreadYield;
KeUserApcDispatcher;
KeUserCallbackDispatcher;
KeUserExceptionDispatcher;
KeUserInvertedFunctionTable;
KeUserPopEntrySListEnd;
KeUserPopEntrySListFault;
KeUserPopEntrySListResume;
KeVerifierDpcScalingFactor;
KeXSavePolicyId;
KeXStateLength;
KernelAuditApiCallsGuid;
KernelLeapSecondDataParseFailure;
KernelLeapSecondDataUpdate;
KernelLicensingCacheCorrupt;
KernelLicensingCacheCorruptionFixed;
KernelLicensingCacheExpired;
KernelProvGuid;
KernelRundownGuid;
KernelShimEngineProvider;
KernelSystemStart;
KernelSystemStop;
KernelSystemTimeChange;
KernelUtils;
KernelVerifier;
KiAbTreeArray;
KiAccessBitErrata;
KiActiveGroups;
KiActualNodeCost;
KiAdjustDpcThreshold;
KiArgumentTable;
KiBalanceSetManagerCount;
KiBalanceSetManagerPeriod;
KiBalanceSetManagerPeriodicDpc;
KiBalanceSetManagerPeriodicEvent;
KiBarrierWait;
KiBootDebuggerActive;
KiBootProcessorCount;
KiBootProcessorIdt;
KiBootProcessorIdtSize;
KiBootProcessorsStarted;
KiBoundsCallback;
KiBugCheckActive;
KiBugCheckData;
KiBugCheckDriver;
KiBugCheckOriginalData;
KiBugCheckUnexpectedInterrupts;
KiBugCodeMessages;
KiCacheErrataMonitor;
KiCacheFlushTimeStamp;
KiCacheIsoBitmap;
KiCachedSystemAllowedCpuSet;
KiCachedSystemAllowedCpuSetVersion;
KiClockCheckPending;
KiClockCheckReady;
KiClockCheckSlot;
KiClockIncrementTrace;
KiClockIncrementTraceCount;
KiClockIntervalRequests;
KiClockKeepAliveCycle;
KiClockLatencyMaxDynamicTickDuration;
KiClockLatencyMeasurementEnabled;
KiClockOwnerAllowedCpuSet;
KiClockOwnerAllowedCpuSetVersion;
KiClockOwnerOneShotRequest;
KiClockOwnerOneShotRequestState;
KiClockPollCycle;
KiClockState;
KiClockStateUpdateTimeout;
KiClockStats;
KiClockTickSkipTraceIndex;
KiClockTickSkipTraces;
KiClockTickTraceIndex;
KiClockTickTraces;
KiClockTimerAlwaysOnPresent;
KiClockTimerHighLatency;
KiClockTimerNextTickTime;
KiClockTimerOneShotEndTime;
KiClockTimerOneShotStartTime;
KiClockTimerOwner;
KiClockTimerPerCpu;
KiConsiderTimerRebasing;
KiCpu0HardwareFlags;
KiCpuFeatureTable;
KiCpuSetAffinities;
KiCpuSetAffinitiesShadow;
KiCpuSetAffinitySize;
KiCpuSetCount;
KiCpuSetData;
KiCpuSetLock;
KiCpuSetSequence;
KiCpuTable;
KiCpuTracingFlags;
KiCurrentErrLogBufferBase;
KiCurrentErrLogBufferOffset;
KiCurrentEtwBufferBase;
KiCurrentEtwBufferOffset;
KiCycleDivisorLongTerm;
KiCycleDivisorShortTerm;
KiCyclesPerClockQuantum;
KiCyclesPerGeneration;
KiDPCTimeout;
KiDebugPollInterval;
KiDebugTrapIndex;
KiDebugTraps;
KiDebuggerIsStallOwner;
KiDebuggerOwner;
KiDefaultClockIntervalRequest;
KiDefaultHeteroCpuPolicy;
KiDesiredHeteroCpuPolicy;
KiDirectQuantumTarget;
KiDisableLightWeightSuspend;
KiDpcWatchdogProfileArrayLength;
KiDpcWatchdogProfileCumulativeDpcThreshold;
KiDpcWatchdogProfileSingleDpcThreshold;
KiDynamicHeteroCpuPolicy;
KiDynamicHeteroCpuPolicyExpectedCycles;
KiDynamicHeteroCpuPolicyExpectedRuntime;
KiDynamicHeteroCpuPolicyImportantPriority;
KiDynamicHeteroCpuPolicyMask;
KiDynamicProcessorLock;
KiDynamicTickCancellations;
KiDynamicTickDisableReason;
KiDynamicTickInitialized;
KiDynamicTraceEnabled;
KiDynamicTraceMask;
KiEfficiencyClassSystem;
KiEntropyTimingRoutine;
KiEpfCompletionDpc;
KiEpfCompletionQueue;
KiEpfCompletionQueueSize;
KiEpfCompletionQueueSpinLock;
KiEpfCounters;
KiEpfHashTable;
KiFeatureSettings;
KiFeatureSimulations;
KiFlushPcid;
KiForceIdleActiveLastStartTime;
KiForceIdleDisabled;
KiForceIdleGracePeriodInSec;
KiForceIdleLock;
KiForceIdlePendingDpcCount;
KiForceIdleReset;
KiForceIdleStartDpc;
KiForceIdleStartTime;
KiForceIdleState;
KiForceIdleStopDpc;
KiForceIdleUnparkRestoreMask;
KiForceIdleWatchdogResetCount;
KiForceSymbolReferencesTrigger;
KiForegroundBoostTicks;
KiForegroundState;
KiFpuLeakage;
KiFreezeExecutionLock;
KiFreezeFlag;
KiFreezeLockBackup;
KiFreezeOwner;
KiFreezeStallOwner;
KiFreezeTimeout;
KiGenerationEndTick;
KiGenerationTicks;
KiGlobalSecondaryIDT;
KiGroupBlock;
KiGroupSchedulingEnabled;
KiGroupSchedulingMinimumRate;
KiGroupSchedulingMinimumWeight;
KiGroupSchedulingNumerator;
KiGroupSchedulingOverQuotaMask;
KiGroupSchedulingTotalWeight;
KiHRTimerClockActive;
KiHRTimerClockRequest;
KiHardwareTrigger;
KiHardwareTriggerLock;
KiHrIncrement;
KiHrTimerActiveCount;
KiHwCounters;
KiHwCountersCount;
KiHwPolicyDriverImageBase;
KiHwPolicyDriverNotPresent;
KiHypervisorInitiatedCrashDump;
KiIa32MiscEnable;
KiIdealDpcRate;
KiImplementedPhysicalBits;
KiInitData;
KiInitialProcess;
KiInitialThread;
KiIntSteerAffinitizedInterrupts;
KiIntSteerEnabled;
KiIntSteerEtwHandle;
KiIntSteerLoadPercent;
KiIntSteerMask;
KiIntSteerMaskCount;
KiIntSteerPreviousPerfSnap;
KiIntTrackRootCount;
KiIntTrackRootEnabled;
KiIntTrackRootList;
KiIntTrackSpinlock;
KiInterruptControllerInfo;
KiInterruptInitTable;
KiInterruptSteeringDisabled;
KiInterruptTimeErrorAccumulator;
KiIptMsrMask;
KiIptSaveAreaLength;
KiIrqlFlags;
KiIsKvaShadowConfigDisabled;
KiKvaLeakage;
KiKvaLeakageSimulate;
KiKvaShadow;
KiKvaShadowMode;
KiLargestCacheSize;
KiLastBranchFromBaseMSR;
KiLastBranchTOSMSR;
KiLastBranchToBaseMSR;
KiLastExceptionFromBaseMSR;
KiLastExceptionToBaseMSR;
KiLastForwardedHand;
KiLastNonHrTimerExpiration;
KiLastProcessor;
KiLastRequestedTimeIncrement;
KiLastStallTick;
KiLockQuantumTarget;
KiMaxDynamicTickDuration;
KiMaxDynamicTickDurationSize;
KiMaximizeGroupsCreated;
KiMaximumDpcQueueDepth;
KiMaximumGroupSize;
KiMaximumGroups;
KiMaximumIncrementReciprocal;
KiMaximumIncrementShiftCount;
KiMaximumSharedReadyQueueSize;
KiMcheckNmiBlocking;
KiMcheckRecursive;
KiMcheckStiBlocking;
KiMicrocodeTracker;
KiMicrocodeTrackerEnabled;
KiMinDynamicTickDuration;
KiMinimumDpcRate;
KiMismatchSummary;
KiMtrrInfo;
KiMtrrMaskBase;
KiMtrrMaskMask;
KiMtrrMaxRangeShift;
KiMxCsrMask;
KiNMILock;
KiNPIEPEnabled;
KiNextTimer2DueTime;
KiNmiCallbackListHead;
KiNmiCallbackListLock;
KiNmiInProgress;
KiNodeGraph;
KiNodeInit;
KiNonNumaDistance;
KiNonParkedCpuSets;
KiNumaQueryNodeCapacity;
KiNumaQueryNodeDistance;
KiNumaQueryProcessorNode;
KiNumaQueryProximityId;
KiNumaQueryProximityNode;
KiNxForceEnable;
KiObjectRundownLocks;
KiOldIrql;
KiOpDescriptorTableStoreSkip;
KiOpGdtr;
KiOpIdtr;
KiOpInt2D;
KiOpOneByteTable;
KiOpPrefetchPatchSkip;
KiOpPrefixTable;
KiOpSegmentOffsetTable;
KiOpTwoByteTable;
KiPassiveWatchdogTimeout;
KiPendingTimerBitmaps;
KiPendingTimersMask0;
KiPendingVirtualHeteroRequest;
KiPerfIsoEnabled;
KiPeriodicCountThreshold;
KiPollSlot;
KiPollSlotNext;
KiPowerOffFrozenProcessors;
KiPreBugcheckStackSaveArea;
KiProcessInSwapListHead;
KiProcessListHead;
KiProcessListLock;
KiProcessNodeSeed;
KiProcessOutSwapListHead;
KiProcessPolicyToQosMappingTable;
KiProcessorBlock;
KiProcessorIndexToNumberMappingTable;
KiProcessorNumberToIndexMappingTable;
KiProfileAlignmentFixupInterval;
KiProfileIrql;
KiProfileListHead;
KiProfileSourceListHead;
KiQosHysteresisTimerPeriod;
KiQueuedLockTableSize;
KiRebalanceMinPriority;
KiRestrictedSystemCpuSetsActive;
KiResumeForReboot;
KiReverseStallIpiLock;
KiSanitizedProfileInterval;
KiSchedulerAssistThreadFlagEnabled;
KiSchedulerAssistThreadFlagOverride;
KiSchedulingGroupList;
KiSchedulingGroupLock;
KiSecondaryInterruptServicesEnabled;
KiSecondarySignalDpc;
KiSecondarySignalDpcRunning;
KiSecondarySignalList;
KiSecondarySignalListLock;
KiSerializeTimerExpiration;
KiServiceLimit;
KiServiceTable;
KiServicesTab;
KiSetVirtualHeteroClockIntervalRequestDpc;
KiShortExecutionCycles;
KiSpeculationFeatures;
KiSsbdBit;
KiSsbdMsr;
KiStackInSwapListHead;
KiStackOutSwapRequest;
KiStackProtectNotifyEvent;
KiStackProtectTime;
KiSupervisorStateExtensionHost;
KiSupervisorXStateFeaturesLock;
KiSuspectPoolTag;
KiSwapEvent;
KiSystemAllowedCpuSets;
KiSystemCallSelector;
KiSystemFullyCoherent;
KiSystemServiceTraceCallbackCount;
KiSystemServiceTraceCallbackLock;
KiSystemServiceTraceCallbackTable;
KiSystemServiceTraceCallbacksActive;
KiSystemTimeErrorAccumulator;
KiTLBCOverride;
KiTableInformation;
KiTargetPhase;
KiTbFlushTimeStamp;
KiTestDividend;
KiTickOffset;
KiTimelineBitmapTime;
KiTimer2CollectionLock;
KiTimer2Collections;
KiTimer2Combinations;
KiTimerRebaseThresholdOnDripsExit;
KiTimerTableSize;
KiTotalCpuSetCount;
KiTpActiveTrapsCount;
KiTpEnabledCount;
KiTpHashTable;
KiTpParityLookupTable;
KiTpRegisteredCount;
KiTpStateLock;
KiUserCodePatchMutex;
KiVelocityFlags;
KiVerifyPass;
KiVerifyXcptRoutines;
KiVirtFlags;
KiVirtualHeteroClockRequest;
KiVpThreadSystemWorkPriority;
KiWaitAlways;
KiWaitNever;
KiXSaveAreaLength;
KitEtwHandle;
KitFeatureIdUsedEvent;
KseClearPCIDBitsKernelHooks;
KseClearPCIDBitsShim;
KseClearPCIDBitsShimGuid;
KseClearPCIDBitsShimHookCollections;
KseDsEventAddDevice;
KseDsEventCreateDevice;
KseDsEventDataIrp;
KseDsEventDevicePowerCompleted;
KseDsEventDevicePowerIrp;
KseDsEventDriverLoad;
KseDsEventDriverUnload;
KseDsEventPnpIrp;
KseDsEventPoolAllocate;
KseDsEventPoolFree;
KseDsEventRequestPowerIrp;
KseDsEventStartDevice;
KseDsEventStartIo;
KseDsEventStopDevice;
KseDsEventSystemPowerIrp;
KseDsKernelHooks;
KseDsShim;
KseDsShimGuid;
KseDsShimHookCollections;
KseDsShimIrpHooks;
KseEngine;
KseEtwHandle;
KseFlagsApplied;
KseKasperskyKernelHooks;
KseKasperskyShim;
KseKasperskyShimGuid;
KseKasperskyShimHookCollections;
KseShimsApplied;
KseSkipDriverUnloadEventDriverLoad;
KseSkipDriverUnloadEventDriverUnload;
KseSkipDriverUnloadShim;
KseSkipDriverUnloadShimGuid;
KseSkipDriverUnloadShimHookCollections;
KseSkipDriverUnloadShimIrpHooks;
KseUseVtHardware;
KsepCounters;
KsepDebugFlag;
KsepHistoryErrors;
KsepHistoryErrorsIndex;
KsepHistoryMessages;
KsepHistoryMessagesIndex;
KsepMatchMachineInfo;
KsepSdbFileTime;
KsepShimDbAddress;
KsepShimDbDuringBoot;
KsepShimDbFileHandle;
KsepShimDbHandle;
KsepShimDbLock;
KsepShimDbRefCount;
KsepShimDbSectionHandle;
KsepShimDbSectionPointer;
KvfFeatureStates;
KvfVelocityKeyName;
LICENSING_SQM_INCREMENT_DWORD;
LIVEDUMP_EVENT_CAPTURE_API_END;
LIVEDUMP_EVENT_CAPTURE_API_START;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_BUFFERING_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_BUFFERING_START;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_MIRRORING_PHASE0_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_MIRRORING_PHASE1_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_MIRRORING_START;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_SYSTEM_QUIESCE_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_SYSTEM_QUIESCE_START;
LIVEDUMP_EVENT_DISCARD_DEFERRED_DATA_API_END;
LIVEDUMP_EVENT_DISCARD_DEFERRED_DATA_API_START;
LIVEDUMP_EVENT_MEMORY_PRESSURE_ABORT;
LIVEDUMP_EVENT_SIZING_WORKFLOW_BUFFER_ALLOCATION;
LIVEDUMP_EVENT_SIZING_WORKFLOW_BUFFER_ESTIMATION;
LIVEDUMP_EVENT_SIZING_WORKFLOW_MIRRORING_PHASE0_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_MIRRORING_PHASE1_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_MIRRORING_START;
LIVEDUMP_EVENT_SIZING_WORKFLOW_REMOVEPAGES_CALLBACKS_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_REMOVEPAGES_CALLBACKS_START;
LIVEDUMP_EVENT_SIZING_WORKFLOW_REMOVEPAGES_CALLBACK_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_REMOVEPAGES_CALLBACK_FAILURE;
LIVEDUMP_EVENT_SIZING_WORKFLOW_REMOVEPAGES_CALLBACK_START;
LIVEDUMP_EVENT_SIZING_WORKFLOW_SYSTEM_QUIESCE_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_SYSTEM_QUIESCE_START;
LIVEDUMP_EVENT_WRITE_DEFERRED_DATA_API_END;
LIVEDUMP_EVENT_WRITE_DEFERRED_DATA_API_START;
LIVEDUMP_EVENT_WRITE_DEFERRED_DUMPDATA_TO_FILE_END;
LIVEDUMP_EVENT_WRITE_DEFERRED_DUMPDATA_TO_FILE_START;
LIVEDUMP_EVENT_WRITE_DUMPDATA_TO_FILE_END;
LIVEDUMP_EVENT_WRITE_DUMPDATA_TO_FILE_START;
LZNT1Formats;
LanmanRedirectorName;
LeapYearDayToMonth;
LeapYearDaysPrecedingMonth;
Legacy16550HardwareDriver;
LegacyEventLogGuid;
LegalAttributeChar;
LegalAttributeCharEnd;
LicensingSqmProvider;
LicensingStartServiceTrigger;
LiveDumpProvGuid;
LoadMUIDllGuid;
LowboxSessionMapLock;
LpacAccessFailureLog;
LpcLegacyMaxMessageLength;
LpcPortObjectType;
LpcWaitablePortObjectType;
MEMORY_ERROR_SECTION_GUID;
MITIGATION_AUDIT_PROHIBIT_CHILD_PROCESS_CREATION;
MITIGATION_AUDIT_PROHIBIT_DYNAMIC_CODE;
MITIGATION_AUDIT_PROHIBIT_LOWIL_IMAGE_MAP;
MITIGATION_AUDIT_PROHIBIT_NON_MICROSOFT_BINARIES;
MITIGATION_AUDIT_PROHIBIT_REMOTE_IMAGE_MAP;
MITIGATION_AUDIT_PROHIBIT_WIN32K_SYSTEM_CALLS;
MITIGATION_ENFORCE_PROHIBIT_CHILD_PROCESS_CREATION;
MITIGATION_ENFORCE_PROHIBIT_DYNAMIC_CODE;
MITIGATION_ENFORCE_PROHIBIT_LOWIL_IMAGE_MAP;
MITIGATION_ENFORCE_PROHIBIT_NON_MICROSOFT_BINARIES;
MITIGATION_ENFORCE_PROHIBIT_REMOTE_IMAGE_MAP;
MITIGATION_ENFORCE_PROHIBIT_WIN32K_SYSTEM_CALLS;
MM16550HardwareDriver;
MS_KernelPnP_Provider;
MS_KernelPnP_Provider_Context;
MS_KernelPnP_Rundown_Provider;
MS_Kernel_BootDiagnostics_Provider;
MS_Kernel_BootDiagnostics_SystemProxy_Provider;
MS_Kernel_BootDiagnostics_UserProxy_Provider;
MS_Kernel_Prefetch_Provider;
MS_Kernel_SecondaryLogonDiagnostics_Proxy_Provider;
MS_Kernel_ShutdownDiagnostics_Proxy_Provider;
MS_StorageTiering_Provider;
MS_StorageTiering_Provider_Context;
MS_Windows_AIT_Provider;
MS_Windows_Kernel_AppCompat_Provider;
MS_Windows_LicensingStartServiceTrigger_Provider;
MS_Windows_Security_Adminless_Provider;
MS_Windows_Security_LPAC_Provider;
MUIRefreshCachedUILock;
MUIRegistryInfo;
MUIRegistryInfoSize;
MUIRegistryLock;
M_strAceEmailPrefix;
M_strAceIdnPrefix;
Magic10000;
Magic10000000;
Magic86400000;
MainPalette;
MemoryProvGuid;
Mi10Milliseconds;
Mi30Milliseconds;
MiChannelLastRangeIndex;
MiChannelMaximumPowerOf2;
MiChannelMaximumPowerOf2Mask;
MiCombineMinimumPages;
MiFlags;
MiFreeThenFree;
MiGlobalHotPatchList;
MiHalScratchPte;
MiHalfSecond;
MiHotPatchGeneration;
MiHotPatchListLock;
MiImageProtectionArray;
MiKernelObjectsDirectoryName;
MiLargePageContainingFrames;
MiLargePageSizes;
MiLargeZero;
MiLowHalVa;
MiMemoryEventNames;
MiNoPagesTimeout;
MiOneSecond;
MiReadWrite;
MiRetpolUnwindInfoCopyStatus;
MiSectionMapping;
MiSessionMapping;
MiShortTime;
MiSlabProtectionToPageProtection;
MiState;
MiSystemPartition;
MiTriageDumpData;
MiTrimPassToAge;
MiUltraMapSizes;
MiUserHotPatchReserveSize;
MiUserSidPatchLists;
MiVisiblePartition;
MiVisibleState;
MiZeroThenZero;
Microsoft_Windows_Kernel_PnPEnableBits;
Microsoft_Windows_Kernel_PnPKeywords;
Microsoft_Windows_Kernel_PnPLevels;
Microsoft_Windows_Storage_Tiering_IoHeatEnableBits;
Microsoft_Windows_Storage_Tiering_IoHeatKeywords;
Microsoft_Windows_Storage_Tiering_IoHeatLevels;
Mm64BitPhysicalAddress;
MmBadPointer;
MmCompatibleProtectionMask;
MmHighestUserAddress;
MmLargePageDriverBuffer;
MmLargePageDriverBufferLength;
MmLastUnloadedDriver;
MmMakeFileAccess;
MmMakeProtectNotWriteCopy;
MmMakeSectionAccess;
MmNumberOfChannels;
MmPageValidationAction;
MmPageValidationFrequency;
MmPfnDatabase;
MmPhysicalMemoryBlock;
MmProtectFreedNonPagedPool;
MmProtectToPteMask;
MmProtectToValue;
MmPteBase;
MmRegistryState;
MmSectionObjectType;
MmSessionObjectType;
MmSizeOfPagedPoolInBytes;
MmSpecialPoolCatchOverruns;
MmSpecialPoolTag;
MmSystemRangeStart;
MmTrackLockedPages;
MmUnloadedDrivers;
MmUserProbeAddress;
MmUserProtectionToMask1;
MmUserProtectionToMask2;
MmVerifierData;
MmVerifierTrimFrequency;
MmVerifyDriverBuffer;
MmVerifyDriverBufferLength;
MmVerifyDriverLevel;
MuiLockInitCount;
MuiMutex;
MxBootDescriptorAnyNode;
MxBootFreeDescriptor;
MxFreeDescriptor;
MxHalDataTableEntry;
MxLastMemoryDescriptorChecked;
MxPfnAllocation;
NT_DISK::`vftable';
NetProvGuid;
Nls844UnicodeLowercaseTable;
Nls844UnicodeUpcaseTable;
NlsActiveCodePageIsUTF8;
NlsAnsiCodePage;
NlsAnsiToUnicodeData;
NlsDefaultCasingTableSize;
NlsDirectoryAttributes;
NlsDirectoryName;
NlsLeadByteInfo;
NlsLeadByteInfoTable;
NlsLocaleFilePathName;
NlsLocaleSectionPointer;
NlsMbAnsiCodePageTables;
NlsMbCodePageTag;
NlsMbOemCodePageTables;
NlsMbOemCodePageTag;
NlsOemCodePage;
NlsOemCodePageIsUTF8;
NlsOemLeadByteInfo;
NlsOemLeadByteInfoTable;
NlsOemToUnicodeData;
NlsRegKeyName;
NlsSectionLock;
NlsTableVersion;
NlsTableVersionKeyName;
NlsUnicodeToAnsiData;
NlsUnicodeToMbAnsiData;
NlsUnicodeToMbOemData;
NlsUnicodeToOemData;
NoCallerIdString;
NonPagedPoolDescriptor;
NonPagedPoolLock;
NormalYearDayToMonth;
NormalYearDaysPrecedingMonth;
NormalizationListHead;
NormalizationListLock;
NotEncodedAttributeChar;
NtBuildGUID;
NtBuildLab;
NtBuildLabEx;
NtBuildNumber;
NtBuildQfe;
NtGlobalFlag;
NtGlobalFlag2;
NtImageInfo;
NtInitialUserProcess;
NtMajorVersion;
NtMajorVersionWin81;
NtMinorVersion;
NtMinorVersionWin81;
NtVhdBootFile;
NtdllExportInformation;
NtdllExports;
NtdllWowArm32Exports;
NtdllWowX86Exports;
NtfsStructLock;
NullGuid;
ObHeaderCookie;
ObTypeIndexTable;
ObpAuditBaseDirectories;
ObpAuditBaseObjects;
ObpCaseInsensitive;
ObpCreateInfoLookasideList;
ObpDefaultObject;
ObpDefaultSecurityDescriptorLength;
ObpDirectoryMapping;
ObpDirectoryObjectType;
ObpDosDevicesNameString;
ObpDosDevicesShortName;
ObpDosDevicesShortNamePrefix;
ObpDosDevicesShortNameRoot;
ObpDosDevicesShortNameRootString;
ObpGlobalDirectoryName;
ObpGlobalDosDevicesShortName;
ObpGlobalNameString;
ObpGlobalRootNameString;
ObpInfoMaskToOffset;
ObpInvalidOpenByPointer;
ObpKernelHandleTable;
ObpKernelObjectsNameString;
ObpKernelObjectsPathString;
ObpLUIDDeviceMapsEnabled;
ObpMaxStacks;
ObpNameBufferLookasideList;
ObpNumTracedObjects;
ObpObjectBuckets;
ObpObjectSecurityInheritance;
ObpObjectSecurityMode;
ObpObjectTable;
ObpObjectTypes;
ObpObjectTypesNameString;
ObpObjectTypesPathString;
ObpPendingObjectDirectoryList;
ObpPendingObjectDirectoryListLock;
ObpProtectionMode;
ObpPushStackInfoList;
ObpPushStackInfoWorkItem;
ObpRegTraceFlags;
ObpRegTracePoolTags;
ObpRegTraceProcessName;
ObpRemoveObjectDpc;
ObpRemoveObjectList;
ObpRemoveObjectWait;
ObpRemoveObjectWorkItem;
ObpRootDirectoryName;
ObpRootDirectoryObject;
ObpRuntimeTraceFlags;
ObpRuntimeTracePoolTags;
ObpRuntimeTraceProcessName;
ObpSilosDirectoryName;
ObpStackBuckets;
ObpStackSequence;
ObpStackTable;
ObpStackTraceLock;
ObpStacksPerBucket;
ObpSymbolicLinkMapping;
ObpSymbolicLinkObjectType;
ObpTraceDepth;
ObpTraceFlags;
ObpTracePermanent;
ObpTracePoolTags;
ObpTracePoolTagsBuffer;
ObpTracePoolTagsLength;
ObpTraceProcessName;
ObpTraceProcessNameBuffer;
ObpTraceProcessNameLength;
ObpTypeDirectoryObject;
ObpTypeMapping;
ObpTypeObjectType;
ObpUnsecureGlobalNamesBuffer;
ObpUnsecureGlobalNamesLength;
ObpWaitBlockLookaside;
ObpWorkItemFreeList;
ObsSecurityDescriptorCache;
OemDefaultChar;
OemTransUniDefaultChar;
OfflineDumpEnabled;
Operators;
OsStateChangeEnergyCounter;
PARTITION_SYSTEM_GUID;
PNP_EVT_DP_REPLACE_FAILURE;
PNP_EVT_DP_REPLACE_START;
PNP_EVT_DP_REPLACE_SUCCESS;
POGOBuffer;
POP_ETW_ADPM_ACTIVE_INPUT;
POP_ETW_ADPM_DISPLAY_TIMEOUT;
POP_ETW_ADPM_GLOBAL_INPUT_STATE;
POP_ETW_ADPM_INPUT_TIMEOUT;
POP_ETW_ADPM_PASSIVE_INPUT;
POP_ETW_ADPM_POLICY_CHANGE;
POP_ETW_ADPM_SESSION_CLOSED;
POP_ETW_ADPM_SESSION_CONNECTED;
POP_ETW_ADPM_SESSION_CREATED;
POP_ETW_ADPM_SESSION_DISCONNECTED;
POP_ETW_ADPM_SESSION_DISPLAY_STATE;
POP_ETW_ADPM_SESSION_INPUT_STATE;
POP_ETW_ADPM_SESSION_LOCKED;
POP_ETW_ADPM_SESSION_UNLOCKED;
POP_ETW_DEEP_SLEEP_CLEAR_CONSTRAINT;
POP_ETW_DEEP_SLEEP_CONSTRAINT_RUNDOWN;
POP_ETW_DEEP_SLEEP_IR_TIMER_DATA;
POP_ETW_DEEP_SLEEP_SET_CONSTRAINT;
POP_ETW_EVENT_ABNORMAL_RESET;
POP_ETW_EVENT_ACDC_STATE_CHANGE;
POP_ETW_EVENT_ACDC_STATE_RUNDOWN;
POP_ETW_EVENT_ACTIVE_COOLING_DIAGNOSTIC;
POP_ETW_EVENT_ACTIVE_COOLING_OPERATIONAL;
POP_ETW_EVENT_AWAYMODE;
POP_ETW_EVENT_BACKGROUND_ACTIVITY_POLICY_UPDATE;
POP_ETW_EVENT_BASIC_BRIGHTNESS_ENGINE_OFF;
POP_ETW_EVENT_BATTERY_COUNT_CHANGE;
POP_ETW_EVENT_BATTERY_TRIGGER_MET;
POP_ETW_EVENT_BUILDNOTIFYLIST;
POP_ETW_EVENT_BUILDNOTIFYLIST_END;
POP_ETW_EVENT_CHANGE_POWER_REQUEST;
POP_ETW_EVENT_CLOSE_POWER_REQUEST;
POP_ETW_EVENT_CMSHUTDOWNSYSTEM_START;
POP_ETW_EVENT_CMSHUTDOWNSYSTEM_STOP;
POP_ETW_EVENT_COMPONENT_ACCOUNTING;
POP_ETW_EVENT_COMPONENT_CONDITION;
POP_ETW_EVENT_COMPONENT_IDLE_CONSTRAINTS;
POP_ETW_EVENT_COMPONENT_IDLE_STATE;
POP_ETW_EVENT_COMPONENT_LATENCY;
POP_ETW_EVENT_COMPONENT_PERFORMANCE_STATE_COMPLETED;
POP_ETW_EVENT_COMPONENT_PERFORMANCE_STATE_INITIATING;
POP_ETW_EVENT_COMPONENT_PERFORMANCE_STATE_NOMINAL_CHANGE;
POP_ETW_EVENT_COMPONENT_PERFORMANCE_STATE_PROCESSING;
POP_ETW_EVENT_COMPONENT_REGISTRATION;
POP_ETW_EVENT_COMPONENT_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_COMPONENT_RESIDENCY;
POP_ETW_EVENT_COMPONENT_WAKE;
POP_ETW_EVENT_CONSOLE_DISPLAY_STATE;
POP_ETW_EVENT_COOLING_EXTENSION_ACTIVE_UPDATE;
POP_ETW_EVENT_COOLING_EXTENSION_ADD;
POP_ETW_EVENT_COOLING_EXTENSION_PASSIVE_UPDATE;
POP_ETW_EVENT_COOLING_EXTENSION_REMOVE;
POP_ETW_EVENT_COOLING_EXTENSION_RUNDOWN;
POP_ETW_EVENT_COOLING_MODE;
POP_ETW_EVENT_CREATE_POWER_REQUEST;
POP_ETW_EVENT_CRITICAL_TRIP_POINT_DIAGNOSTIC;
POP_ETW_EVENT_CRITICAL_TRIP_POINT_SYSTEM;
POP_ETW_EVENT_CS_COMPLIANCE_RUNDOWN;
POP_ETW_EVENT_CS_COMPLIANCE_UPDATE;
POP_ETW_EVENT_CS_CONSUMPTION_PERFTRACK;
POP_ETW_EVENT_CS_DEEP_SLEEP_WATCHDOG;
POP_ETW_EVENT_CS_DRIPS_DIVERGENCE;
POP_ETW_EVENT_CS_DRIPS_WATCHDOG;
POP_ETW_EVENT_CS_DRIPS_WATCHDOG_PERFTRACK;
POP_ETW_EVENT_CS_ENTER_REASON;
POP_ETW_EVENT_CS_EXIT_REASON;
POP_ETW_EVENT_CS_FAN_PERFTRACK;
POP_ETW_EVENT_DEBUGGER_TRANSITION_REQUIREMENTS;
POP_ETW_EVENT_DEFAULT_PEP_WORKER_DEVICE_ORPHANED;
POP_ETW_EVENT_DEFAULT_PEP_WORKER_DEVICE_RECOVERED;
POP_ETW_EVENT_DEFAULT_PEP_WORKER_END;
POP_ETW_EVENT_DEFAULT_PEP_WORKER_START;
POP_ETW_EVENT_DEVICESSUSPEND;
POP_ETW_EVENT_DEVICESSUSPENDLEVEL;
POP_ETW_EVENT_DEVICESSUSPENDLEVEL_END;
POP_ETW_EVENT_DEVICESSUSPEND_END;
POP_ETW_EVENT_DEVICESWAKE;
POP_ETW_EVENT_DEVICESWAKELEVEL;
POP_ETW_EVENT_DEVICESWAKELEVEL_END;
POP_ETW_EVENT_DEVICESWAKE_END;
POP_ETW_EVENT_DEVICE_ACCOUNTING;
POP_ETW_EVENT_DEVICE_IDLE_CHECK;
POP_ETW_EVENT_DEVICE_IDLE_CONSTRAINTS;
POP_ETW_EVENT_DEVICE_IDLE_END;
POP_ETW_EVENT_DEVICE_IDLE_START;
POP_ETW_EVENT_DEVICE_POWERED;
POP_ETW_EVENT_DEVICE_POWER_REQUIREMENT_FROM_PEP;
POP_ETW_EVENT_DEVICE_POWER_REQUIREMENT_TO_DEVICE;
POP_ETW_EVENT_DEVICE_POWER_STATE;
POP_ETW_EVENT_DEVICE_PREPARATION;
POP_ETW_EVENT_DEVICE_REGISTRATION;
POP_ETW_EVENT_DEVICE_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_DEVICE_RUNDOWN;
POP_ETW_EVENT_DEVICE_START_POWER_MANAGEMENT;
POP_ETW_EVENT_DEVICE_UNREGISTRATION;
POP_ETW_EVENT_DEVICE_VERBOSE_RUNDOWN;
POP_ETW_EVENT_DIRECTED_DRIPS_DEVICE_VISIT;
POP_ETW_EVENT_DIRECTED_DRIPS_DISENGAGE_MASK_CHANGED;
POP_ETW_EVENT_DIRECTED_DRIPS_ENGAGED;
POP_ETW_EVENT_DIRECTED_DRIPS_INITIALIZATION;
POP_ETW_EVENT_DIRECTED_DRIPS_MARK_DEVICE;
POP_ETW_EVENT_DIRECTED_DRIPS_NOTIFY_APPS_SERVICES;
POP_ETW_EVENT_DIRECTED_DRIPS_NOTIFY_DEVICES;
POP_ETW_EVENT_DIRECTED_DRIPS_PROBLEM_DEVICE;
POP_ETW_EVENT_DIRECTED_DRIPS_WORKER;
POP_ETW_EVENT_DIRECTED_POWER_TRANSITION_END;
POP_ETW_EVENT_DIRECTED_POWER_TRANSITION_START;
POP_ETW_EVENT_DIRTY_TRANSITION;
POP_ETW_EVENT_DISK_IDLE_CHECK;
POP_ETW_EVENT_DRIPS_WAKE_ACCOUNTING_SUMMARY;
POP_ETW_EVENT_DRIVERVETO;
POP_ETW_EVENT_DYNAMIC_TICK_DISABLED;
POP_ETW_EVENT_DYNAMIC_TICK_STATUS_RUNDOWN;
POP_ETW_EVENT_ENERGY_SAVER_STATE;
POP_ETW_EVENT_FLUSHALLPAGES;
POP_ETW_EVENT_FLUSHALLPAGES_END;
POP_ETW_EVENT_FLUSHSLEEPSTUDYLOGGER_START;
POP_ETW_EVENT_FLUSHSLEEPSTUDYLOGGER_STOP;
POP_ETW_EVENT_FLUSHVOLUMES_START;
POP_ETW_EVENT_FLUSHVOLUMES_STOP;
POP_ETW_EVENT_GRACEFULSHUTDOWN_START;
POP_ETW_EVENT_GRACEFULSHUTDOWN_STOP;
POP_ETW_EVENT_HIBERNATE_STATUS;
POP_ETW_EVENT_HIBER_STATS;
POP_ETW_EVENT_IDLE_CHECK;
POP_ETW_EVENT_ILLEGAL_PROCESSOR_THROTTLE_DIAGNOSTIC;
POP_ETW_EVENT_ILLEGAL_PROCESSOR_THROTTLE_OPERATIONAL;
POP_ETW_EVENT_IOSHUTDOWNSYSTEM_START;
POP_ETW_EVENT_IOSHUTDOWNSYSTEM_STOP;
POP_ETW_EVENT_IOSHUTDOWN_FILE_SYSTEMS_START;
POP_ETW_EVENT_IOSHUTDOWN_FILE_SYSTEMS_STOP;
POP_ETW_EVENT_IRPFINISH;
POP_ETW_EVENT_IRPPENDED;
POP_ETW_EVENT_IRPSTART;
POP_ETW_EVENT_IRP_DRIVERACQUIRE;
POP_ETW_EVENT_IRP_DRIVERRELEASE;
POP_ETW_EVENT_KERNEL_QUERY_ALLOWED;
POP_ETW_EVENT_KERNEL_STRS;
POP_ETW_EVENT_MTRR_CHANGED;
POP_ETW_EVENT_NET_REFRESH_TIMER_ARMED;
POP_ETW_EVENT_NET_REFRESH_TIMER_DISARMED;
POP_ETW_EVENT_NTINITIATEPOWERACTION_API_CALL;
POP_ETW_EVENT_PASSIVE_COOLING_DIAGNOSTIC;
POP_ETW_EVENT_PASSIVE_COOLING_OPERATIONAL;
POP_ETW_EVENT_PERFORMANCE_STATE_REGISTRATION;
POP_ETW_EVENT_PERFORMANCE_STATE_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_PERFORMANCE_STATE_SET_REGISTRATION;
POP_ETW_EVENT_PERFORMANCE_STATE_SET_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_PERFTRACK_HIBERNATE;
POP_ETW_EVENT_PERFTRACK_HYBRID_RESUME;
POP_ETW_EVENT_PERFTRACK_HYBRID_SHUTDOWN;
POP_ETW_EVENT_PERFTRACK_RESUME_FROM_HIBERNATE;
POP_ETW_EVENT_PERFTRACK_STANDBY;
POP_ETW_EVENT_PLATFORMROLE_RUNDOWN;
POP_ETW_EVENT_PLUGIN_REGISTRATION;
POP_ETW_EVENT_PLUGIN_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_POSTSLEEP_NOTIFICATION;
POP_ETW_EVENT_POWERTRANSITION_END;
POP_ETW_EVENT_POWERTRANSITION_START;
POP_ETW_EVENT_POWER_AGGREGATOR_COMPLETION_EVENT;
POP_ETW_EVENT_POWER_AGGREGATOR_INVALID_REQUEST_INDEX;
POP_ETW_EVENT_POWER_AGGREGATOR_QUEUE_OVERFLOW;
POP_ETW_EVENT_POWER_AGGREGATOR_REQUEST;
POP_ETW_EVENT_POWER_AGGREGATOR_SESSION_BEGIN;
POP_ETW_EVENT_POWER_AGGREGATOR_SESSION_END;
POP_ETW_EVENT_POWER_AGGREGATOR_VALIDATION_EVENT;
POP_ETW_EVENT_POWER_REQUEST_RUNDOWN;
POP_ETW_EVENT_POWER_SETTING_CALLBACK_START;
POP_ETW_EVENT_POWER_SETTING_CALLBACK_STOP;
POP_ETW_EVENT_POWER_SETTING_CHANGE;
POP_ETW_EVENT_POWER_SETTING_RUNDOWN;
POP_ETW_EVENT_POWER_STATE;
POP_ETW_EVENT_POWER_STATE_RUNDOWN;
POP_ETW_EVENT_PRESLEEP_CALLBACKS_START;
POP_ETW_EVENT_PRESLEEP_CALLBACKS_STOP;
POP_ETW_EVENT_PRESLEEP_NOTIFICATION3;
POP_ETW_EVENT_REGISTERSYSTEMSTATE;
POP_ETW_EVENT_RESUMEAPPS;
POP_ETW_EVENT_RESUMEAPPS_END;
POP_ETW_EVENT_RESUMESERVICES;
POP_ETW_EVENT_RESUMESERVICES_END;
POP_ETW_EVENT_RTC_WAKE_INFO;
POP_ETW_EVENT_S3FWSTATS_RESUME;
POP_ETW_EVENT_S3FWSTATS_SUSPEND;
POP_ETW_EVENT_S4_TRIP_POINT_DIAGNOSTIC;
POP_ETW_EVENT_S4_TRIP_POINT_SYSTEM;
POP_ETW_EVENT_SESSION_DISPLAY_OFF;
POP_ETW_EVENT_SESSION_DISPLAY_ON;
POP_ETW_EVENT_SETSYSTEMSTATE;
POP_ETW_EVENT_SHUTDOWN_ACTION;
POP_ETW_EVENT_SIDLE_UPDATE_NOTIFICATION_WORKER;
POP_ETW_EVENT_SKIP_TICK;
POP_ETW_EVENT_SLEEP_DISABLE_REASON_RUNDOWN;
POP_ETW_EVENT_SPM_SCENARIO_START;
POP_ETW_EVENT_SPM_SCENARIO_STOP;
POP_ETW_EVENT_STANDBY_CONNECTIVITY_RUNDOWN;
POP_ETW_EVENT_STANDBY_CONNECTIVITY_UPDATE;
POP_ETW_EVENT_STES;
POP_ETW_EVENT_STRS;
POP_ETW_EVENT_SUPERFETCH_START;
POP_ETW_EVENT_SUPERFETCH_STOP;
POP_ETW_EVENT_SUSPENDAPP;
POP_ETW_EVENT_SUSPENDAPPS;
POP_ETW_EVENT_SUSPENDAPPS_END;
POP_ETW_EVENT_SUSPENDAPP_END;
POP_ETW_EVENT_SUSPENDSERVICE;
POP_ETW_EVENT_SUSPENDSERVICES;
POP_ETW_EVENT_SUSPENDSERVICES_END;
POP_ETW_EVENT_SUSPENDSERVICE_END;
POP_ETW_EVENT_SYSTEM_IDLE_S0_LOW_POWER_DOZE;
POP_ETW_EVENT_SYSTEM_IDLE_S0_LOW_POWER_DOZE_TIMER_ARMED;
POP_ETW_EVENT_SYSTEM_IDLE_S0_LOW_POWER_DOZE_TIMER_CANCELLED;
POP_ETW_EVENT_SYSTEM_IDLE_TIMEOUT_INITIALIZED;
POP_ETW_EVENT_SYSTEM_IDLE_TIME_RESET;
POP_ETW_EVENT_SYSTEM_IDLE_UPDATE;
POP_ETW_EVENT_SYSTEM_LATENCY_RUNDOWN;
POP_ETW_EVENT_SYSTEM_LATENCY_UPDATE;
POP_ETW_EVENT_THERMAL_DURATION_PERFTRACK;
POP_ETW_EVENT_THERMAL_EVENT;
POP_ETW_EVENT_THERMAL_PERFTRACK;
POP_ETW_EVENT_THERMAL_REQUEST_ACTIVE_UPDATE;
POP_ETW_EVENT_THERMAL_REQUEST_ADD;
POP_ETW_EVENT_THERMAL_REQUEST_PASSIVE_UPDATE;
POP_ETW_EVENT_THERMAL_REQUEST_REMOVE;
POP_ETW_EVENT_THERMAL_REQUEST_RUNDOWN;
POP_ETW_EVENT_THERMAL_STANDBY_NOTIFICATION;
POP_ETW_EVENT_THERMAL_ZONE_ENUMERATED;
POP_ETW_EVENT_THERMAL_ZONE_OVERTHROTTLED_UPDATE;
POP_ETW_EVENT_THERMAL_ZONE_RUNDOWN;
POP_ETW_EVENT_THERMAL_ZONE_THERMAL_STANDBY_UPDATE;
POP_ETW_EVENT_TIME_RESOLUTION_REQUEST_RUNDOWN;
POP_ETW_EVENT_TIME_RESOLUTION_RUNDOWN;
POP_ETW_EVENT_TIME_RESOLUTION_STACK_RUNDOWN;
POP_ETW_EVENT_TIME_RESOLUTION_UPDATE;
POP_ETW_EVENT_TRANSITIONTIMES;
POP_ETW_EVENT_WAITFORPROCESSES_START;
POP_ETW_EVENT_WAITFORPROCESSES_STOP;
POP_ETW_EVENT_ZEROHIBERFILE_START;
POP_ETW_EVENT_ZEROHIBERFILE_STOP;
POP_ETW_EVENT_ZEROPAGEFILE_START;
POP_ETW_EVENT_ZEROPAGEFILE_STOP;
POP_ETW_FORCEIDLE_RESET;
POP_ETW_FORCEIDLE_STATE_CHANGE;
POP_ETW_IDLE_RESILIENCY_END;
POP_ETW_IDLE_RESILIENCY_START;
POP_ETW_IO_COALESCING_DSK_IDLE;
POP_ETW_IO_COALESCING_FLUSH;
POP_ETW_IO_COALESCING_OFF;
POP_ETW_IO_COALESCING_ON;
POP_ETW_PROVIDER;
POP_TRIGGER_ETW_AOAC_CAPABILITY;
POP_TRIGGER_ETW_PROVIDER;
PORTABLE_WORKSPACE_LAUNCHER_EFI_ENTRY_ID;
PPM_ETW_ACCOUNTING_BUCKET_INTERVALS_RUNDOWN;
PPM_ETW_AUTONOMOUS_MODE_CHANGE;
PPM_ETW_BIOS_CAP_CHANGE;
PPM_ETW_COMPUTE_ENERGY;
PPM_ETW_COORDINATED_IDLE_RUNDOWN;
PPM_ETW_CURRENT_IDLE_RUNDOWN;
PPM_ETW_CURRENT_PERF_RUNDOWN;
PPM_ETW_DELIVERED_PERF_CHANGE;
PPM_ETW_DOMAIN_PERF_STATE_CHANGE;
PPM_ETW_DRIPS_ACCOUNTING_SNAPSHOT;
PPM_ETW_EXPECTED_UTILITY;
PPM_ETW_HETEROGENEOUS_POLICIES_CHANGED;
PPM_ETW_HETEROGENEOUS_POLICIES_RUNDOWN;
PPM_ETW_HETERO_DISTRIBUTE_UTILITY;
PPM_ETW_HETERO_RESPONSE;
PPM_ETW_HGS_UPDATE;
PPM_ETW_IDLE_ACCOUNTING_RUNDOWN;
PPM_ETW_IDLE_DURATION_EXPIRATION;
PPM_ETW_INTERRUPT_STEERING_MASK_CHANGE;
PPM_ETW_INTERRUPT_STEERING_MASK_RUNDOWN;
PPM_ETW_INTERRUPT_STEERING_PROC_CHANGE;
PPM_ETW_INTERRUPT_STEERING_PROC_RUNDOWN;
PPM_ETW_INTERRUPT_STEERING_STATE_CONNECT;
PPM_ETW_INTERRUPT_STEERING_STATE_DISCONNECT;
PPM_ETW_INTERRUPT_STEERING_STATE_RETARGET;
PPM_ETW_INTERRUPT_STEERING_STATE_RUNDOWN;
PPM_ETW_LATENCY_SENSITIVITY_HINT;
PPM_ETW_LPI_CORE_PARK;
PPM_ETW_LPI_RUNDOWN;
PPM_ETW_MEDIA_BUFFERING_NOTIFY;
PPM_ETW_PARKING_SELECTION;
PPM_ETW_PARK_CORE;
PPM_ETW_PARK_NODE_CAP_CHANGE;
PPM_ETW_PARK_NODE_CLASS_STATS;
PPM_ETW_PARK_NODE_PARK_HINT_CHANGE;
PPM_ETW_PARK_NODE_RUNDOWN;
PPM_ETW_PARK_NODE_STATS;
PPM_ETW_PERF_CHECK_FAILED_START;
PPM_ETW_PERF_CHECK_MAKEUP;
PPM_ETW_PERF_CHECK_START;
PPM_ETW_PERF_CHECK_STOP;
PPM_ETW_PERF_SELECT_PROCESSOR_STATE;
PPM_ETW_PLATFORM_IDLE_ACCOUNTING_RUNDOWN;
PPM_ETW_PLATFORM_IDLE_VETO_DECREMENT;
PPM_ETW_PLATFORM_IDLE_VETO_INCREMENT;
PPM_ETW_PLATFORM_IDLE_VETO_RUNDOWN;
PPM_ETW_PLATFORM_PARKING_PREFERENCE;
PPM_ETW_PLATFORM_PRE_VETO_ACCOUNTING_RUNDOWN;
PPM_ETW_PROCESSOR_CLASS_UPDATE;
PPM_ETW_PROCESSOR_IDLE_VETO_DECREMENT;
PPM_ETW_PROCESSOR_IDLE_VETO_INCREMENT;
PPM_ETW_PROCESSOR_IDLE_VETO_RUNDOWN;
PPM_ETW_PROCESSOR_PERF_STATE_CHANGE;
PPM_ETW_PROCESSOR_PRE_VETO_ACCOUNTING_RUNDOWN;
PPM_ETW_PROCESSOR_PROFILE_CHANGE;
PPM_ETW_PROCESSOR_PROFILE_DISABLED;
PPM_ETW_PROCESSOR_PROFILE_ENABLED;
PPM_ETW_PROCESSOR_PROFILE_REGISTERED;
PPM_ETW_PROCESSOR_PROFILE_RUNDOWN;
PPM_ETW_PROCESSOR_PROFILE_SETTING_CHANGE;
PPM_ETW_PROCESSOR_PROFILE_SETTING_RUNDOWN;
PPM_ETW_PROCESSOR_PROFILE_STATUS_RUNDOWN;
PPM_ETW_PROVIDER;
PPM_ETW_QOS_SUPPORT_CHANGED;
PPM_ETW_QOS_SUPPORT_RUNDOWN;
PPM_ETW_RECORDED_UTILITY;
PPM_ETW_STATIC_POLICY_RUNDOWN;
PPM_ETW_THERMAL_CAP_CHANGE;
PPM_ETW_UNPARK_CORE;
PPM_ETW_VETO_NAME_RUNDOWN;
PPM_IDLESTATES_DATA_GUID;
PPM_IDLESTATE_CHANGE_GUID;
PPM_IDLE_ACCOUNTING_EX_GUID;
PPM_PERFMON_PERFSTATE_GUID;
PPM_PERFSTATES_DATA_GUID;
PPM_PERFSTATE_CHANGE_GUID;
PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
PPM_THERMALCONSTRAINT_GUID;
PPM_THERMAL_POLICY_CHANGE_GUID;
PROCESSOR_NUMBER_PKEY;
Palette;
PaletteBmp;
PaletteNum;
PalettePtr;
PassiveInterruptForceCriticalWorker;
PassiveInterruptList;
PassiveInterruptListLock;
PassiveInterruptRealtimeWorkQueue;
PassiveInterruptRealtimeWorkerCount;
PassiveInterruptRealtimeWorkerPriority;
PathPrefixWin32;
PcwpEventTracingCounterSet;
PcwpEventTracingSessionCounterSet;
PcwpFileSystemDiskIOCounterSet;
PcwpProcessorCounterSet;
PcwpSynchCounterSet;
PcwpSynchNumaCounterSet;
PcwpThermalCounterSet;
PerfDiagGlobals;
PerfGlobalGroupMask;
PersistBadS3PageWorkItem;
PfGlobals;
PfKernelGlobals;
PfSnActivityScenarioTypePrefix;
PfSnAppLaunchScenarioTypePrefix;
PfSnEvt_AsyncWorker_Start;
PfSnEvt_AsyncWorker_Stop;
PfSnEvt_EndTrace_Info;
PfSnEvt_GetReadLists_Start;
PfSnEvt_GetReadLists_Stop;
PfSnEvt_OpenVolumes_Start;
PfSnEvt_OpenVolumes_Stop;
PfSnEvt_PrefetchMetadata_Start;
PfSnEvt_PrefetchMetadata_Stop;
PfSnEvt_PrefetchSections_Start;
PfSnEvt_PrefetchSections_Stop;
PfSnEvt_ScenarioDecision_Info;
PfSnEvt_SyncPrefetchingDone_Info;
PfSnGlobals;
PfSnNumActiveTraces;
PfTGlobals;
PiAuLocalSystemSecurityMapping;
PiAuLocalSystemSecurityObject;
PiAuSecurityObject;
PiAuSecurityObjectMapping;
PiAuSwDeviceCreateSidSubAuthorities;
PiDDBCacheList;
PiDDBCacheTable;
PiDDBLock;
PiDDBPath;
PiDcUpdateProperties;
PiDependencyEdgeWriteLock;
PiDependencyNodeEmptyList;
PiDependencyNodeListHead;
PiDependencyRelationsLock;
PiDevCfgEmptyString;
PiDevCfgFlags;
PiDevCfgMode;
PiDevCfgNullDriver;
PiDevCfgNullGuid;
PiDevCfgNullSid;
PiDevCfgOptions;
PiDevCfgSystem32;
PiDevCfgSystemRoot;
PiDmAggregatedBooleanDefs;
PiDmCachedDeviceContainerKeys;
PiDmCachedDeviceInterfaceKeys;
PiDmCachedDeviceKeys;
PiDmDeviceContainerManager;
PiDmDeviceInstallerClassManager;
PiDmDeviceInterfaceClassManager;
PiDmDeviceInterfaceManager;
PiDmDeviceManager;
PiDmDevicePanelManager;
PiDmListDefs;
PiDqDeviceContainerManager;
PiDqDeviceInstallerClassManager;
PiDqDeviceInterfaceClassManager;
PiDqDeviceInterfaceManager;
PiDqDeviceManager;
PiDqDevicePanelManager;
PiDqQueryConstraintData;
PiDqSequenceNumber;
PiDriverRegKeyParametersName;
PiDriverRegKeyPersistentStateName;
PiDrvDbCtx;
PiDrvDbDosVolumePrefix;
PiDrvDbNodeDescriptors;
PiDrvDbNodeList;
PiDrvDbSystemRootNt;
PiDrvDbSystemRootWin32;
PiEngineLock;
PiInitGroupOrderTable;
PiInitGroupOrderTableCount;
PiLoggedErrorEventsMask;
PiNormalDDBPath;
PiPnpRtlActiveOperations;
PiPnpRtlActiveOperationsLock;
PiPnpRtlContainerReadOnlyProps;
PiPnpRtlCtx;
PiPnpRtlDeviceReadOnlyProps;
PiPnpRtlInitialUpdatedPropertyArraySize;
PiPnpRtlRemoveOperationDispatchLock;
PiProfileChangeCancelRequired;
PiProfileChangeSemaphore;
PiProfileDeviceCount;
PiProfileDeviceListHead;
PiProfileDeviceListLock;
PiProfileDevicesInTransition;
PiRebuildPowerRelationsQueue;
PiResourceListLock;
PiSwBusName;
PiSwBusRelationsTable;
PiSwDeviceDriverObject;
PiSwDeviceInstanceTable;
PiSwGenericCompatibleId;
PiSwGenericRawCompatibleId;
PiSwGlobalPdoAssociationList;
PiSwLockObj;
PiUEventBroadcastEventQueue;
PiUEventBroadcastEventQueueLock;
PiUEventBroadcastSubscriberPresent;
PiUEventClientRegistrationListLock;
PiUEventDevHandleClientCount;
PiUEventDevHandleClientList;
PiUEventDevInstanceClientCount;
PiUEventDevInstanceClientList;
PiUEventDevInstancePropertyClientCount;
PiUEventDevInstancePropertyClientList;
PiUEventDevInterfaceClientCount;
PiUEventDevInterfaceClientList;
PiUEventMetaNotificationHandle;
PiUEventUsermodeEventQueue;
PiUEventUsermodeEventQueueLock;
PipCslConsoleLockState;
PipCslInitialized;
PipCslUnlockCallback;
PipDgqListHead;
PipDgqListLock;
PipDmaGuardPolicy;
PipDmaGuardTestMode;
PipHalIommuSecurityEnabled;
PipResetDeviceBreakOnReset;
PltRotBarStatus;
PlugPlayHandlerTable;
PnPBootDriversInitialized;
PnPBootDriversLoaded;
PnPInitialized;
PnPIrpNames;
PnpAsyncOptions;
PnpBootDriverCallbackObject;
PnpBootDriverCallbackRegistrationClosed;
PnpBootMode;
PnpBootOptions;
PnpBusTypeGuidArray;
PnpBusTypeGuidCount;
PnpBusTypeGuidCountMax;
PnpBusTypeGuidLock;
PnpClassificationRank;
PnpCoreDriverGroupLoadPhase;
PnpCurrentHardwareConfigurationGuidString;
PnpCurrentHardwareConfigurationIndex;
PnpDefaultInterfaceType;
PnpDeferredRegistrationList;
PnpDeferredRegistrationLock;
PnpDelayedRemovePending;
PnpDelayedRemoveWorkItem;
PnpDelayedRemoveWorkerThread;
PnpDelayedRemoveWorkerWatchdogLock;
PnpDeviceActionThread;
PnpDeviceClassNotifyList;
PnpDeviceClassNotifyLock;
PnpDeviceCompletionQueue;
PnpDeviceEnumerationWorkItem;
PnpDeviceEventList;
PnpDeviceEventThread;
PnpDeviceOverrideHashList;
PnpDeviceOverrideHashListSize;
PnpDevicePropertyLock;
PnpDeviceReferenceTable;
PnpDeviceReferenceTableLock;
PnpDriverImageLoadPolicy;
PnpDriverInitPhaseActivityId;
PnpDriverObject;
PnpEmptyUnicodeString;
PnpEnumerationInProgress;
PnpEnumerationLock;
PnpEnumerationRequestList;
PnpEtwHandle;
PnpEventQueueEmpty;
PnpEventWorkerWatchdogLock;
PnpFindBestConfigurationTimeout;
PnpHwProfileNotifyLock;
PnpNotificationInProgress;
PnpNotificationInProgressLock;
PnpProfileNotifyList;
PnpQueryProximityNode;
PnpRegistryDeviceResource;
PnpReplaceEvent;
PnpResetMaximumRetryAttempts;
PnpResetRetryInterval;
PnpRundownEtwHandle;
PnpSetupInProgress;
PnpSetupOOBEInProgress;
PnpSetupPhaseInProgress;
PnpSetupRollbackActiveInProgress;
PnpSetupTypeInProgress;
PnpSetupUpgradeInProgress;
PnpShutdownEvent;
PnpSpinLock;
PnpSystemDeviceEnumerationComplete;
PnpSystemHiveLimits;
PnpSystemHiveTooLarge;
PnpTargetDeviceNotifyLock;
PnpTearDownPnpStacksOnShutdown;
PnpTraceInterruptCount;
PnpWatchdogBugcheckConfig;
PnpWatchdogBugcheckLock;
PnpWatchdogBugcheckRegName;
PnpWatchdogBugcheckWatchWorkItem;
PnpWatchdogSetupInProgressWorkItem;
PnpWstrRaw;
PnpWstrTranslated;
PnprContext;
PoAllProcIntrDisabled;
PoHiberInProgress;
PoOffCrashConfigTable;
PoPdcCallbacks;
PoPowerDownActionInProgress;
PoPowerSequence;
PoResumeFromHibernate;
PoRtcWakeAllowed;
PoSkipTickMode;
PoWakeState;
PoolBigPageTable;
PoolBigPageTableSize;
PoolHitTag;
PoolTrackTable;
PoolTrackTableExpansion;
PoolTrackTableExpansionSize;
PoolTrackTableMask;
PoolTrackTableSize;
PoolVector;
PopAcpiPdttSupportEnabled;
PopAction;
PopActionWaiters;
PopAdaptiveLockConsoleTimeout;
PopAdminPolicy;
PopAdpmLock;
PopAdpmLockThread;
PopAggressiveStandbyActionsRegValue;
PopAggressiveStandbyAppliedActions;
PopAggressiveStandbyEnabledActions;
PopAlpcClientPort;
PopAlpcMonitorClientPort;
PopAlpcMonitorServerPort;
PopAlpcServerPort;
PopApicMode;
PopAutoChkCausedReboot;
PopAutomaticDebuggerTransitions;
PopAwayModePolicyRegName;
PopAwayModeUserPresenceDpcObject;
PopAwayModeUserPresenceTimer;
PopAwaymodeExitReason;
PopAwaymodeLock;
PopAwaymodeLockExclusiveThread;
PopBackgroundActivityPolicy;
PopBackgroundTaskAllowed;
PopBackgroundTaskIgnoreCount;
PopBatteryCachedFlags;
PopBatteryChargingInProgress;
PopBatteryEtwHandle;
PopBatteryEtwRegistered;
PopBatteryInitiateIgnoreStatusDuringBoot;
PopBatteryTriggerCachedFlags;
PopBatteryWakeTimer;
PopBatteryWorkItem;
PopBatteryWorkRequests;
PopBgkResumePrepared;
PopBlackBoxAcpiGuid;
PopBlackBoxBsdGuid;
PopBlackBoxCrashedProcessGuid;
PopBlackBoxDxgDisplayGuid;
PopBlackBoxEntries;
PopBlackBoxLock;
PopBlackBoxPdcLockGuid;
PopBlackBoxPnpDelayedRemoveWorkerGuid;
PopBlackBoxPnpDeviceCompletionQueueGuid;
PopBlackBoxPnpEventWorkerGuid;
PopBlackBoxPnpGuid;
PopBlackBoxPoIrpGuid;
PopBlackBoxPoPepWorkOrderGuid;
PopBlackBoxPoPowerWatchdogGuid;
PopBlackBoxScmGuid;
PopBlackBoxUsoCommitGuid;
PopBlackBoxWinLogonNotifyGuid;
PopBootStat;
PopBootStatLock;
PopBsdCurrentCsPhase;
PopBsdLastPowerWatchdogStage;
PopBsdPhysicalPowerButtonInfo;
PopBsdPhysicalPowerButtonInfoAtBoot;
PopBsdPowerTransition;
PopBsdPowerTransitionAtBoot;
PopBsdPowerTransitionExtension;
PopBsdPowerTransitionExtensionAtBoot;
PopBsdPowerWatchdogArmed;
PopBsdShutdownInProgress;
PopBsdSkipLogging;
PopBsdTransitionLatestCheckpointId;
PopBsdTransitionLatestCheckpointSeqNumber;
PopBsdTransitionLatestCheckpointType;
PopBsdUpdateLock;
PopCB;
PopCachedValidBatteryCount;
PopCadLoadReason;
PopCallbackWorkItem;
PopCallbackWorkItemScheduled;
PopCapabilities;
PopCheckPowerSourceAfterRtcWakeCompleted;
PopCheckPowerSourceAfterRtcWakeTime;
PopCheckPowerSourceAfterRtcWakeTimer;
PopCheckpointEfiRuntimeRedirected;
PopCheckpointSystemSleepEnabled;
PopCheckpointSystemSleepEnabledReg;
PopCheckpointSystemSleepSimulateFlags;
PopCheckpointSystemSleepVariable;
PopClearUserShutdownMarkerWorkItem;
PopCoalRegistrationList;
PopCoalRegistrationListLock;
PopCoalescingCallbackWorkItem;
PopCoalescingEnforced;
PopCoalescingFlushInterval;
PopCoalescingLastFlushTime;
PopCoalescingRegistration;
PopCoalescingState;
PopCoalescingTimer;
PopCoalescingTimerDpc;
PopCoalescingTimerInterval;
PopCompressMethodMap;
PopComputeEnergy;
PopConnectionBitmap;
PopConnectionState;
PopConsoleContext;
PopConsoleDisplayState;
PopConsoleExternalDisplayConnected;
PopConsoleSession;
PopControlRegKey;
PopCoolingExtensionList;
PopCoolingExtensionLock;
PopCoolingMode;
PopCoordinatedIdleExitTimeout;
PopCreateIrpWorkerAllowed;
PopCriticalShutdownInProgress;
PopCsConsumption;
PopCsDeviceCompliance;
PopCsEnabledReg;
PopCsResiliencyStats;
PopCsResiliencyStatsLock;
PopCurrentBroadcast;
PopCurrentCoalescingSpindownTimeout;
PopCurrentDiskIdleTimeout;
PopCurrentIrpSequenceID;
PopCurrentWakeInfo;
PopDebugCount;
PopDebugFlags;
PopDeepIoCoalescingEnabled;
PopDeepSleepDisengageReasonLock;
PopDeepSleepDisengageReasonMask;
PopDeepSleepEnforced;
PopDeepSleepEvaluateWorkItem;
PopDeepSleepEvaluateWorkItemQueued;
PopDeepSleepIsEnabled;
PopDeepSleepIsEngaged;
PopDeviceClassExclusionList;
PopDeviceIdleSync;
PopDevicePrefixNt;
PopDevicePrefixWin32;
PopDiagActivityId;
PopDiagDeviceRundownRequests;
PopDiagDeviceRundownWorkItem;
PopDiagGlobalIdleWakeAccounting;
PopDiagHandle;
PopDiagHandleRegistered;
PopDiagSleepStudyHandle;
PopDiagSleepStudyHandleRegistered;
PopDiagStaticWakeSourceDescriptions;
PopDirectedDripsAction;
PopDirectedDripsDebounceInterval;
PopDirectedDripsDiagList;
PopDirectedDripsDiagLock;
PopDirectedDripsDiagNextBroadcastTreeId;
PopDirectedDripsEnableV2;
PopDirectedDripsEngaged;
PopDirectedDripsOverride;
PopDirectedDripsState;
PopDirectedDripsTimeout;
PopDirectedDripsUsbHubInstancePrefixes;
PopDisableDisplayBurstOnPowerSourceChange;
PopDisableSleepList;
PopDisableSleepMutex;
PopDiskCoalescingTimeout;
PopDiskIdleTimeout;
PopDisplayBurstSuppressWorkItem;
PopDisplayBurstSuppressWorkItemQueued;
PopDisplayTimeout;
PopDopeGlobalLock;
PopDozeDeferralChecksToIgnore;
PopDozeDeferralMaxSeconds;
PopDppeCoalescingSpindownTimeout;
PopDripsCallbackInterval;
PopDripsExcludeInstancePrefix;
PopDripsIncludeInstancePrefix;
PopDripsSwHwDivergenceEnableLiveDump;
PopDripsSwHwDivergenceThreshold;
PopDripsWatchdog;
PopDripsWatchdogAction;
PopDripsWatchdogCallbackDescriptions;
PopDripsWatchdogContext;
PopDripsWatchdogDebounceInterval;
PopDripsWatchdogDebounceTickInterval;
PopDripsWatchdogTimeout;
PopDynamicIrpWorkerLookaside;
PopEmCallback;
PopEmEntry;
PopEnableHibernateMemoryMapValidationOverride;
PopEnableInputSuppression;
PopEnableInputSuppressionOverride;
PopEnableMinimalHiberFile;
PopEnergyEstimationEnabled;
PopEnforceConsoleLockScreenTimeout;
PopEnforceDisconnectedStandby;
PopEnforcedCoalescingSpindownTimeout;
PopErrataDisablePrimaryDeviceFastResume;
PopErrataReportingIncorrectLidState;
PopErrataSkipMemoryOverwriteRequestControlLockAction;
PopEsAcOnline;
PopEsBgActivityLimited;
PopEsEnabledOnHost;
PopEsLastBatteryCharge;
PopEsLastBatteryThreshold;
PopEsLastStateChangeTimeStamp;
PopEsLastUserAwaySetting;
PopEsLock;
PopEsMode;
PopEsReason;
PopEsState;
PopEsWnfSubscriptionBgActivityPolicy;
PopEsWnfSubscriptionOverride;
PopEsWorkItem;
PopEsWorkItemDue;
PopEstimateSpoiledUntilTime;
PopEstimateSpoilerMask;
PopEtGlobals;
PopEventProcessorEnabled;
PopExecutionRequiredContext;
PopExecutionRequiredTimeout;
PopExecutionRequiredTimeoutDpc;
PopExecutionRequiredTimeoutWorker;
PopExecutionRequiredTimer;
PopExecutionRequiredWorkRequested;
PopExternalMonitorUpdatedWorkItem;
PopFanLock;
PopFanTracking;
PopFans;
PopFirmwarePlatformRole;
PopFirmwareResetReason;
PopFixedWakeSourceMask;
PopFlushPolicy;
PopForceCompleteCsSleepStudySessionWorkItem;
PopForceMinimalHiberFile;
PopForceSleepStudyLock;
PopForceSleepStudyWorkItemQueued;
PopFullWake;
PopFxAccountingBucketLimits;
PopFxAcpiDeviceList;
PopFxAcpiPepRegistered;
PopFxActiveIdleLevel;
PopFxActiveIdleThreshold;
PopFxActiveIdleTimeout;
PopFxBlockingDeviceListLock;
PopFxDeviceAccountingLevel;
PopFxDeviceAccountingPaused;
PopFxDeviceList;
PopFxDeviceListLock;
PopFxDeviceRegisterHead;
PopFxDirectedFxDefaultTimeout;
PopFxEnableShutdownActiveBias;
PopFxGlobalDeviceAccountingInfo;
PopFxGlobalDeviceAccountingLock;
PopFxLowPowerEpoch;
PopFxParkingFallback;
PopFxPerfQueryOnDevicePowerChanges;
PopFxPlatformInterface;
PopFxPluginList;
PopFxPluginLock;
PopFxProcessorPlugin;
PopFxResidentComponentCount;
PopFxResidentDpc;
PopFxResidentTimer;
PopFxResidentTimerArmed;
PopFxResidentTimerLock;
PopFxResidentWorkItem;
PopFxRuntimeLogNumberEntries;
PopFxSystemLatencyHint;
PopFxSystemLatencyLimit;
PopFxSystemLatencyLock;
PopFxSystemWatchdogInfo;
PopFxSystemWorkOrders;
PopFxSystemWorkQueue;
PopFxVSyncEnabled;
PopFxWatchdogWorkOrderTimeout;
PopGlobalUserPresenceState;
PopGlobalUserPresenceStateTransitions;
PopHeteroConfig;
PopHeteroLegacyOverride;
PopHeteroSystem;
PopHiberBootForceMonitorOff;
PopHiberChecksummingEnabledReg;
PopHiberEnabled;
PopHiberEnabledReg;
PopHiberEnabledRegName;
PopHiberFileBucket;
PopHiberFileSizePercent;
PopHiberFileSizePercentRegName;
PopHiberFileType;
PopHiberFileTypeRegName;
PopHiberForceDisabledReasonMap;
PopHiberForceDisabledReg;
PopHiberInfo;
PopHiberLoaderScratchPages;
PopHiberLogInfo;
PopHiberResumeXhciHandoffSkip;
PopHiberScratchPages;
PopHiberSkipMemoryMapValidation;
PopHiberbootEnabledReg;
PopHiberbootEnabledRegName;
PopHiberbootGroupPolicyRegKey;
PopHibernateDiagnosticInfo;
PopHibernatePowerStateHandlerType;
PopHibernateSystemContext;
PopHibernationErrorSubstitutionString;
PopIdleAoAcDozeS4Lock;
PopIdleAoAcDozeS4Timer;
PopIdleAoAcDozeS4WorkItem;
PopIdleBackgroundIgnoreCount;
PopIdleDetectList;
PopIdleResiliencyIsEngagedWithoutDeepSleep;
PopIdleScanDpc;
PopIdleScanInterval;
PopIdleScanTimer;
PopIdleTransitionTimeout;
PopIgnoreCsComplianceCheck;
PopIgnoreLidStateForInputSuppression;
PopInitialSettingCallbacks;
PopInputSuppressionActionCount;
PopInputSuppressionLock;
PopInputSuppressionRequired;
PopInputTimeout;
PopInrushIrp;
PopInrushIrpList;
PopIrTimerDescriptions;
PopIrTimerDescriptionsLength;
PopIrpDataLookaside;
PopIrpList;
PopIrpLock;
PopIrpSerialList;
PopIrpSerialLock;
PopIrpThreadList;
PopIrpWorkerControlEvent;
PopIrpWorkerCount;
PopIrpWorkerInFlightCount;
PopIrpWorkerList;
PopIrpWorkerMutex;
PopIrpWorkerPendingCount;
PopIrpWorkerRequested;
PopIrpWorkerSemaphore;
PopIsAboutToSleep;
PopIsForceIdleSet;
PopKsrPrepared;
PopLazyContext;
PopLidClosedSleepStudyWorkItem;
PopLidClosedSleepStudyWorkItemQueued;
PopLidOpened;
PopLidStateForInputSuppressionOverride;
PopMaxChargeRate;
PopMaxDynamicTickDurationOriginalValue;
PopMaximumConnectionSessions;
PopMonitorEventMapping;
PopMonitorOffDueToSleep;
PopNetBIRequestActive;
PopNetBIServiceSid;
PopNetCompliantNicCount;
PopNetDeferLogRequest;
PopNetEvaluationTimer;
PopNetGracePeriodState;
PopNetInLpePhase;
PopNetNonCompliantDeviceCount;
PopNetRefreshIntervalActive;
PopNetRefreshTimer;
PopNetRefreshTimerState;
PopNetResiliencyEngaged;
PopNetStandbyReason;
PopNetStandbyState;
PopNetStandbyStateMask;
PopNetStandbyStatePublished;
PopNoMoreInput;
PopNotifyEvents;
PopNotifyWork;
PopNumberOfPagesForHibernateProcess;
PopOneSettingPowerButtonBugcheckRegName;
PopOsInitPhase;
PopPagingEnabled;
PopPdcDeviceList;
PopPdcDeviceListLock;
PopPdcIdleResiliency;
PopPdcIoCoalescing;
PopPdcLastCsEnterReason;
PopPdcLastCsExitReason;
PopPdcLastCsExitTime;
PopPendingPowerSettingUpdateLock;
PopPendingPowerSettingUpdateTime;
PopPendingPowerSettingUpdates;
PopPendingPowerSettingUpdatesQueued;
PopPendingSetPowerDeviceIrps;
PopPendingUserPresenceDuringSystemSleep;
PopPendingUserPresenceMonitorOnReason;
PopPendingWakeInfo;
PopPepDeviceList;
PopPepDeviceListLock;
PopPepIdleDpc;
PopPepIdleStateTimeout;
PopPepIdleTimer;
PopPepIdleTimerArmed;
PopPepIdleTimerLock;
PopPepIdleWorkItem;
PopPepLastCheckedDevice;
PopPepLowPowerEpoch;
PopPepPlatformState;
PopPepPoweredIdleComponentCount;
PopPepVetoMaskReadyLock;
PopPlatformAoAc;
PopPlatformAoAcOverride;
PopPlatformRole;
PopPlatformRoleOverride;
PopPoFxSystemIrpWaitForReportDevicePoweredReg;
PopPolicy;
PopPolicyDeviceLock;
PopPolicyDeviceParameters;
PopPolicyLock;
PopPolicyLockThread;
PopPolicyWorker;
PopPopPowerSettingSetChangeNotification;
PopPostSpoilingRefresh;
PopPowerAggregatorActionContexts;
PopPowerAggregatorLatestModernStandbyIntent;
PopPowerAggregatorLock;
PopPowerAggregatorRequestQueue;
PopPowerAggregatorRequestQueueLock;
PopPowerAggregatorWork;
PopPowerAggregatorWorkItem;
PopPowerButtonBugcheckConfig;
PopPowerButtonBugcheckLock;
PopPowerButtonBugcheckRegName;
PopPowerButtonBugcheckWatchWorkItem;
PopPowerButtonHold;
PopPowerButtonTriageBlock;
PopPowerEventLock;
PopPowerEventTable;
PopPowerEventTrace;
PopPowerEventTraceCount;
PopPowerRequestActiveAudioEnablesExecutionRequired;
PopPowerRequestAttributes;
PopPowerRequestCallbacks;
PopPowerRequestConvertSystemToExecution;
PopPowerRequestId;
PopPowerRequestLock;
PopPowerRequestMapping;
PopPowerRequestObjectCount;
PopPowerRequestObjectList;
PopPowerRequestObjectType;
PopPowerRequestSpinLock;
PopPowerRequestTable;
PopPowerSettingCallbackReturned;
PopPowerSettingChangeStamp;
PopPowerSettingValues;
PopPowerSettings;
PopPowerStateHandlerLookup;
PopPowerStateHandlers;
PopPowerStateNotifyHandler;
PopPreSleepNotificationSeconds;
PopPreSleepNotifyWorkItem;
PopPreSleepWnfPayload;
PopPrimaryDisplayVisibleStateErratum;
PopProcessorThrottleLogInterval;
PopProcessorThrottleLogIntervalRegKey;
PopPromoteHibernateToShutdown;
PopQpcFrequency;
PopRegKey;
PopRegisteredPowerSettingCallbacks;
PopRequestedIrps;
PopSIdle;
PopSIdleLastUpdateNotificationState;
PopSIdleUpdateNotificationWorkItem;
PopSecureLaunched;
PopSessionSpecificGuids;
PopSessionSpecificLists;
PopSetUserShutdownMarkerWorkItem;
PopSettingLock;
PopShutdownButtonPressTime;
PopShutdownCleanly;
PopShutdownDiagnosticsScenarioGuid;
PopShutdownEvent;
PopShutdownEventCode;
PopShutdownListAvailable;
PopShutdownListMutex;
PopShutdownNotificationCallback;
PopShutdownPowerOffPolicy;
PopShutdownPowerOffPolicyRegKey;
PopShutdownPowerOffPolicyRegName;
PopShutdownQueue;
PopShutdownThreadList;
PopShutdownWorkItem;
PopSimulate;
PopSimulateHiberBugcheck;
PopSimulateHiberBugcheckRegName;
PopSimulateManual;
PopSimulateRegKey;
PopSimulateRegName;
PopSkipTickPolicy;
PopSleepCheckpointStatus;
PopSleepStats;
PopSleepStudyDeviceAccountingLevel;
PopSleepStudyDisabled;
PopSleepStudySessionInfo;
PopSleepStudySessionLock;
PopSleepStudyTaskClientActivator;
PopSleepStudyTaskClientReferenceTaken;
PopSleepStudyTaskClientTimer;
PopSleepStudyTaskClientTimerDpc;
PopSleepStudyTaskClientTimerWorkItem;
PopSleeperHandoff;
PopSleepstudyStopReason;
PopSmartUserPresenceAction;
PopSmartUserPresenceCheckTimeout;
PopSmartUserPresenceGracePeriod;
PopSmartUserPresenceWakeOffset;
PopSnapEnergyCounters;
PopSpecialPowerRequestObjectCount;
PopSpecialPowerRequestObjectList;
PopSpoilEstimatesOnPowerStateTransitionWorkItem;
PopSqm_Add_StreamRow;
PopStandbyConnectivityGracePeriod;
PopSwitches;
PopSystemPowerPolicyRegName;
PopSystemThermalInfo;
PopTelemetryOsState;
PopThermal;
PopThermalCriticalShutdownEnabled;
PopThermalCriticalShutdownInitiated;
PopThermalCriticalShutdownReported;
PopThermalHibernateInitiated;
PopThermalLock;
PopThermalLoggingDefaultRegKey;
PopThermalLoggingVolatileRegKey;
PopThermalPollingMode;
PopThermalPollingWakesAllowed;
PopThermalShutdownOccurredName;
PopThermalShutdownSourceName;
PopThermalShutdownTemperatureName;
PopThermalTelemetryClientCount;
PopThermalTelemetryLock;
PopThermalTelemetryTimer;
PopThermalTrackingThresholds;
PopThermalZoneCount;
PopThermalZoneNextId;
PopTimeBrokerExpirationDueTime;
PopTimeBrokerExpirationReason;
PopTimeBrokerServiceSid;
PopTimeChangeInfo;
PopTransitionCheckpointLock;
PopTransitionCheckpoints;
PopTransitionCheckpointsSequenceNumber;
PopTransitionLock;
PopTransitionLockAcquireReason;
PopTransitionLockOwnerThread;
PopTriggerDiagHandle;
PopTriggerDiagHandleRegistered;
PopUmpoAlpcClientConnected;
PopUmpoPushLock;
PopUndockPolicyRegName;
PopUnlockAfterSleepWorkItem;
PopUserBatteryChargingEstimator;
PopUserBatteryDischargeEstimator;
PopUserPresentCompletedEvent;
PopUserPresentOverrideCount;
PopUserPresentSetStatus;
PopUserPresentWorkItem;
PopUserShutdown;
PopUserShutdownDelayDpc;
PopUserShutdownDelayTimer;
PopUserShutdownDelayWorker;
PopUserShutdownInProgress;
PopVideoHighPrecisionBrightnessEnabled;
PopVideoInitialized;
PopVolumeDevices;
PopVolumeLock;
PopWakeInfoCount;
PopWakeInfoList;
PopWakeSourceAvailable;
PopWakeSourceLock;
PopWakeSourceWorkInProgress;
PopWakeSourceWorkItem;
PopWakeSourceWorkList;
PopWatchdogList;
PopWatchdogLock;
PopWatchdogResumeTimeout;
PopWatchdogSleepTimeout;
PopWatchdogTimerCount;
PopWdiCurrentScenario;
PopWdiCurrentScenarioInstanceId;
PopWdiCurrentScenarioInstanceIdV2;
PopWdiNewScenarioWaiting;
PopWdiScenarioStopEventData;
PopWdiTimer;
PopWdiTimerDpc;
PopWdiTimerMutex;
PopWdiTimerQueued;
PopWdiTimerTimeoutValue;
PopWdiTimerWorker;
PopWin32kCalloutWatchdogTimeoutSeconds;
PopWnfCsEnterScenarioId;
PopWorkOrderList;
PopWorkOrderLock;
PopWorkerLock;
PopWorkerPending;
PopWorkerSpinLock;
PopWorkerStatus;
PopWorkerTypes;
Ports;
PotentialGlobalAttributePrefixes;
PowerIrpNames;
PowerReqestStatsLock;
PowerRequestStatsDatabase;
PowerStateDisableReasonListHead;
PpBootDDB;
PpDDBHandle;
PpRegistrySemaphore;
PpmAllowedActions;
PpmBackgroundProfile;
PpmCheckApplyDomainStatePipeline;
PpmCheckArmed;
PpmCheckAsyncLatencyHintPipeline;
PpmCheckCompleteHandler;
PpmCheckCoreParkingUpdatePipeline;
PpmCheckCount;
PpmCheckCurrentPipelineId;
PpmCheckDeadlineBoostActive;
PpmCheckDpc;
PpmCheckForceDomainStatePipeline;
PpmCheckHeterogeneousPipelines;
PpmCheckHomogeneousPipelines;
PpmCheckLastExecutionTime;
PpmCheckLatencyBoostActive;
PpmCheckMakeupCount;
PpmCheckMinimumPeriod;
PpmCheckPeriod;
PpmCheckPeriodicHeteroPipeline;
PpmCheckPeriodicPipeline;
PpmCheckPipeline;
PpmCheckPipelineIndex;
PpmCheckPipelines;
PpmCheckPollForFeedback;
PpmCheckRegistered;
PpmCheckStartDpc;
PpmCheckTime;
PpmCurrentProfile;
PpmDefaultProfile;
PpmDisableVsyncLatencyUpdate;
PpmDripsAccountingSnapshot;
PpmDripsStateIndex;
PpmEntryLevelPerfProfile;
PpmEtwHandle;
PpmEtwRegistered;
PpmExitLatencyCheckEnabled;
PpmExitLatencySamplingPercentage;
PpmExitLatencySamplingPercentageSet;
PpmHeteroCapability;
PpmHeteroCapabilityTest;
PpmHeteroDesiredPolicy;
PpmHeteroFavoredCoreFallback;
PpmHeteroHgsDisabled;
PpmHeteroHgsEnabled;
PpmHeteroHgsHeteroCoreTypes;
PpmHeteroHgsInterface;
PpmHeteroHgsPopulated;
PpmHeteroHgsTableMdl;
PpmHeteroHgsUpdateDpc;
PpmHeteroHgsUpdateQueued;
PpmHeteroHgsUpdateWorkItem;
PpmHeteroHighestPerformanceClasses;
PpmHeteroImplementationGeneration;
PpmHeteroMinRelativePerformance;
PpmHeteroNominalPerformanceClasses;
PpmHeteroParkBias;
PpmHeteroPolicy;
PpmHeteroQosBias;
PpmHighPerfDeferredEndCount;
PpmHighPerfDeferredEndDisabled;
PpmHighPerfDeferredEndTime;
PpmHighPerfDuration;
PpmHighPerfEndDpc;
PpmHighPerfEndTimer;
PpmHighPerfPowerRequest;
PpmHighPerfRequestLock;
PpmHvPerformanceCounterShift;
PpmHvPerformanceDistributionShift;
PpmIdleCoordinatedMode;
PpmIdleDisableStatesAtBoot;
PpmIdleDurationExpirationTimeout;
PpmIdleDurationExpirationTimeoutMs;
PpmIdleIntervalLimits;
PpmIdleLastIdleDurationExpirationTime;
PpmIdlePolicyLock;
PpmIdleRespectIdleStateMax;
PpmIdleVetoBias;
PpmIdleVetoList;
PpmIdleVetoLock;
PpmInfoDefaultProfileName;
PpmIntSteerDisabled;
PpmIntSteerLoadMax;
PpmIntSteerMode;
PpmIntSteerTrigger;
PpmIntSteerTriggerMax;
PpmIpiLastClockOwnerDisable;
PpmIsParkingEnabled;
PpmLatencyToleranceLimit;
PpmLowPowerProfile;
PpmMediaBufferingWork;
PpmMfBufferingThreshold;
PpmMfOverridesDisabled;
PpmMultimediaQosProfile;
PpmNonInterruptibleCount;
PpmParkCoreMask;
PpmParkGranularity;
PpmParkHistograms;
PpmParkInitialClass1UnParkCount;
PpmParkLpiCap;
PpmParkLpiCapChanged;
PpmParkLpiEngaged;
PpmParkMaskHandler;
PpmParkMultiparkGranularity;
PpmParkNodes;
PpmParkNumNodes;
PpmParkPreferenceHandler;
PpmParkStateLock;
PpmParkThermalCap;
PpmParkUnparkCores;
PpmParkUseCoreGranularity;
PpmPdcMediaEngaged;
PpmPerfArtificialDomainEnabled;
PpmPerfArtificialDomainSetting;
PpmPerfAutonomousActivityWindowViaPerfControl;
PpmPerfBoostAtGuaranteed;
PpmPerfBootHeteroPolicyOverrideEnabled;
PpmPerfCalculateActualUtilization;
PpmPerfChangedCoreParkingMask;
PpmPerfControlAcquirePerformance;
PpmPerfControlCommitPerformance;
PpmPerfControlCompletePolicyUpdate;
PpmPerfControlReadFeedback;
PpmPerfControlStartPolicyUpdate;
PpmPerfCoreParkingMask;
PpmPerfDeadlineBoostExpiration;
PpmPerfDomainCount;
PpmPerfDomainHead;
PpmPerfDomainsToUpdate;
PpmPerfEppViaPerfControl;
PpmPerfGlobalContext;
PpmPerfIdealAggressiveIncreaseThreshold;
PpmPerfLatencyBoostExpiration;
PpmPerfLatencyBoostQueued;
PpmPerfLatencyBoostWorkItem;
PpmPerfMaxOverrideEnabled;
PpmPerfMultimediaQosSupported;
PpmPerfNewCoreParkingMask;
PpmPerfNewUnparkedMask;
PpmPerfPolicyLock;
PpmPerfProcessorsToUpdate;
PpmPerfQosDisableAccounting;
PpmPerfQosDisableReasons;
PpmPerfQosDisableRefcount;
PpmPerfQosEnabled;
PpmPerfQosGroupPolicyDisable;
PpmPerfQosIdleExpirationTimeout;
PpmPerfQosManageIdleProcessors;
PpmPerfQosSupportedAndConfigured;
PpmPerfQosTransitionHysteresis;
PpmPerfQosTransitionHysteresisOverride;
PpmPerfReductionBoostPolicies;
PpmPerfReductionOffsetPercent;
PpmPerfReportedCoreParkingMask;
PpmPerfSchedulerDirectedPerfStatesSupported;
PpmPerfSingleStepSize;
PpmPerfStatesRegistered;
PpmPerfTelemetryTimer;
PpmPerfTimeWindow;
PpmPerfVmQosSupported;
PpmPerformanceCounterShift;
PpmPerformanceDistributionShift;
PpmPlatformIdleHint;
PpmPlatformStates;
PpmPolicyAliasList;
PpmPolicyConfigTable;
PpmProcessorDriverDispatchTable;
PpmProfileCount;
PpmProfileStatus;
PpmProfiles;
PpmWmiGuidList;
PpmWmiIdleAccountingDpc;
PpmWmiIdleAccountingTimer;
PpvUtilVerifierEnabled;
Printable;
PrintableChars;
PrivateLoggerNotificationGuid;
PrivateLoggerSecurityGuid;
ProcessFreezeEvent;
ProcessRundown;
ProcessStart;
ProcessStop;
ProcessThawEvent;
ProgressBarLeft;
ProgressBarTop;
PsActiveProcessHead;
PsContinueWaiting;
PsCpuFairShareEnabled;
PsDefaultLoaderThreads;
PsDefaultSystemLocaleId;
PsDefaultThreadLocaleId;
PsDefaultUILanguageId;
PsDfssGenerationLengthMS;
PsDfssLongTermFraction1024;
PsDfssLongTermSharingMS;
PsDfssShortTermSharingMS;
PsDisableDiskCounters;
PsDiskIoAttributionStart;
PsDiskIoAttributionStop;
PsEmbeddedNTMask;
PsHalImageBase;
PsHalImageEnd;
PsIdleProcess;
PsInitialSystemProcess;
PsInstallUILanguageId;
PsIntegrityCheckEnabled;
PsInvertedFunctionTable;
PsIoRateControlStart;
PsIoRateControlStop;
PsJobType;
PsKernelRangeList;
PsLoadedModuleList;
PsLoadedModuleResource;
PsLoadedModuleSpinLock;
PsMachineUILanguageId;
PsNextSecurityDomain;
PsNoRemoteThreadBeforeProcessInit;
PsNtosImageBase;
PsNtosImageEnd;
PsObjectDirectorySiloContextSlot;
PsObjectDirectoryTeardownSlot;
PsPartitionType;
PsPrioritySeparation;
PsProcessType;
PsProvGuid;
PsProvTraceLoggingGuid;
PsRawPrioritySeparation;
PsReaperListHead;
PsReaperWorkItem;
PsSecureSystemProcess;
PsSiloContextNonPagedType;
PsSiloContextPagedType;
PsSystemRootSiloContextSlot;
PsThreadType;
PsTrustletGenericMapping;
PsUILanguageComitted;
PsWatchEnabled;
PsWin32CallBack;
PsWin32CalloutsEstablished;
PsWin32NullCallBack;
PsWowArm32SharedInformation;
PsWowX86SharedInformation;
PspActivePartitionListHead;
PspActivePartitionListLock;
PspActiveProcessLock;
PspActivityReferenceMapping;
PspActivityReferenceObjectType;
PspAffinityUpdateLock;
PspAlwaysTrackIoBoosting;
PspBamExtensionHost;
PspBamHostInterface;
PspBootAccessToken;
PspCallEnclaveReturn;
PspCidTable;
PspCreateProcessNotifyRoutine;
PspCreateProcessNotifyRoutineCount;
PspCreateProcessNotifyRoutineExCount;
PspCreateThreadNotifyRoutine;
PspCreateThreadNotifyRoutineCount;
PspCreateThreadNotifyRoutineNonSystemCount;
PspCurDirDevicesSkippedForDlls;
PspDamExtensionHost;
PspDefaultQuotaBlock;
PspDefaultResourceLimits;
PspDefaultResourceNames;
PspDefaultSiloName;
PspDfssConfigValues;
PspDfssConfigurationKey;
PspDfssConfigurationNotify;
PspDisableControlFlowGuardExportSuppression;
PspEnclaveDispatch;
PspEnclaveDispatchReturn;
PspEnforcementSequenceNumber;
PspFixedQuantums;
PspForegroundQuantum;
PspFreezeTimeBiasAddress;
PspGlobalFlags;
PspHardenedMitigationOptionsMap;
PspHostSiloGlobals;
PspHwTraceExtensionHost;
PspHwTraceHostInterface;
PspIumFreeMapping;
PspIumFreeMappingLock;
PspIumLogBuffer;
PspIumWorkItem;
PspJobAssignmentLock;
PspJobInfoAlign;
PspJobInfoLengths;
PspJobList;
PspJobListLock;
PspJobMapping;
PspJobNoWakeChargeLimit;
PspJobNotificationItem;
PspJobNotificationList;
PspJobSchedulingClasses;
PspJobTimeLimitsCount;
PspJobTimeLimitsRequest;
PspJobTimeLimitsWorkItem;
PspJobTimeLimitsWorkItemFlags;
PspKernelRanges;
PspLargePageDLLKeyName;
PspLastUpdateAffinityMask;
PspLegoNotifyRoutine;
PspLoadImageNotifyRoutine;
PspLoadImageNotifyRoutineCount;
PspLoaderInitRoutine;
PspMaximumWorkingSet;
PspMemReserveMapping;
PspMemoryReserveObjectNames;
PspMemoryReserveObjectSizes;
PspMemoryReserveObjectTypes;
PspMinimumWorkingSet;
PspMmcssExtensionHost;
PspMmcssHostInterface;
PspNativeSystemDllData;
PspNetRateControlExtensionHost;
PspNoWakeChargeReferencedProcess;
PspNotifyEnableMask;
PspNullGuid;
PspOctExtensionHost;
PspOctHostInterface;
PspOutSwapSharedPages;
PspPackagedAppClaim;
PspPartitionInfoDetails;
PspPartitionMapping;
PspPathVarString;
PspPerfOptionsKeyName;
PspPicoProviderRanges;
PspPicoProviderRoutines;
PspPicoRegistrationDisabled;
PspPriorityClassRank;
PspPriorityTable;
PspProcessMapping;
PspProcessNodeAssignment;
PspProcessRundownCacheWorkItem;
PspProcessRundownWorkItem;
PspProcessSequenceNumber;
PspProtectedRuntimeData;
PspQuotaBlockTable;
PspQuotaDatabaseKey;
PspQuotaExpansionDescriptors;
PspQuotaKeyNames;
PspQuotaLimitOffsets;
PspResourceFlags;
PspRundownNeededCount;
PspRundownNeededCountCache;
PspRundownProcessCache;
PspSecExtensionHost;
PspSecHostInterface;
PspSehValidationPolicy;
PspShortTime;
PspShutdownThread;
PspSiloMonitorList;
PspSiloMonitorLock;
PspSiloStorageNonPagedTypeName;
PspSiloStoragePagedTypeName;
PspStorageBitmap;
PspStorageBitmapBits;
PspStorageBitmapLock;
PspStorageExpansionBitmap;
PspStorageExpansionBitmapBits;
PspSysAppIdClaim;
PspSystem32String;
PspSystemDllInitBlock;
PspSystemDlls;
PspSystemDriveString;
PspSystemMitigationAuditOptions;
PspSystemMitigationAuditOptionsLength;
PspSystemMitigationOptions;
PspSystemMitigationOptionsLength;
PspSystemNoWakeChargeLimit;
PspSystemPartition;
PspSystemPartitionHandle;
PspSystemQuotaBlock;
PspSystemRootString;
PspSystemRootSymlinkName;
PspSystemRootTargetPrefix;
PspSystemThreadAssignment;
PspThreadMapping;
PspThreadWorkOnBehalfLock;
PspUniqueJobIdTable;
PspUseJobSchedulingClasses;
PspUserThreadStart;
PspVariableQuantums;
PspVsmEnclaveRuntimeDllData;
PspVsmLogCallbackRecord;
PspWorkOnBehalfEncodingKey;
PspWorkingSetAdjustService;
PspWorkingSetChangeHead;
PspWorkingSetPrivileges;
PspWowArm32SystemDllData;
PspWowX86SystemDllData;
QStringTerminators;
REGISTRY_PERF_EVENT_HIVE_FLUSH_BOOSTED_ACTIVE_FLUSHER;
REGISTRY_PERF_EVENT_HIVE_FLUSH_FINISH_WAIT_FOR_ACTIVE;
REGISTRY_PERF_EVENT_HIVE_FLUSH_START;
REGISTRY_PERF_EVENT_HIVE_FLUSH_START_WAIT_FOR_ACTIVE;
REGISTRY_PERF_EVENT_HIVE_FLUSH_STOP;
REGISTRY_PERF_EVENT_HIVE_FLUSH_WROTE_LOG_FILE;
REGISTRY_PERF_EVENT_HIVE_FLUSH_WROTE_PRIMARY_FILE;
REGISTRY_PERF_EVENT_HIVE_LOAD_START;
REGISTRY_PERF_EVENT_HIVE_LOAD_STOP;
REGISTRY_PERF_EVENT_HIVE_MOUNT_BASE_FILE_MOUNTED;
REGISTRY_PERF_EVENT_HIVE_MOUNT_LOG_ENTRY_APPLIED;
REGISTRY_PERF_EVENT_HIVE_MOUNT_START;
REGISTRY_PERF_EVENT_HIVE_MOUNT_STOP;
REGISTRY_PERF_EVENT_HIVE_RESTORE_START;
REGISTRY_PERF_EVENT_HIVE_RESTORE_STOP;
REGISTRY_PERF_EVENT_HIVE_SAVE_FILE_COPIED;
REGISTRY_PERF_EVENT_HIVE_SAVE_START;
REGISTRY_PERF_EVENT_HIVE_SAVE_STOP;
REGISTRY_PERF_EVENT_HIVE_SAVE_TREE_COPIED;
REGISTRY_PERF_EVENT_HIVE_UNLOAD_START;
REGISTRY_PERF_EVENT_HIVE_UNLOAD_STOP;
REGISTRY_PERF_EVENT_SHUTDOWN_FLUSH_START;
REGISTRY_PERF_EVENT_SHUTDOWN_FLUSH_STOP;
REGISTRY_PERF_EVENT_SHUTDOWN_RUNDOWN_COMPLETE;
REGISTRY_PERF_EVENT_SHUTDOWN_START;
REGISTRY_PERF_EVENT_SHUTDOWN_STOP;
REG_EVENT_CLEAR_ACCESS;
REG_EVENT_FLUSH_IO_FAIL;
REG_EVENT_REORGANIZE;
REG_EVENT_SELFHEAL;
REG_EVENT_TXR_INIT;
RamdiskBootDiskGuid;
RaspBitmapCache;
RasterizerInitialized;
RawDeviceCdRomObject;
RawDeviceDiskObject;
RawDeviceTapeObject;
RawDismountedQueue;
RawGlobalLock;
RawMountedQueue;
RefSetStartString;
RefSetStopString;
RegistryProvGuid;
ReleaseOpsEvent;
ReleaseOpsReservePool;
ResourceCount;
ResourceList;
ResourceSize;
RotBarSelection;
RtlAllocateStringRoutine;
RtlBaseAceType;
RtlCompressBufferProcs;
RtlCrc32Table;
RtlDecompressBufferProcs;
RtlDecompressFragmentProcs;
RtlDescribeChunkProcs;
RtlFatIllegalTable;
RtlFreeStringRoutine;
RtlIsSystemAceType;
RtlLznt1DecompressChunkLookaside;
RtlProtectedAccess;
RtlReserveChunkProcs;
RtlRetpolineStubsFunctionTable;
RtlRetpolineStubsFunctionTableSize;
RtlWorkSpaceProcs;
RtlpAppPackageAuthority;
RtlpBitsClearAnywhere;
RtlpBitsClearHigh;
RtlpBitsClearLow;
RtlpBitsClearTotal;
RtlpBootStatusFields;
RtlpBucketBlockSizes;
RtlpCapChkTelemetryRunOnceCtx;
RtlpCheckTokenCapabilityGenericMapping;
RtlpCheckTokenMembershipGenericMapping;
RtlpClFlushSize;
RtlpCtPublishInProgress;
RtlpDebugPrintCallbackList;
RtlpDebugPrintCallbackLock;
RtlpDebugPrintCallbacksActive;
RtlpDisableIFEOCaching;
RtlpExceptionLog2;
RtlpExceptionLogCount;
RtlpHeapErrorHandlerThreshold;
RtlpHeapFailureInfo;
RtlpHeapKey;
RtlpHpHeapGlobals;
RtlpHpLegacyEnvHandle;
RtlpHpLfhPerfFlags;
RtlpIntegerChars;
RtlpIntegerWChars;
RtlpInterceptorRoutines;
RtlpInvertedFunctionTable;
RtlpIsDrainRequired;
RtlpIsFlushRequired;
RtlpLegacyApplicationCapabilityBaseRid;
RtlpLegacyApplicationCapabilityNames;
RtlpLfhBucketIndexMap;
RtlpLowFragHeapRandomData;
RtlpModernAppKey;
RtlpMultiUsersInSessionSupported;
RtlpNtAuthority;
RtlpOptimalFlushMethod;
RtlpPerformanceCounterFrequency;
RtlpRangeListEntryLookasideList;
RtlpRegistryPaths;
RtlpRegistryQueryInitialBuffersize;
RtlpRestrictedMapping;
RtlpRunTable;
RtlpRvaCompressionTableScales;
RtlpSafeMachineFrameEntries;
RtlpSearchWidth;
RtlpStackTraceDatabase;
RtlpStatusTable;
RtlpUnwindHistoryTable;
RtlpUnwindOpSlotTable;
SC_DEVICE::`vftable';
SC_DISK::`vftable';
SLEEPSTUDY_ETW_PROVIDER;
SLEEPSTUDY_EVT_SCENARIO_BLOCKER;
SLEEPSTUDY_EVT_SCENARIO_BLOCKER_DATA;
SL_HWID_IF_GUID_BIOS_RSMB;
SL_HWID_IF_GUID_MAC;
SL_HWID_IF_GUID_SYSTEM_MEMORY;
SL_HWID_IF_GUID_SYSTEM_VOLUME;
SQM_INCREMENT_DWORD;
SYSTEM_SLEEP_ETW_CHECKPOINT_GUID;
SbiVmbusArrivalEvent;
SbtRateKeyPath;
SbtSamplingRateValue;
SddlGuidFormat;
SeAdminlessEnableEventLogging;
SeAdminlessEnableWatsonReporting;
SeAdminlessEnableWatsonThrottling;
SeAdminlessEnforcementModeEnabled;
SeAliasAccountOpsSid;
SeAliasAdminsSid;
SeAliasBackupOpsSid;
SeAliasGuestsSid;
SeAliasPowerUsersSid;
SeAliasPrintOpsSid;
SeAliasSystemOpsSid;
SeAliasUsersSid;
SeAllAppPackagesSid;
SeAllRestrictedAppPackagesSid;
SeAnonymousAuthenticationId;
SeAnonymousLogonSid;
SeAnonymousLogonToken;
SeAnonymousLogonTokenNoEveryone;
SeAssignPrimaryTokenPrivilege;
SeAtomDacl;
SeAtomSd;
SeAuditPrivilege;
SeAuditingState;
SeAuditingStateByCategory;
SeAuthenticatedUsersSid;
SeBackupPrivilege;
SeBatchSid;
SeCapabilityPrefixSid;
SeChangeNotifyPrivilege;
SeCiCallbacks;
SeCiDebugOptions;
SeCiPrivateApis;
SeCiStateElementCount;
SeCiStateElements;
SeCompatFlags;
SeConstrainedImpersonationCapabilityGroupSid;
SeConstrainedImpersonationCapabilitySid;
SeCreateGlobalPrivilege;
SeCreatePagefilePrivilege;
SeCreatePermanentPrivilege;
SeCreateSymbolicLinkPrivilege;
SeCreateTokenPrivilege;
SeCreatorGroupServerSid;
SeCreatorGroupSid;
SeCreatorOwnerServerSid;
SeCreatorOwnerSid;
SeDebugPrivilege;
SeDefaultAccountAliasSid;
SeDefaultCapeSd;
SeDefaultRecoveryCapeSd;
SeDelegateSessionUserImpersonatePrivilege;
SeDialupSid;
SeEnableDelegationPrivilege;
SeExports;
SeFailIfExtensionNotSupported;
SeFileSystemNotifyRoutinesExHead;
SeFileSystemNotifyRoutinesHead;
SeHighMandatorySid;
SeILSigningPolicy;
SeILSigningPolicyPtr;
SeILSigningPolicyRuntime;
SeIUserSid;
SeImpersonatePrivilege;
SeIncreaseBasePriorityPrivilege;
SeIncreaseQuotaPrivilege;
SeIncreaseWorkingSetPrivilege;
SeInteractiveSid;
SeLoadDriverPrivilege;
SeLocalServicePublicDacl;
SeLocalServicePublicSd;
SeLocalServiceSid;
SeLocalSid;
SeLocalSystemSid;
SeLockMemoryPrivilege;
SeLowMandatorySid;
SeLpacAppExperienceCapabilitySid;
SeLpacCapabilitySids;
SeLpacClipboardCapabilitySid;
SeLpacComCapabilitySid;
SeLpacCryptoServicesCapabilitySid;
SeLpacEnableWatsonReporting;
SeLpacEnableWatsonThrottling;
SeLpacEnterprisePolicyChangeNotificationsCapabilitySid;
SeLpacIdentityServicesCapabilitySid;
SeLpacImeCapabilitySid;
SeLpacInstrumentationCapabilitySid;
SeLpacMediaCapabilitySid;
SeLpacPackageManagerOperationCapabilitySid;
SeLpacPaymentsCapabilitySid;
SeLpacPnpNotificationsCapabilitySid;
SeLpacPrintingCapabilitySid;
SeLpacServicesManagementCapabilitySid;
SeLpacSessionManagementCapabilitySid;
SeLpacWebPlatformCapabilitySid;
SeLuidToIndexMapping;
SeLuidToIndexMappingData;
SeManageVolumePrivilege;
SeMediumDaclSd;
SeMediumMandatorySid;
SeMediumSacl;
SeMsMinTCBList;
SeMsMinTestTCBList;
SeNetworkServiceSid;
SeNetworkSid;
SeNtAuthoritySid;
SeNullDaclSd;
SeNullSid;
SeOwnerRightsSid;
SePackagePrefixSid;
SePrincipalSelfSid;
SeProcTrustAuthenticodeSid;
SeProcTrustLiteAntimalwareSid;
SeProcTrustLiteAppSid;
SeProcTrustLiteWinSid;
SeProcTrustLiteWinTcbSid;
SeProcTrustNoneSid;
SeProcTrustWinSid;
SeProcTrustWinTcbSid;
SeProfileSingleProcessPrivilege;
SeProtectedMapping;
SePublicDefaultDacl;
SePublicDefaultSd;
SePublicDefaultUnrestrictedDacl;
SePublicDefaultUnrestrictedSd;
SePublicOpenDacl;
SePublicOpenSd;
SePublicOpenUnrestrictedDacl;
SePublicOpenUnrestrictedSd;
SeQuerySigningPolicyExtAllowed;
SeQuerySigningPolicyInit;
SeRegistryReadCapabilitySid;
SeRelabelPrivilege;
SeRemoteShutdownPrivilege;
SeRestorePrivilege;
SeRestrictedSid;
SeSecureBootPolicyBlobHeader;
SeSecureBootPolicyBlobHeaderSize;
SeSecurityPrivilege;
SeServiceSid;
SeSessionImpersonationCapabilityGroupSid;
SeSessionImpersonationCapabilitySid;
SeShutdownPrivilege;
SeSubsystemName;
SeSyncAgentPrivilege;
SeSystemAuthenticationId;
SeSystemDefaultDacl;
SeSystemDefaultSd;
SeSystemEnvironmentPrivilege;
SeSystemMandatorySid;
SeSystemProfilePrivilege;
SeSystemTokenSource;
SeSystemtimePrivilege;
SeTakeOwnershipPrivilege;
SeTcbPrivilege;
SeTimeZonePrivilege;
SeTokenDoesNotTrackSessionObject;
SeTokenLeakTracking;
SeTokenObjectType;
SeTrustedCredManAccessPrivilege;
SeTrustedInstallerSid;
SeUndockPrivilege;
SeUnsolicitedInputPrivilege;
SeUntrustedMandatorySid;
SeUserModeDriversSid;
SeWorldSid;
SearchStrings;
SecondsToStartOf1970;
SecondsToStartOf1980;
SecureDmpEncryptionContext;
SecurityMitigationsProviderGuid;
SecurityProviderGuid;
SepAdtAuditFailureCount;
SepAdtAuditFailureEventLogged;
SepAdtCountEventsDiscarded;
SepAdtCrashOnAuditFailWorkItem;
SepAdtDiscardingAudits;
SepAdtIoStatusBlock;
SepAdtLastAuditFailStatus;
SepAdtLsaRegWatchWorkItem;
SepAdtMaxListLength;
SepAdtMinListLength;
SepAdtRegNotifyHandle;
SepAllowAccessUponLogoff;
SepAllowAllApplicationAceRemoval;
SepAllowSessionImpersonationCap;
SepAtomSd;
SepAuthExtensionHost;
SepBCryptExtensionHost;
SepCrashOnAuditFail;
SepDefaultCapeDacl;
SepDefaultCapeSd;
SepDefaultMandatorySid;
SepDefaultRecoveryCapeDacl;
SepDefaultRecoveryCapeSd;
SepExports;
SepFileTypeName;
SepFilterPrivileges;
SepFilterPrivilegesLong;
SepFilterPrivilegesShort;
SepImportantProcessSd;
SepLearningModeSettings;
SepLocalServicePublicSd;
SepLogonSessions;
SepLsaAuditQueueInfo;
SepLsaDeletedLogonQueueInfo;
SepMandatoryObjectTypePolicy;
SepMandatoryObjectTypePolicyCount;
SepMandatoryObjectTypePolicyLock;
SepMediumDaclSd;
SepNullDaclSd;
SepNumberOfUwpAttributes;
SepNumberOfValidAttributesTypes;
SepOsLoaderTpmDriverLoaded;
SepProcUniqueAttributeName;
SepProcessAccessesToAudit;
SepProcessAuditSd;
SepPublicDefaultSd;
SepPublicDefaultUnrestrictedSd;
SepPublicOpenSd;
SepPublicOpenUnrestrictedSd;
SepRegistryTypeName;
SepRmAuditProcessCommandLine;
SepRmAuditingEnabled;
SepRmCapTable;
SepRmCapTableLock;
SepRmCommandDispatch;
SepRmCommandPortName;
SepRmDbLock;
SepRmDefaultCap;
SepRmEnforceCap;
SepRmGlobalSaclHead;
SepRmGlobalSaclLock;
SepRmLsaCallProcess;
SepRmNotifyMutex;
SepRmState;
SepSamTypeNamePrefix;
SepSensitivePrivileges;
SepServicesFilterPrivileges;
SepSidMapping;
SepSingletonGlobal;
SepSingletonGlobalData;
SepSystemContextSecurityDescriptor;
SepSystemDefaultSd;
SepTokenCapabilitySidSharingEnabled;
SepTokenLeakBreakCount;
SepTokenLeakMethodCount;
SepTokenLeakMethodWatch;
SepTokenLeakProcessCid;
SepTokenLeakToken;
SepTokenMapping;
SepTokenPolicyCounter;
SepTokenPolicyCounterByCategory;
SepTokenSidManagementLoggingEnabled;
SepTokenSidSharingEnabled;
SepTokenSingletonAttributesConfig;
SepUwpAttributes;
SepValidAttributesTypes;
ServerSiloCreateCallbackStart;
ServerSiloCreateCallbackStop;
ServerSiloTerminateCallbackStart;
ServerSiloTerminateCallbackStop;
SessionNotificationGuid;
ShowProgressBar;
SidHashByteToIndexLookupTable;
SmEtwDescriptorPtrs;
SmEventCacheTermination;
SmEventProvider;
SmEventSQMStreamRow;
SmEventStoreCreate;
SmEventStoreDelete;
SmEventStoreIoStats;
SmEventStoreRundown;
SmGlobals;
SmKmGlobals;
SmssEventWorkItem;
SocSubsystemsList;
SoftBootInfo;
SpecialMemoryRanges;
SpiMax311HardwareDriver;
Square1;
Square2;
Square3;
StEventRegionCompactEnd;
StEventRegionCompactStart;
StEventRegionEvict;
StEventRegionRelease;
StEventRegionRundown;
StEventRegionWrite;
StEventStoreAdd;
StEventStoreCorruption;
StEventStoreEmpty;
StEventStorePageRundown;
StEventStoreRemove;
StackOverflowFallback;
StackOverflowFallbackSerialEvent;
StandardBitMapping;
Start;
StringTerminators;
SymCryptParallelSha256Algorithm_default;
SymCryptSha256Algorithm_default;
SymCryptSha256K;
SysEnvTraceLoggingProvider;
SystemContextGenericMapping;
SystemHiveFullPathBuffer;
SystemHiveFullPathName;
SystemStateNames;
SystemTraceControlGuid;
THREATINT_ALLOCVM_LOCAL;
THREATINT_ALLOCVM_LOCAL_KERNEL_CALLER;
THREATINT_ALLOCVM_REMOTE;
THREATINT_ALLOCVM_REMOTE_KERNEL_CALLER;
THREATINT_FREEZE_PROCESS;
THREATINT_MAPVIEW_LOCAL;
THREATINT_MAPVIEW_LOCAL_KERNEL_CALLER;
THREATINT_MAPVIEW_REMOTE;
THREATINT_MAPVIEW_REMOTE_KERNEL_CALLER;
THREATINT_PROTECTVM_LOCAL;
THREATINT_PROTECTVM_LOCAL_KERNEL_CALLER;
THREATINT_PROTECTVM_REMOTE;
THREATINT_PROTECTVM_REMOTE_KERNEL_CALLER;
THREATINT_QUEUEUSERAPC_REMOTE;
THREATINT_QUEUEUSERAPC_REMOTE_KERNEL_CALLER;
THREATINT_READVM_LOCAL;
THREATINT_READVM_REMOTE;
THREATINT_RESUME_PROCESS;
THREATINT_RESUME_THREAD;
THREATINT_SETTHREADCONTEXT_REMOTE;
THREATINT_SETTHREADCONTEXT_REMOTE_KERNEL_CALLER;
THREATINT_SUSPEND_PROCESS;
THREATINT_SUSPEND_THREAD;
THREATINT_THAW_PROCESS;
THREATINT_WRITEVM_LOCAL;
THREATINT_WRITEVM_REMOTE;
ThreadCpuBasePriorityChange;
ThreadCpuPriorityChange;
ThreadIoPriorityChange;
ThreadPagePriorityChange;
ThreadPoolGuid;
ThreadStart;
ThreadStop;
ThreadWorkOnBehalfUpdate;
ThreatIntProviderGuid;
TieredStorage_HeatDelete;
TieredStorage_HeatRead;
TieredStorage_HeatWrite;
TieredStorage_NewVolume;
TieredStorage_TierMove;
TimeZoneCapability;
TmContainerExt;
TmEnlistmentObjectType;
TmLogExt;
TmResourceManagerObjectType;
TmTransactionManagerObjectType;
TmTransactionObjectType;
TokenAttributeLookupTable;
TokenSidManagementLog;
TraceLoggingMetadata;
TraceLoggingMetadataEnd;
TransportName;
TriageImagePageSize;
TtmpAcDcPowerSettingRegistration;
TtmpBatteryCountPowerSettingRegistration;
TtmpBreakOnError;
TtmpDeviceCalloutCrashDumpEnabled;
TtmpDeviceCalloutTimeoutsSet;
TtmpDeviceWatchdogTimeouts;
TtmpEnabled;
TtmpProximityEscapeMsec;
TtmpQueueMapping;
TtmpQueueObjectType;
TtmpSession;
TtmpSessionLock;
TtmpTerminalMapping;
TtmpTerminalObjectType;
TunnelLookasideList;
TunnelMaxAge;
TunnelMaxEntries;
TxtpTextCache;
UNIDENTIFIED_DRIVER;
UNIDENTIFIED_PROCESS;
Uart16550HardwareDriver;
UartHardwareAccess;
UartHardwareDriver;
UartHardwareDrivers;
UmglThreadGuid;
UmsTraceGuid;
UsifHardwareDriver;
VIRTUAL_STORAGE_TYPE_VENDOR_UNKNOWN;
VRP_ORIGINAL_KEY_NAME_PARAMETER_GUID;
VSMB_INTERFACE_GUID;
VerifierDdiDriverName;
VerifierFaultApplicationsBuffer;
VerifierFaultApplicationsBufferSize;
VerifierFaultTagsBuffer;
VerifierFaultTagsBufferSize;
VerifierFilterDriverName;
VerifierIsTrackingPool;
VerifierModifyableOptions;
VerifierNewRuleWorkaround;
VerifierTipDisable;
VerifierTriageActionTaken;
VersionDataKeys;
VfAmdkmpagServiceName;
VfBTSDataManagementArea;
VfBTSInitialized;
VfBTSProcessorFamily;
VfBTSStarted;
VfBTSSupported;
VfBugcheckTmpData;
VfBugcheckTmpDataLock;
VfClearanceFlag;
VfCscServiceName;
VfErrorBugcheckData;
VfErrorBugcheckDataReady;
VfExcludeSections;
VfExcludedDriversList;
VfFaultInjectionBootMinutes;
VfFaultInjectionMaxProbability;
VfFaultInjectionProbability;
VfFilterCreated;
VfFilterDriverObject;
VfFlightOptions;
VfForcedPendingIrps;
VfForcedPendingLog;
VfForcedPendingLogLength;
VfHandleTracingEntries;
VfInitializedWithoutReboot;
VfIoDisabled;
VfIoSwitchedOffNoReboot;
VfIrpDatabaseInitialized;
VfKeCriticalRegionTraces;
VfKeCriticalRegionTracesIndex;
VfKeCriticalRegionTracesLength;
VfKernelImageName;
VfKsDllBase;
VfKsName;
VfKsSizeOfImage;
VfMandatoryThunks;
VfMrxsmbDllBase;
VfMrxsmbName;
VfMrxsmbSizeOfImage;
VfMupServiceName;
VfOptionFlags;
VfOrderDependentThunks;
VfOrderDependentThunksBitMap;
VfOrderDependentThunksBitMapHeader;
VfPersistentStateRoot;
VfPoolDelayFreeData;
VfPoolThunks;
VfPoolThunksBitMap;
VfPoolThunksBitMapHeader;
VfPoolTraces;
VfPoolTracesIndex;
VfPoolTracesLength;
VfProtectedDriverNames;
VfRandomTargetsBitMap;
VfRandomTargetsBitMapHeader;
VfRandomVerifiedDrivers;
VfRdbssServiceName;
VfRealHalAllocateMapRegisters;
VfRegularThunks;
VfRegularThunksBitMap;
VfRegularThunksBitMapHeader;
VfRuleClasses;
VfRuleClassesRecord;
VfRuleClassesSize;
VfSafeMode;
VfShutdownThread;
VfSuspectDriversList;
VfSynth3DvscName;
VfSynth3DvspName;
VfTcpIpDllBase;
VfTcpIpName;
VfTcpIpSizeOfImage;
VfTdxDllBase;
VfTdxName;
VfTdxSizeOfImage;
VfThunksExtended;
VfTmDllBase;
VfTmName;
VfTmSizeOfImage;
VfVerifyMode;
VfVidName;
VfWdCancelTimeoutTicks;
VfWdIrpListHead;
VfWdIrpListLock;
VfWdIrpTimeoutMsec;
VfWdmDispatchTable;
VfWin32kDllBase;
VfWin32kName;
VfWin32kSizeOfImage;
VfXdvDispatchTable;
VfXdvExcludedDriversList;
VfXdvIoCallbackThunks;
VfXdvSuppressDriversBuffer;
VfXdvSuppressDriversBufferLength;
VfXdvThunks;
VfXdvThunksBitMap;
VfXdvThunksBitMapHeader;
VfZeroAllPagesRunning;
ViActiveVerifierThunks;
ViAdapterList;
ViAllocationsFailedDeliberately;
ViAvlInitialized;
ViAvlNodeLookaside;
ViBugcheckLog;
ViBugcheckLogIndex;
ViBugcheckWorkaroundLog;
ViBugcheckWorkaroundLogIndex;
ViCiDefaultActions;
ViCtxHintIndex;
ViCtxInitializedIsrStateBlocks;
ViCtxInterrupts;
ViCtxInterruptsChecked;
ViCtxIsrStateBlocks;
ViCtxXStateEnabledMask;
ViCtxXStateSize;
ViDMADisabledNoRebootNeeded;
ViDdiDeviceObjectArray;
ViDdiInitialized;
ViDdiWmiMofKey;
ViDdiWmiMofResourceName;
ViDeadlockAgeWindow;
ViDeadlockChildrenCountMaximum;
ViDeadlockDatabaseLock;
ViDeadlockDatabaseOwner;
ViDeadlockDefaultActions;
ViDeadlockDetectionEnabled;
ViDeadlockGlobals;
ViDeadlockIssue;
ViDeadlockNodeLookaside;
ViDeadlockReservedNodes;
ViDeadlockReservedResources;
ViDeadlockReservedThreads;
ViDeadlockResourceLookaside;
ViDeadlockResourceTypeInfo;
ViDeadlockResourceTypeSizeInfo;
ViDeadlockState;
ViDeadlockThreadLookaside;
ViDeadlockTrimThreshold;
ViDeadlockVerifyOnlySpinlocks;
ViDesktopTypeName;
ViDevObjAllocationFailures;
ViDevObjAvl;
ViDevObjInitialized;
ViDmaOperations;
ViDmaVerifierTag;
ViDomainCommonBufferList;
ViDoubleBufferDma;
ViDriverKernelBase;
ViDriverKernelEnd;
ViDriverXDVBase;
ViDriverXDVImageSize;
ViDriversLoadLock;
ViDriversLoadLockOwner;
ViEnableAfterHibernate;
ViErrorDescriptions;
ViEtwLastStopTraceCount;
ViExpectedDriversCount;
ViFaultApplicationsList;
ViFaultInjectionLock;
ViFaultTagsList;
ViFaultTraces;
ViFaultTracesIndex;
ViFaultTracesLength;
ViFaultsDecisions;
ViFaultsDisabled;
ViFaultsForceAllAPIs;
ViFaultsInitialized;
ViFnExtensionHiberFunc;
ViFnXdvNotifyExtensions;
ViFnXdvQueryDispatchTable;
ViForceAllDriversSuspect;
ViFullyInitialized;
ViGenericMajorFunctionList;
ViHalDefaultActions;
ViHalEnabledInThePast;
ViHalWaitBlockLookaside;
ViHandleBreaksEnabled;
ViHaveFaultTags;
ViImageExecutionOptions;
ViInjectDmaFailures;
ViInjectInPagePathOnly;
ViInternalTriageRules;
ViIoCallbackStateLookaside;
ViIoCallbacksInitialized;
ViIrpCallDriverDataList;
ViIrpDatabase;
ViIrpDatabaseAddressRanges;
ViIrpDatabaseLock;
ViIrpLogDatabase;
ViIrpLogDatabaseLock;
ViIrpLogDdiLock;
ViKeTrackIrqlDisabled;
ViKeTrackIrqlSkipped;
ViLoadedDriversCount;
ViLocalSystemDescriptor;
ViLookasideAllocationFailures;
ViLookasideAlreadyLoadedDrivers;
ViLookasideAvl;
ViLookasideInitialized;
ViMajorVerifierRoutines;
ViMaxCommonBuffersPerAdapter;
ViMaxMapRegistersPerAdapter;
ViMemoryFillSize;
ViNotifyEvent;
ViObjectContextInitialized;
ViObjectContextTableLookaside;
ViPacketLookaside;
ViPendingProbability;
ViPendingWorkerIndexHint;
ViPendingWorkers;
ViPendingWorkersBusyCount;
ViPendingWorkersCount;
ViProtectBuffers;
ViRandomSeed;
ViRecursionDepthLimitFromRegistry;
ViRemLockAllocationFailures;
ViRemLockAvl;
ViRemLockInitialized;
ViRemLockReusedCount;
ViRequiredTimeSinceBoot;
ViRequiredTimeSinceBootInMsecs;
ViResourceAvl;
ViResourceInitialized;
ViResourceNotTracked;
ViResourceStaleNodes;
ViResourcesAlreadyLoadedDrivers;
ViSearchedNodesLimitFromRegistry;
ViSessionDataInitialized;
ViSessionDataLookaside;
ViShortTime;
ViShutdownTimeoutCount;
ViShutdownWatchdogDpc;
ViShutdownWatchdogTimer;
ViStackSwitchAlreadyReported;
ViSufficientlyBootedForDmaFailure;
ViSuperDebug;
ViSystemSufficientlyBooted;
ViTargetAllocationFailures;
ViTargetDriversAvl;
ViTargetInitialized;
ViTargetWMIRegistrationMismatches;
ViTrackIrqlIndex;
ViTrackIrqlQueue;
ViTrackIrqlQueueLength;
ViTriageCrashData;
ViTrimSpaces;
ViVerifierBugcheckAttributes;
ViVerifierDriverAddedSpecialThunkListHead;
ViVerifierDriverAddedThunkListHead;
ViVerifierEnabled;
ViVerifierSpecialThunkTables;
ViVerifyAllDrivers;
ViVerifyBTSBufferSize;
ViVerifyDma;
ViVerifyTargets;
ViVerifyTriage;
ViVerifyTriageRules;
ViVerifyTriageRulesSize;
ViWdBreaksEnabled;
ViWdCancelIrpCount;
ViWdCancelling;
ViWdInitialized;
ViWdIrpListLength;
ViWdIrpListLengthMaximum;
ViWdIrpLookasideList;
ViWdIrpTimer;
ViWdIrpTimerDpc;
ViWdTickCount;
ViWindowStationTypeName;
ViXdvEPBound;
ViXdvEPThunksNoXdvEntry;
ViXdvThunksBoundToXdv;
ViXdvThunksNoXdvEntry;
ViXdvThunksNotFound;
ViXdvThunksNotPristine;
ViXdvThunksShared;
ViXdvTipUtils;
VmPauseOutswapSizeCapMB;
VmTbFlushEnabled;
VmbFsInterfaceTypeGuid;
VmpExtensionHost;
VmpHostInterface;
VrpActiveSilosLock;
VrpAllowContainerNesting;
VrpAppString;
VrpCallbackCookie;
VrpDeviceObject;
VrpDriverObject;
VrpHardCodedSdBlob;
VrpHostLoadedHives;
VrpHostLoadedHivesLock;
VrpJobContextType;
VrpMachineString;
VrpNumActiveSilos;
VrpRegistryString;
VrpRegistryValuesTable;
VrpRootHivePath;
VrpRootKeyPaths;
VrpSiloContextSlot;
VrpUserString;
VrpWcString;
VslHvciInterface;
VslVsmEnabled;
VslpIumCsWnfSubscription;
VslpIumEfiLock;
VslpIumKsrInitContext;
VslpIumThreadSemaphore;
VslpKsrCallback;
VslpNestedPageProtectionFlags;
WDI_SEM_EVENT_INIT_MISCONFIG;
WDI_SEM_EVENT_INIT_PROVIDER_MAX;
WDI_SEM_EVENT_INIT_SCENARIO_CONTEXT_PROVIDER_MAX;
WDI_SEM_EVENT_INIT_SCENARIO_END_EVENT_MAX;
WDI_SEM_EVENT_INIT_SCENARIO_MAX;
WDI_SEM_EVENT_SCENARIO_END;
WDI_SEM_EVENT_SCENARIO_END_FAILED;
WDI_SEM_EVENT_SCENARIO_INFLIGHT_MAX;
WDI_SEM_EVENT_SCENARIO_START;
WDI_SEM_EVENT_SCENARIO_START_FAILED;
WDI_SEM_EVENT_SCENARIO_TIMEOUT;
WDI_SEM_EVENT_SQM_ADD_TO_STREAM;
WDI_SEM_EVENT_SQM_INCREMENT_DWORD;
WDI_SEM_EVENT_SQM_INIT;
WDI_SEM_PROVIDER;
WHEAErrorInjectionMethods_GUID;
WHEAErrorSourceMethods_GUID;
WHEAPolicyManagementMethods_GUID;
WHEA_ERROR_PACKET_SECTION_GUID;
WHEA_ETW_PROVIDER;
WHEA_RECORD_CREATOR_GUID;
WHEA_SQM_EVENT_ADDTOSTREAM;
WHEA_SQM_EVENT_INCREMENTDWORD;
WHEA_SQM_EVENT_SETDWORD;
WHEA_SQM_EVENT_SETIFMAXDWORD;
WNF_BLTH_BLUETOOTH_DEVICE_DOCK_STATUS;
WNF_BOOT_DIRTY_SHUTDOWN;
WNF_BOOT_INVALID_TIME_SOURCE;
WNF_CONT_RESTORE_FROM_SNAPSHOT_COMPLETE;
WNF_ETW_SUBSYSTEM_INITIALIZED;
WNF_EXEC_THERMAL_LIMITER_TERMINATE_BACKGROUND_TASKS;
WNF_FLT_RUNDOWN_WAIT;
WNF_FSRL_OPLOCK_BREAK;
WNF_FSRL_TIERED_VOLUME_DETECTED;
WNF_HVL_CPU_MGMT_PARTITION;
WNF_MM_BAD_MEMORY_PENDING_REMOVAL;
WNF_OLIC_OS_LICENSE_NON_GENUINE;
WNF_PNPA_DEVNODES_CHANGED;
WNF_PNPA_DEVNODES_CHANGED_SESSION;
WNF_PNPA_HARDWAREPROFILES_CHANGED;
WNF_PNPA_HARDWAREPROFILES_CHANGED_SESSION;
WNF_PNPA_PORTS_CHANGED;
WNF_PNPA_PORTS_CHANGED_SESSION;
WNF_PNPA_VOLUMES_CHANGED;
WNF_PNPA_VOLUMES_CHANGED_SESSION;
WNF_PNPB_AWAITING_RESPONSE;
WNF_PNPC_CONTAINER_CONFIG_REQUESTED;
WNF_PNPC_DEVICE_INSTALL_REQUESTED;
WNF_PO_BACKGROUND_ACTIVITY_POLICY;
WNF_PO_BASIC_BRIGHTNESS_ENGINE_DISABLED;
WNF_PO_BATTERY_CHARGE_LEVEL;
WNF_PO_BATTERY_CHARGE_LIMITING_MODE;
WNF_PO_BATTERY_DISCHARGING;
WNF_PO_BRIGHTNESS_ALS_OFFSET;
WNF_PO_CHARGE_ESTIMATE;
WNF_PO_COMPOSITE_BATTERY;
WNF_PO_DISCHARGE_ESTIMATE;
WNF_PO_DISCHARGE_START_FILETIME;
WNF_PO_DISPLAY_REQUEST_ACTIVE;
WNF_PO_DRIPS_DEVICE_CONSTRAINTS_REGISTERED;
WNF_PO_ENERGY_SAVER_OVERRIDE;
WNF_PO_ENERGY_SAVER_SETTING;
WNF_PO_ENERGY_SAVER_STATE;
WNF_PO_INPUT_SUPPRESS_NOTIFICATION;
WNF_PO_INPUT_SUPPRESS_NOTIFICATION_EX;
WNF_PO_MODERN_STANDBY_EXIT_INITIATED;
WNF_PO_OPPORTUNISTIC_CS;
WNF_PO_POWER_BUTTON_STATE;
WNF_PO_POWER_STATE_CHANGE;
WNF_PO_PRESLEEP_NOTIFICATION;
WNF_PO_PREVIOUS_SHUTDOWN_STATE;
WNF_PO_PRIMARY_DISPLAY_VISIBLE_STATE;
WNF_PO_SCENARIO_CHANGE;
WNF_PO_SLEEP_STUDY_USER_PRESENCE_CHANGED;
WNF_PO_SW_HW_DRIPS_DIVERGENCE;
WNF_PO_SYSTEM_TIME_CHANGED;
WNF_PO_THERMAL_HIBERNATE_OCCURRED;
WNF_PO_THERMAL_OVERTHROTTLE;
WNF_PO_THERMAL_SHUTDOWN_OCCURRED;
WNF_PO_THERMAL_STANDBY;
WNF_PO_USER_AWAY_PREDICTION;
WNF_PO_VIDEO_INITIALIALIZED;
WNF_PO_WAKE_ON_VOICE_STATE;
WNF_PO_WEAK_CHARGER;
WNF_PS_WAKE_CHARGE_RESOURCE_POLICY;
WNF_SBS_UPDATE_AVAILABLE;
WNF_SEB_APP_LAUNCH_PREFETCH;
WNF_SEB_AUDIO_ACTIVITY;
WNF_SEB_DEV_MNF_CUSTOM_NOTIFICATION_RECEIVED;
WNF_SEB_FULL_SCREEN_VIDEO_PLAYBACK;
WNF_SEB_LOW_LATENCY_POWER_REQUEST;
WNF_SEB_MIXED_REALITY;
WNF_SEB_NETWORK_CONNECTIVITY_IN_STANDBY;
WNF_SEB_SYSTEM_LPE;
WNF_SEB_TIME_ZONE_CHANGE;
WNF_SRC_SYSTEM_RADIO_CHANGED;
WNF_SRUM_SCREENONSTUDY_SESSION;
WNF_UBPM_CONSOLE_MONITOR;
WNF_WER_SERVICE_START;
WdipContextLoggerId;
WdipDiagLoggerId;
WdipSemDisabledScenarioTable;
WdipSemEnabled;
WdipSemEnabledInstanceTable;
WdipSemFrequentScenarioTable;
WdipSemInitialized;
WdipSemOneSecond;
WdipSemPool;
WdipSemProviderTable;
WdipSemPushLock;
WdipSemRegHandle;
WdipSemScenarioTable;
WdipSemTimeoutEnabled;
WdipSemTimeoutValue;
WdipTimeoutTimer;
WdipTimeoutTimerParameters;
WdipTimeoutWorkEnabled;
WdipTimeoutWorkItem;
WeakChargerChargeDropMilliPercent;
WheaDrsDpc;
WheaDrsInitialized;
WheaDrsItemsToProcess;
WheaDrsList;
WheaDrsWorkItem;
WheaPassiveDrsItemsToProcess;
WheaPassiveDrsList;
WheaPassiveDrsListLock;
WheaPendingDrsInterrupt;
WheaRegPolicyDisableOffline;
WheaRegPolicyIgnoreDummyWrite;
WheaRegPolicyMemPersistOffline;
WheaRegPolicyMemPfaDisable;
WheaRegPolicyMemPfaPageCount;
WheaRegPolicyMemPfaThreshold;
WheaRegPolicyMemPfaTimeout;
WheaRegPolicyTable;
WheaRegPolicyTableChanged;
WheaRegistryKeysPresent;
WheapClearPoisonSupported;
WheapConfigTableLock;
WheapCrashDumpInitialized;
WheapDispatchPtr;
WheapErrorRecordId;
WheapErrorSourceTable;
WheapEtwHandle;
WheapEventingInitialized;
WheapInUsePageOfflineNotifyInit;
WheapInUsePageOfflineNotifyList;
WheapInUsePageOfflineNotifyLock;
WheapInitializationComplete;
WheapMaxCorrectedMCEOutstanding;
WheapPfaInitialized;
WheapPfaList;
WheapPfaLock;
WheapPolicyDisableOffline;
WheapPolicyIgnoreDummyWrite;
WheapPolicyMemPersistOffline;
WheapPolicyMemPfaDisable;
WheapPolicyMemPfaPageCount;
WheapPolicyMemPfaThreshold;
WheapPolicyMemPfaTimeout;
WheapPrevErrList;
WheapPreviousSessionFailure;
WheapSingleBitEccErrorThreshold;
WheapSourceConfiguration;
WheapSqmWaitQueued;
WheapSqmWaitRetryCount;
WheapSqmWaitTimeout;
WheapSqmWaitTimer;
WheapSqmWaitTimerDpc;
WheapSqmWaitWorkQueueItem;
WheapStatus;
WheapTriageDump;
WheapTriageDumpCreation;
WheapTriageDumpGenerated;
WheapTriageDumpLength;
WheapTriageDumpLock;
WheapTriageDumpReported;
WheapWaitingETWEventLock;
WheapWaitingETWEvents;
WheapWmiGuidList;
WheapWorkQueue;
Win7VersionHookCollections;
Win7VersionKernelHooks;
Win7VersionLieShim;
Win7VersionLieShimGuid;
Win81VersionHookCollections;
Win81VersionKernelHooks;
Win81VersionLieShim;
Win81VersionLieShimGuid;
Win8VersionHookCollections;
Win8VersionKernelHooks;
Win8VersionLieShim;
Win8VersionLieShimGuid;
WinSqmGlobalSession;
WindowsSystemAttributes;
WmiIdleAccntEventEnabled;
WmiIdleStateEventEnabled;
WmiIrpNames;
WmiPerfStateDomainEventEnabled;
WmiPerfStateEventEnabled;
WmiThermalEventEnabled;
WmiThermalPolicyEventEnabled;
WmipBinaryMofGuid;
WmipCancelSpinLock;
WmipDSChunkInfo;
WmipDSChunkInfoLookaside;
WmipDSHead;
WmipDSHeadPtr;
WmipDataProviderPnPIdInstanceNamesGuid;
WmipDataProviderPnpidGuid;
WmipDefaultAccessSd;
WmipDefaultAccessSecurityDescriptor;
WmipEventWorkItems;
WmipEventWorkQueueItem;
WmipFirmwareTableArray;
WmipGEChunkInfo;
WmipGEChunkInfoLookaside;
WmipGEHead;
WmipGEHeadPtr;
WmipGenericMapping;
WmipGuidList;
WmipGuidObjectType;
WmipISChunkInfo;
WmipISChunkInfoLookaside;
WmipInUseRegEntryCount;
WmipInUseRegEntryHead;
WmipInstIdChunkHead;
WmipMRChunkInfo;
WmipMRChunkInfoLookaside;
WmipMRHead;
WmipMRHeadPtr;
WmipNPEvent;
WmipNPNotificationSpinlock;
WmipProviderIdCounter;
WmipRegLookaside;
WmipRegWorkItemCount;
WmipRegWorkList;
WmipRegWorkQueue;
WmipRegistrationSpinLock;
WmipRegistryPath;
WmipSMBiosLock;
WmipSMBiosTableLength;
WmipSMBiosTablePhysicalAddress;
WmipSMBiosVersionInfo;
WmipSMMutex;
WmipServiceDeviceObject;
WmipSysId1394;
WmipSysId1394Count;
WmipSysIdRead;
WmipSysIdStatus;
WmipSysIdUuid;
WmipSysIdUuidCount;
WmipSystemSubjectContext;
WmipWmiLibInfo;
WnfGuid;
XdvEnabled;
XpressHashFunction;
XpressHighBitIndexTable;
ZeroPte;
_IMPORT_DESCRIPTOR_BOOTVID;
_IMPORT_DESCRIPTOR_CI;
_IMPORT_DESCRIPTOR_HAL;
_IMPORT_DESCRIPTOR_PSHED;
_IMPORT_DESCRIPTOR_cng;
_IMPORT_DESCRIPTOR_ext-ms-win-fs-clfs-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-clipsp-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-kcminitcfg-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-ksecurity-l1-1-1;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-ksigningpolicy-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-ksr-l1-1-2;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-stateseparation-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-tm-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-trace-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-ucode-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-werkernel-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-werkernel-l1-1-1;
_IMPORT_DESCRIPTOR_kdcom;
_IMPORT_DESCRIPTOR_msrpc;
_NULL_IMPORT_DESCRIPTOR;
__PchSym_;
_clocalestr;
_guard_check_icall_fptr;
_guard_dispatch_icall_fptr;
_guard_fids_table;
_guard_iat_table;
_imp_BCryptExportKey;
_imp_CiInitialize;
_imp_ClfsAddLogContainer;
_imp_ClfsCloseLogFileObject;
_imp_ClfsCreateLogFile;
_imp_ClfsCreateMarshallingArea;
_imp_ClfsDeleteLogByPointer;
_imp_ClfsDeleteMarshallingArea;
_imp_ClfsFlushToLsn;
_imp_ClfsGetLogFileInformation;
_imp_ClfsLsnContainer;
_imp_ClfsLsnDifference;
_imp_ClfsLsnEqual;
_imp_ClfsLsnInvalid;
_imp_ClfsLsnLess;
_imp_ClfsMgmtDeregisterManagedClient;
_imp_ClfsMgmtInstallPolicy;
_imp_ClfsMgmtRegisterManagedClient;
_imp_ClfsReadLogRecord;
_imp_ClfsReadNextLogRecord;
_imp_ClfsReadRestartArea;
_imp_ClfsReserveAndAppendLog;
_imp_ClfsTerminateReadLog;
_imp_ClfsWriteRestartArea;
_imp_ClipSpInitialize;
_imp_ClipSpUninitialize;
_imp_CmCompleteInitMachineConfig;
_imp_CmSetInitMachineConfig;
_imp_ExpInitializeStateSeparationPhase0;
_imp_ExpInitializeStateSeparationPhase1;
_imp_ExpInitializeStateSeparationPhase2;
_imp_ExpMicrocodeInformationLoad;
_imp_ExpMicrocodeInformationUnload;
_imp_ExpMicrocodeInitialization;
_imp_HalAcpiGetTableEx;
_imp_HalAllProcessorsStarted;
_imp_HalAllocateCrashDumpRegisters;
_imp_HalCalibratePerformanceCounter;
_imp_HalDisableInterrupt;
_imp_HalEnableInterrupt;
_imp_HalEnumerateProcessors;
_imp_HalGetBusDataByOffset;
_imp_HalGetEnvironmentVariable;
_imp_HalGetEnvironmentVariableEx;
_imp_HalGetInterruptTargetInformation;
_imp_HalGetMemoryCachingRequirements;
_imp_HalGetMessageRoutingInfo;
_imp_HalGetProcessorIdByNtNumber;
_imp_HalGetVectorInput;
_imp_HalHandleMcheck;
_imp_HalHandleNMI;
_imp_HalInitSystem;
_imp_HalInitializeBios;
_imp_HalInitializeOnResume;
_imp_HalInitializeProcessor;
_imp_HalIsHyperThreadingEnabled;
_imp_HalPerformEndOfInterrupt;
_imp_HalProcessorIdle;
_imp_HalQueryEnvironmentVariableInfoEx;
_imp_HalQueryMaximumProcessorCount;
_imp_HalQueryRealTimeClock;
_imp_HalRegisterDynamicProcessor;
_imp_HalRegisterErrataCallbacks;
_imp_HalReportResourceUsage;
_imp_HalRequestClockInterrupt;
_imp_HalRequestDeferredRecoveryServiceInterrupt;
_imp_HalRequestIpi;
_imp_HalRequestIpiSpecifyVector;
_imp_HalRequestSoftwareInterrupt;
_imp_HalReturnToFirmware;
_imp_HalSendNMI;
_imp_HalSendSoftwareInterrupt;
_imp_HalSetBusDataByOffset;
_imp_HalSetEnvironmentVariable;
_imp_HalSetEnvironmentVariableEx;
_imp_HalSetRealTimeClock;
_imp_HalStartDynamicProcessor;
_imp_HalStartNextProcessor;
_imp_HalStartProfileInterrupt;
_imp_HalStopProfileInterrupt;
_imp_HalTranslateBusAddress;
_imp_KdHvComPortInUse;
_imp_KdInitialize;
_imp_KdPower;
_imp_KdReceivePacket;
_imp_KdSendPacket;
_imp_KdSetHiberRange;
_imp_KeBugCheckEx;
_imp_KeFlushWriteBuffer;
_imp_KeQueryPerformanceCounter;
_imp_KeStallExecutionProcessor;
_imp_KsrClaimPersistedMemory;
_imp_KsrCleanupPageDatabase;
_imp_KsrEnumeratePersistedMemory;
_imp_KsrFreePersistedMemory;
_imp_KsrFreePersistedMemoryBlock;
_imp_KsrGetFirmwareInformation;
_imp_KsrInitPageDatabase;
_imp_KsrInitSystem;
_imp_KsrMdlToMemoryRuns;
_imp_KsrPersistMemoryWithMetadata;
_imp_KsrQueryMetadata;
_imp_MesDecodeBufferHandleCreate;
_imp_MesEncodeIncrementalHandleCreate;
_imp_MesHandleFree;
_imp_MesIncrementalHandleReset;
_imp_NdrMesTypeDecode3;
_imp_NdrMesTypeEncode3;
_imp_NtCommitComplete;
_imp_NtCommitEnlistment;
_imp_NtCommitTransaction;
_imp_NtCreateEnlistment;
_imp_NtCreateResourceManager;
_imp_NtCreateTransaction;
_imp_NtCreateTransactionManager;
_imp_NtEnumerateTransactionObject;
_imp_NtFreezeTransactions;
_imp_NtGetNotificationResourceManager;
_imp_NtOpenEnlistment;
_imp_NtOpenResourceManager;
_imp_NtOpenTransaction;
_imp_NtOpenTransactionManager;
_imp_NtPrePrepareComplete;
_imp_NtPrePrepareEnlistment;
_imp_NtPrepareComplete;
_imp_NtPrepareEnlistment;
_imp_NtPropagationComplete;
_imp_NtPropagationFailed;
_imp_NtQueryInformationEnlistment;
_imp_NtQueryInformationResourceManager;
_imp_NtQueryInformationTransaction;
_imp_NtQueryInformationTransactionManager;
_imp_NtReadOnlyEnlistment;
_imp_NtRecoverEnlistment;
_imp_NtRecoverResourceManager;
_imp_NtRecoverTransactionManager;
_imp_NtRegisterProtocolAddressInformation;
_imp_NtRenameTransactionManager;
_imp_NtRollbackComplete;
_imp_NtRollbackEnlistment;
_imp_NtRollbackTransaction;
_imp_NtRollforwardTransactionManager;
_imp_NtSetInformationEnlistment;
_imp_NtSetInformationResourceManager;
_imp_NtSetInformationTransaction;
_imp_NtSetInformationTransactionManager;
_imp_NtSinglePhaseReject;
_imp_NtThawTransactions;
_imp_PshedAllocateMemory;
_imp_PshedArePluginsPresent;
_imp_PshedAttemptErrorRecovery;
_imp_PshedBugCheckSystem;
_imp_PshedClearErrorRecord;
_imp_PshedDisableErrorSource;
_imp_PshedEnableErrorSource;
_imp_PshedFinalizeErrorRecord;
_imp_PshedFreeMemory;
_imp_PshedGetAllErrorSources;
_imp_PshedGetBootErrorPacket;
_imp_PshedGetInjectionCapabilities;
_imp_PshedInitialize;
_imp_PshedInjectError;
_imp_PshedIsSystemWheaEnabled;
_imp_PshedReadErrorRecord;
_imp_PshedSetErrorSourceInfo;
_imp_PshedWriteErrorRecord;
_imp_QueryUpdateFileEaAllowedExt;
_imp_RpcExceptionFilter;
_imp_SeQuerySigningPolicyExt;
_imp_TmCancelPropagationRequest;
_imp_TmCommitComplete;
_imp_TmCommitEnlistment;
_imp_TmCommitTransaction;
_imp_TmCreateEnlistment;
_imp_TmCurrentTransaction;
_imp_TmDereferenceEnlistmentKey;
_imp_TmEnableCallbacks;
_imp_TmEndPropagationRequest;
_imp_TmFreezeTransactions;
_imp_TmGetTransactionId;
_imp_TmInitSystem;
_imp_TmInitSystemPhase2;
_imp_TmInitializeTransactionManager;
_imp_TmIsKTMCommitCoordinator;
_imp_TmIsTransactionActive;
_imp_TmPrePrepareComplete;
_imp_TmPrePrepareEnlistment;
_imp_TmPrepareComplete;
_imp_TmPrepareEnlistment;
_imp_TmPropagationComplete;
_imp_TmPropagationFailed;
_imp_TmReadOnlyEnlistment;
_imp_TmRecoverEnlistment;
_imp_TmRecoverResourceManager;
_imp_TmRecoverTransactionManager;
_imp_TmReferenceEnlistmentKey;
_imp_TmRenameTransactionManager;
_imp_TmRequestOutcomeEnlistment;
_imp_TmRollbackComplete;
_imp_TmRollbackEnlistment;
_imp_TmRollbackTransaction;
_imp_TmSetCurrentTransaction;
_imp_TmShutdownSystem;
_imp_TmSinglePhaseReject;
_imp_TmThawTransactions;
_imp_TraceInitSystem;
_imp_VidBitBlt;
_imp_VidBitBltEx;
_imp_VidBufferToScreenBlt;
_imp_VidCleanUp;
_imp_VidDisplayString;
_imp_VidInitialize;
_imp_VidResetDisplay;
_imp_VidScreenToBufferBlt;
_imp_VidSetScrollRegion;
_imp_VidSetTextColor;
_imp_VidSolidColorFill;
_imp_WerLiveKernelCancelReport;
_imp_WerLiveKernelCloseHandle;
_imp_WerLiveKernelCreateReport;
_imp_WerLiveKernelInitSystem;
_imp_WerLiveKernelOpenDumpFile;
_imp_WerLiveKernelSubmitReport;
_imp_ZwClose;
_imp_ZwOpenKey;
_imp_ZwPowerInformation;
_imp_ZwQueryLicenseValue;
_imp_ZwQueryValueKey;
_initiallocalestructinfo;
_initiallocinfo;
_lconv_c;
_lconv_static_W_decimal;
_lconv_static_W_null;
_lconv_static_decimal;
_lconv_static_null;
_lookuptable;
_lookuptable_s;
_mb_cur_max;
_newclmap;
_newctype;
_newcumap;
_ps_0;
_ps_1;
_ps_10;
_ps_11;
_ps_12;
_ps_13;
_ps_14;
_ps_15;
_ps_16;
_ps_17;
_ps_18;
_ps_19;
_ps_2;
_ps_20;
_ps_21;
_ps_22;
_ps_23;
_ps_24;
_ps_25;
_ps_26;
_ps_27;
_ps_28;
_ps_29;
_ps_3;
_ps_30;
_ps_31;
_ps_32;
_ps_33;
_ps_34;
_ps_35;
_ps_36;
_ps_37;
_ps_38;
_ps_39;
_ps_4;
_ps_40;
_ps_41;
_ps_42;
_ps_43;
_ps_44;
_ps_45;
_ps_46;
_ps_47;
_ps_48;
_ps_49;
_ps_5;
_ps_50;
_ps_51;
_ps_52;
_ps_53;
_ps_54;
_ps_55;
_ps_56;
_ps_57;
_ps_58;
_ps_59;
_ps_6;
_ps_60;
_ps_61;
_ps_62;
_ps_63;
_ps_64;
_ps_65;
_ps_66;
_ps_67;
_ps_68;
_ps_69;
_ps_7;
_ps_70;
_ps_71;
_ps_72;
_ps_73;
_ps_74;
_ps_75;
_ps_76;
_ps_77;
_ps_78;
_ps_79;
_ps_8;
_ps_80;
_ps_81;
_ps_82;
_ps_83;
_ps_84;
_ps_85;
_ps_86;
_ps_87;
_ps_88;
_ps_89;
_ps_9;
_ps_90;
_ps_a;
_ps_z;
_real;
_security_cookie;
_security_cookie_complement;
_ti_a;
_ts_0;
_ts_1;
_ts_10;
_ts_11;
_ts_12;
_ts_13;
_ts_14;
_ts_15;
_ts_16;
_ts_17;
_ts_18;
_ts_19;
_ts_2;
_ts_20;
_ts_21;
_ts_22;
_ts_23;
_ts_24;
_ts_25;
_ts_26;
_ts_27;
_ts_28;
_ts_29;
_ts_3;
_ts_30;
_ts_31;
_ts_32;
_ts_33;
_ts_34;
_ts_35;
_ts_36;
_ts_37;
_ts_38;
_ts_39;
_ts_4;
_ts_40;
_ts_41;
_ts_42;
_ts_43;
_ts_44;
_ts_45;
_ts_46;
_ts_47;
_ts_48;
_ts_49;
_ts_5;
_ts_50;
_ts_51;
_ts_52;
_ts_53;
_ts_54;
_ts_55;
_ts_56;
_ts_57;
_ts_58;
_ts_59;
_ts_6;
_ts_60;
_ts_61;
_ts_62;
_ts_63;
_ts_64;
_ts_65;
_ts_66;
_ts_67;
_ts_68;
_ts_69;
_ts_7;
_ts_70;
_ts_71;
_ts_72;
_ts_73;
_ts_74;
_ts_75;
_ts_76;
_ts_77;
_ts_78;
_ts_79;
_ts_8;
_ts_80;
_ts_81;
_ts_82;
_ts_83;
_ts_84;
_ts_85;
_ts_86;
_ts_87;
_ts_88;
_ts_89;
_ts_9;
_ts_90;
_ts_a;
_ts_z;
_xmm;
_xmmffffffffffff003fffffffffffff003f;
_xmmffffffffffffffffffff800000000000;
_xmmffffffffffffffffffffffffffffffff;
_ymm;
`EnableManifestedProviderForMicrosoftTelemetry'::`2'::Traits;
`ObpTraceDeferredDeletionWorker'::`2'::ObjectEventList;
`PcwpRegisterEventTracingCounterSet'::`2'::Descriptors;
`PcwpRegisterEventTracingSessionCounterSet'::`2'::Descriptors;
`PcwpRegisterFileSystemDiskIOCounterSet'::`2'::Descriptors;
`PcwpRegisterProcessorCounterSet'::`2'::Descriptors;
`PcwpRegisterSynchCounterSet'::`2'::Descriptors;
`PcwpRegisterSynchNumaCounterSet'::`2'::Descriptors;
`PcwpRegisterThermalCounterSet'::`2'::Descriptors;
`SMKM_STORE<SM_TRAITS>::SmStGetPriorityByMemoryCondition'::`2'::PriorityByMemoryCondition;
`ST_STORE<SM_TRAITS>::StDmCheckForCompaction'::`2'::ThresholdShiftTableFile;
`ST_STORE<SM_TRAITS>::StDmCheckForCompaction'::`2'::ThresholdShiftTableInMem;
`SetFailureLocation'::`3'::_TlgEvent;
`_CmDeleteCommonClassRegKeyWorker'::`2'::ClassKeyPrefix;
`_CmDeleteCommonClassRegKeyWorker'::`2'::DeviceClassesKeyPrefix;
`_CmDeleteCommonClassRegKeyWorker'::`2'::HardwareProfilesKeyPrefix;
`_CmDeleteCommonClassRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmDeleteDeviceContainerRegKeyWorker'::`2'::DeviceContainersKeyPrefix;
`_CmDeleteDeviceContainerRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmDeleteDeviceInterfaceRegKeyWorker'::`2'::DeviceClassesKeyPrefix;
`_CmDeleteDeviceInterfaceRegKeyWorker'::`2'::HardwareProfilesKeyPrefix;
`_CmDeleteDeviceInterfaceRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmDeleteDevicePanelRegKeyWorker'::`2'::DevicePanelsKeyPrefix;
`_CmDeleteDevicePanelRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmDeleteDeviceRegKeyWorker'::`2'::EnumKeyPrefix;
`_CmDeleteDeviceRegKeyWorker'::`2'::HardwareProfilesKeyPrefix;
`_CmDeleteDeviceRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenCommonClassRegKeyWorker'::`2'::ClassKeyPrefix;
`_CmOpenCommonClassRegKeyWorker'::`2'::DeviceClassesKeyPrefix;
`_CmOpenCommonClassRegKeyWorker'::`2'::HardwareProfilesKeyPrefix;
`_CmOpenCommonClassRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenDeviceContainerRegKeyWorker'::`2'::DeviceContainersKeyPrefix;
`_CmOpenDeviceContainerRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenDeviceInterfaceRegKeyWorker'::`2'::DeviceClassesKeyPrefix;
`_CmOpenDeviceInterfaceRegKeyWorker'::`2'::HardwareProfilesKeyPrefix;
`_CmOpenDeviceInterfaceRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenDevicePanelRegKeyWorker'::`2'::DevicePanelsKeyPrefix;
`_CmOpenDevicePanelRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenDeviceRegKeyWorker'::`2'::EnumKeyPrefix;
`_CmOpenDeviceRegKeyWorker'::`2'::HardwareProfilesKeyPrefix;
`_CmOpenDeviceRegKeyWorker'::`2'::ObjectPathRootPrefix;
abWPAStringKey;
cpuidBitInfo;
crc32Map1_;
crc32Map32_;
crc32Mult_;
crc64Map1_;
crc64Map32_;
crc64Mult_;
gCcTrace;
gLoadedDiffHives;
gLoadedDiffHivesLock;
g_AhcDeviceObject;
g_AslLogPfnVPrintf;
g_ExpandCallback;
g_ExpectedAlgorithm;
g_SecureBootActivePlatformManifest;
g_SecureBootActivePlatformManifestSize;
g_SecureBootPolicyBlobHeader;
g_SepSidMapping;
g_SessionLowboxArray;
g_SessionLowboxMap;
g_SymCryptCpuFeaturesNotPresent;
g_SymCryptCpuFeaturesPresentCheck;
g_SymCryptCpuid1;
g_SymCryptFlags;
g_bWNFEventFired;
g_kernelCallbacks;
g_qwSystemInitTime;
g_rgAttributeTags;
g_ulOldGenuineState;
g_ustrDatabaseType;
g_ustrRuntimePlatform;
g_wil_details_pfnFeatureLoggingHook;
g_wil_details_recordFeatureUsage;
gbl_errno;
guard_icall_bitmap;
load_config_used;
matherr_flag;
nullclass;
pFsRtlpMupCalls;
pXdvAddDevice;
pXdvCcCopyWrite;
pXdvCcCopyWriteEx;
pXdvCcDeferWrite;
pXdvCcFastCopyWrite;
pXdvCcWaitForCurrentLazyWriterActivity;
pXdvCmRegisterCallback;
pXdvCmRegisterCallbackEx;
pXdvCmUnRegisterCallback;
pXdvDRIVER_CANCEL;
pXdvDbgBreakPointWithStatus;
pXdvDriverEntry;
pXdvDriverStartIo;
pXdvDriverUnload;
pXdvEtwRegister;
pXdvEtwRegisterClassicProvider;
pXdvEtwUnregister;
pXdvExAcquireFastMutex;
pXdvExAcquireFastMutexUnsafe;
pXdvExAcquireResourceExclusiveLite;
pXdvExAcquireResourceSharedLite;
pXdvExAcquireRundownProtection;
pXdvExAcquireRundownProtectionCacheAware;
pXdvExAcquireRundownProtectionCacheAwareEx;
pXdvExAcquireRundownProtectionEx;
pXdvExAcquireSharedStarveExclusive;
pXdvExAcquireSharedWaitForExclusive;
pXdvExAllocateCacheAwareRundownProtection;
pXdvExAllocatePool;
pXdvExAllocatePoolWithQuota;
pXdvExAllocatePoolWithQuotaTag;
pXdvExAllocatePoolWithTag;
pXdvExAllocatePoolWithTagPriority;
pXdvExConvertExclusiveToSharedLite;
pXdvExCreateCallback;
pXdvExDeleteLookasideListEx;
pXdvExDeleteNPagedLookasideList;
pXdvExDeletePagedLookasideList;
pXdvExDeleteResourceLite;
pXdvExEnterCriticalRegionAndAcquireResourceExclusive;
pXdvExEnterCriticalRegionAndAcquireResourceShared;
pXdvExEnterCriticalRegionAndAcquireSharedWaitForExclusive;
pXdvExEnterPriorityRegionAndAcquireResourceExclusive;
pXdvExEnterPriorityRegionAndAcquireResourceShared;
pXdvExFreePoolWithTag;
pXdvExGetExclusiveWaiterCount;
pXdvExGetSharedWaiterCount;
pXdvExInitializeLookasideListEx;
pXdvExInitializeNPagedLookasideList;
pXdvExInitializePagedLookasideList;
pXdvExInitializeResourceLite;
pXdvExInterlockedAddLargeInteger;
pXdvExInterlockedInsertHeadList;
pXdvExInterlockedInsertTailList;
pXdvExInterlockedPopEntryList;
pXdvExInterlockedPushEntryList;
pXdvExInterlockedRemoveHeadList;
pXdvExIsProcessorFeaturePresent;
pXdvExIsResourceAcquiredExclusiveLite;
pXdvExIsResourceAcquiredSharedLite;
pXdvExRaiseAccessViolation;
pXdvExRaiseDatatypeMisalignment;
pXdvExRaiseStatus;
pXdvExRegisterCallback;
pXdvExReinitializeResourceLite;
pXdvExReleaseFastMutex;
pXdvExReleaseFastMutexUnsafe;
pXdvExReleaseResourceAndLeaveCriticalRegion;
pXdvExReleaseResourceAndLeavePriorityRegion;
pXdvExReleaseResourceForThreadLite;
pXdvExReleaseResourceLite;
pXdvExReleaseRundownProtection;
pXdvExReleaseRundownProtectionCacheAware;
pXdvExReleaseRundownProtectionEx;
pXdvExSetResourceOwnerPointer;
pXdvExSetResourceOwnerPointerEx;
pXdvExSetTimerResolution;
pXdvExTryToAcquireFastMutex;
pXdvExUnregisterCallback;
pXdvExUuidCreate;
pXdvExWaitForRundownProtectionRelease;
pXdvExWaitForRundownProtectionReleaseCacheAware;
pXdvExfAcquirePushLockExclusive;
pXdvExfAcquirePushLockShared;
pXdvExfReleasePushLock;
pXdvExfReleasePushLockShared;
pXdvExfTryAcquirePushLockShared;
pXdvExfTryToWakePushLock;
pXdvExpInterlockedFlushSList;
pXdvExpInterlockedPopEntrySList;
pXdvExpInterlockedPushEntrySList;
pXdvFsRtlAllocateFileLock;
pXdvFsRtlAreNamesEqual;
pXdvFsRtlBalanceReads;
pXdvFsRtlCancellableWaitForMultipleObjects;
pXdvFsRtlCancellableWaitForSingleObject;
pXdvFsRtlCheckLockForReadAccess;
pXdvFsRtlCheckLockForWriteAccess;
pXdvFsRtlCopyWrite;
pXdvFsRtlDeregisterUncProvider;
pXdvFsRtlDissectName;
pXdvFsRtlDoesNameContainWildCards;
pXdvFsRtlFastCheckLockForRead;
pXdvFsRtlFastCheckLockForWrite;
pXdvFsRtlFastUnlockAll;
pXdvFsRtlFastUnlockAllByKey;
pXdvFsRtlFastUnlockSingle;
pXdvFsRtlFreeFileLock;
pXdvFsRtlGetFileSize;
pXdvFsRtlGetNextFileLock;
pXdvFsRtlIncrementCcFastReadNoWait;
pXdvFsRtlIncrementCcFastReadWait;
pXdvFsRtlInitializeFileLock;
pXdvFsRtlIsNameInExpression;
pXdvFsRtlMdlReadCompleteDev;
pXdvFsRtlMdlWriteCompleteDev;
pXdvFsRtlNotifyFilterChangeDirectory;
pXdvFsRtlNotifyFilterReportChange;
pXdvFsRtlNotifyFullChangeDirectory;
pXdvFsRtlNotifyFullReportChange;
pXdvFsRtlPrivateLock;
pXdvFsRtlProcessFileLock;
pXdvFsRtlRegisterUncProvider;
pXdvFsRtlRegisterUncProviderEx;
pXdvFsRtlRemoveDotsFromPath;
pXdvFsRtlUninitializeFileLock;
pXdvFsRtlValidateReparsePointBuffer;
pXdvHalAllocateCrashDumpRegisters;
pXdvHalExamineMBR;
pXdvIRP_MJ_CLEANUP;
pXdvIRP_MJ_CLOSE;
pXdvIRP_MJ_CREATE;
pXdvIRP_MJ_CREATE_MAILSLOT;
pXdvIRP_MJ_CREATE_NAMED_PIPE;
pXdvIRP_MJ_DEVICE_CHANGE;
pXdvIRP_MJ_DEVICE_CONTROL;
pXdvIRP_MJ_DIRECTORY_CONTROL;
pXdvIRP_MJ_FILE_SYSTEM_CONTROL;
pXdvIRP_MJ_FLUSH_BUFFERS;
pXdvIRP_MJ_INTERNAL_DEVICE_CONTROL;
pXdvIRP_MJ_LOCK_CONTROL;
pXdvIRP_MJ_PNP;
pXdvIRP_MJ_POWER;
pXdvIRP_MJ_QUERY_EA;
pXdvIRP_MJ_QUERY_INFORMATION;
pXdvIRP_MJ_QUERY_QUOTA;
pXdvIRP_MJ_QUERY_SECURITY;
pXdvIRP_MJ_QUERY_VOLUME_INFORMATION;
pXdvIRP_MJ_READ;
pXdvIRP_MJ_SET_EA;
pXdvIRP_MJ_SET_INFORMATION;
pXdvIRP_MJ_SET_QUOTA;
pXdvIRP_MJ_SET_SECURITY;
pXdvIRP_MJ_SET_VOLUME_INFORMATION;
pXdvIRP_MJ_SHUTDOWN;
pXdvIRP_MJ_SYSTEM_CONTROL;
pXdvIRP_MJ_WRITE;
pXdvIoAcquireCancelSpinLock;
pXdvIoAcquireRemoveLockEx;
pXdvIoAcquireVpbSpinLock;
pXdvIoAllocateController;
pXdvIoAllocateDriverObjectExtension;
pXdvIoAllocateErrorLogEntry;
pXdvIoAllocateIrp;
pXdvIoAllocateMdl;
pXdvIoAllocateWorkItem;
pXdvIoAttachDevice;
pXdvIoAttachDeviceToDeviceStack;
pXdvIoAttachDeviceToDeviceStackSafe;
pXdvIoBuildAsynchronousFsdRequest;
pXdvIoBuildDeviceIoControlRequest;
pXdvIoBuildSynchronousFsdRequest;
pXdvIoCancelIrp;
pXdvIoCheckShareAccess;
pXdvIoConnectInterrupt;
pXdvIoConnectInterruptEx;
pXdvIoCreateController;
pXdvIoCreateDevice;
pXdvIoCreateFile;
pXdvIoCreateFileEx;
pXdvIoCreateFileSpecifyDeviceObjectHint;
pXdvIoCreateNotificationEvent;
pXdvIoCreateSymbolicLink;
pXdvIoCreateSynchronizationEvent;
pXdvIoCreateUnprotectedSymbolicLink;
pXdvIoDeleteController;
pXdvIoDeleteDevice;
pXdvIoDeleteSymbolicLink;
pXdvIoDetachDevice;
pXdvIoDisconnectInterrupt;
pXdvIoDisconnectInterruptEx;
pXdvIoFreeController;
pXdvIoFreeIrp;
pXdvIoFreeMdl;
pXdvIoGetAttachedDeviceReference;
pXdvIoGetConfigurationInformation;
pXdvIoGetDeviceDirectory;
pXdvIoGetDeviceInterfaceAlias;
pXdvIoGetDeviceInterfaces;
pXdvIoGetDeviceNumaNode;
pXdvIoGetDeviceObjectPointer;
pXdvIoGetDeviceProperty;
pXdvIoGetDevicePropertyData;
pXdvIoGetDeviceToVerify;
pXdvIoGetDmaAdapter;
pXdvIoGetDriverDirectory;
pXdvIoGetFileObjectGenericMapping;
pXdvIoGetInitialStack;
pXdvIoInitializeIrp;
pXdvIoInitializeRemoveLockEx;
pXdvIoInitializeTimer;
pXdvIoInitializeWorkItem;
pXdvIoInvalidateDeviceRelations;
pXdvIoIsWdmVersionAvailable;
pXdvIoOpenDeviceInterfaceRegistryKey;
pXdvIoOpenDeviceRegistryKey;
pXdvIoRaiseHardError;
pXdvIoRaiseInformationalHardError;
pXdvIoReadPartitionTable;
pXdvIoReadPartitionTableEx;
pXdvIoRegisterBootDriverReinitialization;
pXdvIoRegisterDeviceInterface;
pXdvIoRegisterDriverReinitialization;
pXdvIoRegisterLastChanceShutdownNotification;
pXdvIoRegisterPlugPlayNotification;
pXdvIoRegisterShutdownNotification;
pXdvIoReleaseCancelSpinLock;
pXdvIoReleaseRemoveLockAndWaitEx;
pXdvIoReleaseRemoveLockEx;
pXdvIoReleaseVpbSpinLock;
pXdvIoRemoveShareAccess;
pXdvIoReplacePartitionUnit;
pXdvIoReportDetectedDevice;
pXdvIoReportTargetDeviceChange;
pXdvIoReportTargetDeviceChangeAsynchronous;
pXdvIoReuseIrp;
pXdvIoSetCompletionRoutineEx;
pXdvIoSetDeviceInterfaceState;
pXdvIoSetDevicePropertyData;
pXdvIoSetDeviceToVerify;
pXdvIoSetPartitionInformation;
pXdvIoSetPartitionInformationEx;
pXdvIoSetShareAccess;
pXdvIoSetStartIoAttributes;
pXdvIoStartNextPacket;
pXdvIoUnregisterPlugPlayNotification;
pXdvIoUnregisterPlugPlayNotificationEx;
pXdvIoUnregisterShutdownNotification;
pXdvIoUpdateShareAccess;
pXdvIoVolumeDeviceToDosName;
pXdvIoWMIAllocateInstanceIds;
pXdvIoWMIRegistrationControl;
pXdvIoWMIWriteEvent;
pXdvIoWriteErrorLogEntry;
pXdvIoWritePartitionTable;
pXdvIoWritePartitionTableEx;
pXdvIofCallDriver;
pXdvIofCompleteRequest;
pXdvIopBuildAsynchronousFsdRequest;
pXdvIopBuildSynchronousFsdRequest;
pXdvKeAcquireGuardedMutex;
pXdvKeAcquireGuardedMutexUnsafe;
pXdvKeAcquireInStackQueuedSpinLock;
pXdvKeAcquireInStackQueuedSpinLockAtDpcLevel;
pXdvKeAcquireInStackQueuedSpinLockForDpc;
pXdvKeAcquireInterruptSpinLock;
pXdvKeAcquireQueuedSpinLock;
pXdvKeAcquireSpinLockAtDpcLevel;
pXdvKeAcquireSpinLockForDpc;
pXdvKeAcquireSpinLockRaiseToDpc;
pXdvKeAreAllApcsDisabled;
pXdvKeAreApcsDisabled;
pXdvKeCancelTimer;
pXdvKeClearEvent;
pXdvKeDelayExecutionThread;
pXdvKeDeregisterNmiCallback;
pXdvKeEnterCriticalRegion;
pXdvKeEnterGuardedRegion;
pXdvKeFlushQueuedDpcs;
pXdvKeInitializeDeviceQueue;
pXdvKeInitializeEvent;
pXdvKeInitializeGuardedMutex;
pXdvKeInitializeMutant;
pXdvKeInitializeMutex;
pXdvKeInitializeSemaphore;
pXdvKeInitializeTimer;
pXdvKeInitializeTimerEx;
pXdvKeInsertByKeyDeviceQueue;
pXdvKeInsertDeviceQueue;
pXdvKeInsertHeadQueue;
pXdvKeInsertQueue;
pXdvKeInsertQueueDpc;
pXdvKeLeaveCriticalRegion;
pXdvKeLeaveGuardedRegion;
pXdvKeLowerIrql;
pXdvKePulseEvent;
pXdvKeQueryPriorityThread;
pXdvKeQueryRuntimeThread;
pXdvKeRaiseIrqlToDpcLevel;
pXdvKeReadStateEvent;
pXdvKeReadStateMutex;
pXdvKeReadStateSemaphore;
pXdvKeReadStateTimer;
pXdvKeRegisterNmiCallback;
pXdvKeReleaseGuardedMutex;
pXdvKeReleaseGuardedMutexUnsafe;
pXdvKeReleaseInStackQueuedSpinLock;
pXdvKeReleaseInStackQueuedSpinLockForDpc;
pXdvKeReleaseInStackQueuedSpinLockFromDpcLevel;
pXdvKeReleaseInterruptSpinLock;
pXdvKeReleaseMutant;
pXdvKeReleaseMutex;
pXdvKeReleaseQueuedSpinLock;
pXdvKeReleaseSemaphore;
pXdvKeReleaseSpinLock;
pXdvKeReleaseSpinLockForDpc;
pXdvKeReleaseSpinLockFromDpcLevel;
pXdvKeRemoveByKeyDeviceQueue;
pXdvKeRemoveDeviceQueue;
pXdvKeRemoveEntryDeviceQueue;
pXdvKeRemoveQueue;
pXdvKeRemoveQueueDpc;
pXdvKeResetEvent;
pXdvKeSetEvent;
pXdvKeSetSystemGroupAffinityThread;
pXdvKeSetTimer;
pXdvKeSetTimerEx;
pXdvKeSynchronizeExecution;
pXdvKeTestSpinLock;
pXdvKeTryToAcquireGuardedMutex;
pXdvKeTryToAcquireQueuedSpinLock;
pXdvKeTryToAcquireSpinLockAtDpcLevel;
pXdvKeWaitForMultipleObjects;
pXdvKeWaitForSingleObject;
pXdvKfRaiseIrql;
pXdvMmAddPhysicalMemory;
pXdvMmAllocateContiguousMemory;
pXdvMmAllocateContiguousMemorySpecifyCache;
pXdvMmAllocateContiguousMemorySpecifyCacheNode;
pXdvMmAllocateContiguousNodeMemory;
pXdvMmAllocateMappingAddress;
pXdvMmAllocateNodePagesForMdlEx;
pXdvMmAllocateNonCachedMemory;
pXdvMmAllocatePagesForMdl;
pXdvMmAllocatePagesForMdlEx;
pXdvMmBuildMdlForNonPagedPool;
pXdvMmCreateMdl;
pXdvMmCreateMirror;
pXdvMmCreateSection;
pXdvMmDoesFileHaveUserWritableReferences;
pXdvMmFreeContiguousMemory;
pXdvMmFreeContiguousMemorySpecifyCache;
pXdvMmFreeNonCachedMemory;
pXdvMmFreePagesFromMdl;
pXdvMmGetPhysicalMemoryRanges;
pXdvMmGetSystemRoutineAddress;
pXdvMmLockPagableDataSection;
pXdvMmLockPagableSectionByHandle;
pXdvMmMapIoSpace;
pXdvMmMapLockedPages;
pXdvMmMapLockedPagesSpecifyCache;
pXdvMmMapLockedPagesWithReservedMapping;
pXdvMmMapViewOfSection;
pXdvMmPageEntireDriver;
pXdvMmPrefetchPages;
pXdvMmProbeAndLockPages;
pXdvMmProbeAndLockProcessPages;
pXdvMmProtectMdlSystemAddress;
pXdvMmRemovePhysicalMemory;
pXdvMmResetDriverPaging;
pXdvMmSecureVirtualMemory;
pXdvMmUnlockPagableImageSection;
pXdvMmUnlockPages;
pXdvMmUnmapIoSpace;
pXdvMmUnmapLockedPages;
pXdvMmUnsecureVirtualMemory;
pXdvNtCreateFile;
pXdvNtCreateSection;
pXdvNtLockFile;
pXdvNtMapViewOfSection;
pXdvNtReadFile;
pXdvNtSetInformationFile;
pXdvNtUnlockFile;
pXdvNtWriteFile;
pXdvObGetObjectSecurity;
pXdvObReferenceObjectByHandle;
pXdvObReferenceObjectByHandleWithTag;
pXdvObReferenceObjectByPointer;
pXdvObReferenceObjectByPointerWithTag;
pXdvObReleaseObjectSecurity;
pXdvObfDereferenceObject;
pXdvObfDereferenceObjectWithTag;
pXdvObfReferenceObject;
pXdvObfReferenceObjectWithTag;
pXdvPoCallDriver;
pXdvPoFxActivateComponent;
pXdvPoFxCompleteDevicePowerNotRequired;
pXdvPoFxCompleteIdleCondition;
pXdvPoFxCompleteIdleState;
pXdvPoFxIdleComponent;
pXdvPoFxNotifySurprisePowerOn;
pXdvPoFxPowerControl;
pXdvPoFxRegisterDevice;
pXdvPoFxReportDevicePoweredOn;
pXdvPoFxSetComponentLatency;
pXdvPoFxSetComponentResidency;
pXdvPoFxSetComponentWake;
pXdvPoFxSetDeviceIdleTimeout;
pXdvPoFxStartDevicePowerManagement;
pXdvPoFxUnregisterDevice;
pXdvPoRequestPowerIrp;
pXdvProbeForRead;
pXdvProbeForWrite;
pXdvPsAssignImpersonationToken;
pXdvPsCreateSystemThread;
pXdvPsDereferenceImpersonationToken;
pXdvPsDereferencePrimaryToken;
pXdvPsDisableImpersonation;
pXdvPsGetVersion;
pXdvPsImpersonateClient;
pXdvPsReferenceImpersonationToken;
pXdvPsReferencePrimaryToken;
pXdvPsRemoveLoadImageNotifyRoutine;
pXdvPsRestoreImpersonation;
pXdvPsRevertToSelf;
pXdvPsSetCreateProcessNotifyRoutine;
pXdvPsSetCreateProcessNotifyRoutineEx;
pXdvPsSetCreateThreadNotifyRoutine;
pXdvPsSetLoadImageNotifyRoutine;
pXdvPsTerminateSystemThread;
pXdvRtlAnsiStringToUnicodeString;
pXdvRtlCompareUnicodeString;
pXdvRtlCreateRegistryKey;
pXdvRtlCreateSystemVolumeInformationFolder;
pXdvRtlCreateUnicodeString;
pXdvRtlDeleteRegistryValue;
pXdvRtlDowncaseUnicodeChar;
pXdvRtlDowncaseUnicodeString;
pXdvRtlDuplicateUnicodeString;
pXdvRtlEqualUnicodeString;
pXdvRtlFreeUnicodeString;
pXdvRtlGUIDFromString;
pXdvRtlGenerateClass5Guid;
pXdvRtlHashUnicodeString;
pXdvRtlOemStringToCountedUnicodeString;
pXdvRtlOemStringToUnicodeString;
pXdvRtlStringFromGUID;
pXdvRtlUTF8ToUnicodeN;
pXdvRtlUnicodeStringToAnsiString;
pXdvRtlUnicodeStringToCountedOemString;
pXdvRtlUnicodeStringToOemString;
pXdvRtlUnicodeToUTF8N;
pXdvRtlUpcaseUnicodeChar;
pXdvRtlUpcaseUnicodeString;
pXdvRtlUpcaseUnicodeStringToAnsiString;
pXdvRtlUpcaseUnicodeStringToCountedOemString;
pXdvRtlUpcaseUnicodeStringToOemString;
pXdvRtlWriteRegistryValue;
pXdvRtlxAnsiStringToUnicodeSize;
pXdvRtlxUnicodeStringToAnsiSize;
pXdvSeAccessCheck;
pXdvSeAssignSecurity;
pXdvSeAssignSecurityEx;
pXdvSeDeassignSecurity;
pXdvSeLockSubjectContext;
pXdvSeReleaseSubjectContext;
pXdvSeSinglePrivilegeCheck;
pXdvSeUnlockSubjectContext;
pXdvSeValidSecurityDescriptor;
pXdvZwAccessCheckAndAuditAlarm;
pXdvZwAddBootEntry;
pXdvZwAddDriverEntry;
pXdvZwAdjustPrivilegesToken;
pXdvZwAllocateLocallyUniqueId;
pXdvZwAllocateVirtualMemory;
pXdvZwAlpcAcceptConnectPort;
pXdvZwAlpcConnectPort;
pXdvZwAlpcCreatePort;
pXdvZwAlpcCreatePortSection;
pXdvZwAlpcCreateResourceReserve;
pXdvZwAlpcCreateSectionView;
pXdvZwAlpcCreateSecurityContext;
pXdvZwAlpcQueryInformation;
pXdvZwAlpcSendWaitReceivePort;
pXdvZwAlpcSetInformation;
pXdvZwCancelIoFile;
pXdvZwCancelTimer;
pXdvZwClose;
pXdvZwCloseObjectAuditAlarm;
pXdvZwCommitComplete;
pXdvZwCommitEnlistment;
pXdvZwCommitTransaction;
pXdvZwConnectPort;
pXdvZwCreateDirectoryObject;
pXdvZwCreateEnlistment;
pXdvZwCreateEvent;
pXdvZwCreateFile;
pXdvZwCreateJobObject;
pXdvZwCreateKey;
pXdvZwCreateKeyTransacted;
pXdvZwCreateResourceManager;
pXdvZwCreateSection;
pXdvZwCreateSymbolicLinkObject;
pXdvZwCreateTimer;
pXdvZwCreateTransaction;
pXdvZwCreateTransactionManager;
pXdvZwDeleteBootEntry;
pXdvZwDeleteFile;
pXdvZwDeleteKey;
pXdvZwDeleteValueKey;
pXdvZwDeviceIoControlFile;
pXdvZwDisplayString;
pXdvZwDuplicateObject;
pXdvZwDuplicateToken;
pXdvZwEnumerateBootEntries;
pXdvZwEnumerateDriverEntries;
pXdvZwEnumerateKey;
pXdvZwEnumerateTransactionObject;
pXdvZwEnumerateValueKey;
pXdvZwFlushBuffersFile;
pXdvZwFlushBuffersFileEx;
pXdvZwFlushInstructionCache;
pXdvZwFlushKey;
pXdvZwFlushVirtualMemory;
pXdvZwFreeVirtualMemory;
pXdvZwFsControlFile;
pXdvZwGetNotificationResourceManager;
pXdvZwLoadDriver;
pXdvZwLoadKey;
pXdvZwLockFile;
pXdvZwMakeTemporaryObject;
pXdvZwMapViewOfSection;
pXdvZwModifyBootEntry;
pXdvZwModifyDriverEntry;
pXdvZwNotifyChangeKey;
pXdvZwOpenDirectoryObject;
pXdvZwOpenEnlistment;
pXdvZwOpenEvent;
pXdvZwOpenFile;
pXdvZwOpenJobObject;
pXdvZwOpenKey;
pXdvZwOpenKeyEx;
pXdvZwOpenKeyTransacted;
pXdvZwOpenKeyTransactedEx;
pXdvZwOpenProcess;
pXdvZwOpenProcessToken;
pXdvZwOpenProcessTokenEx;
pXdvZwOpenResourceManager;
pXdvZwOpenSection;
pXdvZwOpenSymbolicLinkObject;
pXdvZwOpenThread;
pXdvZwOpenThreadToken;
pXdvZwOpenThreadTokenEx;
pXdvZwOpenTimer;
pXdvZwOpenTransaction;
pXdvZwOpenTransactionManager;
pXdvZwPowerInformation;
pXdvZwPrePrepareComplete;
pXdvZwPrePrepareEnlistment;
pXdvZwPrepareComplete;
pXdvZwPrepareEnlistment;
pXdvZwProtectVirtualMemory;
pXdvZwPulseEvent;
pXdvZwQueryBootEntryOrder;
pXdvZwQueryBootOptions;
pXdvZwQueryDefaultLocale;
pXdvZwQueryDefaultUILanguage;
pXdvZwQueryDirectoryFile;
pXdvZwQueryDirectoryObject;
pXdvZwQueryDriverEntryOrder;
pXdvZwQueryEaFile;
pXdvZwQueryFullAttributesFile;
pXdvZwQueryInformationEnlistment;
pXdvZwQueryInformationFile;
pXdvZwQueryInformationJobObject;
pXdvZwQueryInformationProcess;
pXdvZwQueryInformationResourceManager;
pXdvZwQueryInformationThread;
pXdvZwQueryInformationToken;
pXdvZwQueryInformationTransaction;
pXdvZwQueryInformationTransactionManager;
pXdvZwQueryInstallUILanguage;
pXdvZwQueryKey;
pXdvZwQueryLicenseValue;
pXdvZwQueryObject;
pXdvZwQueryQuotaInformationFile;
pXdvZwQuerySection;
pXdvZwQuerySecurityObject;
pXdvZwQuerySymbolicLinkObject;
pXdvZwQuerySystemInformation;
pXdvZwQueryValueKey;
pXdvZwQueryVolumeInformationFile;
pXdvZwReadFile;
pXdvZwReadOnlyEnlistment;
pXdvZwRecoverEnlistment;
pXdvZwRecoverTransactionManager;
pXdvZwRemoveIoCompletionEx;
pXdvZwRenameKey;
pXdvZwReplaceKey;
pXdvZwRequestWaitReplyPort;
pXdvZwResetEvent;
pXdvZwRestoreKey;
pXdvZwRollbackComplete;
pXdvZwRollbackEnlistment;
pXdvZwRollbackTransaction;
pXdvZwSetBootEntryOrder;
pXdvZwSetBootOptions;
pXdvZwSetDriverEntryOrder;
pXdvZwSetEaFile;
pXdvZwSetEvent;
pXdvZwSetInformationEnlistment;
pXdvZwSetInformationFile;
pXdvZwSetInformationJobObject;
pXdvZwSetInformationKey;
pXdvZwSetInformationObject;
pXdvZwSetInformationProcess;
pXdvZwSetInformationResourceManager;
pXdvZwSetInformationThread;
pXdvZwSetInformationToken;
pXdvZwSetInformationTransaction;
pXdvZwSetQuotaInformationFile;
pXdvZwSetSecurityObject;
pXdvZwSetSystemInformation;
pXdvZwSetSystemTime;
pXdvZwSetTimer;
pXdvZwSetTimerEx;
pXdvZwSetValueKey;
pXdvZwSetVolumeInformationFile;
pXdvZwTerminateProcess;
pXdvZwTranslateFilePath;
pXdvZwUnloadDriver;
pXdvZwUnloadKey;
pXdvZwUnlockFile;
pXdvZwUnmapViewOfSection;
pXdvZwWaitForMultipleObjects;
pXdvZwWaitForSingleObject;
pXdvZwWriteFile;
pbih;
pctype;
psMUITest;
pwctype;
retpoline_image_bitmap;
s_ProviderThreatInt;
setjmpexused;
szBias;
szDaylightBias;
szDaylightName;
szDaylightStart;
szDynamicDaylightDisabled;
szDynamicDst;
szFirstEntry;
szLastEntry;
szSlashDynamicDst;
szStandardBias;
szStandardName;
szStandardStart;
szTimeZoneKeyName;
szTimeZonesSlash;
ulInvalidTypes;
unconfiguredConfigFlags;
wctype;
BOOTVID_NULL_THUNK_DATA;
CI_NULL_THUNK_DATA;
HAL_NULL_THUNK_DATA;
PSHED_NULL_THUNK_DATA;
cng_NULL_THUNK_DATA;
ext-ms-win-fs-clfs-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-clipsp-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-kcminitcfg-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-ksecurity-l1-1-1_NULL_THUNK_DATA;
ext-ms-win-ntos-ksigningpolicy-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-ksr-l1-1-2_NULL_THUNK_DATA;
ext-ms-win-ntos-stateseparation-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-tm-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-trace-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-ucode-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-werkernel-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-werkernel-l1-1-1_NULL_THUNK_DATA;
kdcom_NULL_THUNK_DATA;
msrpc_NULL_THUNK_DATA;

 ?? ::CIFEBFPJ::`string'();
 ?? ::CIJCHKMG::`string'();
 ?? ::DFIOBLLK::`string'();
 ?? ::FNODOBFM::`string'();
 ?? ::JKADOLAD::`string'();
 ?? ::NKKEPPGN::`string'();
 ?? ::NNGAKEGL::`string'();
 ?? ::OKHAJAOM::`string'();
 ?? ::PBOPGDP::`string'();
$$0();
$$1();
$$10();
$$11();
$$12();
$$13();
$$14();
$$15();
$$16();
$$17();
$$18();
$$19();
$$1a();
$$1b();
$$1c();
$$1d();
$$1e();
$$1f();
$$2();
$$3();
$$4();
$$5();
$$6();
$$7();
$$8();
$$9();
$$a();
$$b();
$$c();
$$d();
$$e();
$$f();
ADD_MAP_REGISTERS();
AddDecodeGuidToSessions();
AdminlessTelemetryEnabled();
AdtpAppendString();
AdtpAppendZString();
AdtpBuildAccessReasonAuditString();
AdtpBuildAccessReasonAuditStringInternal();
AdtpBuildAccessesString();
AdtpBuildContextFromSecurityDescriptor();
AdtpBuildGuidString();
AdtpBuildHexInt64String();
AdtpBuildIPv4Strings();
AdtpBuildIPv6Strings();
AdtpBuildLogonIdStrings();
AdtpBuildMacStrings();
AdtpBuildMessageString();
AdtpBuildMultiSzStringListString();
AdtpBuildObjectTypeStrings();
AdtpBuildPrivilegeAuditString();
AdtpBuildRegistryValueString();
AdtpBuildReplacementString();
AdtpBuildSecurityDescriptorChangeString();
AdtpBuildSecurityDescriptorUnicodeString();
AdtpBuildSidListString();
AdtpBuildSockAddrString();
AdtpBuildStagingReasonAuditStringInternal();
AdtpBuildStringListString();
AdtpBuildUlongString();
AdtpBuildUserAccountControlString();
AdtpCleanupParameterAllocations();
AdtpDbInitializePrivilegeObject();
AdtpEtwBuildDashString();
AdtpEtwBuildString();
AdtpFormatPrefix();
AdtpGetCategoryAndSubCategoryId();
AdtpInitializeAuditingCommon();
AdtpInitializeDriveLetters();
AdtpIsCorrectlyFormedUnicodeString();
AdtpLookupDriveLetter();
AdtpLookupKnownPrivilegeNameQuickly();
AdtpNormalizeAuditInfoHelper();
AdtpObjsInitialize();
AdtpPackageParameters();
AdtpSubstituteDriveLetter();
AdtpWriteToEtw();
AdtpWriteToEtwEx();
AhcCacheQueryHwId();
AlpcAddHandleTableEntry();
AlpcConnectionCleanupProcedure();
AlpcConnectionDeleteProcedure();
AlpcConnectionDestroyProcedure();
AlpcCreateSecurityContext();
AlpcDeleteBlobByHandle();
AlpcGetHeaderSize();
AlpcGetMessageAttribute();
AlpcHandleDataCleanupProcedure();
AlpcHandleDataDeleteProcedure();
AlpcHandleDataDestroyProcedure();
AlpcInitializeHandleTable();
AlpcInitializeMessageAttribute();
AlpcMessageCleanupProcedure();
AlpcMessageDeleteProcedure();
AlpcMessageDestroyProcedure();
AlpcReferenceBlobByHandle();
AlpcRegionCleanupProcedure();
AlpcRegionDeleteProcedure();
AlpcRegionDestroyProcedure();
AlpcRegisterLogRoutine();
AlpcReserveCleanupProcedure();
AlpcReserveDeleteProcedure();
AlpcReserveDestroyProcedure();
AlpcSectionCleanupProcedure();
AlpcSectionDeleteProcedure();
AlpcSectionDestroyProcedure();
AlpcSecurityCleanupProcedure();
AlpcSecurityDeleteProcedure();
AlpcSecurityDestroyProcedure();
AlpcUnregisterLogRoutine();
AlpcViewCleanupProcedure();
AlpcViewDeleteProcedure();
AlpcViewDestroyProcedure();
AlpciDestroyDeferredMessageContext();
AlpcpAcceptConnectPort();
AlpcpAdjustCompletionListConcurrencyCount();
AlpcpAllocateBlob();
AlpcpAllocateBuffer();
AlpcpAllocateCompletionBuffer();
AlpcpAllocateCompletionPacketLookaside();
AlpcpAllocateFromBitmap();
AlpcpAllocateMessage();
AlpcpAllocateMessageFromExtendedTables();
AlpcpAllocateMessageFunction();
AlpcpAllocateMessageLog();
AlpcpAllocateSnapshotMessageLog();
AlpcpAssociateIoCompletionPort();
AlpcpCancelMessage();
AlpcpCancelMessagesByRequestor();
AlpcpCaptureAttributes();
AlpcpCaptureContextAttribute();
AlpcpCaptureContextAttribute32();
AlpcpCaptureDirectAttribute();
AlpcpCaptureDirectAttribute32();
AlpcpCaptureHandleAttribute();
AlpcpCaptureHandleAttribute$filt$0();
AlpcpCaptureHandleAttribute32();
AlpcpCaptureHandleAttribute32$filt$0();
AlpcpCaptureHandleAttributeInternal();
AlpcpCaptureHandleAttributeInternal$filt$0();
AlpcpCaptureIdMessage();
AlpcpCaptureMessageData();
AlpcpCaptureMessageDataSafe();
AlpcpCaptureSecurityAttribute();
AlpcpCaptureSecurityAttribute32();
AlpcpCaptureSecurityAttributeInternal();
AlpcpCaptureViewAttribute();
AlpcpCaptureViewAttribute32();
AlpcpCaptureViewAttributeInternal();
AlpcpCaptureWorkOnBehalfAttribute();
AlpcpChargePagedPoolQuota();
AlpcpCheckConnectionSecurity();
AlpcpCleanupProcessViews();
AlpcpClearOwnerPortMessage();
AlpcpClosePort();
AlpcpCompleteDeferSignalRequest();
AlpcpCompleteDeferSignalRequestAndWait();
AlpcpCompleteDispatchMessage();
AlpcpConnectPort();
AlpcpCopyRequestData();
AlpcpCreateClientPort();
AlpcpCreateConnectionPort();
AlpcpCreatePort();
AlpcpCreateRegion();
AlpcpCreateReserve();
AlpcpCreateSection();
AlpcpCreateSectionView();
AlpcpCreateSecurityContext();
AlpcpCreateView();
AlpcpDeferredFreeCompletionPacketLookaside();
AlpcpDeleteBlob();
AlpcpDeletePort();
AlpcpDeleteView();
AlpcpDereferenceBlobEx();
AlpcpDestroyBlob();
AlpcpDestroyPort();
AlpcpDisconnectPort();
AlpcpDispatchCloseMessage();
AlpcpDispatchConnectionRequest();
AlpcpDispatchMessage();
AlpcpDispatchNewMessage();
AlpcpDispatchReplyToPort();
AlpcpDispatchReplyToWaitingThread();
AlpcpDoPortCleanup();
AlpcpEndInitialization();
AlpcpEnterAllocationEventMessageLog();
AlpcpEnterFreeEventMessageLog();
AlpcpEnterStateChangeEventMessageLog();
AlpcpEnumerateResourcesPort();
AlpcpExposeAttributes();
AlpcpExposeCapturedContextAttribute();
AlpcpExposeContextAttribute();
AlpcpExposeContextAttribute32();
AlpcpExposeHandleAttribute();
AlpcpExposeHandleAttribute$filt$0();
AlpcpExposeTokenAttribute();
AlpcpExposeViewAttribute();
AlpcpExposeViewAttributeInSenderContext();
AlpcpExposeWorkOnBehalfAttribute();
AlpcpFlushCancelQueue();
AlpcpFlushMessagesByRequestor();
AlpcpFlushMessagesPort();
AlpcpFlushQueue();
AlpcpFlushResourcesPort();
AlpcpForceUnlinkSecureView();
AlpcpFormatConnectionRequest();
AlpcpFreeBitmap();
AlpcpFreeBuffer();
AlpcpFreeCompletionList();
AlpcpFreeCompletionPacketLookaside();
AlpcpFreeMessageFunction();
AlpcpGetDataFromUserVaSafe();
AlpcpGetEffectiveTokenMessage();
AlpcpGetPortNameInformation();
AlpcpImpersonateMessage();
AlpcpInitSystem();
AlpcpInitializeCompletionList();
AlpcpInitializeMessageLog();
AlpcpInitializePort();
AlpcpInsertCompletionListEntry();
AlpcpInsertMessageCanceledQueue();
AlpcpInsertMessageDirectQueue();
AlpcpInsertMessageLargeMessageQueue();
AlpcpInsertMessageMainQueue();
AlpcpInsertMessagePendingQueue();
AlpcpInsertResourcePort();
AlpcpInvokeLogCallbacks();
AlpcpLocateMessageLog();
AlpcpLocateSectionView();
AlpcpLocateView();
AlpcpLockForCachedReferenceBlob();
AlpcpLogClosePort();
AlpcpLogConnectFail();
AlpcpLogConnectRequest();
AlpcpLogConnectSuccess();
AlpcpLogReceiveMessage();
AlpcpLogSendMessage();
AlpcpLogUnwait();
AlpcpLogWaitForNewMessage();
AlpcpLogWaitForReply();
AlpcpLookasidePacketCallbackRoutine();
AlpcpLookupMessage();
AlpcpMapLegacyPortRemoteView();
AlpcpMapLegacyPortView();
AlpcpOpenPort();
AlpcpPortQueryBasicInfo();
AlpcpPortQueryConnectedSidInfo();
AlpcpPortQueryServerInfo();
AlpcpPrepareViewForDelivery();
AlpcpProbeAndCaptureMessageHeader();
AlpcpProbeForWriteMessageHeader();
AlpcpProbeMessageAttributes();
AlpcpProcessConnectionRequest();
AlpcpProcessSynchronousRequest();
AlpcpQueryHandleInformationMessage();
AlpcpQueryHandleInformationMessage$filt$0();
AlpcpQueryHandleInformationMessage$filt$1();
AlpcpQueryHeadLargeQueue();
AlpcpQueryRemoteView();
AlpcpQuerySidMessage();
AlpcpQuerySidToken();
AlpcpQueryTokenModifiedIdMessage();
AlpcpQueueIoCompletionPort();
AlpcpReadMessageData();
AlpcpReceiveDirectMessagePort();
AlpcpReceiveLegacyConnectionReply();
AlpcpReceiveLegacyMessage();
AlpcpReceiveMessage();
AlpcpReceiveMessagePort();
AlpcpReceiveSynchronousReply();
AlpcpReferenceAndLockTargetPortsAndCommunicationInfo();
AlpcpReferenceBlob();
AlpcpReferenceConnectedPort();
AlpcpReferenceMessageByWaitingThread();
AlpcpReferenceMessageByWaitingThreadPort();
AlpcpReferenceMessageByWaitingThreadPortQueue();
AlpcpReferenceReplyTargetPorts();
AlpcpRegisterCompletionListDatabase();
AlpcpReleaseAttributes();
AlpcpReleaseMessageAttributesOnCancel();
AlpcpReleasePagedPoolQuota();
AlpcpReleaseViewAttribute();
AlpcpRemoveMessageFromPendingQueue();
AlpcpRemoveMessagePort();
AlpcpRemoveResourcePort();
AlpcpReplyLegacySynchronousRequest();
AlpcpRestoreWriteAccess();
AlpcpReturnMessageOnInsufficientBuffer();
AlpcpSendCloseMessage();
AlpcpSendLegacySynchronousRequest();
AlpcpSendMessage();
AlpcpSetOwnerPortMessage();
AlpcpSetOwnerProcessPort();
AlpcpSetupMessageDataForDeferredCopy();
AlpcpSignal();
AlpcpSignalAndWait();
AlpcpSignalPortAndUnlock();
AlpcpTrackPortReferences();
AlpcpTransferQuotaMessage();
AlpcpTryLockForCachedReferenceBlob();
AlpcpUnlockAndDereferenceTargetPortsAndCommunicationInfo();
AlpcpUnlockBlob();
AlpcpUnlockMessage();
AlpcpUnregisterCompletionListDatabase();
AlpcpValidateAndSetPortAttributes();
AlpcpValidateConnectionMessage();
AlpcpValidateDataInformation();
AlpcpValidateMessage();
AlpcpViewSearchCallbackFunction();
AlpcpWaitForPortReferences();
AlpcpWaitForSingleObject();
AlpcpWalkConnectionList();
AnFwConfigureProgressResources();
AnFwDisableBackgroundUpdateTimer();
AnFwDisplayBackgroundUpdate();
AnFwDisplayFade();
AnFwDisplayProgressIndicator();
AnFwFadeCompletion();
AnFwProgressIndicatorTransition();
AnFwpBackgroundUpdateTimer();
AnFwpDisableProgressTimer();
AnFwpFadeAnimationTimer();
AnFwpProgressAnimationManual();
AnFwpProgressIndicatorTimer();
ApiSetComposeSchema();
ApiSetIsSchemaSealed();
ApiSetLoadSchemaEx();
ApiSetLoadSchemaWithExtensions();
ApiSetReleaseSchema();
ApiSetResolveToHost();
ApiSetpConstructPathToExtension();
ApiSetpFindImageSection();
ApiSetpLoadSchemaExtension();
ApiSetpLoadSchemaExtensions();
ApiSetpLoadSchemaImage();
ApiSetpSearchForApiSet();
ApiSetpSearchForApiSetHost();
AppModelFreeUnicodeString();
AppendCondition();
ApplyRelocations();
ArbAddAllocation();
ArbAddInaccessibleAllocationRange();
ArbAddMmConfigRangeAsBootReserved();
ArbAddOrdering();
ArbAddReserved();
ArbAllocateEntry();
ArbArbiterHandler();
ArbBacktrackAllocation();
ArbBootAllocation();
ArbBuildAssignmentOrdering();
ArbCommitAllocation();
ArbDeleteOwnerRanges();
ArbFindSuitableRange();
ArbFreeOrderingList();
ArbGetNextAllocationRange();
ArbInitializeArbiterInstance();
ArbInitializeOrderingList();
ArbInitializeOsInaccessibleRange();
ArbInitializeRangeList();
ArbOverrideConflict();
ArbPreprocessEntry();
ArbPruneOrdering();
ArbQueryArbitrate();
ArbQueryConflict();
ArbRetestAllocation();
ArbRollbackAllocation();
ArbShareDriverExclusive();
ArbStartArbiter();
ArbTestAllocation();
ArbpBuildAllocationStack();
ArbpBuildAlternative();
ArbpGetRegistryValue();
ArbpQueryConflictCallback();
ArbpUpdatePriority();
ArrayContains();
AsiAddDataToSchema();
AsiSortValueList();
AslAlloc();
AslComputeCrc32();
AslDoesDirectoryExistNtPath();
AslDoesFileExistNtPath();
AslEnvExpandStrings();
AslEnvExpandStrings2();
AslEnvGetProcessWowInfo();
AslEnvGetSysNativeDirPathForGuestBuf();
AslEnvGetSystem32DirPathBuf();
AslEnvVarQuery();
AslFileAllocAndGetAttributes();
AslFileMappingCreate();
AslFileMappingCreateFromImageView();
AslFileMappingDelete();
AslFileMappingEnsure();
AslFileMappingEnsureMappedAs();
AslFileMappingGetFileKindDetail();
AslFileMappingGetImageTypeEx();
AslFileMappingGetImageTypeEx$filt$0();
AslFileNotFound();
AslGuidToString();
AslGuidToString_UStr();
AslHashFree();
AslImageFileToArchitecture();
AslLogCallPrintf();
AslPathClean();
AslPathCleanUstr();
AslPathCombine();
AslPathSplit();
AslPathToNetworkPathNt();
AslPathToSystemPathBuf();
AslPathWildcardFindClose();
AslPathWildcardFindFirst();
AslPathWildcardFindNext();
AslRegWildcardFindClose();
AslRegWildcardFindFirst();
AslRegWildcardFindNext();
AslRegistryBuildMachinePath();
AslRegistryBuildUserPath();
AslRegistryEnumKey();
AslRegistryGetKey();
AslRegistryGetUInt32();
AslRegistryGetUInt32_UStr();
AslRegistryOpenSubKey();
AslStringAnsiToUnicode();
AslStringDuplicate();
AslStringPatternMatchA();
AslStringPatternMatchW();
AslStringSearchA();
AslStringSearchW();
AslStringUpcaseToMultiByteN();
AslStringXmlSanitize();
AslUnicodeStringFree();
AslpAllocMatchNode();
AslpEnvResolveVars();
AslpFileGet16BitDescription();
AslpFileGet16BitModuleName();
AslpFileGetChecksum();
AslpFileGetChecksum$filt$0();
AslpFileGetChecksumAttributes();
AslpFileGetClrVersion();
AslpFileGetClrVersion$filt$0();
AslpFileGetClrVersionAttribute();
AslpFileGetCrcChecksum();
AslpFileGetCrcChecksum$filt$0();
AslpFileGetExeWrapper();
AslpFileGetExeWrapper$filt$0();
AslpFileGetExportName();
AslpFileGetFileKindDetailAttribute();
AslpFileGetHeaderAttributesNE();
AslpFileGetHeaderAttributesPE();
AslpFileGetImageNtHeader();
AslpFileGetImageNtHeader$filt$0();
AslpFileGetNtHeaderAttributes();
AslpFileGetNtHeaderAttributes$filt$0();
AslpFileGetPeExportNameExeWrapper();
AslpFileGetVersionAttributes();
AslpFileGetVersionBlock();
AslpFileGetVersionBlock$filt$0();
AslpFileHasActiveMarkWrapper();
AslpFileHasActiveMarkWrapper$filt$0();
AslpFileHasSecuromWrapper();
AslpFileLargeEnsureLargeFileMapping();
AslpFileLargeGetChecksum();
AslpFileLargeGetChecksum$filt$0();
AslpFileLargeGetChecksumAttributes();
AslpFileLargeGetCrcChecksum();
AslpFileLargeGetCrcChecksum$filt$0();
AslpFileLargeMapCreate();
AslpFileLargeMapDelete();
AslpFileMakeBinVersionAttributes();
AslpFileMakeStringVersionAttributes();
AslpFileMappingGetFileKind();
AslpFileMappingGetFileKind$filt$0();
AslpFilePartialViewFree();
AslpFileQuery16BitDescription();
AslpFileQuery16BitDescription$filt$0();
AslpFileQuery16BitModuleName();
AslpFileQuery16BitModuleName$filt$0();
AslpFileQueryExportName();
AslpFileQueryExportName$filt$0();
AslpFileQueryVersionString();
AslpFileStringTokenize();
AslpFileVerBlockGetValueOffset();
AslpFileVerQueryBlock();
AslpFileVerStringBlockGetValue();
AslpHasStarForceWrapper();
AslpImageRvaToVa();
AslpParsePattern();
AslpPathWildcardAllocMatchNode();
AslpPathWildcardFreeFindContext();
AslpPathWildcardFreeMatchNode();
AslpPathWildcardMakeLeaves();
AslpProcessMatchRegNode();
AuthzBasepAddAccessTypeList();
AuthzBasepAddSecurityAttribute();
AuthzBasepAddSecurityAttributeToLists();
AuthzBasepAddSecurityAttributeValueToLists();
AuthzBasepAddSecurityAttributeValues();
AuthzBasepAllocateClaimCollectionNoLists();
AuthzBasepAllocateSecurityAttribute();
AuthzBasepAllocateSecurityAttributeValue();
AuthzBasepAllocateSecurityAttributesList();
AuthzBasepCommitSecurityAttributeChanges();
AuthzBasepCompareFQBNOperands();
AuthzBasepCompareIntegerOperands();
AuthzBasepCompareLegacySecurityAttributesInformation();
AuthzBasepCompareOctetStringOperands();
AuthzBasepCompareSecurityAttribute();
AuthzBasepCompareSecurityAttributesInformation();
AuthzBasepCompareUnicodeStringCaseSensitive();
AuthzBasepCompareUnicodeStringOperands();
AuthzBasepCompareUnsigned();
AuthzBasepComputeBitwise();
AuthzBasepComputeExpression();
AuthzBasepConvertRelativeToAbsoluteTokenAttribute();
AuthzBasepCopyoutClaimAttributeValues();
AuthzBasepCopyoutClaimAttributes();
AuthzBasepCopyoutInternalSecurityAttributeValues();
AuthzBasepCopyoutInternalSecurityAttributes();
AuthzBasepCopyoutSecurityAttributeValues();
AuthzBasepCopyoutSecurityAttributes();
AuthzBasepDeleteAllSecurityAttributeValues();
AuthzBasepDeleteAllSecurityAttributes();
AuthzBasepDeleteSecurityAttribute();
AuthzBasepDeleteSecurityAttributeValues();
AuthzBasepDeviceMemberOf();
AuthzBasepDuplicateSecurityAttributes();
AuthzBasepEqualUnicodeString();
AuthzBasepEqualUnicodeStringCaseSensitive();
AuthzBasepEvaluateAceCondition();
AuthzBasepEvaluateAttribute();
AuthzBasepEvaluateExpression();
AuthzBasepEvaluateSetRelationship();
AuthzBasepFinaliseSecurityAttributesList();
AuthzBasepFindSecurityAttribute();
AuthzBasepFindSecurityAttributeValue();
AuthzBasepFindSystemSecurityAttribute();
AuthzBasepFindTokenAttribute();
AuthzBasepFreeSecurityAttributeValues();
AuthzBasepFreeSecurityAttributesList();
AuthzBasepGetClaimAttributeValueCopyoutBufferSize();
AuthzBasepGetClaimAttributesCopyoutBufferSize();
AuthzBasepGetConstantOperand();
AuthzBasepGetInternalSecurityAttributeValueCopyoutBufferSize();
AuthzBasepGetInternalSecurityAttributesCopyoutBufferSize();
AuthzBasepGetNextValue();
AuthzBasepGetOperandStringCaseForEvaluation();
AuthzBasepGetSecurityAttributeValueCopyoutBufferSize();
AuthzBasepGetSecurityAttributesCopyoutBufferSize();
AuthzBasepInitializeResourceClaimsFromSacl();
AuthzBasepInitializeSystemSecurityAttributes();
AuthzBasepIsCompareRelevantAttribute();
AuthzBasepIsValidExpression();
AuthzBasepMemAlloc();
AuthzBasepMemberOf();
AuthzBasepMergeAccessReasons();
AuthzBasepObjectInTypeList();
AuthzBasepOperandValueTypesCompatible();
AuthzBasepPopResult();
AuthzBasepPushResult();
AuthzBasepQueryClaimAttributesToken();
AuthzBasepQueryInternalSecurityAttributesToken();
AuthzBasepQuerySecurityAttributeAndValues();
AuthzBasepQuerySecurityAttributesToken();
AuthzBasepQuerySystemSecurityAttributeAndValues();
AuthzBasepQueryTokenAttributeAndValues();
AuthzBasepRemoveSecurityAttributeFromLists();
AuthzBasepRemoveSecurityAttributeValueFromLists();
AuthzBasepReplaceSecurityAttribute();
AuthzBasepResetOperands();
AuthzBasepRestartOperandValueEnumeration();
AuthzBasepRollbackSecurityAttributeChanges();
AuthzBasepSetAccessReasons();
AuthzBasepSetAppContainerAccessReasons();
AuthzBasepSetSecurityAttributesToken();
AuthzBasepSetTypeListAccessReasons();
AuthzBasepSupportSetOperation();
AuthzBasepUnicodeStringFromOperandValue();
AuthzBasepUpdateParentTypeList();
AuthzBasepValidateSecurityAttributes();
AuthzBasepValueInSet();
BCryptCloseAlgorithmProvider();
BCryptCreateHash();
BCryptDecrypt();
BCryptDestroyHash();
BCryptDestroyKey();
BCryptEncrypt();
BCryptFinishHash();
BCryptGenRandom();
BCryptGenerateSymmetricKey();
BCryptGetProperty();
BCryptHashData();
BCryptImportKeyPair();
BCryptOpenAlgorithmProvider();
BCryptSetProperty();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeDeleteEx();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeFindSeperatorIndexEntry();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeInsertEx();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeIteratorFromSearchResult();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeMergeNodes();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeNewNode();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeNodeFree();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeRedistribute();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeSearchKey();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeSplitChild();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeDeleteEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeDeleteNode();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeDescendToSibling();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeFindLeafSibling();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeFindLeafSiblingEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeFindNextEntry();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeFindSeperatorIndexEntry();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeInsertEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeIteratorAttachEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeIteratorCleanup();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeIteratorFromSearchResult();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeMergeNodes();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeNewNode();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeNodeFree();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeRedistribute();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeSearchKey();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeSearchResultCleanup();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeSearchResultDeref();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeSearchResultInit();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeSplitChild();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::BTreeWalkPostOrderInternal();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeDeleteEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeDeleteNode();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeDescendToSibling();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeFindLeafSibling();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeFindLeafSiblingEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeFindSeperatorIndexEntry();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeInsertEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeIteratorFromSearchResult();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeMergeNodes();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeNewNode();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeNodeFindKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeNodeFree();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeRedistribute();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeSearchKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeSearchResultDeref();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeSearchResultInit();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::BTreeSplitChild();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeChangeKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeDelete();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeDeleteEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeDeleteNode();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeDescendToSibling();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeFindLeafSibling();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeFindLeafSiblingEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeFindPreviousEntry();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeFindSeperatorIndexEntry();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeInsert();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeInsertEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeIteratorCleanup();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeIteratorFromSearchResult();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeMergeNodes();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeNewNode();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeNodeFindKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeNodeFree();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeRedistribute();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeSearchKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeSearchResultCleanup();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeSearchResultDeref();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeSearchResultInit();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeSearchResultIterStart();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeSplitChild();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::BTreeWalkPostOrderInternal();
BapdGetISRegistryKey();
BapdRecordFirmwareBootStats();
BapdRegisterEtwProvider();
BapdRegisterSiData();
BapdWriteEtwEvents();
BapdpKsrCancelScenario();
BapdpKsrComplete();
BapdpKsrCompleteScenario();
BapdpKsrCompleteScenarioPhase0();
BapdpKsrInitiateScenarioPhase0();
BapdpKsrpInitiateScenario();
BapdpMarshallBootDataToRegistry();
BapdpParseEventParts();
BapdpProcessBitlockerStatus();
BapdpProcessBootMetadata();
BapdpProcessEDrvHintInfo();
BapdpProcessEtwEvents();
BapdpProcessFwUpdateResults();
BapdpProcessHSTIResults();
BapdpProcessResumeInformation();
BapdpProcessVsmKeyBlobs();
BapdpProcessWmdResults();
BapdpQueryData();
BapdpRecordIumStatus();
BapdpRegisterBitlockerStatus();
BapdpRegisterEDrvHintInfo();
BapdpRegisterFwUpdateResults();
BapdpRegisterResumeInformation();
BapdpRegisterWbclData();
BapdpRegisterWmdResult();
BapdpWriteEventDataToRegistry();
BcdCloseObject();
BcdCloseStore();
BcdCreateObject();
BcdDeleteObject();
BcdEnumerateObjects();
BcdFlushStore();
BcdForciblyUnloadStore();
BcdGetElementData();
BcdGetElementDataWithFlags();
BcdGetSystemStorePath();
BcdInitializeBcdSyncMutant();
BcdOpenObject();
BcdOpenStore();
BcdQueryObject();
BcdSetElementData();
BcdSetElementDataWithFlags();
BcdUtilGetBootOption();
BcdUtilGetBootOptionBoolean();
BcdUtilGetBootOptionInteger();
BcdUtilGetBootOptionString();
BcpConvertBugDataToString();
BcpConvertProgressToString();
BcpCursorLessThan();
BcpDisplayCriticalCharacter();
BcpDisplayCriticalString();
BcpDisplayEarlyBugCheckScreen();
BcpDisplayErrorInformation();
BcpDisplayProgress();
BcpFindMessage();
BcpGetCharacterMaxResourceProfile();
BcpGetComponentOffsets();
BcpGetDisplayType();
BcpGetMaxResourceProfile();
BcpGetProgressMessages();
BcpPrintSpaces();
BcpSanitizeDriverName();
BgAcquireSpinLock();
BgConsoleDestroyInterface();
BgConsoleGetInterface();
BgConvertResources();
BgDisplayBackgroundUpdate();
BgDisplayFade();
BgDisplayProgressIndicator();
BgDisplaySafeToPowerOffScreen();
BgDisplayString();
BgFreeContext();
BgGetContext();
BgGetDisplayContext();
BgGetIsColorOverridden();
BgLibraryDestroy();
BgLibraryDisable();
BgLibraryEnable();
BgLibraryInitialize();
BgMarkHiberPhase();
BgQueryBootGraphicsInformation();
BgReleaseSpinLock();
BgSetFrameBufferAccess();
BgfxGrowDirtyRect();
BgkAcquireDisplayOwnership();
BgkDestroy();
BgkDisplayCharacter();
BgkDisplayString();
BgkDisplayStringEx();
BgkDrawText();
BgkGetConsoleState();
BgkGetCursorState();
BgkInitialize();
BgkNotifyDisplayOwnershipChange();
BgkNotifyDisplayOwnershipLost();
BgkQueryBootGraphicsInformation();
BgkResumeFinished();
BgkResumePrepare();
BgkSetCursor();
BgkSetDisplayOwnership();
BgkSetTextColor();
BgkSetVirtualFrameBuffer();
BgkSolidColorFill();
BgkpAcquireConsole();
BgkpDisableConsole();
BgkpLockBgfxCodeSection();
BgkpReleaseConsole();
BgkpResetDisplay();
BgkpTryEnableConsole();
BgkpUnlockBgfxCodeSection();
BgkpVgaBltRoutine();
BgpBcInitializeCriticalMode();
BgpClearScreen();
BgpConsoleClearScreen();
BgpConsoleClearScreenEx();
BgpConsoleDisplayCharacter();
BgpConsoleDisplayCharacterEx();
BgpConsoleDisplayString();
BgpConsoleDrawCursor();
BgpConsoleGetCursorState();
BgpConsoleGetFontName();
BgpConsoleGetState();
BgpConsoleInitialize();
BgpConsoleScrollScreen();
BgpConsoleSetCursor();
BgpConsoleSetPointSize();
BgpConsoleSetTextColor();
BgpDisplayCharacterDestroyContext();
BgpDisplayCharacterEx();
BgpDisplayCharacterGetContext();
BgpDisplaySafeToPowerOffScreen();
BgpFmRoundUp();
BgpFmSqrt();
BgpFoDestroy();
BgpFoDetermineFontInformation();
BgpFoGetAdvanceWidth();
BgpFoGetFontHandle();
BgpFoGetStringAdvanceWidth();
BgpFoGetTextMetrics();
BgpFoInitialize();
BgpFwAcquireLock();
BgpFwAllocateMemory();
BgpFwDisplayBugCheckProgressUpdate();
BgpFwDisplayBugCheckScreen();
BgpFwFreeMemory();
BgpFwGetCurrentIrql();
BgpFwInitializeLock();
BgpFwInitializeReservePool();
BgpFwLibraryDestroy();
BgpFwLibraryDisable();
BgpFwLibraryEnable();
BgpFwLibraryInitialize();
BgpFwMarkHiberPhase();
BgpFwQueryBootGraphicsInformation();
BgpFwQueryPerformanceCounter();
BgpFwReleaseLock();
BgpFwReserveAllocate();
BgpFwReservePoolSwap();
BgpGetBitsPerPixel();
BgpGetResolution();
BgpGxBlendColor();
BgpGxBlendRectangle();
BgpGxConvertRectangle();
BgpGxConvertRectangleEx();
BgpGxCopyBitmapToRectangle();
BgpGxCopyRectangle();
BgpGxDrawBitmapImage();
BgpGxDrawRectangle();
BgpGxFillRectangle();
BgpGxFindSubRectangle();
BgpGxInitializeRectangle();
BgpGxMarkClean();
BgpGxParseBitmap();
BgpGxProcessQrCodeBitmap();
BgpGxReadRectangle();
BgpGxRectangleCreate();
BgpGxRectangleDestroy();
BgpGxRectangleSize();
BgpGxReservePoolRectangleSize();
BgpRasGetGlyphAdvanceWidth();
BgpRasGetGlyphTextCellDimensions();
BgpRasInitializeRasterizer();
BgpRasPrintGlyph();
BgpTxtAdjustStaticRegion();
BgpTxtClearRegion();
BgpTxtCreateRegion();
BgpTxtDestroyRegion();
BgpTxtDisplayCharacter();
BgpTxtDisplayString();
BgpTxtGetRegionContext();
BgpTxtRegionSize();
BiAcquireBcdSyncMutant();
BiAcquirePrivilege();
BiAddBootEntry();
BiAddBootEntryToEfiBootManagerDisplayOrder();
BiAddBootEntryToNvramDisplayOrder();
BiAddStoreFromFile();
BiAdjustPrivilege();
BiBindEfiBootManager();
BiBindEfiEntries();
BiBindEfiEntryToBcdObject();
BiBindEfiNamespaceObjects();
BiBuildIdentifierList();
BiCleanupLoadedStores();
BiCloseKey();
BiCloseStore();
BiConvertBootEnvironmentDeviceToNt();
BiConvertBootEnvironmentDeviceToQualifiedPartition();
BiConvertBootEnvironmentDeviceToUnknown();
BiConvertElementFormatToValueType();
BiConvertElementToRegistryData();
BiConvertNtDeviceToBootEnvironment();
BiConvertNtFilePathToBootEnvironment();
BiConvertQualifiedPartitionToBootEnvironment();
BiConvertRegistryDataToElement();
BiCreateBootEntry();
BiCreateEfiEntry();
BiCreateFileDeviceElement();
BiCreateKey();
BiCreateKeySecurityDescriptor();
BiCreateMergedBootEntry();
BiCreateObject();
BiCreatePartitionDevice();
BiDeleteBootEntry();
BiDeleteEfiVariable();
BiDeleteElement();
BiDeleteKey();
BiDeleteRegistryValue();
BiDoesHiveExist();
BiDoesHiveKeyExist();
BiEnumerateBootEntries();
BiEnumerateSubKeys();
BiExportBcdObjects();
BiExportEfiBootManager();
BiExportStoreAlterationsToEfi();
BiExportStoreAlterationsToFirmware();
BiFreeIdentifierList();
BiGetCurrentBootEntryIdentifier();
BiGetDefaultBootEntryIdentifier();
BiGetDeviceFromEfiPath();
BiGetDriveLayoutBlock();
BiGetDriveLayoutInformation();
BiGetElement();
BiGetFilePathFromEfiPath();
BiGetFirmwareType();
BiGetKeyName();
BiGetNtPartitionPath();
BiGetObjectDescription();
BiGetObjectIdentifier();
BiGetObjectReferenceFromEfiEntry();
BiGetPartitionInformation();
BiGetPartitionVhdFilePathFromUnicodeString();
BiGetPhysicalDriveName();
BiGetRegistryValue();
BiGetSavedBootEntry();
BiGetSystemPartition();
BiGetVolumeDiskExtentsInformation();
BiHandleFirmwareDefaultEntry();
BiIsEnumerateMatch();
BiIsLinkedToEfiVariable();
BiIsLinkedToFirmwareVariable();
BiIsLogEnabled();
BiIsObjectAliased();
BiIsOfflineHandle();
BiIsPortableWorkspaceBoot();
BiIsSynchFirmwareEntries();
BiIsSystemStore();
BiIsValidObject();
BiIsVolumePartitionInformationRetained();
BiIsWinPEBoot();
BiIssueGetDriveLayoutIoctl();
BiLoadHive();
BiLoadSystemStore();
BiLogFileOwnerProcess();
BiLogMessage();
BiLookupObjectByBootEntry();
BiLookupObjectByIdentifierAndBootEntry();
BiMarkTreatAsSystemStore();
BiModifyBootEntry();
BiOpenKey();
BiOpenKeyNonBcd();
BiOpenStoreKeyFromObject();
BiOpenSystemStore();
BiQueryBootEntryOrder();
BiQueryBootOptions();
BiReleaseBcdSyncMutant();
BiReleasePrivilege();
BiRemoveBootEntryFromNvramDisplayOrder();
BiResolveLocateDevice();
BiSanitizeHandle();
BiSetBootEntryOrder();
BiSetBootOptions();
BiSetFirmwareModified();
BiSetFirmwareModifiedFromObject();
BiSetObjectDescription();
BiSetRegistryValue();
BiTranslateBootEntryId();
BiTranslateBootOrder();
BiTranslateDisplayOrder();
BiTranslateFilePath();
BiTranslateObjectIdentifier();
BiTranslateSymbolicLink();
BiTranslateSymbolicLinkFile();
BiUnloadHiveByHandle();
BiUnloadHiveByName();
BiUpdateBcdObject();
BiUpdateEfiEntry();
BiUpdateObjectReferenceInEfiEntry();
BiVerifyBootPartition();
BiWasFirmwareModified();
BiZwClose();
BiZwCreateKey();
BiZwDeleteKey();
BiZwDeleteValueKey();
BiZwEnumerateKey();
BiZwOpenKey();
BiZwQueryKey();
BiZwQueryValueKey();
BiZwSetSecurityObject();
BiZwSetValueKey();
BootApplicationPersistentDataInitialize();
BootApplicationPersistentDataProcess();
BuildQueryDirectoryIrp();
BvgaAcquireDisplayOwnership();
BvgaAcquireLock();
BvgaBitBlt();
BvgaCheckDisplayOwnership();
BvgaDisplayString();
BvgaDriverInitialize();
BvgaEnableBootDriver();
BvgaGetDisplayState();
BvgaGetResourceAddress();
BvgaIndicateProgress();
BvgaIsBootDriverInstalled();
BvgaNotifyDisplayOwnershipChange();
BvgaNotifyDisplayOwnershipLost();
BvgaReleaseLock();
BvgaReleaseResources();
BvgaResetDisplay();
BvgaSaveResources();
BvgaSetDisplayOwnership();
BvgaSetProgressBarSubset();
BvgaSetScrollRegion();
BvgaSetTextColor();
BvgaSetVirtualFrameBuffer();
BvgaSolidColorFill();
BvgaUpdateProgressBar();
CBufferGetNextOffset();
CMFAllocFn();
CMFCheckAccess();
CMFCreateSecurityDescriptor();
CMFFlushHitsFile();
CMFFreeFn();
CMFGetFileSizeEx();
CMFGetLargePageSectionSize();
CMFReadCompressedSegment();
CMFRegisterEventTime();
CMFSystemThreadRoutine();
CMFUnmapModules();
CanComposeHangul();
CancelTimerCallbacksAndDeleteTimer();
CcAcquireBcbLockAndVacbLock();
CcAcquireByteRangeForWrite();
CcAcquireByteRangeForWrite$filt$0();
CcAcquireByteRangeForWrite$filt$1();
CcAddDirtyPagesToExternalCache();
CcAddExternalCache();
CcAdjustBcbDepth();
CcAdjustCurrentThresholdWrtTop();
CcAdjustThrottle();
CcAdjustVacbLevelLockCount();
CcAdjustWriteBehindThreadPool();
CcAdjustWriteBehindThreadPoolIfNeeded();
CcAllocateInitializeBcb();
CcAllocateInitializeMbcb();
CcAllocateInitializeVacbArray();
CcAllocateObcb();
CcAllocateVacbLevel();
CcAllocateVacbLevels();
CcAllocateWorkQueueEntry();
CcAmILowPriorityWriter();
CcApplyLowIoPriorityToThread();
CcAreOffsetsRoughlyEqual();
CcAsyncCopyRead();
CcAsyncReadPrefetch();
CcAsyncReadPrefetch$fin$0();
CcAsyncReadWorker();
CcAsyncReadWorkerThread();
CcBcbProfiler();
CcBoostLowPriorityWorkerThread();
CcBuildUpHighPriorityMappings();
CcCalculatePagesToWrite();
CcCalculateVacbLevelLockCount();
CcCanIWrite();
CcCanIWriteStream();
CcCanReuseVacb();
CcCancelMmWaitForUninitializeCacheMap();
CcChangeBackingFileObject();
CcChargeDirtyPages();
CcChargeThreadForReadAhead();
CcCoalescingCallBack();
CcCoalescingCallBackHelper();
CcCoherencyFlushAndPurgeCache();
CcCompleteAsyncRead();
CcCompleteAsyncRead$filt$0();
CcCompleteAsyncRead$fin$1();
CcCompleteAsyncReadWorker();
CcComputeNextScanTime();
CcCopyBytesToUserBuffer();
CcCopyBytesToUserBuffer$filt$0();
CcCopyRead();
CcCopyReadEx();
CcCopyReadEx$fin$0();
CcCopyReadExceptionFilter();
CcCopyWrite();
CcCopyWriteEx();
CcCopyWriteWontFlush();
CcCreatePartition();
CcCreateVacbArray();
CcDeallocateBcb();
CcDeallocateVacbLevel();
CcDecrementOpenCount();
CcDeductDirtyPages();
CcDeductDirtyPagesFromExternalCache();
CcDeferWrite();
CcDeleteBcbs();
CcDeleteMbcb();
CcDeletePartition();
CcDeleteSectionsForPartition();
CcDeleteSharedCacheMap();
CcDereferenceFileOffset();
CcDereferencePartition();
CcDereferenceSharedCacheMapFileObject();
CcDereferenceVacbArray();
CcDetermineReadPattern();
CcExitPartition();
CcExtendVacbArray();
CcFastCopyRead();
CcFastCopyWrite();
CcFetchDataForRead();
CcFindBcb();
CcFindBitmapRangeToClean();
CcFindNextWorkQueueEntry();
CcFlushCache();
CcFlushCachePriv();
CcFlushCacheToLsn();
CcForEachPartition();
CcFreeUnusedVacbLevels();
CcFreeVacbArray();
CcFreeVirtualAddress();
CcFreeWorkQueueEntry();
CcGetBcbListHeadLargeOffset();
CcGetCachedDirtyPageCountForFile();
CcGetDirtyPages();
CcGetDirtyPagesHelper();
CcGetDirtyPagesHelper$fin$0();
CcGetFileObjectFromBcb();
CcGetFileObjectFromSectionPtrs();
CcGetFileObjectFromSectionPtrsRef();
CcGetFlushedValidData();
CcGetLsnForFileObject();
CcGetNumberOfMappedPages();
CcGetPartition();
CcGetPartitionFromFileObject();
CcGetRandomVacbArrayWithReference();
CcGetVacbFromFreeList();
CcGetVacbLargeOffset();
CcGetVacbMiss();
CcGetVirtualAddress();
CcGetVirtualAddressIfMapped();
CcIncrementVacbActiveCount();
CcInitializeAsyncRead();
CcInitializeBcbProfiler();
CcInitializeCacheManager();
CcInitializeCacheMap();
CcInitializeCacheMapEx();
CcInitializePartition();
CcInitializePartitionVacbs();
CcInitializeProcessor();
CcInitializeVolumeCacheMap();
CcInsertIntoCleanSharedCacheMapList();
CcInsertIntoDirtySharedCacheMapList();
CcInsertVacbArray();
CcIsFatalWriteError();
CcIsThereDirtyData();
CcIsThereDirtyDataEx();
CcIsThereDirtyDataHelper();
CcIsThereDirtyLoggedPages();
CcLazyWriteScan();
CcLockSystemCacheBuffer();
CcLogExtraWBThreadAction();
CcMapAndCopyFromCache();
CcMapAndCopyInToCache();
CcMapAndCopyInToCache$filt$0();
CcMapAndCopyInToCache$fin$1();
CcMapAndRead();
CcMapData();
CcMapData$fin$0();
CcMapDataCommon();
CcMapDataForOverwrite();
CcMapDataForOverwrite$fin$0();
CcMdlRead();
CcMdlRead$fin$0();
CcMdlReadComplete();
CcMdlReadComplete2();
CcMdlWriteAbort();
CcMdlWriteComplete();
CcMdlWriteComplete2();
CcMmLogLostDelayedWriteError();
CcNotifyExternalCaches();
CcNotifyOfMappedWrite();
CcNotifyOfMappedWriteComplete();
CcNotifyWriteBehind();
CcNotifyWriteBehindEx();
CcNotifyWriteBehindHelper();
CcNotifyWriteBehindInternal();
CcOkToAddWriteBehindThread();
CcPerfLogCanWriteFail();
CcPerfLogExtraWBThreadAction();
CcPerfLogFlushCache();
CcPerfLogFlushSection();
CcPerfLogLazyWriteScan();
CcPerfLogLoggedStreamsStats();
CcPerfLogScheduleReadAhead();
CcPerfLogVolumeLogHandleInfo();
CcPerfLogWorkItemEnqueue();
CcPerformReadAhead();
CcPerformReadAhead$filt$0();
CcPerformReadAhead$fin$1();
CcPinFileData();
CcPinFileData$fin$0();
CcPinMappedData();
CcPinMappedData$fin$0();
CcPinRead();
CcPinRead$fin$0();
CcPostDeferredWrites();
CcPostWorkQueue();
CcPostWorkQueueAsyncRead();
CcPrepareMdlWrite();
CcPrepareMdlWrite$fin$0();
CcPreparePinWrite();
CcPreparePinWrite$fin$0();
CcPurgeAndClearCacheSection();
CcPurgeCacheSection();
CcQueueLazyWriteScanThread();
CcReEngageWorkerThreads();
CcRecalculateVacbArrayHighwaterMark();
CcReferenceFileOffset();
CcReferenceSharedCacheMapFileObject();
CcReferenceVacbArray();
CcRegisterExternalCache();
CcReleaseBcbLockAndVacbLock();
CcReleaseByteRangeFromWrite();
CcRemapBcb();
CcRemoveExternalCache();
CcRemoveVacbArray();
CcRepinBcb();
CcRescheduleLazyWriteScan();
CcSaveNVContext();
CcSaveNVContext2();
CcScanDpc();
CcScanLogHandleList();
CcScheduleLazyWriteScan();
CcScheduleReadAhead();
CcScheduleReadAheadEx();
CcSetAdditionalCacheAttributes();
CcSetAdditionalCacheAttributesEx();
CcSetBcbOwnerPointer();
CcSetDirtyInMask();
CcSetDirtyPageThreshold();
CcSetDirtyPinnedData();
CcSetFileSizes();
CcSetFileSizesEx();
CcSetLazyWriteScanQueued();
CcSetLogHandleForFile();
CcSetLogHandleForFileEx();
CcSetLoggedDataThreshold();
CcSetParallelFlushFile();
CcSetReadAheadGranularity();
CcSetReadAheadGranularityEx();
CcSetVacbInFreeList();
CcSetVacbLargeOffset();
CcSetValidData();
CcShouldLazyWriteCacheMap();
CcShouldSpinAsyncReadWorkerThread();
CcSlowReferenceSharedCacheMapFileObject();
CcTestControl();
CcUninitializeAsyncRead();
CcUninitializeCacheMap();
CcUninitializePartitionVacbs();
CcUninitializeVolumeCacheMap();
CcUnmapAndPurge();
CcUnmapFileOffsetFromSystemCache();
CcUnmapInactiveViews();
CcUnmapInactiveViewsInternal();
CcUnmapVacb();
CcUnmapVacbArray();
CcUnpinData();
CcUnpinDataForThread();
CcUnpinFileDataEx();
CcUnpinRepinnedBcb();
CcUnregisterExternalCache();
CcUpdateReadHistory();
CcUpdateSharedCacheMapFlag();
CcUpdateTimeOnLogHandles();
CcWaitForCurrentLazyWriterActivity();
CcWaitForCurrentLazyWriterActivityHelper();
CcWaitForCurrentLazyWriterActivityInternal();
CcWaitForUninitializeCacheMap();
CcWaitForUninitializeCacheMap$fin$0();
CcWorkerThread();
CcWorkerThread$filt$0();
CcWriteBehind();
CcWriteBehindInternal();
CcZeroData();
CcZeroData$fin$0();
CcZeroDataInCache();
CcZeroDataInCache$fin$0();
CcZeroDataOnDisk();
CcZeroEndOfLastPage();
CfgAddressToBitState();
CheckOneBitValidFlag();
CloseGlobalizationUserSettingsKey();
CmAddLogForAction();
CmAddPanelDevice();
CmAddPanelDeviceWorker();
CmAllocateExtraParameter();
CmAppendInstallerClassFiltersLevel();
CmBuildDevicePanelId();
CmCallbackGetKeyObjectID();
CmCallbackGetKeyObjectIDEx();
CmCallbackReleaseKeyObjectIDEx();
CmCheckNoTxContext();
CmCheckRegistry();
CmClassFilterCallback();
CmClassPropertyWrite();
CmCloseRmHandle();
CmCloseTmHandle();
CmCompleteRegistryInitialization();
CmCompressKey();
CmConvertHandleToKernelHandle();
CmCreateDevicePanel();
CmCreateDevicePanelWorker();
CmCreateDeviceWorker();
CmCreateInstallerClass();
CmCreateInstallerClassWorker();
CmCreateKey();
CmDeleteCommonClassRegKey();
CmDeleteCommonClassRegKeyWorker();
CmDeleteDevice();
CmDeleteDeviceContainer();
CmDeleteDeviceContainerRegKey();
CmDeleteDeviceContainerRegKeyWorker();
CmDeleteDeviceContainerWorker();
CmDeleteDeviceInterface();
CmDeleteDeviceInterfaceMappedPropertyFromRegValue();
CmDeleteDeviceInterfaceRegKey();
CmDeleteDeviceInterfaceRegKeyWorker();
CmDeleteDeviceInterfaceWorker();
CmDeleteDeviceMappedPropertyForAllDriverKeyRegValues();
CmDeleteDeviceMappedPropertyFromDriverKeyRegValue();
CmDeleteDeviceMappedPropertyFromInstanceKeyRegValue();
CmDeleteDevicePanel();
CmDeleteDevicePanelRegKey();
CmDeleteDevicePanelRegKeyWorker();
CmDeleteDevicePanelWorker();
CmDeleteDeviceRegKey();
CmDeleteDeviceRegKeyWorker();
CmDeleteDeviceWorker();
CmDeleteInstallerClass();
CmDeleteInstallerClassMappedPropertyFromCoInstallers();
CmDeleteInstallerClassMappedPropertyFromRegValue();
CmDeleteInstallerClassWorker();
CmDeleteInterfaceClass();
CmDeleteInterfaceClassMappedPropertyFromRegValue();
CmDeleteInterfaceClassWorker();
CmDeleteKey();
CmDeleteKeyRecursive();
CmDeleteLayeredKey();
CmDeleteValueKey();
CmDevicePropertyWrite();
CmDoVirtualTest();
CmDumpKey();
CmEnumDevicesInContainerWithCallback();
CmEnumDevicesInContainerWithCallbackWorker();
CmEnumerateKey();
CmEnumerateValueFromLayeredKey();
CmEnumerateValueKey();
CmEnumerateValueKeyFromMergedView();
CmEqualTrans();
CmEtwRunDown();
CmFindInstallerClassFilterInflectionPoint();
CmFreezeRegistry();
CmGetBoundTransaction();
CmGetCallbackVersion();
CmGetContainerBooleanProperty();
CmGetContainerBooleanPropertyCallback();
CmGetDeviceChildren();
CmGetDeviceContainerIdFromBase();
CmGetDeviceContainerMappedPropertyKeys();
CmGetDeviceContainerMappedPropertyLocales();
CmGetDeviceInterfaceClassGuid();
CmGetDeviceInterfaceClassGuidString();
CmGetDeviceInterfaceMappedProperty();
CmGetDeviceInterfaceMappedPropertyKeys();
CmGetDeviceInterfaceMappedPropertyLocales();
CmGetDeviceInterfacePathFormat();
CmGetDeviceMappedPropertyKeys();
CmGetDeviceMappedPropertyLocales();
CmGetDevicePanelMappedProperty();
CmGetDevicePanelMappedPropertyKeys();
CmGetDevicePanelMappedPropertyLocales();
CmGetDevicePanelRegKeyPath();
CmGetDeviceRelationsList();
CmGetDeviceSiblings();
CmGetDeviceStatus();
CmGetDevicesInBaseContainerList();
CmGetInstallerClassCompoundFilterList();
CmGetInstallerClassCompoundFiltersWorker();
CmGetInstallerClassMappedPropertyKeys();
CmGetInstallerClassMappedPropertyLocales();
CmGetInterfaceClassMappedPropertyFromComposite();
CmGetInterfaceClassMappedPropertyKeys();
CmGetInterfaceClassMappedPropertyLocales();
CmGetKCBCacheSecurity();
CmGetKeyFlags();
CmGetKeyLastWriteTime();
CmGetMatchingDeviceContainerListWorker();
CmGetMatchingFilteredDeviceListWorker();
CmGetRootKeyObjectForSilo();
CmGetSystemDriverList();
CmGetVisibleMaxNameLenAndClassLen();
CmGetVisibleMaxValueNameLenAndDataLen();
CmGetVisibleSubkeyCount();
CmGetVisibleValueCount();
CmInitServerSiloState();
CmInitSystem0();
CmInitSystem1();
CmInitSystem2();
CmInitializeProcessor();
CmIsDeviceInterfaceEnabled();
CmIsDevicePresent();
CmIsLastKnownGoodBoot();
CmIsLocalMachineContainer();
CmIsRootDevice();
CmIsRootEnumeratedDevice();
CmIsStateSeparationDevModeEnabled();
CmKeyBodyNeedsVirtualImage();
CmKeyBodyRemapToVirtual();
CmKeyBodyRemapToVirtualForEnum();
CmKeyBodyReplicateToVirtual();
CmKtmNotification();
CmListGetNextElement();
CmListGetPrevElement();
CmLoadAppKey();
CmLoadDifferencingKey();
CmLoadKey();
CmLockHiveSecurityExclusive();
CmLockKeyForWrite();
CmLogMcUpdateStatus();
CmLogTmRmAction();
CmMapPropertyKeyToRegProp();
CmMatchLastKnownParentCallback();
CmMergeInstallerClassFilterLists();
CmMoveBaseContainer();
CmNotifyRunDown();
CmObReferenceObjectByHandle();
CmObliterateRMTxArray();
CmOpenDevicePanelRegKey();
CmOpenDevicePanelRegKeyWorker();
CmOpenInstallerClassRegKey();
CmOpenInterfaceClassRegKey();
CmOpenKey();
CmPostCallbackNotification();
CmPostCallbackNotificationEx();
CmQueryKey();
CmQueryKey$fin$0();
CmQueryLayeredKey();
CmQueryMultipleValueForLayeredKey();
CmQueryMultipleValueKey();
CmQueryRegistryQuotaInformation();
CmQueryValueKey();
CmRaiseDeleteEvent();
CmRealKCBToVirtualPath();
CmReconcileAndValidateAllHives();
CmRegisterCallback();
CmRegisterCallbackEx();
CmRegisterSystemHiveLimitCallback();
CmReleaseLoadKeyContext();
CmRemoveDeviceFromContainer();
CmRemoveDeviceFromContainerWorker();
CmRemovePanelDevice();
CmRemovePanelDeviceWorker();
CmRenameKey();
CmReplaceKey();
CmRestoreKey();
CmRetrieveExtraParameter();
CmRmFinalizeRecovery();
CmRmIsKCBVisible();
CmSaveKey();
CmSaveMergedKeys();
CmSelectQualifiedInstallLanguage();
CmServiceFilterCallback();
CmSetAcpiHwProfile();
CmSetCallbackObjectContext();
CmSetDeviceInterfacePathFormat();
CmSetDeviceMappedPropertyFromInstanceKeyRegValue();
CmSetDevicePanelMappedProperty();
CmSetInstallerClassMappedProperty();
CmSetInstallerClassMappedPropertyFromCoInstallers();
CmSetInstallerClassMappedPropertyFromRegProp();
CmSetInstallerClassMappedPropertyFromRegValue();
CmSetInstallerClassRegProp();
CmSetInstallerClassRegPropWorker();
CmSetInterfaceClassMappedProperty();
CmSetInterfaceClassMappedPropertyFromRegValue();
CmSetKeyFlags();
CmSetLastWriteTimeKey();
CmSetLazyFlushState();
CmSetRegistryQuotaInformation();
CmSetValueKey();
CmShutdownCmRM();
CmShutdownSystem();
CmSiAllocateMemory();
CmSiBugCheck();
CmSiCloseSection();
CmSiCreateSectionForFile();
CmSiExtendSection();
CmSiFreeMemory();
CmSiGetMemoryAllocationGranularity();
CmSiGetSectionLength();
CmSiLockViewOfSection();
CmSiMapViewOfSection();
CmSiPrefetchVirtualMemoryRange();
CmSiProcessTupleInitialize();
CmSiProcessTupleStartFromHandle();
CmSiProtectViewOfSection();
CmSiUnlockViewOfSection();
CmSiUnmapViewOfSection();
CmSnapshotRMTxArray();
CmSplitDevicePanelId();
CmThawRegistry();
CmTmCreateEnlistment();
CmUnRegisterCallback();
CmUnloadKey();
CmUnlockHiveSecurity();
CmValidateDeviceContainerName();
CmValidateDeviceInterfaceName();
CmValidateDeviceName();
CmValidateDevicePanelName();
CmValidateInstallerClassName();
CmValidateInterfaceClassName();
CmVirtualKCBToRealPath();
CmWorkerEngineDequeueWorkItem();
CmWorkerEngineQueueWorkItem();
CmpAbortLightWeightTransaction();
CmpAbortRollbackPacket();
CmpAcceptBoot();
CmpAccountForLogReservation();
CmpAcquireShutdownRundown();
CmpAcquireSystemDriverHiveContext();
CmpAddAcpiAliasEntry();
CmpAddAliasEntry();
CmpAddDockingInfo();
CmpAddDriverToList();
CmpAddEnlistmentToRollbackPacket();
CmpAddKeyHashToEntry();
CmpAddPointerToRollbackPacket();
CmpAddProcessorConfigurationEntry();
CmpAddRemoveContainerToCLFSLog();
CmpAddRemoveRMLogContainer();
CmpAddSecurityCellToCache();
CmpAddStringToMapping();
CmpAddSubKey();
CmpAddSubKeyEx();
CmpAddSubKeyToList();
CmpAddToDelayedClose();
CmpAddToDelayedDeref();
CmpAddToHiveFileList();
CmpAddToLeaf();
CmpAddUoWToRollbackPacket();
CmpAddValueKeyNew();
CmpAddValueKeyTombstone();
CmpAddValueToListEx();
CmpAdjustRequestedFileSize();
CmpAdjustSecurityCacheSize();
CmpAdminSystemSecurityDescriptor();
CmpAllocate();
CmpAllocateKeyControlBlock();
CmpAllocateLayerInfoForKcb();
CmpAllocatePoolWithTag();
CmpAllocatePostBlock();
CmpAllocateSiloContext();
CmpAllocateTransientPoolWithQuotaTag();
CmpAllocateTransientPoolWithTag();
CmpAllocateUnitOfWork();
CmpAppendDllSection();
CmpAppendLine();
CmpAppendSection();
CmpAppendValue();
CmpArmDelayDerefKCBWorker();
CmpArmLazyWriter();
CmpAssignKeySecurity();
CmpAssignSecurityDescriptor();
CmpAssignSecurityToKcb();
CmpAttachToRegistryProcess();
CmpBecomeActiveFlusherAndReconciler();
CmpBindHiveToTrans();
CmpBlockHiveWrites();
CmpBlockTwoHiveWrites();
CmpBoostActiveHiveWriter();
CmpBounceContextCleanup();
CmpBounceContextCopyDataToCallerBuffer();
CmpBounceContextStart();
CmpBuildAdminInformation();
CmpBuildRegMultiSz();
CmpBuildVirtualReplicationStack();
CmpCallCallBacks();
CmpCallCallBacksEx();
CmpCallCallBacksEx$filt$0();
CmpCallCallBacksEx$filt$1();
CmpCallbackFatalFilter();
CmpCallbackFillObjectContext();
CmpCanGrowHive();
CmpCancelSubordinatePost();
CmpCaptureKeyValueArray();
CmpCheckAdminAccess();
CmpCheckAndFixSecurityCellsRefcount();
CmpCheckCreateAccess();
CmpCheckCreateAccessOnKcbStack();
CmpCheckHivePrimaryFileReadWriteAccess();
CmpCheckKey();
CmpCheckKeyAccess();
CmpCheckKeyBodyAccess();
CmpCheckKeyNodeStackAccess();
CmpCheckKeySecurityDescriptorAccess();
CmpCheckLeaf();
CmpCheckLexicographicalOrder();
CmpCheckNotifyAccess();
CmpCheckOpenAccessOnKeyBody();
CmpCheckRegistry2();
CmpCheckSecurityCellAccess();
CmpCheckValueList();
CmpCheckWrpKeyAccess();
CmpClaimGlobalQuota();
CmpCleanUpHigherLayerKcbCachesPostCallback();
CmpCleanUpHigherLayerKcbCachesPreCallback();
CmpCleanUpKCBCacheTable();
CmpCleanUpKcbCacheWithLock();
CmpCleanUpKcbValueCache();
CmpCleanUpSubKeyInfo();
CmpCleanupDiscardReplaceContext();
CmpCleanupDiscardReplacePost();
CmpCleanupDiscardReplacePre();
CmpCleanupKcbStack();
CmpCleanupKeyNodeStack();
CmpCleanupLightWeightPrepare();
CmpCleanupLightWeightTransaction();
CmpCleanupParseContext();
CmpCleanupPathInfo();
CmpCleanupRollbackPacket();
CmpCleanupTransactionState();
CmpClearKeyAccessBits();
CmpCloneHwProfile();
CmpCloneKCBValueListForTrans();
CmpCloneToUnbackedKcb();
CmpCloseKeyObject();
CmpCloseLightWeightTransaction();
CmpCloseSystemDriverHiveContext();
CmpCmdHiveClose();
CmpCmdHiveOpen();
CmpCmdInit();
CmpCmdRenameHive();
CmpCoalescingCallback();
CmpCommitAddKeyUoW();
CmpCommitDeleteKeyUoW();
CmpCommitDeleteValueKeyUoW();
CmpCommitDiscardAndReplaceKcbAndUnbackedHigherLayers();
CmpCommitDiscardReplacePost();
CmpCommitDiscardReplacePre();
CmpCommitLightWeightTransaction();
CmpCommitPreparedLightWeightTransaction();
CmpCommitRenameKeyUoW();
CmpCommitSetSecurityUoW();
CmpCommitSetValueKeyUoW();
CmpCompareCompressedName();
CmpCompareInIndex();
CmpCompareKeysByName();
CmpCompareNewValueDataAgainstKCBCache();
CmpCompareTwoCompressedNames();
CmpCompareUnicodeString();
CmpCompleteFlushAndPurgeIrp();
CmpCompleteLazyWrite();
CmpCompleteUnloadKey();
CmpComputeComponentHashes();
CmpComputeLogFillLevel();
CmpConcatenateValueLists();
CmpConstructAndCacheName();
CmpConstructName();
CmpConstructNameFromKcbNameBlocks();
CmpConstructNameFromKeyNodes();
CmpConstructNameWithStatus();
CmpConvertLangId();
CmpCopyCell();
CmpCopyCompressedName();
CmpCopyKeyPartial();
CmpCopyMergeOfLayeredKeyNode();
CmpCopyName();
CmpCopySaclToVirtualKey();
CmpCopySyncTree();
CmpCopySyncTree2();
CmpCopyValue();
CmpCreateChild();
CmpCreateControlSet();
CmpCreateEmptyHiveClone();
CmpCreateEmptyKey();
CmpCreateEvent();
CmpCreateExtendedControlSets();
CmpCreateGlobalKeyLockEntry();
CmpCreateHardwareProfiles();
CmpCreateHive();
CmpCreateHiveRootCell();
CmpCreateHwProfileFriendlyName();
CmpCreateKeyBody();
CmpCreateKeyControlBlock();
CmpCreateLayerLink();
CmpCreateObjectTypes();
CmpCreatePerfKeys();
CmpCreatePredefined();
CmpCreateRegistryProcessToken();
CmpCreateRegistryRoot();
CmpCreateRegistryThread();
CmpCreateRootNode();
CmpCreateSiloKeyLockEntry();
CmpCreateTemporaryHive();
CmpCreateTombstone();
CmpDecrementAppHiveUnloadCount();
CmpDelayCloseWorker();
CmpDelayDerefKCBTimerRoutine();
CmpDelayDerefKCBWorker();
CmpDelayDerefKeyControlBlock();
CmpDelayFreeCmRm();
CmpDelayFreeRMDpcRoutine();
CmpDelayFreeRMWorker();
CmpDelayedDerefKeys();
CmpDeleteHive();
CmpDeleteKcbCache();
CmpDeleteKeyObject();
CmpDeleteLightWeightTransaction();
CmpDeleteTree();
CmpDereferenceHive();
CmpDereferenceKeyControlBlock();
CmpDereferenceKeyControlBlockUnsafe();
CmpDereferenceKeyControlBlockWithLock();
CmpDereferenceNameControlBlockWithLock();
CmpDestroyHive();
CmpDestroySecurityCache();
CmpDestroyVirtualStack();
CmpDetachFromRegistryProcess();
CmpDisableLazyFlush();
CmpDiscardKcb();
CmpDiskFullWarning();
CmpDiskFullWarningWorker();
CmpDoAccessCheckOnKCB();
CmpDoAccessCheckOnLayeredSubtree();
CmpDoAccessCheckOnSubtree();
CmpDoBuildVirtualStack();
CmpDoCompareKeyName();
CmpDoFileFlush();
CmpDoFileRead();
CmpDoFileSetSizeEx();
CmpDoFileWrite();
CmpDoFindSubKeyByNumber();
CmpDoFlushAll();
CmpDoFlushNextHive();
CmpDoLocalizeNextHive();
CmpDoParseKey();
CmpDoQueryKeyName();
CmpDoQueueLateUnloadWorker();
CmpDoQueueSystemHiveHysteresis();
CmpDoReDoCreateKey();
CmpDoReDoDeleteValue();
CmpDoReDoRecord();
CmpDoReDoRenameKey();
CmpDoReDoSetKeyUserFlags();
CmpDoReDoSetLastWriteTime();
CmpDoReDoSetSecurityDescriptor();
CmpDoReDoSetValueExisting();
CmpDoReDoSetValueNew();
CmpDoReOpenTransKey();
CmpDoReadTxRBigLogRecord();
CmpDoReconcileNextHive();
CmpDoSort();
CmpDoTransWriteLogRecord();
CmpDoWritethroughReparse();
CmpDoesBufferRequireCapturing();
CmpDoesKeyHaveOpenSubkeys();
CmpDoesKeyHaveOpenSubkeysWorker();
CmpDoesParseEnterRegistryA();
CmpDoesProcessBelongToServiceSession();
CmpDummyApc();
CmpDummyThreadRoutine();
CmpDumpKeyBodyList();
CmpDumpOneKeyBody();
CmpDuplicateIndex();
CmpEffectiveTokenForSubject();
CmpEnableLazyFlush();
CmpEnableLazyFlushDpcRoutine();
CmpEnableLazyFlushDpcRoutine$filt$2();
CmpEnableLazyFlushDpcRoutine$fin$0();
CmpEnableLazyFlushDpcRoutine$fin$1();
CmpEnumerateAllHigherLayerKcbs();
CmpEnumerateAllOpenSubKeys();
CmpEnumerateCallback();
CmpEnumerateKcbCacheBucket();
CmpEnumerateLayeredKey();
CmpEtwDumpKcb();
CmpExamineSaclForAuditEvent();
CmpExpandPathInfo();
CmpFatalFilter();
CmpFileFlush();
CmpFileFlushAndPurge();
CmpFileRead();
CmpFileWrite();
CmpFilterAcpiDockingState();
CmpFindCellInIndex();
CmpFindControlSet();
CmpFindDrivers();
CmpFindExtraParameterInBlock();
CmpFindGroupOrderList();
CmpFindHiveSubKey();
CmpFindKcbInHashEntryByCellIndex();
CmpFindKcbInHashEntryByCompressedName();
CmpFindKcbInHashEntryByName();
CmpFindMatchingDescriptorCell();
CmpFindNameInList();
CmpFindNameInListCellWithStatus();
CmpFindNameInListWithStatus();
CmpFindPathByName();
CmpFindRedirectedDriverServiceStateNode();
CmpFindSecurityCellCacheIndex();
CmpFindSubKeyByHashWithStatus();
CmpFindSubKeyByName();
CmpFindSubKeyByNameWithStatus();
CmpFindSubKeyByNumber();
CmpFindSubKeyByNumberEx();
CmpFindSubKeyByNumberFromMergedView();
CmpFindSubKeyInLeafWithStatus();
CmpFindSubKeyInRoot();
CmpFindSubkeyInHashByChildCell();
CmpFindTagIndex();
CmpFindValueByName();
CmpFinishBeingActiveFlusherAndReconciler();
CmpFinishSystemHivesLoad();
CmpFireCleanupNotifications();
CmpFlushBackupHive();
CmpFlushHive();
CmpFlushNotifiesOnAllUnbackedHigherLayerKcbs();
CmpFlushNotifiesOnKeyBodyList();
CmpFlushNotifiesPostCallback();
CmpFlushNotifiesPreCallback();
CmpFlushNotify();
CmpFlushUnsupportedOperationTelemetry();
CmpForceFlushForCoalescing();
CmpForceFlushWorker();
CmpFree();
CmpFreeAllMemory();
CmpFreeBootRegistry();
CmpFreeCallbackContext();
CmpFreeCallbackObjectContexts();
CmpFreeDriverList();
CmpFreeExtraParameter();
CmpFreeIndexByCell();
CmpFreeKeyBody();
CmpFreeKeyByCell();
CmpFreeKeyControlBlock();
CmpFreeKeyValueList();
CmpFreeKeyValues();
CmpFreeLineList();
CmpFreeOffsetArray();
CmpFreePool();
CmpFreePoolWithTag();
CmpFreePostBlock();
CmpFreeSectionList();
CmpFreeSecurityDescriptor();
CmpFreeSiloContextCallback();
CmpFreeSiloKeyLockEntry();
CmpFreeSubordinatePost();
CmpFreeTransientPool();
CmpFreeTransientPoolWithTag();
CmpFreeValue();
CmpFreeValueData();
CmpFreezeHive();
CmpFreezeThawDpcRoutine();
CmpFreezeThawWorker();
CmpFullPromoteHiveRootFromKcbStack();
CmpFullPromoteSingleKeyFromKeyNodeStacks();
CmpGenerateAppHiveSecurityDescriptor();
CmpGenerateFastLeafHintForUnicodeString();
CmpGenerateFlushControlData();
CmpGetAcpiBiosVersion();
CmpGetAcpiProfileInformation();
CmpGetBiosDate();
CmpGetBiosVersion();
CmpGetBootValueData();
CmpGetCachedFullKCBName();
CmpGetCallbackObjectContext();
CmpGetCmHiveFromVirtualPath();
CmpGetComponentHashAtIndex();
CmpGetComponentNameAtIndex();
CmpGetCorrectKcbLockOrder();
CmpGetEffectiveKeyNodeSemantics();
CmpGetFileSize();
CmpGetIndexElementSize();
CmpGetKcbAtLayerHeight();
CmpGetKeyName();
CmpGetKeyNodeForKcb();
CmpGetKnownHivePathNode();
CmpGetLastHive();
CmpGetMappingHiveForString();
CmpGetNameControlBlock();
CmpGetNextActiveHive();
CmpGetNextHive();
CmpGetNextName();
CmpGetNodeName();
CmpGetOrCreateContextForSiloNoRef();
CmpGetPhaseAccessBit();
CmpGetRegistryNamespaceRootForSilo();
CmpGetRegistryValue();
CmpGetSectionLineIndex();
CmpGetSectionLineIndexValueCount();
CmpGetSecurityCacheEntryForKcbStack();
CmpGetSecurityCellForKeyNodeStack();
CmpGetSecurityDescriptorForKcbStack();
CmpGetSecurityDescriptorNode();
CmpGetSubKeyCountForKcbStack();
CmpGetSubKeyCountForKeyNodeStack();
CmpGetSymbolicLinkTarget();
CmpGetSystemControlValues();
CmpGetSystemRelativeRegistryHiveFilePath();
CmpGetToken();
CmpGetValueCountForKeyNodeStack();
CmpGetValueData();
CmpGetValueDataFromCache();
CmpGetValueForAudit();
CmpGetVirtualStoreRoot();
CmpGetVirtualizationID();
CmpGetVirtualizationIDFromFullVirtualPath();
CmpGetVolumeClusterSize();
CmpGetVolumeClusterSizeCompletion();
CmpGetVolumeLogFileSizeCap();
CmpGlobalLockKeyForWrite();
CmpGlobalUnlockKeyForWrite();
CmpHKeyNameLen();
CmpHandlePageFileOpenNotification();
CmpHashCompressedComponent();
CmpHashUnicodeComponent();
CmpHiveInitialize();
CmpHiveRootSecurityDescriptor();
CmpHwprofileDefaultSelect();
CmpIncrementCachedSecurityRefcount();
CmpIncrementKcbSequenceNumber();
CmpInitBackupHive();
CmpInitCallbacks();
CmpInitCmRM();
CmpInitDelayDerefKCBEngine();
CmpInitGlobalQuotaAllowed();
CmpInitHiveFromFile();
CmpInitSIDToHiveMapping();
CmpInitSecurityCache();
CmpInitSiloSupport();
CmpInitializeActualFileSizes();
CmpInitializeDelayedCloseTable();
CmpInitializeDiscardReplaceContext();
CmpInitializeDriverStores();
CmpInitializeFreezeThaw();
CmpInitializeGlobalKeyLockTracker();
CmpInitializeHardwareConfiguration();
CmpInitializeKcbCache();
CmpInitializeKcbStack();
CmpInitializeKeyNameString();
CmpInitializeKeyNodeStack();
CmpInitializeLazyWriters();
CmpInitializeLightWeightTransactionType();
CmpInitializeLoadOptions();
CmpInitializeMachineDependentConfiguration();
CmpInitializeNameCache();
CmpInitializeParseContext();
CmpInitializePreloadedHive();
CmpInitializePreloadedHives();
CmpInitializeRegistryNames();
CmpInitializeRegistryNode();
CmpInitializeRegistryProcess();
CmpInitializeRollbackPacket();
CmpInitializeSystemBiosInformation();
CmpInitializeSystemHive();
CmpInitializeSystemHivesLoad();
CmpInitializeTransactions();
CmpInitializeTrustedInstallerSid();
CmpInitializeValueNameString();
CmpInsertCallbackInListByAltitude();
CmpInsertKeyHash();
CmpInsertSecurityCellList();
CmpInterlockedFunction();
CmpInvalidateAllHigherLayerKcbsPostCallback();
CmpInvalidateAllHigherLayerKcbsPreCallback();
CmpInvalidateSubtree();
CmpInvalidateSubtreeWorker();
CmpIsBufferGloballyVisible();
CmpIsCmRm();
CmpIsHiveAlreadyLoaded();
CmpIsHiveBoundToTrans();
CmpIsHiveEligibleForLazyReconcile();
CmpIsHiveLoadingOnOtherThread();
CmpIsKcbInsideVirtualizedHive();
CmpIsKcbLockAllowed();
CmpIsKeyDeleted();
CmpIsKeyDeletedForKeyBody();
CmpIsKeyStackDeleted();
CmpIsKeyStackSymlink();
CmpIsLoadType();
CmpIsLockAllowedByIndex();
CmpIsRegistryLockContended();
CmpIsSystemEntity();
CmpIsThisSameFile();
CmpIsValueTombstone();
CmpIsVirtEnabledForSubject();
CmpIssueNewDirtyCallback();
CmpKeyEnumStackAdvance();
CmpKeyEnumStackAdvanceInternal();
CmpKeyEnumStackBeginEnumerationForKeyNodeStack();
CmpKeyEnumStackCleanup();
CmpKeyEnumStackCreateResumeContext();
CmpKeyEnumStackEntryAdvance();
CmpKeyEnumStackEntryBegin();
CmpKeyEnumStackEntryCleanup();
CmpKeyEnumStackEntryInitialize();
CmpKeyEnumStackEntryNotifyPromotion();
CmpKeyEnumStackFreeResumeContext();
CmpKeyEnumStackGetEntryAtLayerHeight();
CmpKeyEnumStackInitialize();
CmpKeyEnumStackNotifyPromotion();
CmpKeyEnumStackReset();
CmpKeyEnumStackStart();
CmpKeyEnumStackStartFromKcbStack();
CmpKeyEnumStackStartFromKeyNodeStack();
CmpKeyEnumStackVerifyResumeContext();
CmpKeyFullNameLength();
CmpKeyNodeNeedsAccessBitUpdate();
CmpKeyNodeStackGetEntryAtLayerHeight();
CmpLateUnloadHiveWorker();
CmpLazyCommitDpcRoutine();
CmpLazyCommitWorker();
CmpLazyFlushDpcRoutine();
CmpLazyFlushDpcRoutine$filt$1();
CmpLazyFlushDpcRoutine$fin$0();
CmpLazyWriteWorker();
CmpLightWeightCleanupModifyKeyDataUoW();
CmpLightWeightCleanupSetValueKeyUoW();
CmpLightWeightCommitAddKeyUoW();
CmpLightWeightCommitDeleteKeyUoW();
CmpLightWeightCommitDeleteValueKeyUoW();
CmpLightWeightCommitRenameKeyUoW();
CmpLightWeightCommitSetSecDescUoW();
CmpLightWeightCommitSetUserFlagsUoW();
CmpLightWeightCommitSetValueKeyUoW();
CmpLightWeightCreateModificationData();
CmpLightWeightCreateSetValueData();
CmpLightWeightDuplicateParentLists();
CmpLightWeightPrepareAddKeyUoW();
CmpLightWeightPrepareDeleteKeyUoW();
CmpLightWeightPrepareDeleteValueKeyUoW();
CmpLightWeightPrepareRenameKeyUoW();
CmpLightWeightPrepareSetKeyUserFlags();
CmpLightWeightPrepareSetSecDescUoW();
CmpLightWeightPrepareSetValueKeyUoW();
CmpLightWeightSwapParentSubKeyList();
CmpLightWeightUpdateModificationActions();
CmpLightWeightUpdateSharedSetValueData();
CmpLinkHiveToMaster();
CmpLinkKeyToHive();
CmpLoadHiveThread();
CmpLoadHiveVolatile();
CmpLoadKeyCommon();
CmpLoadManufacturingModeNode();
CmpLoadManufacturingProfileNode();
CmpLoadManufacturingProfileServicesNode();
CmpLoadServicesNode();
CmpLockDeletedHashEntryExclusiveByKcb();
CmpLockHashEntryByIndexExclusive();
CmpLockHashEntryExclusive();
CmpLockHashEntryExclusiveByKcb();
CmpLockHashEntryShared();
CmpLockHashEntrySharedByKcb();
CmpLockHiveListExclusive();
CmpLockIXLockExclusive();
CmpLockIXLockIntent();
CmpLockKcbExclusive();
CmpLockKcbShared();
CmpLockKcbStackExclusive();
CmpLockKcbStackFlusherLocksExclusive();
CmpLockKcbStackShared();
CmpLockKcbStackTopExclusiveRestShared();
CmpLockNameHashEntryExclusive();
CmpLockRegistry();
CmpLockRegistryExclusive();
CmpLockRegistryFreezeAware();
CmpLockTwoKcbsShared();
CmpLockTwoSecurityCachesExclusiveShared();
CmpLogCheckpoint();
CmpLogClearAccessBitsEvent();
CmpLogDirtyVectorUse();
CmpLogEvent();
CmpLogFailureToGetFileSize();
CmpLogFlushPhaseEnd();
CmpLogFlushPhaseStart();
CmpLogHiveDestroyEvent();
CmpLogHiveInitializeEvent();
CmpLogHiveLinkEvent();
CmpLogHiveRundownEvent();
CmpLogReorganizeEvent();
CmpLogTransactionAbortedByName();
CmpLogTransactionAbortedForRollbackPacket();
CmpLogTransactionAbortedWithChildName();
CmpLogTxrInitEvent();
CmpLogUnsupportedOperation();
CmpMarkAllChildrenDirty();
CmpMarkCurrentProfileDirty();
CmpMarkCurrentValueDirty();
CmpMarkEntireIndexDirty();
CmpMarkIndexDirty();
CmpMarkKeyDirty();
CmpMarkKeyParentDirty();
CmpMarkKeyUnbacked();
CmpMarkKeyValuesDirty();
CmpMarkValueDataDirty();
CmpMergeKeyValues();
CmpMigrateOOBELanguageToInstallationLanguage();
CmpMountPreloadedHives();
CmpMoveBiosAliasTable();
CmpNameFromAttributes();
CmpNameSize();
CmpNotifyChangeKey();
CmpNotifyTriggerCheck();
CmpOKToFollowLink();
CmpOpenDevicesControlSet();
CmpOpenFileWithExtremePrejudice();
CmpOpenHiveFile();
CmpOpenSystemDriverHiveContext();
CmpParseInfBuffer();
CmpParseKey();
CmpPartialPromoteSingleKeyFromKeyNodeStacks();
CmpPartialPromoteSubkeys();
CmpPerformCompleteKcbCacheLookup();
CmpPerformKeyBodyDeletionCheck();
CmpPerformSiloKeyLockTrackerEnabledCheck();
CmpPerformUnloadKey();
CmpPopulateBasicInformation();
CmpPopulateCachedInformation();
CmpPopulateFullInformation();
CmpPopulateKcbStack();
CmpPopulateKeyNodeStackFromKcbStack();
CmpPopulateNodeInformation();
CmpPostApc();
CmpPostApcRunDown();
CmpPostNotify();
CmpPrepareDiscardAndReplaceKcbAndUnbackedHigherLayers();
CmpPrepareDiscardReplacePost();
CmpPrepareDiscardReplacePre();
CmpPrepareForSubtreeInvalidation();
CmpPrepareForSubtreeInvalidationWorker();
CmpPrepareLightWeightTransaction();
CmpPrepareToInvalidateAllHigherLayerKcbsPostCallback();
CmpPrepareToInvalidateAllHigherLayerKcbsPreCallback();
CmpPreserveSystemHiveData();
CmpProcessForSimpleStringSub();
CmpProcessLightWeightUOW();
CmpPromoteKey();
CmpPromoteSingleKeyFromKcbStacks();
CmpPromoteSingleKeyFromParentKcbAndChildKeyNode();
CmpPromoteSubtree();
CmpProtectPool();
CmpPublishEventForPcaResolver();
CmpQueryFileSecurityDescriptor();
CmpQueryHiveRedirectionFileList();
CmpQueryKeyData();
CmpQueryKeyDataFromCache();
CmpQueryKeyDataFromKeyNodeStack();
CmpQueryKeyDataFromNode();
CmpQueryKeyName();
CmpQueryKeyName$filt$0();
CmpQueryKeySecurity();
CmpQueryKeyValueData();
CmpQueryNameString();
CmpQueueLazyCommitWorker();
CmpQuitNextActiveHive();
CmpQuitNextHive();
CmpQuotaWarningWorker();
CmpReadBuildLab();
CmpRealignLogBuffers();
CmpRebuildKcbCache();
CmpRebuildKcbCacheFromNode();
CmpRecheckHiveVolumePolicy();
CmpRecordParseCachedSymlinkKcb();
CmpRecordParseFailure();
CmpRecordParseKcbCacheResult();
CmpRecordParseStartingKcb();
CmpRecordParseWalkResult();
CmpRecordShutdownStopTime();
CmpRecordUnloadEventForHive();
CmpRecoverEnlistment();
CmpReferenceHive();
CmpReferenceKeyControlBlock();
CmpReferenceKeyControlBlockLockNotHeld();
CmpReferenceKeyControlBlockUnsafe();
CmpRefreshHive();
CmpRefreshParent();
CmpRefreshWorkerRoutine();
CmpRegisterCallbackInternal();
CmpRegisterTraceLoggingProvider();
CmpRehashKcbSubtree();
CmpReleaseGlobalQuota();
CmpReleaseKeyNodeForKcb();
CmpReleaseShutdownRundown();
CmpReleaseWriteQueue();
CmpRemoveCellFromIndex();
CmpRemoveFromDelayedClose();
CmpRemoveFromDelayedDeref();
CmpRemoveFromSecurityCache();
CmpRemoveHiveFromMapping();
CmpRemoveHiveFromNamespace();
CmpRemoveKeyHash();
CmpRemoveKeyHashFromDeletedKcbTable();
CmpRemoveKeyHashFromTableEntry();
CmpRemoveSecurityCellList();
CmpRemoveSubKey();
CmpRemoveSubKeyCellNoCellRef();
CmpRemoveSubKeyFromList();
CmpRemoveValueFromList();
CmpReorganizeHive();
CmpReparseToVirtualPath();
CmpReplicateKeyToVirtual();
CmpReportAuditVirtualizationEvent();
CmpReportNotify();
CmpReportNotifyForKcbStack();
CmpReportNotifyHelper();
CmpReserveRollbackPacketSpace();
CmpResetKeyNodeStack();
CmpResolveHiveLoadConflict();
CmpRetryBackOff();
CmpRmAnalysisPhase();
CmpRmReDoPhase();
CmpRmUnDoPhase();
CmpRollbackLightWeightTransaction();
CmpRollbackTransactionArray();
CmpRunDownCmRM();
CmpRunDownDelayDerefKCBEngine();
CmpRundownUnitOfWork();
CmpSaveBootControlSet();
CmpSaveKeyByFileCopy();
CmpSearchAndCountWorker();
CmpSearchAndRehashWorker();
CmpSearchAndTagNoDelayCloseWorker();
CmpSearchForOpenSubKeys();
CmpSearchForTrans();
CmpSearchKeyControlBlockTree();
CmpSearchKeyControlBlockTreeEx();
CmpSearchLineInSectionByIndex();
CmpSearchSectionByName();
CmpSecConvKey();
CmpSecurityMethod();
CmpSelectLeaf();
CmpSendUnsupportedOperationTelemetryEvent();
CmpSetAccessStateForBackupRestore();
CmpSetGlobalQuotaAllowed();
CmpSetIoPriorityThread();
CmpSetKcbAtLayerHeight();
CmpSetKeySecurity();
CmpSetNetworkValue();
CmpSetPriorityThread();
CmpSetRespectIoPriorityThread();
CmpSetSecurityDescriptorInfo();
CmpSetSystemBiosInformation();
CmpSetSystemRegistryString();
CmpSetSystemValues();
CmpSetValueDataExisting();
CmpSetValueDataNew();
CmpSetValueKeyExisting();
CmpSetValueKeyNew();
CmpSetValueKeyTombstone();
CmpSetVersionData();
CmpSetVideoBiosInformation();
CmpSetupConfigurationTree();
CmpSetupLoggingState();
CmpSignalDeferredPosts();
CmpSnapshotKcbStackSecurity();
CmpSnapshotTxOwnerArray();
CmpSnapshotTxOwnerArrayToRollbackPacket();
CmpSortByTag();
CmpSortDriverList();
CmpSortedValueEnumStackAdvance();
CmpSortedValueEnumStackAdvanceInternal();
CmpSortedValueEnumStackCleanup();
CmpSortedValueEnumStackEntryStart();
CmpSortedValueEnumStackGetEntryAtLayerHeight();
CmpSortedValueEnumStackInitialize();
CmpSortedValueEnumStackStartFromKeyNodeStack();
CmpSortedValueEnumStackValueCompareFunction();
CmpSplitLeaf();
CmpStartCLFSLog();
CmpStartKcbStack();
CmpStartKcbStackForTopLayerKcb();
CmpStartKeyNodeStack();
CmpStartKeyNodeStackFromKcbStack();
CmpStartRMLog();
CmpStartRMLogs();
CmpStartSiloKeyLockTracker();
CmpStartSiloRegistryNamespace();
CmpStopRMLog();
CmpStopSiloKeyLockTracker();
CmpSubtreeEnumeratorAdvance();
CmpSubtreeEnumeratorBeginForKcbStack();
CmpSubtreeEnumeratorBeginForKeyNodeStack();
CmpSubtreeEnumeratorCleanup();
CmpSubtreeEnumeratorGetCurrentKeyStacks();
CmpSubtreeEnumeratorReset();
CmpSubtreeEnumeratorStart();
CmpSubtreeEnumeratorStartForKcbStack();
CmpSubtreeEnumeratorStartForKeyNodeStack();
CmpSwapHiveStorage();
CmpSwapValueInList();
CmpSyncKcbCacheForHive();
CmpSyncKeyValues();
CmpSyncNextBackupHive();
CmpSyncSubKeysAfterDelete();
CmpSystemHiveHysteresisWorker();
CmpSystemQuotaWarningWorker();
CmpTraceHiveFlushBoostedActiveFlusher();
CmpTraceHiveFlushStop();
CmpTraceHiveFlushWroteLogFile();
CmpTraceHiveFlushWrotePrimaryFile();
CmpTraceHiveLoadStart();
CmpTraceHiveLoadStop();
CmpTraceHiveMountBaseFileMounted();
CmpTraceHiveMountLogEntryApplied();
CmpTraceHiveMountStart();
CmpTraceHiveMountStop();
CmpTraceHiveRestoreStart();
CmpTraceHiveRestoreStop();
CmpTraceHiveSaveFileCopied();
CmpTraceHiveSaveStart();
CmpTraceHiveSaveStop();
CmpTraceHiveSaveTreeCopied();
CmpTraceSecurityChanging();
CmpTraceShutdownRundownComplete();
CmpTraceShutdownStart();
CmpTransAllocateTrans();
CmpTransDereferenceTransaction();
CmpTransEnlistUowInCmTrans();
CmpTransEnlistUowInKcb();
CmpTransGetTransPtr();
CmpTransInitializeTransaction();
CmpTransIsTransActive();
CmpTransMgrCommit();
CmpTransMgrCommitUoW();
CmpTransMgrFreeVolatileData();
CmpTransMgrPrepare();
CmpTransMgrRollback();
CmpTransMgrSyncHive();
CmpTransReferenceTransaction();
CmpTransSearchAddLightWeightTrans();
CmpTransSearchAddTrans();
CmpTransSearchAddTransFromHive();
CmpTransSearchAddTransFromKeyBody();
CmpTransSearchAddTransFromRm();
CmpTransSilentIgnore();
CmpTransUowIsEqual();
CmpTransWriteLog();
CmpTrimHive();
CmpTryAcquireIXLockWithRollbackPacket();
CmpTryAcquireKcbIXLocks();
CmpTryConvertKcbLockSharedToExclusive();
CmpTryToLockHashEntryExclusive();
CmpTryToLockKcbExclusive();
CmpTryToRundownHive();
CmpUnblockHiveWrites();
CmpUnblockTwoHiveWrites();
CmpUndoDeleteKeyForTrans();
CmpUnfreezeHive();
CmpUnlockDeletedHashEntryByKcb();
CmpUnlockHashEntry();
CmpUnlockHashEntryByIndex();
CmpUnlockHashEntryByKcb();
CmpUnlockHiveList();
CmpUnlockKcb();
CmpUnlockKcbStack();
CmpUnlockKcbStackFlusherLocksExclusive();
CmpUnlockNameHashEntry();
CmpUnlockRegistry();
CmpUnlockTwoKcbs();
CmpUnlockTwoSecurityCaches();
CmpUpdateGlobalQuotaAllowed();
CmpUpdateHiveRootCellFlags();
CmpUpdateKeyNodeAccessBits();
CmpUpdateParentForEachSon();
CmpUpdatePhaseAccessBit();
CmpUpdateReorganizeRegistryValues();
CmpUpdateStateSeparationHiveOptions();
CmpUpdateSystemHiveHysteresis();
CmpUserPresenceCallback();
CmpUuidCreate();
CmpVEExecuteCreateLogic();
CmpVEExecuteOpenLogic();
CmpVEExecuteParseLogic();
CmpVEExecuteRealStoreParseLogic();
CmpVEExecuteVirtualStoreParseLogic();
CmpVEPerformOpenAccessCheck();
CmpValidateComponents();
CmpValidateGlobalFlushControlFlags();
CmpValidateHiveSecurityDescriptors();
CmpValueEnumStackAdvance();
CmpValueEnumStackCleanup();
CmpValueEnumStackEntryCleanup();
CmpValueEnumStackEntryInitialize();
CmpValueEnumStackGetCurrentValueHive();
CmpValueEnumStackGetEntryAtLayerHeight();
CmpValueEnumStackInitialize();
CmpValueEnumStackMatchingValueInUpperLayer();
CmpValueEnumStackStartFromKcbStack();
CmpValueEnumStackStartFromKeyNodeStack();
CmpValueToData();
CmpVirtualBranchIsReplicated();
CmpVirtualPathPresent();
CmpVolumeContextCleanup();
CmpVolumeContextCreate();
CmpVolumeContextDecrementRefCount();
CmpVolumeContextMustHiveFilePagesBeKeptLocal();
CmpVolumeContextSendDeviceUsageNotification();
CmpVolumeContextStart();
CmpVolumeManagerGetContextForFile();
CmpVolumeManagerGetContextForFilePath();
CmpVolumeManagerGetContextForGuidUnsafe();
CmpVolumeManagerInitialize();
CmpWaitForHiveMount();
CmpWaitForLateUnloadWorker();
CmpWaitOnHiveWriteQueue();
CmpWakeWriteQueueWaiters();
CmpWalkOneLevel();
CmpWalkPath();
CmpWalkUnicodeStringPath();
CmpWorkerEngineWorker();
CmpWriteOffsetArrayToFile();
CompareFileTimeType();
CompareLangIDs();
CompareLangName();
CompareNamesCaseSensitive();
CompareObjectTypes();
CompareUnicodeStrings();
CompareVersions();
ComposeHangulLV();
ComposeHangulLVT();
ComputeFlushPeriod();
ComputeNameLength();
ComputeUnicodeNameLength();
ConstraintEval();
ConsumerGetBuffer();
ConsumerPeekAndConsumeBuffer();
ConvertDevpropcompkeyToString();
ConvertDevpropertyToString();
CountUTF8ToUnicode();
CountUnicodeToUTF8();
CreateMiniNtBootKey();
CreateNewEventEntry();
CreateSystemRootLink();
CreateTlgAggregateSession();
DECREMENT_ADAPTER_CHANNELS();
DECREMENT_COMMON_BUFFERS();
DECREMENT_SCATTER_GATHER_LISTS();
DbgBreakPoint();
DbgBreakPointWithStatus();
DbgBreakPointWithStatusEnd();
DbgCommandString();
DbgEnumerateCallback();
DbgLoadImageSymbols();
DbgLoadImageSymbolsUnicode();
DbgLoadUserImageSymbols();
DbgPrint();
DbgPrintEx();
DbgPrintReturnControlC();
DbgPrompt();
DbgQueryDebugFilterState();
DbgSetDebugFilterState();
DbgSetDebugPrintCallback();
DbgUnLoadImageSymbols();
DbgUnLoadImageSymbolsUnicode();
DbgUnicodeStringToAnsiString();
DbgUserBreakPoint();
DbgkCaptureLiveDump();
DbgkCaptureLiveKernelDump();
DbgkClearProcessDebugObject();
DbgkCopyProcessDebugPort();
DbgkCreateMinimalProcess();
DbgkCreateMinimalThread();
DbgkCreateThread();
DbgkExitProcess();
DbgkExitThread();
DbgkFlushErrorPort();
DbgkForwardException();
DbgkInitialize();
DbgkInitializeServerSilo();
DbgkLkmdRegisterCallback();
DbgkLkmdUnregisterCallback();
DbgkMapViewOfSection();
DbgkOpenProcessDebugPort();
DbgkPostEnclaveModuleMessages();
DbgkPostModuleMessage();
DbgkQueueUserExceptionReport();
DbgkRegisterErrorPort();
DbgkSendSystemDllMessages();
DbgkUnMapViewOfSection();
DbgkUserReportWorkRoutine();
DbgkWerAddSecondaryData();
DbgkWerCaptureLiveKernelDump();
DbgkpCloseObject();
DbgkpConvertKernelToUserStateChange();
DbgkpCreateNotificationEvent();
DbgkpDeleteErrorPort();
DbgkpDeleteObject();
DbgkpFreeDebugEvent();
DbgkpGetServerSiloState();
DbgkpInitializePhase0();
DbgkpInitializePhase0SiloState();
DbgkpInitializePhase1();
DbgkpInitializePhase1SiloState();
DbgkpLkmdEnumApcOrDpcDataCallback();
DbgkpLkmdFireCallbacks();
DbgkpLkmdIsMemoryBlockPresentFromCallback();
DbgkpLkmdLaunchSnapApc();
DbgkpLkmdSnapData();
DbgkpLkmdSnapDataEx();
DbgkpLkmdSnapGlobals();
DbgkpLkmdSnapKernelStack();
DbgkpLkmdSnapKernelStackSegmentCallback();
DbgkpLkmdSnapObject();
DbgkpLkmdSnapPendingIrps();
DbgkpLkmdSnapThread();
DbgkpLkmdSnapThreadApc();
DbgkpLkmdSnapThreadInContext();
DbgkpLkmdSqmIncrementDword();
DbgkpLkmdSqmIsOptedIn();
DbgkpLkmdSqmStatus();
DbgkpMarkProcessPeb();
DbgkpOpenHandles();
DbgkpPostFakeProcessCreateMessages();
DbgkpPostFakeThreadMessages();
DbgkpPostModuleMessages();
DbgkpQueueMessage();
DbgkpRemoveErrorPort();
DbgkpResumeProcess();
DbgkpSectionToFileHandle();
DbgkpSendApiMessage();
DbgkpSendApiMessageLpc();
DbgkpSendErrorMessage();
DbgkpSetProcessDebugObject();
DbgkpStartSystemErrorHandler();
DbgkpSuppressDbgMsg();
DbgkpSuspendProcess();
DbgkpTriageDumpCheckPresentHashTable();
DbgkpTriageDumpFillHeaders();
DbgkpTriageDumpInitialize();
DbgkpTriageDumpIsMemoryBlockPresent();
DbgkpTriageDumpRestoreState();
DbgkpTriageDumpSaveState();
DbgkpTriageDumpSnapData();
DbgkpTriageDumpWrite();
DbgkpWakeTarget();
DbgkpWerAllocateNonpagedPool();
DbgkpWerAllocatePool();
DbgkpWerCaptureLiveFullDump();
DbgkpWerCaptureLiveTriageDump();
DbgkpWerCleanupContext();
DbgkpWerDeferredWriteRoutine();
DbgkpWerFreePool();
DbgkpWerInitializeDeferredLiveDump();
DbgkpWerInvokeCallbacks();
DbgkpWerProcessPolicyResult();
DbgkpWerUpdateTriageDumpHeader();
DbgkpWerWriteSecondaryData();
DbgkpWerWriteTriageDump();
DbgpInsertDebugPrintCallback();
DbgpRemoveDebugPrintCallback();
DebugPrint();
DebugPrompt();
DebugService2();
DecodeAttributeName();
DecodeProviderTraits();
DeleteNodeFromTree();
DelistKeyBodyFromKCB();
DestroyAggregateSession();
DestroyEventEntry();
DisplayBootBitmap();
DisplayFilter();
DownLevelGetParentLanguageName();
DownLevelLangIDToLanguageName();
DownLevelLanguageNameToLangID();
DrvDbAcquireDatabaseNodeBaseKey();
DrvDbBuildDeviceIdDriverInfMatch();
DrvDbCreateDatabaseNode();
DrvDbDeleteObjectRegKey();
DrvDbDeleteObjectSubKey();
DrvDbDestroyDatabaseNode();
DrvDbDispatchDeviceId();
DrvDbDispatchDriverDatabase();
DrvDbDispatchDriverFile();
DrvDbDispatchDriverInfFile();
DrvDbDispatchDriverPackage();
DrvDbFindDatabaseNode();
DrvDbGetCompositeMappedPropertyKeys();
DrvDbGetConfigurationSubKeyCallback();
DrvDbGetDeviceIdDriverInfMatches();
DrvDbGetDeviceIdMappedProperty();
DrvDbGetDeviceIdMappedPropertyKeys();
DrvDbGetDriverDatabaseList();
DrvDbGetDriverDatabaseMappedProperty();
DrvDbGetDriverDatabaseMappedPropertyKeys();
DrvDbGetDriverFileMappedProperty();
DrvDbGetDriverFileMappedPropertyKeys();
DrvDbGetDriverInfFileMappedProperty();
DrvDbGetDriverInfFileMappedPropertyKeys();
DrvDbGetDriverPackageMappedProperty();
DrvDbGetDriverPackageMappedPropertyKeys();
DrvDbGetDriverPackageSignerName();
DrvDbGetDriverPackageSignerScore();
DrvDbGetObjectDatabaseNode();
DrvDbGetObjectList();
DrvDbGetObjectSubKeyCallback();
DrvDbGetObjectSubKeyList();
DrvDbGetRegValueMappedProperty();
DrvDbGetSecurityDescriptor();
DrvDbInitializeDatabaseNodeVersion();
DrvDbLoadDatabaseNode();
DrvDbOpenContext();
DrvDbOpenDriverDatabaseRegKey();
DrvDbOpenObjectRegKey();
DrvDbRegisterDatabase();
DrvDbRegisterObjects();
DrvDbReleaseDatabaseNodeBaseKey();
DrvDbSetDeviceIdDriverInfMatches();
DrvDbSetDeviceIdMappedProperty();
DrvDbSetDriverDatabaseMappedProperty();
DrvDbSetDriverFileMappedProperty();
DrvDbSetDriverInfFileMappedProperty();
DrvDbSetDriverPackageMappedProperty();
DrvDbSetRegValueMappedProperty();
DrvDbSplitDeviceIdDriverInfMatch();
DrvDbSuspendDatabase();
DrvDbUnloadDatabaseNode();
DrvDbValidateDeviceIdName();
DrvDbValidateDriverDatabaseName();
DrvDbValidateDriverFileName();
DrvDbValidateDriverInfFileName();
DrvDbValidateDriverPackageName();
EmClientQueryRuleState();
EmClientRuleDeregisterNotification();
EmClientRuleEvaluate();
EmClientRuleRegisterNotification();
EmCpuMatchCallback();
EmFalseCallback();
EmInitSystem();
EmMatchDate();
EmPowerPagingEnabled();
EmProviderDeregister();
EmProviderDeregisterEntry();
EmProviderRegister();
EmProviderRegisterEntry();
EmRemoveBadS3PagesCallback();
EmSystemArchitectureCallback();
EmTrueCallback();
EmpAcquirePagingReference();
EmpCacheBiosDate();
EmpCheckErrataList();
EmpCheckOperator();
EmpClientRuleRegisterNotification();
EmpEvaluateNodeLink();
EmpEvaluateParseNodeMapping();
EmpEvaluatePermuteRuleEntries();
EmpEvaluateTargetRule();
EmpEvaluateUpdateRuleEvalState();
EmpInfParseGetGuidFromName();
EmpInfParseGetSectionLineCount();
EmpInfParseGetStringIndexFromName();
EmpInfParseGetValueFromSectionAndKeyName();
EmpInfParseSearchDependencyList();
EmpMapPhysicalAddress();
EmpParseCallbacks();
EmpParseEntryTypes();
EmpParseInfDatabase();
EmpParseRuleExpression();
EmpParseRuleTerm();
EmpParseRuleTermArgMapping();
EmpParseRules();
EmpParseStrings();
EmpParseTargetRuleStringIndexList();
EmpParseTargetRules();
EmpProviderDeregisterEntry();
EmpProviderRegister();
EmpQueueRuleUpdateState();
EmpReleasePagingReference();
EmpRemoveBadS3PageWorker();
EmpRuleParserStackPop();
EmpRuleParserStackPush();
EmpRuleUpdateWorkerThread();
EmpSearchCallbackDatabase();
EmpSearchEntryDatabase();
EmpSearchRuleDatabase();
EmpSearchTargetRuleList();
EmpUpdateRuleState();
EnableFlushTimer();
EncloseSubCondition();
EncodeAttributeName();
EnlistKeyBodyWithKCB();
EtwActivityIdControl();
EtwCovSampHash();
EtwDeleteSiloState();
EtwDereferenceSpinLockCounters();
EtwEnableTrace();
EtwEventEnabled();
EtwExitProcess();
EtwGetKernelTraceTimestamp();
EtwGetKernelTraceTimestampSilo();
EtwGetProcessorBuffer();
EtwGetProviderIdFromHandle();
EtwInitialize();
EtwInitializeProcessor();
EtwInitializeSiloState();
EtwKernelMemoryRundown();
EtwLogPfnInfoRundown();
EtwProviderEnabled();
EtwQueryPerformanceTraceInformation();
EtwQueryProcessTelemetryCoverage();
EtwQueryProcessTelemetryCoverage$filt$0();
EtwQueryProcessTelemetryInfo();
EtwQueryTraceHandleByLoggerName();
EtwReferenceSpinLockCounters();
EtwRegister();
EtwRegisterClassicProvider();
EtwRegisterCounters();
EtwRegisterEventCallback();
EtwSendTraceBuffer();
EtwSetInformation();
EtwSetPerformanceTraceInformation();
EtwSetProcessTelemetryCoverage();
EtwShutdown();
EtwStartAutoLogger();
EtwTelemetryCoverageReport();
EtwTiLogAllocExecVm();
EtwTiLogMapExecView();
EtwTiLogProtectExecVm();
EtwTiLogQueueApcThread();
EtwTiLogReadWriteVm();
EtwTiLogSetContextThread();
EtwTiLogSuspendResumeProcess();
EtwTiLogSuspendResumeThread();
EtwTimLogProhibitChildProcessCreation();
EtwTimLogProhibitDynamicCode();
EtwTimLogProhibitLowILImageMap();
EtwTimLogProhibitNonMicrosoftBinaries();
EtwTimLogProhibitWin32kSystemCalls();
EtwTraceAdminlessAccessFailure();
EtwTraceAntiStarvationBoost();
EtwTraceAppStateChange();
EtwTraceAutoBoostClearFloor();
EtwTraceAutoBoostEntryExhaustion();
EtwTraceAutoBoostSetFloor();
EtwTraceContextSwap();
EtwTraceCpuCacheFlush();
EtwTraceDebuggerEvent();
EtwTraceDequeueWork();
EtwTraceDpcEnqueueEvent();
EtwTraceDuplicateHandle();
EtwTraceEnqueueWork();
EtwTraceEvent();
EtwTraceFreezeThawProcess();
EtwTraceIdealProcessor();
EtwTraceInswapProcess();
EtwTraceIoTimerEvent();
EtwTraceJob();
EtwTraceJobAssignProcess();
EtwTraceJobRemoveProcess();
EtwTraceJobSendNotification();
EtwTraceJobServerSiloMonitorCallback();
EtwTraceJobServerSiloStateChange();
EtwTraceJobSetQuery();
EtwTraceKernelEvent();
EtwTraceLeapSecondDataParseFailure();
EtwTraceLeapSecondDataUpdate();
EtwTraceLpacAccessFailure();
EtwTraceMemoryAcg();
EtwTraceObject();
EtwTraceObjectOperation();
EtwTracePageFault();
EtwTracePool();
EtwTracePriority();
EtwTraceProcess();
EtwTraceProcessTerminate();
EtwTraceRaw();
EtwTraceReadyThread();
EtwTraceRetpolineExit();
EtwTraceShouldYieldProcessor();
EtwTraceSiloDcEvent();
EtwTraceSiloKernelEvent();
EtwTraceSiloTimedEvent();
EtwTraceSystemTimeChange();
EtwTraceThread();
EtwTraceThreadAffinity();
EtwTraceThreadSetName();
EtwTraceThreadWorkItem();
EtwTraceThreadWorkOnBehalfUpdate();
EtwTraceTimedEvent();
EtwTraceWakeCounter();
EtwTraceWakeEvent();
EtwTraceWorkingSetInSwapStoreFail();
EtwTraceWorkingSetSwap();
EtwUnregister();
EtwWmitraceWorker();
EtwWrite();
EtwWriteEndScenario();
EtwWriteErrorLogEntry();
EtwWriteEx();
EtwWriteKMSecurityEvent();
EtwWriteStartScenario();
EtwWriteString();
EtwWriteTransfer();
EtwpAccessCheck();
EtwpAccessCheckFromState();
EtwpAcquireLoggerContext();
EtwpAcquireLoggerContextByLoggerId();
EtwpAcquireLoggerContextByLoggerName();
EtwpAcquireTokenAccessInformation();
EtwpAddBinaryInfoEvents();
EtwpAddDataSource();
EtwpAddDebugInfoEvents();
EtwpAddEventToBuffer();
EtwpAddGuidEntry();
EtwpAddKmRegEntry();
EtwpAddLogHeader();
EtwpAddMicroarchitecturalPmcToPmcGroup();
EtwpAddMicroarchitecturalPmcToRegistry();
EtwpAddNotificationEvent();
EtwpAddRegEntryToGroup();
EtwpAddUmRegEntry();
EtwpAdjustFreeBuffers();
EtwpAdjustSiloTraceBuffers();
EtwpAdjustTraceBuffers();
EtwpAllocDataBlock();
EtwpAllocGuidEntry();
EtwpAllocateEventNameFilter();
EtwpAllocateFilter();
EtwpAllocateFreeBuffers();
EtwpAllocateKeyNameEntry();
EtwpAllocateLbrData();
EtwpAllocatePayloadFilterData();
EtwpAllocatePmcData();
EtwpAllocateStringFilterData();
EtwpAllocateTraceBufferPool();
EtwpAppStateChangeSummaryShouldLogCommandLine();
EtwpApplyEventIdPayloadFilter();
EtwpApplyEventIdPayloadFilterOnUserEvent();
EtwpApplyEventNameFilter();
EtwpApplyExeFilter();
EtwpApplyLevelKwFilter();
EtwpApplyPackageIdFilter();
EtwpApplyPayloadFilterInternal();
EtwpApplyPayloadFilterInternal$filt$0();
EtwpApplyPayloadFilterInternal$filt$1();
EtwpApplyPayloadFilterInternal$filt$2();
EtwpApplyPayloadFilterInternal$filt$3();
EtwpApplyPredicate();
EtwpApplyPredicate$filt$0();
EtwpApplyPredicate$filt$1();
EtwpApplyPredicate$filt$2();
EtwpApplyPredicate$filt$3();
EtwpApplyPredicate$filt$4();
EtwpApplyScopeFilters();
EtwpApplyStackWalkFilterOnUserEvent();
EtwpApplyStackWalkIdFilter();
EtwpApplyTransientFilters();
EtwpAvlCompareKeyNames();
EtwpBufferingModeCompressionFlush();
EtwpBufferingModeFlush();
EtwpBugCheckMultiPartCallback();
EtwpBuildMdlForTraceBuffer();
EtwpBuildNotificationPacket();
EtwpBuildProcessEvent();
EtwpCCSwapDeleteProcessor();
EtwpCCSwapFlush();
EtwpCCSwapStart();
EtwpCCSwapStop();
EtwpCCSwapTrace();
EtwpCalculateUpdateNotification();
EtwpCancelMemoryPreservation();
EtwpCancelPendingStackwalkApcs();
EtwpCancelStackWalkApc();
EtwpCancelTraceImageUnloadApc();
EtwpCapturePreviousRegistryData();
EtwpCaptureRegistryData();
EtwpCaptureString();
EtwpCheckCurrentUserProcessAccess();
EtwpCheckForPoolTagFilterExtension();
EtwpCheckForStackTracingExtension();
EtwpCheckGuidAccess();
EtwpCheckGuidAccessAndDoRundown();
EtwpCheckLoggerAccessAndDoRundown();
EtwpCheckLoggerControlAccess();
EtwpCheckNotificationAccess();
EtwpCheckProviderLoggingAccess();
EtwpCheckSecurityLoggerAccess();
EtwpCheckSiloGroupMasks();
EtwpCheckSystemTraceAccess();
EtwpClearSessionAndUnreferenceEntry();
EtwpClockSourceRunDown();
EtwpCloseLogger();
EtwpCloseRealTimeConnectionObject();
EtwpCloseRegistrationObject();
EtwpCompareGuid();
EtwpCompleteBuffer();
EtwpCompressBuffer();
EtwpCompressPendingBuffers();
EtwpCompressionDpc();
EtwpCompressionProc();
EtwpComputeRegEntryEnableInfo();
EtwpConstructIptData();
EtwpContainerResumeWnfCallback();
EtwpCopyEventData();
EtwpCopyJobGuidSafe();
EtwpCopyJobIdSafe();
EtwpCopySchematizedFilters();
EtwpCovSampAcquireSamplerRundown();
EtwpCovSampApplyBounds();
EtwpCovSampCaptureAllocateApc();
EtwpCovSampCaptureAllocateCaptureBuffer();
EtwpCovSampCaptureAllocateSampleBuffer();
EtwpCovSampCaptureApc();
EtwpCovSampCaptureApcRelease();
EtwpCovSampCaptureApcRundown();
EtwpCovSampCaptureBufferAddIP();
EtwpCovSampCaptureBufferGet();
EtwpCovSampCaptureBufferIsEmpty();
EtwpCovSampCaptureBufferMapAddressesAndQueue();
EtwpCovSampCaptureBufferOptimizeIP();
EtwpCovSampCaptureBufferProcess();
EtwpCovSampCaptureBufferQueue();
EtwpCovSampCaptureBufferRelease();
EtwpCovSampCaptureCancelApcs();
EtwpCovSampCaptureCleanupDpc();
EtwpCovSampCaptureCleanupLookasides();
EtwpCovSampCaptureContextSetPaused();
EtwpCovSampCaptureContextStart();
EtwpCovSampCaptureContextStop();
EtwpCovSampCaptureFlush();
EtwpCovSampCaptureFlushSampleBuffers();
EtwpCovSampCaptureFlushStats();
EtwpCovSampCaptureFreeLookasides();
EtwpCovSampCaptureKernelStack();
EtwpCovSampCaptureQueueApc();
EtwpCovSampCaptureQueueBuffer();
EtwpCovSampCaptureQueueDpc();
EtwpCovSampCaptureRebalanceDpc();
EtwpCovSampCaptureReleaseToLookaside();
EtwpCovSampCaptureSample();
EtwpCovSampCaptureUserAddresses();
EtwpCovSampCaptureUserStack();
EtwpCovSampCaptureWorkerThread();
EtwpCovSampCheckForSegments();
EtwpCovSampContextAddAddresses();
EtwpCovSampContextAddSamples();
EtwpCovSampContextCleanup();
EtwpCovSampContextFastFindModule();
EtwpCovSampContextGetModule();
EtwpCovSampContextPruneModules();
EtwpCovSampContextRemoveAndFreeModule();
EtwpCovSampEnumerateDriver();
EtwpCovSampEnumerateProcess();
EtwpCovSampHashLookupInTable();
EtwpCovSampHashMakeRoomAndAcquireLock();
EtwpCovSampImageNotify();
EtwpCovSampLookasideControlInitialize();
EtwpCovSampLookasideFlushFreeListToCleanupList();
EtwpCovSampLookasideGrow();
EtwpCovSampLookasideInitialize();
EtwpCovSampLookasidePop();
EtwpCovSampModuleCleanup();
EtwpCovSampModuleDereference();
EtwpCovSampModuleGetName();
EtwpCovSampModuleNameInfoCleanup();
EtwpCovSampProcessAddModule();
EtwpCovSampProcessCleanup();
EtwpCovSampProcessEnsureContext();
EtwpCovSampProcessMapAddresses();
EtwpCovSampProcessRemoveModule();
EtwpCovSampProcessUpperBoundModule();
EtwpCovSampProfileInterrupt();
EtwpCovSampPushListSList();
EtwpCovSampSafeForUserAddressCapture();
EtwpCovSampSampleBufferDecRef();
EtwpCovSampSampleBufferProcess();
EtwpCovSampSampleBufferReserve();
EtwpCovSampSplitSegments();
EtwpCovSampStackHashCheck();
EtwpCovSampStackHashLookup();
EtwpCovSampStackHashTableAlloc();
EtwpCovSampStrideSamplerInitialize();
EtwpCovSampTryAcquireBufferLock();
EtwpCoverageAddToStringBuffer();
EtwpCoverageCheckCP();
EtwpCoverageEnsureContext();
EtwpCoverageEnsureStringBuffer();
EtwpCoverageEnsureUserModeView();
EtwpCoverageFlushPending();
EtwpCoverageFlushTimerCallback();
EtwpCoverageFlushWorkItemCallback();
EtwpCoverageFreeStringBuffers();
EtwpCoverageHighIrqlCPWorkItemCallback();
EtwpCoverageInitializeStringBuffer();
EtwpCoverageProvEnableCallback();
EtwpCoverageRecord();
EtwpCoverageRecordAtHighIrql();
EtwpCoverageReset();
EtwpCoverageResetCP();
EtwpCoverageResetTimerCallback();
EtwpCoverageResetWorkItemCallback();
EtwpCoverageSamplerAllocateTable();
EtwpCoverageSamplerCleanup();
EtwpCoverageSamplerClose();
EtwpCoverageSamplerContextSwap();
EtwpCoverageSamplerDelete();
EtwpCoverageSamplerFreeTable();
EtwpCoverageSamplerInitialize();
EtwpCoverageSamplerPageFault();
EtwpCoverageSamplerQuery();
EtwpCoverageSamplerReadyThread();
EtwpCoverageSamplerSetBloomFilter();
EtwpCoverageSamplerStart();
EtwpCoverageSamplerStop();
EtwpCoverageSamplerUnloadImage();
EtwpCoverageUserIsAdmin();
EtwpCoverageValidateCP();
EtwpCreateActivityId();
EtwpCreateDirectoryFile();
EtwpCreateEventKey();
EtwpCreateLogFile();
EtwpCreateNtFileName();
EtwpCreatePerfectHashFunction();
EtwpCreateUmReplyObject();
EtwpCrimsonProvEnableCallback();
EtwpCrimsonStackWalkApc();
EtwpDelayCreate();
EtwpDeleteRealTimeConnectionObject();
EtwpDeleteRegistrationObject();
EtwpDeleteSessionDemuxObject();
EtwpDemuxPrivateTraceHandle();
EtwpDequeueBuffer();
EtwpDequeueBufferPendingCompression();
EtwpDequeueBufferPendingCompressionFromQueue();
EtwpDequeueFreeBuffer();
EtwpDereferenceLoggerSecurityDescriptor();
EtwpDereferenceStackEntry();
EtwpDisableCompression();
EtwpDisableKernelTrace();
EtwpDisableStackWalkApc();
EtwpDisableTraceProviders();
EtwpDisallowedGuidAddition();
EtwpDisallowedGuidRemoval();
EtwpDisassociateConsumer();
EtwpDiskProvTraceDisk();
EtwpEnableAutoLoggerProvider();
EtwpEnableDisableSpecialGuids();
EtwpEnableDisableUMGL();
EtwpEnableGuid();
EtwpEnableKernelTrace();
EtwpEnableKeyProviders();
EtwpEnableStackCaching();
EtwpEnableTrace();
EtwpEnqueueAvailableBuffer();
EtwpEnqueueOverflowBuffer();
EtwpEnumerateAddressSpace();
EtwpEnumerateAutologgerPath();
EtwpEnumerateKeyProviders();
EtwpEnumerateTraceGuids();
EtwpEnumerateWorkingSet();
EtwpEventNameFilterSearch();
EtwpEventTracingCounterSetCallback();
EtwpEventWriteEnableInfo();
EtwpEventWriteFull();
EtwpEventWriteGroupJoin();
EtwpEventWriteGuidEntry();
EtwpEventWriteProviderEnabled();
EtwpEventWriteRegEntry();
EtwpEventWriteRegistrationStatus();
EtwpEventWriteTemplateAdmin();
EtwpEventWriteTemplateBackingFile();
EtwpEventWriteTemplateMaxFileSize();
EtwpEventWriteTemplateSessAndProv();
EtwpEventWriteTemplateSession();
EtwpEventWriteTemplateSessionEnd();
EtwpExecutiveResourceConfigRunDown();
EtwpExpandFileName();
EtwpFailLogging();
EtwpFileProvTrace();
EtwpFillPerfectHashTable();
EtwpFinalizeHeader();
EtwpFinalizePendingApc();
EtwpFindAndLockBufferForFlushing();
EtwpFindDebugId();
EtwpFindGuidEntryByGuid();
EtwpFindMatchingPmcRegistryGroup();
EtwpFindUserBufferSpace();
EtwpFlushActiveBuffers();
EtwpFlushBuffer();
EtwpFlushBufferToLogfile();
EtwpFlushBufferToRealtime();
EtwpFlushCoverage();
EtwpFlushTrace();
EtwpFreeCompression();
EtwpFreeEventNameFilter();
EtwpFreeFilterInfo();
EtwpFreeGuidEntry();
EtwpFreeKeyNameEntry();
EtwpFreeKeyNameList();
EtwpFreeLoggerContext();
EtwpFreePlaceholderList();
EtwpFreeSecurityDescriptor();
EtwpFreeStackCache();
EtwpFreeTraceBufferPool();
EtwpFreeUserBufferSpace();
EtwpGenerateFileName();
EtwpGetAutoLoggerEventNameFilter();
EtwpGetAutoLoggerLevelKwFilter();
EtwpGetAutoLoggerProviderFilter();
EtwpGetCompressionSettings();
EtwpGetCycleCount();
EtwpGetDisallowList();
EtwpGetEventNameFromEventMetadata();
EtwpGetFieldValue();
EtwpGetFieldValue$filt$0();
EtwpGetFlagExtension();
EtwpGetGuidSecurityDescriptor();
EtwpGetHostPerfCounter();
EtwpGetImageSize();
EtwpGetLoggerInfoFromContext();
EtwpGetMaxTrackingEventBufferSize();
EtwpGetMicroarchitecturalPmcAffinity();
EtwpGetNextEventOffsetType();
EtwpGetNextGuidEntry();
EtwpGetPerfCounter();
EtwpGetPmcCpuHierarchyRegistry();
EtwpGetPrivateSessionTraceHandle();
EtwpGetProcessStartKey();
EtwpGetProviderGroupFromTraits();
EtwpGetPsmKeyExtendedHeaderItem();
EtwpGetReserveTraceBufferStatus();
EtwpGetSchematizedFilterSize();
EtwpGetScsiPassThroughCdb();
EtwpGetSecurityDescriptorByGuid();
EtwpGetSidExtendedHeaderItem();
EtwpGetSignedFieldValue();
EtwpGetSignedFieldValue$filt$0();
EtwpGetSoftRestartInformation();
EtwpGetStackExtendedHeaderItem();
EtwpGetStackLookasideListEntry();
EtwpGetSystemMaximumBufferCount();
EtwpGetSystemTime();
EtwpGetTimeStampAndQpcDelta();
EtwpGetTraceGroupInfo();
EtwpGetTraceGroupList();
EtwpGetTraceGuidInfo();
EtwpGetTraceGuidList();
EtwpGetTrackingLockSlotForThread();
EtwpIncrementTraceFile();
EtwpInitLoggerContext();
EtwpInitStateChangeInfo();
EtwpInitialize();
EtwpInitializeActivityIdSeed();
EtwpInitializeAutoLoggers();
EtwpInitializeBufferHeader();
EtwpInitializeCompression();
EtwpInitializeCoverage();
EtwpInitializeCoverageSampler();
EtwpInitializeLastBranchTracing();
EtwpInitializePrivateSessionDemuxObject();
EtwpInitializeProcessorTrace();
EtwpInitializeProviderInfoBuffer();
EtwpInitializeProviderTraits();
EtwpInitializeRealTimeConnection();
EtwpInitializeRegistration();
EtwpInitializeSecurity();
EtwpInitializeSiloAllowedGroupMask();
EtwpInitializeStackLookasideList();
EtwpInitializeStackTracing();
EtwpInitializeTimeStamp();
EtwpInvokeEventCallback();
EtwpIsEventNameFilterEnabled();
EtwpIsGuidAllowed();
EtwpIsProcessZombie();
EtwpIsRegEntryAllowed();
EtwpIsStackWalkingEnabled();
EtwpIsWow64Logger();
EtwpKernelProvEnableCallback();
EtwpKernelTraceRundown();
EtwpKsrCallback();
EtwpKsrMemoryEnumCallback();
EtwpLevelKeywordEnabled();
EtwpLoadMicroarchitecturalPmcs();
EtwpLoadMicroarchitecturalProfileGroup();
EtwpLoadMicroarchitecturalProfileSource();
EtwpLocateDbgIdForRegEntry();
EtwpLockBufferList();
EtwpLockUnlockBufferList();
EtwpLogAlwaysPresentRundown();
EtwpLogContextSwapEvent();
EtwpLogFileNameRundown();
EtwpLogGroupMask();
EtwpLogKernelEvent();
EtwpLogKernelTraceRundown();
EtwpLogMemInfo();
EtwpLogMemInfoRundown();
EtwpLogMemInfoTimerCallback();
EtwpLogMemInfoWs();
EtwpLogMemInfoWsHelper();
EtwpLogPmcCounterRundown();
EtwpLogProcessPerfCtrs();
EtwpLogRefSetAutoMark();
EtwpLogRegistryEvent();
EtwpLogSessionWorkingSetInfo();
EtwpLogSystemEventUnsafe();
EtwpLogTxREvent();
EtwpLogger();
EtwpLoggerDpc();
EtwpLookupLoggerIdByName();
EtwpMapEnableFlags();
EtwpNetProvTraceNetwork();
EtwpNotifyGuid();
EtwpObjectHandleEnumCallback();
EtwpObjectHandleRundown();
EtwpObjectTypeRundown();
EtwpOpenConsumer();
EtwpOpenLogger();
EtwpOpenRealTimeConnectionObject();
EtwpOpenRegistrationObject();
EtwpOpenSessionDemuxObject();
EtwpParsePoolTagFilter();
EtwpPerfMemInfoWork();
EtwpPerfectHashFunctionSearch();
EtwpPmcInterrupt();
EtwpPoolRunDown();
EtwpPowerStateCallback();
EtwpPrepareDirtyBuffer();
EtwpPrepareHeader();
EtwpPrepareWmitraceLoggerInfo();
EtwpPreserveLogger();
EtwpPreserveMdlList();
EtwpProcessEnumCallback();
EtwpProcessPerfCtrsRundown();
EtwpProcessThreadImageRundown();
EtwpProcessorRundown();
EtwpProfileInterrupt();
EtwpProviderArrivalCallback();
EtwpPsProvCaptureState();
EtwpPsProvProcessEnumCallback();
EtwpPsProvTraceImage();
EtwpPsProvTraceJob();
EtwpPsProvTracePriority();
EtwpPsProvTraceProcess();
EtwpPsProvTraceThread();
EtwpQueryCoverageSamplerInformation();
EtwpQueryMaximumFileSize();
EtwpQueryPartitionRegistryInformation();
EtwpQueryPersistedMemory();
EtwpQueryProcessCommandLine();
EtwpQueryProcessOtherInfo();
EtwpQueryPsmKey();
EtwpQueryReferenceTime();
EtwpQueryRegistryCallback();
EtwpQuerySessionDemuxObject();
EtwpQueryTokenPackageInfo();
EtwpQueryTrace();
EtwpQueryUsedProcessorCount();
EtwpQueueNotification();
EtwpQueuePerfMemInfoWorkItem();
EtwpQueueReply();
EtwpQueueStackWalkApc();
EtwpQueueStackWalkDpc();
EtwpReadConfigParameters();
EtwpReadPerSiloConfigParameters();
EtwpRealtimeConnect();
EtwpRealtimeCreateLogfile();
EtwpRealtimeDeliverBuffer();
EtwpRealtimeDisconnectAllConsumers();
EtwpRealtimeDisconnectConsumer();
EtwpRealtimeDisconnectConsumerByHandle();
EtwpRealtimeFlushSavedBuffers();
EtwpRealtimeInjectEtwBuffer();
EtwpRealtimeNotifyConsumers();
EtwpRealtimeResetReferenceTime();
EtwpRealtimeRestoreBuffer();
EtwpRealtimeRestoreState();
EtwpRealtimeSaveBuffer();
EtwpRealtimeSaveState();
EtwpRealtimeSendEmptyMarker();
EtwpRealtimeUpdateConsumers();
EtwpRealtimeUpdateReferenceTime();
EtwpRealtimeZeroTruncateLogfile();
EtwpReceiveNotification();
EtwpReceiveReplyDataBlock();
EtwpReenableCompression();
EtwpReenableStackWalkApc();
EtwpReferenceGuidEntry();
EtwpReferenceLastBranchLookasideList();
EtwpReferenceLoggerSecurityDescriptor();
EtwpReferenceStackLookasideList();
EtwpRegTraceCallback();
EtwpRegTraceEnableCallback();
EtwpRegisterPrivateSession();
EtwpRegisterProvider();
EtwpRegisterUMGuid();
EtwpReleaseLoggerContext();
EtwpReleaseProviderTraitsReference();
EtwpReleaseQueueEntry();
EtwpReleaseTraceBuffer();
EtwpRelinquishCompressionTarget();
EtwpRemoveMicroarchitecturalPmcFromPmcGroup();
EtwpRemoveMicroarchitecturalPmcFromRegistry();
EtwpRequestFlushTimer();
EtwpReserveTraceBuffer();
EtwpReserveWithPebsIndex();
EtwpReserveWithPmcCounters();
EtwpResetBufferHeader();
EtwpResetFlushTimer();
EtwpRotateCompressionTarget();
EtwpRotateCompressionTargetIfNeeded();
EtwpRundownNotifications();
EtwpSampledProfileRunDown();
EtwpSavePersistedLogger();
EtwpSavePersistedLoggersWorker();
EtwpSendBufferToDebugger();
EtwpSendDataBlock();
EtwpSendDbgId();
EtwpSendReplyDataBlock();
EtwpSendSessionNotification();
EtwpSendTraceEvent();
EtwpSetCompressionSettings();
EtwpSetCoverageSamplerInformation();
EtwpSetMark();
EtwpSetPmcProfileSource();
EtwpSetProviderBinaryTracking();
EtwpSetProviderTraitsCommon();
EtwpSetProviderTraitsKm();
EtwpSetProviderTraitsUm();
EtwpSetQpcDeltaTracking();
EtwpSetSoftRestartInformation();
EtwpSpinLockConfigRunDown();
EtwpStackRundown();
EtwpStackTraceDispatcher();
EtwpStackWalkApc();
EtwpStackWalkDpc();
EtwpStartLogger();
EtwpStartTrace();
EtwpStopLoggerInstance();
EtwpStopTrace();
EtwpSwitchBuffer();
EtwpSynchronizationDpc();
EtwpSynchronizeWithLogger();
EtwpSysModuleRunDown();
EtwpSystemImageEnumCallback();
EtwpSystemTraceWdf();
EtwpThreadEnumCallback();
EtwpThreadRundownApc();
EtwpTiAllocVadQueryEventWriteWorkItemContext();
EtwpTiAsyncVadQueryEventWrite();
EtwpTiFillProcessIdentity();
EtwpTiFillThreadIdentity();
EtwpTiFillVad();
EtwpTiFillVadEventWrite();
EtwpTiParseContextRecord();
EtwpTiQueryVad();
EtwpTiVadQueryEventWrite();
EtwpTiVadQueryEventWriteCallback();
EtwpTimLogMitigationForProcess();
EtwpTraceALPC();
EtwpTraceCachedStack();
EtwpTraceDebugPrint();
EtwpTraceFileIo();
EtwpTraceFileName();
EtwpTraceFltIo();
EtwpTraceFltTimedIo();
EtwpTraceHandle();
EtwpTraceImageRundown();
EtwpTraceImageUnload();
EtwpTraceImageUnloadApc();
EtwpTraceImageUnloadApcStub();
EtwpTraceIo();
EtwpTraceIoInit();
EtwpTraceKernelEventWithFilter();
EtwpTraceLastBranchRecord();
EtwpTraceLoggingProvEnableCallback();
EtwpTraceLostEvent();
EtwpTraceMessageVa();
EtwpTraceNetwork();
EtwpTraceOpticalIo();
EtwpTraceOpticalIoInit();
EtwpTraceProcessRundown();
EtwpTraceProcessorTrace();
EtwpTraceRedirectedIo();
EtwpTraceRegistry();
EtwpTraceRegistryTransaction();
EtwpTraceSavePersistedLoggerStop();
EtwpTraceSplitIo();
EtwpTraceStackKey();
EtwpTraceStackWalk();
EtwpTraceSystemInitialization();
EtwpTraceSystemShutdown();
EtwpTraceThreadRundown();
EtwpTraceThreadRundownWithStack();
EtwpTraceWdf();
EtwpTracingProvEnableCallback();
EtwpTrackBinaryForSession();
EtwpTrackDebugIdForSession();
EtwpTrackDecodeGuidForSession();
EtwpTrackGuidEntryRegistrations();
EtwpTrackProviderBinary();
EtwpTrackProviderRegistration();
EtwpUMGLEnabled();
EtwpUnlockBufferList();
EtwpUnreferenceDataBlock();
EtwpUnreferenceGuidEntry();
EtwpUpdateDisallowList();
EtwpUpdateDisallowedGuids();
EtwpUpdateEnableMask();
EtwpUpdateEventFilter();
EtwpUpdateEventsLostCount();
EtwpUpdateFileHeader();
EtwpUpdateFileInfoDriverRegistration();
EtwpUpdateFileInfoDriverState();
EtwpUpdateFilterData();
EtwpUpdateGlobalGroupMasks();
EtwpUpdateGroupMasks();
EtwpUpdateGuidEnableInfo();
EtwpUpdateKernelGroupsWork();
EtwpUpdateLastBranchTracingConfiguration();
EtwpUpdateLastBranchTracingEvents();
EtwpUpdateLevelKwFilter();
EtwpUpdateLoggerGroupMasks();
EtwpUpdateLoggerSecurityDescriptor();
EtwpUpdatePerProcessTracing();
EtwpUpdatePeriodicCaptureState();
EtwpUpdatePidFilterData();
EtwpUpdatePmcCounters();
EtwpUpdatePmcEvents();
EtwpUpdateProcessTracingCallback();
EtwpUpdateProcessorTraceConfiguration();
EtwpUpdateProcessorTraceEvents();
EtwpUpdateRegEntryEnableMask();
EtwpUpdateSchematizedFilterData();
EtwpUpdateStackTracing();
EtwpUpdateStringFilterData();
EtwpUpdateTagFilter();
EtwpUpdateTrace();
EtwpUseDescriptorTypeUm();
EtwpUserInAdminOrLogUsersGroup();
EtwpValidateEnableNotification();
EtwpValidateFilterDescriptors();
EtwpValidateFlagExtension();
EtwpValidateLoggerInfo();
EtwpValidatePayloadFilter();
EtwpValidateTraceControlFilterDescriptors();
EtwpWaitForBufferReferenceCount();
EtwpWriteAppStateChange();
EtwpWriteAppStateChangeSummary();
EtwpWriteAppStateChangeWithStats();
EtwpWriteProcessEvent();
EtwpWriteProcessStarted();
EtwpWriteProcessorTrace();
EtwpWriteUserEvent();
ExAcquireAutoExpandPushLockExclusive();
ExAcquireAutoExpandPushLockShared();
ExAcquireCacheAwarePushLockExclusive();
ExAcquireCacheAwarePushLockExclusiveEx();
ExAcquireCacheAwarePushLockSharedEx();
ExAcquireFastMutex();
ExAcquireFastMutexUnsafe();
ExAcquireFastResourceExclusive();
ExAcquireFastResourceShared();
ExAcquireFastResourceSharedStarveExclusive();
ExAcquirePushLockExclusiveEx();
ExAcquirePushLockSharedEx();
ExAcquireResourceExclusiveLite();
ExAcquireResourceSharedLite();
ExAcquireRundownProtection();
ExAcquireRundownProtectionCacheAware();
ExAcquireRundownProtectionCacheAwareEx();
ExAcquireRundownProtectionEx();
ExAcquireSharedStarveExclusive();
ExAcquireSharedWaitForExclusive();
ExAcquireSpinLockExclusive();
ExAcquireSpinLockExclusiveAtDpcLevel();
ExAcquireSpinLockShared();
ExAcquireSpinLockSharedAtDpcLevel();
ExAcquireTimeRefreshLock();
ExActivateVMWithSubscription();
ExAddPrivateDataToCrashDump();
ExAllocateAutoExpandPushLock();
ExAllocateCacheAwarePushLock();
ExAllocateCacheAwareRundownProtection();
ExAllocateCallBack();
ExAllocateContiguousHeapPool();
ExAllocateFromNPagedLookasideList();
ExAllocateFromPagedLookasideList();
ExAllocateHeapPages();
ExAllocateHeapPool();
ExAllocateHeapSpecialPool();
ExAllocatePool();
ExAllocatePoolEx();
ExAllocatePoolSanityChecks();
ExAllocatePoolWithQuota();
ExAllocatePoolWithQuotaTag();
ExAllocatePoolWithTag();
ExAllocatePoolWithTagPriority();
ExAllocatePrivateWorkerPool();
ExAllocateTimer();
ExAllocateTimerInternal();
ExAllocateTimerInternal2();
ExBlockOnAddressPushLock();
ExBlockPushLock();
ExBurnMemory();
ExCallCallBack();
ExCallSessionCallBack();
ExCancelTimer();
ExCheckFullProcessInformationAccess();
ExCheckSingleFilter();
ExCheckValidIRTimerId();
ExCleanTimerResolutionRequest();
ExCleanupAutoExpandPushLock();
ExCleanupRundownProtectionCacheAware();
ExCleanupSessionHeapManager();
ExClearPoolFlags();
ExCompareExchangeCallBack();
ExComputeTickCountMultiplier();
ExConvertExclusiveToSharedLite();
ExConvertFastResourceExclusiveToShared();
ExConvertPushLockExclusiveToShared();
ExCopyWakeTimerInfo();
ExCovReadjustUnloadedModuleEntry();
ExCpuSetResourceManagerAccessCheck();
ExCreateCallback();
ExCreateHandleEx();
ExCreateHandleTable();
ExCreateHeap();
ExCreatePoolTagTable();
ExDeferredFreePool();
ExDeleteFastResource();
ExDeleteLookasideListEx();
ExDeleteNPagedLookasideList();
ExDeletePagedLookasideList();
ExDeletePoolTagTable();
ExDeleteResourceLite();
ExDeleteTimer();
ExDeleteWakeTimerInfo();
ExDereferenceCallBackBlock();
ExDereferenceHandleDebugInfo();
ExDestroyHandle();
ExDisableAllLookasideLists();
ExDisableHandleTracing();
ExDisableResourceBoostLite();
ExDisownFastResource();
ExDupHandleTable();
ExEnableHandleExceptions();
ExEnableHandleTracing();
ExEnableRaiseUMExceptionOnInvalidHandleClose();
ExEnterCriticalRegionAndAcquireFastMutexUnsafe();
ExEnterCriticalRegionAndAcquireResourceExclusive();
ExEnterCriticalRegionAndAcquireResourceShared();
ExEnterCriticalRegionAndAcquireSharedWaitForExclusive();
ExEnterPriorityRegionAndAcquireResourceExclusive();
ExEnterPriorityRegionAndAcquireResourceShared();
ExEnumHandleTable();
ExEnumerateSystemFirmwareTables();
ExExtendZone();
ExFastReplenishHandleTableEntry();
ExFetchLicenseData$fin$0();
ExFlushLookasideListEx();
ExFlushTb();
ExFreeAutoExpandPushLock();
ExFreeCacheAwarePushLock();
ExFreeCacheAwareRundownProtection();
ExFreeCallBack();
ExFreeHeapPages();
ExFreeLargePool();
ExFreePool();
ExFreePoolEx();
ExFreePoolSanityChecks();
ExFreePoolWithTag();
ExFreeSvmAsid();
ExFreeToNPagedLookasideList();
ExFreeToPagedLookasideList();
ExGenRandom();
ExGetAttachedSessionPoolTagInfo();
ExGetBigPoolInfo();
ExGetCallBackBlockContext();
ExGetCallBackBlockRoutine();
ExGetCurrentProcessorCounts();
ExGetCurrentProcessorCpuUsage();
ExGetExclusiveWaiterCount();
ExGetExpirationDate();
ExGetExtensionTable();
ExGetFirmwareEnvironmentVariable();
ExGetFirmwareType();
ExGetHeapFromType();
ExGetHeapFromVA();
ExGetLicenseTamperState();
ExGetNextProcess();
ExGetNextWakeTime();
ExGetNextWakeTimeForDeepSleep();
ExGetPoolTagInfo();
ExGetPreviousMode();
ExGetSessionBigPoolInformation();
ExGetSessionPoolTagInfo();
ExGetSessionPoolTagInformation();
ExGetSharedWaiterCount();
ExGetSuiteMask();
ExGetSystemFirmwareTable();
ExGetVMType();
ExGetWakeTimerList();
ExHandleLogBadReference();
ExHandleSPCall2();
ExHandleTableQuery();
ExHeapLookasideRebalance();
ExHeapLookasideReplenish();
ExHeapQueryPoolUsage();
ExInitLicenseData();
ExInitPoolLookasidePointers();
ExInitSystem();
ExInitSystemPhase2();
ExInitializeAutoExpandPushLock();
ExInitializeCallBack();
ExInitializeExternalBootSupport();
ExInitializeFastOwnerEntry();
ExInitializeFastResource();
ExInitializeLeapSecondData();
ExInitializeLookasideListEx();
ExInitializeLookasideListExInternal();
ExInitializeNPagedLookasideList();
ExInitializeNPagedLookasideListInternal();
ExInitializeNls();
ExInitializePagedHeaps();
ExInitializePagedLookasideList();
ExInitializePagedLookasideListInternal();
ExInitializePoolDescriptor();
ExInitializePoolHeapManagement();
ExInitializeProcessor();
ExInitializePushLock();
ExInitializeResourceLite();
ExInitializeRundownProtection();
ExInitializeRundownProtectionCacheAware();
ExInitializeRundownProtectionCacheAwareEx();
ExInitializeSessionHeapManager();
ExInitializeSystemLookasideList();
ExInitializeTimeRefresh();
ExInitializeUtcTimeZoneBias();
ExInitializeZone();
ExInsertPoolTag();
ExInterlockedAddLargeInteger();
ExInterlockedAddUlong();
ExInterlockedExtendZone();
ExInterlockedInsertHeadList();
ExInterlockedInsertTailList();
ExInterlockedPopEntryList();
ExInterlockedPushEntryList();
ExInterlockedRemoveHeadList();
ExIsFastResourceContended();
ExIsFastResourceHeld();
ExIsFastResourceHeldExclusive();
ExIsManufacturingModeEnabled();
ExIsMultiSessionSku();
ExIsProcessorFeaturePresent();
ExIsResourceAcquiredExclusiveLite();
ExIsResourceAcquiredSharedLite();
ExIsRestrictedCaller();
ExIsSafeWorkItem();
ExIsSoftBoot();
ExIsSpecialPoolAddress();
ExIsWindowsToGo();
ExLocalTimeToSystemTime();
ExLockHandleTableEntry();
ExLockUserBuffer();
ExMapHandleToPointer();
ExMapHandleToPointerEx();
ExNotifyBootDeviceRemoval();
ExNotifyCallback();
ExNotifyPlatformBinaryExecuted();
ExNotifyWithProcessing();
ExPoolCleanupExpansionTable();
ExProcessorCounterSetCallback();
ExProtectPool();
ExProtectPoolEx();
ExQueryBigPoolTag();
ExQueryBootEntropyInformation();
ExQueryDepthSList();
ExQueryHandleExceptions();
ExQueryHandleExceptionsPermanency();
ExQueryLicenseValueInternal();
ExQueryLicenseValueInternal$filt$0();
ExQueryLicenseValueInternal$filt$1();
ExQueryPoolBlockSize();
ExQueryPoolUsage();
ExQueryProcessHandleInformation();
ExQueryRaiseUMExceptionOnInvalidHandleClose();
ExQuerySystemLockInformation();
ExQueryTimerResolution();
ExQueryWnfStateData();
ExQueueDebuggerWorker();
ExQueueWorkItem();
ExQueueWorkItemEx();
ExQueueWorkItemExFromIo();
ExQueueWorkItemFromIo();
ExQueueWorkItemToPartition();
ExQueueWorkItemToPrivatePool();
ExRaiseAccessViolation();
ExRaiseDatatypeMisalignment();
ExRaiseHardError();
ExReInitializeRundownProtection();
ExReInitializeRundownProtectionCacheAware();
ExRealTimeIsUniversal();
ExRecordOneTimerExpiry();
ExReferenceCallBackBlock();
ExReferenceHandleDebugInfo();
ExRegisterBootDevice();
ExRegisterCallback();
ExRegisterExtension();
ExRegisterHost();
ExReinitializeFastResource();
ExReinitializeResourceLite();
ExReleaseAutoExpandPushLockExclusive();
ExReleaseAutoExpandPushLockShared();
ExReleaseCacheAwarePushLockExclusive();
ExReleaseCacheAwarePushLockExclusiveEx();
ExReleaseCacheAwarePushLockSharedEx();
ExReleaseDisownedFastResource();
ExReleaseDisownedFastResourceExclusive();
ExReleaseDisownedFastResourceShared();
ExReleaseExtensionTable();
ExReleaseFastMutex();
ExReleaseFastMutexUnsafe();
ExReleaseFastMutexUnsafeAndLeaveCriticalRegion();
ExReleaseFastResource();
ExReleaseFastResourceExclusive();
ExReleaseFastResourceShared();
ExReleasePushLockEx();
ExReleasePushLockExclusiveEx();
ExReleasePushLockSharedEx();
ExReleaseResourceAndLeaveCriticalRegion();
ExReleaseResourceAndLeavePriorityRegion();
ExReleaseResourceForThreadLite();
ExReleaseResourceLite();
ExReleaseRundownProtection();
ExReleaseRundownProtectionCacheAware();
ExReleaseRundownProtectionCacheAwareEx();
ExReleaseRundownProtectionEx();
ExReleaseSpinLockExclusive();
ExReleaseSpinLockExclusiveFromDpcLevel();
ExReleaseSpinLockShared();
ExReleaseSpinLockSharedFromDpcLevel();
ExReleaseTimeRefreshLock();
ExRemoveLowBoxAtomReferences();
ExReturnPoolQuota();
ExRngInitializeSystem();
ExRundownCompleted();
ExRundownCompletedCacheAware();
ExSaAllocate();
ExSaFree();
ExSetFirmwareEnvironmentVariable();
ExSetHandleAttributes();
ExSetLeapSecondEnabled();
ExSetLicenseTamperState();
ExSetPoolFlags();
ExSetResourceOwnerPointer();
ExSetResourceOwnerPointerEx();
ExSetTimer();
ExSetTimerResolution();
ExShareAddressSpaceWithDevice();
ExShutdownSystem();
ExSizeOfAutoExpandPushLock();
ExSizeOfRundownProtectionCacheAware();
ExSlowReplenishHandleTableEntry();
ExStartRecordingIRTimerExpiries();
ExStopRecordingIRTimerExpiries();
ExSubscribeWnfStateChange();
ExSvmBeginDeviceReset();
ExSvmDevicePowerCallback();
ExSvmFinalizeDeviceReset();
ExSwapinWorkerThreads();
ExSweepHandleTable();
ExSweepSingleHandle();
ExSystemExceptionFilter();
ExSystemTimeToLocalTime();
ExTimedWaitForUnblockPushLock();
ExTimerRundown();
ExTraceTimerResolution();
ExTryAcquireAutoExpandPushLockExclusive();
ExTryAcquireAutoExpandPushLockShared();
ExTryAcquireCacheAwarePushLockExclusiveEx();
ExTryAcquireCacheAwarePushLockSharedEx();
ExTryAcquirePushLockExclusiveEx();
ExTryAcquirePushLockSharedEx();
ExTryAcquireSpinLockExclusiveAtDpcLevel();
ExTryAcquireSpinLockSharedAtDpcLevel();
ExTryConvertPushLockSharedToExclusiveEx();
ExTryConvertSharedSpinLockExclusive();
ExTryConvertSharedToExclusiveLite();
ExTryQueueWorkItem();
ExTryToAcquireFastMutex();
ExTryToAcquireResourceExclusiveLite();
ExTryToConvertFastResourceSharedToExclusive();
ExUnblockOnAddressPushLockEx();
ExUnblockPushLockEx();
ExUnlockHandleTableEntry();
ExUnlockUserBuffer();
ExUnregisterCallback();
ExUnregisterExtension();
ExUnsubscribeWnfStateChange();
ExUpdateLicenseData();
ExUpdateLicenseDataInternal();
ExUpdateLicenseDataInternal$fin$0();
ExUpdateLicenseDataInternal$fin$1();
ExUpdateLicenseRegistry();
ExUpdateOsPfnInRegistry();
ExUpdateOsPfnInRegistry$fin$0();
ExUpdateSystemTimeFromCmos();
ExUuidCreate();
ExVerifySuite();
ExWaitForCallBacks();
ExWaitForRundownProtectionRelease();
ExWaitForRundownProtectionReleaseCacheAware();
ExWaitForUnblockPushLock();
ExWakeTimersPause();
ExWakeTimersResume();
ExWnfExitProcess();
ExfAcquireCacheAwarePushLockExclusiveEx();
ExfAcquirePushLockExclusive();
ExfAcquirePushLockExclusiveEx();
ExfAcquirePushLockShared();
ExfAcquirePushLockSharedEx();
ExfAcquireReleasePushLockExclusive();
ExfAcquireRundownProtection();
ExfReleasePushLock();
ExfReleasePushLockExclusive();
ExfReleasePushLockShared();
ExfReleasePushLockSharedEx();
ExfReleaseRundownProtection();
ExfTryAcquirePushLockShared();
ExfTryToWakePushLock();
ExfUnblockPushLock();
ExfWaitForRundownProtectionRelease();
ExpAcquireFannedOutPushLockExclusive();
ExpAcquireFastMutexContended();
ExpAcquireResourceExclusiveLite();
ExpAcquireResourceSharedLite();
ExpAcquireSharedStarveExclusive();
ExpAcquireSpinLockDisabled();
ExpAcquireSpinLockExclusive();
ExpAcquireSpinLockExclusiveAtDpcLevelInstrumented();
ExpAcquireSpinLockSharedAtDpcLevelInstrumented();
ExpAddFastOwnerEntryToThreadList();
ExpAddResourceToSystemResourceList();
ExpAddTagForBigPages();
ExpAeMeasureContention();
ExpAeStopMeasurement();
ExpAeThresholdInitWorker();
ExpAeThresholdInitialization();
ExpAeUpdateStatsForExclusiveRelease();
ExpAllocateAsid();
ExpAllocateBigPool();
ExpAllocateFannedOutPushLock();
ExpAllocateHandleTable();
ExpAllocateHandleTableEntry();
ExpAllocateHandleTableEntrySlow();
ExpAllocateLowLevelTable();
ExpAllocateMidLevelTable();
ExpAllocateOwnerEntryForLegacyShim();
ExpAllocateStringRoutine();
ExpAllocateTablePagedPool();
ExpAllocateTablePagedPoolNoZero();
ExpAllocateUuids();
ExpApplyPrewaitBoost();
ExpApplyPriorityBoost();
ExpApplyRewaitBoost();
ExpAssignPasid();
ExpBlockOnLockedHandleEntry();
ExpBoostIoAfterAcquire();
ExpCallProcessing();
ExpCancelTimer();
ExpCapabilityCheck();
ExpCaptureWnfStateName();
ExpCenturyDpcRoutine();
ExpCenturyDpcRoutine$filt$1();
ExpCenturyDpcRoutine$fin$0();
ExpCheckForFreedEnhancedTimer();
ExpCheckForLookaside();
ExpCheckForLookasideList();
ExpCheckForResource();
ExpCheckForWorker();
ExpCheckIRTimerAccess();
ExpCheckPortableOperatingSystem();
ExpCheckTestsigningEnabled();
ExpCheckThreadHistory();
ExpCheckWakeTimerAccess();
ExpCleanupAutoExpandPushLock();
ExpCloseWorkerFactory();
ExpCloudbookHardwareIDProvider();
ExpCloudbookHardwareLockedProvider();
ExpComputeLookasideDepth();
ExpConsumeAddonPolicySetCacheProvider();
ExpConvertArcName();
ExpConvertExclusiveToSharedLite();
ExpConvertFastResourceExclusiveToShared();
ExpConvertLdrEntryToModuleInfo();
ExpConvertSignatureName();
ExpCopyProcessInfo();
ExpCopyProcessInfo$filt$0();
ExpCovCreateUnloadedModuleEntry();
ExpCovDeleteUnloadedModuleEntry();
ExpCovFreeUnloadedModuleEntry();
ExpCovGetSectionInfo();
ExpCovIsLoadedModulePresent();
ExpCovIsModulePresent();
ExpCovIsUnLoadedModulePresent();
ExpCovQueryHypervisorInformation();
ExpCovQueryInfoCallBack();
ExpCovQueryInformation();
ExpCovQueryLoadedModule();
ExpCovReadFriendlyName();
ExpCovReadRequestBuffer();
ExpCovResetInfoCallBack();
ExpCovResetInformation();
ExpCreateOutputARC();
ExpCreateOutputEFI();
ExpCreateOutputNT();
ExpCreateOutputSIGNATURE();
ExpCreateWorkerThread();
ExpDebuggerDpcRoutine();
ExpDebuggerWorker();
ExpDeleteCallback();
ExpDeleteMutant();
ExpDeleteTimer();
ExpDeleteTimer2();
ExpDeleteWorkerFactory();
ExpDereferenceHost();
ExpDetermineLargePagePolicy();
ExpEnumerateCallback();
ExpEventInitialization();
ExpExTimerAttributesAreValid();
ExpExpandResourceOwnerTable();
ExpExpirationThread();
ExpFastResourceLegacyAcquireExclusive();
ExpFastResourceLegacyAcquireSharedStarveExclusive();
ExpFastResourceLegacyConvertExclusiveToShared();
ExpFastResourceLegacyIsAcquiredShared();
ExpFastResourceLegacyRelease();
ExpFinalizeTimerDeletion();
ExpFindArcName();
ExpFindCurrentThread();
ExpFindDiskSignature();
ExpFindEmptyEntry();
ExpFindFastOwnerEntryForThread();
ExpFindHost();
ExpFirmwareAccessAppContainerCheck();
ExpFlushGeneralLookaside();
ExpFreeAsid();
ExpFreeFannedOutPushLock();
ExpFreeHandleTable();
ExpFreeHandleTableEntry();
ExpFreeHeapSpecialPool();
ExpFreeLowLevelTable();
ExpFreePoolChecks();
ExpFreeTablePagedPool();
ExpGenuinePolicyCacheProvider();
ExpGenuinePolicyPostProcess();
ExpGetBilledProcess();
ExpGetCurrentUserUILanguage();
ExpGetDeviceDataInformation();
ExpGetDriveGeometry();
ExpGetFirmwareEnvironmentVariable();
ExpGetGlobalLocaleSection();
ExpGetHandleExtraInfo();
ExpGetHandleInformation();
ExpGetHandleInformationEx();
ExpGetKernelDataProtection();
ExpGetKernelDataProtection$fin$0();
ExpGetLeapSecondDataRegistryKeyHandle();
ExpGetLockInformation();
ExpGetLookasideInformation();
ExpGetNextCallback();
ExpGetNextHandleTableEntry();
ExpGetNtProductTypeFromLicenseValue();
ExpGetObjectInformation();
ExpGetPartitionTableInfo();
ExpGetPoolTagInfoTarget();
ExpGetProcessInformation();
ExpGetProcessInformation$filt$0();
ExpGetProcessInformation$filt$1();
ExpGetProcessInformation$filt$2();
ExpGetProcessInformation$filt$3();
ExpGetProcessInformation$filt$4();
ExpGetProcessInformation$filt$5();
ExpGetProcessInformation$filt$6();
ExpGetProcessInformation$filt$7();
ExpGetProcessInformation$filt$8();
ExpGetProcessInformation$filt$9();
ExpGetProcessInformation$fin$10();
ExpGetProductInfoSuiteTypeMap();
ExpGetSubscriptionPfn();
ExpGetSubscriptionPfn$fin$0();
ExpGetSystemBasicInformation();
ExpGetSystemBasicInformation$filt$0();
ExpGetSystemEmulationBasicInformation();
ExpGetSystemEmulationBasicInformation$filt$0();
ExpGetSystemEmulationProcessorInformation();
ExpGetSystemFirmwareTableInformation();
ExpGetSystemFlushInformation();
ExpGetSystemFlushInformation$filt$0();
ExpGetSystemPlatformBinary();
ExpGetSystemPlatformBinary$filt$0();
ExpGetSystemPlatformBinary$filt$1();
ExpGetSystemPlatformBinary$filt$2();
ExpGetSystemProcessorFeaturesInformation();
ExpGetSystemProcessorFeaturesInformation$filt$0();
ExpGetSystemProcessorInformation();
ExpGetSystemProcessorInformation$filt$0();
ExpGetSystemWriteConstraintInformation();
ExpGetSystemWriteConstraintInformation$filt$0();
ExpGetThreadResourceHint();
ExpGetUILanguagePolicy();
ExpGetVMActivationStatus();
ExpHeapGCInitialization();
ExpHpCompactSessionPools();
ExpHpCompactionRoutine();
ExpHpGCTimerCallback();
ExpHpIsSpecialPoolHeap();
ExpHwidAppendDeviceInfoBlock();
ExpHwidAuthenticateHardwareId();
ExpHwidBiosIfGetFirmwareTable();
ExpHwidEnsurePropertyBufferLength();
ExpHwidGetDeviceProperties();
ExpHwidGetDevicePropertyData();
ExpHwidGetDevicePropertyDataFixed();
ExpHwidNetworkIfDeviceInfoProvider();
ExpHwidProcessDevice();
ExpHwidProcessInterface();
ExpHwidSendSynchronousIrpToDevice();
ExpHwidSysVolIfDeviceInfoProvider();
ExpHwidSysVolIfGetDiskInfo();
ExpInitBootEntropyInformation();
ExpInitExpCheckTestSigningInfo();
ExpInitFullProcessSecurityInfo();
ExpInitSystemPhase0();
ExpInitSystemPhase1();
ExpInitializeCallbacks();
ExpInitializeResource();
ExpInitializeSessionDriver();
ExpInitializeSvm();
ExpInitializeThreadHistory();
ExpInsertLowLevelTableIntoFreeList();
ExpInsertPoolTracker();
ExpInsertPoolTrackerExpansion();
ExpInsertTimerResolutionEntry();
ExpInterlockedFlushSList();
ExpInterlockedPopEntrySList();
ExpInterlockedPopEntrySListEnd();
ExpInterlockedPopEntrySListFault();
ExpInterlockedPopEntrySListResume();
ExpInterlockedPushEntrySList();
ExpIoPoolDeadlockWorker();
ExpIsBootEntry();
ExpIsDevicePathForRemovableMedia();
ExpIsDriverEntry();
ExpIsIumEncryptionKeyAvailable();
ExpIsKernelCfgActive();
ExpIsPoolReadyForWork();
ExpIsPoolTagPrintable();
ExpIsRunningInWDAGContainer();
ExpIsValidUILanguage();
ExpKernelExpirationDateCacheProvider();
ExpKeyedEventInitialization();
ExpLeapSecondDataRegistryNotifyHandler();
ExpLeaveWorkerFactoryAwayMode();
ExpLegacyWorkerInitialization();
ExpLicUpdateChecksum();
ExpLicenseWatchInitWorker();
ExpLoadAndSortLicensingCacheDescriptors();
ExpLoadAndSortLicensingCacheDescriptors$fin$0();
ExpLoadAndSortLicensingCacheDescriptors$fin$1();
ExpLookupHandleTableEntry();
ExpMutantInitialization();
ExpNewThreadNecessary();
ExpNextYearDpcRoutine();
ExpNodeCreateSystemThread();
ExpNodeHotAddProcessorWorker();
ExpNodeInitialize();
ExpOptimizePushLockList();
ExpOsProductCacheProviderHelper();
ExpOsProductContentIdCacheProvider();
ExpOsProductPfnCacheProvider();
ExpOwnerEntryToThread();
ExpParseAndUpdateLeapSecondData();
ExpParseArcPathName();
ExpParseEfiPath();
ExpParseSignatureName();
ExpParseSuiteMask();
ExpPartitionCreatePool();
ExpPartitionCreatePoolDelayed();
ExpPartitionCreatePoolInternal();
ExpPartitionCreateSystemThread();
ExpPartitionCreateThreadIfNecessary();
ExpPartitionDestroy();
ExpPartitionInitialize();
ExpPartitionStart();
ExpPcwDisabledStatus();
ExpPcwHostCallback();
ExpPrepareNewSvmDevice();
ExpPrepareToWaitForResourceExclusive();
ExpPrepareToWaitForResourceShared();
ExpPrepareToWakeResourceExclusive();
ExpPrepareToWakeResourceShared();
ExpProfileCreate();
ExpProfileCreate$filt$0();
ExpProfileDelete();
ExpProfileInitialization();
ExpPutLicenseDataIntoRegistry();
ExpPutLicenseDataIntoRegistry$fin$0();
ExpQueryChannelInformation();
ExpQueryChannelInformation$filt$0();
ExpQueryChannelInformation$filt$1();
ExpQueryCodeIntegrityCertificateInfo();
ExpQueryElamCertInfo();
ExpQueryElamCertInfo$filt$0();
ExpQueryInterruptSteeringInformation();
ExpQueryInterruptSteeringInformation$filt$0();
ExpQueryInterruptSteeringInformation$filt$1();
ExpQueryInterruptSteeringInformation$filt$2();
ExpQueryLegacyDriverInformation();
ExpQueryLegacyDriverInformation$filt$0();
ExpQueryLicenseValueFromBlob$filt$0();
ExpQueryLicenseValueFromBlobHelper$fin$0();
ExpQueryMemoryTopologyInformation();
ExpQueryMemoryTopologyInformation$filt$0();
ExpQueryModuleInformation();
ExpQueryModuleInformation$filt$0();
ExpQueryModuleInformation$filt$1();
ExpQueryModuleInformationEx();
ExpQueryModuleInformationEx$filt$0();
ExpQueryModuleInformationEx$filt$1();
ExpQueryNumaAvailableMemory();
ExpQueryNumaAvailableMemory$filt$0();
ExpQueryNumaProcessorMap();
ExpQueryNumaProcessorMap$filt$0();
ExpQueryNumaProximityNode();
ExpQueryNumaProximityNode$filt$0();
ExpQueryNumaProximityNode$filt$1();
ExpQueryPortableWorkspaceEfiLauncherInformation();
ExpQueryPortableWorkspaceEfiLauncherInformation$filt$0();
ExpQueryProcessorInformationCounters();
ExpQuerySingleModuleInformation();
ExpQuerySystemInformation();
ExpQuerySystemInformation$filt$0();
ExpQuerySystemInformation$filt$1();
ExpQuerySystemInformation$filt$10();
ExpQuerySystemInformation$filt$100();
ExpQuerySystemInformation$filt$101();
ExpQuerySystemInformation$filt$102();
ExpQuerySystemInformation$filt$103();
ExpQuerySystemInformation$filt$104();
ExpQuerySystemInformation$filt$105();
ExpQuerySystemInformation$filt$106();
ExpQuerySystemInformation$filt$107();
ExpQuerySystemInformation$filt$108();
ExpQuerySystemInformation$filt$109();
ExpQuerySystemInformation$filt$11();
ExpQuerySystemInformation$filt$110();
ExpQuerySystemInformation$filt$111();
ExpQuerySystemInformation$filt$112();
ExpQuerySystemInformation$filt$113();
ExpQuerySystemInformation$filt$114();
ExpQuerySystemInformation$filt$115();
ExpQuerySystemInformation$filt$116();
ExpQuerySystemInformation$filt$117();
ExpQuerySystemInformation$filt$118();
ExpQuerySystemInformation$filt$119();
ExpQuerySystemInformation$filt$12();
ExpQuerySystemInformation$filt$120();
ExpQuerySystemInformation$filt$121();
ExpQuerySystemInformation$filt$122();
ExpQuerySystemInformation$filt$123();
ExpQuerySystemInformation$filt$124();
ExpQuerySystemInformation$filt$125();
ExpQuerySystemInformation$filt$126();
ExpQuerySystemInformation$filt$127();
ExpQuerySystemInformation$filt$128();
ExpQuerySystemInformation$filt$129();
ExpQuerySystemInformation$filt$13();
ExpQuerySystemInformation$filt$130();
ExpQuerySystemInformation$filt$131();
ExpQuerySystemInformation$filt$14();
ExpQuerySystemInformation$filt$15();
ExpQuerySystemInformation$filt$16();
ExpQuerySystemInformation$filt$17();
ExpQuerySystemInformation$filt$18();
ExpQuerySystemInformation$filt$19();
ExpQuerySystemInformation$filt$2();
ExpQuerySystemInformation$filt$20();
ExpQuerySystemInformation$filt$21();
ExpQuerySystemInformation$filt$22();
ExpQuerySystemInformation$filt$23();
ExpQuerySystemInformation$filt$24();
ExpQuerySystemInformation$filt$25();
ExpQuerySystemInformation$filt$26();
ExpQuerySystemInformation$filt$27();
ExpQuerySystemInformation$filt$28();
ExpQuerySystemInformation$filt$29();
ExpQuerySystemInformation$filt$3();
ExpQuerySystemInformation$filt$30();
ExpQuerySystemInformation$filt$31();
ExpQuerySystemInformation$filt$32();
ExpQuerySystemInformation$filt$33();
ExpQuerySystemInformation$filt$34();
ExpQuerySystemInformation$filt$35();
ExpQuerySystemInformation$filt$36();
ExpQuerySystemInformation$filt$37();
ExpQuerySystemInformation$filt$38();
ExpQuerySystemInformation$filt$39();
ExpQuerySystemInformation$filt$4();
ExpQuerySystemInformation$filt$40();
ExpQuerySystemInformation$filt$41();
ExpQuerySystemInformation$filt$42();
ExpQuerySystemInformation$filt$43();
ExpQuerySystemInformation$filt$44();
ExpQuerySystemInformation$filt$45();
ExpQuerySystemInformation$filt$46();
ExpQuerySystemInformation$filt$47();
ExpQuerySystemInformation$filt$48();
ExpQuerySystemInformation$filt$49();
ExpQuerySystemInformation$filt$5();
ExpQuerySystemInformation$filt$50();
ExpQuerySystemInformation$filt$51();
ExpQuerySystemInformation$filt$52();
ExpQuerySystemInformation$filt$53();
ExpQuerySystemInformation$filt$54();
ExpQuerySystemInformation$filt$55();
ExpQuerySystemInformation$filt$56();
ExpQuerySystemInformation$filt$57();
ExpQuerySystemInformation$filt$58();
ExpQuerySystemInformation$filt$59();
ExpQuerySystemInformation$filt$6();
ExpQuerySystemInformation$filt$60();
ExpQuerySystemInformation$filt$61();
ExpQuerySystemInformation$filt$62();
ExpQuerySystemInformation$filt$63();
ExpQuerySystemInformation$filt$64();
ExpQuerySystemInformation$filt$65();
ExpQuerySystemInformation$filt$66();
ExpQuerySystemInformation$filt$67();
ExpQuerySystemInformation$filt$68();
ExpQuerySystemInformation$filt$69();
ExpQuerySystemInformation$filt$7();
ExpQuerySystemInformation$filt$70();
ExpQuerySystemInformation$filt$71();
ExpQuerySystemInformation$filt$72();
ExpQuerySystemInformation$filt$73();
ExpQuerySystemInformation$filt$74();
ExpQuerySystemInformation$filt$75();
ExpQuerySystemInformation$filt$76();
ExpQuerySystemInformation$filt$77();
ExpQuerySystemInformation$filt$78();
ExpQuerySystemInformation$filt$79();
ExpQuerySystemInformation$filt$8();
ExpQuerySystemInformation$filt$80();
ExpQuerySystemInformation$filt$81();
ExpQuerySystemInformation$filt$82();
ExpQuerySystemInformation$filt$83();
ExpQuerySystemInformation$filt$84();
ExpQuerySystemInformation$filt$85();
ExpQuerySystemInformation$filt$86();
ExpQuerySystemInformation$filt$87();
ExpQuerySystemInformation$filt$88();
ExpQuerySystemInformation$filt$89();
ExpQuerySystemInformation$filt$9();
ExpQuerySystemInformation$filt$90();
ExpQuerySystemInformation$filt$91();
ExpQuerySystemInformation$filt$92();
ExpQuerySystemInformation$filt$93();
ExpQuerySystemInformation$filt$94();
ExpQuerySystemInformation$filt$95();
ExpQuerySystemInformation$filt$96();
ExpQuerySystemInformation$filt$97();
ExpQuerySystemInformation$filt$98();
ExpQuerySystemInformation$filt$99();
ExpQuerySystemPerformanceInformation();
ExpQueueWorkItem();
ExpRaiseHardError();
ExpReadComPlusPackage();
ExpReadLeapSecondData();
ExpRecordShutdownTime();
ExpRefreshSystemTime();
ExpRefreshTimeZoneInformation();
ExpRegisterFirmwareTableInformationHandler();
ExpReleaseDisownedFastResourceExclusive();
ExpReleaseDisownedFastResourceShared();
ExpReleaseFannedOutPushLockExclusive();
ExpReleaseFastMutexContended();
ExpReleaseFastResourceExclusive();
ExpReleaseFastResourceShared();
ExpReleaseResourceExclusiveForThreadLite();
ExpReleaseResourceForThreadLite();
ExpReleaseResourceSharedForThreadLite();
ExpReleaseSpinLockDisabled();
ExpReleaseSpinLockExclusiveFromDpcLevelInstrumented();
ExpReleaseSpinLockSharedFromDpcLevelInstrumented();
ExpRemoveCurrentThreadFromThreadHistory();
ExpRemoveGeneralLookaside();
ExpRemoveHandleTable();
ExpRemovePoolTrackerExpansion();
ExpRemoveTagForBigPages();
ExpReplaceListEntry();
ExpResizeBigPageTable();
ExpResourceEnforcesOwnershipTransfer();
ExpResourceTimeoutCaptureLiveDump();
ExpRevokeBootLoaderPagePrivileges();
ExpRotateFastOwnerEntrySublistHead();
ExpSaAllocatorAllocate();
ExpSaAllocatorFree();
ExpSaAllocatorInitialize();
ExpSaAllocatorOptimizeList();
ExpSaBinaryArrayInsert();
ExpSaBinaryArrayRemove();
ExpSaInitialize();
ExpSaPageGroupAllocateMemory();
ExpSaPageGroupDescriptorAllocate();
ExpSaPageGroupDescriptorFree();
ExpSaPageGroupFreeMemory();
ExpSafeWcslen();
ExpScanGeneralLookasideList();
ExpScanSystemLookasideList();
ExpSeedHotTags();
ExpSemaphoreInitialization();
ExpSetBootEntry();
ExpSetBootEntry$filt$0();
ExpSetBootEntry$filt$1();
ExpSetCurrentUserUILanguage();
ExpSetDriverEntry();
ExpSetDriverEntry$filt$0();
ExpSetDriverEntry$filt$1();
ExpSetFirmwareEnvironmentVariable();
ExpSetHandleExtraInfo();
ExpSetKernelDataProtection();
ExpSetKernelDataProtection$fin$0();
ExpSetProcessorMicrocodeUpdateInformation();
ExpSetResourceOwnerPointerEx();
ExpSetSoftRebootFlags();
ExpSetSwappingKernelApc();
ExpSetSystemTime();
ExpSetTimeZoneInformation();
ExpSetTimer();
ExpSetTimer2();
ExpSetTimerObject();
ExpSetTimerObject2();
ExpSetWorkerFactoryDeferredCreateTimer();
ExpShutdownWorkerFactory();
ExpSingleStringCheck();
ExpSizeHeapPool();
ExpSnapShotHandleTables();
ExpStringCapture();
ExpStringCheck();
ExpSvmDereferenceAsid();
ExpSvmDereferenceDevice();
ExpSvmDpcRoutine();
ExpSvmFaultRoutine();
ExpSvmReferenceAsid();
ExpSvmServicePageFault();
ExpSvmWorkerThread();
ExpSystemErrorHandler();
ExpSystemErrorHandler2();
ExpTimeRefreshCallback();
ExpTimeRefreshDpcRoutine();
ExpTimeRefreshDpcRoutine$filt$1();
ExpTimeRefreshDpcRoutine$filt$3();
ExpTimeRefreshDpcRoutine$fin$0();
ExpTimeRefreshDpcRoutine$fin$2();
ExpTimeRefreshWork();
ExpTimeZoneDpcRoutine();
ExpTimeZoneDpcRoutine$filt$1();
ExpTimeZoneDpcRoutine$filt$3();
ExpTimeZoneDpcRoutine$fin$0();
ExpTimeZoneDpcRoutine$fin$2();
ExpTimeZoneWork();
ExpTimerAdjust();
ExpTimerApcRoutine();
ExpTimerDpcRoutine();
ExpTimerDpcRoutine$filt$1();
ExpTimerDpcRoutine$filt$3();
ExpTimerDpcRoutine$fin$0();
ExpTimerDpcRoutine$fin$2();
ExpTimerInitialization();
ExpTimerPause();
ExpTimerResume();
ExpTimerSetParametersAreValid();
ExpTranslateArcPath();
ExpTranslateBootEntryNameToId();
ExpTranslateDriverEntryNameToId();
ExpTranslateEfiPath();
ExpTranslateHexStringToGUID();
ExpTranslateHexStringToULONG();
ExpTranslateHexStringToULONGLONG();
ExpTranslateNtPath();
ExpTranslateSymbolicLink();
ExpTryAcquireFannedOutPushLockExclusive();
ExpTryAcquireFannedOutPushLockShared();
ExpTryAcquireResourceExclusive();
ExpTryAcquireResourceShared();
ExpTryAcquireResourceSharedStarveExclusive();
ExpTryAcquireSpinLockExclusiveAtDpcLevelInstrumented();
ExpTryAcquireSpinLockShared();
ExpTryAcquireSpinLockSharedAtDpcLevelInstrumented();
ExpTryConvertSharedSpinLockExclusiveInstrumented();
ExpTryConvertSharedToExclusiveLite();
ExpTryEnterWorkerFactoryAwayMode();
ExpTryExpandAutoExpandPushLock();
ExpTryQueueWorkItem();
ExpTryToAcquireResourceExclusiveLite();
ExpTryUpgradeResource();
ExpTypeToPriority();
ExpUmdfSidCheck();
ExpUnblockPushLock();
ExpUnicodeStringToNonpagedWStr();
ExpUnlockCallbackListExclusive();
ExpUpdateComPlusPackage();
ExpUpdateDebugInfo();
ExpUpdateProductSuiteTypeInRegistry();
ExpUpdateTimerConfiguration();
ExpUpdateTimerConfigurationWorker();
ExpUpdateTimerResolution();
ExpUseSpecialPool();
ExpUuidLoadSequenceNumber();
ExpUuidSaveSequenceNumber();
ExpUuidSaveSequenceNumberIf();
ExpValidateLocale();
ExpValidateWorkItem();
ExpVerifyFilePath();
ExpVerifyWindowsOsOptions();
ExpWaitForBootDevices();
ExpWaitForResource();
ExpWaitForSpinLockExclusiveAndAcquire();
ExpWaitForSpinLockSharedAndAcquire();
ExpWakePushLock();
ExpWatchLicenseInfoWork();
ExpWatchProductTypeInitialization();
ExpWatchProductTypeWork();
ExpWin32CloseProcedure();
ExpWin32DeleteProcedure();
ExpWin32Initialization();
ExpWin32OkayToCloseProcedure();
ExpWin32OpenProcedure();
ExpWin32ParseProcedure();
ExpWnfAcquireSubscriptionByName();
ExpWnfAcquireSubscriptionNameInstance();
ExpWnfAllocateNextPersistentNameSequence();
ExpWnfAllocateScopeInstance();
ExpWnfAllocateScopeMap();
ExpWnfCaptureScopeInstanceId();
ExpWnfCheckCallerAccess();
ExpWnfCheckCrossScopeAccess();
ExpWnfCompleteThreadSubscriptions();
ExpWnfComposeValueName();
ExpWnfCreateNameInstance();
ExpWnfCreateProcessContext();
ExpWnfDeleteNameInstance();
ExpWnfDeleteNameInstanceCallback();
ExpWnfDeletePermanentName();
ExpWnfDeletePermanentStateData();
ExpWnfDeleteProcessContext();
ExpWnfDeleteScopeById();
ExpWnfDeleteScopeInstances();
ExpWnfDeleteStateData();
ExpWnfDeleteSubscription();
ExpWnfDeliverThreadNotifications();
ExpWnfDeliverThreadNotifications$filt$0();
ExpWnfDispatchKernelSubscription();
ExpWnfEnumeratePermanentDataStores();
ExpWnfEnumerateScopeInstances();
ExpWnfFindScopeInstance();
ExpWnfFindStateName();
ExpWnfFreeScopeInstance();
ExpWnfGenerateStateName();
ExpWnfGetCurrentScopeInstance();
ExpWnfGetNameStoreRegistryRoot();
ExpWnfGetPermanentDataStoreHandle();
ExpWnfGetPermanentDataStoreHandleByScopeId();
ExpWnfGetPermanentPerUserDataStoreHandle();
ExpWnfInsertSubscriptionInPendingQueue();
ExpWnfLookupNameInstance();
ExpWnfLookupPermanentName();
ExpWnfNotifyNameSubscribers();
ExpWnfNotifySubscription();
ExpWnfPopulateStateData();
ExpWnfQueryCurrentUserSID();
ExpWnfReadStateData();
ExpWnfReadStateData$fin$0();
ExpWnfRegisterPermanentName();
ExpWnfReleaseCapturedScopeInstanceId();
ExpWnfResolveScopeInstance();
ExpWnfSpecializeSecurityDescriptor();
ExpWnfStartKernelDispatcher();
ExpWnfSubscribeNameInstance();
ExpWnfSubscribeWnfStateChange();
ExpWnfSubscribeWnfStateChange$filt$0();
ExpWnfUpdateSubscription();
ExpWnfValidatePubSubPreconditions();
ExpWnfWorkItemRoutine();
ExpWnfWriteStateData();
ExpWnfWriteStateData$fin$0();
ExpWorkQueueDestroy();
ExpWorkQueueInitialize();
ExpWorkQueueManagerInitialize();
ExpWorkQueueManagerReaperTimer();
ExpWorkQueueManagerStart();
ExpWorkQueueManagerThread();
ExpWorkerFactoryCheckCreate();
ExpWorkerFactoryCompletionPacketRoutine();
ExpWorkerFactoryCreateThread();
ExpWorkerFactoryInitialization();
ExpWorkerFactoryManagerThread();
ExpWorkerFactoryWantsToCreate();
ExpWorkerInitialization();
ExpWorkerThread();
ExpressionConvertToString();
ExtractAggregateFieldTypes();
FContainCallBackAce();
FadePalette();
FilterConvertToString();
FilterEval();
FilterEvalImpliedAnd();
FilterEvalStrict();
FinalizeBootLogo();
FindBitmapResource();
FindEmailAt();
FindFilterOperatorClose();
FindLabelEnd();
FindNodeOrParent();
FinishHash();
FioFwReadBytesAtOffset();
FioFwReadUlongAtOffset();
FioFwReadUshortAtOffset();
FirstEntrySList();
FlattenEventEntryTree();
FlushEventEntryList();
FlushLookUpTableBucket();
FopFreeFontData();
FopFreeMappingTable();
FopGetTableOffsetAndSize();
FopInitializeFonts();
FopReadCmapTable();
FopReadMappingTable();
FopReadNameRecord();
FopReadNamingTable();
FopValidateFontNameTable();
FreeOperandValue();
FsFilterAllocateCompletionStack();
FsFilterCtrlFree();
FsFilterCtrlInit();
FsFilterFreeCompletionStack();
FsFilterGetCallbacks();
FsFilterInit();
FsFilterPerformCallbacks();
FsFilterPerformCompletionCallbacks();
FsRtlAcknowledgeEcp();
FsRtlAcquireEofLock();
FsRtlAcquireFileExclusive();
FsRtlAcquireFileExclusiveCommon();
FsRtlAcquireFileForCcFlushEx();
FsRtlAcquireFileForModWriteEx();
FsRtlAcquireHeaderMutex();
FsRtlAcquireToCreateMappedSection();
FsRtlAddBaseMcbEntry();
FsRtlAddBaseMcbEntryEx();
FsRtlAddDiskIOCounterInstance();
FsRtlAddEntry();
FsRtlAddLargeMcbEntry();
FsRtlAddLargeMcbEntry$fin$0();
FsRtlAddMcbEntry();
FsRtlAddToTunnelCache();
FsRtlAddToTunnelCacheEx();
FsRtlAllocateExtraCreateParameter();
FsRtlAllocateExtraCreateParameterFromLookasideList();
FsRtlAllocateExtraCreateParameterList();
FsRtlAllocateFileLock();
FsRtlAllocatePool();
FsRtlAllocatePoolWithQuota();
FsRtlAllocatePoolWithQuotaTag();
FsRtlAllocatePoolWithTag();
FsRtlAllocateResource();
FsRtlAreThereCurrentOrInProgressFileLocks();
FsRtlAreThereWaitingFileLocks();
FsRtlAreVolumeStartupApplicationsComplete();
FsRtlBalanceReads();
FsRtlCancelNotify();
FsRtlCancelNotify$filt$0();
FsRtlCancelNotify$fin$1();
FsRtlCancellableWaitForMultipleObjects();
FsRtlCancellableWaitForSingleObject();
FsRtlChangeBackingFileObject();
FsRtlCheckLockForOplockRequest();
FsRtlCheckLockForReadAccess();
FsRtlCheckLockForWriteAccess();
FsRtlCheckNoExclusiveConflict();
FsRtlCheckNoSharedConflict();
FsRtlCheckNotifyForDelete();
FsRtlCheckNotifyForDeleteLite();
FsRtlCheckOplock();
FsRtlCheckOplockEx();
FsRtlCheckOplockEx$fin$0();
FsRtlCheckUpperOplock();
FsRtlCheckUpperOplock$fin$0();
FsRtlCompareNodeAndKey();
FsRtlCompleteLockIrpReal();
FsRtlCopyRead();
FsRtlCopyRead$filt$0();
FsRtlCopyWrite();
FsRtlCopyWrite$filt$0();
FsRtlCreateSectionForDataScan();
FsRtlCurrentBatchOplock();
FsRtlCurrentOplock();
FsRtlCurrentOplockH();
FsRtlDeleteExtraCreateParameterLookasideList();
FsRtlDeleteKeyFromTunnelCache();
FsRtlDeleteTunnelCache();
FsRtlDeregisterUncProvider();
FsRtlDiskIOCounterSetCallback();
FsRtlDismountComplete();
FsRtlDissectDbcs();
FsRtlDoesDbcsContainWildCards();
FsRtlEmptyFreePoolList();
FsRtlFastCheckLockForRead();
FsRtlFastCheckLockForWrite();
FsRtlFastUnlockAll();
FsRtlFastUnlockAllByKey();
FsRtlFastUnlockSingle();
FsRtlFastUnlockSingleExclusive();
FsRtlFastUnlockSingleShared();
FsRtlFindExtraCreateParameter();
FsRtlFindFirstOverlapInNode();
FsRtlFindFirstOverlappingExclusiveNode();
FsRtlFindFirstOverlappingSharedNode();
FsRtlFindInTunnelCache();
FsRtlFindInTunnelCacheEx();
FsRtlFindInTunnelCacheEx$fin$0();
FsRtlFindLargeIndex();
FsRtlFreeExtraCreateParameter();
FsRtlFreeExtraCreateParameterList();
FsRtlFreeFileLock();
FsRtlFreeTunnelNode();
FsRtlGetCompatibilityModeValue();
FsRtlGetDirectImageOriginalBase();
FsRtlGetEcpListFromIrp();
FsRtlGetFileExtents();
FsRtlGetFileNameInformation();
FsRtlGetFileSize();
FsRtlGetIoAtEof();
FsRtlGetMarkHandleInfo();
FsRtlGetNextBaseMcbEntry();
FsRtlGetNextExtraCreateParameter();
FsRtlGetNextFileLock();
FsRtlGetNextLargeMcbEntry();
FsRtlGetNextMcbEntry();
FsRtlGetSectorSizeInformation();
FsRtlGetSupportedFeatures();
FsRtlGetTunnelParameterValue();
FsRtlGetVirtualDiskNestingLevel();
FsRtlHeatInit();
FsRtlHeatLogIo();
FsRtlHeatLogTierMove();
FsRtlHeatUninit();
FsRtlIncrementCcFastMdlReadWait();
FsRtlIncrementCcFastReadNoWait();
FsRtlIncrementCcFastReadNotPossible();
FsRtlIncrementCcFastReadResourceMiss();
FsRtlIncrementCcFastReadWait();
FsRtlInitExtraCreateParameterLookasideList();
FsRtlInitSystem();
FsRtlInitializeBaseMcb();
FsRtlInitializeBaseMcbEx();
FsRtlInitializeEofLock();
FsRtlInitializeExtraCreateParameter();
FsRtlInitializeExtraCreateParameterList();
FsRtlInitializeFileLock();
FsRtlInitializeFileLocks();
FsRtlInitializeLargeMcb();
FsRtlInitializeMcb();
FsRtlInitializeOplock();
FsRtlInitializeSmssEvent();
FsRtlInitializeTieringHeat();
FsRtlInitializeTunnelCache();
FsRtlInitializeTunnels();
FsRtlInitializeWorkerThread();
FsRtlInsertExtraCreateParameter();
FsRtlInsertPerFileContext();
FsRtlInsertPerFileObjectContext();
FsRtlInsertPerStreamContext();
FsRtlIsDaxVolume();
FsRtlIsDbcsInExpression();
FsRtlIsEcpAcknowledged();
FsRtlIsEcpFromUserMode();
FsRtlIsExtentDangling();
FsRtlIsFatDbcsLegal();
FsRtlIsHpfsDbcsLegal();
FsRtlIsMobileOS();
FsRtlIsNonEmptyDirectoryReparsePointAllowed();
FsRtlIsNotifyOnList();
FsRtlIsNtstatusExpected();
FsRtlIsPagingFile();
FsRtlIsSystemPagingFile();
FsRtlIsTotalDeviceFailure();
FsRtlIssueDeviceIoControl();
FsRtlIssueFileNotificationFsctl();
FsRtlKernelFsControlFile();
FsRtlKernelFsControlFile$fin$0();
FsRtlLogCcFlushError();
FsRtlLookupBaseMcbEntry();
FsRtlLookupLargeMcbEntry();
FsRtlLookupLargeMcbEntry$fin$0();
FsRtlLookupLastBaseMcbEntry();
FsRtlLookupLastBaseMcbEntryAndIndex();
FsRtlLookupLastLargeMcbEntry();
FsRtlLookupLastLargeMcbEntry$fin$0();
FsRtlLookupLastLargeMcbEntryAndIndex();
FsRtlLookupLastLargeMcbEntryAndIndex$fin$0();
FsRtlLookupLastMcbEntry();
FsRtlLookupMcbEntry();
FsRtlLookupPerFileContext();
FsRtlLookupPerFileObjectContext();
FsRtlLookupPerStreamContextInternal();
FsRtlMdlRead();
FsRtlMdlReadComplete();
FsRtlMdlReadCompleteDev();
FsRtlMdlReadCompleteDevEx();
FsRtlMdlReadDev();
FsRtlMdlReadDev$filt$0();
FsRtlMdlReadEx();
FsRtlMdlWriteComplete();
FsRtlMdlWriteCompleteDev();
FsRtlMupGetProviderIdFromName();
FsRtlMupGetProviderInfoFromFileObject();
FsRtlNormalizeNtstatus();
FsRtlNotifyChangeDirectory();
FsRtlNotifyCleanup();
FsRtlNotifyCleanup$fin$0();
FsRtlNotifyCleanupAll();
FsRtlNotifyCleanupAll$fin$0();
FsRtlNotifyCleanupOneEntry();
FsRtlNotifyCompleteIrp();
FsRtlNotifyCompleteIrpList();
FsRtlNotifyFilterChangeDirectory();
FsRtlNotifyFilterChangeDirectory$fin$0();
FsRtlNotifyFilterChangeDirectoryLite();
FsRtlNotifyFilterChangeDirectoryLite$fin$0();
FsRtlNotifyFilterReportChange();
FsRtlNotifyFilterReportChange$filt$0();
FsRtlNotifyFilterReportChange$fin$1();
FsRtlNotifyFilterReportChangeLite();
FsRtlNotifyFilterReportChangeLiteEx();
FsRtlNotifyFilterReportChangeLiteEx$filt$0();
FsRtlNotifyFilterReportChangeLiteEx$fin$1();
FsRtlNotifyFullChangeDirectory();
FsRtlNotifyFullReportChange();
FsRtlNotifyInitializeSync();
FsRtlNotifyReportChange();
FsRtlNotifySetCancelRoutine();
FsRtlNotifyUninitializeSync();
FsRtlNotifyUpdateBuffer();
FsRtlNotifyVolumeEvent();
FsRtlNotifyVolumeEventEx();
FsRtlNumberOfRunsInBaseMcb();
FsRtlNumberOfRunsInLargeMcb();
FsRtlNumberOfRunsInMcb();
FsRtlOplockBreakH();
FsRtlOplockBreakH$fin$0();
FsRtlOplockBreakToNone();
FsRtlOplockBreakToNoneEx();
FsRtlOplockBreakToNoneEx$fin$0();
FsRtlOplockFsctrl();
FsRtlOplockFsctrlEx();
FsRtlOplockIsFastIoPossible();
FsRtlOplockIsSharedRequest();
FsRtlOplockKeysEqual();
FsRtlPTeardownPerFileObjectContexts();
FsRtlPostPagingFileStackOverflow();
FsRtlPostStackOverflow();
FsRtlPrepareMdlWrite();
FsRtlPrepareMdlWriteDev();
FsRtlPrepareMdlWriteDev$filt$0();
FsRtlPrepareMdlWriteEx();
FsRtlPrepareToReuseEcp();
FsRtlPrivateCancelFileLockIrp();
FsRtlPrivateCheckForExclusiveLockAccess();
FsRtlPrivateCheckForSharedLockAccess();
FsRtlPrivateCheckWaitingLocks();
FsRtlPrivateFastUnlockAll();
FsRtlPrivateInitializeFileLock();
FsRtlPrivateInitializeFileLock$fin$0();
FsRtlPrivateInsertExclusiveLock();
FsRtlPrivateInsertLock();
FsRtlPrivateInsertSharedLock();
FsRtlPrivateLock();
FsRtlPrivateLock$fin$0();
FsRtlPrivateRemoveLock();
FsRtlPrivateResetLowestLockOffset();
FsRtlProcessFileLock();
FsRtlPruneTunnelCache();
FsRtlQueryCachedVdl();
FsRtlQueryInformationFile();
FsRtlQueryInformationFile$fin$0();
FsRtlQueryKernelEaFile();
FsRtlQueryKernelEaFile$fin$0();
FsRtlQueryMaximumVirtualDiskNestingLevel();
FsRtlQueryOpen();
FsRtlRegisterFileSystemFilterCallbacks();
FsRtlRegisterFltMgrCalls();
FsRtlRegisterMupCalls();
FsRtlRegisterUncProvider();
FsRtlRegisterUncProviderEx();
FsRtlRegisterUncProviderEx2();
FsRtlReleaseEofLock();
FsRtlReleaseFile();
FsRtlReleaseFileForCcFlush();
FsRtlReleaseFileForModWrite();
FsRtlReleaseFileNameInformation();
FsRtlReleaseHeaderMutex();
FsRtlRemoveBaseMcbEntry();
FsRtlRemoveDotsFromPath();
FsRtlRemoveExtraCreateParameter();
FsRtlRemoveLargeEntry();
FsRtlRemoveLargeMcbEntry();
FsRtlRemoveLargeMcbEntry$fin$0();
FsRtlRemoveMcbEntry();
FsRtlRemoveNodeFromTunnel();
FsRtlRemovePerFileContext();
FsRtlRemovePerFileObjectContext();
FsRtlRemovePerStreamContext();
FsRtlResetBaseMcb();
FsRtlResetLargeMcb();
FsRtlSendModernAppTermination();
FsRtlSetDriverBacking();
FsRtlSetEcpListIntoIrp();
FsRtlSetFileSize();
FsRtlSetKernelEaFile();
FsRtlSetKernelEaFile$fin$0();
FsRtlSplitBaseMcb();
FsRtlSplitLargeMcb();
FsRtlSplitLargeMcb$fin$0();
FsRtlSplitLocks();
FsRtlStackOverflowRead();
FsRtlSyncVolumes();
FsRtlTeardownPerFileContexts();
FsRtlTeardownPerFileContexts$fin$0();
FsRtlTeardownPerStreamContexts();
FsRtlTeardownPerStreamContexts$fin$0();
FsRtlTruncateBaseMcb();
FsRtlTruncateLargeMcb();
FsRtlTruncateMcb();
FsRtlTruncateSmallMcb();
FsRtlTruncateSmallMcb$filt$0();
FsRtlTruncateSmallMcb$fin$1();
FsRtlTruncateSmallMcb$fin$2();
FsRtlTryToAcquireHeaderMutex();
FsRtlUninitializeBaseMcb();
FsRtlUninitializeFileLock();
FsRtlUninitializeLargeMcb();
FsRtlUninitializeMcb();
FsRtlUninitializeOplock();
FsRtlUninitializeOplock$fin$0();
FsRtlUninitializeSmallMcb();
FsRtlUpdateDiskCounters();
FsRtlUpperOplockFsctrl();
FsRtlValidateReparsePointBuffer();
FsRtlVolumeDeviceToCorrelationId();
FsRtlWaitForSmssEvent();
FsRtlWorkerThread();
FsRtlpAcknowledgeOplockBreak();
FsRtlpAcknowledgeOplockBreak$fin$0();
FsRtlpAcknowledgeOplockBreakByCacheFlags();
FsRtlpAcknowledgeOplockBreakByCacheFlags$fin$0();
FsRtlpAllocateOplock();
FsRtlpAllocateOplock$fin$0();
FsRtlpAttachOplockKey();
FsRtlpCallerIsAtomicRequestor();
FsRtlpCancelExclusiveIrp();
FsRtlpCancelExclusiveIrp$fin$0();
FsRtlpCancelOplockRHIrp();
FsRtlpCancelOplockRHIrp$fin$0();
FsRtlpCancelReadOnlyOplockIrp();
FsRtlpCancelReadOnlyOplockIrp$fin$0();
FsRtlpCancelWaitingIrp();
FsRtlpCancelWaitingIrp$fin$0();
FsRtlpClearOwner();
FsRtlpComputeShareableOplockState();
FsRtlpDoBoost();
FsRtlpExclusiveIrpCancelRoutine();
FsRtlpFreeMdlChain();
FsRtlpGenericCompletion();
FsRtlpGetMaxVirtualDiskNestingLevel();
FsRtlpGrantAnyOplockFromExclusive();
FsRtlpHeatRegisterVolume();
FsRtlpHeatUnregisterVolume();
FsRtlpModifyThreadPriorities();
FsRtlpNotifyOplockBreakComplete();
FsRtlpOpBatchBreakClosePending();
FsRtlpOpBatchBreakClosePending$fin$0();
FsRtlpOpenDev();
FsRtlpOplockBreakByCacheFlags();
FsRtlpOplockBreakByCacheFlags$fin$0();
FsRtlpOplockBreakNotify();
FsRtlpOplockBreakNotify$fin$0();
FsRtlpOplockBreakToII();
FsRtlpOplockBreakToII$fin$0();
FsRtlpOplockBreakToNone();
FsRtlpOplockBreakToNone$fin$0();
FsRtlpOplockCleanup();
FsRtlpOplockCleanup$fin$0();
FsRtlpOplockDequeueRH();
FsRtlpOplockEnqueueRH();
FsRtlpOplockFsctrlInternal();
FsRtlpOplockFsctrlInternal$fin$0();
FsRtlpOplockFsctrlInternal$fin$1();
FsRtlpOplockFsctrlInternal$fin$2();
FsRtlpOplockKeysEqual();
FsRtlpOplockRHIrpCancelRoutine();
FsRtlpOplockSendModernAppTermination();
FsRtlpOplockStoreKeyForDeleteOperation();
FsRtlpOplockStoreKeyForDeleteOperation$fin$0();
FsRtlpOplockUpperLowerCompatible();
FsRtlpOplockWaitCompleteRoutine();
FsRtlpPostStackOverflow();
FsRtlpQueryValueKey();
FsRtlpReadOnlyOplockIrpCancelRoutine();
FsRtlpRegisterProviderWithMUP();
FsRtlpRegisterUncProvider();
FsRtlpReleaseIrpsWaitingForRH();
FsRtlpRemoveAndBreakRHIrp();
FsRtlpRemoveAndCompleteReadOnlyIrp();
FsRtlpRemoveAndCompleteWaitingIrp();
FsRtlpRequestExclusiveOplock();
FsRtlpRequestExclusiveOplock$fin$0();
FsRtlpRequestShareableOplock();
FsRtlpRequestShareableOplock$fin$0();
FsRtlpRestoreCallerEcpsToCallerList();
FsRtlpValidateExtraCreateParameters();
FsRtlpWaitForIoAtEof();
FsRtlpWaitOnIrp();
FsRtlpWaitOnIrp$fin$0();
FsRtlpWaitingIrpCancelRoutine();
GetAttributeName();
GetBinaryOperandLen();
GetBootSystemTime();
GetConditionToken();
GetDigitFromChar();
GetDigitFromChar2();
GetFlags();
GetNextNoneWhiteSpace();
GetNextWchar();
GetOperandValue();
GetOperatorIndexByName();
GetOperatorIndexByToken();
GetPrintableAttributeName();
GetPrintableOperandValue();
GetPropertyFromPropArray();
GetStringOperandValue();
GetUTF32();
GetValueType();
GxpAdjustRectangleToFrameBuffer();
GxpBitsToBytes();
GxpGetRotatedPixelOffset();
GxpReadFrameBufferPixels();
GxpWriteFrameBufferPixels();
HalExamineMBR();
HalPerformEndOfInterrupt();
HdlspAddLogEntry();
HdlspBugCheckProcessing();
HdlspDispatch();
HdlspEnableTerminal();
HdlspGetLine();
HdlspKernelAddLogEntry();
HdlspProcessDumpCommand();
HdlspPutData();
HdlspPutMore();
HdlspPutString();
HdlspPutWideString();
HdlspSendBlueScreenInfo();
HdlspSendStringAtBaud();
HdlspSetBlueScreenInformation();
HdlspUTF8Encode();
HeadlessDispatch();
HeadlessInit();
HeadlessKernelAddLogEntry();
HeadlessTerminalAddResources();
HvAddToLayoutStats();
HvAllocateCell();
HvAnalyzeLogFiles();
HvApplyLogFile();
HvBufferCheckSum();
HvCheckAndUpdateHiveBackupTimeStamp();
HvCheckBin();
HvCheckHive();
HvDuplicateCell();
HvExtendHivePrimaryFileValidDataLength();
HvFoldBackDirtyData();
HvFoldBackUnreconciledData();
HvFreeCell();
HvFreeDirtyData();
HvFreeHivePartial();
HvFreeUnreconciledData();
HvGetEffectiveLogSizeCapForHive();
HvGetHiveLogFileStatus();
HvHiveCleanup();
HvHiveConvertLockedPagesToCowByPolicy();
HvHiveInitialize();
HvHiveStartEmptyClone();
HvHiveStartFileBacked();
HvHiveStartMemoryBacked();
HvInitializeHashLibrary();
HvIsCellAllocated();
HvIsCurrentLogSwappable();
HvIsInPlaceBaseBlockValid();
HvIsRangeDirty();
HvLoadHive();
HvLockHiveFlusherExclusive();
HvLockHiveFlusherShared();
HvMarkBaseBlockDirty();
HvMarkCellDirty();
HvMoveLayoutStats();
HvReallocateCell();
HvResetDirtyData();
HvResetLogFileStatusAll();
HvSnapshotHiveToOffsetArray();
HvStoreModifiedData();
HvSwapHiveStorage();
HvSwapLogFiles();
HvTrimHive();
HvTruncateAllLogFilesIfRequired();
HvTruncateCurrentLogFileIfRequired();
HvUnCOWReconciledPages();
HvUnlockHiveFilePages();
HvUnlockHiveFlusherExclusive();
HvUnlockHiveFlusherShared();
HvValidateOrInvalidatePrimaryFileHeader();
HvViewMapContainsLockedPages();
HvWriteExternal();
HvWriteHivePrimaryFile();
HvWriteLogFile();
HvcallFastExtended();
HvcallInitInputControl();
HvcallInitiateHypercall();
HvcallpExtendedFastHypercall();
HvcallpExtendedFastHypercallWithOutput();
HvcallpNoHypervisorPresent();
HviCopyMemory();
HviGetDebugDeviceOptions();
HviGetEnlightenmentInformation();
HviGetHardwareFeatures();
HviGetHypervisorFeatures();
HviGetHypervisorInterface();
HviGetHypervisorVendorAndMaxFunction();
HviGetHypervisorVersion();
HviGetImplementationLimits();
HviIsAnyHypervisorPresent();
HviIsHypervisorMicrosoftCompatible();
HviIsHypervisorVendorMicrosoft();
HviIsIommuInUse();
HvipApertureAmdVmcall();
HvipApertureDetectParameters();
HvipApertureDirectHypercall();
HvipApertureIntelVmcall();
HvipApertureVmfuncSwitchEptp();
HvlAddPagesCallbackRoutine();
HvlAddSecureHvPagesCallbackRoutine();
HvlAddSecurePagesCallbackRoutine();
HvlAddSecureSkPagesCallbackRoutine();
HvlBugCheckCallbackRoutine();
HvlCalculateLivedumpBufferSize();
HvlCalculateLivedumpSize();
HvlCollectLivedump();
HvlConfigureIdleStates();
HvlConfigureMemoryZeroingOnReset();
HvlConfigurePcc();
HvlConfigurePerfStateCap();
HvlConfigurePerfStates();
HvlConfigureThrottleStates();
HvlCrashdumpCallbackRoutine();
HvlDebuggerSupportInitialize();
HvlDeleteProcessor();
HvlDisableEnlightenment();
HvlDiscardPagesFromHibernation();
HvlDiscardSecurePagesFromHibernation();
HvlDmaAllocateDeviceDomain();
HvlDmaAttachDeviceDomain();
HvlDmaDeleteDeviceDomain();
HvlDmaDetachDeviceDomain();
HvlDmaGetDmaGuardEnabled();
HvlDmaMapDeviceLogicalRange();
HvlDmaMapDeviceSparsePages();
HvlDmaUnmapDeviceLogicalRange();
HvlDmaUnmapDeviceSparsePages();
HvlDummyInterruptCallback();
HvlEnableVsmCalls();
HvlEndSystemInterrupt();
HvlEnlightenProcessor();
HvlEnterSleepState();
HvlFlushAddressSpaceTb();
HvlFlushRangeListTb();
HvlGetCoverageData();
HvlGetCoverageInfo();
HvlGetEncryptedData();
HvlGetEncryptedDataDomains();
HvlGetEnlightenmentInfo();
HvlGetHypervisorEncryptionDomain();
HvlGetImplementedPhysicalBits();
HvlGetLpIndexFromApicId();
HvlGetPpmStatsForProcessor();
HvlGetProcessorIndexFromVpIndex();
HvlGetQpcBias();
HvlGetReferenceTime();
HvlGetReferenceTimeUsingTscPage();
HvlGetSharedPageVa();
HvlGetSparseGpaPagesAccessState();
HvlHalGetVpIndexFromApicId();
HvlHalStartVirtualProcessor();
HvlHalVpStartEnabled();
HvlHvDebuggerPowerHandler();
HvlInitializeProcessor();
HvlInvokeHypervisorDebugger();
HvlInvokeWheaErrorNotificationCallback();
HvlIsCoreSharingPossible();
HvlIsHypercallOverlayLocked();
HvlIsHypervisorPresent();
HvlIsPartitionCpuManager();
HvlIsRootPowerSchedulerQosPresent();
HvlIsStibpPairingRecommended();
HvlIterateSecurePagesForHibernation();
HvlLogGuestCrashInformation();
HvlLpGetMachineCheckContext();
HvlLpReadCpuid();
HvlLpReadMultipleMsr();
HvlLpWriteMultipleMsr();
HvlLpWritebackInvalidate();
HvlMapDeviceInterrupt();
HvlMapGpaPages();
HvlMapSparseGpaPages();
HvlMarkHiberPhase();
HvlNotifyAcpiReenabled();
HvlNotifyDebugDeviceAvailable();
HvlNotifyHpetEnabled();
HvlNotifyLongSpinWait();
HvlNotifyPageHeat();
HvlNotifyRootCrashdump();
HvlParkedVirtualProcessors();
HvlPerformEndOfInterrupt();
HvlPhase0Initialize();
HvlPhase1Initialize();
HvlPhase2Initialize();
HvlPrepareForHibernate();
HvlPrepareForRootCrashdump();
HvlPrepareForSecureHibernate();
HvlPrepareLivedumpDescriptor();
HvlQueryActiveHypervisorProcessorCount();
HvlQueryActiveProcessors();
HvlQueryAssociatedProcessors();
HvlQueryConnection();
HvlQueryDetailInfo();
HvlQueryEnlightenmentInfo();
HvlQueryHypervisorProcessorNodeNumber();
HvlQueryHypervisorTscAdjustment();
HvlQueryNumaDistance();
HvlQueryProcessorTopology();
HvlQueryProcessorTopologyCount();
HvlQueryProcessorTopologyEx();
HvlQueryProcessorTopologyHighestId();
HvlQueryVsmConnection();
HvlQueryVsmProtectionInfo();
HvlReadPerformanceStateCounters();
HvlRegisterDeviceId();
HvlRegisterInterruptCallback();
HvlRegisterPerfFeedbackCounters();
HvlRegisterWheaErrorNotification();
HvlRescindEnlightenments();
HvlResetCoverageVector();
HvlRestoreEnlightenment();
HvlResumePartition();
HvlRetargetDeviceInterrupt();
HvlSendSyntheticClusterIpi();
HvlSetHardwareMbecAvailable();
HvlSetHpetConfig();
HvlSetPartitionProperty();
HvlSetPlatformIdleState();
HvlSetQpcBias();
HvlSetSystemMachineCheckProperty();
HvlSetSystemSleepProperty();
HvlSetupLiveDumpBuffer();
HvlSetupPhysicalFaultNotificationQueue();
HvlSharedIsr();
HvlSkBugCheckCallbackRoutine();
HvlSkCrashdumpCallbackRoutine();
HvlStartBootLogicalProcessors();
HvlSuspendPartition();
HvlSvmAcknowledgePageRequest();
HvlSvmAttachPasidSpace();
HvlSvmClearPrqStalled();
HvlSvmCreatePasidSpace();
HvlSvmCreatePrQueue();
HvlSvmDeletePrQueue();
HvlSvmDetachPasidSpace();
HvlSvmDisablePasid();
HvlSvmEnablePasid();
HvlSvmFlushPasid();
HvlSvmGetDeviceCapabilities();
HvlSvmGetSystemCapabilities();
HvlSvmSetDeviceEnabled();
HvlSvmSetPasidAddressSpace();
HvlSwitchToVsmVtl1();
HvlSwitchVirtualAddressSpace();
HvlUnmapDeviceInterrupt();
HvlUnregisterDeviceId();
HvlUnregisterInterruptCallback();
HvlUnregisterWheaErrorNotification();
HvlUpdateMicrocodeDatabase();
HvlWheaInUsePageOfflineNotificationCallback();
HvlWriteApicCommandRegister();
HvlpAcquireHypercallPage();
HvlpAddPhysicalMemory();
HvlpAffinityToHvProcessorSet();
HvlpAffinityToVirtualAffinity();
HvlpAllocateOverlayPages();
HvlpAllocatePageListResources();
HvlpAttachRootSvmDevice();
HvlpCheckTscSync();
HvlpComputeLpComparisonMetrics();
HvlpCondenseMicrocode();
HvlpConfigureLegacyPowerPolicySetting();
HvlpCopyFlushVaList();
HvlpCountFlushVaList();
HvlpCreateRootVirtualProcessor();
HvlpDepositPages();
HvlpDetachRootSvmDevice();
HvlpDetectHypervisorSchedulerType();
HvlpDetermineEnlightenments();
HvlpDiscoverTopologyAmd();
HvlpDiscoverTopologyComplete();
HvlpDiscoverTopologyIntel();
HvlpDiscoverTopologyLocal();
HvlpDiscoverTopologyWorker();
HvlpDynamicUpdateMicrocode();
HvlpEnableNextLogicalProcessor();
HvlpEnableRootVirtualProcessor();
HvlpEndSecurePageListIteration();
HvlpEtwRegister();
HvlpFastAcknowledgePageRequest();
HvlpFastFlushAddressSpaceTb();
HvlpFastFlushAddressSpaceTbEx();
HvlpFastFlushListTb();
HvlpFastFlushListTbEx();
HvlpFastFlushPasidAddressList();
HvlpFastSendSyntheticClusterIpiEx();
HvlpFlushPasidAddressSpace();
HvlpFlushRangeListTb();
HvlpFlushRangeListTbEx();
HvlpFreeOverlayPages();
HvlpGetEncryptedDataFromHypervisor();
HvlpGetEncryptedDataFromSecureKernel();
HvlpGetLogicalProcessorProperty();
HvlpGetLpIndexFromProcessorIndex();
HvlpGetLpcbByApicId();
HvlpGetLpcbByLpIndex();
HvlpGetNode();
HvlpGetPageList();
HvlpGetRegister128();
HvlpGetRegister64();
HvlpGetSecurePageList();
HvlpGetVpIndexFromApicId();
HvlpGetVtlCallVa();
HvlpHvIdentityInfoCallback();
HvlpHvToNtStatus();
HvlpInitializeBootProcessor();
HvlpInitializeHvCrashdump();
HvlpInitializePartitionInfoPage();
HvlpInitializePowerStatistics();
HvlpInitializeSvmIommuSupport();
HvlpInvokeGetPageListHypercall();
HvlpIommuPrqDpcRoutine();
HvlpLegacyPowerPolicySettingCallback();
HvlpLogGuestStateScrubbingStatus();
HvlpLogHypervisorLaunchError();
HvlpLogHypervisorSchedulerType();
HvlpLogIommuEvent();
HvlpLogIommuInitStatus();
HvlpLogMicrocodeUpdateStatus();
HvlpLogProcessorStartupFailure();
HvlpLpComparison();
HvlpLpCpuid();
HvlpMapStatisticsPage();
HvlpMarkHvlPagesForHibernation();
HvlpMarkHypervisorPagesForHibernation();
HvlpPhase0Enlightenments();
HvlpPowerPolicySettingCallback();
HvlpPowerStateCallback();
HvlpPreallocatePageListResources();
HvlpPrepareFlushHeader();
HvlpProcessIommu();
HvlpProcessIommuPrq();
HvlpQueryApicIdAndNumaNode();
HvlpQueryExtendedCapabilities();
HvlpRegisterPowerPolicyCallbacks();
HvlpReleaseHypercallPage();
HvlpSelectLpSet();
HvlpSelectVpSet();
HvlpSetLogicalProcessorProperty();
HvlpSetPowerProperty();
HvlpSetRegister64();
HvlpSetupBootProcessorEarlyHypercallPages();
HvlpSetupCachedHypercallPages();
HvlpSetupPageListIteration();
HvlpSetupSchedulerAssist();
HvlpSlowAcknowledgePageRequest();
HvlpSlowFlushAddressSpaceTb();
HvlpSlowFlushAddressSpaceTbEx();
HvlpSlowFlushListTb();
HvlpSlowFlushListTbEx();
HvlpSlowFlushPasidAddressList();
HvlpSlowSendSyntheticClusterIpiEx();
HvlpStartLogicalProcessor();
HvlpStartPageListIteration();
HvlpStartSecurePageListIteration();
HvlpStartVirtualProcessor();
HvlpSwitchToVsmVtl1RetpolineHelper();
HvlpTryConfigureInterface();
HvlpTryToLockCpuManagementVersion();
HvlpUseExtendedProcessorSetHypercalls();
HvlpWriteEventLog();
HvpAddBin();
HvpAddDummyBinToHive();
HvpAddFreeCellHint();
HvpAdjustBitmap();
HvpAdjustHiveFreeDisplay();
HvpAllExceptionsFatalFilter();
HvpAllocateBin();
HvpAllocateMap();
HvpApplyIncrementalLogFile();
HvpApplyLegacyLogFile();
HvpApplyLogEntryDataToFileBackedHive();
HvpBuildMapForMemoryBackedHive();
HvpCopyModifiedData();
HvpCountSetRangesInVector();
HvpDelistFreeCell();
HvpDetermineIncrementalLogFileMaximums();
HvpDetermineLatestLogFile();
HvpDoAllocateCell();
HvpDropPagedBins();
HvpEnlistFreeCell();
HvpEnlistFreeCells();
HvpExpandMap();
HvpFillFileName();
HvpFindFreeCell();
HvpFindFreeCellInBin();
HvpFindNextDirtyBlock();
HvpFindNextDirtyRun();
HvpFinishPrimaryWrite();
HvpFreeBin();
HvpFreeHiveFreeDisplay();
HvpFreeMap();
HvpGenerateLogEntry();
HvpGenerateLogMetadata();
HvpGetCellContextInitialize();
HvpGetCellFlat();
HvpGetCellMap();
HvpGetCellPaged();
HvpGetHiveHeader();
HvpGrowDirtyVectors();
HvpHeaderCheckSum();
HvpInitMap();
HvpInpageErrorFilter();
HvpIsFreeNeighbor();
HvpIsLogEntryHeaderCoherent();
HvpIsMetadataArrayCoherent();
HvpIsReadErrorTransient();
HvpLogEntryCheckHeaderChecksum();
HvpLogIneligibleLogHeader();
HvpLogInvalidLogHeader();
HvpLogTypeToLogArrayIndex();
HvpLogUnreadableLog();
HvpMapEntryGetFreeBin();
HvpMapHiveImage();
HvpMapHiveImageFromFile();
HvpMapHiveImageFromViewMap();
HvpMappedViewConvertLockedPagesToCOWByPolicy();
HvpMappedViewConvertRegionFromLockedToCOWByPolicy();
HvpMarkCellDirty();
HvpMarkDirty();
HvpPerformLogFileRecovery();
HvpPointMapEntriesToBuffer();
HvpProtectBin();
HvpReadHiveDataFromFile();
HvpReadLogEntryHeader();
HvpRecoverDataReadRoutine();
HvpReleaseCellFlat();
HvpReleaseCellPaged();
HvpRemapAndEnlistHiveBins();
HvpRemoveFreeCellHint();
HvpResetPageProtection();
HvpSetRangeProtection();
HvpShrinkMap();
HvpSwapDual();
HvpTruncateBins();
HvpUpdateRecoveryVector();
HvpValidateLoadedBin();
HvpViewMapAdjustFlag();
HvpViewMapCOWAndUnsealRange();
HvpViewMapCleanup();
HvpViewMapConvertLockedPagesToCOWByPolicy();
HvpViewMapCreateView();
HvpViewMapCreateViewsForRegion();
HvpViewMapDeleteViewTreeNode();
HvpViewMapExtendStorage();
HvpViewMapFindViewForFileOffset();
HvpViewMapMakeViewRangeCOWByCaller();
HvpViewMapMakeViewRangeInvalid();
HvpViewMapMakeViewRangeUnCOWByCaller();
HvpViewMapMakeViewRangeUnCOWByPolicy();
HvpViewMapMakeViewRangeValid();
HvpViewMapMigrateCOWData();
HvpViewMapMigrateCOWData$filt$0();
HvpViewMapPromoteRangeToMapping();
HvpViewMapSealRange();
HvpViewMapShrinkStorage();
HvpViewMapStart();
HvpViewMapTouchPages();
HvpViewMapTouchPages$filt$0();
HvpViewMapUnCOWAndSealRange();
INCREASE_MAPPED_TRANSFER_BYTE_COUNT();
INCREMENT_ADAPTER_CHANNELS();
IS_PTE_NOT_DEMAND_ZERO();
IdnaMemAlloc();
InbvAcquireDisplayOwnership();
InbvAcquireLock();
InbvCheckDisplayOwnership();
InbvDetermineFunction();
InbvDisplayString();
InbvDriverInitialize();
InbvEnableBootDriver();
InbvEnableDisplayString();
InbvGetDisplayState();
InbvGetResourceAddress();
InbvIndicateProgress();
InbvInstallDisplayStringFilter();
InbvIsBootDriverInstalled();
InbvNotifyDisplayOwnershipChange();
InbvNotifyDisplayOwnershipLost();
InbvPortGetByte();
InbvPortInitialize();
InbvPortPollOnly();
InbvPortPutByte();
InbvPortTerminate();
InbvReleaseLock();
InbvReleaseResources();
InbvResetDisplay();
InbvRotateGuiBootDisplay();
InbvSetFunction();
InbvSetProgressBarSubset();
InbvSetScrollRegion();
InbvSetTextColor();
InbvSetVirtualFrameBuffer();
InbvSolidColorFill();
InitBootProcessor();
InitOnceGetStringTableOffset();
InitOnceScanIndexes();
InitSafeBoot();
InitSkuSessionParameters();
InitializeBuildStrings();
InitializeDynamicPartitioningPolicy();
InitializeListHeadPte();
InitializePagedPool();
InitializePool();
InitializeSListHead();
InitializeSidLookupTable();
InsertChar();
InsertEventEntryInLookUpTable();
InsertTailListPte();
InterlockedPushListSList();
IoAcquireCancelSpinLock();
IoAcquireRemoveLockEx();
IoAcquireVpbSpinLock();
IoAddTriageDumpDataBlock();
IoAdjustStackSizeForRedirection();
IoAllocateAdapterChannel();
IoAllocateController();
IoAllocateDriverObjectExtension();
IoAllocateErrorLogEntry();
IoAllocateGenericErrorLogEntry();
IoAllocateIrp();
IoAllocateIrpEx();
IoAllocateMdl();
IoAllocateMiniCompletionPacket();
IoAllocateSfioStreamIdentifier();
IoAllocateWorkItem();
IoAllowExecution();
IoApplyPriorityInfoThread();
IoAssignResources();
IoAsynchronousPageWrite();
IoAttachDevice();
IoAttachDeviceByPointer();
IoAttachDeviceToDeviceStack();
IoAttachDeviceToDeviceStackSafe();
IoBoostThreadIo();
IoBoostThreadIoPriority();
IoBuildAsynchronousFsdRequest();
IoBuildDeviceIoControlRequest();
IoBuildPartialMdl();
IoBuildPoDeviceNotifyList();
IoBuildSynchronousFsdRequest();
IoCallDriver();
IoCallDriverWithTracing();
IoCancelFileOpen();
IoCancelIrp();
IoCancelThreadIo();
IoCaptureLiveDump();
IoChangeFileObjectFilterContext();
IoCheckDesiredAccess();
IoCheckEaBufferValidity();
IoCheckFunctionAccess();
IoCheckLinkShareAccess();
IoCheckQuerySetFileInformation();
IoCheckQuerySetVolumeInformation();
IoCheckQuotaBufferValidity();
IoCheckShareAccess();
IoCheckShareAccessEx();
IoCleanupIrp();
IoClearActivityIdThread();
IoClearAdapterCryptoEngineExtension();
IoClearFsTrackOffsetState();
IoClearIrpExtraCreateParameter();
IoCompleteRequest();
IoConfigureCrashDump();
IoConnectInterrupt();
IoConnectInterruptEx();
IoControlPnpDeviceActionQueue();
IoConvertFileHandleToKernelHandle();
IoCopyDeviceObjectHint();
IoCreateArcName();
IoCreateController();
IoCreateDevice();
IoCreateDisk();
IoCreateDriver();
IoCreateFile();
IoCreateFileEx();
IoCreateFileSpecifyDeviceObjectHint();
IoCreateNotificationEvent();
IoCreateObjectTypes();
IoCreateStreamFileObject();
IoCreateStreamFileObjectEx();
IoCreateStreamFileObjectEx2();
IoCreateStreamFileObjectLite();
IoCreateSymbolicLink();
IoCreateSynchronizationEvent();
IoCreateSystemThread();
IoCreateUnprotectedSymbolicLink();
IoCsqInitialize();
IoCsqInitializeEx();
IoCsqInsertIrp();
IoCsqInsertIrpEx();
IoCsqRemoveIrp();
IoCsqRemoveNextIrp();
IoDecrementKeepAliveCount();
IoDeleteController();
IoDeleteDevice();
IoDeleteDriver();
IoDeleteSymbolicLink();
IoDetachDevice();
IoDiagTraceDirectedDripsCandidateDevices();
IoDisconnectInterrupt();
IoDisconnectInterruptEx();
IoDiskIoAttributionAllocate();
IoDiskIoAttributionDereference();
IoDiskIoAttributionQuery();
IoDiskIoAttributionReference();
IoDumpStackResumeCapable();
IoDuplicateDependency();
IoEnableIrpCredits();
IoEnqueueIrp();
IoEnumerateDeviceObjectList();
IoEnumerateEnvironmentVariablesEx();
IoEnumerateRegisteredFiltersList();
IoFastQueryNetworkAttributes();
IoFillDumpHeader();
IoFillTriageDumpBuffer();
IoFindDeviceThatFailedIrp();
IoForwardIrpSynchronously();
IoFreeController();
IoFreeDumpRange();
IoFreeErrorLogEntry();
IoFreeIrp();
IoFreeMdl();
IoFreeMiniCompletionPacket();
IoFreePoDeviceNotifyList();
IoFreeSfioStreamIdentifier();
IoFreeWorkItem();
IoGetActivityIdIrp();
IoGetActivityIdThread();
IoGetAdapterCryptoEngineExtension();
IoGetAffinityInterrupt();
IoGetAttachedDevice();
IoGetAttachedDeviceReference();
IoGetAttachedDeviceReferenceWithTag();
IoGetBaseFileSystemDeviceObject();
IoGetBootDiskInformation();
IoGetBootDiskInformationLite();
IoGetConfigurationInformation();
IoGetContainerInformation();
IoGetDeviceAttachmentBaseRef();
IoGetDeviceAttachmentBaseRefWithTag();
IoGetDeviceDirectory();
IoGetDeviceInstanceName();
IoGetDeviceInterfaceAlias();
IoGetDeviceInterfacePropertyData();
IoGetDeviceInterfaces();
IoGetDeviceNumaNode();
IoGetDeviceObjectPointer();
IoGetDeviceProperty();
IoGetDevicePropertyData();
IoGetDeviceToVerify();
IoGetDiskDeviceObject();
IoGetDmaAdapter();
IoGetDriverDirectory();
IoGetDriverObjectExtension();
IoGetDumpHiberRanges();
IoGetDumpStack();
IoGetDumpStackTransferSizes();
IoGetEnvironmentVariableEx();
IoGetFileMemoryPartitionInformation();
IoGetFileObjectFilterContext();
IoGetFileObjectGenericMapping();
IoGetFsTrackOffsetState();
IoGetFsZeroingOffset();
IoGetGenericIrpExtension();
IoGetInitialStack();
IoGetInitiatorProcess();
IoGetIoAttributionHandle();
IoGetIoPriorityHint();
IoGetIoRateControl();
IoGetIommuInterface();
IoGetIrpExtraCreateParameter();
IoGetLegacyVetoList();
IoGetLoadedDriverInfo();
IoGetLowerDeviceObject();
IoGetLowerDeviceObjectWithTag();
IoGetOplockFullFoExt();
IoGetOplockKeyContext();
IoGetOplockKeyContextEx();
IoGetPagingIoPriority();
IoGetRelatedDeviceObject();
IoGetRelatedTargetDevice();
IoGetRequestorProcess();
IoGetRequestorProcessId();
IoGetRequestorSessionId();
IoGetSfioStreamIdentifier();
IoGetSilo();
IoGetSiloParameters();
IoGetStackLimits();
IoGetSymlinkSupportInformation();
IoGetTopLevelIrp();
IoGetTransactionParameterBlock();
IoIncrementKeepAliveCount();
IoInitSystem();
IoInitSystemPreDrivers();
IoInitializeBugCheckProgress();
IoInitializeCrashDump();
IoInitializeDumpStack();
IoInitializeIrp();
IoInitializeIrpEx();
IoInitializeMiniCompletionPacket();
IoInitializeProcessor();
IoInitializeRemoveLockEx();
IoInitializeTimer();
IoInitializeWorkItem();
IoInvalidateDeviceRelations();
IoInvalidateDeviceState();
IoIrpHasFsTrackOffsetExtensionType();
IoIs32bitProcess();
IoIsActivityTracingEnabled();
IoIsDeviceEjectable();
IoIsFileObjectIgnoringSharing();
IoIsFileOriginRemote();
IoIsInitiator32bitProcess();
IoIsIoPriorityBoostActive();
IoIsOperationSynchronous();
IoIsProcessAntiMalware();
IoIsSystemThread();
IoIsValidIrpStatus();
IoIsValidNameGraftingBuffer();
IoIsWdmVersionAvailable();
IoLoadCrashDumpDriver();
IoLockUnlockPnpDeviceTree();
IoMakeAssociatedIrp();
IoMakeAssociatedIrpEx();
IoMakeAssociatedIrpPriv();
IoNotifyDump();
IoNotifyPowerOperationVetoed();
IoNotifyQuotaState();
IoOpenDeviceInterfaceRegistryKey();
IoOpenDeviceRegistryKey();
IoOpenDriverRegistryKey();
IoPageRead();
IoPageReadEx();
IoPerfInit();
IoPerfReset();
IoProcessPassiveInterrupts();
IoPropagateActivityIdToThread();
IoPropagateIrpExtension();
IoPropagateIrpExtensionEx();
IoQueryDeviceDescription();
IoQueryDeviceNodeDirectedDripsFlags();
IoQueryEnvironmentVariableInfoEx();
IoQueryFileDosDeviceName();
IoQueryFileInformation();
IoQueryFullDriverPath();
IoQueryInformationByName();
IoQueryInterface();
IoQueryLowPriorityIoInformation();
IoQuerySystemDeviceName();
IoQueryVhdBootInformation();
IoQueryVolumeInformation();
IoQueueThreadIrp();
IoQueueWorkItem();
IoQueueWorkItemEx();
IoQueueWorkItemToNode();
IoRaiseHardError();
IoRaiseInformationalHardError();
IoReadDiskSignature();
IoReadPartitionTable();
IoReadPartitionTableEx();
IoRecordIoAttribution();
IoReferenceIoAttributionFromThread();
IoRegisterBootDriverCallback();
IoRegisterBootDriverReinitialization();
IoRegisterContainerNotification();
IoRegisterDeviceInterface();
IoRegisterDriverReinitialization();
IoRegisterFileSystem();
IoRegisterFsRegistrationChange();
IoRegisterFsRegistrationChangeMountAware();
IoRegisterIoTracking();
IoRegisterLastChanceShutdownNotification();
IoRegisterPlugPlayNotification();
IoRegisterPriorityCallback();
IoRegisterShutdownNotification();
IoReleaseCancelSpinLock();
IoReleaseIoRateControl();
IoReleaseRemoveLockAndWaitEx();
IoReleaseRemoveLockEx();
IoReleaseVpbSpinLock();
IoRemoveIoCompletion();
IoRemoveLinkShareAccess();
IoRemoveShareAccess();
IoReplaceFileObjectName();
IoReplacePartitionUnit();
IoReportDetectedDevice();
IoReportHalResourceUsage();
IoReportInterruptActive();
IoReportInterruptInactive();
IoReportResourceForDetection();
IoReportResourceUsage();
IoReportResourceUsageInternal();
IoReportRootDevice();
IoReportTargetDeviceChange();
IoReportTargetDeviceChangeAsynchronous();
IoRequestDeviceEject();
IoRequestDeviceEjectEx();
IoRequestDeviceRemovalForReset();
IoReserveDependency();
IoResolveDependency();
IoRetrievePriorityInfo();
IoReuseIrp();
IoRevokeHandlesForProcess();
IoSaveBugCheckProgress();
IoSetActivityIdIrp();
IoSetActivityIdThread();
IoSetAdapterCryptoEngineExtension();
IoSetBugCheckProgressAndFlag();
IoSetCompletionRoutineEx();
IoSetDependency();
IoSetDeviceInterfacePropertyData();
IoSetDeviceInterfaceState();
IoSetDevicePropertyData();
IoSetDeviceToVerify();
IoSetDiskIoAttributionFromThread();
IoSetDiskIoAttributionOnProcess();
IoSetDumpRange();
IoSetEnvironmentVariableEx();
IoSetFileObjectIgnoreSharing();
IoSetFileOrigin();
IoSetFsTrackOffsetState();
IoSetFsZeroingOffset();
IoSetFsZeroingOffsetRequired();
IoSetGenericIrpExtension();
IoSetHardErrorOrVerifyDevice();
IoSetInformation();
IoSetIoAttributionIrp();
IoSetIoCompletion();
IoSetIoCompletionEx();
IoSetIoCompletionEx2();
IoSetIoPriorityHint();
IoSetIoPriorityHintIntoFileObject();
IoSetIoPriorityHintIntoThread();
IoSetIrpExtraCreateParameter();
IoSetLinkShareAccess();
IoSetMasterIrpStatus();
IoSetOplockKeyContext();
IoSetOplockPrivateFoExt();
IoSetPartitionInformation();
IoSetPartitionInformationEx();
IoSetShareAccess();
IoSetShareAccessEx();
IoSetStartIoAttributes();
IoSetSystemPartition();
IoSetThreadHardErrorMode();
IoSetTopLevelIrp();
IoShutdownSystem();
IoSizeOfIrpEx();
IoSizeofGenericIrpExtension();
IoSizeofWorkItem();
IoStartDiskIoAttributionForContext();
IoStartIoRateControl();
IoStartNextPacket();
IoStartNextPacketByKey();
IoStartPacket();
IoStartTimer();
IoSteerInterrupt();
IoStopDiskIoAttributionForContext();
IoStopIoRateControl();
IoStopTimer();
IoSynchronousCallDriver();
IoSynchronousPageWrite();
IoSynchronousPageWriteEx();
IoTestDependency();
IoThreadToProcess();
IoTransferActivityId();
IoTranslateBusAddress();
IoTryQueueWorkItem();
IoUninitializeWorkItem();
IoUnregisterBootDriverCallback();
IoUnregisterContainerNotification();
IoUnregisterFileSystem();
IoUnregisterFsRegistrationChange();
IoUnregisterIoTracking();
IoUnregisterPlugPlayNotification();
IoUnregisterPlugPlayNotificationEx();
IoUnregisterPriorityCallback();
IoUnregisterShutdownNotification();
IoUpdateBugCheckProgressEnvVariable();
IoUpdateDumpPhysicalRanges();
IoUpdateIrpIoAttributionHandle();
IoUpdateLinkShareAccess();
IoUpdateShareAccess();
IoUpdateThreadIoRateThrottle();
IoValidateDeviceIoControlAccess();
IoVerifierCheckForSettingsChange();
IoVerifierInit();
IoVerifyPartitionTable();
IoVerifyVolume();
IoVolumeDeviceNameToGuid();
IoVolumeDeviceNameToGuidPath();
IoVolumeDeviceToDosName();
IoVolumeDeviceToGuid();
IoVolumeDeviceToGuidPath();
IoWMIAllocateInstanceIds();
IoWMICompleteRequest();
IoWMIDeviceObjectToInstanceName();
IoWMIDeviceObjectToProviderId();
IoWMIExecuteMethod();
IoWMIHandleToInstanceName();
IoWMIOpenBlock();
IoWMIQueryAllData();
IoWMIQueryAllDataMultiple();
IoWMIQuerySingleInstance();
IoWMIQuerySingleInstanceMultiple();
IoWMIRegistrationControl();
IoWMISetNotificationCallback();
IoWMISetSingleInstance();
IoWMISetSingleItem();
IoWMISuggestInstanceName();
IoWMISystemControl();
IoWMIWriteEvent();
IoWithinStackLimits();
IoWriteCrashDump();
IoWriteDeferredLiveDumpData();
IoWriteErrorLogEntry();
IoWritePartitionTable();
IoWritePartitionTableEx();
IofCallDriver();
IofCallDriverSpecifyReturn();
IofCompleteRequest();
IopAbortRequest();
IopAcquireFastLock();
IopAcquireFileObjectLock();
IopAcquireGlobalPassiveInterruptListLock();
IopAcquirePassiveInterruptBlockLock();
IopAcquireReferencesFromIoAttributionHandle();
IopAcquireReleaseConnectLockInternal();
IopAcquireReleaseDispatcherLock();
IopAddBootDiskInformation();
IopAddBugcheckPnpTriageData();
IopAddBugcheckPnpWatchdogTriageData();
IopAddBugcheckPowerTriageData();
IopAddBugcheckTriageCompletionQueue();
IopAddBugcheckTriageDevice();
IopAddBugcheckTriageDeviceNode();
IopAddBugcheckTriageIrp();
IopAddBugcheckTriageThread();
IopAddBugcheckTriageUnicodeString();
IopAddBugcheckTriageWorkQueue();
IopAddPageDumpRange();
IopAddPageRangeToPageMaps();
IopAddPageToPageMap();
IopAddRelationToList();
IopAddRemoveReqDescs();
IopAddRunTimeTriageDataBlocks();
IopAddTriageDumpDataBlock();
IopAdjustFileObjectKeepAliveCount();
IopAllocRealFileObject();
IopAllocateBackpocketIrp();
IopAllocateBootResources();
IopAllocateBootResourcesInternal();
IopAllocateErrorLogEntry();
IopAllocateFileObjectExtension();
IopAllocateFoExtensionsOnCreate();
IopAllocateGenericTableEntry();
IopAllocateIrpCleanup();
IopAllocateIrpExReturn();
IopAllocateIrpExtension();
IopAllocateIrpMustSucceed();
IopAllocateIrpPrivate();
IopAllocateIrpWithExtension();
IopAllocateLegacyBootResources();
IopAllocateMiniCompletionPacket();
IopAllocatePassiveInterruptBlock();
IopAllocateRelationList();
IopAllocateReserveIrp();
IopAllocateUnicodeString();
IopAllowRemoteDASD();
IopApcHardError();
IopAppendLegacyVeto();
IopApplySystemPartitionProt();
IopAssignBootDriveLetter();
IopAttachDeviceToDeviceStackSafe();
IopBoostThreadCallback();
IopBootAllocation();
IopBootLog();
IopBootLogToFile();
IopBuildAsynchronousFsdRequest();
IopBuildDeviceIoControlRequest();
IopBuildFullDriverPath();
IopBuildGlobalSymbolicLinkString();
IopBuildSynchronousFsdRequest();
IopBusNumberInitialize();
IopBusNumberPackResource();
IopBusNumberScoreRequirement();
IopBusNumberUnpackRequirement();
IopBusNumberUnpackResource();
IopCachePreviousBootData();
IopCallArbiter();
IopCallBootDriverReinitializationRoutines();
IopCallDriverReference();
IopCallDriverReinitializationRoutines();
IopCancelAlertedRequest();
IopCancelApcRequired();
IopCancelIrpsInCurrentThreadList();
IopCancelIrpsInCurrentThreadListApcRoutine();
IopCancelIrpsInCurrentThreadListDummyApc();
IopCancelIrpsInCurrentThreadListSpecialApc();
IopCancelIrpsInFileObjectList();
IopCancelIrpsInThreadList();
IopCancelIrpsInThreadListForCurrentProcess();
IopCancelPendingEject();
IopCancelSynchronousIrpsForThread();
IopCancelWaitCompletionPacket();
IopCaptureObjectName();
IopChangeInterfaceType();
IopCheckAndUpdateStopOnSymlinkEcp();
IopCheckBackupRestorePrivilege();
IopCheckDeviceAndDriver();
IopCheckDeviceFlags();
IopCheckDiskName();
IopCheckGetQuotaBufferValidity();
IopCheckHandleForRevocation();
IopCheckHardErrorEmpty();
IopCheckIfMergeRequired();
IopCheckIfNotNativeDriver();
IopCheckInitiatorHint();
IopCheckListForCancelableIrp();
IopCheckSessionDeviceAccess();
IopCheckStackForTransactionSupport();
IopCheckTopDeviceHint();
IopCheckUnloadDriver();
IopCheckVpbMounted();
IopChildToRootTranslation();
IopCleanupExtraCreateParameters();
IopCleanupFileObjectIosbRange();
IopCleanupNotifications();
IopCleanupProcessResources();
IopCloseFile();
IopCloseFileObjectExtension();
IopCloseIoCompletion();
IopCloseWaitCompletionPacket();
IopCombineCmResourceList();
IopCombineLegacyResources();
IopCommitConfiguration();
IopCompareIosbRanges();
IopCompareReqAlternativePriority();
IopCompletePageWrite();
IopCompleteRequest();
IopCompleteRequest$filt$0();
IopCompleteRequest$filt$1();
IopCompleteUnloadOrDelete();
IopConnectInterrupt();
IopConnectInterruptFullySpecified();
IopConnectLineBasedInterrupt();
IopConnectLinkTrackingPort();
IopConnectMessageBasedInterrupt();
IopConstructInMemoryDumpHeader();
IopCopyBootLogRegistryToFile();
IopCopyOffloadCapable();
IopCopyOverNewPath();
IopCreateArcName();
IopCreateArcNames();
IopCreateArcNamesCd();
IopCreateArcNamesDisk();
IopCreateCmResourceList();
IopCreateDefaultDeviceSecurityDescriptor();
IopCreateFile();
IopCreateLegacyDeviceIds();
IopCreatePassiveInterruptRealtimeThreads();
IopCreateRegistryKeyEx();
IopCreateRootDirectories();
IopCreateSecurityCheck();
IopCreateSecurityDescriptorPerType();
IopCreateUmdfDirectory();
IopCreateUnicodeFromAnsiBuffer();
IopCreateVpb();
IopCsqCancelRoutine();
IopDeallocateApc();
IopDebugPrint();
IopDecDisableableDepends();
IopDecrementDeviceObjectHandleCount();
IopDecrementDeviceObjectRef();
IopDecrementDeviceObjectRefCount();
IopDecrementVpbRefCount();
IopDeleteDevice();
IopDeleteDriver();
IopDeleteFile();
IopDeleteFileObjectExtension();
IopDeleteIoCompletion();
IopDeleteIoCompletionInternal();
IopDequeueIrpFromFileObject();
IopDequeueIrpFromThread();
IopDereferencePassiveInterruptBlock();
IopDereferenceVpbAndFree();
IopDestroyActiveConnectBlock();
IopDestroyDeviceNode();
IopDestroyPassiveInterruptBlock();
IopDeviceEjectComplete();
IopDeviceInterfaceFilterCallback();
IopDeviceObjectFromSymbolicName();
IopDeviceRemovalForResetComplete();
IopDisableCrashDump();
IopDisableTimer();
IopDisassociateThreadIrp();
IopDiskIoAttributionTreeCompare();
IopDispatchSessionNotifications();
IopDmaInitialize();
IopDmaOverrideConflict();
IopDmaPackResource();
IopDmaScoreRequirement();
IopDmaUnpackRequirement();
IopDmaUnpackResource();
IopDoDeferredSetInterfaceState();
IopDoFullTraverseCheck();
IopDropIrp();
IopDumpCallAddPagesCallbacks();
IopDumpCallRemovePagesCallbacks();
IopDuplicateDetection();
IopEfiStatusToNTSTATUS();
IopEjectDevice();
IopEliminateBogusConflict();
IopEnableTimer();
IopEnumerateEnvironmentVariablesHal();
IopEnumerateEnvironmentVariablesSysEnv();
IopEnumerateEnvironmentVariablesTrEE();
IopEnumerateRelations();
IopErrorLogDpc();
IopErrorLogGetEntry();
IopErrorLogQueueRequest();
IopErrorLogRequeueEntry();
IopErrorLogThread();
IopEtwEnableCallback();
IopExceptionCleanup();
IopExceptionFilter();
IopExecuteHardwareProfileChange();
IopExecuteHwpDefaultSelect();
IopFastQueryNetworkAttributes();
IopFetchConfigurationInformation();
IopFileObjectRevoked();
IopFileUtilClearAttributes();
IopFileUtilRename();
IopFileUtilWalkDirectoryTreeBottomUp();
IopFileUtilWalkDirectoryTreeHelper();
IopFileUtilWalkDirectoryTreeTopDown();
IopFillTriageDumpDataBlocks();
IopFilterResourceRequirementsCall();
IopFindDiskIoAttribution();
IopFindLegacyBusDeviceNode();
IopFindMatchingComponentsLengthR();
IopFindPassiveInterruptBlock();
IopFindPassiveInterruptBlockLocked();
IopFindResourceHandlerInfo();
IopFindSystemDevice();
IopFreeBackpocketIrp();
IopFreeBandwidthContract();
IopFreeCompletionListPackets();
IopFreeGenericTableEntry();
IopFreeIrp();
IopFreeIrpExtension();
IopFreeMiniCompletionPacket();
IopFreePoDeviceNotifyListHead();
IopFreeRelationList();
IopFreeReqAlternative();
IopFreeReqList();
IopFreeReserveIrp();
IopFreeResetRemovalContext();
IopFreeWaitCompletionPacket();
IopGenericPackResource();
IopGenericScoreRequirement();
IopGenericTranslateOrdering();
IopGenericUnpackRequirement();
IopGenericUnpackResource();
IopGetBasicInformationFile();
IopGetBootDiskInformation();
IopGetBootDiskInformationLite();
IopGetDeviceAttachmentBase();
IopGetDeviceInterfaces();
IopGetDevicePDO();
IopGetDriverNameFromKeyNode();
IopGetDriverPathInformation();
IopGetEnvironmentVariableHal();
IopGetEnvironmentVariableSysEnv();
IopGetEnvironmentVariableTrEE();
IopGetFileInformation();
IopGetFileObjectExtension();
IopGetFileVolumeNameInformation();
IopGetFsRegistrationInProgress();
IopGetInterruptConnectionData();
IopGetLegacyVetoListDeviceNode();
IopGetLegacyVetoListDrivers();
IopGetMaxValidMemorySize();
IopGetMaxValidSectionSize();
IopGetMaxValidSectionSizeDown();
IopGetModeInformation();
IopGetMountFlag();
IopGetNetworkOpenInformation();
IopGetNumaNodeInformation();
IopGetPhysicalMemoryBlock();
IopGetRegistryKeyInformation();
IopGetRegistryValue();
IopGetRegistryValues();
IopGetRelatedFileName();
IopGetRootDevices();
IopGetSessionIdFromPDO();
IopGetSessionIdFromSymbolicName();
IopGetSetObjectId();
IopGetSetSecurityObject();
IopGetSetSpecificExtension();
IopGetSetStreamIdentifier();
IopGetThreadActiveConsoleId();
IopGetVolumeId();
IopGraftName();
IopHardErrorThread();
IopIncDisableableDepends();
IopIncrementDeviceObjectRefCount();
IopIncrementVpbRefCount();
IopInitActivityIdIrp();
IopInitCrashDumpDuringSysInit();
IopInitCrashDumpRegCallback();
IopInitDumpCapsuleSupport();
IopInitializeActiveConnectBlock();
IopInitializeBootDrivers();
IopInitializeBootLogging();
IopInitializeBuiltinDriver();
IopInitializeCrashDump();
IopInitializeDeviceInstanceKey();
IopInitializeInMemoryDumpData();
IopInitializeIoRate();
IopInitializeOfflineCrashDump();
IopInitializePassiveInterruptServices();
IopInitializePlugPlayServices();
IopInitializeReserveIrps();
IopInitializeResourceMap();
IopInitializeSessionNotifications();
IopInitializeSystemDrivers();
IopInitializeSystemVariableService();
IopInsertLegacyBusDeviceNode();
IopInsertPassiveInterruptBlock();
IopInsertRemoveDevice();
IopInterlockedAdd();
IopInterlockedDecrementUlong();
IopInterlockedInsertHeadList();
IopInterlockedInsertTailList();
IopInterlockedRemoveHeadList();
IopInvalidDeviceRequest();
IopInvalidateVolumesForDevice();
IopIoRateStartRateControl();
IopIrpExtensionControl();
IopIrpHasExtensionType();
IopIrpHasValidCombinationOfExtensionTypes();
IopIrpStackProfilerDpcRoutine();
IopIrpStackProfilerDpcRoutine$filt$2();
IopIrpStackProfilerDpcRoutine$fin$0();
IopIrpStackProfilerDpcRoutine$fin$1();
IopIrqInitialize();
IopIrqPackResource();
IopIrqScoreRequirement();
IopIrqUnpackRequirement();
IopIrqUnpackResource();
IopIsActivityTracingEventEnabled();
IopIsAddressRangeValid();
IopIsBitlockerOn();
IopIsDescendantNode();
IopIsFileOpenOrSection();
IopIsKnownGoodLegacyFsFilter();
IopIsNotNativeDriverImage();
IopIsPciRootBus();
IopIsReportedAlready();
IopIssueSystemEnvironmentCallout();
IopIssueSystemEnvironmentRequest();
IopIssueTrEERequest();
IopKeepAliveWorker();
IopLegacyResourceAllocation();
IopLiveDumpAllocAndInitResources();
IopLiveDumpAllocateDumpBuffers();
IopLiveDumpAllocateMappingResources();
IopLiveDumpBufferDumpData();
IopLiveDumpCallRemovePagesCallbacks();
IopLiveDumpCaptureMemoryPages();
IopLiveDumpCheckTermination();
IopLiveDumpCorralDpc();
IopLiveDumpCorralProcessors();
IopLiveDumpDiscardVirtualAddressRange();
IopLiveDumpEndMirroringCallback();
IopLiveDumpEstimateMemoryPages();
IopLiveDumpFreeDumpBuffers();
IopLiveDumpFreeMappingResources();
IopLiveDumpGetCapturePagesNoLock();
IopLiveDumpGetHvMergePages();
IopLiveDumpGetNtMergePages();
IopLiveDumpInitiateCorralStateChange();
IopLiveDumpIsTracingEnabled();
IopLiveDumpIsUnderMemoryPressure();
IopLiveDumpLockPages();
IopLiveDumpMarkDeviceNode();
IopLiveDumpMarkImportantDumpData();
IopLiveDumpMarkLoadedModuleList();
IopLiveDumpMarkProcessorData();
IopLiveDumpMarkRequiredDumpData();
IopLiveDumpMirrorPhysicalMemoryCallback();
IopLiveDumpPopulateBitmapForDump();
IopLiveDumpProcessCorralStateChange();
IopLiveDumpReleaseResources();
IopLiveDumpResetCorralContext();
IopLiveDumpStartMirroringCallback();
IopLiveDumpTrace();
IopLiveDumpTraceBufferAllocation();
IopLiveDumpTraceBufferEstimation();
IopLiveDumpTraceDumpFileWriteEnd();
IopLiveDumpTraceInterfaceEnd();
IopLiveDumpTraceInterfaceStart();
IopLiveDumpTraceMirroringPhase0End();
IopLiveDumpTraceMirroringPhase1End();
IopLiveDumpTraceMirroringStart();
IopLiveDumpTraceRemovePagesCallbackFailure();
IopLiveDumpTraceSystemQuiesceEnd();
IopLiveDumpTraceSystemQuiesceStart();
IopLiveDumpTracingControlCallback();
IopLiveDumpUnLockPages();
IopLiveDumpUncorralProcessors();
IopLiveDumpValidateCancelObject();
IopLiveDumpValidateDumpFileHandle();
IopLiveDumpValidateParameters();
IopLiveDumpWriteBuffer();
IopLiveDumpWriteDumpFile();
IopLiveDumpWriteDumpFileWithHvPages();
IopLiveDumpWriteSecondaryData();
IopLoadBootHotPatches();
IopLoadCrashdmpImage();
IopLoadCrashdumpDriver();
IopLoadDriver();
IopLoadDriverImage();
IopLoadFileSystemDriver();
IopLoadUnloadDriver();
IopLogAuditIoRegisterNotificationEvent();
IopLogBlockedDriverEvent();
IopLogEventIoMgrMountBegin();
IopLogEventIoMgrMountFailed();
IopLogEventIoMgrMountSucceeded();
IopMarkApcRoutineIfAsynchronousIo32();
IopMarkBootPartition();
IopMarshalIds();
IopMaskInterrupt();
IopMemFindSuitableRange();
IopMemInitialize();
IopMemQueryConflict();
IopMergeRelationLists();
IopMountInitializeVpb();
IopMountVolume();
IopNotifyAlreadyRegisteredFileSystems();
IopOpenLinkOrRenameTarget();
IopOpenRegistryKey();
IopOpenRegistryKeyEx();
IopOpenSystemVariableDevice();
IopParentToRawTranslation();
IopParseDevice();
IopParseDevice$fin$0();
IopParseFile();
IopPassiveInterruptDpc();
IopPassiveInterruptRealtimeWorker();
IopPassiveInterruptWorker();
IopPerfCallDriver();
IopPerfCompleteRequest();
IopPerfCompletionRoutine();
IopPerfLogCallEvent();
IopPerfLogCallReturnEvent();
IopPnPAddDevice();
IopPnPCompleteRequest();
IopPnPDispatch();
IopPoHandleIrp();
IopPortAddAllocation();
IopPortBacktrackAllocation();
IopPortFindSuitableRange();
IopPortGetNextAlias();
IopPortInitialize();
IopPowerDispatch();
IopProbeAndLockPages();
IopProcessIoTracking();
IopProcessIrpStackProfiler();
IopProcessSetInterfaceState();
IopProcessWorkItem();
IopProtectSystemPartition();
IopQueryBusResourceUpdateInterface();
IopQueryConflictFillConflicts();
IopQueryConflictFillString();
IopQueryConflictList();
IopQueryConflictListInternal();
IopQueryDeviceResetRegistrySettings();
IopQueryDeviceResources();
IopQueryDeviceState();
IopQueryDockRemovalInterface();
IopQueryEnvironmentVariableInfoHal();
IopQueryEnvironmentVariableInfoSysEnv();
IopQueryEnvironmentVariableInfoTrEE();
IopQueryInformation();
IopQueryInterfaceRecurseUp();
IopQueryLegacyBusInformation();
IopQueryName();
IopQueryNameInternal();
IopQueryNameInternal$fin$0();
IopQueryPassiveInterruptRegistryOptions();
IopQueryProcessIdsUsingFile();
IopQueryProcessorInitValues();
IopQueryReconfiguration();
IopQueryRegistryKeySystemPath();
IopQueryResourceHandlerInterface();
IopQueryVpbFlagsSafe();
IopQueryXxxInformation();
IopQueueIrpToFileObject();
IopQueueThreadIrp();
IopQueueWorkItemProlog();
IopRaiseHardError();
IopRaiseInformationalHardError();
IopReadDumpRegistry();
IopReadyDeviceObjects();
IopRearrangeReqList();
IopReassignSystemRoot();
IopRecordIoAttribution();
IopReferenceDriverObjectByName();
IopReferenceFileObject();
IopReferenceIoAttributionFromProcess();
IopReferenceVerifyVpb();
IopRegisterDeviceInterface();
IopRegistryCallback();
IopRegistryInitializeCallbacks();
IopRegistryOpenDeepestPath();
IopReleaseDeviceResources();
IopReleaseFilteredBootResources();
IopReleaseResources();
IopRemoveCurrentRelationFromList();
IopRemoveDevice();
IopRemoveDeviceRelationsFromList();
IopRemoveDumpCapsuleSupport();
IopRemoveHardErrorPacket();
IopRemoveLegacyDeviceNode();
IopRemovePageDumpRange();
IopRemovePageFromPageMap();
IopRemoveRelationFromList();
IopRemoveTimerFromTimerList();
IopReplaceCompletionPort();
IopReplaceSeperatorWithPound();
IopReplaceSymlinkPath();
IopReportBootResources();
IopResourceRequirementsListToReqList();
IopResurrectDriver();
IopRetestConfiguration();
IopRetrieveSystemDeviceName();
IopRetrieveTransactionParameters();
IopRetryDeviceRemovalForReset();
IopRetryDeviceRemovalForResetDpc();
IopRevokeFileObjectForProcess();
IopSafebootDriverLoad();
IopSaveRestoreConfiguration();
IopSelectNextConfiguration();
IopSendMessageToTrackService();
IopSessionChangeWorker();
IopSetDeviceSecurityDescriptor();
IopSetDeviceSecurityDescriptors();
IopSetDiskIoAttributionExtension();
IopSetDiskIoAttributionFromProcess();
IopSetEaOrQuotaInformationFile();
IopSetEnvironmentVariableHal();
IopSetEnvironmentVariableSysEnv();
IopSetEnvironmentVariableTrEE();
IopSetFileMemoryPartitionInformation();
IopSetFileObjectExtensionFlag();
IopSetFileObjectIosbRange();
IopSetFsRegistrationInProgress();
IopSetLegacyResourcesFlag();
IopSetLockOperationProcess();
IopSetRelationsTag();
IopSetRemoteLink();
IopSetTypeSpecificFoExtension();
IopSetupArbiterAndTranslators();
IopShutdownBaseFileSystems();
IopSizeTriageDumpDataBlocks();
IopSortRelationListForRemove();
IopStartApcHardError();
IopStartNextPacket();
IopStartNextPacketByKey();
IopStartNextPacketByKeyEx();
IopStoreArcInformation();
IopStoreSystemPartitionInformation();
IopSymlinkAllocateAndAddECP();
IopSymlinkApplyToOpenedName();
IopSymlinkCleanupECP();
IopSymlinkCreateECP();
IopSymlinkEnforceEnabledTypes();
IopSymlinkFreeRelatedMountPointChain();
IopSymlinkGetECP();
IopSymlinkGetMostRecentlyUsedName();
IopSymlinkGetRelatedMountPoint();
IopSymlinkInitializeSymlinkInfo();
IopSymlinkProcessReparse();
IopSymlinkPropagateToExtensionIfNeeded();
IopSymlinkQueryEnabledClasses();
IopSymlinkRegistryCallback();
IopSymlinkRegistryInitCallback();
IopSymlinkRememberJunction();
IopSymlinkRemoveECP();
IopSymlinkUpdateECP();
IopSynchronousApiServiceTail();
IopSynchronousCall();
IopSynchronousServiceTail();
IopSystemControlDispatch();
IopTestConfiguration();
IopThreadStart();
IopTimerDispatch();
IopTimerDispatch$filt$2();
IopTimerDispatch$fin$0();
IopTimerDispatch$fin$1();
IopTrackLink();
IopTrackLink$fin$0();
IopTranslateAndAdjustReqDesc();
IopTranslateBusAddress();
IopTranslatorHandlerCm();
IopTranslatorHandlerIo();
IopUncacheInterfaceInformation();
IopUnloadDriver();
IopUnloadSafeCompletion();
IopUnmaskInterrupt();
IopUpdateFunctionPointers();
IopUpdateMinidumpContext();
IopUpdateWriteTransferCount();
IopUserCompletion();
IopUserRundown();
IopValidateJunctionTarget();
IopValidateQueryInformationParameters();
IopValidateSectionSize();
IopVerifierExAllocatePool();
IopVerifierExAllocatePoolWithQuota();
IopVerifyDeviceObjectOnStack();
IopVerifyDiskSignature();
IopVerifyDriverObjectOnStack();
IopWaitForLockAlertable();
IopWaitForSynchronousIo();
IopWarmEjectDevice();
IopWriteAllocatedResourcesToRegistry();
IopWriteCapsuleTriageDumpToFirmware();
IopWriteDriverList();
IopWriteResourceList();
IopWriteTriageDumpToFirmware();
IopXxxControlFile();
IopfCallDriver();
IopfCompleteRequest();
IovAllocateIrp();
IovAllocateMdl();
IovAllocateWorkItem();
IovAttachDeviceToDeviceStack();
IovBuildAsynchronousFsdRequest();
IovBuildDeviceIoControlRequest();
IovBuildSynchronousFsdRequest();
IovCallDriver();
IovCancelIrp();
IovCompleteRequest();
IovDeleteDevice();
IovDetachDevice();
IovFreeIrpPrivate();
IovInitializeIrp();
IovInitializeTimer();
IovUnloadDrivers();
IovUtilFlushStackCache();
IovUtilGetBottomDeviceObjectWithTag();
IovUtilGetLowerDeviceObjectWithTag();
IovUtilGetUpperDeviceObjectWithTag();
IovUtilIsDeviceObjectMarked();
IovUtilIsInFdoStack();
IovUtilIsVerifiedDeviceStack();
IovUtilIsWdmStack();
IovUtilMarkDeviceObject();
IovUtilMarkStack();
IovUtilMultipleDevicesSameDriver();
IovUtilRelateDeviceObjects();
IovUtilWatermarkIrp();
IovpAdvanceStackDownwards();
IovpBuildDriverObjectList();
IovpCallDriver1();
IovpCallDriver2();
IovpCallDriverNoIrpTracking();
IovpCallDriverWithStackBuffer();
IovpCancelRoutine();
IovpCheckIrpForCriticalTracking();
IovpCompleteRequest1();
IovpCompleteRequest2();
IovpCompleteRequest3();
IovpCompleteRequest4();
IovpExamineDevObjForwarding();
IovpExamineIrpStackForwarding();
IovpInternalCompletionTrap();
IovpLocalCompletionRoutine();
IovpLogStackCallout();
IovpLogStackTrace();
IovpSessionDataCreate();
IovpSessionDataDereference();
IovpSessionDataReference();
IovpUnloadDriver();
IovpUtilMarkDeviceObject();
IovpValidateDeviceObject();
IsEncodedAttributeChar();
IsEqualGUID();
IsFixedSizeType();
IsHangulLV();
IsLegalAttributeChar2();
IsNeutralLanguageItem();
IsPseudoLocale();
IsRegistryKeyLocked();
IsTrustletCreateAttributeWellFormed();
IsValueSizeFixed();
KCBIsVirtualizable();
KCBNeedsVirtualImage();
KGetAppModelStateSeparatedRegKeyPath();
KGetUnlockSetting();
KIsSideloadingEnabled();
KIsUnlockSettingEnabled();
KdAcquireDebuggerLock();
KdCallPowerHandlers();
KdChangeOption();
KdCheckForDebugBreak();
KdCopyDataBlock();
KdDecodeDataBlock();
KdDeregisterPowerHandler();
KdDisableDebugger();
KdDisableDebuggerWithLock();
KdEnableDebugger();
KdEnableDebuggerWithLock();
KdEncodeDataBlock();
KdEnterDebugger();
KdExitDebugger();
KdGetDebugDevice();
KdInitSystem();
KdIsThisAKdTrap();
KdLogDbgPrint();
KdMarkHiberPhase();
KdPollBreakIn();
KdPowerTransition();
KdPowerTransitionEx();
KdPullRemoteFile();
KdRefreshDebuggerNotPresent();
KdRegisterDebuggerDataBlock();
KdRegisterPowerHandler();
KdReleaseDebuggerLock();
KdSendTraceData();
KdSetDbgPrintBufferSize();
KdSetEventLoggingPresent();
KdSetOwedBreakpoints();
KdSystemDebugControl();
KdTrap();
KdUpdateTimeSlipEvent();
KdpAddBreakpoint();
KdpAllowDisable();
KdpCloseRemoteFile();
KdpCommandString();
KdpCopyCodeStream();
KdpCopyContext();
KdpCopyMemoryChunks();
KdpCreateRemoteFile();
KdpDeleteBreakpoint();
KdpDeleteBreakpointRange();
KdpFillMemory();
KdpGetBusData();
KdpGetContext();
KdpGetContextEx();
KdpGetStateChange();
KdpInitializeExtendedContext();
KdpInsertBreakpoint();
KdpIsBreakpoint();
KdpLowRestoreBreakpoint();
KdpLowWriteContent();
KdpPollBreakInWithPortLock();
KdpPrint();
KdpPrintString();
KdpPrompt();
KdpPromptString();
KdpQueryMemory();
KdpQuickMoveMemory();
KdpReadControlSpace();
KdpReadPhysicalMemory();
KdpReadPhysicalMemoryLong();
KdpReadRemoteFile();
KdpReadVirtualMemory();
KdpRemoveBreakpoint();
KdpReport();
KdpReportCommandStringStateChange();
KdpReportExceptionStateChange();
KdpReportLoadSymbolsStateChange();
KdpRestoreAllBreakpoints();
KdpRestoreBreakPointEx();
KdpSanitizeContextFlags();
KdpSearchMemory();
KdpSearchPhysicalPage();
KdpSearchPhysicalPageRange();
KdpSendWaitContinue();
KdpSetCommonState();
KdpSetContext();
KdpSetContextEx();
KdpSetContextState();
KdpSetOwedBreakpoints();
KdpStub();
KdpSuspendAllBreakpoints();
KdpSymbol();
KdpSysCheckLowMemory();
KdpSysGetVersion();
KdpSysReadBusData();
KdpSysReadControlSpace();
KdpSysReadIoSpace();
KdpSysReadMsr();
KdpSysWriteBusData();
KdpSysWriteControlSpace();
KdpSysWriteIoSpace();
KdpSysWriteMsr();
KdpTimeSlipDpcRoutine();
KdpTimeSlipWork();
KdpTrap();
KdpWriteBreakPointEx();
KdpWriteCustomBreakpoint();
KdpWriteInstructionBuffer();
KdpWritePhysicalMemory();
KeAbCrossThreadRelease();
KeAbEntryFree();
KeAbInitializeThreadState();
KeAbMarkCrossThreadReleasable();
KeAbPostRelease();
KeAbPostReleaseEx();
KeAbPreAcquire();
KeAbPreWait();
KeAbProcessBaseIoPriorityChange();
KeAbProcessBaseIoPriorityChangeInternal();
KeAbProcessEffectiveIoPriorityChange();
KeAccumulateTicks();
KeAcquireGuardedMutex();
KeAcquireGuardedMutexUnsafe();
KeAcquireInStackQueuedSpinLock();
KeAcquireInStackQueuedSpinLockAtDpcLevel();
KeAcquireInStackQueuedSpinLockForDpc();
KeAcquireInStackQueuedSpinLockRaiseToSynch();
KeAcquireInterruptSpinLock();
KeAcquireQueuedSpinLock();
KeAcquireQueuedSpinLockRaiseToSynch();
KeAcquireSpinLockAtDpcLevel();
KeAcquireSpinLockForDpc();
KeAcquireSpinLockRaiseToDpc();
KeAcquireSpinLockRaiseToSynch();
KeAddEnclavePage();
KeAddGroupAffinityEx();
KeAddProcessorAffinityEx();
KeAddProcessorGroupAffinity();
KeAddSystemServiceTable();
KeAddTriageDumpDataBlock();
KeAdjustInterruptTime();
KeAdjustTimerDelayProcess();
KeAlertResumeThread();
KeAlertThread();
KeAlertThreadByThreadId();
KeAllocateCalloutStack();
KeAllocateCalloutStackEx();
KeAllocateInterrupt();
KeAllocateXStateContext();
KeAndAffinityEx();
KeAndGroupAffinityEx();
KeAreAllApcsDisabled();
KeAreApcsDisabled();
KeAreInterruptsEnabled();
KeAttachProcess();
KeBalanceSetManager();
KeBlockEnclavePage();
KeBoostPriorityThread();
KeBugCheck();
KeBugCheck2();
KeBugCheckEx();
KeBugCheckUnicodeToAnsi();
KeBuildLogicalProcessorSystemInformation();
KeBuildPrimaryThreadContext();
KeCanChangeEnclavePageProtection();
KeCancelTimer();
KeCancelTimer2();
KeCancelTimerInternal();
KeCapturePersistentThreadState();
KeCaptureWaitChainHeadEx();
KeChangeEnclavePageProtection();
KeCheckAndApplyBamQos();
KeCheckForTimer();
KeCheckForZeroPage();
KeCheckProcessorAffinityEx();
KeCheckProcessorGroupAffinity();
KeCheckStackAndTargetAddress();
KeCleanupThreadState();
KeClearForceIdle();
KeClearSystemPriority();
KeClearUmsThreadKernelLock();
KeClockInterruptNotify();
KeClockTimerPowerChange();
KeCommitRetpolineState();
KeCompactServiceTable();
KeComplementAffinityEx();
KeComputeParallelSha256();
KeComputeParallelSha256StateSize();
KeComputeSha256();
KeConfigureDynamicMemory();
KeConfigureHeteroPolicy();
KeConfigureHeteroProcessors();
KeConnectInterrupt();
KeConnectInterruptForHal();
KeContextFromKframes();
KeContextToKframes();
KeConvertAuxiliaryCounterToPerformanceCounter();
KeConvertPerformanceCounterToAuxiliaryCounter();
KeCopyAffinityEx();
KeCopyContextFromUch();
KeCopyContextFromUmsContext();
KeCopyContextToUch();
KeCopyContextToUmsContext();
KeCopyExceptionRecord();
KeCopyLastBranchInformation();
KeCopyPage();
KeCopyPrivilegedPage();
KeCountSetBitsAffinityEx();
KeCountSetBitsGroupAffinity();
KeCpuSetQueryUnparkRecommendation();
KeCpuSetReportParkedProcessors();
KeCreateEnclave();
KeCreateEnclaveMetadataPage();
KeDebugReadEnclaveMemory();
KeDebugWriteEnclaveMemory();
KeDelayExecutionThread();
KeDeleteThread();
KeDeregisterBoundCallback();
KeDeregisterBugCheckCallback();
KeDeregisterBugCheckReasonCallback();
KeDeregisterNmiCallback();
KeDeregisterObjectNotification();
KeDeregisterProcessorChangeCallback();
KeDetachProcess();
KeDisableProfiling();
KeDisableQueueingPriorityIncrement();
KeDisableTimer2();
KeDisconnectInterrupt();
KeDispatchSecondaryInterrupt();
KeDoesTebMatchThread();
KeEnableProfiling();
KeEnterCriticalRegion();
KeEnterCriticalRegionThread();
KeEnterGuardedRegion();
KeEnterKernelDebugger();
KeEnumerateKernelStackSegments();
KeEnumerateNextProcessor();
KeEnumerateProcessorDpcs();
KeEnumerateQueueApc();
KeEstimateClockTickDuration();
KeExitRetpoline();
KeExpandKernelStackAndCallout();
KeExpandKernelStackAndCalloutEx();
KeExpandKernelStackAndCalloutInternal();
KeExpandKernelStackAndCalloutInternal$filt$0();
KeExpandKernelStackAndCalloutInternal$fin$1();
KeFastAcquireInStackQueuedSpinLockAndRaise();
KeFindConfigurationEntry();
KeFindConfigurationNextEntry();
KeFindFirstSetLeftAffinityEx();
KeFindFirstSetLeftGroupAffinity();
KeFindFirstSetRightAffinityEx();
KeFindFirstSetRightGroupAffinity();
KeFirstGroupAffinityEx();
KeFixUserSwitchContext();
KeFlushCurrentTbImmediately();
KeFlushCurrentTbOnly();
KeFlushEntireTb();
KeFlushIoBuffers();
KeFlushMultipleRangeCurrentTb();
KeFlushMultipleRangeTb();
KeFlushProcessTb();
KeFlushProcessWriteBuffers();
KeFlushQueuedDpcs();
KeFlushRsb();
KeFlushSingleCurrentTb();
KeFlushSingleTb();
KeFlushTb();
KeFoldProcessStatisticsThread();
KeForceAttachProcess();
KeForceDetachProcess();
KeForceEnableNx();
KeForceResumeProcess();
KeForceResumeThread();
KeFreeCalloutStack();
KeFreeInitializationCode();
KeFreeInterrupt();
KeFreeXStateContext();
KeFreezeExecution();
KeFreezeProcess();
KeFrozenProcessorCount();
KeGenericCallDpc();
KeGenericProcessorCallback();
KeGetAffinitizedInterruptsInfo();
KeGetAffinitizedInterruptsInfo$filt$0();
KeGetBugMessageText();
KeGetClockOwner();
KeGetClockTimerResolution();
KeGetCurrentIrql();
KeGetCurrentNodeNumber();
KeGetCurrentProcessorNumberEx();
KeGetCurrentStackPointer();
KeGetCurrentThread();
KeGetCurrentUmsTeb();
KeGetDynamicTickDisableReason();
KeGetEffectiveIrql();
KeGetExecuteOptions();
KeGetNextClockTickDuration();
KeGetNextKernelStackSegment();
KeGetPrcb();
KeGetProcessorIndexFromNumber();
KeGetProcessorNumberFromIndex();
KeGetRecommendedSharedDataAlignment();
KeGetSchedulingGroupSize();
KeGetTbSize();
KeGetXSaveFeatureFlags();
KeGuardCheckICall();
KeGuardDispatchICall();
KeHwPolicyLocateResource();
KeInitAmd64SpecificState();
KeInitAmd64SpecificState$filt$0();
KeInitSystem();
KeInitThread();
KeInitializeAffinityEx();
KeInitializeApc();
KeInitializeCatRegisters();
KeInitializeClock();
KeInitializeCrashDumpHeader();
KeInitializeDeviceQueue();
KeInitializeDpc();
KeInitializeEnclave();
KeInitializeEntropySystem();
KeInitializeEnumerationContext();
KeInitializeEnumerationContextFromAffinity();
KeInitializeEnumerationContextFromGroup();
KeInitializeEvent();
KeInitializeGate();
KeInitializeGuardedMutex();
KeInitializeIRTimer();
KeInitializeInterrupt();
KeInitializeInterruptEx();
KeInitializeMutant();
KeInitializeMutex();
KeInitializePriQueue();
KeInitializeProcess();
KeInitializeProfile();
KeInitializeProfileCallback();
KeInitializeQueue();
KeInitializeSchedulerAssist();
KeInitializeSecondaryInterruptServices();
KeInitializeSemaphore();
KeInitializeThreadedDpc();
KeInitializeTimer();
KeInitializeTimer2();
KeInitializeTimerEx();
KeInitializeTimerTable();
KeInitializeTriageDumpDataArray();
KeInitializeUmsThread();
KeInitializeWaitChain();
KeInsertByKeyDeviceQueue();
KeInsertDeviceQueue();
KeInsertHeadQueue();
KeInsertPriQueue();
KeInsertQueue();
KeInsertQueueApc();
KeInsertQueueDpc();
KeInsertQueueEx();
KeInsertSchedulingGroup();
KeIntSteerAssignCpuSet();
KeIntSteerAssignCpuSetForGsiv();
KeIntSteerGetSteeringMode();
KeIntSteerIsSteeringEnabled();
KeIntSteerPeriodic();
KeIntSteerSnapPerf();
KeInterlockedClearProcessorAffinityEx();
KeInterlockedSetProcessorAffinityEx();
KeInvalidAccessAllowed();
KeInvalidateAllCaches();
KeInvalidateRangeAllCaches();
KeInvalidateRangeAllCachesNoIpi();
KeIpiGenericCall();
KeIsApcRunningThread();
KeIsAttachedProcess();
KeIsEmptyAffinityEx();
KeIsEqualAffinityEx();
KeIsExecutingDpc();
KeIsForceIdleEngaged();
KeIsImportOptimizationEnabled();
KeIsRetpolineEnabled();
KeIsSingleGroupAffinityEx();
KeIsSubsetAffinityEx();
KeIsThreadRunning();
KeIsValidTraceCallbackTarget();
KeIsWaitListEmpty();
KeKeepData();
KeKvaShadowingActive();
KeLeaveCriticalRegion();
KeLeaveCriticalRegionThread();
KeLeaveGuardedRegion();
KeLeaveGuardedRegionThread();
KeLoadMTRR();
KeMakeKernelDirectoryTableBase();
KeMakeUserDirectoryTableBase();
KeMarkHiberPhase();
KeMaskInterrupt();
KeNotifyProcessorFreezeSupported();
KeNumaInitialize();
KeOptimizeSpecCtrlSettings();
KeOrAffinityEx();
KeOutPageEnclavePage();
KePersistMemory();
KePopulateContinuationContext();
KePrepareClockTimerForIdle();
KePrepareToDispatchVirtualProcessor();
KeProcessorGroupAffinity();
KeProcessorProfileControlArea();
KeProfileInterruptWithSource();
KePulseEvent();
KeQueryActiveGroupCount();
KeQueryActiveProcessorAffinity();
KeQueryActiveProcessorCount();
KeQueryActiveProcessorCountEx();
KeQueryActiveProcessors();
KeQueryActualAffinityThread();
KeQueryAffinityProcess();
KeQueryAffinityThread();
KeQueryAuxiliaryCounterFrequency();
KeQueryBasePriorityThread();
KeQueryBootTimeValues();
KeQueryCpuSetInformation();
KeQueryCpuSetInformation$filt$0();
KeQueryCpuSetsProcess();
KeQueryCpuSetsThread();
KeQueryCurrentStackInformation();
KeQueryCycleTimeStatsProcessor();
KeQueryDpcWatchdogInformation();
KeQueryEffectiveBasePriorityThread();
KeQueryEffectivePriorityThread();
KeQueryGroupAffinity();
KeQueryGroupAffinityEx();
KeQueryGroupMaskProcess();
KeQueryHardwareCounterConfiguration();
KeQueryHeteroCpuPolicyThread();
KeQueryHighestNodeNumber();
KeQueryImplementedPhysicalBits();
KeQueryInterruptTimePrecise();
KeQueryIntervalProfile();
KeQueryKvaShadowInformation();
KeQueryKvaShadowInformation$filt$0();
KeQueryKvaShadowRegion();
KeQueryLogicalProcessorRelationship();
KeQueryMaximumGroupCount();
KeQueryMaximumProcessorCount();
KeQueryMaximumProcessorCountEx();
KeQueryNodeActiveAffinity();
KeQueryNodeMaximumProcessorCount();
KeQueryNumaGraph();
KeQueryOwnerMutant();
KeQueryPrcbAddress();
KeQueryPriorityThread();
KeQueryRuntimeThread();
KeQuerySchedulingGroupHistory();
KeQuerySchedulingGroupReadyTime();
KeQuerySpeculationControlInformation();
KeQuerySpeculationControlInformation$filt$0();
KeQuerySystemAllowedCpuSetAffinity();
KeQuerySystemTimePrecise();
KeQuerySystemTimeUnsafe();
KeQueryTimeIncrement();
KeQueryTimelineBitmapTime();
KeQueryTimerDueTime();
KeQueryTotalCycleTimeThread();
KeQueryUnbiasedInterruptTime();
KeQueryUnbiasedInterruptTimePrecise();
KeQueryValuesThread();
KeQueryWakeSource();
KeRaiseIrqlToDpcLevel();
KeRaiseUserException();
KeReadStateEvent();
KeReadStateMutant();
KeReadStateQueue();
KeReadStateSemaphore();
KeReadStateTimer();
KeReadyThread();
KeRebaselineInterruptTime();
KeRebaselineSystemTime();
KeRecomputeCpuSetAffinityProcess();
KeReenterRetpolinedCode();
KeRegisterBoundCallback();
KeRegisterBugCheckCallback();
KeRegisterBugCheckReasonCallback();
KeRegisterNmiCallback();
KeRegisterObjectNotification();
KeRegisterProcessorChangeCallback();
KeRelaxTimingConstraints();
KeReleaseGuardedMutex();
KeReleaseGuardedMutexUnsafe();
KeReleaseInStackQueuedSpinLock();
KeReleaseInStackQueuedSpinLockForDpc();
KeReleaseInStackQueuedSpinLockFromDpcLevel();
KeReleaseInterruptSpinLock();
KeReleaseMutant();
KeReleaseMutex();
KeReleaseQueuedSpinLock();
KeReleaseSemaphore();
KeReleaseSemaphoreEx();
KeReleaseSpinLock();
KeReleaseSpinLockForDpc();
KeReleaseSpinLockFromDpcLevel();
KeRemoveByKeyDeviceQueue();
KeRemoveByKeyDeviceQueueIfBusy();
KeRemoveDeviceQueue();
KeRemoveEnclavePage();
KeRemoveEntryDeviceQueue();
KeRemoveGroupAffinityEx();
KeRemovePriQueue();
KeRemovePriorityBoost();
KeRemoveProcessorAffinityEx();
KeRemoveProcessorGroupAffinity();
KeRemoveQueue();
KeRemoveQueueApc();
KeRemoveQueueDpc();
KeRemoveQueueDpcEx();
KeRemoveQueueEntry();
KeRemoveQueueEx();
KeRemoveSchedulingGroup();
KeRemoveSystemServiceTable();
KeRemoveUmsThreadCidOwnership();
KeReportCacheIncoherentDevice();
KeRequestTerminationProcess();
KeRequestTerminationThread();
KeReservePrivilegedPages();
KeResetEvent();
KeResetLegacyFloatingPointState();
KeRestoreExtendedAndSupervisorState();
KeRestoreExtendedProcessorState();
KeRestoreFloatingPointState();
KeRestoreIptStateAfterProcessorComesOnline();
KeRestoreLegacyFloatingPointControlWord();
KeRestoreMtrrBroadcast();
KeRestoreProcessorSpecificFeatures();
KeRestoreSupervisorState();
KeResumeClockTimer();
KeResumeClockTimerFromIdle();
KeResumeClockTimerSafe();
KeResumeThread();
KeRetryOutswapProcess();
KeRevertToUserAffinityThread();
KeRevertToUserAffinityThreadEx();
KeRevertToUserGroupAffinityThread();
KeRundownApcQueues();
KeRundownPriQueue();
KeRundownQueue();
KeRundownQueueCommon();
KeRundownQueueEx();
KeRundownSecureProcess();
KeSaveExtendedAndSupervisorState();
KeSaveExtendedProcessorState();
KeSaveFloatingPointState();
KeSaveIptStateBeforeProcessorGoesOffline();
KeSaveLegacyFloatingPointControlWord();
KeSaveStateForHibernate();
KeSaveSupervisorState();
KeSchedulerAssistThreadFlagEnabled();
KeSecureProcess();
KeSecureThread();
KeSelectIdealProcessor();
KeSelectNodeForAffinity();
KeSetActualBasePriorityThread();
KeSetAffinityProcess();
KeSetAffinityThread();
KeSetAutoAlignmentProcess();
KeSetBasePriorityThread();
KeSetCheckStackExtentsProcess();
KeSetCoalescableTimer();
KeSetCpuSetsProcess();
KeSetCurrentUmsTeb();
KeSetDisableBoostProcess();
KeSetDisableBoostThread();
KeSetDisableQuantumProcess();
KeSetDmaIoCoherency();
KeSetEvent();
KeSetEventBoostPriority();
KeSetEventBoostPriorityEx();
KeSetExecuteOptions();
KeSetForceIdle();
KeSetHardwareCounterConfiguration();
KeSetHeteroCpuPolicyThread();
KeSetIdealProcessorThread();
KeSetIdealProcessorThreadByNumber();
KeSetIdealProcessorThreadEx();
KeSetImportanceDpc();
KeSetIntervalProfile();
KeSetKernelStackSwapEnable();
KeSetLastBranchRecordInUse();
KeSetLegacyAffinityThread();
KeSetMaxDynamicTickDuration();
KeSetMaximumCountPriQueue();
KeSetPagePrivilege();
KeSetPriorityAndQuantumProcess();
KeSetPriorityBoost();
KeSetPriorityThread();
KeSetProcess();
KeSetProcessSchedulingGroup();
KeSetProfileIrql();
KeSetQuantumProcess();
KeSetSchedulingGroupCpuRates();
KeSetSchedulingGroupCycleNotification();
KeSetSchedulingGroupRankBias();
KeSetSchedulingGroupWeights();
KeSetSelectedCpuSetsThread();
KeSetSystemAffinityThread();
KeSetSystemAffinityThreadEx();
KeSetSystemAllowedCpuSets();
KeSetSystemGroupAffinityThread();
KeSetSystemServiceCallback();
KeSetSystemTime();
KeSetTagCpuSets();
KeSetTargetProcessorDpc();
KeSetTargetProcessorDpcEx();
KeSetThreadChargeOnlySchedulingGroup();
KeSetThreadSchedulerAssist();
KeSetTimeAdjustment();
KeSetTimer();
KeSetTimer2();
KeSetTimerEx();
KeSetTracepoint();
KeSetUmsThreadKernelLock();
KeSetUserHeteroCpuPolicyThread();
KeShouldYieldProcessor();
KeSignalCallDpcDone();
KeSignalCallDpcSynchronize();
KeSignalGate();
KeSpecialUserApcKernelRoutine();
KeStackAttachProcess();
KeStallWhileFrozen();
KeStartAllProcessors();
KeStartDynamicProcessor();
KeStartProfile();
KeStartThread();
KeStopProfile();
KeSubtractAffinityEx();
KeSuspendClockTimer();
KeSuspendClockTimerSafe();
KeSuspendThread();
KeSwapDirectoryTableBase();
KeSwapProcessOrStack();
KeSweepLocalCaches();
KeSwitchFrozenProcessor();
KeSynchronizeAddressPolicy();
KeSynchronizeExecution();
KeSynchronizeSecurityDomain();
KeSynchronizeTimeToQpc();
KeSynchronizeUmsThread();
KeSynchronizeWithDynamicProcessors();
KeSystemFullyCacheCoherent();
KeTerminateThread();
KeTestAlertThread();
KeTestSpinLock();
KeThawExecution();
KeThawProcess();
KeTimeOutQueueWaiters();
KeTrackEnclaveTbFlush();
KeTransitionProcessorParkState();
KeTryToAcquireGuardedMutex();
KeTryToAcquireQueuedSpinLock();
KeTryToAcquireQueuedSpinLockRaiseToSynch();
KeTryToAcquireSpinLockAtDpcLevel();
KeTryToFreezeThreadStack();
KeTryToInsertQueueApc();
KeUnInitializeUmsThread();
KeUnmaskInterrupt();
KeUnsecureProcess();
KeUnsecureThread();
KeUnstackDetachProcess();
KeUpdateGroupSchedulingConstants();
KeUpdatePendingQosRequest();
KeUpdatePrimaryThreadContext();
KeUpdateThreadCpuSets();
KeUpdateThreadSchedulingProperties();
KeUpdateThreadTag();
KeUpdateTotalCyclesCurrentThread();
KeUpdateUmsThreadState();
KeUpdateUmsThreadState$filt$0();
KeUserModeCallback();
KeValidateBugCheckCallbackRecord();
KeVerifyContextRecord();
KeVerifyContextXStateCetU();
KeVerifyGroupAffinity();
KeWaitForAlertByThreadId();
KeWaitForGate();
KeWaitForMultipleObjects();
KeWaitForSingleObject();
KeWaitPhysicalFaultCompletion();
KeWakeProcessor();
KeWakeWaitChain();
KeWriteProtectPAT();
KeWriteProtectProcessorState();
KeXorAffinityEx();
KeYieldExecution();
KeYieldProcessorEx();
KeZeroPages();
KeZeroSinglePage();
KevSkipVerification();
KiAbApplyWakeupBoost();
KiAbCompareSnappedEntryState();
KiAbCpuBoostOwners();
KiAbDeferredProcessingWorker();
KiAbDetermineMaxWaiterPriority();
KiAbEntryGetCpuPriorityKey();
KiAbEntryGetLockedHeadEntry();
KiAbEntryRemoveFromTree();
KiAbEntryUpdateOwnerTreePosition();
KiAbEntryUpdateWaiterTreePosition();
KiAbFindWakeupLockEntry();
KiAbForceProcessLockEntry();
KiAbIoBoostOwners();
KiAbOwnerComputeCpuPriorityKey();
KiAbProcessContextSwitch();
KiAbProcessThreadLocks();
KiAbPropagateBoosts();
KiAbQueueAutoBoostDpc();
KiAbSetMinimumThreadPriority();
KiAbThreadBoostIoPriority();
KiAbThreadClearAcquiredLockEntry();
KiAbThreadInsertList();
KiAbThreadRemoveBoosts();
KiAbThreadUnboostCpuPriority();
KiAbThreadUnboostIoPriority();
KiAbTryDecrementIoWaiterCounts();
KiAbTryIncrementIoWaiterCounts();
KiAccessPage();
KiAcquireInterruptConnectLock();
KiAcquireKobjectLockSafe();
KiAcquirePrcbLock();
KiAcquireQueuedSpinLockInstrumented();
KiAcquireReleaseObjectRundownLockExclusive();
KiAcquireReleaseThreadLock();
KiAcquireSecondaryInterruptConnectLock();
KiAcquireSecondaryPassiveConnectLock();
KiAcquireSecondarySignalListLock();
KiAcquireSpinLockInstrumented();
KiAcquireThreadStateLock();
KiAcquireTimer2CollectionLockIfInserted();
KiAcquireTimer2LockUnlessDisabled();
KiActivateWaiterKQueue();
KiActivateWaiterPriQueue();
KiActivateWaiterQueueWithNoLocks();
KiAddProcessorToGroupDatabase();
KiAddProcessorToGroupSchedulingDatabase();
KiAddProcessorToGroupSchedulingList();
KiAddSynchCounters();
KiAddThreadToPrcbQueue();
KiAddThreadToReadyQueue();
KiAddThreadToScbQueue();
KiAdjustGroupConfiguration();
KiAdjustThreadTimer();
KiAdjustTimer2DueTimes();
KiAdjustTimerDueTimes();
KiAdjustTimersAfterDripsExit();
KiAffinityContainsProcessorsOtherThanSelf();
KiAlignmentFault();
KiAlignmentFaultShadow();
KiAllocateCpuSetData();
KiApcInterrupt();
KiApcInterruptShadow();
KiApplyForegroundBoostThread();
KiAreCodePatchesAllowed();
KiAssignAdjustableNodes();
KiAssignAllNodesToGroup0();
KiAssignFixedNodes();
KiAssignSchedulingGroupWeights();
KiAttachProcess();
KiAttemptFastRemovePriQueue();
KiAttemptFastRemoveQueue();
KiBalanceSetManagerDeferredRoutine();
KiBalanceSetManagerDeferredRoutine$filt$1();
KiBalanceSetManagerDeferredRoutine$filt$3();
KiBalanceSetManagerDeferredRoutine$fin$0();
KiBalanceSetManagerDeferredRoutine$fin$2();
KiBeginCounterAccumulation();
KiBeginThreadAccountingPeriod();
KiBeginThreadWait();
KiBlockAndActivateUmsThread();
KiBoundFault();
KiBoundFaultShadow();
KiBreakpointTrap();
KiBreakpointTrapShadow();
KiBugCheckDebugBreak();
KiBugCheckDispatch();
KiBugCheckProgress();
KiBugCheckReturn();
KiCalibrateTimeAdjustment();
KiCallInterruptServiceRoutine();
KiCallUserMode();
KiCancelTimer();
KiCaptureUmsThreadContext();
KiChainedDispatch();
KiChargeSchedulingGroupCycleTime();
KiCheckAndApplyCacheIsolation();
KiCheckAndRearmForceIdle();
KiCheckDueTimeExpired();
KiCheckForAtlThunk();
KiCheckForDuplicateBugCheckCallback();
KiCheckForEffectivePriorityChange();
KiCheckForFreezeExecution();
KiCheckForKernelApcDelivery();
KiCheckForMaxOverQuotaScb();
KiCheckForSListAddress();
KiCheckForTimerExpiration();
KiCheckGroupSchedulingQuantumEnd();
KiCheckKeepAlive();
KiCheckMaxOverQuotaTransition();
KiCheckMicrocode();
KiCheckPreferredHeteroProcessor();
KiCheckStall();
KiCheckThreadAffinity();
KiCheckVpBackingLongSpinWaitHypercall();
KiCheckWaitNext();
KiChooseLowestRankedThread();
KiChooseTargetProcessor();
KiClearLastBranchRecordStack();
KiClearPriorityFloor();
KiCommitNodeAssignment();
KiCommitThreadWait();
KiCompareVarMtrr();
KiCompleteDirectSwitchThread();
KiCompleteKernelInit();
KiComputeCpuSetAffinity();
KiComputeCpuSetAffinityMask();
KiComputeDueTime();
KiComputeGroupSchedulingRank();
KiComputeNewPriority();
KiComputeNewSystemTime();
KiComputeNumaCosts();
KiComputePriorityFloor();
KiComputeProcessorDataSize();
KiComputeThreadAffinity();
KiConfigureCpuSetSchedulingInformation();
KiConfigureDynamicProcessor();
KiConfigureHeteroProcessorsTarget();
KiConfigureInitialNodes();
KiConfigureProcessorBlock();
KiConfigureSchedulingInformation();
KiConnectInterrupt();
KiConnectSecondaryInterrupt();
KiConnectSwInterrupt();
KiContinueEx();
KiContinuePreviousModeUser();
KiControlProtectionFault();
KiControlProtectionFaultShadow();
KiConvertDynamicHeteroPolicy();
KiConvertToGuiThread();
KiCopyCounters();
KiCopyCountersWorker();
KiCopyUchToStagingArea();
KiCopyXStateArea();
KiCreateCpuSetForProcessor();
KiCustomAccessHandler0();
KiCustomAccessHandler1();
KiCustomAccessHandler2();
KiCustomAccessHandler3();
KiCustomAccessHandler4();
KiCustomAccessHandler5();
KiCustomAccessHandler6();
KiCustomAccessHandler7();
KiCustomAccessHandler8();
KiCustomAccessHandler9();
KiCustomAccessRoutine0();
KiCustomAccessRoutine1();
KiCustomAccessRoutine2();
KiCustomAccessRoutine3();
KiCustomAccessRoutine4();
KiCustomAccessRoutine5();
KiCustomAccessRoutine6();
KiCustomAccessRoutine7();
KiCustomAccessRoutine8();
KiCustomAccessRoutine9();
KiCustomRecurseRoutine0();
KiCustomRecurseRoutine1();
KiCustomRecurseRoutine2();
KiCustomRecurseRoutine3();
KiCustomRecurseRoutine4();
KiCustomRecurseRoutine5();
KiCustomRecurseRoutine6();
KiCustomRecurseRoutine7();
KiCustomRecurseRoutine8();
KiCustomRecurseRoutine9();
KiDebugServiceTrap();
KiDebugServiceTrapShadow();
KiDebugTrapOrFault();
KiDebugTrapOrFaultShadow();
KiDecodeMcaFault();
KiDecrementProcessStackCount();
KiDeferGroupSchedulingPreemption();
KiDeferredReadyThread();
KiDeliverApc();
KiDeregisterNmiSxCallback();
KiDetachProcess();
KiDetectAmdNonArchSsbdSupport();
KiDetectFpuLeakage();
KiDetectHardwareSpecControlFeatures();
KiDetectKvaLeakage();
KiDetermineRetpolineEnablement();
KiDirectSwitchThread();
KiDisableCacheErrataSource();
KiDisconnectInterruptCommon();
KiDisconnectInterruptInternal();
KiDisconnectSecondaryInterrupt();
KiDisconnectSecondaryInterruptInternal();
KiDispatchCallout();
KiDispatchException();
KiDispatchException$filt$0();
KiDispatchInterrupt();
KiDispatchInterruptContinue();
KiDispatchPassiveInterrupts();
KiDisplayBlueScreen();
KiDivideErrorFault();
KiDivideErrorFaultShadow();
KiDoubleFaultAbort();
KiDoubleFaultAbortShadow();
KiDpcDispatch();
KiDpcInterrupt();
KiDpcInterruptBypass();
KiDpcInterruptShadow();
KiDpcWatchdog();
KiDpcWatchdogCaptureStack();
KiDumpParameterImages();
KiDynamicProcessorAddNotification();
KiDynamicProcessorInitialization();
KiEmulateAtlThunk();
KiEnableGroupScheduling();
KiEnableKvaShadowing();
KiEnableXSave();
KiEncls();
KiEnclsDebugRead();
KiEnclsStatus();
KiEndCounterAccumulation();
KiEndDebugAccumulation();
KiEndThreadAccountingPeriod();
KiEndThreadCycleAccumulation();
KiEntropyDpcRoutine();
KiEntropyQueueDpc();
KiEnumerateCallback();
KiEnumerateNextProcessorNumber();
KiEnumerateNmiSxCallback();
KiEpfComplete();
KiEpfCompletionDpcRoutine();
KiEpfCompletionIsr();
KiEpfDrainCompletionQueue();
KiEpfHandleNotification();
KiEpfStart();
KiErrata671Present();
KiErrata704Present();
KiEvaluateGroupSchedulingPreemption();
KiEventClockStateChange();
KiExceptionDispatch();
KiExecuteAllDpcs();
KiExecuteDpc();
KiExitDispatcher();
KiExitThreadWait();
KiExpandKernelStackAndCalloutOnStackSegment();
KiExpandKernelStackAndCalloutSwitchStack();
KiExpireTimer2();
KiExpireTimerTable();
KiExtendProcessAffinity();
KiFastAcquireQueuedSpinLockInstrumented();
KiFastExitThreadWait();
KiFastFailDispatch();
KiFastGetCallersAddress();
KiFastReadyThread();
KiFatalExceptionFilter();
KiFatalExceptionHandler();
KiFatalFilter();
KiFilterBugCheckInfo();
KiFilterFiberContext();
KiFinalizeTimer2Disablement();
KiFindFirstAvailableNode();
KiFindNextTimerDueTime();
KiFindRankBiasedIdleSmtSet();
KiFloatingErrorFault();
KiFloatingErrorFaultShadow();
KiFlushAddressSpaceTb();
KiFlushAffinity();
KiFlushCacheLines();
KiFlushCurrentRsb();
KiFlushCurrentTbOnly();
KiFlushCurrentTbWorker();
KiFlushProcessTbWorker();
KiFlushQueueApc();
KiFlushQueuedDpcsWorker();
KiFlushRangeAllCaches();
KiFlushRangeTb();
KiFlushRangeWorker();
KiFlushReadyLists();
KiFlushRsbTarget();
KiFlushSingleTbWorker();
KiFlushWriteBuffersTarget();
KiForceIdleParkUnparkDpcRoutine();
KiForceIdleParkUnparkProcessor();
KiForceIdleStartDpcRoutine();
KiForceIdleStopDpcRoutine();
KiForceIdleUpdateSchedulerParkState();
KiForceSymbolReferences();
KiForegroundTimerCallback();
KiForwardTick();
KiFreezeSingleThread();
KiFreezeTargetExecution();
KiGeneralProtectionFault();
KiGeneralProtectionFaultShadow();
KiGenerateHeteroSets();
KiGenericCallDpcWorker();
KiGetClockIntervalOneShot();
KiGetComparisonRanks();
KiGetCpuSetData();
KiGetCpuVendor();
KiGetCurrentGroupCount();
KiGetDeepIdleProcessors();
KiGetDueTimeWithThreadTimerDelay();
KiGetGdtIdt();
KiGetHalExtensionList();
KiGetHalExtensionModuleFromLinks();
KiGetHalNumaConversionFactor();
KiGetInterruptObjectAddress();
KiGetIptInfo();
KiGetL2L3AssociativityAmd();
KiGetLdtr();
KiGetLoadOptions();
KiGetNextTimerExpirationDueTime();
KiGetNtDdiVersion();
KiGetPastDueIRTimerInfo();
KiGetPendingTick();
KiGetProcessCpuSetMaskPointer();
KiGetProcessorInformation();
KiGetProcessorSignature();
KiGetSavedIptState();
KiGetSavedSupervisorState();
KiGetSystemServiceTraceTable();
KiGetTbLeafInfo();
KiGetThreadCpuSetMaskPointer();
KiGetThreadEffectiveRankNonZero();
KiGetThreadReadyTime();
KiGetTr();
KiGetTrapFrameMode();
KiGetXSaveSupportedFeatures();
KiGroupSchedulingGenerationEnd();
KiGroupSchedulingMoveThread();
KiGroupSchedulingQuantumEnd();
KiHandleBound();
KiHandleMcheck();
KiHeadlessDisplayString();
KiHeteroChooseTargetProcessor();
KiHvEnlightenedGuestPriorityKick();
KiHvInterrupt();
KiHvInterruptDispatch();
KiHvInterruptShadow();
KiHvInterruptSubDispatch();
KiHwPolicyFindDriverImage();
KiIdleLoop();
KiIdleSchedule();
KiInSwapProcesses();
KiInSwapSingleProcess();
KiIncrementConcurrencyCount();
KiInitDynamicProcessorIpi();
KiInitIptState();
KiInitMachineDependent();
KiInitPrcb();
KiInitSystem();
KiInitializeBootStructures();
KiInitializeCacheErrataSupport();
KiInitializeContextThread();
KiInitializeDescriptorIst();
KiInitializeDpcList();
KiInitializeDynamicProcessor();
KiInitializeDynamicProcessorDpc();
KiInitializeForceIdle();
KiInitializeIdleThread();
KiInitializeIdt();
KiInitializeKernel();
KiInitializeKernel$filt$0();
KiInitializeMTRR();
KiInitializeMutant();
KiInitializeNxSupportDiscard();
KiInitializePrcbContext();
KiInitializeProcessor();
KiInitializeProcessorGroupSchedulingData();
KiInitializeTimer2();
KiInitializeTimer2Data();
KiInitializeUserApc();
KiInitializeUserApc$filt$0();
KiInitializeVelocity();
KiInitializeXSave();
KiInitiateUserApc();
KiInsertDeferredPreemptionApc();
KiInsertDeferredReadyList();
KiInsertInterruptObjectOrdered();
KiInsertNonMaxOverQuotaScb();
KiInsertQueueApc();
KiInsertQueueDpc();
KiInsertQueueInternal();
KiInsertSchedulingGroupQueue();
KiInsertSecondarySignalList();
KiInsertTimer2();
KiInsertTimer2WithCollectionLockHeld();
KiInsertTimerTable();
KiIntRedirectConnnect();
KiIntRedirectQueueRequestOnProcessor();
KiIntSteerAssignCpuSet();
KiIntSteerCalculateDistribution();
KiIntSteerChooseInitialTargetProcessors();
KiIntSteerClearCpuSetAssignment();
KiIntSteerComputeCpuSet();
KiIntSteerConnect();
KiIntSteerDetermineSteeringEnabled();
KiIntSteerDisable();
KiIntSteerDistributeInterrupts();
KiIntSteerEtwEventEnabled();
KiIntSteerEventTraceControlCallback();
KiIntSteerInit();
KiIntSteerInitPrcb();
KiIntSteerLoadCompare();
KiIntSteerLogState();
KiIntSteerLogStatus();
KiIntSteerSetDestination();
KiIntSteerUpdateDeviceInterruptMask();
KiIntSteerVerifyDestination();
KiInterruptDispatch();
KiInterruptDispatchCommon();
KiInterruptDispatchNoEOI();
KiInterruptDispatchNoLock();
KiInterruptDispatchNoLockNoEtw();
KiInterruptHandler();
KiInterruptMessageDispatch();
KiInterruptSubDispatch();
KiInterruptSubDispatchNoLock();
KiInterruptSubDispatchNoLockNoEtw();
KiInterruptThunk();
KiIntersectFeaturesWithPolicy();
KiInvalidOpcodeFault();
KiInvalidOpcodeFaultShadow();
KiInvalidTssFault();
KiInvalidTssFaultShadow();
KiInvokeBugCheckAddTriageDumpDataCallbacks();
KiInvokeBugCheckEntryCallbacks();
KiInvokeInterruptServiceRoutine();
KiIpiGenericCallTarget();
KiIpiInterrupt();
KiIpiInterruptShadow();
KiIpiInterruptSubDispatch();
KiIpiProcessRequests();
KiIpiSendPacket();
KiIpiSendRequest();
KiIpiSendRequestEx();
KiIpiUpdateExtendedSupervisorState();
KiIpiUpdateThreadTag();
KiIsAddressRangeValid();
KiIsFlushEntire();
KiIsInterruptTypeSecondary();
KiIsKernelCfgActive();
KiIsKernelStackSwappable();
KiIsKvaLeakSimulated();
KiIsKvaShadowDisabled();
KiIsNXSupported();
KiIsNodeFull();
KiIsPrimaryPresent();
KiIsProcessTerminationRequested();
KiIsSafeBoot();
KiIsSecureProcessFlush();
KiIsThreadRankBiased();
KiIsThreadRankNonZero();
KiIsWinPEBoot();
KiIsXSaveFeatureAllowed();
KiIsrLinkage();
KiIsrThunk();
KiIsrThunkShadow();
KiKernelExit();
KiKernelIstExit();
KiKernelIstMceExit();
KiKernelIstMceExitEnd();
KiKernelIstMceExitMceTailMceBegin();
KiKernelIstMceExitMceTailMceEnd();
KiKernelIstMceExitMceTailNmiBegin();
KiKernelIstMceExitMceTailNmiEnd();
KiKernelIstMceExitStart();
KiKernelSysretExit();
KiLeaveCriticalRegionUnsafe();
KiLeaveGuardedRegionUnsafe();
KiLoadMTRRTarget();
KiLoadPolicyFromImage();
KiLockExtendedServiceTable();
KiLockServiceTable();
KiLockServiceTable$filt$0();
KiLockStepExecution();
KiMachineCheckControl();
KiMarkBugCheckRegions();
KiMaskInterruptDpc();
KiMaskInterruptInternal();
KiMaskSecondaryInterruptInternal();
KiMaskToLength();
KiMatchLoadOption();
KiMayStealStandbyThread();
KiMcaDeferredRecoveryService();
KiMceDispatch();
KiMceLinkage();
KiMceThunk();
KiMcheckAbort();
KiMcheckAbortShadow();
KiMcheckAlternateReturn();
KiMcheckExit();
KiMcheckExitMceTailMceBegin();
KiMcheckExitMceTailMceEnd();
KiMcheckExitMceTailNmiBegin();
KiMcheckExitMceTailNmiEnd();
KiMcheckFastForward();
KiMonitorCacheErrata();
KiMoveApcState();
KiMoveScbThreadsToNewReadylist();
KiNmiInterrupt();
KiNmiInterruptEnd();
KiNmiInterruptShadow();
KiNmiInterruptShadowEnd();
KiNmiInterruptShadowStart();
KiNmiInterruptStart();
KiNodeCostSort();
KiNonNumaQueryNodeCapacity();
KiNonNumaQueryNodeDistance();
KiNpxNotAvailableFault();
KiNpxNotAvailableFaultShadow();
KiNpxSegmentOverrunAbort();
KiNpxSegmentOverrunAbortShadow();
KiOpComputeLinearAddress();
KiOpDecode();
KiOpDecodeModRM();
KiOpFetchBytes();
KiOpFetchNextByte();
KiOpIsPrefix();
KiOpLocateDecodeEntry();
KiOpPatchCode();
KiOpPreprocessSecureFault();
KiOpRetrieveRegMemAddress();
KiOp_Div();
KiOp_INT();
KiOp_Illegal();
KiOp_MOVAPS();
KiOp_MOVDQA();
KiOp_PREFETCH3();
KiOp_Priv();
KiOp_SGDTSIDT();
KiOp_SLDTSTRSMSW();
KiOutSwapKernelStacks();
KiOutSwapProcesses();
KiOverflowTrap();
KiOverflowTrapShadow();
KiPageFault();
KiPageFaultShadow();
KiParkUmsThread();
KiParkUmsThread$filt$0();
KiParkUmsThread$filt$1();
KiParseLoadOptions();
KiPassiveIsrWatchdog();
KiPcToFileHeader();
KiPerformGroupConfiguration();
KiPollFreezeExecution();
KiPrcbInGroupAffinity();
KiPrepareFlushCurrentAffinity();
KiPrepareFlushParameters();
KiPrepareReadyThreadForRescheduling();
KiPreprocessFault();
KiPreprocessFlushTb();
KiPriQueueThreadPriorityChanged();
KiProcessControlProtection();
KiProcessDisconnectList();
KiProcessExpiredTimerList();
KiProcessNMI();
KiProcessPendingDisconnect();
KiProcessPendingForegroundBoosts();
KiProcessProfileList();
KiProcessSecondarySignalList();
KiProcessThreadWaitList();
KiProcessorCallbackNop();
KiQuantumEnd();
KiQueryEffectivePriorityThread();
KiQueryIptSupport();
KiQueryProcessorNode();
KiQueryProximityNode();
KiQueryUnbiasedInterruptTime();
KiQueueReadyThread();
KiRaiseAssertion();
KiRaiseAssertionShadow();
KiRaiseException();
KiRaiseSecurityCheckFailure();
KiRaiseSecurityCheckFailureShadow();
KiReadFixedMtrr();
KiReadGuestSchedulerAssistPriority();
KiReadKernelDr7();
KiReadyDeferredReadyList();
KiReadyOutSwappedThreads();
KiReadyThread();
KiRecomputeGroupSchedulingRank();
KiReduceByEffectiveIdleSmtSet();
KiRegisterNmiSxCallback();
KiReleaseQueuedSpinLockInstrumented();
KiReleaseSpinLockInstrumented();
KiReleaseThreadLockSafe();
KiReleaseThreadStateLock();
KiRemoveBoostThread();
KiRemoveEntryTimer();
KiRemovePrcbWaitEntry();
KiRemoveProcessorFromGroupDatabase();
KiRemoveQueueApc();
KiRemoveSchedulingGroupQueue();
KiRemoveSystemWorkPriorityKick();
KiRemoveThreadFromAnyReadyQueue();
KiRemoveThreadFromReadyQueue();
KiRemoveThreadFromScbQueue();
KiRemoveThreadFromSchedulingGroup();
KiRemoveThreadFromSharedReadyQueue();
KiRemoveTimer2();
KiRequestProcessInSwap();
KiRequestSoftwareInterrupt();
KiRequestTimer2Expiration();
KiRescheduleThreadAfterAffinityChange();
KiResetBootProcessorApicMask();
KiResetClockInterval();
KiResetForceIdle();
KiResetGlobalDpcWatchdogProfiler();
KiResetProcessorTraceBuffer();
KiResetScb();
KiResortScbQueue();
KiRestoreClockTickRate();
KiRestoreDebugRegisterState();
KiRestoreFeatureBits();
KiRestoreIptState();
KiRestoreProcessorControlState();
KiRestoreProcessorState();
KiRestoreSetContextState();
KiRestoreThreadIptState();
KiRestoreUchFromUmsContext();
KiRestoreXSaveSupport();
KiResumeClockTimer();
KiResumeThread();
KiResumeUmsThread();
KiRetireDpcList();
KiRspInIstStack();
KiRundownMutants();
KiSanitizeProfileInterval();
KiSatisfyThreadWait();
KiSaveCurrentEtwTraceBuffer();
KiSaveDebugRegisterState();
KiSaveInitialProcessorControlState();
KiSaveIptState();
KiSaveNpxState();
KiSaveProcessorControlState();
KiSaveProcessorState();
KiSaveThreadIptState();
KiScanBugCheckCallbackList();
KiScanInterruptObjectList();
KiScanQueues();
KiScheduleNextForegroundBoost();
KiSchedulerApc();
KiSchedulerApcNop();
KiSchedulerApcRundown();
KiSchedulerApcTerminate();
KiSchedulerDpc();
KiSearchForNewThread();
KiSearchForNewThreadOnProcessor();
KiSegmentNotPresentFault();
KiSegmentNotPresentFaultShadow();
KiSelectActiveTimerTable();
KiSelectCandidateProcessor();
KiSelectIdealProcessor();
KiSelectIdleProcessor();
KiSelectLowestRankedThread();
KiSelectNextThread();
KiSelectProcessorToPreempt();
KiSelectReadyThread();
KiSelectReadyThreadEx();
KiSelectThreadFromScbQueue();
KiSelectThreadFromSchedulingGroup();
KiSendClockInterruptToClockOwner();
KiSendFreeze();
KiSendHeteroRescheduleIntRequest();
KiSendHeteroRescheduleIntRequestHelper();
KiSendSoftwareInterrupt();
KiSendThawExecution();
KiServiceInternal();
KiServiceLinkage();
KiServiceTablesLocked();
KiSetAddressPolicy();
KiSetAffinityThread();
KiSetBasePriorityAndClearDecrement();
KiSetCacheInformation();
KiSetCacheInformationAmd();
KiSetCacheInformationIntel();
KiSetClockInterval();
KiSetClockIntervalToMinimumRequested();
KiSetClockTickRate();
KiSetDebuggerOwner();
KiSetFeatureBits();
KiSetForceIdleState();
KiSetHardwareSpeculationControlFeatures();
KiSetHeteroPolicyThread();
KiSetIdealNodeProcessByGroup();
KiSetIntervalWorker();
KiSetLockOwnershipQuantum();
KiSetPageAttributesTable();
KiSetPendingTick();
KiSetPriorityBoost();
KiSetPriorityFloor();
KiSetPriorityThread();
KiSetProcessorIdle();
KiSetProcessorSignature();
KiSetSchedulerAssistPriority();
KiSetSpecCtrlNmi();
KiSetStandardizedCacheInformation();
KiSetSwitchingNpxState();
KiSetSystemAffinityThread();
KiSetSystemAffinityThreadToProcessor();
KiSetSystemTimeDpc();
KiSetThreadSchedulingGroup();
KiSetThreadState();
KiSetTimerEx();
KiSetUserTbFlushPending();
KiSetVirtualHeteroClockIntervalRequest();
KiSetVirtualHeteroClockIntervalRequestDpcRoutine();
KiSetVpThreadSpinLockCount();
KiSetVpThreadSystemWork();
KiSetupForInstrumentationReturn();
KiSetupTimeIncrement();
KiShadowProcessorAllocation();
KiShouldActivateHRTimerClock();
KiShouldPreemptionBeDeferred();
KiShouldScanSharedReadyQueue();
KiShuffleAssignedNodes();
KiSignalThread();
KiSignalThreadForApc();
KiSignalWaitDisconnectLock();
KiSpuriousDispatchNoEOI();
KiStackAttachProcess();
KiStackFault();
KiStackFaultShadow();
KiStartDebugAccumulation();
KiStartDpcThread();
KiStartDynamicProcessor();
KiStartProfileTarget();
KiStartSavingSupervisorState();
KiStartSystemThread();
KiStartThreadCycleAccumulation();
KiStartUserThread();
KiStartUserThreadReturn();
KiStopProfileTarget();
KiSuspendThread();
KiSuspendUmsThread();
KiSwInterrupt();
KiSwInterruptDispatch();
KiSwInterruptPresent();
KiSwInterruptShadow();
KiSwapContext();
KiSwapDirectoryTableBaseTarget();
KiSwapProcess();
KiSwapThread();
KiSwapToUmsThread();
KiSwapToUmsThreadContinue();
KiSwitchKernelStackAndCallout();
KiSwitchKernelStackContinue();
KiSwitchPriQueue();
KiSwitchQueue();
KiSynchCounterSetCallback();
KiSynchNumaCounterSetCallback();
KiSynchronizeAddressPolicyTarget();
KiSynchronizePassiveInterruptExecution();
KiSynchronizeSecurityDomainTarget();
KiSynchronizeStibpPairing();
KiSynchronizeStibpPairingTarget();
KiSystemCall32();
KiSystemCall32Shadow();
KiSystemCall32ShadowCommon();
KiSystemCall64();
KiSystemCall64Shadow();
KiSystemCall64ShadowCommon();
KiSystemService();
KiSystemService32User();
KiSystemServiceCopyEnd();
KiSystemServiceCopyStart();
KiSystemServiceExit();
KiSystemServiceExitPico();
KiSystemServiceGdiTebAccess();
KiSystemServiceHandler();
KiSystemServiceRepeat();
KiSystemServiceShadow();
KiSystemServiceStart();
KiSystemServiceTraceTableCompareFunction();
KiSystemServiceUser();
KiSystemStartup();
KiTestForAlertPending();
KiThawSingleThread();
KiTimer2ComputeDueTime();
KiTimer2Expiration();
KiTimerDispatch();
KiTimerExpiration();
KiTimerExpirationDpc();
KiTimerWaitTest();
KiTpAccessMemory();
KiTpDecodeModRm();
KiTpDecodeModRmOperand();
KiTpEmulateGroup0Instruction();
KiTpEmulateGroup11Instruction();
KiTpEmulateGroup1Instruction();
KiTpEmulateInstruction();
KiTpEmulateMovRegImm();
KiTpEmulateMovzx();
KiTpEmulateRegisterPushPop();
KiTpFetchImmediateOperand();
KiTpFetchInstructionBytes();
KiTpGetRegisterAddressByIndex();
KiTpHandleTrap();
KiTpParseInstruction();
KiTpParseInstructionPrefix();
KiTpReadImageData();
KiTpReadOperandValue();
KiTpSetFlagsAdd();
KiTpSetFlagsSub();
KiTpSetFlagsZeroSignParity();
KiTpSetImmediateOperandSize();
KiTpSetupCompletion();
KiTpSignExtendOperandValue();
KiTpWriteMemory();
KiTpWriteRegisterValue();
KiTraceCancelTimer2();
KiTraceSetTimer();
KiTraceSetTimer2();
KiTrackSystemCallEntry();
KiTrackSystemCallExit();
KiTransitionSchedulingGroupGeneration();
KiTriggerForegroundBoostDpc();
KiTryScheduleNextForegroundBoost();
KiTryToAcquirePrcbLock();
KiTryToAcquireQueuedSpinLockInstrumented();
KiTryToAcquireSpinLockInstrumented();
KiTryToAcquireThreadLock();
KiTryToEndDpcProcessing();
KiTryToUpdateVPBackingThreadPriority();
KiTryUnwaitThread();
KiTryUnwaitThreadWithPriority();
KiUmsCallEntry();
KiUmsCallEntryContinue();
KiUmsExceptionEntry();
KiUmsExceptionFilter();
KiUmsExit();
KiUmsFastReturnToUser();
KiUmsRestoreUch();
KiUmsTrapEntry();
KiUmsTrapEntryContinue();
KiUncommitNodeAssignment();
KiUnlockKobjectArray();
KiUnmaskSecondaryInterruptInternal();
KiUnshadowProcessorAllocation();
KiUnstackDetachProcess();
KiUpdateChildrenCpuTarget();
KiUpdateCpuTargetByRate();
KiUpdateCpuTargetByWeight();
KiUpdateGlobalCpuSetConfiguration();
KiUpdateMinimumWeight();
KiUpdateNodeAffinitizedFlag();
KiUpdateNumberProcessors();
KiUpdateNumberProcessorsIpi();
KiUpdatePriorityMatrixThreadState();
KiUpdateProcessorCount();
KiUpdateSavedSupervisorState();
KiUpdateSharedReadyQueueAffinityThread();
KiUpdateSpecCtrlEnhancedIBRS();
KiUpdateSpeculationControl();
KiUpdateStibpPairing();
KiUpdateSystemTime();
KiUpdateThreadCpuSetAffinitiesFromDpcLevel();
KiUpdateThreadCpuSetAffinitiesProcess();
KiUpdateThreadCpuSets();
KiUpdateThreadPriority();
KiUpdateTimeAssist();
KiUpdateTimer2Flags();
KiUpdateTotalCyclesCurrentThread();
KiUpdateVPBackingThreadPriority();
KiUpdateXSaveSizeAndVolatileFeatures();
KiValidateComponentName();
KiValidateCpuSetMasks();
KiValidateTriageDumpDataArray();
KiVerifyPdata();
KiVerifyScopesExecute();
KiVerifyXcpt0();
KiVerifyXcpt0$filt$1();
KiVerifyXcpt0$fin$0();
KiVerifyXcpt1();
KiVerifyXcpt1$filt$1();
KiVerifyXcpt1$fin$0();
KiVerifyXcpt10();
KiVerifyXcpt10$filt$3();
KiVerifyXcpt10$filt$6();
KiVerifyXcpt10$fin$0();
KiVerifyXcpt10$fin$1();
KiVerifyXcpt10$fin$2();
KiVerifyXcpt10$fin$4();
KiVerifyXcpt10$fin$5();
KiVerifyXcpt10$fin$7();
KiVerifyXcpt10$fin$8();
KiVerifyXcpt10$fin$9();
KiVerifyXcpt11();
KiVerifyXcpt11$filt$0();
KiVerifyXcpt11$fin$1();
KiVerifyXcpt11$fin$2();
KiVerifyXcpt12();
KiVerifyXcpt12$filt$3();
KiVerifyXcpt12$filt$4();
KiVerifyXcpt12$fin$0();
KiVerifyXcpt12$fin$1();
KiVerifyXcpt12$fin$2();
KiVerifyXcpt12$fin$5();
KiVerifyXcpt12$fin$6();
KiVerifyXcpt13();
KiVerifyXcpt13$filt$3();
KiVerifyXcpt13$fin$0();
KiVerifyXcpt13$fin$1();
KiVerifyXcpt13$fin$2();
KiVerifyXcpt14();
KiVerifyXcpt14$filt$0();
KiVerifyXcpt14$fin$1();
KiVerifyXcpt14$fin$2();
KiVerifyXcpt15();
KiVerifyXcpt2();
KiVerifyXcpt2$filt$2();
KiVerifyXcpt2$fin$0();
KiVerifyXcpt2$fin$1();
KiVerifyXcpt3();
KiVerifyXcpt3$filt$2();
KiVerifyXcpt3$fin$0();
KiVerifyXcpt3$fin$1();
KiVerifyXcpt4();
KiVerifyXcpt4$filt$2();
KiVerifyXcpt4$fin$0();
KiVerifyXcpt4$fin$1();
KiVerifyXcpt5();
KiVerifyXcpt5$filt$2();
KiVerifyXcpt5$fin$0();
KiVerifyXcpt5$fin$1();
KiVerifyXcpt6();
KiVerifyXcpt6$filt$1();
KiVerifyXcpt6$filt$3();
KiVerifyXcpt6$fin$0();
KiVerifyXcpt6$fin$2();
KiVerifyXcpt7();
KiVerifyXcpt7$filt$1();
KiVerifyXcpt7$filt$3();
KiVerifyXcpt7$fin$0();
KiVerifyXcpt7$fin$2();
KiVerifyXcpt8();
KiVerifyXcpt8$filt$1();
KiVerifyXcpt8$filt$3();
KiVerifyXcpt8$fin$0();
KiVerifyXcpt8$fin$2();
KiVerifyXcpt9();
KiVerifyXcpt9$filt$1();
KiVerifyXcpt9$filt$3();
KiVerifyXcpt9$fin$0();
KiVerifyXcpt9$fin$2();
KiVerifyXcptFilter();
KiVerifyXcptFinally();
KiVerifyXcptFinally$fin$0();
KiVerifyXcptFinally$fin$1();
KiVirtualizationException();
KiVirtualizationExceptionShadow();
KiVmbusInterrupt0();
KiVmbusInterrupt0Shadow();
KiVmbusInterrupt1();
KiVmbusInterrupt1Shadow();
KiVmbusInterrupt2();
KiVmbusInterrupt2Shadow();
KiVmbusInterrupt3();
KiVmbusInterrupt3Shadow();
KiVmbusInterruptDispatch();
KiVmbusInterruptSubDispatch();
KiWaitForAllObjects();
KiWaitForContextSwap();
KiWaitForReboot();
KiWaitSatisfyMutant();
KiWaitSatisfyOther();
KiWakeOtherQueueWaiters();
KiWakePriQueueWaiter();
KiWakeQueueWaiter();
KiWriteCpuSetMasks();
KiWriteFixedMtrr();
KiXSavesManagesIpt();
KiXmmException();
KiXmmExceptionShadow();
KitLogFeatureUsage();
KitpInitAitSampleRate();
KitpOpenRegKey();
KitpReadUlongFromKey();
KseAddHardwareId();
KseDriverLoadImage();
KseDriverScopeInitialize();
KseDriverUnloadImage();
KseDsCallbackHookAddDevice();
KseDsCallbackHookDriverStartIo();
KseDsCallbackHookDriverUnload();
KseDsCallbackHookIrpDeviceControlFunction();
KseDsCallbackHookIrpFunction();
KseDsCallbackHookIrpInternalDeviceControlFunction();
KseDsCallbackHookIrpPnpFunction();
KseDsCallbackHookIrpPowerFunction();
KseDsCompletionHookForPowerDevice();
KseDsCompletionHookForStartDevice();
KseDsCompletionHookForStopDevice();
KseDsHookDriverTargeted();
KseDsHookDriverUntargeted();
KseDsHookExAllocatePool();
KseDsHookExAllocatePoolWithTag();
KseDsHookExFreePool();
KseDsHookExFreePoolWithTag();
KseDsHookIoCreateDevice();
KseDsHookPoRequestPowerIrp();
KseGetIoCallbacks();
KseHookMmGetVirtualForPhysical();
KseHookMmMapIoSpace();
KseHookQueryValueKey();
KseInitialize();
KseLookupHardwareId();
KseQueryDeviceData();
KseQueryDeviceDataList();
KseQueryDeviceFlags();
KseRegisterShim();
KseRegisterShimEx();
KseResetDeviceCache();
KseSetCompletionHook();
KseSetDeviceFlags();
KseShimDatabaseBootInitialize();
KseShimDatabaseBootRelease();
KseShimDatabaseClose();
KseShimDatabaseOpen();
KseShimDriverIoCallbacks();
KseSkipDriverUnloadCallbackHookDriverUnload();
KseSkipDriverUnloadHookDriverTargeted();
KseSkipDriverUnloadHookDriverUntargeted();
KseUnregisterShim();
KseVersionLieInitialize();
KsepApplyShimsToDriver();
KsepCacheDeviceEqual();
KsepCacheDeviceFree();
KsepCacheDeviceHash();
KsepCacheDeviceInsertData();
KsepCacheDeviceQueryData();
KsepCacheHwIdEqual();
KsepCacheHwIdFree();
KsepCacheHwIdHash();
KsepCacheInitialize();
KsepCacheInsert();
KsepCacheLookup();
KsepCacheReset();
KsepCacheUninitialize();
KsepCompletionSafeWrapper();
KsepDbCacheInsertDevice();
KsepDbCacheQueryDevice();
KsepDbCacheQueryDeviceData();
KsepDbCacheQueryDeviceDataList();
KsepDbCacheReadDevice();
KsepDbFreeDriverShims();
KsepDbGetDriverShims();
KsepDbGetSdbString();
KsepDbGetShimInfo();
KsepDbQueryRegistryDeviceData();
KsepDbQueryRegistryDeviceDataList();
KsepDbReadKData();
KsepDbReadKFlag();
KsepDebugPrint();
KsepDriverPathTail();
KsepDsEventAddDevice();
KsepDsEventDataIrp();
KsepDsEventDevicePowerCompleted();
KsepDsEventDevicePowerIrp();
KsepDsEventDriverLoad();
KsepDsEventDriverStartIo();
KsepDsEventDriverUnload();
KsepDsEventIoCreateDevice();
KsepDsEventPnpIrp();
KsepDsEventPnpStartDevice();
KsepDsEventPnpStopDevice();
KsepDsEventPoolAllocate();
KsepDsEventPoolFree();
KsepDsEventRequestPowerIrp();
KsepDsEventSystemPowerIrp();
KsepEngineGetShimsFromRegistry();
KsepEngineInitialize();
KsepEngineReadFlags();
KsepEvntLogFlagsApplied();
KsepEvntLogShimsApplied();
KsepGetLoadedModulesList();
KsepGetModuleInfoByAddress();
KsepGetModuleInfoByName();
KsepGetShimCallbacksForDriver();
KsepGetShimsForDriver();
KsepIsModuleShimmed();
KsepIsShimRegistered();
KsepLoadShimProvider();
KsepLogError();
KsepLogEtwMessage();
KsepLogInfo();
KsepMatchInitAcpiOemInfo();
KsepMatchInitBiosInfo();
KsepMatchInitMachineInfo();
KsepPatchDriverImportsTable();
KsepPatchImportTableEntry();
KsepPoolAllocateNonPaged();
KsepPoolAllocatePaged();
KsepPoolFreeNonPaged();
KsepPoolFreePaged();
KsepRegistryCloseKey();
KsepRegistryCreateKey();
KsepRegistryEnumValue();
KsepRegistryOpenKey();
KsepRegistryQueryDWORD();
KsepRegistryQueryDriverShims();
KsepRegistryQueryKeyInformation();
KsepRegistryQueryMULTISZ();
KsepRegistryQuerySZ();
KsepRegistryQueryValue();
KsepResolveApplicableShimsForDriver();
KsepResolveShimHooks();
KsepShimDbChanged();
KsepShimDbMapToMemory();
KsepShimDbUnmapFromMemory();
KsepSkipDriverUnloadEventDriverLoad();
KsepSkipDriverUnloadEventDriverUnload();
KsepStringAnsiToUnicode();
KsepStringConcatenate();
KsepStringDuplicate();
KsepStringDuplicateUnicode();
KsepStringFree();
KsepStringSplitMultiString();
KsepStringTransform();
KsepValidateShimProviderAndData();
KvfCommitFeatureStates();
KxAcquireQueuedSpinLock();
KxAcquireSpinLock();
KxContextToKframes();
KxDebugTrapOrFault();
KxDispatchInterrupt();
KxFlushEntireTb();
KxFlushNonGlobalTb();
KxFlushSingleTb();
KxInitializeProcessorState();
KxIsrLinkage();
KxIsrLinkageShadow();
KxMcheckAbort();
KxMcheckAlternateReturn();
KxMcheckAlternateReturnShadow();
KxNmiInterrupt();
KxReleaseQueuedSpinLock();
KxReleaseSpinLock();
KxRetireDpcList();
KxSetAddressPolicy();
KxSetTimeStampBusy();
KxStartSystemThread();
KxStartUserThread();
KxSwitchKernelStackCallout();
KxTryToAcquireQueuedSpinLock();
KxTryToAcquireSpinLock();
KxUnexpectedInterrupt0();
KxWaitForLockChainValid();
KxWaitForLockOwnerShip();
KxWaitForLockOwnerShipWithIrql();
KxWaitForSpinLockAndAcquire();
KyRetireDpcList();
KyStartUserThread();
KySwitchKernelStackCallout();
KzInitializeSpinLock();
KzLowerIrql();
KzRaiseIrql();
KzSetIrqlUnsafe();
LOCK_ADDRESS_SPACE();
LOCK_ADDRESS_SPACE_SHARED();
LOCK_HIVE_LOAD();
LOCK_PAGE_TABLE_COMMITMENT();
LOCK_TRANSACTION_LIST();
LZNT1CompressChunk();
LZNT1DecompressChunk();
LZNT1DecompressChunkNewThread();
LZNT1DecompressChunkWorkItem();
LZNT1FindMatchMaximum();
LZNT1FindMatchStandard();
LdrAccessResource();
LdrApplyDynamicRelocations();
LdrEnumResources();
LdrFindResourceDirectory_U();
LdrFindResourceEx_U();
LdrFindResource_U();
LdrImageDirectoryEntryToLoadConfig();
LdrInitSecurityCookie();
LdrIsResItemExist();
LdrLoadAlternateResourceModuleEx();
LdrProcessRelocationBlockLongLong();
LdrRelocateImage();
LdrRelocateImageWithBias();
LdrResFallbackLangList();
LdrResFindResource();
LdrResFindResourceDirectory();
LdrResGetRCConfig();
LdrResSearchResource();
LdrRscIsTypeExist();
LdrUnloadAlternateResourceModule();
LdrUnloadAlternateResourceModuleEx();
LdrUnloadAlternateResourceModuleEx$fin$0();
LdrpAccessResourceData();
LdrpAccessResourceDataNoMultipleLanguage();
LdrpArmProcessRelocation();
LdrpCompareResourceNames_U();
LdrpFetchAddressOfSecurityCookie();
LdrpFindMessageInAlternateModule();
LdrpGenericProcessRelocation();
LdrpGetAlternateResourceModuleHandleEx();
LdrpGetAlternateResourceModuleHandleEx$fin$0();
LdrpGetFromMUIMemCache();
LdrpGetFromMUIMemCache$fin$0();
LdrpGetImageSize();
LdrpGetMappingFromCacheEntry();
LdrpGetParentLangId();
LdrpGetRcConfig();
LdrpGetResourceFileName();
LdrpInitMuiCrits();
LdrpKrnGetDataTableEntry();
LdrpLoadResourceFromAlternativeModule();
LdrpMapResourceFile();
LdrpOpenKey();
LdrpQueryValueKey();
LdrpResCompareResourceNames();
LdrpResGetMappingSize();
LdrpResGetResourceDirectory();
LdrpResSearchResourceInsideDirectory();
LdrpResSearchResourceMappedFile();
LdrpSearchResourceSection_U();
LdrpSectionTableFromVirtualAddress();
LdrpSetAlternateResourceModuleHandle();
LdrpSetAlternateResourceModuleHandle$fin$0();
LdrpThumbProcessRelocation();
LdrpVerifyAlternateResourceModuleEx();
LocalConvertAclToString();
LocalConvertSDToStringSD_Rev1();
LocalConvertSidToStringSidW();
LocalConvertStringSDToSD_Rev1();
LocalGetAceCondition();
LocalGetAceCount();
LocalGetAclForString();
LocalGetConditionForString();
LocalGetRelativeAttributeForString();
LocalGetSDControlForString();
LocalGetSDDLDeliminator();
LocalGetSidForString();
LocalGetStringForControl();
LocalGetStringForRelativeAttribute();
LocalGetStringForSid();
LocalpConvertStringSidToSid();
LocalpGetStringForCondition();
LockShutdownShared();
LogFwInitialize();
LogFwReport();
LogFwStat();
LogFwpRegisterWorker();
LookUpTableFlushComplete();
LookUpTableFlushPartial();
LookupAccessMaskInTable();
LookupAceFlagsInTable();
LookupAceTypeInTable();
LookupSidInTable();
LpcExitProcess();
LpcReplyWaitReplyPort();
LpcRequestPort();
LpcRequestWaitReplyPort();
LpcRequestWaitReplyPortEx();
LpcSendWaitReceivePort();
LpcpReplyWaitReplyPort();
LpcpRequestWaitReplyPort();
LsaCallAuthenticationPackage();
LsaDeregisterLogonProcess();
LsaFreeReturnBuffer();
LsaLogonUser();
LsaLookupAuthenticationPackage();
LsaRegisterLogonProcess();
MBR_ENTRY::ComputeChs();
MBR_ENTRY::Validate();
MBR_HEADER::CheckSum();
MIDL_user_allocate();
MIDL_user_free();
MI_CLEAR_RESET_PTE();
MI_INTERLOCKED_EXCHANGE_PTE();
MI_IS_PHYSICAL_ADDRESS();
MI_IS_PTE_IN_WS_SWAP_SET();
MI_IS_RESET_PTE();
MI_IS_SOFTWARE_PTE_SHADOW_STACK();
MI_LOCK_RELOCATIONS_EXCLUSIVE();
MI_MAKE_PROTECT_WRITE_COPY();
MI_PAGEFILE_WRITE();
MI_PROTO_FORMAT_COMBINED();
MI_READ_PTE_LOCK_FREE();
MI_TIGHTER_PERMISSIONS();
MI_UNLOCK_RELOCATIONS_EXCLUSIVE();
MI_WRITE_INVALID_PTE_TB_FLUSH_NEEDED();
MI_WSLE_LOG_ACCESS();
MUIBugCheck();
MUIInitializeResourceLock();
MUIRegistrySystemRoutine();
MakeGdtReadOnly();
MapCmDevicePropertyToNtProperty();
MatchAll();
McGenControlCallbackV2();
McGenEventRegister();
McGenEventWrite();
McTemplateK0d();
McTemplateK0dz();
McTemplateK0dzd();
McTemplateK0hzr0();
McTemplateK0hzr0qqhzr4();
McTemplateK0j();
McTemplateK0jq();
McTemplateK0jzt();
McTemplateK0p();
McTemplateK0pqzzzzzzz();
McTemplateK0pz();
McTemplateK0q();
McTemplateK0qhzr1z();
McTemplateK0xxxqq();
McTemplateK0xxxqqqq();
McTemplateK0z();
McTemplateK0zd();
McTemplateK0zdq();
McTemplateK0zjdd();
McTemplateK0zzjzitd();
McTemplateK0zzjzzzdd();
McTemplateK0zzjzzztzdzztdz();
McTemplateK0zzt();
MdlInvariantFindMdlInfo();
MdlInvariantInsertMdlInfo();
MdlInvariantPostDriverCompletion();
MdlInvariantPostProcessing1();
MdlInvariantPreProcessing1();
MetroHash64::Hash();
MfgInitSystem();
MiAbortCombineScan();
MiAccessCheck();
MiAcquireNonPagedResources();
MiAcquireNonPagedResourcesForce();
MiActOnMirrorBitmap();
MiActOnPartitionNodePages();
MiActOnPte();
MiActivePageClaimCandidate();
MiAddColdPagesToHotRanges();
MiAddExpansionNonPagedPool();
MiAddLoaderHalIoMappings();
MiAddLoaderHalIoPte();
MiAddLockedPageCharge();
MiAddMappedPtes();
MiAddMdlPageToTradeBlock();
MiAddMdlToPartitionTree();
MiAddMdlTracker();
MiAddNonSecuredPagesToDump();
MiAddPageToHeatRanges();
MiAddPagesToEnclave();
MiAddPhysicalMemory();
MiAddPhysicalMemoryChunks();
MiAddPhysicalPagesToCrashDump();
MiAddPrivateFixupEntryForSystemImage();
MiAddRangeToCrashDump();
MiAddRangeToPartitionTree();
MiAddSecureEntry();
MiAddSubRegionEntropy();
MiAddSystemPageTableToList();
MiAddToReservationCluster();
MiAddTriageDumpPtes();
MiAddViewsForSection();
MiAddWorkingSetEntries();
MiAddZeroingThreads();
MiAddressToRetpolineBit();
MiAdjustCachedStacks();
MiAdjustFaultList();
MiAdjustModifiedPageLoad();
MiAdjustPteBins();
MiAdvanceFaultList();
MiAdvanceVadHint();
MiAdvanceVadView();
MiAgePte();
MiAgePteWorker();
MiAgeWorkingSet();
MiAgeWorkingSetEPTCallback();
MiAgeWorkingSetTail();
MiAllocateAccessLog();
MiAllocateAweInfo();
MiAllocateChildVads();
MiAllocateCombineProto();
MiAllocateContiguousMemory();
MiAllocateCrcList();
MiAllocateDriverPage();
MiAllocateDummyPage();
MiAllocateEnclaveVad();
MiAllocateFileExtents();
MiAllocateFixupVad();
MiAllocateFromSubAllocatedRegion();
MiAllocateHotPatchPageBitMap();
MiAllocateHotPatchRecord();
MiAllocateHyperSpace();
MiAllocateImportList();
MiAllocateInPageSupport();
MiAllocateKernelCfgBitmapPageTables();
MiAllocateKernelStackPages();
MiAllocateLargeZeroPages();
MiAllocateMappedWriterMdls();
MiAllocateMdlPagesByLists();
MiAllocateModWriterEntry();
MiAllocateNewSubAllocatedRegion();
MiAllocatePagedPoolPages();
MiAllocatePagesForMdl();
MiAllocatePartitionId();
MiAllocatePartitionPhysicalPages();
MiAllocatePerSessionProtos();
MiAllocatePfnRepurposeLogDispatch();
MiAllocatePoolPages();
MiAllocateProcessShadow();
MiAllocateProcessVads();
MiAllocateSlabEntry();
MiAllocateTempLoaderEntry();
MiAllocateTopLevelPage();
MiAllocateVad();
MiAllocateVirtualMemory();
MiAllocateVirtualMemoryCommon();
MiAllocateVirtualMemoryPrepare();
MiAllocateWorkingSetSwapSupport();
MiAllocateWsle();
MiAllocatingNonPagedPoolVa();
MiAllowGuardFault();
MiAllowImageMap();
MiAllowProtectionChange();
MiAllowWorkingSetExpansion();
MiAppendSubsectionChain();
MiAppendWsleCluster();
MiApplyBytestreamFixup();
MiApplyCommitDelay();
MiApplyCompressedFixups();
MiApplyDriverHotPatch();
MiApplyDynamicRelocations();
MiApplyHotPatchToDriver();
MiApplyHotPatchToLoadedDriver();
MiApplyImageHotPatch();
MiApplyImageHotPatchDpc();
MiApplyImportOptimizationToBootDrivers();
MiApplyImportOptimizationToRuntimeDriver();
MiApplyRawFixups();
MiApplyRequiredDriverHotPatches();
MiApplyRetpolineFixups();
MiApplyRetpolineFixupsToKernelAndHal();
MiApplyRetpolineToBootDrivers();
MiApplyStraddleFixups();
MiArbitraryCodeBlocked();
MiAreChargesNeededToLockPage();
MiArePageContentsZero();
MiAssembleLargePagePfnList();
MiAssignInitialPageAttribute();
MiAssignNonPagedPoolPtes();
MiAssignSessionRanges();
MiAssignSharedUserRanges();
MiAssignSystemVa();
MiAssignTopLevelRanges();
MiAttachSession();
MiAttachThreadDone();
MiAttachToOwningSession();
MiAttemptCoalesce();
MiAttemptPageFileExtension();
MiAttemptPageFileReduction();
MiAttemptPageFileReductionApc();
MiAttemptSectionDelete();
MiAweControlArea();
MiAweViewInserter();
MiBackSingleImageWithPagefile();
MiBackSystemImageWithPagefile();
MiBadMemoryLogger();
MiBadRefCount();
MiBeginHoldingDirtyFaults();
MiBeginPageAccessor();
MiBeginProcessClean();
MiBitmapRangeZero();
MiBitmapsCachedEntryLengthChanged();
MiBuildDynamicRegion();
MiBuildForkPageTable();
MiBuildForkPte();
MiBuildImageControlArea();
MiBuildImportsForBootDrivers();
MiBuildMappedCluster();
MiBuildMdlForMappedFileFault();
MiBuildNewCloneDescriptor();
MiBuildPagedPool();
MiBuildReservationCluster();
MiBuildWakeList();
MiBytesToMapSystemImage();
MiCacheImageSymbols();
MiCallCreateSectionFilters();
MiCanDeleteEnclave();
MiCanFileBeTruncatedInternal();
MiCanFlushMakeProgress();
MiCanGrantExecute();
MiCanMergeTbFlushEntryBackwards();
MiCanPageMove();
MiCanStealKernelStack();
MiCancelPhase0Locking();
MiCaptureAllWorkingSetAccessBits();
MiCaptureAllocateMapExtendedParameters();
MiCaptureAllocateMapExtendedParameters$filt$0();
MiCaptureAndResetWorkingSetAccessBits();
MiCaptureDeleteHierarchy();
MiCaptureDirtyBitToPfn();
MiCaptureDynamicRelocationTableRva();
MiCaptureImageCfgContext();
MiCaptureImageExceptionValues();
MiCapturePageFileInfoInline();
MiCapturePfnVm();
MiCaptureProtectionFromLockedProto();
MiCaptureRetpolineImportInfo();
MiCaptureRetpolineRelocationTables();
MiCaptureSectionCreateExtendedParameters();
MiCaptureSectionCreateExtendedParameters$filt$0();
MiCaptureSecureImageBaseAddress();
MiCaptureUlongPtrArray();
MiCaptureWriteWatchDirtyBit();
MiCauseOverCommitPopup();
MiCfgInitializeProcess();
MiCfgMarkValidEntries();
MiChangeAwePageAttributes();
MiChangePageAttribute();
MiChangePageAttributeBatch();
MiChangingSubsectionProtos();
MiChargeCommit();
MiChargeForLockedPage();
MiChargeForWriteInProgressPage();
MiChargeFullProcessCommitment();
MiChargeLargeProtoSubsection();
MiChargePartitionResidentAvailable();
MiChargeProcessCommitment();
MiChargeProcessPhysicalPages();
MiChargeResident();
MiChargeSegmentCommit();
MiChargeSystemImageCommitment();
MiCheckAndProcessCcAccessLog();
MiCheckAndUpdateIoAttribution();
MiCheckAndUpdatePagingFileMinimum();
MiCheckCommitReleaseFromVad();
MiCheckControlArea();
MiCheckDosCalls();
MiCheckFatalAccessViolation();
MiCheckForConflictingVad();
MiCheckForConflictingVadExistence();
MiCheckForControlAreaDeletion();
MiCheckForDiscardableLongJumpTable();
MiCheckForUserStackOverflow();
MiCheckHintedPageFileSpace();
MiCheckHoldFaultForHotPatch();
MiCheckKernelShadow();
MiCheckLargePageOk();
MiCheckNodeChannelStandbyCount();
MiCheckPageFileMapping();
MiCheckPhysicalAddressRange();
MiCheckPoolForContiguousPages();
MiCheckProcessShadow();
MiCheckProcessorPteCache();
MiCheckProtoAccess();
MiCheckProtoPtePageState();
MiCheckPteForWriteCluster();
MiCheckPteRelease();
MiCheckPteReserve();
MiCheckPurgeAndUpMapCount();
MiCheckRelevantKernelShadows();
MiCheckSecuredVad();
MiCheckSessionPoolAllocations();
MiCheckSpecialPoolSlop();
MiCheckSystemNxFault();
MiCheckSystemPageTables();
MiCheckSystemTrimEndCriteria();
MiCheckUserVirtualAddress();
MiCheckVadSequential();
MiCheckVirtualAddress();
MiCheckWsLimits();
MiCheckZeroFreeRebalance();
MiClaimPhysicalRun();
MiCleanCfg();
MiCleanSection();
MiCleanVad();
MiCleanWorkingSet();
MiCleanupPageTablePages();
MiClearCommitReleaseState();
MiClearContainingMapping();
MiClearDriverHotPatchPtes();
MiClearFileOnlyPfn();
MiClearFilePointer();
MiClearNonPagedPtes();
MiClearPageFileHash();
MiClearPartitionPageBitMap();
MiClearPfnImageVerified();
MiClearPteAccessed();
MiClearRangeInPartitionTree();
MiClearSystemAccessBits();
MiClearVadBits();
MiClearVadCellBits();
MiCloneCaptureVadCommit();
MiCloneDiscardVadCommit();
MiCloneImageVad();
MiCloneLargeFileOnlyVad();
MiCloneNoChange();
MiCloneProcessAddressSpace();
MiCloneVads();
MiClusterVadActive();
MiClusterVadFull();
MiCoalesceFreeLargePages();
MiCoalesceFreePages();
MiCoalescePageFileBitmapsCache();
MiCoalescePlaceholderAllocations();
MiCollapseRunTopDown();
MiCombineAllPhysicalMemory();
MiCombineCandidate();
MiCombineIdenticalPages();
MiCombinePageSortByHash();
MiCombinePageSortByVa();
MiCombinePte();
MiCombineWorkingSet();
MiCombineWorkingSetTail();
MiCombiningInProgress();
MiCommitEnclavePages();
MiCommitExistingVad();
MiCommitHotPatchTable();
MiCommitPageTableRangesForVad();
MiCommitPageTablesForVad();
MiCommitPagefileBackedSection();
MiCommitPoolMemory();
MiCommitRequestFailed();
MiCommitVadCfgBits();
MiCommitmentAvailable();
MiCompactServiceTable();
MiCompareHotPatchNodes();
MiComparePageHash();
MiComparePages();
MiComparePteProtections();
MiCompareSlabEntry();
MiCompareTbFlushTimeStamp();
MiCompareUserSidHotPatchNodes();
MiCompletePrivateZeroFault();
MiCompleteProtoPteFault();
MiCompleteSecureProcessFault();
MiCompressImportList();
MiCompressRelocations();
MiCompressTbFlushList();
MiComputeAgeDistribution();
MiComputeAgingPercent();
MiComputeAweCharges();
MiComputeCommitChargeForZeroPteRange();
MiComputeCommitThresholds();
MiComputeContiguousSubsectionPte();
MiComputeCrossPartitionSectionCharges();
MiComputeDataFlushRange();
MiComputeDriverProtection();
MiComputeFaultCluster();
MiComputeFaultNode();
MiComputeFlushRange();
MiComputeHash64();
MiComputeIdealFirstSubsection();
MiComputeImagePteIndex();
MiComputeImageVadCommitCharge();
MiComputeMaximumFaultCluster();
MiComputeNextWalkPte();
MiComputeNodeMemory();
MiComputeOptimalZeroPath();
MiComputePageCommitment();
MiComputePageHash();
MiComputePagedPoolSegmentBytes();
MiComputeProcessUserVa();
MiComputePxeWalkAction();
MiComputeSystemTrimCriteria();
MiComputeTrimAmount();
MiComputeZeroClusterMaximum();
MiConfigureMemoryInsertion();
MiConfigureMemoryRemoval();
MiConfirmPageIsZero();
MiConstructLoaderEntry();
MiConstructNewLargeFreePage();
MiContractPagingFiles();
MiContractWsSwapPageFile();
MiContractWsSwapPageFileWorker();
MiControlAreaExemptFromCrossPartitionCharges();
MiControlAreaRequiresCharge();
MiControlAreaUsingExtents();
MiConvertAndFlushWsleVas();
MiConvertContiguousPages();
MiConvertHiberPhasePages();
MiConvertHiberPhasePte();
MiConvertInitialMemoryBlock();
MiConvertPfnsForLargePage();
MiConvertPrivateToProto();
MiConvertRunsToPages();
MiConvertStandbyToProto();
MiConvertStaticSubsections();
MiCopyDataPageToImagePage();
MiCopyDirectMapHeader();
MiCopyForkedFixupVad();
MiCopyFromUntrustedMemory();
MiCopyHeaderIfResident();
MiCopyKstack();
MiCopyLargeVad();
MiCopyOnWrite();
MiCopyOnWriteCheckConditions();
MiCopyPage();
MiCopyPagesIntoEnclave();
MiCopyPagesIntoEnclave$filt$0();
MiCopyPfnEntryEx();
MiCopySinglePage();
MiCopyToCfgBitMap();
MiCopyToUntrustedMemory();
MiCopyToUserVa();
MiCopyTopLevelMappings();
MiCountBootRegions();
MiCountCommittedPages();
MiCountSharedPages();
MiCountSystemImageCommitment();
MiCountSystemPool();
MiCountWslesInPageTable();
MiCrashdumpRemovePte();
MiCrcStillIntact();
MiCreateAweInfoBitMap();
MiCreateCloneChain();
MiCreateColorAnchors();
MiCreateDataFileMap();
MiCreateDecayPfn();
MiCreateEnclave();
MiCreateEnclaveRegions();
MiCreateFixupRecord();
MiCreateForkWsle();
MiCreateForkWsles();
MiCreateFreePfns();
MiCreateHardwareEnclave();
MiCreateImageFileMap();
MiCreateImageOrDataSection();
MiCreateInitialSystemWsles();
MiCreateKernelStackNode();
MiCreateLargePageVad();
MiCreateMdl();
MiCreateMemoryEvent();
MiCreateMemoryEventSD();
MiCreateNewProcessTopLevelMappings();
MiCreateNewSection();
MiCreateNodeLists();
MiCreatePageFileSpaceBitmaps();
MiCreatePagefile();
MiCreatePagingFile();
MiCreatePagingFileMap();
MiCreatePartitionNamespace();
MiCreatePebOrTeb();
MiCreatePerSessionProtos();
MiCreatePfnBitMaps();
MiCreatePfnDatabase();
MiCreatePlaceholderStorage();
MiCreateProcessDefaultAweInfo();
MiCreatePrototypePtes();
MiCreatePteCopyList();
MiCreatePteWsle();
MiCreateRetpolineBitmap();
MiCreateRetpolineRelocationInformation();
MiCreateRotateView();
MiCreateSection();
MiCreateSectionCommon();
MiCreateSectionForDriver();
MiCreateSessionDriverProtos();
MiCreateSharedZeroPages();
MiCreateSlabAllocationsFromLoaderBlock();
MiCreateSlabEntriesFromLoaderSlab();
MiCreateSparsePfnDatabase();
MiCreateSystemPageTable();
MiCreateSystemPageTableTail();
MiCreateSystemSection();
MiCreateSystemWsles();
MiCreateTopLevelUltraMappings();
MiCreateUltraThreadContext();
MiCreateUltraThreadContextHelper();
MiCreateUserPhysicalView();
MiCreateVadEventBitmap();
MiCreateVsmEnclave();
MiCreateZeroThreadContext();
MiDbgCopyMemory();
MiDbgCopyMemoryTarget();
MiDbgMarkPfnModified();
MiDbgReadWriteEnclave();
MiDbgReadWriteEnclaveUnaligned();
MiDbgReleaseAddress();
MiDbgTranslatePhysicalAddress();
MiDbgUnTranslatePhysicalAddress();
MiDbgWriteCheck();
MiDecayPfnFullyInitialized();
MiDecommitEnclavePages();
MiDecommitHardwareEnclavePages();
MiDecommitHardwareEnclavePages$filt$0();
MiDecommitLargePoolVa();
MiDecommitPages();
MiDecommitRegion();
MiDecreaseAvailablePages();
MiDecreaseUsedPtesCount();
MiDecrementAndInsertStandbyPages();
MiDecrementAweMapCount();
MiDecrementCloneBlockReference();
MiDecrementCloneHeaderCount();
MiDecrementCombinedPte();
MiDecrementControlAreaCount();
MiDecrementHugeContext();
MiDecrementLargeSubsections();
MiDecrementModifiedWriteCount();
MiDecrementProtoShareCounts();
MiDecrementShareCount();
MiDecrementSubsection();
MiDecrementSubsectionViewCount();
MiDecrementSubsections();
MiDecrementVadsBeingDeleted();
MiDeleteAweBitMap();
MiDeleteAweInfo();
MiDeleteAweInfoPages();
MiDeleteAwePageTable();
MiDeleteBatch();
MiDeleteBootRange();
MiDeleteCachedKernelStack();
MiDeleteCachedSegment();
MiDeleteCachedSubsection();
MiDeleteCloneDescriptor();
MiDeleteCloneZombies();
MiDeleteClusterPage();
MiDeleteClusterSection();
MiDeleteColorAnchors();
MiDeleteControlArea();
MiDeleteControlAreaList();
MiDeleteDeferredCloneDescriptors();
MiDeleteDirectMapFixupPfn();
MiDeleteEmptySubsections();
MiDeleteEnclavePage();
MiDeleteEnclavePages();
MiDeleteExtentPfns();
MiDeleteFinalPageTables();
MiDeleteHotPatchEntry();
MiDeleteHotPatchRecord();
MiDeleteImageHotPatchState();
MiDeleteInsertedCloneVads();
MiDeleteKernelStack();
MiDeleteKernelStackNode();
MiDeleteLargeUserPde();
MiDeleteLeakedSessionPool();
MiDeleteMappedMdls();
MiDeleteMergedPte();
MiDeleteNonPagedPoolPte();
MiDeleteNonPagedPoolTail();
MiDeletePagablePteRange();
MiDeletePageFileSectionNodes();
MiDeletePagefile();
MiDeletePagingFiles();
MiDeleteParentDecayNode();
MiDeletePartialCloneVads();
MiDeletePartialVad();
MiDeletePartition();
MiDeletePartitionResources();
MiDeletePerSessionProtos();
MiDeletePfnBitMaps();
MiDeleteProcessShadow();
MiDeletePteList();
MiDeletePteRun();
MiDeleteRotateAndStopFaults();
MiDeleteSectionAwe();
MiDeleteSegmentPages();
MiDeleteSessionAddressSpace();
MiDeleteSessionDriverProtos();
MiDeleteSessionPdes();
MiDeleteSessionPoolRange();
MiDeleteStaleCacheMaps();
MiDeleteSubsection();
MiDeleteSubsectionPages();
MiDeleteSystemPagableVm();
MiDeleteSystemPageTable();
MiDeleteSystemPageTableTail();
MiDeleteSystemPageTables();
MiDeleteTopLevelPage();
MiDeleteTransitionPte();
MiDeleteUltraMapContext();
MiDeleteUltraThreadContext();
MiDeleteUserPhysicalView();
MiDeleteVa();
MiDeleteVaTail();
MiDeleteVad();
MiDeleteVadAwePtes();
MiDeleteVadBitmap();
MiDeleteValidSystemPage();
MiDeleteVirtualAddresses();
MiDeleteWorkingSetList();
MiDeleteWsleRange();
MiDeleteZeroThreadContext();
MiDeliverPicoExceptionForProbedPage();
MiDemoteCombinedPte();
MiDemoteLargeFreePage();
MiDemoteLargeFreeZeroPage();
MiDemoteLocalLargePage();
MiDemotePfnListChain();
MiDemoteValidLargePageOneLevel();
MiDeprioritizeVad();
MiDeprioritizeVirtualAddresses();
MiDerefPageFileSpaceBitmaps();
MiDereferenceCombineBlock();
MiDereferenceCombineCrc();
MiDereferenceControlArea();
MiDereferenceControlAreaBySection();
MiDereferenceControlAreaFile();
MiDereferenceControlAreaPfnList();
MiDereferenceControlAreaProbe();
MiDereferenceDataSubsections();
MiDereferenceEnclaveModule();
MiDereferenceExtendInfo();
MiDereferenceFailedControlArea();
MiDereferenceImports();
MiDereferenceIoPages();
MiDereferencePageRuns();
MiDereferencePageRunsEx();
MiDereferencePerSessionProtos();
MiDereferenceSegmentThread();
MiDereferenceSession();
MiDereferenceSessionFinal();
MiDereferenceSubsectionProtos();
MiDereferenceVad();
MiDescribePageRun();
MiDestroySection();
MiDetachProcessFromSession();
MiDetermineModifiedPageListHead();
MiDeterminePoolType();
MiDirtySystemCachePte();
MiDisablePagingOfDriver();
MiDiscardTransitionPte();
MiDispatchFault();
MiDoSingleFixup();
MiDoStackCopy();
MiDoesControlAreaHaveUserWritableReferences();
MiDoesControlAreaRequireRetpolineFixups();
MiDoesDriverProvideImportsForDriver();
MiDoneWithThisPageGetAnother();
MiDrainControlAreaWrites();
MiDrainCrossPartitionUsage();
MiDrainSystemAccessLog();
MiDrainZeroLookasides();
MiDriverLoadSucceeded();
MiDriverPageIsDangling();
MiDriverPageMustStayResident();
MiDummyApcRoutine();
MiDuplicateCloneLeaf();
MiEliminateStaleExtents();
MiEliminateZeroPages();
MiEmptyAccessLogs();
MiEmptyAllWorkingSets();
MiEmptyDecayClusterTimers();
MiEmptyDeferredWorkingSetEntries();
MiEmptyKernelStackCache();
MiEmptyPageAccessLog();
MiEmptyPte();
MiEmptyPteBins();
MiEmptyTargetedWorkingSet();
MiEmptyWorkingSet();
MiEmptyWorkingSetHelper();
MiEmptyWorkingSetInitiate();
MiEmptyWorkingSetPrivatePagesByVa();
MiEmptyWorkingSetTail();
MiEnableLargeSubsection();
MiEnableNewPfns();
MiEnablePagingOfDriver();
MiEnablePagingTheExecutive();
MiEnablePartitionMappedWrites();
MiEncodeProtoFill();
MiEndingOffset();
MiEndingOffsetWithLock();
MiEvictPageTableLock();
MiExamineHalVa();
MiExceptionForMappedVa();
MiExpandFlushMdl();
MiExpandNonPagedPool();
MiExpandPagedPool();
MiExpandPartitionIds();
MiExpandPtes();
MiExpandSharedZeroCluster();
MiExpandSpecialPool();
MiExpandSystemCache();
MiExpandVadBitMap();
MiExpandVadBitMapDown();
MiExtendDynamicBitMap();
MiExtendPagingFileMaximum();
MiExtendPagingFiles();
MiExtendSection();
MiExtendWorkingSetSwapPagefile();
MiFastLockLeafPageTable();
MiFaultGetFileExtents();
MiFaultInPagedPool();
MiFaultInProbeAddress();
MiFaultListPagesRemaining();
MiFillCombinePage();
MiFillCommitReturnInfo();
MiFillGapAddresses();
MiFillGapPtes();
MiFillHyperPtes();
MiFillLogProcessInfo();
MiFillMapFileInfo();
MiFillNoReservationCluster();
MiFillPageExtraInfo();
MiFillPerSessionProtos();
MiFillPfnGaps();
MiFillPhysicalPages();
MiFillPteHierarchy();
MiFillPteWithProto();
MiFillSessionWorkingSetEntry();
MiFillSystemPtes();
MiFillVirtualFaultInfo();
MiFinalizeImageHeaderPage();
MiFinalizePageAttribute();
MiFindActualFaultingPte();
MiFindBestOutswapPagefile();
MiFindClearVadBitsAligned();
MiFindContiguousMemoryInPool();
MiFindContiguousPages();
MiFindDriverNonPagedSections();
MiFindEmptyAddressRange();
MiFindEmptyAddressRangeDown();
MiFindEmptyAddressRangeDownTree();
MiFindEmptyAddressRangeInTree();
MiFindFreePageFileSpace();
MiFindFreePageFileSpaceForward();
MiFindHotPatchRecord();
MiFindLargeMapping();
MiFindLargeNodePage();
MiFindLargePageMemory();
MiFindLargestLoaderDescriptor();
MiFindLastSubsection();
MiFindNextAlignedForwardRunClearEx();
MiFindNonPagedPoolVa();
MiFindPageFileWriteCluster();
MiFindPagesForMdl();
MiFindPlaceholderVadToReplace();
MiFindProcessImageHotPatchRecord();
MiFindRebuildCandidate();
MiFindUserSidHotPatchContext();
MiFindZeroCloneBlock();
MiFinishCreateSection();
MiFinishHardFault();
MiFinishHoldingDirtyFaults();
MiFinishLastForkPageTable();
MiFinishMdlForMappedFileFault();
MiFinishPageFileExtension();
MiFinishPlaceholderVadReplacement();
MiFinishResume();
MiFinishVadDeletion();
MiFlowThroughInsertNode();
MiFlowThroughRemoveNode();
MiFlushAcquire();
MiFlushAllFilesystemPages();
MiFlushAllHintedStorePages();
MiFlushAllPages();
MiFlushAllPagesWorker();
MiFlushCacheForAttributeChange();
MiFlushCacheMdl();
MiFlushCacheRange();
MiFlushComplete();
MiFlushControlArea();
MiFlushDataSection();
MiFlushDirtyBitsToPfn();
MiFlushEnclaveTb();
MiFlushEntireTbDueToAttributeChange();
MiFlushFileOnlyMdl();
MiFlushHyperSpace();
MiFlushKernelCfgBitmap();
MiFlushRelease();
MiFlushSectionInternal();
MiFlushStrongCodeDriverLoadFailures();
MiFlushTbAsNeeded();
MiFlushTbList();
MiFlushTbListEarly();
MiFlushValidPteFromTb();
MiForceAgeWorkingSet();
MiForceCrashForInvalidAccess();
MiForceSectionClosed();
MiForcedTrim();
MiFormFullImageName();
MiFreeBootDriverPage();
MiFreeBootPageTable();
MiFreeCloneDescriptor();
MiFreeClonePool();
MiFreeCombineBlock();
MiFreeCombineMdls();
MiFreeCombinePool();
MiFreeContiguousPages();
MiFreeDriverInitialization();
MiFreeEmptyBootPageTable();
MiFreeEnclaveModules();
MiFreeExcessSegments();
MiFreeForkMaps();
MiFreeImageCfgContext();
MiFreeImageLoadConfig();
MiFreeImageRetpolineContext();
MiFreeInPageSupportBlock();
MiFreeInitializationCode();
MiFreeLargePageChain();
MiFreeLargePageMemory();
MiFreeLargePageView();
MiFreeLargePages();
MiFreeLargeZeroPages();
MiFreeListPageContentsChanged();
MiFreeMdlPageRun();
MiFreeMdlTracker();
MiFreeModWriterEntry();
MiFreeModifiedReservations();
MiFreeOverlappedFlushEntry();
MiFreePageChain();
MiFreePageFileHashPfns();
MiFreePageFileSpaceBitmaps();
MiFreePageToSlabAllocator();
MiFreePageToSlabEntry();
MiFreePagedPoolPages();
MiFreePagesFromMdl();
MiFreePartitionId();
MiFreePartitionNodePages();
MiFreePartitionPageRun();
MiFreePartitionPhysicalPages();
MiFreePartitionTree();
MiFreePhysicalPageChain();
MiFreePhysicalPages();
MiFreePhysicalView();
MiFreePlaceholderStorage();
MiFreePoolPages();
MiFreePoolPagesLeft();
MiFreePrivateFixupEntryForSystemImage();
MiFreeReadListPages();
MiFreeRegistryPageRange();
MiFreeRelocations();
MiFreeReservationRun();
MiFreeReservationRuns();
MiFreeRetpolineImportInfo();
MiFreeRetpolineRelocationInformation();
MiFreeRotateView();
MiFreeSessionSpaceMap();
MiFreeSlabEntries();
MiFreeSlabEntry();
MiFreeSlabPage();
MiFreeSmallPageFromMdl();
MiFreeSubsectionProtos();
MiFreeToSubAllocatedRegion();
MiFreeTransitionPageHeatList();
MiFreeUltraMapping();
MiFreeUltraMdlContext();
MiFreeUnmappedPageTables();
MiFreeUnusedPfnPages();
MiFreeUnusedSlabPages();
MiFreeVadEventBitmap();
MiFreeVadEvents();
MiFreeVadRange();
MiFreeWorkingSetSwapContext();
MiFreeWsleList();
MiFreeZeroPageSizeIndex();
MiFreeZeroPageSlistSufficient();
MiGatherHiberRange();
MiGatherMappedPages();
MiGatherPagefilePages();
MiGenerateAccessViolation();
MiGenerateRandomPte();
MiGenerateSecureCookie();
MiGenerateSystemImageNames();
MiGet64KPage();
MiGetAggregateWorkingSetSize();
MiGetAggregationVm();
MiGetAnyMultiplexedVm();
MiGetAvailablePagesBelowPriority();
MiGetAvailablePagesExcludeSlists();
MiGetAweInfoPartition();
MiGetAweNode();
MiGetAwePageSize();
MiGetAweVadPageSize();
MiGetCcAccessLog();
MiGetChannelInformation();
MiGetClosestNodeWithProcessors();
MiGetClusterPage();
MiGetCommittedPages();
MiGetContainingPageTable();
MiGetControlAreaLoadConfig();
MiGetControlAreaPartition();
MiGetControlAreaPtes();
MiGetCrossPartitionCharges();
MiGetCrossPartitionCloneCharges();
MiGetCrossPartitionCombineCharges();
MiGetCurrentMultiplexedVm();
MiGetDanglingExtent();
MiGetEffectivePagePriorityThread();
MiGetEnclavePage();
MiGetExceptionInfo();
MiGetFastLargePage();
MiGetFileHashPage();
MiGetFileOnlyRanges();
MiGetFreeOrZeroPageAnyColor();
MiGetFreeZeroLargePage();
MiGetHardFaultPages();
MiGetHighestPteConsumer();
MiGetHotPatchEntry();
MiGetHugePageToZero();
MiGetImageBitMapInfo();
MiGetImageHotPatchTableAddress();
MiGetImageProtoProtection();
MiGetInPageSupportBlock();
MiGetInstructionPointer();
MiGetKernelStackSwapSupport();
MiGetLargePageChain();
MiGetLargePageDemoteAsNeeded();
MiGetLargePageListHeadBase();
MiGetLargePagesForSystemMapping();
MiGetLargeVadMappingIndex();
MiGetLeafPfnBuddy();
MiGetLeafVa();
MiGetNewAddressForBootImage();
MiGetNextDirectFixupProto();
MiGetNextNonGapPfnPage();
MiGetNextPageColor();
MiGetNextPageTable();
MiGetNextPageTablePte();
MiGetNextPageTableTail();
MiGetNextSession();
MiGetNodeChannelPageCounts();
MiGetNodeStandbyPageCount();
MiGetNumberOfCachedPtes();
MiGetPage();
MiGetPageChain();
MiGetPageFileHigh();
MiGetPageFileSectionForReservation();
MiGetPageForEnclave();
MiGetPageForHeader();
MiGetPageForWriteCluster();
MiGetPageFromSlabAllocator();
MiGetPageFromSlabEntry();
MiGetPagePrivilege();
MiGetPageProtection();
MiGetPageSlist();
MiGetPageTableLockBuffer();
MiGetPageTablePages();
MiGetPageTablesForLargeMap();
MiGetPagesToZero();
MiGetPagingFileOffset();
MiGetPdeAddress();
MiGetPerfectColorHeadPage();
MiGetPfnLink();
MiGetPfnPriority();
MiGetPfnProtection();
MiGetPhysicalAddress();
MiGetPhysicalMemoryRanges();
MiGetPoolPages();
MiGetPrivatePageCount();
MiGetProcessHotPatchContext();
MiGetProcessPartition();
MiGetProtoPteAddress();
MiGetPrototypePteBoundaries();
MiGetPrototypePteRanges();
MiGetPteAddress();
MiGetPteFromCopyList();
MiGetPteLink();
MiGetPteMappingPair();
MiGetReadyInPageBlock();
MiGetSectionStrongImageReference();
MiGetSessionIdForVa();
MiGetSessionVm();
MiGetSharedProtos();
MiGetSharedProtosAtDpcLevel();
MiGetSharedVm();
MiGetSinglePageToZero();
MiGetSlabPage();
MiGetStandbyRepurposed();
MiGetSubsectionCharges();
MiGetSubsectionCrossPartitionReferences();
MiGetSubsectionDriverProtos();
MiGetSubsectionHoldingCrossPartitionReferences();
MiGetSystemAddressForImage();
MiGetSystemCacheReverseMap();
MiGetSystemPage();
MiGetSystemPteStatistics();
MiGetSystemRegionType();
MiGetThreadPartition();
MiGetTopLevelPfn();
MiGetTransitionPageHeatList();
MiGetUltraHugeAlreadyActive();
MiGetUltraMapping();
MiGetUltraMdlContext();
MiGetUsedPtesHandle();
MiGetUserReservationHighestAddress();
MiGetVaAge();
MiGetVadCacheAttribute();
MiGetVadWakeList();
MiGetValidAweProtection();
MiGetVirtualFaultPageInfo();
MiGetVmPartition();
MiGetWorkingSetInfo();
MiGetWorkingSetInfoEx();
MiGetWorkingSetInfoList();
MiGetWorkingSetSwapSupport();
MiGetWsAndInsertVad();
MiGetWsAndMakePageTablesNx();
MiGetWsleContents();
MiGetWsleProtection();
MiHandleCollidedFault();
MiHandleDriverNonPagedSections();
MiHandleEnclaveFault();
MiHandleForkTransitionPte();
MiHandleTransitionFault();
MiHashIsCommon();
MiHonorRangeStraddleRequirement();
MiHotAddPartitionMemory();
MiHotPatchAllProcesses();
MiHotPatchImage();
MiHotPatchImageTreeCompare();
MiHotPatchProcess();
MiHotRemovePartitionPageRun();
MiHyperPage();
MiIdealClusterPage();
MiIdentifyPfn();
MiIdentifyPfnWrapper();
MiImageCantMove();
MiImageCfgRvaIteratorFirst();
MiImageCfgRvaIteratorNext();
MiImageGetRawRvaState();
MiImagePagable();
MiImagePageOk();
MiImageProtoChargedCommit();
MiImageRvaRawEnumFirst();
MiImageRvaRawEnumNext();
MiImageSuitableForSystem();
MiImageUnused();
MiImageVadHotPatchEligible();
MiImportOptimizationVetosDriverRelocation();
MiInPagePageTable();
MiInPageSingleKernelStack();
MiInSwapSharedWorkingSetWorker();
MiInSwapStore();
MiInSwapStoreContextDereference();
MiInSwapStoreWorker();
MiIncludeSharedCommit();
MiIncreaseAvailablePages();
MiIncreaseCommitLimits();
MiIncreaseNonPagedPoolUsage();
MiIncreaseUsedPtesCount();
MiIncrementAweMapCount();
MiIncrementCombineMdl();
MiIncrementCombinedPte();
MiIncrementLargeSubsections();
MiIncrementPfn();
MiIncrementSubsectionViewCount();
MiInitNucleus();
MiInitPerfMemoryFlags();
MiInitSystem();
MiInitializeApiSets();
MiInitializeBlankPfns();
MiInitializeBootDefaults();
MiInitializeBootLoadedDriverPfns();
MiInitializeBootMemoryDescriptor();
MiInitializeBootProcess();
MiInitializeCacheFlushing();
MiInitializeCacheSizes();
MiInitializeCfg();
MiInitializeChannelRanges();
MiInitializeColorBase();
MiInitializeColorBaseEx();
MiInitializeColorBaseSession();
MiInitializeColorTable();
MiInitializeColors();
MiInitializeCombining();
MiInitializeCommitment();
MiInitializeCreateSectionPacket();
MiInitializeDecayPfns();
MiInitializeDriverImages();
MiInitializeDriverPtes();
MiInitializeDummyPages();
MiInitializeDynamicBitmap();
MiInitializeDynamicPfns();
MiInitializeDynamicPfnsTarget();
MiInitializeDynamicRegion();
MiInitializeDynamicVa();
MiInitializeEnclave();
MiInitializeEnclaveMetadataPage();
MiInitializeEnclavePfn();
MiInitializeFaultVaListCore();
MiInitializeForkMaps();
MiInitializeGapFrames();
MiInitializeImageExtents();
MiInitializeImageHeaderPage();
MiInitializeImageHotPatchContext();
MiInitializeImageProtos();
MiInitializeInPageSupport();
MiInitializeIoPageNodeArray();
MiInitializeKernelStacks();
MiInitializeLargeNonPagedPoolLeafFrames();
MiInitializeLargePageColorSizes();
MiInitializeLargePageNodeLists();
MiInitializeLoadedModuleList();
MiInitializeLockedPagesTracking();
MiInitializeMdlBatchPages();
MiInitializeMdlPages();
MiInitializeMdlPfn();
MiInitializeMemoryEvents();
MiInitializeMirroring();
MiInitializeNewUltraHugeContext();
MiInitializeNonPagedPool();
MiInitializeNonPagedPoolThresholds();
MiInitializeNuma();
MiInitializeNumaGraph();
MiInitializeNumaRanges();
MiInitializePageAccessLogging();
MiInitializePageColorBase();
MiInitializePageFaultPacket();
MiInitializePagedPoolEvents();
MiInitializePagefileBitmapsCache();
MiInitializePartition();
MiInitializePartitionThreads();
MiInitializePartitions();
MiInitializePfn();
MiInitializePfnForOtherProcess();
MiInitializePfnListHead();
MiInitializePfnsForValidMappings();
MiInitializePrivateFixupBitmap();
MiInitializeProcessBottomUpEntropy();
MiInitializeProcessTopDownEntropy();
MiInitializeProtoPfn();
MiInitializePrototypePtes();
MiInitializePteInfo();
MiInitializeReadInProgressPfn();
MiInitializeRelocations();
MiInitializeScrubPacket();
MiInitializeSections();
MiInitializeSessionGlobals();
MiInitializeSessionIds();
MiInitializeSessionPool();
MiInitializeShadowPageTable();
MiInitializeSharedUserData();
MiInitializeSlabAllocator();
MiInitializeSlowPte();
MiInitializeSpecialPool();
MiInitializeSystemCache();
MiInitializeSystemChannelOrdering();
MiInitializeSystemImagePage();
MiInitializeSystemPageTable();
MiInitializeSystemPteTracker();
MiInitializeSystemPtes();
MiInitializeSystemSpaceMap();
MiInitializeSystemVa();
MiInitializeSystemWorkingSetList();
MiInitializeTbFlush();
MiInitializeTbFlushList();
MiInitializeTbFlushStamps();
MiInitializeTbFlushing();
MiInitializeTopLevelBitmap();
MiInitializeTransitionPfn();
MiInitializeUltraSpace();
MiInitializeUnusablePfns();
MiInitializeVadBitMap();
MiInitializeWalkBounds();
MiInitializeWorkingSetList();
MiInitializeWorkingSetManagerParameters();
MiInitializeWowPeb();
MiInitializeWsSwapping();
MiInitializeZeroedPfns();
MiInitializeZeroingAttributes();
MiInsertAndUnlockStandbyPages();
MiInsertCachedPte();
MiInsertChildVads();
MiInsertClone();
MiInsertDecayClusterTimer();
MiInsertHotPatchRecord();
MiInsertInSystemSpace();
MiInsertLargePageInFreeOrZeroList();
MiInsertLargePageInNodeList();
MiInsertLargePageInNodeListHelper();
MiInsertLargePageNeedsZero();
MiInsertLargeTbFlushEntry();
MiInsertLargeUserMapping();
MiInsertLargeVadMapping();
MiInsertMappingNode();
MiInsertNewCombineBlocks();
MiInsertNewProcess();
MiInsertNonPagedPoolOnSlist();
MiInsertNumaStandbyPage();
MiInsertPageFileInList();
MiInsertPageInFreeOrZeroedList();
MiInsertPageInList();
MiInsertPartitionPages();
MiInsertPhysicalPteMapping();
MiInsertPrivateVad();
MiInsertProcessVads();
MiInsertProtectedStandbyPage();
MiInsertPteTracker();
MiInsertRecursiveTbFlushEntries();
MiInsertSharedCommitNode();
MiInsertSlabEntry();
MiInsertSubsectionNode();
MiInsertTbFlushEntry();
MiInsertUnusedLargePageInNodeList();
MiInsertUnusedSegment();
MiInsertUnusedSubsection();
MiInsertVad();
MiInsertVadCharges();
MiInsertVadEvent();
MiInsertViewOfPhysicalSection();
MiInsertVmAccessedEntry();
MiInvalidPteConforms();
MiInvalidateCollidedIos();
MiInvalidatePageFileBitmapsCache();
MiIoPagesInRun();
MiIoSpaceIsConstant();
MiIoSpaceRunIsConstant();
MiIrpCompletionApcRoutine();
MiIsAddressGlobal();
MiIsAddressValid();
MiIsBootImageTargetFullyRetpolined();
MiIsCfgBitMapPageShared();
MiIsDecayPfn();
MiIsFaultPteIntact();
MiIsFreeZeroPfnCold();
MiIsImageFullyRetpolined();
MiIsImportOptimizationEnabled();
MiIsLowestPageTablePage();
MiIsPfn();
MiIsPfnCommitNotCharged();
MiIsPfnFileOnly();
MiIsPfnFromSlabAllocation();
MiIsPfnLocked();
MiIsPfnSystemCharged();
MiIsPfnTradable();
MiIsPoolPteInUse();
MiIsProbeActive();
MiIsProcessCfgEnabled();
MiIsProcessCfgExportSuppressionEnabled();
MiIsPrototypePteVadLookup();
MiIsPteEvaluated();
MiIsPteInStore();
MiIsRangeFullyCommitted();
MiIsRegularMemory();
MiIsRetpolineEnabled();
MiIsRetryIoStatus();
MiIsSessionMetadata();
MiIsSoftwareEnclave();
MiIsStoreProcess();
MiIsSubsectionClean();
MiIsTargetFullyRetpolined();
MiIsVaRangeAvailable();
MiIsVadEligibleForCommitRelease();
MiIsVadLarge();
MiIsWorkingSetTrimThread();
MiIssueAsynchronousFlush();
MiIssueFlowThroughFault();
MiIssueHardFault();
MiIssueHardFaultIo();
MiIssueNoPtesBugcheck();
MiIssuePageExtendRequest();
MiIssueSynchronousFlush();
MiIterateOverPartitions();
MiJoinBitmapPages();
MiJoinSession();
MiJumpStack();
MiJumpStackTarget();
MiKernelStackVaToStackNode();
MiKvaRangeSort();
MiLargeFreePageToMdl();
MiLargePageFault();
MiLargePageFreeToZero();
MiLdwPopupWorker();
MiLeapPrefetch();
MiLegacyImageArchitecture();
MiLegitimatePageForDriversToMap();
MiLimitLoaderBlockHighMemory();
MiLimitLoaderBlockTotalMemory();
MiLoadHotPatch();
MiLoadHotPatchForUserSid();
MiLoadImportDll();
MiLoadSectionIntoVsmEnclave();
MiLoadUserSymbols();
MiLocateAddress();
MiLocateCloneAddress();
MiLocateExclusiveSecure();
MiLocateKernelSections();
MiLocateLowestConflictingVad();
MiLocatePagefileSubsection();
MiLocatePhysicalViewInTree();
MiLocateSessionProtosInSubsection();
MiLocateSubsectionNode();
MiLocateVadEvent();
MiLockAddressSpaceToo();
MiLockAllMemoryLists();
MiLockAndDecrementShareCount();
MiLockAndIncrementShareCount();
MiLockAndInsertPageInFreeList();
MiLockAndSelectSessionAttachProcess();
MiLockAwePagesExclusive();
MiLockAwePagesShared();
MiLockAweVadsExclusive();
MiLockAweVadsShared();
MiLockCode();
MiLockControlAreaSectionExtend();
MiLockDownWorkingSet();
MiLockDriverMappings();
MiLockDynamicMemoryExclusive();
MiLockDynamicMemoryShared();
MiLockHotPatchPageRange();
MiLockHotPatchPages();
MiLockHotPatchUndoPages();
MiLockImageSection();
MiLockLeafPage();
MiLockLoaderEntry();
MiLockLowestValidPageTable();
MiLockMemoryLists();
MiLockNestedPageAtDpcInline();
MiLockNestedVad();
MiLockNonPagedPoolPte();
MiLockOwnedProtoPage();
MiLockPagableImageSection();
MiLockPagableSections();
MiLockPage();
MiLockPageAndSetDirty();
MiLockPageInline();
MiLockPageLeafPageTable();
MiLockPageTable();
MiLockPageTableInternal();
MiLockPageTablePage();
MiLockPageTableRange();
MiLockPagedAddress();
MiLockPartitionSystemThreads();
MiLockProbePacketWorkingSet();
MiLockProtoPage();
MiLockProtoPoolPage();
MiLockRetpolineStubs();
MiLockSectionControlArea();
MiLockSetPfnPriority();
MiLockStealSystemVm();
MiLockStealUserVm();
MiLockSwitchedMdlTrackerCompare();
MiLockTrackerCompare();
MiLockTransitionLeafPage();
MiLockUnlockCommon();
MiLockUnlockCommon$filt$0();
MiLockVad();
MiLockVadCore();
MiLockVadRange();
MiLockVadShared();
MiLockWorkingSetOptimal();
MiLockWorkingSetShared();
MiLockdownSections();
MiLogAllocateWsleEvent();
MiLogCombinedPteDelete();
MiLogCommitRequestFailed();
MiLogContinueTrim();
MiLogCreateImageFileMapFailure();
MiLogFailedDriverLoad();
MiLogGetDurationSince();
MiLogHotPatchManagement();
MiLogHotPatchOperation();
MiLogHotPatchPagesLocked();
MiLogKernelStackEvent();
MiLogMapFileEvent();
MiLogMdlRangeEvent();
MiLogMemResetInfo();
MiLogNonPagedPoolReleaseEvent();
MiLogOutswappedProcessCommitReacquire();
MiLogOutswappedProcessCommitRelease();
MiLogPageAccess();
MiLogPerfMemoryEvent();
MiLogPerfMemoryRangeEvent();
MiLogProcessWorkingSetsStop();
MiLogRelocationFaults();
MiLogRelocationRva();
MiLogRemoveWsleEvent();
MiLogReserveVaFailed();
MiLogResetPagesCommitRelease();
MiLogSectionCreate();
MiLogSectionObjectEvent();
MiLogStrongCodeDriverLoadFailure();
MiLogTrimWs();
MiLogVirtualRotateEvent();
MiLogWsEmptyControl();
MiLookupDataTableEntry();
MiLookupIoPageNode();
MiMakeCombineCandidateClean();
MiMakeDemandZeroPte();
MiMakeDriverPagesPrivate();
MiMakeHyperPteDemandZero();
MiMakeHyperRangeAccessible();
MiMakeImagePageOk();
MiMakeImageReadOnly();
MiMakeIoRangePermanent();
MiMakeIoRangePermanentDpc();
MiMakeLargePageTable();
MiMakeOutswappedPageResident();
MiMakePageAvoidRead();
MiMakePageAvoidRead$filt$0();
MiMakePageBad();
MiMakePageFilePte();
MiMakePartitionMemoryBlock();
MiMakeProtectionMask();
MiMakeProtectionPfnCompatible();
MiMakeProtoAddressValid();
MiMakeProtoLeafValid();
MiMakeProtoReadOnly();
MiMakePrototypePteDirect();
MiMakeQuasiPte();
MiMakeSecureExclusive();
MiMakeShadowPageTableRange();
MiMakeSubsectionPte();
MiMakeSystemAddressValid();
MiMakeSystemCachePteValid();
MiMakeSystemCacheRangeValid();
MiMakeSystemLeavesNonZero();
MiMakeSystemRangeAvailable();
MiMakeTransitionHeatBatch();
MiMakeTransitionPteValid();
MiMakeUnusedImageExtentsCold();
MiMakeUnusedSegmentDeleteOnClose();
MiMakeValidPte();
MiMakeZeroedPageTables();
MiMakeZeroedPageTablesEx();
MiManageSubsectionView();
MiMapArbitraryPage();
MiMapBBTMemory();
MiMapCacheExceptionFilter();
MiMapCfgBitMapSection();
MiMapChildLargePageVads();
MiMapContiguousMemory();
MiMapContiguousMemoryLarge();
MiMapDummyPages();
MiMapExParametersInitialize();
MiMapFrame();
MiMapHotPatchImageInSystemSpace();
MiMapImageInSystemProcess();
MiMapImageInSystemSpace();
MiMapLockedPagesInUserSpace();
MiMapLockedPagesInUserSpaceHelper();
MiMapMdlCommon();
MiMapNewPfns();
MiMapNewSession();
MiMapPageFileHash();
MiMapPageInHyperSpaceWorker();
MiMapPagesToZero();
MiMapParametersInitialize();
MiMapProcessExecutable();
MiMapRetpolineStubs();
MiMapSinglePage();
MiMapSystemCachePage();
MiMapSystemImage();
MiMapUserLargePages();
MiMapViewInSystemSpace();
MiMapViewOfDataSection();
MiMapViewOfImageSection();
MiMapViewOfPhysicalSection();
MiMapViewOfSection();
MiMapViewOfSectionCommon();
MiMapViewOfSectionCommon$filt$0();
MiMapViewOfSectionExCommon();
MiMapWithLargePages();
MiMappedPageWriter();
MiMappingHasIoReferences();
MiMappingHasIoTracker();
MiMarkBootGuardPage();
MiMarkBootImagesNonPaged();
MiMarkBootKernelStack();
MiMarkFileOnlyPfnBad();
MiMarkHiberNotCachedPages();
MiMarkHiberNotCachedPte();
MiMarkKernelCfgAddressTakenImports();
MiMarkKernelCfgTarget();
MiMarkKernelImageCfgBits();
MiMarkKernelImageRetpolineBits();
MiMarkKernelPageTablePages();
MiMarkKernelPageTablePte();
MiMarkKernelStack();
MiMarkLargePageMappings();
MiMarkLargePagePte();
MiMarkLargePageRanges();
MiMarkMdlComplete();
MiMarkNonPagedHiberPhasePages();
MiMarkNonPagedHiberPhasePte();
MiMarkPfnTradable();
MiMarkPfnVerified();
MiMarkPrivateImageCfgBits();
MiMarkPrivateOpenCfgBits();
MiMarkProcessCfgBits();
MiMarkPteDirty();
MiMarkPxeAsShadowed();
MiMarkRetpolineBits();
MiMarkSessionDeletePending();
MiMarkSessionMasterProcess();
MiMarkSharedImageCfgBits();
MiMaximumCommitmentAvailable();
MiMdlPageSort();
MiMemoryLicense();
MiMergePageNodes();
MiMigratePfn();
MiMirrorAddPagesToBrownList();
MiMirrorGatherBrownPages();
MiMirrorNodeLargePages();
MiMirrorOmitPagesFromCopy();
MiMirrorPerformBlackWrites();
MiMirrorPerformBrownWrites();
MiMirrorReduceBlackWrites();
MiMirrorVerify();
MiModifiedPageWriter();
MiModifiedWriterNoReservationSort();
MiMoveDirtyBitsToPfns();
MiMoveLargeFreePage();
MiMoveLargeZeroToFree();
MiNoFaultFound();
MiNoPagesLastChance();
MiNodeCostSort();
MiNodeFreeZeroPages();
MiNodeLargeFreeZeroPages();
MiNonPagedPoolToNode();
MiNotifyPageHeat();
MiNumberWsSwapPagefiles();
MiObtainDynamicVa();
MiObtainFaultCharges();
MiObtainFreePages();
MiObtainMdlCharges();
MiObtainPagefileHashes();
MiObtainPoolCharges();
MiObtainProtoBaseFromNode();
MiObtainProtoReference();
MiObtainReferencedSecureVad();
MiObtainReferencedVadEx();
MiObtainRelocationBits();
MiObtainSectionForDriver();
MiObtainSessionVa();
MiObtainSystemCacheView();
MiObtainSystemCharges();
MiObtainSystemVa();
MiOffsetToProtos();
MiOkToSetPteDirtyForNotValidFault();
MiOkToShrinkPageFiles();
MiOkToZeroNextLargePage();
MiOpenHotPatchFile();
MiOrderTrimList();
MiOutPageSingleKernelStack();
MiOutSwapKernelStackPage();
MiOutSwapWorkingSet();
MiOutSwapWorkingSetPte();
MiOutlawInswaps();
MiPageAttributeBatchChangeNeeded();
MiPageAvailable();
MiPageAvailableEx();
MiPageCombiningActive();
MiPageFileLargestBitmapsRun();
MiPageFileNoFreeSpace();
MiPageHasRelocations();
MiPageListCollision();
MiPageMightBeZero();
MiPageNotZero();
MiPageRead();
MiPageTableLockIsContended();
MiPageTableStillExists();
MiPageTablesNeeded();
MiPageToChannel();
MiPageToNode();
MiParseComImage();
MiParseImageLoadConfig();
MiParseImageSectionHeaders();
MiPartitionActive();
MiPartitionIdToPointer();
MiPartitionObjectToPartition();
MiPartitionWorkingSetManager();
MiPerformCombineScan();
MiPerformFinalZeroing();
MiPerformFixups();
MiPerformImageHotPatch();
MiPerformMemoryChange();
MiPerformSafePdeWrite();
MiPersistMemory();
MiPersistPage();
MiPfAllocateMdls();
MiPfCoalesceAndIssueIOs();
MiPfCompleteCoalescedIo();
MiPfCompleteInPageSupport();
MiPfCompletePrefetchIos();
MiPfExecuteReadList();
MiPfIssueCoalesceCandidates();
MiPfIssueCoalescedSupport();
MiPfPrepareReadList();
MiPfPrepareSequentialReadList();
MiPfPutPagesInTransition();
MiPfnIsNonPagedPool();
MiPfnLargeBitSet();
MiPfnRangeIsZero();
MiPfnReferenceCountIsZero();
MiPfnShareCountIsZero();
MiPfnZeroingNeeded();
MiPfnsWorthTrying();
MiPhysicalPoolCheck();
MiPickClusterForMappedFileFault();
MiPopulateCfgBitMap();
MiPopulateCombineMdls();
MiPreInitializeSystemImagePage();
MiPreUnlockWorkingSetShared();
MiPrefetchControlArea();
MiPrefetchDriverPages();
MiPrefetchJumpVad();
MiPrefetchNormally();
MiPrefetchRestOfCluster();
MiPrefetchVirtualMemory();
MiPrepareAttachThread();
MiPrepareDriverForHotPatch();
MiPrepareImagePagesForHotPatch();
MiPrepareImportList();
MiPreparePhysicalPagesMdlForFree();
MiPreparePlaceholderVadReplacement();
MiPrepareSegmentForDeletion();
MiPrepareToHotPatchImage();
MiPrepareToHotPatchImagePatchCallback();
MiPrepareToRevertHotPatch();
MiPrepareToStealNonPagedPool();
MiPrepareVadDelete();
MiPreventControlAreaDelete();
MiPreventControlAreaDeletion();
MiPrivateFixup();
MiProbeAndLockComplete();
MiProbeAndLockPages();
MiProbeAndLockPrepare();
MiProbeLeafFrame();
MiProbeLeafPteAccess();
MiProbeLockFrame();
MiProbePacketContended();
MiProcessCommitIntact();
MiProcessCrcList();
MiProcessDeleteOnClose();
MiProcessDereferenceList();
MiProcessHasAwePrivatePages();
MiProcessKernelCfgAddressTakenImports();
MiProcessKernelCfgImage();
MiProcessKernelCfgImageLoadConfig();
MiProcessLargeCoalesceList();
MiProcessLoadConfigForDriver();
MiProcessLoaderEntry();
MiProcessTransitionHeatBatch();
MiProcessVaRangesInfoClass();
MiProcessVmAccessedInfo();
MiProcessWorkingSets();
MiProcessWsInSwapRanges();
MiProcessWsInSwapSupport();
MiProcessingPageExtendComplete();
MiPromoteControlAreaToStrongCode();
MiProtectAweRegion();
MiProtectEnclavePages();
MiProtectPrivateMemory();
MiProtectSharedUserPage();
MiProtectSystemImage();
MiProtectionToCacheAttribute();
MiPruneStandbyPages();
MiPteBinsNeedTrimming();
MiPteEmbedsWsle();
MiPteHasShadow();
MiPteInShadowRange();
MiPteIsSessionDynamicBuffer();
MiPteNeedsCommitCharge();
MiPulseCommitSignal();
MiPulseLowAvailableEvent();
MiPureGraphicsPtesExist();
MiPurgeBadFileOnlyPages();
MiPurgeFileOnlyPfn();
MiPurgeImageSection();
MiPurgeLargeZeroNodePages();
MiPurgePartitionStandby();
MiPurgeSubsection();
MiPurgeZeroList();
MiPushBadPool();
MiPushCombineBlock();
MiQueryAddressSpan();
MiQueryAddressState();
MiQueryEPTAccessedState();
MiQueryLeafPte();
MiQueryLoadedPatches();
MiQueryMemoryListInformation();
MiQueryPfn();
MiQueryProcessActivePatches();
MiQuerySystemBase();
MiQueueControlAreaDelete();
MiQueueExtentPfnDeletion();
MiQueueLargeFreeZeroRebuild();
MiQueuePageAccessLog();
MiQueuePageFileExtension();
MiQueueSyncModifiedWriterApc();
MiQueueWorkingSetRequest();
MiRaisedIrqlFault();
MiReAcquireCommitFailWorker();
MiReAcquireOutSwappedProcessCommit();
MiReAllocateWorkingSetSwapSupport();
MiReInitializeFreeSlabPfn();
MiReInsertPlaceholderVad();
MiReacquireWalkLocks();
MiReadPteShadow();
MiReadWriteAnyLevelShadowPte();
MiReadWriteVirtualMemory();
MiReadyFlushMdlToWrite();
MiReadyNonPagedPoolExpansionForUse();
MiRealVaToFlushType();
MiReassessZeroThreads();
MiRebalanceZeroFreeLists();
MiRebaseDynamicRelocationRegions();
MiRebuildLargePage();
MiRebuildLargePages();
MiRebuildLargeZeroPage();
MiRebuildPageTableLeafAges();
MiRecheckCombineVm();
MiRecheckVaVm();
MiReclaimSystemVa();
MiReclaimUnusedUltraMdlMaps();
MiReduceCommitLimits();
MiReduceMappedFileReadAhead();
MiReduceMappedFileReadBehind();
MiReduceMdl();
MiReduceShareCount();
MiReduceUnusedSubsectionCount();
MiReduceWs();
MiReduceZeroingThreads();
MiRefPageFileSpaceBitmaps();
MiReferenceActiveSubsection();
MiReferenceAweHandle();
MiReferenceCfgVad();
MiReferenceCloneProto();
MiReferenceControlArea();
MiReferenceControlAreaFile();
MiReferenceControlAreaForCacheManager();
MiReferenceControlAreaPfn();
MiReferenceDataSubsections();
MiReferenceDriverPage();
MiReferenceFileObjectForMap();
MiReferenceInPageFile();
MiReferenceIncomingPhysicalPages();
MiReferenceIoPages();
MiReferencePageForModifiedWrite();
MiReferencePagePartition();
MiReferencePageRuns();
MiReferencePfBackedSection();
MiReferenceSubsection();
MiReferenceVad();
MiRefillPurgedExtents();
MiRegionAssignmentSort();
MiRegistryVaSort();
MiReleaseArbitraryPage();
MiReleaseCommitForResetPages();
MiReleaseControlAreaCharges();
MiReleaseControlAreaWaiters();
MiReleaseDriverPtes();
MiReleaseFaultCharges();
MiReleaseFaultState();
MiReleaseFaultSynchronization();
MiReleaseFreshPage();
MiReleaseHotPatchResources();
MiReleaseImageSection();
MiReleaseInPageRefs();
MiReleaseKernelCfgLock();
MiReleaseLargePteMappings();
MiReleaseLargeZeroingVa();
MiReleaseNewAddressForBootImage();
MiReleaseNonPagedResources();
MiReleaseOutSwapReservations();
MiReleaseOutSwappedProcessCommit();
MiReleasePageFileInfo();
MiReleasePageFileSectionInfo();
MiReleasePageFileSpace();
MiReleasePageHash();
MiReleasePrivilegedPtes();
MiReleaseProcessReferenceToSessionDataPage();
MiReleasePteCopyList();
MiReleasePtes();
MiReleaseReadListResources();
MiReleaseScrubPacket();
MiReleaseSessionVa();
MiReleaseSystemCacheView();
MiReleaseWalkLocks();
MiReleaseWriteInProgressCharges();
MiReleaseWsSwapReservationPfn();
MiRelinkStandbyPage();
MiReloadBootLoadedDrivers();
MiRelocateBootImage();
MiRelocateImage();
MiRelocateImageAgain();
MiRelocateImagePfn();
MiRelockFaultState();
MiRelockProtoPoolPage();
MiRememberUnloadedDriver();
MiRemoveBadPages();
MiRemoveDecayClusterTimer();
MiRemoveEnclavePagesFromDump();
MiRemoveEnclavePagesFromMirror();
MiRemoveFaultNode();
MiRemoveFreePoolMemoryFromDump();
MiRemoveFromSystemSpace();
MiRemoveLockedPageCharge();
MiRemoveLockedPageChargeAndDecRef();
MiRemoveLowestPriorityStandbyPage();
MiRemoveMappedPtes();
MiRemoveMappingNode();
MiRemoveMdlPages();
MiRemovePageAnyColor();
MiRemovePhysicalMemory();
MiRemovePlaceholderVad();
MiRemovePteTracker();
MiRemoveSecureEntry();
MiRemoveSharedCommitNode();
MiRemoveSlabEntry();
MiRemoveSpecialPoolRange();
MiRemoveSystemCacheReferences();
MiRemoveSystemImagePage();
MiRemoveUnmappedIoNode();
MiRemoveUnusedSegment();
MiRemoveUnusedSegments();
MiRemoveUnusedSubsection();
MiRemoveUserPhysicalPagesView();
MiRemoveVad();
MiRemoveVadCharges();
MiRemoveVadEvent();
MiRemoveViewsFromSection();
MiRemoveViewsFromSectionWithPfn();
MiRemoveWakeListEntry();
MiRemoveWsle();
MiRemoveWsleList();
MiReplaceLockedPage();
MiReplaceNumaStandbyPage();
MiReplacePageOfProtoPool();
MiReplacePageTablePage();
MiReplaceRotateWithDemandZero();
MiReplaceSystemProtoPtesNode();
MiReplaceTransitionPage();
MiReplenishBitMap();
MiReplenishLocalCommit();
MiReplenishNonPagedSlists();
MiReplenishPageSlist();
MiReplenishSlabAllocator();
MiReplenishTransitionPageHeatList();
MiReplicatePteChange();
MiReplicatePteChangeToProcess();
MiRescanPageFileBitmapPortion();
MiRescanPagefileBitmaps();
MiReserveDriverPtes();
MiReserveEnclavePages();
MiReservePageFileSpace();
MiReservePageFileSpaceForPage();
MiReservePageHash();
MiReservePrivilegedPtes();
MiReservePtes();
MiReserveUserMemory();
MiReserveWorkingSetSwapSpace();
MiReserveWorkingSetSwapSpaceRuns();
MiResetAccessBitPte();
MiResetAccessBitPteWorker();
MiResetAccessBitsEPTCallback();
MiResetAccessBitsTail();
MiResetVirtualMemory();
MiResidentPagesForSpan();
MiResizeAweBitMap();
MiResolveDemandZeroFault();
MiResolveImageReferences();
MiResolveMappedFileFault();
MiResolveMemoryEvent();
MiResolvePageFileFault();
MiResolvePrivateZeroFault();
MiResolveProtoCombine();
MiResolveProtoPteFault();
MiResolveSharedZeroFault();
MiResolveTransitionFault();
MiRestoreTransitionPte();
MiRestrictRangeToNode();
MiResumeFromHibernate();
MiResumeMarkPageLists();
MiRetainSubsection();
MiRetardMdl();
MiRetryNonPagedAllocation();
MiReturnBadPagesToBadList();
MiReturnCcAccessLog();
MiReturnCommit();
MiReturnCrossPartitionCharges();
MiReturnCrossPartitionCloneCharges();
MiReturnCrossPartitionCombineCharges();
MiReturnCrossPartitionControlAreaCharges();
MiReturnCrossPartitionSectionCharges();
MiReturnDriverLoadPages();
MiReturnEnclavePage();
MiReturnFaultCharges();
MiReturnFreeZeroPage();
MiReturnFullProcessCharges();
MiReturnFullProcessCommitment();
MiReturnImageBase();
MiReturnNonPagedPoolPde();
MiReturnNonPagedPoolVa();
MiReturnPageTablePageCommitment();
MiReturnPartitionPagesToParent();
MiReturnPartitionResidentAvailable();
MiReturnPfnList();
MiReturnPfnReferenceCount();
MiReturnPhysicalPoolPages();
MiReturnPoolCharges();
MiReturnProcessCommitment();
MiReturnProcessPhysicalPages();
MiReturnProcessVads();
MiReturnPteMappingPair();
MiReturnReservedEnclavePages();
MiReturnResidentAvailable();
MiReturnSplitPageCharges();
MiReturnSystemCharges();
MiReturnSystemImageAddress();
MiReturnSystemImageCommitment();
MiReturnSystemPtes();
MiReturnSystemVa();
MiReturnVadQuota();
MiReturnWsToExpansionList();
MiReuseStandbyPage();
MiRevertQuasiPte();
MiRevertRelocatedImagePfn();
MiRevertRelocations();
MiRevertValidPte();
MiRevokeExecutePte();
MiRevokeExecuteTail();
MiRewritePteWithLockBit();
MiRewriteTrimPteAsDemandZero();
MiRotateComplete();
MiRotatedToFrameBuffer();
MiRoundUpToPowerOf2SizeT();
MiSanitizePage();
MiSanitizePfnProtection();
MiScanLeafNonPagedPool();
MiScanNonPagedPoolVa();
MiScanPagefileSpace();
MiScanPagefiles();
MiScanRelocationPage();
MiScrubAwePage();
MiScrubLargeMappedPage();
MiScrubMemoryWorker();
MiScrubNode();
MiScrubNodeLargePageList();
MiScrubNodeLargePages();
MiScrubNonPagedPool();
MiScrubPage();
MiScrubProcessLargePages();
MiScrubProcessPhysicalPages();
MiScrubProcesses();
MiSectionClose();
MiSectionControlArea();
MiSectionCreated();
MiSectionDelete();
MiSectionInitialization();
MiSectionOpen();
MiSecureVad();
MiSegmentDelete();
MiSelectBitMapForImage();
MiSelectCfgBitMap();
MiSelectImageBase();
MiSelectRelocationStartHint();
MiSelectSessionAttachProcess();
MiSelectSystemImageAddress();
MiSelectUserAddress();
MiSessionAddProcess();
MiSessionCreate();
MiSessionCreateInternal();
MiSessionInsertImage();
MiSessionLookupImage();
MiSessionObjectCreate();
MiSessionObjectDelete();
MiSessionPoolVector();
MiSessionReferenceImage();
MiSessionRemoveImage();
MiSessionUnlinkProcess();
MiSessionUnloadAllImages();
MiSessionUpdateImageCharges();
MiSetControlAreaSystemVa();
MiSetDeleteOnClose();
MiSetFaultPacketDirectives();
MiSetGraphicsPtes();
MiSetImageHotPatchAllowed();
MiSetImageProtection();
MiSetInPagePrefetchPriority();
MiSetInPagePriority();
MiSetLeafPfnBuddy();
MiSetNonPagedPoolNoSteal();
MiSetNonResidentPteHeat();
MiSetOriginalPtePfnFromFreeList();
MiSetPageFileAllocationBits();
MiSetPageTablePfnBuddy();
MiSetPagesModified();
MiSetPagingOfDriver();
MiSetPfnBlink();
MiSetPfnKernelStack();
MiSetPfnLink();
MiSetPfnNodeBlinkHigh();
MiSetPfnOriginalPte();
MiSetPfnOwnedAndActive();
MiSetPfnTbFlushStamp();
MiSetProbePagesAhead();
MiSetProcessPartitionId();
MiSetProtectionOnSection();
MiSetProtectionOnTransitionPte();
MiSetReadOnlyOnSectionView();
MiSetRetpolineRoutines();
MiSetSlabAllocatorPolicy();
MiSetSubsectionBase();
MiSetSystemCacheReverseMap();
MiSetSystemCodeProtection();
MiSetSystemRegionTypes();
MiSetTrimWhileAgingState();
MiSetVaAgeList();
MiSetVadBits();
MiSetVadFlags();
MiSetWsleProtection();
MiSetZeroPageThreadPriority();
MiShadowTopLevelPxes();
MiShareExistingControlArea();
MiSharePages();
MiSharedVaToPartition();
MiShouldLockPteDirectly();
MiShouldTrimUnusedSegments();
MiShowBadMapper();
MiShutdownSystem();
MiSignalLargePageRebuild();
MiSignalNonPagedPoolWatchers();
MiSimpleAgePte();
MiSimpleAgeWorkingSetEPTCallback();
MiSimpleAgeWorkingSetTail();
MiSimpleAging();
MiSizeMemoryListLocks();
MiSkipEntirePagefileRegions();
MiSlabAllocatorRecentFailure();
MiSlistGetFreePage();
MiSlowRotateCopy();
MiSmallVaStillMapsFrame();
MiSnapDriverRange();
MiSnapThunk();
MiSnapUnresolvedImport();
MiSortMdlFrames();
MiSplitBitmapPages();
MiSplitDirectMapPage();
MiSplitDriverPage();
MiSplitMirrorBitMap();
MiSplitPfnBitMaps();
MiSplitPrivatePage();
MiSplitReducedCommitClonePage();
MiStartingOffset();
MiStartingOffsetNeedLock();
MiStealPage();
MiStoreChargeReservedPages();
MiStoreCheckCandidatePage();
MiStoreCheckCompleteWriteBatch();
MiStoreEvictPageFile();
MiStoreEvictThread();
MiStoreFaultComplete();
MiStoreFreeWriteSupport();
MiStoreLogFullPagefile();
MiStoreLogNotCandidate();
MiStoreLogWriteCompleteFailure();
MiStoreLogWriteDisabled();
MiStoreLogWriteIssueFailure();
MiStoreLogWriteIssueRetry();
MiStoreMarkLockedPagesModified();
MiStoreModifiedWriteDereference();
MiStoreSetEvictPageFile();
MiStoreSetPageFileRunEvicted();
MiStoreUpdateMemoryConditions();
MiStoreUpdatePagefileHash();
MiStoreWriteIssue();
MiStoreWriteModifiedCompleteApc();
MiStoreWriteModifiedPages();
MiStrongCodeImage();
MiSubsectionNeedsExtents();
MiSubsectionProtosCreated();
MiSufficientAvailablePages();
MiSwapHardFaultPage();
MiSwapNumaStandbyPage();
MiSwapStackPage();
MiSwapStackPageNoDpc();
MiSwitchBaseAddress();
MiSwitchKstackPages();
MiSwitchToPfns();
MiSwitchToTransition();
MiSwizzleInvalidPte();
MiSyncCommitSignals();
MiSyncSystemPdes();
MiSynchronizeSystemVa();
MiSynchronousPageWrite();
MiSystemFault();
MiSystemImageHasPrivateFixups();
MiSystemVaToDynamicBitmap();
MiTbFlushSort();
MiTbFlushType();
MiTerminateEnclave();
MiTerminateHardwareEnclave();
MiTerminateWsle();
MiTerminateWsleCluster();
MiThreadIdealNode();
MiTradeActivePage();
MiTradeBootImagePage();
MiTradePage();
MiTradeTransitionPage();
MiTransferPartitionPageRun();
MiTransferSoftwarePte();
MiTransformValidPteInPlace();
MiTransientCombineAddress();
MiTransientPageListWriter();
MiTranslatePageForCopy();
MiTranslateWsType();
MiTrimAllSystemPagableMemory();
MiTrimOrAgeWorkingSet();
MiTrimPte();
MiTrimPteWorker();
MiTrimSection();
MiTrimSharedPage();
MiTrimSharedPageFromViews();
MiTrimSystemImagePages();
MiTrimThisWsle();
MiTrimUnusedPageFileRegionsApc();
MiTrimUnusedPageFileRegionsWorker();
MiTrimWorkingSet();
MiTrimWorkingSetBuildup();
MiTrimWorkingSetEPTCallback();
MiTrimWorkingSetTail();
MiTrimmedEnough();
MiTryDeleteTransitionPte();
MiTryLockLeafAndContainingPagesAtDpc();
MiTryLockLeafPage();
MiTryLockProtoPoolPageAtDpc();
MiTryToAcquireExpansionLockAtDpc();
MiTryUnlinkNodeLargePage();
MiUnapplyDriverHotPatch();
MiUnlinkBadPages();
MiUnlinkFreeOrZeroedPage();
MiUnlinkNodeLargePage();
MiUnlinkNodeLargePageHelper();
MiUnlinkNumaStandbyPage();
MiUnlinkPageFromBadList();
MiUnlinkPageFromList();
MiUnlinkProcessFromSession();
MiUnlinkSessionList();
MiUnlinkSessionWorkingSet();
MiUnlinkStandbyBatch();
MiUnlinkStandbyPfn();
MiUnlinkSubsectionWaitBlock();
MiUnlinkUnusedControlArea();
MiUnlinkWorkingSet();
MiUnloadApproved();
MiUnloadHotPatch();
MiUnloadHotPatchForUserSid();
MiUnloadSystemImage();
MiUnlockAllMemoryLists();
MiUnlockAndDereferenceNestedVad();
MiUnlockAndDereferenceVad();
MiUnlockAndDereferenceVadShared();
MiUnlockAwePagesExclusive();
MiUnlockAwePagesShared();
MiUnlockAweVadsExclusive();
MiUnlockAweVadsShared();
MiUnlockBootPageSections();
MiUnlockCodePage();
MiUnlockControlAreaFileObjectShared();
MiUnlockControlAreaSectionExtend();
MiUnlockDriverCode();
MiUnlockDriverMappings();
MiUnlockDynamicMemoryExclusive();
MiUnlockDynamicMemoryShared();
MiUnlockFaultPageTable();
MiUnlockFaultWorkingSet();
MiUnlockFlushMdl();
MiUnlockHotPatchPages();
MiUnlockImageSection();
MiUnlockLoaderEntry();
MiUnlockMdlWritePages();
MiUnlockNestedPageTableWritePte();
MiUnlockNestedProtoPoolPage();
MiUnlockNestedVad();
MiUnlockPage();
MiUnlockPageTable();
MiUnlockPageTableCharges();
MiUnlockPageTableInternal();
MiUnlockPageTableRange();
MiUnlockPagedAddress();
MiUnlockPartitionSystemThreads();
MiUnlockProbePacketWorkingSet();
MiUnlockProtoPoolPage();
MiUnlockStealVm();
MiUnlockStoreLockedPages();
MiUnlockSystemVa();
MiUnlockVa();
MiUnlockVad();
MiUnlockVadCore();
MiUnlockVadRange();
MiUnlockVadShared();
MiUnlockWorkingSetExclusive();
MiUnlockWorkingSetShared();
MiUnlockWsle();
MiUnmapFrameBuffer();
MiUnmapImageInSystemSpace();
MiUnmapLargeDriver();
MiUnmapLargePages();
MiUnmapLockedPagesInUserSpace();
MiUnmapMdlCommon();
MiUnmapPageInHyperSpaceWorker();
MiUnmapRetpolineStubs();
MiUnmapSinglePage();
MiUnmapVad();
MiUnmapViewOfSection();
MiUnsecureVirtualMemoryAgainstWrites();
MiUpControlAreaRefs();
MiUpdateActiveSubsection();
MiUpdateAvailableEvents();
MiUpdateAwePageTable();
MiUpdateCfgSystemWideBitmap();
MiUpdateCfgSystemWideBitmapWorker();
MiUpdateChargedWsles();
MiUpdateClaimDistribution();
MiUpdateControlAreaCommitCount();
MiUpdateEnclavePfnProtection();
MiUpdateForkMaps();
MiUpdateImagePfnImportRelocations();
MiUpdateImportRelocationsOnDriverPrivatePages();
MiUpdateLargePageBitMap();
MiUpdateLargePagePfns();
MiUpdateLargePageSectionPfn();
MiUpdateLastSubsectionSize();
MiUpdateMirrorBitmaps();
MiUpdateOldPagesEPTCallback();
MiUpdateOldPte();
MiUpdateOldPteWorker();
MiUpdateOldWorkingSetPagesTail();
MiUpdatePageAttributeStamp();
MiUpdatePageFileHighInPte();
MiUpdatePageFileList();
MiUpdatePageTableUseCount();
MiUpdatePageThresholdsDpc();
MiUpdatePagefilePeakUsage();
MiUpdatePagingFileMinimum();
MiUpdatePartitionLargePfnBitMap();
MiUpdatePartitionMemory();
MiUpdatePerSessionProto();
MiUpdatePfnBackingStore();
MiUpdatePfnPriority();
MiUpdatePfnPriorityByPte();
MiUpdatePfnProtection();
MiUpdatePrefetchPriority();
MiUpdatePrivateDemandZeroView();
MiUpdateProcessSharedCommit();
MiUpdateReserveClusterInfo();
MiUpdateRetpolineImportFixups();
MiUpdateSlabPagePlaceholderState();
MiUpdateSubsectionCrossPartitionRefs();
MiUpdateSystemPdes();
MiUpdateSystemProtoPtesTree();
MiUpdateThunks();
MiUpdateTransitionPteFrame();
MiUpdateUserMappings();
MiUpdateVadBits();
MiUpdateWorkingSetPrivateSize();
MiUpdateWsleAge();
MiUpdateZeroFreeBitmap();
MiUseLargeDriverPage();
MiUseLowIoPriorityForModifiedPages();
MiUseSlabAllocator();
MiUseSlabAllocatorForDriverPage();
MiUserFault();
MiUserPdeOrAbove();
MiVaIsPageFileHash();
MiVaIsSessionSpecialPool();
MiVaIsUltra();
MiVaToPfn();
MiVaToSoftwareWsle();
MiVadDeleted();
MiVadHasSharedCommit();
MiVadIsCfgBitmap();
MiVadMapsLargeImage();
MiVadPureReserve();
MiValidCombineProtection();
MiValidFault();
MiValidVirtualizationFault();
MiValidateAllocationType();
MiValidateControlAreaPartition();
MiValidateExistingImage();
MiValidateImagePfn();
MiValidateInPage();
MiValidateMdlTracker();
MiValidateMemoryRangeEntries();
MiValidatePagefilePageHash();
MiValidateSectionCreate();
MiValidateSectionSigningPolicy();
MiValidateStrongCodeDriverImage();
MiValidateUserCallTarget();
MiValidateZeroBits();
MiVerifyImageHeader();
MiViewMayContainPage();
MiVolunteerForTrimFirst();
MiWaitForAsynchronousFlushes();
MiWaitForAvailablePages();
MiWaitForCollidedFaultComplete();
MiWaitForFreePage();
MiWaitForFreePagesToZero();
MiWaitForInPageComplete();
MiWaitForPageWriteCompletion();
MiWaitForRotateToComplete();
MiWaitForSystemCacheViewFlush();
MiWaitForVadDeletion();
MiWakeFileOnlyReaper();
MiWakeLargePageRebuild();
MiWakeModifiedPageWriter();
MiWalkEntireImage();
MiWalkPageTables();
MiWalkPageTablesRecursively();
MiWalkResetCommitPages();
MiWalkResetCommitPte();
MiWalkVaCheckCommon();
MiWalkVaRange();
MiWorkingSetInfoCheckPageTable();
MiWorkingSetIsContended();
MiWorkingSetManager();
MiWorkingSetVeryLarge();
MiWriteAwePtes();
MiWriteComplete();
MiWriteCompletePfn();
MiWriteEnclavePte();
MiWriteNewContainingFrame();
MiWritePageFileHash();
MiWriteProtectSystemImages();
MiWritePteShadow();
MiWriteSharedDemandZeroPte();
MiWriteTopLevelPxe();
MiWriteUselessChildPte();
MiWriteValidPteNewPage();
MiWriteValidPteNewProtection();
MiWriteValidPteVolatile();
MiWriteWsle();
MiWsSwapPageFileNumber();
MiWsleFlush();
MiWsleFree();
MiYieldPageTableWalk();
MiZeroAllPageFiles();
MiZeroAndConvertLargePage();
MiZeroAndFlushPtes();
MiZeroBootLargePages();
MiZeroBootMappings();
MiZeroCfgSystemWideBitmap();
MiZeroCfgSystemWideBitmapWorker();
MiZeroInParallel();
MiZeroInParallelWorker();
MiZeroLargePage();
MiZeroLargePageThread();
MiZeroLargePages();
MiZeroNodePages();
MiZeroPage();
MiZeroPageFile();
MiZeroPageFileFirstPage();
MiZeroPageThread();
MiZeroPageWorkMapping();
MiZeroPageWrite();
MiZeroPhysicalPage();
MiZeroSectionObjectPointer();
MigrateOOBELanguageToInstallationLanguage();
MmAccessFault();
MmAcquireLoadLock();
MmAcquireSessionPoolRundown();
MmAddPhysicalMemory();
MmAddPrivateDataToCrashDump();
MmAddRangeToCrashDump();
MmAddVerifierSpecialThunks();
MmAddVerifierThunks();
MmAdjustWorkingSetSize();
MmAdjustWorkingSetSizeEx();
MmAdvanceMdl();
MmAllocateContiguousMemory();
MmAllocateContiguousMemorySpecifyCache();
MmAllocateContiguousMemorySpecifyCacheNode();
MmAllocateContiguousNodeMemory();
MmAllocateDumpHibernateResources();
MmAllocateIndependentPages();
MmAllocateIndependentPagesEx();
MmAllocateIsrStack();
MmAllocateMappingAddress();
MmAllocateMdlForIoSpace();
MmAllocateNodePagesForMdlEx();
MmAllocateNonCachedMemory();
MmAllocateNonChargedSecurePages();
MmAllocatePagesForMdl();
MmAllocatePagesForMdlEx();
MmAllocatePartitionNodePagesForMdlEx();
MmAllocatePoolMemory();
MmAllocateSecureKernelPages();
MmAllocateSpecialPool();
MmAllocateUserStack();
MmAllocateVirtualMemory();
MmAllocateVirtualMemory$filt$0();
MmAreMdlPagesCached();
MmAreMdlPagesLocked();
MmAssignProcessToJob();
MmAttachSession();
MmBackSystemImageWithPagefile();
MmBuildMdlForNonPagedPool();
MmCallDllInitialize();
MmCanFileBeTruncated();
MmCanThreadFault();
MmChangeImageProtection();
MmChangeKernelCfgBitmap();
MmChangeSectionBackingFile();
MmChargeResources();
MmCheckCachedPageStates();
MmCheckForSafeExecution();
MmCheckImageMapping();
MmCheckMapIoSpace();
MmCheckMdlPages();
MmCheckProcessShadow();
MmCleanProcessAddressSpace();
MmCommitSessionMappedView();
MmConfigurePrefetchSeekThreshold();
MmCopyMemory();
MmCopyToCachedPage();
MmCopyToCachedPage$filt$0();
MmCopyVirtualMemory();
MmCopyVirtualMemory$filt$0();
MmCreateCacheManagerSection();
MmCreateKernelStack();
MmCreateMdl();
MmCreateMirror();
MmCreatePartition();
MmCreatePeb();
MmCreateProcessAddressSpace();
MmCreateSection();
MmCreateSectionEx();
MmCreateShadowMapping();
MmCreateSpecialImageSection();
MmCreateTeb();
MmDbgCopyMemory();
MmDbgMarkPfnModifiedWorker();
MmDeleteKernelStack();
MmDeleteProcessAddressSpace();
MmDeleteProcessor();
MmDeleteShadowMapping();
MmDeleteTeb();
MmDetachSession();
MmDeterminePoolType();
MmDisableModifiedWriteOfSection();
MmDiscardDriverSection();
MmDoesFileHaveUserWritableReferences();
MmDuplicateMemory();
MmEmptyAllWorkingSets();
MmEnablePeriodicAccessClearing();
MmEnableProcessSvm();
MmEnableVerifierForDriver();
MmEnforceWorkingSetLimit();
MmEnoughMemoryForWrite();
MmEnumerateAddressSpaceAndReferenceImages();
MmEnumerateBadPages();
MmEnumerateSystemImages();
MmExtendSection();
MmFlushAllPagesEx();
MmFlushImageSection();
MmFlushSection();
MmFlushVirtualMemory();
MmForceSectionClosed();
MmForceSectionClosedEx();
MmFreeAccessPfnBuffer();
MmFreeBootDriverInitializationCode();
MmFreeBootRegistry();
MmFreeContiguousMemory();
MmFreeContiguousMemorySpecifyCache();
MmFreeIndependentPages();
MmFreeIsrStack();
MmFreeLoaderBlock();
MmFreeMappingAddress();
MmFreeNonCachedMemory();
MmFreeNonChargedSecurePages();
MmFreePagesFromMdl();
MmFreePagesFromMdlEx();
MmFreePoolMemory();
MmFreeSecureKernelPages();
MmFreeSpecialPool();
MmFreeSystemCacheReserveView();
MmFreeVirtualMemory();
MmGetAvailablePages();
MmGetAvailablePagesBelowPriority();
MmGetCacheAttribute();
MmGetCfgBitMapInformation();
MmGetChannelInformation();
MmGetControlAreaPartition();
MmGetDefaultPagePriority();
MmGetDirectoryFrameFromProcess();
MmGetDumpRange();
MmGetEnclaveModuleList();
MmGetFileNameForAddress();
MmGetFileNameForSection();
MmGetFileObjectForSection();
MmGetHighestPhysicalPage();
MmGetImageBase();
MmGetImageFileSignatureInformation();
MmGetImageRetpolineCodePage();
MmGetIoSessionState();
MmGetLowestPhysicalPage();
MmGetMaximumFileSectionSize();
MmGetMaximumNonPagedPoolInBytes();
MmGetMaximumUserAddress();
MmGetMinWsPagePriority();
MmGetNextNode();
MmGetNextSession();
MmGetNodeChannelRanges();
MmGetNumberOfFreeSystemPtes();
MmGetNumberOfPhysicalPages();
MmGetNumberOfPhysicalPagesForPartitionObject();
MmGetPageBadStatus();
MmGetPageFileForCrashDump();
MmGetPageFileInformation();
MmGetPagedPoolCommitPointer();
MmGetPeakCommitment();
MmGetPhysicalAddress();
MmGetPhysicalMemoryRanges();
MmGetPhysicalMemoryRangesEx();
MmGetPhysicalMemoryRangesEx2();
MmGetProcessPartitionId();
MmGetResidentAvailablePages();
MmGetSectionInformation();
MmGetSectionRange();
MmGetSectionStrongImageReference();
MmGetSessionById();
MmGetSessionCreateTime();
MmGetSessionGlobalVA();
MmGetSessionId();
MmGetSessionIdEx();
MmGetSessionLocaleId();
MmGetSessionMappedViewInformation();
MmGetSessionObjectById();
MmGetSessionObjectByProcess();
MmGetSessionSchedulingGroup();
MmGetSessionSchedulingGroupByProcess();
MmGetSharedCommit();
MmGetSystemPageCounts();
MmGetSystemRoutineAddress();
MmGetTotalCommitLimit();
MmGetTotalCommittedPages();
MmGetVirtualForPhysical();
MmGetWorkingSetLeafSize();
MmGrowKernelStack();
MmGrowKernelStackEx();
MmHardFaultBytesRequired();
MmHasImageBeenImportOptimized();
MmIdentifyPhysicalMemory();
MmImageSectionPagable();
MmInSwapVirtualAddresses();
MmInSwapWorkingSet();
MmInitSystem();
MmInitSystemDll();
MmInitializeHandBuiltProcess();
MmInitializeHandBuiltProcess2();
MmInitializeMemoryLimits();
MmInitializeProcessAddressSpace();
MmInitializeProcessor();
MmInvalidateDumpAddresses();
MmIsAddressValid();
MmIsDriverLoadedCurrentSession();
MmIsDriverSuspectForVerifier();
MmIsDriverVerifying();
MmIsDriverVerifyingByAddress();
MmIsExtentDangling();
MmIsFileMapped();
MmIsFileObjectAPagingFile();
MmIsIoSpaceActive();
MmIsNonPagedPoolNx();
MmIsNonPagedSystemAddressValid();
MmIsRecursiveIoFault();
MmIsSessionAddress();
MmIsSessionExecutionValid();
MmIsSessionInCurrentServerSilo();
MmIsSessionLeaderProcess();
MmIsSpecialPoolAddress();
MmIsThisAnNtAsSystem();
MmIsVerifierEnabled();
MmIsWriteErrorFatal();
MmIssueMemoryListCommand();
MmLinkJobProcess();
MmLoadSystemImage();
MmLoadSystemImageEx();
MmLocateUnloadedDriver();
MmLockLoadedModuleListExclusive();
MmLockLoadedModuleListShared();
MmLockPagableDataSection();
MmLockPagableSectionByHandle();
MmLockPreChargedPagedPool();
MmLogQueryCombineStats();
MmLogSystemShareablePfnInfo();
MmLowPowerEpochCallback();
MmManageFaultRange();
MmManagePartitionCombineMemory();
MmManagePartitionGetMemoryEvents();
MmManagePartitionInitialAddMemory();
MmManagePartitionMemoryInformation();
MmManagePartitionMoveMemory();
MmMapApiSetView();
MmMapIoSpace();
MmMapIoSpaceEx();
MmMapLockedPages();
MmMapLockedPagesSpecifyCache();
MmMapLockedPagesWithReservedMapping();
MmMapLockedRestartPages();
MmMapMdl();
MmMapMemoryDumpMdl();
MmMapMemoryDumpMdlEx();
MmMapSecureViewOfSection();
MmMapUserAddressesToPage();
MmMapViewInSessionSpace();
MmMapViewInSessionSpaceEx();
MmMapViewInSystemCache();
MmMapViewInSystemSpace();
MmMapViewInSystemSpaceEx();
MmMapViewOfSection();
MmMapViewOfSectionEx();
MmMarkHiberPhase();
MmMarkHiberRange();
MmMarkHypercallPageRetpolineBit();
MmMarkImageForHiberPhase();
MmMarkPhysicalMemoryAsBad();
MmMarkPhysicalMemoryAsGood();
MmMdlPageContentsState();
MmMdlPagesAreZero();
MmNotifyProcessInSwapTrigger();
MmObtainChargesToLockPagedPool();
MmOnlySystemCacheViewsPresent();
MmOutSwapVirtualAddresses();
MmOutSwapWorkingSet();
MmPageEntireDriver();
MmPerfLogSessionRundown();
MmPerformMemoryListCommand();
MmPrefetchForCacheManager();
MmPrefetchPages();
MmPrefetchPagesEx();
MmPrefetchVirtualAddresses();
MmPrefetchVirtualMemory();
MmProbeAndLockPages();
MmProbeAndLockPagesPrivate();
MmProbeAndLockProcessPages();
MmProbeAndLockProcessPages$fin$0();
MmProbeAndLockSelectedPages();
MmProcessWorkingSetControl();
MmProtectMdlSystemAddress();
MmProtectPool();
MmProtectVirtualMemory();
MmPurgeSection();
MmQueryApiSetSchema();
MmQueryCommitReleaseState();
MmQueryMemoryListInformation();
MmQueryProcessWorkingSetSwapPages();
MmQuerySessionWorkingSetInformation();
MmQuerySpecialPoolBlockType();
MmQuerySystemMemoryInformation();
MmQuerySystemSize();
MmQuerySystemWorkingSetInformation();
MmQueryVirtualMemory();
MmQueryVirtualMemory$filt$0();
MmQueryWorkingSetInformation();
MmQuitNextSession();
MmRaisePoolQuota();
MmReadProcessPageTables();
MmRegisterHotPatch();
MmReleaseCommitForMemResetPages();
MmReleaseDumpHibernateResources();
MmReleaseLoadLock();
MmReleaseOpaqueSwapSupport();
MmReleaseResourceCharge();
MmRelocatePfnList();
MmRemoveExecuteGrants();
MmRemovePhysicalMemory();
MmRemoveSystemCacheFromDump();
MmReplaceImportEntry();
MmReserveViewInSystemCache();
MmResetDriverPaging();
MmResourcesAvailable();
MmReturnChargesToLockPagedPool();
MmReturnPoolQuota();
MmRotatePhysicalView();
MmScrubMemory();
MmSectionToSectionObjectPointers();
MmSecureVirtualMemory();
MmSecureVirtualMemoryAgainstWrites();
MmSecureVirtualMemoryEx();
MmSelectVsmEnclaveByAddress();
MmSessionGetWin32Callouts();
MmSessionSetUnloadAddress();
MmSetAccessLogging();
MmSetAddressRangeModified();
MmSetAddressRangeModifiedEx();
MmSetBankedSection();
MmSetCommitReleaseEligibility();
MmSetGraphicsPtes();
MmSetMemoryPriorityProcess();
MmSetMinimumAgeRate();
MmSetPageProtection();
MmSetPermanentCacheAttribute();
MmSetPfnListInfo();
MmSetPriorityVaRanges();
MmSetSessionObjectIoEvent();
MmSetTrimWhileAgingState();
MmShutdownSystem();
MmSizeOfMdl();
MmSnapTriageDumpInformation();
MmStealTopLevelPage();
MmStoreAllocateVirtualMemory();
MmStoreChargeResidentAvailableForRead();
MmStoreCheckPagefiles();
MmStoreDecommitVirtualMemory();
MmStoreFlushAllHintedPages();
MmStoreFlushOutstandingEvictions();
MmStoreFreeVirtualMemory();
MmStoreLogCorruptionFixed();
MmStoreProbeAndLockPages();
MmStoreRegister();
MmStrongCodeGuaranteesEnforced();
MmTriageActiveInLastCrash();
MmTrimAllSystemPagableMemory();
MmTrimFilePagesFromWorkingSets();
MmTrimSection();
MmTryIdentifyPage();
MmUnloadSystemImage();
MmUnlockLoadedModuleListShared();
MmUnlockPagableImageSection();
MmUnlockPages();
MmUnlockPreChargedPagedPool();
MmUnmapIoSpace();
MmUnmapLockedPages();
MmUnmapLockedRestartPages();
MmUnmapReservedMapping();
MmUnmapViewInSessionSpace();
MmUnmapViewInSystemCache();
MmUnmapViewInSystemSpace();
MmUnmapViewOfSection();
MmUnsecureVirtualMemory();
MmUpdateMdlTracker();
MmUpdateMdlTrackerForMdlSwitch();
MmUpdateOldWorkingSetPages();
MmUpdateSectionIoAttribution();
MmUpdateSlabRangeProtection();
MmValidateUserCallTarget();
MmVerifierTrimMemory();
MmVerifyCallbackFunction();
MmVerifyCallbackFunctionCheckFlags();
MmVirtualAccessFault();
MmWaitForCacheManagerPrefetch();
MmWaitMultipleForCacheManagerPrefetch();
MmWriteTriageInformation();
MmWriteUnloadedDriverInformation();
MmZeroPageFileAtShutdown();
MmZeroPageWrite();
MxBootDescriptorDepleted();
MxComputeFreeNodeDescriptorRequirements();
MxComputePfnPagesNeeded();
MxConsumeLargePageSlush();
MxCopyPage();
MxCreateFreePfns();
MxCreatePfn();
MxCreatePfns();
MxDescriptorSort();
MxGetNextPage();
MxGetPhase0Mapping();
MxInitializeFreeNodeDescriptors();
MxMapPfnRange();
MxMapVa();
MxMarkActiveDriverBits();
MxMovePageTables();
MxPageAlwaysHot();
MxReleaseFreeDescriptor();
MxRelocatePageTables();
MxSwapPages();
MxSwitchDescriptors();
MxZeroBootMappings();
MxZeroPageTablePfns();
NLG_Notify();
NP_CONTEXT::NpCleanup();
NP_CONTEXT::NpGetResidentLeaf();
NP_CONTEXT::NpLeafDerefInternal();
NP_CONTEXT::NpLeafRefInternal();
NP_CONTEXT::NpLeafRemoveInternal();
NP_CONTEXT::NpNodeAllocate();
NP_CONTEXT::NpNodeFree();
NP_CONTEXT::NpNodesPageOut();
NP_CONTEXT::NpStart();
NP_CONTEXT::NpiGetReservedBuffer();
NP_CONTEXT::NpiLeafPageIn();
NP_CONTEXT::NpiPerformPageOut();
NP_CONTEXT::NpiRebaseCallback();
NP_CONTEXT::NpiTreeWalkCallback();
NT_DISK::Control();
NT_DISK::GetPnpProperty();
NT_DISK::Initialize();
NT_DISK::Read();
NT_DISK::Write();
NT_DISK::`scalar deleting destructor'();
NT_DISK::`vector deleting destructor'();
NormBuffer__Append();
NormBuffer__AppendAndSortDecomposed();
NormBuffer__AppendEx();
NormBuffer__GetCurrentOutputChar();
NormBuffer__GetLastChar();
NormBuffer__Insert();
NormBuffer__IsBlocked();
NormBuffer__LastStartBase();
NormBuffer__LastStartBasePair();
NormBuffer__RecheckStartCombinations();
NormBuffer__ReplaceLastStartBase();
NormBuffer__ReplaceLastStartBasePair();
NormBuffer__RewindOutputCharacter();
NormBuffer__SortBeforeSameClass();
NormalizationListEntry_Alloc();
NormalizationList__InsertTail();
NormalizationList__Lock();
NormalizationList__Lookup();
NormalizationList__Unlock();
Normalization__AppendDecomposedChar();
Normalization__CanCombinableCharactersCombine();
Normalization__CanCombineWithStartBase();
Normalization__CanCombineWithStartFirstPair();
Normalization__GetCharacterInfo();
Normalization__GetFirstDecomposedCharPlane0();
Normalization__GetLastChar();
Normalization__GetSecondAndThirdDecomposedCharPlane0();
Normalization__GetSecondDecomposedCharPlane0();
Normalization__GetThirdAndLastDecomposedCharPlane0();
Normalization__GuessCharCountBySize();
Normalization__IsNormalized();
Normalization__LoadClassMapExceptions();
Normalization__LoadTables();
Normalization__Normalize();
Normalization__NormalizeCharacter();
Normalization__PageLookup();
Normalization__TableLookup();
NtAcceptConnectPort();
NtAccessCheck();
NtAccessCheckAndAuditAlarm();
NtAccessCheckByType();
NtAccessCheckByTypeAndAuditAlarm();
NtAccessCheckByTypeResultList();
NtAccessCheckByTypeResultListAndAuditAlarm();
NtAccessCheckByTypeResultListAndAuditAlarmByHandle();
NtAcquireProcessActivityReference();
NtAcquireProcessActivityReference$filt$0();
NtAddAtom();
NtAddAtomEx();
NtAddBootEntry();
NtAddDriverEntry();
NtAdjustGroupsToken();
NtAdjustPrivilegesToken();
NtAdjustTokenClaimsAndDeviceGroups();
NtAlertResumeThread();
NtAlertResumeThread$filt$0();
NtAlertThread();
NtAlertThreadByThreadId();
NtAllocateLocallyUniqueId();
NtAllocateLocallyUniqueId$filt$0();
NtAllocateReserveObject();
NtAllocateUserPhysicalPages();
NtAllocateUserPhysicalPages$filt$0();
NtAllocateUserPhysicalPages$filt$1();
NtAllocateUuids();
NtAllocateUuids$filt$0();
NtAllocateUuids$filt$1();
NtAllocateVirtualMemory();
NtAllocateVirtualMemory$filt$0();
NtAllocateVirtualMemory$filt$1();
NtAllocateVirtualMemoryEx();
NtAlpcAcceptConnectPort();
NtAlpcCancelMessage();
NtAlpcConnectPort();
NtAlpcConnectPortEx();
NtAlpcCreatePort();
NtAlpcCreatePortSection();
NtAlpcCreateResourceReserve();
NtAlpcCreateSectionView();
NtAlpcCreateSecurityContext();
NtAlpcDeletePortSection();
NtAlpcDeleteResourceReserve();
NtAlpcDeleteSectionView();
NtAlpcDeleteSecurityContext();
NtAlpcDisconnectPort();
NtAlpcImpersonateClientContainerOfPort();
NtAlpcImpersonateClientOfPort();
NtAlpcOpenSenderProcess();
NtAlpcOpenSenderThread();
NtAlpcQueryInformation();
NtAlpcQueryInformationMessage();
NtAlpcRevokeSecurityContext();
NtAlpcSendWaitReceivePort();
NtAlpcSetInformation();
NtApphelpCacheControl();
NtAreMappedFilesTheSame();
NtAssignProcessToJobObject();
NtAssociateWaitCompletionPacket();
NtAssociateWaitCompletionPacket$filt$0();
NtCallEnclave();
NtCallbackReturn();
NtCancelIoFile();
NtCancelIoFileEx();
NtCancelSynchronousIoFile();
NtCancelTimer();
NtCancelTimer2();
NtCancelWaitCompletionPacket();
NtClearEvent();
NtClose();
NtCloseObjectAuditAlarm();
NtCommitComplete();
NtCommitEnlistment();
NtCommitRegistryTransaction();
NtCommitTransaction();
NtCompactKeys();
NtCompareObjects();
NtCompareSigningLevels();
NtCompareTokens();
NtCompleteConnectPort();
NtCompressKey();
NtConnectPort();
NtContinue();
NtConvertBetweenAuxiliaryCounterAndPerformanceCounter();
NtCreateDebugObject();
NtCreateDebugObject$filt$0();
NtCreateDebugObject$filt$1();
NtCreateDirectoryObject();
NtCreateDirectoryObjectEx();
NtCreateEnclave();
NtCreateEnclave$filt$0();
NtCreateEnclave$filt$1();
NtCreateEnclave$filt$2();
NtCreateEnlistment();
NtCreateEvent();
NtCreateEventPair();
NtCreateFile();
NtCreateIRTimer();
NtCreateIoCompletion();
NtCreateIoCompletion$filt$0();
NtCreateIoCompletion$filt$1();
NtCreateJobObject();
NtCreateJobObject$filt$0();
NtCreateJobObject$filt$1();
NtCreateJobSet();
NtCreateKey();
NtCreateKeyTransacted();
NtCreateKeyTransacted_Stub();
NtCreateKeyedEvent();
NtCreateKeyedEvent$filt$0();
NtCreateKeyedEvent$filt$1();
NtCreateLowBoxToken();
NtCreateMailslotFile();
NtCreateMutant();
NtCreateNamedPipeFile();
NtCreatePagingFile();
NtCreatePartition();
NtCreatePartition$filt$0();
NtCreatePartition$filt$1();
NtCreatePort();
NtCreatePrivateNamespace();
NtCreateProcess();
NtCreateProcessEx();
NtCreateProfile();
NtCreateProfileEx();
NtCreateRegistryTransaction();
NtCreateResourceManager();
NtCreateSection();
NtCreateSectionEx();
NtCreateSemaphore();
NtCreateSymbolicLinkObject();
NtCreateThread();
NtCreateThread$filt$0();
NtCreateThreadEx();
NtCreateTimer();
NtCreateTimer2();
NtCreateToken();
NtCreateTokenEx();
NtCreateTransaction();
NtCreateTransactionManager();
NtCreateUserProcess();
NtCreateUserProcess$filt$0();
NtCreateWaitCompletionPacket();
NtCreateWaitCompletionPacket$filt$0();
NtCreateWaitCompletionPacket$filt$1();
NtCreateWaitablePort();
NtCreateWnfStateName();
NtCreateWnfStateName$filt$0();
NtCreateWnfStateName$filt$1();
NtCreateWorkerFactory();
NtCreateWorkerFactory$filt$0();
NtDebugActiveProcess();
NtDebugContinue();
NtDebugContinue$filt$0();
NtDelayExecution();
NtDeleteAtom();
NtDeleteBootEntry();
NtDeleteDriverEntry();
NtDeleteFile();
NtDeleteKey();
NtDeleteObjectAuditAlarm();
NtDeletePrivateNamespace();
NtDeleteValueKey();
NtDeleteWnfStateData();
NtDeleteWnfStateData$filt$0();
NtDeleteWnfStateName();
NtDeleteWnfStateName$filt$0();
NtDeviceIoControlFile();
NtDisableLastKnownGood();
NtDisplayString();
NtDrawText();
NtDuplicateObject();
NtDuplicateObject$filt$0();
NtDuplicateToken();
NtEnableLastKnownGood();
NtEnumerateBootEntries();
NtEnumerateBootEntries$filt$0();
NtEnumerateBootEntries$filt$1();
NtEnumerateDriverEntries();
NtEnumerateDriverEntries$filt$0();
NtEnumerateDriverEntries$filt$1();
NtEnumerateKey();
NtEnumerateSystemEnvironmentValuesEx();
NtEnumerateSystemEnvironmentValuesEx$filt$0();
NtEnumerateSystemEnvironmentValuesEx$filt$1();
NtEnumerateTransactionObject();
NtEnumerateValueKey();
NtExtendSection();
NtFilterBootOption();
NtFilterToken();
NtFilterTokenEx();
NtFindAtom();
NtFlushBuffersFile();
NtFlushBuffersFileEx();
NtFlushInstallUILanguage();
NtFlushInstructionCache();
NtFlushKey();
NtFlushProcessWriteBuffers();
NtFlushVirtualMemory();
NtFlushWriteBuffer();
NtFreeUserPhysicalPages();
NtFreeUserPhysicalPages$filt$0();
NtFreeVirtualMemory();
NtFreeVirtualMemory$filt$0();
NtFreezeRegistry();
NtFreezeTransactions();
NtFsControlFile();
NtGetCachedSigningLevel();
NtGetCompleteWnfStateSubscription();
NtGetCompleteWnfStateSubscription$filt$0();
NtGetCompleteWnfStateSubscription$filt$1();
NtGetContextThread();
NtGetCurrentProcessorNumber();
NtGetCurrentProcessorNumberEx();
NtGetCurrentProcessorNumberEx$filt$0();
NtGetDevicePowerState();
NtGetEnvironmentVariableEx();
NtGetMUIRegistryInfo();
NtGetNextProcess();
NtGetNextProcess$filt$0();
NtGetNextProcess$filt$1();
NtGetNextThread();
NtGetNextThread$filt$0();
NtGetNextThread$filt$1();
NtGetNlsSectionPtr();
NtGetNlsSectionPtr$filt$0();
NtGetNotificationResourceManager();
NtGetWriteWatch();
NtGetWriteWatch$filt$0();
NtGetWriteWatch$filt$1();
NtImpersonateAnonymousToken();
NtImpersonateClientOfPort();
NtImpersonateThread();
NtImpersonateThread$filt$0();
NtInitializeEnclave();
NtInitializeEnclave$filt$0();
NtInitializeEnclave$filt$1();
NtInitializeNlsFiles();
NtInitializeNlsFiles$filt$0();
NtInitializeRegistry();
NtInitiatePowerAction();
NtIsProcessInJob();
NtIsSystemResumeAutomatic();
NtIsUILanguageComitted();
NtListenPort();
NtLoadDriver();
NtLoadEnclaveData();
NtLoadEnclaveData$filt$0();
NtLoadEnclaveData$filt$1();
NtLoadEnclaveData$filt$2();
NtLoadEnclaveData$filt$3();
NtLoadKey();
NtLoadKey2();
NtLoadKeyEx();
NtLockFile();
NtLockProductActivationKeys();
NtLockRegistryKey();
NtLockVirtualMemory();
NtMakePermanentObject();
NtMakeTemporaryObject();
NtManageHotPatch();
NtManagePartition();
NtManagePartition$filt$0();
NtMapCMFModule();
NtMapCMFModule$fin$0();
NtMapCMFModule$fin$1();
NtMapUserPhysicalPages();
NtMapUserPhysicalPagesScatter();
NtMapViewOfSection();
NtMapViewOfSectionEx();
NtModifyBootEntry();
NtModifyDriverEntry();
NtNotifyChangeDirectoryFile();
NtNotifyChangeDirectoryFileEx();
NtNotifyChangeKey();
NtNotifyChangeMultipleKeys();
NtNotifyChangeSession();
NtOpenDirectoryObject();
NtOpenEnlistment();
NtOpenEvent();
NtOpenEventPair();
NtOpenFile();
NtOpenIoCompletion();
NtOpenIoCompletion$filt$0();
NtOpenIoCompletion$filt$1();
NtOpenJobObject();
NtOpenJobObject$filt$0();
NtOpenKey();
NtOpenKeyEx();
NtOpenKeyTransacted();
NtOpenKeyTransactedEx();
NtOpenKeyedEvent();
NtOpenKeyedEvent$filt$0();
NtOpenKeyedEvent$filt$1();
NtOpenMutant();
NtOpenObjectAuditAlarm();
NtOpenPartition();
NtOpenPartition$filt$0();
NtOpenPartition$filt$1();
NtOpenPrivateNamespace();
NtOpenProcess();
NtOpenProcessToken();
NtOpenProcessTokenEx();
NtOpenRegistryTransaction();
NtOpenResourceManager();
NtOpenSection();
NtOpenSemaphore();
NtOpenSession();
NtOpenSession$filt$0();
NtOpenSymbolicLinkObject();
NtOpenThread();
NtOpenThreadToken();
NtOpenThreadTokenEx();
NtOpenTimer();
NtOpenTransaction();
NtOpenTransactionManager();
NtPlugPlayControl();
NtPlugPlayGetDeviceInterfaceEnabled();
NtPlugPlayGetDeviceProperty();
NtPlugPlayGetDeviceRelatedDevice();
NtPlugPlayGetDeviceRelationsList();
NtPlugPlayGetDeviceStatus();
NtPowerInformation();
NtPrePrepareComplete();
NtPrePrepareEnlistment();
NtPrepareComplete();
NtPrepareEnlistment();
NtPrivilegeCheck();
NtPrivilegeObjectAuditAlarm();
NtPrivilegedServiceAuditAlarm();
NtPropagationComplete();
NtPropagationFailed();
NtProtectVirtualMemory();
NtPulseEvent();
NtQueryAttributesFile();
NtQueryAuxiliaryCounterFrequency();
NtQueryBootEntryOrder();
NtQueryBootEntryOrder$filt$0();
NtQueryBootEntryOrder$filt$1();
NtQueryBootOptions();
NtQueryBootOptions$filt$0();
NtQueryBootOptions$filt$1();
NtQueryDebugFilterState();
NtQueryDefaultLocale();
NtQueryDefaultLocale$filt$0();
NtQueryDefaultUILanguage();
NtQueryDefaultUILanguage$filt$0();
NtQueryDirectoryFile();
NtQueryDirectoryFileEx();
NtQueryDirectoryObject();
NtQueryDriverEntryOrder();
NtQueryDriverEntryOrder$filt$0();
NtQueryDriverEntryOrder$filt$1();
NtQueryEaFile();
NtQueryEnvironmentVariableInfoEx();
NtQueryEvent();
NtQueryFullAttributesFile();
NtQueryInformationAtom();
NtQueryInformationByName();
NtQueryInformationEnlistment();
NtQueryInformationFile();
NtQueryInformationFile$fin$0();
NtQueryInformationJobObject();
NtQueryInformationPort();
NtQueryInformationProcess();
NtQueryInformationProcess$filt$0();
NtQueryInformationProcess$filt$1();
NtQueryInformationProcess$filt$10();
NtQueryInformationProcess$filt$11();
NtQueryInformationProcess$filt$12();
NtQueryInformationProcess$filt$13();
NtQueryInformationProcess$filt$14();
NtQueryInformationProcess$filt$15();
NtQueryInformationProcess$filt$16();
NtQueryInformationProcess$filt$17();
NtQueryInformationProcess$filt$18();
NtQueryInformationProcess$filt$19();
NtQueryInformationProcess$filt$2();
NtQueryInformationProcess$filt$20();
NtQueryInformationProcess$filt$21();
NtQueryInformationProcess$filt$3();
NtQueryInformationProcess$filt$4();
NtQueryInformationProcess$filt$5();
NtQueryInformationProcess$filt$6();
NtQueryInformationProcess$filt$7();
NtQueryInformationProcess$filt$8();
NtQueryInformationProcess$filt$9();
NtQueryInformationResourceManager();
NtQueryInformationThread();
NtQueryInformationThread$filt$0();
NtQueryInformationThread$filt$1();
NtQueryInformationThread$filt$2();
NtQueryInformationThread$fin$3();
NtQueryInformationToken();
NtQueryInformationTransaction();
NtQueryInformationTransactionManager();
NtQueryInformationWorkerFactory();
NtQueryInformationWorkerFactory$filt$0();
NtQueryInstallUILanguage();
NtQueryInstallUILanguage$filt$0();
NtQueryIntervalProfile();
NtQueryIoCompletion();
NtQueryIoCompletion$filt$0();
NtQueryIoCompletion$filt$1();
NtQueryKey();
NtQueryLicenseValue();
NtQueryMultipleValueKey();
NtQueryMutant();
NtQueryObject();
NtQueryObject$filt$0();
NtQueryObject$filt$1();
NtQueryObject$filt$2();
NtQueryObject$filt$3();
NtQueryOpenSubKeys();
NtQueryOpenSubKeysEx();
NtQueryPerformanceCounter();
NtQueryPortInformationProcess();
NtQueryQuotaInformationFile();
NtQuerySection();
NtQuerySecurityAttributesToken();
NtQuerySecurityObject();
NtQuerySecurityPolicy();
NtQuerySecurityPolicy$filt$0();
NtQuerySecurityPolicy$filt$1();
NtQuerySemaphore();
NtQuerySymbolicLinkObject();
NtQuerySystemEnvironmentValue();
NtQuerySystemEnvironmentValue$filt$0();
NtQuerySystemEnvironmentValue$filt$1();
NtQuerySystemEnvironmentValueEx();
NtQuerySystemEnvironmentValueEx$filt$0();
NtQuerySystemEnvironmentValueEx$filt$1();
NtQuerySystemInformation();
NtQuerySystemInformationEx();
NtQuerySystemTime();
NtQueryTimer();
NtQueryTimerResolution();
NtQueryTimerResolution$filt$0();
NtQueryValueKey();
NtQueryVirtualMemory();
NtQueryVolumeInformationFile();
NtQueryWnfStateData();
NtQueryWnfStateData$filt$0();
NtQueryWnfStateData$filt$1();
NtQueryWnfStateNameInformation();
NtQueryWnfStateNameInformation$filt$0();
NtQueryWnfStateNameInformation$filt$1();
NtQueryWnfStateNameInformation$filt$2();
NtQueueApcThread();
NtQueueApcThreadEx();
NtRaiseException();
NtRaiseHardError();
NtReadFile();
NtReadFile$filt$0();
NtReadFileScatter();
NtReadFileScatter$filt$0();
NtReadOnlyEnlistment();
NtReadRequestData();
NtReadVirtualMemory();
NtRecoverEnlistment();
NtRecoverResourceManager();
NtRecoverTransactionManager();
NtRegisterProtocolAddressInformation();
NtRegisterThreadTerminatePort();
NtReleaseKeyedEvent();
NtReleaseKeyedEvent$filt$0();
NtReleaseMutant();
NtReleaseMutant$filt$0();
NtReleaseSemaphore();
NtReleaseWorkerFactoryWorker();
NtRemoveIoCompletion();
NtRemoveIoCompletion$filt$0();
NtRemoveIoCompletionEx();
NtRemoveIoCompletionEx$filt$0();
NtRemoveProcessDebug();
NtRenameKey();
NtRenameTransactionManager();
NtReplaceKey();
NtReplacePartitionUnit();
NtReplyPort();
NtReplyWaitReceivePort();
NtReplyWaitReceivePortEx();
NtReplyWaitReplyPort();
NtRequestPort();
NtRequestWaitReplyPort();
NtResetEvent();
NtResetWriteWatch();
NtRestoreKey();
NtResumeProcess();
NtResumeThread();
NtResumeThread$filt$0();
NtRevertContainerImpersonation();
NtRollbackComplete();
NtRollbackEnlistment();
NtRollbackRegistryTransaction();
NtRollbackTransaction();
NtRollforwardTransactionManager();
NtSaveKey();
NtSaveKeyEx();
NtSaveMergedKeys();
NtSecureConnectPort();
NtSerializeBoot();
NtSetBootEntryOrder();
NtSetBootEntryOrder$filt$0();
NtSetBootOptions();
NtSetBootOptions$filt$0();
NtSetCachedSigningLevel();
NtSetCachedSigningLevel2();
NtSetCachedSigningLevel2$filt$0();
NtSetContextThread();
NtSetDebugFilterState();
NtSetDefaultHardErrorPort();
NtSetDefaultLocale();
NtSetDefaultUILanguage();
NtSetDriverEntryOrder();
NtSetDriverEntryOrder$filt$0();
NtSetEaFile();
NtSetEvent();
NtSetEventBoostPriority();
NtSetHighEventPair();
NtSetHighWaitLowEventPair();
NtSetIRTimer();
NtSetInformationDebugObject();
NtSetInformationDebugObject$filt$0();
NtSetInformationEnlistment();
NtSetInformationFile();
NtSetInformationJobObject();
NtSetInformationKey();
NtSetInformationObject();
NtSetInformationObject$filt$0();
NtSetInformationProcess();
NtSetInformationProcess$filt$0();
NtSetInformationProcess$filt$1();
NtSetInformationProcess$filt$2();
NtSetInformationProcess$filt$3();
NtSetInformationProcess$filt$4();
NtSetInformationProcess$filt$5();
NtSetInformationResourceManager();
NtSetInformationSymbolicLink();
NtSetInformationThread();
NtSetInformationThread$filt$0();
NtSetInformationThread$filt$2();
NtSetInformationThread$fin$1();
NtSetInformationToken();
NtSetInformationTransaction();
NtSetInformationTransactionManager();
NtSetInformationVirtualMemory();
NtSetInformationVirtualMemory$filt$0();
NtSetInformationVirtualMemory$filt$1();
NtSetInformationWorkerFactory();
NtSetInformationWorkerFactory$filt$0();
NtSetInformationWorkerFactory$filt$1();
NtSetIntervalProfile();
NtSetIoCompletion();
NtSetIoCompletionEx();
NtSetLdtEntries();
NtSetLowEventPair();
NtSetLowWaitHighEventPair();
NtSetQuotaInformationFile();
NtSetSecurityObject();
NtSetSystemEnvironmentValue();
NtSetSystemEnvironmentValue$filt$0();
NtSetSystemEnvironmentValueEx();
NtSetSystemEnvironmentValueEx$filt$0();
NtSetSystemInformation();
NtSetSystemInformation$filt$0();
NtSetSystemInformation$filt$1();
NtSetSystemInformation$filt$10();
NtSetSystemInformation$filt$11();
NtSetSystemInformation$filt$12();
NtSetSystemInformation$filt$13();
NtSetSystemInformation$filt$14();
NtSetSystemInformation$filt$15();
NtSetSystemInformation$filt$16();
NtSetSystemInformation$filt$17();
NtSetSystemInformation$filt$18();
NtSetSystemInformation$filt$19();
NtSetSystemInformation$filt$2();
NtSetSystemInformation$filt$20();
NtSetSystemInformation$filt$21();
NtSetSystemInformation$filt$22();
NtSetSystemInformation$filt$23();
NtSetSystemInformation$filt$24();
NtSetSystemInformation$filt$25();
NtSetSystemInformation$filt$26();
NtSetSystemInformation$filt$27();
NtSetSystemInformation$filt$28();
NtSetSystemInformation$filt$3();
NtSetSystemInformation$filt$4();
NtSetSystemInformation$filt$5();
NtSetSystemInformation$filt$6();
NtSetSystemInformation$filt$7();
NtSetSystemInformation$filt$8();
NtSetSystemInformation$filt$9();
NtSetSystemPowerState();
NtSetSystemTime();
NtSetThreadExecutionState();
NtSetTimer();
NtSetTimer2();
NtSetTimerEx();
NtSetTimerResolution();
NtSetTimerResolution$filt$0();
NtSetUuidSeed();
NtSetValueKey();
NtSetVolumeInformationFile();
NtSetWnfProcessNotificationEvent();
NtShutdownSystem();
NtShutdownWorkerFactory();
NtShutdownWorkerFactory$filt$0();
NtSignalAndWaitForSingleObject();
NtSignalAndWaitForSingleObject$filt$0();
NtSignalAndWaitForSingleObject$filt$1();
NtSignalAndWaitForSingleObject$filt$2();
NtSinglePhaseReject();
NtStartProfile();
NtStopProfile();
NtSubscribeWnfStateChange();
NtSubscribeWnfStateChange$filt$0();
NtSubscribeWnfStateChange$filt$1();
NtSuspendProcess();
NtSuspendThread();
NtSuspendThread$filt$0();
NtSystemDebugControl();
NtTerminateEnclave();
NtTerminateJobObject();
NtTerminateProcess();
NtTerminateThread();
NtTestAlert();
NtThawRegistry();
NtThawTransactions();
NtTraceControl();
NtTraceEvent();
NtTranslateFilePath();
NtTranslateFilePath$filt$0();
NtTranslateFilePath$filt$1();
NtUmsThreadYield();
NtUmsThreadYield$filt$0();
NtUmsThreadYield$filt$1();
NtUnloadDriver();
NtUnloadKey();
NtUnloadKey2();
NtUnloadKeyEx();
NtUnlockFile();
NtUnlockVirtualMemory();
NtUnmapViewOfSection();
NtUnmapViewOfSectionEx();
NtUnsubscribeWnfStateChange();
NtUnsubscribeWnfStateChange$filt$0();
NtUpdateWnfStateData();
NtUpdateWnfStateData$filt$0();
NtUpdateWnfStateData$filt$1();
NtVdmControl();
NtWaitForAlertByThreadId();
NtWaitForDebugEvent();
NtWaitForDebugEvent$filt$0();
NtWaitForDebugEvent$filt$1();
NtWaitForKeyedEvent();
NtWaitForKeyedEvent$filt$0();
NtWaitForMultipleObjects();
NtWaitForMultipleObjects32();
NtWaitForSingleObject();
NtWaitForSingleObject$filt$0();
NtWaitForWorkViaWorkerFactory();
NtWaitForWorkViaWorkerFactory$filt$0();
NtWaitHighEventPair();
NtWaitLowEventPair();
NtWorkerFactoryWorkerReady();
NtWriteFile();
NtWriteFile$filt$0();
NtWriteFileGather();
NtWriteFileGather$filt$0();
NtWriteRequestData();
NtWriteVirtualMemory();
NtYieldExecution();
NtosSecureKernelImportBugcheck();
OBJECT_HEADER_TO_HANDLE_INFO();
OBJECT_HEADER_TO_HANDLE_REVOCATION_INFO();
OBJECT_HEADER_TO_PROCESS_INFO();
OBJECT_HEADER_TO_QUOTA_INFO();
OBP_GET_SILO_ROOT_DIRECTORY_FROM_SILO();
ObAdjustSecurityQuota();
ObAssignObjectSecurityDescriptor();
ObAssignSecurity();
ObAuditInheritedHandleProcedure();
ObCaptureObjectStateForDuplication();
ObCheckActiveHandles();
ObCheckCreateObjectAccess();
ObCheckObjectAccess();
ObCleanupSecurityDescriptor();
ObCloseHandle();
ObCloseHandleTableEntry();
ObCompleteObjectDuplication();
ObCreateKernelObjectsSD();
ObCreateObject();
ObCreateObjectEx();
ObCreateObjectType();
ObCreateObjectTypeEx();
ObCreateSiloRootDirectory();
ObCreateSymbolicLink();
ObDeassignSecurity();
ObDeleteCapturedInsertInfo();
ObDereferenceDeviceMap();
ObDereferenceObject();
ObDereferenceObjectDeferDelete();
ObDereferenceObjectDeferDeleteWithTag();
ObDereferenceObjectEx();
ObDereferenceProcessHandleTable();
ObDereferenceSecurityDescriptor();
ObDestroyHandleRevocationBlock();
ObDrainDeferredObjectDeletion();
ObDuplicateObject();
ObEnableEtwReferenceTrace();
ObEnumerateObjectsByType();
ObFastDereferenceObject();
ObFastReferenceObject();
ObFastReferenceObjectLocked();
ObFastReplaceObject();
ObFindHandleForObject();
ObGetFilterVersion();
ObGetObjectInformation();
ObGetObjectInformation$fin$0();
ObGetObjectSecurity();
ObGetObjectType();
ObGetProcessHandleCount();
ObGetSiloRootDirectoryPath();
ObHandleRevocationBlockAddObject();
ObInheritObjectHandle();
ObInitProcess();
ObInitServerSilo();
ObInitSystem();
ObInitializeFastReference();
ObInitializeProcessor();
ObInsertObject();
ObInsertObjectEx();
ObIsDosDeviceLocallyMapped();
ObIsKernelHandle();
ObKillProcess();
ObLogSecurityDescriptor();
ObMakeTemporaryObject();
ObOpenObjectByName();
ObOpenObjectByNameEx();
ObOpenObjectByPointer();
ObOpenObjectByPointerWithTag();
ObQueryDeviceMapInformation();
ObQueryNameInfo();
ObQueryNameString();
ObQueryNameStringMode();
ObQueryNameStringMode$fin$0();
ObQueryObjectAuditingByHandle();
ObQueryRefTraceInformation();
ObQuerySecurityDescriptorInfo();
ObQuerySecurityObject();
ObQueryTypeInfo();
ObQueryTypeName();
ObReferenceObjectByHandle();
ObReferenceObjectByHandleWithTag();
ObReferenceObjectByName();
ObReferenceObjectByNameEx();
ObReferenceObjectByPointer();
ObReferenceObjectByPointerWithTag();
ObReferenceObjectExWithTag();
ObReferenceObjectSafe();
ObReferenceObjectSafeWithTag();
ObReferenceProcessHandleTable();
ObReferenceSecurityDescriptor();
ObRegisterCallbacks();
ObReleaseObjectSecurity();
ObRevokeHandles();
ObSetCurrentProcessDeviceMap();
ObSetHandleAttributes();
ObSetProcessDeviceMap();
ObSetRefTraceInformation();
ObSetSecurityDescriptorInfo();
ObSetSecurityObjectByPointer();
ObShutdownSystem();
ObUnRegisterCallbacks();
ObWaitForMultipleObjects();
ObWaitForMultipleObjects$filt$0();
ObWaitForSingleObject();
ObWaitForSingleObject$filt$0();
ObfDereferenceDeviceMap();
ObfDereferenceObject();
ObfDereferenceObjectWithTag();
ObfReferenceObject();
ObfReferenceObjectWithTag();
ObpAdjustAccessMask();
ObpAdjustCreatorAccessState();
ObpAllocateAndQuerySecurityDescriptorInfo();
ObpAllocateObject();
ObpAssignSecurity();
ObpAuditObjectAccess();
ObpCallPostOperationCallbacks();
ObpCallPreOperationCallbacks();
ObpCaptureBoundaryDescriptor();
ObpCaptureBoundaryDescriptor$filt$0();
ObpCaptureHandleInformation();
ObpCaptureHandleInformationEx();
ObpCaptureObjectCreateInformation();
ObpCaptureObjectCreateInformation$filt$0();
ObpCaptureObjectName();
ObpCaptureObjectName$filt$0();
ObpChargeQuotaForObject();
ObpCheckDuplicateEntries();
ObpCheckObjectReference();
ObpCheckTraverseAccess();
ObpCloseDirectoryObject();
ObpCloseHandle();
ObpCompareEntryLevel1();
ObpCompareEntryLevel2();
ObpCreateCacheEntry();
ObpCreateDefaultObjectTypeSD();
ObpCreateDirectoryObject();
ObpCreateDosDevicesDirectory();
ObpCreateHandle();
ObpCreateSymbolicLinkName();
ObpCreateTypeArray();
ObpDecrementHandleCount();
ObpDeferObjectDeletion();
ObpDeferPushRefDerefInfo();
ObpDeleteDirectoryEntry();
ObpDeleteDirectoryObject();
ObpDeleteNameCheck();
ObpDeleteSymbolicLink();
ObpDeleteSymbolicLinkName();
ObpDereferenceNamedObject();
ObpDeregisterObject();
ObpDestroyStackAndObjectTables();
ObpDestroyTypeArray();
ObpDirectoryTeardownCallback();
ObpEnumFindHandleProcedure();
ObpFilterOperation();
ObpFreeObject();
ObpFreeObjectNameBuffer();
ObpFreeWorkItemBlock();
ObpGetDosDevicesProtection();
ObpGetObjectRefInfo();
ObpGetObjectSecurity();
ObpGetShadowDirectory();
ObpGetSilosRootDirectory();
ObpGetTraceIndex();
ObpGetWaitObject();
ObpGrantAccess();
ObpHandleRevocationBlockRemoveInsertedObject();
ObpHandleRevocationBlockRemoveObject();
ObpHashBoundaryFunction();
ObpIncrPointerCount();
ObpIncrPointerCountEx();
ObpIncrementHandleCountEx();
ObpInitInfoBlockOffsets();
ObpInitObjectTypeSD();
ObpInitStackAndObjectTables();
ObpInitStackTrace();
ObpInitializeRootNamespace();
ObpInsertCallbackByAltitude();
ObpInsertDirectoryEntry();
ObpInsertHandleCount();
ObpInsertOrLocateNamedObject();
ObpIsKernelHandle();
ObpIsObjectPoolTagTraced();
ObpIsUnsecureName();
ObpLockDirectoryExclusive();
ObpLockDirectoryShared();
ObpLockHandleDataBaseEntry();
ObpLookupDirectoryEntry();
ObpLookupDirectoryEntryEx();
ObpLookupDirectoryUsingHash();
ObpLookupNamespaceEntry();
ObpLookupObjectName();
ObpMarkDirectoryObjectsTemporary();
ObpMarkDirectoryTreeTemporary();
ObpParseSymbolicLinkEx();
ObpPostInterceptHandleCreate();
ObpPostInterceptHandleDuplicate();
ObpPreInterceptHandleDuplicate();
ObpProcessRemoveObjectDpcWorker();
ObpProcessRemoveObjectQueue();
ObpPushRefDerefInfo();
ObpPushStackInfo();
ObpPushStackInfoQueue();
ObpReferenceDeviceMap();
ObpReferenceNamedObject();
ObpReferenceObjectByHandleWithTag();
ObpReferenceProcessObjectByHandle();
ObpReferenceSecurityDescriptor();
ObpRefillWorkItemFreeList();
ObpRegisterObject();
ObpRegisterPrivateNamespace();
ObpReleaseHandleInfo();
ObpReleaseLookupContext();
ObpRemoveNamespaceFromTable();
ObpRemoveObjectRoutine();
ObpSetDeviceMap();
ObpSetObjectAuditInfo();
ObpSetSiloDeviceMap();
ObpShutdownCloseHandleProcedure();
ObpStartRuntimeStackTrace();
ObpStopRuntimeStackTrace();
ObpTraceObjectDereferenceIfActive();
ObpTraceObjectReferenceIfActive();
ObpUnlockDirectory();
ObpUnlockHandleDatabaseEntry();
ObpVerifyAccessToBoundaryEntry();
ObpVerifyCreatorAccessCheck();
OpenGlobalizationUserSettingsKey();
OpenGlobalizationUserSettingsKey_ForSingleUserModel();
OpenOrCreateKeyWithFlags();
PcwAddInstance();
PcwCloseInstance();
PcwCreateInstance();
PcwRegister();
PcwUnregister();
PdcAcquireRwLockExclusive();
PdcNotificationClientAcknowledge();
PdcNotificationClientRegister();
PdcNotificationClientUnregister();
PdcPoCsEnterExitReason();
PdcPoCurrentPdcPhase();
PdcPoGetAggressiveStandbyActions();
PdcPoIdleScanEnabled();
PdcPoLowPower();
PdcPoNetworkResiliency();
PdcPoPerfOverride();
PdcPoPpmApplyProfile();
PdcPoPpmRegisterProfiles();
PdcPoPpmResetProfile();
PdcPoQueryExpectedStandbyTime();
PdcPoRecordButton();
PdcPoReportButton();
PdcPoReportLidState();
PdcPoResiliencyClient();
PdcPoSetPowerAction();
PdcPoSetPowerSettingValue();
PdcPoVerifyActionPolicy();
PdcPoVerifyPowerState();
PdcPortOpen();
PdcPortSendMessage();
PdcPortSendMessageSynchronously();
PdcTaskClientRegister();
PdcTaskClientRequest();
PdcpNotificationClientCallback();
PdcpPortReleaseResources();
PerfDiagInitialize();
PerfDiagpBootSystemProxyCallback();
PerfDiagpBootUserProxyCallback();
PerfDiagpInitializeLoggerInfo();
PerfDiagpIsTracingAllowed();
PerfDiagpProxyWorker();
PerfDiagpRequestState();
PerfDiagpRestartCKCL();
PerfDiagpSaveActiveDCLLogFileName();
PerfDiagpSecondaryLogonProxyCallback();
PerfDiagpShutdownProxyCallback();
PerfDiagpUpdateCKCLEnableFlags();
PerfInfoLogInterrupt();
PerfInfoLogInterruptHv();
PerfInfoLogIpi();
PerfInfoLogSysCallEntry();
PerfInfoLogSysCallExit();
PerfInfoLogUnexpectedInterrupt();
PerfInfoLogVirtualAlloc();
PerfInfoLogVirtualFree();
PerfLogExecutiveResourceAcquire();
PerfLogExecutiveResourceInitialize();
PerfLogExecutiveResourceRelease();
PerfLogExecutiveResourceSetOwnerPointer();
PerfLogExecutiveResourceWait();
PerfLogImageLoad();
PerfLogImageUnload();
PerfLogSpinLockAcquire();
PerfLogSpinLockRelease();
PeriodicCaptureStateTimerCallback();
PfCalculateProcessHash();
PfCheckDeprioritizeFile();
PfCheckDeprioritizeImage();
PfFbBufferListAllocate();
PfFbBufferListAllocateTemporary();
PfFbBufferListCleanup();
PfFbBufferListFlushStandby();
PfFbBufferListInitialize();
PfFbBufferListInsertInFree();
PfFbBufferListShutdown();
PfFbBufferListUpdateMax();
PfFbLogEntryComplete();
PfFbLogEntryReserve();
PfFileInfoNotify();
PfGenerateTrace();
PfGetCompletedTrace();
PfHardFaultLog();
PfHardFaultRecord();
PfInitializeSuperfetch();
PfLockSharedTryAcquire();
PfLogDeleteHelper();
PfLogEvent();
PfLogFileDataAccess();
PfLogForegroundProcess();
PfMetadataRecordIsEqual();
PfPowerActionNotify();
PfPrefetchRequestPrepareForVerify();
PfPrefetchRequestVerify();
PfPrefetchRequestVerifyPath();
PfPrefetchRequestVerifyRanges();
PfProcessCreateNotification();
PfQuerySuperfetchInformation();
PfRequestRangeCheck();
PfSetSuperfetchInformation();
PfSnAcquiredNamesDelete();
PfSnActivateTrace();
PfSnActiveTraceGetNext();
PfSnAddProcessTrace();
PfSnAllocateEnablePrefetcherTimer();
PfSnAppLaunchScenarioControl();
PfSnArrayGrow();
PfSnAsyncContextCleanup();
PfSnAsyncContextInitialize();
PfSnAsyncPrefetchStep();
PfSnAsyncPrefetchWorker();
PfSnBeginAppLaunch();
PfSnBeginBootPhase();
PfSnBeginScenario();
PfSnBeginTrace();
PfSnBuildDumpFromTrace();
PfSnCancelTraceTimer();
PfSnCaptureParamBlockString();
PfSnCheckActionsNeeded();
PfSnCheckLogSequenceNumber();
PfSnCheckLoggingForThread();
PfSnCheckModernApp();
PfSnCheckScenario();
PfSnCleanupPrefetchHeader();
PfSnCleanupPrefetchSectionInfo();
PfSnCleanupTrace();
PfSnDeactivateTrace();
PfSnDetermineEnablePrefetcher();
PfSnEnablePrefetcherTimerRoutine();
PfSnEndProcessTrace();
PfSnEndTrace();
PfSnEndTraceWorkerThreadRoutine();
PfSnFailProcessTrace();
PfSnFindImageFileName();
PfSnFindPrefetchVolumeInfoInList();
PfSnFindString();
PfSnGetCompletedTrace();
PfSnGetFileInformation();
PfSnGetPrefetchInstructions();
PfSnGetSectionObject();
PfSnGetUnsafeProcessParameters();
PfSnHashUnsafeUnicodeString();
PfSnInitializePrefetcher();
PfSnIsHostingApplication();
PfSnIsSectionPrefetchedAfterPhase();
PfSnIsVolumeMounted();
PfSnLogAsyncWorker();
PfSnLogGetReadListsStart();
PfSnLogGetReadListsStop();
PfSnLogHelper();
PfSnLogIdentifier();
PfSnLogOpenVolumesForPrefetch();
PfSnLogPageFault();
PfSnLogPageFaultCommon();
PfSnLogPrefetchMetadata();
PfSnLogScenarioDecision();
PfSnLogStreamCreate();
PfSnLogStreamDelete();
PfSnLogVolumeCreate();
PfSnNameQueryWorker();
PfSnNameRemove();
PfSnNameRemoveAll();
PfSnOpenVolumesForPrefetch();
PfSnOperationProcess();
PfSnParametersRead();
PfSnParametersSetDefaults();
PfSnParametersVerify();
PfSnParsePrefetchParam();
PfSnPopulateReadList();
PfSnPowerBoost();
PfSnPowerBoostDpc();
PfSnPowerBoostUpdate();
PfSnPowerBoostWorker();
PfSnPreallocatePrefetchHeader();
PfSnPrefetchCacheCtxInitialize();
PfSnPrefetchCacheCtxStart();
PfSnPrefetchCacheEntryGet();
PfSnPrefetchCacheEntryUpdate();
PfSnPrefetchFileMetadata();
PfSnPrefetchMetadata();
PfSnPrefetchScenario();
PfSnPrefetchSections();
PfSnPrefetchSectionsCleanup();
PfSnQueryPrefetcherInformation();
PfSnQueryVolumeInfo();
PfSnQueueEnablePrefetcherTimer();
PfSnReferenceProcessTrace();
PfSnRemoveProcessTrace();
PfSnScanCommandLine();
PfSnScenarioAlloc();
PfSnScenarioFree();
PfSnSectionInfoCleanupWorkItem();
PfSnSetPrefetcherInformation();
PfSnStartTraceTimer();
PfSnTraceBufferAllocate();
PfSnTraceGetLogEntry();
PfSnTraceTimerRoutine();
PfSnTracingStateDpcRoutine();
PfSnTracingStateExWorkerRoutine();
PfSnUpdatePrefetcherFlags();
PfSnVolumeCheckIsSdBus();
PfSnVolumeCheckSeekPenalty();
PfSnVolumeKeyQuery();
PfTAccessTracingCleanup();
PfTAccessTracingInitialize();
PfTAccessTracingStart();
PfTAcquireLogEntry();
PfTAllocateBuffers();
PfTCleanup();
PfTCleanupBuffers();
PfTCreateTraceDump();
PfTFreeBufferList();
PfTFreeTraceDump();
PfTFullEventListAdd();
PfTGenerateTrace();
PfTGetFreeBuffer();
PfTInitialize();
PfTLbInitialize();
PfTLoggingWorker();
PfTReplaceCurrentBuffer();
PfTSetTraceWorkerPriority();
PfTSetTracingPriority();
PfTStart();
PfTTraceListAdd();
PfTTraceListFree();
PfTTraceListTrim();
PfVerifyScenarioBuffer();
PfVerifyScenarioId();
PfVerifyTraceBuffer();
PfVolumeSupportedForPrefetch();
PfpCheckPrefetchAbort();
PfpCopyEvent();
PfpCopyUserPfnPrioRequest();
PfpCreateEvent();
PfpDeprioritizeOldPagesInWs();
PfpEventHandleFullBuffer();
PfpEventHandleOutOfBuffers();
PfpFileBuildReadList();
PfpFileBuildReadSupport();
PfpFileCheckAttributesForPrefetch();
PfpFileSetupObjectAttributes();
PfpFlushBuffers();
PfpFlushEventBuffers();
PfpGetPageListCount();
PfpGetParameter();
PfpIsProcessInfoPresent();
PfpLogApplicationEvent();
PfpLogEventRequest();
PfpLogPageAccess();
PfpLogScenarioEvent();
PfpMemoryListQuery();
PfpMemoryRangesQuery();
PfpOpenHandleClose();
PfpOpenHandleCreate();
PfpOpenHandleInitialize();
PfpParametersInitialize();
PfpParametersPropagate();
PfpParametersRead();
PfpParametersWatcher();
PfpPfnPrioRequest();
PfpPowerActionDpcRoutine();
PfpPowerActionStartScenarioTracing();
PfpPrefetchDirectoryStream();
PfpPrefetchEntireDirectory();
PfpPrefetchFiles();
PfpPrefetchFilesTrickle();
PfpPrefetchPrivatePages();
PfpPrefetchRequest();
PfpPrefetchRequestPatchOffsets();
PfpPrefetchRequestPerform();
PfpPrefetchSharedCleanup();
PfpPrefetchSharedConflictNotifyEnd();
PfpPrefetchSharedConflictNotifyStart();
PfpPrefetchSharedDeref();
PfpPrefetchSharedInitialize();
PfpPrefetchSharedStart();
PfpPrefetchVolumesCleanup();
PfpPrivSourceAdd();
PfpPrivSourceEnum();
PfpProcessScenarioPhase();
PfpQueryFileExtentsRequest();
PfpQueryGpuUtilization();
PfpQueryScenarioInformation();
PfpReadSupportCleanup();
PfpReadSupportInitialize();
PfpRepurposeNameLoggingTrace();
PfpReturnAccessBuffer();
PfpRpCHashAddEntries();
PfpRpCHashDeleteEntries();
PfpRpCHashEmpty();
PfpRpCHashGrow();
PfpRpControlRequest();
PfpRpControlRequestCopy();
PfpRpControlRequestPerform();
PfpRpControlRequestReset();
PfpRpControlRequestUpdate();
PfpRpControlRequestVerify();
PfpRpFileKeyUpdate();
PfpRpInitialize();
PfpRpLogDeprioEvent();
PfpRpRehashIfNeeded();
PfpRpShutdown();
PfpRpStart();
PfpScenCtxInitialize();
PfpScenCtxPrefetchAbortSet();
PfpScenCtxPrefetchStateSet();
PfpScenCtxPrefetchWait();
PfpScenCtxQueryScenarioInformation();
PfpScenCtxScenarioSet();
PfpScenCtxServiceThreadSet();
PfpScenCtxStart();
PfpScenCtxWaiterTimedOut();
PfpSectInfoHandleFullBuffer();
PfpSectInfoHandleOutOfBuffers();
PfpServiceMainThreadBoost();
PfpServiceMainThreadBoostPrep();
PfpServiceMainThreadUnboost();
PfpSetBaseTime();
PfpSetParameter();
PfpSourceBuildVaArray();
PfpSourceGetPrefetchSupport();
PfpStartLoggingHardFaultEvents();
PfpUpdateRepurposedByPrefetch();
PfpVirtualQuery();
PfpVolumeOpenAndVerify();
PfpVolumePrefetchMetadata();
PfxFindPrefix();
PfxInitialize();
PfxInsertPrefix();
PfxRemovePrefix();
Phase1Initialization();
Phase1InitializationDiscard();
Phase1InitializationIoReady();
PiAllocateDeviceObjectList();
PiAuAllocateAndInitializeSid();
PiAuCheckClientInteractive();
PiAuCheckTokenMembership();
PiAuCreateLocalSystemSecurityObject();
PiAuCreateSecurityObjects();
PiAuCreateStandardSecurityObject();
PiAuCreateUserSids();
PiAuDoesClientHaveAccess();
PiAuDoesClientHavePrivilege();
PiAuFreeUserSids();
PiAuGetDriverDataDirectorySecurityObject();
PiAuGetServiceStateSecurityObject();
PiAuGetStateDirectorySecurityObject();
PiAuVerifyAccessToObject();
PiAuditDeviceEnableDisableAction();
PiAuditDeviceEnableDisableRequest();
PiAuditDeviceOperation();
PiAuditDeviceStart();
PiBuildAndOpenDeviceDirectoryPath();
PiBuildDeviceNodeInstancePath();
PiCMCaptureCreateDeviceInputData();
PiCMCaptureDeviceListInputData();
PiCMCaptureEnumerateInputData();
PiCMCaptureInterfaceAliasInputData();
PiCMCaptureInterfaceListInputData();
PiCMCaptureObjectInputData();
PiCMCaptureProblemInputData();
PiCMCapturePropertyInputData();
PiCMCaptureRegisterInterfaceInputData();
PiCMCaptureRegistryInputData();
PiCMCaptureRegistryPropertyInputData();
PiCMConvertDeviceKeyType();
PiCMConvertDeviceListFilters();
PiCMConvertRegistryProperty();
PiCMCreateDevice();
PiCMCreateObject();
PiCMDeleteClassKey();
PiCMDeleteDevice();
PiCMDeleteDeviceInterfaceKey();
PiCMDeleteDeviceKey();
PiCMDeleteObject();
PiCMDeviceAction();
PiCMDispatch();
PiCMDuplicateRegistryHandle();
PiCMEnumerateSubKeys();
PiCMFastIoDeviceDispatch();
PiCMGenerateDeviceInstance();
PiCMGetDeviceDepth();
PiCMGetDeviceIdList();
PiCMGetDeviceInterfaceAlias();
PiCMGetDeviceInterfaceList();
PiCMGetDeviceStatus();
PiCMGetObjectList();
PiCMGetObjectProperty();
PiCMGetObjectPropertyKeys();
PiCMGetRegistryProperty();
PiCMGetRelatedDeviceInstance();
PiCMHandleIoctl();
PiCMMandatoryFilterCallback();
PiCMOpenClassKey();
PiCMOpenDeviceInterfaceKey();
PiCMOpenDeviceKey();
PiCMOpenObjectKey();
PiCMQueryRemove();
PiCMRegisterDeviceInterface();
PiCMReleaseObjectInputData();
PiCMReleasePropertyInputData();
PiCMReleaseRegistryInputData();
PiCMReleaseRegistryPropertyInputData();
PiCMReturnBasicResultData();
PiCMReturnBufferResultData();
PiCMReturnDepthResultData();
PiCMReturnHandleResultData();
PiCMReturnStatusResultData();
PiCMSetDeviceProblem();
PiCMSetObjectProperty();
PiCMSetProblem();
PiCMSetRegistryProperty();
PiCMUnregisterDeviceInterface();
PiCMValidateDeviceInstance();
PiClearDeviceObjectList();
PiCollapseEnumRequests();
PiCollapseRebalanceRequests();
PiCompareDDBCacheEntries();
PiConfigureDevice();
PiControlAllocateBufferForUserModeCaller();
PiControlCopyUserModeCallersBuffer();
PiControlFreeUserModeCallersBuffer();
PiControlGetDeviceDepth();
PiControlGetDeviceInterfaceEnabled();
PiControlGetDevicePowerData();
PiControlGetDeviceStack();
PiControlGetPropertyData();
PiControlGetRelatedDevice();
PiControlGetSetDeviceStatus();
PiControlGetUserFlagsFromDeviceNode();
PiControlMakeUserModeCallersCopy();
PiControlQueryAndRemoveDevice();
PiControlQueryConflictList();
PiControlQueryDeviceRelations();
PiControlStartDevice();
PiCreateDeviceInstanceKey();
PiCreateDirectoryPath();
PiCreateDriverDataDirectoryRoot();
PiCreateDriverRedirectedStateKey();
PiCreateDriverSwDeviceCallback();
PiCreateDriverSwDevices();
PiCreateRegistryPath();
PiCslInitialize();
PiCslIsConsoleLocked();
PiDaDispatch();
PiDaDriverEntry();
PiDaFastIoDispatch();
PiDcAllocateGenericTableEntry();
PiDcCompareUpdateProperties();
PiDcContainerRequiresConfiguration();
PiDcFreeGenericTableEntry();
PiDcGenerateConfigNotificationIfContainerRequiresConfiguration();
PiDcHandleContainerEvent();
PiDcHandleCustomDeviceEvent();
PiDcHandleDeviceEvent();
PiDcHandleInterfaceEvent();
PiDcHandleObjectEvent();
PiDcHandleSystemFirmwareUpdate();
PiDcInit();
PiDcInitUpdateProperties();
PiDcResetChildDeviceContainerCallback();
PiDcResetChildDeviceContainers();
PiDcUpdateDeviceContainerMembership();
PiDeferSetInterfaceState();
PiDetermineDeleteType();
PiDevCfgAppendMultiSz();
PiDevCfgBuildDriverConfigurationId();
PiDevCfgBuildDriverNodeStrongName();
PiDevCfgBuildIndirectString();
PiDevCfgCheckDeviceNeedsUpdate();
PiDevCfgClearDeviceMigrationNode();
PiDevCfgCompareDrivers();
PiDevCfgConfigureDevice();
PiDevCfgConfigureDeviceDriver();
PiDevCfgConfigureDeviceDriverConfiguration();
PiDevCfgConfigureDeviceFilters();
PiDevCfgConfigureDeviceInterface();
PiDevCfgConfigureDeviceInterfaceCallback();
PiDevCfgConfigureDeviceInterfaces();
PiDevCfgConfigureDeviceKeyCallback();
PiDevCfgConfigureDeviceKeys();
PiDevCfgConfigureDeviceLocation();
PiDevCfgConfigurePropertyMatchCallback();
PiDevCfgConfigureSoftwareDevices();
PiDevCfgConvertPropertyFromValue();
PiDevCfgCopyDeviceKey();
PiDevCfgCopyDeviceKeys();
PiDevCfgCopyObjectProperties();
PiDevCfgCopyVariableData();
PiDevCfgEnforceDevicePolicy();
PiDevCfgEnumDeviceKeys();
PiDevCfgFindDeviceDriver();
PiDevCfgFindDeviceMigrationNode();
PiDevCfgFreeDeviceContext();
PiDevCfgFreeDeviceMigrationNode();
PiDevCfgFreeDriverNode();
PiDevCfgFreeMigrationContext();
PiDevCfgFreeResolveContext();
PiDevCfgGetDeviceClassConfigFlags();
PiDevCfgGetDriverConfigurationKeyScope();
PiDevCfgGetDriverPackageId();
PiDevCfgGetFailedInstallProblemStatus();
PiDevCfgGetKeySecurityDescriptor();
PiDevCfgGetMigrationDeviceIdScore();
PiDevCfgInitDeviceCallback();
PiDevCfgInitDeviceContext();
PiDevCfgInitDriverDatabaseCallback();
PiDevCfgInitMigrationContext();
PiDevCfgInitResolveContext();
PiDevCfgLogDeviceConfigured();
PiDevCfgLogDeviceMigrated();
PiDevCfgLogDeviceStarted();
PiDevCfgMakeServiceBootStart();
PiDevCfgMatchDriverConfigurationId();
PiDevCfgMigrateDevice();
PiDevCfgMigrateRootDevice();
PiDevCfgMigrateService();
PiDevCfgOpenDeviceMigrationKey();
PiDevCfgOpenDriverConfiguration();
PiDevCfgParseInterfaceKeyName();
PiDevCfgParsePropertyKeyName();
PiDevCfgParseVariableName();
PiDevCfgPopCopyKeyEntry();
PiDevCfgProcessDevice();
PiDevCfgProcessDeviceCallback();
PiDevCfgPushCopyKeyEntry();
PiDevCfgPushDriverNodeEntry();
PiDevCfgQueryDeviceMigrationNode();
PiDevCfgQueryDriverConfiguration();
PiDevCfgQueryDriverNode();
PiDevCfgQueryDriverVersionValueCallback();
PiDevCfgQueryIncludedDriverConfigurations();
PiDevCfgQueryIncludedDriverNode();
PiDevCfgQueryObjectProperties();
PiDevCfgQueryPolicyEnabled();
PiDevCfgQueryPolicyStringList();
PiDevCfgQueryResolveValue();
PiDevCfgRequestDriverConfigurations();
PiDevCfgResetDeviceDriverSettings();
PiDevCfgResetDeviceKeyCallback();
PiDevCfgResetDeviceKeys();
PiDevCfgResolveMultiSzValue();
PiDevCfgResolveVariable();
PiDevCfgResolveVariableConstant();
PiDevCfgResolveVariableDeviceProperty();
PiDevCfgResolveVariableExpression();
PiDevCfgResolveVariableFormatString();
PiDevCfgResolveVariableGenerateGuid();
PiDevCfgResolveVariableKeyCopy();
PiDevCfgResolveVariableKeyHandle();
PiDevCfgResolveVariableKeyValue();
PiDevCfgResolveVariableSwitchCase();
PiDevCfgSetDeviceRegProp();
PiDevCfgSetObjectProperty();
PiDevCfgSplitDriverConfigurationId();
PiDevCfgVerifyDeviceAllowed();
PiDevCfgVerifyFeatureScore();
PiDevCfgVerifyService();
PiDeviceDependencyInit();
PiDeviceRegistration();
PiDmAddCacheReferenceForObject();
PiDmAllocateGenericTableEntry();
PiDmCacheDataDecode();
PiDmCacheDataEncode();
PiDmCacheDataFree();
PiDmCmObjectMatchCallback();
PiDmCompareObjects();
PiDmEnumObjectsWithCallback();
PiDmFreeGenericTableEntry();
PiDmGetCacheKeys();
PiDmGetCachedKeyIndex();
PiDmGetCmObjectConstraintListFromCache();
PiDmGetCmObjectListFromCache();
PiDmGetObject();
PiDmGetObjectConstraintList();
PiDmGetObjectCount();
PiDmGetObjectList();
PiDmGetObjectListCallback();
PiDmGetObjectManagerForObjectType();
PiDmGetReferencedObjectFromProperty();
PiDmInit();
PiDmInitializeComparisonObject();
PiDmListAddList();
PiDmListAddObject();
PiDmListAddObjectWorker();
PiDmListEnumObjectsWithCallback();
PiDmListInit();
PiDmListInitEnumCallback();
PiDmListRemoveList();
PiDmListRemoveObject();
PiDmListRemoveObjectWorker();
PiDmListUpdateAggregationCountWorker();
PiDmLookupObject();
PiDmObjectCreate();
PiDmObjectGetAggregatedBooleanPropertyData();
PiDmObjectGetCachedCmProperty();
PiDmObjectGetCachedObjectProperty();
PiDmObjectGetCachedObjectPropertyData();
PiDmObjectGetCachedObjectReference();
PiDmObjectIsEnumerable();
PiDmObjectManagerInit();
PiDmObjectManagerPopulate();
PiDmObjectProcessPropertyChange();
PiDmObjectRelease();
PiDmObjectUpdateCachedCmProperty();
PiDmObjectUpdateCachedObjectProperty();
PiDmPnpObjectMatchCallback();
PiDmRemoveCacheReferenceForObject();
PiDmaGuardInitialize();
PiDmaGuardProcessNewDeviceNode();
PiDmaGuardProcessPostRemove();
PiDmaGuardQueueFlush();
PiDmaGuardQueueInsertEntry();
PiDmaGuardQueueRemoveEntry();
PiDqActionDataCreate();
PiDqActionDataFree();
PiDqActionDataGetAllPropertiesInAllLanguages();
PiDqActionDataGetAllPropertiesInBestLanguage();
PiDqActionDataGetChangedProperties();
PiDqActionDataGetRequestedProperties();
PiDqAllocateGenericTableEntry();
PiDqCompareAddresses();
PiDqConvertObjectTypeToString();
PiDqConvertQueryFlagsToString();
PiDqDeleteUserObject();
PiDqDeleteUserObjectFromLoadedHives();
PiDqDispatch();
PiDqEnumQueryObjectsCallback();
PiDqFreeGenericTableEntry();
PiDqGetObjectManagerForPnpObjectType();
PiDqGetPnpObjectType();
PiDqGetRelativeObjectRegPath();
PiDqGrowPropertyArray();
PiDqInit();
PiDqIrpCancel();
PiDqIrpComplete();
PiDqIrpPropertySet();
PiDqIrpPropertySet$filt$0();
PiDqIrpQueryCreate();
PiDqIrpQueryCreate$filt$0();
PiDqIrpQueryGetResult();
PiDqObjectActionQueueEntryCreate();
PiDqObjectManagerEnumerateAndRegisterQuery();
PiDqObjectManagerHandleObjectEvent();
PiDqObjectManagerInit();
PiDqObjectManagerMakeInconsistent();
PiDqObjectManagerServiceActionQueue();
PiDqObjectManagerUnregisterQuery();
PiDqOpenObjectRegKey();
PiDqOpenUserObjectRegKey();
PiDqPnPGetObjectProperty();
PiDqPnPGetObjectPropertyInBestLocale();
PiDqPnPGetObjectPropertyKeys();
PiDqPnPGetObjectPropertyLocales();
PiDqPropertyCallback();
PiDqQueryActionQueueEntryCreate();
PiDqQueryActionQueueEntryFree();
PiDqQueryAddObjectToResultSet();
PiDqQueryAppendActionEntry();
PiDqQueryApplyObjectEvent();
PiDqQueryCompletePendedIrp();
PiDqQueryCreate();
PiDqQueryDeleteObjectFromResultSet();
PiDqQueryEnumObject();
PiDqQueryEvaluateFilter();
PiDqQueryFreeActiveData();
PiDqQueryGetNextIoctlInfo();
PiDqQueryGetObjectManager();
PiDqQueryLock();
PiDqQueryRelease();
PiDqQuerySerializeActionQueue();
PiDqQueryUnlock();
PiDqQueryValidateQueryData();
PiDqSameUserHive();
PiDqSerializationAlloc();
PiDqSerializationWrite();
PiDrvDbCreateNode();
PiDrvDbDestroyNode();
PiDrvDbEnumDriverStoreNodes();
PiDrvDbEnumNodes();
PiDrvDbFindNode();
PiDrvDbGetFilePathVolume();
PiDrvDbGetNodeSystemRoot();
PiDrvDbInit();
PiDrvDbLoadHive();
PiDrvDbLoadNode();
PiDrvDbLoadNodeWorkerCallback();
PiDrvDbNodeActionCallback();
PiDrvDbOverlayCopyKeys();
PiDrvDbOverlayNodeHive();
PiDrvDbQuerySyncNodesUpdated();
PiDrvDbQuerySystemPathWin32();
PiDrvDbRegisterNode();
PiDrvDbRegisterNodeCallback();
PiDrvDbResolveFilePathKeyValues();
PiDrvDbResolveKeyFilePaths();
PiDrvDbResolveNodeFilePaths();
PiDrvDbResolveSystemFilePath();
PiDrvDbSetupNodeHive();
PiDrvDbSetupNodes();
PiDrvDbSuspendNodes();
PiDrvDbUnloadHive();
PiDrvDbUnloadNode();
PiDrvDbUnloadNodeDpcRoutine();
PiDrvDbUnloadNodeReset();
PiDrvDbUnloadNodeWaitWorkerCallback();
PiDrvDbUnloadNodeWorkerCallback();
PiEnumerateDependentListEntry();
PiEnumerateProviderListEntry();
PiEventAllocatePendingEjectRelations();
PiEventAllocateVetoBuffer();
PiEventAreDeviceRelationsExcluded();
PiEventBuildPdoList();
PiEventRemovalPostSurpriseRemove();
PiFindDevInstMatch();
PiForEachDriverQueryRoutine();
PiGetDefaultMessageString();
PiGetDependentList();
PiGetDeviceDepth();
PiGetDeviceRegProperty();
PiGetDeviceRegistryProperty();
PiGetDmaAdapterFromBusInterface();
PiGetDriverImageDirectory();
PiGetDriverMutableStateDirectory();
PiGetProviderList();
PiGetRelatedDevice();
PiGetStateRootPath();
PiGetTargetDeviceNode();
PiHotSwapGetDefaultBusRemovalPolicy();
PiHotSwapGetDetachableNode();
PiInitCacheGroupInformation();
PiInitFirmwareResources();
PiInitReleaseCachedGroupInformation();
PiInitializeDDBCache();
PiInitializeDevice();
PiIommuAllocateExtension();
PiIommuFreeExtension();
PiIommuGetInterface();
PiIommuIsDeviceSafeWhileConsoleLocked();
PiIrpQueryRemoveDevice();
PiIsDriverBlocked();
PiIsHVCIEnabled();
PiLastGoodCopyKeyContents();
PiLastGoodRevertCopyCallback();
PiLastGoodRevertLastKnownDirectory();
PiListEntryToDependencyEdge();
PiLookupInDDB();
PiLookupInDDBCache();
PiMarkDeviceTreeForReenumeration();
PiMarkDeviceTreeForReenumerationWorker();
PiNormalizeDeviceText();
PiOpenDirectoryWithRoot();
PiOpenDriverRedirectedStateKey();
PiOpenDriverRedirectedStateRootKey();
PiPagePathSetState();
PiPnpAddDeviceToPdoDeviceListEnumContext();
PiPnpFreePdoDeviceList();
PiPnpPdoDeviceListEnumCallback();
PiPnpRtlApplyMandatoryDeviceContainerFilters();
PiPnpRtlApplyMandatoryDeviceContainerFiltersCallback();
PiPnpRtlApplyMandatoryDeviceFilters();
PiPnpRtlApplyMandatoryDeviceInterfaceFilters();
PiPnpRtlApplyMandatoryFilters();
PiPnpRtlBeginOperation();
PiPnpRtlCacheObjectBaseKey();
PiPnpRtlCmActionCallback();
PiPnpRtlEndOperation();
PiPnpRtlEnsureObjectCached();
PiPnpRtlEnumDevicesCallback();
PiPnpRtlEnumeratorFilterCallback();
PiPnpRtlFreeContainerRemoveInfo();
PiPnpRtlFreeInstallerClassChangeInfo();
PiPnpRtlFreeInterfaceDeleteInfo();
PiPnpRtlFreePanelRemoveInfo();
PiPnpRtlGatherContainerRemoveInfo();
PiPnpRtlGatherDeviceDeleteInfo();
PiPnpRtlGatherInstallerClassChangeInfo();
PiPnpRtlGatherInterfaceDeleteInfo();
PiPnpRtlGatherPanelRemoveInfo();
PiPnpRtlGetCurrentOperation();
PiPnpRtlGetDeviceInterfaceEnabled();
PiPnpRtlGetDeviceNtPropertyRoutine();
PiPnpRtlGetDeviceRelatedDeviceRoutine();
PiPnpRtlGetDeviceRelationsList();
PiPnpRtlGetDeviceStatus();
PiPnpRtlGetFilteredDeviceInterfaceList();
PiPnpRtlGetFilteredDeviceList();
PiPnpRtlInit();
PiPnpRtlInterfaceFilterCallback();
PiPnpRtlIsDeviceEnumerableForUser();
PiPnpRtlIsDeviceValidForSession();
PiPnpRtlObjectActionCallback();
PiPnpRtlObjectEventCallback();
PiPnpRtlObjectEventCompareObjects();
PiPnpRtlObjectEventCreate();
PiPnpRtlObjectEventDispatch();
PiPnpRtlObjectEventRelease();
PiPnpRtlObjectEventWorker();
PiPnpRtlOperationAllocateGenericTableEntry();
PiPnpRtlOperationFreeGenericTableEntry();
PiPnpRtlPdoRaiseNtPlugPlayPropertyChangeEvent();
PiPnpRtlRegisterDriverMachineNodeCallback();
PiPnpRtlServiceFilterCallback();
PiPnpRtlSetDeviceRegProperty();
PiPnpRtlSetObjectProperty();
PiProcessAddBootDevices();
PiProcessCanceledRemoveForReset();
PiProcessClearDeviceProblem();
PiProcessDriverInstance();
PiProcessDriversLoadedOnSecureDevice();
PiProcessHaltDevice();
PiProcessNewDeviceNode();
PiProcessQueryAndCancelRemoval();
PiProcessQueryDeviceState();
PiProcessQueryRemoveNoFdo();
PiProcessReenumeration();
PiProcessRequeryDeviceState();
PiProcessResourceRequirementsChanged();
PiProcessSetDeviceProblem();
PiProcessStartSystemDevices();
PiProfileUpdateDeviceTree();
PiProfileUpdateDeviceTreeCallback();
PiProfileUpdateDeviceTreeWorker();
PiQueryAndAllocateBootResources();
PiQueryDeviceRelations();
PiQueryPowerDependencyRelations();
PiQueryPowerRelations();
PiQueryRemovableDeviceOverride();
PiQueryResourceRequirements();
PiQueueDeviceRequest();
PiRearrangeDeviceInstances();
PiRebalanceOptOut();
PiRemoveDeferredSetInterfaceState();
PiResetProblemDevicesWorker();
PiRestartDevice();
PiRestartRemovalRelations();
PiSendTargetDeviceRemoveCanceledNotification();
PiSendTargetDeviceRemoveCompleteNotification();
PiSwAddPdoAssociation();
PiSwAllocateGenericTableEntry();
PiSwBusRelationAdd();
PiSwBusRelationRemove();
PiSwBusRelationsCompareInstancePath();
PiSwCloseDescendants();
PiSwCloseDevice();
PiSwCompleteCreate();
PiSwDestroyDeviceObject();
PiSwDeviceCompareObjects();
PiSwDeviceCreate();
PiSwDeviceDereference();
PiSwDeviceFindInterfaceEntry();
PiSwDeviceFree();
PiSwDeviceInterfaceSetState();
PiSwDeviceInterfacesUpdateState();
PiSwDeviceMakeCompatibleIds();
PiSwDeviceOperationsAllowed();
PiSwDispatch();
PiSwDoesCreateChangesRequireReEnum();
PiSwFindBusRelations();
PiSwFindChildren();
PiSwFindPdoAssociation();
PiSwFindSwDevice();
PiSwFreeGenericTableEntry();
PiSwFreeInterfaceList();
PiSwGetChildPdo();
PiSwInit();
PiSwInstanceInfoFree();
PiSwInstanceInfoInit();
PiSwInterfaceCreate();
PiSwInterfaceFree();
PiSwIrpCancelStartCreate();
PiSwIrpCleanup();
PiSwIrpGetLifetime();
PiSwIrpInterfacePropertySet();
PiSwIrpInterfacePropertySet$filt$0();
PiSwIrpInterfaceRegister();
PiSwIrpInterfaceRegister$filt$0();
PiSwIrpInterfaceSetState();
PiSwIrpInterfaceSetState$filt$0();
PiSwIrpPropertySet();
PiSwIrpPropertySet$filt$0();
PiSwIrpSetLifetime();
PiSwIrpStartCreate();
PiSwIrpStartCreate$filt$0();
PiSwIrpStartCreateWorker();
PiSwIsValidPnpId();
PiSwMakePdoInactive();
PiSwPdoAssociationFree();
PiSwPdoDriverEntry();
PiSwPdoPnPDispatch();
PiSwPnPInfoFree();
PiSwPnPInfoInit();
PiSwProcessParentRemoveIrp();
PiSwProcessParentStartIrp();
PiSwProcessRemove();
PiSwPropertySet();
PiSwQueuedCreateInfoCreate();
PiSwQueuedCreateInfoFree();
PiSwRemovePdoAssociation();
PiSwStartCreate();
PiSwStopDestroy();
PiSwUnassociateDeviceObject();
PiSwUpdateArrayProperties();
PiSwValidateCreateData();
PiSwValidatePropertyArray();
PiUEventApplyAdditionalFilters();
PiUEventBroadcastEventWorker();
PiUEventBroadcastHardwareProfilesChangedEvent();
PiUEventBroadcastPortsChangedEvent();
PiUEventCacheObjectProperties();
PiUEventCopyEventData();
PiUEventDequeuePendingEventWorker();
PiUEventDereferenceEventEntry();
PiUEventDeviceNeedsInstall();
PiUEventDispatch();
PiUEventEstimateRequiredClientBufferSize();
PiUEventFreeClientRegistrationContext();
PiUEventFreeEventEntry();
PiUEventGetDeviceInstanceIdFromUserHandle();
PiUEventHandleGetEvent();
PiUEventHandleIoctl();
PiUEventHandleRegistration();
PiUEventHandleUnregisterClient();
PiUEventHandleVetoEvent();
PiUEventHashGuidIntoBucket();
PiUEventHashStringIntoBucket();
PiUEventInit();
PiUEventInitClientRegistrationContext();
PiUEventIsClientStuck();
PiUEventIsDeviceEventVetoable();
PiUEventMetaNotificationCallback();
PiUEventNotifyClient();
PiUEventNotifyClientPendingEvent();
PiUEventNotifyDeviceInstanceChange();
PiUEventNotifyDeviceInstancePropertyChange();
PiUEventNotifyDeviceInterfaceChange();
PiUEventNotifyTargetDeviceChange();
PiUEventNotifyUserMode();
PiUEventProcessBroadcastNotifications();
PiUEventProcessEventWorker();
PiUEventQueueBroadcastEventEntry();
PiUEventQueuePendingEvent();
PiUEventReferenceEventEntry();
PiUEventSendDeviceInstallNotification();
PiUEventShouldQueueEvent();
PiUpdateDevicePanel();
PiUpdateDeviceResourceLists();
PiUpdateDriverDBCache();
PiValidatePowerRelations();
PidNodeCompare();
PipAddBindingId();
PipAddDependencyEdgeBetweenNodes();
PipAddDependentsToRebuildPowerRelationsQueue();
PipAddDevicesToBootDriver();
PipAddDevicesToBootDriverWorker();
PipAddRequestToEdge();
PipAddtoRebuildPowerRelationsQueue();
PipAllocateDeviceNode();
PipApplyFunctionToServiceInstances();
PipAreDriversLoaded();
PipAreDriversLoadedWorker();
PipAttemptDependentStart();
PipAttemptDependentsStart();
PipCallDriverAddDevice();
PipCallDriverAddDeviceQueryRoutine();
PipCallbackHasDeviceOverrides();
PipChangeDeviceObjectFromRegistryProperties();
PipCheckComputerSupported();
PipCheckDependencies();
PipCheckForDenyExecute();
PipCheckForUnsatisfiedDependencies();
PipCheckSystemFirmwareUpdated();
PipCheckValidNewDependencyEdge();
PipClearDevNodeFlags();
PipClearDevNodeProblem();
PipClearDevNodeUserFlags();
PipClearDeviceTreeStateFlags();
PipCommitPendingOsExtensionResource();
PipCommitPendingService();
PipConvertResolutionsToReservations();
PipCreateComputerId();
PipCreateDependencyNode();
PipCreateEntry();
PipCreateNewDependencyEdge();
PipCriticalDeviceWaitCallback();
PipCslPoCallback();
PipCslSessionCallback();
PipCslUpdateState();
PipDeleteAllDependencyRelations();
PipDeleteBindingId();
PipDeleteBindingIds();
PipDeleteDependencyNode();
PipDependencyCopyEdge();
PipDependencyGraphDepthFirstSearch();
PipDereferenceDependencyNode();
PipDeviceObjectListAdd();
PipDeviceObjectListElementAt();
PipDeviceObjectListIndexOf();
PipDeviceObjectListRemove();
PipDgqFreeEntry();
PipDgqInsertEntry();
PipDmaGuardBlockAddDevice();
PipDmaGuardGetRegistryPolicy();
PipDmgConsoleUnlockCallback();
PipDmgDestroyIommuExtension();
PipDmgEnforceEnumerationPolicy();
PipDmgFlushQueueAndRestartDevices();
PipDmgGetDeviceDmarPolicy();
PipDmgGetDriverDmarCompatLevel();
PipDmgInitPhaseTwo();
PipDmgInitPhaseZero();
PipDmgInitReadGroupPolicy();
PipDmgReevaluateQueue();
PipDmgRequestRestartOnBlockedDevice();
PipDmgSaveDeviceDmarPolicy();
PipEnumerateCompleted();
PipEnumerateDevice();
PipEventRemovalCheckOpenHandles();
PipFindDependencyNodePath();
PipFindDeviceOverrideEntry();
PipForAllChildDeviceNodes();
PipForAllDeviceNodesCallback();
PipForDeviceNodeSubtree();
PipFreeBindingId();
PipFreeBindingRequestEntry();
PipFreeDependencyEdge();
PipFreeGroupTree();
PipGenerateContainerID();
PipGetDriverTagPriority();
PipGetRegistryDwordWithFallback();
PipGetRegistrySecurityWithFallback();
PipGrowDeviceObjectList();
PipHardwareConfigActivateService();
PipHardwareConfigClearStartOverrideCallback();
PipHardwareConfigClearStartOverrides();
PipHardwareConfigExists();
PipHardwareConfigGetIndex();
PipHardwareConfigGetLastUseTime();
PipHardwareConfigInit();
PipHardwareConfigOpenKey();
PipHardwareConfigTriggerRespecialize();
PipInitComputerIds();
PipInitDeviceOverrideCache();
PipInitializeCoreDriversAndElam();
PipInitializeCoreDriversByGroup();
PipInitializeDriverDependentDLLs();
PipInitializeEarlyLaunchDrivers();
PipIommuRetrieveDeviceId();
PipIommuValidateDeviceId();
PipIs32bitKey();
PipIsDevNodeDNStarted();
PipIsDevNodeEffectivelyRemoved();
PipIsDeviceInDeviceObjectList();
PipIsDeviceReadyForPowerRelations();
PipIsProblemReadonly();
PipIsProviderStarted();
PipLinkDeviceObjectAndDependencyNode();
PipLookupGroupName();
PipMakeGloballyUniqueId();
PipMergeDependencyEdgeList();
PipMergeDependencyNodes();
PipMergeDependencyTypes();
PipMigratePnpState();
PipMigrateResetDeviceCallback();
PipMigrateServiceCallback();
PipMoveListEntries();
PipNotifyDependenciesChanged();
PipNotifyDeviceDependencyList();
PipOpenServiceEnumKeys();
PipPendingServicesFilter();
PipPnPDriverEntry();
PipProcessDevNodeTree();
PipProcessEnumeratedChildDevice();
PipProcessPendingObjects();
PipProcessPendingOsExtensionResources();
PipProcessPendingServices();
PipProcessQueryRemovalInKernelMode();
PipProcessRebuildPowerRelationsQueue();
PipProcessRestartPhase1();
PipProcessRestartPhase2();
PipProcessStartPhase1();
PipProcessStartPhase2();
PipProcessStartPhase3();
PipQueryBindingResolution();
PipRecordOpenHandleVeto();
PipReferenceDependencyNode();
PipRemoveDevicesInRelationList();
PipResetDevice();
PipResetDevices();
PipRestoreDevNodeState();
PipSendQueryRemoveIrpAndCheckOpenHandles();
PipSendTargetDeviceQueryRemoveNotification();
PipServiceInstanceToDeviceInstance();
PipSetDependency();
PipSetDevNodeFlags();
PipSetDevNodeProblem();
PipSetDevNodeState();
PipSetDevNodeStateFlags();
PipSetDevNodeUserFlags();
PipSmBiosFindStruct();
PipSmBiosGetString();
PipSortDeviceObjectList();
PipSortDevicesByOrdinal();
PipUnlinkDeviceObjectAndDependencyNode();
PipUnloadEarlyLaunchDrivers();
PipUnprotectDevice();
PipUpdateDeviceProducts();
PipUpdatePostStartCharacteristics();
PipVisitDeviceObjectListEntry();
PlugPlayGetDeviceProperty();
PlugPlayGetDeviceRelations();
PlugPlayGetDeviceStatus();
PlugPlayGetRelatedDevice();
PnpAcquireDependencyRelationsLock();
PnpAddVetoInformation();
PnpAllocateCriticalMemory();
PnpAllocateDeviceInstancePath();
PnpAllocateGenericTableEntry();
PnpAllocateMultiSZ();
PnpAllocatePWSTR();
PnpAllocateResources();
PnpAllocateWatchdog();
PnpAssignResourcesToDevices();
PnpAsynchronousCall();
PnpBootDeviceWait();
PnpBootPhaseComplete();
PnpBugcheckPowerTimeout();
PnpBuildCmResourceList();
PnpBuildCmResourceLists();
PnpBuildRemovalRelationList();
PnpBuildUnsafeRemovalDeviceList();
PnpBusTypeGuidGet();
PnpBusTypeGuidGetIndex();
PnpBusTypeGuidInitialize();
PnpCallAddDevice();
PnpCallDriverQueryServiceHelper();
PnpCancelDeviceActionRequest();
PnpCancelRemoveOnHungDevices();
PnpCancelStopDeviceNode();
PnpCancelStopDeviceSubtree();
PnpChainDereferenceComplete();
PnpCheckDeviceIdsChanged();
PnpCheckDriverDependencies();
PnpCheckForActiveDependencies();
PnpCheckPossibleBootStartDriver();
PnpCleanupDeviceRegistryValues();
PnpCmMatchCallbackRoutine();
PnpCmResourcesToIoResources();
PnpCollectOpenHandles();
PnpCollectOpenHandlesCallBack();
PnpCompareInstancePath();
PnpCompareInterruptInformation();
PnpCompareMultiSz();
PnpCompareResourceRequestPriority();
PnpCompileDeviceInstancePaths();
PnpCompleteDeviceEvent();
PnpCompleteSystemStartProcess();
PnpCompletionRoutine();
PnpConcatPWSTR();
PnpConcatenateUnicodeStrings();
PnpContainerRaiseDevicesChangeEvent();
PnpConvertDevpropcompkeyArrayToString();
PnpCopyDevProperty();
PnpCopyDevPropertyArray();
PnpCopyDeviceInstancePath();
PnpCopyResourceList();
PnpCreateDeviceEventEntry();
PnpCreateObject();
PnpCreateObjectDispatch();
PnpCtxCloseMachine();
PnpCtxDestroyNode();
PnpCtxFindNode();
PnpCtxGetCachedContextBaseKey();
PnpCtxGetNtPlugPlayRoutine();
PnpCtxGetObjectContext();
PnpCtxGetObjectDispatchCallback();
PnpCtxInternalEnumKeyCallback();
PnpCtxOpenContextBaseKey();
PnpCtxOpenContextNodeBaseKey();
PnpCtxRegCloseKey();
PnpCtxRegCopyTree();
PnpCtxRegCreateKey();
PnpCtxRegCreateTree();
PnpCtxRegDeleteKey();
PnpCtxRegDeleteTree();
PnpCtxRegDeleteValue();
PnpCtxRegEnumKey();
PnpCtxRegEnumKeyWithCallback();
PnpCtxRegEnumValue();
PnpCtxRegOpenKey();
PnpCtxRegQueryInfoKey();
PnpCtxRegQueryKeyPathName();
PnpCtxRegQueryValue();
PnpCtxRegQueryValueIndirect();
PnpCtxRegSetValue();
PnpCtxRegisterMachineNode();
PnpCtxSetNtPlugPlayRoutine();
PnpDeferNotification();
PnpDelayedRemoveWorker();
PnpDelayedRemoveWorkerContextCreate();
PnpDelayedRemoveWorkerWatchdogWorkItem();
PnpDeleteAllDependencyRelations();
PnpDeleteDeviceActionRequest();
PnpDeleteDeviceInterfaces();
PnpDeleteLockedDeviceNode();
PnpDeleteLockedDeviceNodes();
PnpDeleteObject();
PnpDeleteObjectDispatch();
PnpDereferenceNotify();
PnpDetermineResourceListSize();
PnpDeviceActionWorker();
PnpDeviceCompletionProcessCompletedRequest();
PnpDeviceCompletionProcessCompletedRequests();
PnpDeviceCompletionQueueAddDispatchedRequest();
PnpDeviceCompletionQueueDispatchedEntryCompleted();
PnpDeviceCompletionQueueGetCompletedRequest();
PnpDeviceCompletionQueueIsEmpty();
PnpDeviceCompletionQueueRemoveCompletedRequest();
PnpDeviceCompletionQueueWatchdogWorkItem();
PnpDeviceCompletionRequestCreate();
PnpDeviceCompletionRequestDestroy();
PnpDeviceCompletionRoutine();
PnpDeviceEventWorker();
PnpDeviceObjectFromDeviceInstanceWithTag();
PnpDeviceObjectToDeviceInstance();
PnpDiagInitialize();
PnpDiagRundownForEachDevice();
PnpDiagRundownParentDevNodeForEachDevice();
PnpDiagRundownParentPdoForEachDevice();
PnpDiagRundownRegisterCallback();
PnpDiagnosticCompletionRoutine();
PnpDiagnosticTrace();
PnpDiagnosticTraceAppVeto();
PnpDiagnosticTraceDeviceOperation();
PnpDiagnosticTraceDriverFullInfo();
PnpDiagnosticTraceElamDecision();
PnpDiagnosticTraceElamStatus();
PnpDiagnosticTraceObject();
PnpDiagnosticTraceObjectWithStatus();
PnpDisableDelayedRemoveWorkerWatchdog();
PnpDisableDevice();
PnpDisableDeviceCompletionQueueWatchdog();
PnpDisableDeviceInterfaces();
PnpDisablePnpEventWorkerWatchdog();
PnpDisableUserModeNotifications();
PnpDisableWatchdog();
PnpDoPolicyCheck();
PnpDriverLoadingFailed();
PnpDuplicateUnicodeString();
PnpEarlyLaunchImageNotificationPostProcess();
PnpEarlyLaunchImageNotificationPreProcess();
PnpEarlyLaunchStatusNotificationPreProcess();
PnpEnableDelayedRemoveWorkerWatchdog();
PnpEnableDeviceCompletionQueueWatchdog();
PnpEnablePnpEventWorkerWatchdog();
PnpEnableWatchdog();
PnpEventWorkerWatchdogWorkItem();
PnpFilterResourceRequirementsList();
PnpFinalizeVetoedRemove();
PnpFindAlternateStringData();
PnpFindBestConfiguration();
PnpFindBestConfigurationWorker();
PnpFindMountableDevice();
PnpFindRebalanceCandidates();
PnpFixupID();
PnpFreeDevProperty();
PnpFreeDevPropertyArray();
PnpFreeDeviceInstancePath();
PnpFreeGenericTableEntry();
PnpFreeInterruptInformation();
PnpFreeResourceRequirementsForAssignTable();
PnpFreeUnicodeStringList();
PnpFreeVetoInformation();
PnpFreeWatchdog();
PnpGenerateDeviceIdsHash();
PnpGetCallerSessionId();
PnpGetDeviceDependencyList();
PnpGetDeviceInstanceCsConfigFlags();
PnpGetDeviceInstancePropertyData();
PnpGetDeviceInstanceRegistryValue();
PnpGetDeviceInterfacePropertyData();
PnpGetDeviceLocationStrings();
PnpGetDevicePropertyData();
PnpGetDeviceResourcesFromRegistry();
PnpGetGenericObjectList();
PnpGetGenericStoreProperty();
PnpGetGenericStorePropertyLocales();
PnpGetLogString();
PnpGetMappedPropertyDispatch();
PnpGetMappedPropertyKeysDispatch();
PnpGetMappedPropertyLocalesDispatch();
PnpGetMultiSzLength();
PnpGetObjectProperty();
PnpGetObjectPropertyKeys();
PnpGetObjectPropertyKeysWorker();
PnpGetObjectPropertyLocales();
PnpGetObjectPropertyLocalesWorker();
PnpGetRelatedTargetDevice();
PnpGetResourceRequirementsForAssignTable();
PnpGetServiceStartType();
PnpGetStableSystemBootTime();
PnpGetSystemPdoList();
PnpHandleEnumerateHandlesAgainstDeviceObject();
PnpHandleEnumerateHandlesAgainstPdoStack();
PnpHandleProcessWalkWorker();
PnpHardwareConfigCreateBootDriverFlags();
PnpInitializeBootStartDriver();
PnpInitializeDeviceEvents();
PnpInitializeNotification();
PnpInitializeNotifyEntry();
PnpInitializePnpWatchdogs();
PnpInitializeProcessor();
PnpInitializeSessionId();
PnpInitializeTargetDeviceRemoveEvent();
PnpInsertEventInQueue();
PnpInstallerClassRaisePropertyChangeEventWorker();
PnpInterfaceClassRaisePropertyChangeEventWorker();
PnpInterfaceRaisePropertyChangeEventWorker();
PnpInvalidateRelationsInList();
PnpIrpDeviceEnumerated();
PnpIrpQueryID();
PnpIsAnyDeviceInUse();
PnpIsBeingRemovedSafely();
PnpIsChainDereferenced();
PnpIsDeviceInstanceEnabled();
PnpIsDuplicateDevice();
PnpIsLegacyDriver();
PnpIsNullGuid();
PnpIsRangeWithin();
PnpIsSafeToExamineUserModeTeb();
PnpIsValidGuidString();
PnpLoadBootFilterDriver();
PnpLockDeviceActionQueue();
PnpLockMountableDevice();
PnpLogActionQueueEvent();
PnpLogDeviceConflictingResource();
PnpLogDuplicateDevice();
PnpLogEvent();
PnpLogVetoInformation();
PnpLookupArbitersNewResources();
PnpMapCmStatusToDispatchStatus();
PnpMapDeviceObjectToDeviceInstance();
PnpMarkDeviceForRemove();
PnpMarkHalDeviceNode();
PnpMergeFilteredResourceRequirementsList();
PnpMultiSzAppend();
PnpMultiSzContainsString();
PnpMultiSzDeleteString();
PnpMultiSzGetLen();
PnpNeedToReleaseBootResources();
PnpNewDeviceNodeDependencyCheck();
PnpNotifyDerivedKeys();
PnpNotifyDeviceClassChange();
PnpNotifyDriverCallback();
PnpNotifyEarlyLaunchImageLoad();
PnpNotifyEarlyLaunchStatusUpdate();
PnpNotifyHwProfileChange();
PnpNotifyTargetDeviceChange();
PnpNotifyUserModeDeviceRemoval();
PnpObjectListCallback();
PnpObjectRaiseDeleteEvent();
PnpOpenCCSPnpRegKey();
PnpOpenFirstMatchingSubKey();
PnpOrphanNotification();
PnpPrepareDriverLoading();
PnpProcessAssignResources();
PnpProcessAssignResourcesWorker();
PnpProcessBusRelations();
PnpProcessCompletedEject();
PnpProcessCustomDeviceEvent();
PnpProcessDeferredRegistrations();
PnpProcessDependencyRelations();
PnpProcessQueryRemoveAndEject();
PnpProcessRebalance();
PnpProcessRelation();
PnpProcessTargetDeviceEvent();
PnpProcessWatchdogWorkItem();
PnpProfileUpdateHardwareProfile();
PnpQueryAndSaveDeviceNodeCapabilities();
PnpQueryBusInformation();
PnpQueryDeviceRelations();
PnpQueryDeviceText();
PnpQueryID();
PnpQueryInterface();
PnpQueryRebalance();
PnpQueryRebalanceWorker();
PnpQueryRemoveLockedDeviceNode();
PnpQueryStopDeviceNode();
PnpQueryWatchdogBugcheckEnabled();
PnpQueryWatchdogTimeout();
PnpQueuePendingEject();
PnpQueuePendingSurpriseRemoval();
PnpQueueQueryAndRemoveEvent();
PnpReadDeviceConfiguration();
PnpReallocateResources();
PnpRebalance();
PnpRecordBlackbox();
PnpRecordBlackboxDelayedRemoveWorkerInformation();
PnpRecordBlackboxDeviceCompletionQueueInformation();
PnpRecordBlackboxPnpEventInformation();
PnpRecordBlackboxPnpEventWorkerInformation();
PnpRegMultiSzToUnicodeStrings();
PnpRegSzToString();
PnpRegistryValueExists();
PnpReleaseBootResourcesForFilteredRequirements();
PnpReleaseDependencyRelationsLock();
PnpReleaseResourcesInternal();
PnpRemoveDeviceActionRequestFromQueue();
PnpRemoveDeviceActionRequests();
PnpRemoveEventFromQueue();
PnpRemoveLockedDeviceNode();
PnpReplacePartitionUnit();
PnpReportTargetDeviceChangeAsyncWorker();
PnpRequestDeviceAction();
PnpRequestDeviceEjectExWorker();
PnpRequestDeviceRemoval();
PnpRequestDeviceRemovalWorker();
PnpRequestHwProfileChangeNotification();
PnpResizeTargetDeviceBlock();
PnpRestartDeviceNode();
PnpRestoreResourcesInternal();
PnpSaveDeviceCapabilities();
PnpSelectFirstConfiguration();
PnpSendIrp();
PnpSerializeBoot();
PnpSetBlockedDriverEvent();
PnpSetCustomTargetEvent();
PnpSetDeviceAffinityThread();
PnpSetDeviceClassChange();
PnpSetDeviceInstancePropertyChangeEvent();
PnpSetDeviceInstancePropertyChangeEventFromDeviceInstance();
PnpSetDeviceInstanceRemovalEvent();
PnpSetDeviceInstanceStartedEvent();
PnpSetDeviceInstanceStartedEventFromDeviceInstance();
PnpSetDeviceInterfacePropertyData();
PnpSetDevicePropertyData();
PnpSetDeviceRemovalSafe();
PnpSetGenericStoreProperty();
PnpSetHwProfileChangeEvent();
PnpSetInterruptInformation();
PnpSetInvalidIDEvent();
PnpSetMappedPropertyDispatch();
PnpSetPlugPlayEvent();
PnpSetPowerVetoEvent();
PnpSetRegistryDword();
PnpSetRegistryRequirementsList();
PnpSetRegistryResourceList();
PnpSetTargetDeviceRemove();
PnpShutdownDevices();
PnpStartDevice();
PnpStartDeviceNode();
PnpStartedDeviceNodeDependencyCheck();
PnpStopDeviceSubtree();
PnpStringFromGuid();
PnpStringToDwordValue();
PnpSurpriseRemoveLockedDeviceNode();
PnpSynchronizeDeviceEventQueue();
PnpTimerCallback();
PnpTraceClearDevNodeProblem();
PnpTraceDeviceConfig();
PnpTraceDeviceRemovalForResetComplete();
PnpTraceDeviceRemoveProcessVeto();
PnpTraceDockDeviceEnumeration();
PnpTraceInterruptUsage();
PnpTraceIommuDeviceProperties();
PnpTraceQueryStopFailure();
PnpTraceRebalanceResult();
PnpTraceRequestDeviceRemovalForReset();
PnpTraceSecureDeviceEnumeration();
PnpTraceSetDevNodeProblem();
PnpTraceStartDevice();
PnpTrackQueryRemoveDevices();
PnpUnicodeStringToWstr();
PnpUnicodeStringToWstrFree();
PnpUnlinkDeviceRemovalRelations();
PnpUnloadAttachedDriver();
PnpUnlockDeviceActionQueue();
PnpUnlockMountableDevice();
PnpUnregisterPlugPlayNotification();
PnpUpdateExtensionFlags();
PnpUpdateSetupInProgressConfiguration();
PnpValidateMultiSz();
PnpValidateMultiSzData();
PnpValidateObjectNameDispatch();
PnpValidateRegistryMultiSz();
PnpValidateRegistryString();
PnpValidateRegistryValue();
PnpWaitForDevicesToStart();
PnpWaitForEmptyDeviceActionQueue();
PnpWaitForEmptyDeviceEventQueue();
PnpWatchdogBugcheck();
PnpWatchdogBugcheckConfigure();
PnpWatchdogBugcheckWatchCallback();
PnpWatchdogInitializeTimer();
PnpWatchdogSetupInProgressCallback();
PnpWatchdogSetupInProgressConfigure();
PnprAddDeviceResources();
PnprAddMemoryResources();
PnprAddProcessorResources();
PnprAllocateMappingReserves();
PnprCollectResources();
PnprCompleteWake();
PnprCopyReservedMapping();
PnprEndMirroring();
PnprFreeMappingReserve();
PnprGetMillisecondCounter();
PnprGetPageDestination();
PnprGetPluginDriverImagePath();
PnprGetStackLimits();
PnprIdentifyUnits();
PnprInitializeMappingReserve();
PnprInitiateReplaceOperation();
PnprIsMemoryDevice();
PnprIsProcessorDevice();
PnprLegacyDeviceDriversPresent();
PnprLoadPluginDriver();
PnprLockPagesForReplace();
PnprLogFailureEvent();
PnprLogStartEvent();
PnprLogSuccessEvent();
PnprMapPhysicalPages();
PnprMapTargetSparePhysicalPages();
PnprMarkOrMirrorPages();
PnprMirrorMarkedPages();
PnprMirrorPhysicalMemory();
PnprMmAddRange();
PnprMmConstruct();
PnprMmFree();
PnprQueryReplaceFeatures();
PnprQuiesce();
PnprQuiesceDevices();
PnprQuiesceProcessorDpc();
PnprQuiesceProcessors();
PnprQuiesceWorker();
PnprRecopyAddress();
PnprRecopyMappingReserve();
PnprRecopyMirrorPages();
PnprReplaceStart();
PnprStartMirroring();
PnprSwap();
PnprSwapFinalize();
PnprUnlockPagesForReplace();
PnprWakeDevices();
PnprWakeProcessors();
PoAllProcessorsDeepIdle();
PoArmStopWatchCollection();
PoBlockConsoleSwitch();
PoBroadcastSystemState();
PoCallDriver();
PoCancelDeviceNotify();
PoCaptureReasonContext();
PoClearBroadcast();
PoClearPowerRequest();
PoClearPowerRequestInternal();
PoClearTransitionMarker();
PoCopyDeepIdleMask();
PoCpuIdledSinceLastCallImprecise();
PoCreatePowerRequest();
PoCreateThermalRequest();
PoDeletePowerRequest();
PoDeleteThermalRequest();
PoDestroyReasonContext();
PoDeviceAcquireIrp();
PoDeviceReleaseIrp();
PoDiagCaptureUsermodeStack();
PoDiagFreeUsermodeStack();
PoDiagTraceDeviceRundown();
PoDiagTraceDirectedDripsCandidateDevice();
PoDiagTraceIRTimerSleepStudyRundown();
PoDirectedDripsClearDeviceFlags();
PoDirectedDripsNotifyPagingDeviceUsage();
PoDirectedDripsSetDeviceFlags();
PoDisableSleepStates();
PoEndDeviceBusy();
PoEndPartitionReplace();
PoEndPowerStateTasks();
PoEnergyContextCleanup();
PoEnergyContextInitialize();
PoEnergyContextStart();
PoEnergyContextUpdateComponentPower();
PoEnergyEstimationEnabled();
PoExecuteIdleCheck();
PoExecutePerfCheck();
PoFxAbandonDevice();
PoFxActivateComponent();
PoFxActivateDevice();
PoFxActivateDeviceForSystemTransition();
PoFxCompleteDevicePowerNotRequired();
PoFxCompleteDirectedPowerTransition();
PoFxCompleteIdleCondition();
PoFxCompleteIdleState();
PoFxEnableDStateReporting();
PoFxIdleComponent();
PoFxIdleDevice();
PoFxInitPowerManagement();
PoFxIssueComponentPerfStateChange();
PoFxIssueComponentPerfStateChangeMultiple();
PoFxNotifySurprisePowerOn();
PoFxPlatformRequestHandler();
PoFxPowerControl();
PoFxPowerOnCrashdumpDevice();
PoFxPrepareDevice();
PoFxProcessorNotification();
PoFxQueryCurrentComponentPerfState();
PoFxRegisterComponentPerfStates();
PoFxRegisterCoreDevice();
PoFxRegisterCrashdumpDevice();
PoFxRegisterDebugger();
PoFxRegisterDevice();
PoFxRegisterDripsWatchdogCallback();
PoFxRegisterInternalDevice();
PoFxRegisterPlugin();
PoFxRegisterPluginEx();
PoFxRegisterPrimaryDevice();
PoFxReportDevicePoweredOn();
PoFxSendSystemLatencyUpdate();
PoFxSetComponentLatency();
PoFxSetComponentResidency();
PoFxSetComponentWake();
PoFxSetDeviceIdleTimeout();
PoFxSetTargetDripsDevicePowerState();
PoFxStartDevicePowerManagement();
PoFxSystemLatencyNotify();
PoFxUnregisterDevice();
PoGetFrequencyBucket();
PoGetIdleTimes();
PoGetLightestSystemStateForEject();
PoGetPerfStateAndParkingInfo();
PoGetProcessorIdleAccounting();
PoGetRequester();
PoGetSystemWake();
PoGetThermalRequestSupport();
PoHandleIrp();
PoIdle();
PoInitDriverServices();
PoInitHiberServices();
PoInitSystem();
PoInitializeBroadcast();
PoInitializePrcb();
PoInitializeStopWatch();
PoInitiateProcessorWake();
PoIsArmedStopWatchCollection();
PoIsInitializedStopWatch();
PoIsRunningStopWatch();
PoIssueCoalescingNotification();
PoLatencySensitivityHint();
PoNotifyMediaBuffering();
PoNotifySystemTimeSet();
PoNotifyVSyncChange();
PoPauseStopWatch();
PoPowerOffMonitor();
PoQueryProcessEnergyTrackingState();
PoQueryStopWatch();
PoQueryStopWatchCollection();
PoQueryWatchdogTime();
PoQueueShutdownWorkItem();
PoReenableSleepStates();
PoRegisterCoalescingCallback();
PoRegisterDeviceForIdleDetection();
PoRegisterDeviceNotify();
PoRegisterPowerSettingCallback();
PoRegisterSystemState();
PoReportDirectedDripsCandidateDevice();
PoRequestPowerIrp();
PoRequestShutdownEvent();
PoResetStopWatch();
PoResetStopWatchCollection();
PoRunDownDeviceObject();
PoRundownSystemTimer();
PoSessionBuiltinPanelState();
PoSessionEngagementUpdate();
PoSessionPowerControl();
PoSetDeviceBusyEx();
PoSetFixedWakeSource();
PoSetHiberRange();
PoSetPowerButtonHoldState();
PoSetPowerRequest();
PoSetPowerRequestInternal();
PoSetPowerState();
PoSetProcessEnergyTrackingState();
PoSetProcessorQoS();
PoSetSystemState();
PoSetSystemWake();
PoSetSystemWakeDevice();
PoSetThermalActiveCooling();
PoSetThermalPassiveCooling();
PoSetUserPresent();
PoShutdownBugCheck();
PoStartDeviceBusy();
PoStartNextPowerIrp();
PoStartPartitionReplace();
PoStartPowerStateTasks();
PoStartStopWatch();
PoStoreDiagnosticContext();
PoStoreRequester();
PoThermalCounterSetCallback();
PoTraceDynamicTickDisabled();
PoTraceForceIdleReset();
PoTraceForceIdleStateChange();
PoTraceSystemTimerResolution();
PoTraceSystemTimerResolutionKernel();
PoTraceSystemTimerResolutionUpdate();
PoUnarmStopWatchCollection();
PoUnblockConsoleSwitch();
PoUninitializeStopWatch();
PoUnregisterCoalescingCallback();
PoUnregisterPowerSettingCallback();
PoUnregisterSystemState();
PoUserShutdownCancelled();
PoUserShutdownInitiated();
PoVolumeDevice();
PopAccountBatteryEnergyChange();
PopAccountCbEnergyChange();
PopAccumulateNonActivatedCpuTime();
PopAcquireAdaptiveLock();
PopAcquireAwaymodeLock();
PopAcquireCoolingInterface();
PopAcquirePolicyLock();
PopAcquirePowerRequestPushLock();
PopAcquireRwLockExclusive();
PopAcquireTransitionLock();
PopAcquireUmpoPushLock();
PopAcquireWakeSourceSpinLock();
PopActionRetrieveInitialState();
PopActiveLockScreenPowerRequest();
PopAdaptivePowerSettingCallback();
PopAddPagesToCompressedPageSet();
PopAdjustHiberFile();
PopAdvanceSystemPowerState();
PopAllocateHiberContext();
PopAllocateIrp();
PopAllocatePages();
PopAllowAwayModeSettingCallback();
PopAnsiStringToUnicodeString();
PopApplyAdminPolicy();
PopApplyLegacyPowerRequestFlags();
PopApplyPolicy();
PopArePowerSettingsEqual();
PopAssociateThermalRequest();
PopAudioAccountingCallback();
PopAvlAllocatePowerRequestStats();
PopAvlComparePowerRequestKeys();
PopAvlDeleteStatsForPowerRequest();
PopAvlFindOrMakeStatsForAudio();
PopAvlFindOrMakeStatsForPowerRequest();
PopAvlFreePowerRequestStats();
PopAvlGetPowerRequestKey();
PopAwayModePowerRequest();
PopAwayModeUserPresenceDpc();
PopBackgroundActivityPolicyCallback();
PopBatteryAdd();
PopBatteryAlarmPowerSettingCallback();
PopBatteryApplyCompositeState();
PopBatteryCapacityToRate();
PopBatteryCheckCompositeCapacity();
PopBatteryCheckTrigger();
PopBatteryCheckTriggerAllBatteries();
PopBatteryDeviceState();
PopBatteryEstimatesSpoiled();
PopBatteryEtwCallback();
PopBatteryGetEnergyDrainFromDischage();
PopBatteryInit();
PopBatteryInitPhaseTwo();
PopBatteryInitialize();
PopBatteryIrpComplete();
PopBatteryQueryEstimatedTime();
PopBatteryQueryStatus();
PopBatteryQueueWork();
PopBatteryReadTag();
PopBatteryRemove();
PopBatteryTracePercentageRemaining();
PopBatteryTraceSystemBatteryStatus();
PopBatteryUpdateAlarms();
PopBatteryUpdateCompositeInformation();
PopBatteryUpdateCurrentState();
PopBatteryWaitTag();
PopBatteryWakeDpc();
PopBatteryWakeTimerDpc();
PopBatteryWorker();
PopBcdClearPendingResume();
PopBcdEstablishResumeObject();
PopBcdReadElement();
PopBcdRegenerateResumeObject();
PopBcdSetDefaultResumeObjectElements();
PopBcdSetPendingResume();
PopBcdSetupResumeObject();
PopBlackBoxBugcheckCallback();
PopBlackBoxUpdate();
PopBlockSessionSwitch();
PopBootLoaderSiData();
PopBootLoaderTraceProcess();
PopBootStatAccessCheck();
PopBootStatCheckIntegrity();
PopBootStatGet();
PopBootStatRestoreDefaults();
PopBootStatSet();
PopBootStatUnlock();
PopBroadcastInputSuppressionCallback();
PopBroadcastSessionInfo();
PopBuildDeviceNotifyList();
PopBuildDeviceNotifyListWatchdog();
PopBuildMemoryImageHeader();
PopCadHpmiPnpNotification();
PopCadTriggerDriverLoad();
PopCalculateCsSummary();
PopCalculateHiberFileSize();
PopCalculateIdleInformation();
PopCalculateTotalHwDripsResidency();
PopCalculateWakeTimeAdjustment();
PopCallPowerSettingCallback();
PopCancelDripsWatchdog();
PopCapabilityCheck();
PopCapturePlatformRole();
PopCaptureReasonContext();
PopCaptureSleepStudyStatistics();
PopCaptureTimeOnProcZero();
PopChangeCapability();
PopCheckAndHandleThermalConditions();
PopCheckConsoleTimeouts();
PopCheckDisabledReason();
PopCheckDisabledState();
PopCheckForIdleness();
PopCheckForUpgradeInProgress();
PopCheckForWork();
PopCheckPowerSourceAfterRtcWakeCancel();
PopCheckPowerSourceAfterRtcWakeInitialize();
PopCheckPowerSourceAfterRtcWakeSet();
PopCheckPowerSourceAfterRtcWakeTimerCallback();
PopCheckPowerSourceAfterRtcWakeTimerWorker();
PopCheckResiliencyScenarios();
PopCheckShutdownMarker();
PopCheckSkipTick();
PopCheckTestsigningEnabled();
PopCheckThermalPolicy();
PopCheckpointSystemSleep();
PopCheckpointSystemSleepUnsafe();
PopCleanCoolingExtension();
PopClearConnectedStandbyMarker();
PopClearHiberFileSignature();
PopClearHibernateDiagnosticInfo();
PopClearShutdownMarker();
PopClearSleepMarker();
PopClearSpecialRequest();
PopClearSystemShutdownMarker();
PopClearSystemSleepCheckpoint();
PopClearTransitionCheckpoints();
PopClearUserShutdownMarkerWorker();
PopCloneRange();
PopClosePowerRequestObject();
PopCoalescingCallback();
PopCoalescingCallbackWorker();
PopCoalescingCheck();
PopCoalescingInitialize();
PopCoalescingNotify();
PopCoalescingPowerSettingCallback();
PopCoalescingSetActiveState();
PopCoalescingSetTimer();
PopCoalesingTimerDpcCallback();
PopCompareActions();
PopCompleteAction();
PopCompressCallback();
PopCompressHiberBlocks();
PopComputeCounterShifts();
PopComputeDerivedHiberStats();
PopComputeWatchdogTimeout();
PopConfigureHeteroPolicies();
PopConnectToPolicyDevice();
PopConnectedStandbySettingCallback();
PopConsoleLockPowerSettingCallback();
PopConsoleSessionActiveInput();
PopConsoleSessionPassiveInput();
PopControlMonitor();
PopCoolingExtensionPnpNotification();
PopCoolingTelemetryWorker();
PopCopyWakeSource();
PopCountDataAsProduced();
PopCreateDumpMdl();
PopCreateDynamicIrpWorker();
PopCreateHiberFile();
PopCreateHiberFileSecurityDescriptor();
PopCreateKernelPowerRequest();
PopCreateNotificationName();
PopCreatePowerRequestObject();
PopCreatePowerThread();
PopCreateTimebrokerServiceSid();
PopCreateUserPowerRequest();
PopCriticalShutdown();
PopCurrentPowerState();
PopCurrentPowerStatePrecise();
PopDeactiveThermalRequest();
PopDecompressCallback();
PopDecompressHiberBlocks();
PopDecrementPowerSettingPendingUpdates();
PopDeepSleepClearDisengageReason();
PopDeepSleepEnabled();
PopDeepSleepEvaluateCallback();
PopDeepSleepInitialize();
PopDeepSleepPowerSettingCallback();
PopDeepSleepResiliencyPhaseAccountingBegin();
PopDeepSleepResiliencyPhaseAccountingEnd();
PopDeepSleepResiliencyPhaseAccountingUpdate();
PopDeepSleepSetDisengageReason();
PopDeepSleepWatchdogTakeAction();
PopDefaultPolicy();
PopDeferDoze();
PopDeleteHiberFile();
PopDeletePowerRequestObject();
PopDequeueQuerySetIrp();
PopDereferenceWakeInfos();
PopDetectSimulatedHeteroProcessors();
PopDeviceConstraintsEnforced();
PopDeviceIdleCompletion();
PopDeviceIdlePolicySettingCallback();
PopDiagAreIdenticalWakeSources();
PopDiagComputeEarlyHiberStats();
PopDiagDeviceRundownWorker();
PopDiagGetDriverName();
PopDiagIdleSystemImageCallback();
PopDiagIdleWakeAccountingStart();
PopDiagIdleWakeAccountingStop();
PopDiagIdleWakeSourceAccountingToDiagnostic();
PopDiagInitialize();
PopDiagInterruptTimeToSystemTime();
PopDiagNextCsSleepStudySession();
PopDiagQueryDevicePropertyString();
PopDiagSleepStudyInitialize();
PopDiagSnapPassiveHistogram();
PopDiagStopCsSleepStudySession();
PopDiagTraceAbnormalReset();
PopDiagTraceAcDcStateChange();
PopDiagTraceActiveCooling();
PopDiagTraceAppPowerMessage();
PopDiagTraceAppPowerMessageEnd();
PopDiagTraceBatteryAlarmStatus();
PopDiagTraceBatteryCountChange();
PopDiagTraceBatteryTriggerFlags();
PopDiagTraceBatteryTriggerMet();
PopDiagTraceClearDeepSleepConstraint();
PopDiagTraceConsoleDisplayState();
PopDiagTraceControlCallback();
PopDiagTraceCoolingExtension();
PopDiagTraceCoolingExtensionActiveUpdate();
PopDiagTraceCoolingExtensionPassiveUpdate();
PopDiagTraceCsConsumption();
PopDiagTraceCsDeepSleepWatchdog();
PopDiagTraceCsDripsDivergence();
PopDiagTraceCsDripsWatchdog();
PopDiagTraceCsDripsWatchdogPerfTrack();
PopDiagTraceCsEnterReason();
PopDiagTraceCsExitReason();
PopDiagTraceCsFanPerfTrack();
PopDiagTraceCsResiliencyEnter();
PopDiagTraceCsResiliencyExit();
PopDiagTraceCsResiliencyStats();
PopDiagTraceDebuggerTransitionRequirements();
PopDiagTraceDeepSleepConstraintRundown();
PopDiagTraceDeviceAcquireIrp();
PopDiagTraceDeviceComplianceUpdate();
PopDiagTraceDeviceReleaseIrp();
PopDiagTraceDeviceVerboseRundown();
PopDiagTraceDevicesLevel();
PopDiagTraceDevicesSuspend();
PopDiagTraceDevicesWakeEnd();
PopDiagTraceDirectedDripsEngagedStatus();
PopDiagTraceDirectedDripsInitialization();
PopDiagTraceDirectedDripsMarkDevice();
PopDiagTraceDirectedDripsNotifyAppsAndServices();
PopDiagTraceDirectedDripsNotifyDevices();
PopDiagTraceDirectedDripsWorker();
PopDiagTraceDirtyTransition();
PopDiagTraceDiskIdleCheck();
PopDiagTraceDisplayBurstWin32kCallout();
PopDiagTraceDisplayTimeout();
PopDiagTraceDozeDeferralDecision();
PopDiagTraceDripsHistogram();
PopDiagTraceDriverVeto();
PopDiagTraceDynamicTickStatusRundown();
PopDiagTraceEsState();
PopDiagTraceEventNoPayload();
PopDiagTraceFirmwareS3Stats();
PopDiagTraceFlushSleepStudyLogger();
PopDiagTraceFlushSleepStudyLoggerEnd();
PopDiagTraceFxComponentAccounting();
PopDiagTraceFxComponentIdleConstraints();
PopDiagTraceFxComponentIdleState();
PopDiagTraceFxComponentLatency();
PopDiagTraceFxComponentLogicalCondition();
PopDiagTraceFxComponentRegistration();
PopDiagTraceFxComponentResidency();
PopDiagTraceFxComponentWake();
PopDiagTraceFxDefaultPepWorkerEnd();
PopDiagTraceFxDeviceAccounting();
PopDiagTraceFxDeviceDirectedCompletion();
PopDiagTraceFxDeviceDirectedTransition();
PopDiagTraceFxDeviceIdleConstraints();
PopDiagTraceFxDevicePowerRequirement();
PopDiagTraceFxDevicePowerState();
PopDiagTraceFxDevicePowered();
PopDiagTraceFxDevicePreparation();
PopDiagTraceFxDeviceRegistration();
PopDiagTraceFxDeviceStartPowerManagement();
PopDiagTraceFxDeviceUnregistration();
PopDiagTraceFxGlobalDeviceAccounting();
PopDiagTraceFxPerfNominalChange();
PopDiagTraceFxPerfRegistration();
PopDiagTraceFxPerfRequest();
PopDiagTraceFxPerfRequestComplete();
PopDiagTraceFxPerfRequestProgress();
PopDiagTraceFxPerfSetRegistration();
PopDiagTraceFxPluginRegistration();
PopDiagTraceFxRundown();
PopDiagTraceHiberStats();
PopDiagTraceHibernateErrorStatus();
PopDiagTraceIdleCheck();
PopDiagTraceIdleResiliencyEnd();
PopDiagTraceIdleResiliencyStart();
PopDiagTraceIdleWakeSource();
PopDiagTraceIdleWakeSourceDiagnostic();
PopDiagTraceIllegalProcessorThrottle();
PopDiagTraceInputTimeout();
PopDiagTraceIoCoalescingDiskIdle();
PopDiagTraceIoCoalescingOff();
PopDiagTraceIoCoalescingOn();
PopDiagTraceIrpFinish();
PopDiagTraceIrpFinishTelemetry();
PopDiagTraceIrpPended();
PopDiagTraceIrpStart();
PopDiagTraceKernelQueriesAllowed();
PopDiagTraceMonitorOnWithLidClosed();
PopDiagTraceMtrrError();
PopDiagTracePassiveCooling();
PopDiagTracePerfTrackData();
PopDiagTracePlatformRoleRundown();
PopDiagTracePolicyChange();
PopDiagTracePolicyInitiatePowerActionApiCall();
PopDiagTracePostSleepNotification();
PopDiagTracePowerAggregatorCompletionEvent();
PopDiagTracePowerAggregatorInvalidRequestIndex();
PopDiagTracePowerAggregatorQueueOverflow();
PopDiagTracePowerAggregatorRequest();
PopDiagTracePowerAggregatorSessionBegin();
PopDiagTracePowerAggregatorSessionEnd();
PopDiagTracePowerAggregatorValidationEvent();
PopDiagTracePowerButtonBugcheck();
PopDiagTracePowerRequestChange();
PopDiagTracePowerRequestClose();
PopDiagTracePowerRequestCreate();
PopDiagTracePowerSetting();
PopDiagTracePowerSettingStart();
PopDiagTracePowerSettingStop();
PopDiagTracePowerStateEvent();
PopDiagTracePowerTransitionEnd();
PopDiagTracePowerTransitionStart();
PopDiagTracePowerTransitionTime();
PopDiagTracePreSleepNotification();
PopDiagTraceProcessorThrottleDurationPerfTrack();
PopDiagTraceProcessorThrottlePerfTrack();
PopDiagTraceRegisterSystemState();
PopDiagTraceRtcWakeInfo();
PopDiagTraceSIdleUpdateNotificationWorker();
PopDiagTraceServiceNotification();
PopDiagTraceSessionDisplayStateChange();
PopDiagTraceSessionState();
PopDiagTraceSessionStateCounted();
PopDiagTraceSessionStates();
PopDiagTraceSetDeepSleepConstraint();
PopDiagTraceSetSystemState();
PopDiagTraceSetThreadExecutionState();
PopDiagTraceShutdownAction();
PopDiagTraceSkipTick();
PopDiagTraceSleepStudyBlocker();
PopDiagTraceSleepStudyStart();
PopDiagTraceSleepStudyStop();
PopDiagTraceSystemLatencyUpdate();
PopDiagTraceThermalCoolingMode();
PopDiagTraceThermalOverthrottleState();
PopDiagTraceThermalRequest();
PopDiagTraceThermalRequestActiveUpdate();
PopDiagTraceThermalRequestPassiveUpdate();
PopDiagTraceThermalStandbyState();
PopDiagTraceThermalStateChange();
PopDiagTraceThermalZoneEnumeration();
PopDiagTraceThermalZoneThrottleDurationPerfTrack();
PopDiagTraceThermalZoneThrottlePerfTrack();
PopDiagTraceTripPointExceeded();
PopDiagTraceUsermodeThermalEvent();
PopDiagTraceUsermodeTripPointExceeded();
PopDiagTraceZeroHiberFile();
PopDiagTraceZeroHiberFileEnd();
PopDiagTraceZoneCriticalTripPointExceeded();
PopDiagTraceZoneS4TripPointExceeded();
PopDirectedDripsBuildBroadcastTree();
PopDirectedDripsBuildPs4BroadcastTree();
PopDirectedDripsClearDisengageReason();
PopDirectedDripsDiagCreateBlockerEntryBoolean();
PopDirectedDripsDiagCreateBlockerEntryULong();
PopDirectedDripsDiagCreateDeviceDiagnostic();
PopDirectedDripsDiagFreeDeviceDiagnostic();
PopDirectedDripsDiagRundown();
PopDirectedDripsDiagTraceBroadcastRootDevice();
PopDirectedDripsDiagTraceBroadcastVisit();
PopDirectedDripsDiagTraceDisengageReasonChange();
PopDirectedDripsDiagTraceProblemDevice();
PopDirectedDripsDiagTracePs4Initiator();
PopDirectedDripsEngageDfx();
PopDirectedDripsEngagePs4();
PopDirectedDripsEventHandler();
PopDirectedDripsFindPs4RootDevice();
PopDirectedDripsFlushDeviceQueue();
PopDirectedDripsHandleResiliencyNotification();
PopDirectedDripsIdleResiliencyCallback();
PopDirectedDripsInitializeBroadcast();
PopDirectedDripsInsertQueueDevice();
PopDirectedDripsIsExcludedDevice();
PopDirectedDripsIsLikelySpecialDevice();
PopDirectedDripsIsUsbHubDevice();
PopDirectedDripsMarkCandidateDevice();
PopDirectedDripsNotify();
PopDirectedDripsNotifyAppsAndServices();
PopDirectedDripsNotifyDeviceStarted();
PopDirectedDripsNotifyDrivers();
PopDirectedDripsNotifyResiliencyCompletionWorker();
PopDirectedDripsNotifyUsbDeviceStarted();
PopDirectedDripsPdcLpeControlCallback();
PopDirectedDripsPdcLpeNotification();
PopDirectedDripsProcessWork();
PopDirectedDripsQueryEmSettings();
PopDirectedDripsRefreshDeviceState();
PopDirectedDripsRefreshDisengageState();
PopDirectedDripsSetDisengageReason();
PopDirectedDripsStartDebounceInterval();
PopDirectedDripsTimerCallbackRoutine();
PopDirectedDripsTriggerTransition();
PopDirectedDripsVisitDevice();
PopDirectedDripsVisitPs4Device();
PopDirectedDripsWorkerRoutine();
PopDiscardRange();
PopDisengageDirectedDrips();
PopDisksRegisteredForIdle();
PopDispatchAcDcCallback();
PopDispatchCallback();
PopDispatchCallout();
PopDispatchFullWake();
PopDispatchNotifications();
PopDispatchNotificationsToList();
PopDispatchPowerSettingCallbacks();
PopDispatchQuerySetIrp();
PopDispatchShutdownEvent();
PopDispatchStateCallout();
PopDispatchSuperfetchNotification();
PopDisplayBurstEventHandler();
PopDisplayBurstSuppressWorker();
PopDoesFxDeviceSupportDirectedTransition();
PopDripsCallbackTakeAction();
PopDripsWatchdogCallbackWorker();
PopDripsWatchdogCheckHwDivergence();
PopDripsWatchdogDfxCallback();
PopDripsWatchdogDiagnosticWorker();
PopDripsWatchdogInitializeActions();
PopDripsWatchdogInitializeCallbackTimer();
PopDripsWatchdogInitializeDiagnosticTimer();
PopDripsWatchdogInvokeDeviceCallbacks();
PopDripsWatchdogPs4Callback();
PopDripsWatchdogReportDirectedDripsDevice();
PopDripsWatchdogResetCallbackState();
PopDripsWatchdogResetInternalState();
PopDripsWatchdogScheduleNextTimer();
PopDripsWatchdogSelectCallback();
PopDripsWatchdogStartWatchdog();
PopDripsWatchdogStopWatchdog();
PopDripsWatchdogTakeAction();
PopDripsWatchdogTimerCallback();
PopDripsWatchdogTimerCallbackRoutine();
PopDripsWatchdogUpdateMetrics();
PopDripsWatchdogWorkerRoutine();
PopEmModuleAddressMatchCallback();
PopEmUpdateDeviceConstraintCallback();
PopEnableExecutionRequiredPowerRequests();
PopEnableHiberFile();
PopEnableIrpWatchdog();
PopEndMirroring();
PopEnforceResiliencyScenarios();
PopEnlargeHiberFile();
PopEnsureCoalescingWorkerWillRun();
PopEnsureErratumSubscribed();
PopErratumUpdateCallback();
PopEsEnterSleepShutdown();
PopEsExitSleep();
PopEsGetState();
PopEsInit();
PopEsPowerSettingBatteryThresholdCallback();
PopEsPowerSettingPolicyCallback();
PopEsPublishState();
PopEsQueueStateEvaluation();
PopEsSnapTelemetry();
PopEsStartTelemetry();
PopEsUpdateSetting();
PopEsUpdateState();
PopEsWnfSubscriptionBgActivityPolicyCallback();
PopEsWnfSubscriptionOverrideCallback();
PopEsWorkItemSchedule();
PopEsWorker();
PopEstimateChargeTime();
PopEtAggregateFind();
PopEtAggregateGet();
PopEtAggregateKeyCleanup();
PopEtAggregateKeyCopy();
PopEtAggregateKeyCopyFromProcess();
PopEtAppIdDereference();
PopEtAppIdIntern();
PopEtBucketsAllocate();
PopEtBucketsFree();
PopEtDataSectionCopyData();
PopEtDataSectionReserve();
PopEtDataSectionStart();
PopEtEnergyContextProcessStateUpdate();
PopEtEnergyContextSetState();
PopEtEnergyTrackerCleanup();
PopEtEnergyTrackerCleanupAggregates();
PopEtEnergyTrackerClose();
PopEtEnergyTrackerCreate();
PopEtEnergyTrackerDelete();
PopEtEnergyTrackerEnumSnapshotCallback();
PopEtEnergyTrackerQuery();
PopEtEnergyTrackerUpdateAggregate();
PopEtEnergyValuesDeltaCalculate();
PopEtEnumEnergyTrackers();
PopEtGetNextEnergyTracker();
PopEtGetProcessAppId();
PopEtGetProcessImageInfo();
PopEtGetProcessSidAndPackageIdentity();
PopEtInit();
PopEtInitializeBuiltinAppId();
PopEtInternerAllocate();
PopEtInternerEntryInitialize();
PopEtInternerFree();
PopEtInternerLock();
PopEtInternerUnlock();
PopEtIsrDpcQuery();
PopEtProcessEnumSnapshotCallback();
PopEtProcessSnapshotCreate();
PopEtProcessSnapshotFind();
PopEtProcessSnapshotUpdate();
PopEtProcessSnapshotUpdateFromSnapshotContext();
PopEtStringIntern();
PopEtStringSet();
PopEvaluateAggressiveStandbyActions();
PopEvaluateGlobalUserStatus();
PopEvaluateInputSuppressionAction();
PopEventCalloutDispatch();
PopExecuteOnTargetProcessors();
PopExecutePowerAction();
PopExecuteProcessorCallback();
PopExecutionRequiredCallback();
PopExecutionRequiredSettingCallback();
PopExecutionRequiredTimeoutCallback();
PopExecutionRequiredTimeoutWorkerRoutine();
PopExtendConnectionState();
PopExternalMonitorUpdatedWorker();
PopFanAdd();
PopFanEndCsFanPeriod();
PopFanIrpComplete();
PopFanRemove();
PopFanReportBootStartDevices();
PopFanUpdateCsState();
PopFanUpdateRunningState();
PopFanWorker();
PopFastS4Check();
PopFilterCapabilities();
PopFinalizeWakeInfo();
PopFindNextSystemPowerState();
PopFindPowerSettingConfiguration();
PopFireThermalWmiEvent();
PopFlushAndHold();
PopFlushVolumeWorker();
PopFlushVolumes();
PopForceCompleteCsSleepStudySession();
PopForceCompleteCsSleepStudySessionWorker();
PopFreeHiberContext();
PopFreeIrp();
PopFreeRegistration();
PopFreeSessionState();
PopFreeUnicodeString();
PopFreeWakeInfo();
PopFreeWakeSource();
PopFxAccumulateDeviceIRPhaseAccounting();
PopFxAcpiDispatchNotification();
PopFxAcpiForwardNotification();
PopFxAcpiForwardPepAcpiNotifyRequest();
PopFxAcpiForwardPepWorkRequest();
PopFxAcpiForwardRequestCommon();
PopFxAcpiPrepareDevice();
PopFxAcpiRegisterDevice();
PopFxAcpiUnregisterDevice();
PopFxAcpiValidateParameters();
PopFxActivateComponent();
PopFxActivateComponentWorker();
PopFxActivateDevice();
PopFxActivateDevicesForSx();
PopFxAddLogEntry();
PopFxAddRefDevice();
PopFxAllocatePowerIrp();
PopFxArmResidentTimer();
PopFxAssignDeviceToDevNode();
PopFxBeginDeviceIRPhaseAccounting();
PopFxBugCheck();
PopFxBuildDirectedDripsCandidateDeviceList();
PopFxBuildDripsBlockingDeviceList();
PopFxClearDirectedDripsCandidateDeviceList();
PopFxCompleteComponentActivation();
PopFxCompleteComponentPerfState();
PopFxCompleteDevicePowerRequired();
PopFxCompleteDirectedPowerTransition();
PopFxComponentPerfWork();
PopFxComponentWork();
PopFxConvertV1Components();
PopFxCreateDeviceCommon();
PopFxCreateEmergencyWorkerThread();
PopFxDebuggerPowerCriticalTransitionCallback();
PopFxDeliverDevicePowerRequired();
PopFxDerefAndCompleteDirectedPowerTransition();
PopFxDestroyDeviceCommon();
PopFxDestroyDeviceDpm();
PopFxDestroyDirectedDripsCandidateDeviceList();
PopFxDestroyDripsBlockingDeviceList();
PopFxDeviceWork();
PopFxDirectedPowerTransitionWorker();
PopFxDisableWorkOrderWatchdog();
PopFxDuplicateUniqueId();
PopFxEmergencyWorker();
PopFxEnableEnhancedAccounting();
PopFxEnablePlatformStates();
PopFxEnableWorkOrderWatchdog();
PopFxEndDeviceIRPhaseAccounting();
PopFxFindAcpiDeviceByUniqueId();
PopFxFindAndReferenceAcpiDevice();
PopFxFindDeviceAndAllocateUniqueId();
PopFxFreeUniqueId();
PopFxGenerateFriendlyName();
PopFxGetLatencyLimitWithoutResiliency();
PopFxHandleDirectedPowerTransition();
PopFxIdleComponent();
PopFxIdleDevicesFromSx();
PopFxIdleTimeoutDpcRoutine();
PopFxIdleWorker();
PopFxIdleWorkerTail();
PopFxIncrementDeviceSleepCount();
PopFxInitializeSocSubsystemStaticInfo();
PopFxInsertAcpiDevice();
PopFxInsertDevice();
PopFxInvokeDripsWatchdogCallback();
PopFxIsDevicePotentialDripsConstraint();
PopFxIsDirectedPowerTransitionSupported();
PopFxIsDripsBlockingDevice();
PopFxIssueComponentPerfStateChanges();
PopFxIssueDirectedPowerTransition();
PopFxLockDevice();
PopFxLogSocSubsystemBlockingTimes();
PopFxLogSocSubsystemMetadata();
PopFxLookupSocSubsystemsByPlatformIdleState();
PopFxLowPowerEpochCallback();
PopFxMergeActiveTimeAccounting();
PopFxNotifySystemStateTransition();
PopFxPauseDeviceAccounting();
PopFxPepPerfInfoFree();
PopFxPepPerfInfoQuery();
PopFxPlatformIdleVeto();
PopFxPlatformRegisterInterface();
PopFxPlatformStateAvailable();
PopFxPluginWork();
PopFxPrepareDevicesForShutdown();
PopFxProcessWork();
PopFxProcessorIdleVeto();
PopFxQueryBiosDeviceName();
PopFxQueryCurrentComponentPerfState();
PopFxQueueWorkOrder();
PopFxRegisterComponentPerfStates();
PopFxRegisterDevice();
PopFxRegisterDeviceWithPep();
PopFxRegisterDeviceWorker();
PopFxRegisterPluginEx();
PopFxReleaseAcpiRefDevice();
PopFxReleaseDevice();
PopFxReleasePowerIrp();
PopFxRemoveAcpiDevice();
PopFxRemoveDevice();
PopFxRequestCommon();
PopFxRequestWorker();
PopFxResetSocSubsystemAccounting();
PopFxResidentTimeoutDpcRoutine();
PopFxResidentTimeoutRoutine();
PopFxResumeDeviceAccounting();
PopFxScheduleDeviceIdleTimer();
PopFxSetDeviceAccountingCsPlatformState();
PopFxSetDripsBlockedByDeviceActivity();
PopFxSetGlobalDeviceAccountingEnabled();
PopFxStartDeviceAccounting();
PopFxStopDeviceAccounting();
PopFxTraceDeviceRegistration();
PopFxTracePerfRegistration();
PopFxTransitionCriticalResource();
PopFxUnregisterDevice();
PopFxUnregisterDeviceOrWait();
PopFxUpdateAccountingActiveTime();
PopFxUpdateComponentAccountingEnhanced();
PopFxUpdateComponentPerfStateNominalChange();
PopFxUpdateDeviceAccountingEnhanced();
PopFxUpdateDeviceIRPhaseAccounting();
PopFxUpdateDeviceIdleTimer();
PopFxUpdateGlobalDeviceAccountingInfo();
PopFxUpdatePlatformIdleState();
PopFxUpdateProcessorIdleState();
PopFxUpdateVetoMaskWork();
PopFxValidateReturnedUnicodeString();
PopFxVerifyDependencies();
PopFxWorkOrderWatchdog();
PopGenerateMdl();
PopGenerateScratchMdl();
PopGenerateUnHibernatedMdl();
PopGenericEventHandler();
PopGetBitlockerKeyLocation();
PopGetBlockedPhaseGuid();
PopGetConsoleDisplayRequestCount();
PopGetCurrentWakeInfos();
PopGetDisplayTimeout();
PopGetDope();
PopGetDozeTimerSource();
PopGetEnergyCounter();
PopGetHwConfigurationSignature();
PopGetIdleTimesCallback();
PopGetIoLocation();
PopGetLegacyPowerRequestFlags();
PopGetListHead();
PopGetLockConsoleTimeout();
PopGetLockConsoleTimeoutUnsafe();
PopGetMonitorReasonFromPowerEventId();
PopGetNextTable();
PopGetPolicyDeviceObject();
PopGetPolicyWorker();
PopGetPowerRequestListInfo();
PopGetPowerSettingValue();
PopGetReasonListByReasonCode();
PopGetRemainingHibernateRangeDataSize();
PopGetSessionId();
PopGetSettingNotificationName();
PopGetSettingValue();
PopGetStopWatchByRequestType();
PopGetTransitionsToOnCount();
PopGetWakeSource();
PopGracefulShutdown();
PopHaltDeviceIdle();
PopHandleConvergedPowerRequestUpdate();
PopHandleExecutionRequiredEnablementUpdate();
PopHandleNextState();
PopHandleSystemRequiredPowerRequestsUpdate();
PopHandleWakeSources();
PopHardDiskPowerSettingCallback();
PopHiberCheckForDebugBreak();
PopHiberCheckResume();
PopHiberChecksumHiberFileData();
PopHiberEvaluateSkippingMemoryMapValidation();
PopHiberInitializeResources();
PopHiberPeekRangeTable();
PopHiberReadChecksums();
PopIdleAoAcDozeS4TimerCallback();
PopIdleAoAcDozeToS4();
PopIdleArmAoAcDozeS4Timer();
PopIdleCancelAoAcDozeS4Timer();
PopIdleChooseDozeS4Time();
PopIdleCsStateChanged();
PopIdleGlobalUserPresenceCallback();
PopIdleInitAoAcDozeS4Timer();
PopIgnoreBatteryStatusChange();
PopIncrementPowerSettingPendingUpdates();
PopInitPlatformSettings();
PopInitSIdle();
PopInitShutdownList();
PopInitSystemSleeperThread();
PopInitVideoWnfState();
PopInitializeAdpm();
PopInitializeDirectedDrips();
PopInitializeDripsWatchdog();
PopInitializeHeteroProcessors();
PopInitializeHighPerfPowerRequest();
PopInitializeIRTimer();
PopInitializeIrpWorkers();
PopInitializePowerButtonHold();
PopInitializePowerPolicySimulate();
PopInitializePowerSettingCallbacks();
PopInitializePowerSettings();
PopInitializePreSleepNotifications();
PopInitializeTimer();
PopInitializeWorkItem();
PopInitilizeAcDcSettings();
PopInputDisabled();
PopInsertPowerRequestObject();
PopIntSteerSetMode();
PopIntSteerSetPerProcTrigger();
PopIntSteerSetTimeUnparkTrigger();
PopInternalAddToDumpFile();
PopInternalError();
PopInternalSaveStackToDumpFile();
PopInternalUpdateActiveStopWatchesCollectionState();
PopInternalUpdateStopWatchState();
PopInterruptSteeringEnabled();
PopInvokeStateHandlerTargetProcessor();
PopInvokeSystemStateHandler();
PopInvokeWin32Callout();
PopIrpWatchdog();
PopIrpWatchdogBugcheck();
PopIrpWorker();
PopIrpWorkerControl();
PopIsAddressRangeValid();
PopIsDataAccruedByPowerRequestStats();
PopIsDirectedDripsEnabled();
PopIsDozeSupported();
PopIsHiberbootSupported();
PopIsHibernateSupported();
PopIsInputSuppressionEngaged();
PopIsLockConsoleTimeoutActive();
PopIsRunningAsLocalSystem();
PopIsRunningInVm();
PopIsUserInitiatedMonitorRequestReason();
PopIsWakeTimerImmanent();
PopIssueActionRequest();
PopIssueNextState();
PopKsrCallback();
PopLazySensorActiveInput();
PopLidClosedSleepStudyWorker();
PopLidSwitchChangeCallback();
PopLoadResumeContext();
PopLockGetDoDevicePowerState();
PopLogDisabledSleepReason();
PopLogNotifyDevice();
PopLogPowerRequestAction();
PopLogSleepDisabled();
PopLoggingInformation();
PopMapInternalActionToIrpAction();
PopMarkComponentsBootPhase();
PopMarkDirectedDripsCandidateDevice();
PopMarkHiberPhase();
PopMarshalSettingValues();
PopMarshalSettingValues$fin$0();
PopMeasureEnergyChange();
PopMirrorPhysicalMemory();
PopMonitorAlpcCallback();
PopMonitorInvocation();
PopMonitorProcessBrightnessAction();
PopMonitorProcessLoop();
PopMoveList();
PopNetArmDsEvaluationTimer();
PopNetArmRefreshTimer();
PopNetCheckOpportunisticDs();
PopNetCheckUserConnectivityPolicy();
PopNetClearConnectivityConstraint();
PopNetCompliantNicUpdate();
PopNetConnectivityInStandbyCallback();
PopNetDisconnectedStandbyModeCallback();
PopNetDisengageNetworkRefresh();
PopNetEngageNetworkRefresh();
PopNetEvaluationTimerCallback();
PopNetEvaluationWorkerCallback();
PopNetGetNextDueRefreshTime();
PopNetInitialize();
PopNetIsCompliantNicPresent();
PopNetIsDisconnectStandbyActive();
PopNetIsNetworkRefreshEnabled();
PopNetNonCompliantDeviceUpdate();
PopNetPublishWnfStateUpdate();
PopNetRefreshTimerCallback();
PopNetRefreshTimerWorkerCallback();
PopNetSetConnectivityConstraint();
PopNetSetResiliencyPhaseBias();
PopNetUpdateCsConsumptionFlags();
PopNetUpdateStandbyRequest();
PopNetWnfLowPowerEpochCallback();
PopNewProcessorCallback();
PopNewWakeInfo();
PopNewWakeSource();
PopNotifyCallbacksPreSleep();
PopNotifyConsoleUserPresent();
PopNotifyCsStateExited();
PopNotifyDevice();
PopNotifyLidStateChange();
PopNotifyPolicyDevice();
PopNotifySessionDisplayRequired();
PopNotifySessionUserPowerRequestAttributed();
PopNotifySessionUserPowerRequestCreated();
PopNotifySessionUserPowerRequestDeleted();
PopNotifySessionUserPowerRequestsPresent();
PopNotifyShutdownListener();
PopNotifyTelemetryOsState();
PopOkayToQueueNextWorkItem();
PopOpenKey();
PopOpenPowerKey();
PopOpenThermalLoggingKey();
PopOrphanCoolingExtension();
PopPausePowerRequestStats();
PopPdcCallback();
PopPdcCompleteResiliencyCallback();
PopPdcCsDeviceNotification();
PopPdcEngagePhases();
PopPdcIdleResiliencyCallback();
PopPdcInvocation();
PopPdcQueryActivationStats();
PopPdcRegister();
PopPdcUpdateDeviceCompliance();
PopPepArmIdleTimer();
PopPepAttemptAcitivityPromotion();
PopPepCancelActivities();
PopPepCancelActivityRange();
PopPepCompleteActivity();
PopPepCompleteComponentActiveActivity();
PopPepCompleteComponentIdleState();
PopPepCompleteComponentIdleStateChangeActivity();
PopPepCompleteDevicePowerOnActivity();
PopPepCompleteVoidActivity();
PopPepComponentGetLatencyIdleState();
PopPepComponentGetResidencyIdleState();
PopPepComponentGetWork();
PopPepComponentSetLatency();
PopPepComponentSetResidency();
PopPepComponentSetWakeHint();
PopPepCountReadyActivities();
PopPepDeviceDState();
PopPepDeviceStarted();
PopPepDeviceWaitWake();
PopPepGetComponentPreferedIdleState();
PopPepGetComponentVetoMasks();
PopPepGetDevicePlatformStateDependents();
PopPepGetDeviceVetoMasks();
PopPepGetMinimumComponentIdleState();
PopPepGetMinimumDevicePowerState();
PopPepGetReadyActivityType();
PopPepIdleTimeoutDpcRoutine();
PopPepIdleTimeoutRoutine();
PopPepInitializeDebuggerMasks();
PopPepInitializeVetoMasks();
PopPepInsertDevice();
PopPepLockActivityLink();
PopPepPlatformStateRegistered();
PopPepProcessEvent();
PopPepPromoteActivities();
PopPepRegisterComponentPerfStates();
PopPepRegisterDevice();
PopPepReleaseActivityLink();
PopPepRemoveDevice();
PopPepRequestWork();
PopPepResetDeviceAccountingLevel();
PopPepShouldActivityWait();
PopPepStartActivity();
PopPepStartComponentActivatingActivity();
PopPepStartComponentIdleStateChangeActivity();
PopPepStartDevicePowerOffActivity();
PopPepStartDevicePowerOnActivity();
PopPepStartDeviceUnregisterActivity();
PopPepStartVoidActivity();
PopPepSurprisePowerOn();
PopPepTriggerActivity();
PopPepTriggerComponentActivatingActivity();
PopPepTriggerComponentActiveActivity();
PopPepTriggerComponentIdleStateChangeActivity();
PopPepTriggerVoidActivity();
PopPepTryPowerDownComponent();
PopPepTryPowerDownDevice();
PopPepTryPowerUpComponent();
PopPepUnregisterDevice();
PopPepUpdateConstraints();
PopPepUpdateDripsDeviceVetoMask();
PopPepUpdateIdleState();
PopPepUpdateIdleStateRefCount();
PopPepWaitForDeviceRelease();
PopPepWork();
PopPerfBoostPowerRequest();
PopPluginAbandonDevice();
PopPluginAcpiNotificationStrict();
PopPluginComponentActive();
PopPluginComponentIdleState();
PopPluginDevicePower();
PopPluginInitializeSocSubsystemStaticInfo();
PopPluginNotifyActive();
PopPluginNotifyIdleState();
PopPluginQueryComponentPerfCapabilities();
PopPluginQueryComponentPerfSet();
PopPluginQueryComponentPerfSetName();
PopPluginQueryComponentPerfStates();
PopPluginQueryCurrentComponentPerfState();
PopPluginQuerySocSubsystemBlockingTime();
PopPluginQuerySocSubsystemCount();
PopPluginQuerySocSubsystemMetadata();
PopPluginRegisterComponentPerfStates();
PopPluginRegisterCrashdumpDevice();
PopPluginRegisterDevice();
PopPluginRequestComponentIdleConstraints();
PopPluginRequestComponentPerfState();
PopPluginRequestPowerControl();
PopPluginUnregisterDevice();
PopPoCoalescingCallback();
PopPolicyDeviceRemove();
PopPolicyDeviceTargetChange();
PopPolicySystemIdle();
PopPolicyTimeChange();
PopPolicyWorkerAction();
PopPolicyWorkerActionPromote();
PopPolicyWorkerNotify();
PopPolicyWorkerThread();
PopPowerAggregatorDisengageDirectedDrips();
PopPowerAggregatorExecuteActiveCallback();
PopPowerAggregatorExecuteDirectedDripsCallback();
PopPowerAggregatorExecuteModernStandbyCallback();
PopPowerAggregatorGetPromotionReason();
PopPowerAggregatorMapRequest();
PopPowerAggregatorSelectRequest();
PopPowerAggregatorValidateAction();
PopPowerAggregatorValidateActiveCallback();
PopPowerAggregatorValidateDirectedDripsCallback();
PopPowerAggregatorValidateModernStandbyCallback();
PopPowerAggregatorWorker();
PopPowerButtonBugcheckConfigure();
PopPowerButtonBugcheckWatchCallback();
PopPowerButtonSettingCallback();
PopPowerButtonTimerCallback();
PopPowerButtonWorkCallback();
PopPowerInformationInternal();
PopPowerRequestActionInfo();
PopPowerRequestAllocate();
PopPowerRequestCallbackWorker();
PopPowerRequestCleanUp();
PopPowerRequestCompare();
PopPowerRequestCreateInfo();
PopPowerRequestDeleteEntryById();
PopPowerRequestExecuteCallbacks();
PopPowerRequestFindEntryById();
PopPowerRequestFree();
PopPowerRequestInit();
PopPowerRequestIsExecutionRequiredCapable();
PopPowerRequestIsExecutionRequiredStatusHeld();
PopPowerRequestNotifyAudioStateChanged();
PopPowerRequestNotifyStandbyStateChanged();
PopPowerRequestOverrideInitialize();
PopPowerSettingPendingUpdateWatchdog();
PopPowerSourceChangeCallback();
PopPowerTransitionTimesInMs();
PopPpmHeteroPolicyCallback();
PopPreCriticalBatteryNotify();
PopPreSleepNotifyWorker();
PopPreallocateHibernateMemory();
PopPrepChildWake();
PopPrepareIoctl();
PopPrintEx();
PopPrintUserActivityPresence();
PopProcessDisplayRequiredChange();
PopProcessPowerRequestOverrideQueryResponse();
PopProcessSessionDisplayStateChange();
PopProcessWakeSourceWork();
PopProcessorIdleSelectNotification();
PopProcessorInformation();
PopProcessorNotifyLpiCoordinatedStatesNotification();
PopProcessorParkMaskNotification();
PopProcessorParkNotification();
PopProcessorQueryCoordinatedDependencyNotification();
PopProcessorQueryPlatformStateNotification();
PopProcessorSetPep();
PopPromoteActionFlag();
PopPropogateCoolingChange();
PopPublishAndPurgePowerRequestStats();
PopPublishAndResetPowerRequestsCollectionStats();
PopPublishPowerButtonState();
PopQpcTimeInMs();
PopQueryBootSessionStandbyActivationInfo();
PopQueryCurrentBroadcastProperties();
PopQueryInputSuppressionCount();
PopQueryPowerButtonBugcheckConfiguration();
PopQueryPowerButtonBugcheckEnabled();
PopQueryPowerSettingUlong();
PopQueueBatteryStatusTimeout();
PopQueueDirectedDripsWork();
PopQueuePowerIntent();
PopQueuePowerRequestCallback();
PopQueuePowerRequestCallbacks();
PopQueueQuerySetIrp();
PopQueueTargetDpc();
PopQueueWorkItem();
PopReadHiberbootGroupPolicy();
PopReadHiberbootPolicy();
PopReadProducerConsumerBuffer();
PopReadRegKeyValue();
PopReadShutdownPolicy();
PopReadSystemAwayModePolicy();
PopReadUlongPowerKey();
PopReadyChildWake();
PopReadyParentSleep();
PopRecalculateCBTriggerLevels();
PopRecordHibernateDiagnosticInfo();
PopRecordLidState();
PopRecordLongPowerButtonPressDetected();
PopRecordPepWorkorderBlackboxInformation();
PopRecordPhysicalPowerButton();
PopRecordPoBlackboxInformation();
PopRecordPoIrpBlackboxInformation();
PopRecordPowerWatchdogBlackboxInformation();
PopRecordSleepCheckpoint();
PopRecordSleepCheckpointSource();
PopRecorderInit();
PopRefreshEstimateAfterSpoilingDpc();
PopRegisterCoolingExtensionProtection();
PopRegisterEnergyEstimation();
PopReleaseAdaptiveLock();
PopReleaseAwaymodeLock();
PopReleasePolicyLock();
PopReleasePowerRequestPushLock();
PopReleaseRwLock();
PopReleaseTransitionLock();
PopReleaseUmpoPushLock();
PopReleaseWakeSourceSpinLock();
PopRemoteSessionActiveInput();
PopRemoveReasonRecordByReasonCode();
PopReportDirectedDripsCandidateChildren();
PopReportDirectedDripsCandidateDevice();
PopRequestCompletion();
PopRequestPowerIrp();
PopRequestRead();
PopRequestShutdownWait();
PopRequestWrite();
PopResetActionDefaults();
PopResetCBTriggers();
PopResetCurrentPolicies();
PopResetIdleTime();
PopResetRangeEnum();
PopResizeHiberFile();
PopResolveWatchdogParam();
PopRestoreHiberContext();
PopResumeApps();
PopResumeDeviceIdle();
PopResumeServices();
PopRtcWakeSettingCallback();
PopRunMaximumIrpWorkers();
PopRunNormalIrpWorkers();
PopRundownThermalRequests();
PopSIdleUpdateNotificationWorker();
PopSafeCopyUnicodeString();
PopSanityCheckHiberFile();
PopSaveHiberContext();
PopSaveHiberContextWrapper();
PopSaveHibernateEnabled();
PopScanIdleList();
PopScreenOff();
PopScreenOn();
PopSendSessionInfo();
PopSessionClosed();
PopSessionConnected();
PopSessionConnectionChange();
PopSessionConnectionInvocation();
PopSessionCreated();
PopSessionDisconnected();
PopSessionInputChange();
PopSessionWinlogonNotification();
PopSetAwayModeStatus();
PopSetBootPhaseRange();
PopSetCleanShutdownMarker();
PopSetConnectedStandbyMarker();
PopSetDevicesSystemState();
PopSetDisplayStatus();
PopSetDripsWatchdog();
PopSetExecutionRequiredTimer();
PopSetHiberFileMcb();
PopSetHiberFileSize();
PopSetHiberFileType();
PopSetMemoryOverwriteRequestAction();
PopSetModernStandbyTransitionReason();
PopSetNewPolicyValue();
PopSetNotificationWork();
PopSetPowerActionState();
PopSetPowerSettingValue();
PopSetPowerSettingValueAcDc();
PopSetRange();
PopSetSessionDisplayStatus();
PopSetSessionUserStatus();
PopSetShutdownMarker();
PopSetSleepMarker();
PopSetSpecialRequest();
PopSetSystemAwayMode();
PopSetSystemState();
PopSetUserShutdownMarkerWorker();
PopSetWatchdog();
PopSetWin32kDisplayTimeout();
PopSetWin32kInputTimeout();
PopSetupAirplaneModeNotification();
PopSetupAudioEventNotification();
PopSetupBluetoothChargingNotification();
PopSetupFullScrenVideoNotification();
PopSetupHighPerfPowerRequest();
PopSetupMixedRealitytNotification();
PopSetupSleepNotifies();
PopSetupSprActiveSessionChangeNotification();
PopSetupUserPresencePredictionNotification();
PopShutdownHandler();
PopShutdownSystem();
PopSleepDeviceList();
PopSleepPowerSettingCallback();
PopSleepStudyTaskClientTimerCallback();
PopSleepStudyTaskClientTimerWorker();
PopSpoilBatteryEstimate();
PopSpoilEstimatesOnPowerStateTransitionWorker();
PopSqmAddToStream();
PopSqmCreateDwordStreamEntry();
PopSqmFanEnumeration();
PopSqmThermalCriticalEvent();
PopSqmThermalCriticalShutdown();
PopSqmThermalHibernate();
PopSqmThermalUsermodeEvent();
PopSqmThermalZoneEnumeration();
PopStartMirroring();
PopStateIsSessionSpecific();
PopStatsCreatePowerRequest();
PopStatsDeletePowerRequest();
PopStatsInitPowerRequestLibrary();
PopStatsMarkPowerRequestActive();
PopStatsMarkPowerRequestInactive();
PopStatsNotifyAudioState();
PopStatsNotifyPowerRequestCsState();
PopStatsNotifyPowerRequestDamPhase();
PopStatsNotifyPowerRequestLpePhase();
PopSuspendApps();
PopSuspendResumeInvocation();
PopSuspendResumePdc();
PopSuspendServices();
PopSwitchForcedShutdownSettingCallback();
PopSxTransitionEventHandler();
PopSystemIdleEventHandler();
PopSystemIrpCompletion();
PopSystemRequiredCallback();
PopSystemRequiredSet();
PopThermalCoolingPowerSettingCallback();
PopThermalCsEntry();
PopThermalCsExit();
PopThermalHandlePreviousShutdown();
PopThermalInit();
PopThermalIrpComplete();
PopThermalPollingPowerSettingCallback();
PopThermalProcessUsermodeEvent();
PopThermalReadCounters();
PopThermalStandbyEndTracking();
PopThermalStandbyNotify();
PopThermalSxEntry();
PopThermalSxExit();
PopThermalTelemetryCallback();
PopThermalTelemetryWorker();
PopThermalTraceRundownEvents();
PopThermalUpdatePassiveTimeTracking();
PopThermalUpdateTelemetryClientCount();
PopThermalWorker();
PopThermalWriteShutdownToRegistry();
PopThermalZoneAdd();
PopThermalZoneDpc();
PopThermalZoneDpc$filt$2();
PopThermalZoneDpc$fin$0();
PopThermalZoneDpc$fin$1();
PopThermalZoneRemove();
PopThermalZoneTimerCallback();
PopThermalZoneUpdateCoolingPolicy();
PopTimeoutWakeTracking();
PopTimestampTargetProcessor();
PopTraceBackgroundActivityPolicyUpdate();
PopTraceBootError();
PopTraceCr3Mitigated();
PopTraceCr3Tripped();
PopTraceEsSetting();
PopTraceEsState();
PopTraceInputSuppressionActionUpdate();
PopTraceMonitorOnRequestUserInput();
PopTraceNetRefreshTimerArmed();
PopTracePowerReconfig();
PopTracePowerSettingChange();
PopTraceSleepCheckpointInitFailure();
PopTraceSmbiosChange();
PopTraceStandbyConnectivityUpdate();
PopTraceSystemIdleS0LowPowerDoze();
PopTraceSystemIdleS0LowPowerDozeTimerArmed();
PopTraceSystemIdleS0LowPowerDozeTimerCancelled();
PopTraceSystemIdleTimeReset();
PopTraceSystemIdleTimeoutInitialization();
PopTraceSystemIdleUpdate();
PopTraceThermalRequestPassiveHistogram();
PopTraceThermalStandbyComplete();
PopTraceThermalStandbyInitiated();
PopTraceThermalZonePassiveHistogram();
PopTraceZoneCr3Mitigated();
PopTraceZoneCr3Tripped();
PopTransitionCheckpoint();
PopTransitionSystemPowerStateEx();
PopTransitionTelemetryOsState();
PopTransitionToSleep();
PopTranslateDependencyArray();
PopTriggerDiagTraceAoAcCapability();
PopTriggerMonitorPowerEvent();
PopUmpoInitializeChannel();
PopUmpoInitializeMonitorChannel();
PopUmpoMessageCallback();
PopUmpoProcessMessage();
PopUmpoProcessMessages();
PopUmpoProcessPowerMessage();
PopUmpoSendFlushSleepStudyLoggerNotification();
PopUmpoSendLegacyEvent();
PopUmpoSendPowerMessage();
PopUmpoSendPowerRequestOverrideCleanup();
PopUmpoSendPowerRequestOverrideQuery();
PopUnicodeStringDeepCopy();
PopUnlinkWakeSources();
PopUnlockAfterSleepWorker();
PopUnregisterPowerSettingCallback();
PopUpdateAcDcState();
PopUpdateBackgroundCoolingStatus();
PopUpdateConsoleDisplayState();
PopUpdateDiskIdleTimeoutSetting();
PopUpdateExternalDisplayState();
PopUpdateNonAttributedCpuTimeReference();
PopUpdateOverThrottledCount();
PopUpdatePowerButtonHoldState();
PopUpdatePowerRequestProcessWakeCounter();
PopUpdateSingleProcessHeteroPolicies();
PopUpdateSingleThreadHeteroPolicies();
PopUpdateSmartUserPresencePredictions();
PopUpdateSmbiosData();
PopUpdateTimeouts();
PopUpdateWakeSource();
PopUpdateWakeSourceWorker();
PopUpdateWatchdogNoWorkersEvent();
PopUserIsAdmin();
PopUserPresencePredictionModeCallback();
PopUserPresentOverride();
PopUserPresentSet();
PopUserPresentSetWorker();
PopUserShutdownCancelled();
PopUserShutdownDelayDpcCallback();
PopUserShutdownDelayWorkerCallback();
PopValidateContextMembership();
PopValidateExistingHiberFile();
PopValidateHiberFileSize();
PopValidatePowerSettingData();
PopValidateRTCWake();
PopValidateServiceNotification();
PopVerifyPowerActionPolicy();
PopVerifySystemPowerPolicy();
PopVerifySystemPowerState();
PopVideoBrightnessSettingsCallback();
PopVideoPowerSettingCallback();
PopWakeDeviceList();
PopWakeInfoDereference();
PopWakeInfoReference();
PopWakeSourceGetDeviceProperty();
PopWakeSourceInit();
PopWakeSourceIsParent();
PopWakeSourceSize();
PopWakeSourceTimeoutDpc();
PopWakeSourceTimeoutWorker();
PopWatchdogDpc();
PopWatchdogWorker();
PopWdiTimerCallback();
PopWdiTimerWorkerThread();
PopWin32CalloutWatchdogCallbackLiveDump();
PopWin32kPowerSettingCallback();
PopWnfAirplaneModeCallback();
PopWnfAudioCallback();
PopWnfBluetoothChargingCallback();
PopWnfFullscreenVideoCallback();
PopWnfMixedRealityCallback();
PopWnfSprActiveSessionChangeCallback();
PopWnfUserAwayPredictionCallback();
PopWriteBsdPowerTransition();
PopWriteChecksumPages();
PopWriteHeaderPages();
PopWriteHiberImage();
PopWriteHiberPages();
PopWriteImageHeader();
PopWriteSecurePages();
PopWriteSecurePagesCallback();
PopZeroHiberFile();
PpCheckInDriverDatabase();
PpDevCfgCheckDeviceNeedsUpdate();
PpDevCfgInit();
PpDevCfgProcessDevice();
PpDevCfgProcessDeviceClass();
PpDevCfgProcessDeviceExtensions();
PpDevCfgProcessDeviceOperations();
PpDevCfgProcessDeviceReset();
PpDevCfgProcessDevices();
PpDevNodeInsertIntoTree();
PpDevNodeLockTree();
PpDevNodeRemoveFromTree();
PpDevNodeUnlockTree();
PpDeviceRegistration();
PpForEachDeviceInstanceDriver();
PpHotSwapGetDevnodeRemovalPolicy();
PpHotSwapInitRemovalPolicy();
PpHotSwapUpdateRemovalPolicy();
PpInitGetGroupOrderIndex();
PpInitSystem();
PpInitializeBootDDB();
PpIrpQueryCapabilities();
PpIrpQueryResourceRequirements();
PpLastGoodDeleteFilesCallback();
PpLastGoodDoBootProcessing();
PpMarkDeviceStackExtensionFlag();
PpPagePathAssign();
PpProcessClearProblem();
PpProfileBeginHardwareProfileTransition();
PpProfileCancelHardwareProfileTransition();
PpProfileCancelTransitioningDock();
PpProfileCommitTransitioningDock();
PpProfileIncludeInHardwareProfileTransition();
PpProfileInit();
PpProfileMarkAllTransitioningDocksEjected();
PpProfileQueryHardwareProfileChange();
PpReleaseBootDDB();
PpResetProblemDevices();
PpSystemHiveLimitCallback();
PpmAcquireLock();
PpmAllocWmiEvent();
PpmAllocatePerfCheck();
PpmAllocateQueryTable();
PpmApplyIdlePolicy();
PpmApplyIdlePolicyChanges();
PpmApplyProfile();
PpmBeginHighPerfRequest();
PpmBeginProfileAccumulation();
PpmCancelExitLatencyTrace();
PpmCapturePerformanceDistribution();
PpmCapturePerformanceDistributionCallback();
PpmCheckAcquireProcessorPerformance();
PpmCheckAdjustNextPerfCheck();
PpmCheckApplyParkConstraints();
PpmCheckApplyPerfConstraints();
PpmCheckApplyResetNotification();
PpmCheckArmPeriod();
PpmCheckComputeEnergy();
PpmCheckComputeHeteroResponse();
PpmCheckCoordinatedStateInitiator();
PpmCheckCustomRun();
PpmCheckIdleVeto();
PpmCheckInitProcessors();
PpmCheckMaintainArtificialDomain();
PpmCheckMakeupSkippedChecks();
PpmCheckPausePpmEngineForSx();
PpmCheckPeriodicStart();
PpmCheckPreConditionsForDeepSleep();
PpmCheckProcessorInit();
PpmCheckReInit();
PpmCheckRecordAllUtility();
PpmCheckReportComplete();
PpmCheckReset();
PpmCheckResumePpmEngineFromSx();
PpmCheckResumeStatisticsCollection();
PpmCheckRun();
PpmCheckSnapAllDeliveredPerformance();
PpmCheckSnapAllUtility();
PpmCheckStart();
PpmCheckUpdateDeliveredPerformanceIfTracingEnabled();
PpmClearExitLatencySamplingPercentage();
PpmClearSimulatedIdle();
PpmClearSimulatedLoad();
PpmCompareAndApplyPolicySettings();
PpmComputeIdleDurationHint();
PpmContinueActiveTimeAccumulation();
PpmConvertTime();
PpmConvertTimeTo();
PpmDeepestHardwareIdleState();
PpmDisableHighPerfRequestDeferredExpiration();
PpmDisableProfile();
PpmEnableCoordinatedIdleStates();
PpmEnableProfile();
PpmEnableWmiInterface();
PpmEndHighPerfRequest();
PpmEndProfileAccumulation();
PpmEstimateIdleDuration();
PpmEventArbitratorPerfStateChange();
PpmEventAutonomousModeChange();
PpmEventBiosCapChange();
PpmEventCoordinatedIdleTransition();
PpmEventCoreParkingStateChange();
PpmEventDomainPerfStateChange();
PpmEventEnterPlatformIdleState();
PpmEventHeteroPolicy();
PpmEventIdleDurationExpiration();
PpmEventIdleStateChange();
PpmEventIsDeliveredPerfChangeEnabled();
PpmEventLPICoreParking();
PpmEventParkNodeCapChange();
PpmEventParkNodeClassRecordedStats();
PpmEventParkNodeParkHintChanged();
PpmEventParkNodePreference();
PpmEventPlatformVetoRequest();
PpmEventPlatformVetoRundown();
PpmEventProcessorPerfStateChange();
PpmEventProcessorVetoRequest();
PpmEventProcessorVetoRundown();
PpmEventQosSupport();
PpmEventStaticPolicyRundown();
PpmEventThermalCapChange();
PpmEventTraceAccountingBucketIntervalsRundown();
PpmEventTraceControlCallback();
PpmEventTraceCoordinatedIdleStates();
PpmEventTraceCoreParkingSelection();
PpmEventTraceDripsAccountingSnapshot();
PpmEventTraceExpectedUtility();
PpmEventTraceFailedPerfCheckStart();
PpmEventTraceHeteroDistributeUtility();
PpmEventTraceHeteroResponse();
PpmEventTraceLPIState();
PpmEventTraceMakeupPerfCheck();
PpmEventTraceParkNodeRundown();
PpmEventTracePlatformIdleAccounting();
PpmEventTracePpmProfileStatusRundown();
PpmEventTracePreVetoAccounting();
PpmEventTraceProcessorIdle();
PpmEventTraceProcessorIdleAccounting();
PpmEventTraceProcessorPerformance();
PpmEventTraceProfileChange();
PpmEventTraceProfileEnable();
PpmEventTraceProfileSetting();
PpmEventTraceProfiles();
PpmEventVetoReasonRundown();
PpmEventVpQosChange();
PpmExitCoordinatedIdleState();
PpmFireWmiEvent();
PpmGetDeepSleepPlatformStateIndex();
PpmGetExitSamplingCountdown();
PpmGetIdleConstrainedMask();
PpmGetIdleGenerationCounter();
PpmGetPerfPolicyClass();
PpmGetPlatformSelectionVetoCounts();
PpmGetPolicyAction();
PpmGetThroughputInfoCallback();
PpmHeteroComputeBias();
PpmHeteroDetectHgsCores();
PpmHeteroDispatchHgsInterrupt();
PpmHeteroDistributeUtility();
PpmHeteroGetHgsEnablementStatus();
PpmHeteroHgsBackupInit();
PpmHeteroHgsBackupProcessorInit();
PpmHeteroHgsProcessorInit();
PpmHeteroHgsUpdateDpcRoutine();
PpmHeteroHgsUpdateWorker();
PpmHeteroInitializeHgsSupport();
PpmHeteroNormalizedUtilityToUtility();
PpmHeteroRestrictToFavoredClass();
PpmHeteroUpdateHgsConfiguration();
PpmHeteroUtilityGreaterThanOrEqualThreshold();
PpmHeteroUtilityToNormalizedUtility();
PpmHighPerfRequestExpiration();
PpmHvSetVirtualProcessorQos();
PpmHvUseNativeAlgorithms();
PpmIdleCaptureCsVetoAccounting();
PpmIdleCheckCoordinatedDependencies();
PpmIdleCheckCoordinatedDependency();
PpmIdleCheckCoordinatedStateEligibility();
PpmIdleCheckProcessorStateEligibility();
PpmIdleCompleteExitLatencyTrace();
PpmIdleCsVetoAccountingDeviceUpdate();
PpmIdleCsVetoAccountingResiliencyUpdate();
PpmIdleCsVetoAccountingUpdateBlock();
PpmIdleDefaultComplete();
PpmIdleDefaultExecute();
PpmIdleDefaultInitiateWake();
PpmIdleDefaultIsHalted();
PpmIdleEnableIdleDurationExpirationTimeout();
PpmIdleEvaluateConstraints();
PpmIdleExecuteTransition();
PpmIdleGuestComplete();
PpmIdleGuestExecute();
PpmIdleGuestPreExecute();
PpmIdleGuestPreselect();
PpmIdleGuestTest();
PpmIdleInitializeConcurrency();
PpmIdleInstallConcurrency();
PpmIdleInstallDefaultStates();
PpmIdleLockProcessor();
PpmIdlePrepare();
PpmIdlePrevetoWatchdog();
PpmIdleRecheckCoordinatedIdleMask();
PpmIdleRegisterDefaultStates();
PpmIdleRemoveConcurrency();
PpmIdleRemoveVetoBias();
PpmIdleRollbackCoordinatedSelection();
PpmIdleSelectCoordinatedProcessorDependency();
PpmIdleSelectStates();
PpmIdleSetSynchronizationState();
PpmIdleSnapConcurrency();
PpmIdleSnapConcurrencyIdleTime();
PpmIdleStartCsVetoAccounting();
PpmIdleTransitionStall();
PpmIdleUpdateConcurrency();
PpmIdleUpdateCoordinatedDependencies();
PpmIdleUpdateHvStates();
PpmIdleUpdatePlatformDependencies();
PpmIdleUpdateSelectionStatistics();
PpmIdleUpdateSynchronizationState();
PpmIdleUsingStateSelection();
PpmIdleWaitForDependentTransitions();
PpmInfoAdjustSetting();
PpmInfoConfigComparer();
PpmInfoRegisterCallbacks();
PpmInfoReleaseLocks();
PpmInfoTraceProfileSettings();
PpmInfoWriteData();
PpmInitCoreParkingPolicy();
PpmInitHeteroEngine();
PpmInitHeteroPolicy();
PpmInitIdlePolicy();
PpmInitIllegalThrottleLogging();
PpmInitPolicyConfiguration();
PpmInstallCoordinatedIdleStates();
PpmInstallFeedbackCounters();
PpmInstallNewIdleDomains();
PpmInstallNewIdleStates();
PpmInstallPlatformIdleStates();
PpmInterlockedUpdateTimeNoFence();
PpmInternalPlatformIdleVeto();
PpmInternalProcessorIdleVeto();
PpmMediaBufferingWorker();
PpmParkApplyForcedMask();
PpmParkApplyPolicy();
PpmParkCalculateCoreParkingMask();
PpmParkCalculateUnparkCount();
PpmParkChooseCoresToUnpark();
PpmParkClearForcedMask();
PpmParkComputeDiff();
PpmParkComputeSnapStatistics();
PpmParkDistributeAllUtility();
PpmParkDistributeUtility();
PpmParkMaximumCoresParked();
PpmParkParkingAvailable();
PpmParkRecordNodeStatistics();
PpmParkRegisterParking();
PpmParkReportMask();
PpmParkReportParkedCore();
PpmParkReportParkedCores();
PpmParkReportUnparkedCore();
PpmParkReportUnparkedCores();
PpmParkSetLpiCap();
PpmParkSnapNodeIdleTime();
PpmParkSnapNodeStatistics();
PpmParkSteerInterrupts();
PpmParkUnblockIdle();
PpmParkUpdateConcurrencyTracking();
PpmPdcNotifyMediaBufferingUpdate();
PpmPerfAccumulateBrandedFrequency();
PpmPerfAction();
PpmPerfApplyCapsAndFloors();
PpmPerfApplyDomainState();
PpmPerfApplyDomainStates();
PpmPerfApplyLatencyHint();
PpmPerfApplyLatencyHints();
PpmPerfApplyProcessorState();
PpmPerfApplyProcessorStates();
PpmPerfArbitratorApplyProcessorState();
PpmPerfCalculateQosClassPolicies();
PpmPerfCheckForIllegalProcessorThrottle();
PpmPerfClearBootOverrides();
PpmPerfClearResponsivenessHints();
PpmPerfCommitPerformance();
PpmPerfComputePerfReductionTolerance();
PpmPerfControlActionCallback();
PpmPerfControlExecuteAction();
PpmPerfFeedbackCounterRead();
PpmPerfFeedbackCounterUpdate();
PpmPerfForceDomainStates();
PpmPerfGetBrandedFrequency();
PpmPerfGetCurrentFrequency();
PpmPerfGetCurrentState();
PpmPerfInitialize();
PpmPerfLatencySensitivityHintWorker();
PpmPerfMinimumPerfReached();
PpmPerfProcCapFloorSettingCallback();
PpmPerfQueueAction();
PpmPerfReApplyStates();
PpmPerfReadFeedback();
PpmPerfRecordUtility();
PpmPerfRegisterHvCap();
PpmPerfRegisterHvPerfStateCounters();
PpmPerfRegisterHvStates();
PpmPerfRegisterNativePerfStates();
PpmPerfResetHistory();
PpmPerfResizeHistory();
PpmPerfResizeHistoryAll();
PpmPerfSelectDomainStates();
PpmPerfSelectProcessorState();
PpmPerfSelectProcessorStates();
PpmPerfSetAllDomainsToUpdate();
PpmPerfSnapDeliveredPerformance();
PpmPerfSnapUtility();
PpmPerfTelemetryCallback();
PpmPerfTelemetryWorker();
PpmPerfUpdateDomainPolicy();
PpmPerfUpdateQosDisableReasons();
PpmPostProcessMediaBuffering();
PpmProcessSettingsFromQueryTable();
PpmProfileAcDcUpdate();
PpmQueryDripsResidency();
PpmQueryPlatformStateResidency();
PpmQueryTime();
PpmReapplyIdlePolicy();
PpmReapplyPerfPolicy();
PpmRegisterPerfCap();
PpmRegisterPerfStates();
PpmRegisterProfiles();
PpmRegisterSpmSettings();
PpmRegisterVetoList();
PpmReinitializeHeteroEngine();
PpmReleaseLock();
PpmRemoveIdleStates();
PpmResetDripsAccountingSnapshot();
PpmResetIdlePolicy();
PpmResetInterruptRate();
PpmResetPerfEngineForProcessor();
PpmResetPerfTimes();
PpmResetPerformanceAccumulation();
PpmResetPlatformIdleAccounting();
PpmResetProcessorIdleAccounting();
PpmResetProfileSettings();
PpmScaleIdleStateValues();
PpmSetExitLatencySamplingPercentage();
PpmSetPlatformIdleDurationHint();
PpmSetProfilePolicySetting();
PpmSetSimulatedIdle();
PpmSetSimulatedLoad();
PpmSnapDripsAccountingSnapshot();
PpmSnapPerformanceAccumulation();
PpmStartIllegalProcessorThrottleLogging();
PpmStopIllegalProcessorThrottleLogging();
PpmTestAndLockProcessor();
PpmTraceExitLatency();
PpmTracePerfIdleRundown();
PpmTranslateIdleAccounting();
PpmTranslatePlatformIdleAccounting();
PpmTryAcquireLock();
PpmUnlockProcessors();
PpmUpdateIdleContext();
PpmUpdateIdleDomains();
PpmUpdateIdleStates();
PpmUpdateIdleStatesInplace();
PpmUpdateIdleVeto();
PpmUpdateNoopFunction();
PpmUpdatePerfStates();
PpmUpdatePerformanceFeedback();
PpmUpdatePlatformIdleAccounting();
PpmUpdatePlatformIdleVeto();
PpmUpdateProcessorIdleAccounting();
PpmUpdateProcessorIdleVeto();
PpmUpdateProcessorPolicy();
PpmUpdateProcessorPolicyCallback();
PpmUpdateTimeAccumulation();
PpmUtilityComparer();
PpmWmiDispatch();
PpmWmiFireIdleAccountingEvent();
PpmWmiGetAllData();
PpmWmiIdleAccountingProcedure();
PpmWmiIdleAccountingWork();
PpmWmiRegisterInfo();
PpvUtilCallAddDevice();
PpvUtilFailDriver();
PpvUtilIsHardwareBeingVerified();
PpvUtilIsPdo();
PpvUtilTestStartedPdoStack();
ProbeForRead();
ProbeForWrite();
ProducerConsumerBufferComplete();
ProducerConsumerCopyFromContextBuffer();
ProducerConsumerCopyToContextBuffer();
ProducerGetBuffer();
PromoteNode();
PropertyEval();
PropertyEval$filt$0();
PsAcquireProcessExitSynchronization();
PsAcquireSiloHardReference();
PsAddProcessEnergyValues();
PsAllocSiloContextSlot();
PsAssignImpersonationToken();
PsAssignProcessToJobObject();
PsAttachSiloToCurrentThread();
PsBoostThreadIo();
PsBoostThreadIoEx();
PsBoostThreadIoQoS();
PsBootPhaseComplete();
PsCallEnclave();
PsCallImageNotifyRoutines();
PsCaptureExceptionPort();
PsCaptureUserProcessParameters();
PsChangeQuantumTable();
PsChargePoolQuota();
PsChargeProcessNonPagedPoolQuota();
PsChargeProcessPagedPoolQuota();
PsChargeProcessPoolQuota();
PsChargeProcessQuota();
PsChargeProcessWakeCounter();
PsChargeSharedPoolQuota();
PsConvertToGuiThread();
PsCreateMinimalProcess();
PsCreateSiloContext();
PsCreateSystemThread();
PsCreateSystemThreadEx();
PsCreateVsmEnclave();
PsDeleteVsmEnclave();
PsDereferenceImpersonationToken();
PsDereferenceKernelStack();
PsDereferencePartition();
PsDereferencePrimaryToken();
PsDereferenceSiloContext();
PsDereferenceVsmEnclave();
PsDetachSiloFromCurrentThread();
PsDisableImpersonation();
PsDispatchIumService();
PsEncodeThreadWorkOnBehalfTicket();
PsEnterPriorityRegion();
PsEnumProcessThreads();
PsEnumProcesses();
PsEstablishWin32Callouts();
PsFreeEnclaveModuleInfo();
PsFreeSiloContextSlot();
PsFreezeProcess();
PsGetAllocatedFullProcessImageName();
PsGetAllocatedFullProcessImageNameEx();
PsGetBaseIoPriorityThread();
PsGetBaseTrapFrame();
PsGetContextThread();
PsGetCurrentProcess();
PsGetCurrentProcessId();
PsGetCurrentProcessSessionId();
PsGetCurrentProcessWin32Process();
PsGetCurrentProcessWow64Process();
PsGetCurrentServerSilo();
PsGetCurrentServerSiloGlobals();
PsGetCurrentServerSiloName();
PsGetCurrentSilo();
PsGetCurrentThread();
PsGetCurrentThreadId();
PsGetCurrentThreadPreviousMode();
PsGetCurrentThreadProcess();
PsGetCurrentThreadProcessId();
PsGetCurrentThreadStackBase();
PsGetCurrentThreadStackLimit();
PsGetCurrentThreadTeb();
PsGetCurrentThreadWin32Thread();
PsGetCurrentThreadWin32ThreadAndEnterCriticalRegion();
PsGetDefaultWsMaximum();
PsGetEffectiveContainerId();
PsGetEffectiveServerSilo();
PsGetHostSilo();
PsGetIoPriorityThread();
PsGetJobEffectiveFreezeCount();
PsGetJobLastThrottledIoTime();
PsGetJobLock();
PsGetJobProperty();
PsGetJobServerSilo();
PsGetJobSessionId();
PsGetJobSilo();
PsGetJobUIRestrictionsClass();
PsGetNextPartition();
PsGetNextPartitionUnsafe();
PsGetNextProcess();
PsGetNextProcessEx();
PsGetNextProcessThread();
PsGetPagePriorityThread();
PsGetParentSilo();
PsGetPermanentSiloContext();
PsGetPreviousProcess();
PsGetProcessCommonJob();
PsGetProcessCreateTimeQuadPart();
PsGetProcessDebugPort();
PsGetProcessDeepFreezeStats();
PsGetProcessDxgProcess();
PsGetProcessEnclaveModuleInfo();
PsGetProcessExitProcessCalled();
PsGetProcessExitStatus();
PsGetProcessExitTime();
PsGetProcessId();
PsGetProcessImageFileName();
PsGetProcessInheritedFromUniqueProcessId();
PsGetProcessJob();
PsGetProcessPeb();
PsGetProcessPriorityClass();
PsGetProcessProtection();
PsGetProcessSectionBaseAddress();
PsGetProcessSecurityPort();
PsGetProcessSequenceNumber();
PsGetProcessServerSilo();
PsGetProcessSessionId();
PsGetProcessSessionIdEx();
PsGetProcessSignatureLevel();
PsGetProcessSilo();
PsGetProcessStartKey();
PsGetProcessWin32Process();
PsGetProcessWin32WindowStation();
PsGetProcessWow64Process();
PsGetServerSiloActiveConsoleId();
PsGetServerSiloGlobals();
PsGetServerSiloServiceSessionId();
PsGetServerSiloState();
PsGetSiloBySessionId();
PsGetSiloContainerId();
PsGetSiloContext();
PsGetSiloIdentifier();
PsGetSiloMonitorContextSlot();
PsGetThreadCreateTime();
PsGetThreadExitStatus();
PsGetThreadFreezeCount();
PsGetThreadHardErrorsAreDisabled();
PsGetThreadId();
PsGetThreadProcess();
PsGetThreadProcessId();
PsGetThreadProperty();
PsGetThreadServerSilo();
PsGetThreadSessionId();
PsGetThreadTeb();
PsGetThreadWin32Thread();
PsGetVersion();
PsGetWin32KFilterSet();
PsGetWorkOnBehalfThread();
PsImpersonateClient();
PsImpersonateContainerOfThread();
PsInitializeQuotaSystem();
PsInitializeVsmEnclave();
PsInsertPermanentSiloContext();
PsInsertPermanentSiloContextEx();
PsInsertSiloContext();
PsInsertVirtualizedTimer();
PsInvokeWin32Callout();
PsIoRateControlOverQuotaNotify();
PsIoRateControlReference();
PsIsCurrentThreadInServerSilo();
PsIsCurrentThreadPrefetching();
PsIsDiskCountersEnabled();
PsIsGuiThread();
PsIsHostSilo();
PsIsJobParentImmutable();
PsIsProcessAppContainer();
PsIsProcessBeingDebugged();
PsIsProcessCommitRelinquished();
PsIsProcessInAppSilo();
PsIsProcessInSilo();
PsIsProcessLoggingEnabled();
PsIsProcessPrimaryTokenFrozen();
PsIsProtectedProcess();
PsIsProtectedProcessLight();
PsIsServerSilo();
PsIsServiceSession();
PsIsSystemProcess();
PsIsSystemThread();
PsIsSystemWideMitigationOptionSet();
PsIsThreadImpersonating();
PsIsThreadInSilo();
PsIsThreadTerminating();
PsIsVsmEnclaveTerminated();
PsIsWin32KFilterAuditEnabled();
PsIsWin32KFilterAuditEnabledForProcess();
PsIsWin32KFilterEnabled();
PsIsWin32KFilterEnabledForProcess();
PsIumEnableOnDemandDebugWithResponse();
PsIumGetOnDemandDebugChallenge();
PsIumResumeAfterHibernate();
PsLeavePriorityRegion();
PsLocateSystemDlls();
PsLookupProcessByProcessId();
PsLookupProcessThreadByCid();
PsLookupThreadByThreadId();
PsMakeSiloContextPermanent();
PsMapSystemDlls();
PsOpenProcess();
PsOpenThread();
PsPicoSystemCallDispatch();
PsPicoWalkUserStack();
PsQueryActivityModerationUserSettings();
PsQueryCpuQuotaInformation();
PsQueryCpuQuotaInformation$filt$0();
PsQueryCpuQuotaInformation$filt$1();
PsQueryCurrentApiSetSchema();
PsQueryFullProcessImageName();
PsQueryJobMemoryUsageByProcess();
PsQueryProcessAttributes();
PsQueryProcessAttributesByToken();
PsQueryProcessCommandLine();
PsQueryProcessEnergyValues();
PsQueryProcessExceptionFlags();
PsQueryProcessQuotaCounters();
PsQueryProcessSignatureMitigationPolicy();
PsQueryRuntimeProcess();
PsQuerySectionSignatureInformation();
PsQueryStatisticsProcess();
PsQuerySystemDllInfo();
PsQueryThreadStartAddress();
PsQueryThreadTerminationPort();
PsQueryTotalCycleTimeProcess();
PsQuitNextPartition();
PsQuitNextProcess();
PsQuitNextProcessThread();
PsReferenceEffectiveToken();
PsReferenceImpersonationToken();
PsReferenceImpersonationTokenEx();
PsReferenceKernelStack();
PsReferencePartitionByHandle();
PsReferencePartitionSafe();
PsReferencePartitionSystemProcess();
PsReferencePrimaryToken();
PsReferenceProcessFilePointer();
PsReferenceSiloContext();
PsReferenceVsmEnclave();
PsRegisterPicoProvider();
PsRegisterSiloMonitor();
PsReleaseProcessExitSynchronization();
PsReleaseProcessWakeCounter();
PsReleaseSiloHardReference();
PsRemoveCreateThreadNotifyRoutine();
PsRemoveLoadImageNotifyRoutine();
PsRemoveSiloContext();
PsRemoveVirtualizedTimer();
PsReplaceSiloContext();
PsReportProcessMemoryLimitViolation();
PsRestoreImpersonation();
PsResumeProcess();
PsResumeThread();
PsReturnPoolQuota();
PsReturnProcessNonPagedPoolQuota();
PsReturnProcessPageFileQuota();
PsReturnProcessPagedPoolQuota();
PsReturnProcessQuota();
PsReturnSharedPoolQuota();
PsRevertThreadToSelf();
PsRevertToSelf();
PsRevertToUserPagePriorityThread();
PsRootSiloInformation();
PsRundownVsmEnclave();
PsSetContextThread();
PsSetCpuQuotaInformation();
PsSetCpuQuotaInformation$filt$0();
PsSetCreateProcessNotifyRoutine();
PsSetCreateProcessNotifyRoutineEx();
PsSetCreateProcessNotifyRoutineEx2();
PsSetCreateThreadNotifyRoutine();
PsSetCreateThreadNotifyRoutineEx();
PsSetCurrentThreadPrefetching();
PsSetExeModerationState();
PsSetIoPriorityThread();
PsSetJobProperty();
PsSetLegoNotifyRoutine();
PsSetLoadImageNotifyRoutine();
PsSetLoadImageNotifyRoutineEx();
PsSetPagePriorityThread();
PsSetProcessDxgProcess();
PsSetProcessFaultInformation();
PsSetProcessHandleTracingInformation();
PsSetProcessPriorityByClass();
PsSetProcessPriorityClass();
PsSetProcessSecurityPort();
PsSetProcessTelemetryAppState();
PsSetProcessWin32Process();
PsSetProcessWindowStation();
PsSetSystemPagePriorityThread();
PsSetThreadHardErrorsAreDisabled();
PsSetThreadProperty();
PsSetThreadWin32Thread();
PsShutdownSystem();
PsStartSiloMonitor();
PsSuspendProcess();
PsSuspendThread();
PsSuspendThread$filt$0();
PsSwapImpersonationToken();
PsSwapProcessWorkingSet();
PsSynchronizeWithThreadInsertion();
PsTerminateMinimalProcess();
PsTerminateProcess();
PsTerminateServerSilo();
PsTerminateSystemThread();
PsTerminateVsmEnclave();
PsTestProtectedProcessIncompatibility();
PsThawProcess();
PsTransferProcessQuotaToSharedQuota();
PsUnregisterSiloMonitor();
PsUpdateActiveProcessAffinity();
PsUpdateComponentPower();
PsUpdateDiskCounters();
PsWaitForAllProcesses();
PsWatchWorkingSet();
PsWow64GetProcessMachine();
PsWow64GetProcessNtdllType();
PsWow64GetSupportedArchitectures();
PsWow64GetSupportedArchitectures$filt$0();
PsWow64IsMachineSupported();
PsWrapApcWow64Thread();
PspAddAccountingValues();
PspAddPartitionToGlobalList();
PspAddProcessToWorkingSetChangeList();
PspAddSchedulingGroupToJobChain();
PspAdjustKeepAliveCountProcess();
PspAllocStorage();
PspAllocateAndQueryNotificationChannel();
PspAllocateAndQueryProcessNotificationChannel();
PspAllocatePartition();
PspAllocateProcess();
PspAllocateRateControl();
PspAllocateThread();
PspApiSetCopyToSystemSpace();
PspApplyIFEOPerfOptions();
PspApplyJobChainLimitsToProcess();
PspApplyJobLimitsToProcess();
PspApplyMitigationOptions();
PspApplyTimerDelayProcess();
PspApplyWin32kFilterOptions();
PspApplyWorkingSetLimits();
PspApplyWorkingSetLimitsToProcess();
PspAssignPrimaryToken();
PspAssignProcessQuotaBlock();
PspAssignProcessToJob();
PspAssignProcessToJobList();
PspAssignSiloSystemRootPath();
PspAssociateCompletionPortCallback();
PspAttachSession();
PspAttachThreadToUmsCompletionList();
PspBindProcessSessionToJob();
PspBoostJobIoPriorityCallback();
PspBuildCreateProcessContext();
PspCallJobHierarchyCallbacks();
PspCallProcessNotifyRoutines();
PspCallThreadNotifyRoutines();
PspCaptureAndValidateUnicodeString();
PspCaptureCreateInfo();
PspCaptureProcessParameters();
PspCaptureUserProcessParameters();
PspCatchCriticalBreak();
PspChangeJobMemoryUsageByProcess();
PspChangeProcessExecutionState();
PspChargeJobWakeCounter();
PspChargeProcessWakeCounter();
PspChargeQuota();
PspCheckConditionalWakeCharge();
PspCheckForInvalidAccessByProtection();
PspCheckJobAccessState();
PspClearProcessThreadCidRefs();
PspCloseActivityReference();
PspClosePartitionHandle();
PspCombineSecurityDomains();
PspCompleteHardDereferenceSiloDeferred();
PspCompleteServerSiloShutdown();
PspCompleteServerSiloShutdownDeferred();
PspComputeQuantum();
PspComputeQuantumAndPriority();
PspComputeReportWakeFilter();
PspControlHwTracingThread();
PspConvertJobNotificationLimitFromV1();
PspConvertJobNotificationLimitFromV2();
PspConvertJobToMixed();
PspConvertSiloToServerSilo();
PspCopyAndFixupParameters();
PspCopyUnicodeString();
PspCreateActivityReference();
PspCreateObjectHandle();
PspCreatePartitionSystemProcess();
PspCreatePicoProcess();
PspCreatePicoThread();
PspCreateProcess();
PspCreateProcess$filt$0();
PspCreateSecureThread();
PspCreateSilo();
PspCreateThread();
PspCreateUserContext();
PspCreateUserProcessEcp();
PspDecodeMitigationExecuteOptions();
PspDeferredWorkerRoutine();
PspDeleteCreateProcessContext();
PspDeleteExternalServerSiloState();
PspDeleteKernelStack();
PspDeletePartition();
PspDeleteServerSiloGlobals();
PspDeleteSilo();
PspDeleteSiloContext();
PspDeleteThreadSecurity();
PspDeleteUserStack();
PspDereferenceQuotaBlock();
PspDetachThreadFromUmsCompletionList();
PspDetectComplusILImage();
PspDfssConfigurationChangeHandler();
PspDisablePrimaryTokenExchange();
PspDisassociateUmsThreadFromPrimary();
PspDispatchWakeNotification();
PspDoesJobHierarchyPermitUILimits();
PspDoesJobHierarchyPermitUILimitsCallback();
PspEmptyPropertySet();
PspEnableProcessTimerVirtualization();
PspEnableProcessWakeCounters();
PspEnableTimerVirtualization();
PspEnableWakeCounters();
PspEnforceLimits();
PspEnforceLimitsJobPostCallback();
PspEnforceLimitsJobPreCallback();
PspEnforceLimitsProcessCallback();
PspEnumJobsAndProcessesInJobHierarchy();
PspEnumerateCallback();
PspEstablishDfssHierarchy();
PspEstablishJobHierarchy();
PspEstimateNewProcessServerSilo();
PspEvaluateAndNotifyEmptyJob();
PspExecuteJobFreezeThawCallback();
PspExitProcess();
PspExitThread();
PspExpandLimit();
PspExpandQuota();
PspFindPropertySetEntry();
PspFindThreadForTeb();
PspFindVsmEnclaveThread();
PspFoldProcessAccountingIntoJob();
PspFreeCurrentThreadUserShadowStack();
PspFreeRateControl();
PspFreeStorage();
PspFreezeJobTree();
PspFreezeProcessWorker();
PspGetBaseTrapFrame();
PspGetContext();
PspGetContextThreadInternal();
PspGetEffectiveNoWakeCharge();
PspGetFreezeState();
PspGetHostSiloStorage();
PspGetJobAssignmentDisposition();
PspGetJobLockHierarchyForAssignment();
PspGetJobLockHierarchyForDeletion();
PspGetJobMemoryUsageNotificationViolations();
PspGetJobProperty();
PspGetJobSilo();
PspGetMemoryPartitionContext();
PspGetMemoryPartitionFromJobList();
PspGetMemoryPartitionImplicit();
PspGetNextChildJob();
PspGetNextJob();
PspGetNextJobProcess();
PspGetNextMonitor();
PspGetNextSilo();
PspGetNoChildProcessRestrictedPolicy();
PspGetPicoProcessContext();
PspGetPicoThreadContext();
PspGetPreviousProcessThread();
PspGetProcessInJobHierarchyCallback();
PspGetProcessProtectionRequirementsFromImage();
PspGetProperty();
PspGetRateControlSize();
PspGetServerSiloStatePointer();
PspGetSetContextInternal();
PspGetSetContextSpecialApc();
PspGetStandardHandleList();
PspGetStorageArray();
PspGetStorageArrayIfPossible();
PspGetSystemDllSecureHandle();
PspGetWakeCountProcess();
PspHandleTableWalker();
PspHardDereferenceSiloWorker();
PspHardenMitigationOptions();
PspHashKeyValue();
PspIdentityBasedJobBreakaway();
PspImplicitAssignProcessToJob();
PspIncrementJobChainProcessCounts();
PspInheritMitigationAuditOptions();
PspInheritMitigationOptions();
PspInheritQuota();
PspInitPhase0();
PspInitPhase1();
PspInitPhase2();
PspInitPhase3();
PspInitializeBackgroundActivityModeratorCallouts();
PspInitializeDesktopActivityModeratorCallouts();
PspInitializeFullProcessImageName();
PspInitializeHwTraceCallouts();
PspInitializeJobStructures();
PspInitializeMMCSSCallouts();
PspInitializeNetRateControl();
PspInitializeOctagonExtensionHost();
PspInitializeProcessSecurity();
PspInitializeProtectedProcessParameters();
PspInitializeQuotaBlock();
PspInitializeSecExtensionHost();
PspInitializeServerSiloDeferred();
PspInitializeSiloStructures();
PspInitializeSystemDlls();
PspInitializeSystemPartitionPhase0();
PspInitializeThunkContext();
PspInsertExpansionEntry();
PspInsertProcess();
PspInsertProperty();
PspInsertThread();
PspInsertThread$filt$0();
PspInsertThread$filt$1();
PspInvokeCreateCallback();
PspInvokeTerminateCallback();
PspIoMiniPacketCallbackRoutine();
PspIoRateControlInfoIsAnySet();
PspIoRateEntryActivate();
PspIoRateEntryDeactivate();
PspIoRateEntryInitialize();
PspIoRateEntryIoControlReference();
PspIoRateEntryVolumeCompare();
PspIoRateEntryVolumeDelete();
PspIsContextAdmin();
PspIsDfssEnabled();
PspIsJobMovable();
PspIsParentProcess();
PspIsProcessInJob();
PspIsProcessReadyForRemoteThread();
PspIsSetJobIoAttribution();
PspIsSetJobIoAttributionJobPreCallback();
PspIsSiloContext();
PspIsSiloInServerSilo();
PspIsSiloInSilo();
PspIsValidJobSessionId();
PspIumAllocatePartitionState();
PspIumAllocatePhysicalPages();
PspIumFreePartitionPages();
PspIumFreePartitionState();
PspIumFreePhysicalPages();
PspIumGetPhysicalPage();
PspIumGetSystemData();
PspIumReplenishPartitionPages();
PspIumVerifyParentSd();
PspIumWorker();
PspJobClose();
PspJobCycleTimeNotificationDpcRoutine();
PspJobDelete();
PspJobDeleteStorageArrays();
PspJobHasChildren();
PspJobIoRateControlDisable();
PspJobIoRateQueryHistory();
PspJobIoRateVolumeEntryInsert();
PspJobIoRateVolumeEntryReference();
PspJobIoRateVolumeEntryRemove();
PspJobIoRateVolumeEntryRemoveAll();
PspJobIsAppSilo();
PspJobIsSilo();
PspJobNotificationWorker();
PspJobTimeLimitsWork();
PspLazyInitializeStorageExpansion();
PspLimitViolationRateControlToleranceLimitField();
PspLocateInPEManifest();
PspLocateSystemDll();
PspLockJobAssignment();
PspLockJobChain();
PspLockJobConditionally();
PspLockJobExclusive();
PspLockJobMemoryLimitsExclusive();
PspLockJobMemoryLimitsShared();
PspLockJobShared();
PspLockJobsAndProcessExclusive();
PspLockProcessExclusive();
PspLockProcessShared();
PspLockQuotaExpansion();
PspLockRootJobExclusive();
PspLockRootJobFromProcess();
PspLockRootJobShared();
PspLockUnlockProcessExclusive();
PspLogAuditTerminateRemoteProcessEvent();
PspLookupProcessQuotaBlock();
PspMapSiloSharedDataView();
PspMapSystemDll();
PspMapThreadCreationFlags();
PspMapView();
PspMarkServerSiloAsTerminating();
PspModifyAncestorBits();
PspNetRateControlDispatch();
PspNotificationLimitRateControlToleranceField();
PspNotificationLimitRateControlToleranceIntervalField();
PspNotificationPacketCallback();
PspNotifyEmptyJobsInJobChain();
PspNotifyProcessBackgroundTransition();
PspNotifyServerSiloCreation();
PspNotifyServerSiloTermination();
PspOneDirectionSecurityDomainCombine();
PspOpenPartitionHandle();
PspPrepareEnclaveThreadWait();
PspPrepareSystemDllInitBlock();
PspProcessClose();
PspProcessDelete();
PspProcessOpen();
PspProcessRundownWorker();
PspProcessRundownWorkerSingle();
PspProcessUnbindVirtualizedTimers();
PspPropagateHandle();
PspQueryDescriptorThread();
PspQueryForwardersEnabled();
PspQueryHwTracingThread();
PspQueryJobHierarchyAccountingInformation();
PspQueryJobHierarchyInterferenceCount();
PspQueryJobHierarchyInterferenceCount$filt$0();
PspQueryJobHierarchyProcessIdList();
PspQueryJobHierarchyProcessIdList$filt$0();
PspQueryJobIoAttribution();
PspQueryLastCallThread();
PspQueryLdtInformation();
PspQueryPooledQuotaLimits();
PspQueryProcessAccountingInformationCallback();
PspQueryProcessIdListCallback();
PspQueryProcessIdListCallback$filt$0();
PspQueryProcessInterferenceCountCallback();
PspQueryQuotaLimits();
PspQueryRateControlHistory();
PspQueryWorkingSetWatch();
PspQueueDeferredWorkAndWait();
PspQuitNextJobProcess();
PspRateControlLimitFlag();
PspReadDfssConfigurationValues();
PspReadIFEOMitigationAuditOptions();
PspReadIFEOMitigationOptions();
PspReadIFEONodeOptions();
PspReadIFEOPerfOptions();
PspReadOptionsMapFromIFEO();
PspReadUserQuotaLimits();
PspReaper();
PspRecordCrashedProcessIntoBlackbox();
PspReferenceCidTableEntry();
PspReferenceSystemDll();
PspReferenceTokenForNewProcess();
PspRegisterResource();
PspReleaseEnclaveThread();
PspReleaseReturnedQuota();
PspRelinquishUmsThreadSpecialApc();
PspRemoveCpuRateControl();
PspRemoveEnclaveThreadWait();
PspRemoveIoAttribution();
PspRemovePartitionFromGlobalList();
PspRemoveProcessFromJobChain();
PspRemoveProperty();
PspRemoveQuotaBlock();
PspRemoveRateControl();
PspRequestDeferredJobNotification();
PspRequestProcessExecutionState();
PspReturnQuota();
PspReturnResourceQuota();
PspRevertContainerImpersonation();
PspRundownProcess();
PspRundownSingleProcess();
PspRundownUmsThreadForApcDelivery();
PspSafeReferenceQuotaBlock();
PspSanitizeResourceLimits();
PspScheduleEnforcementWorker();
PspSelectNodeForProcess();
PspSelectVsmEnclaveByNumber();
PspSendJobNotification();
PspSendNoWakeChargeLimitNotification();
PspSendProcessNotificationToJobChain();
PspSendReliableJobNotification();
PspSendWakeNotification();
PspSetAffinityLimitCallback();
PspSetBackgroundJobTree();
PspSetContext();
PspSetContextState();
PspSetContextThreadInternal();
PspSetCpuRateControlJobPostCallback();
PspSetCpuRateControlJobPreCallback();
PspSetCreateProcessNotifyRoutine();
PspSetCreateThreadNotifyRoutine();
PspSetEffectiveJobLimits();
PspSetEffectiveLimit();
PspSetEffectiveRateControlJob();
PspSetEnergyTrackingStateJobTree();
PspSetJobBackgroundCountCallback();
PspSetJobEnergyTrackingStateCallback();
PspSetJobFreezeCountCallback();
PspSetJobIoAttribution();
PspSetJobIoAttributionJobPreCallback();
PspSetJobIoAttributionProcessCallback();
PspSetJobIoRateControl();
PspSetJobIoRateControlForVolume();
PspSetJobLimitsJobPostCallback();
PspSetJobLimitsJobPreCallback();
PspSetJobLimitsProcessCallback();
PspSetJobMemoryPartition();
PspSetJobNotificationCountCallback();
PspSetJobRateControl();
PspSetJobSiloThreadImpersonationPolicy();
PspSetJobTimeLimitCallback();
PspSetLdtInformation();
PspSetLdtSize();
PspSetMinimalProcessName();
PspSetNetRateControl();
PspSetNoChildProcessRestrictedPolicy();
PspSetPicoThreadDescriptorBase();
PspSetProcessAffinitySafe();
PspSetProcessAffinityUpdateMode();
PspSetProcessBackgroundCountCallback();
PspSetProcessCacheIsolationCallback();
PspSetProcessDefaultHardErrorMode();
PspSetProcessEnergyTrackingStateCallback();
PspSetProcessForegroundBackgroundRequest();
PspSetProcessFreezeStateCallback();
PspSetProcessIoHandlers();
PspSetProcessPpmPolicy();
PspSetProcessPriorityByClass();
PspSetProcessPriorityClass();
PspSetProcessSchedulingGroup();
PspSetProcessShortName();
PspSetProcessTimerDelayForKTimers();
PspSetProcessTimerDelayForWin32();
PspSetQuotaLimits();
PspSetRateControlJobPreCallback();
PspSetRateControlProcessCallback();
PspSetThreadPpmPolicy();
PspSetUmsThreadContext();
PspSetupReservedUserMappings();
PspSetupUserProcessAddressSpace();
PspSetupUserStack();
PspShutdownCsrProcess();
PspSiloGetMultiUserTsFromRegistry();
PspSiloGetSuiteMaskStringFromRegistry();
PspSiloInitializeIsMultiSessionSku();
PspSiloInitializeSharedUserSessionId();
PspSiloInitializeSuiteMask();
PspSiloInitializeSystemRootBuffer();
PspSiloInitializeSystemRootSymlink();
PspSiloInitializeUserSharedData();
PspSiloLoadApiSets();
PspSinglePrivCheck();
PspSortHandleList();
PspStorageAllocSlot();
PspStorageEmptyArray();
PspStorageEmptyArrayNonReadonly();
PspStorageFreeSlot();
PspStorageGetObject();
PspStorageInsertObject();
PspStorageRemoveObject();
PspStorageReplaceObject();
PspSubtractAccountingValues();
PspSystemThreadStartup();
PspSystemThreadStartup$filt$0();
PspTeardownPartition();
PspTerminateAllProcessesInJobHierarchy();
PspTerminateAllThreads();
PspTerminatePicoProcess();
PspTerminateProcess();
PspTerminateProcessesJobCallback();
PspTerminateSiloSubsystemProcesses();
PspTerminateThreadByPointer();
PspThreadDelete();
PspThreadOpen();
PspTimerDelayProcess();
PspTimerDelayWorkerRoutine();
PspTrySetProcessPebThrottlingFlags();
PspUmsInitThread();
PspUmsInitializeContext();
PspUmsUnInitThread();
PspUnlinkJobProcess();
PspUnlockJob();
PspUnlockJobAssignment();
PspUnlockJobChain();
PspUnlockJobConditionally();
PspUnlockJobListExclusive();
PspUnlockJobListShared();
PspUnlockJobMemoryLimitsExclusive();
PspUnlockJobMemoryLimitsShared();
PspUnlockJobsAndProcessExclusive();
PspUnlockProcessExclusive();
PspUnlockProcessListExclusive();
PspUnlockProcessListShared();
PspUnlockProcessShared();
PspUnlockQuotaExpansion();
PspUnlockQuotaListExclusive();
PspUnlockQuotaListShared();
PspUpdateCreateInfo();
PspUpdateEnforcementTimer();
PspUpdateJobPeakProcessMemory();
PspUpdateSingleProcessAffinity();
PspUserApcKernelRoutine();
PspUserApcReserveKernelRoutine();
PspUserApcReserveRundownRoutine();
PspUserThreadStartup();
PspValidateCreateProcessProtection();
PspValidateEnvironmentBlock();
PspValidateJobAffinityState();
PspValidateJobAssignmentMemoryPartition();
PspValidateJobAssignmentProcessLimits();
PspValidateJobAssignmentSiloPolicy();
PspValidateJobChainLimits();
PspValidateMitigationAuditOptions();
PspValidateMitigationOptions();
PspValidateThread();
PspVsmEnclaveHashAllocator();
PspVsmEnclaveHashDeallocator();
PspVsmLogBugCheckCallback();
PspWaitForUsermodeExit();
PspWaitOnAllProcessesJobCallback();
PspWow64CopyUnicodeString();
PspWow64GetContextThread();
PspWow64GetSharedInformation();
PspWow64InitThread();
PspWow64InitThreadGuestx86();
PspWow64PickBestNtdll();
PspWow64ReadOrWriteThreadCpuArea();
PspWow64SetContextThread();
PspWow64SetupCpuArea();
PspWow64SetupUserProcessAddressSpace();
PspWow64SetupUserStack();
PspWow64ThunkProcessParameters();
PspWritePebAffinityInfo();
PspWriteProcessSecurityDomain();
PspWriteTebIdealProcessor();
PspWriteTebImpersonationInfo();
PtrToUlong();
QueryRegistryHideMachine();
READ_PORT_UCHAR();
READ_PORT_ULONG();
READ_PORT_USHORT();
READ_REGISTER_UCHAR();
READ_REGISTER_ULONG();
READ_REGISTER_ULONG64();
READ_REGISTER_USHORT();
RaiseException();
RamdiskStart();
RaspAddCacheEntry();
RaspAllocateMemory();
RaspAntiAlias();
RaspClearCache();
RaspConvertDeltas();
RaspCreatePointList();
RaspCreateSegmentList();
RaspDestroyCachedBitmap();
RaspDestroySegmentList();
RaspFreeMemory();
RaspGetCacheEntry();
RaspGetCompositeGlyphList();
RaspGetUnscaledGlyphData();
RaspGetXExtent();
RaspInitializeCompositeGlyphData();
RaspInitializeGlyphData();
RaspInterpolatePoint();
RaspLoadBearings();
RaspLoadCompositeGlyphData();
RaspLoadEmptyGlyph();
RaspLoadGlyphData();
RaspMapCharacterCodeToGlyphIndex();
RaspMapGlyphIndexToLocation();
RaspRasterize();
RaspRectangleCreate();
RaspRectangleDestroy();
RaspScaleCoordinates();
RaspScanConvert();
RaspTestIntersection();
RawBeginOperation();
RawCheckForDeleteVolume();
RawCleanup();
RawCleanupVcb();
RawClose();
RawCompletionRoutine();
RawComputeFileSystemInformationChecksum();
RawCreate();
RawDeleteVcb();
RawDispatch();
RawDispatch$filt$0();
RawEndOperation();
RawFileSystemControl();
RawInitialize();
RawInitializeVcb();
RawInitiateDeleteVolume();
RawMountVolume();
RawPerformDevIoCtrl();
RawQueryFileSystemInformation();
RawQueryFsDeviceInfo();
RawQueryFsSizeInfo();
RawQueryFsVolumeInfo();
RawQueryInformation();
RawQueryVolumeInformation();
RawReadWriteDeviceControl();
RawScanDeletedList();
RawSetInformation();
RawShutdown();
RawUnload();
RawUserFsCtrl();
RawVerifyVolume();
RcConsolidateFrames();
RcFrameConsolidation();
ReadAMDMsr();
ReadPortWithIndex16();
ReadPortWithIndex32();
ReadPortWithIndex8();
ReadRegisterWithIndex16();
ReadRegisterWithIndex32();
ReadRegisterWithIndex64();
ReadRegisterWithIndex8();
ReadString();
ReadStringDelimited();
RealPredecessor();
RealSuccessor();
RebalanceNode();
RegRtlCopyTreeInternal();
RegRtlDeleteKeyTransacted();
RegRtlDeletePathInternal();
RegRtlQueryInfoKey();
RegRtlSetValue();
RegistryOverwriteCentralProcessor();
RemoveListEntryPte();
RemoveListHeadPte();
ResFwBackgroundTransition();
ResFwConfigureDisplayStringResources();
ResFwFindMessage();
ResFwFreeContext();
ResFwGetContext();
ResFwpPageInBackground();
ResFwpPageOutBackground();
RotBarInit();
RotBarUpdate();
RtlAbsoluteToSelfRelativeSD();
RtlAcquirePrivilege();
RtlAddAccessAllowedAce();
RtlAddAccessAllowedAceEx();
RtlAddAccessAllowedObjectAce();
RtlAddAccessDeniedAceEx();
RtlAddAccessDeniedObjectAce();
RtlAddAccessFilterAce();
RtlAddAce();
RtlAddAtomToAtomTable();
RtlAddAtomToAtomTableEx();
RtlAddAuditAccessAce();
RtlAddAuditAccessAceEx();
RtlAddAuditAccessObjectAce();
RtlAddMandatoryAce();
RtlAddProcessTrustLabelAce();
RtlAddRange();
RtlAddResourceAttributeAce();
RtlAddressInSectionTable();
RtlAllocateAndInitializeSidEx();
RtlAllocateHeap();
RtlAnsiCharToUnicodeChar();
RtlAnsiStringToUnicodeString();
RtlAnsiStringToUnicodeString$fin$0();
RtlAppendAsciizToString();
RtlAppendStringToString();
RtlAppendUnicodeStringToString();
RtlAppendUnicodeToString();
RtlApplyHotPatch();
RtlApplyImportRelocationToImage();
RtlApplyImportRelocationToPage();
RtlApplyIndirectRelocationToPage();
RtlApplySwitchJumpRelocationToPage();
RtlAreAllAccessesGranted();
RtlAreAnyAccessesGranted();
RtlAreBitsClear();
RtlAreBitsClearEx();
RtlAreBitsSet();
RtlAreBitsSetEx();
RtlAreNamesEqual();
RtlAssert();
RtlAvlInsertNodeEx();
RtlAvlRemoveNode();
RtlBackoff();
RtlBeginReadTickLock();
RtlBootStatusDisableFlushing();
RtlBootStatusItemInfo();
RtlCSparseBitmapBitmaskRead();
RtlCSparseBitmapBitmaskWrite();
RtlCSparseBitmapBitsClear();
RtlCSparseBitmapCleanup();
RtlCSparseBitmapEnterLockingRegion();
RtlCSparseBitmapFindBitSetCapped();
RtlCSparseBitmapLeaveLockingRegion();
RtlCSparseBitmapStart();
RtlCalculateUnwindInfoSizeForRetpoline();
RtlCapabilityCheck();
RtlCapabilityCheckForSingleSessionSku();
RtlCaptureContext();
RtlCaptureContext2();
RtlCaptureImageExceptionValues();
RtlCaptureRetpolineImportRvas();
RtlCaptureStackBackTrace();
RtlCharToInteger();
RtlCheckBootStatusIntegrity();
RtlCheckPortableOperatingSystem();
RtlCheckRegistryKey();
RtlCheckSystemBootStatusIntegrity();
RtlCheckTokenCapability();
RtlCheckTokenMembership();
RtlCheckTokenMembershipEx();
RtlClearAllBits();
RtlClearAllBitsEx();
RtlClearBit();
RtlClearBitEx();
RtlClearBits();
RtlClearBitsEx();
RtlCmDecodeMemIoResource();
RtlCmEncodeMemIoResource();
RtlCompareAltitudes();
RtlCompareMemory();
RtlCompareMemoryUlong();
RtlCompareString();
RtlCompareUnicodeString();
RtlCompareUnicodeStrings();
RtlCompressBuffer();
RtlCompressBufferLZNT1();
RtlCompressBufferProgress();
RtlCompressBufferXpressHuff();
RtlCompressBufferXpressHuffMax();
RtlCompressBufferXpressHuffStandard();
RtlCompressBufferXpressLz();
RtlCompressBufferXpressLzMax();
RtlCompressBufferXpressLzStandard();
RtlCompressChunks();
RtlCompressWorkSpaceSizeLZNT1();
RtlCompressWorkSpaceSizeXpressHuff();
RtlCompressWorkSpaceSizeXpressLz();
RtlComputeCrc32();
RtlComputeLfnChecksum();
RtlContractHashTable();
RtlConvertLuidToUlonglong();
RtlConvertSidToUnicodeString();
RtlCopyBitMap();
RtlCopyBitMapEx();
RtlCopyContext();
RtlCopyLuid();
RtlCopyLuidAndAttributesArray();
RtlCopyMemoryNonTemporal();
RtlCopyRangeList();
RtlCopyRetpolineStubsUnwindInfo();
RtlCopySid();
RtlCopySidAndAttributesArray();
RtlCopyString();
RtlCopyUnicodeString();
RtlCountRequiredHotPatchAddressTableEntries();
RtlCrc32();
RtlCrc64();
RtlCreateAcl();
RtlCreateAtomTable();
RtlCreateAtomTableEx();
RtlCreateEnclaveReturnFrame();
RtlCreateHashTable();
RtlCreateHashTableEx();
RtlCreateHeap();
RtlCreateHeap$filt$0();
RtlCreateInvertedFunctionTableCacheEntry();
RtlCreateRegistryKey();
RtlCreateRetpolineRelocationInformation();
RtlCreateRetpolineStubsFunctionTable();
RtlCreateRvaList();
RtlCreateSecurityDescriptor();
RtlCreateSystemVolumeInformationFolder();
RtlCreateUnicodeString();
RtlCreateUnicodeString$fin$0();
RtlCreateUnicodeStringFromAsciiz();
RtlCreateUserProcessEx();
RtlCreateUserStack();
RtlCreateUserThread();
RtlCultureNameToLCID();
RtlCustomCPToUnicodeN();
RtlCutoverTimeToSystemTime();
RtlDecompressBuffer();
RtlDecompressBufferEx();
RtlDecompressBufferEx2();
RtlDecompressBufferLZNT1();
RtlDecompressBufferProgress();
RtlDecompressBufferXpressHuff();
RtlDecompressBufferXpressHuffProgress();
RtlDecompressBufferXpressLz();
RtlDecompressBufferXpressLzProgress();
RtlDecompressChunks();
RtlDecompressFragment();
RtlDecompressFragmentEx();
RtlDecompressFragmentLZNT1();
RtlDecompressFragmentNS();
RtlDelete();
RtlDeleteAce();
RtlDeleteAtomFromAtomTable();
RtlDeleteElementGenericTable();
RtlDeleteElementGenericTableAvl();
RtlDeleteElementGenericTableAvlEx();
RtlDeleteHashTable();
RtlDeleteNoSplay();
RtlDeleteOwnersRanges();
RtlDeleteRange();
RtlDeleteRegistryValue();
RtlDereferenceAtomTable();
RtlDeriveCapabilitySidsFromName();
RtlDescribeChunk();
RtlDescribeChunkLZNT1();
RtlDescribeChunkNS();
RtlDestroyAtomTable();
RtlDestroyHeap();
RtlDestroyLowBoxAtoms();
RtlDetermineHotPatchExtent();
RtlDetermineHotPatchUndoExtent();
RtlDispatchException();
RtlDissectName();
RtlDoesNameContainWildCards();
RtlDowncaseUnicodeChar();
RtlDowncaseUnicodeString();
RtlDowncaseUnicodeString$fin$0();
RtlDrainNonVolatileFlush();
RtlDuplicateUnicodeString();
RtlDuplicateUnicodeString$fin$0();
RtlEmptyAtomTable();
RtlEndEnumerationHashTable();
RtlEndStrongEnumerationHashTable();
RtlEndWeakEnumerationHashTable();
RtlEnoughStackSpaceForStackCapture();
RtlEnumRvaListFirst();
RtlEnumerateBoundaryDescriptorEntries();
RtlEnumerateEntryHashTable();
RtlEnumerateGenericTable();
RtlEnumerateGenericTableAvl();
RtlEnumerateGenericTableLikeADirectory();
RtlEnumerateGenericTableWithoutSplaying();
RtlEnumerateGenericTableWithoutSplayingAvl();
RtlEnumerateHotPatchPatches();
RtlEqualLuid();
RtlEqualPrefixSid();
RtlEqualSid();
RtlEqualString();
RtlEqualUnicodeString();
RtlEqualWnfChangeStamps();
RtlEthernetAddressToStringA();
RtlEthernetAddressToStringW();
RtlEthernetStringToAddressA();
RtlEthernetStringToAddressW();
RtlExpandHashTable();
RtlExtendCorrelationVector();
RtlExtendedMagicDivide();
RtlExtractBitMap();
RtlExtractBitMapEx();
RtlFailFast2();
RtlFileMapFree();
RtlFileMapInitializeByNtPath();
RtlFileMapMapView();
RtlFillMemory();
RtlFindAceBySid();
RtlFindAceByType();
RtlFindClearBits();
RtlFindClearBitsAndSet();
RtlFindClearBitsAndSetEx();
RtlFindClearBitsEx();
RtlFindClearRuns();
RtlFindClearRunsEx();
RtlFindClosestEncodableLength();
RtlFindExportedRoutineByName();
RtlFindFirstRunClear();
RtlFindHotPatchBase();
RtlFindHotPatchInformation();
RtlFindLastBackwardRunClear();
RtlFindLeastSignificantBit();
RtlFindLongestRunClear();
RtlFindLongestRunClearCapped();
RtlFindLongestRunClearEx();
RtlFindMessage();
RtlFindMostSignificantBit();
RtlFindNextAlignedForwardRunClear();
RtlFindNextClearRunUlong();
RtlFindNextForwardRunClear();
RtlFindNextForwardRunClearCapped();
RtlFindNextForwardRunClearCappedEx();
RtlFindNextForwardRunClearEx();
RtlFindRange();
RtlFindSetBits();
RtlFindSetBitsAndClear();
RtlFindSetBitsAndClearEx();
RtlFindSetBitsEx();
RtlFindUnicodePrefix();
RtlFindUnicodeSubstring();
RtlFirstFreeAce();
RtlFlushNonVolatileMemory();
RtlFlushNonVolatileMemoryRanges();
RtlFnToFxFrame();
RtlFormatCurrentUserKeyPath();
RtlFormatMessage();
RtlFormatMessageEx();
RtlFreeAnsiString();
RtlFreeHeap();
RtlFreeNonVolatileToken();
RtlFreeOemString();
RtlFreeRangeList();
RtlFreeUnicodeString();
RtlFxToFnFrame();
RtlGUIDFromString();
RtlGenerate8dot3Name();
RtlGenerateClass5Guid();
RtlGenerateQpcToIncrementConstants();
RtlGetAce();
RtlGetActiveConsoleId();
RtlGetAppContainerNamedObjectPath();
RtlGetAppContainerParent();
RtlGetAppContainerSidType();
RtlGetCallersAddress();
RtlGetCompressionWorkSpaceSize();
RtlGetConsoleSessionForegroundProcessId();
RtlGetControlSecurityDescriptor();
RtlGetCurrentServiceSessionId();
RtlGetDaclSecurityDescriptor();
RtlGetDefaultCodePage();
RtlGetElementGenericTable();
RtlGetElementGenericTableAvl();
RtlGetEnabledExtendedAndSupervisorFeatures();
RtlGetEnabledExtendedFeatures();
RtlGetExtendedContextLength();
RtlGetExtendedContextLength2();
RtlGetFirstRange();
RtlGetGroupSecurityDescriptor();
RtlGetHostNtSystemRoot();
RtlGetHotPatchSize();
RtlGetIntegerAtom();
RtlGetInterruptTimePrecise();
RtlGetLastRange();
RtlGetMultiTimePrecise();
RtlGetNextEntryHashTable();
RtlGetNextRange();
RtlGetNonVolatileToken();
RtlGetNtGlobalFlags();
RtlGetNtProductType();
RtlGetNtSystemRoot();
RtlGetOwnerSecurityDescriptor();
RtlGetPersistedStateLocation();
RtlGetProductInfo();
RtlGetRvaListIteratorState();
RtlGetSaclSecurityDescriptor();
RtlGetSessionProperties();
RtlGetSetBootStatusData();
RtlGetSuiteMask();
RtlGetSystemBootStatus();
RtlGetSystemBootStatusEx();
RtlGetSystemTimePrecise();
RtlGetThreadLangIdByIndex();
RtlGetTokenNamedObjectPath();
RtlGetUmsContextExtendedSize();
RtlGetVersion();
RtlGuardCheckLongJumpTarget();
RtlGuardIsValidStackPointer();
RtlGuardIsValidWow64StackPointer();
RtlHashBytes2();
RtlHashUnicodeString();
RtlHotPatchSynchronizationRequired();
RtlHpGlobalsInitialize();
RtlHpHeapManagerCleanup();
RtlHpHeapManagerInitialize();
RtlHpHeapManagerStart();
RtlHpKInitializeHeapManager();
RtlIdentifierAuthoritySid();
RtlIdnToAscii();
RtlIdnToNameprepUnicode();
RtlIdnToUnicode();
RtlImageDirectoryEntryToData();
RtlImageNtHeader();
RtlImageNtHeaderEx();
RtlImpersonateSelfEx();
RtlIncrementCorrelationVector();
RtlInitAnsiString();
RtlInitAnsiStringEx();
RtlInitCodePageTable();
RtlInitEnumerationHashTable();
RtlInitMinimalBarrier();
RtlInitNlsTables();
RtlInitString();
RtlInitStringEx();
RtlInitStrongEnumerationHashTable();
RtlInitUnicodeString();
RtlInitUnicodeStringEx();
RtlInitWeakEnumerationHashTable();
RtlInitializeBitMap();
RtlInitializeBitMapEx();
RtlInitializeBootStatDataCache();
RtlInitializeBootStatusDataBlackBox();
RtlInitializeCorrelationVector();
RtlInitializeExtendedContext();
RtlInitializeExtendedContext2();
RtlInitializeGenericTable();
RtlInitializeGenericTableAvl();
RtlInitializeHistoryTable();
RtlInitializeRangeList();
RtlInitializeSid();
RtlInitializeSidEx();
RtlInitializeUnicodePrefix();
RtlInsertDynamicFunctionTable();
RtlInsertElementGenericTable();
RtlInsertElementGenericTableAvl();
RtlInsertElementGenericTableFull();
RtlInsertElementGenericTableFullAvl();
RtlInsertEntryHashTable();
RtlInsertHeadCircularList();
RtlInsertInvertedFunctionTable();
RtlInsertUnicodePrefix();
RtlInt64ToUnicodeString();
RtlIntegerToChar();
RtlIntegerToUnicode();
RtlIntegerToUnicodeString();
RtlInterlockedClearBitRun();
RtlInterlockedPopEntrySList();
RtlInterlockedPushEntrySList();
RtlInterlockedSetBitRun();
RtlInterlockedSetClearBits();
RtlInterlockedSetClearRun();
RtlInterlockedSetClearRunEx();
RtlInterlockedTimelineBitmapUpdate();
RtlInternEntryDereference();
RtlInternTableInitialize();
RtlInternTableIntern();
RtlIntersectBitMaps();
RtlIntersectBitMapsEx();
RtlInvertRangeList();
RtlInvertRangeListEx();
RtlIoDecodeMemIoResource();
RtlIoEncodeMemIoResource();
RtlIpv4AddressToStringA();
RtlIpv4AddressToStringExA();
RtlIpv4AddressToStringExW();
RtlIpv4AddressToStringW();
RtlIpv4StringToAddressA();
RtlIpv4StringToAddressExA();
RtlIpv4StringToAddressExW();
RtlIpv4StringToAddressW();
RtlIpv6AddressToStringA();
RtlIpv6AddressToStringExA();
RtlIpv6AddressToStringExW();
RtlIpv6AddressToStringW();
RtlIpv6StringToAddressA();
RtlIpv6StringToAddressExA();
RtlIpv6StringToAddressExW();
RtlIpv6StringToAddressW();
RtlIsCapabilitySid();
RtlIsCloudFilesPlaceholder();
RtlIsElevatedRid();
RtlIsGenericTableEmpty();
RtlIsGenericTableEmptyAvl();
RtlIsImageFullyRetpolined();
RtlIsMultiSessionSku();
RtlIsMultiUsersInSessionSku();
RtlIsNameInExpression();
RtlIsNameInExpression$fin$0();
RtlIsNameInUnUpcasedExpression();
RtlIsNameInUnUpcasedExpression$fin$0();
RtlIsNameLegalDOS8Dot3();
RtlIsNonEmptyDirectoryReparsePointAllowed();
RtlIsNormalizedString();
RtlIsNtDdiVersionAvailable();
RtlIsPackageSid();
RtlIsParentOfChildAppContainer();
RtlIsPartialPlaceholder();
RtlIsPartialPlaceholderFileHandle();
RtlIsPartialPlaceholderFileInfo();
RtlIsRangeAvailable();
RtlIsSandboxedToken();
RtlIsServicePackVersionInstalled();
RtlIsStateSeparationEnabled();
RtlIsUntrustedObject();
RtlIsValidOemCharacter();
RtlIsValidProcessTrustLabelSid();
RtlLCIDToCultureName();
RtlLargeIntegerToChar();
RtlLargeIntegerToUnicode();
RtlLengthCurrentClearRunForward();
RtlLengthCurrentClearRunForwardEx();
RtlLengthRequiredSid();
RtlLengthSecurityDescriptor();
RtlLengthSid();
RtlLengthSidAsUnicodeString();
RtlLoadString();
RtlLocalTimeToSystemTime();
RtlLocateSupervisorFeature();
RtlLockBootStatusData();
RtlLookupAtomInAtomTable();
RtlLookupElementGenericTable();
RtlLookupElementGenericTableAvl();
RtlLookupElementGenericTableFull();
RtlLookupElementGenericTableFullAvl();
RtlLookupEntryHashTable();
RtlLookupExceptionHandler();
RtlLookupFirstMatchingElementGenericTableAvl();
RtlLookupFunctionEntry();
RtlLookupFunctionEntryEx();
RtlLookupFunctionTable();
RtlLookupImageSectionByName();
RtlMakeSelfRelativeSD();
RtlMapGenericMask();
RtlMapSecurityErrorToNtStatus();
RtlMarkExceptionHandlingPages();
RtlMarkHiberPhase();
RtlMergeBitMaps();
RtlMergeBitMapsEx();
RtlMergeRangeLists();
RtlMinimalBarrier();
RtlMuiRegAddLIPParent();
RtlMultiByteToUnicodeN();
RtlMultiByteToUnicodeSize();
RtlNextUnicodePrefix();
RtlNormalizeString();
RtlNtStatusToDosError();
RtlNtStatusToDosErrorNoTeb();
RtlNumberGenericTableElements();
RtlNumberGenericTableElementsAvl();
RtlNumberOfClearBits();
RtlNumberOfClearBitsEx();
RtlNumberOfClearBitsInRange();
RtlNumberOfSetBits();
RtlNumberOfSetBitsEx();
RtlNumberOfSetBitsInRange();
RtlNumberOfSetBitsUlongPtr();
RtlOemStringToCountedUnicodeString();
RtlOemStringToCountedUnicodeString$fin$0();
RtlOemStringToUnicodeString();
RtlOemStringToUnicodeString$fin$0();
RtlOemToUnicodeN();
RtlOpenCurrentUser();
RtlOpenImageFileOptionsKey();
RtlOsDeploymentState();
RtlOsDeploymentState$fin$0();
RtlOwnerAcesPresent();
RtlParseLeapSecondData();
RtlPcToFileHeader();
RtlPcToFileName();
RtlPcToFilePath();
RtlPerformRetpolineRelocationsOnImage();
RtlPerformRetpolineRelocationsOnImageEx();
RtlPinAtomInAtomTable();
RtlPrefetchMemoryNonTemporal();
RtlPrefixString();
RtlPrefixUnicodeString();
RtlPrepareEnclaveCall();
RtlQueryAtomInAtomTable();
RtlQueryAtomsInAtomTable();
RtlQueryDepthSList();
RtlQueryDynamicTimeZoneInformation();
RtlQueryElevationFlags();
RtlQueryImageFileExecutionOptions();
RtlQueryImageFileKeyOption();
RtlQueryInformationAcl();
RtlQueryModuleInformation();
RtlQueryPackageClaims();
RtlQueryPackageIdentity();
RtlQueryProcessPlaceholderCompatibilityMode();
RtlQueryRegistryValueWithFallback();
RtlQueryRegistryValues();
RtlQueryRegistryValuesEx();
RtlQueryThreadPlaceholderCompatibilityMode();
RtlQueryTimeZoneInformation();
RtlQueryValidationRunlevel();
RtlRaiseCustomSystemEventTrigger();
RtlRaiseException();
RtlRaiseStatus();
RtlRandom();
RtlRandomEx();
RtlRbInsertNodeEx();
RtlRbRemoveNode();
RtlRbReplaceNode();
RtlRealPredecessor();
RtlRealSuccessor();
RtlReleasePrivilege();
RtlRemoveDynamicFunctionTable();
RtlRemoveEntryHashTable();
RtlRemoveInvertedFunctionTable();
RtlRemoveUnicodePrefix();
RtlReplaceSidInSd();
RtlReserveChunk();
RtlReserveChunkLZNT1();
RtlReserveChunkNS();
RtlResetRtlTranslations();
RtlRestoreBootStatusDefaults();
RtlRestoreContext();
RtlRestoreSystemBootStatusDefaults();
RtlRunOnceBeginInitialize();
RtlRunOnceComplete();
RtlRunOnceExecuteOnce();
RtlRunOnceInitialize();
RtlScrubMemory();
RtlSecondsSince1970ToTime();
RtlSecondsSince1980ToTime();
RtlSectionTableFromVirtualAddress();
RtlSelfRelativeToAbsoluteSD();
RtlSelfRelativeToAbsoluteSD2();
RtlSetActiveConsoleId();
RtlSetActiveTimeBias();
RtlSetAllBits();
RtlSetAllBitsEx();
RtlSetBit();
RtlSetBitEx();
RtlSetBits();
RtlSetBitsEx();
RtlSetConsoleSessionForegroundProcessId();
RtlSetControlSecurityDescriptor();
RtlSetDaclSecurityDescriptor();
RtlSetDynamicTimeZoneInformation();
RtlSetGroupSecurityDescriptor();
RtlSetOwnerSecurityDescriptor();
RtlSetPortableOperatingSystem();
RtlSetProcessPlaceholderCompatibilityMode();
RtlSetSaclSecurityDescriptor();
RtlSetSystemBootStatus();
RtlSetSystemBootStatusEx();
RtlSetThreadPlaceholderCompatibilityMode();
RtlSetTimeZoneInformation();
RtlShiftLeftBitMap();
RtlShiftLeftBitMapEx();
RtlSidDominates();
RtlSidDominatesForTrust();
RtlSidHashInitialize();
RtlSidHashLookup();
RtlSizeHeap();
RtlSizeOfRetpolineIndirectFixup();
RtlSizeOfRetpolineRelocationEntry();
RtlSparseArrayElementAllocate();
RtlSparseArrayElementAllocated();
RtlSparseArrayElementFindCapped();
RtlSplay();
RtlStackTraceHashFunction();
RtlStateDurationCapture();
RtlStateDurationDelta();
RtlStateDurationUpdate();
RtlStdInitializeStackDatabase();
RtlStdLogStackTrace();
RtlStdReleaseStackTrace();
RtlStringCbCatExA();
RtlStringCbCatNW();
RtlStringCbCatW();
RtlStringCbCopyA();
RtlStringCbCopyExA();
RtlStringCbCopyExW();
RtlStringCbCopyNExW();
RtlStringCbCopyNW();
RtlStringCbCopyUnicodeString();
RtlStringCbCopyW();
RtlStringCbLengthA();
RtlStringCbLengthW();
RtlStringCbPrintfA();
RtlStringCbPrintfExA();
RtlStringCbPrintfExW();
RtlStringCbPrintfW();
RtlStringCbVPrintfA();
RtlStringCchCatExW();
RtlStringCchCatNW();
RtlStringCchCatW();
RtlStringCchCopyA();
RtlStringCchCopyExW();
RtlStringCchCopyNExW();
RtlStringCchCopyNW();
RtlStringCchCopyW();
RtlStringCchLengthW();
RtlStringCchPrintfA();
RtlStringCchPrintfExW();
RtlStringCchPrintfW();
RtlStringCopyWorkerA();
RtlStringCopyWorkerW();
RtlStringExHandleFillBehindNullA();
RtlStringExHandleFillBehindNullW();
RtlStringExHandleOtherFlagsA();
RtlStringExHandleOtherFlagsW();
RtlStringExValidateDestA();
RtlStringFromGUID();
RtlStringFromGUIDEx();
RtlStringLengthWorkerA();
RtlStringLengthWorkerW();
RtlStringVPrintfWorkerA();
RtlStringVPrintfWorkerW();
RtlStronglyEnumerateEntryHashTable();
RtlSubAuthorityCountSid();
RtlSubAuthoritySid();
RtlSubtreePredecessor();
RtlSubtreeSuccessor();
RtlSuffixUnicodeString();
RtlSystemTimeToLocalTime();
RtlTestBit();
RtlTestBitEx();
RtlTestProtectedAccess();
RtlTimeFieldsToTime();
RtlTimeToElapsedTimeFields();
RtlTimeToSecondsSince1970();
RtlTimeToSecondsSince1980();
RtlTimeToTimeFields();
RtlTimelineBitmapMerge();
RtlTimelineBitmapUpdate();
RtlTimelineBitmapUpdateRange();
RtlTraceDatabaseAdd();
RtlTraceDatabaseCreate();
RtlTraceDatabaseDestroy();
RtlTraceDatabaseEnumerate();
RtlTraceDatabaseFind();
RtlTraceDatabaseLock();
RtlTraceDatabaseUnlock();
RtlTraceDatabaseValidate();
RtlTryEndReadTickLock();
RtlUIntAdd();
RtlULongAdd();
RtlULongLongAdd();
RtlULongLongMult();
RtlULongLongSub();
RtlULongSub();
RtlUShortAdd();
RtlUTF8ToUnicodeN();
RtlUnalignedStringCbLengthW();
RtlUnalignedStringCchLengthW();
RtlUnicodeStringCat();
RtlUnicodeStringCatString();
RtlUnicodeStringCbCatStringN();
RtlUnicodeStringCchCopyN();
RtlUnicodeStringCopy();
RtlUnicodeStringExHandleOtherFlags();
RtlUnicodeStringPrintf();
RtlUnicodeStringPrintfEx();
RtlUnicodeStringToAnsiString();
RtlUnicodeStringToAnsiString$fin$0();
RtlUnicodeStringToCountedOemString();
RtlUnicodeStringToCountedOemString$fin$0();
RtlUnicodeStringToInt64();
RtlUnicodeStringToInteger();
RtlUnicodeStringToOemString();
RtlUnicodeStringToOemString$fin$0();
RtlUnicodeStringValidateDestWorker();
RtlUnicodeStringValidateEx();
RtlUnicodeStringValidateSrcWorker();
RtlUnicodeStringValidateWorker();
RtlUnicodeToCustomCPN();
RtlUnicodeToMultiByteN();
RtlUnicodeToMultiByteSize();
RtlUnicodeToOemN();
RtlUnicodeToUTF8N();
RtlUnlockBootStatusData();
RtlUnsignedMultiplyHigh();
RtlUnwind();
RtlUnwindEx();
RtlUpcaseUnicodeChar();
RtlUpcaseUnicodeString();
RtlUpcaseUnicodeString$fin$0();
RtlUpcaseUnicodeStringToAnsiString();
RtlUpcaseUnicodeStringToAnsiString$fin$0();
RtlUpcaseUnicodeStringToCountedOemString();
RtlUpcaseUnicodeStringToCountedOemString$fin$0();
RtlUpcaseUnicodeStringToOemString();
RtlUpcaseUnicodeStringToOemString$fin$0();
RtlUpcaseUnicodeToCustomCPN();
RtlUpcaseUnicodeToMultiByteN();
RtlUpcaseUnicodeToOemN();
RtlUpdateImportRelocationsInImage();
RtlUpperChar();
RtlUpperString();
RtlValidAcl();
RtlValidProcessProtection();
RtlValidRelativeSecurityDescriptor();
RtlValidSecurityDescriptor();
RtlValidSid();
RtlValidateCorrelationVector();
RtlValidateHotPatchBase();
RtlValidateRetpolineRelocation();
RtlValidateUnicodeString();
RtlVerifyVersionInfo();
RtlVirtualUnwind();
RtlWalkFrameChain();
RtlWeaklyEnumerateEntryHashTable();
RtlWideCharArrayCopyStringWorker();
RtlWow64GetCpuAreaInfo();
RtlWow64GetEquivalentMachineCHPE();
RtlWriteAcquireTickLock();
RtlWriteNonVolatileMemory();
RtlWriteRegistryValue();
RtlWriteReleaseTickLock();
RtlWriteTryAcquireTickLock();
RtlXRestore();
RtlXRestoreS();
RtlXSave();
RtlXSaveS();
RtlZeroHeap();
RtlZeroHeap$filt$0();
RtlZeroHeap$fin$1();
RtlZeroMemory();
RtlpAddIntersectingRanges();
RtlpAddKnownAce();
RtlpAddKnownObjectAce();
RtlpAddRange();
RtlpAddToMergedRange();
RtlpAllocDeallocQueryBuffer();
RtlpAllocateAtom();
RtlpAllocateAtomTableEntry();
RtlpAllocateHeap();
RtlpAllocateHeap$fin$0();
RtlpAllocateHeapInternal();
RtlpAllocateHeapRaiseException();
RtlpAllocateSecondLevelDir();
RtlpAllowsLowBoxAccess();
RtlpAnalyzeHeapFailure();
RtlpAnalyzeHeapFailure$filt$0();
RtlpApplyAclToObject();
RtlpApplyGenericRetpolineFixup();
RtlpArchContextFlagFromMachine();
RtlpAtomMapAtomToHandleEntry();
RtlpBase64Encode();
RtlpBreakWithStatusInstruction();
RtlpCSparseBitmapLock();
RtlpCSparseBitmapPageCommit();
RtlpCSparseBitmapPageDecommit();
RtlpCSparseBitmapUnlock();
RtlpCSparseBitmapWaitOnAddress();
RtlpCallQueryRegistryRoutine();
RtlpCapChkTelemetryRunOnce();
RtlpCapabilityCheckSystemCapability();
RtlpCaptureContext();
RtlpCaptureContext2();
RtlpCaptureDynamicRelocationTableRva();
RtlpCaptureRetpolineBinaryInfoForImage();
RtlpCheckDynamicTimeZoneInformation();
RtlpCheckFunctionPatchApplied();
RtlpCoalesceFreeBlocks();
RtlpCombineAcls();
RtlpCompareKnownAces();
RtlpCompareKnownObjectAces();
RtlpCompressRvaList();
RtlpComputeCrcInternal();
RtlpComputeEpilogueOffset();
RtlpComputeFraction();
RtlpComputeMergedAcl();
RtlpComputeMergedAcl2();
RtlpConstructImportRelocationFixup();
RtlpConstructIndirectRelocationFixup();
RtlpConstructSwitchJumpRelocationFixup();
RtlpConvertAbsoluteToRelativeSecurityAttribute();
RtlpConvertFunctionEntry();
RtlpCopyAces();
RtlpCopyBitMapTailToHead();
RtlpCopyBitMapTailToHeadEx();
RtlpCopyContext();
RtlpCopyEffectiveAce();
RtlpCopyExtendedContext();
RtlpCopyLegacyContext();
RtlpCopyLegacyContextAmd64();
RtlpCopyLegacyContextArm();
RtlpCopyLegacyContextArm64();
RtlpCopyLegacyContextX86();
RtlpCopyRangeListEntry();
RtlpCopyRetpolineRelocationBlockEntryArray();
RtlpCopyXStateChunk();
RtlpCreateHashTable();
RtlpCreateHeapEncoding();
RtlpCreateRangeListEntry();
RtlpCreateServerAcl();
RtlpCreateSplitBlock();
RtlpCreateUCREntry();
RtlpCreateUserProcess();
RtlpCreateUserThreadEx();
RtlpCtAllocateMemory();
RtlpCtContextFree();
RtlpCtContextInit();
RtlpCtFreeMemory();
RtlpCtInitializeNotificationEvent();
RtlpCtInitializeWorkItem();
RtlpCtQueueWorkItem();
RtlpCtSelfSubscribe();
RtlpDeCommitFreeBlock();
RtlpDeleteFromMergedRange();
RtlpDeleteRangeListEntry();
RtlpDereferenceAtom();
RtlpDestroyHeapSegment();
RtlpDidUnicodeToOemWork();
RtlpDynamicLookasideAllocate();
RtlpDynamicLookasideBucketCompare();
RtlpDynamicLookasideFree();
RtlpDynamicLookasideInitialize();
RtlpDynamicLookasideRebalance();
RtlpEnvRegisterFaultRange();
RtlpExceptionHandler();
RtlpExecuteHandlerForException();
RtlpExecuteHandlerForUnwind();
RtlpExtendHeap();
RtlpFillMemoryRandomUp();
RtlpFillMemoryWithInverseStride();
RtlpFilterSacl();
RtlpFindAndCommitPages();
RtlpFindEntry();
RtlpFindMessageInTable();
RtlpFindRegTziForCurrentYear();
RtlpFindUCREntry();
RtlpFreeAllAtom();
RtlpFreeAtom();
RtlpFreeHandleForAtom();
RtlpFreeHeap();
RtlpFreeHeap$fin$0();
RtlpFreeHeapInternal();
RtlpFreeRangeListEntry();
RtlpFunctionAddressTableEntry();
RtlpGenerateInheritedAce();
RtlpGenericInverseCouplingWorker();
RtlpGenericMATSPlusWorker();
RtlpGenericRandomPatternWorker();
RtlpGenericStrideWorker();
RtlpGetBootStatusPath();
RtlpGetBootStatusPathFromRegistry();
RtlpGetChainHead();
RtlpGetContextFlagsLocation();
RtlpGetCorrelationVectorBufferLength();
RtlpGetCorrelationVectorEndPosition();
RtlpGetCorrelationVectorLastDotPosition();
RtlpGetDynamicTimeZoneInfoHandle();
RtlpGetEntireXStateAreaLength();
RtlpGetLastContiguosBase64Position();
RtlpGetLegacyContextLength();
RtlpGetNameFromLangInfoNode();
RtlpGetNormalization();
RtlpGetNtProductTypeFromRegistry();
RtlpGetPolicyValueForSystemCapability();
RtlpGetRegistryHandle();
RtlpGetRetpolineStubsFunctionTable();
RtlpGetSetBootStatusData();
RtlpGetStackLimits();
RtlpGetTokenNamedObjectPath();
RtlpGetWindowsPolicy();
RtlpHashStringToAtom();
RtlpHeapAddListEntry();
RtlpHeapExceptionFilter();
RtlpHeapFindListLookupEntry();
RtlpHeapGenerateRandomValue64();
RtlpHeapHandleError();
RtlpHeapListCompare();
RtlpHeapRemoveListEntry();
RtlpHpAcquireLockExclusive();
RtlpHpAcquireLockShared();
RtlpHpAcquireQueuedLockExclusive();
RtlpHpAllocVA();
RtlpHpAllocWithExceptionProtection();
RtlpHpAllocWithExceptionProtection$filt$0();
RtlpHpAllocateHeap();
RtlpHpAllocateHeapBackend();
RtlpHpAllocateHeapInternal();
RtlpHpCheckAllocationSizeLimit();
RtlpHpConvertCreationFlags();
RtlpHpConvertFlagsToSegmentFlags();
RtlpHpEnvAllocVA();
RtlpHpEnvFreeVA();
RtlpHpEnvGetHeapManager();
RtlpHpEnvQueryProcessorCount();
RtlpHpExtrasAppend();
RtlpHpExtrasGet();
RtlpHpExtrasSetPresent();
RtlpHpFixedHeapCommitRoutine();
RtlpHpFixedHeapCreate();
RtlpHpFixedVsAllocate();
RtlpHpFixedVsCommit();
RtlpHpFixedVsDecommit();
RtlpHpFixedVsFree();
RtlpHpFreeHeap();
RtlpHpFreeVA();
RtlpHpFreeWithExceptionProtection();
RtlpHpFreeWithExceptionProtection$filt$0();
RtlpHpGetOwnerHeap();
RtlpHpHeapAllocate();
RtlpHpHeapCheckCommitLimit();
RtlpHpHeapCompact();
RtlpHpHeapCreate();
RtlpHpHeapDestroy();
RtlpHpHeapExtendContext();
RtlpHpHeapHandleError();
RtlpHpHeapHandleError$filt$0();
RtlpHpLargeAlloc();
RtlpHpLargeAllocGetMetadata();
RtlpHpLargeAllocSetExtraPresent();
RtlpHpLargeAllocSize();
RtlpHpLargeAllocationDestroy();
RtlpHpLargeFree();
RtlpHpLargeLockAcquire();
RtlpHpLargeLockAcquireShared();
RtlpHpLegacyGetEnvHandle();
RtlpHpLfhBucketActivate();
RtlpHpLfhBucketAddSubsegment();
RtlpHpLfhBucketAllocate();
RtlpHpLfhBucketAllocateSlot();
RtlpHpLfhBucketComputeNewSubsegmentBlockCount();
RtlpHpLfhBucketGetSubsegment();
RtlpHpLfhBucketInitialize();
RtlpHpLfhBucketSubsegmentStatsUpdate();
RtlpHpLfhBucketUpdateAffinityMapping();
RtlpHpLfhBucketUpdateStats();
RtlpHpLfhContextAllocate();
RtlpHpLfhContextCleanup();
RtlpHpLfhContextCompact();
RtlpHpLfhContextInitialize();
RtlpHpLfhOwnerCleanup();
RtlpHpLfhOwnerCompact();
RtlpHpLfhOwnerInitialize();
RtlpHpLfhOwnerMoveSubsegment();
RtlpHpLfhSlotAllocate();
RtlpHpLfhSubsegmentCommitBlock();
RtlpHpLfhSubsegmentCreate();
RtlpHpLfhSubsegmentDecBlockCounts();
RtlpHpLfhSubsegmentDecommitPages();
RtlpHpLfhSubsegmentFindEmptyUnits();
RtlpHpLfhSubsegmentFree();
RtlpHpLfhSubsegmentFreeBlock();
RtlpHpLfhSubsegmentIncBlockCounts();
RtlpHpLfhSubsegmentInitialize();
RtlpHpLfhSubsegmentSetOwner();
RtlpHpLfhSubsegmentSizeBlock();
RtlpHpLfhSubsegmentSizeBlockInternal();
RtlpHpMetadataAlloc();
RtlpHpMetadataCommit();
RtlpHpMetadataFree();
RtlpHpMetadataHeapCreate();
RtlpHpMetadataHeapCtxGet();
RtlpHpMetadataHeapStart();
RtlpHpQueryVA();
RtlpHpRegisterEnvironment();
RtlpHpReleaseLockShared();
RtlpHpReleaseQueuedLockExclusive();
RtlpHpScheduleCompaction();
RtlpHpSegAlloc();
RtlpHpSegContextCleanup();
RtlpHpSegContextCompact();
RtlpHpSegContextInitialize();
RtlpHpSegContextReserve();
RtlpHpSegDescriptorValidate();
RtlpHpSegFree();
RtlpHpSegFreeRangeInsert();
RtlpHpSegFreeRangeRemove();
RtlpHpSegHeapAddSegment();
RtlpHpSegHeapCheckCommitLimit();
RtlpHpSegHeapRemoveSegment();
RtlpHpSegLargeRangeAllocate();
RtlpHpSegLfhAllocate();
RtlpHpSegLfhExtendContext();
RtlpHpSegLfhVsCommit();
RtlpHpSegLfhVsDecommit();
RtlpHpSegLfhVsFree();
RtlpHpSegLockAcquire();
RtlpHpSegLockRelease();
RtlpHpSegMgrAllocate();
RtlpHpSegMgrApplyLargePagePolicy();
RtlpHpSegMgrCommit();
RtlpHpSegMgrCommitComplete();
RtlpHpSegMgrCommitInitiate();
RtlpHpSegMgrRelease();
RtlpHpSegMgrReserve();
RtlpHpSegMgrVaCtxAlloc();
RtlpHpSegMgrVaCtxFree();
RtlpHpSegMgrVaCtxInitialize();
RtlpHpSegMgrVaCtxInsert();
RtlpHpSegPageRangeAllocate();
RtlpHpSegPageRangeCoalesce();
RtlpHpSegPageRangeCommit();
RtlpHpSegPageRangeComputeLargePageCost();
RtlpHpSegPageRangeCountCommittedPages();
RtlpHpSegPageRangeHandleCommit();
RtlpHpSegPageRangeShrink();
RtlpHpSegPageRangeSplit();
RtlpHpSegSegmentAllocate();
RtlpHpSegSegmentFree();
RtlpHpSegSegmentInitialize();
RtlpHpSegSetExtraPresent();
RtlpHpSegSizeInternal();
RtlpHpSegSubAllocate();
RtlpHpSegVsAllocate();
RtlpHpSizeHeap();
RtlpHpSizeHeapInternal();
RtlpHpVaMgrAlloc();
RtlpHpVaMgrAllocAligned();
RtlpHpVaMgrCtxAlloc();
RtlpHpVaMgrCtxAllocatorDereference();
RtlpHpVaMgrCtxAllocatorFind();
RtlpHpVaMgrCtxAllocatorReference();
RtlpHpVaMgrCtxFree();
RtlpHpVaMgrCtxQuery();
RtlpHpVaMgrCtxStart();
RtlpHpVaMgrFree();
RtlpHpVaMgrRangeCleanup();
RtlpHpVaMgrRangeCoalesce();
RtlpHpVaMgrRangeCreate();
RtlpHpVaMgrRangeFind();
RtlpHpVaMgrRangeFree();
RtlpHpVaMgrRangeSplit();
RtlpHpVaMgrRegionAllocate();
RtlpHpVaMgrStart();
RtlpHpVsChunkAlignSplit();
RtlpHpVsChunkCoalesce();
RtlpHpVsChunkComputeCost();
RtlpHpVsChunkDecommit();
RtlpHpVsChunkFree();
RtlpHpVsChunkSetExtraPresent();
RtlpHpVsChunkSize();
RtlpHpVsChunkSplit();
RtlpHpVsContextAddSubsegment();
RtlpHpVsContextAllocate();
RtlpHpVsContextAllocateInternal();
RtlpHpVsContextFree();
RtlpHpVsContextFreeInternal();
RtlpHpVsContextFreeList();
RtlpHpVsContextInitialize();
RtlpHpVsContextMultiAlloc();
RtlpHpVsDelayFreeContextFlush();
RtlpHpVsDelayFreeContextInitialize();
RtlpHpVsFreeChunkInsert();
RtlpHpVsFreeChunkRemove();
RtlpHpVsSubsegmentCleanup();
RtlpHpVsSubsegmentCommitPages();
RtlpHpVsSubsegmentCreate();
RtlpHpVsSubsegmentFree();
RtlpIdnToUnicodeWorker();
RtlpImageDirectoryEntryToData32();
RtlpImageDirectoryEntryToData64();
RtlpImageDirectoryEntryToDataEx();
RtlpInheritAcl2();
RtlpInitNlsFileName();
RtlpInitNlsSectionName();
RtlpInitializeHandleTableForAtomTable();
RtlpInitializeHeapSegment();
RtlpInitializeLockAtomTable();
RtlpInitializeSecondLevelDir();
RtlpInitializeStackTraceDatabase();
RtlpInsertFreeBlock();
RtlpInsertInvertedFunctionTableEntry();
RtlpInsertStringAtom();
RtlpInsertUCRBlock();
RtlpInterlockedFlushSList();
RtlpInterlockedPopEntrySList();
RtlpInterlockedPushEntrySList();
RtlpInternEntryCreate();
RtlpInternEntryFind();
RtlpInternEntryHash();
RtlpInternEntryMatch();
RtlpInternHashBucketsAllocate();
RtlpInternHashBucketsFree();
RtlpIsALicensedLIPLanguage();
RtlpIsALicensedRegularLanguage();
RtlpIsAppContainer();
RtlpIsDuplicateAce();
RtlpIsFrameInBounds();
RtlpIsFrameInBoundsEx();
RtlpIsNameInExpressionPrivate();
RtlpIsRangeAvailable();
RtlpLangNameInMultiSzString();
RtlpLfhBucketUsageUpdate();
RtlpLoadInstallLanguageFallback();
RtlpLoadLanguageConfigList();
RtlpLoadPolicyLanguageSpec();
RtlpLocateRelatedBlocks();
RtlpLockAtomTable();
RtlpLogCapabilityCheckLatency();
RtlpLogExceptionDispatch();
RtlpLogExceptionHandler();
RtlpLogHeapFailure();
RtlpLookasideAdjustDepth();
RtlpLookupFunctionEntryForStackWalks();
RtlpLookupFunctionEntryForStackWalks$filt$0();
RtlpLookupLowBox();
RtlpLookupOrCreateLowBox();
RtlpLookupPrimaryFunctionEntry();
RtlpLookupUserFunctionTable();
RtlpLookupUserFunctionTable$filt$0();
RtlpLookupUserFunctionTable$filt$1();
RtlpLookupUserFunctionTableInverted();
RtlpLookupUserFunctionTableInverted$filt$0();
RtlpMakeXpressCallback();
RtlpMuiRegAddAlternateCodePage();
RtlpMuiRegAddBaseLanguage();
RtlpMuiRegAddLanguageByName();
RtlpMuiRegAddNeutralLanguage();
RtlpMuiRegConfigListAddLanguage();
RtlpMuiRegConfigMatchesInstalled();
RtlpMuiRegCreateKernelRegistryInfo();
RtlpMuiRegCreateLanguageConfigList();
RtlpMuiRegCreateLanguages();
RtlpMuiRegCreateRegistryInfo();
RtlpMuiRegCreateStringPool();
RtlpMuiRegFreeRegistryInfo();
RtlpMuiRegGetInstalledLangInfoIndex();
RtlpMuiRegGetInstalledLanguageIndex();
RtlpMuiRegGetInstalledLanguageIndexByLangId();
RtlpMuiRegGetInstalledLanguageIndexByName();
RtlpMuiRegGetLangInfoIndex();
RtlpMuiRegGetLanguageSpec();
RtlpMuiRegGetOrAddLangInfo();
RtlpMuiRegGetOrAddString();
RtlpMuiRegGetOrAddStringToPool();
RtlpMuiRegGetStringIndexInPool();
RtlpMuiRegGrowStringPool();
RtlpMuiRegInitAnyLanguage();
RtlpMuiRegInitLIPLanguage();
RtlpMuiRegInitPartialLanguage();
RtlpMuiRegLangInfoMatchesSpec();
RtlpMuiRegLoadLicInformation();
RtlpMuiRegLoadRegistryInfo();
RtlpMuiRegPopulateBaseLanguages();
RtlpMuiRegResizeLanguageConfigList();
RtlpMuiRegResizeLanguages();
RtlpMuiRegResizeStringPool();
RtlpMuiRegValidateAndGetInstallFallbackBase();
RtlpMuiRegValidateConfigNode();
RtlpMuiRegValidateLIPLanguage();
RtlpMuiRegValidatePartialLanguage();
RtlpNameprepAsciiRealWorker();
RtlpNameprepAsciiWorker();
RtlpNewSecurityObject();
RtlpNormalizeStringWorker();
RtlpOpenBaseImageFileOptionsKey();
RtlpOpenBaseImageFileOptionsKeyEx();
RtlpOpenImageFileOptionsKeyEx();
RtlpOpenThreadToken();
RtlpOwnerAcesPresent();
RtlpPopulateContext();
RtlpPopulateLanguageConfigList();
RtlpPopulateListIndex();
RtlpProbeUserBufferSafe();
RtlpProbeUserBufferSafe$filt$0();
RtlpProcessIFEOKeyFilter();
RtlpQueryLowBoxId();
RtlpQueryPackageIdentityAttributes();
RtlpQueryRegistryDirect();
RtlpQueryRegistryValues();
RtlpQuerySecurityDescriptor();
RtlpQueryTimeZoneInformationWorker();
RtlpQueryTimeZoneKeyNameRoutine();
RtlpReadExtendedContext();
RtlpReadExtendedContextLayout();
RtlpRecordBootStatusData();
RtlpReferenceAtom();
RtlpRegTziFormatToTzi();
RtlpRemoveUCRBlock();
RtlpRtlpCtSelfSubscribeCallback();
RtlpRtlpCtWaitForWnfQuiescentWorker();
RtlpRunOnceWaitForInit();
RtlpSameFunction();
RtlpSanitizeContextFlags();
RtlpScanRetpolineIndexForEndStraddle();
RtlpSearchFunctionTable();
RtlpSeedGlfsr();
RtlpSetRvaListRvaStateBits();
RtlpSetSecurityObject();
RtlpSetTimeZoneInformationWorker();
RtlpSetupExtendedBlock();
RtlpSizeHeapInternal();
RtlpStackTraceDatabaseLogPrefix();
RtlpStdExtendLowerWatermark();
RtlpStdExtendUpperWatermark();
RtlpStdGetRecordedStackTraceIndex();
RtlpStdGetSpaceForTrace();
RtlpStdLogCapturedStackTrace();
RtlpSysVolCheckOwnerAndSecurity();
RtlpSysVolCreateSecurityDescriptor();
RtlpSysVolTakeOwnership();
RtlpSystemBootStatusRequest();
RtlpTargetCompare();
RtlpTerminateCurrentProcess();
RtlpTestAndFillMemoryUp();
RtlpTestMemory();
RtlpTestMemoryRandomUp();
RtlpTimeFieldsToTimeNoLeapSeconds();
RtlpTimeToTimeFields();
RtlpTimeToTimeFieldsNoLeapSeconds();
RtlpTraceDatabaseAcquireLock();
RtlpTraceDatabaseAllocate();
RtlpTraceDatabaseInternalAdd();
RtlpTraceDatabaseInternalFind();
RtlpTraceDatabaseReleaseLock();
RtlpTreeDoubleRotateNodes();
RtlpUnlockAtomTable();
RtlpUnwindEpilogue();
RtlpUnwindHandler();
RtlpUnwindOpSlots();
RtlpUpcaseUnicodeStringPrivate();
RtlpUpcaseUnicodeStringPrivate$fin$0();
RtlpUpdateDynamicTimeZones();
RtlpUpdateHeapRates();
RtlpValidAccessFilterAce();
RtlpValidAttribute();
RtlpValidAttributeAce();
RtlpValidAttributeInfo();
RtlpValidCompoundAce();
RtlpValidFilterAclSubjectContext();
RtlpValidObjectAce();
RtlpValidRelativeAttribute();
RtlpValidTrustSubjectContext();
RtlpValidateAsciiStd3AndLength();
RtlpValidateContextFlags();
RtlpValidateKeyTrust();
RtlpValidateSDOffsetAndSize();
RtlpValidateSidBuffer();
RtlpVerCompare();
RtlpVerGetConditionMask();
RtlpVirtualUnwind();
RtlpWalkFrameChain();
RtlpWalkFrameChain$filt$0();
RtlpWalkWowStack();
RtlpWow64CreateUserStack();
RtlpWow64CtxFromAmd64();
RtlpWow64CtxToAmd64();
RtlpWow64GetContextOnAmd64();
RtlpWow64SanitizeContextFlags();
RtlpWow64SetContextOnAmd64();
RtlpWriteExtendedContext();
RtlpxLookupFunctionTable();
RtlxAnsiStringToUnicodeSize();
RtlxOemStringToUnicodeSize();
RtlxRemoveInvertedFunctionTable();
RtlxUnicodeStringToAnsiSize();
RtlxUnicodeStringToOemSize();
RunLengthEncode();
RunningHash();
SC_DEVICE::ExtractDeviceStrings();
SC_DEVICE::ExtractFaultDomainIds();
SC_DEVICE::GetStorageProperty();
SC_DEVICE::GetStoragePropertyPost();
SC_DEVICE::GetStoragePropertyPre();
SC_DEVICE::Initialize();
SC_DEVICE::SaveStorageProperty();
SC_DEVICE::UpdateStorageProperty();
SC_DEVICE::`scalar deleting destructor'();
SC_DEVICE::`vector deleting destructor'();
SC_DEVICE::~SC_DEVICE();
SC_DISK::CreatePartitionTable();
SC_DISK::GetStoragePropertyPost();
SC_DISK::GetStoragePropertyPre();
SC_DISK::Initialize();
SC_DISK::InitializePartitionCache();
SC_DISK::IsVbr();
SC_DISK::ReadPartitionTable();
SC_DISK::ReadSectors();
SC_DISK::ResetPartitionCache();
SC_DISK::SC_DISK();
SC_DISK::SaveStorageProperty();
SC_DISK::SetPartition();
SC_DISK::VerifyPartitionTable();
SC_DISK::WritePartitionTable();
SC_DISK::WriteSectors();
SC_DISK::`scalar deleting destructor'();
SC_DISK::`vector deleting destructor'();
SC_DISK::~SC_DISK();
SC_ENV::Allocate();
SC_ENV::CreateGuid();
SC_ENV::Free();
SC_ENV_ALLOCATOR::operator delete();
SC_GPT::CreatePartitionTable();
SC_GPT::ReadEntries();
SC_GPT::ReadHeader();
SC_GPT::ReadPartitionTable();
SC_GPT::SetPartition();
SC_GPT::VerifyPartitionTable();
SC_GPT::WritePartitionTable();
SC_MBR::CreatePartitionTable();
SC_MBR::Initialize();
SC_MBR::ReadPartitionTable();
SC_MBR::SetPartition();
SC_MBR::WritePartitionTable();
SC_RAW::CreatePartitionTable();
SC_RAW::ReadPartitionTable();
SMKM_STORE<SM_TRAITS>::SmStAcquireStoreLockExclusive();
SMKM_STORE<SM_TRAITS>::SmStAllocatePhysicalRegion();
SMKM_STORE<SM_TRAITS>::SmStAllocateVirtualRegion();
SMKM_STORE<SM_TRAITS>::SmStCheckLockInProgressRegionComplete();
SMKM_STORE<SM_TRAITS>::SmStCheckResident();
SMKM_STORE<SM_TRAITS>::SmStCleanup();
SMKM_STORE<SM_TRAITS>::SmStCompareRegionDataCallback();
SMKM_STORE<SM_TRAITS>::SmStDirectRead();
SMKM_STORE<SM_TRAITS>::SmStDirectReadCallout();
SMKM_STORE<SM_TRAITS>::SmStDirectReadComplete();
SMKM_STORE<SM_TRAITS>::SmStDirectReadIssue();
SMKM_STORE<SM_TRAITS>::SmStEtwFillStoreEvent();
SMKM_STORE<SM_TRAITS>::SmStEtwFillStoreStatsEvent();
SMKM_STORE<SM_TRAITS>::SmStFindVirtualLockedRegion();
SMKM_STORE<SM_TRAITS>::SmStGetStoreStats();
SMKM_STORE<SM_TRAITS>::SmStHelperSendCommand();
SMKM_STORE<SM_TRAITS>::SmStInitialize();
SMKM_STORE<SM_TRAITS>::SmStIsRegionBusy();
SMKM_STORE<SM_TRAITS>::SmStMapPhysicalRegion();
SMKM_STORE<SM_TRAITS>::SmStMapVirtualRegion();
SMKM_STORE<SM_TRAITS>::SmStOutSwapPrepareStore();
SMKM_STORE<SM_TRAITS>::SmStOutSwapStore();
SMKM_STORE<SM_TRAITS>::SmStPrioritizeRegionsStore();
SMKM_STORE<SM_TRAITS>::SmStReadThread();
SMKM_STORE<SM_TRAITS>::SmStReleaseVirtualRegion();
SMKM_STORE<SM_TRAITS>::SmStStart();
SMKM_STORE<SM_TRAITS>::SmStSwapStore();
SMKM_STORE<SM_TRAITS>::SmStTrimWsStore();
SMKM_STORE<SM_TRAITS>::SmStTrimWsStoreBatch();
SMKM_STORE<SM_TRAITS>::SmStUnhandledExceptionFilter();
SMKM_STORE<SM_TRAITS>::SmStUnmapVirtualRegion();
SMKM_STORE<SM_TRAITS>::SmStWorkItemGet();
SMKM_STORE<SM_TRAITS>::SmStWorkItemQueue();
SMKM_STORE<SM_TRAITS>::SmStWorker();
SMKM_STORE<SM_TRAITS>::SmStWorkerThread();
SMKM_STORE<SM_TRAITS>::SmStWorkerThreadStartThread();
SMKM_STORE_MGR<SM_TRAITS>::SmAsyncReadQueueInsert();
SMKM_STORE_MGR<SM_TRAITS>::SmAsyncReadQueueWorker();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressContextDeleteThreadParams();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressContextQueueEntry();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressContextUpdateMemoryCondition();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxBalancerThread();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxCleanup();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxCreateThread();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxCreateThreadParams();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxProcessEntry();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxProcessReadyQueue();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxStart();
SMKM_STORE_MGR<SM_TRAITS>::SmCompressCtxWorkerThread();
SMKM_STORE_MGR<SM_TRAITS>::SmDrainSList();
SMKM_STORE_MGR<SM_TRAITS>::SmEvictKeys();
SMKM_STORE_MGR<SM_TRAITS>::SmFeAddComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeAddInitiate();
SMKM_STORE_MGR<SM_TRAITS>::SmFeCheckPresent();
SMKM_STORE_MGR<SM_TRAITS>::SmFeDeleteEntry();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEmpty();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictInitiate();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictUpdatePass();
SMKM_STORE_MGR<SM_TRAITS>::SmFeReadInitiate();
SMKM_STORE_MGR<SM_TRAITS>::SmFeSetEvictFailed();
SMKM_STORE_MGR<SM_TRAITS>::SmFeStoreDelete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeStoreEvictKeys();
SMKM_STORE_MGR<SM_TRAITS>::SmHighMemPriorityTimerStart();
SMKM_STORE_MGR<SM_TRAITS>::SmHighMemPriorityWatchdogTimerCallback();
SMKM_STORE_MGR<SM_TRAITS>::SmHighMemPriorityWatchdogWorker();
SMKM_STORE_MGR<SM_TRAITS>::SmInitialize();
SMKM_STORE_MGR<SM_TRAITS>::SmIoCtxPrepareToQueue();
SMKM_STORE_MGR<SM_TRAITS>::SmIoCtxQueueWork();
SMKM_STORE_MGR<SM_TRAITS>::SmIoCtxWorkItemComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmPageRead();
SMKM_STORE_MGR<SM_TRAITS>::SmPageWrite();
SMKM_STORE_MGR<SM_TRAITS>::SmPerformStoreMaintenance();
SMKM_STORE_MGR<SM_TRAITS>::SmProcessAddCompletion();
SMKM_STORE_MGR<SM_TRAITS>::SmReInitialize();
SMKM_STORE_MGR<SM_TRAITS>::SmReadPickStore();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreContentsRundown();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreMgrCallback();
SMKM_STORE_MGR<SM_TRAITS>::SmStorePrepare();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreRequest();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreRequestEx();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreTerminate();
SMKM_STORE_MGR<SM_TRAITS>::SmSwapStore();
SMKM_STORE_MGR<SM_TRAITS>::SmTrimWsStore();
SMKM_STORE_MGR<SM_TRAITS>::SmUpdateMemoryConditions();
SMKM_STORE_MGR<SM_TRAITS>::SmWorkItemFree();
SMKM_STORE_MGR<SM_TRAITS>::SmWorkItemFreeResource();
SMKM_STORE_MGR<SM_TRAITS>::SmpPageEvict();
SPCallServerHandleAuthenticateCaller();
SPCallServerHandleCallbackPaintComplete$filt$0();
SPCallServerHandleCheckLicense();
SPCallServerHandleClepKdf();
SPCallServerHandleGetAppPolicyValue();
SPCallServerHandleIsAppLicensed();
SPCallServerHandleQueryPolicy();
SPCallServerHandleUpdatePolicies();
SPCallServerHandleWaitForDisplayWindow();
ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR::Compare();
ST_STORE<SM_TRAITS>::ST_PAGE_RECORD_GET();
ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR::Compare();
ST_STORE<SM_TRAITS>::StAcquireReadContext();
ST_STORE<SM_TRAITS>::StAddRemoveRegions();
ST_STORE<SM_TRAITS>::StCleanup();
ST_STORE<SM_TRAITS>::StCompactRegions();
ST_STORE<SM_TRAITS>::StCompactionFindEmptiest();
ST_STORE<SM_TRAITS>::StCompactionPerformEmergency();
ST_STORE<SM_TRAITS>::StCompactionPerformInMem();
ST_STORE<SM_TRAITS>::StCompactionPickPriority();
ST_STORE<SM_TRAITS>::StCompactionWorker();
ST_STORE<SM_TRAITS>::StCopyIoStats();
ST_STORE<SM_TRAITS>::StDeviceIoBuild();
ST_STORE<SM_TRAITS>::StDeviceIoIsFailed();
ST_STORE<SM_TRAITS>::StDeviceIoIssue();
ST_STORE<SM_TRAITS>::StDeviceWorkItemCleanup();
ST_STORE<SM_TRAITS>::StDmCheckForCompaction();
ST_STORE<SM_TRAITS>::StDmCleanup();
ST_STORE<SM_TRAITS>::StDmCombineBufferAddEntry();
ST_STORE<SM_TRAITS>::StDmCombineBufferProcess();
ST_STORE<SM_TRAITS>::StDmCombineLazyCleanup();
ST_STORE<SM_TRAITS>::StDmCombinePageEntry();
ST_STORE<SM_TRAITS>::StDmCombinePageRecords();
ST_STORE<SM_TRAITS>::StDmCombineRegion();
ST_STORE<SM_TRAITS>::StDmCombineTargetCompare();
ST_STORE<SM_TRAITS>::StDmComputeSpaceUsageForPriority();
ST_STORE<SM_TRAITS>::StDmCurrentRegionSet();
ST_STORE<SM_TRAITS>::StDmDeviceError();
ST_STORE<SM_TRAITS>::StDmDeviceIoCompletion();
ST_STORE<SM_TRAITS>::StDmDeviceIoTransfer();
ST_STORE<SM_TRAITS>::StDmEtaPerformIo();
ST_STORE<SM_TRAITS>::StDmEtaRefresh();
ST_STORE<SM_TRAITS>::StDmEtwPageRundown();
ST_STORE<SM_TRAITS>::StDmEtwRegionRundown();
ST_STORE<SM_TRAITS>::StDmGetSpaceStats();
ST_STORE<SM_TRAITS>::StDmGetStatsBitmap();
ST_STORE<SM_TRAITS>::StDmHandleDecompressionFailure();
ST_STORE<SM_TRAITS>::StDmInitialize();
ST_STORE<SM_TRAITS>::StDmInvalidateCurrentRegions();
ST_STORE<SM_TRAITS>::StDmIsCurrentRegion();
ST_STORE<SM_TRAITS>::StDmLazyRegionsWorker();
ST_STORE<SM_TRAITS>::StDmLazyWorkItemQueue();
ST_STORE<SM_TRAITS>::StDmPageAdd();
ST_STORE<SM_TRAITS>::StDmPageError();
ST_STORE<SM_TRAITS>::StDmPageRecordRemove();
ST_STORE<SM_TRAITS>::StDmPageRecordUnprotect();
ST_STORE<SM_TRAITS>::StDmPageRemove();
ST_STORE<SM_TRAITS>::StDmPageRetrieve();
ST_STORE<SM_TRAITS>::StDmPickRandomRegion();
ST_STORE<SM_TRAITS>::StDmRegionEvict();
ST_STORE<SM_TRAITS>::StDmRegionGetKeys();
ST_STORE<SM_TRAITS>::StDmRegionRemove();
ST_STORE<SM_TRAITS>::StDmReuseCurrentRegion();
ST_STORE<SM_TRAITS>::StDmSinglePageCopy();
ST_STORE<SM_TRAITS>::StDmSinglePageRetrieveSync();
ST_STORE<SM_TRAITS>::StDmSinglePageTransfer();
ST_STORE<SM_TRAITS>::StDmStart();
ST_STORE<SM_TRAITS>::StDmUpdateRegionLazyCleanup();
ST_STORE<SM_TRAITS>::StDmUpdateRegionsToCompactBitmap();
ST_STORE<SM_TRAITS>::StDmpCurrentRegionWrite();
ST_STORE<SM_TRAITS>::StDmpDummyPageRecordAllocate();
ST_STORE<SM_TRAITS>::StDmpSinglePageAdd();
ST_STORE<SM_TRAITS>::StDmpSinglePageFindSpace();
ST_STORE<SM_TRAITS>::StDmpSinglePageInsert();
ST_STORE<SM_TRAITS>::StDmpSinglePageLookup();
ST_STORE<SM_TRAITS>::StDmpSinglePageRetrieve();
ST_STORE<SM_TRAITS>::StDmpUpdateRegionState();
ST_STORE<SM_TRAITS>::StDrainReadContextList();
ST_STORE<SM_TRAITS>::StEmptyStore();
ST_STORE<SM_TRAITS>::StGetStats();
ST_STORE<SM_TRAITS>::StGetStatsWorker();
ST_STORE<SM_TRAITS>::StInitialize();
ST_STORE<SM_TRAITS>::StLazyWorkMgrQueueWork();
ST_STORE<SM_TRAITS>::StLazyWorkMgrResetIdle();
ST_STORE<SM_TRAITS>::StLazyWorkMgrRunExpiredWork();
ST_STORE<SM_TRAITS>::StLazyWorkMgrSetSchedule();
ST_STORE<SM_TRAITS>::StMapAndLockRegion();
ST_STORE<SM_TRAITS>::StMetaRegionsUpdate();
ST_STORE<SM_TRAITS>::StNpEnumBTreeNodes();
ST_STORE<SM_TRAITS>::StNpLeafDelete();
ST_STORE<SM_TRAITS>::StNpLeafPageIn();
ST_STORE<SM_TRAITS>::StNpLeafPageOut();
ST_STORE<SM_TRAITS>::StQueueCompaction();
ST_STORE<SM_TRAITS>::StRegionFindCompact();
ST_STORE<SM_TRAITS>::StRegionFindRepurpose();
ST_STORE<SM_TRAITS>::StRegionReadDereference();
ST_STORE<SM_TRAITS>::StRegionReadReference();
ST_STORE<SM_TRAITS>::StReleaseReadContext();
ST_STORE<SM_TRAITS>::StReleaseRegion();
ST_STORE<SM_TRAITS>::StStagingRegionFind();
ST_STORE<SM_TRAITS>::StStagingRegionIssueIo();
ST_STORE<SM_TRAITS>::StStart();
ST_STORE<SM_TRAITS>::StStoreWorkItemCleanup();
ST_STORE<SM_TRAITS>::StUnlockAndUnmapRegion();
ST_STORE<SM_TRAITS>::StWorkItemProcess();
ST_STORE<SM_TRAITS>::StpKeyCompare();
SUBTRACT_MAP_REGISTERS();
SaveNodeDistanceInformation();
SbpAddTransportToInstance();
SbpStartLanman();
SbpVmbusNotificationHandler();
SbpWaitForVmbus();
ScAnsiToUnicodeString();
ScanHexFormat();
SdbCloseDatabaseRead();
SdbFindFirstNamedTag();
SdbFindFirstStringIndexedTag();
SdbFindFirstTag();
SdbFindNextStringIndexedTag();
SdbFindNextTag();
SdbGetBinaryTagData();
SdbGetDatabaseID();
SdbGetDatabaseMatch();
SdbGetDatabaseMatchEx();
SdbGetEntryFlags();
SdbGetFirstChild();
SdbGetIndex();
SdbGetNextChild();
SdbGetPathCustomSdb();
SdbGetStringTagPtr();
SdbGetTagDataSize();
SdbGetTagFromTagID();
SdbGuestHostArchsToRuntimePlatformFlag();
SdbGuestTargetPlatformFlagsToRuntimePlatformFlags();
SdbInitDatabaseInMemory();
SdbMakeIndexKeyFromStringEx();
SdbOpenDatabaseEx();
SdbQueryDataExTagID();
SdbReadBinaryTag();
SdbReadDWORDTag();
SdbReadEntryInformation();
SdbReadGUIDTag();
SdbReadQWORDTag();
SdbReadWORDTag();
SdbReleaseDatabase();
SdbReleaseDatabase$filt$0();
SdbResolveDatabaseEx();
SdbTagIDToTagRef();
SdbTagRefToTagID();
SdbpBinarySearchFirst();
SdbpBinarySearchUnique();
SdbpCheckAllAttributes();
SdbpCheckAttribute();
SdbpCheckDll();
SdbpCheckExe();
SdbpCheckForMatch();
SdbpCheckFromVersion();
SdbpCheckKObject();
SdbpCheckMatchingDevice();
SdbpCheckMatchingDir();
SdbpCheckMatchingFiles();
SdbpCheckMatchingRegistry();
SdbpCheckMatchingRegistryEntry();
SdbpCheckMatchingRegistryValue();
SdbpCheckMatchingText();
SdbpCheckMatchingTextEntry();
SdbpCheckMatchingWildcardFiles();
SdbpCheckMatchingWildcardRegistry();
SdbpCheckMatchingWildcardRegistryEntry();
SdbpCheckOSKind();
SdbpCheckPackageAttributes();
SdbpCheckRuntimePlatform();
SdbpCheckRuntimePlatformImpl();
SdbpCheckRuntimePlatformV2Impl();
SdbpCheckUptoVersion();
SdbpCheckVersion();
SdbpCleanupLocalDatabaseSupport();
SdbpCloseLocalDatabaseEx();
SdbpCreateSearchDBContext();
SdbpCreateSearchPathPartsFromPath();
SdbpFindFirstIndexedWildCardTag();
SdbpFindLocalDatabaseByPDB();
SdbpFindMatcher();
SdbpFindMatchingName();
SdbpFindNextIndexedWildCardTag();
SdbpFindNextNamedTag();
SdbpFreePackageAttributes();
SdbpGetCustomSdbFileName();
SdbpGetDeviceDWORD();
SdbpGetExeEntryFlags();
SdbpGetFirstIndexedRecord();
SdbpGetIndex();
SdbpGetMappedStringFromTable();
SdbpGetMappedTagData();
SdbpGetMatchingTextAttributes();
SdbpGetNextIndexedRecord();
SdbpGetNextTagId();
SdbpGetPathAppPatch();
SdbpGetPathAppPatchPreRS3();
SdbpGetPathAppraiser();
SdbpGetPathCustomSdb();
SdbpGetPathCustomSdbPreRS3();
SdbpGetPathSystem();
SdbpGetProcessHistory();
SdbpGetProcessHostGuestArchitectures();
SdbpGetRegistryMatchingAttributes();
SdbpGetStringTableItemFromStringRef();
SdbpGetSystemSdbFilePath();
SdbpGetTagHeadSize();
SdbpInitializeMatchers();
SdbpInitializeSearchDBContext();
SdbpKeyToAnsiString();
SdbpMatchAcpi();
SdbpMatchBios();
SdbpMatchCpu();
SdbpMatchDeviceDWORD();
SdbpMatchDeviceString();
SdbpMatchList();
SdbpMatchOem();
SdbpMatchOne();
SdbpMatchOsVersion();
SdbpOpenCompressedDatabase();
SdbpOpenDatabaseInMemory();
SdbpOpenLocalDatabaseEx();
SdbpQueryAppCompatFlagsByExeID();
SdbpReadMappedData();
SdbpReadStringRef();
SdbpReadTagData();
SdbpReleaseSearchDBContext();
SdbpResolveMatchingFile();
SdbpSearchDB();
SdbpValidateAndApplyCompatFlags();
SddlAddAccessFilterAce();
SddlAddMandatoryAce();
SddlAddProcessTrustLabelAce();
SddlAddScopedPolicyIDAce();
SddlBaseInitialize();
SddlFilterSacl();
SddlpAlloc();
SddlpFree();
SddlpReAlloc();
SddlpUuidFromString();
SddlpUuidToString();
SeAccessCheck();
SeAccessCheckByType();
SeAccessCheckByTypeWithAdminlessChecks();
SeAccessCheckEx();
SeAccessCheckFromState();
SeAccessCheckFromStateEx();
SeAccessCheckWithHint();
SeAccessCheckWithHintWithAdminlessChecks();
SeAdjustAccessStateForAccessConstraints();
SeAdjustAccessStateForTrustLabel();
SeAdjustObjectSecurity();
SeAdtRegistryValueChangedAuditAlarm();
SeAppendPrivileges();
SeAssignPrimaryToken();
SeAssignSecurity();
SeAssignSecurityEx();
SeAssignSecurityEx2();
SeAssignWorldSecurityDescriptor();
SeAuditBootConfiguration();
SeAuditFipsCryptoSelftests();
SeAuditHandleCreation();
SeAuditHandleDuplication();
SeAuditHardLinkCreation();
SeAuditHardLinkCreationWithTransaction();
SeAuditHeaderRequired();
SeAuditPlugAndPlay();
SeAuditProcessCreation();
SeAuditProcessExit();
SeAuditSystemTimeChange();
SeAuditTransactionStateChange();
SeAuditingAnyFileEventsWithContext();
SeAuditingAnyFileEventsWithContextEx();
SeAuditingFileEvents();
SeAuditingFileEventsWithContext();
SeAuditingFileEventsWithContextEx();
SeAuditingFileOrGlobalEvents();
SeAuditingHardLinkEvents();
SeAuditingHardLinkEventsWithContext();
SeAuditingWithTokenForSubcategory();
SeCaptureAcl();
SeCaptureAtomTableCallout();
SeCaptureLuidAndAttributesArray();
SeCaptureObjectAttributeSecurityDescriptorPresent();
SeCaptureObjectTypeList();
SeCaptureSecurityDescriptor();
SeCaptureSecurityQos();
SeCaptureSid();
SeCaptureSidAndAttributesArray();
SeCaptureSubjectContext();
SeCaptureSubjectContextEx();
SeCaptureUnicodeStringStructures();
SeCheckAuditPrivilege();
SeCheckForCriticalAceRemoval();
SeCheckPrivilegedObject();
SeClearLearningModeObjectInformation();
SeCloseObjectAuditAlarm();
SeCloseObjectAuditAlarmForNonObObject();
SeCodeIntegrityInitializePolicy();
SeCodeIntegrityQueryInformation();
SeCodeIntegrityQueryPolicyInformation();
SeCodeIntegritySetInformationProcess();
SeCodeIntegritySetInformationProcess$filt$0();
SeCompareSigningLevels();
SeComputeAutoInheritByObjectType();
SeComputeAutoInheritByObjectTypeEx();
SeComputeCreatorDeniedRights();
SeComputeQuotaInformationSize();
SeConvertSecurityDescriptorToStringSecurityDescriptor();
SeConvertSidToStringSid();
SeConvertStringSecurityDescriptorToSecurityDescriptor();
SeConvertStringSidToSid();
SeCopyClientToken();
SeCreateAccessState();
SeCreateAccessStateEx();
SeCreateClientSecurity();
SeCreateClientSecurityEx();
SeCreateClientSecurityFromSubjectContext();
SeCreateClientSecurityFromSubjectContextEx();
SeDeassignPrimaryToken();
SeDeassignSecurity();
SeDefaultObjectMethod();
SeDeleteAccessState();
SeDeleteObjectAuditAlarm();
SeDeleteObjectAuditAlarmWithTransaction();
SeDuplicateTokenAndAddOriginClaim();
SeEtwEnableCallback();
SeEtwWriteKMCveEvent();
SeExamineGlobalSacl();
SeExamineSacl();
SeExchangePrimaryToken();
SeFastTraverseCheck();
SeFilterToken();
SeFreeCapturedObjectTypeList();
SeFreePrivileges();
SeGetCachedSigningLevel();
SeGetImageRequiredSigningLevel();
SeGetLinkedToken();
SeGetLogonSessionToken();
SeGetTokenControlInformation();
SeGetTokenDeviceMap();
SeGetTrustLabelAce();
SeImpersonateClient();
SeImpersonateClientEx();
SeInitServerSilo();
SeInitSystem();
SeIsAppContainerOrIdentifyLevelContext();
SeIsLearningModePermissiveEnabled();
SeIsParentOfChildAppContainer();
SeIsSystemContext();
SeIsTokenAssignableToProcess();
SeLocateProcessImageName();
SeLockSubjectContext();
SeLogAccessFailure();
SeMakeAnonymousLogonToken();
SeMakeAnonymousLogonTokenNoEveryone();
SeMakeSystemToken();
SeMarkLogonSessionForTerminationNotification();
SeMarkLogonSessionForTerminationNotificationEx();
SeMaximumAuditMask();
SeMaximumAuditMaskFromGlobalSacl();
SeMinTcbLowering();
SeObjectCreateSaclAccessBits();
SeObjectReferenceAuditAlarm();
SeOpenObjectAuditAlarm();
SeOpenObjectAuditAlarmForNonObObject();
SeOpenObjectAuditAlarmWithTransaction();
SeOpenObjectForDeleteAuditAlarm();
SeOpenObjectForDeleteAuditAlarmWithTransaction();
SeOperationAuditAlarm();
SePrivilegeCheck();
SePrivilegeObjectAuditAlarm();
SePrivilegePolicyCheck();
SePrivilegedServiceAuditAlarm();
SeQueryAuthenticationIdToken();
SeQueryHSTIResults();
SeQueryHSTIResults$filt$0();
SeQueryInformationToken();
SeQueryMandatoryLabel();
SeQueryMandatoryPolicyToken();
SeQuerySecureBootPlatformManifest();
SeQuerySecureBootPolicyValue();
SeQuerySecurityAccessMask();
SeQuerySecurityAttributesToken();
SeQuerySecurityAttributesTokenAccessInformation();
SeQuerySecurityDescriptorInfo();
SeQueryServerSiloToken();
SeQuerySessionIdToken();
SeQuerySessionIdTokenEx();
SeQuerySigningPolicy();
SeQuerySigningPolicyWorker();
SeQueryTokenTrustLink();
SeQueryTokenTrustSid();
SeQueryTrustedPlatformModuleInformation();
SeQueryTrustedPlatformModuleInformation$filt$0();
SeQueryTrustedPlatformModuleInformation$filt$1();
SeQueryUserSidToken();
SeRegisterElamCertResources();
SeRegisterImageVerificationCallback();
SeRegisterLogonSessionTerminatedRoutine();
SeRegisterLogonSessionTerminatedRoutineEx();
SeRegisterObjectTypeMandatoryPolicy();
SeReleaseAcl();
SeReleaseImageValidationContext();
SeReleaseLuidAndAttributesArray();
SeReleaseSecurityDescriptor();
SeReleaseSid();
SeReleaseSidAndAttributesArray();
SeReleaseSubjectContext();
SeReportSecurityEvent();
SeReportSecurityEventWithSubCategory();
SeRmInitPhase1();
SeRmReferenceFindCapName();
SeSecureBootQueryInformation();
SeSecureBootQueryInformation$filt$0();
SeSecureBootQueryInformation$filt$1();
SeSecureBootQueryInformation$filt$2();
SeSecureBootRegisterPolicy();
SeSecurityAttributePresent();
SeSecurityDescriptorChangedAuditAlarm();
SeSetAccessStateGenericMapping();
SeSetAuditParameter();
SeSetLearningModeObjectInformation();
SeSetMandatoryPolicyToken();
SeSetPrivateNameSpaceToken();
SeSetSecurityAccessMask();
SeSetSecurityAttributesToken();
SeSetSecurityAttributesTokenEx();
SeSetSecurityDescriptorInfo();
SeSetSecurityDescriptorInfoEx();
SeSetSessionIdToken();
SeSetTokenTrustLink();
SeSetVirtualizationToken();
SeShouldCheckForAccessRightsFromParent();
SeShutdownServerSilo();
SeSinglePrivilegeCheck();
SeSinglePrivilegeCheckEx();
SeSrpAccessCheck();
SeSubProcessToken();
SeTokenCanImpersonate();
SeTokenDefaultDaclChangedAuditAlarm();
SeTokenFromAccessInformation();
SeTokenGetNoChildProcessRestricted();
SeTokenImpersonationLevel();
SeTokenIsAdmin();
SeTokenIsElevated();
SeTokenIsNoChildProcessRestrictionEnforced();
SeTokenIsRestricted();
SeTokenIsWriteRestricted();
SeTokenSetNoChildProcessRestricted();
SeTokenType();
SeUnlockSubjectContext();
SeUnregisterImageVerificationCallback();
SeUnregisterLogonSessionTerminatedRoutine();
SeUnregisterLogonSessionTerminatedRoutineEx();
SeValidSecurityDescriptor();
SeValidateImageData();
SeValidateImageHeader();
SeValidateSecurityQos();
SecureDump_EncryptSymmetricKeyWithPublicKey();
SecureDump_Encrypt_DmpData();
SecureDump_GetSecureDumpSettings();
SecureDump_Get_SecureDumpHeader();
SecureDump_Init();
SecureDump_LogErrorEvent();
SecureDump_PrepareForInit();
SecureDump_ReadRegistry();
SecureDump_SymmetricEncryptionSetup();
SendCaptureStateNotificationsWorker();
SepAccessCheck();
SepAccessCheckAndAuditAlarm();
SepAccessCheckAndAuditAlarmWithAdminlessChecks();
SepAccessCheckEx();
SepAccessStatusHasAccessDenied();
SepAcquireOrderedReadLocks();
SepAddLuidToIndexEntry();
SepAddTokenLogonSession();
SepAddTokenOriginClaim();
SepAdjustAccessStateForConstraints();
SepAdjustGroups();
SepAdjustPrivileges();
SepAdtAuditObjectAccessWithContext();
SepAdtAuditPrivilegeUseWithContext();
SepAdtAuditThisEventByCategoryWithContext();
SepAdtAuditThisEventWithContext();
SepAdtAuditablePrivilege();
SepAdtCheckPrivilegeForSensitivity();
SepAdtClassifyObjectIntoSubCategory();
SepAdtCloseObjectAuditAlarm();
SepAdtCopyToLsaSharedMemory();
SepAdtDeleteObjectAuditAlarm();
SepAdtDetermineInsertQueue();
SepAdtGenerateDiscardAudit();
SepAdtIncorporatePerUserPolicy();
SepAdtInitLsaDeadEventForNonPagedList();
SepAdtInitializeAuditingOptions();
SepAdtInitializeBounds();
SepAdtInitializeCrashOnFail();
SepAdtInitializePrivilegeAuditing();
SepAdtLogAuditFailureEvent();
SepAdtLogAuditRecord();
SepAdtMarshallAuditRecord();
SepAdtObjectReferenceAuditAlarm();
SepAdtOpenEtwReadyEvent();
SepAdtOpenObjectAuditAlarm();
SepAdtOpenObjectForDeleteAuditAlarm();
SepAdtOpenRegAndSetupNotification();
SepAdtPrivilegeObjectAuditAlarm();
SepAdtPrivilegedServiceAuditAlarm();
SepAdtRegNotificationCallback();
SepAdtSecurityDescriptorChangedAuditAlarm();
SepAdtStagingEvent();
SepAdtTokenRightAdjusted();
SepAllocateAndInitializeCachedHandleEntry();
SepAppendAceToTokenDefaultDacl();
SepAppendAceToTokenObjectAcl();
SepAppendAdminAceToTokenAcl();
SepAppendDefaultDacl();
SepAppendPrimaryGroup();
SepAssemblePrivileges();
SepAuditAssignPrimaryToken();
SepAuditFailed();
SepAuditFailedRaisedIrql();
SepAuditTypeList();
SepAuditingEnabledForSubcategory();
SepAuditingForSubCategory();
SepBlockAccessForLogonSession();
SepBuildCapPolicyTable();
SepBuildCapeSecurityDescriptor();
SepBuildDaclWithCriticalAces();
SepBuildDefaultCap();
SepBuildDefaultCape();
SepBuildObjectSecurityDescriptor();
SepCanTokenMatchAllPackageSid();
SepCaptureAuditPolicy();
SepCaptureFqbnArray();
SepCaptureHandles();
SepCaptureInt64Array();
SepCaptureOctetStringArray();
SepCaptureTokenSecurityAttributesAndOperationsInformation();
SepCaptureTokenSecurityAttributesInformation();
SepCaptureTokenSecurityOperations();
SepCaptureUnicodeStringArray();
SepCheckAcl();
SepCheckAndCopySelfRelativeSD();
SepCheckCapabilities();
SepCheckCreateLowBox();
SepCheckForCriticalAceRemoval();
SepCleanupLUIDDeviceMapDirectory();
SepCleanupMarkedForDeletionEntries();
SepCloseCachedTokenHandles();
SepCommonAccessCheckEx();
SepCommonAccessCheckExWithAdminlessChecks();
SepCompareClaimAttributes();
SepCompareSidAndAttributeArrays();
SepCompareSidValuesBlocks();
SepComputeSidSignature();
SepConcatenatePrivileges();
SepConstrainByConstraintMask();
SepConstrainByMandatory();
SepConvertToOwnTokenClaims();
SepConvertTokenPrivileges();
SepConvertTokenPrivilegesToLuidAndAttributes();
SepCopyClientTokenAndSetSilo();
SepCopyObjectTypeList();
SepCopyTokenAccessInformation();
SepCopyTokenIntegrity();
SepCreateAccessStateFromSubjectContext();
SepCreateClaimAttributes();
SepCreateClientSecurityEx();
SepCreateImpersonationTokenDacl();
SepCreateLogonSessionTrack();
SepCreateSidValuesBlock();
SepCreateToken();
SepCreateTokenEx();
SepDeReferenceLogonSession();
SepDeReferenceLogonSessionDirect();
SepDeReferenceSharedSidEntries();
SepDeleteAccessState();
SepDeleteClaimAttributes();
SepDeleteLogonSessionClaims();
SepDeleteLogonSessionSidValues();
SepDeleteLogonSessionTrack();
SepDeleteSessionLowboxEntries();
SepDeleteTokenUserAndGroups();
SepDeleteUnreferencedLogonSessionsInSilo();
SepDereferenceCachedHandlesEntry();
SepDereferenceLowBoxNumberEntry();
SepDereferenceLuidToIndexEntry();
SepDereferenceSidValuesBlock();
SepDesktopAppModifyTokenBreakaway();
SepDesktopAppxSubProcessToken();
SepDetermineGlobalTableCheckNeededForQuery();
SepDuplicateClaimAttributes();
SepDuplicateLogonSessionReference();
SepDuplicateSid();
SepDuplicateToken();
SepDuplicateTokenClaims();
SepDuplicateTokenUserAndGroups();
SepEqualAsciiWideStringCaseInSensitive();
SepEvaluateAdminlessAccessCheckResults();
SepExamineGlobalSaclEx();
SepExamineSaclEx();
SepExpandDynamic();
SepExpandSingletonArrays();
SepFilterCheck();
SepFilterPrivilegeAudits();
SepFilterToDiscretionary();
SepFilterToken();
SepFindMatchingCachedHandlesEntry();
SepFindMatchingLowBoxNumberEntries();
SepFindMatchingLowBoxNumberEntry();
SepFindMatchingLuidEntry();
SepFindSharedSidEntry();
SepFlattenAcl();
SepFreeCapturedTokenSecurityAttributesInformation();
SepFreeDefaultDacl();
SepFreePrimaryGroup();
SepFreeResourceInfo();
SepFreeTokenCapabilities();
SepGetAnonymousToken();
SepGetCachedHandlesEntry();
SepGetCurrentLogLevel();
SepGetDefaultsSubjectContext();
SepGetLearningModeObjectInformation();
SepGetLogonSessionAccountInfo();
SepGetLowBoxNumberEntry();
SepGetProcUniqueLuidAndIndexFromAttributeInfo();
SepGetProcUniqueLuidAndIndexFromToken();
SepGetScopedPolicySid();
SepGetSidManagementActionName();
SepGetSidValuesDump();
SepGetSingletonEntryFromIndexNumber();
SepGetStackTraceHash();
SepGetTokenAccessInformationBufferSize();
SepGetTokenSessionMapEntry();
SepHasCriticalAcePresent();
SepHasCriticalAcesRemoved();
SepIdAssignableAsGroup();
SepIdAssignableAsOwner();
SepImageVerificationCallbackPreProcess();
SepImageVerificationCallbackWorker();
SepInformFileSystemsOfDeletedLogon();
SepInformLsaOfDeletedLogon();
SepInitProcessAuditSd();
SepInitQuerySigningPolicyExt();
SepInitSingletonEntry();
SepInitSystemDacls();
SepInitializationPhase0();
SepInitializationPhase1();
SepInitializeAuthorizationCallbacks();
SepInitializeCodeIntegrity();
SepInitializeLowBoxNumberTable();
SepInitializeSharedSidMap();
SepInitializeSingletonAttributesStructures();
SepInitializeWorkList();
SepInsertOrReferenceSharedSidEntries();
SepInternalFillNoAttribs();
SepInternalQuerySecurityAttributesTokenEx();
SepInternalSetSecurityAttributesToken();
SepIsAclEqual();
SepIsAdminlessAccessFailure();
SepIsCapabilitySid();
SepIsChildTokenByPointer();
SepIsImageInMinTcbList();
SepIsImpersonationAllowedDueToCapability();
SepIsLockedDown();
SepIsLpacCapabilitySid();
SepIsMinTCB();
SepIsNgenImage();
SepIsOptionPresent();
SepIsPackageSid();
SepIsParentOfChildAppContainer();
SepIsRemovableStorageDevice();
SepIsSiblingTokenByPointer();
SepIsSidEqual();
SepIsValidProcUniqueLuid();
SepLengthSidAndAttributesArray();
SepLinkLogonSessions();
SepLoadNgenLocations();
SepLocateTokenIntegrity();
SepLocateTokenTrustLevel();
SepLogAdminlessAccessFailure();
SepLogAdminlessAccessFailureLearningModeEvent();
SepLogLpacAccessFailure();
SepLogTokenSidManagement();
SepLogUnmatchedSessionFlagImpersonationAttempt();
SepLpacCausedAccessFailure();
SepMakeLogonSessionsSiblings();
SepMakeTokenEffectiveOnly();
SepMandatoryIntegrityCheck();
SepMandatorySubProcessToken();
SepMandatoryToDiscretionary();
SepMatchCapability();
SepMatchPackage();
SepMaximumAccessCheck();
SepMaximumAccessCheckEx();
SepMergeObjectTypeListAccesses();
SepModifyTokenPolicyCounter();
SepNewTokenAsRestrictedAsProcessToken();
SepNormalAccessCheck();
SepNormalAccessCheckEx();
SepNotifyFileSystems();
SepParseElamCertResources();
SepPotentialGlobalTableAttribute();
SepPrivilegeCheck();
SepProbeAndCaptureString_U();
SepProbeAndCaptureString_U$filt$0();
SepQueryNameString();
SepQueryTypeString();
SepQueueWorkItem();
SepReadAndInsertCaps();
SepReadAndPopulateCapes();
SepReadSingleCap();
SepReconcileTrustSidWithProcessProtection();
SepRefDerefLuidToIndexEntryIfNecessary();
SepReferenceCachedTokenHandles();
SepReferenceLogonSession();
SepReferenceLogonSessionSilo();
SepReferenceLuidToIndexEntry();
SepReferenceTokenByHandle();
SepReferenceTokenUsingPseudoHandle();
SepRegOpenKey();
SepRegQueryDwordValue();
SepRegQueryValue();
SepReleaseAuditPolicy();
SepReleaseOrderedReadLocks();
SepReleaseTokenSecurityAttributesAndOperationsInformation();
SepRemoveAceFromTokenDefaultDacl();
SepRemoveDisabledGroupsAndPrivileges();
SepRemoveTokenLogonSession();
SepRmAddLogonSessionInfoWrkr();
SepRmCallLsa();
SepRmCapPoolExpand();
SepRmCapUpdateWrkr();
SepRmCleanupRmLsaState();
SepRmCommandServerThread();
SepRmCreateLogonSessionWrkr();
SepRmDbInitialization();
SepRmDeleteLogonSessionWrkr();
SepRmDereferenceCapTable();
SepRmDestroyCapTable();
SepRmDispatchDataToLsa();
SepRmFetchGlobalSacl();
SepRmGlobalSaclFind();
SepRmGlobalSaclSetWrkr();
SepRmInteractiveLogoffLogonSessionCompletedWrkr();
SepRmInteractiveLogoffLogonSessionWrkr();
SepRmLsaConnectRequest();
SepRmMakeLogonSessionsSiblingsWrkr();
SepRmProcessCreationCommandLineAuditSettingsWrkr();
SepRmReferenceFindCap();
SepRmSetAuditEventWrkr();
SepRmSetSharedUserSessionWrkr();
SepRmValidateProcUniqueLuidWrkr();
SepRmVerifyLsaProtectionLevel();
SepSDContainsAttributeACE();
SepScheduleImageVerificationCallbacks();
SepSecureBootBuildRules();
SepSecureBootCheckForUpdates();
SepSecureBootCorrectBcd();
SepSecureBootFindMatchingRegistryRule();
SepSecureBootGetPolicyDefaultValue();
SepSecureBootGetPolicyValueByRef();
SepSecureBootGetQWordPolicyValue();
SepSecureBootManifestCompareElements();
SepSecureBootSetRegistryKey();
SepSecureBootUpdateBcdDataForRule();
SepSecureBootValidateBcdDataAgainstBcdRule();
SepSecurityDescriptorStrictLength();
SepSetAuditInfoForObjectType();
SepSetLogonSessionToken();
SepSetProcessUniqueAttribute();
SepSetRuntimeUpdatableSigningLevel();
SepSetServerSiloToken();
SepSetSingletonEntry();
SepSetSystemPaths();
SepSetTokenAllApplicationPackagesPolicy();
SepSetTokenBnoIsolation();
SepSetTokenCachedHandles();
SepSetTokenCapabilities();
SepSetTokenClaims();
SepSetTokenLowboxNumber();
SepSetTokenPackage();
SepSetTokenSessionById();
SepSetTokenTrust();
SepSetTokenUserAndGroups();
SepSetTrustLevelForProcessToken();
SepShouldSetDelinkFlags();
SepSidFromProcessProtection();
SepSidInSidAndAttributes();
SepSidInToken();
SepSidInTokenSidHash();
SepStopReferencingLogonSession();
SepTokenDeleteMethod();
SepTokenFromAccessInformation();
SepTokenInitialization();
SepTokenIsOwner();
SepTokenPrivilegeCount();
SepTrustLevelCheck();
SepTrustToDiscretionary();
SepUpdateLogonSessionTrack();
SepUpdateSiloInClientSecurity();
SepValidLabelSubjectContext();
SepValidOwnerSubjectContext();
SepValidateAndCopyGlobalEntry();
SepValidateCAPIDs();
SepValidateReferencedCachedHandles();
SepVariableInitialization();
SepVerifyDesktopAppPolicyOverrideCaller();
SepVerifyDesktopAppxImage();
SepVerifyDesktopAppxPackageName();
SepZwLockRegistryKey();
SessionIsInteractive();
SetFailureLocation();
SetVacb();
SiBootEntryGetNtFilePath();
SiDisambiguateSystemDevice();
SiGetBiosSystemDisk();
SiGetBiosSystemPartition();
SiGetBootDeviceName();
SiGetBootDeviceNameFromRegistry();
SiGetDeviceNumberInformation();
SiGetDiskPartitionInformation();
SiGetDriveLayoutInformation();
SiGetEfiBootEntryById();
SiGetEfiSystemDevice();
SiGetEspFromFirmware();
SiGetFirmwareSystemPartition();
SiGetRegistryValue();
SiGetSystemDeviceName();
SiGetSystemDisk();
SiGetSystemPartition();
SiIsValidDiskDevice();
SiIsValidWindowsBootEntry();
SiIsWinPEBoot();
SiIssueSynchronousIoctl();
SiOpenArcNameObject();
SiOpenRegistryKey();
SiQuerySystemInformationString();
SiTranslateSymbolicLink();
SiValidateSystemPartition();
SimplifyFilter();
SkIsSecureKernel();
SmAcquireReleaseCharges();
SmAcquireReleaseResAvailForRead();
SmAlloc();
SmAllocWrapper();
SmArrayGrow();
SmBinaryArrayGrow();
SmCalcIoWorkItemSize();
SmCrAuthEncrypt();
SmCrEncCleanup();
SmCrEncInitialize();
SmCrEncStart();
SmCrGenRandom();
SmCreateEvent();
SmDecompressBuffer();
SmEtwEnableCallback();
SmEtwEnabled();
SmEtwLogRegionOp();
SmEtwLogStoreCorruption();
SmEtwLogStoreOp();
SmEtwLogStoreStateChange();
SmFatalHeapCorruptionDumpCallback();
SmFatalPageErrorDumpCallback();
SmFirstTimeInit();
SmFixSingleBitCorruption();
SmFpAllocate();
SmFpCleanup();
SmFpFree();
SmFpPreAllocate();
SmFree();
SmFreeWrapper();
SmGetRegistrationInfo();
SmGlobalsInitialize();
SmHpBufferAlloc();
SmHpBufferCleanup();
SmHpBufferProtectEx();
SmHpBufferUpdateFullness();
SmHpChunkAlloc();
SmHpChunkFree();
SmHpChunkHeapCleanup();
SmHpChunkHeapInitialize();
SmHpChunkHeapProtect();
SmHpChunkUnprotect();
SmHpUnprotectListNeighbors();
SmInitSystem();
SmIoRequestComplete();
SmIsCompressionProcess();
SmIssueIo();
SmKeyConvert();
SmKmAllocateMdlForLock();
SmKmCleanup();
SmKmEtwAppendObjectName();
SmKmEtwAppendProductName();
SmKmEtwLogStoreChange();
SmKmEtwLogStoreRundown();
SmKmEtwLogStoreStats();
SmKmFileInfoCleanup();
SmKmFileInfoDuplicate();
SmKmFileInfoGetPath();
SmKmFileInfoInit();
SmKmFreeMdlForLock();
SmKmGenericCompletion();
SmKmGetStoreList();
SmKmInitialize();
SmKmIsVolumeIoPossible();
SmKmIssueFileIo();
SmKmIssueIo();
SmKmIssueVolumeIo();
SmKmKeyGenGenerate();
SmKmKeyGenKeyDelete();
SmKmKeyGenKeyFind();
SmKmKeyGenLoadKey();
SmKmKeyGenNewKey();
SmKmKeyGenStart();
SmKmProbeAndLockAddress();
SmKmRegParamsLoad();
SmKmSendDeviceControl();
SmKmSendUsageNotification();
SmKmSqmAddToStream();
SmKmStoreAdd();
SmKmStoreCreatePrepare();
SmKmStoreDelete();
SmKmStoreDeleteWhenEmpty();
SmKmStoreDeleteWhenEmptyWorker();
SmKmStoreFileCreate();
SmKmStoreFileCreateForIoType();
SmKmStoreFileDelete();
SmKmStoreFileGetExtents();
SmKmStoreFileMakeSecurityDescriptor();
SmKmStoreFileOpenVolume();
SmKmStoreFileWriteHeader();
SmKmStoreHelperCheckWaitCommand();
SmKmStoreHelperCleanup();
SmKmStoreHelperCommandCleanup();
SmKmStoreHelperCommandProcess();
SmKmStoreHelperSendCommand();
SmKmStoreHelperStart();
SmKmStoreHelperWaitForCommand();
SmKmStoreHelperWorker();
SmKmStoreRefFromStoreIndex();
SmKmStoreReference();
SmKmStoreReferenceEx();
SmKmStoreTerminateWorker();
SmKmUnlockMdl();
SmKmVirtualLockContextIncreaseWsMin();
SmKmVirtualLockCtxLockMemory();
SmKmVirtualLockCtxMemoryUnlocked();
SmKmVolumeQueryUniqueId();
SmMapPage();
SmPageRead();
SmPerformStoreSwapOperation();
SmPrepareForFatalHeapCorruption();
SmPrepareForFatalPageError();
SmProcessCompressionInfoRequest();
SmProcessConfigRequest();
SmProcessCreateRequest();
SmProcessDeleteRequest();
SmProcessListRequest();
SmProcessListRequestExtended();
SmProcessQueryStoreStats();
SmProcessRegistrationRequest();
SmProcessResizeRequest();
SmProcessStatsRequest();
SmProcessStoreMemoryPriorityRequest();
SmProcessSystemStoreTrimRequest();
SmQueryRegistry();
SmQueryStoreCommitUsage();
SmQueryStoreInformation();
SmRegistrationCtxInitialize();
SmRegistrationCtxStart();
SmRegistrationInfoFill();
SmRereferenceProcessObject();
SmSanitizeString();
SmSetStoreInformation();
SmSetThreadPagePriority();
SmSetThreadSystemPagePriority();
SmStoreCompressionStart();
SmStoreCompressionStop();
SmStoreCreate();
SmStoreDelete();
SmStoreExistsForProcess();
SmStorePhysicalRequestIssue();
SmStoreResize();
SmStoreSetProcessVaRanges();
SmSwapStore();
SmUniqueIdParseProductName();
SmWaitForSyncIo();
SmcCacheAdd();
SmcCacheCleanup();
SmcCacheCreatePrepare();
SmcCacheDelete();
SmcCacheInitialize();
SmcCacheManagerStart();
SmcCacheReference();
SmcCacheRemove();
SmcCacheStart();
SmcGetCacheStats();
SmcProcessCreateRequest();
SmcProcessDeleteRequest();
SmcProcessListRequest();
SmcProcessResizeRequest();
SmcProcessStatsRequest();
SmcProcessStoreCreateRequest();
SmcProcessStoreDeleteRequest();
SmcStoreCreate();
SmcStoreDelete();
SmcStoreEntryFind();
SmcStorePlacementGet();
SmcStoreResize();
SmcStoreSlotAbort();
SmcStoreSlotCommit();
SmcStoreSlotReserve();
SmcVolumePnpNotification();
SmpDeviceIoCompletion();
SmpDirtyStoreCreate();
SmpFlushStorePages();
SmpFpAllocateResource();
SmpFpReleaseResource();
SmpFpWaitForResource();
SmpIoCompletionApc();
SmpKeyedStoreCreate();
SmpKeyedStoreEntryGet();
SmpKeyedStoreReference();
SmpKeyedStoreSetVaRanges();
SmpPageWrite();
SmpProcessQueryStoreStats();
SmpStoreMgrCallback();
SmpSystemStoreCreate();
SmpUtilsGetControlDevice();
SpiInit();
SpiMax311BufferRxData();
SpiMax311GetByte();
SpiMax311InitializePort();
SpiMax311PutByte();
SpiMax311RxReady();
SpiMax311SetBaud();
SpiMax311TxEmpty();
SpiSend16();
StEtaCleanup();
StEtaHelper::StartHelper();
StEtaInitialize();
StEtaIoStart();
StEtaStart();
StIoCountsMovePeriod();
StLcBucketsCopy();
StLcInitialize();
StLockTryAcquireExclusive();
StRtlIoStorInfoSetNvCachePriority();
StartFirstUserProcess();
StringCbCatW();
StringCbCopyNW();
StringCbLengthW();
StringCchCopyNW();
StringCchPrintfExW();
StringCchPrintfW();
StringCopyWorkerW();
StringExHandleOtherFlagsW();
StringListContains();
StringListElementSubstringMatch();
StringToGuidNoBrackets();
StringVPrintfWorkerW();
SubstringMatch();
SwapContext();
SwapSplayLinks();
SymCryptCpuFeaturesNeverPresent();
SymCryptCpuFeaturesNeverPresentEnvWindowsKernelmodeWin8_1nLater();
SymCryptDetectCpuFeaturesByCpuid();
SymCryptFatal();
SymCryptFatalEnvWindowsKernelmodeWin8_1nLater();
SymCryptFatalIntercept();
SymCryptInit();
SymCryptInitEnvCommon();
SymCryptInitEnvWindowsKernelmodeWin8_1nLater();
SymCryptMarvin32();
SymCryptMarvin32ExpandSeed();
SymCryptParallelHashProcess();
SymCryptParallelHashProcess_serial();
SymCryptParallelHashSetNextWork();
SymCryptParallelSha256Append();
SymCryptParallelSha256AppendBlocks_xmm();
SymCryptParallelSha256AppendBlocks_ymm();
SymCryptParallelSha256AppendBytes_serial();
SymCryptParallelSha256Init();
SymCryptParallelSha256Process();
SymCryptParallelSha256Result1();
SymCryptParallelSha256Result2();
SymCryptParallelSha256ResultDone();
SymCryptRestoreXmm();
SymCryptRestoreXmmEnvWindowsKernelmodeWin8_1nLater();
SymCryptRestoreYmm();
SymCryptRestoreYmmEnvWindowsKernelmodeWin8_1nLater();
SymCryptSaveXmm();
SymCryptSaveXmmEnvWindowsKernelmodeWin8_1nLater();
SymCryptSaveYmm();
SymCryptSaveYmmEnvWindowsKernelmodeWin8_1nLater();
SymCryptSha256();
SymCryptSha256Append();
SymCryptSha256AppendBlocks();
SymCryptSha256AppendBlocks_shani();
SymCryptSha256AppendBlocks_ul1();
SymCryptSha256Init();
SymCryptSha256Result();
SymCryptWipe();
SymCryptWipeAsm();
SysCtxCloseMachine();
SysCtxGetCachedContextBaseKey();
SysCtxInternalEnumSubkeyCallback();
SysCtxRegCreateTree();
SysCtxRegOpenCurrentUserKey();
SysCtxRegOpenKey();
SyspartDirectGetFirmwareSystemPartition();
SyspartDirectGetSystemDisk();
SyspartDirectGetSystemPartition();
SyspartGetFirmwarePartition();
SyspartGetSystemPartition();
TelemetryCoverageStringHashInternal();
TelemetryCoverageTableLocateInternal();
TelemetryCoverageValidateName();
TimeToDaysAndFraction();
TlgAggregateFlush();
TlgAggregateInternalFlushTimerCallbackKernelMode();
TlgAggregateInternalFlushWorkItemRoutineKernelMode();
TlgAggregateInternalProviderCallback();
TlgAggregateInternalRegisteredProviderEtwCallback();
TlgCreateSid();
TlgCreateSz();
TlgCreateWsz();
TlgDefineProvider_annotation__TlgBootProviderProv();
TlgDefineProvider_annotation__TlgCmpTraceLoggingHandleProv();
TlgDefineProvider_annotation__TlgLiveDumpTraceLoggingProviderProv();
TlgDefineProvider_annotation__TlgMiTraceHandleProv();
TlgDefineProvider_annotation__TlgPnpTraceLoggingHandleProv();
TlgDefineProvider_annotation__TlgPopTraceHandleProv();
TlgDefineProvider_annotation__TlgRtlpCapChkTraceLoggingProviderProv();
TlgDefineProvider_annotation__TlgSeTraceLoggingHandleProv();
TlgDefineProvider_annotation__TlgSysEnvTraceLoggingProviderProv();
TlgDefineProvider_annotation__TlgTRACE_PROVIDERProv();
TlgDefineProvider_annotation__TlgTlgAggregateInternalProviderProv();
TlgDefineProvider_annotation__TlgTlgCoverageProvRegHandleProv();
TlgDefineProvider_annotation__TlgTlgKernelProvRegHandleProv();
TlgDefineProvider_annotation__TlgTlgPsProvRegHandleProv();
TlgDefineProvider_annotation__TlgTtmTelemetryHandleProv();
TlgDefineProvider_annotation__TlgTtmTraceHandleProv();
TlgDefineProvider_annotation__TlgVslpIumTelemetryProviderProv();
TlgEnableCallback();
TlgKeywordOn();
TlgRegisterAggregateProvider();
TlgRegisterAggregateProviderEx();
TlgWrite();
TlgWriteEx();
TmCancelPropagationRequest();
TmCommitComplete();
TmCommitEnlistment();
TmCommitTransaction();
TmCreateEnlistment();
TmCurrentTransaction();
TmDereferenceEnlistmentKey();
TmEnableCallbacks();
TmEndPropagationRequest();
TmFreezeTransactions();
TmGetTransactionId();
TmInitSystem();
TmInitSystemPhase2();
TmInitializeTransactionManager();
TmIsKTMCommitCoordinator();
TmIsTransactionActive();
TmPrePrepareComplete();
TmPrePrepareEnlistment();
TmPrepareComplete();
TmPrepareEnlistment();
TmPropagationComplete();
TmPropagationFailed();
TmReadOnlyEnlistment();
TmRecoverEnlistment();
TmRecoverResourceManager();
TmRecoverTransactionManager();
TmReferenceEnlistmentKey();
TmRenameTransactionManager();
TmRequestOutcomeEnlistment();
TmRollbackComplete();
TmRollbackEnlistment();
TmRollbackTransaction();
TmSetCurrentTransaction();
TmSinglePhaseReject();
TmThawTransactions();
TraceLoggingProviderEnabled();
TraceLoggingRegisterEx();
TraceLoggingUnregister();
TraitsCompare();
TriageGetBugcheckData();
TriageGetDriverCount();
TriageGetLoaderEntry();
TriagepGetPageSize();
TriagepVerifyDump();
TryLockShutdownShared();
TtmCleanupCurrentSession();
TtmDispatchApi();
TtmGetSessionDisplayRequiredCount();
TtmInit();
TtmInitCurrentSession();
TtmIsEnabled();
TtmNotifyConsoleUserPresent();
TtmNotifyCsStateExited();
TtmNotifyDeviceArrival();
TtmNotifyDeviceDeparture();
TtmNotifyDeviceInput();
TtmNotifySessionDisplayBurst();
TtmNotifySessionDisplayRequiredChange();
TtmNotifySessionPowerRequestDeleted();
TtmNotifySessionPowerRequestPresent();
TtmNotifySessionPowerStateChange();
TtmNotifySessionTerminalInput();
TtmSessionMonitorControl();
TtmiAcquireCurrentSession();
TtmiAssignDevice();
TtmiCloseEventQueue();
TtmiCreateEventQueue();
TtmiCreateTerminal();
TtmiDevicesRundown();
TtmiEvacuateDevices();
TtmiGetTerminalById();
TtmiLogCalloutStart();
TtmiLogCalloutStop();
TtmiLogCalloutWatchdogCrashSkipped();
TtmiLogCleanupCurrentSessionStart();
TtmiLogCleanupCurrentSessionStop();
TtmiLogConsoleUserPresent();
TtmiLogDeviceArrivalNotified();
TtmiLogDeviceArrivedTerminalEvent();
TtmiLogDeviceAssignedTerminalEvent();
TtmiLogDeviceDepartedTerminalEvent();
TtmiLogDeviceDepartureNotified();
TtmiLogDeviceEnumeratedTerminalEvent();
TtmiLogDeviceFromTerminalRemoved();
TtmiLogDeviceInputNotified();
TtmiLogDeviceRundown();
TtmiLogDeviceToTerminalAssigned();
TtmiLogDispatchApiStart();
TtmiLogDispatchApiStop();
TtmiLogDisplayPowerRequestSet();
TtmiLogEnterProximity();
TtmiLogError();
TtmiLogExitProximity();
TtmiLogInitCurrentSessionStart();
TtmiLogInitCurrentSessionStop();
TtmiLogInitiateModernStandbyTransitionStart();
TtmiLogInitiateModernStandbyTransitionStop();
TtmiLogProximityBlockedRequest();
TtmiLogProximityPowerPress();
TtmiLogQueueCreated();
TtmiLogQueueDequeueEvent();
TtmiLogQueueDestroyed();
TtmiLogQueueEnqueueEvent();
TtmiLogQueueHandleClosed();
TtmiLogQueueHandleOpened();
TtmiLogSessionActivate();
TtmiLogSessionCsExitComplete();
TtmiLogSessionDeactivate();
TtmiLogSessionDeviceAssignmentPolicySet();
TtmiLogSessionDisplayRequiredDereference();
TtmiLogSessionDisplayRequiredPowerRequestUpdated();
TtmiLogSessionDisplayRequiredReference();
TtmiLogSessionMonitorControl();
TtmiLogSessionPowerControlStart();
TtmiLogSessionPowerControlStop();
TtmiLogSessionPowerRequestAcknowledged();
TtmiLogSessionPowerRequestCreated();
TtmiLogSessionPowerRequestDeleted();
TtmiLogSessionPowerStateChange();
TtmiLogSessionRundown();
TtmiLogSessionWorkerPass();
TtmiLogSessionWorkerStart();
TtmiLogSessionWorkerStop();
TtmiLogTerminalCleanup();
TtmiLogTerminalCreated();
TtmiLogTerminalDestroyed();
TtmiLogTerminalDisplayStateChangedEvent();
TtmiLogTerminalDisplayTimeouts();
TtmiLogTerminalHandleClosed();
TtmiLogTerminalHandleOpened();
TtmiLogTerminalOffRequest();
TtmiLogTerminalOnRequest();
TtmiLogTerminalRundown();
TtmiLogTerminalStateMachine();
TtmiOpenDefaultTerminal();
TtmiPublishDeviceEnumerationEvents();
TtmiResetTerminalTimeouts();
TtmiRetrieveEventFromQueue();
TtmiScheduleSessionWorker();
TtmiSessionDeviceListWorker();
TtmiSessionTerminalListWorker();
TtmiSessionsRundown();
TtmiSetDisplayPowerRequest();
TtmiSetPendingOnOffRequest();
TtmiTerminalMonitorControl();
TtmiTerminalSetDisplayTimeouts();
TtmiTerminalsRundown();
TtmiUpdateActiveTerminalCount();
TtmiWriteEnumerationEventsToQueue();
TtmiWriteEventToAllQueues();
TtmiWriteEventToSingleQueue();
TtmpAcquireSessionById();
TtmpAcquireSessionFromTerminalHandle();
TtmpActivateSessionWorker();
TtmpCallAssignedToTerminal();
TtmpCallSetBuiltinPanelState();
TtmpCallSetDisplayState();
TtmpCallSetInputMode();
TtmpCalloutArmWatchdog();
TtmpCalloutCreateWatchdog();
TtmpCalloutDestroyWatchdog();
TtmpCalloutLiveDumpSecondaryCallback();
TtmpCalloutWatchdogCallback();
TtmpCleanupPowerRequestsTrackingFromCurrentSession();
TtmpCloseQueueHandle();
TtmpCloseTerminalHandle();
TtmpCommitTerminalDisplayStateUpdateWorker();
TtmpDeactivateSessionWorker();
TtmpDeleteQueue();
TtmpDeleteTerminal();
TtmpDereferenceSessionMaybeLast();
TtmpDispatchAssignDevice();
TtmpDispatchCreateEventQueue();
TtmpDispatchCreateTerminal();
TtmpDispatchEvacuateDevices();
TtmpDispatchGetTerminalEvent();
TtmpDispatchOpenTerminal();
TtmpDispatchSetDefaultDeviceAssignment();
TtmpDispatchSetDisplayPowerRequest();
TtmpDispatchSetDisplayState();
TtmpDispatchSetDisplayTimeouts();
TtmpDisplayBurstPowerSettingCallback();
TtmpEnterProximity();
TtmpExitProximity();
TtmpFindDeviceByDeviceId();
TtmpFindDeviceByToken();
TtmpFindPowerRequestEntryById();
TtmpGetCalloutTagFromCalloutType();
TtmpGetConfigOverride();
TtmpInitializeWatchdogTimeouts();
TtmpInitiateModernStandbyTransition();
TtmpInsertPowerRequestToSession();
TtmpOpenQueueHandle();
TtmpOpenTerminalHandle();
TtmpPowerRequestEntryComparator();
TtmpPowerRequestHashAllocator();
TtmpPowerRequestHashDeallocator();
TtmpPublishDeviceEvent();
TtmpPublishDisplayRequiredPowerRequestEvents();
TtmpPushTerminalDisplayStateOntoDevice();
TtmpPushTerminalState();
TtmpQueueTerminalDisplayStateOntoDevice();
TtmpResetEvaluationTimer();
TtmpScheduledEvaluationDpc();
TtmpScheduledEvaluationWorker();
TtmpSessionPowerControl();
TtmpSessionWorker();
TtmpSetDisplayRequestEnded();
TtmpSetTerminalPendingCleanup();
TtmpShouldEscapeProximity();
TtmpStartCallout();
TtmpStopCallout();
TtmpTerminal0PowerSettingCallback();
TtmpTraceLoggingCallback();
TtmpTsmEvaluateTimeouts();
TtmpTsmIterate();
TtmpTsmTestTimeout();
TtmpUpdateDisplayRequiredPowerRequest();
TtmpUpdatePowerRequestAttribute();
TtmpUpdatePrimaryDisplayWnf();
TtmpUpdateTerminalState();
TtmpWriteDisplayRequiredPowerRequestUpdatedEvent();
TtmpWriteDisplayStateChangedEvent();
TxtpAddCacheEntry();
TxtpGetCacheEntry();
TxtpJustifyRectangle();
ULongAddStringSize();
ULongLongMult();
ULongToPtr();
UNLOCK_ADDRESS_SPACE();
UNLOCK_ADDRESS_SPACE_SHARED();
UNLOCK_ADDRESS_SPACE_SHARED_UNORDERED();
UNLOCK_ADDRESS_SPACE_UNORDERED();
UNLOCK_HIVE_LOAD();
UNLOCK_PAGE_TABLE_COMMITMENT();
UNLOCK_TRANSACTION_LIST();
Uart16550GetByte();
Uart16550InitializePort();
Uart16550InitializePortCommon();
Uart16550LegacyInitializePort();
Uart16550MmInitializePort();
Uart16550PutByte();
Uart16550RxReady();
Uart16550SetBaud();
Uart16550SetBaudCommon();
UartpSetAccess();
UnlockShutdown();
UpcaseUnicodeToMultiByteNHelper();
UpcaseUnicodeToSingleByteNHelper();
UpcaseUnicodeToUTF8NHelper();
UpdateInternalStatsOnFlush();
UsifGetByte();
UsifInitializePort();
UsifPutByte();
UsifRxReady();
UsifSetBaud();
VERIFY_BUFFER_LOCKED();
VF_ASSERT_IRQL();
VF_ASSERT_MAX_IRQL();
VF_FIND_BUFFER();
VF_FIND_DEVICE_INFORMATION_AND_REMOVE();
VF_FIND_INACTIVE_ADAPTER_AND_REMOVE();
VF_MARK_FOR_DEFERRED_REMOVE();
VRegEnabledInJob();
VRegSetup();
VacbLevelReference();
ValidFilter();
ValidateRegistrLangType();
ValidateStd3Range();
VeAllocatePoolWithTagPriority();
VerSetConditionMask();
VerifierBugCheckIfAppropriate();
VerifierCaptureViolationKernelStack();
VerifierCcCopyWrite();
VerifierCcCopyWriteEx();
VerifierCcDeferWrite();
VerifierCcFastCopyWrite();
VerifierCcWaitForCurrentLazyWriterActivity();
VerifierCmRegisterCallback();
VerifierCmRegisterCallbackEx();
VerifierCmUnRegisterCallback();
VerifierCrashEvent();
VerifierDbgBreakPointWithStatus();
VerifierEtwRegister();
VerifierEtwRegisterClassicProvider();
VerifierEtwUnregister();
VerifierExAcquireFastMutex();
VerifierExAcquireFastMutexNoReboot();
VerifierExAcquireFastMutexUnsafe();
VerifierExAcquireFastMutexUnsafeNoReboot();
VerifierExAcquireResourceExclusiveLite();
VerifierExAcquireResourceExclusiveLiteNoReboot();
VerifierExAcquireResourceSharedLite();
VerifierExAcquireResourceSharedLiteNoReboot();
VerifierExAcquireRundownProtection();
VerifierExAcquireRundownProtectionCacheAware();
VerifierExAcquireRundownProtectionCacheAwareEx();
VerifierExAcquireRundownProtectionEx();
VerifierExAcquireSharedStarveExclusive();
VerifierExAcquireSharedStarveExclusiveNoReboot();
VerifierExAcquireSharedWaitForExclusive();
VerifierExAcquireSharedWaitForExclusiveNoReboot();
VerifierExAllocateCacheAwareRundownProtection();
VerifierExAllocatePool();
VerifierExAllocatePoolEx();
VerifierExAllocatePoolWithQuota();
VerifierExAllocatePoolWithQuotaTag();
VerifierExAllocatePoolWithTag();
VerifierExAllocatePoolWithTagPriority();
VerifierExConvertExclusiveToSharedLite();
VerifierExCreateCallback();
VerifierExDeleteLookasideListEx();
VerifierExDeleteNPagedLookasideList();
VerifierExDeletePagedLookasideList();
VerifierExDeleteResourceLite();
VerifierExEnterCriticalRegionAndAcquireResourceExclusive();
VerifierExEnterCriticalRegionAndAcquireResourceExclusiveNoReboot();
VerifierExEnterCriticalRegionAndAcquireResourceShared();
VerifierExEnterCriticalRegionAndAcquireResourceSharedNoReboot();
VerifierExEnterCriticalRegionAndAcquireSharedWaitForExclusive();
VerifierExEnterPriorityRegionAndAcquireResourceExclusive();
VerifierExEnterPriorityRegionAndAcquireResourceExclusiveNoReboot();
VerifierExEnterPriorityRegionAndAcquireResourceShared();
VerifierExEnterPriorityRegionAndAcquireResourceSharedNoReboot();
VerifierExFreePool();
VerifierExFreePoolEx();
VerifierExFreePoolWithTag();
VerifierExGetExclusiveWaiterCount();
VerifierExGetSharedWaiterCount();
VerifierExInitializeLookasideListEx();
VerifierExInitializeNPagedLookasideList();
VerifierExInitializePagedLookasideList();
VerifierExInitializeResourceLite();
VerifierExInterlockedAddLargeInteger();
VerifierExInterlockedInsertHeadList();
VerifierExInterlockedInsertTailList();
VerifierExInterlockedPopEntryList();
VerifierExInterlockedPushEntryList();
VerifierExInterlockedRemoveHeadList();
VerifierExIsProcessorFeaturePresent();
VerifierExIsResourceAcquiredExclusiveLite();
VerifierExIsResourceAcquiredSharedLite();
VerifierExRaiseAccessViolation();
VerifierExRaiseDatatypeMisalignment();
VerifierExRaiseStatus();
VerifierExRegisterCallback();
VerifierExReinitializeResourceLite();
VerifierExReleaseFastMutex();
VerifierExReleaseFastMutexNoReboot();
VerifierExReleaseFastMutexUnsafe();
VerifierExReleaseFastMutexUnsafeNoReboot();
VerifierExReleaseResourceAndLeaveCriticalRegion();
VerifierExReleaseResourceAndLeaveCriticalRegionNoReboot();
VerifierExReleaseResourceAndLeavePriorityRegion();
VerifierExReleaseResourceAndLeavePriorityRegionNoReboot();
VerifierExReleaseResourceForThreadLite();
VerifierExReleaseResourceForThreadLiteNoReboot();
VerifierExReleaseResourceLite();
VerifierExReleaseResourceLiteNoReboot();
VerifierExReleaseRundownProtection();
VerifierExReleaseRundownProtectionCacheAware();
VerifierExReleaseRundownProtectionEx();
VerifierExSetResourceOwnerPointer();
VerifierExSetResourceOwnerPointerEx();
VerifierExSetTimerResolution();
VerifierExTryToAcquireFastMutex();
VerifierExTryToAcquireFastMutexNoReboot();
VerifierExUnregisterCallback();
VerifierExUuidCreate();
VerifierExWaitForRundownProtectionRelease();
VerifierExWaitForRundownProtectionReleaseCacheAware();
VerifierExfAcquirePushLockExclusive();
VerifierExfAcquirePushLockShared();
VerifierExfReleasePushLock();
VerifierExfReleasePushLockShared();
VerifierExfTryAcquirePushLockShared();
VerifierExfTryToWakePushLock();
VerifierExpInterlockedFlushSList();
VerifierExpInterlockedPopEntrySList();
VerifierExpInterlockedPushEntrySList();
VerifierFreeTrackedPool();
VerifierFsRtlAllocateFileLock();
VerifierFsRtlAreNamesEqual();
VerifierFsRtlBalanceReads();
VerifierFsRtlCancellableWaitForMultipleObjects();
VerifierFsRtlCancellableWaitForSingleObject();
VerifierFsRtlCheckLockForReadAccess();
VerifierFsRtlCheckLockForWriteAccess();
VerifierFsRtlCopyWrite();
VerifierFsRtlDeregisterUncProvider();
VerifierFsRtlDissectName();
VerifierFsRtlDoesNameContainWildCards();
VerifierFsRtlFastCheckLockForRead();
VerifierFsRtlFastCheckLockForWrite();
VerifierFsRtlFastUnlockAll();
VerifierFsRtlFastUnlockAllByKey();
VerifierFsRtlFastUnlockSingle();
VerifierFsRtlFreeFileLock();
VerifierFsRtlGetFileSize();
VerifierFsRtlGetNextFileLock();
VerifierFsRtlIncrementCcFastReadNoWait();
VerifierFsRtlIncrementCcFastReadWait();
VerifierFsRtlInitializeFileLock();
VerifierFsRtlIsNameInExpression();
VerifierFsRtlMdlReadCompleteDev();
VerifierFsRtlMdlWriteCompleteDev();
VerifierFsRtlNotifyFilterChangeDirectory();
VerifierFsRtlNotifyFilterReportChange();
VerifierFsRtlNotifyFullChangeDirectory();
VerifierFsRtlNotifyFullReportChange();
VerifierFsRtlPrivateLock();
VerifierFsRtlProcessFileLock();
VerifierFsRtlRegisterUncProvider();
VerifierFsRtlRegisterUncProviderEx();
VerifierFsRtlRemoveDotsFromPath();
VerifierFsRtlUninitializeFileLock();
VerifierFsRtlValidateReparsePointBuffer();
VerifierHalExamineMBR();
VerifierInitSystem();
VerifierIoAcquireCancelSpinLock();
VerifierIoAcquireRemoveLockEx();
VerifierIoAcquireVpbSpinLock();
VerifierIoAllocateController();
VerifierIoAllocateDriverObjectExtension();
VerifierIoAllocateErrorLogEntry();
VerifierIoAllocateIrp();
VerifierIoAllocateMdl();
VerifierIoAllocateWorkItem();
VerifierIoAttachDevice();
VerifierIoAttachDeviceToDeviceStack();
VerifierIoAttachDeviceToDeviceStackSafe();
VerifierIoCancelIrp();
VerifierIoCheckShareAccess();
VerifierIoConnectInterrupt();
VerifierIoConnectInterruptEx();
VerifierIoCreateController();
VerifierIoCreateDevice();
VerifierIoCreateFile();
VerifierIoCreateFileEx();
VerifierIoCreateFileSpecifyDeviceObjectHint();
VerifierIoCreateNotificationEvent();
VerifierIoCreateSymbolicLink();
VerifierIoCreateSynchronizationEvent();
VerifierIoCreateUnprotectedSymbolicLink();
VerifierIoDeleteController();
VerifierIoDeleteDevice();
VerifierIoDeleteSymbolicLink();
VerifierIoDetachDevice();
VerifierIoDisconnectInterrupt();
VerifierIoDisconnectInterruptEx();
VerifierIoFreeController();
VerifierIoFreeIrp();
VerifierIoFreeMdl();
VerifierIoGetAttachedDeviceReference();
VerifierIoGetConfigurationInformation();
VerifierIoGetDeviceDirectory();
VerifierIoGetDeviceInterfaceAlias();
VerifierIoGetDeviceInterfaces();
VerifierIoGetDeviceNumaNode();
VerifierIoGetDeviceObjectPointer();
VerifierIoGetDeviceProperty();
VerifierIoGetDevicePropertyData();
VerifierIoGetDeviceToVerify();
VerifierIoGetDriverDirectory();
VerifierIoGetFileObjectGenericMapping();
VerifierIoGetInitialStack();
VerifierIoInitializeIrp();
VerifierIoInitializeRemoveLockEx();
VerifierIoInitializeWorkItem();
VerifierIoInvalidateDeviceRelations();
VerifierIoIsWdmVersionAvailable();
VerifierIoOpenDeviceInterfaceRegistryKey();
VerifierIoOpenDeviceRegistryKey();
VerifierIoRaiseHardError();
VerifierIoRaiseInformationalHardError();
VerifierIoReadPartitionTable();
VerifierIoReadPartitionTableEx();
VerifierIoRegisterBootDriverReinitialization();
VerifierIoRegisterDeviceInterface();
VerifierIoRegisterDriverReinitialization();
VerifierIoRegisterLastChanceShutdownNotification();
VerifierIoRegisterPlugPlayNotification();
VerifierIoRegisterShutdownNotification();
VerifierIoReleaseCancelSpinLock();
VerifierIoReleaseRemoveLockAndWaitEx();
VerifierIoReleaseRemoveLockEx();
VerifierIoReleaseVpbSpinLock();
VerifierIoRemoveShareAccess();
VerifierIoReplacePartitionUnit();
VerifierIoReportDetectedDevice();
VerifierIoReportTargetDeviceChange();
VerifierIoReportTargetDeviceChangeAsynchronous();
VerifierIoReuseIrp();
VerifierIoSetCompletionRoutineEx();
VerifierIoSetDeviceInterfaceState();
VerifierIoSetDevicePropertyData();
VerifierIoSetDeviceToVerify();
VerifierIoSetPartitionInformation();
VerifierIoSetPartitionInformationEx();
VerifierIoSetShareAccess();
VerifierIoSetStartIoAttributes();
VerifierIoStartNextPacket();
VerifierIoUnregisterPlugPlayNotification();
VerifierIoUnregisterPlugPlayNotificationEx();
VerifierIoUnregisterShutdownNotification();
VerifierIoUpdateShareAccess();
VerifierIoVolumeDeviceToDosName();
VerifierIoWMIAllocateInstanceIds();
VerifierIoWMIRegistrationControl();
VerifierIoWMIWriteEvent();
VerifierIoWriteErrorLogEntry();
VerifierIoWritePartitionTable();
VerifierIoWritePartitionTableEx();
VerifierIofCallDriver();
VerifierIofCompleteRequest();
VerifierKeAcquireGuardedMutex();
VerifierKeAcquireGuardedMutexUnsafe();
VerifierKeAcquireInStackQueuedSpinLock();
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevel();
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevelCommon();
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevelNoReboot();
VerifierKeAcquireInStackQueuedSpinLockCommon();
VerifierKeAcquireInStackQueuedSpinLockForDpc();
VerifierKeAcquireInStackQueuedSpinLockForDpcCommon();
VerifierKeAcquireInStackQueuedSpinLockForDpcNoReboot();
VerifierKeAcquireInStackQueuedSpinLockNoReboot();
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynch();
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynchCommon();
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynchNoReboot();
VerifierKeAcquireInterruptSpinLock();
VerifierKeAcquireQueuedSpinLock();
VerifierKeAcquireQueuedSpinLockRaiseToSynch();
VerifierKeAcquireSpinLockAtDpcLevel();
VerifierKeAcquireSpinLockAtDpcLevelNoReboot();
VerifierKeAcquireSpinLockForDpc();
VerifierKeAcquireSpinLockRaiseToDpc();
VerifierKeAcquireSpinLockRaiseToDpcNoReboot();
VerifierKeAreAllApcsDisabled();
VerifierKeAreApcsDisabled();
VerifierKeCancelTimer();
VerifierKeClearEvent();
VerifierKeDelayExecutionThread();
VerifierKeDeregisterNmiCallback();
VerifierKeEnterCriticalRegion();
VerifierKeEnterGuardedRegion();
VerifierKeFlushQueuedDpcs();
VerifierKeInitializeDeviceQueue();
VerifierKeInitializeEvent();
VerifierKeInitializeGuardedMutex();
VerifierKeInitializeMutant();
VerifierKeInitializeMutantNoReboot();
VerifierKeInitializeMutex();
VerifierKeInitializeMutexNoReboot();
VerifierKeInitializeSemaphore();
VerifierKeInitializeTimer();
VerifierKeInitializeTimerEx();
VerifierKeInsertByKeyDeviceQueue();
VerifierKeInsertDeviceQueue();
VerifierKeInsertHeadQueue();
VerifierKeInsertQueue();
VerifierKeIsApcRunningThread();
VerifierKeIsExecutingLegacyDpc();
VerifierKeLeaveCriticalRegion();
VerifierKeLeaveGuardedRegion();
VerifierKeLowerIrql();
VerifierKePulseEvent();
VerifierKeQueryPriorityThread();
VerifierKeQueryRuntimeThread();
VerifierKeRaiseIrqlToDpcLevel();
VerifierKeReadStateEvent();
VerifierKeReadStateMutex();
VerifierKeReadStateSemaphore();
VerifierKeReadStateTimer();
VerifierKeRegisterNmiCallback();
VerifierKeReleaseGuardedMutex();
VerifierKeReleaseGuardedMutexUnsafe();
VerifierKeReleaseInStackQueuedSpinLock();
VerifierKeReleaseInStackQueuedSpinLockCommon();
VerifierKeReleaseInStackQueuedSpinLockForDpc();
VerifierKeReleaseInStackQueuedSpinLockForDpcCommon();
VerifierKeReleaseInStackQueuedSpinLockForDpcNoReboot();
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevel();
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevelCommon();
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevelNoReboot();
VerifierKeReleaseInStackQueuedSpinLockNoReboot();
VerifierKeReleaseInterruptSpinLock();
VerifierKeReleaseMutant();
VerifierKeReleaseMutantNoReboot();
VerifierKeReleaseMutex();
VerifierKeReleaseMutexNoReboot();
VerifierKeReleaseQueuedSpinLock();
VerifierKeReleaseSemaphore();
VerifierKeReleaseSpinLock();
VerifierKeReleaseSpinLockForDpc();
VerifierKeReleaseSpinLockFromDpcLevel();
VerifierKeReleaseSpinLockFromDpcLevelNoReboot();
VerifierKeReleaseSpinLockNoReboot();
VerifierKeRemoveByKeyDeviceQueue();
VerifierKeRemoveDeviceQueue();
VerifierKeRemoveEntryDeviceQueue();
VerifierKeRemoveQueue();
VerifierKeResetEvent();
VerifierKeSetEvent();
VerifierKeSetSystemGroupAffinityThread();
VerifierKeSetTimer();
VerifierKeSetTimerEx();
VerifierKeSynchronizeExecution();
VerifierKeTestSpinLock();
VerifierKeTryToAcquireGuardedMutex();
VerifierKeTryToAcquireQueuedSpinLock();
VerifierKeTryToAcquireQueuedSpinLockRaiseToSynch();
VerifierKeTryToAcquireSpinLockAtDpcLevel();
VerifierKeTryToAcquireSpinLockAtDpcLevelNoReboot();
VerifierKeWaitForMultipleObjects();
VerifierKeWaitForMultipleObjectsNoReboot();
VerifierKeWaitForSingleObject();
VerifierKeWaitForSingleObjectNoReboot();
VerifierKfRaiseIrql();
VerifierMmAddPhysicalMemory();
VerifierMmAllocateContiguousMemory();
VerifierMmAllocateContiguousMemorySpecifyCache();
VerifierMmAllocateContiguousMemorySpecifyCacheNode();
VerifierMmAllocateContiguousNodeMemory();
VerifierMmAllocateMappingAddress();
VerifierMmAllocateNodePagesForMdlEx();
VerifierMmAllocateNonCachedMemory();
VerifierMmAllocatePagesForMdl();
VerifierMmAllocatePagesForMdlEx();
VerifierMmBuildMdlForNonPagedPool();
VerifierMmCreateMdl();
VerifierMmCreateMirror();
VerifierMmCreateSection();
VerifierMmDoesFileHaveUserWritableReferences();
VerifierMmFreeContiguousMemory();
VerifierMmFreeContiguousMemorySpecifyCache();
VerifierMmFreeNonCachedMemory();
VerifierMmFreePagesFromMdl();
VerifierMmGetPhysicalMemoryRanges();
VerifierMmGetSystemRoutineAddress();
VerifierMmLockPagableDataSection();
VerifierMmLockPagableSectionByHandle();
VerifierMmMapIoSpace();
VerifierMmMapIoSpaceEx();
VerifierMmMapLockedPages();
VerifierMmMapLockedPagesSpecifyCache();
VerifierMmMapLockedPagesWithReservedMapping();
VerifierMmMapViewOfSection();
VerifierMmPageEntireDriver();
VerifierMmPrefetchPages();
VerifierMmProbeAndLockPages();
VerifierMmProbeAndLockProcessPages();
VerifierMmProtectMdlSystemAddress();
VerifierMmRemovePhysicalMemory();
VerifierMmResetDriverPaging();
VerifierMmSecureVirtualMemory();
VerifierMmUnlockPagableImageSection();
VerifierMmUnlockPages();
VerifierMmUnmapIoSpace();
VerifierMmUnmapLockedPages();
VerifierMmUnsecureVirtualMemory();
VerifierNtCreateFile();
VerifierNtCreateSection();
VerifierNtLockFile();
VerifierNtMapViewOfSection();
VerifierNtReadFile();
VerifierNtSetInformationFile();
VerifierNtUnlockFile();
VerifierNtWriteFile();
VerifierObGetObjectSecurity();
VerifierObReferenceObjectByHandle();
VerifierObReferenceObjectByHandleWithTag();
VerifierObReferenceObjectByPointer();
VerifierObReferenceObjectByPointerWithTag();
VerifierObReleaseObjectSecurity();
VerifierObfDereferenceObject();
VerifierObfDereferenceObjectWithTag();
VerifierObfReferenceObject();
VerifierObfReferenceObjectWithTag();
VerifierPoCallDriver();
VerifierPoFxActivateComponent();
VerifierPoFxCompleteDevicePowerNotRequired();
VerifierPoFxCompleteIdleCondition();
VerifierPoFxCompleteIdleState();
VerifierPoFxIdleComponent();
VerifierPoFxNotifySurprisePowerOn();
VerifierPoFxPowerControl();
VerifierPoFxRegisterDevice();
VerifierPoFxReportDevicePoweredOn();
VerifierPoFxSetComponentLatency();
VerifierPoFxSetComponentResidency();
VerifierPoFxSetComponentWake();
VerifierPoFxSetDeviceIdleTimeout();
VerifierPoFxStartDevicePowerManagement();
VerifierPoFxUnregisterDevice();
VerifierPoRequestPowerIrp();
VerifierPortExAllocatePoolWithQuotaTag();
VerifierPortExAllocatePoolWithTagPriority();
VerifierPortIoAllocateIrp();
VerifierPortIoAllocateMdl();
VerifierPortIoAllocateWorkItem();
VerifierPortKeAcquireSpinLock();
VerifierPortKeAcquireSpinLockNoXdv();
VerifierPortKeReleaseSpinLock();
VerifierPortKeReleaseSpinLockNoXdv();
VerifierProbeForRead();
VerifierProbeForWrite();
VerifierPsAssignImpersonationToken();
VerifierPsCreateSystemThread();
VerifierPsDereferenceImpersonationToken();
VerifierPsDereferencePrimaryToken();
VerifierPsDisableImpersonation();
VerifierPsGetVersion();
VerifierPsImpersonateClient();
VerifierPsReferenceImpersonationToken();
VerifierPsReferencePrimaryToken();
VerifierPsRemoveLoadImageNotifyRoutine();
VerifierPsRestoreImpersonation();
VerifierPsRevertToSelf();
VerifierPsSetCreateProcessNotifyRoutine();
VerifierPsSetCreateProcessNotifyRoutineEx();
VerifierPsSetCreateThreadNotifyRoutine();
VerifierPsSetLoadImageNotifyRoutine();
VerifierPsTerminateSystemThread();
VerifierRtlAnsiStringToUnicodeString();
VerifierRtlCompareUnicodeString();
VerifierRtlCreateRegistryKey();
VerifierRtlCreateSystemVolumeInformationFolder();
VerifierRtlCreateUnicodeString();
VerifierRtlDeleteRegistryValue();
VerifierRtlDowncaseUnicodeChar();
VerifierRtlDowncaseUnicodeString();
VerifierRtlDuplicateUnicodeString();
VerifierRtlEqualUnicodeString();
VerifierRtlFreeUnicodeString();
VerifierRtlGUIDFromString();
VerifierRtlGenerateClass5Guid();
VerifierRtlHashUnicodeString();
VerifierRtlOemStringToCountedUnicodeString();
VerifierRtlOemStringToUnicodeString();
VerifierRtlStringFromGUID();
VerifierRtlUTF8ToUnicodeN();
VerifierRtlUnicodeStringToAnsiString();
VerifierRtlUnicodeStringToCountedOemString();
VerifierRtlUnicodeStringToOemString();
VerifierRtlUnicodeToUTF8N();
VerifierRtlUpcaseUnicodeChar();
VerifierRtlUpcaseUnicodeString();
VerifierRtlUpcaseUnicodeStringToAnsiString();
VerifierRtlUpcaseUnicodeStringToCountedOemString();
VerifierRtlUpcaseUnicodeStringToOemString();
VerifierRtlWriteRegistryValue();
VerifierRtlxAnsiStringToUnicodeSize();
VerifierRtlxUnicodeStringToAnsiSize();
VerifierSeAccessCheck();
VerifierSeAssignSecurity();
VerifierSeAssignSecurityEx();
VerifierSeDeassignSecurity();
VerifierSeLockSubjectContext();
VerifierSeReleaseSubjectContext();
VerifierSeSinglePrivilegeCheck();
VerifierSeUnlockSubjectContext();
VerifierSeValidSecurityDescriptor();
VerifierZwAllocateLocallyUniqueId();
VerifierZwClose();
VerifierZwCommitComplete();
VerifierZwCommitTransaction();
VerifierZwCreateKeyTransacted();
VerifierZwCreateResourceManager();
VerifierZwDeleteKey();
VerifierZwEnumerateTransactionObject();
VerifierZwFlushBuffersFile();
VerifierZwFlushBuffersFileEx();
VerifierZwFlushKey();
VerifierZwGetNotificationResourceManager();
VerifierZwLockFile();
VerifierZwMakeTemporaryObject();
VerifierZwOpenKeyEx();
VerifierZwOpenKeyTransacted();
VerifierZwOpenKeyTransactedEx();
VerifierZwOpenResourceManager();
VerifierZwPrePrepareComplete();
VerifierZwQueryInformationResourceManager();
VerifierZwQueryQuotaInformationFile();
VerifierZwReadOnlyEnlistment();
VerifierZwRecoverEnlistment();
VerifierZwRecoverTransactionManager();
VerifierZwRenameKey();
VerifierZwRollbackComplete();
VerifierZwRollbackTransaction();
VerifierZwSetInformationKey();
VerifierZwSetInformationResourceManager();
VerifierZwSetInformationToken();
VerifierZwSetQuotaInformationFile();
VerifierZwSetTimerEx();
VerifierZwTerminateProcess();
VerifierZwUnlockFile();
VerifierZwUnmapViewOfSection();
VfAddVerifierEntry();
VfAfterCallDriver();
VfAllocPoolNotification();
VfAllocateAdapterChannel();
VfAllocateAdapterChannelEx();
VfAllocateCommonBuffer();
VfAllocateCommonBufferEx();
VfAllocateCommonBufferWithBounds();
VfAllocateCrashDumpRegisters();
VfAllocateDomainCommonBuffer();
VfAvlCleanupLockContext();
VfAvlDeleteTreeNode();
VfAvlEnumerateNodes();
VfAvlInitializeLockContext();
VfAvlInitializeTree();
VfAvlInitializeTreeEx();
VfAvlInsertReservedTreeNode();
VfAvlLookupTreeNode();
VfAvlReserveNode();
VfBeforeCallDriver();
VfBugCheckNoStackUsage();
VfBuildMdlFromScatterGatherList();
VfBuildScatterGatherList();
VfBuildScatterGatherListEx();
VfCalculateScatterGatherListSize();
VfCancelAdapterChannel();
VfCancelMappedTransfer();
VfCheckForLookaside();
VfCheckForResource();
VfCheckImageCompliance();
VfCheckNxPagePriority();
VfCheckNxPageProtection();
VfCheckNxPoolType();
VfCheckPagePriority();
VfCheckPageProtection();
VfCheckPoolType();
VfCheckUserHandle();
VfClearVerifierSettings();
VfConfigureAdapterChannel();
VfCtxHookAndConnectInterrupt();
VfCtxHookAndConnectInterruptEx();
VfCtxInit();
VfDeadlockAcquireResource();
VfDeadlockAfterCallDriver();
VfDeadlockBeforeCallDriver();
VfDeadlockDeleteMemoryRange();
VfDeadlockInitialize();
VfDeadlockInitializeResource();
VfDeadlockReleaseResource();
VfDevObjAdjustFdoForVerifierFilters();
VfDevObjIsDeviceRemoved();
VfDevObjMarkDeviceRemoved();
VfDevObjPostAddDevice();
VfDevObjPreAddDevice();
VfDisableCodeIntegrityBreaks();
VfDisableHalVerifier();
VfDriverEnableVerifier();
VfDriverEnableVerifierForAll();
VfDriverInitStarting();
VfDriverInitSuccess();
VfDriverIsKernelImageAddress();
VfDriverLoadBootDrivers();
VfDriverLoadImage();
VfDriverLock();
VfDriverUnloadImage();
VfDriverUnlock();
VfErrorReleaseTriageInformation();
VfErrorReport7();
VfErrorReport8();
VfErrorStoreTriageInformation();
VfFailDeviceNode();
VfFailDriver();
VfFailSystemBIOS();
VfFastIoCheckState();
VfFastIoSnapState();
VfFaultsInjectPoolAllocationFailure();
VfFaultsInjectResourceFailure();
VfFaultsIsSystemSufficientlyBooted();
VfFaultsSetParameters();
VfFillAllocatePagesForMdl();
VfFillAllocatedMemory();
VfFilterAttach();
VfFlushAdapterBuffers();
VfFlushAdapterBuffersEx();
VfFlushDmaBuffer();
VfFreeAdapterChannel();
VfFreeAdapterObject();
VfFreeCapturedUnicodeString();
VfFreeCommonBuffer();
VfFreeMapRegisters();
VfFreeMemoryNotification();
VfFreePoolNotification();
VfGetDmaAdapter();
VfGetDmaAdapterInfo();
VfGetDmaAlignment();
VfGetDmaDomain();
VfGetDmaTransferInfo();
VfGetHookAddressForOriginal();
VfGetPristineDispatchRoutine();
VfGetPristineDriverInit();
VfGetScatterGatherList();
VfGetScatterGatherListEx();
VfGetVerifierInformation();
VfGetVerifierInformationEx();
VfHalAllocateMapRegisters();
VfHalVerifierInitialize();
VfInitBootDriversLoaded();
VfInitSetVerifyDriverTargets();
VfInitSystemNoRebootNeeded();
VfInitVerifierComponents();
VfInitializeBranchTracing();
VfInitializeDmaTransferContext();
VfInsertContext();
VfIoAllocateIrp2();
VfIoCompletionCheckState();
VfIoDeleteDevice();
VfIoDetachDevice();
VfIoFreeIrp();
VfIoInitializeIrp();
VfIrpAllocateCallDriverData();
VfIrpDatabaseCheckExFreePool();
VfIrpDatabaseEntryFindAndLock();
VfIrpDatabaseEntryInsertAndLock();
VfIrpDatabaseEntryReleaseLock();
VfIrpDatabaseInit();
VfIrpLogDeleteDeviceLogs();
VfIrpLogLockDatabase();
VfIrpLogRecordEvent();
VfIrpLogRetrieveWmiData();
VfIrpLogUnlockDatabase();
VfIrpSendSynchronousIrp();
VfIrpWatermark();
VfIsDriverSuspect();
VfIsPCIBus();
VfIsRuleClassEnabled();
VfIsVerificationEnabled();
VfIsVerificationEnabledForImage();
VfIsVerifierEnabled();
VfIsVerifierExtensionEnabled();
VfJoinDmaDomain();
VfKeCheckForChanges();
VfKeInsertQueueDpc();
VfKeIrqlTransitionReserveLogEntry();
VfKeRemoveQueueDpc();
VfLeaveDmaDomain();
VfLookasideInitializeInternalNPagedList();
VfMajorAdvanceIrpStatus();
VfMajorBuildIrpLogEntry();
VfMajorIsNewRequest();
VfMajorIsValidIrpStatus();
VfMajorRegisterHandlers();
VfMajorTestStartedPdoStack();
VfMajorVerifyFinalIrpStack();
VfMajorVerifyIrpStackDownward();
VfMajorVerifyIrpStackUpward();
VfMajorVerifyNewIrp();
VfMajorVerifyNewRequest();
VfMapTransfer();
VfMapTransferEx();
VfNotifyOfHibernate();
VfNotifyVerifierExtensions();
VfNotifyVerifierOfEvent();
VfObjectContextInit();
VfPacketCreateAndLock();
VfPendingCheckForChanges();
VfPendingFinishLogging();
VfPendingInitPhase1();
VfPendingMoreProcessingRequired();
VfPendingShouldForce();
VfPendingStartLogging();
VfPnpAdvanceIrpStatus();
VfPnpDumpIrpStack();
VfPnpIsSystemRestrictedIrp();
VfPnpTestStartedPdoStack();
VfPnpVerifyIrpStackDownward();
VfPnpVerifyIrpStackUpward();
VfPnpVerifyNewRequest();
VfPoolCheckForLeaks();
VfPoolDelayFreeIfPossible();
VfPoolInitPhase0();
VfPoolInitPhase1();
VfPoolIsInternalFree();
VfPowerDumpIrpStack();
VfPowerIsSystemRestrictedIrp();
VfPowerTestStartedPdoStack();
VfPowerVerifyIrpStackDownward();
VfPowerVerifyIrpStackUpward();
VfPowerVerifyNewRequest();
VfProbeAndCaptureUnicodeString();
VfProbeAndCaptureUnicodeStringBuffer();
VfPutDmaAdapter();
VfPutScatterGatherList();
VfQueryDeviceContext();
VfQueryDispatchTable();
VfQueryDriverContext();
VfQueryIrpContext();
VfQueryThreadContext();
VfRandomGetNumber();
VfReadDmaCounter();
VfRemLockDeleteMemoryRange();
VfRemLockReportBadReleaseAndWaitTag();
VfRemLockReportBadReleaseTag();
VfRemoveContext();
VfRemoveVerifierEntry();
VfReportIssueWithOptions();
VfSetIoBuildRequest();
VfSetVerifierInformation();
VfSetVerifierInformationEx();
VfSetVerifierRunningMode();
VfSettingsApplyMiscellaneousChecks();
VfSettingsCheckForChanges();
VfSettingsMiscellaneousChecksInitPhase1();
VfShutdownScheduleWatchdog();
VfStartBranchTracing();
VfStopBranchTracing();
VfSuspectDriversAllocateEntry();
VfSuspectDriversGetVerifierInformation();
VfSuspectDriversInsert();
VfSuspectDriversIsLoaded();
VfSuspectDriversLoadCallback();
VfSuspectDriversParseRegistryString();
VfSuspectDriversRemove();
VfSuspectDriversUnloadCallback();
VfSuspectExcludedDriversAllocateEntry();
VfTargetDriversAdd();
VfTargetDriversEnableVerifier();
VfTargetDriversGetNode();
VfTargetDriversGetVerifierData();
VfTargetDriversGetZeroCounters();
VfTargetDriversIsEnabled();
VfTargetDriversRemove();
VfTargetEtwRegister();
VfTargetEtwUnregister();
VfThunkAddDriverThunks();
VfThunkAddSpecialDriverThunks();
VfThunkAddTargetNotify();
VfThunkAdjustExportAddressIfHooked();
VfThunkApplyDriverAddedThunks();
VfThunkApplyMandatoryThunks();
VfThunkApplyThunks();
VfThunkFindExportAddressAllTables();
VfThunkInit();
VfThunkRemoveTargetNotify();
VfTriageAddDrivers();
VfTriageSystem();
VfUtilAddressRangeAdd();
VfUtilAddressRangeFit();
VfUtilAddressRangeFitNoLock();
VfUtilAddressRangeRemove();
VfUtilAddressRangeRemoveCheckEmpty();
VfUtilCheckKernelAddress();
VfUtilDbgPrint();
VfUtilEqualUnicodeString();
VfUtilFreePoolCheckIRQL();
VfUtilFreePoolDispatchLevel();
VfUtilIsLocalSystem();
VfUtilIsProtectedDriver();
VfUtilPrintCheckinString();
VfUtilSynchronizationObjectSanityChecks();
VfWdCheckForSettingsChange();
VfWdInit();
VfWdSetCancelTimeout();
VfWmiDumpIrpStack();
VfWmiTestStartedPdoStack();
VfWmiVerifyIrpStackDownward();
VfWmiVerifyIrpStackUpward();
VfWmiVerifyNewRequest();
VfXdvDriverCaptureIoCallbacks();
VfXdvExcludeParseRegistryString();
VfZwAccessCheckAndAuditAlarm();
VfZwAddBootEntry();
VfZwAddDriverEntry();
VfZwAdjustPrivilegesToken();
VfZwAllocateVirtualMemory();
VfZwAlpcAcceptConnectPort();
VfZwAlpcConnectPort();
VfZwAlpcCreatePort();
VfZwAlpcCreatePortSection();
VfZwAlpcCreateResourceReserve();
VfZwAlpcCreateSectionView();
VfZwAlpcCreateSecurityContext();
VfZwAlpcQueryInformation();
VfZwAlpcSendWaitReceivePort();
VfZwAlpcSetInformation();
VfZwCancelIoFile();
VfZwCancelTimer();
VfZwCloseObjectAuditAlarm();
VfZwCommitEnlistment();
VfZwConnectPort();
VfZwCreateDirectoryObject();
VfZwCreateEnlistment();
VfZwCreateEvent();
VfZwCreateFile();
VfZwCreateJobObject();
VfZwCreateKey();
VfZwCreateSection();
VfZwCreateSymbolicLinkObject();
VfZwCreateTimer();
VfZwCreateTransaction();
VfZwCreateTransactionManager();
VfZwDeleteBootEntry();
VfZwDeleteFile();
VfZwDeleteValueKey();
VfZwDeviceIoControlFile();
VfZwDisplayString();
VfZwDuplicateObject();
VfZwDuplicateToken();
VfZwEnumerateBootEntries();
VfZwEnumerateDriverEntries();
VfZwEnumerateKey();
VfZwEnumerateValueKey();
VfZwFlushInstructionCache();
VfZwFlushVirtualMemory();
VfZwFreeVirtualMemory();
VfZwFsControlFile();
VfZwLoadDriver();
VfZwLoadKey();
VfZwMapViewOfSection();
VfZwModifyBootEntry();
VfZwModifyDriverEntry();
VfZwNotifyChangeKey();
VfZwOpenDirectoryObject();
VfZwOpenEnlistment();
VfZwOpenEvent();
VfZwOpenFile();
VfZwOpenJobObject();
VfZwOpenKey();
VfZwOpenProcess();
VfZwOpenProcessToken();
VfZwOpenProcessTokenEx();
VfZwOpenSection();
VfZwOpenSymbolicLinkObject();
VfZwOpenThread();
VfZwOpenThreadToken();
VfZwOpenThreadTokenEx();
VfZwOpenTimer();
VfZwOpenTransaction();
VfZwOpenTransactionManager();
VfZwPowerInformation();
VfZwPrePrepareEnlistment();
VfZwPrepareComplete();
VfZwPrepareEnlistment();
VfZwProtectVirtualMemory();
VfZwPulseEvent();
VfZwQueryBootEntryOrder();
VfZwQueryBootOptions();
VfZwQueryDefaultLocale();
VfZwQueryDefaultUILanguage();
VfZwQueryDirectoryFile();
VfZwQueryDirectoryObject();
VfZwQueryDriverEntryOrder();
VfZwQueryEaFile();
VfZwQueryFullAttributesFile();
VfZwQueryInformationEnlistment();
VfZwQueryInformationFile();
VfZwQueryInformationJobObject();
VfZwQueryInformationProcess();
VfZwQueryInformationThread();
VfZwQueryInformationToken();
VfZwQueryInformationTransaction();
VfZwQueryInformationTransactionManager();
VfZwQueryInstallUILanguage();
VfZwQueryKey();
VfZwQueryLicenseValue();
VfZwQueryObject();
VfZwQuerySection();
VfZwQuerySecurityObject();
VfZwQuerySymbolicLinkObject();
VfZwQuerySystemInformation();
VfZwQueryValueKey();
VfZwQueryVolumeInformationFile();
VfZwReadFile();
VfZwRemoveIoCompletionEx();
VfZwReplaceKey();
VfZwRequestWaitReplyPort();
VfZwResetEvent();
VfZwRestoreKey();
VfZwRollbackEnlistment();
VfZwSetBootEntryOrder();
VfZwSetBootOptions();
VfZwSetDriverEntryOrder();
VfZwSetEaFile();
VfZwSetEvent();
VfZwSetInformationEnlistment();
VfZwSetInformationFile();
VfZwSetInformationJobObject();
VfZwSetInformationObject();
VfZwSetInformationProcess();
VfZwSetInformationThread();
VfZwSetInformationTransaction();
VfZwSetSecurityObject();
VfZwSetSystemInformation();
VfZwSetSystemTime();
VfZwSetTimer();
VfZwSetValueKey();
VfZwSetVolumeInformationFile();
VfZwTranslateFilePath();
VfZwUnloadDriver();
VfZwUnloadKey();
VfZwWaitForMultipleObjects();
VfZwWaitForSingleObject();
VfZwWriteFile();
VhdiGetDiskParameters();
VhdiGetPartitionNumber();
VhdiGetVolumeNumber();
VhdiInitializeBootDisk();
VhdiMountVhdFile();
VhdiQueryVolumeVhdFilePath();
VhdiVerifyBootDisk();
ViAdapterCallback();
ViAllocateContextTable();
ViAllocateContiguousMemory();
ViAllocateFromContiguousMemory();
ViAllocateMapRegisterFile();
ViAllocateMapRegistersFromFile();
ViAvlAcquireTableLockAtDpcLevelSafe();
ViAvlAllocateNode();
ViAvlCompareNode();
ViAvlCompareNodeUseSessionId();
ViAvlNodeInitializeSessionId();
ViAvlRaiseIrqlSafe();
ViAvlReleaseTableLockFromDpcLevel();
ViAvlTableIndex();
ViCheckAdapterBuffers();
ViCheckMdlLength();
ViCheckPadding();
ViCheckTag();
ViCiPreprocessOptions();
ViCopyBackModifiedBuffer();
ViCopyDeviceDescription();
ViCreateProcessCallback();
ViCreateProcessCallbackInternal();
ViCtxAllocateIsrContext();
ViCtxCaptureInitialIsrState();
ViCtxCheckAndReleaseIsrState();
ViCtxEqualExtendedState();
ViCtxIsr();
ViCtxIsrMessageBased();
ViCtxSetPrivateConnectParameters();
ViDdiBuildWmiRegInfoData();
ViDdiDispatchWmi();
ViDdiDispatchWmiQueryAllData();
ViDdiDispatchWmiRegInfoEx();
ViDdiDriverEntry();
ViDeadlockAddParticipant();
ViDeadlockAddResource();
ViDeadlockAddThread();
ViDeadlockAllocate();
ViDeadlockAnalyze();
ViDeadlockCanProceed();
ViDeadlockCertify();
ViDeadlockCheckDuplicatesAmongChildren();
ViDeadlockCheckDuplicatesAmongRoots();
ViDeadlockCheckStackLimits();
ViDeadlockDatabaseHashIndex();
ViDeadlockDetectionApplySettings();
ViDeadlockDetectionLock();
ViDeadlockDetectionTryConvertSharedToExclusive();
ViDeadlockDetectionUnlock();
ViDeadlockEmptyDatabase();
ViDeadlockForgetResourceHistory();
ViDeadlockFree();
ViDeadlockKernelVerifierLookasideAllocate();
ViDeadlockMergeNodes();
ViDeadlockPopulateLookasideCache();
ViDeadlockPreprocessOptions();
ViDeadlockRemoveMemoryRangeResources();
ViDeadlockRemoveMemoryRangeThreads();
ViDeadlockRemoveNode();
ViDeadlockRemoveResource();
ViDeadlockRemoveThread();
ViDeadlockSearchResource();
ViDeadlockSearchThread();
ViDeadlockSimilarNode();
ViDeadlockSimilarNodes();
ViDeadlockTrimResources();
ViDeadlockUpdateChildrenCount();
ViDevObjAdd();
ViDevObjDelayFreeAvlNode();
ViDevObjRemove();
ViDriverReApplyVerifierForAll();
ViErrorDisplayDescription();
ViErrorFinishReport();
ViErrorReport1();
ViErrorReport10();
ViErrorReport4();
ViErrorReport6();
ViExAcquireFastMutexCommon();
ViExCheckAPCLevelOrBelow();
ViExCheckAPCsDisabled();
ViExReleaseFastMutexCommon();
ViExTryToAcquireFastMutexCommon();
ViFaultsAddAllApps();
ViFaultsAddAllTags();
ViFaultsAddAppNoDuplicates();
ViFaultsAddTagNoDuplicates();
ViFaultsGetBaseImageName();
ViFaultsInitializeAppsList();
ViFaultsInitializeTagsList();
ViFaultsInjectionNotification();
ViFaultsIsAppTarget();
ViFaultsIsCurrentAppTarget();
ViFaultsIsTagPresentInList();
ViFaultsIsTagTarget();
ViFaultsRemoveAllApps();
ViFaultsRemoveAllTags();
ViFilterAddDevice();
ViFilterDeviceUsageNotificationCompletion();
ViFilterDispatchGeneric();
ViFilterDispatchPnp();
ViFilterDispatchPower();
ViFilterDriverEntry();
ViFilterGenericCompletionRoutine();
ViFilterIsDeviceExcluded();
ViFilterRemoveNotificationCompletion();
ViFilterStartCompletionRoutine();
ViFindMappedRegisterInFile();
ViFindTriageDriverTargets();
ViFindTriageRule();
ViFlushDoubleBuffer();
ViFlushZeroMapRegisterBaseWcbs();
ViFreeContextTable();
ViFreeMapRegisterFile();
ViFreeMapRegistersToFile();
ViFreeToContiguousMemory();
ViFreeTrackedPool();
ViGenericAddDevice();
ViGenericBuildIrpLogEntry();
ViGenericCleanup();
ViGenericClose();
ViGenericCreate();
ViGenericCreateMailslot();
ViGenericCreateNamedPipe();
ViGenericDeviceChange();
ViGenericDeviceControl();
ViGenericDirectoryControl();
ViGenericDispatchHandler();
ViGenericDriverEntry();
ViGenericDriverStartIo();
ViGenericDriverUnload();
ViGenericDumpIrpStack();
ViGenericFileSystemControl();
ViGenericFlushBuffers();
ViGenericInternalDeviceControl();
ViGenericIsNewRequest();
ViGenericIsValidIrpStatus();
ViGenericLockControl();
ViGenericPnp();
ViGenericPower();
ViGenericQueryEa();
ViGenericQueryInformation();
ViGenericQueryQuota();
ViGenericQuerySecurity();
ViGenericQueryVolumeInformation();
ViGenericRead();
ViGenericSetEa();
ViGenericSetInformation();
ViGenericSetQuota();
ViGenericSetSecurity();
ViGenericSetVolumeInformation();
ViGenericShutdown();
ViGenericSystemControl();
ViGenericVerifyFinalIrpStack();
ViGenericVerifyIrpStackDownward();
ViGenericVerifyIrpStackUpward();
ViGenericVerifyNewIrp();
ViGenericVerifyNewRequest();
ViGenericWrite();
ViGetAdapterInformationInternal();
ViGetContextPointer();
ViGetMapRegisterFile();
ViGetMdlBufferSa();
ViGetRealDmaOperation();
ViGrowPoolAllocation();
ViHalApplySettings();
ViHalFreeDomainCommonBuffer();
ViHalPreprocessOptions();
ViHalTrackDomainCommonBuffer();
ViHasBufferBeenTouched();
ViHookDmaAdapter();
ViInitPickRandomTargets();
ViInitSystemPhase0();
ViInitializeLocalSystemDescriptor();
ViInitializePadding();
ViIoCallbackSnapState();
ViIrpAllocateLockedPacket();
ViIrpCheckKernelAddressForIrp();
ViIrpDatabaseAcquireLockExclusive();
ViIrpDatabaseAcquireLockShared();
ViIrpDatabaseFindPointer();
ViIrpDatabaseReleaseLockExclusive();
ViIrpDatabaseReleaseLockShared();
ViIrpLogDatabaseFindPointer();
ViIrpLogExposeWmiCallback();
ViIrpSynchronousCompletionRoutine();
ViIsActiveChannelWcb();
ViIsBTSSupported();
ViIsContextIdValid();
ViIsDriverSuspectForVerifier();
ViIsThreadInsidePagingCodePaths();
ViKeAcquireSpinLockAtDpcLevelCommon();
ViKeAcquireSpinLockRaiseToDpcCommon();
ViKeInitializeMutantCommon();
ViKeInitializeMutexCommon();
ViKeInjectStatusAlerted();
ViKeIrqlLogCommon();
ViKeLogCriticalRegionStackTrace();
ViKeLowerIrqlSanityChecks();
ViKeObjectAcquired();
ViKeRaiseIrqlSanityChecks();
ViKeReleaseSpinLockCommon();
ViKeTryToAcquireSpinLockAtDpcLevelCommon();
ViKeWaitForMultipleObjectsCommon();
ViKeWaitForSingleObjectCommon();
ViKeWaitSanityChecks();
ViLockContextPointer();
ViLookasideAdd();
ViLookasideDelayFreeAvlNode();
ViLookasideDelete();
ViLookasideTrackList();
ViLookupThunkArray();
ViLowerIrql();
ViMakeVerifierSettings();
ViMapDoubleBuffer();
ViMmMapLockedPagesSanityChecks();
ViMmValidateIrql();
ViPacketNotificationCallback();
ViPendingCompleteAfterWait();
ViPendingCompleteAtDPC();
ViPendingDelayCompletion();
ViPendingQueuePassiveLevelCompletion();
ViPendingTryReserveWorker();
ViPendingWorkerThread();
ViPnpVerifyMinorWasProcessedProperly();
ViPoolDelayFreeTrimThreadRoutine();
ViPoolLogStackCallout();
ViPoolLogStackTrace();
ViPostPoolAllocation();
ViQueryObjectContext();
ViRaiseIrqlToDpcLevel();
ViReleaseDmaAdapter();
ViRemLockDelayFreeAvlNode();
ViRemLockDeleteFirstTreeNode();
ViRemLockFindSurrogate();
ViRemoveChannelWcb();
ViResourceAcquireSanityChecks();
ViResourceDelayFreeNode();
ViResourceReleaseSanityChecks();
ViRtlReplaceStringBuffer();
ViScatterGatherCallback();
ViSettingsEnableKernelHandleChecking();
ViSettingsIoCheckForChanges();
ViSetupBTSPerProcNoEnable();
ViShutdownScheduleWatchdog();
ViShutdownWatchdogExecuteDpc();
ViSpecialAllocateCommonBuffer();
ViSpecialFreeCommonBuffer();
ViSuspectDriversLookupEntry();
ViSwap();
ViTagBuffer();
ViTargetAddCountersCallback();
ViTargetAddToCounter();
ViTargetDelayFreeAvlNode();
ViTargetDriversAllocateVerifiedData();
ViTargetFreeContiguousMemory();
ViTargetFreeContiguousMemoryCallback();
ViTargetFreeContiguousMemoryFromNode();
ViTargetIncrementCounter();
ViTargetRemovingCheckContiguousMemory();
ViTargetRemovingCheckEtwWmi();
ViTargetTrackContiguousMemory();
ViTargetUpdateTreeAllowed();
ViTargetWMIDeregister();
ViTargetWMIDeregisterCallback();
ViTargetWMIRegister();
ViThunkAdjustExportAddressIfHooked();
ViThunkApplyMandatoryThunksCurrentSession();
ViThunkApplyThunksCurrentSession();
ViThunkCreateSharedExportInformation();
ViThunkCreateThunkTable();
ViThunkFindAllExportAddresses();
ViThunkFindAllSpecialTables();
ViThunkFindExportAddress();
ViThunkFindNextSpecialTable();
ViThunkFreeSharedThunksArray();
ViThunkRecoverPristines();
ViThunkRemoveImportEntry();
ViThunkReplaceAllSharedExports();
ViThunkReplaceAllThunkedImports();
ViThunkReplaceImportEntry();
ViThunkReplaceImportIfThunkedRegular();
ViThunkReplacePristine();
ViThunkReplaceSharedExports();
ViThunkReplaceSpecialPristine();
ViThunkSnapSharedExportByName();
ViThunkSnapSharedExports();
ViTriageSameDriversFromDump();
ViUnlockContextPointer();
ViValidateTriageRules();
ViWdBeforeCallDriver();
ViWdBeforeCancelIrp();
ViWdInsertSortIrp();
ViWdIrpBeforeCompletionRoutine();
ViWdIrpTimedOut();
ViWdIrpTimerDpcRoutine();
ViXdvBindXdvDDIWrappers();
ViXdvBindXdvDriverEntryWrappers();
ViXdvDriverLoadImage();
ViXdvGetFuncAddress();
ViXdvSearchAllThunkArrays();
ViXdvSearchAndReplaceThunkArray();
ViXdvSearchAndReplaceThunkArrayOrderDependent();
ViXdvSetXdvKernelUtilities();
ViZwCheckApcRequirement();
ViZwCheckObjectAttributes();
ViZwCheckUnicodeString();
ViZwCheckVirtualAddress();
ViZwShouldCheck();
VmAccessFault();
VmCallSkSvc();
VmColdPagesHint();
VmCreateMemoryProcess();
VmCreateMemoryRange();
VmDeleteMemoryRange();
VmFlushTb();
VmFreePreallocationForRangeCreate();
VmInitSystem();
VmMergeMemoryRanges();
VmPauseResumeNotify();
VmPreallocateForRangeCreate();
VmPrefetchVirtualAddresses();
VmProbeAndLockPages();
VmSecureBackingMemory();
VmSetThreadSchedulerAssist();
VmSplitMemoryRange();
VmTerminateMemoryProcess();
VmUnlockPages();
VmUnsecureBackingMemory();
VmpAccessFaultBatch();
VmpAccessFaultBatchResolve();
VmpAllocateMemoryRanges();
VmpConvertPortionVpnRangeToGpnRange();
VmpDecodePreallocationRangeHandle();
VmpFaultEntryInsert();
VmpFaultEntryRemove();
VmpFillGpnRanges();
VmpFlushTb();
VmpFlushTbVaRange();
VmpFreeMemoryRanges();
VmpInsertMemoryRange();
VmpInvalidateOutstandingFaults();
VmpMergeMemoryRanges();
VmpPauseResumeNotify();
VmpPrefetchForVirtualFault();
VmpPrefetchVirtualAddresses();
VmpPrefetchWorker();
VmpProcessAccessedBatch();
VmpProcessContextCleanup();
VmpProcessContextLockExclusive();
VmpProcessContextLockShared();
VmpProcessUpdateSlat();
VmpQueryAccessedState();
VmpRemoveMemoryRange();
VmpSplitMemoryRange();
VmpVaMemoryRangeGetNext();
VmpVaRangeNumberOfGpaRanges();
VmpValidateMemoryRangeParameters();
VrpAddNamespaceNodeToList();
VrpAllocateDiffHiveEntry();
VrpAllocateKeyContext();
VrpBecomeDiffHiveEntryTransitionOwner();
VrpBuildKeyPath();
VrpCleanupBufferParameter();
VrpCleanupNamespace();
VrpComparePath();
VrpCountPathComponents();
VrpCreateNamespaceNode();
VrpCreateNamespaceNodePlaceholderKey();
VrpDecommissionKeyContext();
VrpDecrementDiffHiveEntryHardRefCount();
VrpDecrementSiloCount();
VrpDereferenceDiffHiveEntry();
VrpDereferenceDiffHiveEntryWithLock();
VrpDereferenceJobContext();
VrpDestroyNamespaceNode();
VrpDestroyNamespaceNodeList();
VrpFindBestMatchNamespaceNode();
VrpFindDiffHiveEntryForMountPointWithLock();
VrpFindExactNamespaceNode();
VrpFindNamespaceNode();
VrpFindOrCreateDiffHiveEntryForMountPoint();
VrpFreeCallbackContext();
VrpFreeKeyContext();
VrpGetContextsForNotifyInfo();
VrpGetNextToken();
VrpHandleIoctlCreateMultipleNamespaceNodes();
VrpHandleIoctlCreateNamespaceNode();
VrpHandleIoctlGetVirtualRootKey();
VrpHandleIoctlInitializeJobForVreg();
VrpHandleIoctlLoadDifferencingHive();
VrpHandleIoctlLoadDifferencingHiveForHost();
VrpHandleIoctlModifyFlags();
VrpHandleIoctlUnloadDifferencingHiveForHost();
VrpHandleIoctlUnloadDynamicallyLoadedHives();
VrpIncrementSiloCount();
VrpInitializeLoadedDifferencingHives();
VrpIoctlDeviceDispatch();
VrpJobContextDelete();
VrpLoadDifferencingHive();
VrpOriginalKeyNameParameterCleanup();
VrpOutputBufferParameter();
VrpPostEnumerateKey();
VrpPostOpenOrCreate();
VrpPostQueryKey();
VrpPostUnloadKey();
VrpPreFlushKey();
VrpPreLoadKey();
VrpPreOpenOrCreate();
VrpPreQueryKeyName();
VrpPreUnloadKey();
VrpProcessBufferParameter();
VrpRegistryCallback();
VrpRegistryDispatch();
VrpRegistryUnload();
VrpRelinquishDiffHiveEntryTransitionOwner();
VrpShouldOperateOnCall();
VrpStripTrailingCharacters();
VrpTranslatePath();
VrpUnloadDifferencingHive();
VrpUpdateKeyInformation();
VrpWaitForDiffHiveEntryTransitionOwnerToLeave();
VslAbortLiveDump();
VslAccessPciDevice();
VslAllocatePool();
VslAllocateSecureHibernateResources();
VslApplyHotPatch();
VslBindNtIum();
VslCallEnclave();
VslCloseSecureHandle();
VslCompleteSecureDriverLoad();
VslConfigureDynamicMemory();
VslConnectSwInterrupt();
VslCreateEnclave();
VslCreateSecureAllocation();
VslCreateSecureImageSection();
VslCreateSecureProcess();
VslCreateSecureSection();
VslCreateSecureThread();
VslDebugProtectSecureProcessMemory();
VslDebugReadWriteSecureProcess();
VslDeleteSecureSection();
VslDetermineHotPatchType();
VslDetermineHotPatchUndoTableSize();
VslEnableKernelCfgTarget();
VslEnableOnDemandDebugWithResponse();
VslEndSecurePageIteration();
VslExchangeEntropy();
VslFastFlushSecureRangeList();
VslFillSecureAllocation();
VslFinalizeLiveDumpInSk();
VslFinalizeSecureImageHash();
VslFinishSecureImageValidation();
VslFinishStartSecureProcessor();
VslFlushSecureAddressSpace();
VslFreePoolTransferObject();
VslFreeSecureHibernateResources();
VslGetEtwDebugId();
VslGetNestedPageProtectionFlags();
VslGetOnDemandDebugChallenge();
VslGetSecurePciDeviceAlternateFunctionNumberForVtl0Dma();
VslGetSecurePciEnabled();
VslGetSecurePebAddress();
VslGetSecureTebAddress();
VslGetSetSecureContext();
VslHandleKsrCall();
VslInitializeEnclave();
VslInitializeSecureKernelCfg();
VslIsSecureKernelRunning();
VslIsTrustletRunning();
VslIumEfiRuntimeService();
VslIumEtwEnableCallback();
VslLiveDumpQuerySecondaryDataSize();
VslLoadEnclaveModule();
VslMakeCodeCatalog();
VslMakeProtectedPageWritable();
VslNotifyShutdown();
VslObtainHotPatchUndoTable();
VslPrepareSecureImageRelocations();
VslProvisionDumpEncryption();
VslQuerySecureDevice();
VslQuerySecureKernelProfileInformation();
VslQueryVirtualMemory();
VslRegisterLogPages();
VslRegisterSecureSystemProcess();
VslRelaxQuotas();
VslRelocateImage();
VslReportBugCheckProgress();
VslReserveProtectedPages();
VslRetrieveMailbox();
VslRevertHotPatch();
VslRundownSecureProcess();
VslSendDebugAttachNotifications();
VslSetCodeIntegrityPolicy();
VslSetPlaceholderPages();
VslSetupLiveDumpBufferInSk();
VslSlowFlushSecureRangeList();
VslStartSecureProcessor();
VslSvcEnterIumSecureMode();
VslTerminateSecureThread();
VslTestRoutine();
VslTransferSecureImageVersionResource();
VslUpdateFreezeTimeBias();
VslUpdateImportRelocationsOnImage();
VslValidateDynamicCodePages();
VslValidateSecureImagePages();
VslVerifyPage();
VslpAddLiveDumpBufferChunk();
VslpConnectedStandbyPoCallback();
VslpConnectedStandbyWnfCallback();
VslpDispatchIumSyscall();
VslpEnterIumSecureMode();
VslpIumInitializeTelemetry();
VslpIumPhase0Initialize();
VslpIumPhase0InitializeNtKd();
VslpIumPhase4Initialize();
VslpKsrEnterIumSecureMode();
VslpLockMdlForTransfer();
VslpLockPagesForTransfer();
VslpRegisterKsrCallback();
VslpSetupLiveDumpBuffer();
VslpUnlockPagesForTransfer();
WMIInitialize();
WRITE_PORT_UCHAR();
WRITE_PORT_ULONG();
WRITE_PORT_USHORT();
WRITE_REGISTER_UCHAR();
WRITE_REGISTER_ULONG();
WRITE_REGISTER_ULONG64();
WRITE_REGISTER_USHORT();
WarbirdCrypto::CCipherFeistel64::CallRoundFunction();
WbAddHeapExecutedBlockToCache();
WbAddHeapExecutedBlockToLRU();
WbAddLookupEntryEx();
WbAddWarbirdEncryptionSegment();
WbAlloc();
WbAllocateMemoryBlock();
WbAllocateSlots();
WbAllocateUserMemory();
WbCreateHeapExecutedBlock();
WbCreateHeapExecutedBlock$filt$0();
WbCreateWarbirdProcess();
WbDecryptEncryptionSegment();
WbDecryptWarbirdEncryptionSegment();
WbDecryptWarbirdEncryptionSegmentBlockV0();
WbDispatchOperation();
WbDispatchOperation$filt$0();
WbFreeMemoryBlock();
WbFreeMemoryBlockRegion();
WbFreeUserMemory();
WbFreeWarbirdEncryptionSegment();
WbFreeWarbirdProcess();
WbGetHeapExecutedBlock();
WbGetInitializedEncryptionSegment();
WbGetTrapFrame();
WbGetWarbirdEncryptionSegment();
WbGetWarbirdProcess();
WbGetWarbirdThread();
WbGetWowTrapFrame();
WbHashData();
WbHeapExecuteCall();
WbHeapExecutionUnloadModule();
WbInPlaceEncryptionUnloadModule();
WbInitializeEncryptionSegment();
WbInitializeEncryptionSegment$filt$0();
WbMakeUserDataPagesKernelWritable();
WbMakeUserDataPagesKernelWritable$filt$0();
WbMakeUserExecutablePagesKernelWritable();
WbMakeUserExecutablePagesKernelWritable$filt$0();
WbMoveHeapExecutedBlockToBackOfLRU();
WbProcessModuleUnload();
WbProcessModuleUnload$filt$0();
WbProcessStartup();
WbProcessStartup$filt$0();
WbReAlloc();
WbReEncryptEncryptionSegment();
WbReEncryptWarbirdEncryptionSegment();
WbReleaseLeastRecentlyUsedHeapExecutedBlocks();
WbRemoveWarbirdProcess();
WbSetTrapFrame();
WbSetWowTrapFrame();
WbUpdateHeapExecutedCallArgumentList();
WbUpdateHeapExecutedCallArgumentList$filt$0();
WbValidateEncryptionSegmentArguments();
WbValidateEncryptionSegmentArguments$filt$0();
WbValidateEncryptionSegmentArguments$filt$1();
WbValidateHeapExecuteCallArguments();
WbValidateHeapExecuteCallArguments$filt$0();
WbValidateHeapExecuteCallArguments$filt$1();
WbVerifyVirtualAddressSignature();
WdiDispatchControl();
WdiUpdateSem();
WdipAccessCheck();
WdipSemActivateInstance();
WdipSemAddContextEventToScenario();
WdipSemAddEndEventToScenario();
WdipSemAddScenarioToTable();
WdipSemAllocatePool();
WdipSemBuildScenarioInstance();
WdipSemCaptureState();
WdipSemCleanStart();
WdipSemCleanupGroupPolicy();
WdipSemClearFrequentScenarioTable();
WdipSemDeleteTransitionalInstance();
WdipSemDisableAllProviders();
WdipSemDisableContextProvider();
WdipSemDisableContextProviders();
WdipSemDisableScenario();
WdipSemEnableAllProviders();
WdipSemEnableContextProvider();
WdipSemEnableContextProviders();
WdipSemEnableDisableTrace();
WdipSemEnableScenario();
WdipSemEnableSemProvider();
WdipSemFastAllocate();
WdipSemFastFree();
WdipSemFreePool();
WdipSemFreeScenario();
WdipSemGetGuidKey();
WdipSemGetLoggerIds();
WdipSemInitialize();
WdipSemInitializeGlobalState();
WdipSemLoadConfigInfo();
WdipSemLoadGroupPolicy();
WdipSemLoadLocalGroupPolicy();
WdipSemLoadNextContextProvider();
WdipSemLoadNextEndEvent();
WdipSemLoadNextScenario();
WdipSemLoadScenarioTable();
WdipSemLogInflightLimitExceededInformation();
WdipSemLogTimeoutInformation();
WdipSemMarkInstanceForDeletion();
WdipSemMarkNextTimedOutInstanceForDeletion();
WdipSemMergeEvents();
WdipSemMergeScenarios();
WdipSemOpenRegistryKey();
WdipSemQueryEnabledInstanceTable();
WdipSemQueryInflightScenarioTable();
WdipSemQueryProviderTable();
WdipSemQueryScenarioTable();
WdipSemQueryValueFromRegistry();
WdipSemReserveInstanceTableEntry();
WdipSemRollBackProviderTable();
WdipSemShutdown();
WdipSemSqmAddToStream();
WdipSemSqmEnabled();
WdipSemSqmIncrementDword();
WdipSemSqmInit();
WdipSemSqmLogInflightLimitExceededDataPoints();
WdipSemSqmLogTimeoutDataPoints();
WdipSemStartTimeoutCheck();
WdipSemUpdate();
WdipSemUpdateFrequentScenarioTable();
WdipSemUpdateInflightScenarioTable();
WdipSemUpdateProviderEntriesForScenario();
WdipSemUpdateProviderEntryForEvent();
WdipSemUpdateProviderTableWithEvent();
WdipSemUpdateProviderTableWithScenario();
WdipSemValidateEndEvent();
WdipSemWriteEvent();
WdipSemWriteInflightLimitExceededEvent();
WdipSemWriteMisconfigEvent();
WdipSemWriteProviderLimitExceededEvent();
WdipSemWriteScenarioLimitExceededEvent();
WdipSemWriteSemActionsEvent();
WdipSemWriteSemFailureEvent();
WdipSemWriteTimeoutEvent();
WdipStartEndScenario();
WdipTimeoutCheckRoutine();
WdipTimeoutTimerRoutine();
WheaAddErrorSource();
WheaAttemptPhysicalPageOffline();
WheaConfigureErrorSource();
WheaCrashDumpInitializationComplete();
WheaDeferredRecoveryService();
WheaGetErrPacketFromErrRecord();
WheaGetErrorSource();
WheaInitialize();
WheaInitializeDeferredRecoveryObject();
WheaInitializeProcessor();
WheaInitializeRecordHeader();
WheaInitializeServices();
WheaLogInternalEvent();
WheaPersistOfflinedPage();
WheaRegisterInUsePageOfflineNotification();
WheaReportHwError();
WheaRequestDeferredRecovery();
WheaTerminateProcess();
WheaUnregisterInUsePageOfflineNotification();
WheaWmiDispatch();
WheapAddErrorSource();
WheapAddRecoveryPacketToErrorRecord();
WheapAddSectionFromGenericErrorData();
WheapAddToDumpFile();
WheapAllocErrorRecord();
WheapApplyPolicyChanges();
WheapApplyThresholdChecks();
WheapAttemptErrorRecovery();
WheapAttemptPhysicalPageOffline();
WheapAttemptPhysicalPageOfflineWorker();
WheapCallInUsePageNotificationCallbacks();
WheapCheckForAndReportErrorsFromPreviousSession();
WheapClearPoison();
WheapCommitPolicy();
WheapCompressErrorRecord();
WheapCountBadPageExtents();
WheapCreateLiveTriageDump();
WheapCreatePerProcessorInfo();
WheapCreateRecordFromGenericErrorData();
WheapCreateTriageDumpFromPreviousSession();
WheapDefaultErrSrcCorrect();
WheapDefaultErrSrcCreateRecord();
WheapDefaultErrSrcInitialize();
WheapDefaultErrSrcRecover();
WheapDeferredRecoveryServiceDpcRoutine();
WheapDeferredRecoveryServiceWorker();
WheapEtwEnableCallback();
WheapFreeErrorRecord();
WheapGenerateETWEvents();
WheapGenericErrSrcRecover();
WheapGetAllPolicyBufferSize();
WheapGetAllPolicyValues();
WheapGetErrorSource();
WheapGetPolicyValue();
WheapGetPreallocatedErrorRecord();
WheapInitializeDeferredErrorSources();
WheapInitializeErrorRecordWrapper();
WheapInitializeErrorSource();
WheapInitializeErrorSourceTable();
WheapInitializeEventing();
WheapInitializeInUsePageOfflineNotifications();
WheapInitializeWorkQueue();
WheapInsertTriageDataBlock();
WheapIsPageInList();
WheapIsSqmLoggerRunning();
WheapLoadPolicy();
WheapLogInitEvent();
WheapLogPageOfflineAttemptEvent();
WheapLogProcessTerminateEvent();
WheapPfaMemoryCheck();
WheapPfaReset();
WheapPfaRetireExpiredMemoryEntries();
WheapPredictiveFailureAnalysis();
WheapProcessWorkQueueItem();
WheapQueryPshedForErrorSources();
WheapReportBootError();
WheapReportPersistedErrorRecord();
WheapSetPolicyValue();
WheapSortBadPages();
WheapSqmAddToStream();
WheapSqmCollectPshedPluginTelemetry();
WheapSqmCollectWheaOscTelemetry();
WheapSqmCollectWheaPolicyTelemetry();
WheapSqmDwordCommon();
WheapSqmIncrementDword();
WheapSqmSetDword();
WheapSqmWaitDpcRoutine();
WheapSqmWaitWorkerRoutine();
WheapWmiExecuteErrorInjectionMethod();
WheapWmiExecuteErrorSourceMethod();
WheapWmiExecuteMethod();
WheapWmiExecutePolicyManagementMethod();
WheapWmiGetAllData();
WheapWmiGetSingleInstance();
WheapWmiRegisterInfo();
WheapWorkQueueAddItem();
WheapWorkQueueDpcRoutine();
WheapWorkQueueWorkerRoutine();
WheapWriteTriageDump();
Win7PsGetVersion();
Win7RtlGetVersion();
Win81PsGetVersion();
Win81RtlGetVersion();
Win8PsGetVersion();
Win8RtlGetVersion();
WmiAcquireSmbiosLockExclusive();
WmiGetClock();
WmiQueryTraceInformation();
WmiQueryTraceProviderCount();
WmiReleaseSmbiosLockExclusive();
WmiSetNetworkNotify();
WmiTraceMessage();
WmiTraceMessageVa();
WmiTraceRundownNotify();
WmiVerifierCopyEvent();
WmiVerifierTakeEventOwnership();
WmipAddDataSource();
WmipAddMofResource();
WmipAddProviderIdToPIList();
WmipAllocDataSource();
WmipAllocEntry();
WmipAllocGuidEntry();
WmipAllocProviderId();
WmipAllocRegEntry();
WmipAllocateSingleInstanceWnode();
WmipBuildInstanceSet();
WmipBuildTraceDeviceList();
WmipCachePtrs();
WmipClearIrpObjectList();
WmipCompleteGuidIrpWithError();
WmipCopyFromEventQueues();
WmipCountedToSz();
WmipCreateGuidObject();
WmipDSCleanup();
WmipDeleteMethod();
WmipDereferenceEvent();
WmipDeregisterDevice();
WmipDeregisterRegEntry();
WmipDetermineInstanceBaseIndex();
WmipDisableCollectOrEvent();
WmipDisableCollectionForRemovedGuid();
WmipDoDisableRequest();
WmipDoFindRegEntryByDevice();
WmipDoFindRegEntryByProviderId();
WmipDriverEntry();
WmipEnableCollectOrEvent();
WmipEnableCollectionForNewGuid();
WmipEnumerateGuids();
WmipEnumerateMofResources();
WmipEventNotification();
WmipFindGEByGuid();
WmipFindGuid();
WmipFindISInDSByGuid();
WmipFindISinGEbyName();
WmipFindMRByNames();
WmipFindRegEntryByDevice();
WmipFindRegEntryByProviderId();
WmipFindSMBiosStructure();
WmipFindSysIdTable();
WmipFirmwareTableHandler();
WmipForwardWmiIrp();
WmipFreeTraceDeviceList();
WmipGECleanup();
WmipGenerateBinaryMofNotification();
WmipGenerateMofResourceNotification();
WmipGenerateRegistrationNotification();
WmipGetFilePDO();
WmipGetGuidObjectInstanceInfo();
WmipGetGuidPropertiesFromGuidEntry();
WmipGetGuidSecurityDescriptor();
WmipGetRegistryHideMachine();
WmipGetSMBiosEventlog();
WmipGetSMBiosFromLoaderBlock();
WmipGetSMBiosTableData();
WmipGetSysIds();
WmipHexStringToDword();
WmipISCleanup();
WmipIncludeStaticNames();
WmipInitializeAllocs();
WmipInitializeDataStructs();
WmipInitializeRegistration();
WmipInitializeSecurity();
WmipInsertMofResource();
WmipInsertStaticNames();
WmipIoControl();
WmipIsEqualInstanceSets();
WmipIsNumber();
WmipIsQuerySetGuid();
WmipLegacyEtwCallback();
WmipLegacyEtwWorker();
WmipLinkDataSourceToList();
WmipMRCleanup();
WmipMangleInstanceName();
WmipNotificationIrpCancel();
WmipOpenBlock();
WmipOpenCloseCleanup();
WmipOpenGuidObject();
WmipParseSysIdTable();
WmipPrepareForWnodeAD();
WmipPrepareWnodeSI();
WmipProbeAndCaptureGuidObjectAttributes();
WmipProbeWmiOpenGuidBlock();
WmipProbeWnodeMethodItem();
WmipProbeWnodeSingleInstance();
WmipProbeWnodeSingleItem();
WmipProbeWnodeWorker();
WmipProcessEvent();
WmipProcessLegacyEtwCallback();
WmipProcessLegacyEtwRegister();
WmipProcessWmiRegInfo();
WmipQueryAllData();
WmipQueryAllDataMultiple();
WmipQueryGuidInfo();
WmipQuerySetExecuteSI();
WmipQuerySingleMultiple();
WmipQueryWmiDataBlock();
WmipQueryWmiRegInfo();
WmipQueueLegacyEtwWork();
WmipQueueNotification();
WmipQueueRegWork();
WmipRawSMBiosTableHandler();
WmipReceiveNotifications();
WmipReferenceEntry();
WmipRegisterDevice();
WmipRegisterEtwProvider();
WmipRegisterFirmwareProviders();
WmipRegisterOrUpdateDS();
WmipRegistrationWorker();
WmipReleaseCollectionEnabled();
WmipRemoveDS();
WmipSDRegistryQueryRoutine();
WmipSMBiosFindStringAndZero();
WmipSMBiosFindStructure();
WmipSMBiosHideMachine();
WmipSaveGuidSecurityDescriptor();
WmipSecurityMethod();
WmipSendDisableRequest();
WmipSendEnableDisableRequest();
WmipSendEnableRequest();
WmipSendGuidUpdateNotifications();
WmipSendWmiIrp();
WmipSendWmiIrpToTraceDeviceList();
WmipSetTraceNotify();
WmipStaticInstanceNameSize();
WmipSystemControl();
WmipTranslateFileHandle();
WmipTranslatePDOInstanceNames();
WmipUnlinkInstanceSetFromGuidEntry();
WmipUnreferenceEntry();
WmipUnreferenceRegEntry();
WmipUnregisterEtwProvider();
WmipUpdateAddGuid();
WmipUpdateDataSource();
WmipUpdateDeviceStackSize();
WmipUpdateModifyGuid();
WmipUpdateRegistration();
WmipUuidFromString();
WmipValidateWmiRegInfoString();
WmipWaitForCollectionEnabled();
WmipWmiIrpCompletion();
WmipWriteWnodeToObject();
WriteAMDMsr();
WritePortWithIndex16();
WritePortWithIndex32();
WritePortWithIndex8();
WriteRegisterWithIndex16();
WriteRegisterWithIndex32();
WriteRegisterWithIndex64();
WriteRegisterWithIndex8();
WritebackInvalidateWorker();
XIPDispatch();
XRestoreSHelper();
XSaveCHelper();
XSaveSHelper();
XdvExAllocatePoolInternal();
XdvExInitializeLookasideListExInternal();
XdvExInitializeNPagedLookasideListInternal();
XdvExInitializePagedLookasideListInternal();
XdvIoAllocateIrp();
XdvIoAllocateMdl();
XdvIoAllocateWorkItem();
XdvIoBuildDeviceIoControlRequest();
XdvIoBuildSynchronousFsdRequest();
XdvIopBuildAsynchronousFsdRequest();
XpressBuildHuffmanDecodingTable();
XpressBuildHuffmanEncodings();
XpressDecode();
XpressDecodeClose();
XpressDecodeCreate();
XpressDoHuffmanPass();
ZwAcceptConnectPort();
ZwAccessCheck();
ZwAccessCheckAndAuditAlarm();
ZwAccessCheckByType();
ZwAccessCheckByTypeAndAuditAlarm();
ZwAccessCheckByTypeResultList();
ZwAccessCheckByTypeResultListAndAuditAlarm();
ZwAccessCheckByTypeResultListAndAuditAlarmByHandle();
ZwAcquireProcessActivityReference();
ZwAddAtom();
ZwAddAtomEx();
ZwAddBootEntry();
ZwAddDriverEntry();
ZwAdjustGroupsToken();
ZwAdjustPrivilegesToken();
ZwAdjustTokenClaimsAndDeviceGroups();
ZwAlertResumeThread();
ZwAlertThread();
ZwAlertThreadByThreadId();
ZwAllocateLocallyUniqueId();
ZwAllocateReserveObject();
ZwAllocateUserPhysicalPages();
ZwAllocateUuids();
ZwAllocateVirtualMemory();
ZwAllocateVirtualMemoryEx();
ZwAlpcAcceptConnectPort();
ZwAlpcCancelMessage();
ZwAlpcConnectPort();
ZwAlpcConnectPortEx();
ZwAlpcCreatePort();
ZwAlpcCreatePortSection();
ZwAlpcCreateResourceReserve();
ZwAlpcCreateSectionView();
ZwAlpcCreateSecurityContext();
ZwAlpcDeletePortSection();
ZwAlpcDeleteResourceReserve();
ZwAlpcDeleteSectionView();
ZwAlpcDeleteSecurityContext();
ZwAlpcDisconnectPort();
ZwAlpcImpersonateClientContainerOfPort();
ZwAlpcImpersonateClientOfPort();
ZwAlpcOpenSenderProcess();
ZwAlpcOpenSenderThread();
ZwAlpcQueryInformation();
ZwAlpcQueryInformationMessage();
ZwAlpcRevokeSecurityContext();
ZwAlpcSendWaitReceivePort();
ZwAlpcSetInformation();
ZwApphelpCacheControl();
ZwAreMappedFilesTheSame();
ZwAssignProcessToJobObject();
ZwAssociateWaitCompletionPacket();
ZwCallEnclave();
ZwCallbackReturn();
ZwCancelIoFile();
ZwCancelIoFileEx();
ZwCancelSynchronousIoFile();
ZwCancelTimer();
ZwCancelTimer2();
ZwCancelWaitCompletionPacket();
ZwClearEvent();
ZwClose();
ZwCloseObjectAuditAlarm();
ZwCommitComplete();
ZwCommitEnlistment();
ZwCommitRegistryTransaction();
ZwCommitTransaction();
ZwCompactKeys();
ZwCompareObjects();
ZwCompareSigningLevels();
ZwCompareTokens();
ZwCompleteConnectPort();
ZwCompressKey();
ZwConnectPort();
ZwContinue();
ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter();
ZwCreateDebugObject();
ZwCreateDirectoryObject();
ZwCreateDirectoryObjectEx();
ZwCreateEnclave();
ZwCreateEnlistment();
ZwCreateEvent();
ZwCreateEventPair();
ZwCreateFile();
ZwCreateIRTimer();
ZwCreateIoCompletion();
ZwCreateJobObject();
ZwCreateJobSet();
ZwCreateKey();
ZwCreateKeyTransacted();
ZwCreateKeyedEvent();
ZwCreateLowBoxToken();
ZwCreateMailslotFile();
ZwCreateMutant();
ZwCreateNamedPipeFile();
ZwCreatePagingFile();
ZwCreatePartition();
ZwCreatePort();
ZwCreatePrivateNamespace();
ZwCreateProcess();
ZwCreateProcessEx();
ZwCreateProfile();
ZwCreateProfileEx();
ZwCreateRegistryTransaction();
ZwCreateResourceManager();
ZwCreateSection();
ZwCreateSectionEx();
ZwCreateSemaphore();
ZwCreateSymbolicLinkObject();
ZwCreateThread();
ZwCreateThreadEx();
ZwCreateTimer();
ZwCreateTimer2();
ZwCreateToken();
ZwCreateTokenEx();
ZwCreateTransaction();
ZwCreateTransactionManager();
ZwCreateUserProcess();
ZwCreateWaitCompletionPacket();
ZwCreateWaitablePort();
ZwCreateWnfStateName();
ZwCreateWorkerFactory();
ZwDebugActiveProcess();
ZwDebugContinue();
ZwDelayExecution();
ZwDeleteAtom();
ZwDeleteBootEntry();
ZwDeleteDriverEntry();
ZwDeleteFile();
ZwDeleteKey();
ZwDeleteObjectAuditAlarm();
ZwDeletePrivateNamespace();
ZwDeleteValueKey();
ZwDeleteWnfStateData();
ZwDeleteWnfStateName();
ZwDeviceIoControlFile();
ZwDisableLastKnownGood();
ZwDisplayString();
ZwDrawText();
ZwDuplicateObject();
ZwDuplicateToken();
ZwEnableLastKnownGood();
ZwEnumerateBootEntries();
ZwEnumerateDriverEntries();
ZwEnumerateKey();
ZwEnumerateSystemEnvironmentValuesEx();
ZwEnumerateTransactionObject();
ZwEnumerateValueKey();
ZwExtendSection();
ZwFilterBootOption();
ZwFilterToken();
ZwFilterTokenEx();
ZwFindAtom();
ZwFlushBuffersFile();
ZwFlushBuffersFileEx();
ZwFlushInstallUILanguage();
ZwFlushInstructionCache();
ZwFlushKey();
ZwFlushProcessWriteBuffers();
ZwFlushVirtualMemory();
ZwFlushWriteBuffer();
ZwFreeUserPhysicalPages();
ZwFreeVirtualMemory();
ZwFreezeRegistry();
ZwFreezeTransactions();
ZwFsControlFile();
ZwGetCachedSigningLevel();
ZwGetCompleteWnfStateSubscription();
ZwGetContextThread();
ZwGetCurrentProcessorNumber();
ZwGetCurrentProcessorNumberEx();
ZwGetDevicePowerState();
ZwGetMUIRegistryInfo();
ZwGetNextProcess();
ZwGetNextThread();
ZwGetNlsSectionPtr();
ZwGetNotificationResourceManager();
ZwGetWriteWatch();
ZwImpersonateAnonymousToken();
ZwImpersonateClientOfPort();
ZwImpersonateThread();
ZwInitializeEnclave();
ZwInitializeNlsFiles();
ZwInitializeRegistry();
ZwInitiatePowerAction();
ZwIsProcessInJob();
ZwIsSystemResumeAutomatic();
ZwIsUILanguageComitted();
ZwListenPort();
ZwLoadDriver();
ZwLoadEnclaveData();
ZwLoadKey();
ZwLoadKey2();
ZwLoadKeyEx();
ZwLockFile();
ZwLockProductActivationKeys();
ZwLockRegistryKey();
ZwLockVirtualMemory();
ZwMakePermanentObject();
ZwMakeTemporaryObject();
ZwManageHotPatch();
ZwManagePartition();
ZwMapCMFModule();
ZwMapUserPhysicalPages();
ZwMapUserPhysicalPagesScatter();
ZwMapViewOfSection();
ZwMapViewOfSectionEx();
ZwModifyBootEntry();
ZwModifyDriverEntry();
ZwNotifyChangeDirectoryFile();
ZwNotifyChangeDirectoryFileEx();
ZwNotifyChangeKey();
ZwNotifyChangeMultipleKeys();
ZwNotifyChangeSession();
ZwOpenDirectoryObject();
ZwOpenEnlistment();
ZwOpenEvent();
ZwOpenEventPair();
ZwOpenFile();
ZwOpenIoCompletion();
ZwOpenJobObject();
ZwOpenKey();
ZwOpenKeyEx();
ZwOpenKeyTransacted();
ZwOpenKeyTransactedEx();
ZwOpenKeyedEvent();
ZwOpenMutant();
ZwOpenObjectAuditAlarm();
ZwOpenPartition();
ZwOpenPrivateNamespace();
ZwOpenProcess();
ZwOpenProcessToken();
ZwOpenProcessTokenEx();
ZwOpenRegistryTransaction();
ZwOpenResourceManager();
ZwOpenSection();
ZwOpenSemaphore();
ZwOpenSession();
ZwOpenSymbolicLinkObject();
ZwOpenThread();
ZwOpenThreadToken();
ZwOpenThreadTokenEx();
ZwOpenTimer();
ZwOpenTransaction();
ZwOpenTransactionManager();
ZwPlugPlayControl();
ZwPowerInformation();
ZwPrePrepareComplete();
ZwPrePrepareEnlistment();
ZwPrepareComplete();
ZwPrepareEnlistment();
ZwPrivilegeCheck();
ZwPrivilegeObjectAuditAlarm();
ZwPrivilegedServiceAuditAlarm();
ZwPropagationComplete();
ZwPropagationFailed();
ZwProtectVirtualMemory();
ZwPulseEvent();
ZwQueryAttributesFile();
ZwQueryAuxiliaryCounterFrequency();
ZwQueryBootEntryOrder();
ZwQueryBootOptions();
ZwQueryDebugFilterState();
ZwQueryDefaultLocale();
ZwQueryDefaultUILanguage();
ZwQueryDirectoryFile();
ZwQueryDirectoryFileEx();
ZwQueryDirectoryObject();
ZwQueryDriverEntryOrder();
ZwQueryEaFile();
ZwQueryEvent();
ZwQueryFullAttributesFile();
ZwQueryInformationAtom();
ZwQueryInformationByName();
ZwQueryInformationEnlistment();
ZwQueryInformationFile();
ZwQueryInformationJobObject();
ZwQueryInformationPort();
ZwQueryInformationProcess();
ZwQueryInformationResourceManager();
ZwQueryInformationThread();
ZwQueryInformationToken();
ZwQueryInformationTransaction();
ZwQueryInformationTransactionManager();
ZwQueryInformationWorkerFactory();
ZwQueryInstallUILanguage();
ZwQueryIntervalProfile();
ZwQueryIoCompletion();
ZwQueryKey();
ZwQueryLicenseValue();
ZwQueryMultipleValueKey();
ZwQueryMutant();
ZwQueryObject();
ZwQueryOpenSubKeys();
ZwQueryOpenSubKeysEx();
ZwQueryPerformanceCounter();
ZwQueryPortInformationProcess();
ZwQueryQuotaInformationFile();
ZwQuerySection();
ZwQuerySecurityAttributesToken();
ZwQuerySecurityObject();
ZwQuerySecurityPolicy();
ZwQuerySemaphore();
ZwQuerySymbolicLinkObject();
ZwQuerySystemEnvironmentValue();
ZwQuerySystemEnvironmentValueEx();
ZwQuerySystemInformation();
ZwQuerySystemInformationEx();
ZwQuerySystemTime();
ZwQueryTimer();
ZwQueryTimerResolution();
ZwQueryValueKey();
ZwQueryVirtualMemory();
ZwQueryVolumeInformationFile();
ZwQueryWnfStateData();
ZwQueryWnfStateNameInformation();
ZwQueueApcThread();
ZwQueueApcThreadEx();
ZwRaiseException();
ZwRaiseHardError();
ZwReadFile();
ZwReadFileScatter();
ZwReadOnlyEnlistment();
ZwReadRequestData();
ZwReadVirtualMemory();
ZwRecoverEnlistment();
ZwRecoverResourceManager();
ZwRecoverTransactionManager();
ZwRegisterProtocolAddressInformation();
ZwRegisterThreadTerminatePort();
ZwReleaseKeyedEvent();
ZwReleaseMutant();
ZwReleaseSemaphore();
ZwReleaseWorkerFactoryWorker();
ZwRemoveIoCompletion();
ZwRemoveIoCompletionEx();
ZwRemoveProcessDebug();
ZwRenameKey();
ZwRenameTransactionManager();
ZwReplaceKey();
ZwReplacePartitionUnit();
ZwReplyPort();
ZwReplyWaitReceivePort();
ZwReplyWaitReceivePortEx();
ZwReplyWaitReplyPort();
ZwRequestPort();
ZwRequestWaitReplyPort();
ZwResetEvent();
ZwResetWriteWatch();
ZwRestoreKey();
ZwResumeProcess();
ZwResumeThread();
ZwRevertContainerImpersonation();
ZwRollbackComplete();
ZwRollbackEnlistment();
ZwRollbackRegistryTransaction();
ZwRollbackTransaction();
ZwRollforwardTransactionManager();
ZwSaveKey();
ZwSaveKeyEx();
ZwSaveMergedKeys();
ZwSecureConnectPort();
ZwSerializeBoot();
ZwSetBootEntryOrder();
ZwSetBootOptions();
ZwSetCachedSigningLevel();
ZwSetCachedSigningLevel2();
ZwSetContextThread();
ZwSetDebugFilterState();
ZwSetDefaultHardErrorPort();
ZwSetDefaultLocale();
ZwSetDefaultUILanguage();
ZwSetDriverEntryOrder();
ZwSetEaFile();
ZwSetEvent();
ZwSetEventBoostPriority();
ZwSetHighEventPair();
ZwSetHighWaitLowEventPair();
ZwSetIRTimer();
ZwSetInformationDebugObject();
ZwSetInformationEnlistment();
ZwSetInformationFile();
ZwSetInformationJobObject();
ZwSetInformationKey();
ZwSetInformationObject();
ZwSetInformationProcess();
ZwSetInformationResourceManager();
ZwSetInformationSymbolicLink();
ZwSetInformationThread();
ZwSetInformationToken();
ZwSetInformationTransaction();
ZwSetInformationTransactionManager();
ZwSetInformationVirtualMemory();
ZwSetInformationWorkerFactory();
ZwSetIntervalProfile();
ZwSetIoCompletion();
ZwSetIoCompletionEx();
ZwSetLdtEntries();
ZwSetLowEventPair();
ZwSetLowWaitHighEventPair();
ZwSetQuotaInformationFile();
ZwSetSecurityObject();
ZwSetSystemEnvironmentValue();
ZwSetSystemEnvironmentValueEx();
ZwSetSystemInformation();
ZwSetSystemPowerState();
ZwSetSystemTime();
ZwSetThreadExecutionState();
ZwSetTimer();
ZwSetTimer2();
ZwSetTimerEx();
ZwSetTimerResolution();
ZwSetUuidSeed();
ZwSetValueKey();
ZwSetVolumeInformationFile();
ZwSetWnfProcessNotificationEvent();
ZwShutdownSystem();
ZwShutdownWorkerFactory();
ZwSignalAndWaitForSingleObject();
ZwSinglePhaseReject();
ZwStartProfile();
ZwStopProfile();
ZwSubscribeWnfStateChange();
ZwSuspendProcess();
ZwSuspendThread();
ZwSystemDebugControl();
ZwTerminateEnclave();
ZwTerminateJobObject();
ZwTerminateProcess();
ZwTerminateThread();
ZwTestAlert();
ZwThawRegistry();
ZwThawTransactions();
ZwTraceControl();
ZwTraceEvent();
ZwTranslateFilePath();
ZwUmsThreadYield();
ZwUnloadDriver();
ZwUnloadKey();
ZwUnloadKey2();
ZwUnloadKeyEx();
ZwUnlockFile();
ZwUnlockVirtualMemory();
ZwUnmapViewOfSection();
ZwUnmapViewOfSectionEx();
ZwUnsubscribeWnfStateChange();
ZwUpdateWnfStateData();
ZwVdmControl();
ZwWaitForAlertByThreadId();
ZwWaitForDebugEvent();
ZwWaitForKeyedEvent();
ZwWaitForMultipleObjects();
ZwWaitForMultipleObjects32();
ZwWaitForSingleObject();
ZwWaitForWorkViaWorkerFactory();
ZwWaitHighEventPair();
ZwWaitLowEventPair();
ZwWorkerFactoryWorkerReady();
ZwWriteFile();
ZwWriteFileGather();
ZwWriteRequestData();
ZwWriteVirtualMemory();
ZwYieldExecution();
_C_specific_handler();
_CmAddDeviceToContainer();
_CmAddDeviceToContainerWorker();
_CmClassPropertyRead();
_CmClassSubkeyCallback();
_CmContainerListGenericObjectCallback();
_CmCreateDevice();
_CmCreateDeviceContainer();
_CmCreateDeviceContainerWorker();
_CmCreateDeviceInterface();
_CmCreateDeviceInterfaceWorker();
_CmCreateInterfaceClass();
_CmCreateInterfaceClassWorker();
_CmCreateOrdinalInstanceKey();
_CmDeviceClassesSubkeyCallback();
_CmDevicePanelEnumSubkeyCallback();
_CmDevicePropertyRead();
_CmEnumSubkeyCallback();
_CmGetCommonClassRegKeyPath();
_CmGetDeviceContainerMappedProperty();
_CmGetDeviceContainerRegKeyPath();
_CmGetDeviceControlKeyPath();
_CmGetDeviceHardwareKeyPath();
_CmGetDeviceInstanceKeyPath();
_CmGetDeviceInterfaceMappedPropertyFromComposite();
_CmGetDeviceInterfaceMappedPropertyFromRegValue();
_CmGetDeviceInterfaceName();
_CmGetDeviceInterfaceReferenceString();
_CmGetDeviceInterfaceRegKeyPath();
_CmGetDeviceInterfaceSubkeyPath();
_CmGetDeviceInterfaceSymbolicLinkName();
_CmGetDeviceLogConfKeyPath();
_CmGetDeviceMappedProperty();
_CmGetDeviceMappedPropertyFromComposite();
_CmGetDeviceMappedPropertyFromInstanceKeyRegValue();
_CmGetDeviceMappedPropertyFromRegProp();
_CmGetDevicePanelGroup();
_CmGetDeviceParent();
_CmGetDeviceRegKeyPath();
_CmGetDeviceRegKeySecurityDescriptor();
_CmGetDeviceRegProp();
_CmGetDeviceRegPropWorker();
_CmGetDeviceSoftwareKey();
_CmGetDeviceSoftwareKeyPath();
_CmGetInstallerClassCompoundFilters();
_CmGetInstallerClassMappedProperty();
_CmGetInstallerClassMappedPropertyFromCoInstallers();
_CmGetInstallerClassMappedPropertyFromComposite();
_CmGetInstallerClassMappedPropertyFromRegProp();
_CmGetInstallerClassMappedPropertyFromRegValue();
_CmGetInstallerClassRegProp();
_CmGetInstallerClassRegPropWorker();
_CmGetInterfaceClassMappedProperty();
_CmGetInterfaceClassMappedPropertyFromRegValue();
_CmGetMatchingCommonClassList();
_CmGetMatchingCommonClassListWorker();
_CmGetMatchingDeviceContainerList();
_CmGetMatchingDeviceInterfaceList();
_CmGetMatchingDeviceList();
_CmGetMatchingDeviceListForSubkey();
_CmGetMatchingDevicePanelList();
_CmGetMatchingDevicePanelListWorker();
_CmGetMatchingFilteredDeviceInterfaceList();
_CmGetMatchingFilteredDeviceInterfaceListWorker();
_CmGetMatchingFilteredDeviceList();
_CmIsDeviceInContainer();
_CmIsDeviceSafeRemovalRequired();
_CmMapCmObjectTypeToPnpObjectType();
_CmOpenCommonClassRegKey();
_CmOpenCommonClassRegKeyWorker();
_CmOpenDeviceContainerRegKey();
_CmOpenDeviceContainerRegKeyWorker();
_CmOpenDeviceInterfaceRegKey();
_CmOpenDeviceInterfaceRegKeyWorker();
_CmOpenDeviceRegKey();
_CmOpenDeviceRegKeyWorker();
_CmQueryDevicePanelPldProperty();
_CmRaiseCreateEvent();
_CmRaisePropertyChangeEvent();
_CmSetDeviceContainerMappedProperty();
_CmSetDeviceInterfaceMappedProperty();
_CmSetDeviceInterfaceMappedPropertyFromRegValue();
_CmSetDeviceMappedProperty();
_CmSetDeviceMappedPropertyFromDriverKeyRegValue();
_CmSetDeviceMappedPropertyFromRegProp();
_CmSetDeviceRegProp();
_CmSetDeviceRegPropWorker();
_CmUpdateDevicePanel();
_GSHandlerCheck();
_GSHandlerCheckCommon();
_GSHandlerCheck_SEH();
_GetBaseTypeSize();
_MapCmClassPropertyToRegValue();
_MapCmDevicePropertyToRegType();
_MapCmDevicePropertyToRegValue();
_MuiRegAllocArray();
_NLG_Dispatch2();
_NLG_Return2();
_PnpCtxCreateNode();
_PnpCtxGetCachedNodeBaseKey();
_PnpCtxOpenMachine();
_PnpDeletePropertyWorker();
_PnpDeviceRaisePropertyChangeEventWorker();
_PnpDispatchDevice();
_PnpDispatchDeviceContainer();
_PnpDispatchDeviceInterface();
_PnpDispatchDevicePanel();
_PnpDispatchInstallerClass();
_PnpDispatchInterfaceClass();
_PnpGetEnumSecurityDescriptor();
_PnpGetGenericStorePropertyKeys();
_PnpGetObjectList();
_PnpGetObjectListDispatch();
_PnpGetObjectProperty();
_PnpGetObjectPropertyWorker();
_PnpGetPropertiesSecurityDescriptor();
_PnpObjectRaiseDevicesChangeEvent();
_PnpObjectRaisePropertyChangeEvent();
_PnpOpenObjectRegKey();
_PnpOpenObjectRegKeyDispatch();
_PnpOpenPropertiesKey();
_PnpParseIndirectInfString();
_PnpParseIndirectResourceString();
_PnpRaiseNtPlugPlayDevicePropertyChangeEvent();
_PnpRegQueryValueIndirect();
_PnpSetObjectProperty();
_PnpSetObjectPropertyWorker();
_PnpSetPropertyWorker();
_PnpUpdateInterfacesCallback();
_PnpValidateObjectName();
_PnpValidatePropertyData();
_RegRtlCreateKeyTransacted();
_RegRtlCreateTreeTransacted();
_RegRtlDeleteTreeInternal();
_RegRtlEnumKey();
_RegRtlEnumKeyWithCallback();
_RegRtlEnumValue();
_RegRtlOpenKeyTransacted();
_RegRtlOpenPredefinedKey();
_RegRtlQueryKeyPathName();
_RegRtlQueryValue();
_RtlpMuiRegLoadInstalled();
_RtlpMuiRegSerializeRegistryInfo();
_RtlpMuiRegValidateInstalled();
_RtlpRemovePendingDeleteLanguages();
_SafeAllocBlob();
_SafeReallocBlob();
_SysCtxOpenControlSet();
_SysCtxOpenMachine();
_TlgWriteAgg();
__entry_from_strcat_in_strcpy();
_ascii_memicmp();
_ascii_stricmp();
_ascii_strnicmp();
_call_matherr();
_chkstk();
_ctrlfp$filt$0();
_exception_enabled();
_guard_retpoline_exit();
_guard_retpoline_exit_indirect_rax();
_guard_retpoline_icall_handler();
_guard_retpoline_import_r10();
_guard_retpoline_import_r10_do_retpoline();
_guard_retpoline_import_r10_log_event();
_guard_retpoline_indirect_cfg_rax();
_guard_retpoline_indirect_rax();
_guard_retpoline_switchtable_jump_r10();
_guard_retpoline_switchtable_jump_r11();
_guard_retpoline_switchtable_jump_r12();
_guard_retpoline_switchtable_jump_r13();
_guard_retpoline_switchtable_jump_r14();
_guard_retpoline_switchtable_jump_r15();
_guard_retpoline_switchtable_jump_r8();
_guard_retpoline_switchtable_jump_r9();
_guard_retpoline_switchtable_jump_rax();
_guard_retpoline_switchtable_jump_rbp();
_guard_retpoline_switchtable_jump_rbx();
_guard_retpoline_switchtable_jump_rcx();
_guard_retpoline_switchtable_jump_rdi();
_guard_retpoline_switchtable_jump_rdx();
_guard_retpoline_switchtable_jump_rsi();
_guard_retpoline_switchtable_jump_rsp();
_inc();
_isascii();
_longjmp_internal();
_misaligned_access();
_pctype_func();
_report_gsfailure();
_report_rangecheckfailure();
_security_check_cookie();
_whiteout();
`SMKM_STORE<SM_TRAITS>::SmStCompareRegionDataCallback'::`1'::filt$0();
`SMKM_STORE<SM_TRAITS>::SmStDirectReadComplete'::`1'::filt$0();
`SMKM_STORE<SM_TRAITS>::SmStDirectReadIssue'::`1'::filt$0();
`SMKM_STORE<SM_TRAITS>::SmStWorkerThread'::`1'::filt$0();
adapt();
alloca_probe();
atoi();
atoi64();
atol();
bsearch();
bsearch_s();
clrfp();
compareRequestSize();
ctrlfp();
do_decode();
ext_ms_win_fs_clfs_l1_1_0_ClfsAddLogContainer();
ext_ms_win_fs_clfs_l1_1_0_ClfsCloseLogFileObject();
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateLogFile();
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateMarshallingArea();
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteLogByPointer();
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteMarshallingArea();
ext_ms_win_fs_clfs_l1_1_0_ClfsFlushToLsn();
ext_ms_win_fs_clfs_l1_1_0_ClfsGetLogFileInformation();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnContainer();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnDifference();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnEqual();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnInvalid();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnLess();
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtDeregisterManagedClient();
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtInstallPolicy();
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtRegisterManagedClient();
ext_ms_win_fs_clfs_l1_1_0_ClfsReadLogRecord();
ext_ms_win_fs_clfs_l1_1_0_ClfsReadNextLogRecord();
ext_ms_win_fs_clfs_l1_1_0_ClfsReadRestartArea();
ext_ms_win_fs_clfs_l1_1_0_ClfsReserveAndAppendLog();
ext_ms_win_fs_clfs_l1_1_0_ClfsTerminateReadLog();
ext_ms_win_fs_clfs_l1_1_0_ClfsWriteRestartArea();
ext_ms_win_ntos_clipsp_l1_1_0_ClipSpInitialize();
ext_ms_win_ntos_clipsp_l1_1_0_ClipSpUninitialize();
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmCompleteInitMachineConfig();
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmSetInitMachineConfig();
ext_ms_win_ntos_ksecurity_l1_1_1_QueryUpdateFileEaAllowedExt();
ext_ms_win_ntos_ksigningpolicy_l1_1_0_SeQuerySigningPolicyExt();
ext_ms_win_ntos_ksr_l1_1_2_KsrClaimPersistedMemory();
ext_ms_win_ntos_ksr_l1_1_2_KsrCleanupPageDatabase();
ext_ms_win_ntos_ksr_l1_1_2_KsrEnumeratePersistedMemory();
ext_ms_win_ntos_ksr_l1_1_2_KsrFreePersistedMemory();
ext_ms_win_ntos_ksr_l1_1_2_KsrFreePersistedMemoryBlock();
ext_ms_win_ntos_ksr_l1_1_2_KsrGetFirmwareInformation();
ext_ms_win_ntos_ksr_l1_1_2_KsrInitPageDatabase();
ext_ms_win_ntos_ksr_l1_1_2_KsrInitSystem();
ext_ms_win_ntos_ksr_l1_1_2_KsrMdlToMemoryRuns();
ext_ms_win_ntos_ksr_l1_1_2_KsrPersistMemoryWithMetadata();
ext_ms_win_ntos_ksr_l1_1_2_KsrQueryMetadata();
ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase0();
ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase1();
ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase2();
ext_ms_win_ntos_tm_l1_1_0_NtCommitComplete();
ext_ms_win_ntos_tm_l1_1_0_NtCommitEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtCommitTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtCreateEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtCreateResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtEnumerateTransactionObject();
ext_ms_win_ntos_tm_l1_1_0_NtFreezeTransactions();
ext_ms_win_ntos_tm_l1_1_0_NtGetNotificationResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtOpenEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtOpenResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtPrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_NtPrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtPropagationComplete();
ext_ms_win_ntos_tm_l1_1_0_NtPropagationFailed();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtReadOnlyEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtRecoverEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtRecoverResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtRecoverTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtRegisterProtocolAddressInformation();
ext_ms_win_ntos_tm_l1_1_0_NtRenameTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtRollbackComplete();
ext_ms_win_ntos_tm_l1_1_0_NtRollbackEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtRollbackTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtRollforwardTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtSinglePhaseReject();
ext_ms_win_ntos_tm_l1_1_0_NtThawTransactions();
ext_ms_win_ntos_tm_l1_1_0_TmCancelPropagationRequest();
ext_ms_win_ntos_tm_l1_1_0_TmCommitComplete();
ext_ms_win_ntos_tm_l1_1_0_TmCommitEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmCommitTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmCreateEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmCurrentTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmDereferenceEnlistmentKey();
ext_ms_win_ntos_tm_l1_1_0_TmEnableCallbacks();
ext_ms_win_ntos_tm_l1_1_0_TmEndPropagationRequest();
ext_ms_win_ntos_tm_l1_1_0_TmFreezeTransactions();
ext_ms_win_ntos_tm_l1_1_0_TmGetTransactionId();
ext_ms_win_ntos_tm_l1_1_0_TmInitSystem();
ext_ms_win_ntos_tm_l1_1_0_TmInitSystemPhase2();
ext_ms_win_ntos_tm_l1_1_0_TmInitializeTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_TmIsKTMCommitCoordinator();
ext_ms_win_ntos_tm_l1_1_0_TmIsTransactionActive();
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmPrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_TmPrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmPropagationComplete();
ext_ms_win_ntos_tm_l1_1_0_TmPropagationFailed();
ext_ms_win_ntos_tm_l1_1_0_TmReadOnlyEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRecoverEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRecoverResourceManager();
ext_ms_win_ntos_tm_l1_1_0_TmRecoverTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_TmReferenceEnlistmentKey();
ext_ms_win_ntos_tm_l1_1_0_TmRenameTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_TmRequestOutcomeEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRollbackComplete();
ext_ms_win_ntos_tm_l1_1_0_TmRollbackEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRollbackTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmSetCurrentTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmShutdownSystem();
ext_ms_win_ntos_tm_l1_1_0_TmSinglePhaseReject();
ext_ms_win_ntos_tm_l1_1_0_TmThawTransactions();
ext_ms_win_ntos_trace_l1_1_0_TraceInitSystem();
ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationLoad();
ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationUnload();
ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInitialization();
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelInitSystem();
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCancelReport();
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCloseHandle();
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCreateReport();
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelOpenDumpFile();
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelSubmitReport();
fclrf();
fgetwc_nolock();
filbuf_s();
filwbuf_s();
finite();
flsbuf();
flsbuf_s();
flswbuf();
fputwc_nolock();
frnd();
get_fpsr();
get_printf_count_output();
guard_check_icall();
guard_check_icall_nop();
guard_dispatch_icall();
guard_dispatch_icall_nop();
guard_icall_bugcheck();
guard_icall_handler();
guard_wrap_icall_jmp();
guard_wrap_icall_retpoline_exit();
handle_error();
handle_errorf();
i64toa_s();
i64tow_s();
input_s();
invalid_parameter();
isdigit();
islower();
isprint();
isspace();
isupper();
iswalnum();
iswctype();
iswctype_l();
iswdigit();
iswspace();
isxdigit();
itoa();
itoa_s();
itow();
itow_s();
local_unwind();
longjmp();
ltoa_s();
ltow_s();
makepath_s();
matherr();
mbstowcs();
mbstrlen();
mbtowc();
memchr();
memcmp();
memcpy();
memcpy_s();
memicmp();
memmove();
memmove_s();
memset();
output_l();
output_s();
pIoQueryBusDescription();
pIoQueryDeviceDescription();
punycode_decode();
punycode_encode();
purecall();
qsort();
qsort_s();
raise_exc();
raise_exc_ex();
raise_excf();
rand();
safecrt_mbtowc();
safecrt_wctomb_s();
set_errno_from_matherr();
set_fpsr();
set_statfp();
setjmp();
setjmpex();
sinput_s();
snprintf();
snprintf_s();
snscanf_s();
snwprintf();
snwprintf_s();
snwscanf_s();
soutput_s();
splitpath_s();
sprintf();
sprintf_s();
sqrt();
sqrtf();
srand();
sscanf_s();
statfp();
strcat();
strcat_s();
strchr();
strcmp();
strcpy();
strcpy_s();
stricmp();
strlen();
strlwr();
strncat();
strncat_s();
strncmp();
strncpy();
strncpy_s();
strnicmp();
strnlen();
strnset();
strnset_s();
strrchr();
strrev();
strset();
strset_s();
strspn();
strstr();
strtoi64();
strtok_s();
strtol();
strtolX();
strtoui64();
strtoul();
strtoxlX();
strtoxq();
strupr();
swinput_s();
swoutput_s();
swprintf();
swprintf_s();
swscanf_s();
tcpxsum();
tcpxsum_end();
tcpxsum_start();
tolower();
toupper();
towlower();
towupper();
ui64toa_s();
ui64tow_s();
ultoa_s();
ultow();
ultow_s();
ungetc_nolock();
ungetwc_nolock();
vDbgPrintEx();
vDbgPrintExWithPrefix();
vDbgPrintExWithPrefixInternal();
vsnprintf();
vsnprintf_l();
vsnprintf_s();
vsnwprintf();
vsnwprintf_l();
vsnwprintf_s();
vsprintf();
vsprintf_l();
vsprintf_s();
vswprintf();
vswprintf_l();
vswprintf_s();
wchartodigit();
wcscat();
wcscat_s();
wcschr();
wcscmp();
wcscpy();
wcscpy_s();
wcscspn();
wcsicmp();
wcsistr();
wcslen();
wcslwr();
wcslwr_s();
wcsncat();
wcsncat_s();
wcsncmp();
wcsncpy();
wcsncpy_s();
wcsnicmp();
wcsnlen();
wcsnset();
wcsnset_s();
wcspbrk();
wcsrchr();
wcsrev();
wcsset_s();
wcsspn();
wcsstr();
wcstoi64();
wcstok_s();
wcstol();
wcstolX();
wcstombs();
wcstoul();
wcstoxlX();
wcstoxq();
wcsupr();
wctomb();
wctomb_s();
wctomb_s_l();
wil_details_FeaturePropertyCache_ReportUsageToService();
wil_details_FeaturePropertyCache_ReportUsageToServiceDirect();
wil_details_ModifyFeatureData();
wil_details_RecordUsageInPropertyCache();
wil_details_SetPropertyCacheOpportunityCallback();
wil_details_SetPropertyCacheUsageCallback();
wil_details_SetPropertyFlagCallback();
winput_s();
wmakepath_s();
woutput_l();
woutput_s();
write_char();
write_multi_char();
write_string();
wsplitpath_s();
wtoi();
wtol();
x64toa_s();
x64tow_s();
xHalAcpiAoacCapable();
xHalAcpiGetMultiNode();
xHalAcpiLateRestore();
xHalAddInterruptRemapping();
xHalAllocateGsivForSecondaryInterrupt();
xHalAllocateMapRegisters();
xHalAllocateMessageTarget();
xHalAllocatePmcCounterSet();
xHalAssignSlotResources();
xHalCaptureLastBranchRecordStack();
xHalClearLastBranchRecordStack();
xHalClockTimerActivate();
xHalClockTimerArm();
xHalClockTimerInitialize();
xHalClockTimerStop();
xHalCollectPmcCounters();
xHalConfigureLastBranchRecord();
xHalConnectSyntheticInterrupt();
xHalConnectThermalInterrupt();
xHalConvertAuxiliaryCounterToPerformanceCounter();
xHalConvertPerformanceCounterToAuxiliaryCounter();
xHalDmaCheckAdapterToken();
xHalDmaFreeCrashDumpRegisters();
xHalDmaLinkDeviceObjectByToken();
xHalDpGetInterruptReplayState();
xHalDpMaskLevelTriggeredInterrupts();
xHalDpReplaceBegin();
xHalDpReplaceControl();
xHalDpReplaceEnd();
xHalDpReplaceTarget();
xHalDpReplayInterrupts();
xHalDpUnmaskLevelTriggeredInterrupts();
xHalEndMirroring();
xHalEndOfBoot();
xHalEnumerateEnvironmentVariablesWithFilter();
xHalEnumerateUnmaskedInterrupts();
xHalFlushAndInvalidatePageExternalCache();
xHalFlushExternalCache();
xHalFlushIoBuffersExternalCache();
xHalFlushIoRectangleExternalCache();
xHalFreeMessageTarget();
xHalFreePmcCounterSet();
xHalGetClockConfiguration();
xHalGetInterruptTranslator();
xHalGetInterruptVector();
xHalGetIommuInterface();
xHalGetLastBranchInformation();
xHalGetProcessorId();
xHalGetProcessorStats();
xHalGetVectorInput();
xHalHaltSystem();
xHalHandlerForBus();
xHalInitPnpDriver();
xHalInitPowerManagement();
xHalInterruptGetHighestPriorityInterrupt();
xHalInterruptSetDestination();
xHalInterruptVectorDataToGsiv();
xHalIommuBeginDeviceReset();
xHalIommuBlockDevice();
xHalIommuDereferenceAsid();
xHalIommuDevicePowerChange();
xHalIommuDisableDevicePasid();
xHalIommuEnableDevicePasid();
xHalIommuFaultRoutine();
xHalIommuFinalizeDeviceReset();
xHalIommuFlushAllPasid();
xHalIommuFlushTb();
xHalIommuFreeLibraryContext();
xHalIommuGetConfiguration();
xHalIommuGetLibraryContext();
xHalIommuMapDevice();
xHalIommuProcessPageRequestQueue();
xHalIommuReferenceAsid();
xHalIommuRegisterDispatchTable();
xHalIommuServicePageFault();
xHalIommuSetAddressSpace();
xHalIommuSupportEnabled();
xHalIommuUnblockDevice();
xHalIommuUnmapDevice();
xHalIsEFIRuntimeActive();
xHalLoadMicrocode();
xHalLocateHiberRanges();
xHalMaskInterrupt();
xHalMirrorPhysicalMemory();
xHalMirrorVerify();
xHalNotifyProcessorFreeze();
xHalPciEarlyRestore();
xHalPciMarkHiberPhase();
xHalPciMultiStageResumeCapable();
xHalPostMicrocodeUpdate();
xHalPowerEarlyRestore();
xHalPowerSetRebootHandler();
xHalPrepareForBugcheck();
xHalPrepareProcessorForIdle();
xHalPreprocessNmi();
xHalProcessorFreeze();
xHalProcessorHalt();
xHalProcessorOff();
xHalProcessorOn();
xHalQueryAuxiliaryCounterFrequency();
xHalQueryBusSlots();
xHalQueryCapsuleCapabilities();
xHalQueryIoPortAccessSupported();
xHalQueryProcessorRestartEntryPoint();
xHalQuerySystemInformation();
xHalQueryWakeTime();
xHalReadWheaPhysicalMemory();
xHalReferenceHandler();
xHalRegisterBusHandler();
xHalRegisterLogRoutine();
xHalRemoveInterruptRemapping();
xHalReportIdleStateUsage();
xHalRequestGenericErrorRecovery();
xHalRequestInterrupt();
xHalRestoreHvEnlightenment();
xHalResumeLastBranchRecord();
xHalResumeProcessorFromIdle();
xHalSaveAndDisableHvEnlightenment();
xHalSecondaryInterruptQueryPrimaryInformation();
xHalSetSystemInformation();
xHalSetWakeAlarm();
xHalStartLastBranchRecord();
xHalStartMirroring();
xHalStopLastBranchRecord();
xHalStopLegacyUsbInterrupts();
xHalTimerGetReferencePage();
xHalTimerOnlyClockInterruptPending();
xHalTimerQueryAndResetRtcErrors();
xHalTimerQueryCycleCounter();
xHalTimerQueryHostPerformanceCounter();
xHalTimerWatchdogGeneratedLastReset();
xHalTimerWatchdogQueryDueTime();
xHalTimerWatchdogResetCountdown();
xHalTimerWatchdogStart();
xHalTimerWatchdogStop();
xHalTimerWatchdogTriggerSystemReset();
xHalTopologyQueryProcessorRelationships();
xHalTranslateBusAddress();
xHalTscSynchronization();
xHalUnloadMicrocode();
xHalUnmaskInterrupt();
xHalUpdateCapsule();
xHalVectorToIDTEntry();
xHalVectorToIDTEntryEx();
xHalWheaInitProcessorGenericSection();
xHalWriteWheaPhysicalMemory();
xHalpIsInterruptTypeSecondary();
xKdCheckPowerButton();
xKdEnumerateDebuggingDevices();
xKdGetAcpiTablePhase0();
xKdMapPhysicalMemory64();
xKdReleaseIntegratedDeviceForDebugging();
xKdReleasePciDeviceForDebugging();
xKdSetupIntegratedDeviceForDebugging();
xKdSetupPciDeviceForDebugging();
xKdUnmapVirtualAddress();
xKdWatchdogDelayExpiration();
xtoa();
xtoa_s();
xtow();
xtow_s();
