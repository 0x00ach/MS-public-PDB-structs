struct ACPI_INTERFACE_STANDARD2;
struct BATTERY_REPORTING_SCALE;
struct CM_Power_Data_s;
struct CORRELATION_VECTOR;
struct ControlInit;
struct CxFileObjectInit;
struct CxPnpPowerCallbacksInit;
struct DEBUG_DEVICE_ADDRESS;
struct DEBUG_MEMORY_REQUIREMENTS;
struct EVENT_INSTANCE_INFO;
struct FX_DRIVER_TRACKER_ENTRY;
struct FX_POOL;
struct FX_POOL_HEADER;
struct FX_POOL_TRACKER;
struct FX_SPIN_LOCK_HISTORY;
struct FX_SPIN_LOCK_HISTORY_ENTRY;
struct FdoInit;
struct FileObjectInit;
struct FxAllocatedMdls;
struct FxAutoIrp;
struct FxAutoRegKey;
struct FxAutoString;
struct FxCREvent;
struct FxChildListCreateDeviceCallback;
struct FxChildListScanForChildrenCallback;
struct FxCollectionInternal;
struct FxContextHeader;
struct FxCxDeviceInfo;
struct FxDeviceDescriptionEntry;
struct FxDevicePwrRequirementStateTable;
struct FxDevicePwrRequirementTargetState;
struct FxDeviceText;
struct FxDriverGlobalsDebugExtension;
struct FxEnumerationInfo;
struct FxEventQueue;
struct FxFileObjectInfo;
struct FxFilteredStartContext;
struct FxGlobalsStump;
struct FxIdleStateTable;
struct FxInterfacePipeInformation;
struct FxInternalIoctlOthersContext;
struct FxInterruptEnableParameters;
struct FxInterruptSyncParameters;
struct FxIoContext;
struct FxIoQueueNode;
struct FxIoTargetClearedPointers;
struct FxIoTargetQueryRemove;
struct FxIoTargetRemoveCanceled;
struct FxIoTargetRemoveComplete;
struct FxIoTargetRemoveOpenParams;
struct FxIrpDynamicDispatchInfo;
struct FxIrpDynamicDispatchInfo::Info;
struct FxIrpPreprocessInfo;
struct FxIrpPreprocessInfo::Info;
struct FxLibraryGlobalsType;
struct FxMdlDebugInfo;
struct FxObjectDebugExtension;
struct FxObjectDebugInfo;
struct FxObjectDebugLeakDetection;
struct FxOffsetAndName;
struct FxPnpMachine;
struct FxPnpStateCallback;
struct FxPnpStateCallbackInfo;
struct FxPostProcessInfo;
struct FxPowerCaps;
struct FxPowerIdleTargetState;
struct FxPowerMachine;
struct FxPowerPolicyMachine;
struct FxPowerPolicyOwnerSettings;
struct FxPowerPolicyStateCallback;
struct FxPowerPolicyStateCallbackInfo;
struct FxPowerStateCallback;
struct FxPowerStateCallbackInfo;
struct FxQueryInterface;
struct FxQueryInterfaceParams;
struct FxRequestBuffer;
struct FxRequestContext;
struct FxRequestOutputBuffer;
struct FxRequestSystemBuffer;
struct FxRequestTimer;
struct FxSelfManagedIoStateTable;
struct FxSelfManagedIoTargetState;
struct FxStaticChildDescription;
struct FxStump;
struct FxTagHistory;
struct FxTagTrackingBlock;
struct FxTagTrackingStackFrames;
struct FxTargetSubmitSyncParams;
struct FxThreadedEventQueue;
struct FxTraceInfo;
struct FxTransactionedEntry;
struct FxUsageWorkitemParameters;
struct FxUsbDeviceControlContext;
struct FxUsbDeviceStringContext;
struct FxUsbIdleInfo;
struct FxUsbInterfaceSetting;
struct FxUsbPipeContinuousReader;
struct FxUsbPipeRepeatReader;
struct FxUsbPipeRequestContext;
struct FxUsbPipeTransferContext;
struct FxUsbRequestContext;
struct FxUsbUrbContext;
struct FxVerifierOrderMapping;
struct FxVerifierThreadTableEntry;
struct FxWakeInterruptStateTable;
struct FxWakeInterruptTargetState;
struct FxWatchdog;
struct FxWdmDeviceExtension;
struct FxWmiInstanceExecuteMethodCallback;
struct FxWmiInstanceInternalCallbacks;
struct FxWmiInstanceQueryInstanceCallback;
struct FxWmiInstanceSetInstanceCallback;
struct FxWmiInstanceSetItemCallback;
struct FxWmiMinorEntry;
struct FxWmiProviderFunctionControlCallback;
struct FxWorkItemEventQueue;
struct HAL_DISPATCH;
struct HINSTANCE__;
struct ICompanionLibrary;
struct IDeviceCompanion;
struct IDeviceCompanionCallbacks;
struct IDispatch;
struct IEnumSTATSTG;
struct IRecordInfo;
struct ISequentialStream;
struct IStorage;
struct IStream;
struct ITypeComp;
struct ITypeInfo;
struct ITypeLib;
struct IUMDFUnknown;
struct IUnknown;
struct IdlePolicySettings;
struct Info;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct MEM_EXTENDED_PARAMETER;
struct MxAutoWorkItem;
struct NOTIFY_USER_POWER_SETTING;
struct NOT_POWER_POLICY_OWNER_STATE_TABLE;
struct OFFSETINSTANCEDATAANDLENGTH;
struct PCI_AGP_EXTENDED_CAPABILITY;
struct PCI_X_CAPABILITY;
struct PNP_EVENT_TARGET_STATE;
struct PNP_STATE_TABLE;
struct POHANDLE__;
struct POWER_EVENT_TARGET_STATE;
struct POWER_POLICY_EVENT_TARGET_STATE;
struct POWER_POLICY_STATE_TABLE;
struct POWER_STATE_TABLE;
struct PdoInit;
struct PnpPowerInit;
struct PolicySettings;
struct RD_FILE_OBJECT_CONTEXT__;
struct SET_POWER_SETTING_VALUE;
struct SS_COMPONENT__;
struct SS_LIBRARY__;
struct STACK_CREATION_SETTINGS;
struct SecurityInit;
struct SharedPowerData;
struct USBDI_HANDLE__;
struct USBD_FUNCTION_HANDLE__;
struct USBD_HANDLE__;
struct USB_CHANGE_REGISTRATION_HANDLE__;
struct WDFCHILDLIST__;
struct WDFCMRESLIST__;
struct WDFCOLLECTION__;
struct WDFCOMMONBUFFER__;
struct WDFCOMPANIONTARGET__;
struct WDFCXDEVICE_INIT;
struct WDFDEVICE_INIT;
struct WDFDEVICE__;
struct WDFDMAENABLER__;
struct WDFDMATRANSACTION__;
struct WDFDPC__;
struct WDFDRIVER__;
struct WDFFILEOBJECT__;
struct WDFINTERRUPT__;
struct WDFIORESLIST__;
struct WDFIORESREQLIST__;
struct WDFIOTARGET__;
struct WDFKEY__;
struct WDFLOOKASIDE__;
struct WDFMEMORY__;
struct WDFQUEUE__;
struct WDFREQUEST__;
struct WDFSPINLOCK__;
struct WDFSTRING__;
struct WDFTIMER__;
struct WDFUSBDEVICE__;
struct WDFUSBINTERFACE__;
struct WDFUSBPIPE__;
struct WDFWAITLOCK__;
struct WDFWMIINSTANCE__;
struct WDFWMIPROVIDER__;
struct WDFWORKITEM__;
struct WHEA_PCIXDEVICE_REGISTER_PAIR;
struct WMIREGGUIDW;
struct WMIREGINFOW;
struct WUDF_CREATE_CONTEXT__;
struct WUDF_DEVICE_CONTEXT__;
struct WUDF_DEVNODE_CONTEXT__;
struct WUDF_EVENT;
struct WUDF_LOCK;
struct WUDF_PROBLEM;
struct WUDF_SEMAPHORE;
struct WUDF_TIMER;
struct WakePolicySettings;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACL;
struct _ACPI_DEBUGGING_DEVICE_IN_USE;
struct _ACPI_INTERFACE_STANDARD;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
struct _AGP_TARGET_BUS_INTERFACE_STANDARD;
struct _APPLICATIONLAUNCH_SETTING_VALUE;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_CONFLICT_INFO;
struct _ARBITER_INTERFACE;
struct _ARBITER_LIST_ENTRY;
struct _ARBITER_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARM64_NT_CONTEXT;
struct _ASSEMBLY_STORAGE_MAP;
struct _AUX_ACCESS_DATA;
struct _AUX_KLIB_FNS;
struct _AUX_MODULE_BASIC_INFO;
struct _AUX_MODULE_EXTENDED_INFO;
struct _AUX_PROCESS_MODULES;
struct _AUX_PROCESS_MODULE_INFORMATION;
struct _BDCB_IMAGE_INFORMATION;
struct _BDCB_STATUS_UPDATE_CONTEXT;
struct _BM;
struct _BM_REQUEST_TYPE::_BM;
struct _BOOTDISK_INFORMATION;
struct _BOOTDISK_INFORMATION_EX;
struct _BOOTDISK_INFORMATION_LITE;
struct _BUS_HANDLER;
struct _BUS_INTERFACE_STANDARD;
struct _BUS_RESOURCE_UPDATE_INTERFACE;
struct _CACHE_DESCRIPTOR;
struct _CACHE_RELATIONSHIP;
struct _CALLBACK_OBJECT;
struct _CI_LOG_MMCSS_START;
struct _CI_LOG_MMCSS_STOP;
struct _CI_LOG_SCHEDULER_EVENT;
struct _CI_LOG_SCHEDULER_SLEEP;
struct _CI_LOG_SCHEDULER_SLEEP_RESPONSE;
struct _CI_LOG_SCHEDULER_WAKEUP;
struct _CLFS_LOG_NAME_INFORMATION;
struct _CLFS_MGMT_CLIENT_REGISTRATION;
struct _CLFS_MGMT_NOTIFICATION;
struct _CLFS_MGMT_POLICY;
struct _CLFS_NODE_ID;
struct _CLFS_PHYSICAL_LSN_INFORMATION;
struct _CLFS_STREAM_ID_INFORMATION;
struct _CLIENT_ID;
struct _CLIENT_INFO;
struct _CLS_ARCHIVE_DESCRIPTOR;
struct _CLS_CONTAINER_INFORMATION;
struct _CLS_INFORMATION;
struct _CLS_IO_STATISTICS;
struct _CLS_IO_STATISTICS_HEADER;
struct _CLS_LSN;
struct _CLS_SCAN_CONTEXT;
struct _CLS_WRITE_ENTRY;
struct _CMC_DRIVER_INFO;
struct _CM_COMPONENT_INFORMATION;
struct _CM_DISK_GEOMETRY_DEVICE_DATA;
struct _CM_EISA_FUNCTION_INFORMATION;
struct _CM_EISA_SLOT_INFORMATION;
struct _CM_FLOPPY_DEVICE_DATA;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_INT13_DRIVE_PARAMETER;
struct _CM_KEYBOARD_DEVICE_DATA;
struct _CM_MCA_POS_DATA;
struct _CM_MONITOR_DEVICE_DATA;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_PCCARD_DEVICE_DATA;
struct _CM_PERF_COUNTERS;
struct _CM_PNP_BIOS_DEVICE_NODE;
struct _CM_PNP_BIOS_INSTALLATION_CHECK;
struct _CM_RESOURCE_LIST;
struct _CM_ROM_BLOCK;
struct _CM_SCSI_DEVICE_DATA;
struct _CM_SERIAL_DEVICE_DATA;
struct _CM_SONIC_DEVICE_DATA;
struct _CM_VIDEO_DEVICE_DATA;
struct _COMPOSITE_DEVICE_CAPABILITIES;
struct _COMPRESSED_DATA_INFO;
struct _CONFIGURATION_INFORMATION;
struct _CONTEXT;
struct _CONTROLLER_OBJECT;
struct _COUNTED_REASON_CONTEXT;
struct _CPE_DRIVER_INFO;
struct _CPU_CONFIG_RECORD;
struct _CRASHDUMP_FUNCTIONS_INTERFACE;
struct _CREATE_USER_PROCESS_ECP_CONTEXT;
struct _CSTRING;
struct _CURDIR;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
struct _D3COLD_AUX_POWER_AND_TIMING_INTERFACE;
struct _D3COLD_SUPPORT_INTERFACE;
struct _DEBUGGING_DEVICE_IN_USE;
struct _DEBUGGING_DEVICE_IN_USE_INFORMATION;
struct _DEBUG_DEVICE_DESCRIPTOR;
struct _DEBUG_TRANSPORT_DATA;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_DESCRIPTION;
struct _DEVICE_FAULT_CONFIGURATION;
struct _DEVICE_FLAGS;
struct _DEVICE_HANDLER_OBJECT;
struct _DEVICE_INTERFACE_CHANGE_NOTIFICATION;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVICE_RELATIONS;
struct _DEVICE_RESET_INTERFACE_STANDARD;
struct _DEVOBJ_EXTENSION;
struct _DEVPROPCOMPKEY;
struct _DEVPROPERTY;
struct _DEVPROPKEY;
struct _DISK_SIGNATURE;
struct _DISPATCHER_CONTEXT;
struct _DISPATCHER_HEADER;
struct _DMA_ADAPTER;
struct _DMA_ADAPTER_INFO;
struct _DMA_ADAPTER_INFO_V1;
struct _DMA_CONFIGURATION_BYTE0;
struct _DMA_CONFIGURATION_BYTE1;
struct _DMA_IOMMU_INTERFACE;
struct _DMA_OPERATIONS;
struct _DMA_TRANSFER_INFO;
struct _DMA_TRANSFER_INFO_V1;
struct _DMA_TRANSFER_INFO_V2;
struct _DOMAIN_CONFIGURATION;
struct _DOMAIN_CONFIGURATION_ARM64;
struct _DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _DRIVER_VERIFIER_THUNK_PAIRS;
struct _DRIVE_LAYOUT_INFORMATION;
struct _DRV_EXTENSION;
struct _ECP_LIST;
struct _EISA_DMA_CONFIGURATION;
struct _EISA_IRQ_CONFIGURATION;
struct _EISA_IRQ_DESCRIPTOR;
struct _EISA_MEMORY_CONFIGURATION;
struct _EISA_MEMORY_TYPE;
struct _EISA_PORT_CONFIGURATION;
struct _EISA_PORT_DESCRIPTOR;
struct _EJOB;
struct _ENLISTMENT_BASIC_INFORMATION;
struct _ENLISTMENT_CRM_INFORMATION;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<8>;
struct _EPROCESS;
struct _ERESOURCE;
struct _ETHREAD;
struct _ETW_ALL_POSSIBLE_NOTIFY_ROUTINES;
struct _ETW_ANTI_STARVATION_BOOST_EVENT;
struct _ETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT;
struct _ETW_AUTOBOOST_NO_ENTRIES_EVENT;
struct _ETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT;
struct _ETW_BUFFER_CONTEXT;
struct _ETW_CANCEL_KTIMER2_EVENT;
struct _ETW_CANCEL_TIMER_EVENT;
struct _ETW_CLOCK_CONFIGURATION_EVENT;
struct _ETW_CLOCK_STATE_CHANGE_EVENT;
struct _ETW_CLOCK_TIME_UPDATE;
struct _ETW_CPU_CACHE_FLUSH_EVENT;
struct _ETW_CREATEDELETE_OBJECT_EVENT;
struct _ETW_CREATE_HANDLE_EVENT;
struct _ETW_CRITSEC_EVENT_COLLISION;
struct _ETW_CRITSEC_EVENT_INIT;
struct _ETW_DEBUG_PRINT_EVENT;
struct _ETW_DFSS_RELEASE_THREAD_ON_IDLE;
struct _ETW_DFSS_START_NEW_INTERVAL;
struct _ETW_DISABLE_KTIMER2_EVENT;
struct _ETW_DISKIO_FLUSH_BUFFERS_V2;
struct _ETW_DISKIO_FLUSH_BUFFERS_V3;
struct _ETW_DISKIO_READWRITE_V2;
struct _ETW_DISKIO_READWRITE_V3;
struct _ETW_DUPLICATE_HANDLE_EVENT;
struct _ETW_FINALIZE_KTIMER2_EVENT;
struct _ETW_HEAP_EVENT_ALLOC;
struct _ETW_HEAP_EVENT_COMMON;
struct _ETW_HEAP_EVENT_CONTRACTION;
struct _ETW_HEAP_EVENT_CREATE;
struct _ETW_HEAP_EVENT_EXPANSION;
struct _ETW_HEAP_EVENT_FREE;
struct _ETW_HEAP_EVENT_REALLOC;
struct _ETW_HEAP_EVENT_RUNDOWN;
struct _ETW_HEAP_EVENT_RUNDOWN_RANGE;
struct _ETW_HEAP_EVENT_SNAPSHOT;
struct _ETW_IDEAL_PROCESSOR_EVENT;
struct _ETW_KERNEL_TRACE_TIMESTAMP;
struct _ETW_KQUEUE_DEQUEUE_EVENT;
struct _ETW_KQUEUE_ENQUEUE_EVENT;
struct _ETW_LBR_ENTRY;
struct _ETW_OBJECT_HANDLE_EVENT;
struct _ETW_OBJECT_TYPE_EVENT;
struct _ETW_OPTICALIO_FLUSH_BUFFERS;
struct _ETW_OPTICALIO_INIT;
struct _ETW_OPTICALIO_READWRITE;
struct _ETW_PER_SESSION_QUOTA;
struct _ETW_POOL_EVENT;
struct _ETW_PRIORITY_EVENT;
struct _ETW_READY_THREAD_EVENT;
struct _ETW_REFDEREF_OBJECT_EVENT;
struct _ETW_REF_CLOCK;
struct _ETW_REGNOTIF_REGISTER;
struct _ETW_SET_KTIMER2_EVENT;
struct _ETW_SET_TIMER_EVENT;
struct _ETW_STACK_CACHING_CONFIG;
struct _ETW_THREAD_AFFINITY_EVENT;
struct _ETW_THREAD_EVENT_SUBPROCESSTAG;
struct _ETW_THREAD_SET_NAME_EVENT;
struct _ETW_TIMER_EXPIRATION_EVENT;
struct _ETW_TIMER_EXPIRATION_START_EVENT;
struct _ETW_TP_EVENT_CALLBACK_CANCEL;
struct _ETW_TP_EVENT_CALLBACK_ENQUEUE;
struct _ETW_TP_EVENT_CALLBACK_START;
struct _ETW_TP_EVENT_POOL_CLOSE;
struct _ETW_TP_EVENT_POOL_CREATE;
struct _ETW_TP_EVENT_POOL_TH_MAX_SET;
struct _ETW_TP_EVENT_POOL_TH_MIN_SET;
struct _ETW_TP_EVENT_TIMER_CANCELLED;
struct _ETW_TP_EVENT_TIMER_CANCEL_NTTIMER;
struct _ETW_TP_EVENT_TIMER_EXPIRATION;
struct _ETW_TP_EVENT_TIMER_EXPIRATION_BEGIN;
struct _ETW_TP_EVENT_TIMER_EXPIRATION_END;
struct _ETW_TP_EVENT_TIMER_SET;
struct _ETW_TP_EVENT_TIMER_SET_NTTIMER;
struct _ETW_TP_EVENT_WORKER_NUMANODE_SWITCH;
struct _ETW_TRACE_SESSION_SETTINGS;
struct _ETW_UMS_EVENT_CONTEXT_SWITCH;
struct _ETW_UMS_EVENT_DIRECTED_SWITCH_END;
struct _ETW_UMS_EVENT_DIRECTED_SWITCH_START;
struct _ETW_UMS_EVENT_DISASSOCIATE;
struct _ETW_UMS_EVENT_PARK;
struct _ETW_WAKE_COUNTER_EVENT;
struct _ETW_WNF_EVENT_CALLBACK;
struct _ETW_WNF_EVENT_NAME_SUB_RUNDOWN;
struct _ETW_WNF_EVENT_PUBLISH;
struct _ETW_WNF_EVENT_SUBSCRIBE;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EVENT_FILTER_EVENT_ID;
struct _EVENT_FILTER_EVENT_NAME;
struct _EVENT_FILTER_HEADER;
struct _EVENT_FILTER_LEVEL_KW;
struct _EVENT_INSTANCE_GUID_HEADER;
struct _EVENT_INSTANCE_HEADER;
struct _EVENT_TRACE;
struct _EVENT_TRACE_HEADER;
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_RECORD32;
struct _EXCEPTION_RECORD64;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EXT_DELETE_PARAMETERS;
struct _EXT_SET_PARAMETERS_V0;
struct _EX_PUSH_LOCK;
struct _EX_RUNDOWN_REF;
struct _EX_RUNDOWN_REF_CACHE_AWARE;
struct _EX_TIMER;
struct _EX_WNF_SUBSCRIPTION;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FAULT_INFORMATION;
struct _FAULT_INFORMATION_ARM64;
struct _FAULT_INFORMATION_ARM64_FLAGS;
struct _FILETIME;
struct _FILE_ALIGNMENT_INFORMATION;
struct _FILE_ATTRIBUTE_TAG_INFORMATION;
struct _FILE_BASIC_INFORMATION;
struct _FILE_DISPOSITION_INFORMATION;
struct _FILE_DISPOSITION_INFORMATION_EX;
struct _FILE_END_OF_FILE_INFORMATION;
struct _FILE_FS_DEVICE_INFORMATION;
struct _FILE_FS_FULL_SIZE_INFORMATION;
struct _FILE_FS_FULL_SIZE_INFORMATION_EX;
struct _FILE_FS_LABEL_INFORMATION;
struct _FILE_FS_METADATA_SIZE_INFORMATION;
struct _FILE_FS_OBJECTID_INFORMATION;
struct _FILE_FS_SECTOR_SIZE_INFORMATION;
struct _FILE_FS_SIZE_INFORMATION;
struct _FILE_FS_VOLUME_INFORMATION;
struct _FILE_FULL_EA_INFORMATION;
struct _FILE_GET_QUOTA_INFORMATION;
struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION;
struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
struct _FILE_IO_PRIORITY_HINT_INFORMATION;
struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX;
struct _FILE_IS_REMOTE_DEVICE_INFORMATION;
struct _FILE_MEMORY_PARTITION_INFORMATION;
struct _FILE_NAME_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_NUMA_NODE_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_POSITION_INFORMATION;
struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION;
struct _FILE_SFIO_RESERVE_INFORMATION;
struct _FILE_SFIO_VOLUME_INFORMATION;
struct _FILE_STANDARD_INFORMATION;
struct _FILE_STANDARD_INFORMATION_EX;
struct _FILE_VALID_DATA_LENGTH_INFORMATION;
struct _FLOAT128;
struct _FLS_CALLBACK_INFO;
struct _FPGA_CONTROL_INTERFACE;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _FSRTL_COMMON_FCB_HEADER;
struct _FUNCTION_LEVEL_DEVICE_RESET_PARAMETERS;
struct _FXIO_FORWARD_PROGRESS_CONTEXT;
struct _FX_DRIVER_GLOBALS;
struct _FX_DRIVER_TRACKER_CACHE_AWARE;
struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY;
struct _FX_DRIVER_TRACKER_ENTRY;
struct _FX_DUMP_DRIVER_INFO_ENTRY;
struct _FX_OBJECT_INFO;
struct _FX_TELEMETRY_CONTEXT;
struct _FxDmaDescription;
struct _FxInternalIoctlParams;
struct _GDI_TEB_BATCH;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERIC_MAPPING;
struct _GROUP_AFFINITY;
struct _GROUP_RELATIONSHIP;
struct _GS_HANDLER_DATA;
struct _GUID;
struct _HAL_AMLI_BAD_IO_ADDRESS_LIST;
struct _HAL_BUS_INFORMATION;
struct _HAL_CALLBACKS;
struct _HAL_ERROR_INFO;
struct _HAL_MCA_INTERFACE;
struct _HAL_PLATFORM_INFORMATION;
struct _HAL_POWER_INFORMATION;
struct _HAL_PROCESSOR_FEATURE;
struct _HAL_PROCESSOR_SPEED_INFO;
struct _HARDWARE_COUNTER;
struct _HEAP_AFFINITY_SLOT_ASSIGN;
struct _HEAP_AFINITY_MANAGER_ENABLE;
struct _HEAP_COMMIT_DECOMMIT;
struct _HEAP_EVENT_COMMIT_DECOMMIT;
struct _HEAP_EVENT_RANGE;
struct _HEAP_EVENT_RANGE_CREATE;
struct _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE;
struct _HEAP_RANGE_CREATE;
struct _HEAP_RANGE_DESTROY;
struct _HEAP_RANGE_LOG;
struct _HEAP_REUSE_THRESHOLD_ACTIVATED;
struct _HEAP_SUBSEGMENT_ACTIVATED;
struct _HEAP_SUBSEGMENT_ALLOC;
struct _HEAP_SUBSEGMENT_FREE;
struct _HEAP_SUBSEGMENT_INIT;
struct _HWPROFILE_CHANGE_NOTIFICATION;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_EXPORT_DIRECTORY;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_INFO;
struct _IMAGE_INFO_EX;
struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
struct _IMAGE_LOAD_CONFIG_DIRECTORY64;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_OPTIONAL_HEADER64;
struct _IMAGE_POLICY_ENTRY;
struct _IMAGE_POLICY_METADATA;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
struct _INITIAL_PRIVILEGE_SET;
struct _INPUT_MAPPING_ELEMENT;
struct _INTERFACE;
struct _IOMMU_DMA_DOMAIN;
struct _IO_ATTRIBUTION_INFORMATION;
struct _IO_COMPLETION_CONTEXT;
struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS;
struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS;
struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS;
struct _IO_CONNECT_INTERRUPT_PARAMETERS;
struct _IO_COUNTERS;
struct _IO_CSQ;
struct _IO_CSQ_IRP_CONTEXT;
struct _IO_DISCONNECT_INTERRUPT_PARAMETERS;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_ERROR_LOG_MESSAGE;
struct _IO_ERROR_LOG_PACKET;
struct _IO_FOEXT_SILO_PARAMETERS;
struct _IO_INTERRUPT_MESSAGE_INFO;
struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY;
struct _IO_PRIORITY_INFO;
struct _IO_REMOVE_LOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_REMOVE_LOCK_DBG_BLOCK;
struct _IO_REMOVE_LOCK_TRACKING_BLOCK;
struct _IO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_SESSION_CONNECT_INFO;
struct _IO_SESSION_STATE_INFORMATION;
struct _IO_SESSION_STATE_NOTIFICATION;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_STATUS_BLOCK32;
struct _IO_TIMER;
struct _IO_WORKITEM;
struct _IPT_TRACE_EVENT_DATA;
struct _IRP;
struct _KADDRESS_RANGE;
struct _KADDRESS_RANGE_DESCRIPTOR;
struct _KAFFINITY_ENUMERATION_CONTEXT;
struct _KAFFINITY_EX;
struct _KAPC;
struct _KBUGCHECK_ADD_PAGES;
struct _KBUGCHECK_CALLBACK_RECORD;
struct _KBUGCHECK_DATA;
struct _KBUGCHECK_DUMP_IO;
struct _KBUGCHECK_REASON_CALLBACK_RECORD;
struct _KBUGCHECK_REMOVE_PAGES;
struct _KBUGCHECK_SECONDARY_DUMP_DATA;
struct _KBUGCHECK_SECONDARY_DUMP_DATA_EX;
struct _KBUGCHECK_TRIAGE_DUMP_DATA;
struct _KCRM_MARSHAL_HEADER;
struct _KCRM_PROTOCOL_BLOB;
struct _KCRM_TRANSACTION_BLOB;
struct _KDESCRIPTOR;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KDPC_WATCHDOG_INFORMATION;
struct _KENLISTMENT;
struct _KERNEL_USER_TIMES;
struct _KEVENT;
struct _KEXCEPTION_FRAME;
struct _KEY_BASIC_INFORMATION;
struct _KEY_CACHED_INFORMATION;
struct _KEY_CONTROL_FLAGS_INFORMATION;
struct _KEY_FULL_INFORMATION;
struct _KEY_LAYER_INFORMATION;
struct _KEY_NAME_INFORMATION;
struct _KEY_NODE_INFORMATION;
struct _KEY_SET_VIRTUALIZATION_INFORMATION;
struct _KEY_TRUST_INFORMATION;
struct _KEY_VALUE_BASIC_INFORMATION;
struct _KEY_VALUE_ENTRY;
struct _KEY_VALUE_FULL_INFORMATION;
struct _KEY_VALUE_LAYER_INFORMATION;
struct _KEY_VALUE_PARTIAL_INFORMATION;
struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
struct _KEY_VIRTUALIZATION_INFORMATION;
struct _KEY_WOW64_FLAGS_INFORMATION;
struct _KEY_WRITE_TIME_INFORMATION;
struct _KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT;
struct _KFLOATING_SAVE;
struct _KGATE;
struct _KINTERRUPT;
struct _KLOCK_QUEUE_HANDLE;
struct _KMUTANT;
struct _KNODE;
struct _KPCR;
struct _KPRCB;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KQUEUE;
struct _KRESOURCEMANAGER;
struct _KSEMAPHORE;
struct _KSPECIAL_REGISTERS;
struct _KSPIN_LOCK_QUEUE;
struct _KSYSTEM_TIME;
struct _KTHREAD;
struct _KTIMER;
struct _KTM;
struct _KTMOBJECT_CURSOR;
struct _KTRANSACTION;
struct _KTRAP_FRAME;
struct _KTRIAGE_DUMP_DATA_ARRAY;
struct _KTSS64;
struct _KUMS_CONTEXT_HEADER;
struct _KUSER_SHARED_DATA;
struct _KWAIT_BLOCK;
struct _KWAIT_CHAIN;
struct _LBR_TRACE_EVENT_DATA;
struct _LEAP_SECOND_DATA;
struct _LEGACY_BUS_INFORMATION;
struct _LIBRARY_MODULE;
struct _LINK_SHARE_ACCESS;
struct _LIST_ENTRY;
struct _LOADER_PARAMETER_BLOCK;
struct _LOADER_PARTITION_INFORMATION_EX;
struct _LOAD_DLL_EVENT_DATA;
struct _LOGICAL_DISK_DEFRAG;
struct _LOGICAL_DISK_EXTENTS;
struct _LOOKASIDE_LIST_EX;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _M128A;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MAP_REGISTER_ENTRY;
struct _MARKER_TYPE;
struct _MCA_DRIVER_INFO;
struct _MCA_EXCEPTION;
struct _MCGEN_TRACE_CONTEXT;
struct _MDL;
struct _MEM_ADDRESS_REQUIREMENTS;
struct _MESSAGE_TRACE;
struct _MESSAGE_TRACE_HEADER;
struct _MESSAGE_TRACE_USER;
struct _MM_COPY_ADDRESS;
struct _MM_PHYSICAL_ADDRESS_LIST;
struct _MOF_FIELD;
struct _MP;
struct _MX_WNF_SUBSCRIPTION_CONTEXT;
struct _MdTimer;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NIC_RECORD;
struct _NPAGED_LOOKASIDE_LIST;
struct _NT_TIB;
struct _NT_TIB32;
struct _NT_TIB64;
struct _NUMA_NODE_RELATIONSHIP;
struct _NV_MEMORY_RANGE;
struct _OBJECTID;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_ATTRIBUTES32;
struct _OBJECT_ATTRIBUTES64;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OB_CALLBACK_REGISTRATION;
struct _OB_EXTENDED_PARSE_PARAMETERS;
struct _OB_OPERATION_REGISTRATION;
struct _OB_POST_CREATE_HANDLE_INFORMATION;
struct _OB_POST_DUPLICATE_HANDLE_INFORMATION;
struct _OB_POST_OPERATION_INFORMATION;
struct _OB_PRE_CREATE_HANDLE_INFORMATION;
struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION;
struct _OB_PRE_OPERATION_INFORMATION;
struct _OPLOCK_KEY_CONTEXT;
struct _OPLOCK_KEY_ECP_CONTEXT;
struct _OPTICAL_MEDIA_RECORD;
struct _OSVERSIONINFOA;
struct _OSVERSIONINFOEXA;
struct _OSVERSIONINFOEXW;
struct _OSVERSIONINFOW;
struct _OS_STRING;
struct _OWNER_ENTRY;
struct _PAGED_LOOKASIDE_LIST;
struct _PAGE_PRIORITY_INFORMATION;
struct _PCIBUSDATA;
struct _PCIX_BRIDGE_CAPABILITY;
struct _PCI_ADVANCED_FEATURES_CAPABILITY;
struct _PCI_AGP_APERTURE_PAGE_SIZE;
struct _PCI_AGP_CAPABILITY;
struct _PCI_AGP_CAPABILITY::_PCI_AGP_COMMAND;
struct _PCI_AGP_CAPABILITY::_PCI_AGP_STATUS;
struct _PCI_AGP_COMMAND;
struct _PCI_AGP_CONTROL;
struct _PCI_AGP_ISOCH_COMMAND;
struct _PCI_AGP_ISOCH_STATUS;
struct _PCI_AGP_STATUS;
struct _PCI_BUS_INTERFACE_STANDARD;
struct _PCI_CAPABILITIES_HEADER;
struct _PCI_COMMON_CONFIG;
struct _PCI_COMMON_HEADER;
struct _PCI_DEBUGGING_DEVICE_IN_USE;
struct _PCI_DEVICE_PRESENCE_PARAMETERS;
struct _PCI_DEVICE_PRESENT_INTERFACE;
struct _PCI_EXPRESS_ACS_CAPABILITY;
struct _PCI_EXPRESS_AER_CAPABILITY;
struct _PCI_EXPRESS_ARI_CAPABILITY;
struct _PCI_EXPRESS_ARI_CAPABILITY_REGISTER;
struct _PCI_EXPRESS_ARI_CONTROL_REGISTER;
struct _PCI_EXPRESS_ATS_CAPABILITY;
struct _PCI_EXPRESS_ATS_CAPABILITY_REGISTER;
struct _PCI_EXPRESS_ATS_CONTROL_REGISTER;
struct _PCI_EXPRESS_BRIDGE_AER_CAPABILITY;
struct _PCI_EXPRESS_CAPABILITY;
struct _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_CAPABILITY;
struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER;
struct _PCI_EXPRESS_L1_PM_SS_CAPABILITY;
struct _PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
struct _PCI_EXPRESS_LTR_CAPABILITY;
struct _PCI_EXPRESS_PASID_CAPABILITY;
struct _PCI_EXPRESS_PRI_CAPABILITY;
struct _PCI_EXPRESS_PTM_CAPABILITY;
struct _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY;
struct _PCI_EXPRESS_RESIZABLE_BAR_ENTRY;
struct _PCI_EXPRESS_ROOTPORT_AER_CAPABILITY;
struct _PCI_EXPRESS_ROOT_PORT_INTERFACE;
struct _PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY;
struct _PCI_EXPRESS_SRIOV_CAPABILITY;
struct _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY;
struct _PCI_EXPRESS_VENDOR_SPECIFIC_CAPABILITY;
struct _PCI_EXPRESS_VIRTUAL_CHANNEL_CAPABILITY;
struct _PCI_FIRMWARE_BUS_CAPS;
struct _PCI_FIRMWARE_BUS_CAPS_RETURN_BUFFER;
struct _PCI_FPB_CAPABILITY;
struct _PCI_FPB_CAPABILITY_HEADER;
struct _PCI_FPB_MEM_HIGH_VECTOR_CONTROL2_REGISTER;
struct _PCI_FPB_VECTOR_ACCESS_DATA_REGISTER;
struct _PCI_HEADER_TYPE_0;
struct _PCI_HEADER_TYPE_1;
struct _PCI_HEADER_TYPE_2;
struct _PCI_MSIX_TABLE_CONFIG_INTERFACE;
struct _PCI_PMC;
struct _PCI_PMC::_PM_SUPPORT;
struct _PCI_PMCSR;
struct _PCI_PMCSR_BSE;
struct _PCI_PM_CAPABILITY;
struct _PCI_ROOT_BUS_HARDWARE_CAPABILITY;
struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD;
struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD;
struct _PCI_SECURITY_INTERFACE;
struct _PCI_SLOT_NUMBER;
struct _PCI_SUBSYSTEM_IDS_CAPABILITY;
struct _PCI_VIRTUALIZATION_INTERFACE;
struct _PCW_BUFFER;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_DATA;
struct _PCW_INSTANCE;
struct _PCW_MASK_INFORMATION;
struct _PCW_REGISTRATION;
struct _PCW_REGISTRATION_INFORMATION;
struct _PEB;
struct _PEB_LDR_DATA;
struct _PERFINFO_BATTERY_LIFE_INFO;
struct _PERFINFO_BOOT_PHASE_START;
struct _PERFINFO_BOOT_PREFETCH_INFORMATION;
struct _PERFINFO_CCSWAP;
struct _PERFINFO_CCSWAP_BUFFER;
struct _PERFINFO_CCSWAP_IDLE;
struct _PERFINFO_CCSWAP_IDLE_SHORT;
struct _PERFINFO_CCSWAP_LITE;
struct _PERFINFO_CC_CAN_WRITE_FAIL;
struct _PERFINFO_CC_EXTRA_WB_THREAD_INFO;
struct _PERFINFO_CC_FLUSH_CACHE;
struct _PERFINFO_CC_FLUSH_SECTION;
struct _PERFINFO_CC_LAZY_WRITE_SCAN;
struct _PERFINFO_CC_LOGGED_STREAM_INFO;
struct _PERFINFO_CC_READ_AHEAD;
struct _PERFINFO_CC_SCHEDULE_READ_AHEAD;
struct _PERFINFO_CC_WORKITEM_COMPLETE;
struct _PERFINFO_CC_WORKITEM_DEQUEUE;
struct _PERFINFO_CC_WORKITEM_ENQUEUE;
struct _PERFINFO_CLOCK_INTERRUPT_INFORMATION;
struct _PERFINFO_CONTIGUOUS_PAGE_GENERATE;
struct _PERFINFO_DEBUG_EVENT;
struct _PERFINFO_DPC_ENQUEUE_INFORMATION;
struct _PERFINFO_DPC_EXECUTION_INFORMATION;
struct _PERFINFO_DPC_INFORMATION;
struct _PERFINFO_DRIVER_COMPLETE_REQUEST;
struct _PERFINFO_DRIVER_COMPLETE_REQUEST_RET;
struct _PERFINFO_DRIVER_COMPLETIONROUTINE;
struct _PERFINFO_DRIVER_MAJORFUNCTION;
struct _PERFINFO_DRIVER_MAJORFUNCTION_RET;
struct _PERFINFO_EXECUTIVE_RESOURCE_CONFIG;
struct _PERFINFO_FILENAME_SAME_INFORMATION;
struct _PERFINFO_FILEOBJECT_INFORMATION;
struct _PERFINFO_FILE_CREATE;
struct _PERFINFO_FILE_DIRENUM;
struct _PERFINFO_FILE_INFORMATION;
struct _PERFINFO_FILE_OPERATION_END;
struct _PERFINFO_FILE_PATH_OPERATION;
struct _PERFINFO_FILE_READ_WRITE;
struct _PERFINFO_FILE_SIMPLE_OPERATION;
struct _PERFINFO_FLT_OPERATION;
struct _PERFINFO_FLT_OPERATION_STATUS;
struct _PERFINFO_GROUPMASK;
struct _PERFINFO_HARDPAGEFAULT_INFORMATION;
struct _PERFINFO_IDLE_STATE_CHANGE;
struct _PERFINFO_IMAGELOAD_IN_PAGEFILE_INFO;
struct _PERFINFO_INTERRUPT_INFORMATION;
struct _PERFINFO_IO_TIMER;
struct _PERFINFO_KERNELMEMORY_RANGE_USAGE;
struct _PERFINFO_MARK_EVENT;
struct _PERFINFO_MARK_INFORMATION;
struct _PERFINFO_MEMORY_INFORMATION;
struct _PERFINFO_MEM_RESET_INFO;
struct _PERFINFO_PAGECOMBINE_AGGREGATE_STAT;
struct _PERFINFO_PAGECOMBINE_ITERATION_STAT;
struct _PERFINFO_PAGE_RANGE_IDENTITY;
struct _PERFINFO_PFMAPPED_SECTION_INFORMATION;
struct _PERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION;
struct _PERFINFO_PMC_SAMPLE_INFORMATION;
struct _PERFINFO_PO_CALIBRATED_PERFCOUNTER;
struct _PERFINFO_PO_NOTIFY_DEVICE;
struct _PERFINFO_PO_NOTIFY_DEVICE_COMPLETE;
struct _PERFINFO_PO_POSTSLEEP;
struct _PERFINFO_PO_PRESLEEP;
struct _PERFINFO_PO_SESSION_CALLOUT;
struct _PERFINFO_PO_SESSION_CALLOUT_RET;
struct _PERFINFO_PPM_IDLE_EXIT_LATENCY;
struct _PERFINFO_PPM_IDLE_STATE_CHANGE;
struct _PERFINFO_PPM_IDLE_STATE_ENTER;
struct _PERFINFO_PPM_IDLE_STATE_EXIT;
struct _PERFINFO_PPM_PERF_STATE_CHANGE;
struct _PERFINFO_PPM_STATE_SELECTION;
struct _PERFINFO_PPM_THERMAL_CONSTRAINT;
struct _PERFINFO_PROCESS_INSWAP;
struct _PERFINFO_PROCESS_PERFCTR;
struct _PERFINFO_PROCESS_PERFCTR32;
struct _PERFINFO_PROCESS_PERFCTR64;
struct _PERFINFO_SAMPLED_PROFILE_CACHE;
struct _PERFINFO_SAMPLED_PROFILE_CONFIG;
struct _PERFINFO_SAMPLED_PROFILE_INFORMATION;
struct _PERFINFO_SESSIONCREATE_INFORMATION;
struct _PERFINFO_SET_DEVICES_STATE;
struct _PERFINFO_SET_DEVICES_STATE_RET;
struct _PERFINFO_SET_POWER_ACTION;
struct _PERFINFO_SET_POWER_ACTION_RET;
struct _PERFINFO_SPEC_CONTROL_RETPOLINE_EXIT;
struct _PERFINFO_SPINLOCK_CONFIG;
struct _PERFINFO_SYSCALL_ENTER_DATA;
struct _PERFINFO_SYSCALL_EXIT_DATA;
struct _PERFINFO_SYSTEM_MEMORY_INFORMATION;
struct _PERFINFO_TRACE_HEADER;
struct _PERFINFO_VAD_ROTATE_INFO;
struct _PERFINFO_VIRTUAL_ALLOC;
struct _PERFINFO_WORKINGSET_ENTRY;
struct _PERFINFO_WORKINGSET_INFORMATION;
struct _PERFINFO_YIELD_PROCESSOR_INFORMATION;
struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR;
struct _PHYSICAL_COUNTER_RESOURCE_LIST;
struct _PHYSICAL_DISK_RECORD;
struct _PHYSICAL_MEMORY_RANGE;
struct _PLUGPLAY_NOTIFICATION_HEADER;
struct _PMD;
struct _PM_DISPATCH_TABLE;
struct _PM_SUPPORT;
struct _PNP_BUS_INFORMATION;
struct _PNP_EXTENDED_ADDRESS_INTERFACE;
struct _PNP_LOCATION_INTERFACE;
struct _PNP_REPLACE_DRIVER_INTERFACE;
struct _PNP_REPLACE_MEMORY_LIST;
struct _PNP_REPLACE_PARAMETERS;
struct _PNP_REPLACE_PROCESSOR_LIST;
struct _PNP_REPLACE_PROCESSOR_LIST_V1;
struct _POOLED_USAGE_AND_LIMITS;
struct _POWER_IDLE_RESILIENCY;
struct _POWER_MONITOR_INVOCATION;
struct _POWER_PLATFORM_INFORMATION;
struct _POWER_SEQUENCE;
struct _POWER_SESSION_CONNECT;
struct _POWER_SESSION_RIT_STATE;
struct _POWER_SESSION_TIMEOUTS;
struct _POWER_SESSION_WINLOGON;
struct _POWER_THREAD_INTERFACE;
struct _POWER_THROTTLING_PROCESS_STATE;
struct _POWER_THROTTLING_THREAD_STATE;
struct _POWER_USER_PRESENCE;
struct _POX_SETTINGS;
struct _PO_FX_COMPONENT_IDLE_STATE;
struct _PO_FX_COMPONENT_PERF_INFO;
struct _PO_FX_COMPONENT_PERF_SET;
struct _PO_FX_COMPONENT_V1;
struct _PO_FX_COMPONENT_V2;
struct _PO_FX_DEVICE_V1;
struct _PO_FX_DEVICE_V2;
struct _PO_FX_PERF_STATE;
struct _PO_FX_PERF_STATE_CHANGE;
struct _PRIVILEGE_SET;
struct _PROCESSOR_GROUP_INFO;
struct _PROCESSOR_NUMBER;
struct _PROCESSOR_RECORD;
struct _PROCESSOR_RELATIONSHIP;
struct _PROCESS_ACCESS_TOKEN;
struct _PROCESS_BASIC_INFORMATION;
struct _PROCESS_DEVICEMAP_INFORMATION;
struct _PROCESS_DEVICEMAP_INFORMATION_EX;
struct _PROCESS_EXCEPTION_PORT;
struct _PROCESS_EXTENDED_BASIC_INFORMATION;
struct _PROCESS_HANDLE_TRACING_ENABLE;
struct _PROCESS_HANDLE_TRACING_ENABLE_EX;
struct _PROCESS_HANDLE_TRACING_ENTRY;
struct _PROCESS_HANDLE_TRACING_QUERY;
struct _PROCESS_KEEPALIVE_COUNT_INFORMATION;
struct _PROCESS_MITIGATION_ASLR_POLICY;
struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
struct _PROCESS_MITIGATION_DEP_POLICY;
struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION;
struct _PROCESS_SESSION_INFORMATION;
struct _PROCESS_WS_WATCH_INFORMATION;
struct _PROFILE_SOURCE_INFO;
struct _PS_CREATE_NOTIFY_INFO;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _PTM_CONTROL_INTERFACE;
struct _QUAD;
struct _QUERY_USB_CAPABILITY;
struct _QUOTA_LIMITS;
struct _QUOTA_LIMITS_EX;
struct _REENUMERATE_SELF_INTERFACE_STANDARD;
struct _REGISTER_COMPOSITE_DEVICE;
struct _REG_CALLBACK_CONTEXT_CLEANUP_INFORMATION;
struct _REG_CREATE_KEY_INFORMATION;
struct _REG_CREATE_KEY_INFORMATION_V1;
struct _REG_DELETE_KEY_INFORMATION;
struct _REG_DELETE_VALUE_KEY_INFORMATION;
struct _REG_ENUMERATE_KEY_INFORMATION;
struct _REG_ENUMERATE_VALUE_KEY_INFORMATION;
struct _REG_KEY_HANDLE_CLOSE_INFORMATION;
struct _REG_LOAD_KEY_INFORMATION;
struct _REG_POST_CREATE_KEY_INFORMATION;
struct _REG_POST_OPERATION_INFORMATION;
struct _REG_PRE_CREATE_KEY_INFORMATION;
struct _REG_QUERY_KEY_INFORMATION;
struct _REG_QUERY_KEY_NAME;
struct _REG_QUERY_KEY_SECURITY_INFORMATION;
struct _REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION;
struct _REG_QUERY_VALUE_KEY_INFORMATION;
struct _REG_RENAME_KEY_INFORMATION;
struct _REG_REPLACE_KEY_INFORMATION;
struct _REG_RESTORE_KEY_INFORMATION;
struct _REG_SAVE_KEY_INFORMATION;
struct _REG_SET_INFORMATION_KEY_INFORMATION;
struct _REG_SET_KEY_SECURITY_INFORMATION;
struct _REG_SET_VALUE_KEY_INFORMATION;
struct _REG_UNLOAD_KEY_INFORMATION;
struct _REQUEST_REMOTE_WAKE_NOTIFICATION;
struct _RESOURCEMANAGER_BASIC_INFORMATION;
struct _RESOURCEMANAGER_COMPLETION_INFORMATION;
struct _RESOURCE_HASH_ENTRY;
struct _RESOURCE_PERFORMANCE_DATA;
struct _RESUME_PERFORMANCE;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_AVL_TABLE;
struct _RTL_AVL_TREE;
struct _RTL_BALANCED_LINKS;
struct _RTL_BALANCED_NODE;
struct _RTL_BITMAP;
struct _RTL_BITMAP_RUN;
struct _RTL_CRITICAL_SECTION;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_GENERIC_TABLE;
struct _RTL_QUERY_REGISTRY_TABLE;
struct _RTL_RB_TREE;
struct _RTL_SPLAY_LINKS;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _SCOPE_TABLE_AMD64;
struct _SCSI_REQUEST_BLOCK;
struct _SDEV_IDENTIFIER_INTERFACE;
struct _SECTION_OBJECT_POINTERS;
struct _SECURE_DRIVER_INTERFACE;
struct _SECURITY_DESCRIPTOR;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SE_ADT_ACCESS_REASON;
struct _SE_ADT_CLAIMS;
struct _SE_ADT_OBJECT_TYPE;
struct _SE_ADT_PARAMETER_ARRAY;
struct _SE_ADT_PARAMETER_ARRAY_ENTRY;
struct _SE_ADT_PARAMETER_ARRAY_EX;
struct _SE_EXPORTS;
struct _SE_IMPERSONATION_STATE;
struct _SHARE_ACCESS;
struct _SID;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SILO_MONITOR;
struct _SILO_MONITOR_REGISTRATION;
struct _SINGLE_LIST_ENTRY;
struct _SINGLE_LIST_ENTRY32;
struct _SLEEP_STUDY_INTERFACE;
struct _SLIST_ENTRY;
struct _SOC_SUBSYSTEM_FAILURE_DETAILS;
struct _STACK_DEVICE_CAPABILITIES;
struct _STACK_WALK_EVENT_DATA;
struct _STRING;
struct _STRING32;
struct _STRING64;
struct _STRSD_KEY_LOOKUP;
struct _STRSD_SID_LOOKUP;
struct _SYSTEM_CPU_SET_INFORMATION;
struct _SYSTEM_FIRMWARE_TABLE_HANDLER;
struct _SYSTEM_FIRMWARE_TABLE_INFORMATION;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _SYSTEM_TRACE_HEADER;
struct _TARGET_DEVICE_CUSTOM_NOTIFICATION;
struct _TARGET_DEVICE_REMOVAL_NOTIFICATION;
struct _TEB;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TIMER_SET_COALESCABLE_TIMER_INFO;
struct _TIME_FIELDS;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
struct _TP_CLEANUP_GROUP;
struct _TP_POOL;
struct _TRACE_BUFFER;
struct _TRACE_ENABLE_CONTEXT;
struct _TRACE_ENABLE_CONTEXT_EX;
struct _TRACE_ENABLE_FLAG_EXTENSION;
struct _TRACE_ENABLE_FLAG_EXT_HEADER;
struct _TRACE_ENABLE_FLAG_EXT_ITEM;
struct _TRACE_ENABLE_INFO;
struct _TRACE_GUID_INFO;
struct _TRACE_GUID_PROPERTIES;
struct _TRACE_PROVIDER_INSTANCE_INFO;
struct _TRANSACTIONMANAGER_BASIC_INFORMATION;
struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
struct _TRANSACTIONMANAGER_LOG_INFORMATION;
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
struct _TRANSACTION_BASIC_INFORMATION;
struct _TRANSACTION_BIND_INFORMATION;
struct _TRANSACTION_ENLISTMENTS_INFORMATION;
struct _TRANSACTION_ENLISTMENT_PAIR;
struct _TRANSACTION_LIST_ENTRY;
struct _TRANSACTION_LIST_INFORMATION;
struct _TRANSACTION_NOTIFICATION;
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
struct _TRANSACTION_PROPERTIES_INFORMATION;
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
struct _TRANSLATOR_INTERFACE;
struct _TXN_PARAMETER_BLOCK;
struct _TlgEventMetadata_t;
struct _TlgProviderMetadata_t;
struct _TlgProvider_t;
struct _TlgStructSizeMustBeLessThan128<1,1>;
struct _TlgStructSizeMustBeLessThan128<24,1>;
struct _TlgStructSizeMustBeLessThan128<9,1>;
struct _TlgTypeMapBase<_FILETIME>;
struct _TlgTypeMapBase<_GUID>;
struct _TlgTypeMapBase<_SYSTEMTIME>;
struct _TlgTypeMapBase<__int64>;
struct _TlgTypeMapBase<bool>;
struct _TlgTypeMapBase<char *>;
struct _TlgTypeMapBase<char const *>;
struct _TlgTypeMapBase<char>;
struct _TlgTypeMapBase<double>;
struct _TlgTypeMapBase<float>;
struct _TlgTypeMapBase<int>;
struct _TlgTypeMapBase<long>;
struct _TlgTypeMapBase<short>;
struct _TlgTypeMapBase<signed char>;
struct _TlgTypeMapBase<unsigned __int64>;
struct _TlgTypeMapBase<unsigned char>;
struct _TlgTypeMapBase<unsigned int>;
struct _TlgTypeMapBase<unsigned long>;
struct _TlgTypeMapBase<unsigned short *>;
struct _TlgTypeMapBase<unsigned short const *>;
struct _TlgTypeMapBase<unsigned short>;
struct _TlgTypeMapBase<void *>;
struct _TlgTypeMapBase<void const *>;
struct _TlgTypeMapBase<wchar_t>;
struct _TraceLoggingMetadata_t;
struct _TypeDescriptor;
struct _UNICODE_STRING;
struct _UNWIND_HISTORY_TABLE;
struct _UNWIND_HISTORY_TABLE_ENTRY;
struct _UNWIND_INFO;
struct _URB;
struct _URB_ASYNC_NOTIFICATION_REQUEST_DURING_ENDPOINT_OFFLOAD;
struct _URB_BULK_OR_INTERRUPT_TRANSFER;
struct _URB_CONTROL_DESCRIPTOR_REQUEST;
struct _URB_CONTROL_FEATURE_REQUEST;
struct _URB_CONTROL_GET_CONFIGURATION_REQUEST;
struct _URB_CONTROL_GET_INTERFACE_REQUEST;
struct _URB_CONTROL_GET_STATUS_REQUEST;
struct _URB_CONTROL_TRANSFER;
struct _URB_CONTROL_TRANSFER_EX;
struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST;
struct _URB_FRAME_LENGTH_CONTROL;
struct _URB_GET_CURRENT_FRAME_NUMBER;
struct _URB_GET_FRAME_LENGTH;
struct _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS;
struct _URB_HCD_AREA;
struct _URB_HEADER;
struct _URB_ISOCH_TRANSFER;
struct _URB_OPEN_STATIC_STREAMS;
struct _URB_OS_FEATURE_DESCRIPTOR_REQUEST;
struct _URB_PIPE_REQUEST;
struct _URB_SECURE_BULK_OR_INTERRUPT_TRANSFER;
struct _URB_SECURE_ISOCH_TRANSFER;
struct _URB_SELECT_CONFIGURATION;
struct _URB_SELECT_INTERFACE;
struct _URB_SELECT_INTERFACE_WITH_ENDPOINT_OFFLOAD;
struct _URB_SET_FRAME_LENGTH;
struct _USBC_DEVICE_CONFIGURATION_INTERFACE_V1;
struct _USBC_FUNCTION_DESCRIPTOR;
struct _USBD_DEVICE_INFORMATION;
struct _USBD_ENDPOINT_OFFLOAD_INFORMATION;
struct _USBD_HANDLE_INFO;
struct _USBD_INTERFACE_INFORMATION;
struct _USBD_INTERFACE_LIST_ENTRY;
struct _USBD_INTERFACE_V3;
struct _USBD_ISO_PACKET_DESCRIPTOR;
struct _USBD_PIPE_INFORMATION;
struct _USBD_STREAM_INFORMATION;
struct _USBD_VERSION_INFORMATION;
struct _USB_30_HUB_DESCRIPTOR;
struct _USB_BOS_DESCRIPTOR;
struct _USB_BUS_INFORMATION_LEVEL_0;
struct _USB_BUS_INFORMATION_LEVEL_1;
struct _USB_BUS_INTERFACE_USBDI_V0;
struct _USB_BUS_INTERFACE_USBDI_V1;
struct _USB_BUS_INTERFACE_USBDI_V2;
struct _USB_BUS_INTERFACE_USBDI_V3;
struct _USB_COMMON_DESCRIPTOR;
struct _USB_CONFIGURATION_DESCRIPTOR;
struct _USB_CONFIGURATION_POWER_DESCRIPTOR;
struct _USB_DEFAULT_PIPE_SETUP_PACKET;
struct _USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR;
struct _USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR;
struct _USB_DEVICE_CHARACTERISTICS;
struct _USB_DEVICE_DESCRIPTOR;
struct _USB_DEVICE_QUALIFIER_DESCRIPTOR;
struct _USB_ENDPOINT_DESCRIPTOR;
struct _USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION;
struct _USB_HIGH_SPEED_MAXPACKET::_MP;
struct _USB_HUB_DESCRIPTOR;
struct _USB_IDLE_CALLBACK_INFO;
struct _USB_INTERFACE_ASSOCIATION_DESCRIPTOR;
struct _USB_INTERFACE_DESCRIPTOR;
struct _USB_INTERFACE_POWER_DESCRIPTOR;
struct _USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION;
struct _USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION;
struct _USB_STRING_DESCRIPTOR;
struct _USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR;
struct _USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR;
struct _USB_TOPOLOGY_ADDRESS;
struct _USB_TRANSPORT_CHARACTERISTICS;
struct _USB_TRANSPORT_CHARACTERISTICS_CHANGE_NOTIFICATION;
struct _USB_TRANSPORT_CHARACTERISTICS_CHANGE_REGISTRATION;
struct _USB_TRANSPORT_CHARACTERISTICS_CHANGE_UNREGISTRATION;
struct _VF_COMMON_CONTEXT_HEADER;
struct _VF_HOOK_PROCESS_INFO;
struct _VF_WDFDEVICECREATE_CONTEXT;
struct _VF_WDFIOQUEUECREATE_CONTEXT;
struct _VIDEO_RECORD;
struct _VIRTUAL_RESOURCE;
struct _VM_COUNTERS;
struct _VM_COUNTERS_EX;
struct _VM_COUNTERS_EX2;
struct _VPB;
struct _WAIT_CONTEXT_BLOCK;
struct _WDFCONTEXTTYPE_TRIAGE_INFO;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_11;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_13;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_15;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_17;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_19;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_21;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_23;
struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_25;
struct _WDFCONTEXT_TRIAGE_INFO;
struct _WDFCONTEXT_TRIAGE_INFO_V1_11;
struct _WDFCONTEXT_TRIAGE_INFO_V1_13;
struct _WDFCONTEXT_TRIAGE_INFO_V1_15;
struct _WDFCONTEXT_TRIAGE_INFO_V1_17;
struct _WDFCONTEXT_TRIAGE_INFO_V1_19;
struct _WDFCONTEXT_TRIAGE_INFO_V1_21;
struct _WDFCONTEXT_TRIAGE_INFO_V1_23;
struct _WDFCONTEXT_TRIAGE_INFO_V1_25;
struct _WDFCX_FILEOBJECT_CONFIG;
struct _WDFCX_FILEOBJECT_CONFIG_V1_11;
struct _WDFCX_FILEOBJECT_CONFIG_V1_13;
struct _WDFCX_FILEOBJECT_CONFIG_V1_15;
struct _WDFCX_FILEOBJECT_CONFIG_V1_17;
struct _WDFCX_FILEOBJECT_CONFIG_V1_19;
struct _WDFCX_FILEOBJECT_CONFIG_V1_21;
struct _WDFCX_FILEOBJECT_CONFIG_V1_23;
struct _WDFCX_FILEOBJECT_CONFIG_V1_25;
struct _WDFCX_PNPPOWER_EVENT_CALLBACKS;
struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_19;
struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_21;
struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_23;
struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_25;
struct _WDFDEVICE_TRIAGE_INFO;
struct _WDFDEVICE_TRIAGE_INFO_V1_11;
struct _WDFDEVICE_TRIAGE_INFO_V1_13;
struct _WDFDEVICE_TRIAGE_INFO_V1_15;
struct _WDFDEVICE_TRIAGE_INFO_V1_17;
struct _WDFDEVICE_TRIAGE_INFO_V1_19;
struct _WDFDEVICE_TRIAGE_INFO_V1_21;
struct _WDFDEVICE_TRIAGE_INFO_V1_23;
struct _WDFDEVICE_TRIAGE_INFO_V1_25;
struct _WDFFUNCTIONS;
struct _WDFFWDPROGRESS_TRIAGE_INFO;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_11;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_13;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_15;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_17;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_19;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_21;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_23;
struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_25;
struct _WDFIRPQUEUE_TRIAGE_INFO;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_11;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_13;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_15;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_17;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_19;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_21;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_23;
struct _WDFIRPQUEUE_TRIAGE_INFO_V1_25;
struct _WDFIRP_TRIAGE_INFO;
struct _WDFIRP_TRIAGE_INFO_V1_11;
struct _WDFIRP_TRIAGE_INFO_V1_13;
struct _WDFIRP_TRIAGE_INFO_V1_15;
struct _WDFIRP_TRIAGE_INFO_V1_17;
struct _WDFIRP_TRIAGE_INFO_V1_19;
struct _WDFIRP_TRIAGE_INFO_V1_21;
struct _WDFIRP_TRIAGE_INFO_V1_23;
struct _WDFIRP_TRIAGE_INFO_V1_25;
struct _WDFMEMORY_OFFSET;
struct _WDFMEMORY_OFFSET_V1_0;
struct _WDFMEMORY_OFFSET_V1_1;
struct _WDFMEMORY_OFFSET_V1_11;
struct _WDFMEMORY_OFFSET_V1_13;
struct _WDFMEMORY_OFFSET_V1_15;
struct _WDFMEMORY_OFFSET_V1_17;
struct _WDFMEMORY_OFFSET_V1_19;
struct _WDFMEMORY_OFFSET_V1_21;
struct _WDFMEMORY_OFFSET_V1_23;
struct _WDFMEMORY_OFFSET_V1_25;
struct _WDFMEMORY_OFFSET_V1_5;
struct _WDFMEMORY_OFFSET_V1_7;
struct _WDFMEMORY_OFFSET_V1_9;
struct _WDFOBJECT_TRIAGE_INFO;
struct _WDFOBJECT_TRIAGE_INFO_V1_11;
struct _WDFOBJECT_TRIAGE_INFO_V1_13;
struct _WDFOBJECT_TRIAGE_INFO_V1_15;
struct _WDFOBJECT_TRIAGE_INFO_V1_17;
struct _WDFOBJECT_TRIAGE_INFO_V1_19;
struct _WDFOBJECT_TRIAGE_INFO_V1_21;
struct _WDFOBJECT_TRIAGE_INFO_V1_23;
struct _WDFOBJECT_TRIAGE_INFO_V1_25;
struct _WDFPROCMGMT_MESSAGE_OPEN_PROCESS_REPLY;
struct _WDFPROCMGMT_MESSAGE_QUERY_PROCESS_REPLY;
struct _WDFQUEUE_TRIAGE_INFO;
struct _WDFQUEUE_TRIAGE_INFO_V1_11;
struct _WDFQUEUE_TRIAGE_INFO_V1_13;
struct _WDFQUEUE_TRIAGE_INFO_V1_15;
struct _WDFQUEUE_TRIAGE_INFO_V1_17;
struct _WDFQUEUE_TRIAGE_INFO_V1_19;
struct _WDFQUEUE_TRIAGE_INFO_V1_21;
struct _WDFQUEUE_TRIAGE_INFO_V1_23;
struct _WDFQUEUE_TRIAGE_INFO_V1_25;
struct _WDFREQUEST_TRIAGE_INFO;
struct _WDFREQUEST_TRIAGE_INFO_V1_11;
struct _WDFREQUEST_TRIAGE_INFO_V1_13;
struct _WDFREQUEST_TRIAGE_INFO_V1_15;
struct _WDFREQUEST_TRIAGE_INFO_V1_17;
struct _WDFREQUEST_TRIAGE_INFO_V1_19;
struct _WDFREQUEST_TRIAGE_INFO_V1_21;
struct _WDFREQUEST_TRIAGE_INFO_V1_23;
struct _WDFREQUEST_TRIAGE_INFO_V1_25;
struct _WDFSTRUCTURES;
struct _WDFVERSION;
struct _WDF_BIND_INFO;
struct _WDF_BIND_INFO2;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_0;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_1;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_11;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_13;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_15;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_17;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_19;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_21;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_23;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_25;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_5;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_7;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_9;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_0;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_1;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_11;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_13;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_15;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_17;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_19;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_21;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_23;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_25;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_5;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_7;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_9;
struct _WDF_CHILD_LIST_CONFIG;
struct _WDF_CHILD_LIST_CONFIG_V1_0;
struct _WDF_CHILD_LIST_CONFIG_V1_1;
struct _WDF_CHILD_LIST_CONFIG_V1_11;
struct _WDF_CHILD_LIST_CONFIG_V1_13;
struct _WDF_CHILD_LIST_CONFIG_V1_15;
struct _WDF_CHILD_LIST_CONFIG_V1_17;
struct _WDF_CHILD_LIST_CONFIG_V1_19;
struct _WDF_CHILD_LIST_CONFIG_V1_21;
struct _WDF_CHILD_LIST_CONFIG_V1_23;
struct _WDF_CHILD_LIST_CONFIG_V1_25;
struct _WDF_CHILD_LIST_CONFIG_V1_5;
struct _WDF_CHILD_LIST_CONFIG_V1_7;
struct _WDF_CHILD_LIST_CONFIG_V1_9;
struct _WDF_CHILD_LIST_ITERATOR;
struct _WDF_CHILD_LIST_ITERATOR_V1_0;
struct _WDF_CHILD_LIST_ITERATOR_V1_1;
struct _WDF_CHILD_LIST_ITERATOR_V1_11;
struct _WDF_CHILD_LIST_ITERATOR_V1_13;
struct _WDF_CHILD_LIST_ITERATOR_V1_15;
struct _WDF_CHILD_LIST_ITERATOR_V1_17;
struct _WDF_CHILD_LIST_ITERATOR_V1_19;
struct _WDF_CHILD_LIST_ITERATOR_V1_21;
struct _WDF_CHILD_LIST_ITERATOR_V1_23;
struct _WDF_CHILD_LIST_ITERATOR_V1_25;
struct _WDF_CHILD_LIST_ITERATOR_V1_5;
struct _WDF_CHILD_LIST_ITERATOR_V1_7;
struct _WDF_CHILD_LIST_ITERATOR_V1_9;
struct _WDF_CHILD_RETRIEVE_INFO;
struct _WDF_CHILD_RETRIEVE_INFO_V1_0;
struct _WDF_CHILD_RETRIEVE_INFO_V1_1;
struct _WDF_CHILD_RETRIEVE_INFO_V1_11;
struct _WDF_CHILD_RETRIEVE_INFO_V1_13;
struct _WDF_CHILD_RETRIEVE_INFO_V1_15;
struct _WDF_CHILD_RETRIEVE_INFO_V1_17;
struct _WDF_CHILD_RETRIEVE_INFO_V1_19;
struct _WDF_CHILD_RETRIEVE_INFO_V1_21;
struct _WDF_CHILD_RETRIEVE_INFO_V1_23;
struct _WDF_CHILD_RETRIEVE_INFO_V1_25;
struct _WDF_CHILD_RETRIEVE_INFO_V1_5;
struct _WDF_CHILD_RETRIEVE_INFO_V1_7;
struct _WDF_CHILD_RETRIEVE_INFO_V1_9;
struct _WDF_CLASS_BIND_INFO;
struct _WDF_CLASS_BIND_INFO2;
struct _WDF_CLASS_BIND_INFO2_V1_25;
struct _WDF_CLASS_BIND_INFO_V1_11;
struct _WDF_CLASS_BIND_INFO_V1_13;
struct _WDF_CLASS_BIND_INFO_V1_15;
struct _WDF_CLASS_BIND_INFO_V1_17;
struct _WDF_CLASS_BIND_INFO_V1_19;
struct _WDF_CLASS_BIND_INFO_V1_21;
struct _WDF_CLASS_BIND_INFO_V1_23;
struct _WDF_CLASS_BIND_INFO_V1_25;
struct _WDF_CLASS_BIND_INFO_V1_9;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_0;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_1;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_11;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_13;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_15;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_17;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_19;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_21;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_23;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_25;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_5;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_7;
struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_9;
struct _WDF_CLASS_LIBRARY_INFO;
struct _WDF_CLASS_LIBRARY_INFO_V1_11;
struct _WDF_CLASS_LIBRARY_INFO_V1_13;
struct _WDF_CLASS_LIBRARY_INFO_V1_15;
struct _WDF_CLASS_LIBRARY_INFO_V1_17;
struct _WDF_CLASS_LIBRARY_INFO_V1_19;
struct _WDF_CLASS_LIBRARY_INFO_V1_21;
struct _WDF_CLASS_LIBRARY_INFO_V1_23;
struct _WDF_CLASS_LIBRARY_INFO_V1_25;
struct _WDF_CLASS_LIBRARY_INFO_V1_9;
struct _WDF_CLASS_VERSION;
struct _WDF_CLASS_VERSION_V1_11;
struct _WDF_CLASS_VERSION_V1_13;
struct _WDF_CLASS_VERSION_V1_15;
struct _WDF_CLASS_VERSION_V1_17;
struct _WDF_CLASS_VERSION_V1_19;
struct _WDF_CLASS_VERSION_V1_21;
struct _WDF_CLASS_VERSION_V1_23;
struct _WDF_CLASS_VERSION_V1_25;
struct _WDF_CLASS_VERSION_V1_9;
struct _WDF_COMMON_BUFFER_CONFIG;
struct _WDF_COMMON_BUFFER_CONFIG_V1_1;
struct _WDF_COMMON_BUFFER_CONFIG_V1_11;
struct _WDF_COMMON_BUFFER_CONFIG_V1_13;
struct _WDF_COMMON_BUFFER_CONFIG_V1_15;
struct _WDF_COMMON_BUFFER_CONFIG_V1_17;
struct _WDF_COMMON_BUFFER_CONFIG_V1_19;
struct _WDF_COMMON_BUFFER_CONFIG_V1_21;
struct _WDF_COMMON_BUFFER_CONFIG_V1_23;
struct _WDF_COMMON_BUFFER_CONFIG_V1_25;
struct _WDF_COMMON_BUFFER_CONFIG_V1_5;
struct _WDF_COMMON_BUFFER_CONFIG_V1_7;
struct _WDF_COMMON_BUFFER_CONFIG_V1_9;
struct _WDF_COMPANION_EVENT_CALLBACKS_V1_23;
struct _WDF_COMPANION_EVENT_CALLBACKS_V1_25;
struct _WDF_CUSTOM_TYPE_CONTEXT;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_11;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_13;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_15;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_17;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_19;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_21;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_23;
struct _WDF_CUSTOM_TYPE_CONTEXT_V1_25;
struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_13;
struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_15;
struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_17;
struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_19;
struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_21;
struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_23;
struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_25;
struct _WDF_DEVICE_PNP_CAPABILITIES;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_0;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_1;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_11;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_13;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_15;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_17;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_19;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_21;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_23;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_25;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_5;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_7;
struct _WDF_DEVICE_PNP_CAPABILITIES_V1_9;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_0;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_1;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_11;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_13;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_15;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_17;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_19;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_21;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_23;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_25;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_5;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_7;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_9;
struct _WDF_DEVICE_POWER_CAPABILITIES;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_0;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_1;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_11;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_13;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_15;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_17;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_19;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_21;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_23;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_25;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_5;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_7;
struct _WDF_DEVICE_POWER_CAPABILITIES_V1_9;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_0;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_1;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_11;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_13;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_15;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_17;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_19;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_21;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_23;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_25;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_5;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_7;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_9;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_0;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_1;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_11;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_13;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_15;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_17;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_19;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_21;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_23;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_25;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_5;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_7;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_9;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_0;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_1;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_11;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_13;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_15;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_17;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_19;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_21;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_23;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_25;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_5;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_7;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_9;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_0;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_1;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_11;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_13;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_15;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_17;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_19;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_21;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_23;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_25;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_5;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_7;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_9;
struct _WDF_DEVICE_PROPERTY_DATA;
struct _WDF_DEVICE_PROPERTY_DATA_V1_13;
struct _WDF_DEVICE_PROPERTY_DATA_V1_15;
struct _WDF_DEVICE_PROPERTY_DATA_V1_17;
struct _WDF_DEVICE_PROPERTY_DATA_V1_19;
struct _WDF_DEVICE_PROPERTY_DATA_V1_21;
struct _WDF_DEVICE_PROPERTY_DATA_V1_23;
struct _WDF_DEVICE_PROPERTY_DATA_V1_25;
struct _WDF_DEVICE_STATE;
struct _WDF_DEVICE_STATE_V1_0;
struct _WDF_DEVICE_STATE_V1_1;
struct _WDF_DEVICE_STATE_V1_11;
struct _WDF_DEVICE_STATE_V1_13;
struct _WDF_DEVICE_STATE_V1_15;
struct _WDF_DEVICE_STATE_V1_17;
struct _WDF_DEVICE_STATE_V1_19;
struct _WDF_DEVICE_STATE_V1_21;
struct _WDF_DEVICE_STATE_V1_23;
struct _WDF_DEVICE_STATE_V1_25;
struct _WDF_DEVICE_STATE_V1_5;
struct _WDF_DEVICE_STATE_V1_7;
struct _WDF_DEVICE_STATE_V1_9;
struct _WDF_DMA_ENABLER_CONFIG;
struct _WDF_DMA_ENABLER_CONFIG_V1_0;
struct _WDF_DMA_ENABLER_CONFIG_V1_1;
struct _WDF_DMA_ENABLER_CONFIG_V1_11;
struct _WDF_DMA_ENABLER_CONFIG_V1_13;
struct _WDF_DMA_ENABLER_CONFIG_V1_15;
struct _WDF_DMA_ENABLER_CONFIG_V1_17;
struct _WDF_DMA_ENABLER_CONFIG_V1_19;
struct _WDF_DMA_ENABLER_CONFIG_V1_21;
struct _WDF_DMA_ENABLER_CONFIG_V1_23;
struct _WDF_DMA_ENABLER_CONFIG_V1_25;
struct _WDF_DMA_ENABLER_CONFIG_V1_5;
struct _WDF_DMA_ENABLER_CONFIG_V1_7;
struct _WDF_DMA_ENABLER_CONFIG_V1_9;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_11;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_13;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_15;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_17;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_19;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_21;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_23;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_25;
struct _WDF_DPC_CONFIG;
struct _WDF_DPC_CONFIG_V1_0;
struct _WDF_DPC_CONFIG_V1_1;
struct _WDF_DPC_CONFIG_V1_11;
struct _WDF_DPC_CONFIG_V1_13;
struct _WDF_DPC_CONFIG_V1_15;
struct _WDF_DPC_CONFIG_V1_17;
struct _WDF_DPC_CONFIG_V1_19;
struct _WDF_DPC_CONFIG_V1_21;
struct _WDF_DPC_CONFIG_V1_23;
struct _WDF_DPC_CONFIG_V1_25;
struct _WDF_DPC_CONFIG_V1_5;
struct _WDF_DPC_CONFIG_V1_7;
struct _WDF_DPC_CONFIG_V1_9;
struct _WDF_DRIVER_CONFIG;
struct _WDF_DRIVER_CONFIG_V1_0;
struct _WDF_DRIVER_CONFIG_V1_1;
struct _WDF_DRIVER_CONFIG_V1_11;
struct _WDF_DRIVER_CONFIG_V1_13;
struct _WDF_DRIVER_CONFIG_V1_15;
struct _WDF_DRIVER_CONFIG_V1_17;
struct _WDF_DRIVER_CONFIG_V1_19;
struct _WDF_DRIVER_CONFIG_V1_21;
struct _WDF_DRIVER_CONFIG_V1_23;
struct _WDF_DRIVER_CONFIG_V1_25;
struct _WDF_DRIVER_CONFIG_V1_5;
struct _WDF_DRIVER_CONFIG_V1_7;
struct _WDF_DRIVER_CONFIG_V1_9;
struct _WDF_DRIVER_GLOBALS;
struct _WDF_DRIVER_GLOBALS_V1_0;
struct _WDF_DRIVER_GLOBALS_V1_1;
struct _WDF_DRIVER_GLOBALS_V1_11;
struct _WDF_DRIVER_GLOBALS_V1_13;
struct _WDF_DRIVER_GLOBALS_V1_15;
struct _WDF_DRIVER_GLOBALS_V1_17;
struct _WDF_DRIVER_GLOBALS_V1_19;
struct _WDF_DRIVER_GLOBALS_V1_21;
struct _WDF_DRIVER_GLOBALS_V1_23;
struct _WDF_DRIVER_GLOBALS_V1_25;
struct _WDF_DRIVER_GLOBALS_V1_5;
struct _WDF_DRIVER_GLOBALS_V1_7;
struct _WDF_DRIVER_GLOBALS_V1_9;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_0;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_1;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_11;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_13;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_15;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_17;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_19;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_21;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_23;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_25;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_5;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_7;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_9;
struct _WDF_DSF_INTERFACE;
struct _WDF_FDO_EVENT_CALLBACKS;
struct _WDF_FDO_EVENT_CALLBACKS_V1_0;
struct _WDF_FDO_EVENT_CALLBACKS_V1_1;
struct _WDF_FDO_EVENT_CALLBACKS_V1_11;
struct _WDF_FDO_EVENT_CALLBACKS_V1_13;
struct _WDF_FDO_EVENT_CALLBACKS_V1_15;
struct _WDF_FDO_EVENT_CALLBACKS_V1_17;
struct _WDF_FDO_EVENT_CALLBACKS_V1_19;
struct _WDF_FDO_EVENT_CALLBACKS_V1_21;
struct _WDF_FDO_EVENT_CALLBACKS_V1_23;
struct _WDF_FDO_EVENT_CALLBACKS_V1_25;
struct _WDF_FDO_EVENT_CALLBACKS_V1_5;
struct _WDF_FDO_EVENT_CALLBACKS_V1_7;
struct _WDF_FDO_EVENT_CALLBACKS_V1_9;
struct _WDF_FILEOBJECT_CONFIG;
struct _WDF_FILEOBJECT_CONFIG_V1_0;
struct _WDF_FILEOBJECT_CONFIG_V1_1;
struct _WDF_FILEOBJECT_CONFIG_V1_11;
struct _WDF_FILEOBJECT_CONFIG_V1_13;
struct _WDF_FILEOBJECT_CONFIG_V1_15;
struct _WDF_FILEOBJECT_CONFIG_V1_17;
struct _WDF_FILEOBJECT_CONFIG_V1_19;
struct _WDF_FILEOBJECT_CONFIG_V1_21;
struct _WDF_FILEOBJECT_CONFIG_V1_23;
struct _WDF_FILEOBJECT_CONFIG_V1_25;
struct _WDF_FILEOBJECT_CONFIG_V1_5;
struct _WDF_FILEOBJECT_CONFIG_V1_7;
struct _WDF_FILEOBJECT_CONFIG_V1_9;
struct _WDF_IFR_HEADER;
struct _WDF_IFR_OFFSET;
struct _WDF_IFR_RECORD;
struct _WDF_INTERFACE_HEADER;
struct _WDF_INTERRUPT_CONFIG;
struct _WDF_INTERRUPT_CONFIG_V1_0;
struct _WDF_INTERRUPT_CONFIG_V1_1;
struct _WDF_INTERRUPT_CONFIG_V1_11;
struct _WDF_INTERRUPT_CONFIG_V1_13;
struct _WDF_INTERRUPT_CONFIG_V1_15;
struct _WDF_INTERRUPT_CONFIG_V1_17;
struct _WDF_INTERRUPT_CONFIG_V1_19;
struct _WDF_INTERRUPT_CONFIG_V1_21;
struct _WDF_INTERRUPT_CONFIG_V1_23;
struct _WDF_INTERRUPT_CONFIG_V1_25;
struct _WDF_INTERRUPT_CONFIG_V1_5;
struct _WDF_INTERRUPT_CONFIG_V1_7;
struct _WDF_INTERRUPT_CONFIG_V1_9;
struct _WDF_INTERRUPT_EXTENDED_POLICY;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_11;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_13;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_15;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_17;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_19;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_21;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_23;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_25;
struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_9;
struct _WDF_INTERRUPT_INFO;
struct _WDF_INTERRUPT_INFO_V1_0;
struct _WDF_INTERRUPT_INFO_V1_1;
struct _WDF_INTERRUPT_INFO_V1_11;
struct _WDF_INTERRUPT_INFO_V1_13;
struct _WDF_INTERRUPT_INFO_V1_15;
struct _WDF_INTERRUPT_INFO_V1_17;
struct _WDF_INTERRUPT_INFO_V1_19;
struct _WDF_INTERRUPT_INFO_V1_21;
struct _WDF_INTERRUPT_INFO_V1_23;
struct _WDF_INTERRUPT_INFO_V1_25;
struct _WDF_INTERRUPT_INFO_V1_5;
struct _WDF_INTERRUPT_INFO_V1_7;
struct _WDF_INTERRUPT_INFO_V1_9;
struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS;
struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_19;
struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_21;
struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_23;
struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_25;
struct _WDF_IO_QUEUE_CONFIG;
struct _WDF_IO_QUEUE_CONFIG_V1_0;
struct _WDF_IO_QUEUE_CONFIG_V1_1;
struct _WDF_IO_QUEUE_CONFIG_V1_11;
struct _WDF_IO_QUEUE_CONFIG_V1_13;
struct _WDF_IO_QUEUE_CONFIG_V1_15;
struct _WDF_IO_QUEUE_CONFIG_V1_17;
struct _WDF_IO_QUEUE_CONFIG_V1_19;
struct _WDF_IO_QUEUE_CONFIG_V1_21;
struct _WDF_IO_QUEUE_CONFIG_V1_23;
struct _WDF_IO_QUEUE_CONFIG_V1_25;
struct _WDF_IO_QUEUE_CONFIG_V1_5;
struct _WDF_IO_QUEUE_CONFIG_V1_7;
struct _WDF_IO_QUEUE_CONFIG_V1_9;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_11;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_13;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_15;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_17;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_19;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_21;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_23;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_25;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_9;
struct _WDF_IO_TARGET_OPEN_PARAMS;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_0;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_1;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_11;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_13;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_15;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_17;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_19;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_21;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_23;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_25;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_5;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_7;
struct _WDF_IO_TARGET_OPEN_PARAMS_V1_9;
struct _WDF_IO_TYPE_CONFIG;
struct _WDF_IO_TYPE_CONFIG_V1_13;
struct _WDF_IO_TYPE_CONFIG_V1_15;
struct _WDF_IO_TYPE_CONFIG_V1_17;
struct _WDF_IO_TYPE_CONFIG_V1_19;
struct _WDF_IO_TYPE_CONFIG_V1_21;
struct _WDF_IO_TYPE_CONFIG_V1_23;
struct _WDF_IO_TYPE_CONFIG_V1_25;
struct _WDF_LIBRARY_INFO;
struct _WDF_LOADER_INTERFACE;
struct _WDF_LOADER_INTERFACE_CLASS_BIND;
struct _WDF_LOADER_INTERFACE_DIAGNOSTIC;
struct _WDF_MEMORY_DESCRIPTOR;
struct _WDF_MEMORY_DESCRIPTOR_V1_0;
struct _WDF_MEMORY_DESCRIPTOR_V1_1;
struct _WDF_MEMORY_DESCRIPTOR_V1_11;
struct _WDF_MEMORY_DESCRIPTOR_V1_13;
struct _WDF_MEMORY_DESCRIPTOR_V1_15;
struct _WDF_MEMORY_DESCRIPTOR_V1_17;
struct _WDF_MEMORY_DESCRIPTOR_V1_19;
struct _WDF_MEMORY_DESCRIPTOR_V1_21;
struct _WDF_MEMORY_DESCRIPTOR_V1_23;
struct _WDF_MEMORY_DESCRIPTOR_V1_25;
struct _WDF_MEMORY_DESCRIPTOR_V1_5;
struct _WDF_MEMORY_DESCRIPTOR_V1_7;
struct _WDF_MEMORY_DESCRIPTOR_V1_9;
struct _WDF_OBJECT_ATTRIBUTES;
struct _WDF_OBJECT_ATTRIBUTES_V1_0;
struct _WDF_OBJECT_ATTRIBUTES_V1_1;
struct _WDF_OBJECT_ATTRIBUTES_V1_11;
struct _WDF_OBJECT_ATTRIBUTES_V1_13;
struct _WDF_OBJECT_ATTRIBUTES_V1_15;
struct _WDF_OBJECT_ATTRIBUTES_V1_17;
struct _WDF_OBJECT_ATTRIBUTES_V1_19;
struct _WDF_OBJECT_ATTRIBUTES_V1_21;
struct _WDF_OBJECT_ATTRIBUTES_V1_23;
struct _WDF_OBJECT_ATTRIBUTES_V1_25;
struct _WDF_OBJECT_ATTRIBUTES_V1_5;
struct _WDF_OBJECT_ATTRIBUTES_V1_7;
struct _WDF_OBJECT_ATTRIBUTES_V1_9;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_0;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_1;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_11;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_13;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_15;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_17;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_19;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_21;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_23;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_25;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_5;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_7;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_9;
struct _WDF_PDO_EVENT_CALLBACKS;
struct _WDF_PDO_EVENT_CALLBACKS_V1_0;
struct _WDF_PDO_EVENT_CALLBACKS_V1_1;
struct _WDF_PDO_EVENT_CALLBACKS_V1_11;
struct _WDF_PDO_EVENT_CALLBACKS_V1_13;
struct _WDF_PDO_EVENT_CALLBACKS_V1_15;
struct _WDF_PDO_EVENT_CALLBACKS_V1_17;
struct _WDF_PDO_EVENT_CALLBACKS_V1_19;
struct _WDF_PDO_EVENT_CALLBACKS_V1_21;
struct _WDF_PDO_EVENT_CALLBACKS_V1_23;
struct _WDF_PDO_EVENT_CALLBACKS_V1_25;
struct _WDF_PDO_EVENT_CALLBACKS_V1_5;
struct _WDF_PDO_EVENT_CALLBACKS_V1_7;
struct _WDF_PDO_EVENT_CALLBACKS_V1_9;
struct _WDF_PNPPOWER_EVENT_CALLBACKS;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_0;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_1;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_11;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_13;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_15;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_17;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_19;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_21;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_23;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_25;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_5;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_7;
struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_9;
struct _WDF_POWER_FRAMEWORK_SETTINGS;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_11;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_13;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_15;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_17;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_19;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_21;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_23;
struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_25;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_0;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_1;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_11;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_13;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_15;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_17;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_19;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_21;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_23;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_25;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_5;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_7;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_9;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_0;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_1;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_11;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_13;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_15;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_17;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_19;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_21;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_23;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_25;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_5;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_7;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_9;
struct _WDF_QUERY_INTERFACE_CONFIG;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_0;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_1;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_11;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_13;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_15;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_17;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_19;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_21;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_23;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_25;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_5;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_7;
struct _WDF_QUERY_INTERFACE_CONFIG_V1_9;
struct _WDF_QUEUE_FATAL_ERROR_DATA;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_0;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_1;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_11;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_13;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_15;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_17;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_19;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_21;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_23;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_25;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_5;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_7;
struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_9;
struct _WDF_REMOVE_LOCK_OPTIONS;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_11;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_13;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_15;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_17;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_19;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_21;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_23;
struct _WDF_REMOVE_LOCK_OPTIONS_V1_25;
struct _WDF_REQUEST_COMPLETION_PARAMS;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_0;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_1;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_11;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_13;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_15;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_17;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_19;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_21;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_23;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_25;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_5;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_7;
struct _WDF_REQUEST_COMPLETION_PARAMS_V1_9;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_0;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_1;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_11;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_13;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_15;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_17;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_19;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_21;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_23;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_25;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_5;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_7;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_9;
struct _WDF_REQUEST_FORWARD_OPTIONS;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_11;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_13;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_15;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_17;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_19;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_21;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_23;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_25;
struct _WDF_REQUEST_FORWARD_OPTIONS_V1_9;
struct _WDF_REQUEST_PARAMETERS;
struct _WDF_REQUEST_PARAMETERS_V1_0;
struct _WDF_REQUEST_PARAMETERS_V1_1;
struct _WDF_REQUEST_PARAMETERS_V1_11;
struct _WDF_REQUEST_PARAMETERS_V1_13;
struct _WDF_REQUEST_PARAMETERS_V1_15;
struct _WDF_REQUEST_PARAMETERS_V1_17;
struct _WDF_REQUEST_PARAMETERS_V1_19;
struct _WDF_REQUEST_PARAMETERS_V1_21;
struct _WDF_REQUEST_PARAMETERS_V1_23;
struct _WDF_REQUEST_PARAMETERS_V1_25;
struct _WDF_REQUEST_PARAMETERS_V1_5;
struct _WDF_REQUEST_PARAMETERS_V1_7;
struct _WDF_REQUEST_PARAMETERS_V1_9;
struct _WDF_REQUEST_REUSE_PARAMS;
struct _WDF_REQUEST_REUSE_PARAMS_V1_0;
struct _WDF_REQUEST_REUSE_PARAMS_V1_1;
struct _WDF_REQUEST_REUSE_PARAMS_V1_11;
struct _WDF_REQUEST_REUSE_PARAMS_V1_13;
struct _WDF_REQUEST_REUSE_PARAMS_V1_15;
struct _WDF_REQUEST_REUSE_PARAMS_V1_17;
struct _WDF_REQUEST_REUSE_PARAMS_V1_19;
struct _WDF_REQUEST_REUSE_PARAMS_V1_21;
struct _WDF_REQUEST_REUSE_PARAMS_V1_23;
struct _WDF_REQUEST_REUSE_PARAMS_V1_25;
struct _WDF_REQUEST_REUSE_PARAMS_V1_5;
struct _WDF_REQUEST_REUSE_PARAMS_V1_7;
struct _WDF_REQUEST_REUSE_PARAMS_V1_9;
struct _WDF_REQUEST_SEND_OPTIONS;
struct _WDF_REQUEST_SEND_OPTIONS_V1_0;
struct _WDF_REQUEST_SEND_OPTIONS_V1_1;
struct _WDF_REQUEST_SEND_OPTIONS_V1_11;
struct _WDF_REQUEST_SEND_OPTIONS_V1_13;
struct _WDF_REQUEST_SEND_OPTIONS_V1_15;
struct _WDF_REQUEST_SEND_OPTIONS_V1_17;
struct _WDF_REQUEST_SEND_OPTIONS_V1_19;
struct _WDF_REQUEST_SEND_OPTIONS_V1_21;
struct _WDF_REQUEST_SEND_OPTIONS_V1_23;
struct _WDF_REQUEST_SEND_OPTIONS_V1_25;
struct _WDF_REQUEST_SEND_OPTIONS_V1_5;
struct _WDF_REQUEST_SEND_OPTIONS_V1_7;
struct _WDF_REQUEST_SEND_OPTIONS_V1_9;
struct _WDF_TASK_QUEUE_CONFIG_V1_23;
struct _WDF_TASK_QUEUE_CONFIG_V1_25;
struct _WDF_TASK_SEND_OPTIONS;
struct _WDF_TASK_SEND_OPTIONS_V1_23;
struct _WDF_TASK_SEND_OPTIONS_V1_25;
struct _WDF_TIMER_CONFIG;
struct _WDF_TIMER_CONFIG_V1_0;
struct _WDF_TIMER_CONFIG_V1_1;
struct _WDF_TIMER_CONFIG_V1_11;
struct _WDF_TIMER_CONFIG_V1_13;
struct _WDF_TIMER_CONFIG_V1_15;
struct _WDF_TIMER_CONFIG_V1_17;
struct _WDF_TIMER_CONFIG_V1_19;
struct _WDF_TIMER_CONFIG_V1_21;
struct _WDF_TIMER_CONFIG_V1_23;
struct _WDF_TIMER_CONFIG_V1_25;
struct _WDF_TIMER_CONFIG_V1_5;
struct _WDF_TIMER_CONFIG_V1_7;
struct _WDF_TIMER_CONFIG_V1_9;
struct _WDF_TRIAGE_INFO;
struct _WDF_TRIAGE_INFO_V1_11;
struct _WDF_TRIAGE_INFO_V1_13;
struct _WDF_TRIAGE_INFO_V1_15;
struct _WDF_TRIAGE_INFO_V1_17;
struct _WDF_TRIAGE_INFO_V1_19;
struct _WDF_TRIAGE_INFO_V1_21;
struct _WDF_TRIAGE_INFO_V1_23;
struct _WDF_TRIAGE_INFO_V1_25;
struct _WDF_USB_CONTINUOUS_READER_CONFIG;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_0;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_1;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_11;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_13;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_15;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_17;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_19;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_21;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_23;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_25;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_5;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_7;
struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_9;
struct _WDF_USB_DEVICE_CREATE_CONFIG;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_11;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_13;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_15;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_17;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_19;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_21;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_23;
struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_25;
struct _WDF_USB_DEVICE_INFORMATION;
struct _WDF_USB_DEVICE_INFORMATION_V1_0;
struct _WDF_USB_DEVICE_INFORMATION_V1_1;
struct _WDF_USB_DEVICE_INFORMATION_V1_11;
struct _WDF_USB_DEVICE_INFORMATION_V1_13;
struct _WDF_USB_DEVICE_INFORMATION_V1_15;
struct _WDF_USB_DEVICE_INFORMATION_V1_17;
struct _WDF_USB_DEVICE_INFORMATION_V1_19;
struct _WDF_USB_DEVICE_INFORMATION_V1_21;
struct _WDF_USB_DEVICE_INFORMATION_V1_23;
struct _WDF_USB_DEVICE_INFORMATION_V1_25;
struct _WDF_USB_DEVICE_INFORMATION_V1_5;
struct _WDF_USB_DEVICE_INFORMATION_V1_7;
struct _WDF_USB_DEVICE_INFORMATION_V1_9;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_0;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_1;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_11;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_13;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_15;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_17;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_19;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_21;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_23;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_25;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_5;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_7;
struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_9;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_0;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_1;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_11;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_13;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_15;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_17;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_19;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_21;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_23;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_25;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_5;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_7;
struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_9;
struct _WDF_USB_INTERFACE_SETTING_PAIR;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_0;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_1;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_11;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_13;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_15;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_17;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_19;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_21;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_23;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_25;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_5;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_7;
struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_9;
struct _WDF_USB_PIPE_INFORMATION;
struct _WDF_USB_PIPE_INFORMATION_V1_0;
struct _WDF_USB_PIPE_INFORMATION_V1_1;
struct _WDF_USB_PIPE_INFORMATION_V1_11;
struct _WDF_USB_PIPE_INFORMATION_V1_13;
struct _WDF_USB_PIPE_INFORMATION_V1_15;
struct _WDF_USB_PIPE_INFORMATION_V1_17;
struct _WDF_USB_PIPE_INFORMATION_V1_19;
struct _WDF_USB_PIPE_INFORMATION_V1_21;
struct _WDF_USB_PIPE_INFORMATION_V1_23;
struct _WDF_USB_PIPE_INFORMATION_V1_25;
struct _WDF_USB_PIPE_INFORMATION_V1_5;
struct _WDF_USB_PIPE_INFORMATION_V1_7;
struct _WDF_USB_PIPE_INFORMATION_V1_9;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_0;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_1;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_11;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_13;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_15;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_17;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_19;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_21;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_23;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_25;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_5;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_7;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_9;
struct _WDF_VERSION;
struct _WDF_WMI_INSTANCE_CONFIG;
struct _WDF_WMI_INSTANCE_CONFIG_V1_0;
struct _WDF_WMI_INSTANCE_CONFIG_V1_1;
struct _WDF_WMI_INSTANCE_CONFIG_V1_11;
struct _WDF_WMI_INSTANCE_CONFIG_V1_13;
struct _WDF_WMI_INSTANCE_CONFIG_V1_15;
struct _WDF_WMI_INSTANCE_CONFIG_V1_17;
struct _WDF_WMI_INSTANCE_CONFIG_V1_19;
struct _WDF_WMI_INSTANCE_CONFIG_V1_21;
struct _WDF_WMI_INSTANCE_CONFIG_V1_23;
struct _WDF_WMI_INSTANCE_CONFIG_V1_25;
struct _WDF_WMI_INSTANCE_CONFIG_V1_5;
struct _WDF_WMI_INSTANCE_CONFIG_V1_7;
struct _WDF_WMI_INSTANCE_CONFIG_V1_9;
struct _WDF_WMI_PROVIDER_CONFIG;
struct _WDF_WMI_PROVIDER_CONFIG_V1_0;
struct _WDF_WMI_PROVIDER_CONFIG_V1_1;
struct _WDF_WMI_PROVIDER_CONFIG_V1_11;
struct _WDF_WMI_PROVIDER_CONFIG_V1_13;
struct _WDF_WMI_PROVIDER_CONFIG_V1_15;
struct _WDF_WMI_PROVIDER_CONFIG_V1_17;
struct _WDF_WMI_PROVIDER_CONFIG_V1_19;
struct _WDF_WMI_PROVIDER_CONFIG_V1_21;
struct _WDF_WMI_PROVIDER_CONFIG_V1_23;
struct _WDF_WMI_PROVIDER_CONFIG_V1_25;
struct _WDF_WMI_PROVIDER_CONFIG_V1_5;
struct _WDF_WMI_PROVIDER_CONFIG_V1_7;
struct _WDF_WMI_PROVIDER_CONFIG_V1_9;
struct _WDF_WORKITEM_CONFIG;
struct _WDF_WORKITEM_CONFIG_V1_0;
struct _WDF_WORKITEM_CONFIG_V1_1;
struct _WDF_WORKITEM_CONFIG_V1_11;
struct _WDF_WORKITEM_CONFIG_V1_13;
struct _WDF_WORKITEM_CONFIG_V1_15;
struct _WDF_WORKITEM_CONFIG_V1_17;
struct _WDF_WORKITEM_CONFIG_V1_19;
struct _WDF_WORKITEM_CONFIG_V1_21;
struct _WDF_WORKITEM_CONFIG_V1_23;
struct _WDF_WORKITEM_CONFIG_V1_25;
struct _WDF_WORKITEM_CONFIG_V1_5;
struct _WDF_WORKITEM_CONFIG_V1_7;
struct _WDF_WORKITEM_CONFIG_V1_9;
struct _WHEA128A;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
struct _WHEA_ARMV8_AARCH32_GPRS;
struct _WHEA_ARMV8_AARCH64_EL3_CSR;
struct _WHEA_ARMV8_AARCH64_GPRS;
struct _WHEA_ARM_AARCH32_EL1_CSR;
struct _WHEA_ARM_AARCH32_EL2_CSR;
struct _WHEA_ARM_AARCH32_SECURE_CSR;
struct _WHEA_ARM_AARCH64_EL1_CSR;
struct _WHEA_ARM_AARCH64_EL2_CSR;
struct _WHEA_ARM_BUS_ERROR;
struct _WHEA_ARM_CACHE_ERROR;
struct _WHEA_ARM_MISC_CSR;
struct _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER;
struct _WHEA_ARM_PROCESSOR_ERROR_INFORMATION;
struct _WHEA_ARM_PROCESSOR_ERROR_SECTION;
struct _WHEA_ARM_TLB_ERROR;
struct _WHEA_ERROR_PACKET_V1;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
struct _WHEA_EVENT_LOG_ENTRY;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WHEA_FIRMWARE_ERROR_RECORD_REFERENCE;
struct _WHEA_GENERIC_ERROR;
struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V1;
struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V2;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_IPF_MCA_DESCRIPTOR;
struct _WHEA_MEMORY_ERROR_SECTION;
struct _WHEA_NMI_ERROR_SECTION;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
struct _WHEA_PCIEXPRESS_DEVICE_ID;
struct _WHEA_PCIEXPRESS_ERROR_SECTION;
struct _WHEA_PCIXBUS_ERROR_SECTION;
struct _WHEA_PCIXDEVICE_ERROR_SECTION;
struct _WHEA_PCIXDEVICE_ID;
struct _WHEA_PCI_SLOT_NUMBER;
struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION;
struct _WHEA_PSHED_PLUGIN_CALLBACKS;
struct _WHEA_PSHED_PLUGIN_REGISTRATION_PACKET;
struct _WHEA_RECOVERY_CONTEXT;
struct _WHEA_X64_REGISTER_STATE;
struct _WHEA_X86_REGISTER_STATE;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_CONTEXT_INFO;
struct _WHEA_XPF_MCA_SECTION;
struct _WHEA_XPF_MCE_DESCRIPTOR;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WHEA_XPF_PROCESSOR_ERROR_SECTION;
struct _WHEA_XPF_PROCINFO;
struct _WMI_BUFFER_HEADER;
struct _WMI_CONTEXTSWAP;
struct _WMI_DELAY_EXECUTION;
struct _WMI_DISKIO_IO_REDIRECTED_INIT;
struct _WMI_DISKIO_NOTIFY_ROUTINES;
struct _WMI_DISKIO_READWRITE_INIT;
struct _WMI_DPI_RECORD;
struct _WMI_EXTENDED_THREAD_INFORMATION;
struct _WMI_EXTENDED_THREAD_INFORMATION64;
struct _WMI_FILEIO_NOTIFY_ROUTINES;
struct _WMI_FILE_IO;
struct _WMI_FLTIO_NOTIFY_ROUTINES;
struct _WMI_IDE_CHANNEL_RECORD;
struct _WMI_IMAGEID_INFORMATION;
struct _WMI_IMAGEID_INFORMATION32;
struct _WMI_IMAGEID_INFORMATION64;
struct _WMI_IMAGELOAD_INFORMATION;
struct _WMI_IMAGELOAD_INFORMATION32;
struct _WMI_IMAGELOAD_INFORMATION64;
struct _WMI_IRQ_RECORD;
struct _WMI_JOB_ASSIGN_PROCESS;
struct _WMI_JOB_INFORMATION;
struct _WMI_JOB_REMOVE_PROCESS;
struct _WMI_JOB_SEND_NOTIFICATION_INFORMATION;
struct _WMI_JOB_SET_QUERY_CPU_RATE;
struct _WMI_JOB_SET_QUERY_INFORMATION;
struct _WMI_JOB_SET_QUERY_NET_RATE;
struct _WMI_LOGGER_INFORMATION;
struct _WMI_PAGE_FAULT;
struct _WMI_PNP_RECORD_V3;
struct _WMI_PNP_RECORD_V4;
struct _WMI_PNP_RECORD_V5;
struct _WMI_POWER_RECORD;
struct _WMI_PROCESS_INFORMATION;
struct _WMI_PROCESS_INFORMATION64;
struct _WMI_PUSHLOCK;
struct _WMI_QUEUE;
struct _WMI_REGISTRY;
struct _WMI_RESOURCE;
struct _WMI_SPINLOCK;
struct _WMI_SPLITIO_NOTIFY_ROUTINES;
struct _WMI_TCPIP;
struct _WMI_THREAD_INFORMATION;
struct _WMI_TRACE_MESSAGE_PACKET;
struct _WMI_TRACE_PACKET;
struct _WMI_TRACE_ROUTINE_NOTIFICATION;
struct _WMI_TRACE_RUNDOWN_NOTIFICATION;
struct _WMI_TXR;
struct _WMI_UDP;
struct _WMI_WAIT_MULTIPLE;
struct _WMI_WAIT_OBJECT_RECORD;
struct _WMI_WAIT_SINGLE;
struct _WMI_WDF_NOTIFY_ROUTINES;
struct _WNF_STATE_NAME;
struct _WNF_TYPE_ID;
struct _WNODE_HEADER;
struct _WORK_QUEUE_ITEM;
struct _WPP_REGISTRATION_BLOCK;
struct _WPP_TRACE_CONTROL_BLOCK;
struct _WUDFMESSAGE_ADD_DEVICE;
struct _WUDFMESSAGE_CREATE;
struct _WUDFMESSAGE_HEADER;
struct _WUDFMESSAGE_IO_HEADER;
struct _WUDFMESSAGE_IO_REPLY;
struct _WUDFMESSAGE_REMOTE_INTERFACE_ARRIVAL;
struct _WUDFMESSAGE_REPLY_HEADER;
struct _WUDFMESSAGE_TARGET_DEVICE_NOTIFICATION;
struct _WUDFMESSAGE_TRANSPORT_QUERY_ID;
struct _XSAVE_AREA;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_CET_U_FORMAT;
struct _XSAVE_FORMAT;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_CONTEXT;
struct _XSTATE_FEATURE;
struct _XSTATE_SAVE;
struct _ZONE_HEADER;
struct _ZONE_SEGMENT_HEADER;
struct __crt_fast_encoded_nullptr_t;
struct __lc_time_data;
struct __s_GUID;
struct __vc_attributes::aggregatableAttribute;
struct __vc_attributes::appobjectAttribute;
struct __vc_attributes::async_uuidAttribute;
struct __vc_attributes::atl::aggregatesAttribute;
struct __vc_attributes::atl::com_interface_entryAttribute;
struct __vc_attributes::atl::db_accessorAttribute;
struct __vc_attributes::atl::db_columnAttribute;
struct __vc_attributes::atl::db_commandAttribute;
struct __vc_attributes::atl::db_paramAttribute;
struct __vc_attributes::atl::db_sourceAttribute;
struct __vc_attributes::atl::db_tableAttribute;
struct __vc_attributes::atl::implements_categoryAttribute;
struct __vc_attributes::atl::perf_counterAttribute;
struct __vc_attributes::atl::perf_objectAttribute;
struct __vc_attributes::atl::perfmonAttribute;
struct __vc_attributes::atl::rdxAttribute;
struct __vc_attributes::atl::registration_scriptAttribute;
struct __vc_attributes::atl::request_handlerAttribute;
struct __vc_attributes::atl::requires_categoryAttribute;
struct __vc_attributes::atl::soap_handlerAttribute;
struct __vc_attributes::atl::soap_headerAttribute;
struct __vc_attributes::atl::soap_methodAttribute;
struct __vc_attributes::atl::soap_namespaceAttribute;
struct __vc_attributes::atl::support_error_infoAttribute;
struct __vc_attributes::atl::synchronizeAttribute;
struct __vc_attributes::atl::tag_nameAttribute;
struct __vc_attributes::bindableAttribute;
struct __vc_attributes::call_asAttribute;
struct __vc_attributes::caseAttribute;
struct __vc_attributes::coclassAttribute;
struct __vc_attributes::controlAttribute;
struct __vc_attributes::cpp_quoteAttribute;
struct __vc_attributes::customAttribute;
struct __vc_attributes::defaultAttribute;
struct __vc_attributes::defaultbindAttribute;
struct __vc_attributes::defaultcollelemAttribute;
struct __vc_attributes::defaultvalueAttribute;
struct __vc_attributes::defaultvtableAttribute;
struct __vc_attributes::dispinterfaceAttribute;
struct __vc_attributes::displaybindAttribute;
struct __vc_attributes::dualAttribute;
struct __vc_attributes::emitidlAttribute;
struct __vc_attributes::entryAttribute;
struct __vc_attributes::event_receiverAttribute;
struct __vc_attributes::event_sourceAttribute;
struct __vc_attributes::exportAttribute;
struct __vc_attributes::first_isAttribute;
struct __vc_attributes::helpcontextAttribute;
struct __vc_attributes::helper_attributes::as_stringAttribute;
struct __vc_attributes::helper_attributes::attributeAttribute;
struct __vc_attributes::helper_attributes::default_valueAttribute;
struct __vc_attributes::helper_attributes::help_stringAttribute;
struct __vc_attributes::helper_attributes::multi_valueAttribute;
struct __vc_attributes::helper_attributes::notify_atlprovAttribute;
struct __vc_attributes::helper_attributes::process_earlyAttribute;
struct __vc_attributes::helper_attributes::repeatableAttribute;
struct __vc_attributes::helper_attributes::requires_valueAttribute;
struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute;
struct __vc_attributes::helper_attributes::usageAttribute;
struct __vc_attributes::helper_attributes::v1_alttypeAttribute;
struct __vc_attributes::helper_attributes::v1_earlyAttribute;
struct __vc_attributes::helper_attributes::v1_nameAttribute;
struct __vc_attributes::helpfileAttribute;
struct __vc_attributes::helpstringAttribute;
struct __vc_attributes::helpstringcontextAttribute;
struct __vc_attributes::helpstringdllAttribute;
struct __vc_attributes::hiddenAttribute;
struct __vc_attributes::hookAttribute;
struct __vc_attributes::idAttribute;
struct __vc_attributes::idl_moduleAttribute;
struct __vc_attributes::idl_quoteAttribute;
struct __vc_attributes::iid_isAttribute;
struct __vc_attributes::immediatebindAttribute;
struct __vc_attributes::implementsAttribute;
struct __vc_attributes::importAttribute;
struct __vc_attributes::importidlAttribute;
struct __vc_attributes::importlibAttribute;
struct __vc_attributes::inAttribute;
struct __vc_attributes::includeAttribute;
struct __vc_attributes::includelibAttribute;
struct __vc_attributes::last_isAttribute;
struct __vc_attributes::lcidAttribute;
struct __vc_attributes::length_isAttribute;
struct __vc_attributes::library_blockAttribute;
struct __vc_attributes::licensedAttribute;
struct __vc_attributes::localAttribute;
struct __vc_attributes::max_isAttribute;
struct __vc_attributes::moduleAttribute;
struct __vc_attributes::ms_unionAttribute;
struct __vc_attributes::no_injected_textAttribute;
struct __vc_attributes::nonbrowsableAttribute;
struct __vc_attributes::noncreatableAttribute;
struct __vc_attributes::nonextensibleAttribute;
struct __vc_attributes::objectAttribute;
struct __vc_attributes::odlAttribute;
struct __vc_attributes::oleautomationAttribute;
struct __vc_attributes::optionalAttribute;
struct __vc_attributes::outAttribute;
struct __vc_attributes::pointer_defaultAttribute;
struct __vc_attributes::pragmaAttribute;
struct __vc_attributes::progidAttribute;
struct __vc_attributes::propgetAttribute;
struct __vc_attributes::propputAttribute;
struct __vc_attributes::propputrefAttribute;
struct __vc_attributes::providerAttribute;
struct __vc_attributes::ptrAttribute;
struct __vc_attributes::publicAttribute;
struct __vc_attributes::rangeAttribute;
struct __vc_attributes::readonlyAttribute;
struct __vc_attributes::refAttribute;
struct __vc_attributes::requesteditAttribute;
struct __vc_attributes::restrictedAttribute;
struct __vc_attributes::retvalAttribute;
struct __vc_attributes::satypeAttribute;
struct __vc_attributes::size_isAttribute;
struct __vc_attributes::sourceAttribute;
struct __vc_attributes::stringAttribute;
struct __vc_attributes::switch_isAttribute;
struct __vc_attributes::switch_typeAttribute;
struct __vc_attributes::threadingAttribute;
struct __vc_attributes::transmit_asAttribute;
struct __vc_attributes::uidefaultAttribute;
struct __vc_attributes::unhookAttribute;
struct __vc_attributes::uniqueAttribute;
struct __vc_attributes::usesgetlasterrorAttribute;
struct __vc_attributes::uuidAttribute;
struct __vc_attributes::v1_enumAttribute;
struct __vc_attributes::varargAttribute;
struct __vc_attributes::versionAttribute;
struct __vc_attributes::vi_progidAttribute;
struct __vc_attributes::wire_marshalAttribute;
struct _count_string;
struct _iobuf;
struct _ldiv_t;
struct _s__CatchableType;
struct _s__CatchableTypeArray;
struct _s__RTTIBaseClassArray;
struct _s__RTTIBaseClassDescriptor2;
struct _s__RTTIClassHierarchyDescriptor;
struct _s__RTTICompleteObjectLocator2;
struct _s__ThrowInfo;
struct lconv;
struct localeinfo_struct;
struct tagARRAYDESC;
struct tagBLOB;
struct tagBSTRBLOB;
struct tagCABOOL;
struct tagCABSTR;
struct tagCABSTRBLOB;
struct tagCAC;
struct tagCACLIPDATA;
struct tagCACLSID;
struct tagCACY;
struct tagCADATE;
struct tagCADBL;
struct tagCAFILETIME;
struct tagCAFLT;
struct tagCAH;
struct tagCAI;
struct tagCAL;
struct tagCALPSTR;
struct tagCALPWSTR;
struct tagCAPROPVARIANT;
struct tagCASCODE;
struct tagCAUB;
struct tagCAUH;
struct tagCAUI;
struct tagCAUL;
struct tagCLIPDATA;
struct tagDEC;
struct tagDISPPARAMS;
struct tagELEMDESC;
struct tagEXCEPINFO;
struct tagFUNCDESC;
struct tagIDLDESC;
struct tagLC_ID;
struct tagPARAMDESC;
struct tagPARAMDESCEX;
struct tagPROPVARIANT;
struct tagSAFEARRAY;
struct tagSAFEARRAYBOUND;
struct tagSTATSTG;
struct tagTLIBATTR;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct tagVARDESC;
struct tagVARIANT;
struct tagVersionedStream;
struct tagWNODE_ALL_DATA;
struct tagWNODE_EVENT_ITEM;
struct tagWNODE_EVENT_REFERENCE;
struct tagWNODE_METHOD_ITEM;
struct tagWNODE_SINGLE_INSTANCE;
struct tagWNODE_SINGLE_ITEM;
struct tagWNODE_TOO_SMALL;
struct threadlocaleinfostruct;
struct threadmbcinfostruct;

union FxDevicePwrRequirementMachineStateHistory;
union FxPnpMachineStateHistory;
union FxPnpStateAndCaps;
union FxPnpStateInfo;
union FxPowerMachineEventQueue;
union FxPowerMachineStateHistory;
union FxPowerPolicyMachineStateHistory;
union FxPowerStateInfo;
union FxPwrPolStateInfo;
union FxSelfManagedIoMachineEventHistory;
union FxSelfManagedIoMachineStateHistory;
union FxTelemetryDriverInfo;
union FxWakeInterruptMachineStateHistory;
union WPP_PROJECT_CONTROL_BLOCK;
union _AER_BRIDGE_DESCRIPTOR_FLAGS;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
union _ARM64_NT_NEON128;
union _BM_REQUEST_TYPE;
union _FILE_SEGMENT_ELEMENT;
union _KGDTENTRY64;
union _KIDTENTRY64;
union _LARGE_INTEGER;
union _MCG_STATUS;
union _MCI_ADDR;
union _MCI_STATS;
union _MCI_STATUS;
union _OB_POST_OPERATION_PARAMETERS;
union _OB_PRE_OPERATION_PARAMETERS;
union _PCI_EXPRESS_ACS_CAPABILITY_REGISTER;
union _PCI_EXPRESS_ACS_CONTROL;
union _PCI_EXPRESS_AER_CAPABILITIES;
union _PCI_EXPRESS_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK;
union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS;
union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_1;
union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_2;
union _PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER;
union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER;
union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER;
union _PCI_EXPRESS_DEVICE_STATUS_2_REGISTER;
union _PCI_EXPRESS_DEVICE_STATUS_REGISTER;
union _PCI_EXPRESS_ERROR_SOURCE_ID;
union _PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER;
union _PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER;
union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_LINK_CONTROL_REGISTER;
union _PCI_EXPRESS_LINK_STATUS_REGISTER;
union _PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER;
union _PCI_EXPRESS_PASID_CAPABILITY_REGISTER;
union _PCI_EXPRESS_PASID_CONTROL_REGISTER;
union _PCI_EXPRESS_PME_REQUESTOR_ID;
union _PCI_EXPRESS_PRI_CONTROL_REGISTER;
union _PCI_EXPRESS_PRI_STATUS_REGISTER;
union _PCI_EXPRESS_PTM_CAPABILITY_REGISTER;
union _PCI_EXPRESS_PTM_CONTROL_REGISTER;
union _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER;
union _PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER;
union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_ROOT_CONTROL_REGISTER;
union _PCI_EXPRESS_ROOT_ERROR_COMMAND;
union _PCI_EXPRESS_ROOT_ERROR_STATUS;
union _PCI_EXPRESS_ROOT_STATUS_REGISTER;
union _PCI_EXPRESS_SEC_AER_CAPABILITIES;
union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK;
union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY;
union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS;
union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_SLOT_CONTROL_REGISTER;
union _PCI_EXPRESS_SLOT_STATUS_REGISTER;
union _PCI_EXPRESS_SRIOV_CAPS;
union _PCI_EXPRESS_SRIOV_CONTROL;
union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY;
union _PCI_EXPRESS_SRIOV_STATUS;
union _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER;
union _PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER;
union _PCI_EXPRESS_TPH_ST_TABLE_ENTRY;
union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK;
union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY;
union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS;
union _PCI_FPB_CAPABILITIES_REGISTER;
union _PCI_FPB_MEM_HIGH_VECTOR_CONTROL1_REGISTER;
union _PCI_FPB_MEM_LOW_VECTOR_CONTROL_REGISTER;
union _PCI_FPB_RID_VECTOR_CONTROL1_REGISTER;
union _PCI_FPB_RID_VECTOR_CONTROL2_REGISTER;
union _PCI_FPB_VECTOR_ACCESS_CONTROL_REGISTER;
union _PCW_CALLBACK_INFORMATION;
union _POWER_STATE;
union _RATE_QUOTA_LIMIT;
union _RTL_RUN_ONCE;
union _SLIST_HEADER;
union _ULARGE_INTEGER;
union _UNWIND_CODE;
union _USB_20_PORT_CHANGE;
union _USB_20_PORT_STATUS;
union _USB_30_PORT_CHANGE;
union _USB_30_PORT_STATUS;
union _USB_DEFAULT_PIPE_SETUP_PACKET::_wIndex;
union _USB_DEFAULT_PIPE_SETUP_PACKET::_wValue;
union _USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED;
union _USB_DEVICE_STATUS;
union _USB_ENDPOINT_STATUS;
union _USB_FUNCTION_SUSPEND_OPTIONS;
union _USB_HIGH_SPEED_MAXPACKET;
union _USB_HUB_30_PORT_REMOTE_WAKE_MASK;
union _USB_HUB_CHANGE;
union _USB_HUB_STATUS;
union _USB_HUB_STATUS_AND_CHANGE;
union _USB_INTERFACE_STATUS;
union _USB_PORT_CHANGE;
union _USB_PORT_EXT_STATUS;
union _USB_PORT_EXT_STATUS_AND_CHANGE;
union _USB_PORT_STATUS;
union _USB_PORT_STATUS_AND_CHANGE;
union _VIRTUAL_CHANNEL_CAPABILITIES1;
union _VIRTUAL_CHANNEL_CAPABILITIES2;
union _VIRTUAL_CHANNEL_CONTROL;
union _VIRTUAL_CHANNEL_STATUS;
union _VIRTUAL_RESOURCE_CAPABILITY;
union _VIRTUAL_RESOURCE_CONTROL;
union _VIRTUAL_RESOURCE_STATUS;
union _WDF_USB_CONTROL_SETUP_PACKET;
union _WHEA_ARM_BUS_ERROR_VALID_BITS;
union _WHEA_ARM_CACHE_ERROR_VALID_BITS;
union _WHEA_ARM_PROCESSOR_ERROR;
union _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER_FLAGS;
union _WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS;
union _WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS;
union _WHEA_ARM_TLB_ERROR_VALID_BITS;
union _WHEA_ERROR_INJECTION_CAPABILITIES;
union _WHEA_ERROR_PACKET_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_ERROR_STATUS;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
union _WHEA_GENERIC_ERROR_BLOCKSTATUS;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
union _WHEA_NMI_ERROR_SECTION_FLAGS;
union _WHEA_NOTIFICATION_FLAGS;
union _WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS;
union _WHEA_PCIEXPRESS_COMMAND_STATUS;
union _WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS;
union _WHEA_PCIEXPRESS_VERSION;
union _WHEA_PCIXBUS_COMMAND;
union _WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS;
union _WHEA_PCIXBUS_ID;
union _WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_PROCESSOR_FAMILY_INFO;
union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
union _WHEA_XPF_BUS_CHECK;
union _WHEA_XPF_CACHE_CHECK;
union _WHEA_XPF_MS_CHECK;
union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS;
union _WHEA_XPF_PROCINFO_VALIDBITS;
union _WHEA_XPF_TLB_CHECK;
union _XPF_MCE_FLAGS;
union _XPF_MC_BANK_FLAGS;
union _wIndex;
union _wValue;
union tagBINDPTR;
union tagCY;

enum AUX_SYSTEM_INFORMATION_CLASS;
enum AddInstanceAction;
enum BUS_QUERY_ID_TYPE;
enum CHARTYPE;
enum COMPARTMENT_ID;
enum CancelIrpCompletionOwnership;
enum DEVICE_REGISTRY_PROPERTY;
enum DEVICE_TEXT_TYPE;
enum DISPLAYCONFIG_SCANLINE_ORDERING;
enum DMA_COMPLETION_STATUS;
enum DynamicDispatchType;
enum ETW_COMPRESSION_RESUMPTION_MODE;
enum FXOBJECT_FLAGS;
enum FX_OBJECT_TYPES;
enum FX_OBJECT_TYPES_BASE;
enum FX_VALIDATE_FUNCTIONS_FLAGS;
enum FxChildListDescriptionState;
enum FxChildListIteratorIndexValues;
enum FxChildListModificationState;
enum FxChildListReportedMissingCallbackState;
enum FxChildListScanTagStates;
enum FxChildListState;
enum FxChildListValues;
enum FxCxCallbackCleanupAction;
enum FxCxCallbackProgress;
enum FxCxCallbackSubType;
enum FxCxCallbackType;
enum FxCxInvokeCallbackSubType;
enum FxDeviceCallbackFlags;
enum FxDeviceInfoFlags;
enum FxDeviceInitType;
enum FxDevicePwrRequirementEvents;
enum FxDevicePwrRequirementStates;
enum FxDeviceRemLockAction;
enum FxDmaCompletionType;
enum FxDmaEnablerCallbacks;
enum FxDmaPacketTransactionStatus;
enum FxDmaTransactionState;
enum FxDriverObjectUmFlags;
enum FxDuplexDmaDescriptionType;
enum FxEnhancedVerifierBitFlags;
enum FxEventQueueFlags;
enum FxHandleFlags;
enum FxIFRValues;
enum FxIoIteratorList;
enum FxIoQueueNodeType;
enum FxIoQueuePowerState;
enum FxIoStopProcessingForPowerAction;
enum FxIoTargetRemoteCloseReason;
enum FxIoTargetRemoteOpenState;
enum FxIrpDynamicDispatchInfo::DynamicDispatchType;
enum FxListEntryNames;
enum FxListTransactionAction;
enum FxMachineSleepStates;
enum FxObjectDebugExtensionValues;
enum FxObjectDebugInfoFlags;
enum FxObjectDroppedEvent;
enum FxObjectLockState;
enum FxObjectState;
enum FxObjectType;
enum FxPnpEvent;
enum FxPnpStateAndCapValues;
enum FxPowerCapValues;
enum FxPowerDownType;
enum FxPowerEvent;
enum FxPowerIdleEvents;
enum FxPowerIdleFlags;
enum FxPowerIdleStates;
enum FxPowerPolicyConstants;
enum FxPowerPolicyEvent;
enum FxPowerPolicySxWakeSettingsFlags;
enum FxPowerReferenceFlags;
enum FxPropertyType;
enum FxRelatedDeviceState;
enum FxRequestAllocationSource;
enum FxRequestBaseFlags;
enum FxRequestBaseStaticFlags;
enum FxRequestBufferType;
enum FxRequestCompletionState;
enum FxRequestConstructorCaller;
enum FxRequestContextTypes;
enum FxRequestIrpOwnership;
enum FxRequestPowerStopState;
enum FxRequestTargetFlags;
enum FxRequestVerifierFlags;
enum FxResourceAccessFlags;
enum FxSelfManagedIoEvents;
enum FxSelfManagedIoStates;
enum FxTagRefType;
enum FxTagTrackerType;
enum FxTrackPowerOption;
enum FxUsbPipeMaxTransferSize;
enum FxUsbValidateDescriptorOp;
enum FxValidateMemoryDescriptorFlags;
enum FxVerifierDownlevelOption;
enum FxWakeInterruptEvents;
enum FxWakeInterruptStates;
enum FxWmiInstanceAction;
enum FxWmiIrpHandler::WmiRegisteredState;
enum FxWmiProvider::AddInstanceAction;
enum HAL_APIC_DESTINATION_MODE;
enum IFxMemoryFlags;
enum IdleTimeoutManagement::IdleTimeoutStatusFlag;
enum IdleTimeoutManagement::IdleTimeoutStatusUpdateResult;
enum IdleTimeoutStatusFlag;
enum IdleTimeoutStatusUpdateResult;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum KD_CALLBACK_ACTION;
enum KD_NAMESPACE_ENUM;
enum KE_PROCESSOR_CHANGE_NOTIFY_STATE;
enum LATENCY_TIME;
enum MCA_EXCEPTION_TYPE;
enum MEM_EXTENDED_PARAMETER_TYPE;
enum MEM_SECTION_EXTENDED_PARAMETER_TYPE;
enum NotifyResourcesFlags;
enum OS_SID_VER;
enum PCI_BUS_WIDTH;
enum PCI_EXPRESS_ASPM_CONTROL;
enum PCI_EXPRESS_ASPM_SUPPORT;
enum PCI_EXPRESS_CARD_PRESENCE;
enum PCI_EXPRESS_DEVICE_TYPE;
enum PCI_EXPRESS_INDICATOR_STATE;
enum PCI_EXPRESS_L0s_EXIT_LATENCY;
enum PCI_EXPRESS_L1_EXIT_LATENCY;
enum PCI_EXPRESS_MAX_PAYLOAD_SIZE;
enum PCI_EXPRESS_MRL_STATE;
enum PCI_EXPRESS_POWER_STATE;
enum PIDESCRIPTOR_STATE;
enum PIDMSI_STATUS_VALUE;
enum POWER_ACTION;
enum POWER_INFORMATION_LEVEL;
enum POWER_MONITOR_REQUEST_REASON;
enum POWER_USER_PRESENCE_TYPE;
enum PS_CREATE_STATE;
enum RdType;
enum RdTypeBases;
enum ReplacesCorHdrNumericDefines;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum STATE;
enum SYSTEM_POWER_CONDITION;
enum SendDeviceRequestAction;
enum SubmitActionFlags;
enum TlgIn_t;
enum TlgOut_t;
enum VARENUM;
enum WDF_MODULE_INFO_CHANGE_TYPE;
enum WDF_REGISTRY_READ_RESULT;
enum WELL_KNOWN_SID_TYPE;
enum WMIDPREQUESTCODE;
enum WPP_CTL_NAMES;
enum WPP_DEFINE_BIT_NAMES;
enum WaitSignalFlags;
enum WdfComponentType;
enum WdfDeviceStartStateType;
enum WdfDriverStopType;
enum WdfErrorClass;
enum WmiRegisteredState;
enum WudfBreakPointType;
enum WudfDebuggerType;
enum WudfOperationType;
enum WudfProblem;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _ARBITER_ACTION;
enum _ARBITER_REQUEST_SOURCE;
enum _ARBITER_RESULT;
enum _BDCB_CALLBACK_TYPE;
enum _BDCB_CLASSIFICATION;
enum _BDCB_STATUS_UPDATE_TYPE;
enum _BOUND_CALLBACK_STATUS;
enum _BUS_DATA_TYPE;
enum _CLFS_CONTEXT_MODE;
enum _CLFS_IOSTATS_CLASS;
enum _CLFS_LOG_ARCHIVE_MODE;
enum _CLFS_MGMT_NOTIFICATION_TYPE;
enum _CLFS_MGMT_POLICY_TYPE;
enum _CLS_CONTEXT_MODE;
enum _CLS_IOSTATS_CLASS;
enum _CLS_LOG_INFORMATION_CLASS;
enum _CM_ERROR_CONTROL_TYPE;
enum _CM_SERVICE_LOAD_TYPE;
enum _CM_SERVICE_NODE_TYPE;
enum _CM_SHARE_DISPOSITION;
enum _CONFIGURATION_TYPE;
enum _CPU_SET_INFORMATION_TYPE;
enum _CREATE_FILE_TYPE;
enum _D3COLD_LAST_TRANSITION_STATUS;
enum _DEVICE_DIRECTORY_TYPE;
enum _DEVICE_INSTALL_STATE;
enum _DEVICE_POWER_STATE;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_REMOVAL_POLICY;
enum _DEVICE_RESET_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
enum _DEVPROPSTORE;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum _DMA_SPEED;
enum _DMA_WIDTH;
enum _DOMAIN_CONFIGURATION_ARCH;
enum _DPFLTR_TYPE;
enum _DRIVER_DIRECTORY_TYPE;
enum _DRIVER_REGKEY_TYPE;
enum _DRIVER_RUNTIME_INIT_FLAGS;
enum _ENDPOINT_OFFLOAD_NOTIFICATION_EVENT_TYPE;
enum _ENDPOINT_OFFLOAD_RESPONSE_EVENT_TYPE;
enum _ENLISTMENT_INFORMATION_CLASS;
enum _ERROR_SEVERITY_VALUE;
enum _ETW_BUFFER_STATE;
enum _ETW_RT_EVENT_LOSS;
enum _EVENT_INFO_CLASS;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
enum _EXTENDED_AGP_REGISTER;
enum _EX_POOL_PRIORITY;
enum _FAULT_INFORMATION_ARCH;
enum _FAULT_INFORMATION_ARM64_TYPE;
enum _FILE_INFORMATION_CLASS;
enum _FIRMWARE_TYPE;
enum _FSINFOCLASS;
enum _FX_IO_QUEUE_SET_STATE;
enum _FX_IO_QUEUE_STATE;
enum _FX_TELEMETRY_DO_ONCE_BITS;
enum _FX_URB_TYPE;
enum _HAL_DISPLAY_BIOS_INFORMATION;
enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE;
enum _HAL_QUERY_INFORMATION_CLASS;
enum _HAL_SET_INFORMATION_CLASS;
enum _HARDWARE_COUNTER_TYPE;
enum _IMAGE_POLICY_ENTRY_TYPE;
enum _IMAGE_POLICY_ID;
enum _INTERFACE_TYPE;
enum _INTERLOCKED_RESULT;
enum _IO_ACCESS_MODE;
enum _IO_ACCESS_TYPE;
enum _IO_ALLOCATION_ACTION;
enum _IO_COMPLETION_ROUTINE_RESULT;
enum _IO_CONTAINER_INFORMATION_CLASS;
enum _IO_CONTAINER_NOTIFICATION_CLASS;
enum _IO_NOTIFICATION_EVENT_CATEGORY;
enum _IO_PAGING_PRIORITY;
enum _IO_PRIORITY_HINT;
enum _IO_QUERY_DEVICE_DATA_FORMAT;
enum _IO_RATE_CONTROL_TYPE;
enum _IO_SESSION_EVENT;
enum _IO_SESSION_STATE;
enum _IRQ_DEVICE_POLICY;
enum _IRQ_DEVICE_POLICY_USHORT;
enum _IRQ_GROUP_POLICY;
enum _IRQ_PRIORITY;
enum _JOBOBJECTINFOCLASS;
enum _KBUGCHECK_BUFFER_DUMP_STATE;
enum _KBUGCHECK_CALLBACK_REASON;
enum _KBUGCHECK_DUMP_IO_TYPE;
enum _KDPC_IMPORTANCE;
enum _KD_OPTION;
enum _KEY_INFORMATION_CLASS;
enum _KEY_SET_INFORMATION_CLASS;
enum _KEY_VALUE_INFORMATION_CLASS;
enum _KHETERO_CPU_POLICY;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
enum _KPROFILE_SOURCE;
enum _KTMOBJECT_TYPE;
enum _KWAIT_REASON;
enum _LOCK_OPERATION;
enum _LOGICAL_PROCESSOR_RELATIONSHIP;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _MM_MDL_PAGE_CONTENTS_STATE;
enum _MM_PAGE_PRIORITY;
enum _MM_ROTATE_DIRECTION;
enum _MM_SYSTEM_SIZE;
enum _MODE;
enum _MONITOR_DISPLAY_STATE;
enum _NT_PRODUCT_TYPE;
enum _OB_OPEN_REASON;
enum _OB_PREOP_CALLBACK_STATUS;
enum _OS_DEPLOYEMENT_STATE_VALUES;
enum _PCI_ACS_BIT;
enum _PCI_HARDWARE_INTERFACE;
enum _PCW_CALLBACK_TYPE;
enum _PERFINFO_CCSWAP_TYPE;
enum _PERFINFO_DEBUG_EVENT_REASON;
enum _PERFINFO_DYNAMIC_TICK_DISABLE_REASON;
enum _PERFINFO_DYNAMIC_TICK_VETO_REASON;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _PERFINFO_MEM_RESET_INFO_TYPE;
enum _PERFINFO_MM_STAT;
enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE;
enum _POOL_TYPE;
enum _POWER_MONITOR_REQUEST_TYPE;
enum _POWER_PLATFORM_ROLE;
enum _POWER_REQUEST_TYPE;
enum _POWER_STATE_TYPE;
enum _PO_FX_PERF_STATE_TYPE;
enum _PO_FX_PERF_STATE_UNIT;
enum _PO_THERMAL_REQUEST_TYPE;
enum _PROCESSINFOCLASS;
enum _PROCESSOR_CACHE_TYPE;
enum _PROCESS_MITIGATION_POLICY;
enum _PSCREATEPROCESSNOTIFYTYPE;
enum _PSCREATETHREADNOTIFYTYPE;
enum _PS_ATTRIBUTE_NUM;
enum _PS_MITIGATION_OPTION;
enum _PS_PROTECTED_SIGNER;
enum _PS_PROTECTED_TYPE;
enum _PS_STD_HANDLE_STATE;
enum _PS_WAKE_REASON;
enum _REG_NOTIFY_CLASS;
enum _RESOURCEMANAGER_INFORMATION_CLASS;
enum _RESOURCE_TRANSLATION_DIRECTION;
enum _RTL_GENERIC_COMPARE_RESULTS;
enum _RTL_RESOURCE_POLICY_FLAGS;
enum _SECTION_INHERIT;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
enum _SE_ADT_PARAMETER_TYPE;
enum _SE_IMAGE_SIGNATURE_TYPE;
enum _SE_IMAGE_TYPE;
enum _SE_IMAGE_VERIFICATION_CALLBACK_TYPE;
enum _SIG;
enum _SOC_SUBSYSTEM_TYPE;
enum _STATE_LOCATION_TYPE;
enum _SUBSYSTEM_INFORMATION_TYPE;
enum _SUITE_TYPE;
enum _SYSTEM_FIRMWARE_TABLE_ACTION;
enum _SYSTEM_POWER_STATE;
enum _SYSTEM_PROCESS_CLASSIFICATION;
enum _SleepstudyHelper_Namespace;
enum _TABLE_SEARCH_RESULT;
enum _THREADINFOCLASS;
enum _TIMER_SET_INFORMATION_CLASS;
enum _TIMER_TYPE;
enum _TP_CALLBACK_PRIORITY;
enum _TRACE_INFORMATION_CLASS;
enum _TRANSACTIONMANAGER_INFORMATION_CLASS;
enum _TRANSACTION_INFORMATION_CLASS;
enum _TRANSACTION_OUTCOME;
enum _TRANSACTION_STATE;
enum _TlgBlob_t;
enum _TlgFlags_t;
enum _TlgOptions_t;
enum _URLZONEREG;
enum _USBD_ENDPOINT_OFFLOAD_MODE;
enum _USBD_PIPE_TYPE;
enum _USB_CONTROLLER_FLAVOR;
enum _USB_DEVICE_SPEED;
enum _USB_DEVICE_TYPE;
enum _USER_ACTIVITY_PRESENCE;
enum _WAIT_TYPE;
enum _WDFFUNCENUM;
enum _WDFFUNCENUM_V1_0;
enum _WDFFUNCENUM_V1_1;
enum _WDFFUNCENUM_V1_11;
enum _WDFFUNCENUM_V1_13;
enum _WDFFUNCENUM_V1_15;
enum _WDFFUNCENUM_V1_17;
enum _WDFFUNCENUM_V1_19;
enum _WDFFUNCENUM_V1_21;
enum _WDFFUNCENUM_V1_23;
enum _WDFFUNCENUM_V1_25;
enum _WDFFUNCENUM_V1_5;
enum _WDFFUNCENUM_V1_7;
enum _WDFFUNCENUM_V1_9;
enum _WDFSTRUCTENUM;
enum _WDF_BUGCHECK_CODES;
enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS;
enum _WDF_DEVICE_FAILED_ACTION;
enum _WDF_DEVICE_IO_TYPE;
enum _WDF_DEVICE_PNP_STATE;
enum _WDF_DEVICE_POWER_POLICY_STATE;
enum _WDF_DEVICE_POWER_STATE;
enum _WDF_DEVICE_SHUTDOWN_FLAGS;
enum _WDF_DEVICE_STATE_FLAGS;
enum _WDF_DISPATCH_IRP_TO_IO_QUEUE_FLAGS;
enum _WDF_DMA_DIRECTION;
enum _WDF_DMA_ENABLER_CONFIG_FLAGS;
enum _WDF_DMA_PROFILE;
enum _WDF_DRIVER_INIT_FLAGS;
enum _WDF_EXECUTION_LEVEL;
enum _WDF_FILEOBJECT_CLASS;
enum _WDF_HOST_EXIT_CODE;
enum _WDF_INTERRUPT_POLARITY;
enum _WDF_INTERRUPT_POLICY;
enum _WDF_INTERRUPT_PRIORITY;
enum _WDF_IO_FORWARD_PROGRESS_ACTION;
enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY;
enum _WDF_IO_QUEUE_DISPATCH_TYPE;
enum _WDF_IO_QUEUE_STATE;
enum _WDF_IO_TARGET_OPEN_TYPE;
enum _WDF_IO_TARGET_PURGE_IO_ACTION;
enum _WDF_IO_TARGET_SENT_IO_ACTION;
enum _WDF_IO_TARGET_STATE;
enum _WDF_MEMORY_DESCRIPTOR_TYPE;
enum _WDF_POWER_DEVICE_STATE;
enum _WDF_POWER_POLICY_IDLE_TIMEOUT_CONSTANTS;
enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE;
enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES;
enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL;
enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL;
enum _WDF_PROPERTY_STORE_RETRIEVE_FLAGS;
enum _WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE;
enum _WDF_REMOVE_LOCK_OPTIONS_FLAGS;
enum _WDF_REQUEST_FATAL_ERROR_CODES;
enum _WDF_REQUEST_FORWARD_OPTIONS_FLAGS;
enum _WDF_REQUEST_REUSE_FLAGS;
enum _WDF_REQUEST_SEND_OPTIONS_FLAGS;
enum _WDF_REQUEST_STOP_ACTION_FLAGS;
enum _WDF_REQUEST_TYPE;
enum _WDF_RETRIEVE_CHILD_FLAGS;
enum _WDF_SPECIAL_FILE_TYPE;
enum _WDF_STATE_NOTIFICATION_TYPE;
enum _WDF_SYNCHRONIZATION_SCOPE;
enum _WDF_TASK_SEND_OPTIONS_FLAGS;
enum _WDF_TRI_STATE;
enum _WDF_USB_BMREQUEST_DIRECTION;
enum _WDF_USB_BMREQUEST_RECIPIENT;
enum _WDF_USB_BMREQUEST_TYPE;
enum _WDF_USB_DEVICE_TRAITS;
enum _WDF_USB_PIPE_TYPE;
enum _WDF_USB_REQUEST_TYPE;
enum _WDF_WMI_PROVIDER_CONTROL;
enum _WDF_WMI_PROVIDER_FLAGS;
enum _WHEA_CPU_VENDOR;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _WHEA_ERROR_SEVERITY;
enum _WHEA_ERROR_SOURCE_STATE;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _WHEA_PCIEXPRESS_DEVICE_TYPE;
enum _WHEA_RAW_DATA_FORMAT;
enum _WORK_QUEUE_TYPE;
enum _WPP_FLAG_LEN_ENUM;
enum _WUDFMESSAGE;
enum _WUDF_CONTROL_OBJ_REF_STRING;
enum _WUDF_IRP_BUFFER_INDEX;
enum _WdfUsbTargetDeviceSelectConfigType;
enum _WdfUsbTargetDeviceSelectSettingType;
enum __MIDL_ICodeInstall_0001;
enum __MIDL_IGetBindHandle_0001;
enum __MIDL_IUri_0001;
enum __MIDL_IUri_0002;
enum __vc_attributes::aggregatableAttribute::type_e;
enum __vc_attributes::event_receiverAttribute::type_e;
enum __vc_attributes::event_sourceAttribute::optimize_e;
enum __vc_attributes::event_sourceAttribute::type_e;
enum __vc_attributes::helper_attributes::usageAttribute::usage_e;
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;
enum __vc_attributes::moduleAttribute::type_e;
enum __vc_attributes::pointer_defaultAttribute::type_e;
enum __vc_attributes::threadingAttribute::threading_e;
enum _tagINTERNETFEATURELIST;
enum _tagPARSEACTION;
enum _tagPSUACTION;
enum _tagQUERYOPTION;
enum optimize_e;
enum tagApplicationType;
enum tagBINDSTATUS;
enum tagBINDSTRING;
enum tagCALLCONV;
enum tagCHANGEKIND;
enum tagCLSCTX;
enum tagCOINITBASE;
enum tagDESCKIND;
enum tagDOMNodeType;
enum tagFUNCKIND;
enum tagGLOBALOPT_EH_VALUES;
enum tagINVOKEKIND;
enum tagSYSKIND;
enum tagShutdownType;
enum tagTYPEKIND;
enum tagTYSPEC;
enum tagURLZONE;
enum tagVARKIND;
enum tagXMLEMEM_TYPE;
enum threading_e;
enum type_e;
enum usage_e;

typedef struct ACPI_INTERFACE_STANDARD2 {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GpeConnectVector;
    PLONG GpeDisconnectVector;
    PLONG GpeEnableEvent;
    PLONG GpeDisableEvent;
    PLONG GpeClearStatus;
    PLONG RegisterForDeviceNotifications;
    PVOID UnregisterForDeviceNotifications;
};

typedef struct BATTERY_REPORTING_SCALE {
    ULONG Granularity;
    ULONG Capacity;
};

typedef struct CM_Power_Data_s {
    ULONG PD_Size;
    enum _DEVICE_POWER_STATE PD_MostRecentPowerState;
    ULONG PD_Capabilities;
    ULONG PD_D1Latency;
    ULONG PD_D2Latency;
    ULONG PD_D3Latency;
    enum _DEVICE_POWER_STATE PD_PowerStateMapping[7];
    enum _SYSTEM_POWER_STATE PD_DeepestSystemWake;
};

typedef struct CORRELATION_VECTOR {
    CHAR Version;
    CHAR Vector[129];
};

typedef struct ControlInit {
    VOID ControlInit;
    PVOID ShutdownNotification;
    UCHAR Flags;
};

typedef struct CxFileObjectInit {
    enum _WDF_FILEOBJECT_CLASS Class;
    struct _WDF_OBJECT_ATTRIBUTES Attributes;
    struct _WDFCX_FILEOBJECT_CONFIG Callbacks;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    UCHAR Set;
};

typedef struct CxPnpPowerCallbacksInit {
    struct _WDFCX_PNPPOWER_EVENT_CALLBACKS Callbacks;
    UCHAR Set;
};

typedef struct DEBUG_DEVICE_ADDRESS {
    UCHAR Type;
    UCHAR Valid;
    UCHAR Reserved[2];
    UCHAR BitWidth;
    UCHAR AccessSize;
    PUCHAR TranslatedAddress;
    ULONG Length;
};

typedef struct DEBUG_MEMORY_REQUIREMENTS {
    union _LARGE_INTEGER Start;
    union _LARGE_INTEGER MaxEnd;
    PVOID VirtualAddress;
    ULONG Length;
    UCHAR Cached;
    UCHAR Aligned;
};

typedef struct EVENT_INSTANCE_INFO {
    PVOID RegHandle;
    ULONG InstanceId;
};

typedef struct FX_DRIVER_TRACKER_ENTRY {
    struct _FX_DRIVER_GLOBALS *FxDriverGlobals;
    VOID _FX_DRIVER_TRACKER_ENTRY;
    VOID _FX_DRIVER_TRACKER_ENTRY;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *operator=;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *operator=;
};

typedef struct FX_POOL {
    MxLockNoDynam NonPagedLock;
    struct _LIST_ENTRY NonPagedHead;
    MxPagedLockNoDynam PagedLock;
    struct _LIST_ENTRY PagedHead;
    ULONG64 NonPagedBytes;
    ULONG64 PagedBytes;
    ULONG NonPagedAllocations;
    ULONG PagedAllocations;
    ULONG64 PeakNonPagedBytes;
    ULONG64 PeakPagedBytes;
    ULONG PeakNonPagedAllocations;
    ULONG PeakPagedAllocations;
    VOID FX_POOL;
    VOID FX_POOL;
    struct FX_POOL *operator=;
    struct FX_POOL *operator=;
};

typedef struct FX_POOL_HEADER {
    PVOID Base;
    struct _FX_DRIVER_GLOBALS *FxDriverGlobals;
    ULONG AllocationStart[1];
};

typedef struct FX_POOL_TRACKER {
    struct _LIST_ENTRY Link;
    struct FX_POOL *Pool;
    ULONG Tag;
    ULONG64 Size;
    enum _POOL_TYPE PoolType;
    PVOID CallersAddress;
};

typedef struct FX_SPIN_LOCK_HISTORY {
    struct _KTHREAD *OwningThread;
    struct FX_SPIN_LOCK_HISTORY_ENTRY *CurrentHistory;
    struct FX_SPIN_LOCK_HISTORY_ENTRY History[10];
};

typedef struct FX_SPIN_LOCK_HISTORY_ENTRY {
    PVOID CallersAddress;
    union _LARGE_INTEGER AcquiredAtTime;
    LONG64 LockedDuraction;
};

typedef struct FdoInit {
    struct _WDF_FDO_EVENT_CALLBACKS EventCallbacks;
    struct _WDF_CHILD_LIST_CONFIG ListConfig;
    struct _WDF_OBJECT_ATTRIBUTES ListConfigAttributes;
    UCHAR Filter;
    struct _DEVICE_OBJECT *PhysicalDevice;
};

typedef struct FileObjectInit {
    enum _WDF_FILEOBJECT_CLASS Class;
    struct _WDF_OBJECT_ATTRIBUTES Attributes;
    struct _WDF_FILEOBJECT_CONFIG Callbacks;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    UCHAR Set;
};

typedef struct FxAllocatedMdls {
    struct FxMdlDebugInfo Info[16];
    ULONG Count;
    struct FxAllocatedMdls *Next;
};

typedef struct FxAutoIrp {
    FxIrp FxIrp;
    VOID FxAutoIrp;
    VOID ~FxAutoIrp;
    VOID __dflt_ctor_closure;
    PVOID __vecDelDtor;
};

typedef struct FxAutoRegKey {
    VOID FxAutoRegKey;
    VOID ~FxAutoRegKey;
    PVOID m_Key;
    PVOID __vecDelDtor;
};

typedef struct FxAutoString {
    VOID FxAutoString;
    VOID ~FxAutoString;
    struct _UNICODE_STRING m_UnicodeString;
    PVOID __vecDelDtor;
};

typedef struct FxCREvent {
    VOID FxCREvent;
    VOID FxCREvent;
    VOID FxCREvent;
    VOID FxCREvent;
    LONG Initialize;
    LONG Initialize;
    LONG EnterCRAndWait;
    LONG EnterCRAndWait;
    LONG EnterCRAndWaitAndLeave;
    LONG EnterCRAndWaitAndLeave;
    VOID LeaveCR;
    VOID Set;
    VOID Clear;
    LONG ReadState;
    PVOID GetEvent;
    struct FxCREvent *GetSelfPointer;
    struct FxCREvent *operator&;
    MxEvent m_Event;
    VOID ~FxCREvent;
    struct FxCREvent *operator=;
    struct FxCREvent *operator=;
    VOID __dflt_ctor_closure;
    PVOID __vecDelDtor;
};

typedef struct FxChildListCreateDeviceCallback {
    FxCallback FxCallback;
    VOID FxChildListCreateDeviceCallback;
    LONG Invoke;
    PLONG m_Method;
};

typedef struct FxChildListScanForChildrenCallback {
    FxCallback FxCallback;
    VOID FxChildListScanForChildrenCallback;
    VOID Invoke;
    PVOID m_Method;
};

typedef struct FxCollectionInternal {
    ULONG m_Count;
    struct _LIST_ENTRY m_ListHead;
    VOID FxCollectionInternal;
    VOID ~FxCollectionInternal;
    FxCollectionEntry *FindEntry;
    FxCollectionEntry *FindEntryByObject;
    ULONG Count;
    UCHAR Add;
    FxObject *GetItem;
    FxObject *GetFirstItem;
    FxObject *GetLastItem;
    LONG Remove;
    VOID CleanupEntry;
    VOID CleanupEntryObject;
    LONG RemoveEntry;
    LONG RemoveItem;
    FxCollectionEntry *Start;
    FxCollectionEntry *End;
    VOID Clear;
    FxCollectionEntry *AllocateEntry;
    VOID AddEntry;
    PVOID __vecDelDtor;
};

typedef struct FxContextHeader {
    FxObject *Object;
    struct FxContextHeader *NextHeader;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *ContextTypeInfo;
    ULONG64 Context[1];
};

typedef struct FxCxDeviceInfo {
    struct FxStump FxStump;
    VOID FxCxDeviceInfo;
    VOID ~FxCxDeviceInfo;
    struct _LIST_ENTRY ListEntry;
    FxDriver *Driver;
    FxIoInCallerContext IoInCallerContextCallback;
    struct _WDF_OBJECT_ATTRIBUTES RequestAttributes;
    CHAR Index;
    FxCxPnpPowerCallbackContext *CxPnpPowerCallbackContexts[10];
    PVOID __vecDelDtor;
};

typedef struct FxDeviceDescriptionEntry {
    struct FxStump FxStump;
    VOID FxDeviceDescriptionEntry;
    VOID ~FxDeviceDescriptionEntry;
    PVOID operator new;
    FxChildList *GetParentList;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *GetId;
    UCHAR IsDeviceReportedMissing;
    UCHAR IsDeviceRemoved;
    VOID ProcessDeviceRemoved;
    VOID DeviceSurpriseRemoved;
    struct FxDeviceDescriptionEntry *Clone;
    UCHAR MatchStateToFlags;
    UCHAR IsPresent;
    struct FxDeviceDescriptionEntry *_FromDescriptionLink;
    struct FxDeviceDescriptionEntry *_FromModificationLink;
    struct _LIST_ENTRY m_DescriptionLink;
    enum FxChildListDescriptionState m_DescriptionState;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *m_IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER *m_AddressDescription;
    struct _LIST_ENTRY m_ModificationLink;
    enum FxChildListModificationState m_ModificationState;
    FxDevice *m_Pdo;
    FxChildList *m_DeviceList;
    UCHAR m_FoundInLastScan;
    UCHAR m_ProcessingSurpriseRemove;
    UCHAR m_PendingDeleteOnScanEnd;
    enum FxChildListReportedMissingCallbackState m_ReportedMissingCallbackState;
    PVOID __vecDelDtor;
};

typedef struct FxDevicePwrRequirementStateTable {
    enum FxDevicePwrRequirementStates *StateFunc;
    struct FxDevicePwrRequirementTargetState *TargetStates;
    ULONG TargetStatesCount;
};

typedef struct FxDevicePwrRequirementTargetState {
    enum FxDevicePwrRequirementEvents DprEvent;
    enum FxDevicePwrRequirementStates DprState;
};

typedef struct FxDeviceText {
    struct FxStump FxStump;
    struct _SINGLE_LIST_ENTRY m_Entry;
    PWCHAR m_Description;
    PWCHAR m_LocationInformation;
    ULONG m_LocaleId;
    VOID FxDeviceText;
    VOID ~FxDeviceText;
    struct FxDeviceText *_FromEntry;
    LONG _CleanupList;
    VOID operator delete;
    PVOID __vecDelDtor;
};

typedef struct FxDriverGlobalsDebugExtension {
    struct FxObjectDebugInfo *ObjectDebugInfo;
    struct FxAllocatedMdls AllocatedMdls;
    ULONG64 AllocatedMdlsLock;
    struct _LIST_ENTRY AllocatedTagTrackersListHead;
    MxLock AllocatedTagTrackersLock;
    enum FxTrackPowerOption TrackPower;
    VOID FxDriverGlobalsDebugExtension;
    VOID ~FxDriverGlobalsDebugExtension;
    PVOID __vecDelDtor;
};

typedef struct FxEnumerationInfo {
    struct FxStump FxStump;
    VOID FxEnumerationInfo;
    VOID FxEnumerationInfo;
    VOID FxEnumerationInfo;
    LONG Initialize;
    VOID AcquireParentPowerStateLock;
    VOID ReleaseParentPowerStateLock;
    FxWaitLockInternal m_PowerStateLock;
    FxWaitLockTransactionedList m_ChildListList;
    VOID ~FxEnumerationInfo;
    struct FxEnumerationInfo *operator=;
    struct FxEnumerationInfo *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxEventQueue {
    struct FxStump FxStump;
    VOID FxEventQueue;
    VOID FxEventQueue;
    VOID FxEventQueue;
    LONG Initialize;
    VOID Lock;
    VOID Unlock;
    UCHAR IsFull;
    UCHAR IsEmpty;
    VOID IncrementHead;
    UCHAR GetHead;
    UCHAR InsertAtHead;
    UCHAR InsertAtTail;
    UCHAR IncrementHistoryIndex;
    UCHAR IsClosedLocked;
    VOID GetFinishedState;
    UCHAR SetFinished;
    VOID SetDelayedDeletion;
    VOID Configure;
    UCHAR QueueToThreadWorker;
    VOID EventQueueWorker;
    UCHAR IsIdleLocked;
    UCHAR m_QueueHead;
    UCHAR m_QueueTail;
    UCHAR m_QueueDepth;
    UCHAR m_HistoryIndex;
    FxPkgPnp *m_PkgPnp;
    PVOID m_EventWorkerContext;
    MxLock m_QueueLock;
    FxWaitLockInternal m_StateMachineLock;
    PVOID m_EventWorker;
    struct FxCREvent *m_WorkItemFinished;
    UCHAR m_QueueFlags;
    struct {
        UCHAR WorkItemQueued : 1;
        UCHAR Closed : 1;
        UCHAR DelayDeletion : 1;
    } m_QueueFlagsByName;
    UCHAR m_WorkItemRunningCount;
    VOID ~FxEventQueue;
    struct FxEventQueue *operator=;
    struct FxEventQueue *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxFileObjectInfo {
    struct FxStump FxStump;
    VOID FxFileObjectInfo;
    VOID ~FxFileObjectInfo;
    struct _LIST_ENTRY ListEntry;
    FxFileObjectFileCreate EvtFileCreate;
    FxCxFileObjectFileCreate EvtCxFileCreate;
    FxFileObjectFileCleanup EvtFileCleanup;
    FxFileObjectFileClose EvtFileClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
    struct _WDF_OBJECT_ATTRIBUTES Attributes;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    UCHAR ClassExtension;
    struct FxCxDeviceInfo *CxDeviceInfo;
    PVOID __vecDelDtor;
};

typedef struct FxFilteredStartContext {
    struct FxStump FxStump;
    VOID FxFilteredStartContext;
    VOID ~FxFilteredStartContext;
    FxPkgFdo *PkgFdo;
    struct _CM_RESOURCE_LIST *ResourcesRaw;
    struct _CM_RESOURCE_LIST *ResourcesTranslated;
    PVOID __vecDelDtor;
};

typedef struct FxGlobalsStump {
    struct FxStump FxStump;
    struct _FX_DRIVER_GLOBALS *m_Globals;
    VOID FxGlobalsStump;
    struct _FX_DRIVER_GLOBALS *GetDriverGlobals;
};

typedef struct FxIdleStateTable {
    enum FxPowerIdleStates *StateFunc;
    struct FxPowerIdleTargetState *TargetStates;
    ULONG TargetStatesCount;
};

typedef struct FxInterfacePipeInformation {
    FxUsbPipe **Pipes;
    ULONG NumPipes;
};

typedef struct FxInternalIoctlOthersContext {
    struct FxRequestContext FxRequestContext;
    VOID FxInternalIoctlOthersContext;
    VOID FxInternalIoctlOthersContext;
    VOID FxInternalIoctlOthersContext;
    VOID StoreAndReferenceOtherMemories;
    VOID ReleaseAndRestore;
    VOID StoreAndReferenceMemory;
    IFxMemory *m_MemoryObjects[2];
    VOID ~FxInternalIoctlOthersContext;
    struct FxInternalIoctlOthersContext *operator=;
    struct FxInternalIoctlOthersContext *operator=;
    VOID __local_vftable_ctor_closure;
    PVOID __vecDelDtor;
};

typedef struct FxInterruptEnableParameters {
    FxInterrupt *Interrupt;
    LONG ReturnVal;
};

typedef struct FxInterruptSyncParameters {
    FxInterrupt *Interrupt;
    PUCHAR Callback;
    PVOID Context;
};

typedef struct FxIoContext {
    struct FxRequestContext FxRequestContext;
    VOID FxIoContext;
    VOID FxIoContext;
    VOID ~FxIoContext;
    VOID StoreAndReferenceOtherMemory;
    VOID ReleaseAndRestore;
    VOID ClearBuffer;
    VOID SetBufferAndLength;
    VOID CopyParameters;
    VOID CaptureState;
    VOID SwapIrpBuffer;
    PVOID m_BufferToFree;
    PVOID m_OriginalSystemBuffer;
    PVOID m_OriginalUserBuffer;
    struct _MDL *m_MdlToFree;
    struct _MDL *m_OriginalMdl;
    struct _FX_DRIVER_GLOBALS *m_DriverGlobals;
    ULONG m_OriginalFlags;
    ULONG64 m_BufferToFreeLength;
    ULONG64 m_MdlToFreeSize;
    UCHAR m_CopyBackToBuffer;
    UCHAR m_UnlockPages;
    UCHAR m_RestoreState;
    UCHAR m_MajorFunction;
    IFxMemory *m_OtherMemory;
    struct FxIoContext *operator=;
    VOID __local_vftable_ctor_closure;
    PVOID __vecDelDtor;
};

typedef struct FxIoQueueNode {
    struct _LIST_ENTRY m_ListEntry;
    enum FxIoQueueNodeType m_Type;
    VOID FxIoQueueNode;
    VOID FxIoQueueNode;
    VOID FxIoQueueNode;
    VOID ~FxIoQueueNode;
    struct FxIoQueueNode *operator=;
    struct FxIoQueueNode *_FromListEntry;
    UCHAR _IsValidNodeType;
    UCHAR IsNodeType;
    PVOID __vecDelDtor;
};

typedef struct FxIoTargetClearedPointers {
    struct _DEVICE_OBJECT *TargetPdo;
    struct _FILE_OBJECT *TargetFileObject;
    PVOID TargetHandle;
};

typedef struct FxIoTargetQueryRemove {
    FxCallback FxCallback;
    VOID FxIoTargetQueryRemove;
    LONG Invoke;
    PLONG m_Method;
};

typedef struct FxIoTargetRemoveCanceled {
    FxCallback FxCallback;
    VOID FxIoTargetRemoveCanceled;
    VOID Invoke;
    PVOID m_Method;
};

typedef struct FxIoTargetRemoveComplete {
    FxCallback FxCallback;
    VOID FxIoTargetRemoveComplete;
    VOID Invoke;
    PVOID m_Method;
};

typedef struct FxIoTargetRemoveOpenParams {
    VOID FxIoTargetRemoveOpenParams;
    VOID Set;
    VOID Clear;
    struct _UNICODE_STRING TargetDeviceName;
    enum _WDF_IO_TARGET_OPEN_TYPE OpenType;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER *AllocationSizePointer;
};

typedef struct FxIrpDynamicDispatchInfo {
    struct FxStump FxStump;
    VOID FxIrpDynamicDispatchInfo;
    VOID ~FxIrpDynamicDispatchInfo;
    LONG DynamicDispatchType;
     Info;
    LONG Mj2Index;
    struct _LIST_ENTRY ListEntry;
    struct FxIrpDynamicDispatchInfo::Info Dispatch[4];
    struct FxCxDeviceInfo *CxDeviceInfo;
    PVOID __vecDelDtor;
};

typedef struct FxIrpDynamicDispatchInfo::Info {
    VOID Info;
    VOID ~Info;
    PLONG EvtDeviceDynamicDispatch;
    PVOID DriverContext;
    PVOID __vecDelDtor;
};

typedef struct FxIrpPreprocessInfo {
    struct FxStump FxStump;
    VOID FxIrpPreprocessInfo;
    VOID ~FxIrpPreprocessInfo;
     Info;
    struct _LIST_ENTRY ListEntry;
    struct FxIrpPreprocessInfo::Info Dispatch[28];
    UCHAR ClassExtension;
    PVOID __vecDelDtor;
};

typedef struct FxIrpPreprocessInfo::Info {
    VOID Info;
    VOID ~Info;
    PLONG EvtDevicePreprocess;
    PLONG EvtCxDevicePreprocess;
    ULONG NumMinorFunctions;
    PUCHAR MinorFunctions;
    PVOID __vecDelDtor;
};

typedef struct FxLibraryGlobalsType {
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *LibraryDeviceObject;
    PLONG IoConnectInterruptEx;
    PLONG IoDisconnectInterruptEx;
    PULONG64 KeQueryActiveProcessors;
    PVOID KeSetTargetProcessorDpc;
    PUCHAR KeSetCoalescableTimer;
    PLONG IoUnregisterPlugPlayNotificationEx;
    PLONG PoxRegisterDevice;
    PVOID PoxStartDevicePowerManagement;
    PVOID PoxUnregisterDevice;
    PLONG PoxActivateComponent;
    PLONG PoxIdleComponent;
    PVOID PoxReportDevicePoweredOn;
    PVOID PoxCompleteIdleState;
    PVOID PoxCompleteIdleCondition;
    PVOID PoxCompleteDevicePowerNotRequired;
    PVOID PoxSetDeviceIdleTimeout;
    PVOID IoReportInterruptActive;
    PVOID IoReportInterruptInactive;
    PVOID VfCheckNxPoolType;
    PUCHAR VfIsRuleClassEnabled;
    struct _OSVERSIONINFOEXW OsVersionInfo;
    MxLockNoDynam FxDriverGlobalsListLock;
    struct _LIST_ENTRY FxDriverGlobalsList;
    ULONG BugCheckDriverInfoIndex;
    ULONG BugCheckDriverInfoCount;
    struct _FX_DUMP_DRIVER_INFO_ENTRY *BugCheckDriverInfo;
    struct _KBUGCHECK_REASON_CALLBACK_RECORD BugCheckCallbackRecord;
    UCHAR ProcessorGroupSupport;
    UCHAR InternalTracingInitialized;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE DriverTracker;
    struct _FX_DRIVER_GLOBALS *BestDriverForDumpLog;
    UCHAR PassiveLevelInterruptSupport;
    UCHAR IsUserModeFramework;
    UCHAR StaticallyLinked;
    UCHAR MachineSleepStates[3];
    PVOID VerifierSectionHandle;
    LONG VerifierSectionHandleRefCount;
    struct _WMI_WDF_NOTIFY_ROUTINES *PerfTraceRoutines;
    struct _WMI_WDF_NOTIFY_ROUTINES DummyPerfTraceRoutines;
    FxCompanionLibrary *CompanionLibrary;
    UCHAR IfrDisabled;
    UCHAR SleepStudyDisabled;
    VOID FxLibraryGlobalsType;
    VOID FxLibraryGlobalsType;
    struct FxLibraryGlobalsType *operator=;
    struct FxLibraryGlobalsType *operator=;
};

typedef struct FxMdlDebugInfo {
    struct _MDL *Mdl;
    FxObject *Owner;
    PVOID Caller;
};

typedef struct FxObjectDebugExtension {
    FxTagTracker *TagTracker;
    FxVerifierLock *VerifierLock;
    UCHAR StateHistory[8];
    LONG StateHistoryIndex;
    UCHAR ObjectCounted;
    ULONG Signature;
    ULONG AllocationStart[1];
};

typedef struct FxObjectDebugInfo {
    USHORT ObjectType;
     <unnamed-type-u>;
    union {
        USHORT DebugFlags;
         <unnamed-type-Bits>;
        struct {
            USHORT TrackReferences : 1;
            USHORT TrackObjectCountForLeak : 1;
        } Bits;
    } u;
};

typedef struct FxObjectDebugLeakDetection {
    UCHAR Enabled;
    LONG Limit;
    LONG LimitScaled;
    LONG ObjectCnt;
    LONG DeviceCnt;
    VOID FxObjectDebugLeakDetection;
    VOID FxObjectDebugLeakDetection;
    struct FxObjectDebugLeakDetection *operator=;
    struct FxObjectDebugLeakDetection *operator=;
};

typedef struct FxOffsetAndName {
    PCHAR Name;
    UCHAR Offset;
};

typedef struct FxPnpMachine {
    struct FxWorkItemEventQueue FxWorkItemEventQueue;
    VOID FxPnpMachine;
    VOID FxPnpMachine;
    VOID FxPnpMachine;
    enum FxPnpEvent m_Queue[8];
    union FxPnpMachineStateHistory m_States;
    UCHAR m_FireAndForget;
    VOID ~FxPnpMachine;
    struct FxPnpMachine *operator=;
    struct FxPnpMachine *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxPnpStateCallback {
    FxCallback FxCallback;
    VOID FxPnpStateCallback;
    VOID Invoke;
    struct FxPnpStateCallbackInfo m_Methods[58];
};

typedef struct FxPnpStateCallbackInfo {
    ULONG Types;
    PVOID Callback;
};

typedef struct FxPostProcessInfo {
    VOID FxPostProcessInfo;
    UCHAR SomethingToDo;
    VOID Evaluate;
    struct FxCREvent *m_Event;
    UCHAR m_DeleteObject;
    UCHAR m_SetRemovedEvent;
    struct _IRP *m_FireAndForgetIrp;
};

typedef struct FxPowerCaps {
    USHORT Caps;
    UCHAR DeviceWake;
    UCHAR SystemWake;
    ULONG States;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct FxPowerIdleTargetState {
    enum FxPowerIdleEvents PowerIdleEvent;
    enum FxPowerIdleStates PowerIdleState;
};

typedef struct FxPowerMachine {
    struct FxThreadedEventQueue FxThreadedEventQueue;
    VOID FxPowerMachine;
    VOID FxPowerMachine;
    VOID FxPowerMachine;
    LONG Init;
    union FxPowerMachineEventQueue m_Queue;
    union FxPowerMachineStateHistory m_States;
    MxLock m_WaitWakeLock;
    struct _LIST_ENTRY m_WaitWakeIrpToBeProcessedList;
    USHORT m_SingularEventsPresent;
    union {
        USHORT PowerD0Known : 1;
        USHORT PowerDxKnown : 1;
        USHORT PowerWakeArrivalKnown : 1;
        USHORT PowerWakeSucceededKnown : 1;
        USHORT PowerWakeFailedKnown : 1;
        USHORT PowerWakeCanceledKnown : 1;
        USHORT PowerImplicitD0Known : 1;
        USHORT PowerImplicitD3Known : 1;
        USHORT PowerParentToD0Known : 1;
        USHORT PowerMarkPageableKnown : 1;
        USHORT PowerMarkNonpageableKnown : 1;
        USHORT PowerCompleteD0Known : 1;
        USHORT PowerCompleteDxKnown : 1;
    } m_SingularEventsPresentByName;
    UCHAR m_IoCallbackFailure;
    UCHAR m_PowerDownFailure;
    VOID ~FxPowerMachine;
    struct FxPowerMachine *operator=;
    struct FxPowerMachine *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxPowerPolicyMachine {
    struct FxThreadedEventQueue FxThreadedEventQueue;
    VOID FxPowerPolicyMachine;
    VOID FxPowerPolicyMachine;
    VOID ~FxPowerPolicyMachine;
    VOID UsbSSCallbackProcessingComplete;
    LONG InitUsbSS;
    VOID SetWaitWakeUnclaimed;
    UCHAR CanCompleteWaitWakeIrp;
    enum FxPowerPolicyEvent m_Queue[8];
    union FxPowerPolicyMachineStateHistory m_States;
    struct FxPowerPolicyOwnerSettings *m_Owner;
    ULONG m_SingularEventsPresent;
    union {
        ULONG PwrPolStartKnown : 1;
        ULONG PwrPolStopKnown : 1;
        ULONG PwrPolSxKnown : 1;
        ULONG PwrPolS0Known : 1;
        ULONG PwrPolPowerDownKnown : 1;
        ULONG PwrPolPowerUpKnown : 1;
        ULONG PwrPolPowerDownIoStoppedKnown : 1;
        ULONG PwrPolPowerUpHwStartedKnown : 1;
        ULONG PwrPolWakeArrivedKnown : 1;
        ULONG PwrPolWakeSuccessKnown : 1;
        ULONG PwrPolWakeFailedKnown : 1;
        ULONG PwrPolIoPresentKnown : 1;
        ULONG PwrPolPowerTimeoutExpiredKnown : 1;
        ULONG PwrPolS0IdlePolicyChangedKnown : 1;
        ULONG PwrPolSurpriseRemoveKnown : 1;
        ULONG PwrPolUsbSelectiveSuspendCallbackKnown : 1;
        ULONG PwrPolUsbSelectiveSuspendCompletedKnown : 1;
        ULONG PwrPolPowerDownFailedKnown : 1;
        ULONG PwrPolPowerUpFailedKnown : 1;
    } m_SingularEventsPresentByName;
    struct FxPowerPolicyMachine *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxPowerPolicyOwnerSettings {
    struct FxStump FxStump;
    VOID FxPowerPolicyOwnerSettings;
    VOID ~FxPowerPolicyOwnerSettings;
    LONG Init;
    VOID CleanupPowerCallback;
    VOID IncrementChildrenArmedForWakeCount;
    VOID DecrementChildrenArmedForWakeCount;
    VOID _PowerStateCallback;
    FxPowerIdleMachine m_PowerIdleMachine;
    FxPoxInterface m_PoxInterface;
    FxPowerDeviceArmWakeFromS0 m_DeviceArmWakeFromS0;
    FxPowerDeviceArmWakeFromSx m_DeviceArmWakeFromSx;
    FxPowerDeviceDisarmWakeFromS0 m_DeviceDisarmWakeFromS0;
    FxPowerDeviceDisarmWakeFromSx m_DeviceDisarmWakeFromSx;
    FxPowerDeviceWakeFromS0Triggered m_DeviceWakeFromS0Triggered;
    FxPowerDeviceWakeFromSxTriggered m_DeviceWakeFromSxTriggered;
    struct FxUsbIdleInfo *m_UsbIdle;
    FxPkgPnp *m_PkgPnp;
    struct WakePolicySettings m_WakeSettings;
    struct IdlePolicySettings m_IdleSettings;
    ULONG m_SystemToDeviceStateMap;
    ULONG m_ChildrenPoweredOnCount;
    LONG m_ChildrenArmedCount;
    LONG m_WaitWakeStatus;
    UCHAR m_IdealDxStateForSx;
    UCHAR m_RequestedPowerUpIrp;
    UCHAR m_RequestedPowerDownIrp;
    UCHAR m_RequestedWaitWakeIrp;
    UCHAR m_WakeCompletionEventDropped;
    UCHAR m_PowerFailed;
    UCHAR m_CanSaveState;
    UCHAR m_ChildrenCanPowerUp;
    UCHAR m_SystemWakeSource;
    struct _CALLBACK_OBJECT *m_PowerCallbackObject;
    PVOID m_PowerCallbackRegistration;
    LONG m_WaitWakeCancelCompletionOwnership;
    PVOID __vecDelDtor;
};

typedef struct FxPowerPolicyStateCallback {
    FxCallback FxCallback;
    VOID FxPowerPolicyStateCallback;
    VOID Invoke;
    struct FxPowerPolicyStateCallbackInfo m_Methods[153];
};

typedef struct FxPowerPolicyStateCallbackInfo {
    ULONG Types;
    PVOID Callback;
};

typedef struct FxPowerStateCallback {
    FxCallback FxCallback;
    VOID FxPowerStateCallback;
    VOID Invoke;
    struct FxPowerStateCallbackInfo m_Methods[99];
};

typedef struct FxPowerStateCallbackInfo {
    ULONG Types;
    PVOID Callback;
};

typedef struct FxQueryInterface {
    struct FxStump FxStump;
    VOID FxQueryInterface;
    VOID ~FxQueryInterface;
    VOID SetEmbedded;
    struct FxQueryInterface *_FromEntry;
    VOID _FormatIrp;
    LONG _QueryForInterface;
    struct _GUID m_InterfaceType;
    struct _INTERFACE *m_Interface;
    FxDevice *m_Device;
    FxDeviceProcessQueryInterfaceRequest m_ProcessRequest;
    struct _SINGLE_LIST_ENTRY m_Entry;
    UCHAR m_ImportInterface;
    UCHAR m_SendQueryToParentStack;
    UCHAR m_EmbeddedInterface;
    PVOID __vecDelDtor;
};

typedef struct FxQueryInterfaceParams {
    PVOID *Object;
    USHORT Type;
    USHORT Offset;
};

typedef struct FxRequestBuffer {
    VOID FxRequestBuffer;
    LONG ValidateMemoryDescriptor;
    VOID SetMemory;
    VOID SetMdl;
    VOID SetBuffer;
    UCHAR HasMdl;
    ULONG GetBufferLength;
    LONG GetBuffer;
    LONG GetOrAllocateMdl;
    LONG GetOrAllocateMdlWorker;
    VOID AssignValues;
    enum FxRequestBufferType DataType;
     <unnamed-type-u>;
    union {
         <unnamed-type-Memory>;
        struct {
            IFxMemory *Memory;
            struct _WDFMEMORY_OFFSET *Offsets;
        } Memory;
         <unnamed-type-Mdl>;
        struct {
            struct _MDL *Mdl;
            ULONG Length;
        } Mdl;
         <unnamed-type-Buffer>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } Buffer;
         <unnamed-type-RefMdl>;
        struct {
            IFxMemory *Memory;
            struct _WDFMEMORY_OFFSET *Offsets;
            struct _MDL *Mdl;
        } RefMdl;
    } u;
};

typedef struct FxRequestContext {
    struct FxStump FxStump;
Error: Could not get member name.
    VOID FxRequestContext;
    VOID FxRequestContext;
    VOID ~FxRequestContext;
    VOID Dispose;
    VOID StoreAndReferenceMemory;
    VOID ReleaseAndRestore;
    UCHAR IsType;
    VOID CopyParameters;
    VOID FormatWriteParams;
    VOID FormatReadParams;
    VOID FormatOtherParams;
    VOID _StoreAndReferenceMemoryWorker;
    VOID InitCompletionParams;
    struct _WDF_REQUEST_COMPLETION_PARAMS m_CompletionParams;
    IFxMemory *m_RequestMemory;
    UCHAR m_RequestType;
    struct FxRequestContext *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxRequestOutputBuffer {
    IFxMemory IFxMemory;
    VOID FxRequestOutputBuffer;
    VOID FxRequestOutputBuffer;
    VOID FxRequestOutputBuffer;
    PVOID GetBuffer;
    ULONG64 GetBufferSize;
    struct _MDL *GetMdl;
    struct WDFMEMORY__ *GetHandle;
    USHORT GetFlags;
    struct _FX_DRIVER_GLOBALS *GetDriverGlobals;
    ULONG AddRef;
    ULONG Release;
    VOID Delete;
    UCHAR IsBufferSet;
    VOID ClearBufferMdl;
    VOID SetBuffer;
    VOID SetMdl;
    FxRequest *GetRequest;
    PVOID m_Buffer;
    struct _MDL *m_Mdl;
    struct FxRequestOutputBuffer *operator=;
    struct FxRequestOutputBuffer *operator=;
};

typedef struct FxRequestSystemBuffer {
    IFxMemory IFxMemory;
    VOID FxRequestSystemBuffer;
    VOID FxRequestSystemBuffer;
    VOID FxRequestSystemBuffer;
    PVOID GetBuffer;
    ULONG64 GetBufferSize;
    struct _MDL *GetMdl;
    struct WDFMEMORY__ *GetHandle;
    USHORT GetFlags;
    struct _FX_DRIVER_GLOBALS *GetDriverGlobals;
    ULONG AddRef;
    ULONG Release;
    VOID Delete;
    UCHAR IsBufferSet;
    VOID ClearBufferMdl;
    VOID SetBuffer;
    VOID SetMdl;
    FxRequest *GetRequest;
    PVOID m_Buffer;
    struct _MDL *m_Mdl;
    struct FxRequestSystemBuffer *operator=;
    struct FxRequestSystemBuffer *operator=;
};

typedef struct FxRequestTimer {
    struct FxStump FxStump;
    MxTimer Timer;
    VOID FxRequestTimer;
    VOID ~FxRequestTimer;
    PVOID __vecDelDtor;
};

typedef struct FxSelfManagedIoStateTable {
    enum FxSelfManagedIoStates *StateFunc;
    struct FxSelfManagedIoTargetState *TargetStates;
    ULONG TargetStatesCount;
};

typedef struct FxSelfManagedIoTargetState {
    enum FxSelfManagedIoEvents SelfManagedIoEvent;
    enum FxSelfManagedIoStates SelfManagedIoState;
};

typedef struct FxStaticChildDescription {
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER Header;
    FxDevice *Pdo;
};

typedef struct FxStump {
    VOID FxStump;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
};

typedef struct FxTagHistory {
    enum FxTagRefType RefType;
    ULONG RefCount;
    PCHAR File;
    LONG Line;
    PVOID Tag;
    union _LARGE_INTEGER Time;
    struct FxTagTrackingStackFrames *StackFrames;
    VOID FxTagHistory;
    VOID ~FxTagHistory;
    PVOID __vecDelDtor;
};

typedef struct FxTagTrackingBlock {
    struct FxStump FxStump;
    VOID FxTagTrackingBlock;
    VOID ~FxTagTrackingBlock;
    struct FxTagTrackingBlock *Next;
    PVOID Tag;
    PCHAR File;
    LONG Line;
    union _LARGE_INTEGER TimeLocked;
    struct FxTagTrackingStackFrames *StackFrames;
    PVOID __vecDelDtor;
};

typedef struct FxTagTrackingStackFrames {
    struct FxStump FxStump;
    USHORT NumFrames;
    ULONG64 Frames[16];
    VOID FxTagTrackingStackFrames;
};

typedef struct FxTargetSubmitSyncParams {
    struct FxCREvent SynchEvent;
    LONG Status;
    PVOID OrigTargetCompletionRoutine;
    PVOID OrigTargetCompletionContext;
    VOID FxTargetSubmitSyncParams;
    VOID FxTargetSubmitSyncParams;
    VOID FxTargetSubmitSyncParams;
    VOID ~FxTargetSubmitSyncParams;
    struct FxTargetSubmitSyncParams *operator=;
    struct FxTargetSubmitSyncParams *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxThreadedEventQueue {
    struct FxEventQueue FxEventQueue;
    VOID FxThreadedEventQueue;
    VOID FxThreadedEventQueue;
    VOID ~FxThreadedEventQueue;
    LONG Init;
    VOID QueueToThread;
    VOID _WorkerThreadRoutine;
    VOID _WorkItemCallback;
    VOID QueueWorkItem;
    MxWorkItem m_WorkItem;
    struct _WORK_QUEUE_ITEM m_EventWorkQueueItem;
    struct FxThreadedEventQueue *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxTraceInfo {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG Callback;
    PVOID Context;
};

typedef struct FxTransactionedEntry {
    VOID FxTransactionedEntry;
    VOID SetTransactionedObject;
    FxObject *GetTransactionedObject;
    struct FxTransactionedEntry *_FromEntry;
    enum FxListTransactionAction GetTransactionAction;
    struct _LIST_ENTRY m_ListLink;
    struct _LIST_ENTRY m_TransactionLink;
    enum FxListTransactionAction m_Transaction;
    FxObject *m_TransactionedObject;
    VOID __dflt_ctor_closure;
};

typedef struct FxUsageWorkitemParameters {
    VOID FxUsageWorkitemParameters;
    VOID FxUsageWorkitemParameters;
    VOID FxUsageWorkitemParameters;
    MxDeviceObject *RelatedDevice;
    FxIrp *RelatedIrp;
    FxIrp *OriginalIrp;
    UCHAR Revert;
    struct FxCREvent Event;
    LONG Status;
    VOID ~FxUsageWorkitemParameters;
    struct FxUsageWorkitemParameters *operator=;
    struct FxUsageWorkitemParameters *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbDeviceControlContext {
    struct FxUsbRequestContext FxUsbRequestContext;
    VOID FxUsbDeviceControlContext;
    VOID FxUsbDeviceControlContext;
    VOID ~FxUsbDeviceControlContext;
    LONG AllocateUrb;
    VOID Dispose;
    VOID CopyParameters;
    VOID StoreAndReferenceMemory;
    VOID ReleaseAndRestore;
    LONG GetUsbdStatus;
    struct USBD_HANDLE__ *m_USBDHandle;
    struct _URB_CONTROL_TRANSFER m_UrbLegacy;
    struct _URB_CONTROL_TRANSFER *m_Urb;
    struct _MDL *m_PartialMdl;
    UCHAR m_UnlockPages;
    struct FxUsbDeviceControlContext *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbDeviceStringContext {
    struct FxUsbRequestContext FxUsbRequestContext;
    VOID FxUsbDeviceStringContext;
    VOID FxUsbDeviceStringContext;
    VOID ~FxUsbDeviceStringContext;
    LONG AllocateUrb;
    VOID Dispose;
    VOID CopyParameters;
    VOID SetUrbInfo;
    LONG GetUsbdStatus;
    LONG AllocateDescriptor;
    struct USBD_HANDLE__ *m_USBDHandle;
    struct _URB_CONTROL_DESCRIPTOR_REQUEST m_UrbLegacy;
    struct _URB_CONTROL_DESCRIPTOR_REQUEST *m_Urb;
    struct _USB_STRING_DESCRIPTOR *m_StringDescriptor;
    ULONG m_StringDescriptorLength;
    struct FxUsbDeviceStringContext *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbIdleInfo {
    struct FxStump FxStump;
    VOID FxUsbIdleInfo;
    LONG Initialize;
    struct FxCREvent *m_IdleCallbackEvent;
    struct FxAutoIrp m_IdleIrp;
    struct _USB_IDLE_CALLBACK_INFO m_CallbackInfo;
    UCHAR m_EventDropped;
    VOID _UsbIdleCallback;
    VOID ~FxUsbIdleInfo;
    PVOID __vecDelDtor;
};

typedef struct FxUsbInterfaceSetting {
    struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
};

typedef struct FxUsbPipeContinuousReader {
    struct FxStump FxStump;
    VOID FxUsbPipeContinuousReader;
    VOID FxUsbPipeContinuousReader;
    VOID ~FxUsbPipeContinuousReader;
    LONG Config;
    PVOID operator new;
    LONG FormatRepeater;
    VOID CancelRepeaters;
    ULONG ResubmitRepeater;
    VOID DeleteMemory;
    UCHAR QueueWorkItemLocked;
    VOID FxUsbPipeRequestWorkItemHandler;
    VOID _FxUsbPipeContinuousReadDpc;
    VOID _ReadWorkItem;
    VOID _FxUsbPipeRequestComplete;
    VOID _FxUsbPipeRequestWorkItemThunk;
    PVOID m_ReadCompleteCallback;
    PVOID m_ReadCompleteContext;
    PUCHAR m_ReadersFailedCallback;
    FxUsbPipe *m_Pipe;
    FxLookasideList *m_Lookaside;
    struct _DEVICE_OBJECT *m_TargetDevice;
    struct _WDFMEMORY_OFFSET m_Offsets;
    FxSystemWorkItem *m_WorkItem;
    PVOID m_WorkItemRerunContext;
    struct _KTHREAD *m_WorkItemThread;
    ULONG m_WorkItemFlags;
    UCHAR m_NumFailedReaders;
    UCHAR m_NumReaders;
    UCHAR m_WorkItemQueued;
    UCHAR m_ReadersSubmitted;
    struct FxUsbPipeRepeatReader m_Readers[1];
    struct FxUsbPipeContinuousReader *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbPipeRepeatReader {
    FxRequest *Request;
    struct _IRP *RequestIrp;
    struct FxUsbPipeContinuousReader *Parent;
    struct _KDPC Dpc;
    MxEvent ReadCompletedEvent;
    VOID FxUsbPipeRepeatReader;
    VOID FxUsbPipeRepeatReader;
    VOID FxUsbPipeRepeatReader;
    VOID ~FxUsbPipeRepeatReader;
    struct FxUsbPipeRepeatReader *operator=;
    struct FxUsbPipeRepeatReader *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbPipeRequestContext {
    struct FxUsbRequestContext FxUsbRequestContext;
    VOID FxUsbPipeRequestContext;
    VOID FxUsbPipeRequestContext;
    VOID ~FxUsbPipeRequestContext;
    LONG AllocateUrb;
    VOID Dispose;
    VOID SetInfo;
    LONG GetUsbdStatus;
    struct USBD_HANDLE__ *m_USBDHandle;
    struct _URB_PIPE_REQUEST m_UrbLegacy;
    struct _URB_PIPE_REQUEST *m_Urb;
    struct FxUsbPipeRequestContext *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbPipeTransferContext {
    struct FxUsbRequestContext FxUsbRequestContext;
    VOID FxUsbPipeTransferContext;
    VOID FxUsbPipeTransferContext;
    VOID ~FxUsbPipeTransferContext;
    LONG AllocateUrb;
    VOID Dispose;
    VOID CopyParameters;
    VOID StoreAndReferenceMemory;
    VOID ReleaseAndRestore;
    VOID SetUrbInfo;
    LONG GetUsbdStatus;
    ULONG GetUrbTransferLength;
    struct USBD_HANDLE__ *m_USBDHandle;
    struct _URB_BULK_OR_INTERRUPT_TRANSFER m_UrbLegacy;
    struct _URB_BULK_OR_INTERRUPT_TRANSFER *m_Urb;
    struct _MDL *m_PartialMdl;
    UCHAR m_UnlockPages;
    struct FxUsbPipeTransferContext *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbRequestContext {
    struct FxRequestContext FxRequestContext;
    VOID FxUsbRequestContext;
    VOID FxUsbRequestContext;
    VOID FxUsbRequestContext;
    LONG GetUsbdStatus;
    VOID CopyParameters;
    VOID SetUsbType;
    VOID InitUsbParameters;
    struct _WDF_USB_REQUEST_COMPLETION_PARAMS m_UsbParameters;
    VOID ~FxUsbRequestContext;
    struct FxUsbRequestContext *operator=;
    struct FxUsbRequestContext *operator=;
    PVOID __vecDelDtor;
};

typedef struct FxUsbUrbContext {
    struct FxUsbRequestContext FxUsbRequestContext;
    VOID FxUsbUrbContext;
    VOID FxUsbUrbContext;
    VOID FxUsbUrbContext;
    LONG GetUsbdStatus;
    VOID StoreAndReferenceMemory;
    VOID ReleaseAndRestore;
    struct _URB *m_pUrb;
    VOID ~FxUsbUrbContext;
    struct FxUsbUrbContext *operator=;
    struct FxUsbUrbContext *operator=;
    VOID __local_vftable_ctor_closure;
    PVOID __vecDelDtor;
};

typedef struct FxVerifierOrderMapping {
    USHORT ObjectType;
    USHORT ObjectLockOrder;
};

typedef struct FxVerifierThreadTableEntry {
    struct _KTHREAD *Thread;
    FxVerifierLock *PerThreadPassiveLockList;
    FxVerifierLock *PerThreadDispatchLockList;
    struct _LIST_ENTRY HashChain;
};

typedef struct FxWakeInterruptStateTable {
    enum FxWakeInterruptStates *StateFunc;
    struct FxWakeInterruptTargetState *TargetStates;
    ULONG TargetStatesCount;
};

typedef struct FxWakeInterruptTargetState {
    enum FxWakeInterruptEvents WakeInterruptEvent;
    enum FxWakeInterruptStates WakeInterruptState;
};

typedef struct FxWatchdog {
    VOID FxWatchdog;
    VOID StartTimer;
    VOID CancelTimer;
    VOID _WatchdogDpc;
    MxTimer m_Timer;
    FxPkgPnp *m_PkgPnp;
    struct _KTHREAD *m_CallingThread;
    VOID ~FxWatchdog;
    PVOID __vecDelDtor;
};

typedef struct FxWdmDeviceExtension {
    struct _IO_REMOVE_LOCK IoRemoveLock;
    ULONG RemoveLockOptionFlags;
    VOID FxWdmDeviceExtension;
    VOID FxWdmDeviceExtension;
    struct FxWdmDeviceExtension *operator=;
    struct FxWdmDeviceExtension *operator=;
};

typedef struct FxWmiInstanceExecuteMethodCallback {
    FxCallback FxCallback;
    PLONG m_Method;
    VOID FxWmiInstanceExecuteMethodCallback;
    VOID ~FxWmiInstanceExecuteMethodCallback;
    LONG Invoke;
    PVOID __vecDelDtor;
};

typedef struct FxWmiInstanceInternalCallbacks {
    VOID FxWmiInstanceInternalCallbacks;
    PLONG QueryInstance;
    PLONG SetInstance;
    PLONG SetItem;
    PLONG ExecuteMethod;
};

typedef struct FxWmiInstanceQueryInstanceCallback {
    FxCallback FxCallback;
    PLONG m_Method;
    VOID FxWmiInstanceQueryInstanceCallback;
    VOID ~FxWmiInstanceQueryInstanceCallback;
    LONG Invoke;
    PVOID __vecDelDtor;
};

typedef struct FxWmiInstanceSetInstanceCallback {
    FxCallback FxCallback;
    PLONG m_Method;
    VOID FxWmiInstanceSetInstanceCallback;
    VOID ~FxWmiInstanceSetInstanceCallback;
    LONG Invoke;
    PVOID __vecDelDtor;
};

typedef struct FxWmiInstanceSetItemCallback {
    FxCallback FxCallback;
    PLONG m_Method;
    VOID FxWmiInstanceSetItemCallback;
    VOID ~FxWmiInstanceSetItemCallback;
    LONG Invoke;
    PVOID __vecDelDtor;
};

typedef struct FxWmiMinorEntry {
    PLONG Handler;
    UCHAR CheckInstance;
};

typedef struct FxWmiProviderFunctionControlCallback {
    FxCallback FxCallback;
    PLONG m_Method;
    VOID FxWmiProviderFunctionControlCallback;
    VOID ~FxWmiProviderFunctionControlCallback;
    LONG Invoke;
    PVOID __vecDelDtor;
};

typedef struct FxWorkItemEventQueue {
    struct FxEventQueue FxEventQueue;
    VOID FxWorkItemEventQueue;
    VOID FxWorkItemEventQueue;
    VOID ~FxWorkItemEventQueue;
    LONG Init;
    VOID QueueToThread;
    VOID QueueWorkItem;
    VOID _WorkItemCallback;
    MxWorkItem m_WorkItem;
    struct FxWorkItemEventQueue *operator=;
    PVOID __vecDelDtor;
};

typedef struct HAL_DISPATCH {
    ULONG Version;
    PLONG HalQuerySystemInformation;
    PLONG HalSetSystemInformation;
    PLONG HalQueryBusSlots;
    ULONG Spare1;
    PVOID HalExamineMBR;
    PLONG HalIoReadPartitionTable;
    PLONG HalIoSetPartitionInformation;
    PLONG HalIoWritePartitionTable;
    struct _BUS_HANDLER **HalReferenceHandlerForBus;
    PVOID HalReferenceBusHandler;
    PVOID HalDereferenceBusHandler;
    PLONG HalInitPnpDriver;
    PLONG HalInitPowerManagement;
    struct _DMA_ADAPTER **HalGetDmaAdapter;
    PLONG HalGetInterruptTranslator;
    PLONG HalStartMirroring;
    PLONG HalEndMirroring;
    PLONG HalMirrorPhysicalMemory;
    PVOID HalEndOfBoot;
    PLONG HalMirrorVerify;
    PVOID *HalGetCachedAcpiTable;
    PVOID HalSetPciErrorHandlerCallback;
};

typedef struct HINSTANCE__ {
    LONG unused;
};

typedef struct ICompanionLibrary {
Error: Could not get member name.
    LONG LoadCompanion;
    LONG UnloadCompanion;
};

typedef struct IDeviceCompanion {
Error: Could not get member name.
    VOID QueryPnPDeviceStateNotification;
    LONG SendTaskMessageSynchronously;
    LONG SendPrepareHardware;
    LONG SendReleaseHardware;
    LONG SendD0Entry;
    LONG SendD0Exit;
    struct _EPROCESS *GetCompanionProcess;
};

typedef struct IDeviceCompanionCallbacks {
Error: Could not get member name.
    VOID InvalidateDeviceStateAndReportFailed;
    LONG QuerySecureDeviceToken;
};

typedef struct IDispatch {
    struct IUnknown IUnknown;
    HRESULT GetTypeInfoCount;
    HRESULT GetTypeInfo;
    HRESULT GetIDsOfNames;
    HRESULT Invoke;
    VOID IDispatch;
    VOID IDispatch;
    VOID IDispatch;
    struct IDispatch *operator=;
    struct IDispatch *operator=;
};

typedef struct IEnumSTATSTG {
    struct IUnknown IUnknown;
    HRESULT Next;
    HRESULT Skip;
    HRESULT Reset;
    HRESULT Clone;
    VOID IEnumSTATSTG;
    VOID IEnumSTATSTG;
    VOID IEnumSTATSTG;
    struct IEnumSTATSTG *operator=;
    struct IEnumSTATSTG *operator=;
};

typedef struct IRecordInfo {
    struct IUnknown IUnknown;
    HRESULT RecordInit;
    HRESULT RecordClear;
    HRESULT RecordCopy;
    HRESULT GetGuid;
    HRESULT GetName;
    HRESULT GetSize;
    HRESULT GetTypeInfo;
    HRESULT GetField;
    HRESULT GetFieldNoCopy;
    HRESULT PutField;
    HRESULT PutFieldNoCopy;
    HRESULT GetFieldNames;
    LONG IsMatchingType;
    PVOID RecordCreate;
    HRESULT RecordCreateCopy;
    HRESULT RecordDestroy;
    VOID IRecordInfo;
    VOID IRecordInfo;
    VOID IRecordInfo;
    struct IRecordInfo *operator=;
    struct IRecordInfo *operator=;
};

typedef struct ISequentialStream {
    struct IUnknown IUnknown;
    HRESULT Read;
    HRESULT Write;
    VOID ISequentialStream;
    VOID ISequentialStream;
    VOID ISequentialStream;
    struct ISequentialStream *operator=;
    struct ISequentialStream *operator=;
};

typedef struct IStorage {
    struct IUnknown IUnknown;
    HRESULT CreateStream;
    HRESULT OpenStream;
    HRESULT CreateStorage;
    HRESULT OpenStorage;
    HRESULT CopyTo;
    HRESULT MoveElementTo;
    HRESULT Commit;
    HRESULT Revert;
    HRESULT EnumElements;
    HRESULT DestroyElement;
    HRESULT RenameElement;
    HRESULT SetElementTimes;
    HRESULT SetClass;
    HRESULT SetStateBits;
    HRESULT Stat;
    VOID IStorage;
    VOID IStorage;
    VOID IStorage;
    struct IStorage *operator=;
    struct IStorage *operator=;
};

typedef struct IStream {
    struct ISequentialStream ISequentialStream;
    HRESULT Seek;
    HRESULT SetSize;
    HRESULT CopyTo;
    HRESULT Commit;
    HRESULT Revert;
    HRESULT LockRegion;
    HRESULT UnlockRegion;
    HRESULT Stat;
    HRESULT Clone;
    VOID IStream;
    VOID IStream;
    VOID IStream;
    struct IStream *operator=;
    struct IStream *operator=;
};

typedef struct ITypeComp {
    struct IUnknown IUnknown;
    HRESULT Bind;
    HRESULT BindType;
    VOID ITypeComp;
    VOID ITypeComp;
    VOID ITypeComp;
    struct ITypeComp *operator=;
    struct ITypeComp *operator=;
};

typedef struct ITypeInfo {
    struct IUnknown IUnknown;
    HRESULT GetTypeAttr;
    HRESULT GetTypeComp;
    HRESULT GetFuncDesc;
    HRESULT GetVarDesc;
    HRESULT GetNames;
    HRESULT GetRefTypeOfImplType;
    HRESULT GetImplTypeFlags;
    HRESULT GetIDsOfNames;
    HRESULT Invoke;
    HRESULT GetDocumentation;
    HRESULT GetDllEntry;
    HRESULT GetRefTypeInfo;
    HRESULT AddressOfMember;
    HRESULT CreateInstance;
    HRESULT GetMops;
    HRESULT GetContainingTypeLib;
    VOID ReleaseTypeAttr;
    VOID ReleaseFuncDesc;
    VOID ReleaseVarDesc;
    VOID ITypeInfo;
    VOID ITypeInfo;
    VOID ITypeInfo;
    struct ITypeInfo *operator=;
    struct ITypeInfo *operator=;
};

typedef struct ITypeLib {
    struct IUnknown IUnknown;
    ULONG GetTypeInfoCount;
    HRESULT GetTypeInfo;
    HRESULT GetTypeInfoType;
    HRESULT GetTypeInfoOfGuid;
    HRESULT GetLibAttr;
    HRESULT GetTypeComp;
    HRESULT GetDocumentation;
    HRESULT IsName;
    HRESULT FindName;
    VOID ReleaseTLibAttr;
    VOID ITypeLib;
    VOID ITypeLib;
    VOID ITypeLib;
    struct ITypeLib *operator=;
    struct ITypeLib *operator=;
};

typedef struct IUMDFUnknown {
Error: Could not get member name.
    ULONG AddRef;
    ULONG Release;
    LONG QueryInterface;
};

typedef struct IUnknown {
Error: Could not get member name.
    HRESULT QueryInterface;
    ULONG AddRef;
    ULONG Release;
    VOID IUnknown;
    VOID IUnknown;
    VOID IUnknown;
    struct IUnknown *operator=;
    struct IUnknown *operator=;
};

typedef struct IdlePolicySettings {
    struct PolicySettings PolicySettings;
    VOID IdlePolicySettings;
    VOID IdlePolicySettings;
    VOID IdlePolicySettings;
    UCHAR WakeFromS0Capable;
    UCHAR UsbSSCapable;
    UCHAR UsbSSCapabilityKnown;
    UCHAR PowerUpIdleDeviceOnSystemWake;
    UCHAR D3ColdCapabilityKnown;
    UCHAR D3ColdSupported;
    IdleTimeoutManagement m_TimeoutMgmt;
    VOID ~IdlePolicySettings;
    struct IdlePolicySettings *operator=;
    struct IdlePolicySettings *operator=;
    PVOID __vecDelDtor;
};

typedef struct Info {
    VOID Info;
    VOID ~Info;
    PLONG EvtDeviceDynamicDispatch;
    PVOID DriverContext;
    PVOID __vecDelDtor;
};

typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
};

typedef struct LIST_ENTRY64 {
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct MEM_EXTENDED_PARAMETER {
    ULONG64 Type : 8;
    ULONG64 Reserved : 56;
    ULONG64 ULong64;
    PVOID Pointer;
    ULONG64 Size;
    PVOID Handle;
    ULONG ULong;
};

typedef struct MxAutoWorkItem {
    MxWorkItem MxWorkItem;
    VOID MxAutoWorkItem;
    VOID ~MxAutoWorkItem;
    PVOID __vecDelDtor;
};

typedef struct NOTIFY_USER_POWER_SETTING {
    struct _GUID Guid;
};

typedef struct NOT_POWER_POLICY_OWNER_STATE_TABLE {
    enum _WDF_DEVICE_POWER_POLICY_STATE CurrentTargetState;
    enum _WDF_DEVICE_POWER_POLICY_STATE *StateFunc;
    struct POWER_POLICY_EVENT_TARGET_STATE *TargetStates;
    UCHAR TargetStatesCount;
    UCHAR QueueOpen;
};

typedef struct OFFSETINSTANCEDATAANDLENGTH {
    ULONG OffsetInstanceData;
    ULONG LengthInstanceData;
};

typedef struct PCI_AGP_EXTENDED_CAPABILITY {
    struct _PCI_AGP_ISOCH_STATUS IsochStatus;
    struct _PCI_AGP_CONTROL AgpControl;
    USHORT ApertureSize;
    struct _PCI_AGP_APERTURE_PAGE_SIZE AperturePageSize;
    ULONG GartLow;
    ULONG GartHigh;
    struct _PCI_AGP_ISOCH_COMMAND IsochCommand;
};

typedef struct PCI_X_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-Command>;
    union {
         <unnamed-type-bits>;
        struct {
            USHORT DataParityErrorRecoveryEnable : 1;
            USHORT EnableRelaxedOrdering : 1;
            USHORT MaxMemoryReadByteCount : 2;
            USHORT MaxOutstandingSplitTransactions : 3;
            USHORT Reserved : 9;
        } bits;
        USHORT AsUSHORT;
    } Command;
     <unnamed-type-Status>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG FunctionNumber : 3;
            ULONG DeviceNumber : 5;
            ULONG BusNumber : 8;
            ULONG Device64Bit : 1;
            ULONG Capable133MHz : 1;
            ULONG SplitCompletionDiscarded : 1;
            ULONG UnexpectedSplitCompletion : 1;
            ULONG DeviceComplexity : 1;
            ULONG DesignedMaxMemoryReadByteCount : 2;
            ULONG DesignedMaxOutstandingSplitTransactions : 3;
            ULONG DesignedMaxCumulativeReadSize : 3;
            ULONG ReceivedSplitCompletionErrorMessage : 1;
            ULONG CapablePCIX266 : 1;
            ULONG CapablePCIX533 : 1;
        } bits;
        ULONG AsULONG;
    } Status;
};

typedef struct PNP_EVENT_TARGET_STATE {
    enum FxPnpEvent PnpEvent;
    enum _WDF_DEVICE_PNP_STATE TargetState;
};

typedef struct PNP_STATE_TABLE {
    enum _WDF_DEVICE_PNP_STATE *StateFunc;
    struct PNP_EVENT_TARGET_STATE FirstTargetState;
    struct PNP_EVENT_TARGET_STATE *OtherTargetStates;
    union FxPnpStateInfo StateInfo;
};

typedef struct POHANDLE__ {
    LONG unused;
};

typedef struct POWER_EVENT_TARGET_STATE {
    enum FxPowerEvent PowerEvent;
    enum _WDF_DEVICE_POWER_STATE TargetState;
};

typedef struct POWER_POLICY_EVENT_TARGET_STATE {
    enum FxPowerPolicyEvent PowerPolicyEvent;
    enum _WDF_DEVICE_POWER_POLICY_STATE TargetState;
};

typedef struct POWER_POLICY_STATE_TABLE {
    enum _WDF_DEVICE_POWER_POLICY_STATE *StateFunc;
    struct POWER_POLICY_EVENT_TARGET_STATE FirstTargetState;
    struct POWER_POLICY_EVENT_TARGET_STATE *OtherTargetStates;
    union FxPwrPolStateInfo StateInfo;
};

typedef struct POWER_STATE_TABLE {
    enum _WDF_DEVICE_POWER_STATE *StateFunc;
    struct POWER_EVENT_TARGET_STATE FirstTargetState;
    struct POWER_EVENT_TARGET_STATE *OtherTargetStates;
    union FxPowerStateInfo StateInfo;
};

typedef struct PdoInit {
    VOID PdoInit;
    struct _WDF_PDO_EVENT_CALLBACKS EventCallbacks;
    FxDevice *Parent;
    FxString *DeviceID;
    FxString *InstanceID;
    struct FxCollectionInternal HardwareIDs;
    struct FxCollectionInternal CompatibleIDs;
    FxString *ContainerID;
    struct _SINGLE_LIST_ENTRY DeviceText;
    struct _SINGLE_LIST_ENTRY **LastDeviceTextEntry;
    struct FxDeviceDescriptionEntry *DescriptionEntry;
    ULONG DefaultLocale;
    UCHAR Raw;
    UCHAR Static;
    UCHAR ForwardRequestToParent;
    VOID ~PdoInit;
    PVOID __vecDelDtor;
};

typedef struct PnpPowerInit {
    struct _WDF_PNPPOWER_EVENT_CALLBACKS PnpPowerEventCallbacks;
    struct _WDF_POWER_POLICY_EVENT_CALLBACKS PolicyEventCallbacks;
    struct FxPnpStateCallback *PnpStateCallbacks;
    struct FxPowerStateCallback *PowerStateCallbacks;
    struct FxPowerPolicyStateCallback *PowerPolicyStateCallbacks;
    enum _WDF_TRI_STATE PowerPolicyOwner;
};

typedef struct PolicySettings {
    VOID PolicySettings;
    VOID ~PolicySettings;
    enum _DEVICE_POWER_STATE DxState;
    FxWmiInstanceInternal *WmiInstance;
    UCHAR Enabled;
    UCHAR Overridable;
    UCHAR Set;
    UCHAR Dirty;
    PVOID __vecDelDtor;
};

typedef struct RD_FILE_OBJECT_CONTEXT__ {
    LONG unused;
};

typedef struct SET_POWER_SETTING_VALUE {
    ULONG Version;
    struct _GUID Guid;
    enum SYSTEM_POWER_CONDITION PowerCondition;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct SS_COMPONENT__ {
    LONG unused;
};

typedef struct SS_LIBRARY__ {
    LONG unused;
};

typedef struct STACK_CREATION_SETTINGS {
    ULONG Flags;
    ULONG DeviceType;
    PVOID SecurityDescriptor;
    ULONG Characteristics;
    ULONG Exclusivity;
};

typedef struct SecurityInit {
    FxString *Sddl;
    struct _GUID DeviceClass;
    UCHAR DeviceClassSet;
};

typedef struct SharedPowerData {
    struct _IRP *m_WaitWakeIrp;
    UCHAR m_WaitWakeOwner;
    UCHAR m_ExtendWatchDogTimer;
};

typedef struct USBDI_HANDLE__ {
    LONG unused;
};

typedef struct USBD_FUNCTION_HANDLE__ {
    LONG unused;
};

typedef struct USBD_HANDLE__ {
    LONG unused;
};

typedef struct USB_CHANGE_REGISTRATION_HANDLE__ {
    LONG unused;
};

typedef struct WDFCHILDLIST__ {
    LONG unused;
};

typedef struct WDFCMRESLIST__ {
    LONG unused;
};

typedef struct WDFCOLLECTION__ {
    LONG unused;
};

typedef struct WDFCOMMONBUFFER__ {
    LONG unused;
};

typedef struct WDFCOMPANIONTARGET__ {
    LONG unused;
};

typedef struct WDFCXDEVICE_INIT {
    struct FxStump FxStump;
    VOID WDFCXDEVICE_INIT;
    VOID ~WDFCXDEVICE_INIT;
    struct WDFCXDEVICE_INIT *_AllocateCxDeviceInit;
    struct _LIST_ENTRY ListEntry;
    struct _FX_DRIVER_GLOBALS *ClientDriverGlobals;
    struct _FX_DRIVER_GLOBALS *CxDriverGlobals;
    struct FxIrpPreprocessInfo *PreprocessInfo;
    PVOID IoInCallerContextCallback;
    struct _WDF_OBJECT_ATTRIBUTES RequestAttributes;
    struct CxFileObjectInit FileObject;
    struct CxPnpPowerCallbacksInit PnpPowerCallbacks;
    struct FxCxDeviceInfo *CxDeviceInfo;
    PVOID __vecDelDtor;
};

typedef struct WDFDEVICE_INIT {
    struct FxStump FxStump;
    VOID WDFDEVICE_INIT;
    VOID ~WDFDEVICE_INIT;
    VOID SetPdo;
    UCHAR IsFdoInit;
    UCHAR IsNotFdoInit;
    UCHAR IsPdoInit;
    UCHAR IsNotPdoInit;
    UCHAR IsNotControlDeviceInit;
    UCHAR IsControlDeviceInit;
    UCHAR IsCompanionInit;
    UCHAR IsNotCompanionInit;
    UCHAR HasName;
    UCHAR ShouldCreateSecure;
    UCHAR IsPwrPolOwner;
    LONG AssignName;
    struct WDFDEVICE_INIT *_AllocateControlDeviceInit;
    VOID AddCxDeviceInit;
    VOID AssignIoType;
    struct _FX_DRIVER_GLOBALS *DriverGlobals;
    FxDriver *Driver;
    PVOID CreatedDevice;
    UCHAR CreatedOnStack;
    UCHAR Exclusive;
    UCHAR PowerPageable;
    UCHAR Inrush;
    UCHAR RequiresSelfIoTarget;
    ULONG RemoveLockOptionFlags;
    enum FxDeviceInitType InitType;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    ULONG DeviceType;
    FxString *DeviceName;
    ULONG Characteristics;
    struct FileObjectInit FileObject;
    struct SecurityInit Security;
    struct _WDF_OBJECT_ATTRIBUTES RequestAttributes;
    struct FxIrpPreprocessInfo *PreprocessInfo;
    PVOID IoInCallerContextCallback;
    enum _WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE ReleaseHardwareOrderOnFailure;
    struct PnpPowerInit PnpPower;
    struct FdoInit Fdo;
    struct PdoInit Pdo;
    struct ControlInit Control;
    struct _LIST_ENTRY CxDeviceInitListHead;
    PVOID __vecDelDtor;
};

typedef struct WDFDEVICE__ {
    LONG unused;
};

typedef struct WDFDMAENABLER__ {
    LONG unused;
};

typedef struct WDFDMATRANSACTION__ {
    LONG unused;
};

typedef struct WDFDPC__ {
    LONG unused;
};

typedef struct WDFDRIVER__ {
    LONG unused;
};

typedef struct WDFFILEOBJECT__ {
    LONG unused;
};

typedef struct WDFINTERRUPT__ {
    LONG unused;
};

typedef struct WDFIORESLIST__ {
    LONG unused;
};

typedef struct WDFIORESREQLIST__ {
    LONG unused;
};

typedef struct WDFIOTARGET__ {
    LONG unused;
};

typedef struct WDFKEY__ {
    LONG unused;
};

typedef struct WDFLOOKASIDE__ {
    LONG unused;
};

typedef struct WDFMEMORY__ {
    LONG unused;
};

typedef struct WDFQUEUE__ {
    LONG unused;
};

typedef struct WDFREQUEST__ {
    LONG unused;
};

typedef struct WDFSPINLOCK__ {
    LONG unused;
};

typedef struct WDFSTRING__ {
    LONG unused;
};

typedef struct WDFTIMER__ {
    LONG unused;
};

typedef struct WDFUSBDEVICE__ {
    LONG unused;
};

typedef struct WDFUSBINTERFACE__ {
    LONG unused;
};

typedef struct WDFUSBPIPE__ {
    LONG unused;
};

typedef struct WDFWAITLOCK__ {
    LONG unused;
};

typedef struct WDFWMIINSTANCE__ {
    LONG unused;
};

typedef struct WDFWMIPROVIDER__ {
    LONG unused;
};

typedef struct WDFWORKITEM__ {
    LONG unused;
};

typedef struct WHEA_PCIXDEVICE_REGISTER_PAIR {
    ULONG64 Register;
    ULONG64 Data;
};

typedef struct WMIREGGUIDW {
    struct _GUID Guid;
    ULONG Flags;
    ULONG InstanceCount;
    ULONG InstanceNameList;
    ULONG BaseNameOffset;
    ULONG64 Pdo;
    ULONG64 InstanceInfo;
};

typedef struct WMIREGINFOW {
    ULONG BufferSize;
    ULONG NextWmiRegInfo;
    ULONG RegistryPath;
    ULONG MofResourceName;
    ULONG GuidCount;
    struct WMIREGGUIDW WmiRegGuid[0];
};

typedef struct WUDF_CREATE_CONTEXT__ {
    LONG unused;
};

typedef struct WUDF_DEVICE_CONTEXT__ {
    LONG unused;
};

typedef struct WUDF_DEVNODE_CONTEXT__ {
    LONG unused;
};

typedef struct WUDF_EVENT {
    PVOID Value;
};

typedef struct WUDF_LOCK {
    PVOID Value;
};

typedef struct WUDF_PROBLEM {
    enum WudfProblem ProblemCode;
    enum WdfComponentType Detector;
    enum _WDF_HOST_EXIT_CODE ExitCode;
    enum WudfOperationType Operation;
    enum _WUDFMESSAGE Message;
    USHORT IrpInfo;
    LONG Status;
    enum WdfDeviceStartStateType DeviceStarted;
    VOID InitReport;
    ULONG MessageWithIrpInfo;
    struct WUDF_PROBLEM *InitDisconnect;
    struct WUDF_PROBLEM *InitTimeout;
    struct WUDF_PROBLEM *InitOperationFailure;
    struct WUDF_PROBLEM *InitMessageFailure;
    struct WUDF_PROBLEM *InitFailedToExit;
    struct WUDF_PROBLEM *InitLeakingHandle;
    struct WUDF_PROBLEM *InitInvalidInterruptState;
    struct WUDF_PROBLEM *InitIsrTimedOut;
};

typedef struct WUDF_SEMAPHORE {
    PVOID Value;
};

typedef struct WUDF_TIMER {
    PVOID Value;
};

typedef struct WakePolicySettings {
    struct PolicySettings PolicySettings;
    VOID WakePolicySettings;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
    VOID ~WakePolicySettings;
    PVOID __vecDelDtor;
};

typedef struct _ACCESS_REASONS {
    ULONG Data[32];
};

typedef struct _ACCESS_STATE {
    struct _LUID OperationID;
    UCHAR SecurityEvaluated;
    UCHAR GenerateAudit;
    UCHAR GenerateOnClose;
    UCHAR PrivilegesAllocated;
    ULONG Flags;
    ULONG RemainingDesiredAccess;
    ULONG PreviouslyGrantedAccess;
    ULONG OriginalDesiredAccess;
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
    PVOID SecurityDescriptor;
    PVOID AuxData;
    union {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
        struct _PRIVILEGE_SET PrivilegeSet;
    } Privileges;
    UCHAR AuditPrivileges;
    struct _UNICODE_STRING ObjectName;
    struct _UNICODE_STRING ObjectTypeName;
};

typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
};

typedef struct _ACPI_DEBUGGING_DEVICE_IN_USE {
    ULONG NameSpacePathLength;
    WCHAR NameSpacePath[1];
};

typedef struct _ACPI_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GpeConnectVector;
    PLONG GpeDisconnectVector;
    PLONG GpeEnableEvent;
    PLONG GpeDisableEvent;
    PLONG GpeClearStatus;
    PLONG RegisterForDeviceNotifications;
    PVOID UnregisterForDeviceNotifications;
};

typedef struct _ACTIVATION_CONTEXT {
};

typedef struct _ACTIVATION_CONTEXT_DATA {
};

typedef struct _ACTIVATION_CONTEXT_STACK {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
    struct _LIST_ENTRY FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _AGP_TARGET_BUS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG SetBusData;
    PULONG GetBusData;
    UCHAR CapabilityID;
};

typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
    union _LARGE_INTEGER ActivationTime;
    ULONG Flags;
    ULONG ButtonInstanceID;
};

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS {
    struct _DEVICE_OBJECT *ReserveDevice;
};

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_CONFLICT_INFO {
    struct _DEVICE_OBJECT *OwningObject;
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG ArbiterHandler;
    ULONG Flags;
};

typedef struct _ARBITER_LIST_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG AlternativeCount;
    struct _IO_RESOURCE_DESCRIPTOR *Alternatives;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    enum _ARBITER_REQUEST_SOURCE RequestSource;
    ULONG Flags;
    LONG64 WorkSpace;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG SlotNumber;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *Assignment;
    struct _IO_RESOURCE_DESCRIPTOR *SelectedAlternative;
    enum _ARBITER_RESULT Result;
};

typedef struct _ARBITER_PARAMETERS {
     <unnamed-type-Parameters>;
    union {
        struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
        struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
        struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
        struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
        struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
        struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
        struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    } Parameters;
};

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS {
    struct _CM_PARTIAL_RESOURCE_LIST **AllocatedResources;
};

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _IO_RESOURCE_DESCRIPTOR *ConflictingResource;
    PULONG ConflictCount;
    struct _ARBITER_CONFLICT_INFO **Conflicts;
};

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARM64_NT_CONTEXT {
    ULONG ContextFlags;
    ULONG Cpsr;
    ULONG64 X0;
    ULONG64 X1;
    ULONG64 X2;
    ULONG64 X3;
    ULONG64 X4;
    ULONG64 X5;
    ULONG64 X6;
    ULONG64 X7;
    ULONG64 X8;
    ULONG64 X9;
    ULONG64 X10;
    ULONG64 X11;
    ULONG64 X12;
    ULONG64 X13;
    ULONG64 X14;
    ULONG64 X15;
    ULONG64 X16;
    ULONG64 X17;
    ULONG64 X18;
    ULONG64 X19;
    ULONG64 X20;
    ULONG64 X21;
    ULONG64 X22;
    ULONG64 X23;
    ULONG64 X24;
    ULONG64 X25;
    ULONG64 X26;
    ULONG64 X27;
    ULONG64 X28;
    ULONG64 Fp;
    ULONG64 Lr;
    ULONG64 X[31];
    ULONG64 Sp;
    ULONG64 Pc;
    union _ARM64_NT_NEON128 V[32];
    ULONG Fpcr;
    ULONG Fpsr;
    ULONG Bcr[8];
    ULONG64 Bvr[8];
    ULONG Wcr[2];
    ULONG64 Wvr[2];
};

typedef struct _ASSEMBLY_STORAGE_MAP {
};

typedef struct _AUX_ACCESS_DATA {
    struct _PRIVILEGE_SET *PrivilegesUsed;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG AccessesToAudit;
    ULONG MaximumAuditMask;
    struct _GUID TransactionId;
    PVOID NewSecurityDescriptor;
    PVOID ExistingSecurityDescriptor;
    PVOID ParentSecurityDescriptor;
    PVOID DeRefSecurityDescriptor;
    PVOID SDLock;
    struct _ACCESS_REASONS AccessReasons;
    UCHAR GenerateStagingEvents;
};

typedef struct _AUX_KLIB_FNS {
    PLONG QueryModuleInformationPtr;
};

typedef struct _AUX_MODULE_BASIC_INFO {
    PVOID ImageBase;
};

typedef struct _AUX_MODULE_EXTENDED_INFO {
    struct _AUX_MODULE_BASIC_INFO BasicInfo;
    ULONG ImageSize;
    USHORT FileNameOffset;
    UCHAR FullPathName[256];
};

typedef struct _AUX_PROCESS_MODULES {
    ULONG NumberOfModules;
    struct _AUX_PROCESS_MODULE_INFORMATION Modules[1];
};

typedef struct _AUX_PROCESS_MODULE_INFORMATION {
    PVOID Section;
    PVOID MappedBase;
    PVOID ImageBase;
    ULONG ImageSize;
    ULONG Flags;
    USHORT LoadOrderIndex;
    USHORT InitOrderIndex;
    USHORT LoadCount;
    USHORT OffsetToFileName;
    UCHAR FullPathName[256];
};

typedef struct _BDCB_IMAGE_INFORMATION {
    enum _BDCB_CLASSIFICATION Classification;
    ULONG ImageFlags;
    struct _UNICODE_STRING ImageName;
    struct _UNICODE_STRING RegistryPath;
    struct _UNICODE_STRING CertificatePublisher;
    struct _UNICODE_STRING CertificateIssuer;
    PVOID ImageHash;
    PVOID CertificateThumbprint;
    ULONG ImageHashAlgorithm;
    ULONG ThumbprintHashAlgorithm;
    ULONG ImageHashLength;
    ULONG CertificateThumbprintLength;
};

typedef struct _BDCB_STATUS_UPDATE_CONTEXT {
    enum _BDCB_STATUS_UPDATE_TYPE StatusType;
};

typedef struct _BM {
    UCHAR Recipient : 2;
    UCHAR Reserved : 3;
    UCHAR Type : 2;
    UCHAR Dir : 1;
};

typedef struct _BM_REQUEST_TYPE::_BM {
    UCHAR Recipient : 2;
    UCHAR Reserved : 3;
    UCHAR Type : 2;
    UCHAR Dir : 1;
};

typedef struct _BOOTDISK_INFORMATION {
    LONG64 BootPartitionOffset;
    LONG64 SystemPartitionOffset;
    ULONG BootDeviceSignature;
    ULONG SystemDeviceSignature;
};

typedef struct _BOOTDISK_INFORMATION_EX {
    LONG64 BootPartitionOffset;
    LONG64 SystemPartitionOffset;
    ULONG BootDeviceSignature;
    ULONG SystemDeviceSignature;
    struct _GUID BootDeviceGuid;
    struct _GUID SystemDeviceGuid;
    UCHAR BootDeviceIsGpt;
    UCHAR SystemDeviceIsGpt;
};

typedef struct _BOOTDISK_INFORMATION_LITE {
    ULONG NumberEntries;
    struct _LOADER_PARTITION_INFORMATION_EX Entries[1];
};

typedef struct _BUS_HANDLER {
};

typedef struct _BUS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PUCHAR TranslateBusAddress;
    struct _DMA_ADAPTER **GetDmaAdapter;
    PULONG SetBusData;
    PULONG GetBusData;
};

typedef struct _BUS_RESOURCE_UPDATE_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GetUpdatedBusResource;
};

typedef struct _CACHE_DESCRIPTOR {
    UCHAR Level;
    UCHAR Associativity;
    USHORT LineSize;
    ULONG Size;
    enum _PROCESSOR_CACHE_TYPE Type;
};

typedef struct _CACHE_RELATIONSHIP {
    UCHAR Level;
    UCHAR Associativity;
    USHORT LineSize;
    ULONG CacheSize;
    enum _PROCESSOR_CACHE_TYPE Type;
    UCHAR Reserved[20];
    struct _GROUP_AFFINITY GroupMask;
};

typedef struct _CALLBACK_OBJECT {
};

typedef struct _CI_LOG_MMCSS_START {
    struct _EVENT_TRACE_HEADER Header;
};

typedef struct _CI_LOG_MMCSS_STOP {
    struct _EVENT_TRACE_HEADER Header;
};

typedef struct _CI_LOG_SCHEDULER_EVENT {
    struct _EVENT_TRACE_HEADER Header;
    ULONG ProcessId;
    ULONG ThreadId;
    ULONG Priority;
    ULONG TaskIndex;
};

typedef struct _CI_LOG_SCHEDULER_SLEEP {
    struct _EVENT_TRACE_HEADER Header;
};

typedef struct _CI_LOG_SCHEDULER_SLEEP_RESPONSE {
    struct _EVENT_TRACE_HEADER Header;
};

typedef struct _CI_LOG_SCHEDULER_WAKEUP {
    struct _EVENT_TRACE_HEADER Header;
    ULONG Reason;
};

typedef struct _CLFS_LOG_NAME_INFORMATION {
    USHORT NameLengthInBytes;
    WCHAR Name[1];
};

typedef struct _CLFS_MGMT_CLIENT_REGISTRATION {
    ULONG Version;
    PLONG AdvanceTailCallback;
    PVOID AdvanceTailCallbackData;
    PVOID LogGrowthCompleteCallback;
    PVOID LogGrowthCompleteCallbackData;
    PVOID LogUnpinnedCallback;
    PVOID LogUnpinnedCallbackData;
};

typedef struct _CLFS_MGMT_NOTIFICATION {
    enum _CLFS_MGMT_NOTIFICATION_TYPE Notification;
    struct _CLS_LSN Lsn;
    USHORT LogIsPinned;
};

typedef struct _CLFS_MGMT_POLICY {
    ULONG Version;
    ULONG LengthInBytes;
    ULONG PolicyFlags;
    enum _CLFS_MGMT_POLICY_TYPE PolicyType;
     <unnamed-type-PolicyParameters>;
    union {
         <unnamed-type-MaximumSize>;
        struct {
            ULONG Containers;
        } MaximumSize;
         <unnamed-type-MinimumSize>;
        struct {
            ULONG Containers;
        } MinimumSize;
         <unnamed-type-NewContainerSize>;
        struct {
            ULONG SizeInBytes;
        } NewContainerSize;
         <unnamed-type-GrowthRate>;
        struct {
            ULONG AbsoluteGrowthInContainers;
            ULONG RelativeGrowthPercentage;
        } GrowthRate;
         <unnamed-type-LogTail>;
        struct {
            ULONG MinimumAvailablePercentage;
            ULONG MinimumAvailableContainers;
        } LogTail;
         <unnamed-type-AutoShrink>;
        struct {
            ULONG Percentage;
        } AutoShrink;
         <unnamed-type-AutoGrow>;
        struct {
            ULONG Enabled;
        } AutoGrow;
         <unnamed-type-NewContainerPrefix>;
        struct {
            USHORT PrefixLengthInBytes;
            WCHAR PrefixString[1];
        } NewContainerPrefix;
         <unnamed-type-NewContainerSuffix>;
        struct {
            ULONG64 NextContainerSuffix;
        } NewContainerSuffix;
         <unnamed-type-NewContainerExtension>;
        struct {
            USHORT ExtensionLengthInBytes;
            WCHAR ExtensionString[1];
        } NewContainerExtension;
    } PolicyParameters;
};

typedef struct _CLFS_NODE_ID {
    ULONG cType;
    ULONG cbNode;
};

typedef struct _CLFS_PHYSICAL_LSN_INFORMATION {
    UCHAR StreamIdentifier;
    struct _CLS_LSN VirtualLsn;
    struct _CLS_LSN PhysicalLsn;
};

typedef struct _CLFS_STREAM_ID_INFORMATION {
    UCHAR StreamIdentifier;
};

typedef struct _CLIENT_ID {
    PVOID UniqueProcess;
    PVOID UniqueThread;
};

typedef struct _CLIENT_INFO {
    ULONG Size;
    struct _UNICODE_STRING *RegistryPath;
};

typedef struct _CLS_ARCHIVE_DESCRIPTOR {
    ULONG64 coffLow;
    ULONG64 coffHigh;
    struct _CLS_CONTAINER_INFORMATION infoContainer;
};

typedef struct _CLS_CONTAINER_INFORMATION {
    ULONG FileAttributes;
    ULONG64 CreationTime;
    ULONG64 LastAccessTime;
    ULONG64 LastWriteTime;
    LONG64 ContainerSize;
    ULONG FileNameActualLength;
    ULONG FileNameLength;
    WCHAR FileName[256];
    ULONG State;
    ULONG PhysicalContainerId;
    ULONG LogicalContainerId;
};

typedef struct _CLS_INFORMATION {
    LONG64 TotalAvailable;
    LONG64 CurrentAvailable;
    LONG64 TotalReservation;
    ULONG64 BaseFileSize;
    ULONG64 ContainerSize;
    ULONG TotalContainers;
    ULONG FreeContainers;
    ULONG TotalClients;
    ULONG Attributes;
    ULONG FlushThreshold;
    ULONG SectorSize;
    struct _CLS_LSN MinArchiveTailLsn;
    struct _CLS_LSN BaseLsn;
    struct _CLS_LSN LastFlushedLsn;
    struct _CLS_LSN LastLsn;
    struct _CLS_LSN RestartLsn;
    struct _GUID Identity;
};

typedef struct _CLS_IO_STATISTICS {
    struct _CLS_IO_STATISTICS_HEADER hdrIoStats;
    ULONG64 cFlush;
    ULONG64 cbFlush;
    ULONG64 cMetaFlush;
    ULONG64 cbMetaFlush;
};

typedef struct _CLS_IO_STATISTICS_HEADER {
    UCHAR ubMajorVersion;
    UCHAR ubMinorVersion;
    enum _CLFS_IOSTATS_CLASS eStatsClass;
    USHORT cbLength;
    ULONG coffData;
};

typedef struct _CLS_LSN {
    ULONG64 Internal;
};

typedef struct _CLS_SCAN_CONTEXT {
    struct _CLFS_NODE_ID cidNode;
    struct _FILE_OBJECT *plfoLog;
    ULONG cIndex;
    ULONG cContainers;
    ULONG cContainersReturned;
    UCHAR eScanMode;
    struct _CLS_CONTAINER_INFORMATION *pinfoContainer;
};

typedef struct _CLS_WRITE_ENTRY {
    PVOID Buffer;
    ULONG ByteLength;
};

typedef struct _CMC_DRIVER_INFO {
    PVOID ExceptionCallback;
    PVOID DpcCallback;
    PVOID DeviceContext;
};

typedef struct _CM_COMPONENT_INFORMATION {
    struct _DEVICE_FLAGS Flags;
    ULONG Version;
    ULONG Key;
    ULONG64 AffinityMask;
};

typedef struct _CM_DISK_GEOMETRY_DEVICE_DATA {
    ULONG BytesPerSector;
    ULONG NumberOfCylinders;
    ULONG SectorsPerTrack;
    ULONG NumberOfHeads;
};

typedef struct _CM_EISA_FUNCTION_INFORMATION {
    ULONG CompressedId;
    UCHAR IdSlotFlags1;
    UCHAR IdSlotFlags2;
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    UCHAR Selections[26];
    UCHAR FunctionFlags;
    UCHAR TypeString[80];
    struct _EISA_MEMORY_CONFIGURATION EisaMemory[9];
    struct _EISA_IRQ_CONFIGURATION EisaIrq[7];
    struct _EISA_DMA_CONFIGURATION EisaDma[4];
    struct _EISA_PORT_CONFIGURATION EisaPort[20];
    UCHAR InitializationData[60];
};

typedef struct _CM_EISA_SLOT_INFORMATION {
    UCHAR ReturnCode;
    UCHAR ReturnFlags;
    UCHAR MajorRevision;
    UCHAR MinorRevision;
    USHORT Checksum;
    UCHAR NumberFunctions;
    UCHAR FunctionInformation;
    ULONG CompressedId;
};

typedef struct _CM_FLOPPY_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    CHAR Size[8];
    ULONG MaxDensity;
    ULONG MountDensity;
    UCHAR StepRateHeadUnloadTime;
    UCHAR HeadLoadTime;
    UCHAR MotorOffTime;
    UCHAR SectorLengthCode;
    UCHAR SectorPerTrack;
    UCHAR ReadWriteGapLength;
    UCHAR DataTransferLength;
    UCHAR FormatGapLength;
    UCHAR FormatFillCharacter;
    UCHAR HeadSettleTime;
    UCHAR MotorSettleTime;
    UCHAR MaximumTrackValue;
    UCHAR DataTransferRate;
};

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

typedef struct _CM_INT13_DRIVE_PARAMETER {
    USHORT DriveSelect;
    ULONG MaxCylinders;
    USHORT SectorsPerTrack;
    USHORT MaxHeads;
    USHORT NumberDrives;
};

typedef struct _CM_KEYBOARD_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR Type;
    UCHAR Subtype;
    USHORT KeyboardFlags;
};

typedef struct _CM_MCA_POS_DATA {
    USHORT AdapterId;
    UCHAR PosData1;
    UCHAR PosData2;
    UCHAR PosData3;
    UCHAR PosData4;
};

typedef struct _CM_MONITOR_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT HorizontalScreenSize;
    USHORT VerticalScreenSize;
    USHORT HorizontalResolution;
    USHORT VerticalResolution;
    USHORT HorizontalDisplayTimeLow;
    USHORT HorizontalDisplayTime;
    USHORT HorizontalDisplayTimeHigh;
    USHORT HorizontalBackPorchLow;
    USHORT HorizontalBackPorch;
    USHORT HorizontalBackPorchHigh;
    USHORT HorizontalFrontPorchLow;
    USHORT HorizontalFrontPorch;
    USHORT HorizontalFrontPorchHigh;
    USHORT HorizontalSyncLow;
    USHORT HorizontalSync;
    USHORT HorizontalSyncHigh;
    USHORT VerticalBackPorchLow;
    USHORT VerticalBackPorch;
    USHORT VerticalBackPorchHigh;
    USHORT VerticalFrontPorchLow;
    USHORT VerticalFrontPorch;
    USHORT VerticalFrontPorchHigh;
    USHORT VerticalSyncLow;
    USHORT VerticalSync;
    USHORT VerticalSyncHigh;
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
    union {
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Generic;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Port;
        struct {
            ULONG Level;
            ULONG Vector;
            ULONG64 Affinity;
        } Interrupt;
        struct {
            struct {
                USHORT Reserved;
                USHORT MessageCount;
                ULONG Vector;
                ULONG64 Affinity;
            } Raw;
            struct {
                ULONG Level;
                ULONG Vector;
                ULONG64 Affinity;
            } Translated;
        } MessageInterrupt;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Memory;
        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;
        struct {
            ULONG Channel;
            ULONG RequestLine;
            UCHAR TransferWidth;
            UCHAR Reserved1;
            UCHAR Reserved2;
            UCHAR Reserved3;
        } DmaV3;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length40;
        } Memory40;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length48;
        } Memory48;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length64;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

typedef struct _CM_PCCARD_DEVICE_DATA {
    UCHAR Flags;
    UCHAR ErrorCode;
    USHORT Reserved;
    ULONG BusData;
    ULONG DeviceId;
    ULONG LegacyBaseAddress;
    UCHAR IRQMap[16];
};

typedef struct _CM_PERF_COUNTERS {
    ULONG64 OpenedKeys;
    ULONG64 DelayCloseKCBs;
    ULONG64 PrivateAllocPages;
    ULONG64 PrivateAllocFree;
    ULONG64 PrivateAllocUsed;
    ULONG64 LookupCacheHit;
    ULONG64 LookupCacheMissFound;
    ULONG64 LookupCacheMissNotFound;
    ULONG64 ViewMap;
    ULONG64 ViewUnMap;
    ULONG64 HiveShrink;
};

typedef struct _CM_PNP_BIOS_DEVICE_NODE {
    USHORT Size;
    UCHAR Node;
    ULONG ProductId;
    UCHAR DeviceType[3];
    USHORT DeviceAttributes;
};

typedef struct _CM_PNP_BIOS_INSTALLATION_CHECK {
    UCHAR Signature[4];
    UCHAR Revision;
    UCHAR Length;
    USHORT ControlField;
    UCHAR Checksum;
    ULONG EventFlagAddress;
    USHORT RealModeEntryOffset;
    USHORT RealModeEntrySegment;
    USHORT ProtectedModeEntryOffset;
    ULONG ProtectedModeCodeBaseAddress;
    ULONG OemDeviceId;
    USHORT RealModeDataBaseAddress;
    ULONG ProtectedModeDataBaseAddress;
};

typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

typedef struct _CM_ROM_BLOCK {
    ULONG Address;
    ULONG Size;
};

typedef struct _CM_SCSI_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR HostIdentifier;
};

typedef struct _CM_SERIAL_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG BaudClock;
};

typedef struct _CM_SONIC_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT DataConfigurationRegister;
    UCHAR EthernetAddress[8];
};

typedef struct _CM_VIDEO_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG VideoClock;
};

typedef struct _COMPOSITE_DEVICE_CAPABILITIES {
    ULONG CapabilityFunctionSuspend : 1;
    ULONG Reserved : 31;
};

typedef struct _COMPRESSED_DATA_INFO {
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};

typedef struct _CONFIGURATION_INFORMATION {
    ULONG DiskCount;
    ULONG FloppyCount;
    ULONG CdRomCount;
    ULONG TapeCount;
    ULONG ScsiPortCount;
    ULONG SerialCount;
    ULONG ParallelCount;
    UCHAR AtDiskPrimaryAddressClaimed;
    UCHAR AtDiskSecondaryAddressClaimed;
    ULONG Version;
    ULONG MediumChangerCount;
};

typedef struct _CONTEXT {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5Home;
    ULONG64 P6Home;
    ULONG ContextFlags;
    ULONG MxCsr;
    USHORT SegCs;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    USHORT SegSs;
    ULONG EFlags;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rbx;
    ULONG64 Rsp;
    ULONG64 Rbp;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Rip;
    struct _XSAVE_FORMAT FltSave;
    struct _M128A Header[2];
    struct _M128A Legacy[8];
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    struct _M128A VectorRegister[26];
    ULONG64 VectorControl;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
};

typedef struct _CONTROLLER_OBJECT {
    SHORT Type;
    SHORT Size;
    PVOID ControllerExtension;
    struct _KDEVICE_QUEUE DeviceWaitQueue;
    ULONG Spare1;
    union _LARGE_INTEGER Spare2;
};

typedef struct _COUNTED_REASON_CONTEXT {
    ULONG Version;
    ULONG Flags;
    struct _UNICODE_STRING ResourceFileName;
    USHORT ResourceReasonId;
    ULONG StringCount;
    struct _UNICODE_STRING *ReasonStrings;
    struct _UNICODE_STRING SimpleString;
};

typedef struct _CPE_DRIVER_INFO {
    PVOID ExceptionCallback;
    PVOID DpcCallback;
    PVOID DeviceContext;
};

typedef struct _CPU_CONFIG_RECORD {
    ULONG ProcessorSpeed;
    ULONG NumberOfProcessors;
    ULONG MemorySize;
    ULONG PageSize;
    ULONG AllocationGranularity;
    WCHAR ComputerName[256];
    WCHAR DomainName[134];
    ULONG64 HyperThreadingFlag;
    ULONG64 HighestUserAddress;
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    UCHAR NxEnabled;
    UCHAR PaeEnabled;
    ULONG MemorySpeed;
};

typedef struct _CRASHDUMP_FUNCTIONS_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG PowerOn;
};

typedef struct _CREATE_USER_PROCESS_ECP_CONTEXT {
    USHORT Size;
    USHORT Reserved;
    PVOID AccessToken;
};

typedef struct _CSTRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _CURDIR {
    struct _UNICODE_STRING DosPath;
    PVOID Handle;
};

typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
    ULONG Size;
    PWCHAR TriggerId;
};

typedef struct _D3COLD_AUX_POWER_AND_TIMING_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID RequestCorePowerRail;
    PLONG RequestAuxPower;
    PLONG RequestPerstDelay;
};

typedef struct _D3COLD_SUPPORT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID SetD3ColdSupport;
    PLONG GetIdleWakeInfo;
    PLONG GetD3ColdCapability;
    PLONG GetBusDriverD3ColdSupport;
    PVOID GetLastTransitionStatus;
};

typedef struct _DEBUGGING_DEVICE_IN_USE {
    enum KD_NAMESPACE_ENUM NameSpace;
    ULONG StructureLength;
    struct _ACPI_DEBUGGING_DEVICE_IN_USE AcpiDevice;
    struct _PCI_DEBUGGING_DEVICE_IN_USE PciDevice;
};

typedef struct _DEBUGGING_DEVICE_IN_USE_INFORMATION {
    ULONG DeviceCount;
    struct _DEBUGGING_DEVICE_IN_USE Device[1];
};

typedef struct _DEBUG_DEVICE_DESCRIPTOR {
    ULONG Bus;
    ULONG Slot;
    USHORT Segment;
    USHORT VendorID;
    USHORT DeviceID;
    UCHAR BaseClass;
    UCHAR SubClass;
    UCHAR ProgIf;
    UCHAR Flags;
    UCHAR DbgHalScratchAllocated : 1;
    UCHAR DbgBarsMapped : 1;
    UCHAR DbgScratchAllocated : 1;
    UCHAR Initialized;
    UCHAR Configured;
    struct DEBUG_DEVICE_ADDRESS BaseAddress[6];
    struct DEBUG_MEMORY_REQUIREMENTS Memory;
    USHORT PortType;
    USHORT PortSubtype;
    PVOID OemData;
    ULONG OemDataLength;
    enum KD_NAMESPACE_ENUM NameSpace;
    PWCHAR NameSpacePath;
    ULONG NameSpacePathLength;
    ULONG TransportType;
    struct _DEBUG_TRANSPORT_DATA TransportData;
};

typedef struct _DEBUG_TRANSPORT_DATA {
    ULONG HwContextSize;
    UCHAR UseSerialFraming;
    UCHAR ValidUSBCoreId;
    UCHAR USBCoreId;
};

typedef struct _DEVICE_CAPABILITIES {
    USHORT Size;
    USHORT Version;
    ULONG DeviceD1 : 1;
    ULONG DeviceD2 : 1;
    ULONG LockSupported : 1;
    ULONG EjectSupported : 1;
    ULONG Removable : 1;
    ULONG DockDevice : 1;
    ULONG UniqueID : 1;
    ULONG SilentInstall : 1;
    ULONG RawDeviceOK : 1;
    ULONG SurpriseRemovalOK : 1;
    ULONG WakeFromD0 : 1;
    ULONG WakeFromD1 : 1;
    ULONG WakeFromD2 : 1;
    ULONG WakeFromD3 : 1;
    ULONG HardwareDisabled : 1;
    ULONG NonDynamic : 1;
    ULONG WarmEjectSupported : 1;
    ULONG NoDisplayInUI : 1;
    ULONG Reserved1 : 1;
    ULONG WakeFromInterrupt : 1;
    ULONG SecureDevice : 1;
    ULONG ChildOfVgaEnabledBridge : 1;
    ULONG DecodeIoOnBoot : 1;
    ULONG Reserved : 9;
    ULONG Address;
    ULONG UINumber;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _SYSTEM_POWER_STATE SystemWake;
    enum _DEVICE_POWER_STATE DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct _DEVICE_DESCRIPTION {
    ULONG Version;
    UCHAR Master;
    UCHAR ScatterGather;
    UCHAR DemandMode;
    UCHAR AutoInitialize;
    UCHAR Dma32BitAddresses;
    UCHAR IgnoreCount;
    UCHAR Reserved1;
    UCHAR Dma64BitAddresses;
    ULONG BusNumber;
    ULONG DmaChannel;
    enum _INTERFACE_TYPE InterfaceType;
    enum _DMA_WIDTH DmaWidth;
    enum _DMA_SPEED DmaSpeed;
    ULONG MaximumLength;
    ULONG DmaPort;
    ULONG DmaAddressWidth;
    ULONG DmaControllerInstance;
    ULONG DmaRequestLine;
    union _LARGE_INTEGER DeviceAddress;
};

typedef struct _DEVICE_FAULT_CONFIGURATION {
    PVOID FaultHandler;
    PVOID FaultContext;
};

typedef struct _DEVICE_FLAGS {
    ULONG Failed : 1;
    ULONG ReadOnly : 1;
    ULONG Removable : 1;
    ULONG ConsoleIn : 1;
    ULONG ConsoleOut : 1;
    ULONG Input : 1;
    ULONG Output : 1;
};

typedef struct _DEVICE_HANDLER_OBJECT {
};

typedef struct _DEVICE_INTERFACE_CHANGE_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
    struct _GUID InterfaceClassGuid;
    struct _UNICODE_STRING *SymbolicLinkName;
};

typedef struct _DEVICE_OBJECT {
    SHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    struct _IO_TIMER *Timer;
    ULONG Flags;
    ULONG Characteristics;
    struct _VPB *Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CHAR StackSize;
     <unnamed-type-Queue>;
    union {
        struct _LIST_ENTRY ListEntry;
        struct _WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    struct _KDEVICE_QUEUE DeviceQueue;
    struct _KDPC Dpc;
    ULONG ActiveThreadCount;
    PVOID SecurityDescriptor;
    struct _KEVENT DeviceLock;
    USHORT SectorSize;
    USHORT Spare1;
    struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
    PVOID Reserved;
    VOID _DEVICE_OBJECT;
    VOID _DEVICE_OBJECT;
    struct _DEVICE_OBJECT *operator=;
    struct _DEVICE_OBJECT *operator=;
};

typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
};

typedef struct _DEVICE_RELATIONS {
    ULONG Count;
    struct _DEVICE_OBJECT *Objects[1];
};

typedef struct _DEVICE_RESET_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG DeviceReset;
    ULONG SupportedResetTypes;
    PVOID Reserved;
};

typedef struct _DEVOBJ_EXTENSION {
    SHORT Type;
    USHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PowerFlags;
    struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
    ULONG ExtensionFlags;
    PVOID DeviceNode;
    struct _DEVICE_OBJECT *AttachedTo;
    LONG StartIoCount;
    LONG StartIoKey;
    ULONG StartIoFlags;
    struct _VPB *Vpb;
    PVOID DependencyNode;
    PVOID InterruptContext;
    PVOID VerifierContext;
};

typedef struct _DEVPROPCOMPKEY {
    struct _DEVPROPKEY Key;
    enum _DEVPROPSTORE Store;
    PWCHAR LocaleName;
};

typedef struct _DEVPROPERTY {
    struct _DEVPROPCOMPKEY CompKey;
    ULONG Type;
    ULONG BufferSize;
    PVOID Buffer;
};

typedef struct _DEVPROPKEY {
    struct _GUID fmtid;
    ULONG pid;
};

typedef struct _DISK_SIGNATURE {
    ULONG PartitionStyle;
    struct {
        ULONG Signature;
        ULONG CheckSum;
    } Mbr;
    struct {
        struct _GUID DiskId;
    } Gpt;
};

typedef struct _DISPATCHER_CONTEXT {
    ULONG64 ControlPc;
    ULONG64 ImageBase;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionEntry;
    ULONG64 EstablisherFrame;
    ULONG64 TargetIp;
    struct _CONTEXT *ContextRecord;
    enum _EXCEPTION_DISPOSITION *LanguageHandler;
    PVOID HandlerData;
    struct _UNWIND_HISTORY_TABLE *HistoryTable;
    ULONG ScopeIndex;
    ULONG Fill0;
};

typedef struct _DISPATCHER_HEADER {
    LONG Lock;
    LONG LockNV;
    UCHAR Type;
    UCHAR Signalling;
    UCHAR Size;
    UCHAR Reserved1;
    UCHAR TimerType;
    UCHAR TimerControlFlags;
    UCHAR Absolute : 1;
    UCHAR Wake : 1;
    UCHAR EncodedTolerableDelay : 6;
    UCHAR Hand;
    UCHAR TimerMiscFlags;
    UCHAR Index : 6;
    UCHAR Inserted : 1;
    UCHAR Expired : 1;
    UCHAR Timer2Type;
    UCHAR Timer2Flags;
    UCHAR Timer2Inserted : 1;
    UCHAR Timer2Expiring : 1;
    UCHAR Timer2CancelPending : 1;
    UCHAR Timer2SetPending : 1;
    UCHAR Timer2Running : 1;
    UCHAR Timer2Disabled : 1;
    UCHAR Timer2ReservedFlags : 2;
    UCHAR Timer2ComponentId;
    UCHAR Timer2RelativeId;
    UCHAR QueueType;
    UCHAR QueueControlFlags;
    UCHAR Abandoned : 1;
    UCHAR DisableIncrement : 1;
    UCHAR QueueReservedControlFlags : 6;
    UCHAR QueueSize;
    UCHAR QueueReserved;
    UCHAR ThreadType;
    UCHAR ThreadReserved;
    UCHAR ThreadControlFlags;
    UCHAR CycleProfiling : 1;
    UCHAR CounterProfiling : 1;
    UCHAR GroupScheduling : 1;
    UCHAR AffinitySet : 1;
    UCHAR Tagged : 1;
    UCHAR EnergyProfiling : 1;
    UCHAR SchedulerAssist : 1;
    UCHAR ThreadReservedControlFlags : 1;
    UCHAR DebugActive;
    UCHAR ActiveDR7 : 1;
    UCHAR Instrumented : 1;
    UCHAR Minimal : 1;
    UCHAR Reserved4 : 3;
    UCHAR UmsScheduled : 1;
    UCHAR UmsPrimary : 1;
    UCHAR MutantType;
    UCHAR MutantSize;
    UCHAR DpcActive;
    UCHAR MutantReserved;
    LONG SignalState;
    struct _LIST_ENTRY WaitListHead;
};

typedef struct _DMA_ADAPTER {
    USHORT Version;
    USHORT Size;
    struct _DMA_OPERATIONS *DmaOperations;
};

typedef struct _DMA_ADAPTER_INFO {
    ULONG Version;
    struct _DMA_ADAPTER_INFO_V1 V1;
};

typedef struct _DMA_ADAPTER_INFO_V1 {
    ULONG ReadDmaCounterAvailable;
    ULONG ScatterGatherLimit;
    ULONG DmaAddressWidth;
    ULONG Flags;
    ULONG MinimumTransferUnit;
};

typedef struct _DMA_CONFIGURATION_BYTE0 {
    UCHAR Channel : 3;
    UCHAR Reserved : 3;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _DMA_CONFIGURATION_BYTE1 {
    UCHAR Reserved0 : 2;
    UCHAR TransferSize : 2;
    UCHAR Timing : 2;
    UCHAR Reserved1 : 2;
};

typedef struct _DMA_IOMMU_INTERFACE {
    ULONG Version;
    PLONG CreateDomain;
    PLONG DeleteDomain;
    PLONG AttachDevice;
    PLONG DetachDevice;
    PLONG FlushDomain;
    PLONG FlushDomainByVaList;
    PLONG QueryInputMappings;
    PLONG MapLogicalRange;
    PLONG UnmapLogicalRange;
    PLONG MapIdentityRange;
    PLONG UnmapIdentityRange;
    PLONG SetDeviceFaultReporting;
    PLONG ConfigureDomain;
};

typedef struct _DMA_OPERATIONS {
    ULONG Size;
    PVOID PutDmaAdapter;
    PVOID *AllocateCommonBuffer;
    PVOID FreeCommonBuffer;
    PLONG AllocateAdapterChannel;
    PUCHAR FlushAdapterBuffers;
    PVOID FreeAdapterChannel;
    PVOID FreeMapRegisters;
    union _LARGE_INTEGER *MapTransfer;
    PULONG GetDmaAlignment;
    PULONG ReadDmaCounter;
    PLONG GetScatterGatherList;
    PVOID PutScatterGatherList;
    PLONG CalculateScatterGatherList;
    PLONG BuildScatterGatherList;
    PLONG BuildMdlFromScatterGatherList;
    PLONG GetDmaAdapterInfo;
    PLONG GetDmaTransferInfo;
    PLONG InitializeDmaTransferContext;
    PVOID *AllocateCommonBufferEx;
    PLONG AllocateAdapterChannelEx;
    PLONG ConfigureAdapterChannel;
    PUCHAR CancelAdapterChannel;
    PLONG MapTransferEx;
    PLONG GetScatterGatherListEx;
    PLONG BuildScatterGatherListEx;
    PLONG FlushAdapterBuffersEx;
    PVOID FreeAdapterObject;
    PLONG CancelMappedTransfer;
    PLONG AllocateDomainCommonBuffer;
    PLONG FlushDmaBuffer;
    PLONG JoinDmaDomain;
    PLONG LeaveDmaDomain;
    PVOID *GetDmaDomain;
    PVOID *AllocateCommonBufferWithBounds;
};

typedef struct _DMA_TRANSFER_INFO {
    ULONG Version;
    struct _DMA_TRANSFER_INFO_V1 V1;
    struct _DMA_TRANSFER_INFO_V2 V2;
};

typedef struct _DMA_TRANSFER_INFO_V1 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
};

typedef struct _DMA_TRANSFER_INFO_V2 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
    ULONG LogicalPageCount;
};

typedef struct _DOMAIN_CONFIGURATION {
    enum _DOMAIN_CONFIGURATION_ARCH Type;
    struct _DOMAIN_CONFIGURATION_ARM64 Arm64;
};

typedef struct _DOMAIN_CONFIGURATION_ARM64 {
    union _LARGE_INTEGER Ttbr0;
    union _LARGE_INTEGER Ttbr1;
    ULONG Mair0;
    ULONG Mair1;
    UCHAR InputSize0;
    UCHAR InputSize1;
    UCHAR CoherentTableWalks;
    UCHAR TranslationEnabled;
};

typedef struct _DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK {
    ULONG Signature;
    USHORT Revision;
    USHORT Size;
    USHORT DpcWatchdogProfileOffset;
    ULONG DpcWatchdogProfileLength;
};

typedef struct _DRIVER_EXTENSION {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG AddDevice;
    ULONG Count;
    struct _UNICODE_STRING ServiceKeyName;
};

typedef struct _DRIVER_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG Flags;
    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    struct _DRIVER_EXTENSION *DriverExtension;
    struct _UNICODE_STRING DriverName;
    struct _UNICODE_STRING *HardwareDatabase;
    struct _FAST_IO_DISPATCH *FastIoDispatch;
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG MajorFunction[28];
};

typedef struct _DRIVER_VERIFIER_THUNK_PAIRS {
    PULONG64 PristineRoutine;
    PULONG64 NewRoutine;
};

typedef struct _DRIVE_LAYOUT_INFORMATION {
};

typedef struct _DRV_EXTENSION {
    struct _UNICODE_STRING ParametersRegistryPath;
};

typedef struct _ECP_LIST {
};

typedef struct _EISA_DMA_CONFIGURATION {
    struct _DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
    struct _DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
};

typedef struct _EISA_IRQ_CONFIGURATION {
    struct _EISA_IRQ_DESCRIPTOR ConfigurationByte;
    UCHAR Reserved;
};

typedef struct _EISA_IRQ_DESCRIPTOR {
    UCHAR Interrupt : 4;
    UCHAR Reserved : 1;
    UCHAR LevelTriggered : 1;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _EISA_MEMORY_CONFIGURATION {
    struct _EISA_MEMORY_TYPE ConfigurationByte;
    UCHAR DataSize;
    USHORT AddressLowWord;
    UCHAR AddressHighByte;
    USHORT MemorySize;
};

typedef struct _EISA_MEMORY_TYPE {
    UCHAR ReadWrite : 1;
    UCHAR Cached : 1;
    UCHAR Reserved0 : 1;
    UCHAR Type : 2;
    UCHAR Shared : 1;
    UCHAR Reserved1 : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _EISA_PORT_CONFIGURATION {
    struct _EISA_PORT_DESCRIPTOR Configuration;
    USHORT PortAddress;
};

typedef struct _EISA_PORT_DESCRIPTOR {
    UCHAR NumberPorts : 5;
    UCHAR Reserved : 1;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _EJOB {
};

typedef struct _ENLISTMENT_BASIC_INFORMATION {
    struct _GUID EnlistmentId;
    struct _GUID TransactionId;
    struct _GUID ResourceManagerId;
};

typedef struct _ENLISTMENT_CRM_INFORMATION {
    struct _GUID CrmTransactionManagerId;
    struct _GUID CrmResourceManagerId;
    struct _GUID CrmEnlistmentId;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<1> {
    CHAR type;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<2> {
    SHORT type;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<4> {
    LONG type;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<8> {
    LONG64 type;
};

typedef struct _EPROCESS {
};

typedef struct _ERESOURCE {
    struct _LIST_ENTRY SystemResourcesList;
    struct _OWNER_ENTRY *OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    UCHAR ReservedLowFlags;
    UCHAR WaiterPriority;
    PVOID SharedWaiters;
    PVOID ExclusiveWaiters;
    struct _OWNER_ENTRY OwnerEntry;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;
    PVOID Reserved2;
    PVOID Address;
    ULONG64 CreatorBackTraceIndex;
    ULONG64 SpinLock;
};

typedef struct _ETHREAD {
};

typedef struct _ETW_ALL_POSSIBLE_NOTIFY_ROUTINES {
    PVOID DiskIoCompletionRoutine;
    PVOID DiskIoInitiationRoutine;
    PVOID OpticalCompletionRoutine;
    PVOID OpticalInitiationRoutine;
    PVOID FileNameRoutine;
    PVOID FileInitiationRoutine;
    PVOID FileCompletionRoutine;
    PVOID TdiRoutine;
    PVOID SplitIoRoutine;
    PVOID FltIoInitiationRoutine;
    PVOID FltIoCompletionRoutine;
    PVOID KernelTraceTimeStampRoutine;
    PVOID WdfRoutine;
    PVOID WdfSystemRoutine;
    PVOID FltIoRedirectionNotifyRoutine;
};

typedef struct _ETW_ANTI_STARVATION_BOOST_EVENT {
    ULONG ThreadId;
    USHORT ProcessorIndex;
    CHAR OldPriority;
    UCHAR SpareByte;
};

typedef struct _ETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT {
    PVOID Lock;
    ULONG ThreadId;
    ULONG BoostBitmap;
};

typedef struct _ETW_AUTOBOOST_NO_ENTRIES_EVENT {
    PVOID Lock;
    ULONG ThreadId;
};

typedef struct _ETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT {
    PVOID Lock;
    ULONG ThreadId;
    CHAR NewCpuPriorityFloor;
    CHAR OldCpuPriority;
    CHAR NewIoPriorityFloor : 3;
    CHAR OldIoPriority : 3;
    CHAR NewIoQoSPriorityFloor : 1;
    CHAR OldIoQoSPriority : 1;
    CHAR IoPriorities;
    UCHAR ExecutingDpc : 1;
    UCHAR WakeupBoost : 1;
    UCHAR BoostedOutstandingIrps : 2;
    UCHAR Reserved : 4;
    UCHAR Flags;
};

typedef struct _ETW_BUFFER_CONTEXT {
    UCHAR ProcessorNumber;
    UCHAR Alignment;
    USHORT ProcessorIndex;
    USHORT LoggerId;
};

typedef struct _ETW_CANCEL_KTIMER2_EVENT {
    ULONG64 TimerKey;
};

typedef struct _ETW_CANCEL_TIMER_EVENT {
    ULONG64 TimerAddress;
};

typedef struct _ETW_CLOCK_CONFIGURATION_EVENT {
    ULONG KnownType;
    ULONG Capabilities;
    enum _PERFINFO_DYNAMIC_TICK_DISABLE_REASON DisableReason;
};

typedef struct _ETW_CLOCK_STATE_CHANGE_EVENT {
    UCHAR NewState;
    UCHAR PrevState;
    UCHAR Reserved[6];
    ULONG64 DeliveredIncrement;
    ULONG64 RequestedIncrement;
    ULONG64 NextClockUpdateTime;
};

typedef struct _ETW_CLOCK_TIME_UPDATE {
    ULONG64 InterruptTime;
    ULONG ClockOwner;
};

typedef struct _ETW_CPU_CACHE_FLUSH_EVENT {
    PVOID Address;
    ULONG64 Bytes;
    UCHAR Clean;
    UCHAR FullFlush;
    UCHAR Rectangle;
    UCHAR Reserved0;
    ULONG Reserved1;
};

typedef struct _ETW_CREATEDELETE_OBJECT_EVENT {
    PVOID Object;
    USHORT ObjectType;
};

typedef struct _ETW_CREATE_HANDLE_EVENT {
    PVOID Object;
    ULONG Handle;
    USHORT ObjectType;
};

typedef struct _ETW_CRITSEC_EVENT_COLLISION {
    struct _SYSTEM_TRACE_HEADER Header;
    ULONG LockCount;
    ULONG SpinCount;
    PVOID OwningThread;
    PVOID Address;
};

typedef struct _ETW_CRITSEC_EVENT_INIT {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID SpinCount;
    PVOID Address;
};

typedef struct _ETW_DEBUG_PRINT_EVENT {
    ULONG Component;
    ULONG Level;
    CHAR Message[1];
};

typedef struct _ETW_DFSS_RELEASE_THREAD_ON_IDLE {
    ULONG CurrentGeneration;
    ULONG SessionSelectedToRun;
    ULONG64 CycleBaseAllowance;
    LONG64 CyclesRemaining;
};

typedef struct _ETW_DFSS_START_NEW_INTERVAL {
    ULONG CurrentGeneration;
    ULONG SessionCount;
    ULONG64 TotalCycleCredit;
    ULONG64 TotalCyclesAccumulated;
    struct _ETW_PER_SESSION_QUOTA SessionQuota[1];
};

typedef struct _ETW_DISABLE_KTIMER2_EVENT {
    ULONG64 TimerKey;
    ULONG64 DisableCallback;
    ULONG64 DisableContextKey;
    UCHAR Flags;
};

typedef struct _ETW_DISKIO_FLUSH_BUFFERS_V2 {
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG64 HighResResponseTime;
    PVOID IrpAddr;
};

typedef struct _ETW_DISKIO_FLUSH_BUFFERS_V3 {
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG64 HighResResponseTime;
    PVOID IrpAddr;
    ULONG IssuingThreadId;
};

typedef struct _ETW_DISKIO_READWRITE_V2 {
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG Size;
    ULONG Reserved;
    ULONG64 ByteOffset;
    PVOID FileObject;
    PVOID IrpAddr;
    ULONG64 HighResResponseTime;
};

typedef struct _ETW_DISKIO_READWRITE_V3 {
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG Size;
    ULONG Reserved;
    ULONG64 ByteOffset;
    PVOID FileObject;
    PVOID IrpAddr;
    ULONG64 HighResResponseTime;
    ULONG IssuingThreadId;
};

typedef struct _ETW_DUPLICATE_HANDLE_EVENT {
    PVOID Object;
    ULONG SourceHandle;
    ULONG TargetHandle;
    ULONG TargetProcessId;
    USHORT ObjectType;
    ULONG SourceProcessId;
};

typedef struct _ETW_FINALIZE_KTIMER2_EVENT {
    ULONG64 TimerKey;
    ULONG64 DisableCallback;
    ULONG64 DisableContextKey;
};

typedef struct _ETW_HEAP_EVENT_ALLOC {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG64 Size;
    PVOID Address;
    ULONG Source;
};

typedef struct _ETW_HEAP_EVENT_COMMON {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID Handle;
};

typedef struct _ETW_HEAP_EVENT_CONTRACTION {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG64 DeCommitSize;
    PVOID DeCommitAddress;
    ULONG64 FreeSpace;
    ULONG64 CommittedSpace;
    ULONG64 ReservedSpace;
    ULONG NoOfUCRs;
    ULONG64 AllocatedSpace;
};

typedef struct _ETW_HEAP_EVENT_CREATE {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG Flags;
    ULONG64 ReserveSize;
    ULONG64 CommitSize;
    ULONG64 AllocatedSize;
};

typedef struct _ETW_HEAP_EVENT_EXPANSION {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG64 CommittedSize;
    PVOID Address;
    ULONG64 FreeSpace;
    ULONG64 CommittedSpace;
    ULONG64 ReservedSpace;
    ULONG NoOfUCRs;
    ULONG64 AllocatedSpace;
};

typedef struct _ETW_HEAP_EVENT_FREE {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID Address;
    ULONG Source;
};

typedef struct _ETW_HEAP_EVENT_REALLOC {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID NewAddress;
    PVOID OldAddress;
    ULONG64 NewSize;
    ULONG64 OldSize;
    ULONG Source;
};

typedef struct _ETW_HEAP_EVENT_RUNDOWN {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG Flags;
    ULONG ProcessId;
    ULONG RangeCount;
    ULONG Reserved;
    struct _ETW_HEAP_EVENT_RUNDOWN_RANGE Ranges[1];
};

typedef struct _ETW_HEAP_EVENT_RUNDOWN_RANGE {
    PVOID Address;
    ULONG64 Size;
};

typedef struct _ETW_HEAP_EVENT_SNAPSHOT {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG64 FreeSpace;
    ULONG64 CommittedSpace;
    ULONG64 ReservedSpace;
    ULONG Flags;
    ULONG ProcessId;
    ULONG64 LargeUCRSpace;
    ULONG FreeListLength;
    ULONG UCRLength;
    ULONG64 AllocatedSpace;
};

typedef struct _ETW_IDEAL_PROCESSOR_EVENT {
    ULONG ThreadId;
    ULONG OldIdealProcessor;
    ULONG NewIdealProcessor;
};

typedef struct _ETW_KERNEL_TRACE_TIMESTAMP {
    union _LARGE_INTEGER KernelTraceTimeStamp[4];
};

typedef struct _ETW_KQUEUE_DEQUEUE_EVENT {
    ULONG ThreadId;
    ULONG EntryCount;
    PVOID Entries[1];
};

typedef struct _ETW_KQUEUE_ENQUEUE_EVENT {
    PVOID Entry;
    ULONG ThreadId;
};

typedef struct _ETW_LBR_ENTRY {
    PVOID FromAddress;
    PVOID ToAddress;
    PVOID Reserved;
};

typedef struct _ETW_OBJECT_HANDLE_EVENT {
    PVOID Object;
    ULONG ProcessId;
    ULONG Handle;
    USHORT ObjectType;
};

typedef struct _ETW_OBJECT_TYPE_EVENT {
    USHORT ObjectType;
    USHORT Reserved;
    WCHAR Name[1];
};

typedef struct _ETW_OPTICALIO_FLUSH_BUFFERS {
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG64 HighResResponseTime;
    PVOID IrpAddr;
    ULONG IssuingThreadId;
};

typedef struct _ETW_OPTICALIO_INIT {
    PVOID Irp;
    ULONG IssuingThreadId;
};

typedef struct _ETW_OPTICALIO_READWRITE {
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG Size;
    ULONG Reserved;
    ULONG64 ByteOffset;
    PVOID FileObject;
    PVOID IrpAddr;
    ULONG64 HighResResponseTime;
    ULONG IssuingThreadId;
};

typedef struct _ETW_PER_SESSION_QUOTA {
    ULONG SessionId;
    ULONG CpuShareWeight;
    LONG64 CapturedWeightData;
    ULONG64 CyclesAccumulated;
};

typedef struct _ETW_POOL_EVENT {
    ULONG PoolType;
    ULONG Tag;
    ULONG64 NumberOfBytes;
    PVOID Entry;
};

typedef struct _ETW_PRIORITY_EVENT {
    ULONG ThreadId;
    CHAR OldPriority;
    CHAR NewPriority;
    CHAR DynamicPriority;
    CHAR Reserved;
};

typedef struct _ETW_READY_THREAD_EVENT {
    ULONG ThreadId;
    UCHAR AdjustReason;
    CHAR AdjustIncrement;
    UCHAR ExecutingDpc : 1;
    UCHAR KernelStackNotResident : 1;
    UCHAR ProcessOutOfMemory : 1;
    UCHAR DirectSwitchAttempt : 1;
    UCHAR Reserved : 4;
    UCHAR Flags;
    UCHAR SpareByte;
};

typedef struct _ETW_REFDEREF_OBJECT_EVENT {
    PVOID Object;
    ULONG Tag;
    ULONG Count;
};

typedef struct _ETW_REF_CLOCK {
    union _LARGE_INTEGER StartTime;
    union _LARGE_INTEGER StartPerfClock;
};

typedef struct _ETW_REGNOTIF_REGISTER {
    PVOID Notification;
    PVOID Kcb;
    UCHAR Type;
    UCHAR WatchTree;
    UCHAR Primary;
};

typedef struct _ETW_SET_KTIMER2_EVENT {
    ULONG64 DueTime;
    ULONG64 MaximumDueTime;
    ULONG64 Period;
    ULONG64 TimerKey;
    ULONG64 Callback;
    ULONG64 CallbackContextKey;
    UCHAR Flags;
};

typedef struct _ETW_SET_TIMER_EVENT {
    ULONG64 ExpectedDueTime;
    ULONG64 TimerAddress;
    USHORT TargetProcessorGroup;
    UCHAR TargetProcessorIndex;
    UCHAR Flags;
    ULONG Period;
    UCHAR EncodedDelay;
    UCHAR Reserved0;
    USHORT UniqueProcessId;
};

typedef struct _ETW_STACK_CACHING_CONFIG {
    ULONG CacheSize;
    ULONG BucketCount;
};

typedef struct _ETW_THREAD_AFFINITY_EVENT {
    ULONG64 Mask;
    ULONG ThreadId;
    USHORT Group;
    USHORT Reserved;
};

typedef struct _ETW_THREAD_EVENT_SUBPROCESSTAG {
    struct _SYSTEM_TRACE_HEADER Header;
    ULONG OldTag;
    ULONG NewTag;
};

typedef struct _ETW_THREAD_SET_NAME_EVENT {
    ULONG ProcessId;
    ULONG ThreadId;
    WCHAR ThreadName[1];
};

typedef struct _ETW_TIMER_EXPIRATION_EVENT {
    ULONG64 ExpectedDueTime;
    ULONG64 TimerAddress;
    ULONG64 DeferredRoutine;
    UCHAR EncodedDelay;
};

typedef struct _ETW_TIMER_EXPIRATION_START_EVENT {
    ULONG64 InterruptTime;
    UCHAR HrTimerExpirationOnly;
};

typedef struct _ETW_TP_EVENT_CALLBACK_CANCEL {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    PVOID TaskId;
    PVOID Callback;
    PVOID Context;
    PVOID SubProcessTag;
    ULONG CancelCount;
};

typedef struct _ETW_TP_EVENT_CALLBACK_ENQUEUE {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    PVOID TaskId;
    PVOID Callback;
    PVOID Context;
    PVOID SubProcessTag;
};

typedef struct _ETW_TP_EVENT_CALLBACK_START {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    PVOID TaskId;
    PVOID Callback;
    PVOID Context;
    PVOID SubProcessTag;
};

typedef struct _ETW_TP_EVENT_POOL_CLOSE {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
};

typedef struct _ETW_TP_EVENT_POOL_CREATE {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
};

typedef struct _ETW_TP_EVENT_POOL_TH_MAX_SET {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    ULONG ThreadNum;
};

typedef struct _ETW_TP_EVENT_POOL_TH_MIN_SET {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    ULONG ThreadNum;
};

typedef struct _ETW_TP_EVENT_TIMER_CANCELLED {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
    PVOID Timer;
};

typedef struct _ETW_TP_EVENT_TIMER_CANCEL_NTTIMER {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
};

typedef struct _ETW_TP_EVENT_TIMER_EXPIRATION {
    struct _SYSTEM_TRACE_HEADER Header;
    LONG64 DueTime;
    PVOID SubQueue;
    PVOID Timer;
    ULONG Period;
    ULONG WindowLength;
};

typedef struct _ETW_TP_EVENT_TIMER_EXPIRATION_BEGIN {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
};

typedef struct _ETW_TP_EVENT_TIMER_EXPIRATION_END {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
};

typedef struct _ETW_TP_EVENT_TIMER_SET {
    struct _SYSTEM_TRACE_HEADER Header;
    LONG64 DueTime;
    PVOID SubQueue;
    PVOID Timer;
    ULONG Period;
    ULONG WindowLength;
    ULONG Absolute;
};

typedef struct _ETW_TP_EVENT_TIMER_SET_NTTIMER {
    struct _SYSTEM_TRACE_HEADER Header;
    LONG64 DueTime;
    PVOID SubQueue;
    ULONG TolerableDelay;
};

typedef struct _ETW_TP_EVENT_WORKER_NUMANODE_SWITCH {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    ULONG CurrentNode;
    ULONG NextNode;
    USHORT CurrentGroup;
    USHORT NextGroup;
    ULONG CurrentWorkerCount;
    ULONG NextWorkerCount;
};

typedef struct _ETW_TRACE_SESSION_SETTINGS {
    ULONG Version;
    ULONG BufferSize;
    ULONG MinimumBuffers;
    ULONG MaximumBuffers;
    ULONG LoggerMode;
    ULONG FlushTimer;
    ULONG FlushThreshold;
    ULONG ClockType;
};

typedef struct _ETW_UMS_EVENT_CONTEXT_SWITCH {
    struct _SYSTEM_TRACE_HEADER Header;
    ULONG ScheduledThreadId;
    ULONG SwitchCount;
    ULONG KernelYieldCount;
    ULONG MixedYieldCount;
    ULONG YieldCount;
};

typedef struct _ETW_UMS_EVENT_DIRECTED_SWITCH_END {
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG PrimaryThreadId;
    ULONG SwitchFlags;
};

typedef struct _ETW_UMS_EVENT_DIRECTED_SWITCH_START {
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG PrimaryThreadId;
    ULONG SwitchFlags;
};

typedef struct _ETW_UMS_EVENT_DISASSOCIATE {
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG PrimaryThreadId;
    ULONG UmsApcControlFlags;
    LONG Status;
};

typedef struct _ETW_UMS_EVENT_PARK {
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG ParkFlags;
};

typedef struct _ETW_WAKE_COUNTER_EVENT {
    PVOID Object;
    ULONG64 Tag;
    ULONG ProcessId;
    LONG Count;
};

typedef struct _ETW_WNF_EVENT_CALLBACK {
    struct _SYSTEM_TRACE_HEADER Header;
    union _LARGE_INTEGER StateName;
    PVOID Subscription;
    PVOID NameSub;
    PVOID Callback;
    ULONG ChangeStamp;
    ULONG DeliveryFlags;
    ULONG Return;
};

typedef struct _ETW_WNF_EVENT_NAME_SUB_RUNDOWN {
    struct _SYSTEM_TRACE_HEADER Header;
    union _LARGE_INTEGER StateName;
    PVOID NameSub;
};

typedef struct _ETW_WNF_EVENT_PUBLISH {
    struct _SYSTEM_TRACE_HEADER Header;
    union _LARGE_INTEGER StateName;
    ULONG DataLength;
};

typedef struct _ETW_WNF_EVENT_SUBSCRIBE {
    struct _SYSTEM_TRACE_HEADER Header;
    union _LARGE_INTEGER StateName;
    PVOID Subscription;
    PVOID NameSub;
    PVOID Callback;
    ULONG RefCount;
    ULONG DeliveryFlags;
};

typedef struct _EVENT_DATA_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Reserved;
    UCHAR Type;
    UCHAR Reserved1;
    USHORT Reserved2;
};

typedef struct _EVENT_DESCRIPTOR {
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONG64 Keyword;
};

typedef struct _EVENT_FILTER_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Type;
};

typedef struct _EVENT_FILTER_EVENT_ID {
    UCHAR FilterIn;
    UCHAR Reserved;
    USHORT Count;
    USHORT Events[1];
};

typedef struct _EVENT_FILTER_EVENT_NAME {
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    UCHAR Level;
    UCHAR FilterIn;
    USHORT NameCount;
    UCHAR Names[1];
};

typedef struct _EVENT_FILTER_HEADER {
    USHORT Id;
    UCHAR Version;
    UCHAR Reserved[5];
    ULONG64 InstanceId;
    ULONG Size;
    ULONG NextOffset;
};

typedef struct _EVENT_FILTER_LEVEL_KW {
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    UCHAR Level;
    UCHAR FilterIn;
};

typedef struct _EVENT_INSTANCE_GUID_HEADER {
    USHORT Size;
    USHORT FieldTypeFlags;
    UCHAR HeaderType;
    UCHAR MarkerFlags;
    ULONG Version;
    struct {
        UCHAR Type;
        UCHAR Level;
        USHORT Version;
    } Class;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID Guid;
    ULONG64 GuidPtr;
    ULONG ClientContext;
    ULONG Flags;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    ULONG InstanceId;
    ULONG ParentInstanceId;
    struct _GUID ParentGuid;
};

typedef struct _EVENT_INSTANCE_HEADER {
    USHORT Size;
    USHORT FieldTypeFlags;
    UCHAR HeaderType;
    UCHAR MarkerFlags;
    ULONG Version;
    struct {
        UCHAR Type;
        UCHAR Level;
        USHORT Version;
    } Class;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    ULONG64 RegHandle;
    ULONG InstanceId;
    ULONG ParentInstanceId;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    ULONG EventId;
    ULONG Flags;
    ULONG64 ParentRegHandle;
};

typedef struct _EVENT_TRACE {
    struct _EVENT_TRACE_HEADER Header;
    ULONG InstanceId;
    ULONG ParentInstanceId;
    struct _GUID ParentGuid;
    PVOID MofData;
    ULONG MofLength;
    ULONG ClientContext;
    struct _ETW_BUFFER_CONTEXT BufferContext;
};

typedef struct _EVENT_TRACE_HEADER {
    USHORT Size;
    USHORT FieldTypeFlags;
    UCHAR HeaderType;
    UCHAR MarkerFlags;
    ULONG Version;
    struct {
        UCHAR Type;
        UCHAR Level;
        USHORT Version;
    } Class;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID Guid;
    ULONG64 GuidPtr;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    ULONG ClientContext;
    ULONG Flags;
};

typedef struct _EXCEPTION_POINTERS {
    struct _EXCEPTION_RECORD *ExceptionRecord;
    struct _CONTEXT *ContextRecord;
};

typedef struct _EXCEPTION_RECORD {
    ULONG ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD32 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG ExceptionRecord;
    ULONG ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD64 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG NumberParameters;
    ULONG __unusedAlignment;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    enum _EXCEPTION_DISPOSITION *Handler;
};

typedef struct _EXT_DELETE_PARAMETERS {
    ULONG Version;
    ULONG Reserved;
    PVOID DeleteCallback;
    PVOID DeleteContext;
};

typedef struct _EXT_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONG64 NoWakeTolerance;
};

typedef struct _EX_PUSH_LOCK {
    ULONG64 Locked : 1;
    ULONG64 Waiting : 1;
    ULONG64 Waking : 1;
    ULONG64 MultipleShared : 1;
    ULONG64 Shared : 60;
    ULONG64 Value;
    PVOID Ptr;
};

typedef struct _EX_RUNDOWN_REF {
    ULONG64 Count;
    PVOID Ptr;
};

typedef struct _EX_RUNDOWN_REF_CACHE_AWARE {
};

typedef struct _EX_TIMER {
};

typedef struct _EX_WNF_SUBSCRIPTION {
};

typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PUCHAR FastIoCheckIfPossible;
    PUCHAR FastIoRead;
    PUCHAR FastIoWrite;
    PUCHAR FastIoQueryBasicInfo;
    PUCHAR FastIoQueryStandardInfo;
    PUCHAR FastIoLock;
    PUCHAR FastIoUnlockSingle;
    PUCHAR FastIoUnlockAll;
    PUCHAR FastIoUnlockAllByKey;
    PUCHAR FastIoDeviceControl;
    PVOID AcquireFileForNtCreateSection;
    PVOID ReleaseFileForNtCreateSection;
    PVOID FastIoDetachDevice;
    PUCHAR FastIoQueryNetworkOpenInfo;
    PLONG AcquireForModWrite;
    PUCHAR MdlRead;
    PUCHAR MdlReadComplete;
    PUCHAR PrepareMdlWrite;
    PUCHAR MdlWriteComplete;
    PUCHAR FastIoReadCompressed;
    PUCHAR FastIoWriteCompressed;
    PUCHAR MdlReadCompleteCompressed;
    PUCHAR MdlWriteCompleteCompressed;
    PUCHAR FastIoQueryOpen;
    PLONG ReleaseForModWrite;
    PLONG AcquireForCcFlush;
    PLONG ReleaseForCcFlush;
};

typedef struct _FAST_MUTEX {
    LONG Count;
    PVOID Owner;
    ULONG Contention;
    struct _KEVENT Event;
    ULONG OldIrql;
    VOID _FAST_MUTEX;
    VOID _FAST_MUTEX;
    struct _FAST_MUTEX *operator=;
    struct _FAST_MUTEX *operator=;
};

typedef struct _FAULT_INFORMATION {
    enum _FAULT_INFORMATION_ARCH Type;
    struct _FAULT_INFORMATION_ARM64 Arm64;
};

typedef struct _FAULT_INFORMATION_ARM64 {
    PVOID DomainHandle;
    PVOID FaultAddress;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    ULONG InputMappingId;
    struct _FAULT_INFORMATION_ARM64_FLAGS Flags;
    enum _FAULT_INFORMATION_ARM64_TYPE Type;
};

typedef struct _FAULT_INFORMATION_ARM64_FLAGS {
    ULONG WriteNotRead : 1;
    ULONG InstructionNotData : 1;
    ULONG Privileged : 1;
    ULONG FaultAddressValid : 1;
    ULONG Reserved : 28;
};

typedef struct _FILETIME {
    ULONG dwLowDateTime;
    ULONG dwHighDateTime;
};

typedef struct _FILE_ALIGNMENT_INFORMATION {
    ULONG AlignmentRequirement;
};

typedef struct _FILE_ATTRIBUTE_TAG_INFORMATION {
    ULONG FileAttributes;
    ULONG ReparseTag;
};

typedef struct _FILE_BASIC_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};

typedef struct _FILE_DISPOSITION_INFORMATION {
    UCHAR DeleteFile;
};

typedef struct _FILE_DISPOSITION_INFORMATION_EX {
    ULONG Flags;
};

typedef struct _FILE_END_OF_FILE_INFORMATION {
    union _LARGE_INTEGER EndOfFile;
};

typedef struct _FILE_FS_DEVICE_INFORMATION {
    ULONG DeviceType;
    ULONG Characteristics;
};

typedef struct _FILE_FS_FULL_SIZE_INFORMATION {
    union _LARGE_INTEGER TotalAllocationUnits;
    union _LARGE_INTEGER CallerAvailableAllocationUnits;
    union _LARGE_INTEGER ActualAvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_FULL_SIZE_INFORMATION_EX {
    ULONG64 ActualTotalAllocationUnits;
    ULONG64 ActualAvailableAllocationUnits;
    ULONG64 ActualPoolUnavailableAllocationUnits;
    ULONG64 CallerTotalAllocationUnits;
    ULONG64 CallerAvailableAllocationUnits;
    ULONG64 CallerPoolUnavailableAllocationUnits;
    ULONG64 UsedAllocationUnits;
    ULONG64 TotalReservedAllocationUnits;
    ULONG64 VolumeStorageReserveAllocationUnits;
    ULONG64 AvailableCommittedAllocationUnits;
    ULONG64 PoolAvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_LABEL_INFORMATION {
    ULONG VolumeLabelLength;
    WCHAR VolumeLabel[1];
};

typedef struct _FILE_FS_METADATA_SIZE_INFORMATION {
    union _LARGE_INTEGER TotalMetadataAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_OBJECTID_INFORMATION {
    UCHAR ObjectId[16];
    UCHAR ExtendedInfo[48];
};

typedef struct _FILE_FS_SECTOR_SIZE_INFORMATION {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
};

typedef struct _FILE_FS_SIZE_INFORMATION {
    union _LARGE_INTEGER TotalAllocationUnits;
    union _LARGE_INTEGER AvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_VOLUME_INFORMATION {
    union _LARGE_INTEGER VolumeCreationTime;
    ULONG VolumeSerialNumber;
    ULONG VolumeLabelLength;
    UCHAR SupportsObjects;
    WCHAR VolumeLabel[1];
};

typedef struct _FILE_FULL_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR Flags;
    UCHAR EaNameLength;
    USHORT EaValueLength;
    CHAR EaName[1];
};

typedef struct _FILE_GET_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    struct _SID Sid;
};

typedef struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION {
    PUCHAR IoStatusBlockRange;
    ULONG Length;
};

typedef struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION {
    ULONG Flags;
};

typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION {
    enum _IO_PRIORITY_HINT PriorityHint;
};

typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX {
    enum _IO_PRIORITY_HINT PriorityHint;
    UCHAR BoostOutstanding;
};

typedef struct _FILE_IS_REMOTE_DEVICE_INFORMATION {
    UCHAR IsRemote;
};

typedef struct _FILE_MEMORY_PARTITION_INFORMATION {
    ULONG64 OwnerPartitionHandle;
     <unnamed-type-Flags>;
    union {
        UCHAR NoCrossPartitionAccess;
        UCHAR Spare[3];
        ULONG AllFlags;
    } Flags;
};

typedef struct _FILE_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};

typedef struct _FILE_NUMA_NODE_INFORMATION {
    USHORT NodeNumber;
};

typedef struct _FILE_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _VPB *Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    struct _SECTION_OBJECT_POINTERS *SectionObjectPointer;
    PVOID PrivateCacheMap;
    LONG FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    UCHAR LockOperation;
    UCHAR DeletePending;
    UCHAR ReadAccess;
    UCHAR WriteAccess;
    UCHAR DeleteAccess;
    UCHAR SharedRead;
    UCHAR SharedWrite;
    UCHAR SharedDelete;
    ULONG Flags;
    struct _UNICODE_STRING FileName;
    union _LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    struct _KEVENT Lock;
    struct _KEVENT Event;
    struct _IO_COMPLETION_CONTEXT *CompletionContext;
    ULONG64 IrpListLock;
    struct _LIST_ENTRY IrpList;
    PVOID FileObjectExtension;
    VOID _FILE_OBJECT;
    VOID _FILE_OBJECT;
    struct _FILE_OBJECT *operator=;
    struct _FILE_OBJECT *operator=;
};

typedef struct _FILE_POSITION_INFORMATION {
    union _LARGE_INTEGER CurrentByteOffset;
};

typedef struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION {
    ULONG NumberOfProcessIdsInList;
    ULONG64 ProcessIdList[1];
};

typedef struct _FILE_SFIO_RESERVE_INFORMATION {
    ULONG RequestsPerPeriod;
    ULONG Period;
    UCHAR RetryFailures;
    UCHAR Discardable;
    ULONG RequestSize;
    ULONG NumOutstandingRequests;
};

typedef struct _FILE_SFIO_VOLUME_INFORMATION {
    ULONG MaximumRequestsPerPeriod;
    ULONG MinimumPeriod;
    ULONG MinimumTransferSize;
};

typedef struct _FILE_STANDARD_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FILE_STANDARD_INFORMATION_EX {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
    UCHAR AlternateStream;
    UCHAR MetadataAttribute;
};

typedef struct _FILE_VALID_DATA_LENGTH_INFORMATION {
    union _LARGE_INTEGER ValidDataLength;
};

typedef struct _FLOAT128 {
    LONG64 LowPart;
    LONG64 HighPart;
};

typedef struct _FLS_CALLBACK_INFO {
};

typedef struct _FPGA_CONTROL_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID BusScan;
    PLONG ControlLink;
    PLONG ControlConfigSpace;
    PLONG ControlErrorReporting;
};

typedef struct _FSRTL_ADVANCED_FCB_HEADER {
    struct _FSRTL_COMMON_FCB_HEADER _FSRTL_COMMON_FCB_HEADER;
    struct _FAST_MUTEX *FastMutex;
    struct _LIST_ENTRY FilterContexts;
    ULONG64 PushLock;
    PVOID *FileContextSupportPointer;
    PVOID Oplock;
    PVOID ReservedForRemote;
    PVOID ReservedContext;
};

typedef struct _FSRTL_COMMON_FCB_HEADER {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    UCHAR Flags;
    UCHAR IsFastIoPossible;
    UCHAR Flags2;
    UCHAR Reserved : 4;
    UCHAR Version : 4;
    struct _ERESOURCE *Resource;
    struct _ERESOURCE *PagingIoResource;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER FileSize;
    union _LARGE_INTEGER ValidDataLength;
};

typedef struct _FUNCTION_LEVEL_DEVICE_RESET_PARAMETERS {
    ULONG Size;
    PVOID DeviceResetCompletion;
    PVOID CompletionContext;
};

typedef struct _FXIO_FORWARD_PROGRESS_CONTEXT {
    ULONG m_NumberOfReservedRequests;
    FxIoQueueForwardProgressAllocateResourcesReserved m_IoReservedResourcesAllocate;
    FxIoQueueForwardProgressAllocateResources m_IoResourcesAllocate;
    FxIoQueueForwardProgressExamineIrp m_IoExamineIrp;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY m_Policy;
    struct _LIST_ENTRY m_ReservedRequestList;
    struct _LIST_ENTRY m_ReservedRequestInUseList;
    struct _LIST_ENTRY m_PendedIrpList;
    MxLockNoDynam m_PendedReserveLock;
    VOID _FXIO_FORWARD_PROGRESS_CONTEXT;
};

typedef struct _FX_DRIVER_GLOBALS {
    ULONG AddRef;
    ULONG Release;
    UCHAR IsPoolTrackingOn;
    UCHAR IsObjectDebugOn;
    VOID SetVerifierState;
    UCHAR IsVersionGreaterThanOrEqualTo;
    UCHAR IsCorrectVersionRegistered;
    VOID RegisterClientVersion;
    UCHAR IsVerificationEnabled;
    UCHAR IsDownlevelVerificationEnabled;
    VOID WaitForSignal;
    UCHAR IsDebuggerAttached;
    UCHAR IsCompanion;
    struct _LIST_ENTRY Linkage;
    LONG Refcnt;
    MxEvent DestroyEvent;
    ULONG64 WdfHandleMask;
    LONG WdfVerifierAllocateFailCount;
    ULONG Tag;
    FxDriver *Driver;
    struct FxDriverGlobalsDebugExtension *DebugExtension;
    struct FxLibraryGlobalsType *LibraryGlobals;
    PVOID WdfLogHeader;
    struct FX_POOL FxPoolFrameworks;
    UCHAR FxPoolTrackingOn;
    MxLock ThreadTableLock;
    struct _LIST_ENTRY *ThreadTable;
    struct _WDF_BIND_INFO *WdfBindInfo;
    PVOID ImageAddress;
    ULONG ImageSize;
    UCHAR FxVerifierOn;
    UCHAR FxVerifyDownlevel;
    UCHAR FxVerifierDbgBreakOnError;
    UCHAR FxVerifierDbgBreakOnDeviceStateError;
    UCHAR FxVerifierHandle;
    UCHAR FxVerifierIO;
    UCHAR FxVerifierLock;
    UCHAR FxVerifyOn;
    UCHAR FxVerboseOn;
    struct FxObjectDebugLeakDetection *FxVerifyLeakDetection;
    UCHAR FxVerifyTagTrackingEnabled;
    UCHAR FxRequestParentOptimizationOn;
    UCHAR FxDsfOn;
    UCHAR FxForceLogsInMiniDump;
    UCHAR FxTrackDriverForMiniDumpLog;
    UCHAR IsUserModeDriver;
    ULONG RemoveLockOptionFlags;
    ULONG BugCheckDriverInfoIndex;
    struct _KBUGCHECK_REASON_CALLBACK_RECORD BugCheckCallbackRecord;
    LONG WdfLogHeaderRefCount;
    ULONG FxEnhancedVerifierOptions;
    ULONG FxVerifierDbgWaitForSignalTimeoutInSec;
    ULONG DbgWaitForWakeInterruptIsrTimeoutInSec;
    struct _FX_TELEMETRY_CONTEXT *TelemetryContext;
    UCHAR IsDriverCompanion;
    struct _WDF_DRIVER_GLOBALS Public;
    VOID _FX_DRIVER_GLOBALS;
    VOID _FX_DRIVER_GLOBALS;
    VOID _FX_DRIVER_GLOBALS;
    VOID ~_FX_DRIVER_GLOBALS;
    struct _FX_DRIVER_GLOBALS *operator=;
    struct _FX_DRIVER_GLOBALS *operator=;
    PVOID __vecDelDtor;
};

typedef struct _FX_DRIVER_TRACKER_CACHE_AWARE {
     _FX_DRIVER_TRACKER_ENTRY;
     FX_DRIVER_TRACKER_ENTRY;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *PFX_DRIVER_TRACKER_ENTRY;
    LONG Initialize;
    VOID Uninitialize;
    LONG Register;
    VOID Deregister;
    VOID TrackDriver;
    struct _FX_DRIVER_GLOBALS *GetCurrentTrackedDriver;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *GetProcessorDriverEntryRef;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *m_DriverUsage;
    PVOID m_PoolToFree;
    ULONG m_EntrySize;
    ULONG m_Number;
};

typedef struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY {
    struct _FX_DRIVER_GLOBALS *FxDriverGlobals;
    VOID _FX_DRIVER_TRACKER_ENTRY;
    VOID _FX_DRIVER_TRACKER_ENTRY;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *operator=;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *operator=;
};

typedef struct _FX_DRIVER_TRACKER_ENTRY {
    struct _FX_DRIVER_GLOBALS *FxDriverGlobals;
    VOID _FX_DRIVER_TRACKER_ENTRY;
    VOID _FX_DRIVER_TRACKER_ENTRY;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *operator=;
    struct _FX_DRIVER_TRACKER_CACHE_AWARE::_FX_DRIVER_TRACKER_ENTRY *operator=;
};

typedef struct _FX_DUMP_DRIVER_INFO_ENTRY {
    struct _FX_DRIVER_GLOBALS *FxDriverGlobals;
    struct _WDF_VERSION Version;
    CHAR DriverName[32];
};

typedef struct _FX_OBJECT_INFO {
    PCHAR Name;
    PCHAR HandleName;
    USHORT Size;
    USHORT ObjectType;
};

typedef struct _FX_TELEMETRY_CONTEXT {
    struct _GUID DriverSessionGUID;
    LONG DoOnceFlagsBitmap;
    VOID _FX_TELEMETRY_CONTEXT;
    VOID _FX_TELEMETRY_CONTEXT;
    struct _FX_TELEMETRY_CONTEXT *operator=;
    struct _FX_TELEMETRY_CONTEXT *operator=;
};

typedef struct _FxDmaDescription {
    struct _DEVICE_DESCRIPTION DeviceDescription;
    struct _DMA_ADAPTER *AdapterObject;
    ULONG64 PreallocatedSGListSize;
    ULONG64 MaximumFragmentLength;
    ULONG NumberOfMapRegisters;
};

typedef struct _FxInternalIoctlParams {
    struct WDFMEMORY__ *Argument1;
    struct WDFMEMORY__ *Argument2;
    struct WDFMEMORY__ *Argument4;
};

typedef struct _GDI_TEB_BATCH {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG64 HDC;
    ULONG Buffer[310];
};

typedef struct _GENERAL_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERAL_LOOKASIDE_POOL {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERIC_MAPPING {
    ULONG GenericRead;
    ULONG GenericWrite;
    ULONG GenericExecute;
    ULONG GenericAll;
};

typedef struct _GROUP_AFFINITY {
    ULONG64 Mask;
    USHORT Group;
    USHORT Reserved[3];
};

typedef struct _GROUP_RELATIONSHIP {
    USHORT MaximumGroupCount;
    USHORT ActiveGroupCount;
    UCHAR Reserved[20];
    struct _PROCESSOR_GROUP_INFO GroupInfo[1];
};

typedef struct _GS_HANDLER_DATA {
    union {
        struct {
            ULONG EHandler : 1;
            ULONG UHandler : 1;
            ULONG HasAlignment : 1;
        } Bits;
        LONG CookieOffset;
    } u;
    LONG AlignedBaseOffset;
    LONG Alignment;
};

typedef struct _GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct _HAL_AMLI_BAD_IO_ADDRESS_LIST {
    ULONG BadAddrBegin;
    ULONG BadAddrSize;
    ULONG OSVersionTrigger;
    PLONG IOHandler;
};

typedef struct _HAL_BUS_INFORMATION {
    enum _INTERFACE_TYPE BusType;
    enum _BUS_DATA_TYPE ConfigurationType;
    ULONG BusNumber;
    ULONG Reserved;
};

typedef struct _HAL_CALLBACKS {
    struct _CALLBACK_OBJECT *SetSystemInformation;
    struct _CALLBACK_OBJECT *BusCheck;
};

typedef struct _HAL_ERROR_INFO {
    ULONG Version;
    ULONG InitMaxSize;
    ULONG McaMaxSize;
    ULONG McaPreviousEventsCount;
    ULONG McaCorrectedEventsCount;
    ULONG McaKernelDeliveryFails;
    ULONG McaDriverDpcQueueFails;
    ULONG McaReserved;
    ULONG CmcMaxSize;
    ULONG CmcPollingInterval;
    ULONG CmcInterruptsCount;
    ULONG CmcKernelDeliveryFails;
    ULONG CmcDriverDpcQueueFails;
    ULONG CmcGetStateFails;
    ULONG CmcClearStateFails;
    ULONG CmcReserved;
    ULONG64 CmcLogId;
    ULONG CpeMaxSize;
    ULONG CpePollingInterval;
    ULONG CpeInterruptsCount;
    ULONG CpeKernelDeliveryFails;
    ULONG CpeDriverDpcQueueFails;
    ULONG CpeGetStateFails;
    ULONG CpeClearStateFails;
    ULONG CpeInterruptSources;
    ULONG64 CpeLogId;
    ULONG64 KernelReserved[4];
};

typedef struct _HAL_MCA_INTERFACE {
    PVOID Lock;
    PVOID Unlock;
    PLONG ReadRegister;
};

typedef struct _HAL_PLATFORM_INFORMATION {
    ULONG PlatformFlags;
};

typedef struct _HAL_POWER_INFORMATION {
    ULONG TBD;
};

typedef struct _HAL_PROCESSOR_FEATURE {
    ULONG UsableFeatureBits;
};

typedef struct _HAL_PROCESSOR_SPEED_INFO {
    ULONG ProcessorSpeed;
};

typedef struct _HARDWARE_COUNTER {
    enum _HARDWARE_COUNTER_TYPE Type;
    ULONG Reserved;
    ULONG64 Index;
};

typedef struct _HEAP_AFFINITY_SLOT_ASSIGN {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
    ULONG SlotIndex;
};

typedef struct _HEAP_AFINITY_MANAGER_ENABLE {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG BucketIndex;
};

typedef struct _HEAP_COMMIT_DECOMMIT {
    struct _SYSTEM_TRACE_HEADER Header;
    struct _HEAP_EVENT_COMMIT_DECOMMIT Event;
};

typedef struct _HEAP_EVENT_COMMIT_DECOMMIT {
    PVOID HeapHandle;
    PVOID Block;
    ULONG64 Size;
    ULONG Caller;
};

typedef struct _HEAP_EVENT_RANGE {
    PVOID HeapHandle;
    PVOID Address;
    ULONG64 Size;
};

typedef struct _HEAP_EVENT_RANGE_CREATE {
    PVOID HeapHandle;
    ULONG64 FirstRangeSize;
    ULONG Flags;
};

typedef struct _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE {
    PVOID HeapHandle;
    PVOID SubSegment;
    ULONG64 SubSegmentSize;
    ULONG64 BlockSize;
};

typedef struct _HEAP_RANGE_CREATE {
    struct _SYSTEM_TRACE_HEADER Header;
    struct _HEAP_EVENT_RANGE_CREATE Event;
};

typedef struct _HEAP_RANGE_DESTROY {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
};

typedef struct _HEAP_RANGE_LOG {
    struct _SYSTEM_TRACE_HEADER Header;
    struct _HEAP_EVENT_RANGE Range;
};

typedef struct _HEAP_REUSE_THRESHOLD_ACTIVATED {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
    ULONG BucketIndex;
};

typedef struct _HEAP_SUBSEGMENT_ACTIVATED {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
};

typedef struct _HEAP_SUBSEGMENT_ALLOC {
    struct _SYSTEM_TRACE_HEADER Header;
    struct _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE Event;
};

typedef struct _HEAP_SUBSEGMENT_FREE {
    struct _SYSTEM_TRACE_HEADER Header;
    struct _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE Event;
};

typedef struct _HEAP_SUBSEGMENT_INIT {
    struct _SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
    ULONG64 BlockSize;
    ULONG64 BlockCount;
    ULONG AffinityIndex;
};

typedef struct _HWPROFILE_CHANGE_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
};

typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG VirtualAddress;
    ULONG Size;
};

typedef struct _IMAGE_DOS_HEADER {
    USHORT e_magic;
    USHORT e_cblp;
    USHORT e_cp;
    USHORT e_crlc;
    USHORT e_cparhdr;
    USHORT e_minalloc;
    USHORT e_maxalloc;
    USHORT e_ss;
    USHORT e_sp;
    USHORT e_csum;
    USHORT e_ip;
    USHORT e_cs;
    USHORT e_lfarlc;
    USHORT e_ovno;
    USHORT e_res[4];
    USHORT e_oemid;
    USHORT e_oeminfo;
    USHORT e_res2[10];
    LONG e_lfanew;
};

typedef struct _IMAGE_EXPORT_DIRECTORY {
    ULONG Characteristics;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG Name;
    ULONG Base;
    ULONG NumberOfFunctions;
    ULONG NumberOfNames;
    ULONG AddressOfFunctions;
    ULONG AddressOfNames;
    ULONG AddressOfNameOrdinals;
};

typedef struct _IMAGE_FILE_HEADER {
    USHORT Machine;
    USHORT NumberOfSections;
    ULONG TimeDateStamp;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
    USHORT SizeOfOptionalHeader;
    USHORT Characteristics;
};

typedef struct _IMAGE_INFO {
    ULONG Properties;
    ULONG ImageAddressingMode : 8;
    ULONG SystemModeImage : 1;
    ULONG ImageMappedToAllPids : 1;
    ULONG ExtendedInfoPresent : 1;
    ULONG MachineTypeMismatch : 1;
    ULONG ImageSignatureLevel : 4;
    ULONG ImageSignatureType : 3;
    ULONG ImagePartialMap : 1;
    ULONG Reserved : 12;
    PVOID ImageBase;
    ULONG ImageSelector;
    ULONG64 ImageSize;
    ULONG ImageSectionNumber;
};

typedef struct _IMAGE_INFO_EX {
    ULONG64 Size;
    struct _IMAGE_INFO ImageInfo;
    struct _FILE_OBJECT *FileObject;
};

typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    USHORT Flags;
    USHORT Catalog;
    ULONG CatalogOffset;
    ULONG Reserved;
};

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    ULONG Size;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG GlobalFlagsClear;
    ULONG GlobalFlagsSet;
    ULONG CriticalSectionDefaultTimeout;
    ULONG64 DeCommitFreeBlockThreshold;
    ULONG64 DeCommitTotalFreeThreshold;
    ULONG64 LockPrefixTable;
    ULONG64 MaximumAllocationSize;
    ULONG64 VirtualMemoryThreshold;
    ULONG64 ProcessAffinityMask;
    ULONG ProcessHeapFlags;
    USHORT CSDVersion;
    USHORT DependentLoadFlags;
    ULONG64 EditList;
    ULONG64 SecurityCookie;
    ULONG64 SEHandlerTable;
    ULONG64 SEHandlerCount;
    ULONG64 GuardCFCheckFunctionPointer;
    ULONG64 GuardCFDispatchFunctionPointer;
    ULONG64 GuardCFFunctionTable;
    ULONG64 GuardCFFunctionCount;
    ULONG GuardFlags;
    struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONG64 GuardAddressTakenIatEntryTable;
    ULONG64 GuardAddressTakenIatEntryCount;
    ULONG64 GuardLongJumpTargetTable;
    ULONG64 GuardLongJumpTargetCount;
    ULONG64 DynamicValueRelocTable;
    ULONG64 CHPEMetadataPointer;
    ULONG64 GuardRFFailureRoutine;
    ULONG64 GuardRFFailureRoutineFunctionPointer;
    ULONG DynamicValueRelocTableOffset;
    USHORT DynamicValueRelocTableSection;
    USHORT Reserved2;
    ULONG64 GuardRFVerifyStackPointerFunctionPointer;
    ULONG HotPatchTableOffset;
    ULONG Reserved3;
    ULONG64 EnclaveConfigurationPointer;
    ULONG64 VolatileMetadataPointer;
};

typedef struct _IMAGE_NT_HEADERS {
};

typedef struct _IMAGE_NT_HEADERS64 {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG64 ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG64 SizeOfStackReserve;
    ULONG64 SizeOfStackCommit;
    ULONG64 SizeOfHeapReserve;
    ULONG64 SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _IMAGE_POLICY_ENTRY {
    enum _IMAGE_POLICY_ENTRY_TYPE Type;
    enum _IMAGE_POLICY_ID PolicyId;
     <unnamed-type-u>;
    union {
        PVOID None;
        UCHAR BoolValue;
        CHAR Int8Value;
        UCHAR UInt8Value;
        SHORT Int16Value;
        USHORT UInt16Value;
        LONG Int32Value;
        ULONG UInt32Value;
        LONG64 Int64Value;
        ULONG64 UInt64Value;
        PCHAR AnsiStringValue;
        PWCHAR UnicodeStringValue;
    } u;
};

typedef struct _IMAGE_POLICY_METADATA {
    UCHAR Version;
    UCHAR Reserved0[7];
    ULONG64 ApplicationId;
    struct _IMAGE_POLICY_ENTRY Policies[0];
};

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG EndAddress;
    ULONG UnwindInfoAddress;
    ULONG UnwindData;
};

typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[3];
};

typedef struct _INPUT_MAPPING_ELEMENT {
    ULONG InputMappingId;
};

typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
};

typedef struct _IOMMU_DMA_DOMAIN {
};

typedef struct _IO_ATTRIBUTION_INFORMATION {
    ULONG Version;
     <unnamed-type-Flags>;
    union {
        ULONG MajorCode : 8;
        ULONG IoStart : 1;
        ULONG QueueOnly : 1;
        ULONG IoFailed : 1;
        ULONG VirtualDevice : 1;
        ULONG Spare : 20;
        ULONG AllFlags;
    } Flags;
    ULONG Length;
    ULONG64 ServiceStartTime;
    ULONG64 CurrentTime;
};

typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
};

typedef struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _KINTERRUPT **InterruptObject;
    PUCHAR ServiceRoutine;
    PVOID ServiceContext;
    PULONG64 SpinLock;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
    UCHAR ShareVector;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE InterruptMode;
    ULONG64 ProcessorEnableMask;
    USHORT Group;
};

typedef struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _KINTERRUPT **InterruptObject;
    PUCHAR ServiceRoutine;
    PVOID ServiceContext;
    PULONG64 SpinLock;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
};

typedef struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
     <unnamed-type-ConnectionContext>;
    union {
        PVOID *Generic;
        struct _IO_INTERRUPT_MESSAGE_INFO **InterruptMessageTable;
        struct _KINTERRUPT **InterruptObject;
    } ConnectionContext;
    PUCHAR MessageServiceRoutine;
    PVOID ServiceContext;
    PULONG64 SpinLock;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
    PUCHAR FallBackServiceRoutine;
};

typedef struct _IO_CONNECT_INTERRUPT_PARAMETERS {
    ULONG Version;
    struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS FullySpecified;
    struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS LineBased;
    struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS MessageBased;
};

typedef struct _IO_COUNTERS {
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 OtherOperationCount;
    ULONG64 ReadTransferCount;
    ULONG64 WriteTransferCount;
    ULONG64 OtherTransferCount;
};

typedef struct _IO_CSQ {
    ULONG Type;
    PVOID CsqInsertIrp;
    PVOID CsqRemoveIrp;
    struct _IRP **CsqPeekNextIrp;
    PVOID CsqAcquireLock;
    PVOID CsqReleaseLock;
    PVOID CsqCompleteCanceledIrp;
    PVOID ReservePointer;
};

typedef struct _IO_CSQ_IRP_CONTEXT {
    ULONG Type;
    struct _IRP *Irp;
    struct _IO_CSQ *Csq;
};

typedef struct _IO_DISCONNECT_INTERRUPT_PARAMETERS {
    ULONG Version;
     <unnamed-type-ConnectionContext>;
    union {
        PVOID Generic;
        struct _KINTERRUPT *InterruptObject;
        struct _IO_INTERRUPT_MESSAGE_INFO *InterruptMessageTable;
    } ConnectionContext;
};

typedef struct _IO_DRIVER_CREATE_CONTEXT {
    SHORT Size;
    struct _ECP_LIST *ExtraCreateParameter;
    PVOID DeviceObjectHint;
    struct _TXN_PARAMETER_BLOCK *TxnParameters;
    struct _EJOB *SiloContext;
};

typedef struct _IO_ERROR_LOG_MESSAGE {
    USHORT Type;
    USHORT Size;
    USHORT DriverNameLength;
    union _LARGE_INTEGER TimeStamp;
    ULONG DriverNameOffset;
    struct _IO_ERROR_LOG_PACKET EntryData;
};

typedef struct _IO_ERROR_LOG_PACKET {
    UCHAR MajorFunctionCode;
    UCHAR RetryCount;
    USHORT DumpDataSize;
    USHORT NumberOfStrings;
    USHORT StringOffset;
    USHORT EventCategory;
    LONG ErrorCode;
    ULONG UniqueErrorValue;
    LONG FinalStatus;
    ULONG SequenceNumber;
    ULONG IoControlCode;
    union _LARGE_INTEGER DeviceOffset;
    ULONG DumpData[1];
};

typedef struct _IO_FOEXT_SILO_PARAMETERS {
    ULONG Length;
    ULONG HasHardReference : 1;
    ULONG SpareFlags : 31;
    ULONG Flags;
    struct _EJOB *SiloContext;
};

typedef struct _IO_INTERRUPT_MESSAGE_INFO {
    UCHAR UnifiedIrql;
    ULONG MessageCount;
    struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY MessageInfo[1];
};

typedef struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY {
    union _LARGE_INTEGER MessageAddress;
    ULONG64 TargetProcessorSet;
    struct _KINTERRUPT *InterruptObject;
    ULONG MessageData;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _KINTERRUPT_POLARITY Polarity;
};

typedef struct _IO_PRIORITY_INFO {
    ULONG Size;
    ULONG ThreadPriority;
    ULONG PagePriority;
    enum _IO_PRIORITY_HINT IoPriority;
};

typedef struct _IO_REMOVE_LOCK {
    struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
    VOID _IO_REMOVE_LOCK;
    VOID _IO_REMOVE_LOCK;
    struct _IO_REMOVE_LOCK *operator=;
    struct _IO_REMOVE_LOCK *operator=;
};

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
    UCHAR Removed;
    UCHAR Reserved[3];
    LONG IoCount;
    struct _KEVENT RemoveEvent;
    VOID _IO_REMOVE_LOCK_COMMON_BLOCK;
    VOID _IO_REMOVE_LOCK_COMMON_BLOCK;
    struct _IO_REMOVE_LOCK_COMMON_BLOCK *operator=;
    struct _IO_REMOVE_LOCK_COMMON_BLOCK *operator=;
};

typedef struct _IO_REMOVE_LOCK_DBG_BLOCK {
    LONG Signature;
    ULONG HighWatermark;
    LONG64 MaxLockedTicks;
    LONG AllocateTag;
    struct _LIST_ENTRY LockList;
    ULONG64 Spin;
    LONG LowMemoryCount;
    ULONG Reserved1[4];
    PVOID Reserved2;
    struct _IO_REMOVE_LOCK_TRACKING_BLOCK *Blocks;
};

typedef struct _IO_REMOVE_LOCK_TRACKING_BLOCK {
};

typedef struct _IO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS {
    ULONG Version;
     <unnamed-type-ConnectionContext>;
    union {
        PVOID Generic;
        struct _KINTERRUPT *InterruptObject;
        struct _IO_INTERRUPT_MESSAGE_INFO *InterruptMessageTable;
    } ConnectionContext;
};

typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;
    UCHAR ShareDisposition;
    UCHAR Spare1;
    USHORT Flags;
    USHORT Spare2;
    union {
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Port;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory;
        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
            enum _IRQ_DEVICE_POLICY AffinityPolicy;
            enum _IRQ_PRIORITY PriorityPolicy;
            ULONG64 TargetedProcessors;
        } Interrupt;
        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;
        struct {
            ULONG RequestLine;
            ULONG Reserved;
            ULONG Channel;
            ULONG TransferWidth;
        } DmaV3;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Generic;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG Priority;
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;
        struct {
            ULONG Length40;
            ULONG Alignment40;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory40;
        struct {
            ULONG Length48;
            ULONG Alignment48;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory48;
        struct {
            ULONG Length64;
            ULONG Alignment64;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    struct _IO_RESOURCE_LIST List[1];
};

typedef struct _IO_SECURITY_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _ACCESS_STATE *AccessState;
    ULONG DesiredAccess;
    ULONG FullCreateOptions;
};

typedef struct _IO_SESSION_CONNECT_INFO {
    ULONG SessionId;
    UCHAR LocalSession;
};

typedef struct _IO_SESSION_STATE_INFORMATION {
    ULONG SessionId;
    enum _IO_SESSION_STATE SessionState;
    UCHAR LocalSession;
};

typedef struct _IO_SESSION_STATE_NOTIFICATION {
    ULONG Size;
    ULONG Flags;
    PVOID IoObject;
    ULONG EventMask;
    PVOID Context;
};

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;
    union {
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
        } CreatePipe;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _MAILSLOT_CREATE_PARAMETERS *Parameters;
        } CreateMailslot;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Read;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Write;
        struct {
            ULONG Length;
            struct _UNICODE_STRING *FileName;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
            enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
        } NotifyDirectoryEx;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
        } QueryFile;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            struct _FILE_OBJECT *FileObject;
            UCHAR ReplaceIfExists;
            UCHAR AdvanceOnly;
            ULONG ClusterCount;
            PVOID DeleteHandle;
        } SetFile;
        struct {
            ULONG Length;
            PVOID EaList;
            ULONG EaListLength;
            ULONG EaIndex;
        } QueryEa;
        struct {
            ULONG Length;
        } SetEa;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } QueryVolume;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } SetVolume;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
        struct {
            union _LARGE_INTEGER *Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } LockControl;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
        struct {
            ULONG SecurityInformation;
            ULONG Length;
        } QuerySecurity;
        struct {
            ULONG SecurityInformation;
            PVOID SecurityDescriptor;
        } SetSecurity;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } MountVolume;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } VerifyVolume;
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
        struct {
            ULONG Length;
            PVOID StartSid;
            struct _FILE_GET_QUOTA_INFORMATION *SidList;
            ULONG SidListLength;
        } QueryQuota;
        struct {
            ULONG Length;
        } SetQuota;
        struct {
            enum _DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;
        struct {
            struct _GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            struct _INTERFACE *Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
        struct {
            struct _DEVICE_CAPABILITIES *Capabilities;
        } DeviceCapabilities;
        struct {
            struct _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
        } FilterResourceRequirements;
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG Length;
        } ReadWriteConfig;
        struct {
            UCHAR Lock;
        } SetLock;
        struct {
            enum BUS_QUERY_ID_TYPE IdType;
        } QueryId;
        struct {
            enum DEVICE_TEXT_TYPE DeviceTextType;
            ULONG LocaleId;
        } QueryDeviceText;
        struct {
            UCHAR InPath;
            UCHAR Reserved[3];
            enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        } UsageNotification;
        struct {
            enum _SYSTEM_POWER_STATE PowerState;
        } WaitWake;
        struct {
            struct _POWER_SEQUENCE *PowerSequence;
        } PowerSequence;
        struct {
            ULONG SystemContext;
            struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
            enum _POWER_STATE_TYPE Type;
            union _POWER_STATE State;
            enum POWER_ACTION ShutdownType;
        } Power;
        struct {
            struct _CM_RESOURCE_LIST *AllocatedResources;
            struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
        } StartDevice;
        struct {
            ULONG64 ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    PLONG CompletionRoutine;
    PVOID Context;
};

typedef struct _IO_STATUS_BLOCK {
    LONG Status;
    PVOID Pointer;
    ULONG64 Information;
};

typedef struct _IO_STATUS_BLOCK32 {
    LONG Status;
    ULONG Information;
};

typedef struct _IO_TIMER {
};

typedef struct _IO_WORKITEM {
};

typedef struct _IPT_TRACE_EVENT_DATA {
    ULONG64 TimeStamp;
    ULONG ProcessId;
    ULONG ThreadId;
    ULONG64 IptOption;
    ULONG IptTraceSize;
    ULONG IptTraceStopOffset;
    UCHAR IptTrace[1];
};

typedef struct _IRP {
    SHORT Type;
    USHORT Size;
    struct _MDL *MdlAddress;
    ULONG Flags;
     <unnamed-type-AssociatedIrp>;
    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;
    struct _LIST_ENTRY ThreadListEntry;
    struct _IO_STATUS_BLOCK IoStatus;
    CHAR RequestorMode;
    UCHAR PendingReturned;
    CHAR StackCount;
    CHAR CurrentLocation;
    UCHAR Cancel;
    UCHAR CancelIrql;
    CHAR ApcEnvironment;
    UCHAR AllocationFlags;
    struct _IO_STATUS_BLOCK *UserIosb;
    struct _KEVENT *UserEvent;
     <unnamed-type-Overlay>;
    union {
         <unnamed-type-AsynchronousParameters>;
        struct {
            PVOID UserApcRoutine;
            PVOID IssuingProcess;
            PVOID UserApcContext;
        } AsynchronousParameters;
        union _LARGE_INTEGER AllocationSize;
    } Overlay;
    PVOID CancelRoutine;
    PVOID UserBuffer;
     <unnamed-type-Tail>;
    union {
         <unnamed-type-Overlay>;
        struct {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
            PVOID DriverContext[4];
            struct _ETHREAD *Thread;
            PCHAR AuxiliaryBuffer;
            struct _LIST_ENTRY ListEntry;
            struct _IO_STACK_LOCATION *CurrentStackLocation;
            ULONG PacketType;
            struct _FILE_OBJECT *OriginalFileObject;
        } Overlay;
        struct _KAPC Apc;
        PVOID CompletionKey;
    } Tail;
};

typedef struct _KADDRESS_RANGE {
    PVOID Address;
    ULONG64 Size;
};

typedef struct _KADDRESS_RANGE_DESCRIPTOR {
    struct _KADDRESS_RANGE *AddressRanges;
    ULONG64 AddressRangeCount;
};

typedef struct _KAFFINITY_ENUMERATION_CONTEXT {
    struct _KAFFINITY_EX *Affinity;
    ULONG64 CurrentMask;
    USHORT CurrentIndex;
};

typedef struct _KAFFINITY_EX {
    USHORT Count;
    USHORT Size;
    ULONG Reserved;
    ULONG64 Bitmap[20];
};

typedef struct _KAPC {
    UCHAR Type;
    UCHAR SpareByte0;
    UCHAR Size;
    UCHAR SpareByte1;
    ULONG SpareLong0;
    struct _KTHREAD *Thread;
    struct _LIST_ENTRY ApcListEntry;
    PVOID Reserved[3];
    PVOID NormalContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CHAR ApcStateIndex;
    CHAR ApcMode;
    UCHAR Inserted;
};

typedef struct _KBUGCHECK_ADD_PAGES {
    PVOID Context;
    ULONG Flags;
    ULONG BugCheckCode;
    ULONG64 Address;
    ULONG64 Count;
};

typedef struct _KBUGCHECK_CALLBACK_RECORD {
    struct _LIST_ENTRY Entry;
    PVOID CallbackRoutine;
    PVOID Buffer;
    ULONG Length;
    PUCHAR Component;
    ULONG64 Checksum;
    UCHAR State;
};

typedef struct _KBUGCHECK_DATA {
    ULONG BugCheckDataSize;
    ULONG BugCheckCode;
    ULONG64 Parameter1;
    ULONG64 Parameter2;
    ULONG64 Parameter3;
    ULONG64 Parameter4;
};

typedef struct _KBUGCHECK_DUMP_IO {
    ULONG64 Offset;
    PVOID Buffer;
    ULONG BufferLength;
    enum _KBUGCHECK_DUMP_IO_TYPE Type;
};

typedef struct _KBUGCHECK_REASON_CALLBACK_RECORD {
    struct _LIST_ENTRY Entry;
    PVOID CallbackRoutine;
    PUCHAR Component;
    ULONG64 Checksum;
    enum _KBUGCHECK_CALLBACK_REASON Reason;
    UCHAR State;
};

typedef struct _KBUGCHECK_REMOVE_PAGES {
    PVOID Context;
    ULONG Flags;
    ULONG BugCheckCode;
    ULONG64 Address;
    ULONG64 Count;
};

typedef struct _KBUGCHECK_SECONDARY_DUMP_DATA {
    PVOID InBuffer;
    ULONG InBufferLength;
    ULONG MaximumAllowed;
    struct _GUID Guid;
    PVOID OutBuffer;
    ULONG OutBufferLength;
};

typedef struct _KBUGCHECK_SECONDARY_DUMP_DATA_EX {
    PVOID InBuffer;
    ULONG InBufferLength;
    ULONG MaximumAllowed;
    struct _GUID Guid;
    PVOID OutBuffer;
    ULONG OutBufferLength;
    PVOID Context;
    ULONG Flags;
    ULONG DumpType;
    ULONG BugCheckCode;
    ULONG64 BugCheckParameter1;
    ULONG64 BugCheckParameter2;
    ULONG64 BugCheckParameter3;
    ULONG64 BugCheckParameter4;
};

typedef struct _KBUGCHECK_TRIAGE_DUMP_DATA {
    struct _KTRIAGE_DUMP_DATA_ARRAY *DataArray;
    ULONG Flags;
    ULONG MaxVirtMemSize;
    ULONG BugCheckCode;
    ULONG64 BugCheckParameter1;
    ULONG64 BugCheckParameter2;
    ULONG64 BugCheckParameter3;
    ULONG64 BugCheckParameter4;
};

typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
};

typedef struct _KCRM_PROTOCOL_BLOB {
    struct _GUID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
};

typedef struct _KCRM_TRANSACTION_BLOB {
    struct _GUID UOW;
    struct _GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
};

typedef struct _KDESCRIPTOR {
    USHORT Pad[3];
    USHORT Limit;
    PVOID Base;
};

typedef struct _KDEVICE_QUEUE {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY DeviceListHead;
    ULONG64 Lock;
    UCHAR Busy;
    LONG64 Reserved : 8;
    LONG64 Hint : 56;
};

typedef struct _KDEVICE_QUEUE_ENTRY {
    struct _LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    UCHAR Inserted;
};

typedef struct _KDPC {
    ULONG TargetInfoAsUlong;
    UCHAR Type;
    UCHAR Importance;
    USHORT Number;
    struct _SINGLE_LIST_ENTRY DpcListEntry;
    ULONG64 ProcessorHistory;
    PVOID DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PVOID DpcData;
};

typedef struct _KDPC_WATCHDOG_INFORMATION {
    ULONG DpcTimeLimit;
    ULONG DpcTimeCount;
    ULONG DpcWatchdogLimit;
    ULONG DpcWatchdogCount;
    ULONG Reserved;
};

typedef struct _KENLISTMENT {
};

typedef struct _KERNEL_USER_TIMES {
    union _LARGE_INTEGER CreateTime;
    union _LARGE_INTEGER ExitTime;
    union _LARGE_INTEGER KernelTime;
    union _LARGE_INTEGER UserTime;
};

typedef struct _KEVENT {
    struct _DISPATCHER_HEADER Header;
    VOID _KEVENT;
    VOID _KEVENT;
    struct _KEVENT *operator=;
    struct _KEVENT *operator=;
};

typedef struct _KEXCEPTION_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;
    ULONG64 Spare1;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    ULONG64 TrapFrame;
    ULONG64 OutputBuffer;
    ULONG64 OutputLength;
    ULONG64 Spare2;
    ULONG64 MxCsr;
    ULONG64 Rbp;
    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Return;
};

typedef struct _KEY_BASIC_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_CACHED_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG SubKeys;
    ULONG MaxNameLen;
    ULONG Values;
    ULONG MaxValueNameLen;
    ULONG MaxValueDataLen;
    ULONG NameLength;
};

typedef struct _KEY_CONTROL_FLAGS_INFORMATION {
    ULONG ControlFlags;
};

typedef struct _KEY_FULL_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG ClassOffset;
    ULONG ClassLength;
    ULONG SubKeys;
    ULONG MaxNameLen;
    ULONG MaxClassLen;
    ULONG Values;
    ULONG MaxValueNameLen;
    ULONG MaxValueDataLen;
    WCHAR Class[1];
};

typedef struct _KEY_LAYER_INFORMATION {
    ULONG IsTombstone : 1;
    ULONG IsSupersedeLocal : 1;
    ULONG IsSupersedeTree : 1;
    ULONG ClassIsInherited : 1;
    ULONG Reserved : 28;
};

typedef struct _KEY_NAME_INFORMATION {
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_NODE_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG ClassOffset;
    ULONG ClassLength;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_SET_VIRTUALIZATION_INFORMATION {
    ULONG VirtualTarget : 1;
    ULONG VirtualStore : 1;
    ULONG VirtualSource : 1;
    ULONG Reserved : 29;
};

typedef struct _KEY_TRUST_INFORMATION {
    ULONG TrustedKey : 1;
    ULONG Reserved : 31;
};

typedef struct _KEY_VALUE_BASIC_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_VALUE_ENTRY {
    struct _UNICODE_STRING *ValueName;
    ULONG DataLength;
    ULONG DataOffset;
    ULONG Type;
};

typedef struct _KEY_VALUE_FULL_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_VALUE_LAYER_INFORMATION {
    ULONG IsTombstone : 1;
    ULONG Reserved : 31;
};

typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _KEY_VIRTUALIZATION_INFORMATION {
    ULONG VirtualizationCandidate : 1;
    ULONG VirtualizationEnabled : 1;
    ULONG VirtualTarget : 1;
    ULONG VirtualStore : 1;
    ULONG VirtualSource : 1;
    ULONG Reserved : 27;
};

typedef struct _KEY_WOW64_FLAGS_INFORMATION {
    ULONG UserFlags;
};

typedef struct _KEY_WRITE_TIME_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
};

typedef struct _KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT {
    enum KE_PROCESSOR_CHANGE_NOTIFY_STATE State;
    ULONG NtNumber;
    LONG Status;
    struct _PROCESSOR_NUMBER ProcNumber;
};

typedef struct _KFLOATING_SAVE {
    ULONG Dummy;
};

typedef struct _KGATE {
    struct _DISPATCHER_HEADER Header;
    VOID _KGATE;
    VOID _KGATE;
    struct _KGATE *operator=;
    struct _KGATE *operator=;
};

typedef struct _KINTERRUPT {
};

typedef struct _KLOCK_QUEUE_HANDLE {
    struct _KSPIN_LOCK_QUEUE LockQueue;
    UCHAR OldIrql;
    VOID _KLOCK_QUEUE_HANDLE;
    VOID _KLOCK_QUEUE_HANDLE;
    struct _KLOCK_QUEUE_HANDLE *operator=;
    struct _KLOCK_QUEUE_HANDLE *operator=;
};

typedef struct _KMUTANT {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY MutantListEntry;
    struct _KTHREAD *OwnerThread;
    UCHAR Abandoned;
    UCHAR ApcDisable;
    VOID _KMUTANT;
    VOID _KMUTANT;
    struct _KMUTANT *operator=;
    struct _KMUTANT *operator=;
};

typedef struct _KNODE {
};

typedef struct _KPCR {
    struct _NT_TIB NtTib;
    union _KGDTENTRY64 *GdtBase;
    struct _KTSS64 *TssBase;
    ULONG64 UserRsp;
    struct _KPCR *Self;
    struct _KPRCB *CurrentPrcb;
    struct _KSPIN_LOCK_QUEUE *LockArray;
    PVOID Used_Self;
    union _KIDTENTRY64 *IdtBase;
    ULONG64 Unused[2];
    UCHAR Irql;
    UCHAR SecondLevelCacheAssociativity;
    UCHAR ObsoleteNumber;
    UCHAR Fill0;
    ULONG Unused0[3];
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG StallScaleFactor;
    PVOID Unused1[3];
    ULONG KernelReserved[15];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG Unused2;
    PVOID KdVersionBlock;
    PVOID Unused3;
    ULONG PcrAlign1[24];
};

typedef struct _KPRCB {
    ULONG MxCsr;
    UCHAR LegacyNumber;
    UCHAR ReservedMustBeZero;
    UCHAR InterruptRequest;
    UCHAR IdleHalt;
    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;
    UCHAR NestingLevel;
    UCHAR ClockOwner;
    UCHAR PendingTickFlags;
    UCHAR PendingTick : 1;
    UCHAR PendingBackupTick : 1;
    UCHAR IdleState;
    ULONG Number;
    ULONG64 RspBase;
    ULONG64 PrcbLock;
    PCHAR PriorityState;
    CHAR CpuType;
    CHAR CpuID;
    USHORT CpuStep;
    UCHAR CpuStepping;
    UCHAR CpuModel;
    ULONG MHz;
    ULONG64 HalReserved[8];
    USHORT MinorVersion;
    USHORT MajorVersion;
    UCHAR BuildType;
    UCHAR CpuVendor;
    UCHAR CoresPerPhysicalProcessor;
    UCHAR LogicalProcessorsPerCore;
    ULONG64 PrcbPad04[6];
    struct _KNODE *ParentNode;
    ULONG64 GroupSetMember;
    UCHAR Group;
    UCHAR GroupIndex;
    UCHAR PrcbPad05[2];
    ULONG InitialApicId;
    ULONG ScbOffset;
    ULONG ApicMask;
    PVOID AcpiReserved;
    ULONG CFlushSize;
    ULONG64 TrappedSecurityDomain;
    UCHAR BpbState;
    UCHAR BpbCpuIdle : 1;
    UCHAR BpbFlushRsbOnTrap : 1;
    UCHAR BpbIbpbOnReturn : 1;
    UCHAR BpbIbpbOnTrap : 1;
    UCHAR BpbIbpbOnRetpolineExit : 1;
    UCHAR BpbStateReserved : 3;
    UCHAR BpbFeatures;
    UCHAR BpbClearOnIdle : 1;
    UCHAR BpbEnabled : 1;
    UCHAR BpbSmep : 1;
    UCHAR BpbFeaturesReserved : 5;
    UCHAR BpbCurrentSpecCtrl;
    UCHAR BpbKernelSpecCtrl;
    UCHAR BpbNmiSpecCtrl;
    UCHAR BpbUserSpecCtrl;
    SHORT PairRegister;
    ULONG64 PrcbPad11[2];
    struct _KPROCESSOR_STATE ProcessorState;
    struct _XSAVE_AREA_HEADER *ExtendedSupervisorState;
    ULONG ProcessorSignature;
    ULONG ProcessorFlags;
    ULONG64 PrcbPad12a;
    ULONG64 PrcbPad12[3];
    VOID _KPRCB;
    VOID _KPRCB;
    struct _KPRCB *operator=;
    struct _KPRCB *operator=;
};

typedef struct _KPROCESS {
};

typedef struct _KPROCESSOR_STATE {
    struct _KSPECIAL_REGISTERS SpecialRegisters;
    struct _CONTEXT ContextFrame;
};

typedef struct _KQUEUE {
};

typedef struct _KRESOURCEMANAGER {
};

typedef struct _KSEMAPHORE {
    struct _DISPATCHER_HEADER Header;
    LONG Limit;
    VOID _KSEMAPHORE;
    VOID _KSEMAPHORE;
    struct _KSEMAPHORE *operator=;
    struct _KSEMAPHORE *operator=;
};

typedef struct _KSPECIAL_REGISTERS {
    ULONG64 Cr0;
    ULONG64 Cr2;
    ULONG64 Cr3;
    ULONG64 Cr4;
    ULONG64 KernelDr0;
    ULONG64 KernelDr1;
    ULONG64 KernelDr2;
    ULONG64 KernelDr3;
    ULONG64 KernelDr6;
    ULONG64 KernelDr7;
    struct _KDESCRIPTOR Gdtr;
    struct _KDESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG MxCsr;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    ULONG64 Cr8;
    ULONG64 MsrGsBase;
    ULONG64 MsrGsSwap;
    ULONG64 MsrStar;
    ULONG64 MsrLStar;
    ULONG64 MsrCStar;
    ULONG64 MsrSyscallMask;
    ULONG64 Xcr0;
    ULONG64 MsrFsBase;
    ULONG64 SpecialPadding0;
};

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE *Next;
    PULONG64 Lock;
    VOID _KSPIN_LOCK_QUEUE;
    VOID _KSPIN_LOCK_QUEUE;
    struct _KSPIN_LOCK_QUEUE *operator=;
    struct _KSPIN_LOCK_QUEUE *operator=;
};

typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};

typedef struct _KTHREAD {
};

typedef struct _KTIMER {
    struct _DISPATCHER_HEADER Header;
    union _ULARGE_INTEGER DueTime;
    struct _LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;
    ULONG Processor;
    ULONG Period;
    VOID _KTIMER;
    VOID _KTIMER;
    struct _KTIMER *operator=;
    struct _KTIMER *operator=;
};

typedef struct _KTM {
};

typedef struct _KTMOBJECT_CURSOR {
    struct _GUID LastQuery;
    ULONG ObjectIdCount;
    struct _GUID ObjectIds[1];
};

typedef struct _KTRANSACTION {
};

typedef struct _KTRAP_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;
    CHAR PreviousMode;
    UCHAR PreviousIrql;
    UCHAR FaultIndicator;
    UCHAR ExceptionActive;
    ULONG MxCsr;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 GsBase;
    ULONG64 GsSwap;
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    ULONG64 FaultAddress;
    ULONG64 ContextRecord;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    ULONG64 TrapFrame;
    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 Rbp;
    ULONG64 ErrorCode;
    ULONG64 ExceptionFrame;
    ULONG64 Rip;
    USHORT SegCs;
    UCHAR Fill0;
    UCHAR Logging;
    USHORT Fill1[2];
    ULONG EFlags;
    ULONG Fill2;
    ULONG64 Rsp;
    USHORT SegSs;
    USHORT Fill3;
    ULONG Fill4;
};

typedef struct _KTRIAGE_DUMP_DATA_ARRAY {
    struct _LIST_ENTRY List;
    ULONG NumBlocksUsed;
    ULONG NumBlocksTotal;
    ULONG VirtMemSize;
    ULONG ComponentNameBufferLength;
    PUCHAR ComponentName;
    struct _KADDRESS_RANGE Blocks[1];
};

typedef struct _KTSS64 {
    ULONG Reserved0;
    ULONG64 Rsp0;
    ULONG64 Rsp1;
    ULONG64 Rsp2;
    ULONG64 Ist[8];
    ULONG64 Reserved1;
    USHORT Reserved2;
    USHORT IoMapBase;
};

typedef struct _KUMS_CONTEXT_HEADER {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    PVOID StackTop;
    ULONG64 StackSize;
    ULONG64 RspOffset;
    ULONG64 Rip;
    struct _XSAVE_FORMAT *FltSave;
    ULONG64 Volatile : 1;
    ULONG64 Reserved : 63;
    ULONG64 Flags;
    struct _KTRAP_FRAME *TrapFrame;
    struct _KEXCEPTION_FRAME *ExceptionFrame;
    struct _KTHREAD *SourceThread;
    ULONG64 Return;
};

typedef struct _KUSER_SHARED_DATA {
    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;
    struct _KSYSTEM_TIME InterruptTime;
    struct _KSYSTEM_TIME SystemTime;
    struct _KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    WCHAR NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG LargePageMinimum;
    ULONG AitSamplingValue;
    ULONG AppCompatFlag;
    ULONG64 RNGSeedVersion;
    ULONG GlobalValidationRunlevel;
    LONG TimeZoneBiasStamp;
    ULONG NtBuildNumber;
    enum _NT_PRODUCT_TYPE NtProductType;
    UCHAR ProductTypeIsValid;
    UCHAR Reserved0[1];
    USHORT NativeProcessorArchitecture;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    UCHAR ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    ULONG TimeSlip;
    enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
    ULONG BootId;
    union _LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    UCHAR KdDebuggerEnabled;
    UCHAR MitigationPolicies;
    UCHAR NXSupportPolicy : 2;
    UCHAR SEHValidationPolicy : 2;
    UCHAR CurDirDevicesSkippedForDlls : 2;
    UCHAR Reserved : 2;
    UCHAR Reserved6[2];
    ULONG ActiveConsoleId;
    ULONG DismountCount;
    ULONG ComPlusPackage;
    ULONG LastSystemRITEventTickCount;
    ULONG NumberOfPhysicalPages;
    UCHAR SafeBootMode;
    UCHAR VirtualizationFlags;
    UCHAR Reserved12[2];
    ULONG SharedDataFlags;
    ULONG DbgErrorPortPresent : 1;
    ULONG DbgElevationEnabled : 1;
    ULONG DbgVirtEnabled : 1;
    ULONG DbgInstallerDetectEnabled : 1;
    ULONG DbgLkgEnabled : 1;
    ULONG DbgDynProcessorEnabled : 1;
    ULONG DbgConsoleBrokerEnabled : 1;
    ULONG DbgSecureBootEnabled : 1;
    ULONG DbgMultiSessionSku : 1;
    ULONG DbgMultiUsersInSessionSku : 1;
    ULONG DbgStateSeparationEnabled : 1;
    ULONG SpareBits : 21;
    ULONG DataFlagsPad[1];
    ULONG64 TestRetInstruction;
    LONG64 QpcFrequency;
    ULONG SystemCall;
    ULONG SystemCallPad0;
    ULONG64 SystemCallPad[2];
    struct _KSYSTEM_TIME TickCount;
    ULONG64 TickCountQuad;
    ULONG ReservedTickCountOverlay[3];
    ULONG TickCountPad[1];
    ULONG Cookie;
    ULONG CookiePad[1];
    LONG64 ConsoleSessionForegroundProcessId;
    ULONG64 TimeUpdateLock;
    ULONG64 BaselineSystemTimeQpc;
    ULONG64 BaselineInterruptTimeQpc;
    ULONG64 QpcSystemTimeIncrement;
    ULONG64 QpcInterruptTimeIncrement;
    UCHAR QpcSystemTimeIncrementShift;
    UCHAR QpcInterruptTimeIncrementShift;
    USHORT UnparkedProcessorCount;
    ULONG EnclaveFeatureMask[4];
    ULONG TelemetryCoverageRound;
    USHORT UserModeGlobalLogger[16];
    ULONG ImageFileExecutionOptions;
    ULONG LangGenerationCount;
    ULONG64 Reserved4;
    ULONG64 InterruptTimeBias;
    ULONG64 QpcBias;
    ULONG ActiveProcessorCount;
    UCHAR ActiveGroupCount;
    UCHAR Reserved9;
    USHORT QpcData;
    UCHAR QpcBypassEnabled;
    UCHAR QpcShift;
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
    struct _XSTATE_CONFIGURATION XState;
};

typedef struct _KWAIT_BLOCK {
    struct _LIST_ENTRY WaitListEntry;
    UCHAR WaitType;
    UCHAR BlockState;
    USHORT WaitKey;
    LONG SpareLong;
    struct _KTHREAD *Thread;
    struct _KQUEUE *NotificationQueue;
    PVOID Object;
    PVOID SparePtr;
    VOID _KWAIT_BLOCK;
    VOID _KWAIT_BLOCK;
    struct _KWAIT_BLOCK *operator=;
    struct _KWAIT_BLOCK *operator=;
};

typedef struct _KWAIT_CHAIN {
    PVOID Head;
};

typedef struct _LBR_TRACE_EVENT_DATA {
    ULONG64 TimeStamp;
    ULONG ProcessId;
    ULONG ThreadId;
    ULONG Options;
    struct _ETW_LBR_ENTRY Entries[1];
};

typedef struct _LEAP_SECOND_DATA {
};

typedef struct _LEGACY_BUS_INFORMATION {
    struct _GUID BusTypeGuid;
    enum _INTERFACE_TYPE LegacyBusType;
    ULONG BusNumber;
};

typedef struct _LIBRARY_MODULE {
};

typedef struct _LINK_SHARE_ACCESS {
    ULONG OpenCount;
    ULONG Deleters;
    ULONG SharedDelete;
};

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
};

typedef struct _LOADER_PARAMETER_BLOCK {
};

typedef struct _LOADER_PARTITION_INFORMATION_EX {
    ULONG PartitionStyle;
    ULONG PartitionNumber;
    ULONG Signature;
    struct _GUID DeviceId;
    ULONG Flags;
};

typedef struct _LOAD_DLL_EVENT_DATA {
    WCHAR ImageName[1];
};

typedef struct _LOGICAL_DISK_DEFRAG {
    ULONG64 AlignmentClusters;
    ULONG64 AvgFreeSpaceSize;
    ULONG64 ClustersPerSlab;
    ULONG64 FragmentedDirectoryExtents;
    ULONG64 FragmentedExtents;
    ULONG64 FreeSpaceCount;
    ULONG64 LargestFreeSpaceSize;
    ULONG64 LastRunActualPurgeClusters;
    ULONG64 LastRunClustersTrimmed;
    ULONG64 LastRunFullDefragTime;
    ULONG64 LastRunTime;
    ULONG64 MFTSize;
    ULONG64 TotalClusters;
    ULONG64 TotalUsedClusters;
    ULONG AvgFragmentsPerFile;
    ULONG BytesPerCluster;
    ULONG DirectoryCount;
    ULONG FragmentedDirectories;
    ULONG FragmentedFiles;
    ULONG FragmentedSpace;
    ULONG HardwareIssue;
    ULONG InUseMFTRecords;
    ULONG InUseSlabs;
    ULONG LastRunActualPurgeSlabs;
    ULONG LastRunInitialBackedSlabs;
    ULONG LastRunPercentFragmentation;
    ULONG LastRunPinnedSlabs;
    ULONG LastRunPotentialPurgeSlabs;
    ULONG LastRunSpaceInefficientSlabs;
    ULONG LastRunTrimmedSlabs;
    ULONG LastRunUnknownEvictFailSlabs;
    ULONG LastRunVolsnapPinnedSlabs;
    ULONG MFTFragmentCount;
    ULONG MovableFiles;
    ULONG TotalMFTRecords;
    ULONG TotalSlabs;
    ULONG UnmovableFiles;
    struct _GUID VolumeId;
    WCHAR VolumePathNames[1];
};

typedef struct _LOGICAL_DISK_EXTENTS {
    ULONG64 StartingOffset;
    ULONG64 PartitionSize;
    ULONG DiskNumber;
    ULONG Size;
    ULONG DriveType;
    WCHAR DriveLetterString[4];
    ULONG Pad;
    ULONG PartitionNumber;
    ULONG SectorsPerCluster;
    ULONG BytesPerSector;
    LONG64 NumberOfFreeClusters;
    LONG64 TotalNumberOfClusters;
    WCHAR FileSystemType[16];
    ULONG VolumeExt;
};

typedef struct _LOOKASIDE_LIST_EX {
    struct _GENERAL_LOOKASIDE_POOL L;
};

typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
};

typedef struct _LUID_AND_ATTRIBUTES {
    struct _LUID Luid;
    ULONG Attributes;
};

typedef struct _M128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    union _LARGE_INTEGER ReadTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _MAP_REGISTER_ENTRY {
    PVOID MapRegister;
    UCHAR WriteToDevice;
};

typedef struct _MARKER_TYPE {
    UCHAR Pad[16];
};

typedef struct _MCA_DRIVER_INFO {
    PUCHAR ExceptionCallback;
    PVOID DpcCallback;
    PVOID DeviceContext;
};

typedef struct _MCA_EXCEPTION {
    ULONG VersionNumber;
    enum MCA_EXCEPTION_TYPE ExceptionType;
    union _LARGE_INTEGER TimeStamp;
    ULONG ProcessorNumber;
    ULONG Reserved1;
     <unnamed-type-u>;
    union {
         <unnamed-type-Mca>;
        struct {
            UCHAR BankNumber;
            UCHAR Reserved2[7];
            union _MCI_STATS Status;
            union _MCI_ADDR Address;
            ULONG64 Misc;
        } Mca;
         <unnamed-type-Mce>;
        struct {
            ULONG64 Address;
            ULONG64 Type;
        } Mce;
    } u;
    ULONG ExtCnt;
    ULONG Reserved3;
    ULONG64 ExtReg[24];
};

typedef struct _MCGEN_TRACE_CONTEXT {
    ULONG64 RegistrationHandle;
    ULONG64 Logger;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    ULONG Flags;
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserve;
    USHORT EnableBitsCount;
    PULONG EnableBitMask;
    PULONG64 EnableKeyWords;
    PUCHAR EnableLevel;
};

typedef struct _MDL {
    struct _MDL *Next;
    SHORT Size;
    SHORT MdlFlags;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
};

typedef struct _MEM_ADDRESS_REQUIREMENTS {
    PVOID LowestStartingAddress;
    PVOID HighestEndingAddress;
    ULONG64 Alignment;
};

typedef struct _MESSAGE_TRACE {
    struct _MESSAGE_TRACE_HEADER MessageHeader;
    UCHAR Data;
};

typedef struct _MESSAGE_TRACE_HEADER {
    ULONG Marker;
    USHORT Size;
    UCHAR Reserved;
    UCHAR Version;
    ULONG Header;
    struct _WMI_TRACE_MESSAGE_PACKET Packet;
};

typedef struct _MESSAGE_TRACE_USER {
    struct _MESSAGE_TRACE_HEADER MessageHeader;
    struct _GUID MessageGuid;
    ULONG MessageFlags;
    ULONG DataSize;
    ULONG64 Data;
};

typedef struct _MM_COPY_ADDRESS {
    PVOID VirtualAddress;
    union _LARGE_INTEGER PhysicalAddress;
};

typedef struct _MM_PHYSICAL_ADDRESS_LIST {
    union _LARGE_INTEGER PhysicalAddress;
    ULONG64 NumberOfBytes;
};

typedef struct _MOF_FIELD {
    ULONG64 DataPtr;
    ULONG Length;
    ULONG DataType;
};

typedef struct _MP {
    USHORT MaxPacket : 11;
    USHORT HSmux : 2;
    USHORT Reserved : 3;
};

typedef struct _MX_WNF_SUBSCRIPTION_CONTEXT {
    struct _EX_WNF_SUBSCRIPTION *Handle;
    struct _WNF_STATE_NAME WnfStateName;
    PLONG Callback;
    PVOID CallbackContext;
};

typedef struct _MdTimer {
    LONG m_Period;
    UCHAR m_IsExtTimer;
    PVOID m_TimerCallback;
    struct _KTIMER KernelTimer;
    struct _KDPC TimerDpc;
    PVOID m_ExTimerCallback;
    struct _EX_TIMER *m_KernelExTimer;
    PVOID m_TimerContext;
};

typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    union _LARGE_INTEGER DefaultTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _NIC_RECORD {
    WCHAR NICName[256];
    ULONG Index;
    ULONG PhysicalAddrLen;
    WCHAR PhysicalAddr[8];
    ULONG Size;
    LONG IpAddress;
    LONG SubnetMask;
    LONG DhcpServer;
    LONG Gateway;
    LONG PrimaryWinsServer;
    LONG SecondaryWinsServer;
    LONG DnsServer[4];
    ULONG Data;
};

typedef struct _NPAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    ULONG Version;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
};

typedef struct _NT_TIB32 {
    ULONG ExceptionList;
    ULONG StackBase;
    ULONG StackLimit;
    ULONG SubSystemTib;
    ULONG FiberData;
    ULONG Version;
    ULONG ArbitraryUserPointer;
    ULONG Self;
};

typedef struct _NT_TIB64 {
    ULONG64 ExceptionList;
    ULONG64 StackBase;
    ULONG64 StackLimit;
    ULONG64 SubSystemTib;
    ULONG64 FiberData;
    ULONG Version;
    ULONG64 ArbitraryUserPointer;
    ULONG64 Self;
};

typedef struct _NUMA_NODE_RELATIONSHIP {
    ULONG NodeNumber;
    UCHAR Reserved[20];
    struct _GROUP_AFFINITY GroupMask;
};

typedef struct _NV_MEMORY_RANGE {
    PVOID BaseAddress;
    ULONG64 Length;
};

typedef struct _OBJECTID {
    struct _GUID Lineage;
    ULONG Uniquifier;
};

typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    PVOID RootDirectory;
    struct _UNICODE_STRING *ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
};

typedef struct _OBJECT_ATTRIBUTES32 {
    ULONG Length;
    ULONG RootDirectory;
    ULONG ObjectName;
    ULONG Attributes;
    ULONG SecurityDescriptor;
    ULONG SecurityQualityOfService;
};

typedef struct _OBJECT_ATTRIBUTES64 {
    ULONG Length;
    ULONG64 RootDirectory;
    ULONG64 ObjectName;
    ULONG Attributes;
    ULONG64 SecurityDescriptor;
    ULONG64 SecurityQualityOfService;
};

typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
};

typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ULONG GrantedAccess;
};

typedef struct _OBJECT_NAME_INFORMATION {
    struct _UNICODE_STRING Name;
};

typedef struct _OBJECT_TYPE {
    struct _LIST_ENTRY TypeList;
    struct _UNICODE_STRING Name;
    PVOID DefaultObject;
    UCHAR Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;
    struct _EX_PUSH_LOCK TypeLock;
    ULONG Key;
    struct _LIST_ENTRY CallbackList;
};

typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    USHORT ObjectTypeFlags;
    UCHAR CaseInsensitive : 1;
    UCHAR UnnamedObjectsOnly : 1;
    UCHAR UseDefaultObject : 1;
    UCHAR SecurityRequired : 1;
    UCHAR MaintainHandleCount : 1;
    UCHAR MaintainTypeList : 1;
    UCHAR SupportsObjectCallbacks : 1;
    UCHAR CacheAligned : 1;
    UCHAR UseExtendedParameters : 1;
    UCHAR Reserved : 7;
    ULONG ObjectTypeCode;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG RetainAccess;
    enum _POOL_TYPE PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    PVOID DumpProcedure;
    PLONG OpenProcedure;
    PVOID CloseProcedure;
    PVOID DeleteProcedure;
    PLONG ParseProcedure;
    PLONG ParseProcedureEx;
    PLONG SecurityProcedure;
    PLONG QueryNameProcedure;
    PUCHAR OkayToCloseProcedure;
    ULONG WaitObjectFlagMask;
    USHORT WaitObjectFlagOffset;
    USHORT WaitObjectPointerOffset;
};

typedef struct _OB_CALLBACK_REGISTRATION {
    USHORT Version;
    USHORT OperationRegistrationCount;
    struct _UNICODE_STRING Altitude;
    PVOID RegistrationContext;
    struct _OB_OPERATION_REGISTRATION *OperationRegistration;
};

typedef struct _OB_EXTENDED_PARSE_PARAMETERS {
    USHORT Length;
    ULONG RestrictedAccessMask;
    struct _EJOB *Silo;
};

typedef struct _OB_OPERATION_REGISTRATION {
    struct _OBJECT_TYPE **ObjectType;
    ULONG Operations;
    enum _OB_PREOP_CALLBACK_STATUS *PreOperation;
    PVOID PostOperation;
};

typedef struct _OB_POST_CREATE_HANDLE_INFORMATION {
    ULONG GrantedAccess;
};

typedef struct _OB_POST_DUPLICATE_HANDLE_INFORMATION {
    ULONG GrantedAccess;
};

typedef struct _OB_POST_OPERATION_INFORMATION {
    ULONG Operation;
    ULONG Flags;
    ULONG KernelHandle : 1;
    ULONG Reserved : 31;
    PVOID Object;
    struct _OBJECT_TYPE *ObjectType;
    PVOID CallContext;
    LONG ReturnStatus;
    union _OB_POST_OPERATION_PARAMETERS *Parameters;
};

typedef struct _OB_PRE_CREATE_HANDLE_INFORMATION {
    ULONG DesiredAccess;
    ULONG OriginalDesiredAccess;
};

typedef struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION {
    ULONG DesiredAccess;
    ULONG OriginalDesiredAccess;
    PVOID SourceProcess;
    PVOID TargetProcess;
};

typedef struct _OB_PRE_OPERATION_INFORMATION {
    ULONG Operation;
    ULONG Flags;
    ULONG KernelHandle : 1;
    ULONG Reserved : 31;
    PVOID Object;
    struct _OBJECT_TYPE *ObjectType;
    PVOID CallContext;
    union _OB_PRE_OPERATION_PARAMETERS *Parameters;
};

typedef struct _OPLOCK_KEY_CONTEXT {
    USHORT Version;
    USHORT Flags;
    struct _GUID ParentOplockKey;
    struct _GUID TargetOplockKey;
    ULONG Reserved;
};

typedef struct _OPLOCK_KEY_ECP_CONTEXT {
};

typedef struct _OPTICAL_MEDIA_RECORD {
    USHORT DiskNumber;
    USHORT BusType;
    USHORT DeviceType;
    USHORT MediaType;
    ULONG64 StartingOffset;
    ULONG64 Size;
    ULONG64 NumberOfFreeBlocks;
    ULONG64 TotalNumberOfBlocks;
    ULONG64 NextWritableAddress;
    ULONG NumberOfSessions;
    ULONG NumberOfTracks;
    ULONG BytesPerSector;
    USHORT DiscStatus;
    USHORT LastSessionStatus;
    WCHAR Data[1];
};

typedef struct _OSVERSIONINFOA {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    CHAR szCSDVersion[128];
};

typedef struct _OSVERSIONINFOEXA {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    CHAR szCSDVersion[128];
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
};

typedef struct _OSVERSIONINFOEXW {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    WCHAR szCSDVersion[128];
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
};

typedef struct _OSVERSIONINFOW {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    WCHAR szCSDVersion[128];
};

typedef struct _OS_STRING {
    UCHAR bLength;
    UCHAR bDescriptorType;
    WCHAR MicrosoftString[7];
    UCHAR bVendorCode;
    UCHAR bPad;
    UCHAR bFlags;
};

typedef struct _OWNER_ENTRY {
    ULONG64 OwnerThread;
    ULONG IoPriorityBoosted : 1;
    ULONG OwnerReferenced : 1;
    ULONG IoQoSPriorityBoosted : 1;
    ULONG OwnerCount : 29;
    ULONG TableSize;
};

typedef struct _PAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _PAGE_PRIORITY_INFORMATION {
    ULONG PagePriority;
};

typedef struct _PCIBUSDATA {
    ULONG Tag;
    ULONG Version;
    PVOID ReadConfig;
    PVOID WriteConfig;
    PVOID Pin2Line;
    PVOID Line2Pin;
    struct _PCI_SLOT_NUMBER ParentSlot;
    PVOID Reserved[4];
};

typedef struct _PCIX_BRIDGE_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-SecondaryStatus>;
    union {
        USHORT Bus64Bit : 1;
        USHORT Bus133MHzCapable : 1;
        USHORT SplitCompletionDiscarded : 1;
        USHORT UnexpectedSplitCompletion : 1;
        USHORT SplitCompletionOverrun : 1;
        USHORT SplitRequestDelayed : 1;
        USHORT BusModeFrequency : 4;
        USHORT Rsvd : 2;
        USHORT Version : 2;
        USHORT Bus266MHzCapable : 1;
        USHORT Bus533MHzCapable : 1;
        USHORT AsUSHORT;
    } SecondaryStatus;
     <unnamed-type-BridgeStatus>;
    union {
        ULONG FunctionNumber : 3;
        ULONG DeviceNumber : 5;
        ULONG BusNumber : 8;
        ULONG Device64Bit : 1;
        ULONG Device133MHzCapable : 1;
        ULONG SplitCompletionDiscarded : 1;
        ULONG UnexpectedSplitCompletion : 1;
        ULONG SplitCompletionOverrun : 1;
        ULONG SplitRequestDelayed : 1;
        ULONG Rsvd : 7;
        ULONG DIMCapable : 1;
        ULONG Device266MHzCapable : 1;
        ULONG Device533MHzCapable : 1;
        ULONG AsULONG;
    } BridgeStatus;
    USHORT UpstreamSplitTransactionCapacity;
    USHORT UpstreamSplitTransactionLimit;
    USHORT DownstreamSplitTransactionCapacity;
    USHORT DownstreamSplitTransactionLimit;
     <unnamed-type-EccControlStatus>;
    union {
        ULONG SelectSecondaryRegisters : 1;
        ULONG ErrorPresentInOtherBank : 1;
        ULONG AdditionalCorrectableError : 1;
        ULONG AdditionalUncorrectableError : 1;
        ULONG ErrorPhase : 3;
        ULONG ErrorCorrected : 1;
        ULONG Syndrome : 8;
        ULONG ErrorFirstCommand : 4;
        ULONG ErrorSecondCommand : 4;
        ULONG ErrorUpperAttributes : 4;
        ULONG ControlUpdateEnable : 1;
        ULONG Rsvd : 1;
        ULONG DisableSingleBitCorrection : 1;
        ULONG EccMode : 1;
        ULONG AsULONG;
    } EccControlStatus;
    ULONG EccFirstAddress;
    ULONG EccSecondAddress;
    ULONG EccAttribute;
};

typedef struct _PCI_ADVANCED_FEATURES_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    UCHAR Length;
     <unnamed-type-Capabilities>;
    union {
        UCHAR FunctionLevelResetSupported : 1;
        UCHAR TransactionsPendingSupported : 1;
        UCHAR Rsvd : 6;
        UCHAR AsUCHAR;
    } Capabilities;
     <unnamed-type-Control>;
    union {
        UCHAR InitiateFunctionLevelReset : 1;
        UCHAR Rsvd : 7;
        UCHAR AsUCHAR;
    } Control;
     <unnamed-type-Status>;
    union {
        UCHAR TransactionsPending : 1;
        UCHAR Rsvd : 7;
        UCHAR AsUCHAR;
    } Status;
};

typedef struct _PCI_AGP_APERTURE_PAGE_SIZE {
    USHORT PageSizeMask : 11;
    USHORT Rsvd1 : 1;
    USHORT PageSizeSelect : 4;
};

typedef struct _PCI_AGP_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    USHORT Minor : 4;
    USHORT Major : 4;
    USHORT Rsvd1 : 8;
     _PCI_AGP_STATUS;
    struct _PCI_AGP_CAPABILITY::_PCI_AGP_STATUS AGPStatus;
     _PCI_AGP_COMMAND;
    struct _PCI_AGP_CAPABILITY::_PCI_AGP_COMMAND AGPCommand;
};

typedef struct _PCI_AGP_CAPABILITY::_PCI_AGP_COMMAND {
    ULONG Rate : 3;
    ULONG Rsvd1 : 1;
    ULONG FastWriteEnable : 1;
    ULONG FourGBEnable : 1;
    ULONG Rsvd2 : 1;
    ULONG Gart64 : 1;
    ULONG AGPEnable : 1;
    ULONG SBAEnable : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncReqSize : 3;
    ULONG Rsvd3 : 8;
    ULONG RequestQueueDepth : 8;
};

typedef struct _PCI_AGP_CAPABILITY::_PCI_AGP_STATUS {
    ULONG Rate : 3;
    ULONG Agp3Mode : 1;
    ULONG FastWrite : 1;
    ULONG FourGB : 1;
    ULONG HostTransDisable : 1;
    ULONG Gart64 : 1;
    ULONG ITA_Coherent : 1;
    ULONG SideBandAddressing : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncRequestSize : 3;
    ULONG Rsvd1 : 1;
    ULONG Isoch : 1;
    ULONG Rsvd2 : 6;
    ULONG RequestQueueDepthMaximum : 8;
};

typedef struct _PCI_AGP_COMMAND {
    ULONG Rate : 3;
    ULONG Rsvd1 : 1;
    ULONG FastWriteEnable : 1;
    ULONG FourGBEnable : 1;
    ULONG Rsvd2 : 1;
    ULONG Gart64 : 1;
    ULONG AGPEnable : 1;
    ULONG SBAEnable : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncReqSize : 3;
    ULONG Rsvd3 : 8;
    ULONG RequestQueueDepth : 8;
};

typedef struct _PCI_AGP_CONTROL {
    ULONG Rsvd1 : 7;
    ULONG GTLB_Enable : 1;
    ULONG AP_Enable : 1;
    ULONG CAL_Disable : 1;
    ULONG Rsvd2 : 22;
};

typedef struct _PCI_AGP_ISOCH_COMMAND {
    USHORT Rsvd1 : 6;
    USHORT Isoch_Y : 2;
    USHORT Isoch_N : 8;
};

typedef struct _PCI_AGP_ISOCH_STATUS {
    ULONG ErrorCode : 2;
    ULONG Rsvd1 : 1;
    ULONG Isoch_L : 3;
    ULONG Isoch_Y : 2;
    ULONG Isoch_N : 8;
    ULONG Rsvd2 : 16;
};

typedef struct _PCI_AGP_STATUS {
    ULONG Rate : 3;
    ULONG Agp3Mode : 1;
    ULONG FastWrite : 1;
    ULONG FourGB : 1;
    ULONG HostTransDisable : 1;
    ULONG Gart64 : 1;
    ULONG ITA_Coherent : 1;
    ULONG SideBandAddressing : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncRequestSize : 3;
    ULONG Rsvd1 : 1;
    ULONG Isoch : 1;
    ULONG Rsvd2 : 6;
    ULONG RequestQueueDepthMaximum : 8;
};

typedef struct _PCI_BUS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ReadConfig;
    PULONG WriteConfig;
    PVOID PinToLine;
    PVOID LineToPin;
    PVOID RootBusCapability;
    PVOID ExpressWakeControl;
    PVOID PrepareMultistageResume;
};

typedef struct _PCI_CAPABILITIES_HEADER {
    UCHAR CapabilityID;
    UCHAR Next;
};

typedef struct _PCI_COMMON_CONFIG {
    struct _PCI_COMMON_HEADER _PCI_COMMON_HEADER;
    UCHAR DeviceSpecific[192];
};

typedef struct _PCI_COMMON_HEADER {
    USHORT VendorID;
    USHORT DeviceID;
    USHORT Command;
    USHORT Status;
    UCHAR RevisionID;
    UCHAR ProgIf;
    UCHAR SubClass;
    UCHAR BaseClass;
    UCHAR CacheLineSize;
    UCHAR LatencyTimer;
    UCHAR HeaderType;
    UCHAR BIST;
     <unnamed-type-u>;
    union {
         _PCI_HEADER_TYPE_0;
        struct {
            ULONG BaseAddresses[6];
            ULONG CIS;
            USHORT SubVendorID;
            USHORT SubSystemID;
            ULONG ROMBaseAddress;
            UCHAR CapabilitiesPtr;
            UCHAR Reserved1[3];
            ULONG Reserved2;
            UCHAR InterruptLine;
            UCHAR InterruptPin;
            UCHAR MinimumGrant;
            UCHAR MaximumLatency;
        } type0;
         _PCI_HEADER_TYPE_1;
        struct {
            ULONG BaseAddresses[2];
            UCHAR PrimaryBus;
            UCHAR SecondaryBus;
            UCHAR SubordinateBus;
            UCHAR SecondaryLatency;
            UCHAR IOBase;
            UCHAR IOLimit;
            USHORT SecondaryStatus;
            USHORT MemoryBase;
            USHORT MemoryLimit;
            USHORT PrefetchBase;
            USHORT PrefetchLimit;
            ULONG PrefetchBaseUpper32;
            ULONG PrefetchLimitUpper32;
            USHORT IOBaseUpper16;
            USHORT IOLimitUpper16;
            UCHAR CapabilitiesPtr;
            UCHAR Reserved1[3];
            ULONG ROMBaseAddress;
            UCHAR InterruptLine;
            UCHAR InterruptPin;
            USHORT BridgeControl;
        } type1;
         _PCI_HEADER_TYPE_2;
        struct {
            ULONG SocketRegistersBaseAddress;
            UCHAR CapabilitiesPtr;
            UCHAR Reserved;
            USHORT SecondaryStatus;
            UCHAR PrimaryBus;
            UCHAR SecondaryBus;
            UCHAR SubordinateBus;
            UCHAR SecondaryLatency;
             <unnamed-type-Range>;
            struct {
                ULONG Base;
                ULONG Limit;
            } Range[4];
            UCHAR InterruptLine;
            UCHAR InterruptPin;
            USHORT BridgeControl;
        } type2;
    } u;
};

typedef struct _PCI_DEBUGGING_DEVICE_IN_USE {
    USHORT Segment;
    ULONG Bus;
    ULONG Slot;
};

typedef struct _PCI_DEVICE_PRESENCE_PARAMETERS {
    ULONG Size;
    ULONG Flags;
    USHORT VendorID;
    USHORT DeviceID;
    UCHAR RevisionID;
    USHORT SubVendorID;
    USHORT SubSystemID;
    UCHAR BaseClass;
    UCHAR SubClass;
    UCHAR ProgIf;
};

typedef struct _PCI_DEVICE_PRESENT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PUCHAR IsDevicePresent;
    PUCHAR IsDevicePresentEx;
};

typedef struct _PCI_EXPRESS_ACS_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_ACS_CAPABILITY_REGISTER Capability;
    union _PCI_EXPRESS_ACS_CONTROL Control;
    ULONG EgressControl[1];
};

typedef struct _PCI_EXPRESS_AER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    union _PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
    union _PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
    ULONG SecHeaderLog[4];
};

typedef struct _PCI_EXPRESS_ARI_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    struct _PCI_EXPRESS_ARI_CAPABILITY_REGISTER Capability;
    struct _PCI_EXPRESS_ARI_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_ARI_CAPABILITY_REGISTER {
    USHORT MfvcFunctionGroupsCapability : 1;
    USHORT AcsFunctionGroupsCapability : 1;
    USHORT Reserved : 6;
    USHORT NextFunctionNumber : 8;
};

typedef struct _PCI_EXPRESS_ARI_CONTROL_REGISTER {
    USHORT MfvcFunctionGroupsEnable : 1;
    USHORT AcsFunctionGroupsEnable : 1;
    USHORT Reserved1 : 2;
    USHORT FunctionGroup : 3;
    USHORT Reserved2 : 9;
};

typedef struct _PCI_EXPRESS_ATS_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    struct _PCI_EXPRESS_ATS_CAPABILITY_REGISTER Capability;
    struct _PCI_EXPRESS_ATS_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_ATS_CAPABILITY_REGISTER {
    USHORT InvalidateQueueDepth : 5;
    USHORT PageAlignedRequest : 1;
    USHORT GlobalInvalidateSupported : 1;
    USHORT Reserved : 9;
};

typedef struct _PCI_EXPRESS_ATS_CONTROL_REGISTER {
    USHORT SmallestTransactionUnit : 5;
    USHORT Reserved : 10;
    USHORT Enable : 1;
};

typedef struct _PCI_EXPRESS_BRIDGE_AER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    union _PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
    union _PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
    ULONG SecHeaderLog[4];
};

typedef struct _PCI_EXPRESS_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    union _PCI_EXPRESS_CAPABILITIES_REGISTER ExpressCapabilities;
    union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER DeviceCapabilities;
    union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER DeviceControl;
    union _PCI_EXPRESS_DEVICE_STATUS_REGISTER DeviceStatus;
    union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER LinkCapabilities;
    union _PCI_EXPRESS_LINK_CONTROL_REGISTER LinkControl;
    union _PCI_EXPRESS_LINK_STATUS_REGISTER LinkStatus;
    union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER SlotCapabilities;
    union _PCI_EXPRESS_SLOT_CONTROL_REGISTER SlotControl;
    union _PCI_EXPRESS_SLOT_STATUS_REGISTER SlotStatus;
    union _PCI_EXPRESS_ROOT_CONTROL_REGISTER RootControl;
    union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER RootCapabilities;
    union _PCI_EXPRESS_ROOT_STATUS_REGISTER RootStatus;
    union _PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER DeviceCapabilities2;
    union _PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER DeviceControl2;
    union _PCI_EXPRESS_DEVICE_STATUS_2_REGISTER DeviceStatus2;
};

typedef struct _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_1 DvsecHeader1;
    union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_2 DvsecHeader2;
    USHORT DvsecRegisters[1];
};

typedef struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER {
    USHORT CapabilityID;
    USHORT Version : 4;
    USHORT Next : 12;
};

typedef struct _PCI_EXPRESS_L1_PM_SS_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER L1PmSsCapabilities;
    union _PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER L1PmSsControl1;
    union _PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER L1PmSsControl2;
};

typedef struct _PCI_EXPRESS_LINK_QUIESCENT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG PciExpressEnterLinkQuiescentMode;
    PLONG PciExpressExitLinkQuiescentMode;
};

typedef struct _PCI_EXPRESS_LTR_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER Latency;
};

typedef struct _PCI_EXPRESS_PASID_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_PASID_CAPABILITY_REGISTER Capability;
    union _PCI_EXPRESS_PASID_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_PRI_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_PRI_CONTROL_REGISTER Control;
    union _PCI_EXPRESS_PRI_STATUS_REGISTER Status;
    ULONG PRCapacity;
    ULONG PRAllocation;
};

typedef struct _PCI_EXPRESS_PTM_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_PTM_CAPABILITY_REGISTER PtmCapability;
    union _PCI_EXPRESS_PTM_CONTROL_REGISTER PtmControl;
};

typedef struct _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    struct _PCI_EXPRESS_RESIZABLE_BAR_ENTRY Entry[6];
};

typedef struct _PCI_EXPRESS_RESIZABLE_BAR_ENTRY {
    union _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER Capability;
    union _PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_ROOTPORT_AER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    union _PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    union _PCI_EXPRESS_ROOT_ERROR_COMMAND RootErrorCommand;
    union _PCI_EXPRESS_ROOT_ERROR_STATUS RootErrorStatus;
    union _PCI_EXPRESS_ERROR_SOURCE_ID ErrorSourceId;
};

typedef struct _PCI_EXPRESS_ROOT_PORT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ReadConfigSpace;
    PULONG WriteConfigSpace;
};

typedef struct _PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    ULONG LowSerialNumber;
    ULONG HighSerialNumber;
};

typedef struct _PCI_EXPRESS_SRIOV_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_SRIOV_CAPS SRIOVCapabilities;
    union _PCI_EXPRESS_SRIOV_CONTROL SRIOVControl;
    union _PCI_EXPRESS_SRIOV_STATUS SRIOVStatus;
    USHORT InitialVFs;
    USHORT TotalVFs;
    USHORT NumVFs;
    UCHAR FunctionDependencyLink;
    UCHAR RsvdP1;
    USHORT FirstVFOffset;
    USHORT VFStride;
    USHORT RsvdP2;
    USHORT VFDeviceId;
    ULONG SupportedPageSizes;
    ULONG SystemPageSize;
    ULONG BaseAddresses[6];
    union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY VFMigrationStateArrayOffset;
};

typedef struct _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER RequesterCapability;
    union _PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER RequesterControl;
};

typedef struct _PCI_EXPRESS_VENDOR_SPECIFIC_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    USHORT VsecId;
    USHORT VsecRev : 4;
    USHORT VsecLength : 12;
};

typedef struct _PCI_EXPRESS_VIRTUAL_CHANNEL_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _VIRTUAL_CHANNEL_CAPABILITIES1 Capabilities1;
    union _VIRTUAL_CHANNEL_CAPABILITIES2 Capabilities2;
    union _VIRTUAL_CHANNEL_CONTROL Control;
    union _VIRTUAL_CHANNEL_STATUS Status;
    struct _VIRTUAL_RESOURCE Resource[8];
};

typedef struct _PCI_FIRMWARE_BUS_CAPS {
    USHORT Type;
    USHORT Length;
    UCHAR SixtyFourBitDevice : 1;
    UCHAR PciXMode1EccCapable : 1;
    UCHAR DeviceIdMessagingCapable : 1;
    UCHAR ObffWakeSignalCapable : 1;
    UCHAR Reserved1 : 4;
    UCHAR CurrentSpeedAndMode;
    UCHAR SupportedSpeedsAndModesLowByte;
    UCHAR SupportedSpeedsAndModesHighByte;
    UCHAR Voltage;
    UCHAR Reserved2[7];
};

typedef struct _PCI_FIRMWARE_BUS_CAPS_RETURN_BUFFER {
    USHORT Version;
    USHORT Status;
    ULONG Length;
    struct _PCI_FIRMWARE_BUS_CAPS Caps;
};

typedef struct _PCI_FPB_CAPABILITY {
    struct _PCI_FPB_CAPABILITY_HEADER Header;
    union _PCI_FPB_CAPABILITIES_REGISTER CapabilitiesRegister;
    union _PCI_FPB_RID_VECTOR_CONTROL1_REGISTER RidVectorControl1Register;
    union _PCI_FPB_RID_VECTOR_CONTROL2_REGISTER RidVectorControl2Register;
    union _PCI_FPB_MEM_LOW_VECTOR_CONTROL_REGISTER MemLowVectorControlRegister;
    union _PCI_FPB_MEM_HIGH_VECTOR_CONTROL1_REGISTER MemHighVectorControl1Register;
    struct _PCI_FPB_MEM_HIGH_VECTOR_CONTROL2_REGISTER MemHighVectorControl2Register;
    union _PCI_FPB_VECTOR_ACCESS_CONTROL_REGISTER VectorAccessControlRegister;
    struct _PCI_FPB_VECTOR_ACCESS_DATA_REGISTER VectorAccessDataRegister;
};

typedef struct _PCI_FPB_CAPABILITY_HEADER {
    struct _PCI_CAPABILITIES_HEADER Header;
    USHORT Reserved;
};

typedef struct _PCI_FPB_MEM_HIGH_VECTOR_CONTROL2_REGISTER {
    ULONG MemHighVectorStartUpper;
};

typedef struct _PCI_FPB_VECTOR_ACCESS_DATA_REGISTER {
    ULONG VectorAccessData;
};

typedef struct _PCI_HEADER_TYPE_0 {
    ULONG BaseAddresses[6];
    ULONG CIS;
    USHORT SubVendorID;
    USHORT SubSystemID;
    ULONG ROMBaseAddress;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved1[3];
    ULONG Reserved2;
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    UCHAR MinimumGrant;
    UCHAR MaximumLatency;
};

typedef struct _PCI_HEADER_TYPE_1 {
    ULONG BaseAddresses[2];
    UCHAR PrimaryBus;
    UCHAR SecondaryBus;
    UCHAR SubordinateBus;
    UCHAR SecondaryLatency;
    UCHAR IOBase;
    UCHAR IOLimit;
    USHORT SecondaryStatus;
    USHORT MemoryBase;
    USHORT MemoryLimit;
    USHORT PrefetchBase;
    USHORT PrefetchLimit;
    ULONG PrefetchBaseUpper32;
    ULONG PrefetchLimitUpper32;
    USHORT IOBaseUpper16;
    USHORT IOLimitUpper16;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved1[3];
    ULONG ROMBaseAddress;
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    USHORT BridgeControl;
};

typedef struct _PCI_HEADER_TYPE_2 {
    ULONG SocketRegistersBaseAddress;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved;
    USHORT SecondaryStatus;
    UCHAR PrimaryBus;
    UCHAR SecondaryBus;
    UCHAR SubordinateBus;
    UCHAR SecondaryLatency;
     <unnamed-type-Range>;
    struct {
        ULONG Base;
        ULONG Limit;
    } Range[4];
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    USHORT BridgeControl;
};

typedef struct _PCI_MSIX_TABLE_CONFIG_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG SetTableEntry;
    PLONG MaskTableEntry;
    PLONG UnmaskTableEntry;
    PLONG GetTableEntry;
    PLONG GetTableSize;
};

typedef struct _PCI_PMC {
    UCHAR Version : 3;
    UCHAR PMEClock : 1;
    UCHAR Rsvd1 : 1;
    UCHAR DeviceSpecificInitialization : 1;
    UCHAR Rsvd2 : 2;
     _PM_SUPPORT;
    struct _PCI_PMC::_PM_SUPPORT Support;
};

typedef struct _PCI_PMC::_PM_SUPPORT {
    UCHAR Rsvd2 : 1;
    UCHAR D1 : 1;
    UCHAR D2 : 1;
    UCHAR PMED0 : 1;
    UCHAR PMED1 : 1;
    UCHAR PMED2 : 1;
    UCHAR PMED3Hot : 1;
    UCHAR PMED3Cold : 1;
};

typedef struct _PCI_PMCSR {
    USHORT PowerState : 2;
    USHORT Rsvd1 : 1;
    USHORT NoSoftReset : 1;
    USHORT Rsvd2 : 4;
    USHORT PMEEnable : 1;
    USHORT DataSelect : 4;
    USHORT DataScale : 2;
    USHORT PMEStatus : 1;
};

typedef struct _PCI_PMCSR_BSE {
    UCHAR Rsvd1 : 6;
    UCHAR D3HotSupportsStopClock : 1;
    UCHAR BusPowerClockControlEnabled : 1;
};

typedef struct _PCI_PM_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-PMC>;
    union {
        struct _PCI_PMC Capabilities;
        USHORT AsUSHORT;
    } PMC;
     <unnamed-type-PMCSR>;
    union {
        struct _PCI_PMCSR ControlStatus;
        USHORT AsUSHORT;
    } PMCSR;
     <unnamed-type-PMCSR_BSE>;
    union {
        struct _PCI_PMCSR_BSE BridgeSupport;
        UCHAR AsUCHAR;
    } PMCSR_BSE;
    UCHAR Data;
};

typedef struct _PCI_ROOT_BUS_HARDWARE_CAPABILITY {
    enum _PCI_HARDWARE_INTERFACE SecondaryInterface;
    UCHAR BusCapabilitiesFound;
    ULONG CurrentSpeedAndMode;
    ULONG SupportedSpeedsAndModes;
    UCHAR DeviceIDMessagingCapable;
    enum PCI_BUS_WIDTH SecondaryBusWidth;
    struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD OscFeatureSupport;
    struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlRequest;
    struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlGranted;
};

typedef struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD {
     <unnamed-type-u>;
    union {
        ULONG ExpressNativeHotPlug : 1;
        ULONG ShpcNativeHotPlug : 1;
        ULONG ExpressNativePME : 1;
        ULONG ExpressAdvancedErrorReporting : 1;
        ULONG ExpressCapabilityStructure : 1;
        ULONG LatencyToleranceReporting : 1;
        ULONG Reserved : 26;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD {
     <unnamed-type-u>;
    union {
        ULONG ExtendedConfigOpRegions : 1;
        ULONG ActiveStatePowerManagement : 1;
        ULONG ClockPowerManagement : 1;
        ULONG SegmentGroups : 1;
        ULONG MessageSignaledInterrupts : 1;
        ULONG OptimizedBufferFlushAndFill : 1;
        ULONG AspmOptionality : 1;
        ULONG Reserved : 25;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_SECURITY_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG SetAccessControlServices;
};

typedef struct _PCI_SLOT_NUMBER {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG DeviceNumber : 5;
            ULONG FunctionNumber : 3;
            ULONG Reserved : 24;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_SUBSYSTEM_IDS_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    USHORT Reserved;
    USHORT SubVendorID;
    USHORT SubSystemID;
};

typedef struct _PCI_VIRTUALIZATION_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG SetVirtualFunctionData;
    PULONG GetVirtualFunctionData;
    PLONG GetLocation;
    PVOID GetResources;
    PLONG EnableVirtualization;
    PLONG GetVirtualFunctionProbedBars;
};

typedef struct _PCW_BUFFER {
};

typedef struct _PCW_COUNTER_DESCRIPTOR {
    USHORT Id;
    USHORT StructIndex;
    USHORT Offset;
    USHORT Size;
};

typedef struct _PCW_COUNTER_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
};

typedef struct _PCW_DATA {
    PVOID Data;
    ULONG Size;
};

typedef struct _PCW_INSTANCE {
};

typedef struct _PCW_MASK_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
    ULONG InstanceId;
    UCHAR CollectMultiple;
    struct _PCW_BUFFER *Buffer;
    struct _KEVENT *CancelEvent;
};

typedef struct _PCW_REGISTRATION {
};

typedef struct _PCW_REGISTRATION_INFORMATION {
    ULONG Version;
    struct _UNICODE_STRING *Name;
    ULONG CounterCount;
    struct _PCW_COUNTER_DESCRIPTOR *Counters;
    PLONG Callback;
    PVOID CallbackContext;
};

typedef struct _PEB {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR IsLongPathAwareProcess : 1;
    UCHAR Padding0[4];
    PVOID Mutant;
    PVOID ImageBaseAddress;
    struct _PEB_LDR_DATA *Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    struct _RTL_CRITICAL_SECTION *FastPebLock;
    union _SLIST_HEADER *AtlThunkSListPtr;
    PVOID IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ProcessPreviouslyThrottled : 1;
    ULONG ProcessCurrentlyThrottled : 1;
    ULONG ProcessImagesHotPatched : 1;
    ULONG ReservedBits0 : 24;
    UCHAR Padding1[4];
    PVOID KernelCallbackTable;
    PVOID UserSharedInfoPtr;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
    ULONG TlsExpansionCounter;
    UCHAR Padding2[4];
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PVOID SharedData;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG64 HeapSegmentReserve;
    ULONG64 HeapSegmentCommit;
    ULONG64 HeapDeCommitTotalFreeThreshold;
    ULONG64 HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    UCHAR Padding3[4];
    struct _RTL_CRITICAL_SECTION *LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    UCHAR Padding4[4];
    ULONG64 ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[60];
    PVOID PostProcessInitRoutine;
    PVOID TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    UCHAR Padding5[4];
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    PVOID pShimData;
    PVOID AppCompatInfo;
    struct _UNICODE_STRING CSDVersion;
    struct _ACTIVATION_CONTEXT_DATA *ActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
    struct _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
    ULONG64 MinimumStackCommit;
    struct _FLS_CALLBACK_INFO *FlsCallback;
    struct _LIST_ENTRY FlsListHead;
    PVOID FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    PVOID WerRegistrationData;
    PVOID WerShipAssertPtr;
    PVOID pUnused;
    PVOID pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    UCHAR Padding6[4];
    ULONG64 CsrServerReadOnlySharedMemoryBase;
    ULONG64 TppWorkerpListLock;
    struct _LIST_ENTRY TppWorkerpList;
    PVOID WaitOnAddressHashTable[128];
    PVOID TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    struct _LEAP_SECOND_DATA *LeapSecondData;
    ULONG LeapSecondFlags;
    ULONG SixtySecondEnabled : 1;
    ULONG Reserved : 31;
    ULONG NtGlobalFlag2;
};

typedef struct _PEB_LDR_DATA {
    ULONG Length;
    UCHAR Initialized;
    PVOID SsHandle;
    struct _LIST_ENTRY InLoadOrderModuleList;
    struct _LIST_ENTRY InMemoryOrderModuleList;
    struct _LIST_ENTRY InInitializationOrderModuleList;
    PVOID EntryInProgress;
    UCHAR ShutdownInProgress;
    PVOID ShutdownThreadId;
};

typedef struct _PERFINFO_BATTERY_LIFE_INFO {
    ULONG RemainingCapacity;
    ULONG Rate;
};

typedef struct _PERFINFO_BOOT_PHASE_START {
    LONG Phase;
};

typedef struct _PERFINFO_BOOT_PREFETCH_INFORMATION {
    LONG Action;
    LONG Status;
    LONG Pages;
};

typedef struct _PERFINFO_CCSWAP {
    ULONG DataType : 2;
    ULONG TimeDelta : 30;
    ULONG OldThreadIdIndex : 4;
    ULONG OldThreadStateWr : 6;
    ULONG OldThreadPriority : 5;
    ULONG NewThreadWaitTime : 17;
};

typedef struct _PERFINFO_CCSWAP_BUFFER {
    LONG64 FirstTimeStamp;
    ULONG TidTable[16];
    CHAR ThreadBasePriority[16];
};

typedef struct _PERFINFO_CCSWAP_IDLE {
    ULONG DataType : 2;
    ULONG TimeDelta : 30;
};

typedef struct _PERFINFO_CCSWAP_IDLE_SHORT {
    USHORT DataType : 2;
    USHORT TimeDelta : 14;
};

typedef struct _PERFINFO_CCSWAP_LITE {
    ULONG DataType : 2;
    ULONG OldThreadIdIndex : 4;
    ULONG OldThreadPriInc : 3;
    ULONG OldThreadStateWr : 6;
    ULONG TimeDelta : 17;
};

typedef struct _PERFINFO_CC_CAN_WRITE_FAIL {
    ULONG64 FileObjectKey;
    ULONG64 TotalDirtyPages;
    ULONG64 DirtyPageThreshold;
    ULONG BytesToWrite;
};

typedef struct _PERFINFO_CC_EXTRA_WB_THREAD_INFO {
    ULONG ThreadAction;
    ULONG ActiveExtraWBThreads;
    ULONG64 TotalDirtyPages;
    ULONG64 DirtyPageThreshold;
    ULONG64 AvailablePages;
};

typedef struct _PERFINFO_CC_FLUSH_CACHE {
    ULONG64 WorkItemKey;
    ULONG64 FileObjectKey;
    ULONG64 Offset;
    ULONG Length;
    ULONG SharedCacheMapFlags;
    ULONG Flags;
    ULONG Reserved;
};

typedef struct _PERFINFO_CC_FLUSH_SECTION {
    ULONG64 WorkItemKey;
    ULONG64 FileObjectKey;
    ULONG64 Offset;
    ULONG Length;
    ULONG MmFlushFlags;
};

typedef struct _PERFINFO_CC_LAZY_WRITE_SCAN {
    ULONG64 WorkItemKey;
    ULONG ReasonForFlush;
    ULONG PagesToWrite;
    ULONG64 TotalDirtyPages;
    ULONG64 AvailablePages;
    ULONG64 DirtyPageThreshold;
    ULONG64 NumberOfMappedVacbs;
    ULONG64 TopDirtyPageThreshold;
    ULONG64 BottomDirtyPageThreshold;
    ULONG64 AverageAvailablePages;
    ULONG64 AverageDirtyPages;
    ULONG64 ConsecutiveWorklessLazywriteScans;
};

typedef struct _PERFINFO_CC_LOGGED_STREAM_INFO {
    ULONG64 FileObjectKey;
    ULONG ReasonForFlush;
    ULONG PagesToWrite;
    ULONG64 DirtyLoggedPages;
    ULONG64 DirtyLoggedPageThreshold;
    union _LARGE_INTEGER LargestLsnForLWS;
};

typedef struct _PERFINFO_CC_READ_AHEAD {
    ULONG64 WorkItemKey;
    ULONG64 FileOffset;
    ULONG Size;
    ULONG PagePriority;
    ULONG DetectedPattern;
    ULONG Reserved;
};

typedef struct _PERFINFO_CC_SCHEDULE_READ_AHEAD {
    ULONG64 WorkItemKey;
    ULONG64 FileObjectKey;
    ULONG64 FileOffset;
    ULONG Length;
    ULONG ReadAheadUnit;
    ULONG ReadAheadLength;
    ULONG64 ReadAheadOffset;
    ULONG64 ReadAheadBeyondLastByte;
    UCHAR ReadPattern;
    ULONG SequentialReadCount;
    ULONG SharedCacheMapFlags;
    ULONG ReadAheadSettingsChanged : 1;
    ULONG ReadAheadActive : 1;
};

typedef struct _PERFINFO_CC_WORKITEM_COMPLETE {
    ULONG64 WorkItemKey;
};

typedef struct _PERFINFO_CC_WORKITEM_DEQUEUE {
    ULONG64 WorkItemKey;
};

typedef struct _PERFINFO_CC_WORKITEM_ENQUEUE {
    ULONG64 WorkItemKey;
    ULONG64 FileObjectKey;
    UCHAR QueueType;
    UCHAR WorkItemType;
    UCHAR Requeue;
    UCHAR Reserved;
};

typedef struct _PERFINFO_CLOCK_INTERRUPT_INFORMATION {
    ULONG64 InterruptTime;
    SHORT Flags;
};

typedef struct _PERFINFO_CONTIGUOUS_PAGE_GENERATE {
    ULONG64 ThreadId;
    ULONG64 NumberOfBytes;
};

typedef struct _PERFINFO_DEBUG_EVENT {
    ULONG ProcessId;
    ULONG ThreadId;
    enum _PERFINFO_DEBUG_EVENT_REASON Reason;
};

typedef struct _PERFINFO_DPC_ENQUEUE_INFORMATION {
    ULONG64 Key;
    LONG DpcQueueDepth;
    ULONG DpcCount;
    ULONG TargetProcessorIndex;
    UCHAR Importance;
    UCHAR Reserved[3];
};

typedef struct _PERFINFO_DPC_EXECUTION_INFORMATION {
    PVOID DpcRoutine;
    ULONG64 Key;
};

typedef struct _PERFINFO_DPC_INFORMATION {
    ULONG64 InitialTime;
    PVOID DpcRoutine;
};

typedef struct _PERFINFO_DRIVER_COMPLETE_REQUEST {
    PVOID RoutineAddr;
    PVOID Irp;
    ULONG UniqMatchId;
};

typedef struct _PERFINFO_DRIVER_COMPLETE_REQUEST_RET {
    PVOID Irp;
    ULONG UniqMatchId;
};

typedef struct _PERFINFO_DRIVER_COMPLETIONROUTINE {
    PVOID Routine;
    PVOID IrpPtr;
    ULONG UniqMatchId;
};

typedef struct _PERFINFO_DRIVER_MAJORFUNCTION {
    ULONG MajorFunction;
    ULONG MinorFunction;
    PVOID RoutineAddr;
    PVOID FileNamePointer;
    PVOID Irp;
    ULONG UniqMatchId;
};

typedef struct _PERFINFO_DRIVER_MAJORFUNCTION_RET {
    PVOID Irp;
    ULONG UniqMatchId;
};

typedef struct _PERFINFO_EXECUTIVE_RESOURCE_CONFIG {
    ULONG ReleaseSamplingRate;
    ULONG ContentionSamplingRate;
    ULONG NumberOfExcessiveTimeouts;
};

typedef struct _PERFINFO_FILENAME_SAME_INFORMATION {
    PVOID OldFile;
    PVOID NewFile;
};

typedef struct _PERFINFO_FILEOBJECT_INFORMATION {
    PVOID FileObject;
};

typedef struct _PERFINFO_FILE_CREATE {
    ULONG64 Irp;
    ULONG64 FileObject;
    ULONG IssuingThreadId;
    ULONG Options;
    ULONG Attributes;
    ULONG ShareAccess;
    WCHAR OpenPath[1];
};

typedef struct _PERFINFO_FILE_DIRENUM {
    ULONG64 Irp;
    ULONG64 FileObject;
    ULONG64 FileKey;
    ULONG IssuingThreadId;
    ULONG Length;
    ULONG InfoClass;
    ULONG FileIndex;
    WCHAR FileName[1];
};

typedef struct _PERFINFO_FILE_INFORMATION {
    ULONG64 Irp;
    ULONG64 FileObject;
    ULONG64 FileKey;
    ULONG64 ExtraInformation;
    ULONG IssuingThreadId;
    ULONG InfoClass;
};

typedef struct _PERFINFO_FILE_OPERATION_END {
    ULONG64 Irp;
    ULONG64 ExtraInformation;
    LONG Status;
};

typedef struct _PERFINFO_FILE_PATH_OPERATION {
    ULONG64 Irp;
    ULONG64 FileObject;
    ULONG64 FileKey;
    ULONG64 ExtraInformation;
    ULONG IssuingThreadId;
    ULONG InfoClass;
    WCHAR Path[1];
};

typedef struct _PERFINFO_FILE_READ_WRITE {
    ULONG64 Offset;
    ULONG64 Irp;
    ULONG64 FileObject;
    ULONG64 FileKey;
    ULONG IssuingThreadId;
    ULONG Size;
    ULONG Flags;
    ULONG ExtraFlags;
};

typedef struct _PERFINFO_FILE_SIMPLE_OPERATION {
    ULONG64 Irp;
    ULONG64 FileObject;
    ULONG64 FileKey;
    ULONG IssuingThreadId;
};

typedef struct _PERFINFO_FLT_OPERATION {
    PVOID RoutineAddr;
    PVOID FileObject;
    PVOID FsContext;
    PVOID IrpPtr;
    PVOID CbdPtr;
    LONG MajorFunction;
};

typedef struct _PERFINFO_FLT_OPERATION_STATUS {
    PVOID RoutineAddr;
    PVOID FileObject;
    PVOID FsContext;
    PVOID IrpPtr;
    PVOID CbdPtr;
    LONG MajorFunction;
    LONG Status;
};

typedef struct _PERFINFO_GROUPMASK {
    ULONG Masks[8];
};

typedef struct _PERFINFO_HARDPAGEFAULT_INFORMATION {
    union _LARGE_INTEGER ReadOffset;
    PVOID VirtualAddress;
    PVOID FileObject;
    ULONG ThreadId;
    ULONG ByteCount;
};

typedef struct _PERFINFO_IDLE_STATE_CHANGE {
    ULONG State;
    ULONG Throttle;
    ULONG Direction;
};

typedef struct _PERFINFO_IMAGELOAD_IN_PAGEFILE_INFO {
    PVOID FileObject;
    ULONG DeviceCharacteristics;
    USHORT FileCharacteristics;
     <unnamed-type-Flags>;
    union {
        USHORT Flags;
        USHORT ActiveDataReference : 1;
        USHORT DeviceEjectable : 1;
        USHORT WritableHandles : 1;
    } Flags;
};

typedef struct _PERFINFO_INTERRUPT_INFORMATION {
    ULONG64 InitialTime;
    PVOID ServiceRoutine;
    UCHAR ReturnValue;
    USHORT Vector;
    UCHAR Reserved;
};

typedef struct _PERFINFO_IO_TIMER {
    PVOID DeviceObject;
    PVOID RoutineAddress;
};

typedef struct _PERFINFO_KERNELMEMORY_RANGE_USAGE {
    ULONG UsageType : 5;
    ULONG Spare : 27;
    PVOID VirtualAddress;
    ULONG64 PageCount;
};

typedef struct _PERFINFO_MARK_EVENT {
    ULONG TranId;
    UCHAR Level;
    UCHAR AppId;
    USHORT OpId;
    WCHAR Text[1];
};

typedef struct _PERFINFO_MARK_INFORMATION {
    CHAR Name[1];
};

typedef struct _PERFINFO_MEMORY_INFORMATION {
    ULONG64 ZeroPageCount;
    ULONG64 FreePageCount;
    ULONG64 ModifiedPageCount;
    ULONG64 ModifiedNoWritePageCount;
    ULONG64 BadPageCount;
    ULONG64 PageCountByPriority[8];
    ULONG64 RepurposedPagesByPriority[8];
    ULONG64 ModifiedPageCountPageFile;
};

typedef struct _PERFINFO_MEM_RESET_INFO {
    PVOID BaseAddress;
    ULONG64 SizeInBytes;
    ULONG TypeInfo : 2;
    ULONG Spare : 30;
    ULONG Flags;
};

typedef struct _PERFINFO_PAGECOMBINE_AGGREGATE_STAT {
    ULONG StatType : 6;
    ULONG Spare : 26;
    ULONG CombineScanCount;
    ULONG64 PagesScanned;
    ULONG64 PagesCombined;
    LONG CombinedBlocksInUse;
    LONG SumCombinedBlocksReferenceCount;
};

typedef struct _PERFINFO_PAGECOMBINE_ITERATION_STAT {
    ULONG StatType : 6;
    ULONG Spare : 26;
    ULONG PagesScanned;
    ULONG PagesCombined;
};

typedef struct _PERFINFO_PAGE_RANGE_IDENTITY {
    ULONG64 UseDescription : 4;
    ULONG64 UniqueKey : 48;
    ULONG64 Reserved : 12;
    PVOID ProtoPteAddress;
    ULONG64 PageFrameIndex;
    PVOID VirtualAddress;
    ULONG64 PageCount;
};

typedef struct _PERFINFO_PFMAPPED_SECTION_INFORMATION {
    PVOID RangeBase;
    PVOID RangeEnd;
    ULONG CreatingProcessId;
};

typedef struct _PERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION {
    PVOID SectionObject;
    PVOID RangeBase;
};

typedef struct _PERFINFO_PMC_SAMPLE_INFORMATION {
    PVOID InstructionPointer;
    ULONG ThreadId;
    USHORT ProfileSource;
    USHORT Reserved;
};

typedef struct _PERFINFO_PO_CALIBRATED_PERFCOUNTER {
    union _LARGE_INTEGER PerformanceCounter;
};

typedef struct _PERFINFO_PO_NOTIFY_DEVICE {
    PVOID Irp;
    PVOID DriverStart;
    UCHAR OrderLevel;
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    enum _POWER_STATE_TYPE Type;
    union _POWER_STATE State;
    ULONG DeviceNameLength;
    WCHAR DeviceName[1];
};

typedef struct _PERFINFO_PO_NOTIFY_DEVICE_COMPLETE {
    PVOID Irp;
    LONG Status;
};

typedef struct _PERFINFO_PO_POSTSLEEP {
    union _LARGE_INTEGER PerformanceCounter;
};

typedef struct _PERFINFO_PO_PRESLEEP {
    union _LARGE_INTEGER PerformanceCounter;
    union _LARGE_INTEGER PerformanceFrequency;
};

typedef struct _PERFINFO_PO_SESSION_CALLOUT {
    enum POWER_ACTION SystemAction;
    enum _SYSTEM_POWER_STATE MinSystemState;
    ULONG Flags;
    ULONG PowerStateTask;
};

typedef struct _PERFINFO_PO_SESSION_CALLOUT_RET {
    LONG Status;
};

typedef struct _PERFINFO_PPM_IDLE_EXIT_LATENCY {
    ULONG Flags;
    ULONG PlatformState;
    ULONG ProcessorState;
    ULONG ReturnLatency;
    ULONG TotalLatency;
};

typedef struct _PERFINFO_PPM_IDLE_STATE_CHANGE {
    ULONG NewState;
    ULONG OldState;
    ULONG64 Processors;
};

typedef struct _PERFINFO_PPM_IDLE_STATE_ENTER {
    ULONG State;
    USHORT Properties;
    UCHAR ExpectedWakeReason;
    UCHAR Reserved;
    ULONG Flags;
    ULONG64 ExpectedDuration;
};

typedef struct _PERFINFO_PPM_IDLE_STATE_EXIT {
    ULONG State;
    ULONG Status;
};

typedef struct _PERFINFO_PPM_PERF_STATE_CHANGE {
    ULONG Type;
    ULONG NewState;
    ULONG OldState;
    LONG Result;
    ULONG64 Processors;
};

typedef struct _PERFINFO_PPM_STATE_SELECTION {
    ULONG SelectedState;
    ULONG VetoedStates;
    ULONG VetoReason[1];
};

typedef struct _PERFINFO_PPM_THERMAL_CONSTRAINT {
    ULONG Constraint;
    ULONG64 Processors;
};

typedef struct _PERFINFO_PROCESS_INSWAP {
    ULONG64 DirectoryTableBase;
    ULONG ProcessId;
};

typedef struct _PERFINFO_PROCESS_PERFCTR {
    ULONG ProcessId;
    ULONG PageFaultCount;
    ULONG HandleCount;
    ULONG Reserved;
    ULONG64 PeakVirtualSize;
    ULONG64 PeakWorkingSetSize;
    ULONG64 PeakPagefileUsage;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 VirtualSize;
    ULONG64 WorkingSetSize;
    ULONG64 PagefileUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PrivatePageCount;
};

typedef struct _PERFINFO_PROCESS_PERFCTR32 {
    ULONG ProcessId;
    ULONG PageFaultCount;
    ULONG HandleCount;
    ULONG Reserved;
    ULONG PeakVirtualSize;
    ULONG PeakWorkingSetSize;
    ULONG PeakPagefileUsage;
    ULONG QuotaPeakPagedPoolUsage;
    ULONG QuotaPeakNonPagedPoolUsage;
    ULONG VirtualSize;
    ULONG WorkingSetSize;
    ULONG PagefileUsage;
    ULONG QuotaPagedPoolUsage;
    ULONG QuotaNonPagedPoolUsage;
    ULONG PrivatePageCount;
};

typedef struct _PERFINFO_PROCESS_PERFCTR64 {
    ULONG ProcessId;
    ULONG PageFaultCount;
    ULONG HandleCount;
    ULONG Reserved;
    ULONG64 PeakVirtualSize;
    ULONG64 PeakWorkingSetSize;
    ULONG64 PeakPagefileUsage;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 VirtualSize;
    ULONG64 WorkingSetSize;
    ULONG64 PagefileUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PrivatePageCount;
};

typedef struct _PERFINFO_SAMPLED_PROFILE_CACHE {
    ULONG Entries;
    struct _PERFINFO_SAMPLED_PROFILE_INFORMATION Sample[20];
};

typedef struct _PERFINFO_SAMPLED_PROFILE_CONFIG {
    ULONG Source;
    ULONG NewInterval;
    ULONG OldInterval;
};

typedef struct _PERFINFO_SAMPLED_PROFILE_INFORMATION {
    PVOID InstructionPointer;
    ULONG ThreadId;
    USHORT Count;
    UCHAR ExecutingDpc : 1;
    UCHAR ExecutingIsr : 1;
    UCHAR Reserved : 1;
    UCHAR Priority : 5;
    UCHAR Flags;
    UCHAR Rank;
};

typedef struct _PERFINFO_SESSIONCREATE_INFORMATION {
    ULONG64 UniqueSessionId;
    ULONG SessionId;
};

typedef struct _PERFINFO_SET_DEVICES_STATE {
    ULONG SystemState;
    UCHAR Waking;
    UCHAR Shutdown;
    UCHAR IrpMinor;
};

typedef struct _PERFINFO_SET_DEVICES_STATE_RET {
    LONG Status;
};

typedef struct _PERFINFO_SET_POWER_ACTION {
    PVOID Trigger;
    ULONG PowerAction;
    ULONG LightestState;
};

typedef struct _PERFINFO_SET_POWER_ACTION_RET {
    PVOID Trigger;
    LONG Status;
};

typedef struct _PERFINFO_SPEC_CONTROL_RETPOLINE_EXIT {
    ULONG64 TargetAddress;
};

typedef struct _PERFINFO_SPINLOCK_CONFIG {
    ULONG SpinLockSpinThreshold;
    ULONG SpinLockContentionSampleRate;
    ULONG SpinLockAcquireSampleRate;
    ULONG SpinLockHoldThreshold;
};

typedef struct _PERFINFO_SYSCALL_ENTER_DATA {
    PVOID SysCallAddr;
};

typedef struct _PERFINFO_SYSCALL_EXIT_DATA {
    LONG ReturnValue;
};

typedef struct _PERFINFO_SYSTEM_MEMORY_INFORMATION {
    ULONG64 PagedPoolCommitPageCount;
    ULONG64 NonPagedPoolPageCount;
    ULONG64 MdlPageCount;
    ULONG64 CommitPageCount;
};

typedef struct _PERFINFO_TRACE_HEADER {
    ULONG Marker;
    USHORT Version;
    UCHAR HeaderType;
    UCHAR Flags;
    ULONG Header;
    struct _WMI_TRACE_PACKET Packet;
    ULONG64 TS;
    union _LARGE_INTEGER SystemTime;
    UCHAR Data[1];
};

typedef struct _PERFINFO_VAD_ROTATE_INFO {
    PVOID BaseAddress;
    ULONG64 SizeInBytes;
    ULONG Direction : 4;
    ULONG Spare : 28;
    ULONG Flags;
};

typedef struct _PERFINFO_VIRTUAL_ALLOC {
    PVOID CapturedBase;
    ULONG64 CapturedRegionSize;
    ULONG ProcessId;
    ULONG Flags;
};

typedef struct _PERFINFO_WORKINGSET_ENTRY {
    ULONG UniqueProcessId;
    ULONG SessionId;
    ULONG64 WorkingSetPageCount;
    ULONG64 CommitPageCount;
    ULONG64 PagedPoolPageCount;
    ULONG64 VirtualSizeInPages;
    ULONG64 PrivateWorkingSetPageCount;
    ULONG64 StoreSizeInPages;
    ULONG64 StoredPageCount;
    ULONG64 CommitDebtInPages;
    ULONG64 SharedCommitInPages;
};

typedef struct _PERFINFO_WORKINGSET_INFORMATION {
    ULONG Count;
    struct _PERFINFO_WORKINGSET_ENTRY WsEntry[1];
};

typedef struct _PERFINFO_YIELD_PROCESSOR_INFORMATION {
    ULONG YieldReason;
    ULONG DpcWatchdogCount;
    ULONG DpcTimeCount;
};

typedef struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR {
    enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE Type;
    ULONG Flags;
     <unnamed-type-u>;
    union {
        ULONG CounterIndex;
        ULONG ExtendedRegisterAddress;
         <unnamed-type-Range>;
        struct {
            ULONG Begin;
            ULONG End;
        } Range;
    } u;
};

typedef struct _PHYSICAL_COUNTER_RESOURCE_LIST {
    ULONG Count;
    struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _PHYSICAL_DISK_RECORD {
    ULONG DiskNumber;
    ULONG BytesPerSector;
    ULONG SectorsPerTrack;
    ULONG TracksPerCylinder;
    ULONG64 Cylinders;
    ULONG SCSIPortNumber;
    ULONG SCSIPathId;
    ULONG SCSITargetId;
    ULONG SCSILun;
    WCHAR Manufacturer[256];
    ULONG PartitionCount;
    UCHAR WriteCacheEnabled;
    WCHAR BootDriveLetter[3];
};

typedef struct _PHYSICAL_MEMORY_RANGE {
    union _LARGE_INTEGER BaseAddress;
    union _LARGE_INTEGER NumberOfBytes;
};

typedef struct _PLUGPLAY_NOTIFICATION_HEADER {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
};

typedef struct _PMD {
    LONG mdisp;
    LONG pdisp;
    LONG vdisp;
};

typedef struct _PM_DISPATCH_TABLE {
    ULONG Signature;
    ULONG Version;
    PVOID Function[1];
};

typedef struct _PM_SUPPORT {
    UCHAR Rsvd2 : 1;
    UCHAR D1 : 1;
    UCHAR D2 : 1;
    UCHAR PMED0 : 1;
    UCHAR PMED1 : 1;
    UCHAR PMED2 : 1;
    UCHAR PMED3Hot : 1;
    UCHAR PMED3Cold : 1;
};

typedef struct _PNP_BUS_INFORMATION {
    struct _GUID BusTypeGuid;
    enum _INTERFACE_TYPE LegacyBusType;
    ULONG BusNumber;
};

typedef struct _PNP_EXTENDED_ADDRESS_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID QueryExtendedAddress;
};

typedef struct _PNP_LOCATION_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GetLocationString;
};

typedef struct _PNP_REPLACE_DRIVER_INTERFACE {
    ULONG Size;
    ULONG Version;
    ULONG Flags;
    PVOID Unload;
    PLONG BeginReplace;
    PLONG EndReplace;
    PLONG MirrorPhysicalMemory;
    PLONG SetProcessorId;
    PLONG Swap;
    PLONG InitiateHardwareMirror;
    PLONG MirrorPlatformMemory;
    PLONG GetMemoryDestination;
    PLONG EnableDisableHardwareQuiesce;
};

typedef struct _PNP_REPLACE_MEMORY_LIST {
    ULONG AllocatedCount;
    ULONG Count;
    ULONG64 TotalLength;
     <unnamed-type-Ranges>;
    struct {
        union _LARGE_INTEGER Address;
        ULONG64 Length;
    } Ranges[1];
};

typedef struct _PNP_REPLACE_PARAMETERS {
    ULONG Size;
    ULONG Version;
    ULONG64 Target;
    ULONG64 Spare;
    struct _PNP_REPLACE_PROCESSOR_LIST *TargetProcessors;
    struct _PNP_REPLACE_PROCESSOR_LIST *SpareProcessors;
    struct _PNP_REPLACE_MEMORY_LIST *TargetMemory;
    struct _PNP_REPLACE_MEMORY_LIST *SpareMemory;
    PLONG MapMemory;
};

typedef struct _PNP_REPLACE_PROCESSOR_LIST {
    PULONG64 Affinity;
    ULONG GroupCount;
    ULONG AllocatedCount;
    ULONG Count;
    ULONG ApicIds[1];
};

typedef struct _PNP_REPLACE_PROCESSOR_LIST_V1 {
    ULONG64 AffinityMask;
    ULONG AllocatedCount;
    ULONG Count;
    ULONG ApicIds[1];
};

typedef struct _POOLED_USAGE_AND_LIMITS {
    ULONG64 PeakPagedPoolUsage;
    ULONG64 PagedPoolUsage;
    ULONG64 PagedPoolLimit;
    ULONG64 PeakNonPagedPoolUsage;
    ULONG64 NonPagedPoolUsage;
    ULONG64 NonPagedPoolLimit;
    ULONG64 PeakPagefileUsage;
    ULONG64 PagefileUsage;
    ULONG64 PagefileLimit;
};

typedef struct _POWER_IDLE_RESILIENCY {
    ULONG CoalescingTimeout;
    ULONG IdleResiliencyPeriod;
};

typedef struct _POWER_MONITOR_INVOCATION {
    UCHAR Console;
    enum POWER_MONITOR_REQUEST_REASON RequestReason;
};

typedef struct _POWER_PLATFORM_INFORMATION {
    UCHAR AoAc;
};

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
};

typedef struct _POWER_SESSION_CONNECT {
    UCHAR Connected;
    UCHAR Console;
};

typedef struct _POWER_SESSION_RIT_STATE {
    UCHAR Active;
    ULONG LastInputTime;
};

typedef struct _POWER_SESSION_TIMEOUTS {
    ULONG InputTimeout;
    ULONG DisplayTimeout;
};

typedef struct _POWER_SESSION_WINLOGON {
    ULONG SessionId;
    UCHAR Console;
    UCHAR Locked;
};

typedef struct _POWER_THREAD_INTERFACE {
    struct _INTERFACE Interface;
    PVOID PowerThreadEnqueue;
};

typedef struct _POWER_THROTTLING_PROCESS_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};

typedef struct _POWER_THROTTLING_THREAD_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};

typedef struct _POWER_USER_PRESENCE {
    enum POWER_USER_PRESENCE_TYPE UserPresence;
};

typedef struct _POX_SETTINGS {
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _PO_FX_COMPONENT_IDLE_STATE {
    ULONG64 TransitionLatency;
    ULONG64 ResidencyRequirement;
    ULONG NominalPower;
};

typedef struct _PO_FX_COMPONENT_PERF_INFO {
    ULONG PerfStateSetsCount;
    struct _PO_FX_COMPONENT_PERF_SET PerfStateSets[1];
};

typedef struct _PO_FX_COMPONENT_PERF_SET {
    struct _UNICODE_STRING Name;
    ULONG64 Flags;
    enum _PO_FX_PERF_STATE_UNIT Unit;
    enum _PO_FX_PERF_STATE_TYPE Type;
    struct {
        ULONG Count;
        struct _PO_FX_PERF_STATE *States;
    } Discrete;
    struct {
        ULONG64 Minimum;
        ULONG64 Maximum;
    } Range;
};

typedef struct _PO_FX_COMPONENT_V1 {
    struct _GUID Id;
    ULONG IdleStateCount;
    ULONG DeepestWakeableIdleState;
    struct _PO_FX_COMPONENT_IDLE_STATE *IdleStates;
};

typedef struct _PO_FX_COMPONENT_V2 {
    struct _GUID Id;
    ULONG64 Flags;
    ULONG DeepestWakeableIdleState;
    ULONG IdleStateCount;
    struct _PO_FX_COMPONENT_IDLE_STATE *IdleStates;
    ULONG ProviderCount;
    PULONG Providers;
};

typedef struct _PO_FX_DEVICE_V1 {
    ULONG Version;
    ULONG ComponentCount;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PVOID DevicePowerRequiredCallback;
    PVOID DevicePowerNotRequiredCallback;
    PLONG PowerControlCallback;
    PVOID DeviceContext;
    struct _PO_FX_COMPONENT_V1 Components[1];
};

typedef struct _PO_FX_DEVICE_V2 {
    ULONG Version;
    ULONG64 Flags;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PVOID DevicePowerRequiredCallback;
    PVOID DevicePowerNotRequiredCallback;
    PLONG PowerControlCallback;
    PVOID DeviceContext;
    ULONG ComponentCount;
    struct _PO_FX_COMPONENT_V2 Components[1];
};

typedef struct _PO_FX_PERF_STATE {
    ULONG64 Value;
    PVOID Context;
};

typedef struct _PO_FX_PERF_STATE_CHANGE {
    ULONG Set;
    ULONG StateIndex;
    ULONG64 StateValue;
};

typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[1];
};

typedef struct _PROCESSOR_GROUP_INFO {
    UCHAR MaximumProcessorCount;
    UCHAR ActiveProcessorCount;
    UCHAR Reserved[38];
    ULONG64 ActiveProcessorMask;
};

typedef struct _PROCESSOR_NUMBER {
    USHORT Group;
    UCHAR Number;
    UCHAR Reserved;
};

typedef struct _PROCESSOR_RECORD {
    ULONG Index;
    ULONG FeatureSet;
    ULONG ProcessorSpeed;
    WCHAR ProcessorName[64];
    WCHAR ProcessorIdentifier[128];
    WCHAR VendorIdentifier[16];
};

typedef struct _PROCESSOR_RELATIONSHIP {
    UCHAR Flags;
    UCHAR EfficiencyClass;
    UCHAR Reserved[20];
    USHORT GroupCount;
    struct _GROUP_AFFINITY GroupMask[1];
};

typedef struct _PROCESS_ACCESS_TOKEN {
    PVOID Token;
    PVOID Thread;
};

typedef struct _PROCESS_BASIC_INFORMATION {
    LONG ExitStatus;
    struct _PEB *PebBaseAddress;
    ULONG64 AffinityMask;
    LONG BasePriority;
    ULONG64 UniqueProcessId;
    ULONG64 InheritedFromUniqueProcessId;
};

typedef struct _PROCESS_DEVICEMAP_INFORMATION {
    struct {
        PVOID DirectoryHandle;
    } Set;
    struct {
        ULONG DriveMap;
        UCHAR DriveType[32];
    } Query;
};

typedef struct _PROCESS_DEVICEMAP_INFORMATION_EX {
    struct {
        PVOID DirectoryHandle;
    } Set;
    struct {
        ULONG DriveMap;
        UCHAR DriveType[32];
    } Query;
    ULONG Flags;
};

typedef struct _PROCESS_EXCEPTION_PORT {
    PVOID ExceptionPortHandle;
    ULONG StateFlags;
};

typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION {
    ULONG64 Size;
    struct _PROCESS_BASIC_INFORMATION BasicInfo;
    ULONG Flags;
    ULONG IsProtectedProcess : 1;
    ULONG IsWow64Process : 1;
    ULONG IsProcessDeleting : 1;
    ULONG IsCrossSessionCreate : 1;
    ULONG IsFrozen : 1;
    ULONG IsBackground : 1;
    ULONG IsStronglyNamed : 1;
    ULONG IsSecureProcess : 1;
    ULONG IsSubsystemProcess : 1;
    ULONG SpareBits : 23;
};

typedef struct _PROCESS_HANDLE_TRACING_ENABLE {
    ULONG Flags;
};

typedef struct _PROCESS_HANDLE_TRACING_ENABLE_EX {
    ULONG Flags;
    ULONG TotalSlots;
};

typedef struct _PROCESS_HANDLE_TRACING_ENTRY {
    PVOID Handle;
    struct _CLIENT_ID ClientId;
    ULONG Type;
    PVOID Stacks[16];
};

typedef struct _PROCESS_HANDLE_TRACING_QUERY {
    PVOID Handle;
    ULONG TotalTraces;
    struct _PROCESS_HANDLE_TRACING_ENTRY HandleTrace[1];
};

typedef struct _PROCESS_KEEPALIVE_COUNT_INFORMATION {
    ULONG WakeCount;
    ULONG NoWakeCount;
};

typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    ULONG Flags;
    ULONG EnableBottomUpRandomization : 1;
    ULONG EnableForceRelocateImages : 1;
    ULONG EnableHighEntropy : 1;
    ULONG DisallowStrippedImages : 1;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    ULONG Flags;
    ULONG MicrosoftSignedOnly : 1;
    ULONG StoreSignedOnly : 1;
    ULONG MitigationOptIn : 1;
    ULONG AuditMicrosoftSignedOnly : 1;
    ULONG AuditStoreSignedOnly : 1;
    ULONG ReservedFlags : 27;
};

typedef struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
    ULONG Flags;
    ULONG NoChildProcessCreation : 1;
    ULONG AuditNoChildProcessCreation : 1;
    ULONG AllowSecureProcessCreation : 1;
    ULONG ReservedFlags : 29;
};

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    ULONG Flags;
    ULONG EnableControlFlowGuard : 1;
    ULONG EnableExportSuppression : 1;
    ULONG StrictMode : 1;
    ULONG ReservedFlags : 29;
};

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    ULONG Flags;
    ULONG Enable : 1;
    ULONG DisableAtlThunkEmulation : 1;
    ULONG ReservedFlags : 30;
    UCHAR Permanent;
};

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    ULONG Flags;
    ULONG ProhibitDynamicCode : 1;
    ULONG AllowThreadOptOut : 1;
    ULONG AllowRemoteDowngrade : 1;
    ULONG AuditProhibitDynamicCode : 1;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    ULONG Flags;
    ULONG DisableExtensionPoints : 1;
    ULONG ReservedFlags : 31;
};

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    ULONG Flags;
    ULONG DisableNonSystemFonts : 1;
    ULONG AuditNonSystemFontLoading : 1;
    ULONG ReservedFlags : 30;
};

typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
    ULONG Flags;
    ULONG NoRemoteImages : 1;
    ULONG NoLowMandatoryLabelImages : 1;
    ULONG PreferSystem32Images : 1;
    ULONG AuditNoRemoteImages : 1;
    ULONG AuditNoLowMandatoryLabelImages : 1;
    ULONG ReservedFlags : 27;
};

typedef struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
    ULONG Flags;
    ULONG EnableExportAddressFilter : 1;
    ULONG AuditExportAddressFilter : 1;
    ULONG EnableExportAddressFilterPlus : 1;
    ULONG AuditExportAddressFilterPlus : 1;
    ULONG EnableImportAddressFilter : 1;
    ULONG AuditImportAddressFilter : 1;
    ULONG EnableRopStackPivot : 1;
    ULONG AuditRopStackPivot : 1;
    ULONG EnableRopCallerCheck : 1;
    ULONG AuditRopCallerCheck : 1;
    ULONG EnableRopSimExec : 1;
    ULONG AuditRopSimExec : 1;
    ULONG ReservedFlags : 20;
};

typedef struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
    ULONG Flags;
    ULONG SmtBranchTargetIsolation : 1;
    ULONG IsolateSecurityDomain : 1;
    ULONG DisablePageCombine : 1;
    ULONG SpeculativeStoreBypassDisable : 1;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    ULONG Flags;
    ULONG RaiseExceptionOnInvalidHandleReference : 1;
    ULONG HandleExceptionsPermanentlyEnabled : 1;
    ULONG ReservedFlags : 30;
};

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    ULONG Flags;
    ULONG DisallowWin32kSystemCalls : 1;
    ULONG AuditDisallowWin32kSystemCalls : 1;
    ULONG ReservedFlags : 30;
};

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
    ULONG Flags;
    ULONG FilterId : 4;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION {
    struct _UNICODE_STRING TargetDevicePath;
};

typedef struct _PROCESS_SESSION_INFORMATION {
    ULONG SessionId;
};

typedef struct _PROCESS_WS_WATCH_INFORMATION {
    PVOID FaultingPc;
    PVOID FaultingVa;
};

typedef struct _PROFILE_SOURCE_INFO {
    ULONG NextEntryOffset;
    ULONG Source;
    ULONG MinInterval;
    ULONG MaxInterval;
    ULONG64 Reserved;
    WCHAR Description[1];
};

typedef struct _PS_CREATE_NOTIFY_INFO {
    ULONG64 Size;
    ULONG Flags;
    ULONG FileOpenNameAvailable : 1;
    ULONG IsSubsystemProcess : 1;
    ULONG Reserved : 30;
    PVOID ParentProcessId;
    struct _CLIENT_ID CreatingThreadId;
    struct _FILE_OBJECT *FileObject;
    struct _UNICODE_STRING *ImageFileName;
    struct _UNICODE_STRING *CommandLine;
    LONG CreationStatus;
};

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PS_MITIGATION_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PTM_CONTROL_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG QueryGranularity;
    PLONG QueryTimeSource;
    PLONG Enable;
    PLONG Disable;
};

typedef struct _QUAD {
    LONG64 UseThisFieldToCopy;
    DOUBLE DoNotUseThisField;
};

typedef struct _QUERY_USB_CAPABILITY {
    USHORT Version;
    USHORT Size;
    struct USBDI_HANDLE__ *USBDIHandle;
    struct _GUID CapabilityType;
    ULONG OutputBufferLength;
    ULONG ResultLength;
};

typedef struct _QUOTA_LIMITS {
    ULONG64 PagedPoolLimit;
    ULONG64 NonPagedPoolLimit;
    ULONG64 MinimumWorkingSetSize;
    ULONG64 MaximumWorkingSetSize;
    ULONG64 PagefileLimit;
    union _LARGE_INTEGER TimeLimit;
};

typedef struct _QUOTA_LIMITS_EX {
    ULONG64 PagedPoolLimit;
    ULONG64 NonPagedPoolLimit;
    ULONG64 MinimumWorkingSetSize;
    ULONG64 MaximumWorkingSetSize;
    ULONG64 PagefileLimit;
    union _LARGE_INTEGER TimeLimit;
    ULONG64 WorkingSetLimit;
    ULONG64 Reserved2;
    ULONG64 Reserved3;
    ULONG64 Reserved4;
    ULONG Flags;
    union _RATE_QUOTA_LIMIT CpuRateLimit;
};

typedef struct _REENUMERATE_SELF_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID SurpriseRemoveAndReenumerateSelf;
};

typedef struct _REGISTER_COMPOSITE_DEVICE {
    USHORT Version;
    USHORT Size;
    struct USBDI_HANDLE__ *Reserved;
    struct _COMPOSITE_DEVICE_CAPABILITIES CapabilityFlags;
    ULONG FunctionCount;
};

typedef struct _REG_CALLBACK_CONTEXT_CLEANUP_INFORMATION {
    PVOID Object;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_CREATE_KEY_INFORMATION {
    struct _UNICODE_STRING *CompleteName;
    PVOID RootObject;
    PVOID ObjectType;
    ULONG CreateOptions;
    struct _UNICODE_STRING *Class;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
    ULONG DesiredAccess;
    ULONG GrantedAccess;
    PULONG Disposition;
    PVOID *ResultObject;
    PVOID CallContext;
    PVOID RootObjectContext;
    PVOID Transaction;
    PVOID Reserved;
};

typedef struct _REG_CREATE_KEY_INFORMATION_V1 {
    struct _UNICODE_STRING *CompleteName;
    PVOID RootObject;
    PVOID ObjectType;
    ULONG Options;
    struct _UNICODE_STRING *Class;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
    ULONG DesiredAccess;
    ULONG GrantedAccess;
    PULONG Disposition;
    PVOID *ResultObject;
    PVOID CallContext;
    PVOID RootObjectContext;
    PVOID Transaction;
    ULONG64 Version;
    struct _UNICODE_STRING *RemainingName;
    ULONG Wow64Flags;
    ULONG Attributes;
    CHAR CheckAccessMode;
};

typedef struct _REG_DELETE_KEY_INFORMATION {
    PVOID Object;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_DELETE_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *ValueName;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_ENUMERATE_KEY_INFORMATION {
    PVOID Object;
    ULONG Index;
    enum _KEY_INFORMATION_CLASS KeyInformationClass;
    PVOID KeyInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_ENUMERATE_VALUE_KEY_INFORMATION {
    PVOID Object;
    ULONG Index;
    enum _KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass;
    PVOID KeyValueInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_KEY_HANDLE_CLOSE_INFORMATION {
    PVOID Object;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_LOAD_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *KeyName;
    struct _UNICODE_STRING *SourceFile;
    ULONG Flags;
    PVOID TrustClassObject;
    PVOID UserEvent;
    ULONG DesiredAccess;
    PVOID *RootHandle;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_POST_CREATE_KEY_INFORMATION {
    struct _UNICODE_STRING *CompleteName;
    PVOID Object;
    LONG Status;
};

typedef struct _REG_POST_OPERATION_INFORMATION {
    PVOID Object;
    LONG Status;
    PVOID PreInformation;
    LONG ReturnStatus;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_PRE_CREATE_KEY_INFORMATION {
    struct _UNICODE_STRING *CompleteName;
};

typedef struct _REG_QUERY_KEY_INFORMATION {
    PVOID Object;
    enum _KEY_INFORMATION_CLASS KeyInformationClass;
    PVOID KeyInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_KEY_NAME {
    PVOID Object;
    struct _OBJECT_NAME_INFORMATION *ObjectNameInfo;
    ULONG Length;
    PULONG ReturnLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_KEY_SECURITY_INFORMATION {
    PVOID Object;
    PULONG SecurityInformation;
    PVOID SecurityDescriptor;
    PULONG Length;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _KEY_VALUE_ENTRY *ValueEntries;
    ULONG EntryCount;
    PVOID ValueBuffer;
    PULONG BufferLength;
    PULONG RequiredBufferLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *ValueName;
    enum _KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass;
    PVOID KeyValueInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_RENAME_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *NewName;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_REPLACE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *OldFileName;
    struct _UNICODE_STRING *NewFileName;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_RESTORE_KEY_INFORMATION {
    PVOID Object;
    PVOID FileHandle;
    ULONG Flags;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SAVE_KEY_INFORMATION {
    PVOID Object;
    PVOID FileHandle;
    ULONG Format;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SET_INFORMATION_KEY_INFORMATION {
    PVOID Object;
    enum _KEY_SET_INFORMATION_CLASS KeySetInformationClass;
    PVOID KeySetInformation;
    ULONG KeySetInformationLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SET_KEY_SECURITY_INFORMATION {
    PVOID Object;
    PULONG SecurityInformation;
    PVOID SecurityDescriptor;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SET_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *ValueName;
    ULONG TitleIndex;
    ULONG Type;
    PVOID Data;
    ULONG DataSize;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_UNLOAD_KEY_INFORMATION {
    PVOID Object;
    PVOID UserEvent;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REQUEST_REMOTE_WAKE_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct USBD_FUNCTION_HANDLE__ *UsbdFunctionHandle;
    ULONG Interface;
};

typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    struct _GUID ResourceManagerId;
    ULONG DescriptionLength;
    WCHAR Description[1];
};

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    PVOID IoCompletionPortHandle;
    ULONG64 CompletionKey;
};

typedef struct _RESOURCE_HASH_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID Address;
    ULONG ContentionCount;
    ULONG Number;
};

typedef struct _RESOURCE_PERFORMANCE_DATA {
    ULONG ActiveResourceCount;
    ULONG TotalResourceCount;
    ULONG ExclusiveAcquire;
    ULONG SharedFirstLevel;
    ULONG SharedSecondLevel;
    ULONG StarveFirstLevel;
    ULONG StarveSecondLevel;
    ULONG WaitForExclusive;
    ULONG OwnerTableExpands;
    ULONG MaximumTableExpand;
    struct _LIST_ENTRY HashTable[64];
};

typedef struct _RESUME_PERFORMANCE {
    ULONG PostTimeMs;
    ULONG64 TotalResumeTimeMs;
    ULONG64 ResumeCompleteTimestamp;
};

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *Previous;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    ULONG Flags;
};

typedef struct _RTL_AVL_TABLE {
    struct _RTL_BALANCED_LINKS BalancedRoot;
    PVOID OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    ULONG DepthOfTree;
    struct _RTL_BALANCED_LINKS *RestartKey;
    ULONG DeleteCount;
    enum _RTL_GENERIC_COMPARE_RESULTS *CompareRoutine;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    PVOID TableContext;
};

typedef struct _RTL_AVL_TREE {
    struct _RTL_BALANCED_NODE *Root;
};

typedef struct _RTL_BALANCED_LINKS {
    struct _RTL_BALANCED_LINKS *Parent;
    struct _RTL_BALANCED_LINKS *LeftChild;
    struct _RTL_BALANCED_LINKS *RightChild;
    CHAR Balance;
    UCHAR Reserved[3];
};

typedef struct _RTL_BALANCED_NODE {
    struct _RTL_BALANCED_NODE *Children[2];
    struct _RTL_BALANCED_NODE *Left;
    struct _RTL_BALANCED_NODE *Right;
    UCHAR Red : 1;
    UCHAR Balance : 2;
    ULONG64 ParentValue;
};

typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;
    PULONG Buffer;
};

typedef struct _RTL_BITMAP_RUN {
    ULONG StartingIndex;
    ULONG NumberOfBits;
};

typedef struct _RTL_CRITICAL_SECTION {
    struct _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    PVOID OwningThread;
    PVOID LockSemaphore;
    ULONG64 SpinCount;
};

typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    USHORT Type;
    USHORT CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    struct _LIST_ENTRY ProcessLocksList;
    ULONG EntryCount;
    ULONG ContentionCount;
    ULONG Flags;
    USHORT CreatorBackTraceIndexHigh;
    USHORT SpareUSHORT;
};

typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    struct _STRING DosPath;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE {
    ULONG Flags;
    ULONG Shift;
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;
    PVOID Directory;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
    struct _LIST_ENTRY *ChainHead;
    struct _LIST_ENTRY *PrevLinkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
    struct _LIST_ENTRY Linkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    struct _LIST_ENTRY *CurEntry;
    struct _LIST_ENTRY *ChainHead;
    ULONG BucketIndex;
};

typedef struct _RTL_GENERIC_TABLE {
    struct _RTL_SPLAY_LINKS *TableRoot;
    struct _LIST_ENTRY InsertOrderList;
    struct _LIST_ENTRY *OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    enum _RTL_GENERIC_COMPARE_RESULTS *CompareRoutine;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    PVOID TableContext;
};

typedef struct _RTL_QUERY_REGISTRY_TABLE {
    PLONG QueryRoutine;
    ULONG Flags;
    PWCHAR Name;
    PVOID EntryContext;
    ULONG DefaultType;
    PVOID DefaultData;
    ULONG DefaultLength;
};

typedef struct _RTL_RB_TREE {
    struct _RTL_BALANCED_NODE *Root;
    UCHAR Encoded : 1;
    struct _RTL_BALANCED_NODE *Min;
};

typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
};

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    PVOID ConsoleHandle;
    ULONG ConsoleFlags;
    PVOID StandardInput;
    PVOID StandardOutput;
    PVOID StandardError;
    struct _CURDIR CurrentDirectory;
    struct _UNICODE_STRING DllPath;
    struct _UNICODE_STRING ImagePathName;
    struct _UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    struct _UNICODE_STRING WindowTitle;
    struct _UNICODE_STRING DesktopInfo;
    struct _UNICODE_STRING ShellInfo;
    struct _UNICODE_STRING RuntimeData;
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
    ULONG64 EnvironmentSize;
    ULONG64 EnvironmentVersion;
    PVOID PackageDependencyData;
    ULONG ProcessGroupId;
    ULONG LoaderThreads;
    struct _UNICODE_STRING RedirectionDllName;
};

typedef struct _SCATTER_GATHER_ELEMENT {
    union _LARGE_INTEGER Address;
    ULONG Length;
    ULONG64 Reserved;
};

typedef struct _SCATTER_GATHER_LIST {
    ULONG NumberOfElements;
    ULONG64 Reserved;
    struct _SCATTER_GATHER_ELEMENT Elements[0];
};

typedef struct _SCOPE_TABLE_AMD64 {
    ULONG Count;
    struct {
        ULONG BeginAddress;
        ULONG EndAddress;
        ULONG HandlerAddress;
        ULONG JumpTarget;
    } ScopeRecord[1];
};

typedef struct _SCSI_REQUEST_BLOCK {
};

typedef struct _SDEV_IDENTIFIER_INTERFACE {
    struct _INTERFACE InterfaceHeader;
    PULONG64 GetIdentifier;
};

typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
};

typedef struct _SECURE_DRIVER_INTERFACE {
    struct _INTERFACE InterfaceHeader;
    struct _EPROCESS **ProcessReference;
    PVOID ProcessDereference;
    ULONG Reserved;
};

typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    PVOID Owner;
    PVOID Group;
    struct _ACL *Sacl;
    struct _ACL *Dacl;
};

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    UCHAR ContextTrackingMode;
    UCHAR EffectiveOnly;
};

typedef struct _SECURITY_SUBJECT_CONTEXT {
    PVOID ClientToken;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PVOID PrimaryToken;
    PVOID ProcessAuditId;
};

typedef struct _SE_ADT_ACCESS_REASON {
    ULONG AccessMask;
    ULONG AccessReasons[32];
    ULONG ObjectTypeIndex;
    ULONG AccessGranted;
    PVOID SecurityDescriptor;
};

typedef struct _SE_ADT_CLAIMS {
    ULONG Length;
    PVOID Claims;
};

typedef struct _SE_ADT_OBJECT_TYPE {
    struct _GUID ObjectType;
    USHORT Flags;
    USHORT Level;
    ULONG AccessMask;
};

typedef struct _SE_ADT_PARAMETER_ARRAY {
    ULONG CategoryId;
    ULONG AuditId;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    struct _SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
};

typedef struct _SE_ADT_PARAMETER_ARRAY_ENTRY {
    enum _SE_ADT_PARAMETER_TYPE Type;
    ULONG Length;
    ULONG64 Data[2];
    PVOID Address;
};

typedef struct _SE_ADT_PARAMETER_ARRAY_EX {
    ULONG CategoryId;
    ULONG AuditId;
    ULONG Version;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    struct _SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
};

typedef struct _SE_EXPORTS {
    struct _LUID SeCreateTokenPrivilege;
    struct _LUID SeAssignPrimaryTokenPrivilege;
    struct _LUID SeLockMemoryPrivilege;
    struct _LUID SeIncreaseQuotaPrivilege;
    struct _LUID SeUnsolicitedInputPrivilege;
    struct _LUID SeTcbPrivilege;
    struct _LUID SeSecurityPrivilege;
    struct _LUID SeTakeOwnershipPrivilege;
    struct _LUID SeLoadDriverPrivilege;
    struct _LUID SeCreatePagefilePrivilege;
    struct _LUID SeIncreaseBasePriorityPrivilege;
    struct _LUID SeSystemProfilePrivilege;
    struct _LUID SeSystemtimePrivilege;
    struct _LUID SeProfileSingleProcessPrivilege;
    struct _LUID SeCreatePermanentPrivilege;
    struct _LUID SeBackupPrivilege;
    struct _LUID SeRestorePrivilege;
    struct _LUID SeShutdownPrivilege;
    struct _LUID SeDebugPrivilege;
    struct _LUID SeAuditPrivilege;
    struct _LUID SeSystemEnvironmentPrivilege;
    struct _LUID SeChangeNotifyPrivilege;
    struct _LUID SeRemoteShutdownPrivilege;
    PVOID SeNullSid;
    PVOID SeWorldSid;
    PVOID SeLocalSid;
    PVOID SeCreatorOwnerSid;
    PVOID SeCreatorGroupSid;
    PVOID SeNtAuthoritySid;
    PVOID SeDialupSid;
    PVOID SeNetworkSid;
    PVOID SeBatchSid;
    PVOID SeInteractiveSid;
    PVOID SeLocalSystemSid;
    PVOID SeAliasAdminsSid;
    PVOID SeAliasUsersSid;
    PVOID SeAliasGuestsSid;
    PVOID SeAliasPowerUsersSid;
    PVOID SeAliasAccountOpsSid;
    PVOID SeAliasSystemOpsSid;
    PVOID SeAliasPrintOpsSid;
    PVOID SeAliasBackupOpsSid;
    PVOID SeAuthenticatedUsersSid;
    PVOID SeRestrictedSid;
    PVOID SeAnonymousLogonSid;
    struct _LUID SeUndockPrivilege;
    struct _LUID SeSyncAgentPrivilege;
    struct _LUID SeEnableDelegationPrivilege;
    PVOID SeLocalServiceSid;
    PVOID SeNetworkServiceSid;
    struct _LUID SeManageVolumePrivilege;
    struct _LUID SeImpersonatePrivilege;
    struct _LUID SeCreateGlobalPrivilege;
    struct _LUID SeTrustedCredManAccessPrivilege;
    struct _LUID SeRelabelPrivilege;
    struct _LUID SeIncreaseWorkingSetPrivilege;
    struct _LUID SeTimeZonePrivilege;
    struct _LUID SeCreateSymbolicLinkPrivilege;
    PVOID SeIUserSid;
    PVOID SeUntrustedMandatorySid;
    PVOID SeLowMandatorySid;
    PVOID SeMediumMandatorySid;
    PVOID SeHighMandatorySid;
    PVOID SeSystemMandatorySid;
    PVOID SeOwnerRightsSid;
    PVOID SeAllAppPackagesSid;
    PVOID SeUserModeDriversSid;
    PVOID SeProcTrustWinTcbSid;
    PVOID SeTrustedInstallerSid;
    struct _LUID SeDelegateSessionUserImpersonatePrivilege;
};

typedef struct _SE_IMPERSONATION_STATE {
    PVOID Token;
    UCHAR CopyOnOpen;
    UCHAR EffectiveOnly;
    enum _SECURITY_IMPERSONATION_LEVEL Level;
};

typedef struct _SHARE_ACCESS {
    ULONG OpenCount;
    ULONG Readers;
    ULONG Writers;
    ULONG Deleters;
    ULONG SharedRead;
    ULONG SharedWrite;
    ULONG SharedDelete;
};

typedef struct _SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[1];
};

typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
};

typedef struct _SILO_MONITOR {
};

typedef struct _SILO_MONITOR_REGISTRATION {
    UCHAR Version;
    UCHAR MonitorHost;
    UCHAR MonitorExistingSilos;
    UCHAR Reserved[5];
    struct _UNICODE_STRING *DriverObjectName;
    struct _UNICODE_STRING *ComponentName;
    PLONG CreateCallback;
    PVOID TerminateCallback;
};

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
};

typedef struct _SINGLE_LIST_ENTRY32 {
    ULONG Next;
};

typedef struct _SLEEP_STUDY_INTERFACE {
    struct SS_LIBRARY__ *SleepStudyLibContext;
    struct _MX_WNF_SUBSCRIPTION_CONTEXT *WnfContext;
    struct SS_COMPONENT__ *ComponentPowerRef;
    LONG LibInitializing;
    VOID _SLEEP_STUDY_INTERFACE;
    VOID _SLEEP_STUDY_INTERFACE;
    struct _SLEEP_STUDY_INTERFACE *operator=;
    struct _SLEEP_STUDY_INTERFACE *operator=;
};

typedef struct _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
};

typedef struct _SOC_SUBSYSTEM_FAILURE_DETAILS {
    enum _SOC_SUBSYSTEM_TYPE SubsysType;
    ULONG64 FirmwareVersion;
    ULONG64 HardwareVersion;
    ULONG UnifiedFailureRegionSize;
    CHAR UnifiedFailureRegion[1];
};

typedef struct _STACK_DEVICE_CAPABILITIES {
    struct _DEVICE_CAPABILITIES DeviceCaps;
    enum _DEVICE_WAKE_DEPTH DeepestWakeableDstate[6];
};

typedef struct _STACK_WALK_EVENT_DATA {
    ULONG64 TimeStamp;
    ULONG ProcessId;
    ULONG ThreadId;
    PVOID Addresses[1];
};

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _STRING32 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG Buffer;
};

typedef struct _STRING64 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG64 Buffer;
};

typedef struct _STRSD_KEY_LOOKUP {
    PWCHAR Key;
    ULONG KeyLen;
    ULONG Value;
};

typedef struct _STRSD_SID_LOOKUP {
    ULONG64 ExportSidFieldOffset;
    enum OS_SID_VER OsVer;
    WCHAR Key[4];
    ULONG KeyLen;
};

typedef struct _SYSTEM_CPU_SET_INFORMATION {
    ULONG Size;
    enum _CPU_SET_INFORMATION_TYPE Type;
    struct {
        ULONG Id;
        USHORT Group;
        UCHAR LogicalProcessorIndex;
        UCHAR CoreIndex;
        UCHAR LastLevelCacheIndex;
        UCHAR NumaNodeIndex;
        UCHAR EfficiencyClass;
        UCHAR AllFlags;
        UCHAR Parked : 1;
        UCHAR Allocated : 1;
        UCHAR AllocatedToTargetProcess : 1;
        UCHAR RealTime : 1;
        UCHAR ReservedFlags : 4;
        ULONG Reserved;
        UCHAR SchedulingClass;
        ULONG64 AllocationTag;
    } CpuSet;
};

typedef struct _SYSTEM_FIRMWARE_TABLE_HANDLER {
    ULONG ProviderSignature;
    UCHAR Register;
    PLONG FirmwareTableHandler;
    PVOID DriverObject;
};

typedef struct _SYSTEM_FIRMWARE_TABLE_INFORMATION {
    ULONG ProviderSignature;
    enum _SYSTEM_FIRMWARE_TABLE_ACTION Action;
    ULONG TableID;
    ULONG TableBufferLength;
    UCHAR TableBuffer[1];
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG64 ProcessorMask;
    enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    struct {
        UCHAR Flags;
    } ProcessorCore;
    struct {
        ULONG NodeNumber;
    } NumaNode;
    struct _CACHE_DESCRIPTOR Cache;
    ULONG64 Reserved[2];
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    ULONG Size;
    struct _PROCESSOR_RELATIONSHIP Processor;
    struct _NUMA_NODE_RELATIONSHIP NumaNode;
    struct _CACHE_RELATIONSHIP Cache;
    struct _GROUP_RELATIONSHIP Group;
};

typedef struct _SYSTEM_POWER_STATE_CONTEXT {
    ULONG Reserved1 : 8;
    ULONG TargetSystemState : 4;
    ULONG EffectiveSystemState : 4;
    ULONG CurrentSystemState : 4;
    ULONG IgnoreHibernationPath : 1;
    ULONG PseudoTransition : 1;
    ULONG KernelSoftReboot : 1;
    ULONG DirectedDripsTransition : 1;
    ULONG Reserved2 : 8;
    ULONG ContextAsUlong;
};

typedef struct _SYSTEM_TRACE_HEADER {
    ULONG Marker;
    USHORT Version;
    UCHAR HeaderType;
    UCHAR Flags;
    ULONG Header;
    struct _WMI_TRACE_PACKET Packet;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER SystemTime;
    ULONG KernelTime;
    ULONG UserTime;
};

typedef struct _TARGET_DEVICE_CUSTOM_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
    struct _FILE_OBJECT *FileObject;
    LONG NameBufferOffset;
    UCHAR CustomDataBuffer[1];
};

typedef struct _TARGET_DEVICE_REMOVAL_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
    struct _FILE_OBJECT *FileObject;
};

typedef struct _TEB {
    struct _NT_TIB NtTib;
    PVOID EnvironmentPointer;
    struct _CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    struct _PEB *ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    PVOID WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID ReservedForDebuggerInstrumentation[16];
    PVOID SystemReserved1[30];
    CHAR PlaceholderCompatibilityMode;
    UCHAR PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    LONG ExceptionCode;
    UCHAR Padding0[4];
    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer;
    ULONG64 InstrumentationCallbackSp;
    ULONG64 InstrumentationCallbackPreviousPc;
    ULONG64 InstrumentationCallbackPreviousSp;
    ULONG TxFsContext;
    UCHAR InstrumentationCallbackDisabled;
    UCHAR UnalignedLoadStoreExceptions;
    UCHAR Padding1[2];
    struct _GDI_TEB_BATCH GdiTebBatch;
    struct _CLIENT_ID RealClientId;
    PVOID GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    ULONG64 Win32ClientInfo[62];
    PVOID glDispatchTable[233];
    ULONG64 glReserved1[29];
    PVOID glReserved2;
    PVOID glSectionInfo;
    PVOID glSection;
    PVOID glTable;
    PVOID glCurrentRC;
    PVOID glContext;
    ULONG LastStatusValue;
    UCHAR Padding2[4];
    struct _UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    UCHAR Padding3[6];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    struct _LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorMode;
    UCHAR Padding4[4];
    PVOID Instrumentation[11];
    struct _GUID ActivityId;
    PVOID SubProcessTag;
    PVOID PerflibData;
    PVOID EtwTraceData;
    PVOID WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    UCHAR Padding5[4];
    PVOID ReservedForPerf;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
    UCHAR Padding6[4];
    PVOID SavedPriorityState;
    ULONG64 ReservedForCodeCoverage;
    PVOID ThreadPoolData;
    PVOID *TlsExpansionSlots;
    PVOID DeallocationBStore;
    PVOID BStoreLimit;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    PVOID NlsCache;
    PVOID pShimData;
    ULONG HeapData;
    UCHAR Padding7[4];
    PVOID CurrentTransactionHandle;
    struct _TEB_ACTIVE_FRAME *ActiveFrame;
    PVOID FlsData;
    PVOID PreferredLanguages;
    PVOID UserPrefLanguages;
    PVOID MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT LoadOwner : 1;
    USHORT LoaderWorker : 1;
    USHORT SkipLoaderInit : 1;
    USHORT SpareSameTebBits : 1;
    PVOID TxnScopeEnterCallback;
    PVOID TxnScopeExitCallback;
    PVOID TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    PVOID ResourceRetValue;
    PVOID ReservedForWdf;
    ULONG64 ReservedForCrt;
    struct _GUID EffectiveContainerId;
};

typedef struct _TEB_ACTIVE_FRAME {
    ULONG Flags;
    struct _TEB_ACTIVE_FRAME *Previous;
    struct _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

typedef struct _TEB_ACTIVE_FRAME_CONTEXT {
    ULONG Flags;
    PCHAR FrameName;
};

typedef struct _TIMER_SET_COALESCABLE_TIMER_INFO {
    union _LARGE_INTEGER DueTime;
    PVOID TimerApcRoutine;
    PVOID TimerContext;
    struct _COUNTED_REASON_CONTEXT *WakeContext;
    ULONG Period;
    ULONG TolerableDelay;
    PUCHAR PreviousState;
};

typedef struct _TIME_FIELDS {
    SHORT Year;
    SHORT Month;
    SHORT Day;
    SHORT Hour;
    SHORT Minute;
    SHORT Second;
    SHORT Milliseconds;
    SHORT Weekday;
};

typedef struct _TP_CALLBACK_ENVIRON_V3 {
    ULONG Version;
    struct _TP_POOL *Pool;
    struct _TP_CLEANUP_GROUP *CleanupGroup;
    PVOID CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PVOID FinalizationCallback;
     <unnamed-type-u>;
    union {
        ULONG Flags;
         <unnamed-type-s>;
        struct {
            ULONG LongFunction : 1;
            ULONG Persistent : 1;
            ULONG Private : 30;
        } s;
    } u;
    enum _TP_CALLBACK_PRIORITY CallbackPriority;
    ULONG Size;
};

typedef struct _TP_CALLBACK_INSTANCE {
};

typedef struct _TP_CLEANUP_GROUP {
};

typedef struct _TP_POOL {
};

typedef struct _TRACE_BUFFER {
    struct _EVENT_TRACE_HEADER Header;
    struct _MOF_FIELD MofField[9];
};

typedef struct _TRACE_ENABLE_CONTEXT {
    USHORT LoggerId;
    UCHAR Level;
    UCHAR InternalFlag;
    ULONG EnableFlags;
};

typedef struct _TRACE_ENABLE_CONTEXT_EX {
    USHORT LoggerId;
    UCHAR Level;
    UCHAR InternalFlag;
    ULONG EnableFlags;
    ULONG EnableFlagsHigh;
    ULONG Reserved;
};

typedef struct _TRACE_ENABLE_FLAG_EXTENSION {
    USHORT Offset;
    UCHAR Length;
    UCHAR Flag;
};

typedef struct _TRACE_ENABLE_FLAG_EXT_HEADER {
    USHORT Length;
    USHORT Items;
};

typedef struct _TRACE_ENABLE_FLAG_EXT_ITEM {
    USHORT Offset;
    USHORT Type;
};

typedef struct _TRACE_ENABLE_INFO {
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserved1;
    USHORT LoggerId;
    ULONG EnableProperty;
    ULONG Reserved2;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
};

typedef struct _TRACE_GUID_INFO {
    ULONG InstanceCount;
    ULONG Reserved;
};

typedef struct _TRACE_GUID_PROPERTIES {
    struct _GUID Guid;
    ULONG GuidType;
    ULONG LoggerId;
    ULONG EnableLevel;
    ULONG EnableFlags;
    UCHAR IsEnable;
};

typedef struct _TRACE_PROVIDER_INSTANCE_INFO {
    ULONG NextOffset;
    ULONG EnableCount;
    ULONG Pid;
    ULONG Flags;
};

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    struct _GUID TmIdentity;
    union _LARGE_INTEGER VirtualClock;
};

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    ULONG LogPathLength;
    WCHAR LogPath[1];
};

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    struct _GUID LogIdentity;
};

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONG64 LastRecoveredLsn;
};

typedef struct _TRANSACTION_BASIC_INFORMATION {
    struct _GUID TransactionId;
    ULONG State;
    ULONG Outcome;
};

typedef struct _TRANSACTION_BIND_INFORMATION {
    PVOID TmHandle;
};

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    ULONG NumberOfEnlistments;
    struct _TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
};

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    struct _GUID EnlistmentId;
    struct _GUID ResourceManagerId;
};

typedef struct _TRANSACTION_LIST_ENTRY {
    struct _GUID UOW;
};

typedef struct _TRANSACTION_LIST_INFORMATION {
    ULONG NumberOfTransactions;
    struct _TRANSACTION_LIST_ENTRY TransactionInformation[1];
};

typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    union _LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
};

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    struct _GUID UOW;
};

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    struct _GUID UOW;
    struct _GUID TmIdentity;
    ULONG BufferLength;
};

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    struct _GUID EnlistmentId;
    struct _GUID UOW;
};

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    ULONG SavepointId;
};

typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    struct _GUID TmIdentity;
    ULONG Flags;
};

typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    union _LARGE_INTEGER Timeout;
    ULONG Outcome;
    ULONG DescriptionLength;
    WCHAR Description[1];
};

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    struct _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
};

typedef struct _TRANSLATOR_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG TranslateResources;
    PLONG TranslateResourceRequirements;
};

typedef struct _TXN_PARAMETER_BLOCK {
    USHORT Length;
    USHORT TxFsContext;
    PVOID TransactionObject;
};

typedef struct _TlgEventMetadata_t {
    UCHAR Type;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    ULONG64 Keyword;
    USHORT RemainingSize;
};

typedef struct _TlgProviderMetadata_t {
    UCHAR Type;
    struct _GUID ProviderId;
    USHORT RemainingSize;
};

typedef struct _TlgProvider_t {
    ULONG LevelPlus1;
    PUSHORT ProviderMetadataPtr;
    ULONG64 KeywordAny;
    ULONG64 KeywordAll;
    ULONG64 RegHandle;
    PVOID EnableCallback;
    PVOID CallbackContext;
};

typedef struct _TlgStructSizeMustBeLessThan128<1,1> {
};

typedef struct _TlgStructSizeMustBeLessThan128<24,1> {
};

typedef struct _TlgStructSizeMustBeLessThan128<9,1> {
};

typedef struct _TlgTypeMapBase<_FILETIME> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<_GUID> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<_SYSTEMTIME> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<__int64> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<bool> {
    USHORT _TlgTypeType0;
    USHORT _TlgTypeType1;
    USHORT _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<char *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<char const *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<char> {
    USHORT _TlgTypeType0;
    USHORT _TlgTypeType1;
    USHORT _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<double> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<float> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<int> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<long> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<short> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<signed char> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned __int64> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned char> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned int> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned long> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned short *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned short const *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned short> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<void *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<void const *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<wchar_t> {
    USHORT _TlgTypeType0;
    USHORT _TlgTypeType1;
    USHORT _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TraceLoggingMetadata_t {
    ULONG Signature;
    USHORT Size;
    UCHAR Version;
    UCHAR Flags;
    ULONG64 Magic;
};

typedef struct _TypeDescriptor {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[0];
};

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWCHAR Buffer;
};

typedef struct _UNWIND_HISTORY_TABLE {
    ULONG Count;
    UCHAR LocalHint;
    UCHAR GlobalHint;
    UCHAR Search;
    UCHAR Once;
    ULONG64 LowAddress;
    ULONG64 HighAddress;
    struct _UNWIND_HISTORY_TABLE_ENTRY Entry[12];
};

typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
    ULONG64 ImageBase;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionEntry;
};

typedef struct _UNWIND_INFO {
    UCHAR Version : 3;
    UCHAR Flags : 5;
    UCHAR SizeOfProlog;
    UCHAR CountOfCodes;
    UCHAR FrameRegister : 4;
    UCHAR FrameOffset : 4;
    union _UNWIND_CODE UnwindCode[1];
};

typedef struct _URB {
    struct _URB_HEADER UrbHeader;
    struct _URB_SELECT_INTERFACE UrbSelectInterface;
    struct _URB_SELECT_CONFIGURATION UrbSelectConfiguration;
    struct _URB_PIPE_REQUEST UrbPipeRequest;
    struct _URB_FRAME_LENGTH_CONTROL UrbFrameLengthControl;
    struct _URB_GET_FRAME_LENGTH UrbGetFrameLength;
    struct _URB_SET_FRAME_LENGTH UrbSetFrameLength;
    struct _URB_GET_CURRENT_FRAME_NUMBER UrbGetCurrentFrameNumber;
    struct _URB_CONTROL_TRANSFER UrbControlTransfer;
    struct _URB_CONTROL_TRANSFER_EX UrbControlTransferEx;
    struct _URB_BULK_OR_INTERRUPT_TRANSFER UrbBulkOrInterruptTransfer;
    struct _URB_ISOCH_TRANSFER UrbIsochronousTransfer;
    struct _URB_CONTROL_DESCRIPTOR_REQUEST UrbControlDescriptorRequest;
    struct _URB_CONTROL_GET_STATUS_REQUEST UrbControlGetStatusRequest;
    struct _URB_CONTROL_FEATURE_REQUEST UrbControlFeatureRequest;
    struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST UrbControlVendorClassRequest;
    struct _URB_CONTROL_GET_INTERFACE_REQUEST UrbControlGetInterfaceRequest;
    struct _URB_CONTROL_GET_CONFIGURATION_REQUEST UrbControlGetConfigurationRequest;
    struct _URB_OS_FEATURE_DESCRIPTOR_REQUEST UrbOSFeatureDescriptorRequest;
    struct _URB_OPEN_STATIC_STREAMS UrbOpenStaticStreams;
    struct _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS UrbGetIsochPipeTransferPathDelays;
};

typedef struct _URB_ASYNC_NOTIFICATION_REQUEST_DURING_ENDPOINT_OFFLOAD {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    enum _ENDPOINT_OFFLOAD_NOTIFICATION_EVENT_TYPE Event;
    enum _ENDPOINT_OFFLOAD_RESPONSE_EVENT_TYPE Response;
};

typedef struct _URB_BULK_OR_INTERRUPT_TRANSFER {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG TransferFlags;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
};

typedef struct _URB_CONTROL_DESCRIPTOR_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID Reserved;
    ULONG Reserved0;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    USHORT Reserved1;
    UCHAR Index;
    UCHAR DescriptorType;
    USHORT LanguageId;
    USHORT Reserved2;
};

typedef struct _URB_CONTROL_FEATURE_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID Reserved;
    ULONG Reserved2;
    ULONG Reserved3;
    PVOID Reserved4;
    struct _MDL *Reserved5;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    USHORT Reserved0;
    USHORT FeatureSelector;
    USHORT Index;
    USHORT Reserved1;
};

typedef struct _URB_CONTROL_GET_CONFIGURATION_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID Reserved;
    ULONG Reserved0;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    UCHAR Reserved1[8];
};

typedef struct _URB_CONTROL_GET_INTERFACE_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID Reserved;
    ULONG Reserved0;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    UCHAR Reserved1[4];
    USHORT Interface;
    USHORT Reserved2;
};

typedef struct _URB_CONTROL_GET_STATUS_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID Reserved;
    ULONG Reserved0;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    UCHAR Reserved1[4];
    USHORT Index;
    USHORT Reserved2;
};

typedef struct _URB_CONTROL_TRANSFER {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG TransferFlags;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    UCHAR SetupPacket[8];
};

typedef struct _URB_CONTROL_TRANSFER_EX {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG TransferFlags;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    ULONG Timeout;
    struct _URB_HCD_AREA hca;
    UCHAR SetupPacket[8];
};

typedef struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID Reserved;
    ULONG TransferFlags;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    UCHAR RequestTypeReservedBits;
    UCHAR Request;
    USHORT Value;
    USHORT Index;
    USHORT Reserved1;
};

typedef struct _URB_FRAME_LENGTH_CONTROL {
    struct _URB_HEADER Hdr;
};

typedef struct _URB_GET_CURRENT_FRAME_NUMBER {
    struct _URB_HEADER Hdr;
    ULONG FrameNumber;
};

typedef struct _URB_GET_FRAME_LENGTH {
    struct _URB_HEADER Hdr;
    ULONG FrameLength;
    ULONG FrameNumber;
};

typedef struct _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG MaximumSendPathDelayInMilliSeconds;
    ULONG MaximumCompletionPathDelayInMilliSeconds;
};

typedef struct _URB_HCD_AREA {
    PVOID Reserved8[8];
};

typedef struct _URB_HEADER {
    USHORT Length;
    USHORT Function;
    LONG Status;
    PVOID UsbdDeviceHandle;
    ULONG UsbdFlags;
};

typedef struct _URB_ISOCH_TRANSFER {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG TransferFlags;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    ULONG StartFrame;
    ULONG NumberOfPackets;
    ULONG ErrorCount;
    struct _USBD_ISO_PACKET_DESCRIPTOR IsoPacket[1];
};

typedef struct _URB_OPEN_STATIC_STREAMS {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG NumberOfStreams;
    USHORT StreamInfoVersion;
    USHORT StreamInfoSize;
    struct _USBD_STREAM_INFORMATION *Streams;
};

typedef struct _URB_OS_FEATURE_DESCRIPTOR_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID Reserved;
    ULONG Reserved0;
    ULONG TransferBufferLength;
    PVOID TransferBuffer;
    struct _MDL *TransferBufferMDL;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    UCHAR Recipient : 5;
    UCHAR Reserved1 : 3;
    UCHAR Reserved2;
    UCHAR InterfaceNumber;
    UCHAR MS_PageIndex;
    USHORT MS_FeatureDescriptorIndex;
    USHORT Reserved3;
};

typedef struct _URB_PIPE_REQUEST {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG Reserved;
};

typedef struct _URB_SECURE_BULK_OR_INTERRUPT_TRANSFER {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG TransferFlags;
    struct _GUID SecureTransferBufferGuid;
    ULONG SecureTransferBufferLength;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
};

typedef struct _URB_SECURE_ISOCH_TRANSFER {
    struct _URB_HEADER Hdr;
    PVOID PipeHandle;
    ULONG TransferFlags;
    struct _GUID SecureTransferBufferGuid;
    ULONG SecureTransferBufferLength;
    struct _URB *UrbLink;
    struct _URB_HCD_AREA hca;
    ULONG StartFrame;
    ULONG NumberOfPackets;
    ULONG ErrorCount;
    struct _USBD_ISO_PACKET_DESCRIPTOR IsoPacket[1];
};

typedef struct _URB_SELECT_CONFIGURATION {
    struct _URB_HEADER Hdr;
    struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
    PVOID ConfigurationHandle;
    struct _USBD_INTERFACE_INFORMATION Interface;
};

typedef struct _URB_SELECT_INTERFACE {
    struct _URB_HEADER Hdr;
    PVOID ConfigurationHandle;
    struct _USBD_INTERFACE_INFORMATION Interface;
};

typedef struct _URB_SELECT_INTERFACE_WITH_ENDPOINT_OFFLOAD {
    struct _URB_HEADER Hdr;
    PVOID ConfigurationHandle;
    ULONG NumberOfEndpointsToOffload;
    PVOID InternalEndpointInformationArray;
    struct _USBD_INTERFACE_INFORMATION Interface;
};

typedef struct _URB_SET_FRAME_LENGTH {
    struct _URB_HEADER Hdr;
    LONG FrameLengthDelta;
};

typedef struct _USBC_DEVICE_CONFIGURATION_INTERFACE_V1 {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG StartDeviceCallback;
    PUCHAR PdoEnableCallback;
    PVOID Reserved[7];
};

typedef struct _USBC_FUNCTION_DESCRIPTOR {
    UCHAR FunctionNumber;
    UCHAR NumberOfInterfaces;
    struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptorList;
    struct _UNICODE_STRING HardwareId;
    struct _UNICODE_STRING CompatibleId;
    struct _UNICODE_STRING FunctionDescription;
    ULONG FunctionFlags;
    PVOID Reserved;
};

typedef struct _USBD_DEVICE_INFORMATION {
    ULONG OffsetNext;
    PVOID UsbdDeviceHandle;
    struct _USB_DEVICE_DESCRIPTOR DeviceDescriptor;
};

typedef struct _USBD_ENDPOINT_OFFLOAD_INFORMATION {
    ULONG Size;
    USHORT EndpointAddress;
    ULONG ResourceId;
    enum _USBD_ENDPOINT_OFFLOAD_MODE Mode;
    ULONG RootHubPortNumber : 8;
    ULONG RouteString : 20;
    ULONG Speed : 4;
    ULONG UsbDeviceAddress : 8;
    ULONG SlotId : 8;
    ULONG MultiTT : 1;
    ULONG LSOrFSDeviceConnectedToTTHub : 1;
    ULONG Reserved0 : 14;
    union _LARGE_INTEGER TransferSegmentLA;
    PVOID TransferSegmentVA;
    ULONG64 TransferRingSize;
    ULONG TransferRingInitialCycleBit;
    ULONG MessageNumber;
    union _LARGE_INTEGER EventRingSegmentLA;
    PVOID EventRingSegmentVA;
    ULONG64 EventRingSize;
    ULONG EventRingInitialCycleBit;
};

typedef struct _USBD_HANDLE_INFO {
    enum _SIG Sig;
    struct _USBD_INTERFACE_V3 Interface;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    ULONG CoreStackUsbdInterfaceVersion;
    LONG ReferenceCount;
    UCHAR IsCoreStackUsbdInterfaceVersion600AndDeviceHighSpeed;
    UCHAR PendingDelete;
};

typedef struct _USBD_INTERFACE_INFORMATION {
    USHORT Length;
    UCHAR InterfaceNumber;
    UCHAR AlternateSetting;
    UCHAR Class;
    UCHAR SubClass;
    UCHAR Protocol;
    UCHAR Reserved;
    PVOID InterfaceHandle;
    ULONG NumberOfPipes;
    struct _USBD_PIPE_INFORMATION Pipes[1];
};

typedef struct _USBD_INTERFACE_LIST_ENTRY {
    struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
    struct _USBD_INTERFACE_INFORMATION *Interface;
};

typedef struct _USBD_INTERFACE_V3 {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    ULONG USBDClientContractVersion;
    struct USBDI_HANDLE__ *USBDInterfaceHandle;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PoolTag;
    PVOID ContextFromClient;
    ULONG UsbVerifierEnabled;
    ULONG UsbVerifierFailRegistration;
    ULONG UsbVerifierFailChainedMdlSupport;
    ULONG UsbVerifierFailStaticStreamSupport;
    ULONG UsbVerifierStaticStreamCountOverride;
    ULONG UsbVerifierFailEnableStaticStreams;
    ULONG UsbVerifierTrackXrbs;
    PVOID Unregister;
    PLONG XrbAllocate;
    PLONG IsochXrbAllocate;
    PLONG SelectConfigXrbAllocateAndBuild;
    PLONG SelectInterfaceXrbAllocateAndBuild;
    PVOID XrbFree;
    PLONG SecureIsochXrbAllocate;
    ULONG UsbVerifierFailSecureTransferSupport;
    PLONG SelectInterfaceWithEndpointOffloadXrbAllocateAndBuild;
    ULONG UsbVerifierFailSelectInterfaceWithEndpointOffloadSupport;
    PLONG AsyncNotificationRequestDuringEndpointOffloadXrbAllocateAndBuild;
    ULONG UsbVerifierFailTimeSyncSupport;
};

typedef struct _USBD_ISO_PACKET_DESCRIPTOR {
    ULONG Offset;
    ULONG Length;
    LONG Status;
};

typedef struct _USBD_PIPE_INFORMATION {
    USHORT MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    enum _USBD_PIPE_TYPE PipeType;
    PVOID PipeHandle;
    ULONG MaximumTransferSize;
    ULONG PipeFlags;
};

typedef struct _USBD_STREAM_INFORMATION {
    PVOID PipeHandle;
    ULONG StreamID;
    ULONG MaximumTransferSize;
    ULONG PipeFlags;
};

typedef struct _USBD_VERSION_INFORMATION {
    ULONG USBDI_Version;
    ULONG Supported_USB_Version;
};

typedef struct _USB_30_HUB_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bNumberOfPorts;
    USHORT wHubCharacteristics;
    UCHAR bPowerOnToPowerGood;
    UCHAR bHubControlCurrent;
    UCHAR bHubHdrDecLat;
    USHORT wHubDelay;
    USHORT DeviceRemovable;
};

typedef struct _USB_BOS_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    USHORT wTotalLength;
    UCHAR bNumDeviceCaps;
};

typedef struct _USB_BUS_INFORMATION_LEVEL_0 {
    ULONG TotalBandwidth;
    ULONG ConsumedBandwidth;
};

typedef struct _USB_BUS_INFORMATION_LEVEL_1 {
    ULONG TotalBandwidth;
    ULONG ConsumedBandwidth;
    ULONG ControllerNameLength;
    WCHAR ControllerNameUnicodeString[1];
};

typedef struct _USB_BUS_INTERFACE_USBDI_V0 {
    USHORT Size;
    USHORT Version;
    PVOID BusContext;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID GetUSBDIVersion;
    PLONG QueryBusTime;
    PLONG SubmitIsoOutUrb;
    PLONG QueryBusInformation;
};

typedef struct _USB_BUS_INTERFACE_USBDI_V1 {
    USHORT Size;
    USHORT Version;
    PVOID BusContext;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID GetUSBDIVersion;
    PLONG QueryBusTime;
    PLONG SubmitIsoOutUrb;
    PLONG QueryBusInformation;
    PUCHAR IsDeviceHighSpeed;
};

typedef struct _USB_BUS_INTERFACE_USBDI_V2 {
    USHORT Size;
    USHORT Version;
    PVOID BusContext;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID GetUSBDIVersion;
    PLONG QueryBusTime;
    PLONG SubmitIsoOutUrb;
    PLONG QueryBusInformation;
    PUCHAR IsDeviceHighSpeed;
    PLONG EnumLogEntry;
};

typedef struct _USB_BUS_INTERFACE_USBDI_V3 {
    USHORT Size;
    USHORT Version;
    PVOID BusContext;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID GetUSBDIVersion;
    PLONG QueryBusTime;
    PLONG SubmitIsoOutUrb;
    PLONG QueryBusInformation;
    PUCHAR IsDeviceHighSpeed;
    PLONG EnumLogEntry;
    PLONG QueryBusTimeEx;
    PLONG QueryControllerType;
};

typedef struct _USB_COMMON_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
};

typedef struct _USB_CONFIGURATION_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    USHORT wTotalLength;
    UCHAR bNumInterfaces;
    UCHAR bConfigurationValue;
    UCHAR iConfiguration;
    UCHAR bmAttributes;
    UCHAR MaxPower;
};

typedef struct _USB_CONFIGURATION_POWER_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR SelfPowerConsumedD0[3];
    UCHAR bPowerSummaryId;
    UCHAR bBusPowerSavingD1;
    UCHAR bSelfPowerSavingD1;
    UCHAR bBusPowerSavingD2;
    UCHAR bSelfPowerSavingD2;
    UCHAR bBusPowerSavingD3;
    UCHAR bSelfPowerSavingD3;
    USHORT TransitionTimeFromD1;
    USHORT TransitionTimeFromD2;
    USHORT TransitionTimeFromD3;
};

typedef struct _USB_DEFAULT_PIPE_SETUP_PACKET {
    union _BM_REQUEST_TYPE bmRequestType;
    UCHAR bRequest;
     _wValue;
    union _USB_DEFAULT_PIPE_SETUP_PACKET::_wValue wValue;
     _wIndex;
    union _USB_DEFAULT_PIPE_SETUP_PACKET::_wIndex wIndex;
    USHORT wLength;
};

typedef struct _USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR iAddtionalInfoURL;
    UCHAR bNumberOfAlternateModes;
    UCHAR bPreferredAlternateMode;
     <unnamed-type-VconnPower>;
    union {
        USHORT AsUshort;
        USHORT VConnPowerNeededForFullFunctionality : 3;
        USHORT Reserved : 12;
        USHORT NoVconnPowerRequired : 1;
    } VconnPower;
    UCHAR bmConfigured[32];
    ULONG bReserved;
     <unnamed-type-AlternateMode>;
    struct {
        USHORT wSVID;
        UCHAR bAlternateMode;
        UCHAR iAlternateModeSetting;
    } AlternateMode[1];
};

typedef struct _USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR bReserved;
    UCHAR ContainerID[16];
};

typedef struct _USB_DEVICE_CAPABILITY_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
};

typedef struct _USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR bcdDescriptorVersion;
     <unnamed-type-bmAttributes>;
    union {
        ULONG AsUlong;
        ULONG GetFirmwareImageHashSupport : 1;
        ULONG DisallowFirmwareUpdateSupport : 1;
        ULONG Reserved : 30;
    } bmAttributes;
};

typedef struct _USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR bReserved;
     <unnamed-type-bmCapabilities>;
    union {
        USHORT AsUshort;
        USHORT BatteryCharging : 1;
        USHORT USBPowerDelivery : 1;
        USHORT USBTypeCCurrent : 1;
        USHORT Reserved : 13;
    } bmCapabilities;
    USHORT wMinVoltage;
    USHORT wMaxVoltage;
    USHORT wReserved;
    ULONG dwMaxOperatingPower;
    ULONG dwMaxPeakPower;
    ULONG dwMaxPeakPowerTime;
};

typedef struct _USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR bReserved;
    struct _GUID PlatformCapabilityUuid;
    UCHAR CapabililityData[1];
};

typedef struct _USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR bReserved;
     <unnamed-type-bmAttributes>;
    union {
        ULONG AsUlong;
        ULONG Reserved1 : 1;
        ULONG BatteryCharging : 1;
        ULONG USBPowerDelivery : 1;
        ULONG Provider : 1;
        ULONG Consumer : 1;
        ULONG ChargingPolicy : 1;
        ULONG TypeCCurrent : 1;
        ULONG Reserved2 : 1;
        ULONG ACSupply : 1;
        ULONG Battery : 1;
        ULONG Other : 1;
        ULONG NumBatteries : 3;
        ULONG UsesVbus : 1;
        ULONG Reserved3 : 17;
    } bmAttributes;
    USHORT bmProviderPorts;
    USHORT bmConsumerPorts;
    USHORT bcdBCVersion;
    USHORT bcdPDVersion;
    USHORT bcdUSBTypeCVersion;
};

typedef struct _USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR bReserved;
     <unnamed-type-bmAttributes>;
    union {
        ULONG AsUlong;
        ULONG SublinkSpeedAttrCount : 5;
        ULONG SublinkSpeedIDCount : 4;
        ULONG Reserved : 23;
    } bmAttributes;
     <unnamed-type-wFunctionalitySupport>;
    union {
        USHORT AsUshort;
        USHORT SublinkSpeedAttrID : 4;
        USHORT Reserved : 4;
        USHORT MinRxLaneCount : 4;
        USHORT MinTxLaneCount : 4;
    } wFunctionalitySupport;
    USHORT wReserved;
    union _USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED bmSublinkSpeedAttr[1];
};

typedef struct _USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
    UCHAR bmAttributes;
    USHORT wSpeedsSupported;
    UCHAR bFunctionalitySupport;
    UCHAR bU1DevExitLat;
    USHORT wU2DevExitLat;
};

typedef struct _USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bDevCapabilityType;
     <unnamed-type-bmAttributes>;
    union {
        ULONG AsUlong;
        ULONG Reserved : 1;
        ULONG LPMCapable : 1;
        ULONG BESLAndAlternateHIRDSupported : 1;
        ULONG BaselineBESLValid : 1;
        ULONG DeepBESLValid : 1;
        ULONG Reserved1 : 3;
        ULONG BaselineBESL : 4;
        ULONG DeepBESL : 4;
        ULONG Reserved2 : 16;
    } bmAttributes;
};

typedef struct _USB_DEVICE_CHARACTERISTICS {
    ULONG Version;
    ULONG Reserved[2];
    ULONG UsbDeviceCharacteristicsFlags;
    ULONG MaximumSendPathDelayInMilliSeconds;
    ULONG MaximumCompletionPathDelayInMilliSeconds;
};

typedef struct _USB_DEVICE_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    USHORT bcdUSB;
    UCHAR bDeviceClass;
    UCHAR bDeviceSubClass;
    UCHAR bDeviceProtocol;
    UCHAR bMaxPacketSize0;
    USHORT idVendor;
    USHORT idProduct;
    USHORT bcdDevice;
    UCHAR iManufacturer;
    UCHAR iProduct;
    UCHAR iSerialNumber;
    UCHAR bNumConfigurations;
};

typedef struct _USB_DEVICE_QUALIFIER_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    USHORT bcdUSB;
    UCHAR bDeviceClass;
    UCHAR bDeviceSubClass;
    UCHAR bDeviceProtocol;
    UCHAR bMaxPacketSize0;
    UCHAR bNumConfigurations;
    UCHAR bReserved;
};

typedef struct _USB_ENDPOINT_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bEndpointAddress;
    UCHAR bmAttributes;
    USHORT wMaxPacketSize;
    UCHAR bInterval;
};

typedef struct _USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION {
    PVOID TimeTrackingHandle;
    ULONG InputFrameNumber;
    ULONG InputMicroFrameNumber;
    union _LARGE_INTEGER QueryPerformanceCounterAtInputFrameOrMicroFrame;
    union _LARGE_INTEGER QueryPerformanceCounterFrequency;
    ULONG PredictedAccuracyInMicroSeconds;
    ULONG CurrentGenerationID;
    union _LARGE_INTEGER CurrentQueryPerformanceCounter;
    ULONG CurrentHardwareFrameNumber;
    ULONG CurrentHardwareMicroFrameNumber;
    ULONG CurrentUSBFrameNumber;
};

typedef struct _USB_HIGH_SPEED_MAXPACKET::_MP {
    USHORT MaxPacket : 11;
    USHORT HSmux : 2;
    USHORT Reserved : 3;
};

typedef struct _USB_HUB_DESCRIPTOR {
    UCHAR bDescriptorLength;
    UCHAR bDescriptorType;
    UCHAR bNumberOfPorts;
    USHORT wHubCharacteristics;
    UCHAR bPowerOnToPowerGood;
    UCHAR bHubControlCurrent;
    UCHAR bRemoveAndPowerMask[64];
};

typedef struct _USB_IDLE_CALLBACK_INFO {
    PVOID IdleCallback;
    PVOID IdleContext;
};

typedef struct _USB_INTERFACE_ASSOCIATION_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bFirstInterface;
    UCHAR bInterfaceCount;
    UCHAR bFunctionClass;
    UCHAR bFunctionSubClass;
    UCHAR bFunctionProtocol;
    UCHAR iFunction;
};

typedef struct _USB_INTERFACE_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bInterfaceNumber;
    UCHAR bAlternateSetting;
    UCHAR bNumEndpoints;
    UCHAR bInterfaceClass;
    UCHAR bInterfaceSubClass;
    UCHAR bInterfaceProtocol;
    UCHAR iInterface;
};

typedef struct _USB_INTERFACE_POWER_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bmCapabilitiesFlags;
    UCHAR bBusPowerSavingD1;
    UCHAR bSelfPowerSavingD1;
    UCHAR bBusPowerSavingD2;
    UCHAR bSelfPowerSavingD2;
    UCHAR bBusPowerSavingD3;
    UCHAR bSelfPowerSavingD3;
    USHORT TransitionTimeFromD1;
    USHORT TransitionTimeFromD2;
    USHORT TransitionTimeFromD3;
};

typedef struct _USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION {
    PVOID TimeTrackingHandle;
    UCHAR IsStartupDelayTolerable;
};

typedef struct _USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION {
    PVOID TimeTrackingHandle;
};

typedef struct _USB_STRING_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    WCHAR bString[1];
};

typedef struct _USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    USHORT wReserved;
    ULONG dwBytesPerInterval;
};

typedef struct _USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR {
    UCHAR bLength;
    UCHAR bDescriptorType;
    UCHAR bMaxBurst;
     <unnamed-type-bmAttributes>;
    union {
        UCHAR AsUchar;
         <unnamed-type-Bulk>;
        struct {
            UCHAR MaxStreams : 5;
            UCHAR Reserved1 : 3;
        } Bulk;
         <unnamed-type-Isochronous>;
        struct {
            UCHAR Mult : 2;
            UCHAR Reserved2 : 5;
            UCHAR SspCompanion : 1;
        } Isochronous;
    } bmAttributes;
    USHORT wBytesPerInterval;
};

typedef struct _USB_TOPOLOGY_ADDRESS {
    ULONG PciBusNumber;
    ULONG PciDeviceNumber;
    ULONG PciFunctionNumber;
    ULONG Reserved;
    USHORT RootHubPortNumber;
    USHORT HubPortNumber[5];
    USHORT Reserved2;
};

typedef struct _USB_TRANSPORT_CHARACTERISTICS {
    ULONG Version;
    ULONG TransportCharacteristicsFlags;
    ULONG64 CurrentRoundtripLatencyInMilliSeconds;
    ULONG64 MaxPotentialBandwidth;
};

typedef struct _USB_TRANSPORT_CHARACTERISTICS_CHANGE_NOTIFICATION {
    struct USB_CHANGE_REGISTRATION_HANDLE__ *Handle;
    struct _USB_TRANSPORT_CHARACTERISTICS UsbTransportCharacteristics;
};

typedef struct _USB_TRANSPORT_CHARACTERISTICS_CHANGE_REGISTRATION {
    ULONG ChangeNotificationInputFlags;
    struct USB_CHANGE_REGISTRATION_HANDLE__ *Handle;
    struct _USB_TRANSPORT_CHARACTERISTICS UsbTransportCharacteristics;
};

typedef struct _USB_TRANSPORT_CHARACTERISTICS_CHANGE_UNREGISTRATION {
    struct USB_CHANGE_REGISTRATION_HANDLE__ *Handle;
};

typedef struct _VF_COMMON_CONTEXT_HEADER {
    struct _WDF_DRIVER_GLOBALS *DriverGlobals;
};

typedef struct _VF_HOOK_PROCESS_INFO {
    ULONG DdiCallStatus;
    UCHAR DonotCallKmdfLib;
};

typedef struct _VF_WDFDEVICECREATE_CONTEXT {
    struct _VF_COMMON_CONTEXT_HEADER CommonHeader;
    struct _WDF_PNPPOWER_EVENT_CALLBACKS PnpPowerEventCallbacksOriginal;
};

typedef struct _VF_WDFIOQUEUECREATE_CONTEXT {
    struct _VF_COMMON_CONTEXT_HEADER CommonHeader;
    struct _WDF_IO_QUEUE_CONFIG IoQueueConfigOriginal;
};

typedef struct _VIDEO_RECORD {
    ULONG MemorySize;
    ULONG XResolution;
    ULONG YResolution;
    ULONG BitsPerPixel;
    ULONG VRefresh;
    WCHAR ChipType[256];
    WCHAR DACType[256];
    WCHAR AdapterString[256];
    WCHAR BiosString[256];
    WCHAR DeviceId[256];
    ULONG StateFlags;
};

typedef struct _VIRTUAL_RESOURCE {
    union _VIRTUAL_RESOURCE_CAPABILITY Capability;
    union _VIRTUAL_RESOURCE_CONTROL Control;
    USHORT RsvdP;
    union _VIRTUAL_RESOURCE_STATUS Status;
};

typedef struct _VM_COUNTERS {
    ULONG64 PeakVirtualSize;
    ULONG64 VirtualSize;
    ULONG PageFaultCount;
    ULONG64 PeakWorkingSetSize;
    ULONG64 WorkingSetSize;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PagefileUsage;
    ULONG64 PeakPagefileUsage;
};

typedef struct _VM_COUNTERS_EX {
    ULONG64 PeakVirtualSize;
    ULONG64 VirtualSize;
    ULONG PageFaultCount;
    ULONG64 PeakWorkingSetSize;
    ULONG64 WorkingSetSize;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PagefileUsage;
    ULONG64 PeakPagefileUsage;
    ULONG64 PrivateUsage;
};

typedef struct _VM_COUNTERS_EX2 {
    struct _VM_COUNTERS_EX CountersEx;
    ULONG64 PrivateWorkingSetSize;
    ULONG64 SharedCommitUsage;
};

typedef struct _VPB {
    SHORT Type;
    SHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[32];
};

typedef struct _WAIT_CONTEXT_BLOCK {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct _LIST_ENTRY DmaWaitEntry;
    ULONG NumberOfChannels;
    ULONG SyncCallback : 1;
    ULONG DmaContext : 1;
    ULONG ZeroMapRegisters : 1;
    ULONG Reserved : 9;
    ULONG NumberOfRemapPages : 20;
    enum _IO_ALLOCATION_ACTION *DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    struct _KDPC *BufferChainingDpc;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_11 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_13 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_15 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_17 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_19 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_21 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_23 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_25 {
    ULONG TypeInfoSize;
    ULONG ContextSize;
    ULONG ContextName;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_11 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_13 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_15 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_17 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_19 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_21 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_23 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCONTEXT_TRIAGE_INFO_V1_25 {
    ULONG HeaderSize;
    ULONG NextHeader;
    ULONG Object;
    ULONG TypeInfoPtr;
    ULONG Context;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_11 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_13 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_15 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_17 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_19 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_21 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_23 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG_V1_25 {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_PNPPOWER_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtCxDevicePrePrepareHardware;
    PVOID EvtCxDevicePrePrepareHardwareFailedCleanup;
    PLONG EvtCxDevicePostPrepareHardware;
    PLONG EvtCxDevicePreReleaseHardware;
    PLONG EvtCxDevicePostReleaseHardware;
    PLONG EvtCxDevicePreD0Entry;
    PVOID EvtCxDevicePreD0EntryFailedCleanup;
    PLONG EvtCxDevicePostD0Entry;
    PLONG EvtCxDevicePreD0Exit;
    PLONG EvtCxDevicePostD0Exit;
    PVOID EvtCxDevicePreSurpriseRemoval;
    PVOID EvtCxDevicePostSurpriseRemoval;
    PLONG EvtCxDevicePreSelfManagedIoInit;
    PVOID EvtCxDevicePreSelfManagedIoInitFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoInit;
    PLONG EvtCxDevicePreSelfManagedIoRestart;
    PVOID EvtCxDevicePreSelfManagedIoRestartFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoRestart;
    PLONG EvtCxDevicePreSelfManagedIoSuspend;
    PLONG EvtCxDevicePostSelfManagedIoSuspend;
    PVOID EvtCxDevicePreSelfManagedIoFlush;
    PVOID EvtCxDevicePostSelfManagedIoFlush;
    PVOID EvtCxDevicePreSelfManagedIoCleanup;
    PVOID EvtCxDevicePostSelfManagedIoCleanup;
};

typedef struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_19 {
    ULONG Size;
    PLONG EvtCxDevicePrePrepareHardware;
    PVOID EvtCxDevicePrePrepareHardwareFailedCleanup;
    PLONG EvtCxDevicePostPrepareHardware;
    PLONG EvtCxDevicePreReleaseHardware;
    PLONG EvtCxDevicePostReleaseHardware;
    PLONG EvtCxDevicePreD0Entry;
    PVOID EvtCxDevicePreD0EntryFailedCleanup;
    PLONG EvtCxDevicePostD0Entry;
    PLONG EvtCxDevicePreD0Exit;
    PLONG EvtCxDevicePostD0Exit;
    PVOID EvtCxDevicePreSurpriseRemoval;
    PVOID EvtCxDevicePostSurpriseRemoval;
    PLONG EvtCxDevicePreSelfManagedIoInit;
    PVOID EvtCxDevicePreSelfManagedIoInitFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoInit;
    PLONG EvtCxDevicePreSelfManagedIoRestart;
    PVOID EvtCxDevicePreSelfManagedIoRestartFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoRestart;
    PLONG EvtCxDevicePreSelfManagedIoSuspend;
    PLONG EvtCxDevicePostSelfManagedIoSuspend;
    PVOID EvtCxDevicePreSelfManagedIoFlush;
    PVOID EvtCxDevicePostSelfManagedIoFlush;
    PVOID EvtCxDevicePreSelfManagedIoCleanup;
    PVOID EvtCxDevicePostSelfManagedIoCleanup;
};

typedef struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_21 {
    ULONG Size;
    PLONG EvtCxDevicePrePrepareHardware;
    PVOID EvtCxDevicePrePrepareHardwareFailedCleanup;
    PLONG EvtCxDevicePostPrepareHardware;
    PLONG EvtCxDevicePreReleaseHardware;
    PLONG EvtCxDevicePostReleaseHardware;
    PLONG EvtCxDevicePreD0Entry;
    PVOID EvtCxDevicePreD0EntryFailedCleanup;
    PLONG EvtCxDevicePostD0Entry;
    PLONG EvtCxDevicePreD0Exit;
    PLONG EvtCxDevicePostD0Exit;
    PVOID EvtCxDevicePreSurpriseRemoval;
    PVOID EvtCxDevicePostSurpriseRemoval;
    PLONG EvtCxDevicePreSelfManagedIoInit;
    PVOID EvtCxDevicePreSelfManagedIoInitFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoInit;
    PLONG EvtCxDevicePreSelfManagedIoRestart;
    PVOID EvtCxDevicePreSelfManagedIoRestartFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoRestart;
    PLONG EvtCxDevicePreSelfManagedIoSuspend;
    PLONG EvtCxDevicePostSelfManagedIoSuspend;
    PVOID EvtCxDevicePreSelfManagedIoFlush;
    PVOID EvtCxDevicePostSelfManagedIoFlush;
    PVOID EvtCxDevicePreSelfManagedIoCleanup;
    PVOID EvtCxDevicePostSelfManagedIoCleanup;
};

typedef struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_23 {
    ULONG Size;
    PLONG EvtCxDevicePrePrepareHardware;
    PVOID EvtCxDevicePrePrepareHardwareFailedCleanup;
    PLONG EvtCxDevicePostPrepareHardware;
    PLONG EvtCxDevicePreReleaseHardware;
    PLONG EvtCxDevicePostReleaseHardware;
    PLONG EvtCxDevicePreD0Entry;
    PVOID EvtCxDevicePreD0EntryFailedCleanup;
    PLONG EvtCxDevicePostD0Entry;
    PLONG EvtCxDevicePreD0Exit;
    PLONG EvtCxDevicePostD0Exit;
    PVOID EvtCxDevicePreSurpriseRemoval;
    PVOID EvtCxDevicePostSurpriseRemoval;
    PLONG EvtCxDevicePreSelfManagedIoInit;
    PVOID EvtCxDevicePreSelfManagedIoInitFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoInit;
    PLONG EvtCxDevicePreSelfManagedIoRestart;
    PVOID EvtCxDevicePreSelfManagedIoRestartFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoRestart;
    PLONG EvtCxDevicePreSelfManagedIoSuspend;
    PLONG EvtCxDevicePostSelfManagedIoSuspend;
    PVOID EvtCxDevicePreSelfManagedIoFlush;
    PVOID EvtCxDevicePostSelfManagedIoFlush;
    PVOID EvtCxDevicePreSelfManagedIoCleanup;
    PVOID EvtCxDevicePostSelfManagedIoCleanup;
};

typedef struct _WDFCX_PNPPOWER_EVENT_CALLBACKS_V1_25 {
    ULONG Size;
    PLONG EvtCxDevicePrePrepareHardware;
    PVOID EvtCxDevicePrePrepareHardwareFailedCleanup;
    PLONG EvtCxDevicePostPrepareHardware;
    PLONG EvtCxDevicePreReleaseHardware;
    PLONG EvtCxDevicePostReleaseHardware;
    PLONG EvtCxDevicePreD0Entry;
    PVOID EvtCxDevicePreD0EntryFailedCleanup;
    PLONG EvtCxDevicePostD0Entry;
    PLONG EvtCxDevicePreD0Exit;
    PLONG EvtCxDevicePostD0Exit;
    PVOID EvtCxDevicePreSurpriseRemoval;
    PVOID EvtCxDevicePostSurpriseRemoval;
    PLONG EvtCxDevicePreSelfManagedIoInit;
    PVOID EvtCxDevicePreSelfManagedIoInitFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoInit;
    PLONG EvtCxDevicePreSelfManagedIoRestart;
    PVOID EvtCxDevicePreSelfManagedIoRestartFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoRestart;
    PLONG EvtCxDevicePreSelfManagedIoSuspend;
    PLONG EvtCxDevicePostSelfManagedIoSuspend;
    PVOID EvtCxDevicePreSelfManagedIoFlush;
    PVOID EvtCxDevicePostSelfManagedIoFlush;
    PVOID EvtCxDevicePreSelfManagedIoCleanup;
    PVOID EvtCxDevicePostSelfManagedIoCleanup;
};

typedef struct _WDFDEVICE_TRIAGE_INFO {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_11 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_13 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_15 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_17 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_19 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_21 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_23 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFDEVICE_TRIAGE_INFO_V1_25 {
    ULONG DeviceInitSize;
    ULONG DeviceDriver;
};

typedef struct _WDFFUNCTIONS {
    PLONG pfnWdfChildListCreate;
    struct WDFDEVICE__ **pfnWdfChildListGetDevice;
    struct WDFDEVICE__ **pfnWdfChildListRetrievePdo;
    PLONG pfnWdfChildListRetrieveAddressDescription;
    PVOID pfnWdfChildListBeginScan;
    PVOID pfnWdfChildListEndScan;
    PVOID pfnWdfChildListBeginIteration;
    PLONG pfnWdfChildListRetrieveNextDevice;
    PVOID pfnWdfChildListEndIteration;
    PLONG pfnWdfChildListAddOrUpdateChildDescriptionAsPresent;
    PLONG pfnWdfChildListUpdateChildDescriptionAsMissing;
    PVOID pfnWdfChildListUpdateAllChildDescriptionsAsPresent;
    PUCHAR pfnWdfChildListRequestChildEject;
    PLONG pfnWdfCollectionCreate;
    PULONG pfnWdfCollectionGetCount;
    PLONG pfnWdfCollectionAdd;
    PVOID pfnWdfCollectionRemove;
    PVOID pfnWdfCollectionRemoveItem;
    PVOID *pfnWdfCollectionGetItem;
    PVOID *pfnWdfCollectionGetFirstItem;
    PVOID *pfnWdfCollectionGetLastItem;
    PLONG pfnWdfCommonBufferCreate;
    PVOID *pfnWdfCommonBufferGetAlignedVirtualAddress;
    union _LARGE_INTEGER *pfnWdfCommonBufferGetAlignedLogicalAddress;
    PULONG64 pfnWdfCommonBufferGetLength;
    struct WDFDEVICE_INIT **pfnWdfControlDeviceInitAllocate;
    PVOID pfnWdfControlDeviceInitSetShutdownNotification;
    PVOID pfnWdfControlFinishInitializing;
    PVOID pfnWdfDeviceGetDeviceState;
    PVOID pfnWdfDeviceSetDeviceState;
    struct WDFDEVICE__ **pfnWdfWdmDeviceGetWdfDeviceHandle;
    struct _DEVICE_OBJECT **pfnWdfDeviceWdmGetDeviceObject;
    struct _DEVICE_OBJECT **pfnWdfDeviceWdmGetAttachedDevice;
    struct _DEVICE_OBJECT **pfnWdfDeviceWdmGetPhysicalDevice;
    PLONG pfnWdfDeviceWdmDispatchPreprocessedIrp;
    PLONG pfnWdfDeviceAddDependentUsageDeviceObject;
    PLONG pfnWdfDeviceAddRemovalRelationsPhysicalDevice;
    PVOID pfnWdfDeviceRemoveRemovalRelationsPhysicalDevice;
    PVOID pfnWdfDeviceClearRemovalRelationsDevices;
    struct WDFDRIVER__ **pfnWdfDeviceGetDriver;
    PLONG pfnWdfDeviceRetrieveDeviceName;
    PLONG pfnWdfDeviceAssignMofResourceName;
    struct WDFIOTARGET__ **pfnWdfDeviceGetIoTarget;
    enum _WDF_DEVICE_PNP_STATE *pfnWdfDeviceGetDevicePnpState;
    enum _WDF_DEVICE_POWER_STATE *pfnWdfDeviceGetDevicePowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE *pfnWdfDeviceGetDevicePowerPolicyState;
    PLONG pfnWdfDeviceAssignS0IdleSettings;
    PLONG pfnWdfDeviceAssignSxWakeSettings;
    PLONG pfnWdfDeviceOpenRegistryKey;
    PVOID pfnWdfDeviceSetSpecialFileSupport;
    PVOID pfnWdfDeviceSetCharacteristics;
    PULONG pfnWdfDeviceGetCharacteristics;
    PULONG pfnWdfDeviceGetAlignmentRequirement;
    PVOID pfnWdfDeviceSetAlignmentRequirement;
    PVOID pfnWdfDeviceInitFree;
    PVOID pfnWdfDeviceInitSetPnpPowerEventCallbacks;
    PVOID pfnWdfDeviceInitSetPowerPolicyEventCallbacks;
    PVOID pfnWdfDeviceInitSetPowerPolicyOwnership;
    PLONG pfnWdfDeviceInitRegisterPnpStateChangeCallback;
    PLONG pfnWdfDeviceInitRegisterPowerStateChangeCallback;
    PLONG pfnWdfDeviceInitRegisterPowerPolicyStateChangeCallback;
    PVOID pfnWdfDeviceInitSetIoType;
    PVOID pfnWdfDeviceInitSetExclusive;
    PVOID pfnWdfDeviceInitSetPowerNotPageable;
    PVOID pfnWdfDeviceInitSetPowerPageable;
    PVOID pfnWdfDeviceInitSetPowerInrush;
    PVOID pfnWdfDeviceInitSetDeviceType;
    PLONG pfnWdfDeviceInitAssignName;
    PLONG pfnWdfDeviceInitAssignSDDLString;
    PVOID pfnWdfDeviceInitSetDeviceClass;
    PVOID pfnWdfDeviceInitSetCharacteristics;
    PVOID pfnWdfDeviceInitSetFileObjectConfig;
    PVOID pfnWdfDeviceInitSetRequestAttributes;
    PLONG pfnWdfDeviceInitAssignWdmIrpPreprocessCallback;
    PVOID pfnWdfDeviceInitSetIoInCallerContextCallback;
    PLONG pfnWdfDeviceCreate;
    PVOID pfnWdfDeviceSetStaticStopRemove;
    PLONG pfnWdfDeviceCreateDeviceInterface;
    PVOID pfnWdfDeviceSetDeviceInterfaceState;
    PLONG pfnWdfDeviceRetrieveDeviceInterfaceString;
    PLONG pfnWdfDeviceCreateSymbolicLink;
    PLONG pfnWdfDeviceQueryProperty;
    PLONG pfnWdfDeviceAllocAndQueryProperty;
    PVOID pfnWdfDeviceSetPnpCapabilities;
    PVOID pfnWdfDeviceSetPowerCapabilities;
    PVOID pfnWdfDeviceSetBusInformationForChildren;
    PLONG pfnWdfDeviceIndicateWakeStatus;
    PVOID pfnWdfDeviceSetFailed;
    PLONG pfnWdfDeviceStopIdleNoTrack;
    PVOID pfnWdfDeviceResumeIdleNoTrack;
    struct WDFFILEOBJECT__ **pfnWdfDeviceGetFileObject;
    PLONG pfnWdfDeviceEnqueueRequest;
    struct WDFQUEUE__ **pfnWdfDeviceGetDefaultQueue;
    PLONG pfnWdfDeviceConfigureRequestDispatching;
    PLONG pfnWdfDmaEnablerCreate;
    PULONG64 pfnWdfDmaEnablerGetMaximumLength;
    PULONG64 pfnWdfDmaEnablerGetMaximumScatterGatherElements;
    PVOID pfnWdfDmaEnablerSetMaximumScatterGatherElements;
    PLONG pfnWdfDmaTransactionCreate;
    PLONG pfnWdfDmaTransactionInitialize;
    PLONG pfnWdfDmaTransactionInitializeUsingRequest;
    PLONG pfnWdfDmaTransactionExecute;
    PLONG pfnWdfDmaTransactionRelease;
    PUCHAR pfnWdfDmaTransactionDmaCompleted;
    PUCHAR pfnWdfDmaTransactionDmaCompletedWithLength;
    PUCHAR pfnWdfDmaTransactionDmaCompletedFinal;
    PULONG64 pfnWdfDmaTransactionGetBytesTransferred;
    PVOID pfnWdfDmaTransactionSetMaximumLength;
    struct WDFREQUEST__ **pfnWdfDmaTransactionGetRequest;
    PULONG64 pfnWdfDmaTransactionGetCurrentDmaTransferLength;
    struct WDFDEVICE__ **pfnWdfDmaTransactionGetDevice;
    PLONG pfnWdfDpcCreate;
    PUCHAR pfnWdfDpcEnqueue;
    PUCHAR pfnWdfDpcCancel;
    PVOID *pfnWdfDpcGetParentObject;
    struct _KDPC **pfnWdfDpcWdmGetDpc;
    PLONG pfnWdfDriverCreate;
    PWCHAR *pfnWdfDriverGetRegistryPath;
    struct _DRIVER_OBJECT **pfnWdfDriverWdmGetDriverObject;
    PLONG pfnWdfDriverOpenParametersRegistryKey;
    struct WDFDRIVER__ **pfnWdfWdmDriverGetWdfDriverHandle;
    PLONG pfnWdfDriverRegisterTraceInfo;
    PLONG pfnWdfDriverRetrieveVersionString;
    PUCHAR pfnWdfDriverIsVersionAvailable;
    struct _DEVICE_OBJECT **pfnWdfFdoInitWdmGetPhysicalDevice;
    PLONG pfnWdfFdoInitOpenRegistryKey;
    PLONG pfnWdfFdoInitQueryProperty;
    PLONG pfnWdfFdoInitAllocAndQueryProperty;
    PVOID pfnWdfFdoInitSetEventCallbacks;
    PVOID pfnWdfFdoInitSetFilter;
    PVOID pfnWdfFdoInitSetDefaultChildListConfig;
    PLONG pfnWdfFdoQueryForInterface;
    struct WDFCHILDLIST__ **pfnWdfFdoGetDefaultChildList;
    PLONG pfnWdfFdoAddStaticChild;
    PVOID pfnWdfFdoLockStaticChildListForIteration;
    struct WDFDEVICE__ **pfnWdfFdoRetrieveNextStaticChild;
    PVOID pfnWdfFdoUnlockStaticChildListFromIteration;
    struct _UNICODE_STRING **pfnWdfFileObjectGetFileName;
    PULONG pfnWdfFileObjectGetFlags;
    struct WDFDEVICE__ **pfnWdfFileObjectGetDevice;
    struct _FILE_OBJECT **pfnWdfFileObjectWdmGetFileObject;
    PLONG pfnWdfInterruptCreate;
    PUCHAR pfnWdfInterruptQueueDpcForIsr;
    PUCHAR pfnWdfInterruptSynchronize;
    PVOID pfnWdfInterruptAcquireLock;
    PVOID pfnWdfInterruptReleaseLock;
    PVOID pfnWdfInterruptEnable;
    PVOID pfnWdfInterruptDisable;
    struct _KINTERRUPT **pfnWdfInterruptWdmGetInterrupt;
    PVOID pfnWdfInterruptGetInfo;
    PVOID pfnWdfInterruptSetPolicy;
    struct WDFDEVICE__ **pfnWdfInterruptGetDevice;
    PLONG pfnWdfIoQueueCreate;
    enum _WDF_IO_QUEUE_STATE *pfnWdfIoQueueGetState;
    PVOID pfnWdfIoQueueStart;
    PVOID pfnWdfIoQueueStop;
    PVOID pfnWdfIoQueueStopSynchronously;
    struct WDFDEVICE__ **pfnWdfIoQueueGetDevice;
    PLONG pfnWdfIoQueueRetrieveNextRequest;
    PLONG pfnWdfIoQueueRetrieveRequestByFileObject;
    PLONG pfnWdfIoQueueFindRequest;
    PLONG pfnWdfIoQueueRetrieveFoundRequest;
    PVOID pfnWdfIoQueueDrainSynchronously;
    PVOID pfnWdfIoQueueDrain;
    PVOID pfnWdfIoQueuePurgeSynchronously;
    PVOID pfnWdfIoQueuePurge;
    PLONG pfnWdfIoQueueReadyNotify;
    PLONG pfnWdfIoTargetCreate;
    PLONG pfnWdfIoTargetOpen;
    PVOID pfnWdfIoTargetCloseForQueryRemove;
    PVOID pfnWdfIoTargetClose;
    PLONG pfnWdfIoTargetStart;
    PVOID pfnWdfIoTargetStop;
    enum _WDF_IO_TARGET_STATE *pfnWdfIoTargetGetState;
    struct WDFDEVICE__ **pfnWdfIoTargetGetDevice;
    PLONG pfnWdfIoTargetQueryTargetProperty;
    PLONG pfnWdfIoTargetAllocAndQueryTargetProperty;
    PLONG pfnWdfIoTargetQueryForInterface;
    struct _DEVICE_OBJECT **pfnWdfIoTargetWdmGetTargetDeviceObject;
    struct _DEVICE_OBJECT **pfnWdfIoTargetWdmGetTargetPhysicalDevice;
    struct _FILE_OBJECT **pfnWdfIoTargetWdmGetTargetFileObject;
    PVOID *pfnWdfIoTargetWdmGetTargetFileHandle;
    PLONG pfnWdfIoTargetSendReadSynchronously;
    PLONG pfnWdfIoTargetFormatRequestForRead;
    PLONG pfnWdfIoTargetSendWriteSynchronously;
    PLONG pfnWdfIoTargetFormatRequestForWrite;
    PLONG pfnWdfIoTargetSendIoctlSynchronously;
    PLONG pfnWdfIoTargetFormatRequestForIoctl;
    PLONG pfnWdfIoTargetSendInternalIoctlSynchronously;
    PLONG pfnWdfIoTargetFormatRequestForInternalIoctl;
    PLONG pfnWdfIoTargetSendInternalIoctlOthersSynchronously;
    PLONG pfnWdfIoTargetFormatRequestForInternalIoctlOthers;
    PLONG pfnWdfMemoryCreate;
    PLONG pfnWdfMemoryCreatePreallocated;
    PVOID *pfnWdfMemoryGetBuffer;
    PLONG pfnWdfMemoryAssignBuffer;
    PLONG pfnWdfMemoryCopyToBuffer;
    PLONG pfnWdfMemoryCopyFromBuffer;
    PLONG pfnWdfLookasideListCreate;
    PLONG pfnWdfMemoryCreateFromLookaside;
    PLONG pfnWdfDeviceMiniportCreate;
    PVOID pfnWdfDriverMiniportUnload;
    PVOID *pfnWdfObjectGetTypedContextWorker;
    PLONG pfnWdfObjectAllocateContext;
    PVOID *pfnWdfObjectContextGetObject;
    PVOID pfnWdfObjectReferenceActual;
    PVOID pfnWdfObjectDereferenceActual;
    PLONG pfnWdfObjectCreate;
    PVOID pfnWdfObjectDelete;
    PLONG pfnWdfObjectQuery;
    struct WDFDEVICE_INIT **pfnWdfPdoInitAllocate;
    PVOID pfnWdfPdoInitSetEventCallbacks;
    PLONG pfnWdfPdoInitAssignDeviceID;
    PLONG pfnWdfPdoInitAssignInstanceID;
    PLONG pfnWdfPdoInitAddHardwareID;
    PLONG pfnWdfPdoInitAddCompatibleID;
    PLONG pfnWdfPdoInitAddDeviceText;
    PVOID pfnWdfPdoInitSetDefaultLocale;
    PLONG pfnWdfPdoInitAssignRawDevice;
    PLONG pfnWdfPdoMarkMissing;
    PVOID pfnWdfPdoRequestEject;
    struct WDFDEVICE__ **pfnWdfPdoGetParent;
    PLONG pfnWdfPdoRetrieveIdentificationDescription;
    PLONG pfnWdfPdoRetrieveAddressDescription;
    PLONG pfnWdfPdoUpdateAddressDescription;
    PLONG pfnWdfPdoAddEjectionRelationsPhysicalDevice;
    PVOID pfnWdfPdoRemoveEjectionRelationsPhysicalDevice;
    PVOID pfnWdfPdoClearEjectionRelationsDevices;
    PLONG pfnWdfDeviceAddQueryInterface;
    PLONG pfnWdfRegistryOpenKey;
    PLONG pfnWdfRegistryCreateKey;
    PVOID pfnWdfRegistryClose;
    PVOID *pfnWdfRegistryWdmGetHandle;
    PLONG pfnWdfRegistryRemoveKey;
    PLONG pfnWdfRegistryRemoveValue;
    PLONG pfnWdfRegistryQueryValue;
    PLONG pfnWdfRegistryQueryMemory;
    PLONG pfnWdfRegistryQueryMultiString;
    PLONG pfnWdfRegistryQueryUnicodeString;
    PLONG pfnWdfRegistryQueryString;
    PLONG pfnWdfRegistryQueryULong;
    PLONG pfnWdfRegistryAssignValue;
    PLONG pfnWdfRegistryAssignMemory;
    PLONG pfnWdfRegistryAssignMultiString;
    PLONG pfnWdfRegistryAssignUnicodeString;
    PLONG pfnWdfRegistryAssignString;
    PLONG pfnWdfRegistryAssignULong;
    PLONG pfnWdfRequestCreate;
    PLONG pfnWdfRequestCreateFromIrp;
    PLONG pfnWdfRequestReuse;
    PLONG pfnWdfRequestChangeTarget;
    PVOID pfnWdfRequestFormatRequestUsingCurrentType;
    PVOID pfnWdfRequestWdmFormatUsingStackLocation;
    PUCHAR pfnWdfRequestSend;
    PLONG pfnWdfRequestGetStatus;
    PVOID pfnWdfRequestMarkCancelable;
    PLONG pfnWdfRequestUnmarkCancelable;
    PUCHAR pfnWdfRequestIsCanceled;
    PUCHAR pfnWdfRequestCancelSentRequest;
    PUCHAR pfnWdfRequestIsFrom32BitProcess;
    PVOID pfnWdfRequestSetCompletionRoutine;
    PVOID pfnWdfRequestGetCompletionParams;
    PLONG pfnWdfRequestAllocateTimer;
    PVOID pfnWdfRequestComplete;
    PVOID pfnWdfRequestCompleteWithPriorityBoost;
    PVOID pfnWdfRequestCompleteWithInformation;
    PVOID pfnWdfRequestGetParameters;
    PLONG pfnWdfRequestRetrieveInputMemory;
    PLONG pfnWdfRequestRetrieveOutputMemory;
    PLONG pfnWdfRequestRetrieveInputBuffer;
    PLONG pfnWdfRequestRetrieveOutputBuffer;
    PLONG pfnWdfRequestRetrieveInputWdmMdl;
    PLONG pfnWdfRequestRetrieveOutputWdmMdl;
    PLONG pfnWdfRequestRetrieveUnsafeUserInputBuffer;
    PLONG pfnWdfRequestRetrieveUnsafeUserOutputBuffer;
    PVOID pfnWdfRequestSetInformation;
    PULONG64 pfnWdfRequestGetInformation;
    struct WDFFILEOBJECT__ **pfnWdfRequestGetFileObject;
    PLONG pfnWdfRequestProbeAndLockUserBufferForRead;
    PLONG pfnWdfRequestProbeAndLockUserBufferForWrite;
    PCHAR pfnWdfRequestGetRequestorMode;
    PLONG pfnWdfRequestForwardToIoQueue;
    struct WDFQUEUE__ **pfnWdfRequestGetIoQueue;
    PLONG pfnWdfRequestRequeue;
    PVOID pfnWdfRequestStopAcknowledge;
    struct _IRP **pfnWdfRequestWdmGetIrp;
    PVOID pfnWdfIoResourceRequirementsListSetSlotNumber;
    PVOID pfnWdfIoResourceRequirementsListSetInterfaceType;
    PLONG pfnWdfIoResourceRequirementsListAppendIoResList;
    PLONG pfnWdfIoResourceRequirementsListInsertIoResList;
    PULONG pfnWdfIoResourceRequirementsListGetCount;
    struct WDFIORESLIST__ **pfnWdfIoResourceRequirementsListGetIoResList;
    PVOID pfnWdfIoResourceRequirementsListRemove;
    PVOID pfnWdfIoResourceRequirementsListRemoveByIoResList;
    PLONG pfnWdfIoResourceListCreate;
    PLONG pfnWdfIoResourceListAppendDescriptor;
    PLONG pfnWdfIoResourceListInsertDescriptor;
    PVOID pfnWdfIoResourceListUpdateDescriptor;
    PULONG pfnWdfIoResourceListGetCount;
    struct _IO_RESOURCE_DESCRIPTOR **pfnWdfIoResourceListGetDescriptor;
    PVOID pfnWdfIoResourceListRemove;
    PVOID pfnWdfIoResourceListRemoveByDescriptor;
    PLONG pfnWdfCmResourceListAppendDescriptor;
    PLONG pfnWdfCmResourceListInsertDescriptor;
    PULONG pfnWdfCmResourceListGetCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR **pfnWdfCmResourceListGetDescriptor;
    PVOID pfnWdfCmResourceListRemove;
    PVOID pfnWdfCmResourceListRemoveByDescriptor;
    PLONG pfnWdfStringCreate;
    PVOID pfnWdfStringGetUnicodeString;
    PVOID pfnWdfObjectAcquireLock;
    PVOID pfnWdfObjectReleaseLock;
    PLONG pfnWdfWaitLockCreate;
    PLONG pfnWdfWaitLockAcquire;
    PVOID pfnWdfWaitLockRelease;
    PLONG pfnWdfSpinLockCreate;
    PVOID pfnWdfSpinLockAcquire;
    PVOID pfnWdfSpinLockRelease;
    PLONG pfnWdfTimerCreate;
    PUCHAR pfnWdfTimerStart;
    PUCHAR pfnWdfTimerStop;
    PVOID *pfnWdfTimerGetParentObject;
    PLONG pfnWdfUsbTargetDeviceCreate;
    PLONG pfnWdfUsbTargetDeviceRetrieveInformation;
    PVOID pfnWdfUsbTargetDeviceGetDeviceDescriptor;
    PLONG pfnWdfUsbTargetDeviceRetrieveConfigDescriptor;
    PLONG pfnWdfUsbTargetDeviceQueryString;
    PLONG pfnWdfUsbTargetDeviceAllocAndQueryString;
    PLONG pfnWdfUsbTargetDeviceFormatRequestForString;
    PUCHAR pfnWdfUsbTargetDeviceGetNumInterfaces;
    PLONG pfnWdfUsbTargetDeviceSelectConfig;
    PVOID *pfnWdfUsbTargetDeviceWdmGetConfigurationHandle;
    PLONG pfnWdfUsbTargetDeviceRetrieveCurrentFrameNumber;
    PLONG pfnWdfUsbTargetDeviceSendControlTransferSynchronously;
    PLONG pfnWdfUsbTargetDeviceFormatRequestForControlTransfer;
    PLONG pfnWdfUsbTargetDeviceIsConnectedSynchronous;
    PLONG pfnWdfUsbTargetDeviceResetPortSynchronously;
    PLONG pfnWdfUsbTargetDeviceCyclePortSynchronously;
    PLONG pfnWdfUsbTargetDeviceFormatRequestForCyclePort;
    PLONG pfnWdfUsbTargetDeviceSendUrbSynchronously;
    PLONG pfnWdfUsbTargetDeviceFormatRequestForUrb;
    PVOID pfnWdfUsbTargetPipeGetInformation;
    PUCHAR pfnWdfUsbTargetPipeIsInEndpoint;
    PUCHAR pfnWdfUsbTargetPipeIsOutEndpoint;
    enum _WDF_USB_PIPE_TYPE *pfnWdfUsbTargetPipeGetType;
    PVOID pfnWdfUsbTargetPipeSetNoMaximumPacketSizeCheck;
    PLONG pfnWdfUsbTargetPipeWriteSynchronously;
    PLONG pfnWdfUsbTargetPipeFormatRequestForWrite;
    PLONG pfnWdfUsbTargetPipeReadSynchronously;
    PLONG pfnWdfUsbTargetPipeFormatRequestForRead;
    PLONG pfnWdfUsbTargetPipeConfigContinuousReader;
    PLONG pfnWdfUsbTargetPipeAbortSynchronously;
    PLONG pfnWdfUsbTargetPipeFormatRequestForAbort;
    PLONG pfnWdfUsbTargetPipeResetSynchronously;
    PLONG pfnWdfUsbTargetPipeFormatRequestForReset;
    PLONG pfnWdfUsbTargetPipeSendUrbSynchronously;
    PLONG pfnWdfUsbTargetPipeFormatRequestForUrb;
    PUCHAR pfnWdfUsbInterfaceGetInterfaceNumber;
    PUCHAR pfnWdfUsbInterfaceGetNumEndpoints;
    PVOID pfnWdfUsbInterfaceGetDescriptor;
    PLONG pfnWdfUsbInterfaceSelectSetting;
    PVOID pfnWdfUsbInterfaceGetEndpointInformation;
    struct WDFUSBINTERFACE__ **pfnWdfUsbTargetDeviceGetInterface;
    PUCHAR pfnWdfUsbInterfaceGetConfiguredSettingIndex;
    PUCHAR pfnWdfUsbInterfaceGetNumConfiguredPipes;
    struct WDFUSBPIPE__ **pfnWdfUsbInterfaceGetConfiguredPipe;
    PVOID *pfnWdfUsbTargetPipeWdmGetPipeHandle;
    PVOID pfnWdfVerifierDbgBreakPoint;
    PVOID pfnWdfVerifierKeBugCheck;
    PLONG pfnWdfWmiProviderCreate;
    struct WDFDEVICE__ **pfnWdfWmiProviderGetDevice;
    PUCHAR pfnWdfWmiProviderIsEnabled;
    PULONG64 pfnWdfWmiProviderGetTracingHandle;
    PLONG pfnWdfWmiInstanceCreate;
    PLONG pfnWdfWmiInstanceRegister;
    PVOID pfnWdfWmiInstanceDeregister;
    struct WDFDEVICE__ **pfnWdfWmiInstanceGetDevice;
    struct WDFWMIPROVIDER__ **pfnWdfWmiInstanceGetProvider;
    PLONG pfnWdfWmiInstanceFireEvent;
    PLONG pfnWdfWorkItemCreate;
    PVOID pfnWdfWorkItemEnqueue;
    PVOID *pfnWdfWorkItemGetParentObject;
    PVOID pfnWdfWorkItemFlush;
    PLONG pfnWdfCommonBufferCreateWithConfig;
    PULONG64 pfnWdfDmaEnablerGetFragmentLength;
    struct _DMA_ADAPTER **pfnWdfDmaEnablerWdmGetDmaAdapter;
    PUCHAR pfnWdfUsbInterfaceGetNumSettings;
    PVOID pfnWdfDeviceRemoveDependentUsageDeviceObject;
    enum POWER_ACTION *pfnWdfDeviceGetSystemPowerAction;
    PVOID pfnWdfInterruptSetExtendedPolicy;
    PLONG pfnWdfIoQueueAssignForwardProgressPolicy;
    PLONG pfnWdfPdoInitAssignContainerID;
    PVOID pfnWdfPdoInitAllowForwardingRequestToParent;
    PLONG pfnWdfRequestMarkCancelableEx;
    PUCHAR pfnWdfRequestIsReserved;
    PLONG pfnWdfRequestForwardToParentDeviceIoQueue;
    struct WDFCXDEVICE_INIT **pfnWdfCxDeviceInitAllocate;
    PLONG pfnWdfCxDeviceInitAssignWdmIrpPreprocessCallback;
    PVOID pfnWdfCxDeviceInitSetIoInCallerContextCallback;
    PVOID pfnWdfCxDeviceInitSetRequestAttributes;
    PVOID pfnWdfCxDeviceInitSetFileObjectConfig;
    PLONG pfnWdfDeviceWdmDispatchIrp;
    PLONG pfnWdfDeviceWdmDispatchIrpToIoQueue;
    PVOID pfnWdfDeviceInitSetRemoveLockOptions;
    PLONG pfnWdfDeviceConfigureWdmIrpDispatchCallback;
    PLONG pfnWdfDmaEnablerConfigureSystemProfile;
    PLONG pfnWdfDmaTransactionInitializeUsingOffset;
    PVOID pfnWdfDmaTransactionGetTransferInfo;
    PVOID pfnWdfDmaTransactionSetChannelConfigurationCallback;
    PVOID pfnWdfDmaTransactionSetTransferCompleteCallback;
    PVOID pfnWdfDmaTransactionSetImmediateExecution;
    PLONG pfnWdfDmaTransactionAllocateResources;
    PVOID pfnWdfDmaTransactionSetDeviceAddressOffset;
    PVOID pfnWdfDmaTransactionFreeResources;
    PUCHAR pfnWdfDmaTransactionCancel;
    PVOID *pfnWdfDmaTransactionWdmGetTransferContext;
    PUCHAR pfnWdfInterruptQueueWorkItemForIsr;
    PUCHAR pfnWdfInterruptTryToAcquireLock;
    PVOID pfnWdfIoQueueStopAndPurge;
    PVOID pfnWdfIoQueueStopAndPurgeSynchronously;
    PVOID pfnWdfIoTargetPurge;
    PLONG pfnWdfUsbTargetDeviceCreateWithParameters;
    PLONG pfnWdfUsbTargetDeviceQueryUsbCapability;
    PLONG pfnWdfUsbTargetDeviceCreateUrb;
    PLONG pfnWdfUsbTargetDeviceCreateIsochUrb;
    PLONG pfnWdfDeviceWdmAssignPowerFrameworkSettings;
    PVOID pfnWdfDmaTransactionStopSystemTransfer;
    PVOID pfnWdfCxVerifierKeBugCheck;
    PVOID pfnWdfInterruptReportActive;
    PVOID pfnWdfInterruptReportInactive;
    PVOID pfnWdfDeviceInitSetReleaseHardwareOrderOnFailure;
    PVOID *pfnWdfGetTriageInfo;
    PVOID pfnWdfDeviceInitSetIoTypeEx;
    PLONG pfnWdfDeviceQueryPropertyEx;
    PLONG pfnWdfDeviceAllocAndQueryPropertyEx;
    PLONG pfnWdfDeviceAssignProperty;
    PLONG pfnWdfFdoInitQueryPropertyEx;
    PLONG pfnWdfFdoInitAllocAndQueryPropertyEx;
    PLONG pfnWdfDeviceStopIdleActual;
    PVOID pfnWdfDeviceResumeIdleActual;
    struct WDFIOTARGET__ **pfnWdfDeviceGetSelfIoTarget;
    PVOID pfnWdfDeviceInitAllowSelfIoTarget;
    PLONG pfnWdfIoTargetSelfAssignDefaultIoQueue;
    PLONG pfnWdfDeviceOpenDevicemapKey;
    PVOID pfnWdfDmaTransactionSetSingleTransferRequirement;
    PVOID pfnWdfCxDeviceInitSetPnpPowerEventCallbacks;
    PULONG pfnWdfFileObjectGetInitiatorProcessId;
    PULONG pfnWdfRequestGetRequestorProcessId;
    PLONG pfnWdfDeviceRetrieveCompanionTarget;
    PLONG pfnWdfCompanionTargetSendTaskSynchronously;
    struct _EPROCESS **pfnWdfCompanionTargetWdmGetCompanionProcess;
    PLONG pfnWdfDriverOpenPersistentStateRegistryKey;
    PLONG pfnWdfDriverErrorReportApiMissing;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_11 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_13 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_15 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_17 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_19 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_21 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_23 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_25 {
    ULONG ReservedRequestList;
    ULONG ReservedRequestInUseList;
    ULONG PendedIrpList;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_11 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_13 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_15 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_17 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_19 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_21 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_23 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRPQUEUE_TRIAGE_INFO_V1_25 {
    ULONG IrpQueueSize;
    ULONG IrpListHeader;
    ULONG IrpListEntry;
    ULONG IrpContext;
};

typedef struct _WDFIRP_TRIAGE_INFO {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_11 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_13 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_15 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_17 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_19 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_21 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_23 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFIRP_TRIAGE_INFO_V1_25 {
    ULONG FxIrpSize;
    ULONG IrpPtr;
};

typedef struct _WDFMEMORY_OFFSET {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_0 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_1 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_11 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_13 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_15 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_17 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_19 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_21 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_23 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_25 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_5 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_7 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFMEMORY_OFFSET_V1_9 {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDFOBJECT_TRIAGE_INFO {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_11 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_13 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_15 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_17 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_19 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_21 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_23 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFOBJECT_TRIAGE_INFO_V1_25 {
    ULONG RawObjectSize;
    ULONG ObjectType;
    ULONG TotalObjectSize;
    ULONG ChildListHead;
    ULONG ChildEntry;
    ULONG Globals;
    ULONG ParentObject;
};

typedef struct _WDFPROCMGMT_MESSAGE_OPEN_PROCESS_REPLY {
    struct _WUDFMESSAGE_REPLY_HEADER Header;
    PVOID ProcessHandle;
    struct _WDFPROCMGMT_MESSAGE_OPEN_PROCESS_REPLY *FromHeader;
};

typedef struct _WDFPROCMGMT_MESSAGE_QUERY_PROCESS_REPLY {
    struct _WUDFMESSAGE_REPLY_HEADER Header;
    ULONG ProcessTimeout;
    ULONG DebugModeFlags;
    struct _WDFPROCMGMT_MESSAGE_QUERY_PROCESS_REPLY *FromHeader;
};

typedef struct _WDFQUEUE_TRIAGE_INFO {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_11 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_13 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_15 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_17 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_19 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_21 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_23 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFQUEUE_TRIAGE_INFO_V1_25 {
    ULONG QueueSize;
    ULONG IrpQueue1;
    ULONG IrpQueue2;
    ULONG RequestList1;
    ULONG RequestList2;
    ULONG FwdProgressContext;
    ULONG PkgIo;
};

typedef struct _WDFREQUEST_TRIAGE_INFO {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_11 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_13 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_15 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_17 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_19 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_21 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_23 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFREQUEST_TRIAGE_INFO_V1_25 {
    ULONG RequestSize;
    ULONG CsqContext;
    ULONG FxIrp;
    ULONG ListEntryQueueOwned;
    ULONG ListEntryQueueOwned2;
    ULONG RequestListEntry;
    ULONG FwdProgressList;
};

typedef struct _WDFSTRUCTURES {
    ULONG64 SIZE_WDF_CHILD_ADDRESS_DESCRIPTION_HEADER;
    ULONG64 SIZE_WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER;
    ULONG64 SIZE_WDF_CHILD_LIST_CONFIG;
    ULONG64 SIZE_WDF_CHILD_LIST_ITERATOR;
    ULONG64 SIZE_WDF_CHILD_RETRIEVE_INFO;
    ULONG64 SIZE_WDF_CLASS_BIND_INFO;
    ULONG64 SIZE_WDF_CLASS_BIND_INFO2;
    ULONG64 SIZE_WDF_CLASS_EXTENSION_DESCRIPTOR;
    ULONG64 SIZE_WDF_CLASS_LIBRARY_INFO;
    ULONG64 SIZE_WDF_CLASS_VERSION;
    ULONG64 SIZE_WDF_COMMON_BUFFER_CONFIG;
    ULONG64 SIZE_WDF_CUSTOM_TYPE_CONTEXT;
    ULONG64 SIZE_WDF_DEVICE_PNP_CAPABILITIES;
    ULONG64 SIZE_WDF_DEVICE_PNP_NOTIFICATION_DATA;
    ULONG64 SIZE_WDF_DEVICE_POWER_CAPABILITIES;
    ULONG64 SIZE_WDF_DEVICE_POWER_NOTIFICATION_DATA;
    ULONG64 SIZE_WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS;
    ULONG64 SIZE_WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA;
    ULONG64 SIZE_WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS;
    ULONG64 SIZE_WDF_DEVICE_PROPERTY_DATA;
    ULONG64 SIZE_WDF_DEVICE_STATE;
    ULONG64 SIZE_WDF_DMA_ENABLER_CONFIG;
    ULONG64 SIZE_WDF_DMA_SYSTEM_PROFILE_CONFIG;
    ULONG64 SIZE_WDF_DPC_CONFIG;
    ULONG64 SIZE_WDF_DRIVER_CONFIG;
    ULONG64 SIZE_WDF_DRIVER_GLOBALS;
    ULONG64 SIZE_WDF_DRIVER_VERSION_AVAILABLE_PARAMS;
    ULONG64 SIZE_WDF_FDO_EVENT_CALLBACKS;
    ULONG64 SIZE_WDF_FILEOBJECT_CONFIG;
    ULONG64 SIZE_WDF_INTERRUPT_CONFIG;
    ULONG64 SIZE_WDF_INTERRUPT_EXTENDED_POLICY;
    ULONG64 SIZE_WDF_INTERRUPT_INFO;
    ULONG64 SIZE_WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS;
    ULONG64 SIZE_WDF_IO_QUEUE_CONFIG;
    ULONG64 SIZE_WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY;
    ULONG64 SIZE_WDF_IO_TARGET_OPEN_PARAMS;
    ULONG64 SIZE_WDF_IO_TYPE_CONFIG;
    ULONG64 SIZE_WDF_MEMORY_DESCRIPTOR;
    ULONG64 SIZE_WDF_OBJECT_ATTRIBUTES;
    ULONG64 SIZE_WDF_OBJECT_CONTEXT_TYPE_INFO;
    ULONG64 SIZE_WDF_PDO_EVENT_CALLBACKS;
    ULONG64 SIZE_WDF_PNPPOWER_EVENT_CALLBACKS;
    ULONG64 SIZE_WDF_POWER_FRAMEWORK_SETTINGS;
    ULONG64 SIZE_WDF_POWER_POLICY_EVENT_CALLBACKS;
    ULONG64 SIZE_WDF_POWER_ROUTINE_TIMED_OUT_DATA;
    ULONG64 SIZE_WDF_QUERY_INTERFACE_CONFIG;
    ULONG64 SIZE_WDF_QUEUE_FATAL_ERROR_DATA;
    ULONG64 SIZE_WDF_REMOVE_LOCK_OPTIONS;
    ULONG64 SIZE_WDF_REQUEST_COMPLETION_PARAMS;
    ULONG64 SIZE_WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA;
    ULONG64 SIZE_WDF_REQUEST_FORWARD_OPTIONS;
    ULONG64 SIZE_WDF_REQUEST_PARAMETERS;
    ULONG64 SIZE_WDF_REQUEST_REUSE_PARAMS;
    ULONG64 SIZE_WDF_REQUEST_SEND_OPTIONS;
    ULONG64 SIZE_WDF_TASK_SEND_OPTIONS;
    ULONG64 SIZE_WDF_TIMER_CONFIG;
    ULONG64 SIZE_WDF_TRIAGE_INFO;
    ULONG64 SIZE_WDF_USB_CONTINUOUS_READER_CONFIG;
    ULONG64 SIZE_WDF_USB_DEVICE_CREATE_CONFIG;
    ULONG64 SIZE_WDF_USB_DEVICE_INFORMATION;
    ULONG64 SIZE_WDF_USB_DEVICE_SELECT_CONFIG_PARAMS;
    ULONG64 SIZE_WDF_USB_INTERFACE_SELECT_SETTING_PARAMS;
    ULONG64 SIZE_WDF_USB_INTERFACE_SETTING_PAIR;
    ULONG64 SIZE_WDF_USB_PIPE_INFORMATION;
    ULONG64 SIZE_WDF_USB_REQUEST_COMPLETION_PARAMS;
    ULONG64 SIZE_WDF_WMI_INSTANCE_CONFIG;
    ULONG64 SIZE_WDF_WMI_PROVIDER_CONFIG;
    ULONG64 SIZE_WDF_WORKITEM_CONFIG;
    ULONG64 SIZE_WDFCONTEXT_TRIAGE_INFO;
    ULONG64 SIZE_WDFCONTEXTTYPE_TRIAGE_INFO;
    ULONG64 SIZE_WDFCX_FILEOBJECT_CONFIG;
    ULONG64 SIZE_WDFCX_PNPPOWER_EVENT_CALLBACKS;
    ULONG64 SIZE_WDFDEVICE_TRIAGE_INFO;
    ULONG64 SIZE_WDFFWDPROGRESS_TRIAGE_INFO;
    ULONG64 SIZE_WDFIRP_TRIAGE_INFO;
    ULONG64 SIZE_WDFIRPQUEUE_TRIAGE_INFO;
    ULONG64 SIZE_WDFMEMORY_OFFSET;
    ULONG64 SIZE_WDFOBJECT_TRIAGE_INFO;
    ULONG64 SIZE_WDFQUEUE_TRIAGE_INFO;
    ULONG64 SIZE_WDFREQUEST_TRIAGE_INFO;
};

typedef struct _WDFVERSION {
    ULONG Size;
    ULONG FuncCount;
    struct _WDFFUNCTIONS Functions;
    ULONG StructCount;
    struct _WDFSTRUCTURES Structures;
};

typedef struct _WDF_BIND_INFO {
    ULONG Size;
    PWCHAR Component;
    struct _WDF_VERSION Version;
    ULONG FuncCount;
    PVOID *FuncTable;
    struct _LIBRARY_MODULE *Module;
};

typedef struct _WDF_BIND_INFO2 {
    struct _WDF_BIND_INFO V1;
    PULONG MinimumVersionRequired;
    PUCHAR ClientVersionHigherThanFramework;
    PULONG FuncCountPtr;
    PULONG StructCountPtr;
    PULONG64 *StructTable;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_0 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_1 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_11 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_13 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_15 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_17 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_19 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_21 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_23 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_25 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_5 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_7 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_9 {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_0 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_1 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_11 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_13 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_15 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_17 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_19 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_21 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_23 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_25 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_5 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_7 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_9 {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_LIST_CONFIG {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_0 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_1 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_11 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_13 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_15 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_17 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_19 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_21 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_23 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_25 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_5 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_7 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_CONFIG_V1_9 {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_ITERATOR {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_0 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_1 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_11 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_13 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_15 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_17 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_19 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_21 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_23 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_25 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_5 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_7 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_LIST_ITERATOR_V1_9 {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_RETRIEVE_INFO {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_0 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_0 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_0 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_1 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_1 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_1 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_11 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_11 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_11 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_13 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_13 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_13 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_15 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_15 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_15 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_17 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_17 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_17 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_19 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_19 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_19 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_21 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_21 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_21 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_23 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_23 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_23 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_25 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_25 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_25 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_5 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_5 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_5 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_7 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_7 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_7 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CHILD_RETRIEVE_INFO_V1_9 {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_V1_9 *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_V1_9 *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CLASS_BIND_INFO {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO2 {
    struct _WDF_CLASS_BIND_INFO V1;
    PULONG MinimumVersionRequired;
    PUCHAR ClientVersionHigherThanFramework;
    PULONG FuncCountPtr;
    PULONG StructCountPtr;
    PULONG64 *StructTable;
};

typedef struct _WDF_CLASS_BIND_INFO2_V1_25 {
    struct _WDF_CLASS_BIND_INFO_V1_25 V1;
    PULONG MinimumVersionRequired;
    PUCHAR ClientVersionHigherThanFramework;
    PULONG FuncCountPtr;
    PULONG StructCountPtr;
    PULONG64 *StructTable;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_11 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_11 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_13 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_13 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_15 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_15 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_17 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_17 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_19 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_19 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_21 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_21 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_23 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_23 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_25 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_25 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO_V1_9 {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION_V1_9 Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_0 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_0 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_1 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_1 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_11 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_11 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_13 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_13 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_15 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_15 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_17 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_17 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_19 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_19 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_21 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_21 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_23 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_23 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_25 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_25 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_5 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_5 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_7 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_7 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_9 {
    struct _WDF_CLASS_EXTENSION_DESCRIPTOR_V1_9 *Next;
    ULONG Size;
    PLONG Bind;
    PVOID Unbind;
};

typedef struct _WDF_CLASS_LIBRARY_INFO {
    ULONG Size;
    struct _WDF_CLASS_VERSION Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_11 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_11 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_13 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_13 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_15 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_15 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_17 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_17 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_19 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_19 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_21 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_21 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_23 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_23 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_25 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_25 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_LIBRARY_INFO_V1_9 {
    ULONG Size;
    struct _WDF_CLASS_VERSION_V1_9 Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_VERSION {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_11 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_13 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_15 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_17 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_19 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_21 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_23 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_25 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_CLASS_VERSION_V1_9 {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_1 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_11 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_13 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_15 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_17 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_19 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_21 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_23 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_25 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_5 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_7 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG_V1_9 {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_COMPANION_EVENT_CALLBACKS_V1_23 {
};

typedef struct _WDF_COMPANION_EVENT_CALLBACKS_V1_25 {
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_11 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_13 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_15 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_17 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_19 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_21 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_23 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT_V1_25 {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_13 {
};

typedef struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_15 {
};

typedef struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_17 {
};

typedef struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_19 {
};

typedef struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_21 {
};

typedef struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_23 {
};

typedef struct _WDF_DEVICE_INTERFACE_PROPERTY_DATA_V1_25 {
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_0 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_1 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_11 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_13 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_15 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_17 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_19 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_21 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_23 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_25 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_5 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_7 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES_V1_9 {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_0 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_1 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_11 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_13 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_15 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_17 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_19 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_21 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_23 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_25 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_5 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_7 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA_V1_9 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_0 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_1 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_11 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_13 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_15 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_17 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_19 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_21 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_23 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_25 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_5 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_7 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES_V1_9 {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_0 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_1 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_11 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_13 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_15 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_17 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_19 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_21 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_23 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_25 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_5 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_7 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA_V1_9 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_0 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_1 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_11 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_13 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_15 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_17 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_19 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_21 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_23 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_25 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_5 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_7 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_V1_9 {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_0 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_1 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_11 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_13 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_15 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_17 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_19 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_21 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_23 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_25 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_5 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_7 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA_V1_9 {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_0 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_1 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_11 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_13 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_15 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_17 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_19 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_21 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_23 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_25 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_5 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_7 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_V1_9 {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA_V1_13 {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA_V1_15 {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA_V1_17 {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA_V1_19 {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA_V1_21 {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA_V1_23 {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA_V1_25 {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_STATE {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_0 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_1 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_11 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_13 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_15 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_17 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_19 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_21 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_23 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_25 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_5 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_7 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DEVICE_STATE_V1_9 {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DMA_ENABLER_CONFIG {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_0 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_1 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_11 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_13 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_15 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_17 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_19 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_21 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_23 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_25 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_5 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_7 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
};

typedef struct _WDF_DMA_ENABLER_CONFIG_V1_9 {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_11 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_13 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_15 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_17 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_19 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_21 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_23 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG_V1_25 {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DPC_CONFIG {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_0 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_1 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_11 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_13 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_15 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_17 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_19 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_21 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_23 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_25 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_5 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_7 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DPC_CONFIG_V1_9 {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DRIVER_CONFIG {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_0 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
};

typedef struct _WDF_DRIVER_CONFIG_V1_1 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
};

typedef struct _WDF_DRIVER_CONFIG_V1_11 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_13 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_15 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_17 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_19 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_21 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_23 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_25 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_5 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_7 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_CONFIG_V1_9 {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_GLOBALS {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_0 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_1 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_11 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_13 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_15 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_17 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_19 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_21 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_23 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_25 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_5 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_7 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_GLOBALS_V1_9 {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_0 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_1 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_11 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_13 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_15 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_17 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_19 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_21 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_23 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_25 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_5 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_7 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS_V1_9 {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_DSF_INTERFACE {
    struct _INTERFACE Interface;
    PVOID IoReportInterruptActive;
    PVOID IoReportInterruptInactive;
    PLONG IoConnectInterruptEx;
    PLONG IoDisconnectInterruptEx;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_0 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_1 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_11 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_13 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_15 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_17 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_19 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_21 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_23 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_25 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_5 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_7 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS_V1_9 {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FILEOBJECT_CONFIG {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_0 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_1 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_11 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_13 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_15 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_17 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_19 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_21 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_23 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_25 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_5 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_7 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_FILEOBJECT_CONFIG_V1_9 {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_IFR_HEADER {
    struct _GUID Guid;
    PUCHAR Base;
    ULONG Size;
    struct _WDF_IFR_OFFSET Offset;
    LONG Sequence;
    CHAR DriverName[32];
};

typedef struct _WDF_IFR_OFFSET {
     <unnamed-type-u>;
    union {
         <unnamed-type-s>;
        struct {
            USHORT Current;
            USHORT Previous;
        } s;
        LONG AsLONG;
    } u;
};

typedef struct _WDF_IFR_RECORD {
    USHORT Signature;
    USHORT Length;
    LONG Sequence;
    USHORT PrevOffset;
    USHORT MessageNumber;
    struct _GUID MessageGuid;
};

typedef struct _WDF_INTERFACE_HEADER {
    struct _GUID *InterfaceType;
    ULONG InterfaceSize;
};

typedef struct _WDF_INTERRUPT_CONFIG {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_0 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_1 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_11 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_13 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_15 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_17 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_19 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_21 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_23 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_25 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_5 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_7 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
};

typedef struct _WDF_INTERRUPT_CONFIG_V1_9 {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_11 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_13 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_15 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_17 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_19 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_21 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_23 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_25 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY_V1_9 {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_INFO {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_0 {
    ULONG Size;
    union _LARGE_INTEGER MessageAddress;
    ULONG64 TargetProcessorSet;
    ULONG MessageData;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
};

typedef struct _WDF_INTERRUPT_INFO_V1_1 {
    ULONG Size;
    union _LARGE_INTEGER MessageAddress;
    ULONG64 TargetProcessorSet;
    ULONG MessageData;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
};

typedef struct _WDF_INTERRUPT_INFO_V1_11 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_13 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_15 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_17 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_19 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_21 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_23 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_25 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_INTERRUPT_INFO_V1_5 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
};

typedef struct _WDF_INTERRUPT_INFO_V1_7 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
};

typedef struct _WDF_INTERRUPT_INFO_V1_9 {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS {
     <unnamed-type-Policy>;
    union {
         <unnamed-type-ExaminePolicy>;
        struct {
            enum _WDF_IO_FORWARD_PROGRESS_ACTION *EvtIoWdmIrpForForwardProgress;
        } ExaminePolicy;
    } Policy;
};

typedef struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_19 {
     <unnamed-type-Policy>;
    union {
         <unnamed-type-ExaminePolicy>;
        struct {
            enum _WDF_IO_FORWARD_PROGRESS_ACTION *EvtIoWdmIrpForForwardProgress;
        } ExaminePolicy;
    } Policy;
};

typedef struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_21 {
     <unnamed-type-Policy>;
    union {
         <unnamed-type-ExaminePolicy>;
        struct {
            enum _WDF_IO_FORWARD_PROGRESS_ACTION *EvtIoWdmIrpForForwardProgress;
        } ExaminePolicy;
    } Policy;
};

typedef struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_23 {
     <unnamed-type-Policy>;
    union {
         <unnamed-type-ExaminePolicy>;
        struct {
            enum _WDF_IO_FORWARD_PROGRESS_ACTION *EvtIoWdmIrpForForwardProgress;
        } ExaminePolicy;
    } Policy;
};

typedef struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_25 {
     <unnamed-type-Policy>;
    union {
         <unnamed-type-ExaminePolicy>;
        struct {
            enum _WDF_IO_FORWARD_PROGRESS_ACTION *EvtIoWdmIrpForForwardProgress;
        } ExaminePolicy;
    } Policy;
};

typedef struct _WDF_IO_QUEUE_CONFIG {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_0 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_1 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_11 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_13 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_15 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_17 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_19 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_21 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_23 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_25 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_5 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_7 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
};

typedef struct _WDF_IO_QUEUE_CONFIG_V1_9 {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_11 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_13 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_15 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_17 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_19 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_19 ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_21 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_21 ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_23 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_23 ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_25 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS_V1_25 ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_V1_9 {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_0 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_1 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_11 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_13 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_15 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_17 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_19 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_21 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_23 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_25 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_5 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_7 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS_V1_9 {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
};

typedef struct _WDF_IO_TYPE_CONFIG {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_IO_TYPE_CONFIG_V1_13 {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_IO_TYPE_CONFIG_V1_15 {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_IO_TYPE_CONFIG_V1_17 {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_IO_TYPE_CONFIG_V1_19 {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_IO_TYPE_CONFIG_V1_21 {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_IO_TYPE_CONFIG_V1_23 {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_IO_TYPE_CONFIG_V1_25 {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_LIBRARY_INFO {
    ULONG Size;
    PLONG LibraryCommission;
    PLONG LibraryDecommission;
    PLONG LibraryRegisterClient;
    PLONG LibraryUnregisterClient;
    struct _WDF_VERSION Version;
};

typedef struct _WDF_LOADER_INTERFACE {
    struct _WDF_INTERFACE_HEADER Header;
    PLONG RegisterLibrary;
    PLONG VersionBind;
    PLONG VersionUnbind;
    PLONG DiagnosticsValueByNameAsULONG;
};

typedef struct _WDF_LOADER_INTERFACE_CLASS_BIND {
    struct _WDF_INTERFACE_HEADER Header;
    PLONG VersionBindClass;
    PVOID VersionUnbindClass;
};

typedef struct _WDF_LOADER_INTERFACE_DIAGNOSTIC {
    struct _WDF_INTERFACE_HEADER Header;
    PLONG DiagnosticsValueByNameAsULONG;
};

typedef struct _WDF_MEMORY_DESCRIPTOR {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_0 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_0 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_1 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_1 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_11 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_11 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_13 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_13 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_15 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_15 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_17 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_17 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_19 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_19 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_21 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_21 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_23 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_23 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_25 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_25 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_5 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_5 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_7 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_7 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_MEMORY_DESCRIPTOR_V1_9 {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET_V1_9 *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_OBJECT_ATTRIBUTES {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_0 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_0 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_1 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_1 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_11 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_11 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_13 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_13 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_15 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_15 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_17 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_17 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_19 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_19 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_21 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_21 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_23 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_23 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_25 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_25 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_5 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_5 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_7 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_7 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_ATTRIBUTES_V1_9 {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_9 *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_0 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_1 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_1 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_11 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_11 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_13 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_13 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_15 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_15 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_17 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_17 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_19 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_19 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_21 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_21 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_23 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_23 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_25 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_25 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_5 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_5 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_7 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_7 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_9 {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO_V1_9 *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_0 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_1 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_11 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_13 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_15 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_17 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_19 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_21 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_23 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_25 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_5 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_7 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS_V1_9 {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_0 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_1 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_11 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_13 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_15 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_17 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_19 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_21 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_23 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_25 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_5 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_7 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS_V1_9 {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_11 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_13 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_15 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_17 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_19 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_21 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_23 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS_V1_25 {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_0 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_1 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_11 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_13 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_15 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_17 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_19 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_21 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_23 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_25 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_5 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_7 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS_V1_9 {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_0 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_1 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_11 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_13 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_15 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_17 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_19 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_21 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_23 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_25 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_5 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_7 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA_V1_9 {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_0 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_1 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_11 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_13 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_15 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_17 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_19 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_21 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_23 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_25 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_5 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_7 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG_V1_9 {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_0 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_1 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_11 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_13 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_15 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_17 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_19 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_21 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_23 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_25 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_5 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_7 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA_V1_9 {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_11 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_13 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_15 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_17 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_19 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_21 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_23 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS_V1_25 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_0 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_0 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_1 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_1 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_11 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_11 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_13 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_13 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_15 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_15 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_17 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_17 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_19 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_19 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_21 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_21 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_23 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_23 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_25 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_25 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_5 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_5 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_7 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_7 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS_V1_9 {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_9 *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_0 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_1 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_11 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_13 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_15 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_17 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_19 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_21 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_23 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_25 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_5 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_7 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA_V1_9 {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_11 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_13 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_15 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_17 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_19 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_21 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_23 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_25 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS_V1_9 {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_PARAMETERS {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_0 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_1 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_11 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_13 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_15 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_17 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_19 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_21 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_23 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_25 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_5 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_7 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_PARAMETERS_V1_9 {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_0 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_1 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_11 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_13 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_15 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_17 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_19 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_21 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_23 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_25 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_5 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_7 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS_V1_9 {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_0 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_1 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_11 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_13 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_15 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_17 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_19 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_21 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_23 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_25 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_5 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_7 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS_V1_9 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_TASK_QUEUE_CONFIG_V1_23 {
};

typedef struct _WDF_TASK_QUEUE_CONFIG_V1_25 {
};

typedef struct _WDF_TASK_SEND_OPTIONS {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_TASK_SEND_OPTIONS_V1_23 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_TASK_SEND_OPTIONS_V1_25 {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_TIMER_CONFIG {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_0 {
    ULONG Size;
    PVOID EvtTimerFunc;
    LONG Period;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_TIMER_CONFIG_V1_1 {
    ULONG Size;
    PVOID EvtTimerFunc;
    LONG Period;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_TIMER_CONFIG_V1_11 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
};

typedef struct _WDF_TIMER_CONFIG_V1_13 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_15 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_17 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_19 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_21 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_23 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_25 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_TIMER_CONFIG_V1_5 {
    ULONG Size;
    PVOID EvtTimerFunc;
    LONG Period;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_TIMER_CONFIG_V1_7 {
    ULONG Size;
    PVOID EvtTimerFunc;
    LONG Period;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_TIMER_CONFIG_V1_9 {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
};

typedef struct _WDF_TRIAGE_INFO {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_11 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_11 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_11 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_11 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_11 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_11 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_11 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_11 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_11 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_11 *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_13 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_13 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_13 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_13 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_13 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_13 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_13 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_13 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_13 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_13 *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_15 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_15 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_15 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_15 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_15 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_15 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_15 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_15 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_15 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_15 *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_17 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_17 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_17 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_17 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_17 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_17 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_17 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_17 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_17 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_17 *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_19 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_19 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_19 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_19 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_19 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_19 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_19 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_19 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_19 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_19 *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_21 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_21 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_21 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_21 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_21 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_21 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_21 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_21 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_21 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_21 *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_23 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_23 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_23 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_23 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_23 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_23 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_23 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_23 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_23 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_23 *WdfIrpTriageInfo;
};

typedef struct _WDF_TRIAGE_INFO_V1_25 {
    ULONG WdfMajorVersion;
    ULONG WdfMinorVersion;
    ULONG TriageInfoMajorVersion;
    ULONG TriageInfoMinorVersion;
    PVOID Reserved;
    struct _WDFOBJECT_TRIAGE_INFO_V1_25 *WdfObjectTriageInfo;
    struct _WDFCONTEXT_TRIAGE_INFO_V1_25 *WdfContextTriageInfo;
    struct _WDFCONTEXTTYPE_TRIAGE_INFO_V1_25 *WdfContextTypeTriageInfo;
    struct _WDFQUEUE_TRIAGE_INFO_V1_25 *WdfQueueTriageInfo;
    struct _WDFFWDPROGRESS_TRIAGE_INFO_V1_25 *WdfFwdProgressTriageInfo;
    struct _WDFIRPQUEUE_TRIAGE_INFO_V1_25 *WdfIrpQueueTriageInfo;
    struct _WDFREQUEST_TRIAGE_INFO_V1_25 *WdfRequestTriageInfo;
    struct _WDFDEVICE_TRIAGE_INFO_V1_25 *WdfDeviceTriageInfo;
    struct _WDFIRP_TRIAGE_INFO_V1_25 *WdfIrpTriageInfo;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_0 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_0 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_1 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_1 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_11 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_11 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_13 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_13 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_15 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_15 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_17 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_17 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_19 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_19 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_21 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_21 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_23 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_23 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_25 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_25 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_5 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_5 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_7 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_7 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_CONTINUOUS_READER_CONFIG_V1_9 {
    ULONG Size;
    ULONG64 TransferLength;
    ULONG64 HeaderLength;
    ULONG64 TrailerLength;
    UCHAR NumPendingReads;
    struct _WDF_OBJECT_ATTRIBUTES_V1_9 *BufferAttributes;
    PVOID EvtUsbTargetPipeReadComplete;
    PVOID EvtUsbTargetPipeReadCompleteContext;
    PUCHAR EvtUsbTargetPipeReadersFailed;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_11 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_13 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_15 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_17 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_19 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_21 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_23 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_CREATE_CONFIG_V1_25 {
    ULONG Size;
    ULONG USBDClientContractVersion;
};

typedef struct _WDF_USB_DEVICE_INFORMATION {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_0 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_1 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_11 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_13 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_15 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_17 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_19 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_21 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_23 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_25 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_5 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_7 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_INFORMATION_V1_9 {
    ULONG Size;
    struct _USBD_VERSION_INFORMATION UsbdVersionInformation;
    ULONG HcdPortCapabilities;
    ULONG Traits;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_0 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_0 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_1 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_1 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_11 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_11 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_13 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_13 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_15 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_15 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_17 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_17 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_19 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_19 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_21 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_21 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_23 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_23 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_25 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_25 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_5 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_5 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_7 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_7 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_V1_9 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectConfigType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_CONFIGURATION_DESCRIPTOR *ConfigurationDescriptor;
            struct _USB_INTERFACE_DESCRIPTOR **InterfaceDescriptors;
            ULONG NumInterfaceDescriptors;
        } Descriptor;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
         <unnamed-type-SingleInterface>;
        struct {
            UCHAR NumberConfiguredPipes;
            struct WDFUSBINTERFACE__ *ConfiguredUsbInterface;
        } SingleInterface;
         <unnamed-type-MultiInterface>;
        struct {
            UCHAR NumberInterfaces;
            struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_9 *Pairs;
            UCHAR NumberOfConfiguredInterfaces;
        } MultiInterface;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_0 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_1 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_11 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_13 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_15 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_17 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_19 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_21 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_23 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_25 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_5 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_7 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_V1_9 {
    ULONG Size;
    enum _WdfUsbTargetDeviceSelectSettingType Type;
     <unnamed-type-Types>;
    union {
         <unnamed-type-Descriptor>;
        struct {
            struct _USB_INTERFACE_DESCRIPTOR *InterfaceDescriptor;
        } Descriptor;
         <unnamed-type-Interface>;
        struct {
            UCHAR SettingIndex;
        } Interface;
         <unnamed-type-Urb>;
        struct {
            struct _URB *Urb;
        } Urb;
    } Types;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_0 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_1 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_11 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_13 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_15 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_17 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_19 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_21 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_23 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_25 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_5 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_7 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_INTERFACE_SETTING_PAIR_V1_9 {
    struct WDFUSBINTERFACE__ *UsbInterface;
    UCHAR SettingIndex;
};

typedef struct _WDF_USB_PIPE_INFORMATION {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_0 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_1 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_11 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_13 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_15 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_17 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_19 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_21 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_23 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_25 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_5 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_7 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_PIPE_INFORMATION_V1_9 {
    ULONG Size;
    ULONG MaximumPacketSize;
    UCHAR EndpointAddress;
    UCHAR Interval;
    UCHAR SettingIndex;
    enum _WDF_USB_PIPE_TYPE PipeType;
    ULONG MaximumTransferSize;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_0 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_1 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_11 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_13 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_15 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_17 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_19 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_21 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_23 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_25 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_5 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_7 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS_V1_9 {
    LONG UsbdStatus;
    enum _WDF_USB_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-DeviceString>;
        struct {
            struct WDFMEMORY__ *Buffer;
            USHORT LangID;
            UCHAR StringIndex;
            UCHAR RequiredSize;
        } DeviceString;
         <unnamed-type-DeviceControlTransfer>;
        struct {
            struct WDFMEMORY__ *Buffer;
            union _WDF_USB_CONTROL_SETUP_PACKET SetupPacket;
            ULONG Length;
        } DeviceControlTransfer;
         <unnamed-type-DeviceUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } DeviceUrb;
         <unnamed-type-PipeWrite>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeWrite;
         <unnamed-type-PipeRead>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } PipeRead;
         <unnamed-type-PipeUrb>;
        struct {
            struct WDFMEMORY__ *Buffer;
        } PipeUrb;
    } Parameters;
};

typedef struct _WDF_VERSION {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_0 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_0 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_1 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_1 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_11 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_11 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_13 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_13 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_15 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_15 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_17 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_17 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_19 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_19 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_21 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_21 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_23 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_23 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_25 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_25 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_5 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_5 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_7 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_7 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG_V1_9 {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG_V1_9 *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_0 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_1 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_11 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_13 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_15 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_17 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_19 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_21 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_23 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_25 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_5 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_7 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG_V1_9 {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WORKITEM_CONFIG {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_0 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_1 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_11 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_13 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_15 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_17 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_19 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_21 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_23 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_25 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_5 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_7 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_WORKITEM_CONFIG_V1_9 {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WHEA128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG SecondaryUncorrectableErrorMask;
    ULONG SecondaryUncorrectableErrorSev;
    ULONG SecondaryCapsAndControl;
};

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
};

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG RootErrorCommand;
};

typedef struct _WHEA_ARMV8_AARCH32_GPRS {
    ULONG R0;
    ULONG R1;
    ULONG R2;
    ULONG R3;
    ULONG R4;
    ULONG R5;
    ULONG R6;
    ULONG R7;
    ULONG R8;
    ULONG R9;
    ULONG R10;
    ULONG R11;
    ULONG R12;
    ULONG R13;
    ULONG R14;
    ULONG R15;
};

typedef struct _WHEA_ARMV8_AARCH64_EL3_CSR {
    ULONG64 ELR_EL3;
    ULONG64 ESR_EL3;
    ULONG64 FAR_EL3;
    ULONG64 MAIR_EL3;
    ULONG64 SCTLR_EL3;
    ULONG64 SP_EL3;
    ULONG64 SPSR_EL3;
    ULONG64 TCR_EL3;
    ULONG64 TPIDR_EL3;
    ULONG64 TTBR0_EL3;
};

typedef struct _WHEA_ARMV8_AARCH64_GPRS {
    ULONG64 X0;
    ULONG64 X1;
    ULONG64 X2;
    ULONG64 X3;
    ULONG64 X4;
    ULONG64 X5;
    ULONG64 X6;
    ULONG64 X7;
    ULONG64 X8;
    ULONG64 X9;
    ULONG64 X10;
    ULONG64 X11;
    ULONG64 X12;
    ULONG64 X13;
    ULONG64 X14;
    ULONG64 X15;
    ULONG64 X16;
    ULONG64 X17;
    ULONG64 X18;
    ULONG64 X19;
    ULONG64 X20;
    ULONG64 X21;
    ULONG64 X22;
    ULONG64 X23;
    ULONG64 X24;
    ULONG64 X25;
    ULONG64 X26;
    ULONG64 X27;
    ULONG64 X28;
    ULONG64 X29;
    ULONG64 X30;
    ULONG64 SP;
};

typedef struct _WHEA_ARM_AARCH32_EL1_CSR {
    ULONG DFAR;
    ULONG DFSR;
    ULONG IFAR;
    ULONG ISR;
    ULONG MAIR0;
    ULONG MAIR1;
    ULONG MIDR;
    ULONG MPIDR;
    ULONG NMRR;
    ULONG PRRR;
    ULONG SCTLR;
    ULONG SPSR;
    ULONG SPSR_abt;
    ULONG SPSR_fiq;
    ULONG SPSR_irq;
    ULONG SPSR_svc;
    ULONG SPSR_und;
    ULONG TPIDRPRW;
    ULONG TPIDRURO;
    ULONG TPIDRURW;
    ULONG TTBCR;
    ULONG TTBR0;
    ULONG TTBR1;
    ULONG DACR;
};

typedef struct _WHEA_ARM_AARCH32_EL2_CSR {
    ULONG ELR_hyp;
    ULONG HAMAIR0;
    ULONG HAMAIR1;
    ULONG HCR;
    ULONG HCR2;
    ULONG HDFAR;
    ULONG HIFAR;
    ULONG HPFAR;
    ULONG HSR;
    ULONG HTCR;
    ULONG HTPIDR;
    ULONG HTTBR;
    ULONG SPSR_hyp;
    ULONG VTCR;
    ULONG VTTBR;
    ULONG DACR32_EL2;
};

typedef struct _WHEA_ARM_AARCH32_SECURE_CSR {
    ULONG SCTLR;
    ULONG SPSR_mon;
};

typedef struct _WHEA_ARM_AARCH64_EL1_CSR {
    ULONG64 ELR_EL1;
    ULONG64 ESR_EL2;
    ULONG64 FAR_EL1;
    ULONG64 ISR_EL1;
    ULONG64 MAIR_EL1;
    ULONG64 MIDR_EL1;
    ULONG64 MPIDR_EL1;
    ULONG64 SCTLR_EL1;
    ULONG64 SP_EL0;
    ULONG64 SP_EL1;
    ULONG64 SPSR_EL1;
    ULONG64 TCR_EL1;
    ULONG64 TPIDR_EL0;
    ULONG64 TPIDR_EL1;
    ULONG64 TPIDRRO_EL0;
    ULONG64 TTBR0_EL1;
    ULONG64 TTBR1_EL1;
};

typedef struct _WHEA_ARM_AARCH64_EL2_CSR {
    ULONG64 ELR_EL2;
    ULONG64 ESR_EL2;
    ULONG64 FAR_EL2;
    ULONG64 HACR_EL2;
    ULONG64 HCR_EL2;
    ULONG64 HPFAR_EL2;
    ULONG64 MAIR_EL2;
    ULONG64 SCTLR_EL2;
    ULONG64 SP_EL2;
    ULONG64 SPSR_EL2;
    ULONG64 TCR_EL2;
    ULONG64 TPIDR_EL2;
    ULONG64 TTBR0_EL2;
    ULONG64 VTCR_EL2;
    ULONG64 VTTBR_EL2;
};

typedef struct _WHEA_ARM_BUS_ERROR {
    union _WHEA_ARM_BUS_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType : 2;
    UCHAR Operation : 4;
    UCHAR Level : 3;
    UCHAR ProcessorContextCorrupt : 1;
    UCHAR Corrected : 1;
    UCHAR PrecisePC : 1;
    UCHAR RestartablePC : 1;
    UCHAR ParticipationType : 2;
    UCHAR TimeOut : 1;
    UCHAR AddressSpace : 2;
    USHORT MemoryAccessAttributes : 9;
    UCHAR AccessMode : 1;
    ULONG Reserved : 20;
};

typedef struct _WHEA_ARM_CACHE_ERROR {
    union _WHEA_ARM_CACHE_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType : 2;
    UCHAR Operation : 4;
    UCHAR Level : 3;
    UCHAR ProcessorContextCorrupt : 1;
    UCHAR Corrected : 1;
    UCHAR PrecisePC : 1;
    UCHAR RestartablePC : 1;
    ULONG64 Reserved : 35;
};

typedef struct _WHEA_ARM_MISC_CSR {
    USHORT MRSEncoding;
    ULONG64 Value;
};

typedef struct _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER {
    USHORT Version;
    USHORT RegisterContextType;
    ULONG RegisterArraySize;
    UCHAR RegisterArray[1];
};

typedef struct _WHEA_ARM_PROCESSOR_ERROR_INFORMATION {
    UCHAR Version;
    UCHAR Length;
    union _WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS ValidationBit;
    UCHAR Type;
    USHORT MultipleError;
    UCHAR Flags;
    ULONG64 ErrorInformation;
    ULONG64 VirtualFaultAddress;
    ULONG64 PhysicalFaultAddress;
};

typedef struct _WHEA_ARM_PROCESSOR_ERROR_SECTION {
    union _WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS ValidBits;
    USHORT ErrorInformationStructures;
    USHORT ContextInformationStructures;
    ULONG SectionLength;
    UCHAR ErrorAffinityLevel;
    UCHAR Reserved[3];
    ULONG64 MPIDR_EL1;
    ULONG64 MIDR_EL1;
    ULONG RunningState;
    ULONG PSCIState;
    UCHAR Data[1];
};

typedef struct _WHEA_ARM_TLB_ERROR {
    union _WHEA_ARM_TLB_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType : 2;
    UCHAR Operation : 4;
    UCHAR Level : 3;
    UCHAR ProcessorContextCorrupt : 1;
    UCHAR Corrected : 1;
    UCHAR PrecisePC : 1;
    UCHAR RestartablePC : 1;
    ULONG64 Reserved : 36;
};

typedef struct _WHEA_ERROR_PACKET_V1 {
    ULONG Signature;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    ULONG Size;
    ULONG RawDataLength;
    ULONG64 Reserved1;
    ULONG64 Context;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    ULONG Reserved2;
    ULONG Version;
    ULONG64 Cpu;
     <unnamed-type-u>;
    union {
        struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION ProcessorError;
        struct _WHEA_MEMORY_ERROR_SECTION MemoryError;
        struct _WHEA_NMI_ERROR_SECTION NmiError;
        struct _WHEA_PCIEXPRESS_ERROR_SECTION PciExpressError;
        struct _WHEA_PCIXBUS_ERROR_SECTION PciXBusError;
        struct _WHEA_PCIXDEVICE_ERROR_SECTION PciXDeviceError;
    } u;
    enum _WHEA_RAW_DATA_FORMAT RawDataFormat;
    ULONG RawDataOffset;
    UCHAR RawData[1];
};

typedef struct _WHEA_ERROR_PACKET_V2 {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    struct _GUID NotifyType;
    ULONG64 Context;
    enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
    ULONG Reserved1;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG PshedDataOffset;
    ULONG PshedDataLength;
};

typedef struct _WHEA_ERROR_RECORD {
    struct _WHEA_ERROR_RECORD_HEADER Header;
    struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
};

typedef struct _WHEA_ERROR_RECORD_HEADER {
    ULONG Signature;
    union _WHEA_REVISION Revision;
    ULONG SignatureEnd;
    USHORT SectionCount;
    enum _WHEA_ERROR_SEVERITY Severity;
    union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
    ULONG Length;
    union _WHEA_TIMESTAMP Timestamp;
    struct _GUID PlatformId;
    struct _GUID PartitionId;
    struct _GUID CreatorId;
    struct _GUID NotifyType;
    ULONG64 RecordId;
    union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
    union _WHEA_PERSISTENCE_INFO PersistenceInfo;
    UCHAR Reserved[12];
};

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
    ULONG SectionOffset;
    ULONG SectionLength;
    union _WHEA_REVISION Revision;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
    UCHAR Reserved;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
    struct _GUID SectionType;
    struct _GUID FRUId;
    enum _WHEA_ERROR_SEVERITY SectionSeverity;
    CHAR FRUText[20];
};

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR {
    ULONG Length;
    ULONG Version;
    enum _WHEA_ERROR_SOURCE_TYPE Type;
    enum _WHEA_ERROR_SOURCE_STATE State;
    ULONG MaxRawDataLength;
    ULONG NumRecordsToPreallocate;
    ULONG MaxSectionsPerRecord;
    ULONG ErrorSourceId;
    ULONG PlatformErrorSourceId;
    ULONG Flags;
     <unnamed-type-Info>;
    union {
        struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
        struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
        struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
        struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
        struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
        struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
        struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
        struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
        struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;
    } Info;
};

typedef struct _WHEA_EVENT_LOG_ENTRY {
    struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
};

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
    ULONG OwnerTag;
    enum _WHEA_EVENT_LOG_ENTRY_ID Id;
    union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
    ULONG PayloadLength;
};

typedef struct _WHEA_FIRMWARE_ERROR_RECORD_REFERENCE {
    UCHAR Type;
    UCHAR Reserved[7];
    ULONG64 FirmwareRecordId;
};

typedef struct _WHEA_GENERIC_ERROR {
    union _WHEA_GENERIC_ERROR_BLOCKSTATUS BlockStatus;
    ULONG RawDataOffset;
    ULONG RawDataLength;
    ULONG DataLength;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    UCHAR Data[1];
};

typedef struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V1 {
    struct _GUID SectionType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    union _WHEA_REVISION Revision;
    UCHAR ValidBits;
    UCHAR Flags;
    ULONG ErrorDataLength;
    struct _GUID FRUId;
    UCHAR FRUText[20];
    UCHAR Data[1];
};

typedef struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V2 {
    struct _GUID SectionType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    union _WHEA_REVISION Revision;
    UCHAR ValidBits;
    UCHAR Flags;
    ULONG ErrorDataLength;
    struct _GUID FRUId;
    UCHAR FRUText[20];
    union _WHEA_TIMESTAMP Timestamp;
    UCHAR Data[1];
};

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR {
    USHORT Type;
    UCHAR Reserved;
    UCHAR Enabled;
    ULONG ErrStatusBlockLength;
    ULONG RelatedErrorSourceId;
    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    union _LARGE_INTEGER ErrStatusAddress;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
};

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
    USHORT Type;
    UCHAR Reserved;
    UCHAR Enabled;
    ULONG ErrStatusBlockLength;
    ULONG RelatedErrorSourceId;
    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    union _LARGE_INTEGER ErrStatusAddress;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
    UCHAR ReadAckAddressSpaceID;
    UCHAR ReadAckAddressBitWidth;
    UCHAR ReadAckAddressBitOffset;
    UCHAR ReadAckAddressAccessSize;
    union _LARGE_INTEGER ReadAckAddress;
    ULONG64 ReadAckPreserveMask;
    ULONG64 ReadAckWriteMask;
};

typedef struct _WHEA_IPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_CPE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_MCA_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_MEMORY_ERROR_SECTION {
    union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    ULONG64 PhysicalAddress;
    ULONG64 PhysicalAddressMask;
    USHORT Node;
    USHORT Card;
    USHORT Module;
    USHORT Bank;
    USHORT Device;
    USHORT Row;
    USHORT Column;
    USHORT BitPosition;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 TargetId;
    UCHAR ErrorType;
    UCHAR Extended;
    USHORT RankNumber;
    USHORT CardHandle;
    USHORT ModuleHandle;
};

typedef struct _WHEA_NMI_ERROR_SECTION {
    UCHAR Data[8];
    union _WHEA_NMI_ERROR_SECTION_FLAGS Flags;
};

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR {
    UCHAR Type;
    UCHAR Length;
    union _WHEA_NOTIFICATION_FLAGS Flags;
     <unnamed-type-u>;
    union {
         <unnamed-type-Polled>;
        struct {
            ULONG PollInterval;
        } Polled;
         <unnamed-type-Interrupt>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Interrupt;
         <unnamed-type-LocalInterrupt>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } LocalInterrupt;
         <unnamed-type-Sci>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sci;
         <unnamed-type-Nmi>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Nmi;
         <unnamed-type-Sea>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sea;
         <unnamed-type-Sei>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sei;
         <unnamed-type-Gsiv>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Gsiv;
    } u;
};

typedef struct _WHEA_PCIEXPRESS_DEVICE_ID {
    USHORT VendorID;
    USHORT DeviceID;
    ULONG ClassCode : 24;
    ULONG FunctionNumber : 8;
    ULONG DeviceNumber : 8;
    ULONG Segment : 16;
    ULONG PrimaryBusNumber : 8;
    ULONG SecondaryBusNumber : 8;
    ULONG Reserved1 : 3;
    ULONG SlotNumber : 13;
    ULONG Reserved2 : 8;
};

typedef struct _WHEA_PCIEXPRESS_ERROR_SECTION {
    union _WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS ValidBits;
    enum _WHEA_PCIEXPRESS_DEVICE_TYPE PortType;
    union _WHEA_PCIEXPRESS_VERSION Version;
    union _WHEA_PCIEXPRESS_COMMAND_STATUS CommandStatus;
    ULONG Reserved;
    struct _WHEA_PCIEXPRESS_DEVICE_ID DeviceId;
    ULONG64 DeviceSerialNumber;
    union _WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS BridgeControlStatus;
    UCHAR ExpressCapability[60];
    UCHAR AerInfo[96];
};

typedef struct _WHEA_PCIXBUS_ERROR_SECTION {
    union _WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    USHORT ErrorType;
    union _WHEA_PCIXBUS_ID BusId;
    ULONG Reserved;
    ULONG64 BusAddress;
    ULONG64 BusData;
    union _WHEA_PCIXBUS_COMMAND BusCommand;
    ULONG64 RequesterId;
    ULONG64 CompleterId;
    ULONG64 TargetId;
};

typedef struct _WHEA_PCIXDEVICE_ERROR_SECTION {
    union _WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    struct _WHEA_PCIXDEVICE_ID IdInfo;
    ULONG MemoryNumber;
    ULONG IoNumber;
    struct WHEA_PCIXDEVICE_REGISTER_PAIR RegisterDataPairs[1];
};

typedef struct _WHEA_PCIXDEVICE_ID {
    USHORT VendorId;
    USHORT DeviceId;
    ULONG ClassCode : 24;
    ULONG FunctionNumber : 8;
    ULONG DeviceNumber : 8;
    ULONG BusNumber : 8;
    ULONG SegmentNumber : 8;
    ULONG Reserved1 : 8;
    ULONG Reserved2;
};

typedef struct _WHEA_PCI_SLOT_NUMBER {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG DeviceNumber : 5;
            ULONG FunctionNumber : 3;
            ULONG Reserved : 24;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION {
    union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;
    UCHAR ProcessorType;
    UCHAR InstructionSet;
    UCHAR ErrorType;
    UCHAR Operation;
    UCHAR Flags;
    UCHAR Level;
    USHORT Reserved;
    ULONG64 CPUVersion;
    UCHAR CPUBrandString[128];
    ULONG64 ProcessorId;
    ULONG64 TargetAddress;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 InstructionPointer;
};

typedef struct _WHEA_PSHED_PLUGIN_CALLBACKS {
    PLONG GetAllErrorSources;
    PVOID Reserved;
    PLONG GetErrorSourceInfo;
    PLONG SetErrorSourceInfo;
    PLONG EnableErrorSource;
    PLONG DisableErrorSource;
    PLONG WriteErrorRecord;
    PLONG ReadErrorRecord;
    PLONG ClearErrorRecord;
    PLONG RetrieveErrorInfo;
    PLONG FinalizeErrorRecord;
    PLONG ClearErrorStatus;
    PLONG AttemptRecovery;
    PLONG GetInjectionCapabilities;
    PLONG InjectError;
};

typedef struct _WHEA_PSHED_PLUGIN_REGISTRATION_PACKET {
    ULONG Length;
    ULONG Version;
    PVOID Context;
    ULONG FunctionalAreaMask;
    ULONG Reserved;
    struct _WHEA_PSHED_PLUGIN_CALLBACKS Callbacks;
};

typedef struct _WHEA_RECOVERY_CONTEXT {
    struct {
        ULONG64 Address;
        UCHAR Consumed;
        USHORT ErrorCode;
        UCHAR ErrorIpValid;
        UCHAR RestartIpValid;
    } MemoryError;
    ULONG64 PartitionId;
    ULONG VpIndex;
};

typedef struct _WHEA_X64_REGISTER_STATE {
    ULONG64 Rax;
    ULONG64 Rbx;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 Rbp;
    ULONG64 Rsp;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    USHORT Cs;
    USHORT Ds;
    USHORT Ss;
    USHORT Es;
    USHORT Fs;
    USHORT Gs;
    ULONG Reserved;
    ULONG64 Rflags;
    ULONG64 Eip;
    ULONG64 Cr0;
    ULONG64 Cr1;
    ULONG64 Cr2;
    ULONG64 Cr3;
    ULONG64 Cr4;
    ULONG64 Cr8;
    struct _WHEA128A Gdtr;
    struct _WHEA128A Idtr;
    USHORT Ldtr;
    USHORT Tr;
};

typedef struct _WHEA_X86_REGISTER_STATE {
    ULONG Eax;
    ULONG Ebx;
    ULONG Ecx;
    ULONG Edx;
    ULONG Esi;
    ULONG Edi;
    ULONG Ebp;
    ULONG Esp;
    USHORT Cs;
    USHORT Ds;
    USHORT Ss;
    USHORT Es;
    USHORT Fs;
    USHORT Gs;
    ULONG Eflags;
    ULONG Eip;
    ULONG Cr0;
    ULONG Cr1;
    ULONG Cr2;
    ULONG Cr3;
    ULONG Cr4;
    ULONG64 Gdtr;
    ULONG64 Idtr;
    USHORT Ldtr;
    USHORT Tr;
};

typedef struct _WHEA_XPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    ULONG Reserved;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_CONTEXT_INFO {
    USHORT RegisterContextType;
    USHORT RegisterDataSize;
    ULONG MSRAddress;
    ULONG64 MmRegisterAddress;
};

typedef struct _WHEA_XPF_MCA_SECTION {
    ULONG VersionNumber;
    enum _WHEA_CPU_VENDOR CpuVendor;
    union _LARGE_INTEGER Timestamp;
    ULONG ProcessorNumber;
    union _MCG_STATUS GlobalStatus;
    ULONG64 InstructionPointer;
    ULONG BankNumber;
    union _MCI_STATUS Status;
    ULONG64 Address;
    ULONG64 Misc;
    ULONG ExtendedRegisterCount;
    ULONG ApicId;
    ULONG64 ExtendedRegisters[24];
};

typedef struct _WHEA_XPF_MCE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    union _XPF_MCE_FLAGS Flags;
    ULONG64 MCG_Capability;
    ULONG64 MCG_GlobalControl;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR {
    UCHAR BankNumber;
    UCHAR ClearOnInitialization;
    UCHAR StatusDataFormat;
    union _XPF_MC_BANK_FLAGS Flags;
    ULONG ControlMsr;
    ULONG StatusMsr;
    ULONG AddressMsr;
    ULONG MiscMsr;
    ULONG64 ControlData;
};

typedef struct _WHEA_XPF_NMI_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
};

typedef struct _WHEA_XPF_PROCESSOR_ERROR_SECTION {
    union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits;
    ULONG64 LocalAPICId;
    UCHAR CpuId[48];
    UCHAR VariableInfo[1];
};

typedef struct _WHEA_XPF_PROCINFO {
    struct _GUID CheckInfoId;
    union _WHEA_XPF_PROCINFO_VALIDBITS ValidBits;
     <unnamed-type-CheckInfo>;
    union {
        union _WHEA_XPF_CACHE_CHECK CacheCheck;
        union _WHEA_XPF_TLB_CHECK TlbCheck;
        union _WHEA_XPF_BUS_CHECK BusCheck;
        union _WHEA_XPF_MS_CHECK MsCheck;
        ULONG64 AsULONGLONG;
    } CheckInfo;
    ULONG64 TargetId;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 InstructionPointer;
};

typedef struct _WMI_BUFFER_HEADER {
    ULONG BufferSize;
    ULONG SavedOffset;
    ULONG CurrentOffset;
    LONG ReferenceCount;
    union _LARGE_INTEGER TimeStamp;
    LONG64 SequenceNumber;
    ULONG64 ClockType : 3;
    ULONG64 Frequency : 61;
    struct _SINGLE_LIST_ENTRY SlistEntry;
    struct _WMI_BUFFER_HEADER *NextBuffer;
    struct _ETW_BUFFER_CONTEXT ClientContext;
    enum _ETW_BUFFER_STATE State;
    ULONG Offset;
    USHORT BufferFlag;
    USHORT BufferType;
    ULONG Padding1[4];
    struct _ETW_REF_CLOCK ReferenceTime;
    struct _LIST_ENTRY GlobalEntry;
    PVOID Pointer0;
    PVOID Pointer1;
    VOID _WMI_BUFFER_HEADER;
    VOID _WMI_BUFFER_HEADER;
    struct _WMI_BUFFER_HEADER *operator=;
    struct _WMI_BUFFER_HEADER *operator=;
};

typedef struct _WMI_CONTEXTSWAP {
    ULONG NewThreadId;
    ULONG OldThreadId;
    CHAR NewThreadPriority;
    CHAR OldThreadPriority;
    UCHAR PreviousCState;
    UCHAR OldThreadRank;
    CHAR NewThreadPriorityDecrement;
    CHAR SpareByte;
    UCHAR OldThreadWaitReason;
    UCHAR OldThreadWaitMode : 1;
    UCHAR OldThreadBamQosLevel : 3;
    UCHAR NewThreadBamQosLevel : 3;
    UCHAR Reserved : 1;
    UCHAR Flags;
    UCHAR OldThreadState;
    UCHAR OldThreadIdealProcessor;
    ULONG NewThreadWaitTime;
    LONG OldThreadRemainingQuantum;
};

typedef struct _WMI_DELAY_EXECUTION {
    ULONG ThreadId;
    ULONG64 Delta;
};

typedef struct _WMI_DISKIO_IO_REDIRECTED_INIT {
    PVOID Irp;
    PVOID FileKey;
};

typedef struct _WMI_DISKIO_NOTIFY_ROUTINES {
    PVOID CompletionNotifyRoutine;
    PVOID InitiationNotifyRoutine;
    PVOID OpticalCompletionRoutine;
    PVOID OpticalInitiationRoutine;
};

typedef struct _WMI_DISKIO_READWRITE_INIT {
    PVOID Irp;
    ULONG IssuingThreadId;
};

typedef struct _WMI_DPI_RECORD {
    ULONG MachineDPI;
    ULONG UserDPI;
};

typedef struct _WMI_EXTENDED_THREAD_INFORMATION {
    ULONG ProcessId;
    ULONG ThreadId;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID UserStackBase;
    PVOID UserStackLimit;
    PVOID StartAddr;
    ULONG64 Affinity;
    PVOID Win32StartAddr;
    PVOID TebBase;
    ULONG SubProcessTag;
    CHAR BasePriority;
    UCHAR PagePriority;
    UCHAR IoPriority;
    UCHAR Flags;
    WCHAR ThreadName[1];
};

typedef struct _WMI_EXTENDED_THREAD_INFORMATION64 {
    ULONG ProcessId;
    ULONG ThreadId;
    ULONG64 StackBase64;
    ULONG64 StackLimit64;
    ULONG64 UserStackBase64;
    ULONG64 UserStackLimit64;
    ULONG64 StartAddr64;
    ULONG64 Affinity;
    ULONG64 Win32StartAddr64;
    ULONG64 TebBase64;
    ULONG SubProcessTag;
    CHAR BasePriority;
    UCHAR PagePriority;
    UCHAR IoPriority;
    UCHAR Flags;
    WCHAR ThreadName[1];
};

typedef struct _WMI_FILEIO_NOTIFY_ROUTINES {
    PVOID FileNameRundownRoutine;
    PVOID FileNameNotifyRoutine;
    PVOID InitiationNotifyRoutine;
    PVOID CompletionNotifyRoutine;
};

typedef struct _WMI_FILE_IO {
    PVOID FileObject;
    WCHAR FileName[1];
};

typedef struct _WMI_FLTIO_NOTIFY_ROUTINES {
    PVOID TimeStampRoutine;
    PVOID FailureNotifyRoutine;
    PVOID InitiationNotifyRoutine;
    PVOID CompletionNotifyRoutine;
    PVOID FastCompletionNotifyRoutine;
    PVOID IoRedirectionNotifyRoutine;
};

typedef struct _WMI_IDE_CHANNEL_RECORD {
    ULONG TargetId;
    ULONG DeviceType;
    ULONG DeviceTimingMode;
    ULONG LocationInformationLen;
    WCHAR LocationInformation[1];
};

typedef struct _WMI_IMAGEID_INFORMATION {
    PVOID ImageBase;
    ULONG64 ImageSize;
    ULONG ProcessId;
    ULONG TimeDateStamp;
    WCHAR OriginalFileName[1];
};

typedef struct _WMI_IMAGEID_INFORMATION32 {
    ULONG ImageBase32;
    ULONG ImageSize32;
    ULONG ProcessId;
    ULONG TimeDateStamp;
    WCHAR OriginalFileName[1];
};

typedef struct _WMI_IMAGEID_INFORMATION64 {
    ULONG64 ImageBase64;
    ULONG64 ImageSize64;
    ULONG ProcessId;
    ULONG TimeDateStamp;
    WCHAR OriginalFileName[1];
};

typedef struct _WMI_IMAGELOAD_INFORMATION {
    PVOID ImageBase;
    ULONG64 ImageSize;
    ULONG ProcessId;
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    UCHAR SignatureLevel;
    UCHAR SignatureType;
    USHORT Reserved0;
    PVOID DefaultBase;
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG Reserved3;
    ULONG Reserved4;
    WCHAR FileName[1];
};

typedef struct _WMI_IMAGELOAD_INFORMATION32 {
    ULONG ImageBase32;
    ULONG ImageSize32;
    ULONG ProcessId;
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    UCHAR SignatureLevel;
    UCHAR SignatureType;
    USHORT Reserved0;
    ULONG DefaultBase32;
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG Reserved3;
    ULONG Reserved4;
    WCHAR FileName[1];
};

typedef struct _WMI_IMAGELOAD_INFORMATION64 {
    ULONG64 ImageBase64;
    ULONG64 ImageSize64;
    ULONG ProcessId;
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    UCHAR SignatureLevel;
    UCHAR SignatureType;
    USHORT Reserved0;
    ULONG64 DefaultBase64;
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG Reserved3;
    ULONG Reserved4;
    WCHAR FileName[1];
};

typedef struct _WMI_IRQ_RECORD {
    ULONG64 IRQAffinity;
    USHORT IRQGroup;
    USHORT Reserved;
    ULONG IRQNum;
    ULONG DeviceDescriptionLen;
    WCHAR DeviceDescription[1];
};

typedef struct _WMI_JOB_ASSIGN_PROCESS {
    struct _GUID ContainerId;
    ULONG JobId;
    ULONG UniqueProcessId;
    LONG Status;
};

typedef struct _WMI_JOB_INFORMATION {
    struct _GUID ContainerId;
    ULONG JobId;
    ULONG Flags;
    LONG Status;
};

typedef struct _WMI_JOB_REMOVE_PROCESS {
    struct _GUID ContainerId;
    ULONG JobId;
    ULONG UniqueProcessId;
    ULONG RemovalFlags;
    LONG ExitStatus;
};

typedef struct _WMI_JOB_SEND_NOTIFICATION_INFORMATION {
    struct _GUID ContainerId;
    ULONG JobId;
    ULONG NotificationId;
};

typedef struct _WMI_JOB_SET_QUERY_CPU_RATE {
    ULONG AllFlags;
    ULONG Value;
};

typedef struct _WMI_JOB_SET_QUERY_INFORMATION {
    struct _GUID ContainerId;
    ULONG JobId;
    ULONG JobObjectInformationClass;
};

typedef struct _WMI_JOB_SET_QUERY_NET_RATE {
    ULONG Flags;
    ULONG64 MaxBandwidth;
    UCHAR DscpTag;
};

typedef struct _WMI_LOGGER_INFORMATION {
    struct _WNODE_HEADER Wnode;
    ULONG BufferSize;
    ULONG MinimumBuffers;
    ULONG MaximumBuffers;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG FlushTimer;
    ULONG EnableFlags;
    LONG AgeLimit;
    LONG FlushThreshold;
    ULONG Wow : 1;
    ULONG QpcDeltaTracking : 1;
    ULONG64 V2Options;
    PVOID LogFileHandle;
    ULONG64 LogFileHandle64;
    ULONG NumberOfBuffers;
    ULONG InstanceCount;
    ULONG FreeBuffers;
    ULONG InstanceId;
    ULONG EventsLost;
    ULONG NumberOfProcessors;
    ULONG BuffersWritten;
    ULONG LogBuffersLost;
    ULONG Flags;
    ULONG RealTimeBuffersLost;
    PVOID LoggerThreadId;
    ULONG64 LoggerThreadId64;
    struct _UNICODE_STRING LogFileName;
    struct _STRING64 LogFileName64;
    struct _UNICODE_STRING LoggerName;
    struct _STRING64 LoggerName64;
    ULONG RealTimeConsumerCount;
    ULONG SequenceNumber;
    PVOID LoggerExtension;
    ULONG64 LoggerExtension64;
};

typedef struct _WMI_PAGE_FAULT {
    PVOID VirtualAddress;
    PVOID ProgramCounter;
};

typedef struct _WMI_PNP_RECORD_V3 {
    ULONG IDLength;
    ULONG DescriptionLength;
    ULONG FriendlyNameLength;
    WCHAR Strings[1];
};

typedef struct _WMI_PNP_RECORD_V4 {
    struct _GUID ClassGuid;
    ULONG UpperFilterCount;
    ULONG LowerFilterCount;
    WCHAR Strings[1];
};

typedef struct _WMI_PNP_RECORD_V5 {
    struct _GUID ClassGuid;
    ULONG UpperFilterCount;
    ULONG LowerFilterCount;
    ULONG DevStatus;
    ULONG DevProblem;
    WCHAR Strings[1];
};

typedef struct _WMI_POWER_RECORD {
    UCHAR SystemS1;
    UCHAR SystemS2;
    UCHAR SystemS3;
    UCHAR SystemS4;
    UCHAR SystemS5;
    UCHAR AoAc;
    CHAR Pad2;
    CHAR Pad3;
};

typedef struct _WMI_PROCESS_INFORMATION {
    ULONG64 UniqueProcessKey;
    ULONG ProcessId;
    ULONG ParentId;
    ULONG SessionId;
    LONG ExitStatus;
    ULONG64 DirectoryTableBase;
    ULONG Flags;
    ULONG Sid;
};

typedef struct _WMI_PROCESS_INFORMATION64 {
    ULONG64 UniqueProcessKey64;
    ULONG ProcessId;
    ULONG ParentId;
    ULONG SessionId;
    LONG ExitStatus;
    ULONG64 DirectoryTableBase;
    ULONG Flags;
    ULONG Sid;
};

typedef struct _WMI_PUSHLOCK {
    PVOID PushLock;
    ULONG ThreadId;
    UCHAR Action;
};

typedef struct _WMI_QUEUE {
    PVOID Queue;
    ULONG ThreadId;
    UCHAR Action;
};

typedef struct _WMI_REGISTRY {
    LONG64 InitialTime;
    ULONG Status;
    ULONG Index;
    ULONG InfoClass;
    PVOID Kcb;
    WCHAR Name[1];
};

typedef struct _WMI_RESOURCE {
    ULONG64 AcquireTime;
    ULONG64 HoldTime;
    ULONG64 WaitTime;
    ULONG MaxRecursionDepth;
    ULONG ThreadId;
    PVOID Resource;
    ULONG Action;
    ULONG ContentionDelta;
};

typedef struct _WMI_SPINLOCK {
    PVOID SpinLockAddress;
    PVOID CallerAddress;
    ULONG64 AcquireTime;
    ULONG64 ReleaseTime;
    ULONG WaitTimeInCycles;
    ULONG SpinCount;
    ULONG ThreadId;
    ULONG InterruptCount;
    UCHAR Irql;
    UCHAR AcquireDepth;
    UCHAR AcquireMode : 6;
    UCHAR ExecuteDpc : 1;
    UCHAR ExecuteIsr : 1;
    UCHAR Flags;
    UCHAR Reserved[5];
};

typedef struct _WMI_SPLITIO_NOTIFY_ROUTINES {
    PVOID InitiationNotifyRoutine;
};

typedef struct _WMI_TCPIP {
    ULONG Context;
    ULONG Size;
    ULONG DestAddr;
    ULONG SrcAddr;
    USHORT DestPort;
    USHORT SrcPort;
};

typedef struct _WMI_THREAD_INFORMATION {
    ULONG ProcessId;
    ULONG ThreadId;
};

typedef struct _WMI_TRACE_MESSAGE_PACKET {
    USHORT MessageNumber;
    USHORT OptionFlags;
};

typedef struct _WMI_TRACE_PACKET {
    USHORT Size;
    USHORT HookId;
    UCHAR Type;
    UCHAR Group;
};

typedef struct _WMI_TRACE_ROUTINE_NOTIFICATION {
    ULONG Version;
    PVOID RoutineGroup;
};

typedef struct _WMI_TRACE_RUNDOWN_NOTIFICATION {
    ULONG Version;
    ULONG LoggerId;
    struct _EJOB *Silo;
    ULONG Flags;
};

typedef struct _WMI_TXR {
    LONG64 InitialTime;
    struct _GUID TxRGUID;
    ULONG Status;
    ULONG UowCount;
    WCHAR Hive[1];
};

typedef struct _WMI_UDP {
    ULONG PID;
    USHORT Size;
    ULONG DestAddr;
    ULONG SrcAddr;
    USHORT DestPort;
    USHORT SrcPort;
};

typedef struct _WMI_WAIT_MULTIPLE {
    ULONG ThreadId;
    UCHAR WaitType;
    UCHAR ObjectCount;
    struct _WMI_WAIT_OBJECT_RECORD ObjectRecord[64];
};

typedef struct _WMI_WAIT_OBJECT_RECORD {
    PVOID Object;
    UCHAR ObjectType;
};

typedef struct _WMI_WAIT_SINGLE {
    ULONG ThreadId;
    PVOID Object;
    UCHAR ObjectType;
};

typedef struct _WMI_WDF_NOTIFY_ROUTINES {
    ULONG Size;
    PVOID DpcNotifyRoutine;
    PVOID InterruptNotifyRoutine;
    PVOID WorkItemNotifyRoutine;
};

typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
};

typedef struct _WNF_TYPE_ID {
    struct _GUID TypeId;
};

typedef struct _WNODE_HEADER {
    ULONG BufferSize;
    ULONG ProviderId;
    ULONG64 HistoricalContext;
    ULONG Version;
    ULONG Linkage;
    ULONG CountLost;
    PVOID KernelHandle;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID Guid;
    ULONG ClientContext;
    ULONG Flags;
};

typedef struct _WORK_QUEUE_ITEM {
    struct _LIST_ENTRY List;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _WPP_REGISTRATION_BLOCK {
    PLONG Callback;
    struct _GUID *ControlGuid;
    struct _WPP_REGISTRATION_BLOCK *Next;
    ULONG64 Logger;
    PWCHAR FriendlyName;
    PWCHAR BitNames;
    struct _UNICODE_STRING *RegistryPath;
    UCHAR FlagsLen;
    UCHAR RegBlockLen;
};

typedef struct _WPP_TRACE_CONTROL_BLOCK {
    PLONG Callback;
    struct _GUID *ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK *Next;
    ULONG64 RegistrationHandle;
    ULONG64 Logger;
    PWCHAR FriendlyName;
    UCHAR FlagsLen;
    UCHAR Level;
    USHORT Reserved;
    ULONG Flags[1];
};

typedef struct _WUDFMESSAGE_ADD_DEVICE {
    struct _WUDFMESSAGE_HEADER Header;
    ULONG AttachDeviceNameOffset;
    UCHAR InternalReferenceStringValid[2];
    ULONG InternalReferenceStringOffset[2];
    ULONG PdoNameOffset;
    PVOID DeviceObjectPointer;
    LONG Validate;
    struct WUDF_DEVNODE_CONTEXT__ *DevnodeContext;
};

typedef struct _WUDFMESSAGE_CREATE {
    struct _WUDFMESSAGE_HEADER Header;
    struct _WUDFMESSAGE_IO_HEADER IoHeader;
    struct WUDF_DEVNODE_CONTEXT__ *DevnodeContext;
    ULONG64 FileNameByteLength;
    ULONG Options;
    USHORT FileAttributes;
    USHORT ShareAccess;
    ULONG DesiredAccess;
    struct WUDF_CREATE_CONTEXT__ *RelatedCreateContext;
    ULONG InitiatorProcessId;
    struct RD_FILE_OBJECT_CONTEXT__ *RdFileObjectContext;
    LONG Validate;
};

typedef struct _WUDFMESSAGE_HEADER {
    enum _WUDFMESSAGE Message;
};

typedef struct _WUDFMESSAGE_IO_HEADER {
    struct _WUDFMESSAGE_HEADER Header;
    PVOID Irp;
    ULONG64 RequestId;
    ULONG ProcessId;
    UCHAR Is32bitProcess;
    CHAR RequestorMode;
    UCHAR DirectMappedTransfer;
    UCHAR IsActivityIdSet;
    struct _GUID ActivityId;
};

typedef struct _WUDFMESSAGE_IO_REPLY {
    struct _WUDFMESSAGE_REPLY_HEADER Header;
    ULONG64 Information;
    struct _WUDFMESSAGE_IO_REPLY *FromHeader;
};

typedef struct _WUDFMESSAGE_REMOTE_INTERFACE_ARRIVAL {
    struct _WUDFMESSAGE_HEADER Header;
    struct _GUID InterfaceGuid;
    struct WUDF_DEVNODE_CONTEXT__ *DevnodeContext;
    struct WUDF_DEVICE_CONTEXT__ *DeviceContext;
    LONG Validate;
};

typedef struct _WUDFMESSAGE_REPLY_HEADER {
    LONG NtStatus;
};

typedef struct _WUDFMESSAGE_TARGET_DEVICE_NOTIFICATION {
    struct _WUDFMESSAGE_HEADER Header;
    struct _GUID Event;
    struct WUDF_DEVNODE_CONTEXT__ *DevnodeContext;
    ULONG64 TargetContext;
    ULONG CustomBufferSize;
    ULONG NameBufferOffset;
    LONG Validate;
};

typedef struct _WUDFMESSAGE_TRANSPORT_QUERY_ID {
    struct _WUDFMESSAGE_HEADER Header;
    struct WUDF_DEVNODE_CONTEXT__ *DevnodeContext;
    ULONG Id;
    ULONG BufferSize;
    LONG Validate;
};

typedef struct _XSAVE_AREA {
    struct _XSAVE_FORMAT LegacyState;
    struct _XSAVE_AREA_HEADER Header;
};

typedef struct _XSAVE_AREA_HEADER {
    ULONG64 Mask;
    ULONG64 CompactionMask;
    ULONG64 Reserved2[6];
};

typedef struct _XSAVE_CET_U_FORMAT {
    ULONG64 Ia32CetUMsr;
    ULONG64 Ia32Pl3SspMsr;
};

typedef struct _XSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    UCHAR TagWord;
    UCHAR Reserved1;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    USHORT ErrorSelector;
    USHORT Reserved2;
    ULONG DataOffset;
    USHORT DataSelector;
    USHORT Reserved3;
    ULONG MxCsr;
    ULONG MxCsr_Mask;
    struct _M128A FloatRegisters[8];
    struct _M128A XmmRegisters[16];
    UCHAR Reserved4[96];
};

typedef struct _XSTATE_CONFIGURATION {
    ULONG64 EnabledFeatures;
    ULONG64 EnabledVolatileFeatures;
    ULONG Size;
    ULONG ControlFlags;
    ULONG OptimizedSave : 1;
    ULONG CompactionEnabled : 1;
    struct _XSTATE_FEATURE Features[64];
    ULONG64 EnabledSupervisorFeatures;
    ULONG64 AlignedFeatures;
    ULONG AllFeatureSize;
    ULONG AllFeatures[64];
    ULONG64 EnabledUserVisibleSupervisorFeatures;
};

typedef struct _XSTATE_CONTEXT {
    ULONG64 Mask;
    ULONG Length;
    ULONG Reserved1;
    struct _XSAVE_AREA *Area;
    PVOID Buffer;
};

typedef struct _XSTATE_FEATURE {
    ULONG Offset;
    ULONG Size;
};

typedef struct _XSTATE_SAVE {
    struct _XSTATE_SAVE *Prev;
    struct _KTHREAD *Thread;
    UCHAR Level;
    struct _XSTATE_CONTEXT XStateContext;
};

typedef struct _ZONE_HEADER {
    struct _SINGLE_LIST_ENTRY FreeList;
    struct _SINGLE_LIST_ENTRY SegmentList;
    ULONG BlockSize;
    ULONG TotalSegmentSize;
};

typedef struct _ZONE_SEGMENT_HEADER {
    struct _SINGLE_LIST_ENTRY SegmentList;
    PVOID Reserved;
};

typedef struct __crt_fast_encoded_nullptr_t {
};

typedef struct __lc_time_data {
    PCHAR wday_abbr[7];
    PCHAR wday[7];
    PCHAR month_abbr[12];
    PCHAR month[12];
    PCHAR ampm[2];
    PCHAR ww_sdatefmt;
    PCHAR ww_ldatefmt;
    PCHAR ww_timefmt;
    ULONG ww_lcid;
    LONG ww_caltype;
    LONG refcount;
    PWCHAR _W_wday_abbr[7];
    PWCHAR _W_wday[7];
    PWCHAR _W_month_abbr[12];
    PWCHAR _W_month[12];
    PWCHAR _W_ampm[2];
    PWCHAR _W_ww_sdatefmt;
    PWCHAR _W_ww_ldatefmt;
    PWCHAR _W_ww_timefmt;
};

typedef struct __s_GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct __vc_attributes::aggregatableAttribute {
    LONG type_e;
    VOID aggregatableAttribute;
    VOID aggregatableAttribute;
    enum __vc_attributes::aggregatableAttribute::type_e type;
};

typedef struct __vc_attributes::appobjectAttribute {
    VOID appobjectAttribute;
};

typedef struct __vc_attributes::async_uuidAttribute {
    VOID async_uuidAttribute;
    PCHAR uuid;
};

typedef struct __vc_attributes::atl::aggregatesAttribute {
    VOID aggregatesAttribute;
    VOID aggregatesAttribute;
    PCHAR clsid;
};

typedef struct __vc_attributes::atl::com_interface_entryAttribute {
    VOID com_interface_entryAttribute;
    VOID com_interface_entryAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::db_accessorAttribute {
    VOID db_accessorAttribute;
    VOID db_accessorAttribute;
    LONG id;
    BOOLEAN auto_;
};

typedef struct __vc_attributes::atl::db_columnAttribute {
    VOID db_columnAttribute;
    VOID db_columnAttribute;
    VOID db_columnAttribute;
    PCHAR ordinal;
    PCHAR dbtype;
    PCHAR precision;
    PCHAR scale;
    PCHAR status;
    PCHAR length;
};

typedef struct __vc_attributes::atl::db_commandAttribute {
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    PCHAR command;
    PCHAR name;
    PCHAR source_name;
    PCHAR hresult;
    PCHAR bindings;
    PCHAR bulk_fetch;
};

typedef struct __vc_attributes::atl::db_paramAttribute {
    VOID db_paramAttribute;
    VOID db_paramAttribute;
    VOID db_paramAttribute;
    PCHAR ordinal;
    PCHAR paramtype;
    PCHAR dbtype;
    PCHAR precision;
    PCHAR scale;
    PCHAR status;
    PCHAR length;
};

typedef struct __vc_attributes::atl::db_sourceAttribute {
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    PCHAR source;
    PCHAR name;
    PCHAR hresult;
};

typedef struct __vc_attributes::atl::db_tableAttribute {
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    PCHAR table;
    PCHAR name;
    PCHAR source_name;
    PCHAR hresult;
    PCHAR bulk_fetch;
};

typedef struct __vc_attributes::atl::implements_categoryAttribute {
    VOID implements_categoryAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::perf_counterAttribute {
    VOID perf_counterAttribute;
    VOID perf_counterAttribute;
    PCHAR namestring;
    PCHAR helpstring;
    LONG name_res;
    LONG help_res;
    LONG countertype;
    LONG defscale;
    BOOLEAN default_counter;
    LONG detail;
    LONG max_counter_size;
    PCHAR countertype_string;
};

typedef struct __vc_attributes::atl::perf_objectAttribute {
    VOID perf_objectAttribute;
    VOID perf_objectAttribute;
    LONG name_res;
    LONG help_res;
    PCHAR namestring;
    PCHAR helpstring;
    LONG detail;
    BOOLEAN no_instances;
    PCHAR class_;
    LONG maxinstnamelen;
};

typedef struct __vc_attributes::atl::perfmonAttribute {
    VOID perfmonAttribute;
    VOID perfmonAttribute;
    VOID perfmonAttribute;
    PCHAR name;
    BOOLEAN register;
};

typedef struct __vc_attributes::atl::rdxAttribute {
    VOID rdxAttribute;
    VOID rdxAttribute;
    VOID rdxAttribute;
    PCHAR key;
    PCHAR valuename;
    PCHAR regtype;
};

typedef struct __vc_attributes::atl::registration_scriptAttribute {
    VOID registration_scriptAttribute;
    VOID registration_scriptAttribute;
    PCHAR script;
};

typedef struct __vc_attributes::atl::request_handlerAttribute {
    VOID request_handlerAttribute;
    VOID request_handlerAttribute;
    VOID request_handlerAttribute;
    PCHAR name;
    PCHAR sdl;
};

typedef struct __vc_attributes::atl::requires_categoryAttribute {
    VOID requires_categoryAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::soap_handlerAttribute {
    VOID soap_handlerAttribute;
    VOID soap_handlerAttribute;
    PCHAR name;
    PCHAR namespace;
    PCHAR protocol;
    PCHAR style;
    PCHAR use;
};

typedef struct __vc_attributes::atl::soap_headerAttribute {
    VOID soap_headerAttribute;
    VOID soap_headerAttribute;
    VOID soap_headerAttribute;
    PCHAR value;
    BOOLEAN required;
    BOOLEAN in;
    BOOLEAN out;
};

typedef struct __vc_attributes::atl::soap_methodAttribute {
    VOID soap_methodAttribute;
    VOID soap_methodAttribute;
    PCHAR name;
};

typedef struct __vc_attributes::atl::soap_namespaceAttribute {
    VOID soap_namespaceAttribute;
    VOID soap_namespaceAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::support_error_infoAttribute {
    VOID support_error_infoAttribute;
    PCHAR error_interface;
};

typedef struct __vc_attributes::atl::synchronizeAttribute {
    VOID synchronizeAttribute;
};

typedef struct __vc_attributes::atl::tag_nameAttribute {
    VOID tag_nameAttribute;
    VOID tag_nameAttribute;
    VOID tag_nameAttribute;
    PCHAR name;
    PCHAR parse_func;
};

typedef struct __vc_attributes::bindableAttribute {
    VOID bindableAttribute;
};

typedef struct __vc_attributes::call_asAttribute {
    VOID call_asAttribute;
    PVOID local_proc;
};

typedef struct __vc_attributes::caseAttribute {
    VOID caseAttribute;
    LONG value;
};

typedef struct __vc_attributes::coclassAttribute {
    VOID coclassAttribute;
};

typedef struct __vc_attributes::controlAttribute {
    VOID controlAttribute;
};

typedef struct __vc_attributes::cpp_quoteAttribute {
    VOID cpp_quoteAttribute;
    PCHAR string;
};

typedef struct __vc_attributes::customAttribute {
    VOID customAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::defaultAttribute {
    VOID defaultAttribute;
    VOID defaultAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::defaultbindAttribute {
    VOID defaultbindAttribute;
};

typedef struct __vc_attributes::defaultcollelemAttribute {
    VOID defaultcollelemAttribute;
};

typedef struct __vc_attributes::defaultvalueAttribute {
    VOID defaultvalueAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::defaultvtableAttribute {
    VOID defaultvtableAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::dispinterfaceAttribute {
    VOID dispinterfaceAttribute;
};

typedef struct __vc_attributes::displaybindAttribute {
    VOID displaybindAttribute;
};

typedef struct __vc_attributes::dualAttribute {
    VOID dualAttribute;
};

typedef struct __vc_attributes::emitidlAttribute {
    LONG restricted;
    LONG forced;
    LONG push;
    LONG pop;
    VOID emitidlAttribute;
    VOID emitidlAttribute;
    VOID emitidlAttribute;
    LONG value;
    BOOLEAN defaultimports;
};

typedef struct __vc_attributes::entryAttribute {
    VOID entryAttribute;
    PCHAR entry_id;
};

typedef struct __vc_attributes::event_receiverAttribute {
    LONG type_e;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    enum __vc_attributes::event_receiverAttribute::type_e type;
    BOOLEAN layout_dependent;
};

typedef struct __vc_attributes::event_sourceAttribute {
    LONG type_e;
    LONG optimize_e;
    VOID event_sourceAttribute;
    VOID event_sourceAttribute;
    enum __vc_attributes::event_sourceAttribute::type_e type;
    enum __vc_attributes::event_sourceAttribute::optimize_e optimize;
    BOOLEAN decorate;
};

typedef struct __vc_attributes::exportAttribute {
    VOID exportAttribute;
};

typedef struct __vc_attributes::first_isAttribute {
    VOID first_isAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::helpcontextAttribute {
    VOID helpcontextAttribute;
    PCHAR helpcontext_value;
};

typedef struct __vc_attributes::helper_attributes::as_stringAttribute {
    VOID as_stringAttribute;
};

typedef struct __vc_attributes::helper_attributes::attributeAttribute {
    LONG All;
    LONG Assembly;
    LONG Class;
    LONG Constructor;
    LONG Delegate;
    LONG Enum;
    LONG Event;
    LONG Field;
    LONG GenericParameter;
    LONG Interface;
    LONG Method;
    LONG Module;
    LONG Parameter;
    LONG Property;
    LONG ReturnValue;
    LONG Struct;
    VOID attributeAttribute;
    VOID attributeAttribute;
    LONG ValidOn;
    BOOLEAN AllowMultiple;
    BOOLEAN Inherited;
};

typedef struct __vc_attributes::helper_attributes::default_valueAttribute {
    VOID default_valueAttribute;
    PVOID value;
};

typedef struct __vc_attributes::helper_attributes::help_stringAttribute {
    VOID help_stringAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::helper_attributes::multi_valueAttribute {
    VOID multi_valueAttribute;
};

typedef struct __vc_attributes::helper_attributes::notify_atlprovAttribute {
    VOID notify_atlprovAttribute;
};

typedef struct __vc_attributes::helper_attributes::process_earlyAttribute {
    VOID process_earlyAttribute;
};

typedef struct __vc_attributes::helper_attributes::repeatableAttribute {
    VOID repeatableAttribute;
};

typedef struct __vc_attributes::helper_attributes::requires_valueAttribute {
    VOID requires_valueAttribute;
};

typedef struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute {
    LONG All;
    LONG Assembly;
    LONG Class;
    LONG Constructor;
    LONG Delegate;
    LONG Enum;
    LONG Event;
    LONG Field;
    LONG GenericParameter;
    LONG Interface;
    LONG Method;
    LONG Module;
    LONG Parameter;
    LONG Property;
    LONG ReturnValue;
    LONG Struct;
    LONG Typedef;
    VOID source_annotation_attributeAttribute;
    VOID source_annotation_attributeAttribute;
    LONG ValidOn;
    BOOLEAN AllowMultiple;
};

typedef struct __vc_attributes::helper_attributes::usageAttribute {
    LONG usage_e;
    VOID usageAttribute;
    ULONG value;
};

typedef struct __vc_attributes::helper_attributes::v1_alttypeAttribute {
    LONG type_e;
    VOID v1_alttypeAttribute;
    enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

typedef struct __vc_attributes::helper_attributes::v1_earlyAttribute {
    VOID v1_earlyAttribute;
};

typedef struct __vc_attributes::helper_attributes::v1_nameAttribute {
    VOID v1_nameAttribute;
    PCHAR name;
};

typedef struct __vc_attributes::helpfileAttribute {
    VOID helpfileAttribute;
    PCHAR filename;
};

typedef struct __vc_attributes::helpstringAttribute {
    VOID helpstringAttribute;
    PCHAR help_text_string;
};

typedef struct __vc_attributes::helpstringcontextAttribute {
    VOID helpstringcontextAttribute;
    LONG contextid;
};

typedef struct __vc_attributes::helpstringdllAttribute {
    VOID helpstringdllAttribute;
    PCHAR dllname;
};

typedef struct __vc_attributes::hiddenAttribute {
    VOID hiddenAttribute;
};

typedef struct __vc_attributes::hookAttribute {
    VOID hookAttribute;
    VOID hookAttribute;
    VOID hookAttribute;
    VOID hookAttribute;
    PCHAR event;
    PCHAR source;
    PCHAR handler;
    PCHAR receiver;
};

typedef struct __vc_attributes::idAttribute {
    VOID idAttribute;
    LONG id_num;
};

typedef struct __vc_attributes::idl_moduleAttribute {
    VOID idl_moduleAttribute;
    VOID idl_moduleAttribute;
    PCHAR name;
    PCHAR dllname;
    PCHAR version;
    PCHAR uuid;
    PCHAR helpstring;
    LONG helpstringcontext;
    LONG helpcontext;
    BOOLEAN hidden;
    BOOLEAN restricted;
};

typedef struct __vc_attributes::idl_quoteAttribute {
    VOID idl_quoteAttribute;
    VOID idl_quoteAttribute;
    PCHAR text;
};

typedef struct __vc_attributes::iid_isAttribute {
    VOID iid_isAttribute;
    PCHAR limited_expression;
};

typedef struct __vc_attributes::immediatebindAttribute {
    VOID immediatebindAttribute;
};

typedef struct __vc_attributes::implementsAttribute {
    VOID implementsAttribute;
    VOID implementsAttribute;
    PCHAR interfaces;
    PCHAR dispinterfaces;
};

typedef struct __vc_attributes::importAttribute {
    VOID importAttribute;
    PCHAR idl_file;
};

typedef struct __vc_attributes::importidlAttribute {
    VOID importidlAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::importlibAttribute {
    VOID importlibAttribute;
    PCHAR tlb_file;
};

typedef struct __vc_attributes::inAttribute {
    VOID inAttribute;
};

typedef struct __vc_attributes::includeAttribute {
    VOID includeAttribute;
    PCHAR include_file;
};

typedef struct __vc_attributes::includelibAttribute {
    VOID includelibAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::last_isAttribute {
    VOID last_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::lcidAttribute {
    VOID lcidAttribute;
};

typedef struct __vc_attributes::length_isAttribute {
    VOID length_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::library_blockAttribute {
    VOID library_blockAttribute;
};

typedef struct __vc_attributes::licensedAttribute {
    VOID licensedAttribute;
};

typedef struct __vc_attributes::localAttribute {
    VOID localAttribute;
};

typedef struct __vc_attributes::max_isAttribute {
    VOID max_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::moduleAttribute {
    LONG type_e;
    VOID moduleAttribute;
    VOID moduleAttribute;
    VOID moduleAttribute;
    enum __vc_attributes::moduleAttribute::type_e type;
    PCHAR name;
    PCHAR version;
    PCHAR uuid;
    LONG lcid;
    BOOLEAN control;
    PCHAR helpstring;
    LONG helpstringcontext;
    PCHAR helpstringdll;
    PCHAR helpfile;
    LONG helpcontext;
    BOOLEAN hidden;
    BOOLEAN restricted;
    PCHAR custom;
    PCHAR resource_name;
};

typedef struct __vc_attributes::ms_unionAttribute {
    VOID ms_unionAttribute;
};

typedef struct __vc_attributes::no_injected_textAttribute {
    VOID no_injected_textAttribute;
    VOID no_injected_textAttribute;
    BOOLEAN value;
};

typedef struct __vc_attributes::nonbrowsableAttribute {
    VOID nonbrowsableAttribute;
};

typedef struct __vc_attributes::noncreatableAttribute {
    VOID noncreatableAttribute;
};

typedef struct __vc_attributes::nonextensibleAttribute {
    VOID nonextensibleAttribute;
};

typedef struct __vc_attributes::objectAttribute {
    VOID objectAttribute;
};

typedef struct __vc_attributes::odlAttribute {
    VOID odlAttribute;
};

typedef struct __vc_attributes::oleautomationAttribute {
    VOID oleautomationAttribute;
};

typedef struct __vc_attributes::optionalAttribute {
    VOID optionalAttribute;
};

typedef struct __vc_attributes::outAttribute {
    VOID outAttribute;
};

typedef struct __vc_attributes::pointer_defaultAttribute {
    LONG type_e;
    VOID pointer_defaultAttribute;
    enum __vc_attributes::pointer_defaultAttribute::type_e type;
};

typedef struct __vc_attributes::pragmaAttribute {
    VOID pragmaAttribute;
    PCHAR token_sequence;
};

typedef struct __vc_attributes::progidAttribute {
    VOID progidAttribute;
    PCHAR name;
};

typedef struct __vc_attributes::propgetAttribute {
    VOID propgetAttribute;
};

typedef struct __vc_attributes::propputAttribute {
    VOID propputAttribute;
};

typedef struct __vc_attributes::propputrefAttribute {
    VOID propputrefAttribute;
};

typedef struct __vc_attributes::providerAttribute {
    VOID providerAttribute;
    VOID providerAttribute;
    PCHAR name;
    PCHAR uuid;
    LONG cookies;
};

typedef struct __vc_attributes::ptrAttribute {
    VOID ptrAttribute;
};

typedef struct __vc_attributes::publicAttribute {
    VOID publicAttribute;
};

typedef struct __vc_attributes::rangeAttribute {
    VOID rangeAttribute;
    LONG low_val;
    LONG high_val;
};

typedef struct __vc_attributes::readonlyAttribute {
    VOID readonlyAttribute;
};

typedef struct __vc_attributes::refAttribute {
    VOID refAttribute;
};

typedef struct __vc_attributes::requesteditAttribute {
    VOID requesteditAttribute;
};

typedef struct __vc_attributes::restrictedAttribute {
    VOID restrictedAttribute;
    VOID restrictedAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::retvalAttribute {
    VOID retvalAttribute;
};

typedef struct __vc_attributes::satypeAttribute {
    VOID satypeAttribute;
    VOID satypeAttribute;
    PCHAR type;
};

typedef struct __vc_attributes::size_isAttribute {
    VOID size_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::sourceAttribute {
    VOID sourceAttribute;
    VOID sourceAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::stringAttribute {
    VOID stringAttribute;
};

typedef struct __vc_attributes::switch_isAttribute {
    VOID switch_isAttribute;
    PCHAR limited_expression;
};

typedef struct __vc_attributes::switch_typeAttribute {
    VOID switch_typeAttribute;
    PCHAR switch_type_specifier;
};

typedef struct __vc_attributes::threadingAttribute {
    LONG threading_e;
    VOID threadingAttribute;
    VOID threadingAttribute;
    enum __vc_attributes::threadingAttribute::threading_e value;
};

typedef struct __vc_attributes::transmit_asAttribute {
    VOID transmit_asAttribute;
    PCHAR xmit_type;
};

typedef struct __vc_attributes::uidefaultAttribute {
    VOID uidefaultAttribute;
};

typedef struct __vc_attributes::unhookAttribute {
    VOID unhookAttribute;
    VOID unhookAttribute;
    VOID unhookAttribute;
    VOID unhookAttribute;
    PCHAR event;
    PCHAR source;
    PCHAR handler;
    PCHAR receiver;
};

typedef struct __vc_attributes::uniqueAttribute {
    VOID uniqueAttribute;
};

typedef struct __vc_attributes::usesgetlasterrorAttribute {
    VOID usesgetlasterrorAttribute;
};

typedef struct __vc_attributes::uuidAttribute {
    VOID uuidAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::v1_enumAttribute {
    VOID v1_enumAttribute;
};

typedef struct __vc_attributes::varargAttribute {
    VOID varargAttribute;
};

typedef struct __vc_attributes::versionAttribute {
    VOID versionAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::vi_progidAttribute {
    VOID vi_progidAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::wire_marshalAttribute {
    VOID wire_marshalAttribute;
    PCHAR wire_type;
};

typedef struct _count_string {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _iobuf {
    PCHAR _ptr;
    LONG _cnt;
    PCHAR _base;
    LONG _flag;
    LONG _file;
    LONG _charbuf;
    LONG _bufsiz;
    PCHAR _tmpfname;
};

typedef struct _ldiv_t {
    LONG quot;
    LONG rem;
};

typedef struct _s__CatchableType {
    ULONG properties;
    struct _TypeDescriptor *pType;
    struct _PMD thisDisplacement;
    LONG sizeOrOffset;
    PVOID copyFunction;
};

typedef struct _s__CatchableTypeArray {
    LONG nCatchableTypes;
    struct _s__CatchableType *arrayOfCatchableTypes[0];
};

typedef struct _s__RTTIBaseClassArray {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[0];
};

typedef struct _s__RTTIBaseClassDescriptor2 {
    struct _TypeDescriptor *pTypeDescriptor;
    ULONG numContainedBases;
    struct _PMD where;
    ULONG attributes;
    struct _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

typedef struct _s__RTTIClassHierarchyDescriptor {
    ULONG signature;
    ULONG attributes;
    ULONG numBaseClasses;
    struct _s__RTTIBaseClassArray *pBaseClassArray;
};

typedef struct _s__RTTICompleteObjectLocator2 {
    ULONG signature;
    ULONG offset;
    ULONG cdOffset;
    struct _TypeDescriptor *pTypeDescriptor;
    struct _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
    struct _s__RTTICompleteObjectLocator2 *pSelf;
};

typedef struct _s__ThrowInfo {
    ULONG attributes;
    PVOID pmfnUnwind;
    PLONG pForwardCompat;
    struct _s__CatchableTypeArray *pCatchableTypeArray;
};

typedef struct lconv {
    PCHAR decimal_point;
    PCHAR thousands_sep;
    PCHAR grouping;
    PCHAR int_curr_symbol;
    PCHAR currency_symbol;
    PCHAR mon_decimal_point;
    PCHAR mon_thousands_sep;
    PCHAR mon_grouping;
    PCHAR positive_sign;
    PCHAR negative_sign;
    CHAR int_frac_digits;
    CHAR frac_digits;
    CHAR p_cs_precedes;
    CHAR p_sep_by_space;
    CHAR n_cs_precedes;
    CHAR n_sep_by_space;
    CHAR p_sign_posn;
    CHAR n_sign_posn;
    PWCHAR _W_decimal_point;
    PWCHAR _W_thousands_sep;
    PWCHAR _W_int_curr_symbol;
    PWCHAR _W_currency_symbol;
    PWCHAR _W_mon_decimal_point;
    PWCHAR _W_mon_thousands_sep;
    PWCHAR _W_positive_sign;
    PWCHAR _W_negative_sign;
};

typedef struct localeinfo_struct {
    struct threadlocaleinfostruct *locinfo;
    struct threadmbcinfostruct *mbcinfo;
};

typedef struct tagARRAYDESC {
    struct tagTYPEDESC tdescElem;
    USHORT cDims;
    struct tagSAFEARRAYBOUND rgbounds[1];
};

typedef struct tagBLOB {
    ULONG cbSize;
    PUCHAR pBlobData;
};

typedef struct tagBSTRBLOB {
    ULONG cbSize;
    PUCHAR pData;
};

typedef struct tagCABOOL {
    ULONG cElems;
    PSHORT pElems;
};

typedef struct tagCABSTR {
    ULONG cElems;
    PWCHAR *pElems;
};

typedef struct tagCABSTRBLOB {
    ULONG cElems;
    struct tagBSTRBLOB *pElems;
};

typedef struct tagCAC {
    ULONG cElems;
    PCHAR pElems;
};

typedef struct tagCACLIPDATA {
    ULONG cElems;
    struct tagCLIPDATA *pElems;
};

typedef struct tagCACLSID {
    ULONG cElems;
    struct _GUID *pElems;
};

typedef struct tagCACY {
    ULONG cElems;
    union tagCY *pElems;
};

typedef struct tagCADATE {
    ULONG cElems;
    DOUBLE *pElems;
};

typedef struct tagCADBL {
    ULONG cElems;
    DOUBLE *pElems;
};

typedef struct tagCAFILETIME {
    ULONG cElems;
    struct _FILETIME *pElems;
};

typedef struct tagCAFLT {
    ULONG cElems;
    FLOAT *pElems;
};

typedef struct tagCAH {
    ULONG cElems;
    union _LARGE_INTEGER *pElems;
};

typedef struct tagCAI {
    ULONG cElems;
    PSHORT pElems;
};

typedef struct tagCAL {
    ULONG cElems;
    PLONG pElems;
};

typedef struct tagCALPSTR {
    ULONG cElems;
    PCHAR *pElems;
};

typedef struct tagCALPWSTR {
    ULONG cElems;
    PWCHAR *pElems;
};

typedef struct tagCAPROPVARIANT {
    ULONG cElems;
    struct tagPROPVARIANT *pElems;
};

typedef struct tagCASCODE {
    ULONG cElems;
    PLONG pElems;
};

typedef struct tagCAUB {
    ULONG cElems;
    PUCHAR pElems;
};

typedef struct tagCAUH {
    ULONG cElems;
    union _ULARGE_INTEGER *pElems;
};

typedef struct tagCAUI {
    ULONG cElems;
    PWCHAR pElems;
};

typedef struct tagCAUL {
    ULONG cElems;
    PULONG pElems;
};

typedef struct tagCLIPDATA {
    ULONG cbSize;
    LONG ulClipFmt;
    PUCHAR pClipData;
};

typedef struct tagDEC {
    USHORT wReserved;
    UCHAR scale;
    UCHAR sign;
    USHORT signscale;
    ULONG Hi32;
    ULONG Lo32;
    ULONG Mid32;
    ULONG64 Lo64;
};

typedef struct tagDISPPARAMS {
    struct tagVARIANT *rgvarg;
    PLONG rgdispidNamedArgs;
    ULONG cArgs;
    ULONG cNamedArgs;
};

typedef struct tagELEMDESC {
    struct tagTYPEDESC tdesc;
    struct tagIDLDESC idldesc;
    struct tagPARAMDESC paramdesc;
};

typedef struct tagEXCEPINFO {
    USHORT wCode;
    USHORT wReserved;
    PWCHAR bstrSource;
    PWCHAR bstrDescription;
    PWCHAR bstrHelpFile;
    ULONG dwHelpContext;
    PVOID pvReserved;
    HRESULT *pfnDeferredFillIn;
    LONG scode;
};

typedef struct tagFUNCDESC {
    LONG memid;
    PLONG lprgscode;
    struct tagELEMDESC *lprgelemdescParam;
    enum tagFUNCKIND funckind;
    enum tagINVOKEKIND invkind;
    enum tagCALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    struct tagELEMDESC elemdescFunc;
    USHORT wFuncFlags;
};

typedef struct tagIDLDESC {
    ULONG64 dwReserved;
    USHORT wIDLFlags;
};

typedef struct tagLC_ID {
    USHORT wLanguage;
    USHORT wCountry;
    USHORT wCodePage;
};

typedef struct tagPARAMDESC {
    struct tagPARAMDESCEX *pparamdescex;
    USHORT wParamFlags;
};

typedef struct tagPARAMDESCEX {
    ULONG cBytes;
    struct tagVARIANT varDefaultValue;
};

typedef struct tagPROPVARIANT {
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    CHAR cVal;
    UCHAR bVal;
    SHORT iVal;
    USHORT uiVal;
    LONG lVal;
    ULONG ulVal;
    LONG intVal;
    ULONG uintVal;
    union _LARGE_INTEGER hVal;
    union _ULARGE_INTEGER uhVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    SHORT boolVal;
    LONG scode;
    union tagCY cyVal;
    DOUBLE date;
    struct _FILETIME filetime;
    struct _GUID *puuid;
    struct tagCLIPDATA *pclipdata;
    PWCHAR bstrVal;
    struct tagBSTRBLOB bstrblobVal;
    struct tagBLOB blob;
    PCHAR pszVal;
    PWCHAR pwszVal;
    struct IUnknown *punkVal;
    struct IDispatch *pdispVal;
    struct IStream *pStream;
    struct IStorage *pStorage;
    struct tagVersionedStream *pVersionedStream;
    struct tagSAFEARRAY *parray;
    struct tagCAC cac;
    struct tagCAUB caub;
    struct tagCAI cai;
    struct tagCAUI caui;
    struct tagCAL cal;
    struct tagCAUL caul;
    struct tagCAH cah;
    struct tagCAUH cauh;
    struct tagCAFLT caflt;
    struct tagCADBL cadbl;
    struct tagCABOOL cabool;
    struct tagCASCODE cascode;
    struct tagCACY cacy;
    struct tagCADATE cadate;
    struct tagCAFILETIME cafiletime;
    struct tagCACLSID cauuid;
    struct tagCACLIPDATA caclipdata;
    struct tagCABSTR cabstr;
    struct tagCABSTRBLOB cabstrblob;
    struct tagCALPSTR calpstr;
    struct tagCALPWSTR calpwstr;
    struct tagCAPROPVARIANT capropvar;
    PCHAR pcVal;
    PUCHAR pbVal;
    PSHORT piVal;
    PWCHAR puiVal;
    PLONG plVal;
    PULONG pulVal;
    PLONG pintVal;
    PULONG puintVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    PSHORT pboolVal;
    struct tagDEC *pdecVal;
    PLONG pscode;
    union tagCY *pcyVal;
    DOUBLE *pdate;
    PWCHAR *pbstrVal;
    struct IUnknown **ppunkVal;
    struct IDispatch **ppdispVal;
    struct tagSAFEARRAY **pparray;
    struct tagPROPVARIANT *pvarVal;
    struct tagDEC decVal;
};

typedef struct tagSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    struct tagSAFEARRAYBOUND rgsabound[1];
};

typedef struct tagSAFEARRAYBOUND {
    ULONG cElements;
    LONG lLbound;
};

typedef struct tagSTATSTG {
    PWCHAR pwcsName;
    ULONG type;
    union _ULARGE_INTEGER cbSize;
    struct _FILETIME mtime;
    struct _FILETIME ctime;
    struct _FILETIME atime;
    ULONG grfMode;
    ULONG grfLocksSupported;
    struct _GUID clsid;
    ULONG grfStateBits;
    ULONG reserved;
};

typedef struct tagTLIBATTR {
    struct _GUID guid;
    ULONG lcid;
    enum tagSYSKIND syskind;
    USHORT wMajorVerNum;
    USHORT wMinorVerNum;
    USHORT wLibFlags;
};

typedef struct tagTYPEATTR {
    struct _GUID guid;
    ULONG lcid;
    ULONG dwReserved;
    LONG memidConstructor;
    LONG memidDestructor;
    PWCHAR lpstrSchema;
    ULONG cbSizeInstance;
    enum tagTYPEKIND typekind;
    USHORT cFuncs;
    USHORT cVars;
    USHORT cImplTypes;
    USHORT cbSizeVft;
    USHORT cbAlignment;
    USHORT wTypeFlags;
    USHORT wMajorVerNum;
    USHORT wMinorVerNum;
    struct tagTYPEDESC tdescAlias;
    struct tagIDLDESC idldescType;
};

typedef struct tagTYPEDESC {
    struct tagTYPEDESC *lptdesc;
    struct tagARRAYDESC *lpadesc;
    ULONG hreftype;
    USHORT vt;
};

typedef struct tagVARDESC {
    LONG memid;
    PWCHAR lpstrSchema;
    ULONG oInst;
    struct tagVARIANT *lpvarValue;
    struct tagELEMDESC elemdescVar;
    USHORT wVarFlags;
    enum tagVARKIND varkind;
};

typedef struct tagVARIANT {
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    LONG64 llVal;
    LONG lVal;
    UCHAR bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    SHORT boolVal;
    LONG scode;
    union tagCY cyVal;
    DOUBLE date;
    PWCHAR bstrVal;
    struct IUnknown *punkVal;
    struct IDispatch *pdispVal;
    struct tagSAFEARRAY *parray;
    PUCHAR pbVal;
    PSHORT piVal;
    PLONG plVal;
    PLONG64 pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    PSHORT pboolVal;
    PLONG pscode;
    union tagCY *pcyVal;
    DOUBLE *pdate;
    PWCHAR *pbstrVal;
    struct IUnknown **ppunkVal;
    struct IDispatch **ppdispVal;
    struct tagSAFEARRAY **pparray;
    struct tagVARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONG64 ullVal;
    LONG intVal;
    ULONG uintVal;
    struct tagDEC *pdecVal;
    PCHAR pcVal;
    PWCHAR puiVal;
    PULONG pulVal;
    PULONG64 pullVal;
    PLONG pintVal;
    PULONG puintVal;
    PVOID pvRecord;
    struct IRecordInfo *pRecInfo;
    struct tagDEC decVal;
};

typedef struct tagVersionedStream {
    struct _GUID guidVersion;
    struct IStream *pStream;
};

typedef struct tagWNODE_ALL_DATA {
    struct _WNODE_HEADER WnodeHeader;
    ULONG DataBlockOffset;
    ULONG InstanceCount;
    ULONG OffsetInstanceNameOffsets;
    ULONG FixedInstanceSize;
    struct OFFSETINSTANCEDATAANDLENGTH OffsetInstanceDataAndLength[0];
};

typedef struct tagWNODE_EVENT_ITEM {
    struct _WNODE_HEADER WnodeHeader;
};

typedef struct tagWNODE_EVENT_REFERENCE {
    struct _WNODE_HEADER WnodeHeader;
    struct _GUID TargetGuid;
    ULONG TargetDataBlockSize;
    ULONG TargetInstanceIndex;
    WCHAR TargetInstanceName[0];
};

typedef struct tagWNODE_METHOD_ITEM {
    struct _WNODE_HEADER WnodeHeader;
    ULONG OffsetInstanceName;
    ULONG InstanceIndex;
    ULONG MethodId;
    ULONG DataBlockOffset;
    ULONG SizeDataBlock;
    UCHAR VariableData[0];
};

typedef struct tagWNODE_SINGLE_INSTANCE {
    struct _WNODE_HEADER WnodeHeader;
    ULONG OffsetInstanceName;
    ULONG InstanceIndex;
    ULONG DataBlockOffset;
    ULONG SizeDataBlock;
    UCHAR VariableData[0];
};

typedef struct tagWNODE_SINGLE_ITEM {
    struct _WNODE_HEADER WnodeHeader;
    ULONG OffsetInstanceName;
    ULONG InstanceIndex;
    ULONG ItemId;
    ULONG DataBlockOffset;
    ULONG SizeDataItem;
    UCHAR VariableData[0];
};

typedef struct tagWNODE_TOO_SMALL {
    struct _WNODE_HEADER WnodeHeader;
    ULONG SizeNeeded;
};

typedef struct threadlocaleinfostruct {
    LONG refcount;
    ULONG lc_codepage;
    ULONG lc_collate_cp;
    ULONG lc_handle[6];
    struct tagLC_ID lc_id[6];
    struct {
        PCHAR locale;
        PWCHAR wlocale;
        PLONG refcount;
        PLONG wrefcount;
    } lc_category[6];
    LONG lc_clike;
    LONG mb_cur_max;
    PLONG lconv_intl_refcount;
    PLONG lconv_num_refcount;
    PLONG lconv_mon_refcount;
    struct lconv *lconv;
    PLONG ctype1_refcount;
    PWCHAR ctype1;
    PUSHORT pctype;
    PUCHAR pclmap;
    PUCHAR pcumap;
    struct __lc_time_data *lc_time_curr;
};

typedef struct threadmbcinfostruct {
    LONG refcount;
    LONG mbcodepage;
    LONG ismbcodepage;
    LONG mblcid;
    USHORT mbulinfo[6];
    UCHAR mbctype[257];
    UCHAR mbcasemap[256];
};

typedef union FxDevicePwrRequirementMachineStateHistory {
     <unnamed-type-S>;
    struct {
        enum FxDevicePwrRequirementStates State1;
        enum FxDevicePwrRequirementStates State2;
        enum FxDevicePwrRequirementStates State3;
        enum FxDevicePwrRequirementStates State4;
        enum FxDevicePwrRequirementStates State5;
        enum FxDevicePwrRequirementStates State6;
        enum FxDevicePwrRequirementStates State7;
        enum FxDevicePwrRequirementStates State8;
    } S;
    UCHAR History[8];
};

typedef union FxPnpMachineStateHistory {
     <unnamed-type-S>;
    struct {
        enum _WDF_DEVICE_PNP_STATE State1;
        enum _WDF_DEVICE_PNP_STATE State2;
        enum _WDF_DEVICE_PNP_STATE State3;
        enum _WDF_DEVICE_PNP_STATE State4;
        enum _WDF_DEVICE_PNP_STATE State5;
        enum _WDF_DEVICE_PNP_STATE State6;
        enum _WDF_DEVICE_PNP_STATE State7;
        enum _WDF_DEVICE_PNP_STATE State8;
    } S;
    USHORT History[8];
};

typedef union FxPnpStateAndCaps {
     <unnamed-type-ByEnum>;
    struct {
        enum _WDF_TRI_STATE Disabled;
        enum _WDF_TRI_STATE DontDisplayInUI;
        enum _WDF_TRI_STATE Failed;
        enum _WDF_TRI_STATE NotDisableable;
        enum _WDF_TRI_STATE Removed;
        enum _WDF_TRI_STATE ResourcesChanged;
        enum _WDF_TRI_STATE LockSupported;
        enum _WDF_TRI_STATE EjectSupported;
        enum _WDF_TRI_STATE Removable;
        enum _WDF_TRI_STATE DockDevice;
        enum _WDF_TRI_STATE UniqueID;
        enum _WDF_TRI_STATE SilentInstall;
        enum _WDF_TRI_STATE SurpriseRemovalOK;
        enum _WDF_TRI_STATE HardwareDisabled;
        enum _WDF_TRI_STATE NoDisplayInUI;
    } ByEnum;
    LONG Value;
};

typedef union FxPnpStateInfo {
     <unnamed-type-Bits>;
    struct {
        ULONG QueueOpen : 1;
        ULONG KnownDroppedEvents : 31;
    } Bits;
     <unnamed-type-BitsByName>;
    struct {
        ULONG Reserved : 1;
        ULONG PnpEventAddDeviceKnown : 1;
        ULONG PnpEventStartDeviceKnown : 1;
        ULONG PnpEventStartDeviceCompleteKnown : 1;
        ULONG PnpEventStartDeviceFailedKnown : 1;
        ULONG PnpEventQueryRemoveKnown : 1;
        ULONG PnpEventQueryStopKnown : 1;
        ULONG PnpEventCancelRemoveKnown : 1;
        ULONG PnpEventCancelStopKnown : 1;
        ULONG PnpEventStopKnown : 1;
        ULONG PnpEventRemoveKnown : 1;
        ULONG PnpEventSurpriseRemoveKnown : 1;
        ULONG PnpEventEjectKnown : 1;
        ULONG PnpEventPwrPolStopped : 1;
        ULONG PnpEventPwrPolStopFailed : 1;
        ULONG PnpEventPowerUpFailedKnown : 1;
        ULONG PnpEventPowerDownFailedKnown : 1;
        ULONG PnpEventParentRemovedKnown : 1;
        ULONG PnpEventChildrenRemovalCompleteKnown : 1;
        ULONG PnpEventPwrPolStarted : 1;
        ULONG PnpEventPwrPolStartFailed : 1;
    } BitsByName;
};

typedef union FxPowerMachineEventQueue {
     <unnamed-type-E>;
    struct {
        enum FxPowerEvent Event1;
        enum FxPowerEvent Event2;
        enum FxPowerEvent Event3;
        enum FxPowerEvent Event4;
        enum FxPowerEvent Event5;
        enum FxPowerEvent Event6;
        enum FxPowerEvent Event7;
        enum FxPowerEvent Event8;
    } E;
    USHORT Events[8];
};

typedef union FxPowerMachineStateHistory {
     <unnamed-type-S>;
    struct {
        enum _WDF_DEVICE_POWER_STATE State1;
        enum _WDF_DEVICE_POWER_STATE State2;
        enum _WDF_DEVICE_POWER_STATE State3;
        enum _WDF_DEVICE_POWER_STATE State4;
        enum _WDF_DEVICE_POWER_STATE State5;
        enum _WDF_DEVICE_POWER_STATE State6;
        enum _WDF_DEVICE_POWER_STATE State7;
        enum _WDF_DEVICE_POWER_STATE State8;
    } S;
    USHORT History[8];
};

typedef union FxPowerPolicyMachineStateHistory {
     <unnamed-type-S>;
    struct {
        enum _WDF_DEVICE_POWER_POLICY_STATE State1;
        enum _WDF_DEVICE_POWER_POLICY_STATE State2;
        enum _WDF_DEVICE_POWER_POLICY_STATE State3;
        enum _WDF_DEVICE_POWER_POLICY_STATE State4;
        enum _WDF_DEVICE_POWER_POLICY_STATE State5;
        enum _WDF_DEVICE_POWER_POLICY_STATE State6;
        enum _WDF_DEVICE_POWER_POLICY_STATE State7;
        enum _WDF_DEVICE_POWER_POLICY_STATE State8;
    } S;
    USHORT History[8];
};

typedef union FxPowerStateInfo {
     <unnamed-type-Bits>;
    struct {
        ULONG QueueOpen : 1;
        ULONG KnownDroppedEvents : 31;
    } Bits;
     <unnamed-type-BitsByName>;
    struct {
        ULONG Reserved : 1;
        ULONG PowerD0Known : 1;
        ULONG PowerDxKnown : 1;
        ULONG PowerWakeArrivalKnown : 1;
        ULONG PowerWakeSucceededKnown : 1;
        ULONG PowerWakeFailedKnown : 1;
        ULONG PowerWakeCanceledKnown : 1;
        ULONG PowerImplicitD0Known : 1;
        ULONG PowerImplicitD3Known : 1;
        ULONG PowerParentToD0Known : 1;
        ULONG PowerMarkPageableKnown : 1;
        ULONG PowerMarkNonpageableKnown : 1;
        ULONG PowerCompleteD0Known : 1;
        ULONG PowerCompleteDxKnown : 1;
    } BitsByName;
};

typedef union FxPwrPolStateInfo {
     <unnamed-type-Bits>;
    struct {
        ULONG QueueOpen : 1;
        ULONG KnownDroppedEvents : 31;
    } Bits;
     <unnamed-type-BitsByName>;
    struct {
        ULONG Reserved : 1;
        ULONG PwrPolStartKnown : 1;
        ULONG PwrPolStopKnown : 1;
        ULONG PwrPolSxKnown : 1;
        ULONG PwrPolS0Known : 1;
        ULONG PwrPolPowerDownKnown : 1;
        ULONG PwrPolPowerUpKnown : 1;
        ULONG PwrPolPowerDownIoStoppedKnown : 1;
        ULONG PwrPolPowerUpHwStartedKnown : 1;
        ULONG PwrPolWakeArrivedKnown : 1;
        ULONG PwrPolWakeSuccessKnown : 1;
        ULONG PwrPolWakeFailedKnown : 1;
        ULONG PwrPolIoPresentKnown : 1;
        ULONG PwrPolPowerTimeoutExpiredKnown : 1;
        ULONG PwrPolS0IdlePolicyChangedKnown : 1;
        ULONG PwrPolSurpriseRemoveKnown : 1;
        ULONG PwrPolUsbSelectiveSuspendCallbackKnown : 1;
        ULONG PwrPolUsbSelectiveSuspendCompletedKnown : 1;
        ULONG PwrPolPowerDownFailedKnown : 1;
        ULONG PwrPolPowerUpFailedKnown : 1;
    } BitsByName;
};

typedef union FxSelfManagedIoMachineEventHistory {
     <unnamed-type-E>;
    struct {
        enum FxSelfManagedIoEvents Event1;
        enum FxSelfManagedIoEvents Event2;
        enum FxSelfManagedIoEvents Event3;
        enum FxSelfManagedIoEvents Event4;
        enum FxSelfManagedIoEvents Event5;
        enum FxSelfManagedIoEvents Event6;
        enum FxSelfManagedIoEvents Event7;
        enum FxSelfManagedIoEvents Event8;
    } E;
    UCHAR History[8];
};

typedef union FxSelfManagedIoMachineStateHistory {
     <unnamed-type-S>;
    struct {
        enum FxSelfManagedIoStates State1;
        enum FxSelfManagedIoStates State2;
        enum FxSelfManagedIoStates State3;
        enum FxSelfManagedIoStates State4;
        enum FxSelfManagedIoStates State5;
        enum FxSelfManagedIoStates State6;
        enum FxSelfManagedIoStates State7;
        enum FxSelfManagedIoStates State8;
    } S;
    UCHAR History[8];
};

typedef union FxTelemetryDriverInfo {
     <unnamed-type-bitmap>;
    struct {
        ULONG IsNonPnpDriver : 1;
        ULONG IsNoDispatchOverride : 1;
        ULONG IsVerifierOn : 1;
        ULONG IsEnhancedVerifierOn : 1;
        ULONG IsFilter : 1;
        ULONG IsUsingRemoveLockOption : 1;
        ULONG IsUsingNonDefaultHardwareReleaseOrder : 1;
        ULONG IsPowerPolicyOwner : 1;
        ULONG IsS0IdleEnabled : 1;
        ULONG IsS0IdleWakeFromS0Enabled : 1;
        ULONG IsS0IdleUsbSSEnabled : 1;
        ULONG IsS0IdleSystemManaged : 1;
        ULONG IsSxWakeEnabled : 1;
        ULONG IsUsingLevelTriggeredLineInterrupt : 1;
        ULONG IsUsingEdgeTriggeredLineInterrupt : 1;
        ULONG IsUsingMsiXOrSingleMsi22Interrupt : 1;
        ULONG IsUsingMsi22MultiMessageInterrupt : 1;
        ULONG IsUsingMultipleInterrupt : 1;
        ULONG IsUsingPassiveLevelInterrupt : 1;
        ULONG IsUsingBusMasterDma : 1;
        ULONG IsUsingSystemDma : 1;
        ULONG IsUsingSystemDmaDuplex : 1;
        ULONG IsUsingStaticBusEnumration : 1;
        ULONG IsUsingDynamicBusEnumeration : 1;
    } bitmap;
    ULONG Dword;
};

typedef union FxWakeInterruptMachineStateHistory {
     <unnamed-type-S>;
    struct {
        enum FxWakeInterruptStates State1;
        enum FxWakeInterruptStates State2;
        enum FxWakeInterruptStates State3;
        enum FxWakeInterruptStates State4;
        enum FxWakeInterruptStates State5;
        enum FxWakeInterruptStates State6;
        enum FxWakeInterruptStates State7;
        enum FxWakeInterruptStates State8;
    } S;
    UCHAR History[8];
};

typedef union WPP_PROJECT_CONTROL_BLOCK {
    struct _WPP_REGISTRATION_BLOCK Registration;
    struct _WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[56];
};

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT SecondaryUncorrectableErrorMaskRW : 1;
    USHORT SecondaryUncorrectableErrorSevRW : 1;
    USHORT SecondaryCapsAndControlRW : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT Reserved : 12;
    USHORT AsUSHORT;
};

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT RootErrorCommandRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _ARM64_NT_NEON128 {
    ULONG64 Low;
    LONG64 High;
    DOUBLE D[2];
    FLOAT S[4];
    USHORT H[8];
    UCHAR B[16];
};

typedef union _BM_REQUEST_TYPE {
     _BM;
    struct _BM_REQUEST_TYPE::_BM s;
    UCHAR B;
};

typedef union _FILE_SEGMENT_ELEMENT {
    PVOID Buffer;
    ULONG64 Alignment;
};

typedef union _KGDTENTRY64 {
    USHORT LimitLow;
    USHORT BaseLow;
    struct {
        UCHAR BaseMiddle;
        UCHAR Flags1;
        UCHAR Flags2;
        UCHAR BaseHigh;
    } Bytes;
    struct {
        ULONG BaseMiddle : 8;
        ULONG Type : 5;
        ULONG Dpl : 2;
        ULONG Present : 1;
        ULONG LimitHigh : 4;
        ULONG System : 1;
        ULONG LongMode : 1;
        ULONG DefaultBig : 1;
        ULONG Granularity : 1;
        ULONG BaseHigh : 8;
    } Bits;
    ULONG BaseUpper;
    ULONG MustBeZero;
    LONG64 DataLow;
    LONG64 DataHigh;
};

typedef union _KIDTENTRY64 {
    USHORT OffsetLow;
    USHORT Selector;
    USHORT IstIndex : 3;
    USHORT Reserved0 : 5;
    USHORT Type : 5;
    USHORT Dpl : 2;
    USHORT Present : 1;
    USHORT OffsetMiddle;
    ULONG OffsetHigh;
    ULONG Reserved1;
    ULONG64 Alignment;
};

typedef union _LARGE_INTEGER {
    ULONG LowPart;
    LONG HighPart;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONG64 QuadPart;
};

typedef union _MCG_STATUS {
    ULONG RestartIpValid : 1;
    ULONG ErrorIpValid : 1;
    ULONG MachineCheckInProgress : 1;
    ULONG LocalMceValid : 1;
    ULONG Reserved1 : 28;
    ULONG Reserved2;
    ULONG64 QuadPart;
};

typedef union _MCI_ADDR {
    ULONG Address;
    ULONG Reserved;
    ULONG64 QuadPart;
};

typedef union _MCI_STATS {
     <unnamed-type-MciStatus>;
    struct {
        USHORT McaErrorCode;
        USHORT ModelErrorCode;
        ULONG OtherInformation : 25;
        ULONG ContextCorrupt : 1;
        ULONG AddressValid : 1;
        ULONG MiscValid : 1;
        ULONG ErrorEnabled : 1;
        ULONG UncorrectedError : 1;
        ULONG StatusOverFlow : 1;
        ULONG Valid : 1;
    } MciStatus;
    ULONG64 QuadPart;
};

typedef union _MCI_STATUS {
    USHORT McaErrorCode;
    USHORT ModelErrorCode;
    ULONG OtherInformation : 23;
    ULONG ActionRequired : 1;
    ULONG Signalling : 1;
    ULONG ContextCorrupt : 1;
    ULONG AddressValid : 1;
    ULONG MiscValid : 1;
    ULONG ErrorEnabled : 1;
    ULONG UncorrectedError : 1;
    ULONG StatusOverFlow : 1;
    ULONG Valid : 1;
    ULONG64 QuadPart;
};

typedef union _OB_POST_OPERATION_PARAMETERS {
    struct _OB_POST_CREATE_HANDLE_INFORMATION CreateHandleInformation;
    struct _OB_POST_DUPLICATE_HANDLE_INFORMATION DuplicateHandleInformation;
};

typedef union _OB_PRE_OPERATION_PARAMETERS {
    struct _OB_PRE_CREATE_HANDLE_INFORMATION CreateHandleInformation;
    struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION DuplicateHandleInformation;
};

typedef union _PCI_EXPRESS_ACS_CAPABILITY_REGISTER {
    USHORT SourceValidation : 1;
    USHORT TranslationBlocking : 1;
    USHORT RequestRedirect : 1;
    USHORT CompletionRedirect : 1;
    USHORT UpstreamForwarding : 1;
    USHORT EgressControl : 1;
    USHORT DirectTranslation : 1;
    USHORT Reserved : 1;
    USHORT EgressControlVectorSize : 8;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ACS_CONTROL {
    USHORT SourceValidation : 1;
    USHORT TranslationBlocking : 1;
    USHORT RequestRedirect : 1;
    USHORT CompletionRedirect : 1;
    USHORT UpstreamForwarding : 1;
    USHORT EgressControl : 1;
    USHORT DirectTranslation : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_AER_CAPABILITIES {
    ULONG FirstErrorPointer : 5;
    ULONG ECRCGenerationCapable : 1;
    ULONG ECRCGenerationEnable : 1;
    ULONG ECRCCheckCapable : 1;
    ULONG ECRCCheckEnable : 1;
    ULONG MultipleHeaderRecordingCapable : 1;
    ULONG MultipleHeaderRecordingEnable : 1;
    ULONG TlpPrefixLogPresent : 1;
    ULONG Reserved : 20;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_CAPABILITIES_REGISTER {
    USHORT CapabilityVersion : 4;
    USHORT DeviceType : 4;
    USHORT SlotImplemented : 1;
    USHORT InterruptMessageNumber : 5;
    USHORT Rsvd : 2;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK {
    ULONG ReceiverError : 1;
    ULONG Reserved1 : 5;
    ULONG BadTLP : 1;
    ULONG BadDLLP : 1;
    ULONG ReplayNumRollover : 1;
    ULONG Reserved2 : 3;
    ULONG ReplayTimerTimeout : 1;
    ULONG AdvisoryNonFatalError : 1;
    ULONG CorrectedInternalError : 1;
    ULONG HeaderLogOverflow : 1;
    ULONG Reserved3 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS {
    ULONG ReceiverError : 1;
    ULONG Reserved1 : 5;
    ULONG BadTLP : 1;
    ULONG BadDLLP : 1;
    ULONG ReplayNumRollover : 1;
    ULONG Reserved2 : 3;
    ULONG ReplayTimerTimeout : 1;
    ULONG AdvisoryNonFatalError : 1;
    ULONG CorrectedInternalError : 1;
    ULONG HeaderLogOverflow : 1;
    ULONG Reserved3 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_1 {
    ULONG DvsecVendorId : 16;
    ULONG DvsecVersion : 4;
    ULONG DvsecLength : 12;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_2 {
    USHORT DvsecId : 16;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER {
    ULONG CompletionTimeoutRangesSupported : 4;
    ULONG CompletionTimeoutDisableSupported : 1;
    ULONG AriForwardingSupported : 1;
    ULONG AtomicOpRoutingSupported : 1;
    ULONG AtomicOpCompleterSupported32Bit : 1;
    ULONG AtomicOpCompleterSupported64Bit : 1;
    ULONG CASCompleterSupported128Bit : 1;
    ULONG NoROEnabledPRPRPassing : 1;
    ULONG LTRMechanismSupported : 1;
    ULONG TPHCompleterSupported : 2;
    ULONG Rsvd : 4;
    ULONG OBFFSupported : 2;
    ULONG ExtendedFmtFieldSuported : 1;
    ULONG EndEndTLPPrefixSupported : 1;
    ULONG MaxEndEndTLPPrefixes : 2;
    ULONG Rsvd2 : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER {
    ULONG MaxPayloadSizeSupported : 3;
    ULONG PhantomFunctionsSupported : 2;
    ULONG ExtendedTagSupported : 1;
    ULONG L0sAcceptableLatency : 3;
    ULONG L1AcceptableLatency : 3;
    ULONG Undefined : 3;
    ULONG RoleBasedErrorReporting : 1;
    ULONG Rsvd1 : 2;
    ULONG CapturedSlotPowerLimit : 8;
    ULONG CapturedSlotPowerLimitScale : 2;
    ULONG FunctionLevelResetCapability : 1;
    ULONG Rsvd2 : 3;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER {
    USHORT CompletionTimeoutValue : 4;
    USHORT CompletionTimeoutDisable : 1;
    USHORT AriForwardingEnable : 1;
    USHORT AtomicOpRequesterEnable : 1;
    USHORT AtomicOpEgresBlocking : 1;
    USHORT IDORequestEnable : 1;
    USHORT IDOCompletionEnable : 1;
    USHORT LTRMechanismEnable : 1;
    USHORT Rsvd : 2;
    USHORT OBFFEnable : 2;
    USHORT EndEndTLPPrefixBlocking : 1;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER {
    USHORT CorrectableErrorEnable : 1;
    USHORT NonFatalErrorEnable : 1;
    USHORT FatalErrorEnable : 1;
    USHORT UnsupportedRequestErrorEnable : 1;
    USHORT EnableRelaxedOrder : 1;
    USHORT MaxPayloadSize : 3;
    USHORT ExtendedTagEnable : 1;
    USHORT PhantomFunctionsEnable : 1;
    USHORT AuxPowerEnable : 1;
    USHORT NoSnoopEnable : 1;
    USHORT MaxReadRequestSize : 3;
    USHORT BridgeConfigRetryEnable : 1;
    USHORT InitiateFunctionLevelReset : 1;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_STATUS_2_REGISTER {
    USHORT Rsvd : 16;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_STATUS_REGISTER {
    USHORT CorrectableErrorDetected : 1;
    USHORT NonFatalErrorDetected : 1;
    USHORT FatalErrorDetected : 1;
    USHORT UnsupportedRequestDetected : 1;
    USHORT AuxPowerDetected : 1;
    USHORT TransactionsPending : 1;
    USHORT Rsvd : 10;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ERROR_SOURCE_ID {
    USHORT CorrectableSourceIdFun : 3;
    USHORT CorrectableSourceIdDev : 5;
    USHORT CorrectableSourceIdBus : 8;
    USHORT UncorrectableSourceIdFun : 3;
    USHORT UncorrectableSourceIdDev : 5;
    USHORT UncorrectableSourceIdBus : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER {
    ULONG PciPmL12Supported : 1;
    ULONG PciPmL11Supported : 1;
    ULONG AspmL12Supported : 1;
    ULONG AspmL11Supported : 1;
    ULONG L1PmSsSupported : 1;
    ULONG Rsvd : 3;
    ULONG PortCommonModeRestoreTime : 8;
    ULONG PortTPowerOnScale : 2;
    ULONG Rsvd2 : 1;
    ULONG PortTPowerOnValue : 5;
    ULONG Rsvd3 : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER {
    ULONG PciPmL12Enabled : 1;
    ULONG PciPmL11Enabled : 1;
    ULONG AspmL12Enabled : 1;
    ULONG AspmL11Enabled : 1;
    ULONG Rsvd : 4;
    ULONG CommonModeRestoreTime : 8;
    ULONG LtrL12ThresholdValue : 10;
    ULONG Rsvd2 : 3;
    ULONG LtrL12ThresholdScale : 3;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER {
    ULONG TPowerOnScale : 2;
    ULONG Rsvd : 1;
    ULONG TPowerOnValue : 5;
    ULONG Rsvd2 : 24;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER {
    ULONG MaximumLinkSpeed : 4;
    ULONG MaximumLinkWidth : 6;
    ULONG ActiveStatePMSupport : 2;
    ULONG L0sExitLatency : 3;
    ULONG L1ExitLatency : 3;
    ULONG ClockPowerManagement : 1;
    ULONG SurpriseDownErrorReportingCapable : 1;
    ULONG DataLinkLayerActiveReportingCapable : 1;
    ULONG LinkBandwidthNotificationCapability : 1;
    ULONG AspmOptionalityCompliance : 1;
    ULONG Rsvd : 1;
    ULONG PortNumber : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_LINK_CONTROL_REGISTER {
    USHORT ActiveStatePMControl : 2;
    USHORT Rsvd1 : 1;
    USHORT ReadCompletionBoundary : 1;
    USHORT LinkDisable : 1;
    USHORT RetrainLink : 1;
    USHORT CommonClockConfig : 1;
    USHORT ExtendedSynch : 1;
    USHORT EnableClockPowerManagement : 1;
    USHORT Rsvd2 : 7;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_LINK_STATUS_REGISTER {
    USHORT LinkSpeed : 4;
    USHORT LinkWidth : 6;
    USHORT Undefined : 1;
    USHORT LinkTraining : 1;
    USHORT SlotClockConfig : 1;
    USHORT DataLinkLayerActive : 1;
    USHORT Rsvd : 2;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER {
    ULONG MaxSnoopLatencyValue : 10;
    ULONG MaxSnoopLatencyScale : 3;
    ULONG Rsvd : 2;
    ULONG MaxSnoopRequirement : 1;
    ULONG MaxNoSnoopLatencyValue : 10;
    ULONG MaxNoSnoopLatencyScale : 3;
    ULONG Rsvd2 : 2;
    ULONG MaxNoSnoopRequirement : 1;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_PASID_CAPABILITY_REGISTER {
    USHORT Rsvd : 1;
    USHORT ExecutePermissionSupported : 1;
    USHORT PrivilegedModeSupported : 1;
    USHORT Rsvd2 : 5;
    USHORT MaxPASIDWidth : 5;
    USHORT Rsvd3 : 3;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PASID_CONTROL_REGISTER {
    USHORT PASIDEnable : 1;
    USHORT ExecutePermissionEnable : 1;
    USHORT PrivilegedModeEnable : 1;
    USHORT Rsvd : 13;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PME_REQUESTOR_ID {
    USHORT FunctionNumber : 3;
    USHORT DeviceNumber : 5;
    USHORT BusNumber : 8;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PRI_CONTROL_REGISTER {
    USHORT Enable : 1;
    USHORT Reset : 1;
    USHORT Rsvd : 14;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PRI_STATUS_REGISTER {
    USHORT ResponseFailure : 1;
    USHORT UnexpectedPageRequestGroupIndex : 1;
    USHORT Rsvd : 6;
    USHORT Stopped : 1;
    USHORT Rsvd2 : 6;
    USHORT PrgResponsePasidRequired : 1;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PTM_CAPABILITY_REGISTER {
    ULONG RequesterCapable : 1;
    ULONG ResponderCapable : 1;
    ULONG RootCapable : 1;
    ULONG Rsvd : 5;
    ULONG LocalGranularity : 8;
    ULONG Rsvd2 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_PTM_CONTROL_REGISTER {
    ULONG Enable : 1;
    ULONG RootSelect : 1;
    ULONG Rsvd : 6;
    ULONG EffectiveGranularity : 8;
    ULONG Rsvd2 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER {
    ULONG Rsvd : 4;
    ULONG SizesSupported : 20;
    ULONG Rsvd2 : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER {
    ULONG BarIndex : 3;
    ULONG Rsvd : 2;
    ULONG NumberOfResizableBars : 3;
    ULONG BarSize : 5;
    ULONG Rsvd2 : 19;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER {
    USHORT CRSSoftwareVisibility : 1;
    USHORT Rsvd : 15;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ROOT_CONTROL_REGISTER {
    USHORT CorrectableSerrEnable : 1;
    USHORT NonFatalSerrEnable : 1;
    USHORT FatalSerrEnable : 1;
    USHORT PMEInterruptEnable : 1;
    USHORT CRSSoftwareVisibilityEnable : 1;
    USHORT Rsvd : 11;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ROOT_ERROR_COMMAND {
    ULONG CorrectableErrorReportingEnable : 1;
    ULONG NonFatalErrorReportingEnable : 1;
    ULONG FatalErrorReportingEnable : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_ROOT_ERROR_STATUS {
    ULONG CorrectableErrorReceived : 1;
    ULONG MultipleCorrectableErrorsReceived : 1;
    ULONG UncorrectableErrorReceived : 1;
    ULONG MultipleUncorrectableErrorsReceived : 1;
    ULONG FirstUncorrectableFatal : 1;
    ULONG NonFatalErrorMessagesReceived : 1;
    ULONG FatalErrorMessagesReceived : 1;
    ULONG Reserved : 20;
    ULONG AdvancedErrorInterruptMessageNumber : 5;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_ROOT_STATUS_REGISTER {
    ULONG PMERequestorId : 16;
    ULONG PMEStatus : 1;
    ULONG PMEPending : 1;
    ULONG Rsvd : 14;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_AER_CAPABILITIES {
    ULONG SecondaryUncorrectableFirstErrorPtr : 5;
    ULONG Reserved : 27;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK {
    ULONG TargetAbortOnSplitCompletion : 1;
    ULONG MasterAbortOnSplitCompletion : 1;
    ULONG ReceivedTargetAbort : 1;
    ULONG ReceivedMasterAbort : 1;
    ULONG RsvdZ : 1;
    ULONG UnexpectedSplitCompletionError : 1;
    ULONG UncorrectableSplitCompletion : 1;
    ULONG UncorrectableDataError : 1;
    ULONG UncorrectableAttributeError : 1;
    ULONG UncorrectableAddressError : 1;
    ULONG DelayedTransactionDiscardTimerExpired : 1;
    ULONG PERRAsserted : 1;
    ULONG SERRAsserted : 1;
    ULONG InternalBridgeError : 1;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY {
    ULONG TargetAbortOnSplitCompletion : 1;
    ULONG MasterAbortOnSplitCompletion : 1;
    ULONG ReceivedTargetAbort : 1;
    ULONG ReceivedMasterAbort : 1;
    ULONG RsvdZ : 1;
    ULONG UnexpectedSplitCompletionError : 1;
    ULONG UncorrectableSplitCompletion : 1;
    ULONG UncorrectableDataError : 1;
    ULONG UncorrectableAttributeError : 1;
    ULONG UncorrectableAddressError : 1;
    ULONG DelayedTransactionDiscardTimerExpired : 1;
    ULONG PERRAsserted : 1;
    ULONG SERRAsserted : 1;
    ULONG InternalBridgeError : 1;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS {
    ULONG TargetAbortOnSplitCompletion : 1;
    ULONG MasterAbortOnSplitCompletion : 1;
    ULONG ReceivedTargetAbort : 1;
    ULONG ReceivedMasterAbort : 1;
    ULONG RsvdZ : 1;
    ULONG UnexpectedSplitCompletionError : 1;
    ULONG UncorrectableSplitCompletion : 1;
    ULONG UncorrectableDataError : 1;
    ULONG UncorrectableAttributeError : 1;
    ULONG UncorrectableAddressError : 1;
    ULONG DelayedTransactionDiscardTimerExpired : 1;
    ULONG PERRAsserted : 1;
    ULONG SERRAsserted : 1;
    ULONG InternalBridgeError : 1;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER {
    ULONG AttentionButtonPresent : 1;
    ULONG PowerControllerPresent : 1;
    ULONG MRLSensorPresent : 1;
    ULONG AttentionIndicatorPresent : 1;
    ULONG PowerIndicatorPresent : 1;
    ULONG HotPlugSurprise : 1;
    ULONG HotPlugCapable : 1;
    ULONG SlotPowerLimit : 8;
    ULONG SlotPowerLimitScale : 2;
    ULONG ElectromechanicalLockPresent : 1;
    ULONG NoCommandCompletedSupport : 1;
    ULONG PhysicalSlotNumber : 13;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SLOT_CONTROL_REGISTER {
    USHORT AttentionButtonEnable : 1;
    USHORT PowerFaultDetectEnable : 1;
    USHORT MRLSensorEnable : 1;
    USHORT PresenceDetectEnable : 1;
    USHORT CommandCompletedEnable : 1;
    USHORT HotPlugInterruptEnable : 1;
    USHORT AttentionIndicatorControl : 2;
    USHORT PowerIndicatorControl : 2;
    USHORT PowerControllerControl : 1;
    USHORT ElectromechanicalLockControl : 1;
    USHORT DataLinkStateChangeEnable : 1;
    USHORT Rsvd : 3;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_SLOT_STATUS_REGISTER {
    USHORT AttentionButtonPressed : 1;
    USHORT PowerFaultDetected : 1;
    USHORT MRLSensorChanged : 1;
    USHORT PresenceDetectChanged : 1;
    USHORT CommandCompleted : 1;
    USHORT MRLSensorState : 1;
    USHORT PresenceDetectState : 1;
    USHORT ElectromechanicalLockEngaged : 1;
    USHORT DataLinkStateChanged : 1;
    USHORT Rsvd : 7;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_SRIOV_CAPS {
    ULONG VFMigrationCapable : 1;
    ULONG Reserved1 : 20;
    ULONG VFMigrationInterruptNumber : 11;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SRIOV_CONTROL {
    USHORT VFEnable : 1;
    USHORT VFMigrationEnable : 1;
    USHORT VFMigrationInterruptEnable : 1;
    USHORT VFMemorySpaceEnable : 1;
    USHORT ARICapableHierarchy : 1;
    USHORT Reserved1 : 11;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY {
    ULONG VFMigrationStateBIR : 3;
    ULONG VFMigrationStateOffset : 29;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SRIOV_STATUS {
    USHORT VFMigrationStatus : 1;
    USHORT Reserved1 : 15;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER {
    ULONG NoStModeSupported : 1;
    ULONG InteruptVectorModeSupported : 1;
    ULONG DeviceSpecificModeSupported : 1;
    ULONG Rsvd : 5;
    ULONG ExtendedTPHRequesterSupported : 1;
    ULONG StTableLocation : 2;
    ULONG Rsvd2 : 5;
    ULONG StTableSize : 11;
    ULONG Rsvd3 : 5;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER {
    ULONG StModeSelect : 3;
    ULONG Rsvd : 5;
    ULONG TphRequesterEnable : 2;
    ULONG Rsvd2 : 22;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_TPH_ST_TABLE_ENTRY {
    USHORT LowerEntry : 8;
    USHORT UpperEntry : 8;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK {
    ULONG Undefined : 1;
    ULONG Reserved1 : 3;
    ULONG DataLinkProtocolError : 1;
    ULONG SurpriseDownError : 1;
    ULONG Reserved2 : 6;
    ULONG PoisonedTLP : 1;
    ULONG FlowControlProtocolError : 1;
    ULONG CompletionTimeout : 1;
    ULONG CompleterAbort : 1;
    ULONG UnexpectedCompletion : 1;
    ULONG ReceiverOverflow : 1;
    ULONG MalformedTLP : 1;
    ULONG ECRCError : 1;
    ULONG UnsupportedRequestError : 1;
    ULONG AcsViolation : 1;
    ULONG UncorrectableInternalError : 1;
    ULONG MCBlockedTlp : 1;
    ULONG AtomicOpEgressBlocked : 1;
    ULONG TlpPrefixBlocked : 1;
    ULONG Reserved3 : 6;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY {
    ULONG Undefined : 1;
    ULONG Reserved1 : 3;
    ULONG DataLinkProtocolError : 1;
    ULONG SurpriseDownError : 1;
    ULONG Reserved2 : 6;
    ULONG PoisonedTLP : 1;
    ULONG FlowControlProtocolError : 1;
    ULONG CompletionTimeout : 1;
    ULONG CompleterAbort : 1;
    ULONG UnexpectedCompletion : 1;
    ULONG ReceiverOverflow : 1;
    ULONG MalformedTLP : 1;
    ULONG ECRCError : 1;
    ULONG UnsupportedRequestError : 1;
    ULONG AcsViolation : 1;
    ULONG UncorrectableInternalError : 1;
    ULONG MCBlockedTlp : 1;
    ULONG AtomicOpEgressBlocked : 1;
    ULONG TlpPrefixBlocked : 1;
    ULONG Reserved3 : 6;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS {
    ULONG Undefined : 1;
    ULONG Reserved1 : 3;
    ULONG DataLinkProtocolError : 1;
    ULONG SurpriseDownError : 1;
    ULONG Reserved2 : 6;
    ULONG PoisonedTLP : 1;
    ULONG FlowControlProtocolError : 1;
    ULONG CompletionTimeout : 1;
    ULONG CompleterAbort : 1;
    ULONG UnexpectedCompletion : 1;
    ULONG ReceiverOverflow : 1;
    ULONG MalformedTLP : 1;
    ULONG ECRCError : 1;
    ULONG UnsupportedRequestError : 1;
    ULONG AcsViolation : 1;
    ULONG UncorrectableInternalError : 1;
    ULONG MCBlockedTlp : 1;
    ULONG AtomicOpEgressBlocked : 1;
    ULONG TlpPrefixBlocked : 1;
    ULONG Reserved3 : 6;
    ULONG AsULONG;
};

typedef union _PCI_FPB_CAPABILITIES_REGISTER {
    ULONG RidDecodeMechanismSupported : 1;
    ULONG MemLowDecodeMechanismSupported : 1;
    ULONG MemHighDecodeMechanismSupported : 1;
    ULONG NumSecDev : 5;
    ULONG RidVectorSizeSupported : 3;
    ULONG Rsvd0 : 5;
    ULONG MemLowVectorSizeSupported : 3;
    ULONG Rsvd1 : 5;
    ULONG MemHighVectorSizeSupported : 3;
    ULONG Rsvd2 : 5;
    ULONG AsULONG;
};

typedef union _PCI_FPB_MEM_HIGH_VECTOR_CONTROL1_REGISTER {
    ULONG MemHighDecodeMechanismEnable : 1;
    ULONG Rsvd0 : 3;
    ULONG MemHighVectorGranularity : 4;
    ULONG Rsvd1 : 20;
    ULONG MemHighVectorStartLower : 4;
    ULONG AsULONG;
};

typedef union _PCI_FPB_MEM_LOW_VECTOR_CONTROL_REGISTER {
    ULONG MemLowDecodeMechanismEnable : 1;
    ULONG Rsvd0 : 3;
    ULONG MemLowVectorGranularity : 4;
    ULONG Rsvd1 : 12;
    ULONG MemLowVectorStart : 12;
    ULONG AsULONG;
};

typedef union _PCI_FPB_RID_VECTOR_CONTROL1_REGISTER {
    ULONG RidDecodeMechanismEnable : 1;
    ULONG Rsvd0 : 3;
    ULONG RidVectorGranularity : 4;
    ULONG Rsvd1 : 11;
    ULONG RidVectorStart : 13;
    ULONG AsULONG;
};

typedef union _PCI_FPB_RID_VECTOR_CONTROL2_REGISTER {
    ULONG Rsvd0 : 3;
    ULONG RidSecondaryStart : 13;
    ULONG Rsvd1 : 16;
    ULONG AsULONG;
};

typedef union _PCI_FPB_VECTOR_ACCESS_CONTROL_REGISTER {
    ULONG VectorAccessOffset : 8;
    ULONG Rsvd0 : 6;
    ULONG VectorSelect : 2;
    ULONG Rsvd1 : 16;
    ULONG AsULONG;
};

typedef union _PCW_CALLBACK_INFORMATION {
    struct _PCW_COUNTER_INFORMATION AddCounter;
    struct _PCW_COUNTER_INFORMATION RemoveCounter;
    struct _PCW_MASK_INFORMATION EnumerateInstances;
    struct _PCW_MASK_INFORMATION CollectData;
};

typedef union _POWER_STATE {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
};

typedef union _RATE_QUOTA_LIMIT {
    ULONG RateData;
    ULONG RatePercent : 7;
    ULONG Reserved0 : 25;
};

typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
};

typedef union _SLIST_HEADER {
    ULONG64 Alignment;
    ULONG64 Region;
    struct {
        ULONG64 Depth : 16;
        ULONG64 Sequence : 48;
        ULONG64 Reserved : 4;
        ULONG64 NextEntry : 60;
    } HeaderX64;
};

typedef union _ULARGE_INTEGER {
    ULONG LowPart;
    ULONG HighPart;
     <unnamed-type-u>;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONG64 QuadPart;
};

typedef union _UNWIND_CODE {
    UCHAR CodeOffset;
    UCHAR UnwindOp : 4;
    UCHAR OpInfo : 4;
    struct {
        UCHAR OffsetLow;
        UCHAR UnwindOp : 4;
        UCHAR OffsetHigh : 4;
    } EpilogueCode;
    USHORT FrameOffset;
};

typedef union _USB_20_PORT_CHANGE {
    USHORT AsUshort16;
    USHORT ConnectStatusChange : 1;
    USHORT PortEnableDisableChange : 1;
    USHORT SuspendChange : 1;
    USHORT OverCurrentIndicatorChange : 1;
    USHORT ResetChange : 1;
    USHORT Reserved2 : 11;
};

typedef union _USB_20_PORT_STATUS {
    USHORT AsUshort16;
    USHORT CurrentConnectStatus : 1;
    USHORT PortEnabledDisabled : 1;
    USHORT Suspend : 1;
    USHORT OverCurrent : 1;
    USHORT Reset : 1;
    USHORT L1 : 1;
    USHORT Reserved0 : 2;
    USHORT PortPower : 1;
    USHORT LowSpeedDeviceAttached : 1;
    USHORT HighSpeedDeviceAttached : 1;
    USHORT PortTestMode : 1;
    USHORT PortIndicatorControl : 1;
    USHORT Reserved1 : 3;
};

typedef union _USB_30_PORT_CHANGE {
    USHORT AsUshort16;
    USHORT ConnectStatusChange : 1;
    USHORT Reserved2 : 2;
    USHORT OverCurrentIndicatorChange : 1;
    USHORT ResetChange : 1;
    USHORT BHResetChange : 1;
    USHORT PortLinkStateChange : 1;
    USHORT PortConfigErrorChange : 1;
    USHORT Reserved3 : 8;
};

typedef union _USB_30_PORT_STATUS {
    USHORT AsUshort16;
    USHORT CurrentConnectStatus : 1;
    USHORT PortEnabledDisabled : 1;
    USHORT Reserved0 : 1;
    USHORT OverCurrent : 1;
    USHORT Reset : 1;
    USHORT PortLinkState : 4;
    USHORT PortPower : 1;
    USHORT NegotiatedDeviceSpeed : 3;
    USHORT Reserved1 : 3;
};

typedef union _USB_DEFAULT_PIPE_SETUP_PACKET::_wIndex {
    UCHAR LowByte;
    UCHAR HiByte;
    USHORT W;
};

typedef union _USB_DEFAULT_PIPE_SETUP_PACKET::_wValue {
    UCHAR LowByte;
    UCHAR HiByte;
    USHORT W;
};

typedef union _USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED {
    ULONG AsUlong32;
    ULONG SublinkSpeedAttrID : 4;
    ULONG LaneSpeedExponent : 2;
    ULONG SublinkTypeMode : 1;
    ULONG SublinkTypeDir : 1;
    ULONG Reserved : 6;
    ULONG LinkProtocol : 2;
    ULONG LaneSpeedMantissa : 16;
};

typedef union _USB_DEVICE_STATUS {
    USHORT AsUshort16;
    USHORT SelfPowered : 1;
    USHORT RemoteWakeup : 1;
    USHORT U1Enable : 1;
    USHORT U2Enable : 1;
    USHORT LtmEnable : 1;
    USHORT Reserved : 11;
};

typedef union _USB_ENDPOINT_STATUS {
    USHORT AsUshort16;
    USHORT Halt : 1;
    USHORT Reserved : 15;
};

typedef union _USB_FUNCTION_SUSPEND_OPTIONS {
    UCHAR AsUchar;
    UCHAR PowerState : 1;
    UCHAR RemoteWakeEnabled : 1;
    UCHAR Reserved : 6;
};

typedef union _USB_HIGH_SPEED_MAXPACKET {
     _MP;
    USHORT us;
};

typedef union _USB_HUB_30_PORT_REMOTE_WAKE_MASK {
    UCHAR AsUchar8;
    UCHAR ConnectRemoteWakeEnable : 1;
    UCHAR DisconnectRemoteWakeEnable : 1;
    UCHAR OverCurrentRemoteWakeEnable : 1;
    UCHAR Reserved0 : 5;
};

typedef union _USB_HUB_CHANGE {
    USHORT AsUshort16;
    USHORT LocalPowerChange : 1;
    USHORT OverCurrentChange : 1;
    USHORT Reserved : 14;
};

typedef union _USB_HUB_STATUS {
    USHORT AsUshort16;
    USHORT LocalPowerLost : 1;
    USHORT OverCurrent : 1;
    USHORT Reserved : 14;
};

typedef union _USB_HUB_STATUS_AND_CHANGE {
    ULONG AsUlong32;
    union _USB_HUB_STATUS HubStatus;
    union _USB_HUB_CHANGE HubChange;
};

typedef union _USB_INTERFACE_STATUS {
    USHORT AsUshort16;
    USHORT RemoteWakeupCapable : 1;
    USHORT RemoteWakeupEnabled : 1;
    USHORT Reserved : 14;
};

typedef union _USB_PORT_CHANGE {
    USHORT AsUshort16;
    union _USB_20_PORT_CHANGE Usb20PortChange;
    union _USB_30_PORT_CHANGE Usb30PortChange;
};

typedef union _USB_PORT_EXT_STATUS {
    ULONG AsUlong32;
    ULONG RxSublinkSpeedID : 4;
    ULONG TxSublinkSpeedID : 4;
    ULONG RxLaneCount : 4;
    ULONG TxLaneCount : 4;
    ULONG Reserved : 16;
};

typedef union _USB_PORT_EXT_STATUS_AND_CHANGE {
    ULONG64 AsUlong64;
    union _USB_PORT_STATUS_AND_CHANGE PortStatusChange;
    union _USB_PORT_EXT_STATUS PortExtStatus;
};

typedef union _USB_PORT_STATUS {
    USHORT AsUshort16;
    union _USB_20_PORT_STATUS Usb20PortStatus;
    union _USB_30_PORT_STATUS Usb30PortStatus;
};

typedef union _USB_PORT_STATUS_AND_CHANGE {
    ULONG AsUlong32;
    union _USB_PORT_STATUS PortStatus;
    union _USB_PORT_CHANGE PortChange;
};

typedef union _VIRTUAL_CHANNEL_CAPABILITIES1 {
    ULONG ExtendedVCCount : 3;
    ULONG RsvdP1 : 1;
    ULONG LowPriorityExtendedVCCount : 3;
    ULONG RsvdP2 : 1;
    ULONG ReferenceClock : 2;
    ULONG PortArbitrationTableEntrySize : 2;
    ULONG RsvdP3 : 20;
    ULONG AsULONG;
};

typedef union _VIRTUAL_CHANNEL_CAPABILITIES2 {
    ULONG VCArbitrationCapability : 8;
    ULONG RsvdP : 16;
    ULONG VCArbitrationTableOffset : 8;
    ULONG AsULONG;
};

typedef union _VIRTUAL_CHANNEL_CONTROL {
    USHORT LoadVCArbitrationTable : 1;
    USHORT VCArbitrationSelect : 3;
    USHORT RsvdP : 12;
    USHORT AsUSHORT;
};

typedef union _VIRTUAL_CHANNEL_STATUS {
    USHORT VCArbitrationTableStatus : 1;
    USHORT RsvdZ : 15;
    USHORT AsUSHORT;
};

typedef union _VIRTUAL_RESOURCE_CAPABILITY {
    ULONG PortArbitrationCapability : 8;
    ULONG RsvdP1 : 6;
    ULONG Undefined : 1;
    ULONG RejectSnoopTransactions : 1;
    ULONG MaximumTimeSlots : 7;
    ULONG RsvdP2 : 1;
    ULONG PortArbitrationTableOffset : 8;
    ULONG AsULONG;
};

typedef union _VIRTUAL_RESOURCE_CONTROL {
    ULONG TcVcMap : 8;
    ULONG RsvdP1 : 8;
    ULONG LoadPortArbitrationTable : 1;
    ULONG PortArbitrationSelect : 3;
    ULONG RsvdP2 : 4;
    ULONG VcID : 3;
    ULONG RsvdP3 : 4;
    ULONG VcEnable : 1;
    ULONG AsULONG;
};

typedef union _VIRTUAL_RESOURCE_STATUS {
    USHORT PortArbitrationTableStatus : 1;
    USHORT VcNegotiationPending : 1;
    USHORT RsvdZ : 14;
    USHORT AsUSHORT;
};

typedef union _WDF_USB_CONTROL_SETUP_PACKET {
     <unnamed-type-Packet>;
    struct {
         <unnamed-type-bm>;
        union {
             <unnamed-type-Request>;
            struct {
                UCHAR Recipient : 2;
                UCHAR Reserved : 3;
                UCHAR Type : 2;
                UCHAR Dir : 1;
            } Request;
            UCHAR Byte;
        } bm;
        UCHAR bRequest;
         <unnamed-type-wValue>;
        union {
             <unnamed-type-Bytes>;
            struct {
                UCHAR LowByte;
                UCHAR HiByte;
            } Bytes;
            USHORT Value;
        } wValue;
         <unnamed-type-wIndex>;
        union {
             <unnamed-type-Bytes>;
            struct {
                UCHAR LowByte;
                UCHAR HiByte;
            } Bytes;
            USHORT Value;
        } wIndex;
        USHORT wLength;
    } Packet;
     <unnamed-type-Generic>;
    struct {
        UCHAR Bytes[8];
    } Generic;
};

typedef union _WHEA_ARM_BUS_ERROR_VALID_BITS {
    USHORT TransactionType : 1;
    USHORT Operation : 1;
    USHORT Level : 1;
    USHORT ProcessorContextCorrupt : 1;
    USHORT Corrected : 1;
    USHORT PrecisePC : 1;
    USHORT RestartablePC : 1;
    USHORT ParticipationType : 1;
    USHORT Timeout : 1;
    USHORT AddressSpace : 1;
    USHORT MemoryAttributes : 1;
    USHORT AccessMode : 1;
    USHORT Reserved : 4;
    USHORT AsUSHORT;
};

typedef union _WHEA_ARM_CACHE_ERROR_VALID_BITS {
    USHORT TransactionType : 1;
    USHORT Operation : 1;
    USHORT Level : 1;
    USHORT ProcessorContextCorrupt : 1;
    USHORT Corrected : 1;
    USHORT PrecisePC : 1;
    USHORT RestartablePC : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR {
    struct _WHEA_ARM_CACHE_ERROR CacheError;
    struct _WHEA_ARM_TLB_ERROR TlbError;
    struct _WHEA_ARM_BUS_ERROR BusError;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER_FLAGS {
    ULONG ExceptionLevel : 1;
    ULONG NonSecure : 1;
    ULONG AArch64 : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS {
    USHORT MultipleError : 1;
    USHORT Flags : 1;
    USHORT ErrorInformation : 1;
    USHORT VirtualFaultAddress : 1;
    USHORT PhysicalFaultAddress : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS {
    ULONG MPIDR : 1;
    ULONG AffinityLevel : 1;
    ULONG RunningState : 1;
    ULONG VendorSpecificInfo : 1;
    ULONG Reserved : 28;
    ULONG AsULONG;
};

typedef union _WHEA_ARM_TLB_ERROR_VALID_BITS {
    USHORT TransactionType : 1;
    USHORT Operation : 1;
    USHORT Level : 1;
    USHORT ProcessorContextCorrupt : 1;
    USHORT Corrected : 1;
    USHORT PrecisePC : 1;
    USHORT RestartablePC : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _WHEA_ERROR_INJECTION_CAPABILITIES {
    ULONG ProcessorCorrectable : 1;
    ULONG ProcessorUncorrectableNonFatal : 1;
    ULONG ProcessorUncorrectableFatal : 1;
    ULONG MemoryCorrectable : 1;
    ULONG MemoryUncorrectableNonFatal : 1;
    ULONG MemoryUncorrectableFatal : 1;
    ULONG PCIExpressCorrectable : 1;
    ULONG PCIExpressUncorrectableNonFatal : 1;
    ULONG PCIExpressUncorrectableFatal : 1;
    ULONG PlatformCorrectable : 1;
    ULONG PlatformUncorrectableNonFatal : 1;
    ULONG PlatformUncorrectableFatal : 1;
    ULONG IA64Corrected : 1;
    ULONG IA64Recoverable : 1;
    ULONG IA64Fatal : 1;
    ULONG IA64RecoverableCache : 1;
    ULONG IA64RecoverableRegFile : 1;
    ULONG Reserved : 15;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_PACKET_FLAGS {
    ULONG PreviousError : 1;
    ULONG Reserved1 : 1;
    ULONG HypervisorError : 1;
    ULONG Simulated : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved2 : 26;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
    ULONG Recovered : 1;
    ULONG PreviousError : 1;
    ULONG Simulated : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
    ULONG PlatformId : 1;
    ULONG Timestamp : 1;
    ULONG PartitionId : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
    ULONG Primary : 1;
    ULONG ContainmentWarning : 1;
    ULONG Reset : 1;
    ULONG ThresholdExceeded : 1;
    ULONG ResourceNotAvailable : 1;
    ULONG LatentError : 1;
    ULONG Propagated : 1;
    ULONG Reserved : 25;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
    UCHAR FRUId : 1;
    UCHAR FRUText : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _WHEA_ERROR_STATUS {
    ULONG64 ErrorStatus;
    ULONG64 Reserved1 : 8;
    ULONG64 ErrorType : 8;
    ULONG64 Address : 1;
    ULONG64 Control : 1;
    ULONG64 Data : 1;
    ULONG64 Responder : 1;
    ULONG64 Requester : 1;
    ULONG64 FirstError : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved2 : 41;
};

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS {
    ULONG Reserved : 32;
    ULONG AsULONG;
};

typedef union _WHEA_GENERIC_ERROR_BLOCKSTATUS {
    ULONG UncorrectableError : 1;
    ULONG CorrectableError : 1;
    ULONG MultipleUncorrectableErrors : 1;
    ULONG MultipleCorrectableErrors : 1;
    ULONG ErrorDataEntryCount : 10;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 PhysicalAddress : 1;
    ULONG64 PhysicalAddressMask : 1;
    ULONG64 Node : 1;
    ULONG64 Card : 1;
    ULONG64 Module : 1;
    ULONG64 Bank : 1;
    ULONG64 Device : 1;
    ULONG64 Row : 1;
    ULONG64 Column : 1;
    ULONG64 BitPosition : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 TargetId : 1;
    ULONG64 ErrorType : 1;
    ULONG64 RankNumber : 1;
    ULONG64 CardHandle : 1;
    ULONG64 ModuleHandle : 1;
    ULONG64 ExtendedRow : 1;
    ULONG64 BankGroup : 1;
    ULONG64 BankAddress : 1;
    ULONG64 ChipIdentification : 1;
    ULONG64 Reserved : 42;
    ULONG64 ValidBits;
};

typedef union _WHEA_NMI_ERROR_SECTION_FLAGS {
    ULONG HypervisorError : 1;
    ULONG Reserved : 31;
    ULONG AsULONG;
};

typedef union _WHEA_NOTIFICATION_FLAGS {
    USHORT PollIntervalRW : 1;
    USHORT SwitchToPollingThresholdRW : 1;
    USHORT SwitchToPollingWindowRW : 1;
    USHORT ErrorThresholdRW : 1;
    USHORT ErrorThresholdWindowRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS {
    USHORT BridgeSecondaryStatus;
    USHORT BridgeControl;
    ULONG AsULONG;
};

typedef union _WHEA_PCIEXPRESS_COMMAND_STATUS {
    USHORT Command;
    USHORT Status;
    ULONG AsULONG;
};

typedef union _WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS {
    ULONG64 PortType : 1;
    ULONG64 Version : 1;
    ULONG64 CommandStatus : 1;
    ULONG64 DeviceId : 1;
    ULONG64 DeviceSerialNumber : 1;
    ULONG64 BridgeControlStatus : 1;
    ULONG64 ExpressCapability : 1;
    ULONG64 AerInfo : 1;
    ULONG64 Reserved : 56;
    ULONG64 ValidBits;
};

typedef union _WHEA_PCIEXPRESS_VERSION {
    UCHAR MinorVersion;
    UCHAR MajorVersion;
    USHORT Reserved;
    ULONG AsULONG;
};

typedef union _WHEA_PCIXBUS_COMMAND {
    ULONG64 Command : 56;
    ULONG64 PCIXCommand : 1;
    ULONG64 Reserved : 7;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 ErrorType : 1;
    ULONG64 BusId : 1;
    ULONG64 BusAddress : 1;
    ULONG64 BusData : 1;
    ULONG64 BusCommand : 1;
    ULONG64 RequesterId : 1;
    ULONG64 CompleterId : 1;
    ULONG64 TargetId : 1;
    ULONG64 Reserved : 55;
    ULONG64 ValidBits;
};

typedef union _WHEA_PCIXBUS_ID {
    UCHAR BusNumber;
    UCHAR BusSegment;
    USHORT AsUSHORT;
};

typedef union _WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 IdInfo : 1;
    ULONG64 MemoryNumber : 1;
    ULONG64 IoNumber : 1;
    ULONG64 RegisterDataPairs : 1;
    ULONG64 Reserved : 59;
    ULONG64 ValidBits;
};

typedef union _WHEA_PERSISTENCE_INFO {
    ULONG64 Signature : 16;
    ULONG64 Length : 24;
    ULONG64 Identifier : 16;
    ULONG64 Attributes : 2;
    ULONG64 DoNotLog : 1;
    ULONG64 Reserved : 5;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_PROCESSOR_FAMILY_INFO {
    ULONG Stepping : 4;
    ULONG Model : 4;
    ULONG Family : 4;
    ULONG ProcessorType : 2;
    ULONG Reserved1 : 2;
    ULONG ExtendedModel : 4;
    ULONG ExtendedFamily : 8;
    ULONG Reserved2 : 4;
    ULONG Reserved3;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS {
    ULONG64 ProcessorType : 1;
    ULONG64 InstructionSet : 1;
    ULONG64 ErrorType : 1;
    ULONG64 Operation : 1;
    ULONG64 Flags : 1;
    ULONG64 Level : 1;
    ULONG64 CPUVersion : 1;
    ULONG64 CPUBrandString : 1;
    ULONG64 ProcessorId : 1;
    ULONG64 TargetAddress : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 InstructionPointer : 1;
    ULONG64 Reserved : 51;
    ULONG64 ValidBits;
};

typedef union _WHEA_REVISION {
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    USHORT AsUSHORT;
};

typedef union _WHEA_TIMESTAMP {
    ULONG64 Seconds : 8;
    ULONG64 Minutes : 8;
    ULONG64 Hours : 8;
    ULONG64 Precise : 1;
    ULONG64 Reserved : 7;
    ULONG64 Day : 8;
    ULONG64 Month : 8;
    ULONG64 Year : 8;
    ULONG64 Century : 8;
    union _LARGE_INTEGER AsLARGE_INTEGER;
};

typedef union _WHEA_XPF_BUS_CHECK {
    ULONG64 TransactionTypeValid : 1;
    ULONG64 OperationValid : 1;
    ULONG64 LevelValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ParticipationValid : 1;
    ULONG64 TimeoutValid : 1;
    ULONG64 AddressSpaceValid : 1;
    ULONG64 ReservedValid : 5;
    ULONG64 TransactionType : 2;
    ULONG64 Operation : 4;
    ULONG64 Level : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Participation : 2;
    ULONG64 Timeout : 1;
    ULONG64 AddressSpace : 2;
    ULONG64 Reserved : 29;
    ULONG64 XpfBusCheck;
};

typedef union _WHEA_XPF_CACHE_CHECK {
    ULONG64 TransactionTypeValid : 1;
    ULONG64 OperationValid : 1;
    ULONG64 LevelValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ReservedValid : 8;
    ULONG64 TransactionType : 2;
    ULONG64 Operation : 4;
    ULONG64 Level : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved : 34;
    ULONG64 XpfCacheCheck;
};

typedef union _WHEA_XPF_MS_CHECK {
    ULONG64 ErrorTypeValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ReservedValue : 10;
    ULONG64 ErrorType : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved : 40;
    ULONG64 XpfMsCheck;
};

typedef union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS {
    ULONG64 LocalAPICId : 1;
    ULONG64 CpuId : 1;
    ULONG64 ProcInfoCount : 6;
    ULONG64 ContextInfoCount : 6;
    ULONG64 Reserved : 50;
    ULONG64 ValidBits;
};

typedef union _WHEA_XPF_PROCINFO_VALIDBITS {
    ULONG64 CheckInfo : 1;
    ULONG64 TargetId : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 InstructionPointer : 1;
    ULONG64 Reserved : 59;
    ULONG64 ValidBits;
};

typedef union _WHEA_XPF_TLB_CHECK {
    ULONG64 TransactionTypeValid : 1;
    ULONG64 OperationValid : 1;
    ULONG64 LevelValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ReservedValid : 8;
    ULONG64 TransactionType : 2;
    ULONG64 Operation : 4;
    ULONG64 Level : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved : 34;
    ULONG64 XpfTLBCheck;
};

typedef union _XPF_MCE_FLAGS {
    ULONG MCG_CapabilityRW : 1;
    ULONG MCG_GlobalControlRW : 1;
    ULONG Reserved : 30;
    ULONG AsULONG;
};

typedef union _XPF_MC_BANK_FLAGS {
    UCHAR ClearOnInitializationRW : 1;
    UCHAR ControlDataRW : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _wIndex {
    UCHAR LowByte;
    UCHAR HiByte;
    USHORT W;
};

typedef union _wValue {
    UCHAR LowByte;
    UCHAR HiByte;
    USHORT W;
};

typedef union tagBINDPTR {
    struct tagFUNCDESC *lpfuncdesc;
    struct tagVARDESC *lpvardesc;
    struct ITypeComp *lptcomp;
};

typedef union tagCY {
    ULONG Lo;
    LONG Hi;
    LONG64 int64;
};

typedef enum AUX_SYSTEM_INFORMATION_CLASS {
    AuxSystemModuleInformation = 11,
    AuxSystemFirmwareTableInformation = 76
};

typedef enum AddInstanceAction {
    AddInstanceToTail = 0,
    AddInstanceToHead = 1
};

typedef enum BUS_QUERY_ID_TYPE {
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5
};

typedef enum CHARTYPE {
    CH_OTHER = 0,
    CH_PERCENT = 1,
    CH_DOT = 2,
    CH_STAR = 3,
    CH_ZERO = 4,
    CH_DIGIT = 5,
    CH_FLAG = 6,
    CH_SIZE = 7,
    CH_TYPE = 8
};

typedef enum COMPARTMENT_ID {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID = 1
};

typedef enum CancelIrpCompletionOwnership {
    CancelOwnershipUnclaimed = 0,
    CancelOwnershipClaimed = 1
};

typedef enum DEVICE_REGISTRY_PROPERTY {
    DevicePropertyDeviceDescription = 0,
    DevicePropertyHardwareID = 1,
    DevicePropertyCompatibleIDs = 2,
    DevicePropertyBootConfiguration = 3,
    DevicePropertyBootConfigurationTranslated = 4,
    DevicePropertyClassName = 5,
    DevicePropertyClassGuid = 6,
    DevicePropertyDriverKeyName = 7,
    DevicePropertyManufacturer = 8,
    DevicePropertyFriendlyName = 9,
    DevicePropertyLocationInformation = 10,
    DevicePropertyPhysicalDeviceObjectName = 11,
    DevicePropertyBusTypeGuid = 12,
    DevicePropertyLegacyBusType = 13,
    DevicePropertyBusNumber = 14,
    DevicePropertyEnumeratorName = 15,
    DevicePropertyAddress = 16,
    DevicePropertyUINumber = 17,
    DevicePropertyInstallState = 18,
    DevicePropertyRemovalPolicy = 19,
    DevicePropertyResourceRequirements = 20,
    DevicePropertyAllocatedResources = 21,
    DevicePropertyContainerID = 22
};

typedef enum DEVICE_TEXT_TYPE {
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1
};

typedef enum DISPLAYCONFIG_SCANLINE_ORDERING {
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1
};

typedef enum DMA_COMPLETION_STATUS {
    DmaComplete = 0,
    DmaAborted = 1,
    DmaError = 2,
    DmaCancelled = 3
};

typedef enum DynamicDispatchType {
    DynamicDispatchRead = 0,
    DynamicDispatchWrite = 1,
    DynamicDispatchIoctl = 2,
    DynamicDispatchInternalIoctl = 3,
    DynamicDispatchMax = 4
};

typedef enum ETW_COMPRESSION_RESUMPTION_MODE {
    EtwCompressionModeRestart = 0,
    EtwCompressionModeNoDisable = 1,
    EtwCompressionModeNoRestart = 2
};

typedef enum FXOBJECT_FLAGS {
    FXOBJECT_FLAGS_PASSIVE_CALLBACKS = 1,
    FXOBJECT_FLAGS_NODELETEDDI = 2,
    FXOBJECT_FLAGS_DELETECALLED = 4,
    FXOBJECT_FLAGS_COMMITTED = 8,
    FXOBJECT_FLAGS_PASSIVE_DISPOSE = 16,
    FXOBJECT_FLAGS_FORCE_DISPOSE_THREAD = 32,
    FXOBJECT_FLAGS_HAS_DEBUG = 128,
    FXOBJECT_FLAGS_EARLY_DISPOSED_EXT = 256,
    FXOBJECT_FLAGS_TRACE_STATE = 512,
    FXOBJECT_FLAGS_HAS_CLEANUP = 1024,
    FXOBJECT_FLAGS_DISPOSE_OVERRIDE = 2048
};

typedef enum FX_OBJECT_TYPES {
    FX_TYPE_OBJECT = 4096,
    FX_TYPE_DRIVER = 4097,
    FX_TYPE_DEVICE = 4098,
    FX_TYPE_QUEUE = 4099,
    FX_TYPE_WMI_PROVIDER = 4100,
    FX_TYPE_REG_KEY = 4102,
    FX_TYPE_STRING = 4103,
    FX_TYPE_REQUEST = 4104,
    FX_TYPE_LOOKASIDE = 4105,
    IFX_TYPE_MEMORY = 4106,
    FX_TYPE_IRPQUEUE = 4107,
    FX_TYPE_USEROBJECT = 4108,
    FX_TYPE_COLLECTION = 4110,
    FX_TYPE_RING_BUFFER = 4111,
    FX_TYPE_RING_BUFFER_READ_HEAD = 4112,
    FX_TYPE_VERIFIERLOCK = 4114,
    FX_TYPE_SYSTEMTHREAD = 4115,
    FX_TYPE_MP_DEVICE = 4116,
    FX_TYPE_DPC = 4117,
    FX_TYPE_RESOURCE_IO = 4118,
    FX_TYPE_RESOURCE_CM = 4119,
    FX_TYPE_FILEOBJECT = 4120,
    FX_TYPE_RELATED_DEVICE = 4129,
    FX_TYPE_MEMORY_PREALLOCATED = 4130,
    FX_TYPE_WAIT_LOCK = 4131,
    FX_TYPE_SPIN_LOCK = 4132,
    FX_TYPE_WORKITEM = 4133,
    FX_TYPE_CLEANUPLIST = 4134,
    FX_TYPE_INTERRUPT = 4135,
    FX_TYPE_TIMER = 4136,
    FX_TYPE_CHILD_LIST = 4137,
    FX_TYPE_DEVICE_BASE = 4144,
    FX_TYPE_SYSTEMWORKITEM = 4145,
    FX_TYPE_REQUEST_MEMORY = 4146,
    FX_TYPE_DISPOSELIST = 4147,
    FX_TYPE_WMI_INSTANCE = 4148,
    FX_TYPE_IO_RES_LIST = 4149,
    FX_TYPE_CM_RES_LIST = 4150,
    FX_TYPE_IO_RES_REQ_LIST = 4151,
    FX_TYPE_COMPANION_TARGET = 4152,
    FX_TYPE_COMPANION = 4153,
    FX_TYPE_TASK_QUEUE = 4160,
    FX_TYPE_PACKAGE_IO = 4352,
    FX_TYPE_PACKAGE_FDO = 4353,
    FX_TYPE_PACKAGE_PDO = 4354,
    FX_TYPE_WMI_IRP_HANDLER = 4355,
    FX_TYPE_PACKAGE_GENERAL = 4356,
    FX_TYPE_DEFAULT_IRP_HANDLER = 4357,
    FX_TYPE_WMI_TRACING_IRP_HANDLER = 4358,
    FX_TYPE_IO_TARGET = 4608,
    FX_TYPE_IO_TARGET_REMOTE = 4609,
    FX_TYPE_IO_TARGET_USB_DEVICE = 4610,
    FX_TYPE_IO_TARGET_USB_PIPE = 4611,
    FX_TYPE_USB_INTERFACE = 4612,
    FX_TYPE_IO_TARGET_SELF = 4613,
    FX_TYPE_DMA_ENABLER = 5120,
    FX_TYPE_DMA_TRANSACTION = 5121,
    FX_TYPE_COMMON_BUFFER = 5122,
    FX_TYPE_IASSOCIATE = 5377,
    FX_TYPE_IHASCALLBACKS = 5379,
    FX_TYPE_NONE = 0xffff
};

typedef enum FX_OBJECT_TYPES_BASE {
    FX_TYPES_BASE = 4096,
    FX_TYPES_PACKAGES_BASE = 4352,
    FX_TYPES_IO_TARGET_BASE = 4608,
    FX_ABSTRACT_TYPES_BASE = 4864,
    FX_TYPES_DMA_BASE = 5120,
    FX_TYPES_INTERFACES_BASE = 5376
};

typedef enum FX_VALIDATE_FUNCTIONS_FLAGS {
    FX_VALIDATE_OPTION_NONE_SPECIFIED = 0,
    FX_VALIDATE_OPTION_PARENT_NOT_ALLOWED = 1,
    FX_VALIDATE_OPTION_EXECUTION_LEVEL_ALLOWED = 2,
    FX_VALIDATE_OPTION_SYNCHRONIZATION_SCOPE_ALLOWED = 4,
    FX_VALIDATE_OPTION_ATTRIBUTES_REQUIRED = 8,
    FX_VALIDATE_OPTION_PARENT_REQUIRED_FLAG = 16,
    FX_VALIDATE_OPTION_PARENT_REQUIRED = 24
};

typedef enum FxChildListDescriptionState {
    DescriptionUnspecified = 0,
    DescriptionPresentNeedsInstantiation = 1,
    DescriptionInstantiatedHasObject = 2,
    DescriptionReportedMissing = 3,
    DescriptionNotPresent = 4
};

typedef enum FxChildListIteratorIndexValues {
    DescriptionIndex = 0,
    ModificationIndex = 1
};

typedef enum FxChildListModificationState {
    ModificationUnspecified = 0,
    ModificationInsert = 1,
    ModificationRemove = 2,
    ModificationRemoveNotify = 3,
    ModificationClone = 4,
    ModificationNeedsPnpRemoval = 5
};

typedef enum FxChildListReportedMissingCallbackState {
    CallbackStateUnspecified = 0,
    CallbackNeedsToBeInvoked = 1,
    CallbackInvoked = 2
};

typedef enum FxChildListScanTagStates {
    ScanTagUndefined = 0,
    ScanTagActive = 1,
    ScanTagCancelled = 2,
    ScanTagFinished = 3
};

typedef enum FxChildListState {
    ListUnlocked = 1,
    ListLockedForEnum = 2,
    ListLockedForParentRemove = 3
};

typedef enum FxChildListValues {
    FX_CHILD_LIST_MAX_RETRIES = 3
};

typedef enum FxCxCallbackCleanupAction {
    FxCxCleanupAfterPreOrClientFailure = 0,
    FxCxCleanupAfterPreFailure = 1
};

typedef enum FxCxCallbackProgress {
    FxCxCallbackProgressInitialized = 0,
    FxCxCallbackProgressClientCalled = 1,
    FxCxCallbackProgressClientSucceeded = 2,
    FxCxCallbackProgressMax = 3
};

typedef enum FxCxCallbackSubType {
    FxCxPreCallback = 0,
    FxCxPostCallback = 1,
    FxCxCleanupCallback = 2
};

typedef enum FxCxCallbackType {
    FxCxCallbackPrepareHardware = 0,
    FxCxCallbackD0Entry = 1,
    FxCxCallbackSmIoInit = 2,
    FxCxCallbackSmIoRestart = 3,
    FxCxCallbackReleaseHardware = 4,
    FxCxCallbackD0Exit = 5,
    FxCxCallbackSmIoSuspend = 6,
    FxCxCallbackSmIoFlush = 7,
    FxCxCallbackSmIoCleanup = 8,
    FxCxCallbackSurpriseRemoval = 9,
    FxCxCallbackMax = 10
};

typedef enum FxCxInvokeCallbackSubType {
    FxCxInvokePreCallback = 0,
    FxCxInvokePostCallback = 1
};

typedef enum FxDeviceCallbackFlags {
    FXDEVICE_CALLBACK_IN_PREPARE_HARDWARE = 1
};

typedef enum FxDeviceInfoFlags {
    DeviceInfoLineBasedLevelTriggeredInterrupt = 1,
    DeviceInfoLineBasedEdgeTriggeredInterrupt = 2,
    DeviceInfoMsiXOrSingleMsi22Interrupt = 4,
    DeviceInfoMsi22MultiMessageInterrupt = 8,
    DeviceInfoPassiveLevelInterrupt = 16,
    DeviceInfoDmaBusMaster = 32,
    DeviceInfoDmaSystem = 64,
    DeviceInfoDmaSystemDuplex = 128,
    DeviceInfoHasStaticChildren = 256,
    DeviceInfoHasDynamicChildren = 512,
    DeviceInfoIsUsingDriverWppRecorder = 1024
};

typedef enum FxDeviceInitType {
    FxDeviceInitTypeFdo = 0,
    FxDeviceInitTypePdo = 1,
    FxDeviceInitTypeControlDevice = 2,
    FxDeviceInitTypeCompanion = 3
};

typedef enum FxDevicePwrRequirementEvents {
    DprEventInvalid = 0,
    DprEventRegisteredWithPox = 1,
    DprEventUnregisteredWithPox = 2,
    DprEventPoxRequiresPower = 4,
    DprEventPoxDoesNotRequirePower = 8,
    DprEventDeviceGoingToDx = 16,
    DprEventDeviceReturnedToD0 = 32,
    DprEventNull = 255
};

typedef enum FxDevicePwrRequirementStates {
    DprInvalid = 0,
    DprUnregistered = 1,
    DprDevicePowerRequiredD0 = 2,
    DprDevicePowerNotRequiredD0 = 3,
    DprDevicePowerNotRequiredDx = 4,
    DprDevicePowerRequiredDx = 5,
    DprReportingDevicePowerAvailable = 6,
    DprWaitingForDevicePowerRequiredD0 = 7,
    DprMax = 8
};

typedef enum FxDeviceRemLockAction {
    FxDeviceRemLockNotRequired = 0,
    FxDeviceRemLockRequired = 1,
    FxDeviceRemLockTestValid = 2,
    FxDeviceRemLockOptIn = 3
};

typedef enum FxDmaCompletionType {
    FxDmaCompletionTypeFull = 1,
    FxDmaCompletionTypePartial = 2,
    FxDmaCompletionTypeAbort = 3
};

typedef enum FxDmaEnablerCallbacks {
    FxEvtDmaEnablerInvalid = 0,
    FxEvtDmaEnablerFill = 1,
    FxEvtDmaEnablerFlush = 2,
    FxEvtDmaEnablerEnable = 3,
    FxEvtDmaEnablerDisable = 4,
    FxEvtDmaEnablerSelfManagedIoStart = 5,
    FxEvtDmaEnablerSelfManagedIoStop = 6
};

typedef enum FxDmaPacketTransactionStatus {
    FxDmaPacketTransactionCompleted = 0,
    FxDmaPacketTransactionPending = 1
};

typedef enum FxDmaTransactionState {
    FxDmaTransactionStateInvalid = 0,
    FxDmaTransactionStateCreated = 1,
    FxDmaTransactionStateReserved = 2,
    FxDmaTransactionStateInitialized = 3,
    FxDmaTransactionStateTransfer = 4,
    FxDmaTransactionStateTransferCompleted = 5,
    FxDmaTransactionStateTransferFailed = 6,
    FxDmaTransactionStateReleased = 7,
    FxDmaTransactionStateDeleted = 8
};

typedef enum FxDriverObjectUmFlags {
};

typedef enum FxDuplexDmaDescriptionType {
    FxDuplexDmaDescriptionTypeRead = 0,
    FxDuplexDmaDescriptionTypeWrite = 1,
    FxDuplexDmaDescriptionTypeMax = 2
};

typedef enum FxEnhancedVerifierBitFlags {
    FxEnhancedVerifierCallbackIrqlAndCRCheck = 1,
    FxEnhancedVerifierForwardProgressFailAll = 0x10000,
    FxEnhancedVerifierForwardProgressFailRandom = 0x20000,
    FxEnhancedVerifierFunctionTableHookMask = 0xffff,
    FxEnhancedVerifierForwardProgressMask = 0xf0000,
    FxEnhancedVerifierPerformanceAnalysisMask = 0xf00000
};

typedef enum FxEventQueueFlags {
    FxEventQueueFlagWorkItemQueued = 1,
    FxEventQueueFlagClosed = 2,
    FxEventQueueFlagDelayDeletion = 4
};

typedef enum FxHandleFlags {
    FxHandleFlagIsOffset = 1,
    FxHandleFlagMask = 7
};

typedef enum FxIFRValues {
    FxIFRMinLogPages = 1,
    FxIFRMaxLogPages = 16,
    FxIFRAvgLogPages = 5,
    FxIFRMinLogSize = 4096,
    FxIFRMaxLogSize = 0x10000,
    FxIFRAvgLogSize = 20480,
    FxIFRMaxMessageSize = 256,
    FxIFRRecordSignature = 21068
};

typedef enum FxIoIteratorList {
    FxIoQueueIteratorListInvalid = 0,
    FxIoQueueIteratorListPowerOn = 1,
    FxIoQueueIteratorListPowerOff = 2
};

typedef enum FxIoQueueNodeType {
    FxIoQueueNodeTypeInvalid = 0,
    FxIoQueueNodeTypeQueue = 1,
    FxIoQueueNodeTypeBookmark = 2,
    FxIoQueueNodeTypeLast = 3
};

typedef enum FxIoQueuePowerState {
    FxIoQueuePowerInvalid = 0,
    FxIoQueuePowerOn = 1,
    FxIoQueuePowerOff = 2,
    FxIoQueuePowerStartingTransition = 3,
    FxIoQueuePowerStopping = 4,
    FxIoQueuePowerStoppingNotifyingDriver = 5,
    FxIoQueuePowerStoppingDriverNotified = 6,
    FxIoQueuePowerPurge = 7,
    FxIoQueuePowerPurgeNotifyingDriver = 8,
    FxIoQueuePowerPurgeDriverNotified = 9,
    FxIoQueuePowerRestarting = 10,
    FxIoQueuePowerRestartingNotifyingDriver = 11,
    FxIoQueuePowerRestartingDriverNotified = 12,
    FxIoQueuePowerLast = 13
};

typedef enum FxIoStopProcessingForPowerAction {
    FxIoStopProcessingForPowerHold = 1,
    FxIoStopProcessingForPowerPurgeManaged = 2,
    FxIoStopProcessingForPowerPurgeNonManaged = 3
};

typedef enum FxIoTargetRemoteCloseReason {
    FxIoTargetRemoteCloseReasonQueryRemove = 1,
    FxIoTargetRemoteCloseReasonPlainClose = 2,
    FxIoTargetRemoteCloseReasonDelete = 3
};

typedef enum FxIoTargetRemoteOpenState {
    FxIoTargetRemoteOpenStateClosed = 1,
    FxIoTargetRemoteOpenStateOpening = 2,
    FxIoTargetRemoteOpenStateOpen = 3
};

typedef enum FxIrpDynamicDispatchInfo::DynamicDispatchType {
    DynamicDispatchRead = 0,
    DynamicDispatchWrite = 1,
    DynamicDispatchIoctl = 2,
    DynamicDispatchInternalIoctl = 3,
    DynamicDispatchMax = 4
};

typedef enum FxListEntryNames {
    FxListEntryNameCleanup = 0,
    FxListEntryQueueOwned = 1,
    FxListEntryDriverOwned = 2,
    FxListEntryForwardProgress = 3
};

typedef enum FxListTransactionAction {
    FxTransactionActionNothing = 1,
    FxTransactionActionAdd = 2,
    FxTransactionActionRemove = 3
};

typedef enum FxMachineSleepStates {
    FxMachineS1Index = 0,
    FxMachineS2Index = 1,
    FxMachineS3Index = 2,
    FxMachineSleepStatesMax = 3
};

typedef enum FxObjectDebugExtensionValues {
    FxObjectDebugExtensionSize = 48,
    FxObjectDebugExtensionSignature = 0x444f7846
};

typedef enum FxObjectDebugInfoFlags {
    FxObjectDebugTrackReferences = 1,
    FxObjectDebugTrackObjectCount = 2
};

typedef enum FxObjectDroppedEvent {
    FxObjectDroppedEventAssignParentObject = 0,
    FxObjectDroppedEventAddChildObjectInternal = 1,
    FxObjectDroppedEventRemoveChildObjectInternal = 2,
    FxObjectDroppedEventDeleteObject = 3,
    FxObjectDroppedEventPerformEarlyDispose = 4,
    FxObjectDroppedEventRemoveParentAssignment = 5,
    FxObjectDroppedEventParentDeleteEvent = 6
};

typedef enum FxObjectLockState {
    ObjectDoNotLock = 0,
    ObjectLock = 1
};

typedef enum FxObjectState {
    FxObjectStateInvalid = 0,
    FxObjectStateCreated = 1,
    FxObjectStateDisposed = 2,
    FxObjectStateDisposingEarly = 3,
    FxObjectStateDisposingDisposeChildren = 4,
    FxObjectStateDeferedDisposing = 5,
    FxObjectStateDeferedDeleting = 6,
    FxObjectStateWaitingForEarlyDispose = 7,
    FxObjectStateWaitingForParentDeleteAndDisposed = 8,
    FxObjectStateDeletedDisposing = 9,
    FxObjectStateDeletedAndDisposed = 10,
    FxObjectStateDeferedDestroy = 11,
    FxObjectStateDestroyed = 12,
    FxObjectStateMaximum = 13
};

typedef enum FxObjectType {
    FxObjectTypeInvalid = 0,
    FxObjectTypeInternal = 1,
    FxObjectTypeExternal = 2,
    FxObjectTypeEmbedded = 3
};

typedef enum FxPnpEvent {
    PnpEventInvalid = 0,
    PnpEventAddDevice = 1,
    PnpEventStartDevice = 2,
    PnpEventStartDeviceComplete = 4,
    PnpEventStartDeviceFailed = 8,
    PnpEventQueryRemove = 16,
    PnpEventQueryStop = 32,
    PnpEventCancelRemove = 64,
    PnpEventCancelStop = 128,
    PnpEventStop = 256,
    PnpEventRemove = 512,
    PnpEventSurpriseRemove = 1024,
    PnpEventEject = 2048,
    PnpEventPwrPolStopped = 4096,
    PnpEventPwrPolStopFailed = 8192,
    PnpEventPowerUpFailed = 16384,
    PnpEventPowerDownFailed = 0x8000,
    PnpEventParentRemoved = 0x10000,
    PnpEventChildrenRemovalComplete = 0x20000,
    PnpEventPwrPolStarted = 0x40000,
    PnpEventPwrPolStartFailed = 0x80000,
    PnpEventDeviceInD0 = 0x100000,
    PnpEventPwrPolRemoved = 0x200000,
    PnpEventPending = 3572,
    PnpPriorityEventsMask = 0x3c3000,
    PnpEventNull = -1
};

typedef enum FxPnpStateAndCapValues {
    FxPnpStateDisabledFalse = 0,
    FxPnpStateDisabledTrue = 1,
    FxPnpStateDisabledUseDefault = 2,
    FxPnpStateDisabledMask = 3,
    FxPnpStateDontDisplayInUIFalse = 0,
    FxPnpStateDontDisplayInUITrue = 4,
    FxPnpStateDontDisplayInUIUseDefault = 8,
    FxPnpStateDontDisplayInUIMask = 12,
    FxPnpStateFailedFalse = 0,
    FxPnpStateFailedTrue = 16,
    FxPnpStateFailedUseDefault = 32,
    FxPnpStateFailedMask = 48,
    FxPnpStateNotDisableableFalse = 0,
    FxPnpStateNotDisableableTrue = 64,
    FxPnpStateNotDisableableUseDefault = 128,
    FxPnpStateNotDisableableMask = 192,
    FxPnpStateRemovedFalse = 0,
    FxPnpStateRemovedTrue = 256,
    FxPnpStateRemovedUseDefault = 512,
    FxPnpStateRemovedMask = 768,
    FxPnpStateResourcesChangedFalse = 0,
    FxPnpStateResourcesChangedTrue = 1024,
    FxPnpStateResourcesChangedUseDefault = 2048,
    FxPnpStateResourcesChangedMask = 3072,
    FxPnpStateMask = 4095,
    FxPnpCapLockSupportedFalse = 0,
    FxPnpCapLockSupportedTrue = 4096,
    FxPnpCapLockSupportedUseDefault = 8192,
    FxPnpCapLockSupportedMask = 12288,
    FxPnpCapEjectSupportedFalse = 0,
    FxPnpCapEjectSupportedTrue = 16384,
    FxPnpCapEjectSupportedUseDefault = 0x8000,
    FxPnpCapEjectSupportedMask = 0xc000,
    FxPnpCapRemovableFalse = 0,
    FxPnpCapRemovableTrue = 0x10000,
    FxPnpCapRemovableUseDefault = 0x20000,
    FxPnpCapRemovableMask = 0x30000,
    FxPnpCapDockDeviceFalse = 0,
    FxPnpCapDockDeviceTrue = 0x40000,
    FxPnpCapDockDeviceUseDefault = 0x80000,
    FxPnpCapDockDeviceMask = 0xc0000,
    FxPnpCapUniqueIDFalse = 0,
    FxPnpCapUniqueIDTrue = 0x100000,
    FxPnpCapUniqueIDUseDefault = 0x200000,
    FxPnpCapUniqueIDMask = 0x300000,
    FxPnpCapSilentInstallFalse = 0,
    FxPnpCapSilentInstallTrue = 0x400000,
    FxPnpCapSilentInstallUseDefault = 0x800000,
    FxPnpCapSilentInstallMask = 0xc00000,
    FxPnpCapSurpriseRemovalOKFalse = 0,
    FxPnpCapSurpriseRemovalOKTrue = 0x1000000,
    FxPnpCapSurpriseRemovalOKUseDefault = 0x2000000,
    FxPnpCapSurpriseRemovalOKMask = 0x3000000,
    FxPnpCapHardwareDisabledFalse = 0,
    FxPnpCapHardwareDisabledTrue = 0x4000000,
    FxPnpCapHardwareDisabledUseDefault = 0x8000000,
    FxPnpCapHardwareDisabledMask = 0xc000000,
    FxPnpCapNoDisplayInUIFalse = 0,
    FxPnpCapNoDisplayInUITrue = 0x10000000,
    FxPnpCapNoDisplayInUIUseDefault = 0x20000000,
    FxPnpCapNoDisplayInUIMask = 0x30000000,
    FxPnpCapMask = 0x3ffff000
};

typedef enum FxPowerCapValues {
    FxPowerCapDeviceD1False = 0,
    FxPowerCapDeviceD1True = 1,
    FxPowerCapDeviceD1UseDefault = 2,
    FxPowerCapDeviceD1Mask = 3,
    FxPowerCapDeviceD2False = 0,
    FxPowerCapDeviceD2True = 4,
    FxPowerCapDeviceD2UseDefault = 8,
    FxPowerCapDeviceD2Mask = 12,
    FxPowerCapWakeFromD0False = 0,
    FxPowerCapWakeFromD0True = 16,
    FxPowerCapWakeFromD0UseDefault = 32,
    FxPowerCapWakeFromD0Mask = 48,
    FxPowerCapWakeFromD1False = 0,
    FxPowerCapWakeFromD1True = 64,
    FxPowerCapWakeFromD1UseDefault = 128,
    FxPowerCapWakeFromD1Mask = 192,
    FxPowerCapWakeFromD2False = 0,
    FxPowerCapWakeFromD2True = 256,
    FxPowerCapWakeFromD2UseDefault = 512,
    FxPowerCapWakeFromD2Mask = 768,
    FxPowerCapWakeFromD3False = 0,
    FxPowerCapWakeFromD3True = 1024,
    FxPowerCapWakeFromD3UseDefault = 2048,
    FxPowerCapWakeFromD3Mask = 3072
};

typedef enum FxPowerDownType {
    FxPowerDownTypeExplicit = 0,
    FxPowerDownTypeImplicit = 1
};

typedef enum FxPowerEvent {
    PowerEventInvalid = 0,
    PowerD0 = 1,
    PowerDx = 2,
    PowerWakeArrival = 4,
    PowerWakeSucceeded = 8,
    PowerWakeFailed = 16,
    PowerWakeCanceled = 32,
    PowerImplicitD0 = 64,
    PowerImplicitD3 = 128,
    PowerParentToD0 = 256,
    PowerMarkPageable = 512,
    PowerMarkNonpageable = 1024,
    PowerCompleteD0 = 2048,
    PowerCompleteDx = 4096,
    PowerWakeInterruptCompleteTransition = 8192,
    PowerPriorityEventsMask = 14592,
    PowerSingularEventMask = 256,
    PowerEventMaximum = -1
};

typedef enum FxPowerIdleEvents {
    PowerIdleEventPowerUpFailed = 2,
    PowerIdleEventPowerUpComplete = 4,
    PowerIdleEventPowerDown = 8,
    PowerIdleEventPowerDownFailed = 16,
    PowerIdleEventTimerExpired = 32,
    PowerIdleEventEnabled = 64,
    PowerIdleEventDisabled = 128,
    PowerIdleEventIoDecrement = 256,
    PowerIdleEventIoIncrement = 512,
    PowerIdleEventStart = 1024,
    PowerIdleEventStop = 2048,
    PowerIdleNull = 0
};

typedef enum FxPowerIdleFlags {
    FxPowerIdleTimerEnabled = 1,
    FxPowerIdleInDx = 2,
    FxPowerIdleTimerCanceled = 4,
    FxPowerIdleTimerStarted = 8,
    FxPowerIdlePowerFailed = 16,
    FxPowerIdleIsStarted = 32,
    FxPowerIdleIoPresentSent = 64,
    FxPowerIdleSendPnpPowerUpEvent = 128
};

typedef enum FxPowerIdleStates {
    FxIdleStopped = 1,
    FxIdleStarted = 2,
    FxIdleStartedPowerUp = 3,
    FxIdleStartedPowerFailed = 4,
    FxIdleDisabled = 5,
    FxIdleCheckIoCount = 6,
    FxIdleBusy = 7,
    FxIdleDecrementIo = 8,
    FxIdleStartTimer = 9,
    FxIdleTimerRunning = 10,
    FxIdleTimingOut = 11,
    FxIdleTimedOut = 12,
    FxIdleTimedOutIoIncrement = 13,
    FxIdleTimedOutPowerDown = 14,
    FxIdleTimedOutPowerDownFailed = 15,
    FxIdleGoingToDx = 16,
    FxIdleInDx = 17,
    FxIdleInDxIoIncrement = 18,
    FxIdleInDxPowerUpFailure = 19,
    FxIdleInDxStopped = 20,
    FxIdleInDxDisabled = 21,
    FxIdleInDxEnabled = 22,
    FxIdlePowerUp = 23,
    FxIdlePowerUpComplete = 24,
    FxIdleTimedOutDisabled = 25,
    FxIdleTimedOutEnabled = 26,
    FxIdleCancelTimer = 27,
    FxIdleWaitForTimeout = 28,
    FxIdleTimerExpired = 29,
    FxIdleDisabling = 30,
    FxIdleDisablingWaitForTimeout = 31,
    FxIdleDisablingTimerExpired = 32,
    FxIdlePowerFailedWaitForTimeout = 33,
    FxIdlePowerFailed = 34,
    FxIdleMax = 35
};

typedef enum FxPowerPolicyConstants {
    FxPowerPolicyNoTimeout = 0,
    FxPowerPolicyDefaultTimeout = 5000
};

typedef enum FxPowerPolicyEvent {
    PwrPolInvalid = 0,
    PwrPolStart = 1,
    PwrPolStop = 2,
    PwrPolSx = 4,
    PwrPolS0 = 8,
    PwrPolPowerDown = 16,
    PwrPolPowerUp = 32,
    PwrPolPowerDownIoStopped = 64,
    PwrPolPowerUpHwStarted = 128,
    PwrPolWakeArrived = 256,
    PwrPolWakeSuccess = 512,
    PwrPolWakeFailed = 1024,
    PwrPolIoPresent = 2048,
    PwrPolPowerTimeoutExpired = 4096,
    PwrPolS0IdlePolicyChanged = 8192,
    PwrPolSurpriseRemove = 16384,
    PwrPolUsbSelectiveSuspendCallback = 0x8000,
    PwrPolUsbSelectiveSuspendCompleted = 0x10000,
    PwrPolPowerDownFailed = 0x20000,
    PwrPolPowerUpFailed = 0x40000,
    PwrPolImplicitPowerDown = 0x80000,
    PwrPolImplicitPowerDownFailed = 0x100000,
    PwrPolPowerUpNotSeen = 0x200000,
    PwrPolDevicePowerNotRequired = 0x400000,
    PwrPolDevicePowerRequired = 0x800000,
    PwrPolRemove = 0x1000000,
    PwrPolWakeInterruptFired = 0x2000000,
    PwrPolPriorityEventsMask = 0x23f07f0,
    PwrPolNotOwnerPriorityEventsMask = 0x60030,
    PowerPolSingularEventMask = 0x2002000,
    PwrPolNull = -1
};

typedef enum FxPowerPolicySxWakeSettingsFlags {
    FxPowerPolicySxWakeDeviceEnabledFlag = 1,
    FxPowerPolicySxWakeChildrenArmedFlag = 2
};

typedef enum FxPowerReferenceFlags {
    FxPowerReferenceDefault = 0,
    FxPowerReferenceSendPnpPowerUpEvent = 1
};

typedef enum FxPropertyType {
    FxDeviceProperty = 0,
    FxInterfaceProperty = 1
};

typedef enum FxRelatedDeviceState {
    RelatedDeviceStateUnspecified = 0,
    RelatedDeviceStateNeedsReportPresent = 1,
    RelatedDeviceStateReportedPresent = 2,
    RelatedDeviceStateNeedsReportMissing = 3
};

typedef enum FxRequestAllocationSource {
    REQUEST_ALLOCATED_FROM_IO = 0,
    REQUEST_ALLOCATED_INTERNAL = 1,
    REQUEST_ALLOCATED_DRIVER = 2
};

typedef enum FxRequestBaseFlags {
    FxRequestBaseSystemMdlMapped = 1,
    FxRequestBaseOutputMdlMapped = 2,
    FxRequestBaseSyncCleanupContext = 16
};

typedef enum FxRequestBaseStaticFlags {
    FxRequestBaseStaticSystemBufferValid = 1,
    FxRequestBaseStaticOutputBufferValid = 2
};

typedef enum FxRequestBufferType {
    FxRequestBufferUnspecified = 0,
    FxRequestBufferMemory = 1,
    FxRequestBufferMdl = 2,
    FxRequestBufferBuffer = 3,
    FxRequestBufferReferencedMdl = 4
};

typedef enum FxRequestCompletionState {
    FxRequestCompletionStateIoPkgFlag = 128,
    FxRequestCompletionStateNone = 0,
    FxRequestCompletionStateQueue = 1,
    FxRequestCompletionStateIoPkg = 130
};

typedef enum FxRequestConstructorCaller {
    FxRequestConstructorCallerIsFx = 1,
    FxRequestConstructorCallerIsDriver = 2
};

typedef enum FxRequestContextTypes {
    FX_REQUEST_CONTEXT_TYPE_NONE = 0,
    FX_RCT_IO = 1,
    FX_RCT_INTERNAL_IOCTL_OTHERS = 2,
    FX_RCT_USB_PIPE_XFER = 16,
    FX_RCT_USB_URB_REQUEST = 17,
    FX_RCT_USB_PIPE_REQUEST = 18,
    FX_RCT_USB_CONTROL_REQUEST = 19,
    FX_RCT_USB_STRING_REQUEST = 20
};

typedef enum FxRequestIrpOwnership {
    FxRequestOwnsIrp = 1,
    FxRequestDoesNotOwnIrp = 2
};

typedef enum FxRequestPowerStopState {
    FxRequestPowerStopUnknown = 0,
    FxRequestPowerStopAcknowledged = 1,
    FxRequestPowerStopAcknowledgedWithRequeue = 2
};

typedef enum FxRequestTargetFlags {
    FX_REQUEST_COMPLETED = 1,
    FX_REQUEST_PENDED = 2,
    FX_REQUEST_TIMER_SET = 4,
    FX_REQUEST_CANCELLED_FROM_TIMER = 8,
    FX_REQUEST_IGNORE_STATE = 16
};

typedef enum FxRequestVerifierFlags {
    FXREQUEST_FLAG_DRIVER_OWNED = 1,
    FXREQUEST_FLAG_TAG_REQUEST = 2,
    FXREQUEST_FLAG_FORWARDED = 4,
    FXREQUEST_FLAG_DRIVER_DISPATCH = 8,
    FXREQUEST_FLAG_DRIVER_CANCELABLE = 16,
    FXREQUEST_FLAG_DRIVER_INPROCESS_CONTEXT = 32,
    FXREQUEST_FLAG_CANCELLED = 64,
    FXREQUEST_FLAG_FORMATTED = 128,
    FXREQUEST_FLAG_SENT_TO_TARGET = 256,
    FXREQUEST_FLAG_DRIVER_IN_EVTIOSTOP_CONTEXT = 512,
    FXREQUEST_FLAG_RESERVED_REQUEST_ASSOCIATED_WITH_IRP = 1024
};

typedef enum FxResourceAccessFlags {
    FxResourceNoAccess = 0,
    FxResourceAddAllowed = 1,
    FxResourceRemoveAllowed = 2,
    FxResourceAllAccessAllowed = 3
};

typedef enum FxSelfManagedIoEvents {
    SelfManagedIoEventInvalid = 0,
    SelfManagedIoEventStart = 1,
    SelfManagedIoEventCleanup = 2,
    SelfManagedIoEventSuspend = 4,
    SelfManagedIoEventFlush = 8,
    SelfManagedIoEventNull = 255
};

typedef enum FxSelfManagedIoStates {
    FxSelfManagedIoInvalid = 0,
    FxSelfManagedIoCreated = 1,
    FxSelfManagedIoInit = 2,
    FxSelfManagedIoInitFailed = 3,
    FxSelfManagedIoInitStartedFailedPost = 4,
    FxSelfManagedIoStarted = 5,
    FxSelfManagedIoSuspending = 6,
    FxSelfManagedIoStopped = 7,
    FxSelfManagedIoRestarting = 8,
    FxSelfManagedIoRestartedFailedPost = 9,
    FxSelfManagedIoFailed = 10,
    FxSelfManagedIoFlushing = 11,
    FxSelfManagedIoFlushed = 12,
    FxSelfManagedIoCleanup = 13,
    FxSelfManagedIoFinal = 14,
    FxSelfManagedIoMax = 15
};

typedef enum FxTagRefType {
    TagAddRef = 0,
    TagRelease = 1
};

typedef enum FxTagTrackerType {
    FxTagTrackerTypeHandle = 0,
    FxTagTrackerTypePower = 1
};

typedef enum FxTrackPowerOption {
    FxTrackPowerNone = 0,
    FxTrackPowerRefs = 1,
    FxTrackPowerRefsAndStack = 2,
    FxTrackPowerMaxValue = 3
};

typedef enum FxUsbPipeMaxTransferSize {
    FxUsbPipeHighSpeedMaxTransferSize = 0x200000,
    FxUsbPipeLowSpeedMaxTransferSize = 0x40000,
    FxUsbPipeControlMaxTransferSize = 4096
};

typedef enum FxUsbValidateDescriptorOp {
    FxUsbValidateDescriptorOpEqual = 0,
    FxUsbValidateDescriptorOpAtLeast = 1
};

typedef enum FxValidateMemoryDescriptorFlags {
    MemoryDescriptorNullAllowed = 1,
    MemoryDescriptorNoBufferAllowed = 2
};

typedef enum FxVerifierDownlevelOption {
    NotOkForDownLevel = 0,
    OkForDownLevel = 1
};

typedef enum FxWakeInterruptEvents {
    WakeInterruptEventInvalid = 0,
    WakeInterruptEventIsr = 1,
    WakeInterruptEventEnteringD0 = 2,
    WakeInterruptEventLeavingD0 = 4,
    WakeInterruptEventD0EntryFailed = 8,
    WakeInterruptEventLeavingD0NotArmedForWake = 16,
    WakeInterruptEventNull = 255
};

typedef enum FxWakeInterruptStates {
    WakeInterruptInvalid = 0,
    WakeInterruptFailed = 1,
    WakeInterruptD0 = 2,
    WakeInterruptDx = 3,
    WakeInterruptWaking = 4,
    WakeInterruptInvokingEvtIsrPostWake = 5,
    WakeInterruptCompletingD0 = 6,
    WakeInterruptInvokingEvtIsrInD0 = 7,
    WakeInterruptDxNotArmedForWake = 8,
    WakeInterruptInvokingEvtIsrInDxNotArmedForWake = 9,
    WakeInterruptMax = 10
};

typedef enum FxWmiInstanceAction {
    InstanceActionInvalid = 0,
    AddInstance = 1,
    RemoveInstance = 2
};

typedef enum FxWmiIrpHandler::WmiRegisteredState {
    WmiUnregistered = 0,
    WmiRegistered = 1,
    WmiDeregistered = 2,
    WmiCleanedUp = 3
};

typedef enum FxWmiProvider::AddInstanceAction {
    AddInstanceToTail = 0,
    AddInstanceToHead = 1
};

typedef enum HAL_APIC_DESTINATION_MODE {
    ApicDestinationModePhysical = 1,
    ApicDestinationModeLogicalFlat = 2,
    ApicDestinationModeLogicalClustered = 3,
    ApicDestinationModeUnknown = 4
};

typedef enum IFxMemoryFlags {
    IFxMemoryFlagReadOnly = 1
};

typedef enum IdleTimeoutManagement::IdleTimeoutStatusFlag {
    IdleTimeoutStatusFrozen = 1,
    IdleTimeoutSystemManaged = 2,
    IdleTimeoutPoxSettingsSpecified = 4
};

typedef enum IdleTimeoutManagement::IdleTimeoutStatusUpdateResult {
    IdleTimeoutStatusFlagsUpdated = 0,
    IdleTimeoutStatusFlagAlreadySet = 1,
    IdleTimeoutStatusFlagsAlreadyFrozen = 2,
    IdleTimeoutStatusFlagsUnexpected = 3
};

typedef enum IdleTimeoutStatusFlag {
    IdleTimeoutStatusFrozen = 1,
    IdleTimeoutSystemManaged = 2,
    IdleTimeoutPoxSettingsSpecified = 4
};

typedef enum IdleTimeoutStatusUpdateResult {
    IdleTimeoutStatusFlagsUpdated = 0,
    IdleTimeoutStatusFlagAlreadySet = 1,
    IdleTimeoutStatusFlagsAlreadyFrozen = 2,
    IdleTimeoutStatusFlagsUnexpected = 3
};

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
};

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
};

typedef enum KD_CALLBACK_ACTION {
    KdConfigureDeviceAndContinue = 0,
    KdSkipDeviceAndContinue = 1,
    KdConfigureDeviceAndStop = 2,
    KdSkipDeviceAndStop = 3
};

typedef enum KD_NAMESPACE_ENUM {
    KdNameSpacePCI = 0,
    KdNameSpaceACPI = 1,
    KdNameSpaceAny = 2,
    KdNameSpaceNone = 3,
    KdNameSpaceMax = 4
};

typedef enum KE_PROCESSOR_CHANGE_NOTIFY_STATE {
    KeProcessorAddStartNotify = 0,
    KeProcessorAddCompleteNotify = 1,
    KeProcessorAddFailureNotify = 2
};

typedef enum LATENCY_TIME {
    LT_DONT_CARE = 0,
    LT_LOWEST_LATENCY = 1
};

typedef enum MCA_EXCEPTION_TYPE {
    HAL_MCE_RECORD = 0,
    HAL_MCA_RECORD = 1
};

typedef enum MEM_EXTENDED_PARAMETER_TYPE {
    MemExtendedParameterInvalidType = 0,
    MemExtendedParameterAddressRequirements = 1,
    MemExtendedParameterNumaNode = 2,
    MemExtendedParameterPartitionHandle = 3,
    MemExtendedParameterUserPhysicalHandle = 4,
    MemExtendedParameterAttributeFlags = 5,
    MemExtendedParameterMax = 6
};

typedef enum MEM_SECTION_EXTENDED_PARAMETER_TYPE {
    MemSectionExtendedParameterInvalidType = 0,
    MemSectionExtendedParameterUserPhysicalFlags = 1,
    MemSectionExtendedParameterNumaNode = 2,
    MemSectionExtendedParameterMax = 3
};

typedef enum NotifyResourcesFlags {
    NotifyResourcesNoFlags = 0,
    NotifyResourcesNP = 1,
    NotifyResourcesSurpriseRemoved = 2,
    NotifyResourcesForceDisconnect = 4,
    NotifyResourcesExplicitPowerup = 8,
    NotifyResourcesExplicitPowerDown = 16,
    NotifyResourcesDisconnectInactive = 32,
    NotifyResourcesArmedForWake = 64
};

typedef enum OS_SID_VER {
    WIN2K_OR_LATER = 0,
    WINXP_OR_LATER = 1
};

typedef enum PCI_BUS_WIDTH {
    BusWidth32Bits = 0,
    BusWidth64Bits = 1
};

typedef enum PCI_EXPRESS_ASPM_CONTROL {
    L0sAndL1EntryDisabled = 0,
    L0sEntryEnabled = 1,
    L1EntryEnabled = 2,
    L0sAndL1EntryEnabled = 3
};

typedef enum PCI_EXPRESS_ASPM_SUPPORT {
    NoAspmSupport = 0,
    L0sEntrySupport = 1,
    L1EntrySupport = 2,
    L0sAndL1EntrySupport = 3
};

typedef enum PCI_EXPRESS_CARD_PRESENCE {
    SlotEmpty = 0,
    CardPresent = 1
};

typedef enum PCI_EXPRESS_DEVICE_TYPE {
    PciExpressEndpoint = 0,
    PciExpressLegacyEndpoint = 1,
    PciExpressRootPort = 4,
    PciExpressUpstreamSwitchPort = 5,
    PciExpressDownstreamSwitchPort = 6,
    PciExpressToPciXBridge = 7,
    PciXToExpressBridge = 8,
    PciExpressRootComplexIntegratedEndpoint = 9,
    PciExpressRootComplexEventCollector = 10
};

typedef enum PCI_EXPRESS_INDICATOR_STATE {
    IndicatorOn = 1,
    IndicatorBlink = 2,
    IndicatorOff = 3
};

typedef enum PCI_EXPRESS_L0s_EXIT_LATENCY {
    L0s_Below64ns = 0,
    L0s_64ns_128ns = 1,
    L0s_128ns_256ns = 2,
    L0s_256ns_512ns = 3,
    L0s_512ns_1us = 4,
    L0s_1us_2us = 5,
    L0s_2us_4us = 6,
    L0s_Above4us = 7
};

typedef enum PCI_EXPRESS_L1_EXIT_LATENCY {
    L1_Below1us = 0,
    L1_1us_2us = 1,
    L1_2us_4us = 2,
    L1_4us_8us = 3,
    L1_8us_16us = 4,
    L1_16us_32us = 5,
    L1_32us_64us = 6,
    L1_Above64us = 7
};

typedef enum PCI_EXPRESS_MAX_PAYLOAD_SIZE {
    MaxPayload128Bytes = 0,
    MaxPayload256Bytes = 1,
    MaxPayload512Bytes = 2,
    MaxPayload1024Bytes = 3,
    MaxPayload2048Bytes = 4,
    MaxPayload4096Bytes = 5
};

typedef enum PCI_EXPRESS_MRL_STATE {
    MRLClosed = 0,
    MRLOpen = 1
};

typedef enum PCI_EXPRESS_POWER_STATE {
    PowerOn = 0,
    PowerOff = 1
};

typedef enum PIDESCRIPTOR_STATE {
    NOT_VALIDATED = 0,
    VALIDATED_SUCCESSFULLY = 1,
    VALIDATED_UNSUCCESSFULLY = 2
};

typedef enum PIDMSI_STATUS_VALUE {
    PIDMSI_STATUS_NORMAL = 0,
    PIDMSI_STATUS_NEW = 1,
    PIDMSI_STATUS_PRELIM = 2,
    PIDMSI_STATUS_DRAFT = 3,
    PIDMSI_STATUS_INPROGRESS = 4,
    PIDMSI_STATUS_EDIT = 5,
    PIDMSI_STATUS_REVIEW = 6,
    PIDMSI_STATUS_PROOF = 7,
    PIDMSI_STATUS_FINAL = 8,
    PIDMSI_STATUS_OTHER = 32767
};

typedef enum POWER_ACTION {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8
};

typedef enum POWER_INFORMATION_LEVEL {
    SystemPowerPolicyAc = 0,
    SystemPowerPolicyDc = 1,
    VerifySystemPolicyAc = 2,
    VerifySystemPolicyDc = 3,
    SystemPowerCapabilities = 4,
    SystemBatteryState = 5,
    SystemPowerStateHandler = 6,
    ProcessorStateHandler = 7,
    SystemPowerPolicyCurrent = 8,
    AdministratorPowerPolicy = 9,
    SystemReserveHiberFile = 10,
    ProcessorInformation = 11,
    SystemPowerInformation = 12,
    ProcessorStateHandler2 = 13,
    LastWakeTime = 14,
    LastSleepTime = 15,
    SystemExecutionState = 16,
    SystemPowerStateNotifyHandler = 17,
    ProcessorPowerPolicyAc = 18,
    ProcessorPowerPolicyDc = 19,
    VerifyProcessorPowerPolicyAc = 20,
    VerifyProcessorPowerPolicyDc = 21,
    ProcessorPowerPolicyCurrent = 22,
    SystemPowerStateLogging = 23,
    SystemPowerLoggingEntry = 24,
    SetPowerSettingValue = 25,
    NotifyUserPowerSetting = 26,
    PowerInformationLevelUnused0 = 27,
    SystemMonitorHiberBootPowerOff = 28,
    SystemVideoState = 29,
    TraceApplicationPowerMessage = 30,
    TraceApplicationPowerMessageEnd = 31,
    ProcessorPerfStates = 32,
    ProcessorIdleStates = 33,
    ProcessorCap = 34,
    SystemWakeSource = 35,
    SystemHiberFileInformation = 36,
    TraceServicePowerMessage = 37,
    ProcessorLoad = 38,
    PowerShutdownNotification = 39,
    MonitorCapabilities = 40,
    SessionPowerInit = 41,
    SessionDisplayState = 42,
    PowerRequestCreate = 43,
    PowerRequestAction = 44,
    GetPowerRequestList = 45,
    ProcessorInformationEx = 46,
    NotifyUserModeLegacyPowerEvent = 47,
    GroupPark = 48,
    ProcessorIdleDomains = 49,
    WakeTimerList = 50,
    SystemHiberFileSize = 51,
    ProcessorIdleStatesHv = 52,
    ProcessorPerfStatesHv = 53,
    ProcessorPerfCapHv = 54,
    ProcessorSetIdle = 55,
    LogicalProcessorIdling = 56,
    UserPresence = 57,
    PowerSettingNotificationName = 58,
    GetPowerSettingValue = 59,
    IdleResiliency = 60,
    SessionRITState = 61,
    SessionConnectNotification = 62,
    SessionPowerCleanup = 63,
    SessionLockState = 64,
    SystemHiberbootState = 65,
    PlatformInformation = 66,
    PdcInvocation = 67,
    MonitorInvocation = 68,
    FirmwareTableInformationRegistered = 69,
    SetShutdownSelectedTime = 70,
    SuspendResumeInvocation = 71,
    PlmPowerRequestCreate = 72,
    ScreenOff = 73,
    CsDeviceNotification = 74,
    PlatformRole = 75,
    LastResumePerformance = 76,
    DisplayBurst = 77,
    ExitLatencySamplingPercentage = 78,
    RegisterSpmPowerSettings = 79,
    PlatformIdleStates = 80,
    ProcessorIdleVeto = 81,
    PlatformIdleVeto = 82,
    SystemBatteryStatePrecise = 83,
    ThermalEvent = 84,
    PowerRequestActionInternal = 85,
    BatteryDeviceState = 86,
    PowerInformationInternal = 87,
    ThermalStandby = 88,
    SystemHiberFileType = 89,
    PhysicalPowerButtonPress = 90,
    QueryPotentialDripsConstraint = 91,
    EnergyTrackerCreate = 92,
    EnergyTrackerQuery = 93,
    UpdateBlackBoxRecorder = 94,
    PowerInformationLevelMaximum = 95
};

typedef enum POWER_MONITOR_REQUEST_REASON {
    MonitorRequestReasonUnknown = 0,
    MonitorRequestReasonPowerButton = 1,
    MonitorRequestReasonRemoteConnection = 2,
    MonitorRequestReasonScMonitorpower = 3,
    MonitorRequestReasonUserInput = 4,
    MonitorRequestReasonAcDcDisplayBurst = 5,
    MonitorRequestReasonUserDisplayBurst = 6,
    MonitorRequestReasonPoSetSystemState = 7,
    MonitorRequestReasonSetThreadExecutionState = 8,
    MonitorRequestReasonFullWake = 9,
    MonitorRequestReasonSessionUnlock = 10,
    MonitorRequestReasonScreenOffRequest = 11,
    MonitorRequestReasonIdleTimeout = 12,
    MonitorRequestReasonPolicyChange = 13,
    MonitorRequestReasonSleepButton = 14,
    MonitorRequestReasonLid = 15,
    MonitorRequestReasonBatteryCountChange = 16,
    MonitorRequestReasonGracePeriod = 17,
    MonitorRequestReasonPnP = 18,
    MonitorRequestReasonDP = 19,
    MonitorRequestReasonSxTransition = 20,
    MonitorRequestReasonSystemIdle = 21,
    MonitorRequestReasonNearProximity = 22,
    MonitorRequestReasonThermalStandby = 23,
    MonitorRequestReasonResumePdc = 24,
    MonitorRequestReasonResumeS4 = 25,
    MonitorRequestReasonTerminal = 26,
    MonitorRequestReasonPdcSignal = 27,
    MonitorRequestReasonAcDcDisplayBurstSuppressed = 28,
    MonitorRequestReasonSystemStateEntered = 29,
    MonitorRequestReasonWinrt = 30,
    MonitorRequestReasonUserInputKeyboard = 31,
    MonitorRequestReasonUserInputMouse = 32,
    MonitorRequestReasonUserInputTouch = 33,
    MonitorRequestReasonUserInputPen = 34,
    MonitorRequestReasonUserInputAccelerometer = 35,
    MonitorRequestReasonUserInputHid = 36,
    MonitorRequestReasonUserInputPoUserPresent = 37,
    MonitorRequestReasonUserInputSessionSwitch = 38,
    MonitorRequestReasonUserInputInitialization = 39,
    MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40,
    MonitorRequestReasonPdcSignalWindowsMobileShell = 41,
    MonitorRequestReasonPdcSignalHeyCortana = 42,
    MonitorRequestReasonPdcSignalHolographicShell = 43,
    MonitorRequestReasonPdcSignalFingerprint = 44,
    MonitorRequestReasonDirectedDrips = 45,
    MonitorRequestReasonMax = 46
};

typedef enum POWER_USER_PRESENCE_TYPE {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 255
};

typedef enum PS_CREATE_STATE {
    PsCreateInitialState = 0,
    PsCreateFailOnFileOpen = 1,
    PsCreateFailOnSectionCreate = 2,
    PsCreateFailExeFormat = 3,
    PsCreateFailMachineMismatch = 4,
    PsCreateFailExeName = 5,
    PsCreateSuccess = 6,
    PsCreateMaximumStates = 7
};

typedef enum RdType {
    RdTypeObject = 16,
    RdTypeControlDownDevice = 17,
    RdTypeContolDriverManager = 18,
    RdTypeFdo = 19
};

typedef enum RdTypeBases {
    RdTypeObjectBase = 16
};

typedef enum ReplacesCorHdrNumericDefines {
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
    COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
};

typedef enum SE_WS_APPX_SIGNATURE_ORIGIN {
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4
};

typedef enum STATE {
    ST_NORMAL = 0,
    ST_PERCENT = 1,
    ST_FLAG = 2,
    ST_WIDTH = 3,
    ST_DOT = 4,
    ST_PRECIS = 5,
    ST_SIZE = 6,
    ST_TYPE = 7
};

typedef enum SYSTEM_POWER_CONDITION {
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3
};

typedef enum SendDeviceRequestAction {
    NoRetry = 0,
    Retry = 1
};

typedef enum SubmitActionFlags {
    SubmitSend = 1,
    SubmitQueued = 2,
    SubmitSent = 4,
    SubmitWait = 8,
    SubmitTimeout = 16,
    SubmitSyncCallCompletion = 32
};

typedef enum TlgIn_t {
    TlgInNULL = 0,
    TlgInUNICODESTRING = 1,
    TlgInANSISTRING = 2,
    TlgInINT8 = 3,
    TlgInUINT8 = 4,
    TlgInINT16 = 5,
    TlgInUINT16 = 6,
    TlgInINT32 = 7,
    TlgInUINT32 = 8,
    TlgInINT64 = 9,
    TlgInUINT64 = 10,
    TlgInFLOAT = 11,
    TlgInDOUBLE = 12,
    TlgInBOOL32 = 13,
    TlgInBINARY = 14,
    TlgInGUID = 15,
    _TlgInPOINTER_unsupported = 16,
    TlgInFILETIME = 17,
    TlgInSYSTEMTIME = 18,
    TlgInSID = 19,
    TlgInHEXINT32 = 20,
    TlgInHEXINT64 = 21,
    TlgInCOUNTEDSTRING = 22,
    TlgInCOUNTEDANSISTRING = 23,
    _TlgInSTRUCT = 24,
    TlgInCOUNTEDBINARY = 25,
    _TlgInMax = 26,
    TlgInINTPTR = 9,
    TlgInUINTPTR = 10,
    TlgInPOINTER = 21,
    _TlgInCcount = 32,
    TlgInVcount = 64,
    _TlgInChain = 128,
    _TlgInCustom = 96,
    _TlgInTypeMask = 31,
    _TlgInCountMask = 96,
    _TlgInFlagMask = 224
};

typedef enum TlgOut_t {
    TlgOutNULL = 0,
    TlgOutNOPRINT = 1,
    TlgOutSTRING = 2,
    TlgOutBOOLEAN = 3,
    TlgOutHEX = 4,
    TlgOutPID = 5,
    TlgOutTID = 6,
    TlgOutPORT = 7,
    TlgOutIPV4 = 8,
    TlgOutIPV6 = 9,
    TlgOutSOCKETADDRESS = 10,
    TlgOutXML = 11,
    TlgOutJSON = 12,
    TlgOutWIN32ERROR = 13,
    TlgOutNTSTATUS = 14,
    TlgOutHRESULT = 15,
    TlgOutFILETIME = 16,
    TlgOutSIGNED = 17,
    TlgOutUNSIGNED = 18,
    TlgOutUTF8 = 35,
    TlgOutPKCS7_WITH_TYPE_INFO = 36,
    TlgOutCODE_POINTER = 37,
    _TlgOutMax = 38,
    _TlgOutChain = 128,
    _TlgOutTypeMask = 127
};

typedef enum VARENUM {
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 4095,
    VT_VECTOR = 4096,
    VT_ARRAY = 8192,
    VT_BYREF = 16384,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 4095,
    VT_TYPEMASK = 4095
};

typedef enum WDF_MODULE_INFO_CHANGE_TYPE {
    ModuleLoaded = 0,
    ModuleUnloaded = 1
};

typedef enum WDF_REGISTRY_READ_RESULT {
    ValuePresent = 0,
    ValueNotPresent = 1,
    ValueInvalid = 2
};

typedef enum WELL_KNOWN_SID_TYPE {
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
    WinBuiltinDeviceOwnersSid = 119
};

typedef enum WMIDPREQUESTCODE {
    WMI_GET_ALL_DATA = 0,
    WMI_GET_SINGLE_INSTANCE = 1,
    WMI_SET_SINGLE_INSTANCE = 2,
    WMI_SET_SINGLE_ITEM = 3,
    WMI_ENABLE_EVENTS = 4,
    WMI_DISABLE_EVENTS = 5,
    WMI_ENABLE_COLLECTION = 6,
    WMI_DISABLE_COLLECTION = 7,
    WMI_REGINFO = 8,
    WMI_EXECUTE_METHOD = 9,
    WMI_CAPTURE_STATE = 10
};

typedef enum WPP_CTL_NAMES {
    WPP_CTL_KmdfTraceGuid = 0,
    WPP_LAST_CTL = 1
};

typedef enum WPP_DEFINE_BIT_NAMES {
    WPP_BLOCK_START_KmdfTraceGuid = 0,
    WPP_BIT_TRACINGFULL = 1,
    WPP_BIT_TRACINGERROR = 2,
    WPP_BIT_TRACINGDBGPRINT = 3,
    WPP_BIT_TRACINGFRAMEWORKS = 4,
    WPP_BIT_TRACINGAPI = 5,
    WPP_BIT_TRACINGAPIERROR = 6,
    WPP_BIT_TRACINGRESOURCES = 7,
    WPP_BIT_TRACINGLOCKING = 8,
    WPP_BIT_TRACINGCONTEXT = 9,
    WPP_BIT_TRACINGPOOL = 10,
    WPP_BIT_TRACINGHANDLE = 11,
    WPP_BIT_TRACINGPNP = 12,
    WPP_BIT_TRACINGIO = 13,
    WPP_BIT_TRACINGIOTARGET = 14,
    WPP_BIT_TRACINGDMA = 15,
    WPP_BIT_TRACINGREQUEST = 16,
    WPP_BIT_TRACINGDRIVER = 17,
    WPP_BIT_TRACINGDEVICE = 18,
    WPP_BIT_TRACINGUSEROBJECT = 19,
    WPP_BIT_TRACINGOBJECT = 20,
    WPP_BIT_TRACINGPNPPOWERSTATES = 21,
    WPP_BIT_TRACINGIFRCAPTURE = 22,
    WPP_BLOCK_END_KmdfTraceGuid = 23
};

typedef enum WaitSignalFlags {
    WaitSignalBreakUnderVerifier = 1,
    WaitSignalBreakUnderDebugger = 2,
    WaitSignalAlwaysBreak = 4
};

typedef enum WdfComponentType {
    WdfComponentInvalid = 0,
    WdfComponentPlatform = 1,
    WdfComponentReflector = 2,
    WdfComponentDriverManager = 3,
    WdfComponentHost = 4,
    WdfComponentFramework = 5,
    WdfComponentTest = 6,
    WdfComponentMax = 7
};

typedef enum WdfDeviceStartStateType {
    WudfDeviceStartState_Unknown = 0,
    WudfDeviceStartState_NotStarted = 1,
    WudfDeviceStartState_Started = 2,
    WudfDeviceStartState_Removed = 3
};

typedef enum WdfDriverStopType {
    WdfInternalError = 0,
    WdfDriverError = 1,
    WdfCallerError = 2,
    WdfExternalError = 3,
    WdfUnhandledExceptionError = 4,
    WdfDriverStopTypeMax = 5
};

typedef enum WdfErrorClass {
    WdfErrorClass_Undefined = 0,
    WdfErrorClass_BadArgument = 1,
    WdfErrorClass_BadState = 2,
    WdfErrorClass_BadResponse = 3,
    WdfErrorClass_BadAction = 4,
    WdfErrorClass_LostReference = 5,
    WdfErrorClass_DDIFunctionTableMismatched = 6,
    WdfErrorClass_GlobalMax = 7,
    WdfErrorClass_PlatformStart = 7,
    WdfErrorClass_PlatformMax = 8,
    WdfErrorClass_RdStart = 7,
    WdfErrorClass_RdMax = 8,
    WdfErrorClass_DmStart = 7,
    WdfErrorClass_DmMax = 8,
    WdfErrorClass_HostStart = 7,
    WdfErrorClass_HostMax = 8,
    WdfErrorClass_FxStart = 7,
    WdfErrorClass_FxMax = 8,
    WdfErrorClass_TestStart = 7,
    WdfErrorClass_TestMax = 8
};

typedef enum WmiRegisteredState {
    WmiUnregistered = 0,
    WmiRegistered = 1,
    WmiDeregistered = 2,
    WmiCleanedUp = 3
};

typedef enum WudfBreakPointType {
    WudfPlatformUserBreakin = 1,
    WudfPlatformKernelBreakin = 2,
    WudfPlatformUserOrKernelBreakin = 3
};

typedef enum WudfDebuggerType {
    WudfPlatformUserDebugger = 0,
    WudfPlatformUserOrKernelDebugger = 1
};

typedef enum WudfOperationType {
    WudfOperation_Invalid = 0,
    WudfOperation_Init = 1,
    WudfOperation_HostShutdown = 2,
    WudfOperation_Pnp = 3,
    WudfOperation_Cleanup = 4,
    WudfOperation_Close = 5,
    WudfOperation_Cancel = 6,
    WudfOperation_IO = 7,
    WudfOperation_Interrupt = 8,
    WudfOperation_PoFx = 9,
    WudfOperation_Other = 10,
    WudfOperation_Max = 11
};

typedef enum WudfProblem {
    WudfProblem_None = 0,
    WudfProblem_Cancelled = 1,
    WudfProblem_SendFailure = 2,
    WudfProblem_Timeout = 3,
    WudfProblem_InvalidRequest = 4,
    WudfProblem_InvalidReply = 5,
    WudfProblem_FailedCriticalOperation = 6,
    WudfProblem_FailedToExit = 7,
    WudfProblem_Disconnect = 8,
    WudfProblem_LeakingHandle = 9,
    WudfProblem_InvalidInterruptState = 10,
    WudfProblem_IsrTimedOut = 11,
    WudfProblem_PowerWatchdogTimeout = 12,
    WudfProblem_Max = 13
};

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2
};

typedef enum _ARBITER_ACTION {
    ArbiterActionTestAllocation = 0,
    ArbiterActionRetestAllocation = 1,
    ArbiterActionCommitAllocation = 2,
    ArbiterActionRollbackAllocation = 3,
    ArbiterActionQueryAllocatedResources = 4,
    ArbiterActionWriteReservedResources = 5,
    ArbiterActionQueryConflict = 6,
    ArbiterActionQueryArbitrate = 7,
    ArbiterActionAddReserved = 8,
    ArbiterActionBootAllocation = 9
};

typedef enum _ARBITER_REQUEST_SOURCE {
    ArbiterRequestUndefined = -1,
    ArbiterRequestLegacyReported = 0,
    ArbiterRequestHalReported = 1,
    ArbiterRequestLegacyAssigned = 2,
    ArbiterRequestPnpDetected = 3,
    ArbiterRequestPnpEnumerated = 4
};

typedef enum _ARBITER_RESULT {
    ArbiterResultUndefined = -1,
    ArbiterResultSuccess = 0,
    ArbiterResultExternalConflict = 1,
    ArbiterResultNullRequest = 2
};

typedef enum _BDCB_CALLBACK_TYPE {
    BdCbStatusUpdate = 0,
    BdCbInitializeImage = 1
};

typedef enum _BDCB_CLASSIFICATION {
    BdCbClassificationUnknownImage = 0,
    BdCbClassificationKnownGoodImage = 1,
    BdCbClassificationKnownBadImage = 2,
    BdCbClassificationKnownBadImageBootCritical = 3,
    BdCbClassificationEnd = 4
};

typedef enum _BDCB_STATUS_UPDATE_TYPE {
    BdCbStatusPrepareForDependencyLoad = 0,
    BdCbStatusPrepareForDriverLoad = 1,
    BdCbStatusPrepareForUnload = 2
};

typedef enum _BOUND_CALLBACK_STATUS {
    BoundExceptionContinueSearch = 0,
    BoundExceptionHandled = 1,
    BoundExceptionError = 2,
    BoundExceptionMaximum = 3
};

typedef enum _BUS_DATA_TYPE {
    ConfigurationSpaceUndefined = -1,
    Cmos = 0,
    EisaConfiguration = 1,
    Pos = 2,
    CbusConfiguration = 3,
    PCIConfiguration = 4,
    VMEConfiguration = 5,
    NuBusConfiguration = 6,
    PCMCIAConfiguration = 7,
    MPIConfiguration = 8,
    MPSAConfiguration = 9,
    PNPISAConfiguration = 10,
    SgiInternalConfiguration = 11,
    MaximumBusDataType = 12
};

typedef enum _CLFS_CONTEXT_MODE {
    ClfsContextNone = 0,
    ClfsContextUndoNext = 1,
    ClfsContextPrevious = 2,
    ClfsContextForward = 3
};

typedef enum _CLFS_IOSTATS_CLASS {
    ClfsIoStatsDefault = 0,
    ClfsIoStatsMax = 0xffff
};

typedef enum _CLFS_LOG_ARCHIVE_MODE {
    ClfsLogArchiveEnabled = 1,
    ClfsLogArchiveDisabled = 2
};

typedef enum _CLFS_MGMT_NOTIFICATION_TYPE {
    ClfsMgmtAdvanceTailNotification = 0,
    ClfsMgmtLogFullHandlerNotification = 1,
    ClfsMgmtLogUnpinnedNotification = 2,
    ClfsMgmtLogWriteNotification = 3
};

typedef enum _CLFS_MGMT_POLICY_TYPE {
    ClfsMgmtPolicyMaximumSize = 0,
    ClfsMgmtPolicyMinimumSize = 1,
    ClfsMgmtPolicyNewContainerSize = 2,
    ClfsMgmtPolicyGrowthRate = 3,
    ClfsMgmtPolicyLogTail = 4,
    ClfsMgmtPolicyAutoShrink = 5,
    ClfsMgmtPolicyAutoGrow = 6,
    ClfsMgmtPolicyNewContainerPrefix = 7,
    ClfsMgmtPolicyNewContainerSuffix = 8,
    ClfsMgmtPolicyNewContainerExtension = 9,
    ClfsMgmtPolicyInvalid = 10
};

typedef enum _CLS_CONTEXT_MODE {
    ClsContextNone = 0,
    ClsContextUndoNext = 1,
    ClsContextPrevious = 2,
    ClsContextForward = 3
};

typedef enum _CLS_IOSTATS_CLASS {
    ClsIoStatsDefault = 0,
    ClsIoStatsMax = 0xffff
};

typedef enum _CLS_LOG_INFORMATION_CLASS {
    ClfsLogBasicInformation = 0,
    ClfsLogBasicInformationPhysical = 1,
    ClfsLogPhysicalNameInformation = 2,
    ClfsLogStreamIdentifierInformation = 3,
    ClfsLogSystemMarkingInformation = 4,
    ClfsLogPhysicalLsnInformation = 5
};

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0,
    NormalError = 1,
    SevereError = 2,
    CriticalError = 3
};

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0,
    SystemLoad = 1,
    AutoLoad = 2,
    DemandLoad = 3,
    DisableLoad = 4
};

typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 1,
    FileSystemType = 2,
    Win32ServiceOwnProcess = 16,
    Win32ServiceShareProcess = 32,
    AdapterType = 4,
    RecognizerType = 8
};

typedef enum _CM_SHARE_DISPOSITION {
    CmResourceShareUndetermined = 0,
    CmResourceShareDeviceExclusive = 1,
    CmResourceShareDriverExclusive = 2,
    CmResourceShareShared = 3
};

typedef enum _CONFIGURATION_TYPE {
    ArcSystem = 0,
    CentralProcessor = 1,
    FloatingPointProcessor = 2,
    PrimaryIcache = 3,
    PrimaryDcache = 4,
    SecondaryIcache = 5,
    SecondaryDcache = 6,
    SecondaryCache = 7,
    EisaAdapter = 8,
    TcAdapter = 9,
    ScsiAdapter = 10,
    DtiAdapter = 11,
    MultiFunctionAdapter = 12,
    DiskController = 13,
    TapeController = 14,
    CdromController = 15,
    WormController = 16,
    SerialController = 17,
    NetworkController = 18,
    DisplayController = 19,
    ParallelController = 20,
    PointerController = 21,
    KeyboardController = 22,
    AudioController = 23,
    OtherController = 24,
    DiskPeripheral = 25,
    FloppyDiskPeripheral = 26,
    TapePeripheral = 27,
    ModemPeripheral = 28,
    MonitorPeripheral = 29,
    PrinterPeripheral = 30,
    PointerPeripheral = 31,
    KeyboardPeripheral = 32,
    TerminalPeripheral = 33,
    OtherPeripheral = 34,
    LinePeripheral = 35,
    NetworkPeripheral = 36,
    SystemMemory = 37,
    DockingInformation = 38,
    RealModeIrqRoutingTable = 39,
    RealModePCIEnumeration = 40,
    MaximumType = 41
};

typedef enum _CPU_SET_INFORMATION_TYPE {
    CpuSetInformation = 0
};

typedef enum _CREATE_FILE_TYPE {
    CreateFileTypeNone = 0,
    CreateFileTypeNamedPipe = 1,
    CreateFileTypeMailslot = 2
};

typedef enum _D3COLD_LAST_TRANSITION_STATUS {
    LastDStateTransitionStatusUnknown = 0,
    LastDStateTransitionD3hot = 1,
    LastDStateTransitionD3cold = 2
};

typedef enum _DEVICE_DIRECTORY_TYPE {
    DeviceDirectoryData = 0
};

typedef enum _DEVICE_INSTALL_STATE {
    InstallStateInstalled = 0,
    InstallStateNeedsReinstall = 1,
    InstallStateFailedInstall = 2,
    InstallStateFinishInstall = 3
};

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
};

typedef enum _DEVICE_RELATION_TYPE {
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6
};

typedef enum _DEVICE_REMOVAL_POLICY {
    RemovalPolicyExpectNoRemoval = 1,
    RemovalPolicyExpectOrderlyRemoval = 2,
    RemovalPolicyExpectSurpriseRemoval = 3
};

typedef enum _DEVICE_RESET_TYPE {
    FunctionLevelDeviceReset = 0,
    PlatformLevelDeviceReset = 1
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5
};

typedef enum _DEVICE_WAKE_DEPTH {
    DeviceWakeDepthNotWakeable = 0,
    DeviceWakeDepthD0 = 1,
    DeviceWakeDepthD1 = 2,
    DeviceWakeDepthD2 = 3,
    DeviceWakeDepthD3hot = 4,
    DeviceWakeDepthD3cold = 5,
    DeviceWakeDepthMaximum = 6
};

typedef enum _DEVPROPSTORE {
    DEVPROP_STORE_SYSTEM = 0,
    DEVPROP_STORE_USER = 1
};

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2
};

typedef enum _DMA_SPEED {
    Compatible = 0,
    TypeA = 1,
    TypeB = 2,
    TypeC = 3,
    TypeF = 4,
    MaximumDmaSpeed = 5
};

typedef enum _DMA_WIDTH {
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5
};

typedef enum _DOMAIN_CONFIGURATION_ARCH {
    DomainConfigurationArm64 = 0,
    DomainConfigurationInvalid = 1
};

typedef enum _DPFLTR_TYPE {
    DPFLTR_SYSTEM_ID = 0,
    DPFLTR_SMSS_ID = 1,
    DPFLTR_SETUP_ID = 2,
    DPFLTR_NTFS_ID = 3,
    DPFLTR_FSTUB_ID = 4,
    DPFLTR_CRASHDUMP_ID = 5,
    DPFLTR_CDAUDIO_ID = 6,
    DPFLTR_CDROM_ID = 7,
    DPFLTR_CLASSPNP_ID = 8,
    DPFLTR_DISK_ID = 9,
    DPFLTR_REDBOOK_ID = 10,
    DPFLTR_STORPROP_ID = 11,
    DPFLTR_SCSIPORT_ID = 12,
    DPFLTR_SCSIMINIPORT_ID = 13,
    DPFLTR_CONFIG_ID = 14,
    DPFLTR_I8042PRT_ID = 15,
    DPFLTR_SERMOUSE_ID = 16,
    DPFLTR_LSERMOUS_ID = 17,
    DPFLTR_KBDHID_ID = 18,
    DPFLTR_MOUHID_ID = 19,
    DPFLTR_KBDCLASS_ID = 20,
    DPFLTR_MOUCLASS_ID = 21,
    DPFLTR_TWOTRACK_ID = 22,
    DPFLTR_WMILIB_ID = 23,
    DPFLTR_ACPI_ID = 24,
    DPFLTR_AMLI_ID = 25,
    DPFLTR_HALIA64_ID = 26,
    DPFLTR_VIDEO_ID = 27,
    DPFLTR_SVCHOST_ID = 28,
    DPFLTR_VIDEOPRT_ID = 29,
    DPFLTR_TCPIP_ID = 30,
    DPFLTR_DMSYNTH_ID = 31,
    DPFLTR_NTOSPNP_ID = 32,
    DPFLTR_FASTFAT_ID = 33,
    DPFLTR_SAMSS_ID = 34,
    DPFLTR_PNPMGR_ID = 35,
    DPFLTR_NETAPI_ID = 36,
    DPFLTR_SCSERVER_ID = 37,
    DPFLTR_SCCLIENT_ID = 38,
    DPFLTR_SERIAL_ID = 39,
    DPFLTR_SERENUM_ID = 40,
    DPFLTR_UHCD_ID = 41,
    DPFLTR_RPCPROXY_ID = 42,
    DPFLTR_AUTOCHK_ID = 43,
    DPFLTR_DCOMSS_ID = 44,
    DPFLTR_UNIMODEM_ID = 45,
    DPFLTR_SIS_ID = 46,
    DPFLTR_FLTMGR_ID = 47,
    DPFLTR_WMICORE_ID = 48,
    DPFLTR_BURNENG_ID = 49,
    DPFLTR_IMAPI_ID = 50,
    DPFLTR_SXS_ID = 51,
    DPFLTR_FUSION_ID = 52,
    DPFLTR_IDLETASK_ID = 53,
    DPFLTR_SOFTPCI_ID = 54,
    DPFLTR_TAPE_ID = 55,
    DPFLTR_MCHGR_ID = 56,
    DPFLTR_IDEP_ID = 57,
    DPFLTR_PCIIDE_ID = 58,
    DPFLTR_FLOPPY_ID = 59,
    DPFLTR_FDC_ID = 60,
    DPFLTR_TERMSRV_ID = 61,
    DPFLTR_W32TIME_ID = 62,
    DPFLTR_PREFETCHER_ID = 63,
    DPFLTR_RSFILTER_ID = 64,
    DPFLTR_FCPORT_ID = 65,
    DPFLTR_PCI_ID = 66,
    DPFLTR_DMIO_ID = 67,
    DPFLTR_DMCONFIG_ID = 68,
    DPFLTR_DMADMIN_ID = 69,
    DPFLTR_WSOCKTRANSPORT_ID = 70,
    DPFLTR_VSS_ID = 71,
    DPFLTR_PNPMEM_ID = 72,
    DPFLTR_PROCESSOR_ID = 73,
    DPFLTR_DMSERVER_ID = 74,
    DPFLTR_SR_ID = 75,
    DPFLTR_INFINIBAND_ID = 76,
    DPFLTR_IHVDRIVER_ID = 77,
    DPFLTR_IHVVIDEO_ID = 78,
    DPFLTR_IHVAUDIO_ID = 79,
    DPFLTR_IHVNETWORK_ID = 80,
    DPFLTR_IHVSTREAMING_ID = 81,
    DPFLTR_IHVBUS_ID = 82,
    DPFLTR_HPS_ID = 83,
    DPFLTR_RTLTHREADPOOL_ID = 84,
    DPFLTR_LDR_ID = 85,
    DPFLTR_TCPIP6_ID = 86,
    DPFLTR_ISAPNP_ID = 87,
    DPFLTR_SHPC_ID = 88,
    DPFLTR_STORPORT_ID = 89,
    DPFLTR_STORMINIPORT_ID = 90,
    DPFLTR_PRINTSPOOLER_ID = 91,
    DPFLTR_VSSDYNDISK_ID = 92,
    DPFLTR_VERIFIER_ID = 93,
    DPFLTR_VDS_ID = 94,
    DPFLTR_VDSBAS_ID = 95,
    DPFLTR_VDSDYN_ID = 96,
    DPFLTR_VDSDYNDR_ID = 97,
    DPFLTR_VDSLDR_ID = 98,
    DPFLTR_VDSUTIL_ID = 99,
    DPFLTR_DFRGIFC_ID = 100,
    DPFLTR_DEFAULT_ID = 101,
    DPFLTR_MM_ID = 102,
    DPFLTR_DFSC_ID = 103,
    DPFLTR_WOW64_ID = 104,
    DPFLTR_ALPC_ID = 105,
    DPFLTR_WDI_ID = 106,
    DPFLTR_PERFLIB_ID = 107,
    DPFLTR_KTM_ID = 108,
    DPFLTR_IOSTRESS_ID = 109,
    DPFLTR_HEAP_ID = 110,
    DPFLTR_WHEA_ID = 111,
    DPFLTR_USERGDI_ID = 112,
    DPFLTR_MMCSS_ID = 113,
    DPFLTR_TPM_ID = 114,
    DPFLTR_THREADORDER_ID = 115,
    DPFLTR_ENVIRON_ID = 116,
    DPFLTR_EMS_ID = 117,
    DPFLTR_WDT_ID = 118,
    DPFLTR_FVEVOL_ID = 119,
    DPFLTR_NDIS_ID = 120,
    DPFLTR_NVCTRACE_ID = 121,
    DPFLTR_LUAFV_ID = 122,
    DPFLTR_APPCOMPAT_ID = 123,
    DPFLTR_USBSTOR_ID = 124,
    DPFLTR_SBP2PORT_ID = 125,
    DPFLTR_COVERAGE_ID = 126,
    DPFLTR_CACHEMGR_ID = 127,
    DPFLTR_MOUNTMGR_ID = 128,
    DPFLTR_CFR_ID = 129,
    DPFLTR_TXF_ID = 130,
    DPFLTR_KSECDD_ID = 131,
    DPFLTR_FLTREGRESS_ID = 132,
    DPFLTR_MPIO_ID = 133,
    DPFLTR_MSDSM_ID = 134,
    DPFLTR_UDFS_ID = 135,
    DPFLTR_PSHED_ID = 136,
    DPFLTR_STORVSP_ID = 137,
    DPFLTR_LSASS_ID = 138,
    DPFLTR_SSPICLI_ID = 139,
    DPFLTR_CNG_ID = 140,
    DPFLTR_EXFAT_ID = 141,
    DPFLTR_FILETRACE_ID = 142,
    DPFLTR_XSAVE_ID = 143,
    DPFLTR_SE_ID = 144,
    DPFLTR_DRIVEEXTENDER_ID = 145,
    DPFLTR_POWER_ID = 146,
    DPFLTR_CRASHDUMPXHCI_ID = 147,
    DPFLTR_GPIO_ID = 148,
    DPFLTR_REFS_ID = 149,
    DPFLTR_WER_ID = 150,
    DPFLTR_CAPIMG_ID = 151,
    DPFLTR_VPCI_ID = 152,
    DPFLTR_STORAGECLASSMEMORY_ID = 153,
    DPFLTR_FSLIB_ID = 154,
    DPFLTR_ENDOFTABLE_ID = 155
};

typedef enum _DRIVER_DIRECTORY_TYPE {
    DriverDirectoryImage = 0,
    DriverDirectoryData = 1
};

typedef enum _DRIVER_REGKEY_TYPE {
    DriverRegKeyParameters = 0,
    DriverRegKeyPersistentState = 1
};

typedef enum _DRIVER_RUNTIME_INIT_FLAGS {
    DrvRtPoolNxOptIn = 1,
    LastDrvRtFlag = 2
};

typedef enum _ENDPOINT_OFFLOAD_NOTIFICATION_EVENT_TYPE {
    EndpointOffload_NoEvent = 0,
    EndpointOffload_StopDueToPendingControllerResetRecovery = 1
};

typedef enum _ENDPOINT_OFFLOAD_RESPONSE_EVENT_TYPE {
    EndpointOffload_NoPendingResponse = 0,
    EndpointOffload_Stopped = 1
};

typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation = 0,
    EnlistmentRecoveryInformation = 1,
    EnlistmentCrmInformation = 2
};

typedef enum _ERROR_SEVERITY_VALUE {
    ErrorRecoverable = 0,
    ErrorFatal = 1,
    ErrorCorrected = 2,
    ErrorOthers = 3
};

typedef enum _ETW_BUFFER_STATE {
    EtwBufferStateFree = 0,
    EtwBufferStateGeneralLogging = 1,
    EtwBufferStateCSwitch = 2,
    EtwBufferStateFlush = 3,
    EtwBufferStatePendingCompression = 4,
    EtwBufferStateCompressed = 5,
    EtwBufferStatePlaceholder = 6,
    EtwBufferStateMaximum = 7
};

typedef enum _ETW_RT_EVENT_LOSS {
    EtwRtEventNoLoss = 0,
    EtwRtEventLost = 1,
    EtwRtBufferLost = 2,
    EtwRtBackupLost = 3,
    EtwRtEventLossMax = 4
};

typedef enum _EVENT_INFO_CLASS {
    EventProviderBinaryTrackInfo = 0,
    EventProviderSetReserved1 = 1,
    EventProviderSetTraits = 2,
    EventProviderUseDescriptorType = 3,
    MaxEventInfo = 4
};

typedef enum _EVENT_TYPE {
    NotificationEvent = 0,
    SynchronizationEvent = 1
};

typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3
};

typedef enum _EXTENDED_AGP_REGISTER {
    IsochStatus = 0,
    AgpControl = 1,
    ApertureSize = 2,
    AperturePageSize = 3,
    GartLow = 4,
    GartHigh = 5,
    IsochCommand = 6
};

typedef enum _EX_POOL_PRIORITY {
    LowPoolPriority = 0,
    LowPoolPrioritySpecialPoolOverrun = 8,
    LowPoolPrioritySpecialPoolUnderrun = 9,
    NormalPoolPriority = 16,
    NormalPoolPrioritySpecialPoolOverrun = 24,
    NormalPoolPrioritySpecialPoolUnderrun = 25,
    HighPoolPriority = 32,
    HighPoolPrioritySpecialPoolOverrun = 40,
    HighPoolPrioritySpecialPoolUnderrun = 41
};

typedef enum _FAULT_INFORMATION_ARCH {
    FaultInformationInvalid = 0,
    FaultInformationArm64 = 1
};

typedef enum _FAULT_INFORMATION_ARM64_TYPE {
    UnsupportedUpstreamTransaction = 0,
    AddressSizeFault = 1,
    TlbMatchConflict = 2,
    ExternalFault = 3,
    PermissionFault = 4,
    AccessFlagFault = 5,
    TranslationFault = 6,
    MaxFaultType = 7
};

typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileDesiredStorageClassInformation = 67,
    FileStatInformation = 68,
    FileMemoryPartitionInformation = 69,
    FileStatLxInformation = 70,
    FileCaseSensitiveInformation = 71,
    FileLinkInformationEx = 72,
    FileLinkInformationExBypassAccessCheck = 73,
    FileStorageReserveIdInformation = 74,
    FileCaseSensitiveInformationForceAccessCheck = 75,
    FileMaximumInformation = 76
};

typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown = 0,
    FirmwareTypeBios = 1,
    FirmwareTypeUefi = 2,
    FirmwareTypeMax = 3
};

typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsMaximumInformation = 15
};

typedef enum _FX_IO_QUEUE_SET_STATE {
    FxIoQueueSetAcceptRequests = -2147483647,
    FxIoQueueClearAcceptRequests = -2147483646,
    FxIoQueueSetDispatchRequests = -2147483644,
    FxIoQueueClearDispatchRequests = -2147483640,
    FxIoQueueSetShutdown = -2147418112,
    FxIoQueueClearShutdown = -2147352576
};

typedef enum _FX_IO_QUEUE_STATE {
    FxIoQueueAcceptRequests = 1,
    FxIoQueueDispatchRequests = 2,
    FxIoQueueNoRequests = 4,
    FxIoQueueDriverNoRequests = 8,
    FxIoQueuePnpHeld = 16,
    FxIoQueueShutdown = 0x10000
};

typedef enum _FX_TELEMETRY_DO_ONCE_BITS {
    DeviceStartEventBit = 0
};

typedef enum _FX_URB_TYPE {
    FxUrbTypeLegacy = 0,
    FxUrbTypeUsbdAllocated = 1
};

typedef enum _HAL_DISPLAY_BIOS_INFORMATION {
    HalDisplayInt10Bios = 0,
    HalDisplayEmulatedBios = 1,
    HalDisplayNoBios = 2
};

typedef enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE {
    HalDmaCrashDumpRegisterSet1 = 0,
    HalDmaCrashDumpRegisterSet2 = 1,
    HalDmaCrashDumpRegisterSetMax = 2
};

typedef enum _HAL_QUERY_INFORMATION_CLASS {
    HalInstalledBusInformation = 0,
    HalProfileSourceInformation = 1,
    HalInformationClassUnused1 = 2,
    HalPowerInformation = 3,
    HalProcessorSpeedInformation = 4,
    HalCallbackInformation = 5,
    HalMapRegisterInformation = 6,
    HalMcaLogInformation = 7,
    HalFrameBufferCachingInformation = 8,
    HalDisplayBiosInformation = 9,
    HalProcessorFeatureInformation = 10,
    HalNumaTopologyInterface = 11,
    HalErrorInformation = 12,
    HalCmcLogInformation = 13,
    HalCpeLogInformation = 14,
    HalQueryMcaInterface = 15,
    HalQueryAMLIIllegalIOPortAddresses = 16,
    HalQueryMaxHotPlugMemoryAddress = 17,
    HalPartitionIpiInterface = 18,
    HalPlatformInformation = 19,
    HalQueryProfileSourceList = 20,
    HalInitLogInformation = 21,
    HalFrequencyInformation = 22,
    HalProcessorBrandString = 23,
    HalHypervisorInformation = 24,
    HalPlatformTimerInformation = 25,
    HalAcpiAuditInformation = 26,
    HalIrtInformation = 27,
    HalSecondaryInterruptInformation = 28,
    HalParkingPageInformation = 29,
    HalNumaRangeTableInformation = 30,
    HalChannelTopologyInformation = 31,
    HalExternalCacheInformation = 32,
    HalQueryDebuggerInformation = 33,
    HalFwBootPerformanceInformation = 34,
    HalFwS3PerformanceInformation = 35,
    HalGetChannelPowerInformation = 36,
    HalQueryStateElementInformation = 37,
    HalPsciInformation = 38,
    HalInterruptControllerInformation = 39,
    HalQueryIommuReservedRegionInformation = 40,
    HalQueryArmErrataInformation = 41,
    HalQueryProcessorEfficiencyInformation = 42,
    HalQueryAcpiWakeAlarmSystemPowerStateInformation = 43,
    HalQueryProfileNumberOfCounters = 44,
    HalQueryHyperlaunchEntrypoint = 45,
    HalHardwareWatchdogInformation = 46,
    HalDmaRemappingInformation = 47,
    HalQueryRuntimeServicesBlockInformation = 48,
    HalHeterogeneousMemoryAttributesInterface = 49
};

typedef enum _HAL_SET_INFORMATION_CLASS {
    HalProfileSourceInterval = 0,
    HalProfileSourceInterruptHandler = 1,
    HalMcaRegisterDriver = 2,
    HalKernelErrorHandler = 3,
    HalCmcRegisterDriver = 4,
    HalCpeRegisterDriver = 5,
    HalMcaLog = 6,
    HalCmcLog = 7,
    HalCpeLog = 8,
    HalGenerateCmcInterrupt = 9,
    HalProfileSourceTimerHandler = 10,
    HalEnlightenment = 11,
    HalProfileDpgoSourceInterruptHandler = 12,
    HalRegisterSecondaryInterruptInterface = 13,
    HalSetChannelPowerInformation = 14,
    HalI386ExceptionChainTerminatorInformation = 15,
    HalSetResetParkDisposition = 16,
    HalSetPsciSuspendMode = 17,
    HalSetHvciEnabled = 18,
    HalSetProcessorTraceInterruptHandler = 19,
    HalProfileSourceAdd = 20,
    HalProfileSourceRemove = 21,
    HalSetSwInterruptHandler = 22
};

typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter = 0,
    MaxHardwareCounterType = 1
};

typedef enum _IMAGE_POLICY_ENTRY_TYPE {
    ImagePolicyEntryTypeNone = 0,
    ImagePolicyEntryTypeBool = 1,
    ImagePolicyEntryTypeInt8 = 2,
    ImagePolicyEntryTypeUInt8 = 3,
    ImagePolicyEntryTypeInt16 = 4,
    ImagePolicyEntryTypeUInt16 = 5,
    ImagePolicyEntryTypeInt32 = 6,
    ImagePolicyEntryTypeUInt32 = 7,
    ImagePolicyEntryTypeInt64 = 8,
    ImagePolicyEntryTypeUInt64 = 9,
    ImagePolicyEntryTypeAnsiString = 10,
    ImagePolicyEntryTypeUnicodeString = 11,
    ImagePolicyEntryTypeOverride = 12,
    ImagePolicyEntryTypeMaximum = 13
};

typedef enum _IMAGE_POLICY_ID {
    ImagePolicyIdNone = 0,
    ImagePolicyIdEtw = 1,
    ImagePolicyIdDebug = 2,
    ImagePolicyIdCrashDump = 3,
    ImagePolicyIdCrashDumpKey = 4,
    ImagePolicyIdCrashDumpKeyGuid = 5,
    ImagePolicyIdParentSd = 6,
    ImagePolicyIdParentSdRev = 7,
    ImagePolicyIdSvn = 8,
    ImagePolicyIdDeviceId = 9,
    ImagePolicyIdCapability = 10,
    ImagePolicyIdScenarioId = 11,
    ImagePolicyIdMaximum = 12
};

typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18
};

typedef enum _INTERLOCKED_RESULT {
    ResultNegative = 1,
    ResultZero = 0,
    ResultPositive = 2
};

typedef enum _IO_ACCESS_MODE {
    SequentialAccess = 0,
    RandomAccess = 1
};

typedef enum _IO_ACCESS_TYPE {
    ReadAccess = 0,
    WriteAccess = 1,
    ModifyAccess = 2
};

typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject = 2,
    DeallocateObjectKeepRegisters = 3
};

typedef enum _IO_COMPLETION_ROUTINE_RESULT {
    ContinueCompletion = 0,
    StopCompletion = -1073741802
};

typedef enum _IO_CONTAINER_INFORMATION_CLASS {
    IoSessionStateInformation = 0,
    IoMaxContainerInformationClass = 1
};

typedef enum _IO_CONTAINER_NOTIFICATION_CLASS {
    IoSessionStateNotification = 0,
    IoMaxContainerNotificationClass = 1
};

typedef enum _IO_NOTIFICATION_EVENT_CATEGORY {
    EventCategoryReserved = 0,
    EventCategoryHardwareProfileChange = 1,
    EventCategoryDeviceInterfaceChange = 2,
    EventCategoryTargetDeviceChange = 3
};

typedef enum _IO_PAGING_PRIORITY {
    IoPagingPriorityInvalid = 0,
    IoPagingPriorityNormal = 1,
    IoPagingPriorityHigh = 2,
    IoPagingPriorityReserved1 = 3,
    IoPagingPriorityReserved2 = 4
};

typedef enum _IO_PRIORITY_HINT {
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5
};

typedef enum _IO_QUERY_DEVICE_DATA_FORMAT {
    IoQueryDeviceIdentifier = 0,
    IoQueryDeviceConfigurationData = 1,
    IoQueryDeviceComponentInformation = 2,
    IoQueryDeviceMaxData = 3
};

typedef enum _IO_RATE_CONTROL_TYPE {
    IoRateControlTypeCapMin = 0,
    IoRateControlTypeIopsCap = 0,
    IoRateControlTypeBandwidthCap = 1,
    IoRateControlTypeTimePercentCap = 2,
    IoRateControlTypeCapMax = 2,
    IoRateControlTypeReservationMin = 3,
    IoRateControlTypeIopsReservation = 3,
    IoRateControlTypeBandwidthReservation = 4,
    IoRateControlTypeTimePercentReservation = 5,
    IoRateControlTypeReservationMax = 5,
    IoRateControlTypeCriticalReservationMin = 6,
    IoRateControlTypeIopsCriticalReservation = 6,
    IoRateControlTypeBandwidthCriticalReservation = 7,
    IoRateControlTypeTimePercentCriticalReservation = 8,
    IoRateControlTypeCriticalReservationMax = 8,
    IoRateControlTypeSoftCapMin = 9,
    IoRateControlTypeIopsSoftCap = 9,
    IoRateControlTypeBandwidthSoftCap = 10,
    IoRateControlTypeTimePercentSoftCap = 11,
    IoRateControlTypeSoftCapMax = 11,
    IoRateControlTypeLimitExcessNotifyMin = 12,
    IoRateControlTypeIopsLimitExcessNotify = 12,
    IoRateControlTypeBandwidthLimitExcessNotify = 13,
    IoRateControlTypeTimePercentLimitExcessNotify = 14,
    IoRateControlTypeLimitExcessNotifyMax = 14,
    IoRateControlTypeMax = 15
};

typedef enum _IO_SESSION_EVENT {
    IoSessionEventIgnore = 0,
    IoSessionEventCreated = 1,
    IoSessionEventTerminated = 2,
    IoSessionEventConnected = 3,
    IoSessionEventDisconnected = 4,
    IoSessionEventLogon = 5,
    IoSessionEventLogoff = 6,
    IoSessionEventMax = 7
};

typedef enum _IO_SESSION_STATE {
    IoSessionStateCreated = 1,
    IoSessionStateInitialized = 2,
    IoSessionStateConnected = 3,
    IoSessionStateDisconnected = 4,
    IoSessionStateDisconnectedLoggedOn = 5,
    IoSessionStateLoggedOn = 6,
    IoSessionStateLoggedOff = 7,
    IoSessionStateTerminated = 8,
    IoSessionStateMax = 9
};

typedef enum _IRQ_DEVICE_POLICY {
    IrqPolicyMachineDefault = 0,
    IrqPolicyAllCloseProcessors = 1,
    IrqPolicyOneCloseProcessor = 2,
    IrqPolicyAllProcessorsInMachine = 3,
    IrqPolicySpecifiedProcessors = 4,
    IrqPolicySpreadMessagesAcrossAllProcessors = 5,
    IrqPolicyAllProcessorsInMachineWhenSteered = 6
};

typedef enum _IRQ_DEVICE_POLICY_USHORT {
    IrqPolicyMachineDefault = 0,
    IrqPolicyAllCloseProcessors = 1,
    IrqPolicyOneCloseProcessor = 2,
    IrqPolicyAllProcessorsInMachine = 3,
    IrqPolicyAllProcessorsInGroup = 3,
    IrqPolicySpecifiedProcessors = 4,
    IrqPolicySpreadMessagesAcrossAllProcessors = 5,
    IrqPolicyAllProcessorsInMachineWhenSteered = 6,
    IrqPolicyAllProcessorsInGroupWhenSteered = 6
};

typedef enum _IRQ_GROUP_POLICY {
    GroupAffinityAllGroupZero = 0,
    GroupAffinityDontCare = 1
};

typedef enum _IRQ_PRIORITY {
    IrqPriorityUndefined = 0,
    IrqPriorityLow = 1,
    IrqPriorityNormal = 2,
    IrqPriorityHigh = 3
};

typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectFreezeInformation = 18,
    JobObjectExtendedAccountingInformation = 19,
    JobObjectWakeInformation = 20,
    JobObjectBackgroundInformation = 21,
    JobObjectSchedulingRankBiasInformation = 22,
    JobObjectTimerVirtualizationInformation = 23,
    JobObjectCycleTimeNotification = 24,
    JobObjectClearEvent = 25,
    JobObjectInterferenceInformation = 26,
    JobObjectClearPeakJobMemoryUsed = 27,
    JobObjectMemoryUsageInformation = 28,
    JobObjectSharedCommit = 29,
    JobObjectContainerId = 30,
    JobObjectIoRateControlInformation = 31,
    JobObjectSiloRootDirectory = 37,
    JobObjectServerSiloBasicInformation = 38,
    JobObjectServerSiloUserSharedData = 39,
    JobObjectServerSiloInitialize = 40,
    JobObjectServerSiloRunningState = 41,
    JobObjectIoAttribution = 42,
    JobObjectMemoryPartitionInformation = 43,
    JobObjectContainerTelemetryId = 44,
    JobObjectSiloSystemRoot = 45,
    JobObjectEnergyTrackingState = 46,
    JobObjectThreadImpersonationInformation = 47,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass = 48
};

typedef enum _KBUGCHECK_BUFFER_DUMP_STATE {
    BufferEmpty = 0,
    BufferInserted = 1,
    BufferStarted = 2,
    BufferFinished = 3,
    BufferIncomplete = 4
};

typedef enum _KBUGCHECK_CALLBACK_REASON {
    KbCallbackInvalid = 0,
    KbCallbackReserved1 = 1,
    KbCallbackSecondaryDumpData = 2,
    KbCallbackDumpIo = 3,
    KbCallbackAddPages = 4,
    KbCallbackSecondaryMultiPartDumpData = 5,
    KbCallbackRemovePages = 6,
    KbCallbackTriageDumpData = 7
};

typedef enum _KBUGCHECK_DUMP_IO_TYPE {
    KbDumpIoInvalid = 0,
    KbDumpIoHeader = 1,
    KbDumpIoBody = 2,
    KbDumpIoSecondaryData = 3,
    KbDumpIoComplete = 4
};

typedef enum _KDPC_IMPORTANCE {
    LowImportance = 0,
    MediumImportance = 1,
    HighImportance = 2,
    MediumHighImportance = 3
};

typedef enum _KD_OPTION {
    KD_OPTION_SET_BLOCK_ENABLE = 0
};

typedef enum _KEY_INFORMATION_CLASS {
    KeyBasicInformation = 0,
    KeyNodeInformation = 1,
    KeyFullInformation = 2,
    KeyNameInformation = 3,
    KeyCachedInformation = 4,
    KeyFlagsInformation = 5,
    KeyVirtualizationInformation = 6,
    KeyHandleTagsInformation = 7,
    KeyTrustInformation = 8,
    KeyLayerInformation = 9,
    MaxKeyInfoClass = 10
};

typedef enum _KEY_SET_INFORMATION_CLASS {
    KeyWriteTimeInformation = 0,
    KeyWow64FlagsInformation = 1,
    KeyControlFlagsInformation = 2,
    KeySetVirtualizationInformation = 3,
    KeySetDebugInformation = 4,
    KeySetHandleTagsInformation = 5,
    KeySetLayerInformation = 6,
    MaxKeySetInfoClass = 7
};

typedef enum _KEY_VALUE_INFORMATION_CLASS {
    KeyValueBasicInformation = 0,
    KeyValueFullInformation = 1,
    KeyValuePartialInformation = 2,
    KeyValueFullInformationAlign64 = 3,
    KeyValuePartialInformationAlign64 = 4,
    KeyValueLayerInformation = 5,
    MaxKeyValueInfoClass = 6
};

typedef enum _KHETERO_CPU_POLICY {
    KHeteroCpuPolicyAll = 0,
    KHeteroCpuPolicyLarge = 1,
    KHeteroCpuPolicyLargeOrIdle = 2,
    KHeteroCpuPolicySmall = 3,
    KHeteroCpuPolicySmallOrIdle = 4,
    KHeteroCpuPolicyDynamic = 5,
    KHeteroCpuPolicyStaticMax = 5,
    KHeteroCpuPolicyBiasedSmall = 6,
    KHeteroCpuPolicyBiasedLarge = 7,
    KHeteroCpuPolicyDefault = 8,
    KHeteroCpuPolicyMax = 9
};

typedef enum _KINTERRUPT_MODE {
    LevelSensitive = 0,
    Latched = 1
};

typedef enum _KINTERRUPT_POLARITY {
    InterruptPolarityUnknown = 0,
    InterruptActiveHigh = 1,
    InterruptRisingEdge = 1,
    InterruptActiveLow = 2,
    InterruptFallingEdge = 2,
    InterruptActiveBoth = 3,
    InterruptActiveBothTriggerLow = 3,
    InterruptActiveBothTriggerHigh = 4
};

typedef enum _KPROFILE_SOURCE {
    ProfileTime = 0,
    ProfileAlignmentFixup = 1,
    ProfileTotalIssues = 2,
    ProfilePipelineDry = 3,
    ProfileLoadInstructions = 4,
    ProfilePipelineFrozen = 5,
    ProfileBranchInstructions = 6,
    ProfileTotalNonissues = 7,
    ProfileDcacheMisses = 8,
    ProfileIcacheMisses = 9,
    ProfileCacheMisses = 10,
    ProfileBranchMispredictions = 11,
    ProfileStoreInstructions = 12,
    ProfileFpInstructions = 13,
    ProfileIntegerInstructions = 14,
    Profile2Issue = 15,
    Profile3Issue = 16,
    Profile4Issue = 17,
    ProfileSpecialInstructions = 18,
    ProfileTotalCycles = 19,
    ProfileIcacheIssues = 20,
    ProfileDcacheAccesses = 21,
    ProfileMemoryBarrierCycles = 22,
    ProfileLoadLinkedIssues = 23,
    ProfileMaximum = 24
};

typedef enum _KTMOBJECT_TYPE {
    KTMOBJECT_TRANSACTION = 0,
    KTMOBJECT_TRANSACTION_MANAGER = 1,
    KTMOBJECT_RESOURCE_MANAGER = 2,
    KTMOBJECT_ENLISTMENT = 3,
    KTMOBJECT_INVALID = 4
};

typedef enum _KWAIT_REASON {
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrSpare0 = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    WrKeyedEvent = 21,
    WrTerminated = 22,
    WrProcessInSwap = 23,
    WrCpuRateControl = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    WrAlertByThreadId = 37,
    WrDeferredPreempt = 38,
    WrPhysicalFault = 39,
    MaximumWaitReason = 40
};

typedef enum _LOCK_OPERATION {
    IoReadAccess = 0,
    IoWriteAccess = 1,
    IoModifyAccess = 2
};

typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore = 0,
    RelationNumaNode = 1,
    RelationCache = 2,
    RelationProcessorPackage = 3,
    RelationGroup = 4,
    RelationAll = 0xffff
};

typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = 2,
    MmHardwareCoherentCached = 3,
    MmNonCachedUnordered = 4,
    MmUSWCCached = 5,
    MmMaximumCacheType = 6,
    MmNotMapped = -1
};

typedef enum _MEMORY_CACHING_TYPE_ORIG {
    MmFrameBufferCached = 2
};

typedef enum _MM_MDL_PAGE_CONTENTS_STATE {
    MmMdlPageContentsDynamic = 0,
    MmMdlPageContentsInvariant = 1,
    MmMdlPageContentsQuery = 2
};

typedef enum _MM_PAGE_PRIORITY {
    LowPagePriority = 0,
    NormalPagePriority = 16,
    HighPagePriority = 32
};

typedef enum _MM_ROTATE_DIRECTION {
    MmToFrameBuffer = 0,
    MmToFrameBufferNoCopy = 1,
    MmToRegularMemory = 2,
    MmToRegularMemoryNoCopy = 3,
    MmMaximumRotateDirection = 4
};

typedef enum _MM_SYSTEM_SIZE {
    MmSmallSystem = 0,
    MmMediumSystem = 1,
    MmLargeSystem = 2
};

typedef enum _MODE {
    KernelMode = 0,
    UserMode = 1,
    MaximumMode = 2
};

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn = 1,
    PowerMonitorDim = 2
};

typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3
};

typedef enum _OB_OPEN_REASON {
    ObCreateHandle = 0,
    ObOpenHandle = 1,
    ObDuplicateHandle = 2,
    ObInheritHandle = 3,
    ObMaxOpenReason = 4
};

typedef enum _OB_PREOP_CALLBACK_STATUS {
    OB_PREOP_SUCCESS = 0
};

typedef enum _OS_DEPLOYEMENT_STATE_VALUES {
    OS_DEPLOYMENT_STANDARD = 1,
    OS_DEPLOYMENT_COMPACT = 2
};

typedef enum _PCI_ACS_BIT {
    PciAcsReserved = 0,
    PciAcsBitEnable = 1,
    PciAcsBitDisable = 2,
    PciAcsBitDontCare = 3
};

typedef enum _PCI_HARDWARE_INTERFACE {
    PciConventional = 0,
    PciXMode1 = 1,
    PciXMode2 = 2,
    PciExpress = 3
};

typedef enum _PCW_CALLBACK_TYPE {
    PcwCallbackAddCounter = 0,
    PcwCallbackRemoveCounter = 1,
    PcwCallbackEnumerateInstances = 2,
    PcwCallbackCollectData = 3
};

typedef enum _PERFINFO_CCSWAP_TYPE {
    PerfCSwapIdleShort = 0,
    PerfCSwapIdle = 1,
    PerfCSwapLite = 2,
    PerfCSwapFull = 3
};

typedef enum _PERFINFO_DEBUG_EVENT_REASON {
    PerfInfoDebugEventReceived = 1,
    PerfInfoDebugEventContinued = 2,
    PerfInfoDebugEventMax = 3
};

typedef enum _PERFINFO_DYNAMIC_TICK_DISABLE_REASON {
    DynamicTickDisableReasonNone = 0,
    DynamicTickDisableReasonBcdOverride = 1,
    DynamicTickDisableReasonNoHwSupport = 2,
    DynamicTickDisableReasonEmOverride = 3,
    DynamicTickDisableReasonMax = 4
};

typedef enum _PERFINFO_DYNAMIC_TICK_VETO_REASON {
    DynamicTickVetoNone = 0,
    DynamicTickVetoProcBusy = 1,
    DynamicTickVetoSoftwareTimer = 2,
    DynamicTickVetoClockConstraint = 3,
    DynamicTickVetoClockOutOfSync = 4,
    DynamicTickVetoClockUpdateFailed = 5,
    DynamicTickVetoNoDeepSleep = 6,
    DynamicTickVetoMax = 7
};

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE {
    PerfInfoMemUsagePfnMetadata = 0,
    PerfInfoMemUsageMax = 1
};

typedef enum _PERFINFO_MEM_RESET_INFO_TYPE {
    PerfInfoMemReset = 0,
    PerfInfoMemResetUndo = 1,
    PerfInfoMemResetUndoFailed = 2,
    PerfInfoMemResetMax = 3
};

typedef enum _PERFINFO_MM_STAT {
    PerfInfoMMStatNotUsed = 0,
    PerfInfoMMStatAggregatePageCombine = 1,
    PerfInfoMMStatIterationPageCombine = 2,
    PerfInfoMMStatMax = 3
};

typedef enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE {
    ResourceTypeSingle = 0,
    ResourceTypeRange = 1,
    ResourceTypeExtendedCounterConfiguration = 2,
    ResourceTypeOverflow = 3,
    ResourceTypeMax = 4
};

typedef enum _POOL_TYPE {
    NonPagedPool = 0,
    NonPagedPoolExecute = 0,
    PagedPool = 1,
    NonPagedPoolMustSucceed = 2,
    DontUseThisType = 3,
    NonPagedPoolCacheAligned = 4,
    PagedPoolCacheAligned = 5,
    NonPagedPoolCacheAlignedMustS = 6,
    MaxPoolType = 7,
    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = 2,
    NonPagedPoolBaseCacheAligned = 4,
    NonPagedPoolBaseCacheAlignedMustS = 6,
    NonPagedPoolSession = 32,
    PagedPoolSession = 33,
    NonPagedPoolMustSucceedSession = 34,
    DontUseThisTypeSession = 35,
    NonPagedPoolCacheAlignedSession = 36,
    PagedPoolCacheAlignedSession = 37,
    NonPagedPoolCacheAlignedMustSSession = 38,
    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = 516,
    NonPagedPoolSessionNx = 544
};

typedef enum _POWER_MONITOR_REQUEST_TYPE {
    MonitorRequestTypeOff = 0,
    MonitorRequestTypeOnAndPresent = 1,
    MonitorRequestTypeToggleOn = 2
};

typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop = 1,
    PlatformRoleMobile = 2,
    PlatformRoleWorkstation = 3,
    PlatformRoleEnterpriseServer = 4,
    PlatformRoleSOHOServer = 5,
    PlatformRoleAppliancePC = 6,
    PlatformRolePerformanceServer = 7,
    PlatformRoleSlate = 8,
    PlatformRoleMaximum = 9
};

typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3
};

typedef enum _POWER_STATE_TYPE {
    SystemPowerState = 0,
    DevicePowerState = 1
};

typedef enum _PO_FX_PERF_STATE_TYPE {
    PoFxPerfStateTypeDiscrete = 0,
    PoFxPerfStateTypeRange = 1,
    PoFxPerfStateTypeMaximum = 2
};

typedef enum _PO_FX_PERF_STATE_UNIT {
    PoFxPerfStateUnitOther = 0,
    PoFxPerfStateUnitFrequency = 1,
    PoFxPerfStateUnitBandwidth = 2,
    PoFxPerfStateUnitMaximum = 3
};

typedef enum _PO_THERMAL_REQUEST_TYPE {
    PoThermalRequestPassive = 0,
    PoThermalRequestActive = 1
};

typedef enum _PROCESSINFOCLASS {
    ProcessBasicInformation = 0,
    ProcessQuotaLimits = 1,
    ProcessIoCounters = 2,
    ProcessVmCounters = 3,
    ProcessTimes = 4,
    ProcessBasePriority = 5,
    ProcessRaisePriority = 6,
    ProcessDebugPort = 7,
    ProcessExceptionPort = 8,
    ProcessAccessToken = 9,
    ProcessLdtInformation = 10,
    ProcessLdtSize = 11,
    ProcessDefaultHardErrorMode = 12,
    ProcessIoPortHandlers = 13,
    ProcessPooledUsageAndLimits = 14,
    ProcessWorkingSetWatch = 15,
    ProcessUserModeIOPL = 16,
    ProcessEnableAlignmentFaultFixup = 17,
    ProcessPriorityClass = 18,
    ProcessWx86Information = 19,
    ProcessHandleCount = 20,
    ProcessAffinityMask = 21,
    ProcessPriorityBoost = 22,
    ProcessDeviceMap = 23,
    ProcessSessionInformation = 24,
    ProcessForegroundInformation = 25,
    ProcessWow64Information = 26,
    ProcessImageFileName = 27,
    ProcessLUIDDeviceMapsEnabled = 28,
    ProcessBreakOnTermination = 29,
    ProcessDebugObjectHandle = 30,
    ProcessDebugFlags = 31,
    ProcessHandleTracing = 32,
    ProcessIoPriority = 33,
    ProcessExecuteFlags = 34,
    ProcessTlsInformation = 35,
    ProcessCookie = 36,
    ProcessImageInformation = 37,
    ProcessCycleTime = 38,
    ProcessPagePriority = 39,
    ProcessInstrumentationCallback = 40,
    ProcessThreadStackAllocation = 41,
    ProcessWorkingSetWatchEx = 42,
    ProcessImageFileNameWin32 = 43,
    ProcessImageFileMapping = 44,
    ProcessAffinityUpdateMode = 45,
    ProcessMemoryAllocationMode = 46,
    ProcessGroupInformation = 47,
    ProcessTokenVirtualizationEnabled = 48,
    ProcessOwnerInformation = 49,
    ProcessWindowInformation = 50,
    ProcessHandleInformation = 51,
    ProcessMitigationPolicy = 52,
    ProcessDynamicFunctionTableInformation = 53,
    ProcessHandleCheckingMode = 54,
    ProcessKeepAliveCount = 55,
    ProcessRevokeFileHandles = 56,
    ProcessWorkingSetControl = 57,
    ProcessHandleTable = 58,
    ProcessCheckStackExtentsMode = 59,
    ProcessCommandLineInformation = 60,
    ProcessProtectionInformation = 61,
    ProcessMemoryExhaustion = 62,
    ProcessFaultInformation = 63,
    ProcessTelemetryIdInformation = 64,
    ProcessCommitReleaseInformation = 65,
    ProcessReserved1Information = 66,
    ProcessReserved2Information = 67,
    ProcessSubsystemProcess = 68,
    ProcessInPrivate = 70,
    ProcessRaiseUMExceptionOnInvalidHandleClose = 71,
    ProcessSubsystemInformation = 75,
    ProcessWin32kSyscallFilterInformation = 79,
    ProcessEnergyTrackingState = 82,
    MaxProcessInfoClass = 83
};

typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified = 0,
    CacheInstruction = 1,
    CacheData = 2,
    CacheTrace = 3
};

typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy = 0,
    ProcessASLRPolicy = 1,
    ProcessDynamicCodePolicy = 2,
    ProcessStrictHandleCheckPolicy = 3,
    ProcessSystemCallDisablePolicy = 4,
    ProcessMitigationOptionsMask = 5,
    ProcessExtensionPointDisablePolicy = 6,
    ProcessControlFlowGuardPolicy = 7,
    ProcessSignaturePolicy = 8,
    ProcessFontDisablePolicy = 9,
    ProcessImageLoadPolicy = 10,
    ProcessSystemCallFilterPolicy = 11,
    ProcessPayloadRestrictionPolicy = 12,
    ProcessChildProcessPolicy = 13,
    ProcessSideChannelIsolationPolicy = 14,
    MaxProcessMitigationPolicy = 15
};

typedef enum _PSCREATEPROCESSNOTIFYTYPE {
    PsCreateProcessNotifySubsystems = 0
};

typedef enum _PSCREATETHREADNOTIFYTYPE {
    PsCreateThreadNotifyNonSystem = 0,
    PsCreateThreadNotifySubsystems = 1
};

typedef enum _PS_ATTRIBUTE_NUM {
    PsAttributeParentProcess = 0,
    PsAttributeDebugObject = 1,
    PsAttributeToken = 2,
    PsAttributeClientId = 3,
    PsAttributeTebAddress = 4,
    PsAttributeImageName = 5,
    PsAttributeImageInfo = 6,
    PsAttributeMemoryReserve = 7,
    PsAttributePriorityClass = 8,
    PsAttributeErrorMode = 9,
    PsAttributeStdHandleInfo = 10,
    PsAttributeHandleList = 11,
    PsAttributeGroupAffinity = 12,
    PsAttributePreferredNode = 13,
    PsAttributeIdealProcessor = 14,
    PsAttributeUmsThread = 15,
    PsAttributeMitigationOptions = 16,
    PsAttributeProtectionLevel = 17,
    PsAttributeSecureProcess = 18,
    PsAttributeJobList = 19,
    PsAttributeChildProcessPolicy = 20,
    PsAttributeAllApplicationPackagesPolicy = 21,
    PsAttributeWin32kFilter = 22,
    PsAttributeSafeOpenPromptOriginClaim = 23,
    PsAttributeBnoIsolation = 24,
    PsAttributeDesktopAppPolicy = 25,
    PsAttributeChpe = 26,
    PsAttributeMax = 27
};

typedef enum _PS_MITIGATION_OPTION {
    PS_MITIGATION_OPTION_NX = 0,
    PS_MITIGATION_OPTION_SEHOP = 1,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    PS_MITIGATION_OPTION_CET_SHADOW_STACKS = 31
};

typedef enum _PS_PROTECTED_SIGNER {
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerWinSystem = 7,
    PsProtectedSignerApp = 8,
    PsProtectedSignerMax = 9
};

typedef enum _PS_PROTECTED_TYPE {
    PsProtectedTypeNone = 0,
    PsProtectedTypeProtectedLight = 1,
    PsProtectedTypeProtected = 2,
    PsProtectedTypeMax = 3
};

typedef enum _PS_STD_HANDLE_STATE {
    PsNeverDuplicate = 0,
    PsRequestDuplicate = 1,
    PsAlwaysDuplicate = 2,
    PsMaxStdHandleStates = 3
};

typedef enum _PS_WAKE_REASON {
    PsWakeReasonUser = 0,
    PsWakeReasonExecutionRequired = 1,
    PsWakeReasonKernel = 2,
    PsWakeReasonInstrumentation = 3,
    PsWakeReasonPreserveProcess = 4,
    PsWakeReasonActivityReference = 5,
    PsWakeReasonWorkOnBehalf = 6,
    PsMaxWakeReasons = 7
};

typedef enum _REG_NOTIFY_CLASS {
    RegNtDeleteKey = 0,
    RegNtPreDeleteKey = 0,
    RegNtSetValueKey = 1,
    RegNtPreSetValueKey = 1,
    RegNtDeleteValueKey = 2,
    RegNtPreDeleteValueKey = 2,
    RegNtSetInformationKey = 3,
    RegNtPreSetInformationKey = 3,
    RegNtRenameKey = 4,
    RegNtPreRenameKey = 4,
    RegNtEnumerateKey = 5,
    RegNtPreEnumerateKey = 5,
    RegNtEnumerateValueKey = 6,
    RegNtPreEnumerateValueKey = 6,
    RegNtQueryKey = 7,
    RegNtPreQueryKey = 7,
    RegNtQueryValueKey = 8,
    RegNtPreQueryValueKey = 8,
    RegNtQueryMultipleValueKey = 9,
    RegNtPreQueryMultipleValueKey = 9,
    RegNtPreCreateKey = 10,
    RegNtPostCreateKey = 11,
    RegNtPreOpenKey = 12,
    RegNtPostOpenKey = 13,
    RegNtKeyHandleClose = 14,
    RegNtPreKeyHandleClose = 14,
    RegNtPostDeleteKey = 15,
    RegNtPostSetValueKey = 16,
    RegNtPostDeleteValueKey = 17,
    RegNtPostSetInformationKey = 18,
    RegNtPostRenameKey = 19,
    RegNtPostEnumerateKey = 20,
    RegNtPostEnumerateValueKey = 21,
    RegNtPostQueryKey = 22,
    RegNtPostQueryValueKey = 23,
    RegNtPostQueryMultipleValueKey = 24,
    RegNtPostKeyHandleClose = 25,
    RegNtPreCreateKeyEx = 26,
    RegNtPostCreateKeyEx = 27,
    RegNtPreOpenKeyEx = 28,
    RegNtPostOpenKeyEx = 29,
    RegNtPreFlushKey = 30,
    RegNtPostFlushKey = 31,
    RegNtPreLoadKey = 32,
    RegNtPostLoadKey = 33,
    RegNtPreUnLoadKey = 34,
    RegNtPostUnLoadKey = 35,
    RegNtPreQueryKeySecurity = 36,
    RegNtPostQueryKeySecurity = 37,
    RegNtPreSetKeySecurity = 38,
    RegNtPostSetKeySecurity = 39,
    RegNtCallbackObjectContextCleanup = 40,
    RegNtPreRestoreKey = 41,
    RegNtPostRestoreKey = 42,
    RegNtPreSaveKey = 43,
    RegNtPostSaveKey = 44,
    RegNtPreReplaceKey = 45,
    RegNtPostReplaceKey = 46,
    RegNtPreQueryKeyName = 47,
    RegNtPostQueryKeyName = 48,
    MaxRegNtNotifyClass = 49
};

typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation = 0,
    ResourceManagerCompletionInformation = 1
};

typedef enum _RESOURCE_TRANSLATION_DIRECTION {
    TranslateChildToParent = 0,
    TranslateParentToChild = 1
};

typedef enum _RTL_GENERIC_COMPARE_RESULTS {
    GenericLessThan = 0,
    GenericGreaterThan = 1,
    GenericEqual = 2
};

typedef enum _RTL_RESOURCE_POLICY_FLAGS {
    RTL_RESOURCE_POLICY_FLAGS_NONE = 0
};

typedef enum _SECTION_INHERIT {
    ViewShare = 1,
    ViewUnmap = 2
};

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
};

typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor = 0,
    QuerySecurityDescriptor = 1,
    DeleteSecurityDescriptor = 2,
    AssignSecurityDescriptor = 3
};

typedef enum _SE_ADT_PARAMETER_TYPE {
    SeAdtParmTypeNone = 0,
    SeAdtParmTypeString = 1,
    SeAdtParmTypeFileSpec = 2,
    SeAdtParmTypeUlong = 3,
    SeAdtParmTypeSid = 4,
    SeAdtParmTypeLogonId = 5,
    SeAdtParmTypeNoLogonId = 6,
    SeAdtParmTypeAccessMask = 7,
    SeAdtParmTypePrivs = 8,
    SeAdtParmTypeObjectTypes = 9,
    SeAdtParmTypeHexUlong = 10,
    SeAdtParmTypePtr = 11,
    SeAdtParmTypeTime = 12,
    SeAdtParmTypeGuid = 13,
    SeAdtParmTypeLuid = 14,
    SeAdtParmTypeHexInt64 = 15,
    SeAdtParmTypeStringList = 16,
    SeAdtParmTypeSidList = 17,
    SeAdtParmTypeDuration = 18,
    SeAdtParmTypeUserAccountControl = 19,
    SeAdtParmTypeNoUac = 20,
    SeAdtParmTypeMessage = 21,
    SeAdtParmTypeDateTime = 22,
    SeAdtParmTypeSockAddr = 23,
    SeAdtParmTypeSD = 24,
    SeAdtParmTypeLogonHours = 25,
    SeAdtParmTypeLogonIdNoSid = 26,
    SeAdtParmTypeUlongNoConv = 27,
    SeAdtParmTypeSockAddrNoPort = 28,
    SeAdtParmTypeAccessReason = 29,
    SeAdtParmTypeStagingReason = 30,
    SeAdtParmTypeResourceAttribute = 31,
    SeAdtParmTypeClaims = 32,
    SeAdtParmTypeLogonIdAsSid = 33,
    SeAdtParmTypeMultiSzString = 34,
    SeAdtParmTypeLogonIdEx = 35
};

typedef enum _SE_IMAGE_SIGNATURE_TYPE {
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded = 1,
    SeImageSignatureCache = 2,
    SeImageSignatureCatalogCached = 3,
    SeImageSignatureCatalogNotCached = 4,
    SeImageSignatureCatalogHint = 5,
    SeImageSignaturePackageCatalog = 6
};

typedef enum _SE_IMAGE_TYPE {
    SeImageTypeElamDriver = 0,
    SeImageTypeDriver = 1,
    SeImageTypePlatformSecureFile = 2,
    SeImageTypeDynamicCodeFile = 3,
    SeImageTypeMax = 4
};

typedef enum _SE_IMAGE_VERIFICATION_CALLBACK_TYPE {
    SeImageVerificationCallbackInformational = 0
};

typedef enum _SIG {
    SigUsbdHandleInfo = 0x44425355
};

typedef enum _SOC_SUBSYSTEM_TYPE {
    SOC_SUBSYS_WIRELESS_MODEM = 0,
    SOC_SUBSYS_AUDIO_DSP = 1,
    SOC_SUBSYS_WIRELSS_CONNECTIVITY = 2,
    SOC_SUBSYS_SENSORS = 3,
    SOC_SUBSYS_COMPUTE_DSP = 4,
    SOC_SUBSYS_SECURE_PROC = 5,
    SOC_SUBSYS_VENDOR_DEFINED = 0x10000
};

typedef enum _STATE_LOCATION_TYPE {
    LocationTypeRegistry = 0,
    LocationTypeFileSystem = 1,
    LocationTypeMaximum = 2
};

typedef enum _SUBSYSTEM_INFORMATION_TYPE {
    SubsystemInformationTypeWin32 = 0,
    SubsystemInformationTypeWSL = 1,
    MaxSubsystemInformationType = 2
};

typedef enum _SUITE_TYPE {
    SmallBusiness = 0,
    Enterprise = 1,
    BackOffice = 2,
    CommunicationServer = 3,
    TerminalServer = 4,
    SmallBusinessRestricted = 5,
    EmbeddedNT = 6,
    DataCenter = 7,
    SingleUserTS = 8,
    Personal = 9,
    Blade = 10,
    EmbeddedRestricted = 11,
    SecurityAppliance = 12,
    StorageServer = 13,
    ComputeServer = 14,
    WHServer = 15,
    PhoneNT = 16,
    MultiUserTS = 17,
    MaxSuiteType = 18
};

typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION {
    SystemFirmwareTable_Enumerate = 0,
    SystemFirmwareTable_Get = 1
};

typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
};

typedef enum _SYSTEM_PROCESS_CLASSIFICATION {
    SystemProcessClassificationNormal = 0,
    SystemProcessClassificationSystem = 1,
    SystemProcessClassificationSecureSystem = 2,
    SystemProcessClassificationMemCompression = 3,
    SystemProcessClassificationRegistry = 4,
    SystemProcessClassificationMaximum = 5
};

typedef enum _SleepstudyHelper_Namespace {
    SSH_PDO = 0,
    SSH_SLEEPSTUDY_HANDLE = 1,
    SSH_FDO = 2,
    SSH_PID = 3,
    SSH_GENERAL_HANDLE = 4,
    SSH_CONNECTION_DEVICE = 5,
    SSH_CONNECTION_OPREGION = 6,
    SSH_NONE = 7
};

typedef enum _TABLE_SEARCH_RESULT {
    TableEmptyTree = 0,
    TableFoundNode = 1,
    TableInsertAsLeft = 2,
    TableInsertAsRight = 3
};

typedef enum _THREADINFOCLASS {
    ThreadBasicInformation = 0,
    ThreadTimes = 1,
    ThreadPriority = 2,
    ThreadBasePriority = 3,
    ThreadAffinityMask = 4,
    ThreadImpersonationToken = 5,
    ThreadDescriptorTableEntry = 6,
    ThreadEnableAlignmentFaultFixup = 7,
    ThreadEventPair_Reusable = 8,
    ThreadQuerySetWin32StartAddress = 9,
    ThreadZeroTlsCell = 10,
    ThreadPerformanceCount = 11,
    ThreadAmILastThread = 12,
    ThreadIdealProcessor = 13,
    ThreadPriorityBoost = 14,
    ThreadSetTlsArrayAddress = 15,
    ThreadIsIoPending = 16,
    ThreadHideFromDebugger = 17,
    ThreadBreakOnTermination = 18,
    ThreadSwitchLegacyState = 19,
    ThreadIsTerminated = 20,
    ThreadLastSystemCall = 21,
    ThreadIoPriority = 22,
    ThreadCycleTime = 23,
    ThreadPagePriority = 24,
    ThreadActualBasePriority = 25,
    ThreadTebInformation = 26,
    ThreadCSwitchMon = 27,
    ThreadCSwitchPmu = 28,
    ThreadWow64Context = 29,
    ThreadGroupInformation = 30,
    ThreadUmsInformation = 31,
    ThreadCounterProfiling = 32,
    ThreadIdealProcessorEx = 33,
    ThreadCpuAccountingInformation = 34,
    ThreadSuspendCount = 35,
    ThreadActualGroupAffinity = 41,
    ThreadDynamicCodePolicyInfo = 42,
    ThreadSubsystemInformation = 45,
    MaxThreadInfoClass = 51
};

typedef enum _TIMER_SET_INFORMATION_CLASS {
    TimerSetCoalescableTimer = 0,
    MaxTimerInfoClass = 1
};

typedef enum _TIMER_TYPE {
    NotificationTimer = 0,
    SynchronizationTimer = 1
};

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3
};

typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass = 0,
    TraceHandleClass = 1,
    TraceEnableFlagsClass = 2,
    TraceEnableLevelClass = 3,
    GlobalLoggerHandleClass = 4,
    EventLoggerHandleClass = 5,
    AllLoggerHandlesClass = 6,
    TraceHandleByNameClass = 7,
    LoggerEventsLostClass = 8,
    TraceSessionSettingsClass = 9,
    LoggerEventsLoggedClass = 10,
    DiskIoNotifyRoutinesClass = 11,
    TraceInformationClassReserved1 = 12,
    FltIoNotifyRoutinesClass = 13,
    TraceInformationClassReserved2 = 14,
    WdfNotifyRoutinesClass = 15,
    MaxTraceInformationClass = 16
};

typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation = 0,
    TransactionManagerLogInformation = 1,
    TransactionManagerLogPathInformation = 2,
    TransactionManagerRecoveryInformation = 4
};

typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation = 0,
    TransactionPropertiesInformation = 1,
    TransactionEnlistmentInformation = 2,
    TransactionSuperiorEnlistmentInformation = 3
};

typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted = 2,
    TransactionOutcomeAborted = 3
};

typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt = 2,
    TransactionStateCommittedNotify = 3
};

typedef enum _TlgBlob_t {
    _TlgBlobNone = 0,
    _TlgBlobEnd = 1,
    _TlgBlobProvider = 2,
    _TlgBlobEvent3 = 3,
    _TlgBlobProvider3 = 4,
    _TlgBlobEvent2 = 5,
    _TlgBlobMax = 6
};

typedef enum _TlgFlags_t {
    _TlgFlagsNone = 0,
    _TlgFlagsPtr64 = 1
};

typedef enum _TlgOptions_t {
    _TlgOptionNone = 0,
    _TlgOptionGroup = 1
};

typedef enum _URLZONEREG {
    URLZONEREG_DEFAULT = 0,
    URLZONEREG_HKLM = 1,
    URLZONEREG_HKCU = 2
};

typedef enum _USBD_ENDPOINT_OFFLOAD_MODE {
    UsbdEndpointOffloadModeNotSupported = 0,
    UsbdEndpointOffloadSoftwareAssisted = 1,
    UsbdEndpointOffloadHardwareAssisted = 2
};

typedef enum _USBD_PIPE_TYPE {
    UsbdPipeTypeControl = 0,
    UsbdPipeTypeIsochronous = 1,
    UsbdPipeTypeBulk = 2,
    UsbdPipeTypeInterrupt = 3
};

typedef enum _USB_CONTROLLER_FLAVOR {
    USB_HcGeneric = 0,
    OHCI_Generic = 100,
    OHCI_Hydra = 101,
    OHCI_NEC = 102,
    UHCI_Generic = 200,
    UHCI_Piix4 = 201,
    UHCI_Piix3 = 202,
    UHCI_Ich2 = 203,
    UHCI_Reserved204 = 204,
    UHCI_Ich1 = 205,
    UHCI_Ich3m = 206,
    UHCI_Ich4 = 207,
    UHCI_Ich5 = 208,
    UHCI_Ich6 = 209,
    UHCI_Intel = 249,
    UHCI_VIA = 250,
    UHCI_VIA_x01 = 251,
    UHCI_VIA_x02 = 252,
    UHCI_VIA_x03 = 253,
    UHCI_VIA_x04 = 254,
    UHCI_VIA_x0E_FIFO = 264,
    EHCI_Generic = 1000,
    EHCI_NEC = 2000,
    EHCI_Lucent = 3000,
    EHCI_NVIDIA_Tegra2 = 4000,
    EHCI_NVIDIA_Tegra3 = 4001,
    EHCI_Intel_Medfield = 5001
};

typedef enum _USB_DEVICE_SPEED {
    UsbLowSpeed = 0,
    UsbFullSpeed = 1,
    UsbHighSpeed = 2,
    UsbSuperSpeed = 3
};

typedef enum _USB_DEVICE_TYPE {
    Usb11Device = 0,
    Usb20Device = 1
};

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3
};

typedef enum _WAIT_TYPE {
    WaitAll = 0,
    WaitAny = 1,
    WaitNotification = 2,
    WaitDequeue = 3
};

typedef enum _WDFFUNCENUM {
    WdfChildListCreateTableIndex = 0,
    WdfChildListGetDeviceTableIndex = 1,
    WdfChildListRetrievePdoTableIndex = 2,
    WdfChildListRetrieveAddressDescriptionTableIndex = 3,
    WdfChildListBeginScanTableIndex = 4,
    WdfChildListEndScanTableIndex = 5,
    WdfChildListBeginIterationTableIndex = 6,
    WdfChildListRetrieveNextDeviceTableIndex = 7,
    WdfChildListEndIterationTableIndex = 8,
    WdfChildListAddOrUpdateChildDescriptionAsPresentTableIndex = 9,
    WdfChildListUpdateChildDescriptionAsMissingTableIndex = 10,
    WdfChildListUpdateAllChildDescriptionsAsPresentTableIndex = 11,
    WdfChildListRequestChildEjectTableIndex = 12,
    WdfCollectionCreateTableIndex = 13,
    WdfCollectionGetCountTableIndex = 14,
    WdfCollectionAddTableIndex = 15,
    WdfCollectionRemoveTableIndex = 16,
    WdfCollectionRemoveItemTableIndex = 17,
    WdfCollectionGetItemTableIndex = 18,
    WdfCollectionGetFirstItemTableIndex = 19,
    WdfCollectionGetLastItemTableIndex = 20,
    WdfCommonBufferCreateTableIndex = 21,
    WdfCommonBufferGetAlignedVirtualAddressTableIndex = 22,
    WdfCommonBufferGetAlignedLogicalAddressTableIndex = 23,
    WdfCommonBufferGetLengthTableIndex = 24,
    WdfControlDeviceInitAllocateTableIndex = 25,
    WdfControlDeviceInitSetShutdownNotificationTableIndex = 26,
    WdfControlFinishInitializingTableIndex = 27,
    WdfDeviceGetDeviceStateTableIndex = 28,
    WdfDeviceSetDeviceStateTableIndex = 29,
    WdfWdmDeviceGetWdfDeviceHandleTableIndex = 30,
    WdfDeviceWdmGetDeviceObjectTableIndex = 31,
    WdfDeviceWdmGetAttachedDeviceTableIndex = 32,
    WdfDeviceWdmGetPhysicalDeviceTableIndex = 33,
    WdfDeviceWdmDispatchPreprocessedIrpTableIndex = 34,
    WdfDeviceAddDependentUsageDeviceObjectTableIndex = 35,
    WdfDeviceAddRemovalRelationsPhysicalDeviceTableIndex = 36,
    WdfDeviceRemoveRemovalRelationsPhysicalDeviceTableIndex = 37,
    WdfDeviceClearRemovalRelationsDevicesTableIndex = 38,
    WdfDeviceGetDriverTableIndex = 39,
    WdfDeviceRetrieveDeviceNameTableIndex = 40,
    WdfDeviceAssignMofResourceNameTableIndex = 41,
    WdfDeviceGetIoTargetTableIndex = 42,
    WdfDeviceGetDevicePnpStateTableIndex = 43,
    WdfDeviceGetDevicePowerStateTableIndex = 44,
    WdfDeviceGetDevicePowerPolicyStateTableIndex = 45,
    WdfDeviceAssignS0IdleSettingsTableIndex = 46,
    WdfDeviceAssignSxWakeSettingsTableIndex = 47,
    WdfDeviceOpenRegistryKeyTableIndex = 48,
    WdfDeviceSetSpecialFileSupportTableIndex = 49,
    WdfDeviceSetCharacteristicsTableIndex = 50,
    WdfDeviceGetCharacteristicsTableIndex = 51,
    WdfDeviceGetAlignmentRequirementTableIndex = 52,
    WdfDeviceSetAlignmentRequirementTableIndex = 53,
    WdfDeviceInitFreeTableIndex = 54,
    WdfDeviceInitSetPnpPowerEventCallbacksTableIndex = 55,
    WdfDeviceInitSetPowerPolicyEventCallbacksTableIndex = 56,
    WdfDeviceInitSetPowerPolicyOwnershipTableIndex = 57,
    WdfDeviceInitRegisterPnpStateChangeCallbackTableIndex = 58,
    WdfDeviceInitRegisterPowerStateChangeCallbackTableIndex = 59,
    WdfDeviceInitRegisterPowerPolicyStateChangeCallbackTableIndex = 60,
    WdfDeviceInitSetIoTypeTableIndex = 61,
    WdfDeviceInitSetExclusiveTableIndex = 62,
    WdfDeviceInitSetPowerNotPageableTableIndex = 63,
    WdfDeviceInitSetPowerPageableTableIndex = 64,
    WdfDeviceInitSetPowerInrushTableIndex = 65,
    WdfDeviceInitSetDeviceTypeTableIndex = 66,
    WdfDeviceInitAssignNameTableIndex = 67,
    WdfDeviceInitAssignSDDLStringTableIndex = 68,
    WdfDeviceInitSetDeviceClassTableIndex = 69,
    WdfDeviceInitSetCharacteristicsTableIndex = 70,
    WdfDeviceInitSetFileObjectConfigTableIndex = 71,
    WdfDeviceInitSetRequestAttributesTableIndex = 72,
    WdfDeviceInitAssignWdmIrpPreprocessCallbackTableIndex = 73,
    WdfDeviceInitSetIoInCallerContextCallbackTableIndex = 74,
    WdfDeviceCreateTableIndex = 75,
    WdfDeviceSetStaticStopRemoveTableIndex = 76,
    WdfDeviceCreateDeviceInterfaceTableIndex = 77,
    WdfDeviceSetDeviceInterfaceStateTableIndex = 78,
    WdfDeviceRetrieveDeviceInterfaceStringTableIndex = 79,
    WdfDeviceCreateSymbolicLinkTableIndex = 80,
    WdfDeviceQueryPropertyTableIndex = 81,
    WdfDeviceAllocAndQueryPropertyTableIndex = 82,
    WdfDeviceSetPnpCapabilitiesTableIndex = 83,
    WdfDeviceSetPowerCapabilitiesTableIndex = 84,
    WdfDeviceSetBusInformationForChildrenTableIndex = 85,
    WdfDeviceIndicateWakeStatusTableIndex = 86,
    WdfDeviceSetFailedTableIndex = 87,
    WdfDeviceStopIdleNoTrackTableIndex = 88,
    WdfDeviceResumeIdleNoTrackTableIndex = 89,
    WdfDeviceGetFileObjectTableIndex = 90,
    WdfDeviceEnqueueRequestTableIndex = 91,
    WdfDeviceGetDefaultQueueTableIndex = 92,
    WdfDeviceConfigureRequestDispatchingTableIndex = 93,
    WdfDmaEnablerCreateTableIndex = 94,
    WdfDmaEnablerGetMaximumLengthTableIndex = 95,
    WdfDmaEnablerGetMaximumScatterGatherElementsTableIndex = 96,
    WdfDmaEnablerSetMaximumScatterGatherElementsTableIndex = 97,
    WdfDmaTransactionCreateTableIndex = 98,
    WdfDmaTransactionInitializeTableIndex = 99,
    WdfDmaTransactionInitializeUsingRequestTableIndex = 100,
    WdfDmaTransactionExecuteTableIndex = 101,
    WdfDmaTransactionReleaseTableIndex = 102,
    WdfDmaTransactionDmaCompletedTableIndex = 103,
    WdfDmaTransactionDmaCompletedWithLengthTableIndex = 104,
    WdfDmaTransactionDmaCompletedFinalTableIndex = 105,
    WdfDmaTransactionGetBytesTransferredTableIndex = 106,
    WdfDmaTransactionSetMaximumLengthTableIndex = 107,
    WdfDmaTransactionGetRequestTableIndex = 108,
    WdfDmaTransactionGetCurrentDmaTransferLengthTableIndex = 109,
    WdfDmaTransactionGetDeviceTableIndex = 110,
    WdfDpcCreateTableIndex = 111,
    WdfDpcEnqueueTableIndex = 112,
    WdfDpcCancelTableIndex = 113,
    WdfDpcGetParentObjectTableIndex = 114,
    WdfDpcWdmGetDpcTableIndex = 115,
    WdfDriverCreateTableIndex = 116,
    WdfDriverGetRegistryPathTableIndex = 117,
    WdfDriverWdmGetDriverObjectTableIndex = 118,
    WdfDriverOpenParametersRegistryKeyTableIndex = 119,
    WdfWdmDriverGetWdfDriverHandleTableIndex = 120,
    WdfDriverRegisterTraceInfoTableIndex = 121,
    WdfDriverRetrieveVersionStringTableIndex = 122,
    WdfDriverIsVersionAvailableTableIndex = 123,
    WdfFdoInitWdmGetPhysicalDeviceTableIndex = 124,
    WdfFdoInitOpenRegistryKeyTableIndex = 125,
    WdfFdoInitQueryPropertyTableIndex = 126,
    WdfFdoInitAllocAndQueryPropertyTableIndex = 127,
    WdfFdoInitSetEventCallbacksTableIndex = 128,
    WdfFdoInitSetFilterTableIndex = 129,
    WdfFdoInitSetDefaultChildListConfigTableIndex = 130,
    WdfFdoQueryForInterfaceTableIndex = 131,
    WdfFdoGetDefaultChildListTableIndex = 132,
    WdfFdoAddStaticChildTableIndex = 133,
    WdfFdoLockStaticChildListForIterationTableIndex = 134,
    WdfFdoRetrieveNextStaticChildTableIndex = 135,
    WdfFdoUnlockStaticChildListFromIterationTableIndex = 136,
    WdfFileObjectGetFileNameTableIndex = 137,
    WdfFileObjectGetFlagsTableIndex = 138,
    WdfFileObjectGetDeviceTableIndex = 139,
    WdfFileObjectWdmGetFileObjectTableIndex = 140,
    WdfInterruptCreateTableIndex = 141,
    WdfInterruptQueueDpcForIsrTableIndex = 142,
    WdfInterruptSynchronizeTableIndex = 143,
    WdfInterruptAcquireLockTableIndex = 144,
    WdfInterruptReleaseLockTableIndex = 145,
    WdfInterruptEnableTableIndex = 146,
    WdfInterruptDisableTableIndex = 147,
    WdfInterruptWdmGetInterruptTableIndex = 148,
    WdfInterruptGetInfoTableIndex = 149,
    WdfInterruptSetPolicyTableIndex = 150,
    WdfInterruptGetDeviceTableIndex = 151,
    WdfIoQueueCreateTableIndex = 152,
    WdfIoQueueGetStateTableIndex = 153,
    WdfIoQueueStartTableIndex = 154,
    WdfIoQueueStopTableIndex = 155,
    WdfIoQueueStopSynchronouslyTableIndex = 156,
    WdfIoQueueGetDeviceTableIndex = 157,
    WdfIoQueueRetrieveNextRequestTableIndex = 158,
    WdfIoQueueRetrieveRequestByFileObjectTableIndex = 159,
    WdfIoQueueFindRequestTableIndex = 160,
    WdfIoQueueRetrieveFoundRequestTableIndex = 161,
    WdfIoQueueDrainSynchronouslyTableIndex = 162,
    WdfIoQueueDrainTableIndex = 163,
    WdfIoQueuePurgeSynchronouslyTableIndex = 164,
    WdfIoQueuePurgeTableIndex = 165,
    WdfIoQueueReadyNotifyTableIndex = 166,
    WdfIoTargetCreateTableIndex = 167,
    WdfIoTargetOpenTableIndex = 168,
    WdfIoTargetCloseForQueryRemoveTableIndex = 169,
    WdfIoTargetCloseTableIndex = 170,
    WdfIoTargetStartTableIndex = 171,
    WdfIoTargetStopTableIndex = 172,
    WdfIoTargetGetStateTableIndex = 173,
    WdfIoTargetGetDeviceTableIndex = 174,
    WdfIoTargetQueryTargetPropertyTableIndex = 175,
    WdfIoTargetAllocAndQueryTargetPropertyTableIndex = 176,
    WdfIoTargetQueryForInterfaceTableIndex = 177,
    WdfIoTargetWdmGetTargetDeviceObjectTableIndex = 178,
    WdfIoTargetWdmGetTargetPhysicalDeviceTableIndex = 179,
    WdfIoTargetWdmGetTargetFileObjectTableIndex = 180,
    WdfIoTargetWdmGetTargetFileHandleTableIndex = 181,
    WdfIoTargetSendReadSynchronouslyTableIndex = 182,
    WdfIoTargetFormatRequestForReadTableIndex = 183,
    WdfIoTargetSendWriteSynchronouslyTableIndex = 184,
    WdfIoTargetFormatRequestForWriteTableIndex = 185,
    WdfIoTargetSendIoctlSynchronouslyTableIndex = 186,
    WdfIoTargetFormatRequestForIoctlTableIndex = 187,
    WdfIoTargetSendInternalIoctlSynchronouslyTableIndex = 188,
    WdfIoTargetFormatRequestForInternalIoctlTableIndex = 189,
    WdfIoTargetSendInternalIoctlOthersSynchronouslyTableIndex = 190,
    WdfIoTargetFormatRequestForInternalIoctlOthersTableIndex = 191,
    WdfMemoryCreateTableIndex = 192,
    WdfMemoryCreatePreallocatedTableIndex = 193,
    WdfMemoryGetBufferTableIndex = 194,
    WdfMemoryAssignBufferTableIndex = 195,
    WdfMemoryCopyToBufferTableIndex = 196,
    WdfMemoryCopyFromBufferTableIndex = 197,
    WdfLookasideListCreateTableIndex = 198,
    WdfMemoryCreateFromLookasideTableIndex = 199,
    WdfDeviceMiniportCreateTableIndex = 200,
    WdfDriverMiniportUnloadTableIndex = 201,
    WdfObjectGetTypedContextWorkerTableIndex = 202,
    WdfObjectAllocateContextTableIndex = 203,
    WdfObjectContextGetObjectTableIndex = 204,
    WdfObjectReferenceActualTableIndex = 205,
    WdfObjectDereferenceActualTableIndex = 206,
    WdfObjectCreateTableIndex = 207,
    WdfObjectDeleteTableIndex = 208,
    WdfObjectQueryTableIndex = 209,
    WdfPdoInitAllocateTableIndex = 210,
    WdfPdoInitSetEventCallbacksTableIndex = 211,
    WdfPdoInitAssignDeviceIDTableIndex = 212,
    WdfPdoInitAssignInstanceIDTableIndex = 213,
    WdfPdoInitAddHardwareIDTableIndex = 214,
    WdfPdoInitAddCompatibleIDTableIndex = 215,
    WdfPdoInitAddDeviceTextTableIndex = 216,
    WdfPdoInitSetDefaultLocaleTableIndex = 217,
    WdfPdoInitAssignRawDeviceTableIndex = 218,
    WdfPdoMarkMissingTableIndex = 219,
    WdfPdoRequestEjectTableIndex = 220,
    WdfPdoGetParentTableIndex = 221,
    WdfPdoRetrieveIdentificationDescriptionTableIndex = 222,
    WdfPdoRetrieveAddressDescriptionTableIndex = 223,
    WdfPdoUpdateAddressDescriptionTableIndex = 224,
    WdfPdoAddEjectionRelationsPhysicalDeviceTableIndex = 225,
    WdfPdoRemoveEjectionRelationsPhysicalDeviceTableIndex = 226,
    WdfPdoClearEjectionRelationsDevicesTableIndex = 227,
    WdfDeviceAddQueryInterfaceTableIndex = 228,
    WdfRegistryOpenKeyTableIndex = 229,
    WdfRegistryCreateKeyTableIndex = 230,
    WdfRegistryCloseTableIndex = 231,
    WdfRegistryWdmGetHandleTableIndex = 232,
    WdfRegistryRemoveKeyTableIndex = 233,
    WdfRegistryRemoveValueTableIndex = 234,
    WdfRegistryQueryValueTableIndex = 235,
    WdfRegistryQueryMemoryTableIndex = 236,
    WdfRegistryQueryMultiStringTableIndex = 237,
    WdfRegistryQueryUnicodeStringTableIndex = 238,
    WdfRegistryQueryStringTableIndex = 239,
    WdfRegistryQueryULongTableIndex = 240,
    WdfRegistryAssignValueTableIndex = 241,
    WdfRegistryAssignMemoryTableIndex = 242,
    WdfRegistryAssignMultiStringTableIndex = 243,
    WdfRegistryAssignUnicodeStringTableIndex = 244,
    WdfRegistryAssignStringTableIndex = 245,
    WdfRegistryAssignULongTableIndex = 246,
    WdfRequestCreateTableIndex = 247,
    WdfRequestCreateFromIrpTableIndex = 248,
    WdfRequestReuseTableIndex = 249,
    WdfRequestChangeTargetTableIndex = 250,
    WdfRequestFormatRequestUsingCurrentTypeTableIndex = 251,
    WdfRequestWdmFormatUsingStackLocationTableIndex = 252,
    WdfRequestSendTableIndex = 253,
    WdfRequestGetStatusTableIndex = 254,
    WdfRequestMarkCancelableTableIndex = 255,
    WdfRequestUnmarkCancelableTableIndex = 256,
    WdfRequestIsCanceledTableIndex = 257,
    WdfRequestCancelSentRequestTableIndex = 258,
    WdfRequestIsFrom32BitProcessTableIndex = 259,
    WdfRequestSetCompletionRoutineTableIndex = 260,
    WdfRequestGetCompletionParamsTableIndex = 261,
    WdfRequestAllocateTimerTableIndex = 262,
    WdfRequestCompleteTableIndex = 263,
    WdfRequestCompleteWithPriorityBoostTableIndex = 264,
    WdfRequestCompleteWithInformationTableIndex = 265,
    WdfRequestGetParametersTableIndex = 266,
    WdfRequestRetrieveInputMemoryTableIndex = 267,
    WdfRequestRetrieveOutputMemoryTableIndex = 268,
    WdfRequestRetrieveInputBufferTableIndex = 269,
    WdfRequestRetrieveOutputBufferTableIndex = 270,
    WdfRequestRetrieveInputWdmMdlTableIndex = 271,
    WdfRequestRetrieveOutputWdmMdlTableIndex = 272,
    WdfRequestRetrieveUnsafeUserInputBufferTableIndex = 273,
    WdfRequestRetrieveUnsafeUserOutputBufferTableIndex = 274,
    WdfRequestSetInformationTableIndex = 275,
    WdfRequestGetInformationTableIndex = 276,
    WdfRequestGetFileObjectTableIndex = 277,
    WdfRequestProbeAndLockUserBufferForReadTableIndex = 278,
    WdfRequestProbeAndLockUserBufferForWriteTableIndex = 279,
    WdfRequestGetRequestorModeTableIndex = 280,
    WdfRequestForwardToIoQueueTableIndex = 281,
    WdfRequestGetIoQueueTableIndex = 282,
    WdfRequestRequeueTableIndex = 283,
    WdfRequestStopAcknowledgeTableIndex = 284,
    WdfRequestWdmGetIrpTableIndex = 285,
    WdfIoResourceRequirementsListSetSlotNumberTableIndex = 286,
    WdfIoResourceRequirementsListSetInterfaceTypeTableIndex = 287,
    WdfIoResourceRequirementsListAppendIoResListTableIndex = 288,
    WdfIoResourceRequirementsListInsertIoResListTableIndex = 289,
    WdfIoResourceRequirementsListGetCountTableIndex = 290,
    WdfIoResourceRequirementsListGetIoResListTableIndex = 291,
    WdfIoResourceRequirementsListRemoveTableIndex = 292,
    WdfIoResourceRequirementsListRemoveByIoResListTableIndex = 293,
    WdfIoResourceListCreateTableIndex = 294,
    WdfIoResourceListAppendDescriptorTableIndex = 295,
    WdfIoResourceListInsertDescriptorTableIndex = 296,
    WdfIoResourceListUpdateDescriptorTableIndex = 297,
    WdfIoResourceListGetCountTableIndex = 298,
    WdfIoResourceListGetDescriptorTableIndex = 299,
    WdfIoResourceListRemoveTableIndex = 300,
    WdfIoResourceListRemoveByDescriptorTableIndex = 301,
    WdfCmResourceListAppendDescriptorTableIndex = 302,
    WdfCmResourceListInsertDescriptorTableIndex = 303,
    WdfCmResourceListGetCountTableIndex = 304,
    WdfCmResourceListGetDescriptorTableIndex = 305,
    WdfCmResourceListRemoveTableIndex = 306,
    WdfCmResourceListRemoveByDescriptorTableIndex = 307,
    WdfStringCreateTableIndex = 308,
    WdfStringGetUnicodeStringTableIndex = 309,
    WdfObjectAcquireLockTableIndex = 310,
    WdfObjectReleaseLockTableIndex = 311,
    WdfWaitLockCreateTableIndex = 312,
    WdfWaitLockAcquireTableIndex = 313,
    WdfWaitLockReleaseTableIndex = 314,
    WdfSpinLockCreateTableIndex = 315,
    WdfSpinLockAcquireTableIndex = 316,
    WdfSpinLockReleaseTableIndex = 317,
    WdfTimerCreateTableIndex = 318,
    WdfTimerStartTableIndex = 319,
    WdfTimerStopTableIndex = 320,
    WdfTimerGetParentObjectTableIndex = 321,
    WdfUsbTargetDeviceCreateTableIndex = 322,
    WdfUsbTargetDeviceRetrieveInformationTableIndex = 323,
    WdfUsbTargetDeviceGetDeviceDescriptorTableIndex = 324,
    WdfUsbTargetDeviceRetrieveConfigDescriptorTableIndex = 325,
    WdfUsbTargetDeviceQueryStringTableIndex = 326,
    WdfUsbTargetDeviceAllocAndQueryStringTableIndex = 327,
    WdfUsbTargetDeviceFormatRequestForStringTableIndex = 328,
    WdfUsbTargetDeviceGetNumInterfacesTableIndex = 329,
    WdfUsbTargetDeviceSelectConfigTableIndex = 330,
    WdfUsbTargetDeviceWdmGetConfigurationHandleTableIndex = 331,
    WdfUsbTargetDeviceRetrieveCurrentFrameNumberTableIndex = 332,
    WdfUsbTargetDeviceSendControlTransferSynchronouslyTableIndex = 333,
    WdfUsbTargetDeviceFormatRequestForControlTransferTableIndex = 334,
    WdfUsbTargetDeviceIsConnectedSynchronousTableIndex = 335,
    WdfUsbTargetDeviceResetPortSynchronouslyTableIndex = 336,
    WdfUsbTargetDeviceCyclePortSynchronouslyTableIndex = 337,
    WdfUsbTargetDeviceFormatRequestForCyclePortTableIndex = 338,
    WdfUsbTargetDeviceSendUrbSynchronouslyTableIndex = 339,
    WdfUsbTargetDeviceFormatRequestForUrbTableIndex = 340,
    WdfUsbTargetPipeGetInformationTableIndex = 341,
    WdfUsbTargetPipeIsInEndpointTableIndex = 342,
    WdfUsbTargetPipeIsOutEndpointTableIndex = 343,
    WdfUsbTargetPipeGetTypeTableIndex = 344,
    WdfUsbTargetPipeSetNoMaximumPacketSizeCheckTableIndex = 345,
    WdfUsbTargetPipeWriteSynchronouslyTableIndex = 346,
    WdfUsbTargetPipeFormatRequestForWriteTableIndex = 347,
    WdfUsbTargetPipeReadSynchronouslyTableIndex = 348,
    WdfUsbTargetPipeFormatRequestForReadTableIndex = 349,
    WdfUsbTargetPipeConfigContinuousReaderTableIndex = 350,
    WdfUsbTargetPipeAbortSynchronouslyTableIndex = 351,
    WdfUsbTargetPipeFormatRequestForAbortTableIndex = 352,
    WdfUsbTargetPipeResetSynchronouslyTableIndex = 353,
    WdfUsbTargetPipeFormatRequestForResetTableIndex = 354,
    WdfUsbTargetPipeSendUrbSynchronouslyTableIndex = 355,
    WdfUsbTargetPipeFormatRequestForUrbTableIndex = 356,
    WdfUsbInterfaceGetInterfaceNumberTableIndex = 357,
    WdfUsbInterfaceGetNumEndpointsTableIndex = 358,
    WdfUsbInterfaceGetDescriptorTableIndex = 359,
    WdfUsbInterfaceSelectSettingTableIndex = 360,
    WdfUsbInterfaceGetEndpointInformationTableIndex = 361,
    WdfUsbTargetDeviceGetInterfaceTableIndex = 362,
    WdfUsbInterfaceGetConfiguredSettingIndexTableIndex = 363,
    WdfUsbInterfaceGetNumConfiguredPipesTableIndex = 364,
    WdfUsbInterfaceGetConfiguredPipeTableIndex = 365,
    WdfUsbTargetPipeWdmGetPipeHandleTableIndex = 366,
    WdfVerifierDbgBreakPointTableIndex = 367,
    WdfVerifierKeBugCheckTableIndex = 368,
    WdfWmiProviderCreateTableIndex = 369,
    WdfWmiProviderGetDeviceTableIndex = 370,
    WdfWmiProviderIsEnabledTableIndex = 371,
    WdfWmiProviderGetTracingHandleTableIndex = 372,
    WdfWmiInstanceCreateTableIndex = 373,
    WdfWmiInstanceRegisterTableIndex = 374,
    WdfWmiInstanceDeregisterTableIndex = 375,
    WdfWmiInstanceGetDeviceTableIndex = 376,
    WdfWmiInstanceGetProviderTableIndex = 377,
    WdfWmiInstanceFireEventTableIndex = 378,
    WdfWorkItemCreateTableIndex = 379,
    WdfWorkItemEnqueueTableIndex = 380,
    WdfWorkItemGetParentObjectTableIndex = 381,
    WdfWorkItemFlushTableIndex = 382,
    WdfCommonBufferCreateWithConfigTableIndex = 383,
    WdfDmaEnablerGetFragmentLengthTableIndex = 384,
    WdfDmaEnablerWdmGetDmaAdapterTableIndex = 385,
    WdfUsbInterfaceGetNumSettingsTableIndex = 386,
    WdfDeviceRemoveDependentUsageDeviceObjectTableIndex = 387,
    WdfDeviceGetSystemPowerActionTableIndex = 388,
    WdfInterruptSetExtendedPolicyTableIndex = 389,
    WdfIoQueueAssignForwardProgressPolicyTableIndex = 390,
    WdfPdoInitAssignContainerIDTableIndex = 391,
    WdfPdoInitAllowForwardingRequestToParentTableIndex = 392,
    WdfRequestMarkCancelableExTableIndex = 393,
    WdfRequestIsReservedTableIndex = 394,
    WdfRequestForwardToParentDeviceIoQueueTableIndex = 395,
    WdfCxDeviceInitAllocateTableIndex = 396,
    WdfCxDeviceInitAssignWdmIrpPreprocessCallbackTableIndex = 397,
    WdfCxDeviceInitSetIoInCallerContextCallbackTableIndex = 398,
    WdfCxDeviceInitSetRequestAttributesTableIndex = 399,
    WdfCxDeviceInitSetFileObjectConfigTableIndex = 400,
    WdfDeviceWdmDispatchIrpTableIndex = 401,
    WdfDeviceWdmDispatchIrpToIoQueueTableIndex = 402,
    WdfDeviceInitSetRemoveLockOptionsTableIndex = 403,
    WdfDeviceConfigureWdmIrpDispatchCallbackTableIndex = 404,
    WdfDmaEnablerConfigureSystemProfileTableIndex = 405,
    WdfDmaTransactionInitializeUsingOffsetTableIndex = 406,
    WdfDmaTransactionGetTransferInfoTableIndex = 407,
    WdfDmaTransactionSetChannelConfigurationCallbackTableIndex = 408,
    WdfDmaTransactionSetTransferCompleteCallbackTableIndex = 409,
    WdfDmaTransactionSetImmediateExecutionTableIndex = 410,
    WdfDmaTransactionAllocateResourcesTableIndex = 411,
    WdfDmaTransactionSetDeviceAddressOffsetTableIndex = 412,
    WdfDmaTransactionFreeResourcesTableIndex = 413,
    WdfDmaTransactionCancelTableIndex = 414,
    WdfDmaTransactionWdmGetTransferContextTableIndex = 415,
    WdfInterruptQueueWorkItemForIsrTableIndex = 416,
    WdfInterruptTryToAcquireLockTableIndex = 417,
    WdfIoQueueStopAndPurgeTableIndex = 418,
    WdfIoQueueStopAndPurgeSynchronouslyTableIndex = 419,
    WdfIoTargetPurgeTableIndex = 420,
    WdfUsbTargetDeviceCreateWithParametersTableIndex = 421,
    WdfUsbTargetDeviceQueryUsbCapabilityTableIndex = 422,
    WdfUsbTargetDeviceCreateUrbTableIndex = 423,
    WdfUsbTargetDeviceCreateIsochUrbTableIndex = 424,
    WdfDeviceWdmAssignPowerFrameworkSettingsTableIndex = 425,
    WdfDmaTransactionStopSystemTransferTableIndex = 426,
    WdfCxVerifierKeBugCheckTableIndex = 427,
    WdfInterruptReportActiveTableIndex = 428,
    WdfInterruptReportInactiveTableIndex = 429,
    WdfDeviceInitSetReleaseHardwareOrderOnFailureTableIndex = 430,
    WdfGetTriageInfoTableIndex = 431,
    WdfDeviceInitSetIoTypeExTableIndex = 432,
    WdfDeviceQueryPropertyExTableIndex = 433,
    WdfDeviceAllocAndQueryPropertyExTableIndex = 434,
    WdfDeviceAssignPropertyTableIndex = 435,
    WdfFdoInitQueryPropertyExTableIndex = 436,
    WdfFdoInitAllocAndQueryPropertyExTableIndex = 437,
    WdfDeviceStopIdleActualTableIndex = 438,
    WdfDeviceResumeIdleActualTableIndex = 439,
    WdfDeviceGetSelfIoTargetTableIndex = 440,
    WdfDeviceInitAllowSelfIoTargetTableIndex = 441,
    WdfIoTargetSelfAssignDefaultIoQueueTableIndex = 442,
    WdfDeviceOpenDevicemapKeyTableIndex = 443,
    WdfDmaTransactionSetSingleTransferRequirementTableIndex = 444,
    WdfCxDeviceInitSetPnpPowerEventCallbacksTableIndex = 445,
    WdfFileObjectGetInitiatorProcessIdTableIndex = 446,
    WdfRequestGetRequestorProcessIdTableIndex = 447,
    WdfDeviceRetrieveCompanionTargetTableIndex = 448,
    WdfCompanionTargetSendTaskSynchronouslyTableIndex = 449,
    WdfCompanionTargetWdmGetCompanionProcessTableIndex = 450,
    WdfDriverOpenPersistentStateRegistryKeyTableIndex = 451,
    WdfDriverErrorReportApiMissingTableIndex = 452,
    WdfFunctionTableNumEntries = 453
};

typedef enum _WDFFUNCENUM_V1_0 {
    WdfFunctionTableNumEntries_V1_0 = 383
};

typedef enum _WDFFUNCENUM_V1_1 {
    WdfFunctionTableNumEntries_V1_1 = 386
};

typedef enum _WDFFUNCENUM_V1_11 {
    WdfFunctionTableNumEntries_V1_11 = 432
};

typedef enum _WDFFUNCENUM_V1_13 {
    WdfFunctionTableNumEntries_V1_13 = 438
};

typedef enum _WDFFUNCENUM_V1_15 {
    WdfFunctionTableNumEntries_V1_15 = 444
};

typedef enum _WDFFUNCENUM_V1_17 {
    WdfFunctionTableNumEntries_V1_17 = 444
};

typedef enum _WDFFUNCENUM_V1_19 {
    WdfFunctionTableNumEntries_V1_19 = 446
};

typedef enum _WDFFUNCENUM_V1_21 {
    WdfFunctionTableNumEntries_V1_21 = 448
};

typedef enum _WDFFUNCENUM_V1_23 {
    WdfFunctionTableNumEntries_V1_23 = 451
};

typedef enum _WDFFUNCENUM_V1_25 {
    WdfFunctionTableNumEntries_V1_25 = 453
};

typedef enum _WDFFUNCENUM_V1_5 {
    WdfFunctionTableNumEntries_V1_5 = 387
};

typedef enum _WDFFUNCENUM_V1_7 {
    WdfFunctionTableNumEntries_V1_7 = 387
};

typedef enum _WDFFUNCENUM_V1_9 {
    WdfFunctionTableNumEntries_V1_9 = 396
};

typedef enum _WDFSTRUCTENUM {
    INDEX_WDF_CHILD_ADDRESS_DESCRIPTION_HEADER = 0,
    INDEX_WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER = 1,
    INDEX_WDF_CHILD_LIST_CONFIG = 2,
    INDEX_WDF_CHILD_LIST_ITERATOR = 3,
    INDEX_WDF_CHILD_RETRIEVE_INFO = 4,
    INDEX_WDF_CLASS_BIND_INFO = 5,
    INDEX_WDF_CLASS_BIND_INFO2 = 6,
    INDEX_WDF_CLASS_EXTENSION_DESCRIPTOR = 7,
    INDEX_WDF_CLASS_LIBRARY_INFO = 8,
    INDEX_WDF_CLASS_VERSION = 9,
    INDEX_WDF_COMMON_BUFFER_CONFIG = 10,
    INDEX_WDF_CUSTOM_TYPE_CONTEXT = 11,
    INDEX_WDF_DEVICE_PNP_CAPABILITIES = 12,
    INDEX_WDF_DEVICE_PNP_NOTIFICATION_DATA = 13,
    INDEX_WDF_DEVICE_POWER_CAPABILITIES = 14,
    INDEX_WDF_DEVICE_POWER_NOTIFICATION_DATA = 15,
    INDEX_WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS = 16,
    INDEX_WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA = 17,
    INDEX_WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS = 18,
    INDEX_WDF_DEVICE_PROPERTY_DATA = 19,
    INDEX_WDF_DEVICE_STATE = 20,
    INDEX_WDF_DMA_ENABLER_CONFIG = 21,
    INDEX_WDF_DMA_SYSTEM_PROFILE_CONFIG = 22,
    INDEX_WDF_DPC_CONFIG = 23,
    INDEX_WDF_DRIVER_CONFIG = 24,
    INDEX_WDF_DRIVER_GLOBALS = 25,
    INDEX_WDF_DRIVER_VERSION_AVAILABLE_PARAMS = 26,
    INDEX_WDF_FDO_EVENT_CALLBACKS = 27,
    INDEX_WDF_FILEOBJECT_CONFIG = 28,
    INDEX_WDF_INTERRUPT_CONFIG = 29,
    INDEX_WDF_INTERRUPT_EXTENDED_POLICY = 30,
    INDEX_WDF_INTERRUPT_INFO = 31,
    INDEX_WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS = 32,
    INDEX_WDF_IO_QUEUE_CONFIG = 33,
    INDEX_WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY = 34,
    INDEX_WDF_IO_TARGET_OPEN_PARAMS = 35,
    INDEX_WDF_IO_TYPE_CONFIG = 36,
    INDEX_WDF_MEMORY_DESCRIPTOR = 37,
    INDEX_WDF_OBJECT_ATTRIBUTES = 38,
    INDEX_WDF_OBJECT_CONTEXT_TYPE_INFO = 39,
    INDEX_WDF_PDO_EVENT_CALLBACKS = 40,
    INDEX_WDF_PNPPOWER_EVENT_CALLBACKS = 41,
    INDEX_WDF_POWER_FRAMEWORK_SETTINGS = 42,
    INDEX_WDF_POWER_POLICY_EVENT_CALLBACKS = 43,
    INDEX_WDF_POWER_ROUTINE_TIMED_OUT_DATA = 44,
    INDEX_WDF_QUERY_INTERFACE_CONFIG = 45,
    INDEX_WDF_QUEUE_FATAL_ERROR_DATA = 46,
    INDEX_WDF_REMOVE_LOCK_OPTIONS = 47,
    INDEX_WDF_REQUEST_COMPLETION_PARAMS = 48,
    INDEX_WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA = 49,
    INDEX_WDF_REQUEST_FORWARD_OPTIONS = 50,
    INDEX_WDF_REQUEST_PARAMETERS = 51,
    INDEX_WDF_REQUEST_REUSE_PARAMS = 52,
    INDEX_WDF_REQUEST_SEND_OPTIONS = 53,
    INDEX_WDF_TASK_SEND_OPTIONS = 54,
    INDEX_WDF_TIMER_CONFIG = 55,
    INDEX_WDF_TRIAGE_INFO = 56,
    INDEX_WDF_USB_CONTINUOUS_READER_CONFIG = 57,
    INDEX_WDF_USB_DEVICE_CREATE_CONFIG = 58,
    INDEX_WDF_USB_DEVICE_INFORMATION = 59,
    INDEX_WDF_USB_DEVICE_SELECT_CONFIG_PARAMS = 60,
    INDEX_WDF_USB_INTERFACE_SELECT_SETTING_PARAMS = 61,
    INDEX_WDF_USB_INTERFACE_SETTING_PAIR = 62,
    INDEX_WDF_USB_PIPE_INFORMATION = 63,
    INDEX_WDF_USB_REQUEST_COMPLETION_PARAMS = 64,
    INDEX_WDF_WMI_INSTANCE_CONFIG = 65,
    INDEX_WDF_WMI_PROVIDER_CONFIG = 66,
    INDEX_WDF_WORKITEM_CONFIG = 67,
    INDEX_WDFCONTEXT_TRIAGE_INFO = 68,
    INDEX_WDFCONTEXTTYPE_TRIAGE_INFO = 69,
    INDEX_WDFCX_FILEOBJECT_CONFIG = 70,
    INDEX_WDFCX_PNPPOWER_EVENT_CALLBACKS = 71,
    INDEX_WDFDEVICE_TRIAGE_INFO = 72,
    INDEX_WDFFWDPROGRESS_TRIAGE_INFO = 73,
    INDEX_WDFIRP_TRIAGE_INFO = 74,
    INDEX_WDFIRPQUEUE_TRIAGE_INFO = 75,
    INDEX_WDFMEMORY_OFFSET = 76,
    INDEX_WDFOBJECT_TRIAGE_INFO = 77,
    INDEX_WDFQUEUE_TRIAGE_INFO = 78,
    INDEX_WDFREQUEST_TRIAGE_INFO = 79,
    WDF_STRUCTURE_TABLE_NUM_ENTRIES = 80
};

typedef enum _WDF_BUGCHECK_CODES {
    WDF_POWER_ROUTINE_TIMED_OUT = 1,
    WDF_RECURSIVE_LOCK = 2,
    WDF_VERIFIER_FATAL_ERROR = 3,
    WDF_REQUIRED_PARAMETER_IS_NULL = 4,
    WDF_INVALID_HANDLE = 5,
    WDF_REQUEST_FATAL_ERROR = 6,
    WDF_OBJECT_ERROR = 7,
    WDF_DMA_FATAL_ERROR = 8,
    WDF_INVALID_INTERRUPT = 9,
    WDF_QUEUE_FATAL_ERROR = 10,
    WDF_INVALID_LOCK_OPERATION = 11,
    WDF_PNP_FATAL_ERROR = 12,
    WDF_POWER_MULTIPLE_PPO = 13,
    WDF_VERIFIER_IRQL_MISMATCH = 14,
    WDF_VERIFIER_CRITICAL_REGION_MISMATCH = 15,
    WDF_API_UNAVAILABLE = 16
};

typedef enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS {
    WdfChildListRetrieveDeviceUndefined = 0,
    WdfChildListRetrieveDeviceSuccess = 1,
    WdfChildListRetrieveDeviceNotYetCreated = 2,
    WdfChildListRetrieveDeviceNoSuchDevice = 3
};

typedef enum _WDF_DEVICE_FAILED_ACTION {
    WdfDeviceFailedUndefined = 0,
    WdfDeviceFailedAttemptRestart = 1,
    WdfDeviceFailedNoRestart = 2
};

typedef enum _WDF_DEVICE_IO_TYPE {
    WdfDeviceIoUndefined = 0,
    WdfDeviceIoNeither = 1,
    WdfDeviceIoBuffered = 2,
    WdfDeviceIoDirect = 3,
    WdfDeviceIoBufferedOrDirect = 4,
    WdfDeviceIoMaximum = 5
};

typedef enum _WDF_DEVICE_PNP_STATE {
    WdfDevStatePnpInvalid = 0,
    WdfDevStatePnpObjectCreated = 256,
    WdfDevStatePnpCheckForDevicePresence = 257,
    WdfDevStatePnpEjectFailed = 258,
    WdfDevStatePnpEjectHardware = 259,
    WdfDevStatePnpEjectedWaitingForRemove = 260,
    WdfDevStatePnpInit = 261,
    WdfDevStatePnpInitStarting = 262,
    WdfDevStatePnpInitSurpriseRemoved = 263,
    WdfDevStatePnpHardwareAvailable = 264,
    WdfDevStatePnpEnableInterfaces = 265,
    WdfDevStatePnpHardwareAvailablePowerPolicyFailed = 266,
    WdfDevStatePnpQueryRemoveAskDriver = 267,
    WdfDevStatePnpQueryRemovePending = 268,
    WdfDevStatePnpQueryRemoveStaticCheck = 269,
    WdfDevStatePnpQueriedRemoving = 270,
    WdfDevStatePnpQueryStopAskDriver = 271,
    WdfDevStatePnpQueryStopPending = 272,
    WdfDevStatePnpQueryStopStaticCheck = 273,
    WdfDevStatePnpQueryCanceled = 274,
    WdfDevStatePnpRemoved = 275,
    WdfDevStatePnpPdoRemoved = 276,
    WdfDevStatePnpRemovedPdoWait = 277,
    WdfDevStatePnpRemovedPdoSurpriseRemoved = 278,
    WdfDevStatePnpRemovingDisableInterfaces = 279,
    WdfDevStatePnpRestarting = 280,
    WdfDevStatePnpStarted = 281,
    WdfDevStatePnpStartedCancelStop = 282,
    WdfDevStatePnpStartedCancelRemove = 283,
    WdfDevStatePnpStartedRemoving = 284,
    WdfDevStatePnpStartingFromStopped = 285,
    WdfDevStatePnpStopped = 286,
    WdfDevStatePnpStoppedWaitForStartCompletion = 287,
    WdfDevStatePnpStartedStopping = 288,
    WdfDevStatePnpSurpriseRemove = 289,
    WdfDevStatePnpInitQueryRemove = 290,
    WdfDevStatePnpInitQueryRemoveCanceled = 291,
    WdfDevStatePnpFdoRemoved = 292,
    WdfDevStatePnpRemovedWaitForChildren = 293,
    WdfDevStatePnpQueriedSurpriseRemove = 294,
    WdfDevStatePnpSurpriseRemoveIoStarted = 295,
    WdfDevStatePnpFailedPowerDown = 296,
    WdfDevStatePnpFailedIoStarting = 297,
    WdfDevStatePnpFailedOwnHardware = 298,
    WdfDevStatePnpFailed = 299,
    WdfDevStatePnpFailedSurpriseRemoved = 300,
    WdfDevStatePnpFailedStarted = 301,
    WdfDevStatePnpFailedWaitForRemove = 302,
    WdfDevStatePnpFailedInit = 303,
    WdfDevStatePnpPdoInitFailed = 304,
    WdfDevStatePnpRestart = 305,
    WdfDevStatePnpRestartReleaseHardware = 306,
    WdfDevStatePnpRestartHardwareAvailable = 307,
    WdfDevStatePnpPdoRestart = 308,
    WdfDevStatePnpFinal = 309,
    WdfDevStatePnpRemovedChildrenRemoved = 310,
    WdfDevStatePnpQueryRemoveEnsureDeviceAwake = 311,
    WdfDevStatePnpQueryStopEnsureDeviceAwake = 312,
    WdfDevStatePnpFailedPowerPolicyRemoved = 313,
    WdfDevStatePnpNull = 314
};

typedef enum _WDF_DEVICE_POWER_POLICY_STATE {
    WdfDevStatePwrPolInvalid = 0,
    WdfDevStatePwrPolObjectCreated = 1280,
    WdfDevStatePwrPolStarting = 1281,
    WdfDevStatePwrPolStartingSucceeded = 1282,
    WdfDevStatePwrPolStartingFailed = 1283,
    WdfDevStatePwrPolStartingDecideS0Wake = 1284,
    WdfDevStatePwrPolStartedIdleCapable = 1285,
    WdfDevStatePwrPolTimerExpiredNoWake = 1286,
    WdfDevStatePwrPolTimerExpiredNoWakeCompletePowerDown = 1287,
    WdfDevStatePwrPolWaitingUnarmed = 1288,
    WdfDevStatePwrPolWaitingUnarmedQueryIdle = 1289,
    WdfDevStatePwrPolS0NoWakePowerUp = 1290,
    WdfDevStatePwrPolS0NoWakeCompletePowerUp = 1291,
    WdfDevStatePwrPolSystemSleepFromDeviceWaitingUnarmed = 1292,
    WdfDevStatePwrPolSystemSleepNeedWake = 1293,
    WdfDevStatePwrPolSystemSleepNeedWakeCompletePowerUp = 1294,
    WdfDevStatePwrPolSystemSleepPowerRequestFailed = 1295,
    WdfDevStatePwrPolCheckPowerPageable = 1296,
    WdfDevStatePwrPolSleepingWakeWakeArrived = 1297,
    WdfDevStatePwrPolSleepingWakeRevertArmWake = 1298,
    WdfDevStatePwrPolSystemAsleepWakeArmed = 1299,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabled = 1300,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceled = 1301,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisarm = 1302,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggered = 1303,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0 = 1304,
    WdfDevStatePwrPolSystemWakeDeviceWokeDisarm = 1305,
    WdfDevStatePwrPolSleepingWakeWakeArrivedNP = 0x851a,
    WdfDevStatePwrPolSleepingWakeRevertArmWakeNP = 0x851b,
    WdfDevStatePwrPolSleepingWakePowerDownFailed = 1308,
    WdfDevStatePwrPolSleepingWakePowerDownFailedWakeCanceled = 1309,
    WdfDevStatePwrPolSystemAsleepWakeArmedNP = 0x851e,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledNP = 0x851f,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceledNP = 0x8520,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisarmNP = 0x8521,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredNP = 0x8522,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0NP = 0x8523,
    WdfDevStatePwrPolSystemWakeDeviceWokeDisarmNP = 0x8524,
    WdfDevStatePwrPolSystemWakeDeviceWakeCompletePowerUp = 1317,
    WdfDevStatePwrPolSleeping = 1318,
    WdfDevStatePwrPolSleepingNoWakePowerDown = 1319,
    WdfDevStatePwrPolSleepingNoWakeCompletePowerDown = 1320,
    WdfDevStatePwrPolSleepingNoWakeDxRequestFailed = 1321,
    WdfDevStatePwrPolSleepingWakePowerDown = 1322,
    WdfDevStatePwrPolSleepingSendWake = 1323,
    WdfDevStatePwrPolSystemAsleepNoWake = 1324,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisabled = 1325,
    WdfDevStatePwrPolSystemWakeDeviceToD0 = 1326,
    WdfDevStatePwrPolSystemWakeDeviceToD0CompletePowerUp = 1327,
    WdfDevStatePwrPolSystemWakeQueryIdle = 1328,
    WdfDevStatePwrPolStartedWakeCapable = 1329,
    WdfDevStatePwrPolTimerExpiredDecideUsbSS = 1330,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDown = 1331,
    WdfDevStatePwrPolTimerExpiredWakeCapableSendWake = 1332,
    WdfDevStatePwrPolTimerExpiredWakeCapableUsbSS = 1333,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeArrived = 1334,
    WdfDevStatePwrPolTimerExpiredWakeCapableCancelWake = 1335,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeCanceled = 1336,
    WdfDevStatePwrPolTimerExpiredWakeCapableCleanup = 1337,
    WdfDevStatePwrPolTimerExpiredWakeCapableDxAllocFailed = 1338,
    WdfDevStatePwrPolTimerExpiredWakeCompletedPowerDown = 1339,
    WdfDevStatePwrPolTimerExpiredWakeCompletedPowerUp = 1340,
    WdfDevStatePwrPolWaitingArmedUsbSS = 1341,
    WdfDevStatePwrPolWaitingArmed = 1342,
    WdfDevStatePwrPolWaitingArmedQueryIdle = 1343,
    WdfDevStatePwrPolIoPresentArmed = 1344,
    WdfDevStatePwrPolIoPresentArmedWakeCanceled = 1345,
    WdfDevStatePwrPolS0WakeDisarm = 1346,
    WdfDevStatePwrPolS0WakeCompletePowerUp = 1347,
    WdfDevStatePwrPolTimerExpiredWakeSucceeded = 1348,
    WdfDevStatePwrPolTimerExpiredWakeCompletedDisarm = 1349,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeSucceeded = 1350,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeFailed = 1351,
    WdfDevStatePwrPolWakeFailedUsbSS = 1352,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedCancelWake = 1353,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeCanceled = 1354,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedUsbSS = 1355,
    WdfDevStatePwrPolCancelingWakeForSystemSleep = 1356,
    WdfDevStatePwrPolCancelingWakeForSystemSleepWakeCanceled = 1357,
    WdfDevStatePwrPolDisarmingWakeForSystemSleepCompletePowerUp = 1358,
    WdfDevStatePwrPolPowerUpForSystemSleepFailed = 1359,
    WdfDevStatePwrPolWokeFromS0UsbSS = 1360,
    WdfDevStatePwrPolWokeFromS0 = 1361,
    WdfDevStatePwrPolWokeFromS0NotifyDriver = 1362,
    WdfDevStatePwrPolStoppingResetDevice = 1363,
    WdfDevStatePwrPolStoppingResetDeviceCompletePowerUp = 1364,
    WdfDevStatePwrPolStoppingResetDeviceFailed = 1365,
    WdfDevStatePwrPolStoppingD0 = 1366,
    WdfDevStatePwrPolStoppingD0Failed = 1367,
    WdfDevStatePwrPolStoppingDisarmWake = 1368,
    WdfDevStatePwrPolStoppingDisarmWakeCancelWake = 1369,
    WdfDevStatePwrPolStoppingDisarmWakeWakeCanceled = 1370,
    WdfDevStatePwrPolStopping = 1371,
    WdfDevStatePwrPolStoppingFailed = 1372,
    WdfDevStatePwrPolStoppingSendStatus = 1373,
    WdfDevStatePwrPolStoppingCancelTimer = 1374,
    WdfDevStatePwrPolStoppingWaitForIdleTimeout = 1375,
    WdfDevStatePwrPolStoppingCancelUsbSS = 1376,
    WdfDevStatePwrPolStoppingWaitForUsbSSCompletion = 1377,
    WdfDevStatePwrPolStoppingCancelWake = 1378,
    WdfDevStatePwrPolStopped = 1379,
    WdfDevStatePwrPolCancelUsbSS = 1380,
    WdfDevStatePwrPolStarted = 1381,
    WdfDevStatePwrPolStartedCancelTimer = 1382,
    WdfDevStatePwrPolStartedWaitForIdleTimeout = 1383,
    WdfDevStatePwrPolStartedWakeCapableCancelTimerForSleep = 1384,
    WdfDevStatePwrPolStartedWakeCapableWaitForIdleTimeout = 1385,
    WdfDevStatePwrPolStartedWakeCapableSleepingUsbSS = 1386,
    WdfDevStatePwrPolStartedIdleCapableCancelTimerForSleep = 1387,
    WdfDevStatePwrPolStartedIdleCapableWaitForIdleTimeout = 1388,
    WdfDevStatePwrPolDeviceD0PowerRequestFailed = 1389,
    WdfDevStatePwrPolDevicePowerRequestFailed = 1390,
    WdfDevStatePwrPolGotoDx = 1391,
    WdfDevStatePwrPolGotoDxInDx = 1392,
    WdfDevStatePwrPolDx = 1393,
    WdfDevStatePwrPolGotoD0 = 1394,
    WdfDevStatePwrPolGotoD0InD0 = 1395,
    WdfDevStatePwrPolFinal = 1396,
    WdfDevStatePwrPolSleepingPowerDownNotProcessed = 1397,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownNotProcessed = 1398,
    WdfDevStatePwrPolTimerExpiredNoWakePowerDownNotProcessed = 1399,
    WdfDevStatePwrPolTimerExpiredNoWakePoweredDownDisableIdleTimer = 1400,
    WdfDevStatePwrPolStoppingWaitingForImplicitPowerDown = 1401,
    WdfDevStatePwrPolStoppingPoweringUp = 1402,
    WdfDevStatePwrPolStoppingPoweringDown = 1403,
    WdfDevStatePwrPolPowerUpForSystemSleepNotSeen = 1404,
    WdfDevStatePwrPolWaitingArmedStoppingCancelUsbSS = 1405,
    WdfDevStatePwrPolWaitingArmedWakeFailedCancelUsbSS = 1406,
    WdfDevStatePwrPolWaitingArmedIoPresentCancelUsbSS = 1407,
    WdfDevStatePwrPolWaitingArmedWakeSucceededCancelUsbSS = 1408,
    WdfDevStatePwrPolCancelingUsbSSForSystemSleep = 1409,
    WdfDevStatePwrPolStoppingD0CancelUsbSS = 1410,
    WdfDevStatePwrPolStartingPoweredUp = 1411,
    WdfDevStatePwrPolIdleCapableDeviceIdle = 1412,
    WdfDevStatePwrPolDeviceIdleReturnToActive = 1413,
    WdfDevStatePwrPolDeviceIdleSleeping = 1414,
    WdfDevStatePwrPolDeviceIdleStopping = 1415,
    WdfDevStatePwrPolTimerExpiredNoWakeUndoPowerDown = 1416,
    WdfDevStatePwrPolWakeCapableDeviceIdle = 1417,
    WdfDevStatePwrPolWakeCapableUsbSSCompleted = 1418,
    WdfDevStatePwrPolTimerExpiredWakeCapableUndoPowerDown = 1419,
    WdfDevStatePwrPolTimerExpiredWakeCompletedHardwareStarted = 1420,
    WdfDevStatePwrPolStoppedRemoving = 1421,
    WdfDevStatePwrPolRemoved = 1422,
    WdfDevStatePwrPolRestarting = 1423,
    WdfDevStatePwrPolRestartingFailed = 1424,
    WdfDevStatePwrPolStartingPoweredUpFailed = 1425,
    WdfDevStatePwrPolTimerExpiredNoWakeReturnToActive = 1426,
    WdfDevStatePwrPolWaitingArmedWakeInterruptFired = 1427,
    WdfDevStatePwrPolSystemWakeDeviceWakeInterruptFired = 1428,
    WdfDevStatePwrPolSystemWakeDeviceWakeInterruptFiredNP = 0x8595,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeInterruptArrived = 1430,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeInterruptArrived = 1431,
    WdfDevStatePwrPolWaitingArmedWakeInterruptFiredDuringPowerDown = 1432,
    WdfDevStatePwrPolNull = 1433
};

typedef enum _WDF_DEVICE_POWER_STATE {
    WdfDevStatePowerInvalid = 0,
    WdfDevStatePowerObjectCreated = 768,
    WdfDevStatePowerCheckDeviceType = 769,
    WdfDevStatePowerCheckDeviceTypeNP = 0x8302,
    WdfDevStatePowerCheckParentState = 771,
    WdfDevStatePowerCheckParentStateNP = 0x8304,
    WdfDevStatePowerEnablingWakeAtBus = 773,
    WdfDevStatePowerEnablingWakeAtBusNP = 0x8306,
    WdfDevStatePowerD0 = 775,
    WdfDevStatePowerD0NP = 0x8308,
    WdfDevStatePowerD0BusWakeOwner = 777,
    WdfDevStatePowerD0BusWakeOwnerNP = 0x830a,
    WdfDevStatePowerD0ArmedForWake = 779,
    WdfDevStatePowerD0ArmedForWakeNP = 0x830c,
    WdfDevStatePowerD0DisarmingWakeAtBus = 781,
    WdfDevStatePowerD0DisarmingWakeAtBusNP = 0x830e,
    WdfDevStatePowerD0Starting = 783,
    WdfDevStatePowerD0StartingConnectInterrupt = 784,
    WdfDevStatePowerD0StartingDmaEnable = 785,
    WdfDevStatePowerD0StartingStartSelfManagedIo = 786,
    WdfDevStatePowerDecideD0State = 787,
    WdfDevStatePowerGotoD3Stopped = 788,
    WdfDevStatePowerStopped = 789,
    WdfDevStatePowerStartingCheckDeviceType = 790,
    WdfDevStatePowerStartingChild = 791,
    WdfDevStatePowerDxDisablingWakeAtBus = 792,
    WdfDevStatePowerDxDisablingWakeAtBusNP = 0x8319,
    WdfDevStatePowerGotoDx = 794,
    WdfDevStatePowerGotoDxNP = 0x831b,
    WdfDevStatePowerGotoDxIoStopped = 796,
    WdfDevStatePowerGotoDxIoStoppedNP = 0x831d,
    WdfDevStatePowerGotoDxNPFailed = 0x831e,
    WdfDevStatePowerDx = 799,
    WdfDevStatePowerDxNP = 0x8320,
    WdfDevStatePowerGotoDxArmedForWake = 801,
    WdfDevStatePowerGotoDxArmedForWakeNP = 0x8322,
    WdfDevStatePowerGotoDxIoStoppedArmedForWake = 803,
    WdfDevStatePowerGotoDxIoStoppedArmedForWakeNP = 0x8324,
    WdfDevStatePowerDxArmedForWake = 805,
    WdfDevStatePowerDxArmedForWakeNP = 0x8326,
    WdfDevStatePowerCheckParentStateArmedForWake = 807,
    WdfDevStatePowerCheckParentStateArmedForWakeNP = 0x8328,
    WdfDevStatePowerWaitForParentArmedForWake = 809,
    WdfDevStatePowerWaitForParentArmedForWakeNP = 0x832a,
    WdfDevStatePowerStartSelfManagedIo = 811,
    WdfDevStatePowerStartSelfManagedIoNP = 0x832c,
    WdfDevStatePowerStartSelfManagedIoFailed = 813,
    WdfDevStatePowerStartSelfManagedIoFailedNP = 0x832e,
    WdfDevStatePowerWaitForParent = 815,
    WdfDevStatePowerWaitForParentNP = 0x8330,
    WdfDevStatePowerWakePending = 817,
    WdfDevStatePowerWakePendingNP = 0x8332,
    WdfDevStatePowerWaking = 819,
    WdfDevStatePowerWakingNP = 0x8334,
    WdfDevStatePowerWakingConnectInterrupt = 821,
    WdfDevStatePowerWakingConnectInterruptNP = 0x8336,
    WdfDevStatePowerWakingConnectInterruptFailed = 823,
    WdfDevStatePowerWakingConnectInterruptFailedNP = 0x8338,
    WdfDevStatePowerWakingDmaEnable = 825,
    WdfDevStatePowerWakingDmaEnableNP = 0x833a,
    WdfDevStatePowerWakingDmaEnableFailed = 827,
    WdfDevStatePowerWakingDmaEnableFailedNP = 0x833c,
    WdfDevStatePowerReportPowerUpFailedDerefParent = 829,
    WdfDevStatePowerReportPowerUpFailed = 830,
    WdfDevStatePowerPowerFailedPowerDown = 831,
    WdfDevStatePowerReportPowerDownFailed = 832,
    WdfDevStatePowerInitialConnectInterruptFailed = 833,
    WdfDevStatePowerInitialDmaEnableFailed = 834,
    WdfDevStatePowerInitialSelfManagedIoFailed = 835,
    WdfDevStatePowerInitialPowerUpFailedDerefParent = 836,
    WdfDevStatePowerInitialPowerUpFailed = 837,
    WdfDevStatePowerDxStoppedDisarmWake = 838,
    WdfDevStatePowerDxStoppedDisarmWakeNP = 0x8347,
    WdfDevStatePowerGotoDxStoppedDisableInterruptNP = 0x8348,
    WdfDevStatePowerGotoDxStopped = 841,
    WdfDevStatePowerDxStopped = 842,
    WdfDevStatePowerGotoStopped = 843,
    WdfDevStatePowerStoppedCompleteDx = 844,
    WdfDevStatePowerDxStoppedDecideDxState = 845,
    WdfDevStatePowerDxStoppedArmForWake = 846,
    WdfDevStatePowerDxStoppedArmForWakeNP = 0x834f,
    WdfDevStatePowerFinalPowerDownFailed = 848,
    WdfDevStatePowerFinal = 849,
    WdfDevStatePowerGotoImplicitD3DisarmWakeAtBus = 850,
    WdfDevStatePowerUpFailed = 851,
    WdfDevStatePowerUpFailedDerefParent = 852,
    WdfDevStatePowerGotoDxFailed = 853,
    WdfDevStatePowerGotoDxStoppedDisableInterrupt = 854,
    WdfDevStatePowerUpFailedNP = 0x8357,
    WdfDevStatePowerUpFailedDerefParentNP = 0x8358,
    WdfDevStatePowerNotifyingD0ExitToWakeInterrupts = 857,
    WdfDevStatePowerNotifyingD0EntryToWakeInterrupts = 858,
    WdfDevStatePowerNotifyingD0ExitToWakeInterruptsNP = 0x835b,
    WdfDevStatePowerNotifyingD0EntryToWakeInterruptsNP = 0x835c,
    WdfDevStatePowerInitialPowerUpFailedPowerDown = 861,
    WdfDevStatePowerUpFailedPowerDown = 862,
    WdfDevStatePowerUpFailedPowerDownNP = 0x835f,
    WdfDevStatePowerInitialSelfManagedIoFailedStarted = 864,
    WdfDevStatePowerStartSelfManagedIoFailedStarted = 865,
    WdfDevStatePowerStartSelfManagedIoFailedStartedNP = 0x8362,
    WdfDevStatePowerNull = 867
};

typedef enum _WDF_DEVICE_SHUTDOWN_FLAGS {
    WdfDeviceShutdown = 1,
    WdfDeviceLastChanceShutdown = 2
};

typedef enum _WDF_DEVICE_STATE_FLAGS {
    WdfDevStateNP = 0x8000
};

typedef enum _WDF_DISPATCH_IRP_TO_IO_QUEUE_FLAGS {
    WDF_DISPATCH_IRP_TO_IO_QUEUE_NO_FLAGS = 0,
    WDF_DISPATCH_IRP_TO_IO_QUEUE_INVOKE_INCALLERCTX_CALLBACK = 1,
    WDF_DISPATCH_IRP_TO_IO_QUEUE_PREPROCESSED_IRP = 2
};

typedef enum _WDF_DMA_DIRECTION {
    WdfDmaDirectionReadFromDevice = 0,
    WdfDmaDirectionWriteToDevice = 1
};

typedef enum _WDF_DMA_ENABLER_CONFIG_FLAGS {
    WDF_DMA_ENABLER_CONFIG_NO_SGLIST_PREALLOCATION = 1,
    WDF_DMA_ENABLER_CONFIG_REQUIRE_SINGLE_TRANSFER = 2
};

typedef enum _WDF_DMA_PROFILE {
    WdfDmaProfileInvalid = 0,
    WdfDmaProfilePacket = 1,
    WdfDmaProfileScatterGather = 2,
    WdfDmaProfilePacket64 = 3,
    WdfDmaProfileScatterGather64 = 4,
    WdfDmaProfileScatterGatherDuplex = 5,
    WdfDmaProfileScatterGather64Duplex = 6,
    WdfDmaProfileSystem = 7,
    WdfDmaProfileSystemDuplex = 8
};

typedef enum _WDF_DRIVER_INIT_FLAGS {
    WdfDriverInitNonPnpDriver = 1,
    WdfDriverInitNoDispatchOverride = 2,
    WdfVerifyOn = 4,
    WdfVerifierOn = 8,
    WdfDriverInitCompanion = 16
};

typedef enum _WDF_EXECUTION_LEVEL {
    WdfExecutionLevelInvalid = 0,
    WdfExecutionLevelInheritFromParent = 1,
    WdfExecutionLevelPassive = 2,
    WdfExecutionLevelDispatch = 3
};

typedef enum _WDF_FILEOBJECT_CLASS {
    WdfFileObjectInvalid = 0,
    WdfFileObjectNotRequired = 1,
    WdfFileObjectWdfCanUseFsContext = 2,
    WdfFileObjectWdfCanUseFsContext2 = 3,
    WdfFileObjectWdfCannotUseFsContexts = 4,
    WdfFileObjectCanBeOptional = -2147483648
};

typedef enum _WDF_HOST_EXIT_CODE {
    WdfHostExit_StillActive = 259,
    WdfHostExit_CodeUnknown = 0x70000000,
    WdfHostExit_InternalDriverStopReported = 0x70000001,
    WdfHostExit_InternalDriverStopReportFailed = 0x70000002,
    WdfHostExit_ExternalTermination = 0x70000003
};

typedef enum _WDF_INTERRUPT_POLARITY {
    WdfInterruptPolarityUnknown = 0,
    WdfInterruptActiveHigh = 1,
    WdfInterruptActiveLow = 2
};

typedef enum _WDF_INTERRUPT_POLICY {
    WdfIrqPolicyMachineDefault = 0,
    WdfIrqPolicyAllCloseProcessors = 1,
    WdfIrqPolicyOneCloseProcessor = 2,
    WdfIrqPolicyAllProcessorsInMachine = 3,
    WdfIrqPolicySpecifiedProcessors = 4,
    WdfIrqPolicySpreadMessagesAcrossAllProcessors = 5
};

typedef enum _WDF_INTERRUPT_PRIORITY {
    WdfIrqPriorityUndefined = 0,
    WdfIrqPriorityLow = 1,
    WdfIrqPriorityNormal = 2,
    WdfIrqPriorityHigh = 3
};

typedef enum _WDF_IO_FORWARD_PROGRESS_ACTION {
    WdfIoForwardProgressActionInvalid = 0,
    WdfIoForwardProgressActionFailRequest = 1,
    WdfIoForwardProgressActionUseReservedRequest = 2
};

typedef enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY {
    WdfIoForwardProgressInvalidPolicy = 0,
    WdfIoForwardProgressReservedPolicyAlwaysUseReservedRequest = 1,
    WdfIoForwardProgressReservedPolicyUseExamine = 2,
    WdfIoForwardProgressReservedPolicyPagingIO = 3
};

typedef enum _WDF_IO_QUEUE_DISPATCH_TYPE {
    WdfIoQueueDispatchInvalid = 0,
    WdfIoQueueDispatchSequential = 1,
    WdfIoQueueDispatchParallel = 2,
    WdfIoQueueDispatchManual = 3,
    WdfIoQueueDispatchMax = 4
};

typedef enum _WDF_IO_QUEUE_STATE {
    WdfIoQueueAcceptRequests = 1,
    WdfIoQueueDispatchRequests = 2,
    WdfIoQueueNoRequests = 4,
    WdfIoQueueDriverNoRequests = 8,
    WdfIoQueuePnpHeld = 16
};

typedef enum _WDF_IO_TARGET_OPEN_TYPE {
    WdfIoTargetOpenUndefined = 0,
    WdfIoTargetOpenUseExistingDevice = 1,
    WdfIoTargetOpenByName = 2,
    WdfIoTargetOpenReopen = 3,
    WdfIoTargetOpenLocalTargetByFile = 4
};

typedef enum _WDF_IO_TARGET_PURGE_IO_ACTION {
    WdfIoTargetPurgeIoUndefined = 0,
    WdfIoTargetPurgeIoAndWait = 1,
    WdfIoTargetPurgeIo = 2
};

typedef enum _WDF_IO_TARGET_SENT_IO_ACTION {
    WdfIoTargetSentIoUndefined = 0,
    WdfIoTargetCancelSentIo = 1,
    WdfIoTargetWaitForSentIoToComplete = 2,
    WdfIoTargetLeaveSentIoPending = 3
};

typedef enum _WDF_IO_TARGET_STATE {
    WdfIoTargetStateUndefined = 0,
    WdfIoTargetStarted = 1,
    WdfIoTargetStopped = 2,
    WdfIoTargetClosedForQueryRemove = 3,
    WdfIoTargetClosed = 4,
    WdfIoTargetDeleted = 5,
    WdfIoTargetPurged = 6
};

typedef enum _WDF_MEMORY_DESCRIPTOR_TYPE {
    WdfMemoryDescriptorTypeInvalid = 0,
    WdfMemoryDescriptorTypeBuffer = 1,
    WdfMemoryDescriptorTypeMdl = 2,
    WdfMemoryDescriptorTypeHandle = 3
};

typedef enum _WDF_POWER_DEVICE_STATE {
    WdfPowerDeviceInvalid = 0,
    WdfPowerDeviceD0 = 1,
    WdfPowerDeviceD1 = 2,
    WdfPowerDeviceD2 = 3,
    WdfPowerDeviceD3 = 4,
    WdfPowerDeviceD3Final = 5,
    WdfPowerDevicePrepareForHibernation = 6,
    WdfPowerDeviceMaximum = 7
};

typedef enum _WDF_POWER_POLICY_IDLE_TIMEOUT_CONSTANTS {
    IdleTimeoutDefaultConstant = 0
};

typedef enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE {
    DriverManagedIdleTimeout = 0,
    SystemManagedIdleTimeout = 1,
    SystemManagedIdleTimeoutWithHint = 2
};

typedef enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES {
    IdleCapsInvalid = 0,
    IdleCannotWakeFromS0 = 1,
    IdleCanWakeFromS0 = 2,
    IdleUsbSelectiveSuspend = 3
};

typedef enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL {
    IdleUserControlInvalid = 0,
    IdleDoNotAllowUserControl = 1,
    IdleAllowUserControl = 2
};

typedef enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL {
    WakeUserControlInvalid = 0,
    WakeDoNotAllowUserControl = 1,
    WakeAllowUserControl = 2
};

typedef enum _WDF_PROPERTY_STORE_RETRIEVE_FLAGS {
    WdfPropertyStoreNormal = 0,
    WdfPropertyStoreCreateIfMissing = 1,
    WdfPropertyStoreCreateVolatile = 2,
    WdfPropertyStoreRetrieveFlagsMask = 3
};

typedef enum _WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE {
    WdfReleaseHardwareOrderOnFailureInvalid = 0,
    WdfReleaseHardwareOrderOnFailureEarly = 1,
    WdfReleaseHardwareOrderOnFailureAfterDescendants = 2
};

typedef enum _WDF_REMOVE_LOCK_OPTIONS_FLAGS {
    WDF_REMOVE_LOCK_OPTION_ACQUIRE_FOR_IO = 1
};

typedef enum _WDF_REQUEST_FATAL_ERROR_CODES {
    WDF_REQUEST_FATAL_ERROR_NO_MORE_STACK_LOCATIONS = 1,
    WDF_REQUEST_FATAL_ERROR_NULL_IRP = 2,
    WDF_REQUEST_FATAL_ERROR_REQUEST_ALREADY_SENT = 3,
    WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH = 4,
    WDF_REQUEST_FATAL_ERROR_REQUEST_NOT_IN_QUEUE = 5
};

typedef enum _WDF_REQUEST_FORWARD_OPTIONS_FLAGS {
    WDF_REQUEST_FORWARD_OPTION_SEND_AND_FORGET = 1
};

typedef enum _WDF_REQUEST_REUSE_FLAGS {
    WDF_REQUEST_REUSE_NO_FLAGS = 0,
    WDF_REQUEST_REUSE_SET_NEW_IRP = 1
};

typedef enum _WDF_REQUEST_SEND_OPTIONS_FLAGS {
    WDF_REQUEST_SEND_OPTION_TIMEOUT = 1,
    WDF_REQUEST_SEND_OPTION_SYNCHRONOUS = 2,
    WDF_REQUEST_SEND_OPTION_IGNORE_TARGET_STATE = 4,
    WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET = 8,
    WDF_REQUEST_SEND_OPTION_IMPERSONATE_CLIENT = 0x10000,
    WDF_REQUEST_SEND_OPTION_IMPERSONATION_IGNORE_FAILURE = 0x20000
};

typedef enum _WDF_REQUEST_STOP_ACTION_FLAGS {
    WdfRequestStopActionInvalid = 0,
    WdfRequestStopActionSuspend = 1,
    WdfRequestStopActionPurge = 2,
    WdfRequestStopRequestCancelable = 0x10000000
};

typedef enum _WDF_REQUEST_TYPE {
    WdfRequestTypeCreate = 0,
    WdfRequestTypeCreateNamedPipe = 1,
    WdfRequestTypeClose = 2,
    WdfRequestTypeRead = 3,
    WdfRequestTypeWrite = 4,
    WdfRequestTypeQueryInformation = 5,
    WdfRequestTypeSetInformation = 6,
    WdfRequestTypeQueryEA = 7,
    WdfRequestTypeSetEA = 8,
    WdfRequestTypeFlushBuffers = 9,
    WdfRequestTypeQueryVolumeInformation = 10,
    WdfRequestTypeSetVolumeInformation = 11,
    WdfRequestTypeDirectoryControl = 12,
    WdfRequestTypeFileSystemControl = 13,
    WdfRequestTypeDeviceControl = 14,
    WdfRequestTypeDeviceControlInternal = 15,
    WdfRequestTypeShutdown = 16,
    WdfRequestTypeLockControl = 17,
    WdfRequestTypeCleanup = 18,
    WdfRequestTypeCreateMailSlot = 19,
    WdfRequestTypeQuerySecurity = 20,
    WdfRequestTypeSetSecurity = 21,
    WdfRequestTypePower = 22,
    WdfRequestTypeSystemControl = 23,
    WdfRequestTypeDeviceChange = 24,
    WdfRequestTypeQueryQuota = 25,
    WdfRequestTypeSetQuota = 26,
    WdfRequestTypePnp = 27,
    WdfRequestTypeOther = 28,
    WdfRequestTypeUsb = 64,
    WdfRequestTypeNoFormat = 255,
    WdfRequestTypeMax = 256
};

typedef enum _WDF_RETRIEVE_CHILD_FLAGS {
    WdfRetrieveUnspecified = 0,
    WdfRetrievePresentChildren = 1,
    WdfRetrieveMissingChildren = 2,
    WdfRetrievePendingChildren = 4,
    WdfRetrieveAddedChildren = 5,
    WdfRetrieveAllChildren = 7
};

typedef enum _WDF_SPECIAL_FILE_TYPE {
    WdfSpecialFileUndefined = 0,
    WdfSpecialFilePaging = 1,
    WdfSpecialFileHibernation = 2,
    WdfSpecialFileDump = 3,
    WdfSpecialFileBoot = 4,
    WdfSpecialFileMax = 5
};

typedef enum _WDF_STATE_NOTIFICATION_TYPE {
    StateNotificationInvalid = 0,
    StateNotificationEnterState = 1,
    StateNotificationPostProcessState = 2,
    StateNotificationLeaveState = 4,
    StateNotificationAllStates = 7
};

typedef enum _WDF_SYNCHRONIZATION_SCOPE {
    WdfSynchronizationScopeInvalid = 0,
    WdfSynchronizationScopeInheritFromParent = 1,
    WdfSynchronizationScopeDevice = 2,
    WdfSynchronizationScopeQueue = 3,
    WdfSynchronizationScopeNone = 4
};

typedef enum _WDF_TASK_SEND_OPTIONS_FLAGS {
    WDF_TASK_SEND_OPTION_TIMEOUT = 1,
    WDF_TASK_SEND_OPTION_SYNCHRONOUS = 2
};

typedef enum _WDF_TRI_STATE {
    WdfFalse = 0,
    WdfTrue = 1,
    WdfUseDefault = 2
};

typedef enum _WDF_USB_BMREQUEST_DIRECTION {
    BmRequestHostToDevice = 0,
    BmRequestDeviceToHost = 1
};

typedef enum _WDF_USB_BMREQUEST_RECIPIENT {
    BmRequestToDevice = 0,
    BmRequestToInterface = 1,
    BmRequestToEndpoint = 2,
    BmRequestToOther = 3
};

typedef enum _WDF_USB_BMREQUEST_TYPE {
    BmRequestStandard = 0,
    BmRequestClass = 1,
    BmRequestVendor = 2
};

typedef enum _WDF_USB_DEVICE_TRAITS {
    WDF_USB_DEVICE_TRAIT_SELF_POWERED = 1,
    WDF_USB_DEVICE_TRAIT_REMOTE_WAKE_CAPABLE = 2,
    WDF_USB_DEVICE_TRAIT_AT_HIGH_SPEED = 4
};

typedef enum _WDF_USB_PIPE_TYPE {
    WdfUsbPipeTypeInvalid = 0,
    WdfUsbPipeTypeControl = 1,
    WdfUsbPipeTypeIsochronous = 2,
    WdfUsbPipeTypeBulk = 3,
    WdfUsbPipeTypeInterrupt = 4
};

typedef enum _WDF_USB_REQUEST_TYPE {
    WdfUsbRequestTypeInvalid = 0,
    WdfUsbRequestTypeNoFormat = 1,
    WdfUsbRequestTypeDeviceString = 2,
    WdfUsbRequestTypeDeviceControlTransfer = 3,
    WdfUsbRequestTypeDeviceUrb = 4,
    WdfUsbRequestTypePipeWrite = 5,
    WdfUsbRequestTypePipeRead = 6,
    WdfUsbRequestTypePipeAbort = 7,
    WdfUsbRequestTypePipeReset = 8,
    WdfUsbRequestTypePipeUrb = 9
};

typedef enum _WDF_WMI_PROVIDER_CONTROL {
    WdfWmiControlInvalid = 0,
    WdfWmiEventControl = 1,
    WdfWmiInstanceControl = 2
};

typedef enum _WDF_WMI_PROVIDER_FLAGS {
    WdfWmiProviderEventOnly = 1,
    WdfWmiProviderExpensive = 2,
    WdfWmiProviderTracing = 4,
    WdfWmiProviderValidFlags = 7
};

typedef enum _WHEA_CPU_VENDOR {
    WheaCpuVendorOther = 0,
    WheaCpuVendorIntel = 1,
    WheaCpuVendorAmd = 2
};

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA = 1,
    WheaDataFormatMemory = 2,
    WheaDataFormatPCIExpress = 3,
    WheaDataFormatNMIPort = 4,
    WheaDataFormatPCIXBus = 5,
    WheaDataFormatPCIXDevice = 6,
    WheaDataFormatGeneric = 7,
    WheaDataFormatMax = 8
};

typedef enum _WHEA_ERROR_SEVERITY {
    WheaErrSevRecoverable = 0,
    WheaErrSevFatal = 1,
    WheaErrSevCorrected = 2,
    WheaErrSevInformational = 3
};

typedef enum _WHEA_ERROR_SOURCE_STATE {
    WheaErrSrcStateStopped = 1,
    WheaErrSrcStateStarted = 2
};

typedef enum _WHEA_ERROR_SOURCE_TYPE {
    WheaErrSrcTypeMCE = 0,
    WheaErrSrcTypeCMC = 1,
    WheaErrSrcTypeCPE = 2,
    WheaErrSrcTypeNMI = 3,
    WheaErrSrcTypePCIe = 4,
    WheaErrSrcTypeGeneric = 5,
    WheaErrSrcTypeINIT = 6,
    WheaErrSrcTypeBOOT = 7,
    WheaErrSrcTypeSCIGeneric = 8,
    WheaErrSrcTypeIPFMCA = 9,
    WheaErrSrcTypeIPFCMC = 10,
    WheaErrSrcTypeIPFCPE = 11,
    WheaErrSrcTypeGenericV2 = 12,
    WheaErrSrcTypeSCIGenericV2 = 13,
    WheaErrSrcTypeMax = 14
};

typedef enum _WHEA_ERROR_TYPE {
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory = 1,
    WheaErrTypePCIExpress = 2,
    WheaErrTypeNMI = 3,
    WheaErrTypePCIXBus = 4,
    WheaErrTypePCIXDevice = 5,
    WheaErrTypeGeneric = 6
};

typedef enum _WHEA_EVENT_LOG_ENTRY_ID {
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
    WheaEventLogEntryIdWheaInit = -2147483646,
    WheaEventLogEntryIdMax = -2147483645
};

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE {
    WheaEventLogEntryTypeInformational = 0,
    WheaEventLogEntryTypeWarning = 1,
    WheaEventLogEntryTypeError = 2
};

typedef enum _WHEA_PCIEXPRESS_DEVICE_TYPE {
    WheaPciExpressEndpoint = 0,
    WheaPciExpressLegacyEndpoint = 1,
    WheaPciExpressRootPort = 4,
    WheaPciExpressUpstreamSwitchPort = 5,
    WheaPciExpressDownstreamSwitchPort = 6,
    WheaPciExpressToPciXBridge = 7,
    WheaPciXToExpressBridge = 8,
    WheaPciExpressRootComplexIntegratedEndpoint = 9,
    WheaPciExpressRootComplexEventCollector = 10
};

typedef enum _WHEA_RAW_DATA_FORMAT {
    WheaRawDataFormatIPFSalRecord = 0,
    WheaRawDataFormatIA32MCA = 1,
    WheaRawDataFormatIntel64MCA = 2,
    WheaRawDataFormatAMD64MCA = 3,
    WheaRawDataFormatMemory = 4,
    WheaRawDataFormatPCIExpress = 5,
    WheaRawDataFormatNMIPort = 6,
    WheaRawDataFormatPCIXBus = 7,
    WheaRawDataFormatPCIXDevice = 8,
    WheaRawDataFormatGeneric = 9,
    WheaRawDataFormatMax = 10
};

typedef enum _WORK_QUEUE_TYPE {
    CriticalWorkQueue = 0,
    DelayedWorkQueue = 1,
    HyperCriticalWorkQueue = 2,
    NormalWorkQueue = 3,
    BackgroundWorkQueue = 4,
    RealTimeWorkQueue = 5,
    SuperCriticalWorkQueue = 6,
    MaximumWorkQueue = 7,
    CustomPriorityWorkQueue = 32
};

typedef enum _WPP_FLAG_LEN_ENUM {
    WPP_FLAG_LEN = 1
};

typedef enum _WUDFMESSAGE {
    WudfMsg_Reserved = 0,
    WudfMsg_IRP = 1,
    WudfMsg_IRP_Completion = 2,
    WudfMsg_CREATE_DEVICE_STACK = 3,
    WudfMsg_ADD_DEVICE = 4,
    WudfMsg_CREATE = 5,
    WudfMsg_CLOSE = 6,
    WudfMsg_CLEANUP = 7,
    WudfMsg_READ = 8,
    WudfMsg_WRITE = 9,
    WudfMsg_IOCONTROL = 10,
    WudfMsg_FLUSH = 11,
    WudfMsg_QUERY_INFORMATION_FILE = 12,
    WudfMsg_SET_INFORMATION_FILE = 13,
    WudfMsg_Cancel = 14,
    WudfMsg_POWER_IRP_COMPLETE = 15,
    WudfMsg_USB_SS_EVENT = 16,
    WudfMsg_CLOSE_DEVICE_STACK = 17,
    WudfMsg_REMOTE_INTERFACE_ARRIVAL = 18,
    WudfMsg_REMOTE_INTERFACE_REMOVAL = 19,
    WudfMsg_TARGET_DEVICE_NOTIFICATION = 20,
    WudfMsg_TRANSPORT_QUERY_ID = 21,
    WudfMsg_COMPANION_ADD = 22,
    WudfMsg_COMPANION_REMOVE = 23,
    WudfMsg_COMPANION_SYNCHRONOUS_TASK = 24,
    WudfMsg_COMPANION_EVENT = 25,
    WudfMsg_FramworkMax = 26,
    WudfMsg_ExitProcess = 27,
    WdfProcMgmt_Message_Reserved = 28,
    WdfProcMgmt_Message_ControlObjectName = 29,
    WdfProcMgmt_Message_QueryProcess = 30,
    WdfProcMgmt_Message_OpenProcess = 31,
    WdfProcMgmt_Message_CloseProcess = 32,
    WudfMsg_Connect = 33,
    WudfMsg_WMI_POWER_DATA = 34,
    WudfMsg_POFX_EVENT = 35,
    WudfMsg_Max = 36
};

typedef enum _WUDF_CONTROL_OBJ_REF_STRING {
    WudfRefStringMin = 0,
    WudfRefStringElevations = 0,
    WudfRefStringNullFile = 1,
    WudfRefStringMax = 2,
    WudfRefStringUnknown = 2
};

typedef enum _WUDF_IRP_BUFFER_INDEX {
    IrpBufferIndexPrimary = 0,
    IrpBufferIndexSecondary = 1,
    IrpBufferIndexMax = 2
};

typedef enum _WdfUsbTargetDeviceSelectConfigType {
    WdfUsbTargetDeviceSelectConfigTypeInvalid = 0,
    WdfUsbTargetDeviceSelectConfigTypeDeconfig = 1,
    WdfUsbTargetDeviceSelectConfigTypeSingleInterface = 2,
    WdfUsbTargetDeviceSelectConfigTypeMultiInterface = 3,
    WdfUsbTargetDeviceSelectConfigTypeInterfacesPairs = 4,
    WdfUsbTargetDeviceSelectConfigTypeInterfacesDescriptor = 5,
    WdfUsbTargetDeviceSelectConfigTypeUrb = 6
};

typedef enum _WdfUsbTargetDeviceSelectSettingType {
    WdfUsbInterfaceSelectSettingTypeDescriptor = 16,
    WdfUsbInterfaceSelectSettingTypeSetting = 17,
    WdfUsbInterfaceSelectSettingTypeUrb = 18
};

typedef enum __MIDL_ICodeInstall_0001 {
    CIP_DISK_FULL = 0,
    CIP_ACCESS_DENIED = 1,
    CIP_NEWER_VERSION_EXISTS = 2,
    CIP_OLDER_VERSION_EXISTS = 3,
    CIP_NAME_CONFLICT = 4,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6,
    CIP_UNSAFE_TO_ABORT = 7,
    CIP_NEED_REBOOT = 8,
    CIP_NEED_REBOOT_UI_PERMISSION = 9
};

typedef enum __MIDL_IGetBindHandle_0001 {
    BINDHANDLETYPES_APPCACHE = 0,
    BINDHANDLETYPES_DEPENDENCY = 1,
    BINDHANDLETYPES_COUNT = 2
};

typedef enum __MIDL_IUri_0001 {
    Uri_PROPERTY_ABSOLUTE_URI = 0,
    Uri_PROPERTY_STRING_START = 0,
    Uri_PROPERTY_AUTHORITY = 1,
    Uri_PROPERTY_DISPLAY_URI = 2,
    Uri_PROPERTY_DOMAIN = 3,
    Uri_PROPERTY_EXTENSION = 4,
    Uri_PROPERTY_FRAGMENT = 5,
    Uri_PROPERTY_HOST = 6,
    Uri_PROPERTY_PASSWORD = 7,
    Uri_PROPERTY_PATH = 8,
    Uri_PROPERTY_PATH_AND_QUERY = 9,
    Uri_PROPERTY_QUERY = 10,
    Uri_PROPERTY_RAW_URI = 11,
    Uri_PROPERTY_SCHEME_NAME = 12,
    Uri_PROPERTY_USER_INFO = 13,
    Uri_PROPERTY_USER_NAME = 14,
    Uri_PROPERTY_STRING_LAST = 14,
    Uri_PROPERTY_HOST_TYPE = 15,
    Uri_PROPERTY_DWORD_START = 15,
    Uri_PROPERTY_PORT = 16,
    Uri_PROPERTY_SCHEME = 17,
    Uri_PROPERTY_ZONE = 18,
    Uri_PROPERTY_DWORD_LAST = 18
};

typedef enum __MIDL_IUri_0002 {
    Uri_HOST_UNKNOWN = 0,
    Uri_HOST_DNS = 1,
    Uri_HOST_IPV4 = 2,
    Uri_HOST_IPV6 = 3,
    Uri_HOST_IDN = 4
};

typedef enum __vc_attributes::aggregatableAttribute::type_e {
    never = 0,
    allowed = 1,
    always = 2
};

typedef enum __vc_attributes::event_receiverAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::event_sourceAttribute::optimize_e {
    speed = 0,
    size = 1
};

typedef enum __vc_attributes::event_sourceAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::helper_attributes::usageAttribute::usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

typedef enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e {
    eBoolean = 0,
    eInteger = 1,
    eFloat = 2,
    eDouble = 3
};

typedef enum __vc_attributes::moduleAttribute::type_e {
    dll = 1,
    exe = 2,
    service = 3,
    unspecified = 4,
    EXE = 2,
    SERVICE = 3
};

typedef enum __vc_attributes::pointer_defaultAttribute::type_e {
    ptr = 0,
    ref = 1,
    unique = 2
};

typedef enum __vc_attributes::threadingAttribute::threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum _tagINTERNETFEATURELIST {
    FEATURE_OBJECT_CACHING = 0,
    FEATURE_ZONE_ELEVATION = 1,
    FEATURE_MIME_HANDLING = 2,
    FEATURE_MIME_SNIFFING = 3,
    FEATURE_WINDOW_RESTRICTIONS = 4,
    FEATURE_WEBOC_POPUPMANAGEMENT = 5,
    FEATURE_BEHAVIORS = 6,
    FEATURE_DISABLE_MK_PROTOCOL = 7,
    FEATURE_LOCALMACHINE_LOCKDOWN = 8,
    FEATURE_SECURITYBAND = 9,
    FEATURE_RESTRICT_ACTIVEXINSTALL = 10,
    FEATURE_VALIDATE_NAVIGATE_URL = 11,
    FEATURE_RESTRICT_FILEDOWNLOAD = 12,
    FEATURE_ADDON_MANAGEMENT = 13,
    FEATURE_PROTOCOL_LOCKDOWN = 14,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15,
    FEATURE_SAFE_BINDTOOBJECT = 16,
    FEATURE_UNC_SAVEDFILECHECK = 17,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18,
    FEATURE_TABBED_BROWSING = 19,
    FEATURE_SSLUX = 20,
    FEATURE_DISABLE_NAVIGATION_SOUNDS = 21,
    FEATURE_DISABLE_LEGACY_COMPRESSION = 22,
    FEATURE_FORCE_ADDR_AND_STATUS = 23,
    FEATURE_XMLHTTP = 24,
    FEATURE_DISABLE_TELNET_PROTOCOL = 25,
    FEATURE_FEEDS = 26,
    FEATURE_BLOCK_INPUT_PROMPTS = 27,
    FEATURE_ENTRY_COUNT = 28
};

typedef enum _tagPARSEACTION {
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY = 2,
    PARSE_SECURITY_URL = 3,
    PARSE_ROOTDOCUMENT = 4,
    PARSE_DOCUMENT = 5,
    PARSE_ANCHOR = 6,
    PARSE_ENCODE_IS_UNESCAPE = 7,
    PARSE_DECODE_IS_ESCAPE = 8,
    PARSE_PATH_FROM_URL = 9,
    PARSE_URL_FROM_PATH = 10,
    PARSE_MIME = 11,
    PARSE_SERVER = 12,
    PARSE_SCHEMA = 13,
    PARSE_SITE = 14,
    PARSE_DOMAIN = 15,
    PARSE_LOCATION = 16,
    PARSE_SECURITY_DOMAIN = 17,
    PARSE_ESCAPE = 18,
    PARSE_UNESCAPE = 19
};

typedef enum _tagPSUACTION {
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY = 2
};

typedef enum _tagQUERYOPTION {
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE = 2,
    QUERY_CONTENT_ENCODING = 3,
    QUERY_CONTENT_TYPE = 4,
    QUERY_REFRESH = 5,
    QUERY_RECOMBINE = 6,
    QUERY_CAN_NAVIGATE = 7,
    QUERY_USES_NETWORK = 8,
    QUERY_IS_CACHED = 9,
    QUERY_IS_INSTALLEDENTRY = 10,
    QUERY_IS_CACHED_OR_MAPPED = 11,
    QUERY_USES_CACHE = 12,
    QUERY_IS_SECURE = 13,
    QUERY_IS_SAFE = 14,
    QUERY_USES_HISTORYFOLDER = 15,
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
};

typedef enum optimize_e {
    speed = 0,
    size = 1
};

typedef enum tagApplicationType {
    ServerApplication = 0,
    LibraryApplication = 1
};

typedef enum tagBINDSTATUS {
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING = 2,
    BINDSTATUS_REDIRECTING = 3,
    BINDSTATUS_BEGINDOWNLOADDATA = 4,
    BINDSTATUS_DOWNLOADINGDATA = 5,
    BINDSTATUS_ENDDOWNLOADDATA = 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
    BINDSTATUS_INSTALLINGCOMPONENTS = 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
    BINDSTATUS_USINGCACHEDCOPY = 10,
    BINDSTATUS_SENDINGREQUEST = 11,
    BINDSTATUS_CLASSIDAVAILABLE = 12,
    BINDSTATUS_MIMETYPEAVAILABLE = 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
    BINDSTATUS_BEGINSYNCOPERATION = 15,
    BINDSTATUS_ENDSYNCOPERATION = 16,
    BINDSTATUS_BEGINUPLOADDATA = 17,
    BINDSTATUS_UPLOADINGDATA = 18,
    BINDSTATUS_ENDUPLOADDATA = 19,
    BINDSTATUS_PROTOCOLCLASSID = 20,
    BINDSTATUS_ENCODING = 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
    BINDSTATUS_CLASSINSTALLLOCATION = 23,
    BINDSTATUS_DECODING = 24,
    BINDSTATUS_LOADINGMIMEHANDLER = 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
    BINDSTATUS_FILTERREPORTMIMETYPE = 27,
    BINDSTATUS_CLSIDCANINSTANTIATE = 28,
    BINDSTATUS_IUNKNOWNAVAILABLE = 29,
    BINDSTATUS_DIRECTBIND = 30,
    BINDSTATUS_RAWMIMETYPE = 31,
    BINDSTATUS_PROXYDETECTING = 32,
    BINDSTATUS_ACCEPTRANGES = 33,
    BINDSTATUS_COOKIE_SENT = 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
    BINDSTATUS_COOKIE_SUPPRESSED = 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
    BINDSTATUS_COOKIE_STATE_REJECT = 39,
    BINDSTATUS_COOKIE_STATE_PROMPT = 40,
    BINDSTATUS_COOKIE_STATE_LEASH = 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
    BINDSTATUS_POLICY_HREF = 43,
    BINDSTATUS_P3P_HEADER = 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
    BINDSTATUS_CACHECONTROL = 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
    BINDSTATUS_PUBLISHERAVAILABLE = 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE = 52,
    BINDSTATUS_SSLUX_NAVBLOCKED = 53,
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54,
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55,
    BINDSTATUS_64BIT_PROGRESS = 56,
    BINDSTATUS_LAST = 56,
    BINDSTATUS_RESERVED_0 = 57,
    BINDSTATUS_RESERVED_1 = 58,
    BINDSTATUS_RESERVED_2 = 59,
    BINDSTATUS_RESERVED_3 = 60,
    BINDSTATUS_RESERVED_4 = 61,
    BINDSTATUS_RESERVED_5 = 62,
    BINDSTATUS_RESERVED_6 = 63,
    BINDSTATUS_RESERVED_7 = 64,
    BINDSTATUS_RESERVED_8 = 65,
    BINDSTATUS_RESERVED_9 = 66,
    BINDSTATUS_RESERVED_A = 67,
    BINDSTATUS_RESERVED_B = 68,
    BINDSTATUS_RESERVED_C = 69,
    BINDSTATUS_RESERVED_D = 70,
    BINDSTATUS_RESERVED_E = 71,
    BINDSTATUS_RESERVED_F = 72,
    BINDSTATUS_RESERVED_10 = 73,
    BINDSTATUS_RESERVED_11 = 74,
    BINDSTATUS_RESERVED_12 = 75,
    BINDSTATUS_RESERVED_13 = 76,
    BINDSTATUS_LAST_PRIVATE = 76
};

typedef enum tagBINDSTRING {
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES = 2,
    BINDSTRING_EXTRA_URL = 3,
    BINDSTRING_LANGUAGE = 4,
    BINDSTRING_USERNAME = 5,
    BINDSTRING_PASSWORD = 6,
    BINDSTRING_UA_PIXELS = 7,
    BINDSTRING_UA_COLOR = 8,
    BINDSTRING_OS = 9,
    BINDSTRING_USER_AGENT = 10,
    BINDSTRING_ACCEPT_ENCODINGS = 11,
    BINDSTRING_POST_COOKIE = 12,
    BINDSTRING_POST_DATA_MIME = 13,
    BINDSTRING_URL = 14,
    BINDSTRING_IID = 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
    BINDSTRING_PTR_BIND_CONTEXT = 17,
    BINDSTRING_XDR_ORIGIN = 18,
    BINDSTRING_DOWNLOADPATH = 19,
    BINDSTRING_ROOTDOC_URL = 20,
    BINDSTRING_INITIAL_FILENAME = 21,
    BINDSTRING_PROXY_USERNAME = 22,
    BINDSTRING_PROXY_PASSWORD = 23,
    BINDSTRING_ENTERPRISE_ID = 24,
    BINDSTRING_DOC_URL = 25,
    BINDSTRING_SAMESITE_COOKIE_LEVEL = 26
};

typedef enum tagCALLCONV {
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = 2,
    CC_PASCAL = 2,
    CC_MACPASCAL = 3,
    CC_STDCALL = 4,
    CC_FPFASTCALL = 5,
    CC_SYSCALL = 6,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MAX = 9
};

typedef enum tagCHANGEKIND {
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = 1,
    CHANGEKIND_SETNAMES = 2,
    CHANGEKIND_SETDOCUMENTATION = 3,
    CHANGEKIND_GENERAL = 4,
    CHANGEKIND_INVALIDATE = 5,
    CHANGEKIND_CHANGEFAILED = 6,
    CHANGEKIND_MAX = 7
};

typedef enum tagCLSCTX {
    CLSCTX_INPROC_SERVER = 1,
    CLSCTX_INPROC_HANDLER = 2,
    CLSCTX_LOCAL_SERVER = 4,
    CLSCTX_INPROC_SERVER16 = 8,
    CLSCTX_REMOTE_SERVER = 16,
    CLSCTX_INPROC_HANDLER16 = 32,
    CLSCTX_RESERVED1 = 64,
    CLSCTX_RESERVED2 = 128,
    CLSCTX_RESERVED3 = 256,
    CLSCTX_RESERVED4 = 512,
    CLSCTX_NO_CODE_DOWNLOAD = 1024,
    CLSCTX_RESERVED5 = 2048,
    CLSCTX_NO_CUSTOM_MARSHAL = 4096,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 8192,
    CLSCTX_NO_FAILURE_LOG = 16384,
    CLSCTX_DISABLE_AAA = 0x8000,
    CLSCTX_ENABLE_AAA = 0x10000,
    CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
    CLSCTX_ACTIVATE_X86_SERVER = 0x40000,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
    CLSCTX_ENABLE_CLOAKING = 0x100000,
    CLSCTX_APPCONTAINER = 0x400000,
    CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
    CLSCTX_RESERVED6 = 0x1000000,
    CLSCTX_ACTIVATE_ARM32_SERVER = 0x2000000,
    CLSCTX_PS_DLL = -2147483648
};

typedef enum tagCOINITBASE {
    COINITBASE_MULTITHREADED = 0
};

typedef enum tagDESCKIND {
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = 1,
    DESCKIND_VARDESC = 2,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5
};

typedef enum tagDOMNodeType {
    NODE_INVALID = 0,
    NODE_ELEMENT = 1,
    NODE_ATTRIBUTE = 2,
    NODE_TEXT = 3,
    NODE_CDATA_SECTION = 4,
    NODE_ENTITY_REFERENCE = 5,
    NODE_ENTITY = 6,
    NODE_PROCESSING_INSTRUCTION = 7,
    NODE_COMMENT = 8,
    NODE_DOCUMENT = 9,
    NODE_DOCUMENT_TYPE = 10,
    NODE_DOCUMENT_FRAGMENT = 11,
    NODE_NOTATION = 12
};

typedef enum tagFUNCKIND {
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = 1,
    FUNC_NONVIRTUAL = 2,
    FUNC_STATIC = 3,
    FUNC_DISPATCH = 4
};

typedef enum tagGLOBALOPT_EH_VALUES {
    COMGLB_EXCEPTION_HANDLE = 0,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
};

typedef enum tagINVOKEKIND {
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8
};

typedef enum tagSYSKIND {
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_MAC = 2,
    SYS_WIN64 = 3
};

typedef enum tagShutdownType {
    IdleShutdown = 0,
    ForcedShutdown = 1
};

typedef enum tagTYPEKIND {
    TKIND_ENUM = 0,
    TKIND_RECORD = 1,
    TKIND_MODULE = 2,
    TKIND_INTERFACE = 3,
    TKIND_DISPATCH = 4,
    TKIND_COCLASS = 5,
    TKIND_ALIAS = 6,
    TKIND_UNION = 7,
    TKIND_MAX = 8
};

typedef enum tagTYSPEC {
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = 1,
    TYSPEC_MIMETYPE = 2,
    TYSPEC_FILENAME = 3,
    TYSPEC_PROGID = 4,
    TYSPEC_PACKAGENAME = 5,
    TYSPEC_OBJECTID = 6
};

typedef enum tagURLZONE {
    URLZONE_INVALID = -1,
    URLZONE_PREDEFINED_MIN = 0,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET = 1,
    URLZONE_TRUSTED = 2,
    URLZONE_INTERNET = 3,
    URLZONE_UNTRUSTED = 4,
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN = 1000,
    URLZONE_USER_MAX = 10000
};

typedef enum tagVARKIND {
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
    VAR_CONST = 2,
    VAR_DISPATCH = 3
};

typedef enum tagXMLEMEM_TYPE {
    XMLELEMTYPE_ELEMENT = 0,
    XMLELEMTYPE_TEXT = 1,
    XMLELEMTYPE_COMMENT = 2,
    XMLELEMTYPE_DOCUMENT = 3,
    XMLELEMTYPE_DTD = 4,
    XMLELEMTYPE_PI = 5,
    XMLELEMTYPE_OTHER = 6
};

typedef enum threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

$xdatasym;
AuxpInitState;
AuxpKlibFns;
DEVPKEY_Device_Capabilities;
ExDefaultMdlProtection;
ExDefaultNonPagedPoolType;
FX_EVTIOSTOP_START;
FX_EVTIOSTOP_STOP;
FX_OBJECT_LEAK_DETECTION_DEFAULT_TYPES;
FX_POWER_D0_ENTRY_START;
FX_POWER_D0_ENTRY_STOP;
FX_POWER_D0_EXIT_START;
FX_POWER_D0_EXIT_STOP;
FX_POWER_HW_PREPARE_START;
FX_POWER_HW_PREPARE_STOP;
FX_POWER_HW_RELEASE_START;
FX_POWER_HW_RELEASE_STOP;
FX_REQUEST_COMPLETE;
FX_REQUEST_START;
FxCallbackLock::`vftable';
FxCallbackMutexLock::`vftable';
FxCallbackSpinLock::`vftable';
FxChildList::`vftable';
FxCmResList::`vftable';
FxCollection::`vftable';
FxCommonBuffer::`vftable';
FxCompanionTarget::`vftable';
FxDefaultIrpHandler::`vftable';
FxDevice::`vftable';
FxDevice::m_PriorityBoosts;
FxDeviceBase::`vftable';
FxDevicePwrRequirementMachine::m_DevicePowerNotRequiredD0States;
FxDevicePwrRequirementMachine::m_DevicePowerNotRequiredDxStates;
FxDevicePwrRequirementMachine::m_DevicePowerRequiredD0States;
FxDevicePwrRequirementMachine::m_DevicePowerRequiredDxStates;
FxDevicePwrRequirementMachine::m_StateTable;
FxDevicePwrRequirementMachine::m_UnregisteredStates;
FxDevicePwrRequirementMachine::m_WaitingForDevicePowerRequiredD0States;
FxDisposeList::`vftable';
FxDmaEnabler::`vftable';
FxDmaPacketTransaction::`vftable';
FxDmaScatterGatherTransaction::`vftable';
FxDmaSystemTransaction::`vftable';
FxDmaTransactionBase::`vftable';
FxDpc::`vftable';
FxDriver::`vftable';
FxFileObject::`vftable';
FxInternalIoctlOthersContext::`vftable';
FxInterrupt::`vftable';
FxIoContext::`vftable';
FxIoQueue::`vftable';
FxIoResList::`vftable';
FxIoResReqList::`vftable';
FxIoTarget::`vftable';
FxIoTargetRemote::`vftable';
FxIoTargetSelf::`vftable';
FxLibraryGlobals;
FxLookasideList::`vftable';
FxMemoryBuffer::`vftable';
FxMemoryBufferFromLookaside::`vftable';
FxMemoryBufferFromPool::`vftable';
FxMemoryBufferFromPoolLookaside::`vftable';
FxMemoryBufferPreallocated::`vftable';
FxMemoryObject::`vftable';
FxMemoryPagedBufferFromPool::`vftable';
FxMemoryPagedBufferFromPoolLookaside::`vftable';
FxMpDevice::`vftable';
FxNPagedLookasideList::`vftable';
FxNPagedLookasideListFromPool::`vftable';
FxNonPagedObject::`vftable';
FxObject::`vftable';
FxObjectsInfo;
FxObjectsInfoCount;
FxPackage::`vftable';
FxPagedLookasideListFromPool::`vftable';
FxPagedObject::`vftable';
FxPkgFdo::`vftable';
FxPkgFdo::m_FdoPnpFunctionTable;
FxPkgFdo::m_FdoPowerFunctionTable;
FxPkgGeneral::`vftable';
FxPkgIo::`vftable';
FxPkgPdo::`vftable';
FxPkgPdo::m_PdoPnpFunctionTable;
FxPkgPdo::m_PdoPowerFunctionTable;
FxPkgPnp::GUID_POWER_THREAD_INTERFACE;
FxPkgPnp::`vftable';
FxPkgPnp::m_DxArmedForWakeNPOtherStates;
FxPkgPnp::m_DxArmedForWakeOtherStates;
FxPkgPnp::m_NotPowerPolOwnerDxStates;
FxPkgPnp::m_NotPowerPolOwnerGotoD0InD0States;
FxPkgPnp::m_NotPowerPolOwnerGotoD0States;
FxPkgPnp::m_NotPowerPolOwnerGotoDxInDxStates;
FxPkgPnp::m_NotPowerPolOwnerGotoDxStates;
FxPkgPnp::m_NotPowerPolOwnerObjectCreatedStates;
FxPkgPnp::m_NotPowerPolOwnerRemovedStates;
FxPkgPnp::m_NotPowerPolOwnerStartingFailedStates;
FxPkgPnp::m_NotPowerPolOwnerStartingStates;
FxPkgPnp::m_NotPowerPolOwnerStartingSucceededStates;
FxPkgPnp::m_NotPowerPolOwnerStoppedStates;
FxPkgPnp::m_NotPowerPolOwnerStoppingPoweringDownStates;
FxPkgPnp::m_NotPowerPolOwnerStoppingPoweringUpStates;
FxPkgPnp::m_NotPowerPolOwnerStoppingWaitForImplicitPowerDownStates;
FxPkgPnp::m_PnpEjectFailedOtherStates;
FxPkgPnp::m_PnpFailedIoStartingOtherStates;
FxPkgPnp::m_PnpFailedPowerDownOtherStates;
FxPkgPnp::m_PnpFailedWaitForRemoveOtherStates;
FxPkgPnp::m_PnpHardwareAvailableOtherStates;
FxPkgPnp::m_PnpInitOtherStates;
FxPkgPnp::m_PnpInitQueryRemoveOtherStates;
FxPkgPnp::m_PnpInitStartingOtherStates;
FxPkgPnp::m_PnpQueriedRemovingOtherStates;
FxPkgPnp::m_PnpQueryRemovePendingOtherStates;
FxPkgPnp::m_PnpQueryStopPendingOtherStates;
FxPkgPnp::m_PnpRemovedPdoWaitOtherStates;
FxPkgPnp::m_PnpRestartHardwareAvailableOtherStates;
FxPkgPnp::m_PnpRestartOtherStates;
FxPkgPnp::m_PnpRestartReleaseHardware;
FxPkgPnp::m_PnpRestartingOtherStates;
FxPkgPnp::m_PnpStartedOtherStates;
FxPkgPnp::m_PnpStartedRemovingOtherStates;
FxPkgPnp::m_PnpStartedStoppingOtherStates;
FxPkgPnp::m_PnpStoppedOtherStates;
FxPkgPnp::m_PnpStoppedWaitForStartCompletionOtherStates;
FxPkgPnp::m_PowerD0ArmedForWakeNPOtherStates;
FxPkgPnp::m_PowerD0ArmedForWakeOtherStates;
FxPkgPnp::m_PowerD0BusWakeOwnerNPOtherStates;
FxPkgPnp::m_PowerD0BusWakeOwnerOtherStates;
FxPkgPnp::m_PowerD0NPOtherStates;
FxPkgPnp::m_PowerD0OtherStates;
FxPkgPnp::m_PowerDNotZeroNPOtherStates;
FxPkgPnp::m_PowerDNotZeroOtherStates;
FxPkgPnp::m_PowerDxStoppedOtherStates;
FxPkgPnp::m_PowerPolCancelUsbSSOtherStates;
FxPkgPnp::m_PowerPolCancelingWakeForSystemSleepOtherStates;
FxPkgPnp::m_PowerPolCancelingWakeForSystemSleepWakeCanceledOtherStates;
FxPkgPnp::m_PowerPolDevicePowerRequestFailedOtherStates;
FxPkgPnp::m_PowerPolDisarmingWakeForSystemSleepCompletePowerUpOtherStates;
FxPkgPnp::m_PowerPolIdleCapableDeviceIdleOtherStates;
FxPkgPnp::m_PowerPolIoPresentArmedOtherStates;
FxPkgPnp::m_PowerPolIoPresentArmedWakeCanceledOtherStates;
FxPkgPnp::m_PowerPolObjectCreatedOtherStates;
FxPkgPnp::m_PowerPolRemovedOtherStates;
FxPkgPnp::m_PowerPolRestartingOtherStates;
FxPkgPnp::m_PowerPolS0NoWakeCompletePowerUpOtherStates;
FxPkgPnp::m_PowerPolS0NoWakePowerUpOtherStates;
FxPkgPnp::m_PowerPolS0WakeCompletePowerUpOtherStates;
FxPkgPnp::m_PowerPolSleepingNoWakeCompletePowerDownOtherStates;
FxPkgPnp::m_PowerPolSleepingNoWakePowerDownOtherStates;
FxPkgPnp::m_PowerPolSleepingSendWakeOtherStates;
FxPkgPnp::m_PowerPolSleepingWakePowerDownFailedOtherStates;
FxPkgPnp::m_PowerPolSleepingWakePowerDownOtherStates;
FxPkgPnp::m_PowerPolSleepingWakeRevertArmWakeNPOtherStates;
FxPkgPnp::m_PowerPolSleepingWakeRevertArmWakeOtherStates;
FxPkgPnp::m_PowerPolSleepingWakeWakeArrivedNPOtherStates;
FxPkgPnp::m_PowerPolSleepingWakeWakeArrivedOtherStates;
FxPkgPnp::m_PowerPolStartedIdleCapableOtherStates;
FxPkgPnp::m_PowerPolStartedOtherStates;
FxPkgPnp::m_PowerPolStartedWaitForIdleTimeoutOtherStates;
FxPkgPnp::m_PowerPolStartedWakeCapableOtherStates;
FxPkgPnp::m_PowerPolStartingOtherStates;
FxPkgPnp::m_PowerPolStoppedOtherStates;
FxPkgPnp::m_PowerPolStoppingCancelWakeOtherStates;
FxPkgPnp::m_PowerPolStoppingD0OtherStates;
FxPkgPnp::m_PowerPolStoppingDisarmWakeCancelWakeOtherStates;
FxPkgPnp::m_PowerPolStoppingDisarmWakeOtherStates;
FxPkgPnp::m_PowerPolStoppingOtherStates;
FxPkgPnp::m_PowerPolStoppingResetDeviceCompletePowerUpOtherStates;
FxPkgPnp::m_PowerPolStoppingResetDeviceOtherStates;
FxPkgPnp::m_PowerPolSystemAsleepWakeArmedNPOtherStates;
FxPkgPnp::m_PowerPolSystemAsleepWakeArmedOtherStates;
FxPkgPnp::m_PowerPolSystemSleepNeedWakeCompletePowerUpOtherStates;
FxPkgPnp::m_PowerPolSystemSleepNeedWakeOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceToD0CompletePowerUpOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceToD0OtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeCompletePowerUpOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeEnabledNPOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeEnabledOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeEnabledWakeCanceledNPOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeEnabledWakeCanceledOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeInterruptFiredNPOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeInterruptFiredOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeTriggeredS0NPOtherStates;
FxPkgPnp::m_PowerPolSystemWakeDeviceWakeTriggeredS0OtherStates;
FxPkgPnp::m_PowerPolTimerExpiredNoWakeCompletePowerDownOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredNoWakeOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapableCancelWakeOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapablePowerDownFailedCancelWakeOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapablePowerDownFailedWakeInterruptArrivedOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapablePowerDownOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapableSendWakeOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapableUsbSSOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapableWakeArrivedOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapableWakeFailedOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapableWakeInterruptArrivedOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCapableWakeSucceededOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCompletedPowerDownOtherStates;
FxPkgPnp::m_PowerPolTimerExpiredWakeCompletedPowerUpOtherStates;
FxPkgPnp::m_PowerPolWaitingArmedOtherStates;
FxPkgPnp::m_PowerPolWaitingArmedWakeInterruptFiredDuringPowerDownOtherStates;
FxPkgPnp::m_PowerPolWaitingArmedWakeInterruptFiredOtherStates;
FxPkgPnp::m_PowerPolWaitingUnarmedOtherStates;
FxPkgPnp::m_PowerPolWakeCapableDeviceIdleOtherStates;
FxPkgPnp::m_PowerPolWokeFromS0OtherStates;
FxPkgPnp::m_PowerStoppedOtherStates;
FxPkgPnp::m_WakePendingNPOtherStates;
FxPkgPnp::m_WakePendingOtherStates;
FxPkgPnp::m_WdfNotPowerPolicyOwnerStates;
FxPkgPnp::m_WdfPnpStates;
FxPkgPnp::m_WdfPowerPolicyStates;
FxPkgPnp::m_WdfPowerStates;
FxPnpDeviceD0Entry::`vftable';
FxPnpDeviceD0Exit::`vftable';
FxPnpDevicePrepareHardware::`vftable';
FxPnpDeviceReleaseHardware::`vftable';
FxPnpDeviceSelfManagedIoCleanup::`vftable';
FxPnpDeviceSelfManagedIoFlush::`vftable';
FxPnpDeviceSelfManagedIoInit::`vftable';
FxPnpDeviceSelfManagedIoRestart::`vftable';
FxPnpDeviceSelfManagedIoSuspend::`vftable';
FxPnpDeviceSurpriseRemoval::`vftable';
FxPowerIdleMachine::m_BusyStates;
FxPowerIdleMachine::m_DisabledStates;
FxPowerIdleMachine::m_DisablingWaitForTimeoutStates;
FxPowerIdleMachine::m_InDxStates;
FxPowerIdleMachine::m_PowerFailedWaitForTimeoutStates;
FxPowerIdleMachine::m_StartedStates;
FxPowerIdleMachine::m_StateTable;
FxPowerIdleMachine::m_StoppedStates;
FxPowerIdleMachine::m_TimedOutStates;
FxPowerIdleMachine::m_TimerRunningStates;
FxPowerIdleMachine::m_WaitForTimeoutStates;
FxRegKey::`vftable';
FxRelatedDevice::`vftable';
FxRelatedDeviceList::`vftable';
FxRequest::`vftable';
FxRequestBase::`vftable';
FxRequestContext::`vftable';
FxRequestFromLookaside::`vftable';
FxRequestMemory::`vftable';
FxRequestOutputBuffer::`vftable';
FxRequestSystemBuffer::`vftable';
FxResourceCm::`vftable';
FxResourceCollection::`vftable';
FxResourceIo::`vftable';
FxSelfManagedIoMachine::m_CreatedStates;
FxSelfManagedIoMachine::m_FailedStates;
FxSelfManagedIoMachine::m_FlushedStates;
FxSelfManagedIoMachine::m_InitFailedStates;
FxSelfManagedIoMachine::m_StartedStates;
FxSelfManagedIoMachine::m_StateTable;
FxSelfManagedIoMachine::m_StoppedStates;
FxSpinLock::`vftable';
FxSpinLockTransactionedList::`vftable';
FxString::`vftable';
FxSyncRequest::`vftable';
FxSystemThread::`vftable';
FxSystemWorkItem::`vftable';
FxTimer::`vftable';
FxTransactionedList::`vftable';
FxUsbDevice::`vftable';
FxUsbDeviceControlContext::`vftable';
FxUsbDeviceStringContext::`vftable';
FxUsbInterface::`vftable';
FxUsbPipe::`vftable';
FxUsbPipeRequestContext::`vftable';
FxUsbPipeTransferContext::`vftable';
FxUsbRequestContext::`vftable';
FxUsbUrb::`vftable';
FxUsbUrbContext::`vftable';
FxUserObject::`vftable';
FxVerifierCallbackOrderTable;
FxVerifierOrderTable;
FxWaitLock::`vftable';
FxWaitLockTransactionedList::`vftable';
FxWakeInterruptMachine::m_D0States;
FxWakeInterruptMachine::m_DxNotArmedForWakeStates;
FxWakeInterruptMachine::m_DxStates;
FxWakeInterruptMachine::m_FailedStates;
FxWakeInterruptMachine::m_StateTable;
FxWakeInterruptMachine::m_WakingStates;
FxWmiInstance::`vftable';
FxWmiInstanceExternal::`vftable';
FxWmiInstanceInternal::`vftable';
FxWmiIrpHandler::`vftable';
FxWmiIrpHandler::m_WmiDispatchTable;
FxWmiProvider::`vftable';
FxWorkItem::`vftable';
GUID_D3COLD_SUPPORT_INTERFACE;
GUID_POWER_DEVICE_ENABLE;
GUID_POWER_DEVICE_WAKE_ENABLE;
GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
GUID_SDEV_IDENTIFIER_INTERFACE;
GUID_SECURE_DRIVER_INTERFACE;
GUID_TARGET_DEVICE_QUERY_REMOVE;
GUID_TARGET_DEVICE_REMOVE_CANCELLED;
GUID_TARGET_DEVICE_REMOVE_COMPLETE;
GUID_USBD_INTERFACE;
GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE;
GUID_USB_CAPABILITY_SELECTIVE_SUSPEND;
GUID_WDF_DSF_INTERFACE;
IoDeviceObjectType;
IoFileObjectType;
KMDF_PERF_PROVIDER;
KMDF_PERF_PROVIDER_Context;
KdDebuggerEnabled;
KdDebuggerNotPresent;
KiBugCheckData;
Microsoft_Windows_DriverFrameworks_KernelMode_PerformanceEnableBits;
Microsoft_Windows_DriverFrameworks_KernelMode_PerformanceKeywords;
Microsoft_Windows_DriverFrameworks_KernelMode_PerformanceLevels;
PfnIoCreateDeviceSecure;
PfnKeGetCurrentProcessorNumberEx;
PfnKeGetProcessorIndexFromNumber;
PfnKeGetProcessorNumberFromIndex;
PfnKeQueryActiveGroupCount;
PfnKeQueryActiveProcessorCountEx;
PfnKeQueryGroupAffinity;
PfnKeQueryMaximumGroupCount;
PfnKeQueryMaximumProcessorCount;
PfnKeQueryMaximumProcessorCountEx;
PfnKeRevertToUserAffinityThreadEx;
PfnKeRevertToUserGroupAffinityThread;
PfnKeSetSystemAffinityThreadEx;
PfnKeSetSystemGroupAffinityThread;
PfnKeSetTargetProcessorDpcEx;
PiRegStateDiscriptor;
PiRegStateSysAllInherittedSecurityDescriptor;
QueryModuleInfoName;
RightsLookup;
SDDL_DEVOBJ_SYS_ALL_ADM_ALL;
SDDL_DEVOBJ_SYS_ALL_ADM_ALL_buffer;
SidLookup;
USB_BUS_INTERFACE_USBDI_GUID;
VfWdfVersion;
WNF_PO_DRIPS_DEVICE_CONSTRAINTS_REGISTERED;
WPP_CxPnpPowerCallbacks_cpp_Traceguids;
WPP_DevicePwrReqStateMachine_cpp_Traceguids;
WPP_EventQueue_cpp_Traceguids;
WPP_FxCallbackLock_hpp_Traceguids;
WPP_FxCallbackMutexLock_hpp_Traceguids;
WPP_FxCallbackSpinLock_hpp_Traceguids;
WPP_FxChildListAPI_cpp_Traceguids;
WPP_FxChildList_cpp_Traceguids;
WPP_FxCollectionApi_cpp_Traceguids;
WPP_FxCommonBufferAPI_cpp_Traceguids;
WPP_FxCommonBuffer_cpp_Traceguids;
WPP_FxCompanionLibrary_cpp_Traceguids;
WPP_FxCompanionTargetApi_cpp_Traceguids;
WPP_FxCompanionTarget_cpp_Traceguids;
WPP_FxCxDeviceInitApi_cpp_Traceguids;
WPP_FxCxDeviceInit_cpp_Traceguids;
WPP_FxDeviceApiKm_cpp_Traceguids;
WPP_FxDeviceApi_cpp_Traceguids;
WPP_FxDeviceBase_cpp_Traceguids;
WPP_FxDeviceControlAPI_cpp_Traceguids;
WPP_FxDeviceFdoAPI_cpp_Traceguids;
WPP_FxDeviceInitApi_cpp_Traceguids;
WPP_FxDeviceInitKm_cpp_Traceguids;
WPP_FxDeviceInit_cpp_Traceguids;
WPP_FxDeviceInterfaceAPI_cpp_Traceguids;
WPP_FxDeviceKm_cpp_Traceguids;
WPP_FxDevicePdoAPI_cpp_Traceguids;
WPP_FxDevice_cpp_Traceguids;
WPP_FxDisposeList_cpp_Traceguids;
WPP_FxDmaEnablerAPI_cpp_Traceguids;
WPP_FxDmaEnabler_cpp_Traceguids;
WPP_FxDmaTransactionAPI_cpp_Traceguids;
WPP_FxDmaTransactionBase_cpp_Traceguids;
WPP_FxDmaTransactionPacket_cpp_Traceguids;
WPP_FxDmaTransactionPacket_hpp_Traceguids;
WPP_FxDmaTransactionScatterGather_cpp_Traceguids;
WPP_FxDmaTransactionSystem_cpp_Traceguids;
WPP_FxDmaTransactionSystem_hpp_Traceguids;
WPP_FxDpcApi_cpp_Traceguids;
WPP_FxDpc_cpp_Traceguids;
WPP_FxDriverApiKm_cpp_Traceguids;
WPP_FxDriverApi_cpp_Traceguids;
WPP_FxDriverKm_cpp_Traceguids;
WPP_FxDriver_cpp_Traceguids;
WPP_FxFileObjectKm_cpp_Traceguids;
WPP_FxFileObject_cpp_Traceguids;
WPP_FxInterruptApi_cpp_Traceguids;
WPP_FxIoQueueApi_cpp_Traceguids;
WPP_FxIoQueueKm_cpp_Traceguids;
WPP_FxIoQueue_cpp_Traceguids;
WPP_FxIoTargetAPIKm_cpp_Traceguids;
WPP_FxIoTargetAPI_cpp_Traceguids;
WPP_FxIoTargetKm_cpp_Traceguids;
WPP_FxIoTargetRemote_cpp_Traceguids;
WPP_FxIoTargetRemotekm_cpp_Traceguids;
WPP_FxIoTargetSelf_cpp_Traceguids;
WPP_FxIoTarget_cpp_Traceguids;
WPP_FxIrpQueue_cpp_Traceguids;
WPP_FxLookasideListAPI_cpp_Traceguids;
WPP_FxMemoryBufferApi_cpp_Traceguids;
WPP_FxMemoryBufferPreallocatedAPI_cpp_Traceguids;
WPP_FxMemoryObject_cpp_Traceguids;
WPP_FxObjectAPI_cpp_Traceguids;
WPP_FxObject_cpp_Traceguids;
WPP_FxObject_hpp_Traceguids;
WPP_FxPkgFdoKm_cpp_Traceguids;
WPP_FxPkgGeneral_cpp_Traceguids;
WPP_FxPkgIo_cpp_Traceguids;
WPP_FxPkgPdoKM_cpp_Traceguids;
WPP_FxPkgPdo_cpp_Traceguids;
WPP_FxPkgPnpKM_cpp_Traceguids;
WPP_FxPkgPnp_cpp_Traceguids;
WPP_FxPoolInlines_hpp_Traceguids;
WPP_FxQueryInterfaceAPI_cpp_Traceguids;
WPP_FxRegKey_cpp_Traceguids;
WPP_FxRegistryAPI_cpp_Traceguids;
WPP_FxRequestApi_cpp_Traceguids;
WPP_FxRequestBase_cpp_Traceguids;
WPP_FxRequestBufferKm_cpp_Traceguids;
WPP_FxRequestBuffer_cpp_Traceguids;
WPP_FxRequestKm_cpp_Traceguids;
WPP_FxRequestValidateFunctions_hpp_Traceguids;
WPP_FxRequest_cpp_Traceguids;
WPP_FxRequest_hpp_Traceguids;
WPP_FxResourceAPI_cpp_Traceguids;
WPP_FxResourceCollection_cpp_Traceguids;
WPP_FxResource_hpp_Traceguids;
WPP_FxSpinLockAPI_cpp_Traceguids;
WPP_FxSpinLock_cpp_Traceguids;
WPP_FxStringAPI_cpp_Traceguids;
WPP_FxSyncRequest_cpp_Traceguids;
WPP_FxSystemThread_cpp_Traceguids;
WPP_FxSystemWorkitem_cpp_Traceguids;
WPP_FxTagTracker_hpp_Traceguids;
WPP_FxTelemetryKm_cpp_Traceguids;
WPP_FxTimerApi_cpp_Traceguids;
WPP_FxTimer_cpp_Traceguids;
WPP_FxUsbDeviceAPI_cpp_Traceguids;
WPP_FxUsbDeviceApiKm_cpp_Traceguids;
WPP_FxUsbDevice_cpp_Traceguids;
WPP_FxUsbInterfaceAPI_cpp_Traceguids;
WPP_FxUsbInterface_cpp_Traceguids;
WPP_FxUsbPipeAPI_cpp_Traceguids;
WPP_FxUsbPipeKm_cpp_Traceguids;
WPP_FxUsbPipe_cpp_Traceguids;
WPP_FxUserObjectApi_cpp_Traceguids;
WPP_FxUserObject_cpp_Traceguids;
WPP_FxValidateFunctions_cpp_Traceguids;
WPP_FxValidateFunctions_hpp_Traceguids;
WPP_FxVerifierBugcheck_cpp_Traceguids;
WPP_FxVerifierLock_cpp_Traceguids;
WPP_FxVerifierLock_hpp_Traceguids;
WPP_FxWaitLock_cpp_Traceguids;
WPP_FxWmiAPI_cpp_Traceguids;
WPP_FxWmiInstance_cpp_Traceguids;
WPP_FxWmiIrpHandler_cpp_Traceguids;
WPP_FxWmiProvider_cpp_Traceguids;
WPP_FxWorkItemApi_cpp_Traceguids;
WPP_FxWorkItem_cpp_Traceguids;
WPP_FxusbDeviceKm_cpp_Traceguids;
WPP_GLOBAL_WDF_Control;
WPP_GlobalsKm_cpp_Traceguids;
WPP_HandleAPI_cpp_Traceguids;
WPP_InterruptObjectKm_cpp_Traceguids;
WPP_InterruptObject_cpp_Traceguids;
WPP_NotPowerPolicyOwnerStateMachine_cpp_Traceguids;
WPP_PdoPower_cpp_Traceguids;
WPP_PnPCallbacksKm_cpp_Traceguids;
WPP_PnpCallbacks_cpp_Traceguids;
WPP_PnpStateMachine_cpp_Traceguids;
WPP_PowerIdleStateMachine_cpp_Traceguids;
WPP_PowerPolicyStateMachineKM_cpp_Traceguids;
WPP_PowerPolicyStateMachine_cpp_Traceguids;
WPP_PowerStateMachine_cpp_Traceguids;
WPP_PoxInterfaceKm_cpp_Traceguids;
WPP_PoxInterface_cpp_Traceguids;
WPP_SelfManagedIoStateMachine_cpp_Traceguids;
WPP_ThisDir_CTLGUID_KmdfTraceGuid;
WPP_TracingIfrReplay_cpp_Traceguids;
WPP_VerifierAPI_cpp_Traceguids;
WPP_Verifier_cpp_Traceguids;
WPP_WakeInterruptStateMachine_cpp_Traceguids;
WPP_WdfpoolKm_cpp_Traceguids;
WPP_fdopower_cpp_Traceguids;
WPP_fxpkgfdo_cpp_Traceguids;
WPP_fxtagtracker_cpp_Traceguids;
WPP_fxverifier_h_Traceguids;
WPP_globals_cpp_Traceguids;
WPP_stringutil_cpp_Traceguids;
WPP_supportKM_cpp_Traceguids;
WPP_tracing_cpp_Traceguids;
WPP_usbutil_cpp_Traceguids;
WPP_wdfpool_cpp_Traceguids;
WdfDumpGuid;
WdfDumpGuid2;
WdfLdrDbgPrintOn;
WdfLibraryInfo;
WdfTraceGuid;
WdfVersion;
WdmlibInitialized;
WdmlibProcgrpInitState;
_IMPORT_DESCRIPTOR_SleepStudyHelper;
_IMPORT_DESCRIPTOR_WDFLDR;
_IMPORT_DESCRIPTOR_ntoskrnl;
_NULL_IMPORT_DESCRIPTOR;
_Tlgg_TelemetryProviderProv;
_Tlgg_TelemetryProviderProv_Meta;
_TraceLoggingMetadata;
_TraceLoggingMetadataEnd;
_WDF_VF_WDFDEVICECREATE_CONTEXT_TYPE_INFO;
_WDF_VF_WDFIOQUEUECREATE_CONTEXT_TYPE_INFO;
_WdfContextTriageInfo;
_WdfContextTypeTriageInfo;
_WdfDeviceTriageInfo;
_WdfFwdProgressTriageInfo;
_WdfIrpQueueTriageInfo;
_WdfIrpTriageInfo;
_WdfObjectTriageInfo;
_WdfQueueTriageInfo;
_WdfRequestTriageInfo;
__PchSym_;
__dynamic_value_reloc_table;
__enable_percent_n;
__guard_check_icall_fptr;
__guard_dispatch_icall_fptr;
__guard_fids_table;
__guard_iat_table;
__imp_KeNumberProcessors;
__imp_SeExports;
__lookuptable;
__mb_cur_max;
__security_cookie;
__security_cookie_complement;
_guard_dispatch_icall_nop;
_imp_DbgBreakPoint;
_imp_DbgPrint;
_imp_DbgPrintEx;
_imp_EtwActivityIdControl;
_imp_EtwRegister;
_imp_EtwUnregister;
_imp_EtwWriteTransfer;
_imp_ExAcquireFastMutex;
_imp_ExAcquireFastMutexUnsafe;
_imp_ExAllocatePoolWithQuotaTag;
_imp_ExAllocatePoolWithTag;
_imp_ExAllocateTimer;
_imp_ExCancelTimer;
_imp_ExCreateCallback;
_imp_ExDeleteNPagedLookasideList;
_imp_ExDeletePagedLookasideList;
_imp_ExDeleteTimer;
_imp_ExFreePoolWithTag;
_imp_ExInitializeNPagedLookasideList;
_imp_ExInitializePagedLookasideList;
_imp_ExQueryDepthSList;
_imp_ExQueryWnfStateData;
_imp_ExRegisterCallback;
_imp_ExReleaseFastMutex;
_imp_ExReleaseFastMutexUnsafe;
_imp_ExSetTimer;
_imp_ExSubscribeWnfStateChange;
_imp_ExUnregisterCallback;
_imp_ExUnsubscribeWnfStateChange;
_imp_ExUuidCreate;
_imp_ExpInterlockedPopEntrySList;
_imp_ExpInterlockedPushEntrySList;
_imp_IoAcquireRemoveLockEx;
_imp_IoAllocateDriverObjectExtension;
_imp_IoAllocateErrorLogEntry;
_imp_IoAllocateIrp;
_imp_IoAllocateMdl;
_imp_IoAllocateWorkItem;
_imp_IoAttachDeviceToDeviceStack;
_imp_IoBuildDeviceIoControlRequest;
_imp_IoBuildPartialMdl;
_imp_IoCancelIrp;
_imp_IoCreateDevice;
_imp_IoCreateSymbolicLink;
_imp_IoDeleteDevice;
_imp_IoDeleteSymbolicLink;
_imp_IoDetachDevice;
_imp_IoFreeIrp;
_imp_IoFreeMdl;
_imp_IoFreeWorkItem;
_imp_IoGetActivityIdIrp;
_imp_IoGetAttachedDeviceReference;
_imp_IoGetDeviceObjectPointer;
_imp_IoGetDeviceProperty;
_imp_IoGetDevicePropertyData;
_imp_IoGetDmaAdapter;
_imp_IoGetDriverObjectExtension;
_imp_IoGetInitiatorProcess;
_imp_IoGetRelatedDeviceObject;
_imp_IoGetRequestorProcessId;
_imp_IoGetStackLimits;
_imp_IoInitializeRemoveLockEx;
_imp_IoInvalidateDeviceRelations;
_imp_IoInvalidateDeviceState;
_imp_IoIs32bitProcess;
_imp_IoIsWdmVersionAvailable;
_imp_IoOpenDeviceRegistryKey;
_imp_IoOpenDriverRegistryKey;
_imp_IoQueueWorkItem;
_imp_IoRegisterDeviceInterface;
_imp_IoRegisterLastChanceShutdownNotification;
_imp_IoRegisterPlugPlayNotification;
_imp_IoRegisterShutdownNotification;
_imp_IoReleaseCancelSpinLock;
_imp_IoReleaseRemoveLockAndWaitEx;
_imp_IoReleaseRemoveLockEx;
_imp_IoRequestDeviceEject;
_imp_IoReuseIrp;
_imp_IoSetActivityIdIrp;
_imp_IoSetCompletionRoutineEx;
_imp_IoSetDeviceInterfaceState;
_imp_IoSetDevicePropertyData;
_imp_IoUnregisterPlugPlayNotification;
_imp_IoUnregisterShutdownNotification;
_imp_IoWMIDeviceObjectToProviderId;
_imp_IoWMIRegistrationControl;
_imp_IoWMIWriteEvent;
_imp_IoWriteErrorLogEntry;
_imp_IofCallDriver;
_imp_IofCompleteRequest;
_imp_KdRefreshDebuggerNotPresent;
_imp_KeAcquireInterruptSpinLock;
_imp_KeAcquireSpinLockAtDpcLevel;
_imp_KeAcquireSpinLockRaiseToDpc;
_imp_KeAreApcsDisabled;
_imp_KeBugCheckEx;
_imp_KeCancelTimer;
_imp_KeClearEvent;
_imp_KeDelayExecutionThread;
_imp_KeEnterCriticalRegion;
_imp_KeFlushQueuedDpcs;
_imp_KeInitializeDpc;
_imp_KeInitializeEvent;
_imp_KeInitializeTimerEx;
_imp_KeInsertQueueDpc;
_imp_KeLeaveCriticalRegion;
_imp_KeLowerIrql;
_imp_KeQueryActiveProcessors;
_imp_KeQueryTimeIncrement;
_imp_KeReadStateEvent;
_imp_KeReleaseInterruptSpinLock;
_imp_KeReleaseSpinLock;
_imp_KeReleaseSpinLockFromDpcLevel;
_imp_KeRemoveQueueDpc;
_imp_KeRevertToUserAffinityThread;
_imp_KeSetCoalescableTimer;
_imp_KeSetEvent;
_imp_KeSetSystemAffinityThread;
_imp_KeSetTargetProcessorDpc;
_imp_KeSynchronizeExecution;
_imp_KeWaitForSingleObject;
_imp_KfRaiseIrql;
_imp_MmBuildMdlForNonPagedPool;
_imp_MmGetSystemRoutineAddress;
_imp_MmIsDriverVerifying;
_imp_MmLockPagableDataSection;
_imp_MmLockPagableSectionByHandle;
_imp_MmMapLockedPagesSpecifyCache;
_imp_MmProbeAndLockPages;
_imp_MmSizeOfMdl;
_imp_MmUnlockPagableImageSection;
_imp_MmUnlockPages;
_imp_MmUnmapLockedPages;
_imp_ObOpenObjectByPointer;
_imp_ObReferenceObjectByHandle;
_imp_ObfDereferenceObject;
_imp_ObfReferenceObject;
_imp_PoCallDriver;
_imp_PoFxActivateComponent;
_imp_PoFxCompleteDevicePowerNotRequired;
_imp_PoFxCompleteIdleCondition;
_imp_PoFxCompleteIdleState;
_imp_PoFxIdleComponent;
_imp_PoFxRegisterDevice;
_imp_PoFxReportDevicePoweredOn;
_imp_PoFxSetDeviceIdleTimeout;
_imp_PoFxStartDevicePowerManagement;
_imp_PoFxUnregisterDevice;
_imp_PoGetSystemWake;
_imp_PoRequestPowerIrp;
_imp_PoSetPowerState;
_imp_PoSetSystemWake;
_imp_PoStartNextPowerIrp;
_imp_PsCreateSystemThread;
_imp_PsGetProcessId;
_imp_PsGetVersion;
_imp_PsTerminateSystemThread;
_imp_RtlAbsoluteToSelfRelativeSD;
_imp_RtlAddAccessAllowedAce;
_imp_RtlAnsiCharToUnicodeChar;
_imp_RtlAnsiStringToUnicodeString;
_imp_RtlAppendUnicodeStringToString;
_imp_RtlAppendUnicodeToString;
_imp_RtlCaptureStackBackTrace;
_imp_RtlCompareMemory;
_imp_RtlCompareUnicodeString;
_imp_RtlCopyUnicodeString;
_imp_RtlCreateSecurityDescriptor;
_imp_RtlFreeUnicodeString;
_imp_RtlGetDaclSecurityDescriptor;
_imp_RtlGetGroupSecurityDescriptor;
_imp_RtlGetOwnerSecurityDescriptor;
_imp_RtlGetSaclSecurityDescriptor;
_imp_RtlGetVersion;
_imp_RtlInitAnsiString;
_imp_RtlInitUnicodeString;
_imp_RtlLengthSecurityDescriptor;
_imp_RtlLengthSid;
_imp_RtlQueryRegistryValues;
_imp_RtlSetDaclSecurityDescriptor;
_imp_RtlUnicodeStringToAnsiString;
_imp_SeCaptureSecurityDescriptor;
_imp_SleepstudyHelper_AcquireComponentLock;
_imp_SleepstudyHelper_ComponentActive;
_imp_SleepstudyHelper_ComponentActiveLocked;
_imp_SleepstudyHelper_ComponentInactive;
_imp_SleepstudyHelper_GenerateGuid;
_imp_SleepstudyHelper_GetPdoFriendlyName;
_imp_SleepstudyHelper_Initialize;
_imp_SleepstudyHelper_RegisterComponentEx;
_imp_SleepstudyHelper_ReleaseComponentLock;
_imp_SleepstudyHelper_ResetComponentsStartTime;
_imp_SleepstudyHelper_Uninitialize;
_imp_SleepstudyHelper_UnregisterComponent;
_imp_WdfLdrDiagnosticsValueByNameAsULONG;
_imp_WdfRegisterLibrary;
_imp_WmiQueryTraceInformation;
_imp_WmiTraceMessageVa;
_imp_ZwClose;
_imp_ZwCreateFile;
_imp_ZwCreateKey;
_imp_ZwDeleteKey;
_imp_ZwDeleteValueKey;
_imp_ZwLoadDriver;
_imp_ZwOpenKey;
_imp_ZwPowerInformation;
_imp_ZwQuerySystemInformation;
_imp_ZwQueryValueKey;
_imp_ZwSetSecurityObject;
_imp_ZwSetValueKey;
_imp___C_specific_handler;
_imp__purecall;
_imp__snwprintf;
_imp__stricmp;
_imp__wcsnicmp;
_imp_strcmp;
_imp_strncmp;
_imp_wcschr;
_imp_wcscmp;
_load_config_used;
_xmm;
`FxUsbPipe::_UsbdPipeTypeToWdf'::`2'::types;
`TraceLoggingSetInformation'::`2'::strEtwSetInformation;
gOsVersion;
g_EnableDbgPrints;
g_NonPagedPoolInitialized;
g_NonPagedPoolType;
g_WdfTriageInfo;
gbl_errno;
SleepStudyHelper_NULL_THUNK_DATA;
WDFLDR_NULL_THUNK_DATA;
ntoskrnl_NULL_THUNK_DATA;

AddEventHooksWdfDeviceCreate();
AddEventHooksWdfIoQueueCreate();
AllocAndInitializeTelemetryContext();
AuxKlibInitialize();
AuxKlibQueryModuleInformation();
AuxKlibQueryModuleInformation$filt$0();
CUmdfSvcConfig::GetSecureSoftwareDeviceTag();
CUmdfSvcConfig::IsCompanionSecure();
CUmdfSvcConfig::OpenKeyHelper();
CUmdfSvcConfig::OpenServiceKey();
CUmdfSvcConfig::_QueryULong();
CmRegUtilCreateUcKey();
CmRegUtilCreateWstrKey();
CmRegUtilOpenExistingUcKey();
CmRegUtilOpenExistingWstrKey();
CmRegUtilUcValueGetDword();
CmRegUtilUcValueGetFullBuffer();
CmRegUtilUcValueSetUcString();
CmRegUtilWstrValueGetDword();
CmRegUtilWstrValueSetFullBuffer();
CmRegUtilWstrValueSetWstrString();
CmpRegUtilAllocateUnicodeString();
DispatchWorker();
DriverEntry();
DriverUnload();
FX_TRACK_DRIVER();
FindObjectForGivenLocale();
FxAllocateDriverGlobals();
FxAllocateFromNPagedLookasideList();
FxAutoRegKey::~FxAutoRegKey();
FxAutoString::~FxAutoString();
FxCREvent::FxCREvent();
FxCacheBugCheckDriverInfo();
FxCalculateObjectTotalSize();
FxCalculateObjectTotalSize2();
FxCalculateTotalMultiSzStringSize();
FxCalculateTotalStringSize();
FxCallbackLock::CheckOwnership();
FxCallbackLock::`scalar deleting destructor'();
FxCallbackMutexLock::FxCallbackMutexLock();
FxCallbackMutexLock::Initialize();
FxCallbackMutexLock::IsOwner();
FxCallbackMutexLock::Lock();
FxCallbackMutexLock::Unlock();
FxCallbackMutexLock::`scalar deleting destructor'();
FxCallbackMutexLock::~FxCallbackMutexLock();
FxCallbackSpinLock::Initialize();
FxCallbackSpinLock::IsOwner();
FxCallbackSpinLock::Lock();
FxCallbackSpinLock::Unlock();
FxCallbackSpinLock::`scalar deleting destructor'();
FxCallbackSpinLock::~FxCallbackSpinLock();
FxChildList::Add();
FxChildList::BeginIteration();
FxChildList::BeginScan();
FxChildList::CloneEntryLocked();
FxChildList::CompareId();
FxChildList::CopyAddress();
FxChildList::CopyId();
FxChildList::CreateDevice();
FxChildList::Dispose();
FxChildList::DrainFreeListHead();
FxChildList::DuplicateAddress();
FxChildList::DuplicateId();
FxChildList::EndIteration();
FxChildList::EndScan();
FxChildList::FxChildList();
FxChildList::GetAddressDescription();
FxChildList::GetAddressDescriptionFromEntry();
FxChildList::GetDeviceFromId();
FxChildList::GetNextDevice();
FxChildList::GetNextStaticDevice();
FxChildList::IndicateWakeStatus();
FxChildList::Initialize();
FxChildList::InvokeReportedMissingCallback();
FxChildList::MarkDescriptionNotPresentWorker();
FxChildList::MarkModificationNotPresentWorker();
FxChildList::NotifyDeviceRemove();
FxChildList::NotifyDeviceSurpriseRemove();
FxChildList::PostParentToD0();
FxChildList::ProcessBusRelations();
FxChildList::ProcessModificationsLocked();
FxChildList::ReenumerateEntry();
FxChildList::ReenumerateEntryLocked();
FxChildList::SearchBackwardsForMatchingDescriptionLocked();
FxChildList::SearchBackwardsForMatchingModificationLocked();
FxChildList::UpdateAddressDescriptionFromEntry();
FxChildList::UpdateAllAsPresent();
FxChildList::UpdateAsMissing();
FxChildList::UpdateDeviceAsMissing();
FxChildList::_ComputeTotalDescriptionSize();
FxChildList::_CreateAndInit();
FxChildList::_ValidateConfig();
FxChildList::`scalar deleting destructor'();
FxCmResList::BuildFromWdmList();
FxCmResList::CreateWdmList();
FxCmResList::_CreateAndInit();
FxCmResList::`scalar deleting destructor'();
FxCmResourceListInsertDescriptor();
FxCollection::`scalar deleting destructor'();
FxCollection::~FxCollection();
FxCollectionInternal::Add();
FxCollectionInternal::AllocateEntry();
FxCollectionInternal::CleanupEntry();
FxCollectionInternal::Clear();
FxCollectionInternal::FindEntry();
FxCollectionInternal::Remove();
FxCollectionInternal::RemoveEntry();
FxCommonBuffer::AllocateCommonBuffer();
FxCommonBuffer::Dispose();
FxCommonBuffer::FxCommonBuffer();
FxCommonBuffer::`scalar deleting destructor'();
FxCompanionLibrary::CloseCompanionLibraryInterface();
FxCompanionLibrary::IsCompanionRequiredForDevice();
FxCompanionLibrary::LoadCompanion();
FxCompanionLibrary::LoadReflectorServiceAndOpenInterfaceLocked();
FxCompanionLibrary::OpenCompanionLibraryInterface();
FxCompanionLibrary::_CreateAndInitialize();
FxCompanionTarget::DecrementPendingTaskCount();
FxCompanionTarget::Dispose();
FxCompanionTarget::FxCompanionTarget();
FxCompanionTarget::HandleQueryInterfaceForSecureDriver();
FxCompanionTarget::IncrementPendingTaskCountWithFloor();
FxCompanionTarget::InvalidateDeviceStateAndReportFailed();
FxCompanionTarget::NotifyPrePrepareHardware();
FxCompanionTarget::QuerySecureDeviceToken();
FxCompanionTarget::SendTaskSynchronously();
FxCompanionTarget::`scalar deleting destructor'();
FxContextHeaderInit();
FxCopyMultiSz();
FxCxPnpPowerCallbackContext::IsCallbackPresent();
FxDefaultIrpHandler::Dispatch();
FxDefaultIrpHandler::`scalar deleting destructor'();
FxDestroy();
FxDevice::AddChildList();
FxDevice::AddDmaEnabler();
FxDevice::AddIoTarget();
FxDevice::AllocateCompanionTarget();
FxDevice::AllocateDmaEnablerList();
FxDevice::AllocateEnumInfo();
FxDevice::AllocateRequestMemory();
FxDevice::AssignProperty();
FxDevice::ConfigureAutoForwardCleanupClose();
FxDevice::ControlDeviceInitialize();
FxDevice::CreateDevice();
FxDevice::CreateSymbolicLink();
FxDevice::DeleteDeviceFromFailedCreate();
FxDevice::DeleteDeviceFromFailedCreateNoDelete();
FxDevice::DeleteObject();
FxDevice::DeleteSymbolicLink();
FxDevice::Destroy();
FxDevice::DispatchPreprocessedIrp();
FxDevice::DispatchWithLock();
FxDevice::Dispose();
FxDevice::FdoInitialize();
FxDevice::FxDevice();
FxDevice::GetDefaultIoTarget();
FxDevice::GetDispatchPackage();
FxDevice::GetSafePhysicalDevice();
FxDevice::Initialize();
FxDevice::InstallPackage();
FxDevice::IsCxUsingSelfManagedIo();
FxDevice::IsPdo();
FxDevice::OpenDevicemapKeyWorker();
FxDevice::OpenSettingsKey();
FxDevice::PdoInitialize();
FxDevice::QueryInterface();
FxDevice::RemoveChildList();
FxDevice::RemoveDmaEnabler();
FxDevice::RemoveIoTarget();
FxDevice::SetDeviceTelemetryInfoFlags();
FxDevice::SetFilter();
FxDevice::SetFilterIoType();
FxDevice::SetInitialState();
FxDevice::_AllocAndQueryProperty();
FxDevice::_AllocAndQueryPropertyEx();
FxDevice::_CompletionRoutineForRemlockMaintenance();
FxDevice::_Create();
FxDevice::_InterfaceDereferenceNoOp();
FxDevice::_InterfaceReferenceNoOp();
FxDevice::_OpenKey();
FxDevice::_QueryProperty();
FxDevice::_QueryPropertyEx();
FxDevice::_RequiresRemLock();
FxDevice::_ValidateOpenKeyParams();
FxDevice::`scalar deleting destructor'();
FxDevice::~FxDevice();
FxDeviceBase::AddChildList();
FxDeviceBase::AddDmaEnabler();
FxDeviceBase::AddIoTarget();
FxDeviceBase::AllocateDmaEnablerList();
FxDeviceBase::AllocateEnumInfo();
FxDeviceBase::AllocateTarget();
FxDeviceBase::ConfigureConstraints();
FxDeviceBase::FxDeviceBase();
FxDeviceBase::GetCallbackLockPtr();
FxDeviceBase::GetConstraints();
FxDeviceBase::GetDefaultIoTarget();
FxDeviceBase::QueryForInterface();
FxDeviceBase::QueryInterface();
FxDeviceBase::RemoveChildList();
FxDeviceBase::RemoveDmaEnabler();
FxDeviceBase::RemoveIoTarget();
FxDeviceBase::SetDeviceTelemetryInfoFlags();
FxDeviceBase::_SearchForDevice();
FxDeviceBase::`scalar deleting destructor'();
FxDeviceBase::~FxDeviceBase();
FxDeviceDescriptionEntry::Clone();
FxDeviceDescriptionEntry::DeviceSurpriseRemoved();
FxDeviceDescriptionEntry::FxDeviceDescriptionEntry();
FxDeviceDescriptionEntry::IsDeviceRemoved();
FxDeviceDescriptionEntry::IsDeviceReportedMissing();
FxDeviceDescriptionEntry::MatchStateToFlags();
FxDeviceDescriptionEntry::ProcessDeviceRemoved();
FxDeviceDescriptionEntry::operator new();
FxDeviceInterface::Register();
FxDeviceInterface::`scalar deleting destructor'();
FxDevicePwrRequirementMachine::FxDevicePwrRequirementMachine();
FxDevicePwrRequirementMachine::PowerNotRequiredD0();
FxDevicePwrRequirementMachine::PowerRequiredDx();
FxDevicePwrRequirementMachine::ProcessEvent();
FxDevicePwrRequirementMachine::ProcessEventInner();
FxDevicePwrRequirementMachine::ReportingDevicePowerAvailable();
FxDevicePwrRequirementMachine::_ProcessEventInner();
FxDevicePwrRequirementMachine::`scalar deleting destructor'();
FxDeviceText::_CleanupList();
FxDeviceText::`scalar deleting destructor'();
FxDisposeList::Add();
FxDisposeList::Dispose();
FxDisposeList::DrainListLocked();
FxDisposeList::FxDisposeList();
FxDisposeList::Initialize();
FxDisposeList::WaitForEmpty();
FxDisposeList::_Create();
FxDisposeList::_WorkItemThunk();
FxDisposeList::`scalar deleting destructor'();
FxDmaEnabler::AllocateCommonBuffer();
FxDmaEnabler::ConfigureBusMasterAdapters();
FxDmaEnabler::ConfigureDmaAdapter();
FxDmaEnabler::ConfigureSystemAdapter();
FxDmaEnabler::Dispose();
FxDmaEnabler::FreeResources();
FxDmaEnabler::FxDmaEnabler();
FxDmaEnabler::GetDmaDescription();
FxDmaEnabler::Initialize();
FxDmaEnabler::InitializeResources();
FxDmaEnabler::InitializeTransferContext();
FxDmaEnabler::PowerDown();
FxDmaEnabler::PowerUp();
FxDmaEnabler::ReleaseResources();
FxDmaEnabler::SupportsChainedMdls();
FxDmaEnabler::`scalar deleting destructor'();
FxDmaPacketTransaction::AllocateAdapterChannel();
FxDmaPacketTransaction::CallEvtDmaCompleted();
FxDmaPacketTransaction::FreeMapRegistersAndAdapter();
FxDmaPacketTransaction::FxDmaPacketTransaction();
FxDmaPacketTransaction::GetAdapterControlReturnValue();
FxDmaPacketTransaction::GetNumberOfAvailableMapRegisters();
FxDmaPacketTransaction::GetSgListBufferSize();
FxDmaPacketTransaction::GetTransferCompletionRoutine();
FxDmaPacketTransaction::InitializeResources();
FxDmaPacketTransaction::PreMapTransfer();
FxDmaPacketTransaction::ReleaseAdapter();
FxDmaPacketTransaction::ReleaseResources();
FxDmaPacketTransaction::ReserveAdapter();
FxDmaPacketTransaction::Reuse();
FxDmaPacketTransaction::SetNewSgListBuffer();
FxDmaPacketTransaction::StageTransfer();
FxDmaPacketTransaction::StartTransfer();
FxDmaPacketTransaction::TransferCompleted();
FxDmaPacketTransaction::_AdapterControl();
FxDmaPacketTransaction::_Create();
FxDmaPacketTransaction::`scalar deleting destructor'();
FxDmaScatterGatherTransaction::BuildScatterGatherList();
FxDmaScatterGatherTransaction::Dispose();
FxDmaScatterGatherTransaction::FreeSgListBuffer();
FxDmaScatterGatherTransaction::FxDmaScatterGatherTransaction();
FxDmaScatterGatherTransaction::GetNumberOfAvailableMapRegisters();
FxDmaScatterGatherTransaction::GetScatterGatherList();
FxDmaScatterGatherTransaction::GetSgListBufferSize();
FxDmaScatterGatherTransaction::InitializeResources();
FxDmaScatterGatherTransaction::PutScatterGatherList();
FxDmaScatterGatherTransaction::ReleaseResources();
FxDmaScatterGatherTransaction::SetNewSgListBuffer();
FxDmaScatterGatherTransaction::StageTransfer();
FxDmaScatterGatherTransaction::StartTransfer();
FxDmaScatterGatherTransaction::TransferCompleted();
FxDmaScatterGatherTransaction::_AdapterListControl();
FxDmaScatterGatherTransaction::_Create();
FxDmaScatterGatherTransaction::`scalar deleting destructor'();
FxDmaSystemTransaction::CallEvtDmaCompleted();
FxDmaSystemTransaction::CancelMappedTransfer();
FxDmaSystemTransaction::FreeMapRegistersAndAdapter();
FxDmaSystemTransaction::GetAdapterControlReturnValue();
FxDmaSystemTransaction::GetSgListBufferSize();
FxDmaSystemTransaction::GetTransferCompletionRoutine();
FxDmaSystemTransaction::PreMapTransfer();
FxDmaSystemTransaction::Reuse();
FxDmaSystemTransaction::SetNewSgListBuffer();
FxDmaSystemTransaction::StopTransfer();
FxDmaSystemTransaction::_Create();
FxDmaSystemTransaction::_SystemDmaCompletion();
FxDmaSystemTransaction::`scalar deleting destructor'();
FxDmaTransactionBase::CancelResourceAllocation();
FxDmaTransactionBase::Dispose();
FxDmaTransactionBase::DmaCompleted();
FxDmaTransactionBase::Execute();
FxDmaTransactionBase::FxDmaTransactionBase();
FxDmaTransactionBase::GetTransferInfo();
FxDmaTransactionBase::Initialize();
FxDmaTransactionBase::PrepareForSingleTransfer();
FxDmaTransactionBase::ReleaseForReuse();
FxDmaTransactionBase::Reset();
FxDmaTransactionBase::Reuse();
FxDmaTransactionBase::SetImmediateExecution();
FxDmaTransactionBase::_CalculateRequiredMapRegisters();
FxDmaTransactionBase::_ComputeNextTransferAddress();
FxDmaTransactionBase::`scalar deleting destructor'();
FxDmaTransactionProgramOrReserveDma::InvokeProgramDma();
FxDpc::Dispose();
FxDpc::FxDpc();
FxDpc::FxDpcThunk();
FxDpc::Initialize();
FxDpc::_Create();
FxDpc::`scalar deleting destructor'();
FxDpc::~FxDpc();
FxDriver::AddDevice();
FxDriver::AllocateDriverObjectExtensionAndStoreFxDriver();
FxDriver::ConfigureConstraints();
FxDriver::DeleteObject();
FxDriver::Dispose();
FxDriver::FxDriver();
FxDriver::GetCallbackLockPtr();
FxDriver::GetConstraints();
FxDriver::GetFxDriver();
FxDriver::Initialize();
FxDriver::QueryInterface();
FxDriver::Unload();
FxDriver::_InitializeDriverName();
FxDriver::_InitializeTag();
FxDriver::`scalar deleting destructor'();
FxDriver::~FxDriver();
FxDriverGlobalsInitializeDebugExtension();
FxDuplicateUnicodeString();
FxDuplicateUnicodeStringToString();
FxEnumerationInfo::`scalar deleting destructor'();
FxEventQueue::EventQueueWorker();
FxEventQueue::FxEventQueue();
FxEventQueue::GetFinishedState();
FxEventQueue::Initialize();
FxEventQueue::QueueToThreadWorker();
FxEventQueue::SetDelayedDeletion();
FxEventQueue::SetFinished();
FxFileObject::GetCallbackLockPtr();
FxFileObject::GetConstraints();
FxFileObject::QueryInterface();
FxFileObject::_DestroyFileObject();
FxFileObject::_GetFileObjectFromWdm();
FxFileObject::`scalar deleting destructor'();
FxFileObjectInfo::FxFileObjectInfo();
FxFilteredStartContext::`scalar deleting destructor'();
FxFormatUrbRequest();
FxFormatUsbRequest();
FxFreeDriverGlobals();
FxFreeToNPagedLookasideList();
FxFreeToPagedLookasideList();
FxGetCallbackLock();
FxGetContextSize();
FxGetDevicePropertyString();
FxIFR();
FxIFRCreateSnapshot();
FxIFRGetDriverMultiString();
FxIFRGetSize();
FxIFRReplay();
FxIFRSendRecordsToWpp();
FxIFRStart();
FxIFRStop();
FxIFRValidateLogHeader();
FxIFRValidateRecord();
FxInitialize();
FxInitializeBugCheckDriverInfo();
FxInternalIoctlOthersContext::ReleaseAndRestore();
FxInternalIoctlOthersContext::StoreAndReferenceMemory();
FxInternalIoctlOthersContext::`scalar deleting destructor'();
FxInterrupt::AcquireLock();
FxInterrupt::AssignResources();
FxInterrupt::Connect();
FxInterrupt::ConnectInternal();
FxInterrupt::CreateWakeInterruptMachine();
FxInterrupt::DeleteObject();
FxInterrupt::Disconnect();
FxInterrupt::DisconnectInternal();
FxInterrupt::Dispose();
FxInterrupt::FilterResourceRequirements();
FxInterrupt::FlushAndRundown();
FxInterrupt::ForceDisconnect();
FxInterrupt::ForceReconnect();
FxInterrupt::FxInterrupt();
FxInterrupt::Initialize();
FxInterrupt::InitializeWorker();
FxInterrupt::InterruptDisable();
FxInterrupt::InterruptEnable();
FxInterrupt::InvokeWakeInterruptEvtIsr();
FxInterrupt::ReleaseLock();
FxInterrupt::ReportActive();
FxInterrupt::ReportInactive();
FxInterrupt::SetPolicy();
FxInterrupt::TryToAcquireLock();
FxInterrupt::WakeInterruptIsr();
FxInterrupt::WorkItemHandler();
FxInterrupt::_CreateAndInit();
FxInterrupt::_InterruptDisableThunk();
FxInterrupt::_InterruptDpcThunk();
FxInterrupt::_InterruptEnableThunk();
FxInterrupt::_InterruptMarkDisconnecting();
FxInterrupt::_InterruptSynchronizeThunk();
FxInterrupt::_InterruptThunk();
FxInterrupt::_InterruptWorkItemCallback();
FxInterrupt::`scalar deleting destructor'();
FxInterrupt::~FxInterrupt();
FxIoContext::CopyParameters();
FxIoContext::FxIoContext();
FxIoContext::ReleaseAndRestore();
FxIoContext::`scalar deleting destructor'();
FxIoContext::~FxIoContext();
FxIoQueue::AllocateReservedRequest();
FxIoQueue::AssignForwardProgressPolicy();
FxIoQueue::CancelForDriver();
FxIoQueue::CancelForQueue();
FxIoQueue::CancelIrps();
FxIoQueue::CheckTransitionFromEmpty();
FxIoQueue::ConfigureConstraints();
FxIoQueue::DeferredDispatchRequestsFromDpc();
FxIoQueue::DispatchEvents();
FxIoQueue::DispatchInternalEvents();
FxIoQueue::DispatchRequestToDriver();
FxIoQueue::Dispose();
FxIoQueue::FatalError();
FxIoQueue::ForwardRequest();
FxIoQueue::ForwardRequestToParent();
FxIoQueue::ForwardRequestWorker();
FxIoQueue::FreeAllReservedRequests();
FxIoQueue::FxIoQueue();
FxIoQueue::GetCallbackLockPtr();
FxIoQueue::GetConstraints();
FxIoQueue::GetForwardProgressIrpLocked();
FxIoQueue::GetForwardProgressIrps();
FxIoQueue::GetRequest();
FxIoQueue::GetReservedRequest();
FxIoQueue::Initialize();
FxIoQueue::InsertInDriverOwnedList();
FxIoQueue::InsertNewRequestLocked();
FxIoQueue::IsIoEventHandlerRegistered();
FxIoQueue::IsPowerStateNotifyingDriver();
FxIoQueue::PreRequestCompletedCallback();
FxIoQueue::ProcessAcknowledgedRequests();
FxIoQueue::ProcessCancelledRequests();
FxIoQueue::ProcessCancelledRequestsOnQueue();
FxIoQueue::ProcessIdleComplete();
FxIoQueue::ProcessPowerEvents();
FxIoQueue::ProcessPurgeComplete();
FxIoQueue::ProcessReadyNotify();
FxIoQueue::PurgeForwardProgressIrps();
FxIoQueue::PutBackReservedRequest();
FxIoQueue::QueryInterface();
FxIoQueue::QueueDrainSynchronously();
FxIoQueue::QueueDriverCreatedRequest();
FxIoQueue::QueueForwardProgressIrpLocked();
FxIoQueue::QueueIdle();
FxIoQueue::QueueIdleSynchronously();
FxIoQueue::QueuePurge();
FxIoQueue::QueuePurgeSynchronously();
FxIoQueue::QueueRequest();
FxIoQueue::QueueRequestFromForward();
FxIoQueue::ReadyNotify();
FxIoQueue::RemoveFromDriverOwnedList();
FxIoQueue::RequestCancelable();
FxIoQueue::RequestCompletedCallback();
FxIoQueue::Requeue();
FxIoQueue::ReturnReservedRequest();
FxIoQueue::SetState();
FxIoQueue::SetTransitionFromEmpty();
FxIoQueue::StartPowerTransitionOff();
FxIoQueue::StopProcessingForPower();
FxIoQueue::Vf_VerifyCancelForDriver();
FxIoQueue::Vf_VerifyForwardRequest();
FxIoQueue::Vf_VerifyForwardRequestToParent();
FxIoQueue::Vf_VerifyForwardRequestUpdateFlags();
FxIoQueue::Vf_VerifyGetRequestRestoreFlags();
FxIoQueue::Vf_VerifyGetRequestUpdateFlags();
FxIoQueue::Vf_VerifyPeekRequest();
FxIoQueue::Vf_VerifyQueueDriverCreatedRequest();
FxIoQueue::Vf_VerifyRequestCancelable();
FxIoQueue::Vf_VerifyRequeue();
FxIoQueue::Vf_VerifyValidateCompletedRequest();
FxIoQueue::_Create();
FxIoQueue::_DeferredDispatchDpcThunk();
FxIoQueue::_DeferredDispatchThreadThunk();
FxIoQueue::_IdleComplete();
FxIoQueue::_IrpCancelForDriver();
FxIoQueue::_IrpCancelForQueue();
FxIoQueue::_PurgeComplete();
FxIoQueue::_WdmCancelRoutineForReservedIrp();
FxIoQueue::`scalar deleting destructor'();
FxIoQueue::~FxIoQueue();
FxIoQueueIoRead::Invoke();
FxIoQueueIoResume::Invoke();
FxIoQueueIoState::Invoke();
FxIoQueueIoStop::Invoke();
FxIoQueueIoWrite::Invoke();
FxIoResList::BuildFromWdmList();
FxIoResList::FxIoResList();
FxIoResList::`scalar deleting destructor'();
FxIoResReqList::CreateWdmList();
FxIoResReqList::FxIoResReqList();
FxIoResReqList::_CreateAndInit();
FxIoResReqList::_CreateFromWdmList();
FxIoResReqList::`scalar deleting destructor'();
FxIoResourceListInsertDescriptor();
FxIoResourceRequirementsListInsertIoResList();
FxIoTarget::CancelSentIo();
FxIoTarget::ClearCompletedRequestVerifierFlags();
FxIoTarget::ClearTargetPointers();
FxIoTarget::CompleteCanceledRequest();
FxIoTarget::CompletePendedRequestList();
FxIoTarget::Construct();
FxIoTarget::CopyFileObjectAndFlags();
FxIoTarget::DecrementIoCount();
FxIoTarget::Dispose();
FxIoTarget::DrainPendedRequestsLocked();
FxIoTarget::FormatInternalIoctlOthersRequest();
FxIoTarget::FormatIoRequest();
FxIoTarget::FormatIoctlRequest();
FxIoTarget::FxIoTarget();
FxIoTarget::GetSentRequestsListLocked();
FxIoTarget::GetTargetDeviceObject();
FxIoTarget::GetTargetIoType();
FxIoTarget::GotoPurgeState();
FxIoTarget::GotoRemoveState();
FxIoTarget::GotoStartState();
FxIoTarget::GotoStopState();
FxIoTarget::HandleFailedResubmit();
FxIoTarget::Init();
FxIoTarget::PendRequestLocked();
FxIoTarget::PrintDisposeMessage();
FxIoTarget::Purge();
FxIoTarget::QueryInterface();
FxIoTarget::Remove();
FxIoTarget::RemoveCompletedRequestLocked();
FxIoTarget::RequestCompletionRoutine();
FxIoTarget::Send();
FxIoTarget::Start();
FxIoTarget::Stop();
FxIoTarget::Submit();
FxIoTarget::SubmitLocked();
FxIoTarget::SubmitPendedRequest();
FxIoTarget::SubmitPendedRequests();
FxIoTarget::SubmitSync();
FxIoTarget::SubmitSyncRequestIgnoreTargetState();
FxIoTarget::TimerCallback();
FxIoTarget::Vf_VerifySubmitLocked();
FxIoTarget::WaitForDisposeEvent();
FxIoTarget::WaitForSentIoToComplete();
FxIoTarget::_CancelSentRequests();
FxIoTarget::_RequestCancelled();
FxIoTarget::_RequestCompletionRoutine();
FxIoTarget::_SyncCompletionRoutine();
FxIoTarget::`scalar deleting destructor'();
FxIoTargetFormatIo();
FxIoTargetFormatIoctl();
FxIoTargetRemote::ClearTargetPointers();
FxIoTargetRemote::Close();
FxIoTargetRemote::FxIoTargetRemote();
FxIoTargetRemote::GetTargetDeviceRelations();
FxIoTargetRemote::Open();
FxIoTargetRemote::OpenTargetHandle();
FxIoTargetRemote::QueryInterface();
FxIoTargetRemote::RegisterForPnpNotification();
FxIoTargetRemote::Remove();
FxIoTargetRemote::UnregisterForPnpNotification();
FxIoTargetRemote::_Create();
FxIoTargetRemote::_PlugPlayNotification();
FxIoTargetRemote::`scalar deleting destructor'();
FxIoTargetRemoveOpenParams::Clear();
FxIoTargetRemoveOpenParams::Set();
FxIoTargetSelf::GetTargetDeviceObject();
FxIoTargetSelf::Send();
FxIoTargetSelf::`scalar deleting destructor'();
FxIoTargetSendIo();
FxIoTargetSendIoctl();
FxIoTargetValidateOpenParams();
FxIrp::PropagatePendingReturned();
FxIrp::SendIrpSynchronously();
FxIrp::SetCompletionRoutineEx();
FxIrp::_IrpSynchronousCompletion();
FxIrpDynamicDispatchInfo::Info::Info();
FxIrpDynamicDispatchInfo::Info::~Info();
FxIrpDynamicDispatchInfo::Mj2Index();
FxIrpPreprocessInfo::FxIrpPreprocessInfo();
FxIrpPreprocessInfo::Info::Info();
FxIrpPreprocessInfo::Info::~Info();
FxIrpPreprocessInfo::`scalar deleting destructor'();
FxIrpQueue::InsertIrpInQueue();
FxIrpQueue::PeekNextIrpFromQueue();
FxIrpQueue::RemoveIrpFromListEntry();
FxIrpQueue::RemoveIrpFromQueueByContext();
FxIrpQueue::RemoveNextIrpFromQueue();
FxIrpQueue::Vf_VerifyRemoveIrpFromQueueByContext();
FxIrpQueue::_WdmCancelRoutineInternal();
FxIsEqualGuid();
FxIsPagedPoolType();
FxLibraryCleanup();
FxLibraryCommonCommission();
FxLibraryCommonDecommission();
FxLibraryCommonRegisterClient();
FxLibraryCommonUnregisterClient();
FxLibraryCreateDevice();
FxLibraryDispatch();
FxLibraryGlobalsCommission();
FxLibraryGlobalsQueryRegistrySettings();
FxLibraryGlobalsVerifyVersion();
FxLookasideList::FxLookasideList();
FxLookasideList::InitObjectAlloc();
FxLookasideList::InitializeLookaside();
FxLookasideList::`scalar deleting destructor'();
FxMdlAllocateDebug();
FxMdlDump();
FxMdlFreeDebug();
FxMemoryBuffer::GetBuffer();
FxMemoryBuffer::_Create();
FxMemoryBuffer::`scalar deleting destructor'();
FxMemoryBufferFromLookaside::FxMemoryBufferFromLookaside();
FxMemoryBufferFromLookaside::GetBuffer();
FxMemoryBufferFromLookaside::SelfDestruct();
FxMemoryBufferFromLookaside::`scalar deleting destructor'();
FxMemoryBufferFromPool::GetBuffer();
FxMemoryBufferFromPool::_Create();
FxMemoryBufferFromPool::`scalar deleting destructor'();
FxMemoryBufferFromPool::~FxMemoryBufferFromPool();
FxMemoryBufferFromPoolLookaside::FxMemoryBufferFromPoolLookaside();
FxMemoryBufferFromPoolLookaside::GetBuffer();
FxMemoryBufferFromPoolLookaside::SelfDestruct();
FxMemoryBufferFromPoolLookaside::`scalar deleting destructor'();
FxMemoryBufferPreallocated::GetBuffer();
FxMemoryBufferPreallocated::QueryInterface();
FxMemoryBufferPreallocated::`scalar deleting destructor'();
FxMemoryObject::AddRef();
FxMemoryObject::Delete();
FxMemoryObject::FxMemoryObject();
FxMemoryObject::GetBufferSize();
FxMemoryObject::GetDriverGlobals();
FxMemoryObject::GetFlags();
FxMemoryObject::GetHandle();
FxMemoryObject::GetMdl();
FxMemoryObject::QueryInterface();
FxMemoryObject::Release();
FxMemoryObject::_Create();
FxMemoryObject::`scalar deleting destructor'();
FxMemoryPagedBufferFromPool::`scalar deleting destructor'();
FxMemoryPagedBufferFromPoolLookaside::`scalar deleting destructor'();
FxMpDevice::Dispose();
FxMpDevice::FxMpDevice();
FxMpDevice::GetDefaultIoTarget();
FxMpDevice::`scalar deleting destructor'();
FxNPagedLookasideList::Allocate();
FxNPagedLookasideList::Initialize();
FxNPagedLookasideList::Reclaim();
FxNPagedLookasideList::`scalar deleting destructor'();
FxNPagedLookasideListFromPool::Allocate();
FxNPagedLookasideListFromPool::Initialize();
FxNPagedLookasideListFromPool::Reclaim();
FxNPagedLookasideListFromPool::ReclaimPool();
FxNPagedLookasideListFromPool::`scalar deleting destructor'();
FxNonPagedObject::FxNonPagedObject();
FxNonPagedObject::Lock();
FxNonPagedObject::Unlock();
FxNonPagedObject::`scalar deleting destructor'();
FxNonPagedObject::~FxNonPagedObject();
FxObject::AddChildObjectInternal();
FxObject::AddContext();
FxObject::AddRef();
FxObject::AddRefOverride();
FxObject::AllocateTagTracker();
FxObject::AssignParentObject();
FxObject::CallCleanupCallbacks();
FxObject::ClearEvtCallbacks();
FxObject::Commit();
FxObject::Construct();
FxObject::DeferredDisposeWorkItem();
FxObject::DeleteEarlyDisposedObject();
FxObject::DeleteFromFailedCreate();
FxObject::DeleteObject();
FxObject::DeletedAndDisposedWorkerLocked();
FxObject::DestroyChildren();
FxObject::Dispose();
FxObject::DisposeChildrenWorker();
FxObject::EarlyDispose();
FxObject::FxObject();
FxObject::GetParentObjectReferenced();
FxObject::IsDisposed();
FxObject::IsPassiveCallbacks();
FxObject::MarkDisposeOverride();
FxObject::MarkNoDeleteDDI();
FxObject::MarkPassiveCallbacks();
FxObject::ParentDeleteEvent();
FxObject::PerformDisposingDisposeChildrenLocked();
FxObject::PerformEarlyDispose();
FxObject::PerformEarlyDisposeWorkerAndUnlock();
FxObject::ProcessDestroy();
FxObject::QueryInterface();
FxObject::QueueDeferredDisposeLocked();
FxObject::Release();
FxObject::ReleaseOverride();
FxObject::RemoveChildObjectInternal();
FxObject::SelfDestruct();
FxObject::SetObjectStateLocked();
FxObject::TraceDroppedEvent();
FxObject::Vf_VerifyConstruct();
FxObject::Vf_VerifyLeakDetectionConsiderObject();
FxObject::_CleanupPointer();
FxObject::_GetEffectiveLock();
FxObject::`scalar deleting destructor'();
FxObject::~FxObject();
FxObjectAllocateContext();
FxObjectAndHandleHeaderInit();
FxObjectHandleAlloc();
FxObjectHandleGetPtr();
FxObjectHandleGetPtrQI();
FxOverrideDefaultVerifierSettings();
FxPackage::FxPackage();
FxPackage::`scalar deleting destructor'();
FxPagedLookasideListFromPool::Allocate();
FxPagedLookasideListFromPool::FxPagedLookasideListFromPool();
FxPagedLookasideListFromPool::InitPagedAlloc();
FxPagedLookasideListFromPool::Initialize();
FxPagedLookasideListFromPool::Reclaim();
FxPagedLookasideListFromPool::ReclaimPool();
FxPagedLookasideListFromPool::`scalar deleting destructor'();
FxPagedObject::`scalar deleting destructor'();
FxPagedObject::~FxPagedObject();
FxPkgFdo::AskParentToRemoveAndReenumerate();
FxPkgFdo::CreateDefaultDeviceList();
FxPkgFdo::DeleteSymbolicLinkOverload();
FxPkgFdo::DispatchSystemSetPower();
FxPkgFdo::FireAndForgetIrp();
FxPkgFdo::FxPkgFdo();
FxPkgFdo::GetDispatchPnp();
FxPkgFdo::GetDispatchPower();
FxPkgFdo::HandleQueryCapabilitiesCompletion();
FxPkgFdo::HandleQueryPnpDeviceStateCompletion();
FxPkgFdo::Initialize();
FxPkgFdo::PnpEventCheckForDevicePresenceOverload();
FxPkgFdo::PnpEventEjectHardwareOverload();
FxPkgFdo::PnpEventFdoRemovedOverload();
FxPkgFdo::PnpEventPdoRemovedOverload();
FxPkgFdo::PnpFilterResourceRequirements();
FxPkgFdo::PnpGetPostRemoveState();
FxPkgFdo::PnpQueryDeviceRelations();
FxPkgFdo::PnpSendStartDeviceDownTheStackOverload();
FxPkgFdo::PostCreateDeviceInitialize();
FxPkgFdo::PowerCheckDeviceTypeNPOverload();
FxPkgFdo::PowerCheckDeviceTypeOverload();
FxPkgFdo::PowerCheckParentOverload();
FxPkgFdo::PowerParentPowerDereference();
FxPkgFdo::PowerReleasePendingDeviceIrp();
FxPkgFdo::ProcessRemoveDeviceOverload();
FxPkgFdo::QueryForDsfInterface();
FxPkgFdo::QueryForPowerThread();
FxPkgFdo::QueryForReenumerationInterface();
FxPkgFdo::RaiseDevicePower();
FxPkgFdo::RaiseDevicePowerCompletion();
FxPkgFdo::ReleaseReenumerationInterface();
FxPkgFdo::SendIrpSynchronously();
FxPkgFdo::_Create();
FxPkgFdo::_DispatchQueryPower();
FxPkgFdo::_DispatchSetPower();
FxPkgFdo::_PnpFilterResourceRequirements();
FxPkgFdo::_PnpFilteredStartDeviceCompletionRoutine();
FxPkgFdo::_PnpPassDown();
FxPkgFdo::_PnpQueryCapabilities();
FxPkgFdo::_PnpQueryDeviceRelations();
FxPkgFdo::_PnpQueryInterface();
FxPkgFdo::_PnpQueryPnpDeviceState();
FxPkgFdo::_PnpStartDeviceCompletionRoutine();
FxPkgFdo::_PnpSurpriseRemoval();
FxPkgFdo::_PowerPassDown();
FxPkgFdo::_SystemPowerS0Completion();
FxPkgFdo::_SystemPowerSxCompletion();
FxPkgFdo::`scalar deleting destructor'();
FxPkgFdo::~FxPkgFdo();
FxPkgGeneral::ConfigureConstraints();
FxPkgGeneral::ConfigureFileObjectClass();
FxPkgGeneral::ConfigureForwarding();
FxPkgGeneral::CreateCompleted();
FxPkgGeneral::DecrementOpenHandleCount();
FxPkgGeneral::Dispatch();
FxPkgGeneral::ForwardCreateRequest();
FxPkgGeneral::FxPkgGeneral();
FxPkgGeneral::Initialize();
FxPkgGeneral::OnClose();
FxPkgGeneral::OnCreate();
FxPkgGeneral::OnShutdown();
FxPkgGeneral::PostCreateDeviceInitialize();
FxPkgGeneral::_CreateCompletionRoutine();
FxPkgGeneral::_CreateCompletionRoutine2();
FxPkgGeneral::`scalar deleting destructor'();
FxPkgIo::AddIoQueue();
FxPkgIo::ConfigureDynamicDispatching();
FxPkgIo::ConfigureForwarding();
FxPkgIo::CreateQueue();
FxPkgIo::Dispatch();
FxPkgIo::DispatchStep1();
FxPkgIo::DispatchStep2();
FxPkgIo::DispathToInCallerContextCallback();
FxPkgIo::EnqueueRequest();
FxPkgIo::FxPkgIo();
FxPkgIo::GetIoQueueListLocked();
FxPkgIo::InitializeDefaultQueue();
FxPkgIo::ResetStateForRestart();
FxPkgIo::ResumeProcessingForPower();
FxPkgIo::StopProcessingForPower();
FxPkgIo::VerifierFreeRequestToTestForwardProgess();
FxPkgIo::Vf_VerifyDispatchContext();
FxPkgIo::Vf_VerifyEnqueueRequestRestoreFlags();
FxPkgIo::Vf_VerifyEnqueueRequestUpdateFlags();
FxPkgIo::`scalar deleting destructor'();
FxPkgIo::~FxPkgIo();
FxPkgPdo::AddEjectionDevice();
FxPkgPdo::AskParentToRemoveAndReenumerate();
FxPkgPdo::ClearEjectionDevicesList();
FxPkgPdo::DeleteSymbolicLinkOverload();
FxPkgPdo::DispatchDeviceSetPower();
FxPkgPdo::DispatchSystemSetPower();
FxPkgPdo::FinishInitialize();
FxPkgPdo::FireAndForgetIrp();
FxPkgPdo::FxPkgPdo();
FxPkgPdo::GetDispatchPnp();
FxPkgPdo::GetDispatchPower();
FxPkgPdo::HandleQueryCapabilities();
FxPkgPdo::HandleQueryInterfaceForReenumerate();
FxPkgPdo::Initialize();
FxPkgPdo::PnpEventCheckForDevicePresenceOverload();
FxPkgPdo::PnpEventEjectHardwareOverload();
FxPkgPdo::PnpEventFdoRemovedOverload();
FxPkgPdo::PnpEventPdoRemovedOverload();
FxPkgPdo::PnpEventSurpriseRemovePendingOverload();
FxPkgPdo::PnpGetPostRemoveState();
FxPkgPdo::PnpQueryDeviceRelations();
FxPkgPdo::PnpQueryResourceRequirements();
FxPkgPdo::PnpQueryResources();
FxPkgPdo::PnpSendStartDeviceDownTheStackOverload();
FxPkgPdo::PowerCheckDeviceTypeNPOverload();
FxPkgPdo::PowerCheckDeviceTypeOverload();
FxPkgPdo::PowerCheckParentOverload();
FxPkgPdo::PowerDisableWakeAtBusOverload();
FxPkgPdo::PowerEnableWakeAtBusOverload();
FxPkgPdo::PowerParentPowerDereference();
FxPkgPdo::PowerReleasePendingDeviceIrp();
FxPkgPdo::ProcessRemoveDeviceOverload();
FxPkgPdo::QueryForPowerThread();
FxPkgPdo::QueryForReenumerationInterface();
FxPkgPdo::RegisterCallbacks();
FxPkgPdo::ReleaseReenumerationInterface();
FxPkgPdo::SendIrpSynchronously();
FxPkgPdo::_DispatchPowerSequence();
FxPkgPdo::_DispatchQueryPower();
FxPkgPdo::_DispatchSetPower();
FxPkgPdo::_PnpCompleteIrp();
FxPkgPdo::_PnpEject();
FxPkgPdo::_PnpFilterResourceRequirements();
FxPkgPdo::_PnpQueryBusInformation();
FxPkgPdo::_PnpQueryCapabilities();
FxPkgPdo::_PnpQueryDeviceRelations();
FxPkgPdo::_PnpQueryDeviceText();
FxPkgPdo::_PnpQueryId();
FxPkgPdo::_PnpQueryInterface();
FxPkgPdo::_PnpQueryPnpDeviceState();
FxPkgPdo::_PnpQueryResourceRequirements();
FxPkgPdo::_PnpQueryResources();
FxPkgPdo::_PnpSetLock();
FxPkgPdo::_PnpSurpriseRemoval();
FxPkgPdo::_QueryCapsWorkItem();
FxPkgPdo::_RemoveAndReenumerateSelf();
FxPkgPdo::`scalar deleting destructor'();
FxPkgPdo::~FxPkgPdo();
FxPkgPnp::AckPendingWakeInterruptOperation();
FxPkgPnp::AddChildList();
FxPkgPnp::AddDmaEnabler();
FxPkgPnp::AddQueryInterface();
FxPkgPnp::AddRemovalDevice();
FxPkgPnp::AddUsageDevice();
FxPkgPnp::AdjustUsageCount();
FxPkgPnp::AllocateDmaEnablerList();
FxPkgPnp::AllocateEnumInfo();
FxPkgPnp::AllocateWorkItemForSetDeviceFailed();
FxPkgPnp::AssignPowerFrameworkSettings();
FxPkgPnp::CleanupDeviceFromFailedCreate();
FxPkgPnp::CleanupStateMachines();
FxPkgPnp::CommitUsageNotification();
FxPkgPnp::CompletePnpRequest();
FxPkgPnp::CompletePowerRequest();
FxPkgPnp::CreatePowerThread();
FxPkgPnp::CreatePowerThreadIfNeeded();
FxPkgPnp::DeleteDevice();
FxPkgPnp::DisconnectInterruptNP();
FxPkgPnp::Dispatch();
FxPkgPnp::DispatchWaitWake();
FxPkgPnp::Dispose();
FxPkgPnp::FilterResourceRequirements();
FxPkgPnp::FinishInitialize();
FxPkgPnp::FxPkgPnp();
FxPkgPnp::GetPnpCapsInternal();
FxPkgPnp::GetPnpState();
FxPkgPnp::GetPnpStateInternal();
FxPkgPnp::HandleQueryBusInformation();
FxPkgPnp::HandleQueryBusRelations();
FxPkgPnp::HandleQueryDeviceRelations();
FxPkgPnp::HandleQueryInterface();
FxPkgPnp::HandleQueryInterfaceForPowerThread();
FxPkgPnp::HandleQueryPnpDeviceState();
FxPkgPnp::Initialize();
FxPkgPnp::InvalidateDeviceState();
FxPkgPnp::IsInSpecialUse();
FxPkgPnp::NotPowerPolOwnerGotoD0();
FxPkgPnp::NotPowerPolOwnerGotoD0InD0();
FxPkgPnp::NotPowerPolOwnerGotoDx();
FxPkgPnp::NotPowerPolOwnerGotoDxInDx();
FxPkgPnp::NotPowerPolOwnerRemoved();
FxPkgPnp::NotPowerPolOwnerStarted();
FxPkgPnp::NotPowerPolOwnerStarting();
FxPkgPnp::NotPowerPolOwnerStartingFailed();
FxPkgPnp::NotPowerPolOwnerStopping();
FxPkgPnp::NotPowerPolOwnerStoppingFailed();
FxPkgPnp::NotPowerPolOwnerStoppingPoweringDown();
FxPkgPnp::NotPowerPolOwnerStoppingPoweringUp();
FxPkgPnp::NotPowerPolOwnerStoppingSendStatus();
FxPkgPnp::NotifyResourceObjectsD0();
FxPkgPnp::NotifyResourceObjectsDx();
FxPkgPnp::NotifyResourceobjectsToReleaseResources();
FxPkgPnp::PnpAssignInterruptsSyncIrql();
FxPkgPnp::PnpCheckAndIncrementRestartCount();
FxPkgPnp::PnpCleanupForRemove();
FxPkgPnp::PnpDeviceUsageNotification();
FxPkgPnp::PnpDisableInterfaces();
FxPkgPnp::PnpEnableInterfacesAndRegisterWmi();
FxPkgPnp::PnpEnterNewState();
FxPkgPnp::PnpEventCheckForDevicePresence();
FxPkgPnp::PnpEventEjectHardware();
FxPkgPnp::PnpEventEnableInterfaces();
FxPkgPnp::PnpEventFailed();
FxPkgPnp::PnpEventFailedInit();
FxPkgPnp::PnpEventFailedIoStarting();
FxPkgPnp::PnpEventFailedOwnHardware();
FxPkgPnp::PnpEventFailedPowerDown();
FxPkgPnp::PnpEventFailedPowerPolicyRemoved();
FxPkgPnp::PnpEventFailedStarted();
FxPkgPnp::PnpEventFailedSurpriseRemoved();
FxPkgPnp::PnpEventFdoRemoved();
FxPkgPnp::PnpEventFinal();
FxPkgPnp::PnpEventHardwareAvailable();
FxPkgPnp::PnpEventHardwareAvailablePowerPolicyFailed();
FxPkgPnp::PnpEventInitQueryRemove();
FxPkgPnp::PnpEventInitQueryRemoveCanceled();
FxPkgPnp::PnpEventInitStarting();
FxPkgPnp::PnpEventInitSurpriseRemoved();
FxPkgPnp::PnpEventPdoInitFailed();
FxPkgPnp::PnpEventPdoRemoved();
FxPkgPnp::PnpEventPdoRestart();
FxPkgPnp::PnpEventQueriedRemoving();
FxPkgPnp::PnpEventQueriedSurpriseRemove();
FxPkgPnp::PnpEventQueryCanceled();
FxPkgPnp::PnpEventQueryRemoveAskDriver();
FxPkgPnp::PnpEventQueryRemoveEnsureDeviceAwake();
FxPkgPnp::PnpEventQueryRemovePending();
FxPkgPnp::PnpEventQueryRemoveStaticCheck();
FxPkgPnp::PnpEventQueryStopAskDriver();
FxPkgPnp::PnpEventQueryStopEnsureDeviceAwake();
FxPkgPnp::PnpEventQueryStopPending();
FxPkgPnp::PnpEventQueryStopStaticCheck();
FxPkgPnp::PnpEventRemoved();
FxPkgPnp::PnpEventRemovedChildrenRemoved();
FxPkgPnp::PnpEventRemovedCommonCode();
FxPkgPnp::PnpEventRemovedPdoSurpriseRemoved();
FxPkgPnp::PnpEventRemovedPdoWait();
FxPkgPnp::PnpEventRemovingDisableInterfaces();
FxPkgPnp::PnpEventRestart();
FxPkgPnp::PnpEventRestartHardwareAvailable();
FxPkgPnp::PnpEventRestartReleaseHardware();
FxPkgPnp::PnpEventRestarting();
FxPkgPnp::PnpEventStarted();
FxPkgPnp::PnpEventStartedCancelRemove();
FxPkgPnp::PnpEventStartedCancelStop();
FxPkgPnp::PnpEventStartedRemoving();
FxPkgPnp::PnpEventStartedStopping();
FxPkgPnp::PnpEventStartingFromStopped();
FxPkgPnp::PnpEventStopped();
FxPkgPnp::PnpEventStoppedWaitForStartCompletion();
FxPkgPnp::PnpEventSurpriseRemoveIoStarted();
FxPkgPnp::PnpEventSurpriseRemovePendingOverload();
FxPkgPnp::PnpEventSurpriseRemoved();
FxPkgPnp::PnpFinishProcessingIrp();
FxPkgPnp::PnpIncrementRestartCountLogic();
FxPkgPnp::PnpMatchResources();
FxPkgPnp::PnpPowerDereferenceSelf();
FxPkgPnp::PnpPowerReferenceDuringQueryPnp();
FxPkgPnp::PnpPrepareHardware();
FxPkgPnp::PnpProcessEvent();
FxPkgPnp::PnpProcessEventInner();
FxPkgPnp::PnpReleaseHardware();
FxPkgPnp::PnpSurpriseRemoval();
FxPkgPnp::PostCreateDeviceInitialize();
FxPkgPnp::PowerCheckDeviceType();
FxPkgPnp::PowerCheckDeviceTypeNP();
FxPkgPnp::PowerCheckParentState();
FxPkgPnp::PowerCheckParentStateArmedForWake();
FxPkgPnp::PowerCheckParentStateArmedForWakeNP();
FxPkgPnp::PowerCheckParentStateNP();
FxPkgPnp::PowerCompletePendedWakeIrp();
FxPkgPnp::PowerConnectInterruptFailed();
FxPkgPnp::PowerD0ArmedForWake();
FxPkgPnp::PowerD0ArmedForWakeNP();
FxPkgPnp::PowerD0BusWakeOwner();
FxPkgPnp::PowerD0BusWakeOwnerNP();
FxPkgPnp::PowerD0DisarmingWakeAtBus();
FxPkgPnp::PowerD0DisarmingWakeAtBusNP();
FxPkgPnp::PowerD0NP();
FxPkgPnp::PowerD0Starting();
FxPkgPnp::PowerD0StartingConnectInterrupt();
FxPkgPnp::PowerD0StartingDmaEnable();
FxPkgPnp::PowerD0StartingStartSelfManagedIo();
FxPkgPnp::PowerDZero();
FxPkgPnp::PowerDecideD0State();
FxPkgPnp::PowerDisableWakeAtBusOverload();
FxPkgPnp::PowerDmaEnableAndScan();
FxPkgPnp::PowerDmaPowerDown();
FxPkgPnp::PowerDmaPowerUp();
FxPkgPnp::PowerDxDisablingWakeAtBus();
FxPkgPnp::PowerDxDisablingWakeAtBusNP();
FxPkgPnp::PowerDxStoppedArmForWake();
FxPkgPnp::PowerDxStoppedArmForWakeNP();
FxPkgPnp::PowerDxStoppedDecideDxState();
FxPkgPnp::PowerDxStoppedDisarmWake();
FxPkgPnp::PowerDxStoppedDisarmWakeNP();
FxPkgPnp::PowerEnableWakeAtBusOverload();
FxPkgPnp::PowerEnablingWakeAtBus();
FxPkgPnp::PowerEnablingWakeAtBusNP();
FxPkgPnp::PowerFinalPowerDownFailed();
FxPkgPnp::PowerGotoD3Stopped();
FxPkgPnp::PowerGotoDNotZero();
FxPkgPnp::PowerGotoDNotZeroIoStopped();
FxPkgPnp::PowerGotoDNotZeroIoStoppedNP();
FxPkgPnp::PowerGotoDNotZeroNP();
FxPkgPnp::PowerGotoDx();
FxPkgPnp::PowerGotoDxArmedForWake();
FxPkgPnp::PowerGotoDxArmedForWakeNP();
FxPkgPnp::PowerGotoDxFailed();
FxPkgPnp::PowerGotoDxIoStopped();
FxPkgPnp::PowerGotoDxIoStoppedArmedForWake();
FxPkgPnp::PowerGotoDxIoStoppedArmedForWakeNP();
FxPkgPnp::PowerGotoDxIoStoppedNP();
FxPkgPnp::PowerGotoDxNPFailed();
FxPkgPnp::PowerGotoDxStopped();
FxPkgPnp::PowerGotoDxStoppedDisableInterrupt();
FxPkgPnp::PowerGotoDxStoppedDisableInterruptNP();
FxPkgPnp::PowerGotoImplicitD3DisarmWakeAtBus();
FxPkgPnp::PowerGotoStopped();
FxPkgPnp::PowerIndicateWaitWakeStatus();
FxPkgPnp::PowerInitialConnectInterruptFailed();
FxPkgPnp::PowerInitialDmaEnableFailed();
FxPkgPnp::PowerInitialPowerUpFailed();
FxPkgPnp::PowerInitialPowerUpFailedDerefParent();
FxPkgPnp::PowerInitialPowerUpFailedPowerDown();
FxPkgPnp::PowerInitialSelfManagedIoFailed();
FxPkgPnp::PowerInitialSelfManagedIoFailedStarted();
FxPkgPnp::PowerMakeWakeRequestNonCancelable();
FxPkgPnp::PowerNotifyingD0EntryToWakeInterrupts();
FxPkgPnp::PowerNotifyingD0EntryToWakeInterruptsNP();
FxPkgPnp::PowerNotifyingD0ExitToWakeInterrupts();
FxPkgPnp::PowerNotifyingD0ExitToWakeInterruptsNP();
FxPkgPnp::PowerPolCancelUsbSS();
FxPkgPnp::PowerPolCancelingUsbSSForSystemSleep();
FxPkgPnp::PowerPolCancelingWakeForSystemSleep();
FxPkgPnp::PowerPolCancelingWakeForSystemSleepWakeCanceled();
FxPkgPnp::PowerPolCheckPowerPageable();
FxPkgPnp::PowerPolDeviceD0PowerRequestFailed();
FxPkgPnp::PowerPolDeviceIdleReturnToActive();
FxPkgPnp::PowerPolDeviceIdleSleeping();
FxPkgPnp::PowerPolDeviceIdleStopping();
FxPkgPnp::PowerPolDevicePowerRequestFailed();
FxPkgPnp::PowerPolDisarmingWakeForSystemSleepCompletePowerUp();
FxPkgPnp::PowerPolIdleCapableDeviceIdle();
FxPkgPnp::PowerPolIoPresentArmed();
FxPkgPnp::PowerPolIoPresentArmedWakeCanceled();
FxPkgPnp::PowerPolPowerUpForSystemSleepFailed();
FxPkgPnp::PowerPolPowerUpForSystemSleepNotSeen();
FxPkgPnp::PowerPolRemoved();
FxPkgPnp::PowerPolRestarting();
FxPkgPnp::PowerPolRestartingFailed();
FxPkgPnp::PowerPolS0NoWakeCompletePowerUp();
FxPkgPnp::PowerPolS0NoWakePowerUp();
FxPkgPnp::PowerPolS0WakeCompletePowerUp();
FxPkgPnp::PowerPolS0WakeDisarm();
FxPkgPnp::PowerPolSleeping();
FxPkgPnp::PowerPolSleepingNoWakeCompletePowerDown();
FxPkgPnp::PowerPolSleepingNoWakeDxRequestFailed();
FxPkgPnp::PowerPolSleepingNoWakePowerDown();
FxPkgPnp::PowerPolSleepingPowerDownNotProcessed();
FxPkgPnp::PowerPolSleepingSendWake();
FxPkgPnp::PowerPolSleepingWakePowerDown();
FxPkgPnp::PowerPolSleepingWakePowerDownFailed();
FxPkgPnp::PowerPolSleepingWakePowerDownFailedWakeCanceled();
FxPkgPnp::PowerPolSleepingWakeRevertArmWake();
FxPkgPnp::PowerPolSleepingWakeRevertArmWakeNP();
FxPkgPnp::PowerPolSleepingWakeWakeArrived();
FxPkgPnp::PowerPolSleepingWakeWakeArrivedNP();
FxPkgPnp::PowerPolStarted();
FxPkgPnp::PowerPolStartedCancelTimer();
FxPkgPnp::PowerPolStartedIdleCapable();
FxPkgPnp::PowerPolStartedIdleCapableCancelTimerForSleep();
FxPkgPnp::PowerPolStartedWakeCapable();
FxPkgPnp::PowerPolStartedWakeCapableCancelTimerForSleep();
FxPkgPnp::PowerPolStartedWakeCapableSleepingUsbSS();
FxPkgPnp::PowerPolStarting();
FxPkgPnp::PowerPolStartingDecideS0Wake();
FxPkgPnp::PowerPolStartingFailed();
FxPkgPnp::PowerPolStartingPoweredUp();
FxPkgPnp::PowerPolStartingPoweredUpFailed();
FxPkgPnp::PowerPolStartingSucceeded();
FxPkgPnp::PowerPolStoppedRemoving();
FxPkgPnp::PowerPolStopping();
FxPkgPnp::PowerPolStoppingCancelTimer();
FxPkgPnp::PowerPolStoppingCancelUsbSS();
FxPkgPnp::PowerPolStoppingCancelWake();
FxPkgPnp::PowerPolStoppingD0();
FxPkgPnp::PowerPolStoppingD0CancelUsbSS();
FxPkgPnp::PowerPolStoppingD0Failed();
FxPkgPnp::PowerPolStoppingDisarmWake();
FxPkgPnp::PowerPolStoppingDisarmWakeCancelWake();
FxPkgPnp::PowerPolStoppingDisarmWakeWakeCanceled();
FxPkgPnp::PowerPolStoppingFailed();
FxPkgPnp::PowerPolStoppingResetDevice();
FxPkgPnp::PowerPolStoppingResetDeviceCompletePowerUp();
FxPkgPnp::PowerPolStoppingResetDeviceFailed();
FxPkgPnp::PowerPolStoppingSendStatus();
FxPkgPnp::PowerPolSystemAsleepNoWake();
FxPkgPnp::PowerPolSystemAsleepWakeArmed();
FxPkgPnp::PowerPolSystemAsleepWakeArmedNP();
FxPkgPnp::PowerPolSystemSleepFromDeviceWaitingUnarmed();
FxPkgPnp::PowerPolSystemSleepNeedWake();
FxPkgPnp::PowerPolSystemSleepNeedWakeCompletePowerUp();
FxPkgPnp::PowerPolSystemSleepPowerRequestFailed();
FxPkgPnp::PowerPolSystemWakeDeviceToD0();
FxPkgPnp::PowerPolSystemWakeDeviceToD0CompletePowerUp();
FxPkgPnp::PowerPolSystemWakeDeviceWakeCompletePowerUp();
FxPkgPnp::PowerPolSystemWakeDeviceWakeDisabled();
FxPkgPnp::PowerPolSystemWakeDeviceWakeDisarm();
FxPkgPnp::PowerPolSystemWakeDeviceWakeDisarmNP();
FxPkgPnp::PowerPolSystemWakeDeviceWakeEnabled();
FxPkgPnp::PowerPolSystemWakeDeviceWakeEnabledNP();
FxPkgPnp::PowerPolSystemWakeDeviceWakeEnabledWakeCanceled();
FxPkgPnp::PowerPolSystemWakeDeviceWakeEnabledWakeCanceledNP();
FxPkgPnp::PowerPolSystemWakeDeviceWakeInterruptFired();
FxPkgPnp::PowerPolSystemWakeDeviceWakeInterruptFiredNP();
FxPkgPnp::PowerPolSystemWakeDeviceWakeTriggeredS0();
FxPkgPnp::PowerPolSystemWakeDeviceWakeTriggeredS0NP();
FxPkgPnp::PowerPolSystemWakeDeviceWokeDisarm();
FxPkgPnp::PowerPolSystemWakeDeviceWokeDisarmNP();
FxPkgPnp::PowerPolSystemWakeQueryIdle();
FxPkgPnp::PowerPolTimerExpiredDecideUsbSS();
FxPkgPnp::PowerPolTimerExpiredNoWake();
FxPkgPnp::PowerPolTimerExpiredNoWakeCompletePowerDown();
FxPkgPnp::PowerPolTimerExpiredNoWakePowerDownNotProcessed();
FxPkgPnp::PowerPolTimerExpiredNoWakePoweredDownDisableIdleTimer();
FxPkgPnp::PowerPolTimerExpiredNoWakeReturnToActive();
FxPkgPnp::PowerPolTimerExpiredNoWakeUndoPowerDown();
FxPkgPnp::PowerPolTimerExpiredWakeCapableCancelWake();
FxPkgPnp::PowerPolTimerExpiredWakeCapableCleanup();
FxPkgPnp::PowerPolTimerExpiredWakeCapableDxAllocFailed();
FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDown();
FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownFailedCancelWake();
FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownFailedUsbSS();
FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownFailedWakeCanceled();
FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownNotProcessed();
FxPkgPnp::PowerPolTimerExpiredWakeCapableSendWake();
FxPkgPnp::PowerPolTimerExpiredWakeCapableUndoPowerDown();
FxPkgPnp::PowerPolTimerExpiredWakeCapableUsbSS();
FxPkgPnp::PowerPolTimerExpiredWakeCapableWakeArrived();
FxPkgPnp::PowerPolTimerExpiredWakeCapableWakeCanceled();
FxPkgPnp::PowerPolTimerExpiredWakeCapableWakeInterruptArrived();
FxPkgPnp::PowerPolTimerExpiredWakeCompletedDisarm();
FxPkgPnp::PowerPolTimerExpiredWakeCompletedHardwareStarted();
FxPkgPnp::PowerPolTimerExpiredWakeCompletedPowerDown();
FxPkgPnp::PowerPolTimerExpiredWakeCompletedPowerUp();
FxPkgPnp::PowerPolTimerExpiredWakeSucceeded();
FxPkgPnp::PowerPolWaitingArmedIoPresentCancelUsbSS();
FxPkgPnp::PowerPolWaitingArmedQueryIdle();
FxPkgPnp::PowerPolWaitingArmedStoppingCancelUsbSS();
FxPkgPnp::PowerPolWaitingArmedUsbSS();
FxPkgPnp::PowerPolWaitingArmedWakeFailedCancelUsbSS();
FxPkgPnp::PowerPolWaitingArmedWakeInterruptFired();
FxPkgPnp::PowerPolWaitingArmedWakeSucceededCancelUsbSS();
FxPkgPnp::PowerPolWaitingUnarmedQueryIdle();
FxPkgPnp::PowerPolWakeCapableDeviceIdle();
FxPkgPnp::PowerPolWakeCapableUsbSSCompleted();
FxPkgPnp::PowerPolWakeFailedUsbSS();
FxPkgPnp::PowerPolWokeFromS0();
FxPkgPnp::PowerPolWokeFromS0NotifyDriver();
FxPkgPnp::PowerPolWokeFromS0UsbSS();
FxPkgPnp::PowerPolicyBlockChildrenPowerUp();
FxPkgPnp::PowerPolicyCanChildPowerUp();
FxPkgPnp::PowerPolicyCanIdlePowerDown();
FxPkgPnp::PowerPolicyCancelUsbSSIfCapable();
FxPkgPnp::PowerPolicyCancelWaitWake();
FxPkgPnp::PowerPolicyChildPoweredDown();
FxPkgPnp::PowerPolicyChildrenCanPowerUp();
FxPkgPnp::PowerPolicyCompleteSystemPowerIrp();
FxPkgPnp::PowerPolicyDisarmWakeFromSx();
FxPkgPnp::PowerPolicyGetCurrentWakeReason();
FxPkgPnp::PowerPolicyGetDeviceDeepestDeviceWakeState();
FxPkgPnp::PowerPolicyHandleSystemQueryPower();
FxPkgPnp::PowerPolicyIsWakeEnabled();
FxPkgPnp::PowerPolicyPostParentToD0ToChildren();
FxPkgPnp::PowerPolicyPowerDownForSx();
FxPkgPnp::PowerPolicyProcessEvent();
FxPkgPnp::PowerPolicyProcessEventInner();
FxPkgPnp::PowerPolicySendDevicePowerRequest();
FxPkgPnp::PowerPolicySendWaitWakeRequest();
FxPkgPnp::PowerPolicySetS0IdleSettings();
FxPkgPnp::PowerPolicySetS0IdleState();
FxPkgPnp::PowerPolicySetSxWakeSettings();
FxPkgPnp::PowerPolicySetSxWakeState();
FxPkgPnp::PowerPolicySubmitUsbIdleNotification();
FxPkgPnp::PowerPolicyUpdateSystemWakeSource();
FxPkgPnp::PowerPowerFailedPowerDown();
FxPkgPnp::PowerProcessEvent();
FxPkgPnp::PowerProcessEventInner();
FxPkgPnp::PowerReportPowerDownFailed();
FxPkgPnp::PowerReportPowerUpFailed();
FxPkgPnp::PowerReportPowerUpFailedDerefParent();
FxPkgPnp::PowerSendPowerDownEvents();
FxPkgPnp::PowerSendPowerDownFailureEvent();
FxPkgPnp::PowerSendPowerUpEvents();
FxPkgPnp::PowerSendPowerUpFailureEvent();
FxPkgPnp::PowerSetDevicePowerState();
FxPkgPnp::PowerStartSelfManagedIo();
FxPkgPnp::PowerStartSelfManagedIoFailed();
FxPkgPnp::PowerStartSelfManagedIoFailedNP();
FxPkgPnp::PowerStartSelfManagedIoFailedStarted();
FxPkgPnp::PowerStartSelfManagedIoFailedStartedNP();
FxPkgPnp::PowerStartSelfManagedIoNP();
FxPkgPnp::PowerStartingCheckDeviceType();
FxPkgPnp::PowerStartingChild();
FxPkgPnp::PowerStoppedCompleteDx();
FxPkgPnp::PowerUpFailed();
FxPkgPnp::PowerUpFailedDerefParent();
FxPkgPnp::PowerUpFailedDerefParentNP();
FxPkgPnp::PowerUpFailedNP();
FxPkgPnp::PowerUpFailedPowerDown();
FxPkgPnp::PowerUpFailedPowerDownNP();
FxPkgPnp::PowerWakePending();
FxPkgPnp::PowerWakePendingNP();
FxPkgPnp::PowerWaking();
FxPkgPnp::PowerWakingConnectInterrupt();
FxPkgPnp::PowerWakingConnectInterruptFailed();
FxPkgPnp::PowerWakingConnectInterruptFailedNP();
FxPkgPnp::PowerWakingConnectInterruptNP();
FxPkgPnp::PowerWakingDmaEnable();
FxPkgPnp::PowerWakingDmaEnableFailed();
FxPkgPnp::PowerWakingDmaEnableFailedNP();
FxPkgPnp::PowerWakingDmaEnableNP();
FxPkgPnp::PowerWakingNP();
FxPkgPnp::ProcessDelayedDeletion();
FxPkgPnp::QueryForCapabilities();
FxPkgPnp::QueryForD3ColdInterface();
FxPkgPnp::ReadRegistryS0Idle();
FxPkgPnp::ReadRegistrySxWake();
FxPkgPnp::RegisterCallbacks();
FxPkgPnp::RegisterPowerPolicyWmiInstance();
FxPkgPnp::ReleasePowerThread();
FxPkgPnp::RemoveChildList();
FxPkgPnp::RemoveDmaEnabler();
FxPkgPnp::RemoveWorkItemForSetDeviceFailed();
FxPkgPnp::RevertUsageNotificationFlags();
FxPkgPnp::SaveState();
FxPkgPnp::SendEventToAllWakeInterrupts();
FxPkgPnp::SetDeviceFailed();
FxPkgPnp::SetDeviceFailedAttemptRestart();
FxPkgPnp::SetPendingPnpIrp();
FxPkgPnp::SetPnpCaps();
FxPkgPnp::SetPnpState();
FxPkgPnp::SetPowerCaps();
FxPkgPnp::SetSpecialFileSupport();
FxPkgPnp::SetUsageNotificationFlags();
FxPkgPnp::SleepStudyEvaluateDripsConstraint();
FxPkgPnp::SleepStudyEvaluateParticipation();
FxPkgPnp::SleepStudyRegisterBlockingComponents();
FxPkgPnp::SleepStudyResetBlockersForD0();
FxPkgPnp::SleepStudyStop();
FxPkgPnp::UpdateWmiInstanceForS0Idle();
FxPkgPnp::UpdateWmiInstanceForSxWake();
FxPkgPnp::ValidateCmResource();
FxPkgPnp::ValidateInterruptResourceCm();
FxPkgPnp::_DispatchWaitWake();
FxPkgPnp::_PnpCancelRemoveDevice();
FxPkgPnp::_PnpCancelStopDevice();
FxPkgPnp::_PnpDeviceUsageNotification();
FxPkgPnp::_PnpProcessEventInner();
FxPkgPnp::_PnpQueryRemoveDevice();
FxPkgPnp::_PnpQueryStopDevice();
FxPkgPnp::_PnpRemoveDevice();
FxPkgPnp::_PnpStartDevice();
FxPkgPnp::_PnpStopDevice();
FxPkgPnp::_PowerPolDevicePowerDownComplete();
FxPkgPnp::_PowerPolDevicePowerUpComplete();
FxPkgPnp::_PowerPolDeviceWaitWakeComplete();
FxPkgPnp::_PowerPolicyProcessEventInner();
FxPkgPnp::_PowerPolicyUsbSelectiveSuspendCompletionRoutine();
FxPkgPnp::_PowerPolicyWaitWakeCompletionRoutine();
FxPkgPnp::_PowerProcessEventInner();
FxPkgPnp::_PowerThreadEnqueue();
FxPkgPnp::_PowerThreadInterfaceDereference();
FxPkgPnp::_PowerThreadInterfaceReference();
FxPkgPnp::_PowerWaitWakeCancelRoutine();
FxPkgPnp::_S0IdleQueryInstance();
FxPkgPnp::_S0IdleSetInstance();
FxPkgPnp::_S0IdleSetItem();
FxPkgPnp::_SleepStudyWnfCallback();
FxPkgPnp::_SpecialTypeToUsage();
FxPkgPnp::_SxWakeQueryInstance();
FxPkgPnp::_SxWakeSetInstance();
FxPkgPnp::_SxWakeSetItem();
FxPkgPnp::_UsageToSpecialType();
FxPkgPnp::_WorkItemSetDeviceFailedAttemptRestart();
FxPkgPnp::_WorkItemSetDeviceFailedRestartAlways();
FxPkgPnp::`scalar deleting destructor'();
FxPkgPnp::~FxPkgPnp();
FxPnpDeviceD0Entry::InvokeClient();
FxPnpDeviceD0Entry::InvokeCompanionCallback();
FxPnpDeviceD0Entry::InvokeCxCallback();
FxPnpDeviceD0Entry::InvokeCxCleanupCallback();
FxPnpDeviceD0Exit::InvokeClient();
FxPnpDeviceD0Exit::InvokeCompanionCallback();
FxPnpDeviceD0Exit::InvokeCxCallback();
FxPnpDevicePrepareHardware::InvokeClient();
FxPnpDevicePrepareHardware::InvokeCompanionCallback();
FxPnpDevicePrepareHardware::InvokeCxCallback();
FxPnpDevicePrepareHardware::InvokeCxCleanupCallback();
FxPnpDeviceReleaseHardware::InvokeClient();
FxPnpDeviceReleaseHardware::InvokeCompanionCallback();
FxPnpDeviceReleaseHardware::InvokeCxCallback();
FxPnpDeviceSelfManagedIoCleanup::InvokeClient();
FxPnpDeviceSelfManagedIoCleanup::InvokeCxCallback();
FxPnpDeviceSelfManagedIoFlush::InvokeClient();
FxPnpDeviceSelfManagedIoFlush::InvokeCxCallback();
FxPnpDeviceSelfManagedIoInit::InvokeClient();
FxPnpDeviceSelfManagedIoInit::InvokeCxCallback();
FxPnpDeviceSelfManagedIoInit::InvokeCxCleanupCallback();
FxPnpDeviceSelfManagedIoRestart::InvokeClient();
FxPnpDeviceSelfManagedIoRestart::InvokeCxCallback();
FxPnpDeviceSelfManagedIoRestart::InvokeCxCleanupCallback();
FxPnpDeviceSelfManagedIoSuspend::InvokeClient();
FxPnpDeviceSelfManagedIoSuspend::InvokeCxCallback();
FxPnpDeviceSurpriseRemoval::InvokeClient();
FxPnpDeviceSurpriseRemoval::InvokeCxCallback();
FxPnpStateCallback::Invoke();
FxPoolAddHeaderSize();
FxPoolAllocator();
FxPoolDump();
FxPoolFree();
FxPoolInitialize();
FxPoolInsertNonPagedAllocateTracker();
FxPoolInsertPagedAllocateTracker();
FxPoolRemoveNonPagedAllocateTracker();
FxPoolRemovePagedAllocateTracker();
FxPostProcessInfo::Evaluate();
FxPowerDeviceArmWakeFromSx::Invoke();
FxPowerIdleMachine::CancelIdleTimer();
FxPowerIdleMachine::CancelTimer();
FxPowerIdleMachine::CheckIoCount();
FxPowerIdleMachine::DecrementIo();
FxPowerIdleMachine::DisableTimer();
FxPowerIdleMachine::Disabled();
FxPowerIdleMachine::Disabling();
FxPowerIdleMachine::DisablingTimerExpired();
FxPowerIdleMachine::EnableTimer();
FxPowerIdleMachine::GoingToDx();
FxPowerIdleMachine::InDx();
FxPowerIdleMachine::InDxDisabled();
FxPowerIdleMachine::InDxEnabled();
FxPowerIdleMachine::InDxIoIncrement();
FxPowerIdleMachine::InDxPowerUpFailure();
FxPowerIdleMachine::InDxStopped();
FxPowerIdleMachine::IoDecrement();
FxPowerIdleMachine::PowerFailed();
FxPowerIdleMachine::PowerReferenceWorker();
FxPowerIdleMachine::PowerUp();
FxPowerIdleMachine::PowerUpComplete();
FxPowerIdleMachine::ProcessEventLocked();
FxPowerIdleMachine::ProcessPowerEvent();
FxPowerIdleMachine::QueryReturnToIdle();
FxPowerIdleMachine::Reset();
FxPowerIdleMachine::SendD0Notification();
FxPowerIdleMachine::Start();
FxPowerIdleMachine::StartTimer();
FxPowerIdleMachine::Started();
FxPowerIdleMachine::StartedPowerFailed();
FxPowerIdleMachine::StartedPowerUp();
FxPowerIdleMachine::Stop();
FxPowerIdleMachine::Stopped();
FxPowerIdleMachine::TimedOutDisabled();
FxPowerIdleMachine::TimedOutEnabled();
FxPowerIdleMachine::TimedOutIoIncrement();
FxPowerIdleMachine::TimedOutPowerDown();
FxPowerIdleMachine::TimedOutPowerDownFailed();
FxPowerIdleMachine::TimerExpired();
FxPowerIdleMachine::TimingOut();
FxPowerIdleMachine::_PowerTimeoutDpcRoutine();
FxPowerPolicyMachine::InitUsbSS();
FxPowerPolicyOwnerSettings::CleanupPowerCallback();
FxPowerPolicyOwnerSettings::FxPowerPolicyOwnerSettings();
FxPowerPolicyOwnerSettings::Init();
FxPowerPolicyOwnerSettings::_PowerStateCallback();
FxPowerPolicyOwnerSettings::~FxPowerPolicyOwnerSettings();
FxPowerPolicyStateCallback::Invoke();
FxPowerStateCallback::Invoke();
FxPoxInterface::ComponentActiveCallback();
FxPoxInterface::ComponentIdleCallback();
FxPoxInterface::CreateDevicePowerRequirementMachine();
FxPoxInterface::DeclareComponentIdle();
FxPoxInterface::DeviceIsPoweredOn();
FxPoxInterface::DprProcessEventFromPoxCallback();
FxPoxInterface::GetPowerFrameworkSettings();
FxPoxInterface::InitializeComponents();
FxPoxInterface::NotifyDevicePowerDown();
FxPoxInterface::PowerControlCallback();
FxPoxInterface::PowerNotRequiredCallback();
FxPoxInterface::PowerNotRequiredCallbackWorker();
FxPoxInterface::PowerRequiredCallback();
FxPoxInterface::PowerRequiredCallbackWorker();
FxPoxInterface::PoxRegisterDevice();
FxPoxInterface::RequestComponentActive();
FxPoxInterface::SimulateDevicePowerRequired();
FxPoxInterface::StateCallback();
FxPoxInterface::UninitializeComponents();
FxPrePostCallback::InvokeCompanionCallback();
FxPrePostCallback::InvokeCxCleanupCallback();
FxPrePostCallback::InvokeStateful();
FxPrePostCallback::InvokeStateless();
FxPrePostCallback::IssueCleanupCxCallbacks();
FxPrePostCallback::IssuePostCxCallbacks();
FxPrePostCallback::IssuePreCxCallbacksStateful();
FxPrePostCallback::IssuePreCxCallbacksStateless();
FxPrePostCallback::_InitializeContext();
FxProbeAndLockForRead();
FxProbeAndLockForWrite();
FxProbeAndLockWithAccess();
FxPurgeBugCheckDriverInfo();
FxQueryInterface::_QueryForInterface();
FxQueryInterface::`scalar deleting destructor'();
FxRegKey::FxRegKey();
FxRegKey::_QueryQuadWord();
FxRegKey::_QueryULong();
FxRegKey::_QueryValue();
FxRegKey::_VerifyMultiSzString();
FxRegKey::`scalar deleting destructor'();
FxRegisterBugCheckCallback();
FxRegistrySettingsInitialize();
FxRelatedDevice::FxRelatedDevice();
FxRelatedDevice::`scalar deleting destructor'();
FxRelatedDeviceList::Compare();
FxRelatedDeviceList::EntryRemoved();
FxRelatedDeviceList::GetNextEntry();
FxRelatedDeviceList::ProcessAdd();
FxRelatedDeviceList::`scalar deleting destructor'();
FxRequest::AddIrpReference();
FxRequest::AddRefOverride();
FxRequest::AssignMemoryBuffers();
FxRequest::Complete();
FxRequest::CompleteInternal();
FxRequest::CompleteWithPriority();
FxRequest::CopyCompletionParams();
FxRequest::FreeRequest();
FxRequest::FxRequest();
FxRequest::GetDeviceControlOutputMdl();
FxRequest::GetDeviceControlOutputMemoryObject();
FxRequest::GetInformation();
FxRequest::GetIrp();
FxRequest::GetMdl();
FxRequest::GetMemoryObject();
FxRequest::GetNextRequest();
FxRequest::GetParameters();
FxRequest::GetRequestorProcessId();
FxRequest::GetStatus();
FxRequest::InsertHeadIrpQueue();
FxRequest::InsertTailIrpQueue();
FxRequest::IsCancelled();
FxRequest::PostProcessCompletion();
FxRequest::PostProcessCompletionForReserved();
FxRequest::PostProcessSendAndForget();
FxRequest::PreProcessCompletionForDriverRequest();
FxRequest::PreProcessSendAndForget();
FxRequest::ProbeAndLockForRead();
FxRequest::ProbeAndLockForWrite();
FxRequest::QueryInterface();
FxRequest::Release();
FxRequest::ReleaseIrpReference();
FxRequest::ReleaseOverride();
FxRequest::RemoveFromIrpQueue();
FxRequest::Reuse();
FxRequest::SetCompletionState();
FxRequest::Vf_VerifierBreakpoint_RequestEarlyDisposeDeferred();
FxRequest::Vf_VerifyCompleteInternal();
FxRequest::Vf_VerifyInsertIrpQueue();
FxRequest::Vf_VerifyPreProcessSendAndForget();
FxRequest::Vf_VerifyProbeAndLock();
FxRequest::Vf_VerifyRequestCanBeCompleted();
FxRequest::Vf_VerifyRequestIsAllocatedFromIo();
FxRequest::Vf_VerifyRequestIsCancelable();
FxRequest::Vf_VerifyRequestIsCurrentStackValid();
FxRequest::Vf_VerifyRequestIsDriverOwned();
FxRequest::Vf_VerifyRequestIsInCallerContext();
FxRequest::Vf_VerifyRequestIsInEvtIoStopContext();
FxRequest::Vf_VerifyRequestIsNotCancelable();
FxRequest::Vf_VerifyRequestIsNotCompleted();
FxRequest::Vf_VerifyRequestIsTagRequest();
FxRequest::Vf_VerifyStopAcknowledge();
FxRequest::_Create();
FxRequest::_CreateForPackage();
FxRequest::`scalar deleting destructor'();
FxRequestBase::Cancel();
FxRequestBase::CancelTimer();
FxRequestBase::ClearFieldsForReuse();
FxRequestBase::ClearVerifierFlags();
FxRequestBase::CompleteSubmitted();
FxRequestBase::ContextReleaseAndRestore();
FxRequestBase::CreateTimer();
FxRequestBase::Dispose();
FxRequestBase::FreeMdls();
FxRequestBase::SetContext();
FxRequestBase::SetSubmitIrp();
FxRequestBase::SetVerifierFlags();
FxRequestBase::ValidateTarget();
FxRequestBase::VerifierSetFormatted();
FxRequestBase::Vf_VerifyDispose();
FxRequestBase::_TimerDPC();
FxRequestBase::`scalar deleting destructor'();
FxRequestBase::~FxRequestBase();
FxRequestBuffer::AssignValues();
FxRequestBuffer::FxRequestBuffer();
FxRequestBuffer::GetBuffer();
FxRequestBuffer::GetBufferLength();
FxRequestBuffer::GetOrAllocateMdl();
FxRequestBuffer::SetMemory();
FxRequestBuffer::ValidateMemoryDescriptor();
FxRequestContext::CopyParameters();
FxRequestContext::Dispose();
FxRequestContext::FormatReadParams();
FxRequestContext::FormatWriteParams();
FxRequestContext::ReleaseAndRestore();
FxRequestContext::StoreAndReferenceMemory();
FxRequestContext::_StoreAndReferenceMemoryWorker();
FxRequestContext::`scalar deleting destructor'();
FxRequestFromLookaside::SelfDestruct();
FxRequestFromLookaside::`scalar deleting destructor'();
FxRequestMemory::Create();
FxRequestMemory::FxRequestMemory();
FxRequestMemory::GetBuffer();
FxRequestMemory::GetFlags();
FxRequestMemory::GetMdl();
FxRequestMemory::QueryInterface();
FxRequestMemory::SetMdl();
FxRequestMemory::`scalar deleting destructor'();
FxRequestMemory::~FxRequestMemory();
FxRequestOutputBuffer::AddRef();
FxRequestOutputBuffer::Delete();
FxRequestOutputBuffer::GetBuffer();
FxRequestOutputBuffer::GetBufferSize();
FxRequestOutputBuffer::GetDriverGlobals();
FxRequestOutputBuffer::GetFlags();
FxRequestOutputBuffer::GetHandle();
FxRequestOutputBuffer::GetMdl();
FxRequestOutputBuffer::Release();
FxRequestSystemBuffer::AddRef();
FxRequestSystemBuffer::Delete();
FxRequestSystemBuffer::GetBuffer();
FxRequestSystemBuffer::GetBufferSize();
FxRequestSystemBuffer::GetDriverGlobals();
FxRequestSystemBuffer::GetFlags();
FxRequestSystemBuffer::GetHandle();
FxRequestSystemBuffer::GetMdl();
FxRequestSystemBuffer::Release();
FxRequestTimer::`scalar deleting destructor'();
FxResourceCm::FxResourceCm();
FxResourceCm::`scalar deleting destructor'();
FxResourceCollection::AddAt();
FxResourceCollection::FxResourceCollection();
FxResourceCollection::RemoveAndDelete();
FxResourceCollection::`scalar deleting destructor'();
FxResourceIo::FxResourceIo();
FxResourceIo::`scalar deleting destructor'();
FxSelfManagedIoMachine::Cleanup();
FxSelfManagedIoMachine::Flushing();
FxSelfManagedIoMachine::FxSelfManagedIoMachine();
FxSelfManagedIoMachine::Init();
FxSelfManagedIoMachine::InitStartedFailedPost();
FxSelfManagedIoMachine::InitializeMachine();
FxSelfManagedIoMachine::ProcessEvent();
FxSelfManagedIoMachine::RestartedFailedPost();
FxSelfManagedIoMachine::Restarting();
FxSelfManagedIoMachine::Suspending();
FxSelfManagedIoMachine::_CreateAndInit();
FxSpinLock::FxSpinLock();
FxSpinLock::`scalar deleting destructor'();
FxSpinLockTransactionedList::AcquireLock();
FxSpinLockTransactionedList::ReleaseLock();
FxString::FxString();
FxString::`scalar deleting destructor'();
FxSyncRequest::FxSyncRequest();
FxSyncRequest::SelfDestruct();
FxSyncRequest::`scalar deleting destructor'();
FxSyncRequest::~FxSyncRequest();
FxSystemThread::CreateThread();
FxSystemThread::ExitThread();
FxSystemThread::FxSystemThread();
FxSystemThread::QueueWorkItem();
FxSystemThread::StaticThreadThunk();
FxSystemThread::Thread();
FxSystemThread::_CreateAndInit();
FxSystemThread::`scalar deleting destructor'();
FxSystemWorkItem::DecrementWorkItemQueued();
FxSystemWorkItem::Dispose();
FxSystemWorkItem::EnqueueWorker();
FxSystemWorkItem::FxSystemWorkItem();
FxSystemWorkItem::QueryInterface();
FxSystemWorkItem::_Create();
FxSystemWorkItem::_WorkItemThunk();
FxSystemWorkItem::`scalar deleting destructor'();
FxSystemWorkItem::~FxSystemWorkItem();
FxTagHistory::FxTagHistory();
FxTagHistory::~FxTagHistory();
FxTagTracker::CheckForAbandondedTags();
FxTagTracker::CopyStackFrames();
FxTagTracker::CreateAndInitialize();
FxTagTracker::FxTagTracker();
FxTagTracker::UpdateTagHistory();
FxTagTracker::`scalar deleting destructor'();
FxTagTracker::~FxTagTracker();
FxTagTrackingBlock::FxTagTrackingBlock();
FxTagTrackingBlock::`scalar deleting destructor'();
FxThreadedEventQueue::FxThreadedEventQueue();
FxThreadedEventQueue::Init();
FxThreadedEventQueue::QueueToThread();
FxThreadedEventQueue::_WorkItemCallback();
FxThreadedEventQueue::_WorkerThreadRoutine();
FxTimer::Dispose();
FxTimer::FlushAndRundown();
FxTimer::FxTimer();
FxTimer::Initialize();
FxTimer::Start();
FxTimer::Stop();
FxTimer::TimerHandler();
FxTimer::_Create();
FxTimer::_FxTimerDpcThunk();
FxTimer::_FxTimerExtCallbackThunk();
FxTimer::_FxTimerWorkItemCallback();
FxTimer::`scalar deleting destructor'();
FxTimer::~FxTimer();
FxTraceInitialize();
FxTransactionedList::Add();
FxTransactionedList::Compare();
FxTransactionedList::EntryAdded();
FxTransactionedList::EntryRemoved();
FxTransactionedList::GetNextEntryLocked();
FxTransactionedList::LockForEnum();
FxTransactionedList::ProcessAdd();
FxTransactionedList::Remove();
FxTransactionedList::RemoveLocked();
FxTransactionedList::SearchForAndRemove();
FxTransactionedList::UnlockFromEnum();
FxTransactionedList::~FxTransactionedList();
FxUninitializeBugCheckDriverInfo();
FxUnregisterBugCheckCallback();
FxUsbCreateConfigRequest();
FxUsbDevice::CancelSentIo();
FxUsbDevice::CleanupInterfacePipesAndDelete();
FxUsbDevice::CreateInterfaces();
FxUsbDevice::CreateIsochUrb();
FxUsbDevice::CreateUrb();
FxUsbDevice::CyclePort();
FxUsbDevice::Deconfig();
FxUsbDevice::Dispose();
FxUsbDevice::FormatControlRequest();
FxUsbDevice::FormatCycleRequest();
FxUsbDevice::FormatStringRequest();
FxUsbDevice::FxUsbDevice();
FxUsbDevice::GetConfigDescriptor();
FxUsbDevice::GetFxUrbTypeForRequest();
FxUsbDevice::GetInterfaceFromNumber();
FxUsbDevice::GetPortStatus();
FxUsbDevice::GetString();
FxUsbDevice::InitDevice();
FxUsbDevice::IsConnected();
FxUsbDevice::IsObjectDisposedOnRemove();
FxUsbDevice::PipesGotoRemoveState();
FxUsbDevice::Purge();
FxUsbDevice::QueryUsbCapability();
FxUsbDevice::Reset();
FxUsbDevice::SelectConfig();
FxUsbDevice::SelectConfigDescriptor();
FxUsbDevice::SelectConfigMulti();
FxUsbDevice::SelectConfigSingle();
FxUsbDevice::Start();
FxUsbDevice::Stop();
FxUsbDevice::_CleanupPipesRequests();
FxUsbDevice::`scalar deleting destructor'();
FxUsbDevice::~FxUsbDevice();
FxUsbDeviceControlContext::CopyParameters();
FxUsbDeviceControlContext::Dispose();
FxUsbDeviceControlContext::FxUsbDeviceControlContext();
FxUsbDeviceControlContext::GetUsbdStatus();
FxUsbDeviceControlContext::ReleaseAndRestore();
FxUsbDeviceControlContext::StoreAndReferenceMemory();
FxUsbDeviceControlContext::`scalar deleting destructor'();
FxUsbDeviceControlContext::~FxUsbDeviceControlContext();
FxUsbDeviceStringContext::AllocateDescriptor();
FxUsbDeviceStringContext::AllocateUrb();
FxUsbDeviceStringContext::CopyParameters();
FxUsbDeviceStringContext::Dispose();
FxUsbDeviceStringContext::FxUsbDeviceStringContext();
FxUsbDeviceStringContext::GetUsbdStatus();
FxUsbDeviceStringContext::`scalar deleting destructor'();
FxUsbFindDescriptorType();
FxUsbIdleInfo::Initialize();
FxUsbIdleInfo::_UsbIdleCallback();
FxUsbIdleInfo::`scalar deleting destructor'();
FxUsbInterface::CleanUpAndDelete();
FxUsbInterface::CopyEndpointFieldsFromDescriptor();
FxUsbInterface::CreateSettings();
FxUsbInterface::FormatSelectSettingUrb();
FxUsbInterface::FxUsbInterface();
FxUsbInterface::GetConfiguredPipe();
FxUsbInterface::GetConfiguredSettingIndex();
FxUsbInterface::GetEndpointInformation();
FxUsbInterface::GetSettingDescriptor();
FxUsbInterface::SelectSetting();
FxUsbInterface::SelectSettingByDescriptor();
FxUsbInterface::SelectSettingByIndex();
FxUsbInterface::SetInfo();
FxUsbInterface::`scalar deleting destructor'();
FxUsbInterface::~FxUsbInterface();
FxUsbParseConfigurationDescriptor();
FxUsbPipe::Dispose();
FxUsbPipe::FormatAbortRequest();
FxUsbPipe::FormatResetRequest();
FxUsbPipe::FormatTransferRequest();
FxUsbPipe::FxUsbPipe();
FxUsbPipe::GetInformation();
FxUsbPipe::GotoPurgeState();
FxUsbPipe::GotoRemoveState();
FxUsbPipe::GotoStartState();
FxUsbPipe::GotoStopState();
FxUsbPipe::InitContinuousReader();
FxUsbPipe::Reset();
FxUsbPipe::WaitForSentIoToComplete();
FxUsbPipe::_FormatTransfer();
FxUsbPipe::_SendTransfer();
FxUsbPipe::_UsbdPipeTypeToWdf();
FxUsbPipe::`scalar deleting destructor'();
FxUsbPipe::~FxUsbPipe();
FxUsbPipeContinuousReader::CancelRepeaters();
FxUsbPipeContinuousReader::Config();
FxUsbPipeContinuousReader::DeleteMemory();
FxUsbPipeContinuousReader::FormatRepeater();
FxUsbPipeContinuousReader::FxUsbPipeContinuousReader();
FxUsbPipeContinuousReader::FxUsbPipeRequestWorkItemHandler();
FxUsbPipeContinuousReader::QueueWorkItemLocked();
FxUsbPipeContinuousReader::ResubmitRepeater();
FxUsbPipeContinuousReader::_FxUsbPipeContinuousReadDpc();
FxUsbPipeContinuousReader::_FxUsbPipeRequestComplete();
FxUsbPipeContinuousReader::_FxUsbPipeRequestWorkItemThunk();
FxUsbPipeContinuousReader::`scalar deleting destructor'();
FxUsbPipeContinuousReader::~FxUsbPipeContinuousReader();
FxUsbPipeRepeatReader::FxUsbPipeRepeatReader();
FxUsbPipeRepeatReader::~FxUsbPipeRepeatReader();
FxUsbPipeRequestContext::AllocateUrb();
FxUsbPipeRequestContext::Dispose();
FxUsbPipeRequestContext::FxUsbPipeRequestContext();
FxUsbPipeRequestContext::GetUsbdStatus();
FxUsbPipeRequestContext::SetInfo();
FxUsbPipeRequestContext::`scalar deleting destructor'();
FxUsbPipeRequestContext::~FxUsbPipeRequestContext();
FxUsbPipeTransferContext::CopyParameters();
FxUsbPipeTransferContext::Dispose();
FxUsbPipeTransferContext::FxUsbPipeTransferContext();
FxUsbPipeTransferContext::GetUsbdStatus();
FxUsbPipeTransferContext::ReleaseAndRestore();
FxUsbPipeTransferContext::StoreAndReferenceMemory();
FxUsbPipeTransferContext::`scalar deleting destructor'();
FxUsbPipeTransferContext::~FxUsbPipeTransferContext();
FxUsbRequestContext::CopyParameters();
FxUsbRequestContext::FxUsbRequestContext();
FxUsbRequestContext::`scalar deleting destructor'();
FxUsbTargetDeviceCreate();
FxUsbUrb::Dispose();
FxUsbUrb::FxUsbUrb();
FxUsbUrb::`scalar deleting destructor'();
FxUsbUrbContext::FxUsbUrbContext();
FxUsbUrbContext::GetUsbdStatus();
FxUsbUrbContext::ReleaseAndRestore();
FxUsbUrbContext::StoreAndReferenceMemory();
FxUsbUrbContext::`scalar deleting destructor'();
FxUsbValidateConfigDescriptorHeaders();
FxUsbValidateDescriptorType();
FxUserObject::QueryInterface();
FxUserObject::_Create();
FxUserObject::`scalar deleting destructor'();
FxValiateCx();
FxValidateObjectAttributes();
FxValidateObjectAttributesForParentHandle();
FxValidateUnicodeString();
FxVerifierBugCheckWorker();
FxVerifierCheckIrqlLevel();
FxVerifierDbgBreakPoint();
FxVerifierDriverReportedBugcheck();
FxVerifierGetObjectDebugInfo();
FxVerifierIsDebugInfoFlagSetForType();
FxVerifierLock::AllocateThreadTable();
FxVerifierLock::CreateAndInitialize();
FxVerifierLock::DumpDetails();
FxVerifierLock::FreeThreadTable();
FxVerifierLock::FxVerifierLock();
FxVerifierLock::GetThreadTableEntry();
FxVerifierLock::Initialize();
FxVerifierLock::InitializeLockOrder();
FxVerifierLock::Lock();
FxVerifierLock::ReleaseOrReplaceThreadTableEntry();
FxVerifierLock::Unlock();
FxVerifierLock::`scalar deleting destructor'();
FxVerifierNullBugCheck();
FxVerifierQueryTrackPower();
FxVerifierReadObjectDebugInfo();
FxVerifyAllocateDebugInfo();
FxWaitLock::_Create();
FxWaitLock::`scalar deleting destructor'();
FxWaitLockInternal::AcquireLock();
FxWaitLockInternal::FxWaitLockInternal();
FxWaitLockTransactionedList::AcquireLock();
FxWaitLockTransactionedList::ReleaseLock();
FxWakeInterruptMachine::CompletingD0();
FxWakeInterruptMachine::Dx();
FxWakeInterruptMachine::DxNotArmedForWake();
FxWakeInterruptMachine::Failed();
FxWakeInterruptMachine::FxWakeInterruptMachine();
FxWakeInterruptMachine::InvokingEvtIsrInD0();
FxWakeInterruptMachine::InvokingEvtIsrInDxNotArmedForWake();
FxWakeInterruptMachine::InvokingEvtIsrPostWake();
FxWakeInterruptMachine::ProcessEvent();
FxWakeInterruptMachine::ProcessEventInner();
FxWakeInterruptMachine::Waking();
FxWakeInterruptMachine::_ProcessEventInner();
FxWakeInterruptMachine::`scalar deleting destructor'();
FxWatchdog::_WatchdogDpc();
FxWmiInstance::Dispose();
FxWmiInstance::FireEvent();
FxWmiInstance::FxWmiInstance();
FxWmiInstance::`scalar deleting destructor'();
FxWmiInstanceExternal::ExecuteMethod();
FxWmiInstanceExternal::FxWmiInstanceExternal();
FxWmiInstanceExternal::IsExecuteMethodSupported();
FxWmiInstanceExternal::IsQueryInstanceSupported();
FxWmiInstanceExternal::IsSetInstanceSupported();
FxWmiInstanceExternal::IsSetItemSupported();
FxWmiInstanceExternal::QueryInstance();
FxWmiInstanceExternal::SetInstance();
FxWmiInstanceExternal::SetItem();
FxWmiInstanceExternal::_Create();
FxWmiInstanceExternal::`scalar deleting destructor'();
FxWmiInstanceInternal::ExecuteMethod();
FxWmiInstanceInternal::FxWmiInstanceInternal();
FxWmiInstanceInternal::IsExecuteMethodSupported();
FxWmiInstanceInternal::IsQueryInstanceSupported();
FxWmiInstanceInternal::IsSetInstanceSupported();
FxWmiInstanceInternal::IsSetItemSupported();
FxWmiInstanceInternal::QueryInstance();
FxWmiInstanceInternal::SetInstance();
FxWmiInstanceInternal::SetItem();
FxWmiInstanceInternal::`scalar deleting destructor'();
FxWmiIrpHandler::AddPowerPolicyProviderAndInstance();
FxWmiIrpHandler::AddProvider();
FxWmiIrpHandler::AddProviderLocked();
FxWmiIrpHandler::CompleteWmiExecuteMethodRequest();
FxWmiIrpHandler::CompleteWmiQueryAllDataRequest();
FxWmiIrpHandler::CompleteWmiQuerySingleInstanceRequest();
FxWmiIrpHandler::CompleteWmiRequest();
FxWmiIrpHandler::DecrementUpdateCount();
FxWmiIrpHandler::DeferUpdateLocked();
FxWmiIrpHandler::Deregister();
FxWmiIrpHandler::Dispatch();
FxWmiIrpHandler::FindProviderLocked();
FxWmiIrpHandler::FxWmiIrpHandler();
FxWmiIrpHandler::PostCreateDeviceInitialize();
FxWmiIrpHandler::Register();
FxWmiIrpHandler::RemoveProvider();
FxWmiIrpHandler::UpdateGuids();
FxWmiIrpHandler::_ChangeSingleInstance();
FxWmiIrpHandler::_ChangeSingleItem();
FxWmiIrpHandler::_EnableDisableEventsAndCollection();
FxWmiIrpHandler::_ExecuteMethod();
FxWmiIrpHandler::_QueryAllData();
FxWmiIrpHandler::_QuerySingleInstance();
FxWmiIrpHandler::_RegInfo();
FxWmiIrpHandler::_UpdateGuids();
FxWmiIrpHandler::`scalar deleting destructor'();
FxWmiProvider::AddInstance();
FxWmiProvider::AddInstanceLocked();
FxWmiProvider::Dispose();
FxWmiProvider::FxWmiProvider();
FxWmiProvider::GetInstanceIndex();
FxWmiProvider::GetInstanceReferenced();
FxWmiProvider::GetInstanceReferencedLocked();
FxWmiProvider::RemoveInstance();
FxWmiProvider::_Create();
FxWmiProvider::`scalar deleting destructor'();
FxWmiTraceMessage();
FxWorkItem::Dispose();
FxWorkItem::Enqueue();
FxWorkItem::FxWorkItem();
FxWorkItem::Initialize();
FxWorkItem::WaitForSignal();
FxWorkItem::WorkItemHandler();
FxWorkItem::WorkItemThunk();
FxWorkItem::_Create();
FxWorkItem::`scalar deleting destructor'();
FxWorkItem::~FxWorkItem();
FxWorkItemEventQueue::QueueWorkItem();
FxWorkItemEventQueue::_WorkItemCallback();
FxpBugCheckCallback();
FxpBugCheckCallbackFilter();
FxpGetImageBase();
FxpIsAddressKnownToWdf();
FxpLibraryBugCheckCallback();
GetDriverInfo();
GetEnhancedVerifierOptions();
GetFirstHardwareId();
GetImageName();
GetIoQueueList_ProcessQueueListEntry();
GetNameFromPath();
GetPdoPackageFromDeviceHandle();
GetStackCapabilities();
GetTriageInfo();
GsDriverEntry();
IFxMemory::CopyFromPtr();
IFxMemory::CopyToPtr();
IFxMemory::_CopyPtrToPtr();
IdleTimeoutManagement::CommitPowerFrameworkSettings();
IdleTimeoutManagement::FreezeIdleTimeoutManagementStatus();
IdleTimeoutManagement::UpdateIdleTimeoutStatus();
IdleTimeoutManagement::UseSystemManagedIdleTimeout();
IoDevObjCreateDeviceSecure();
IopDevObjApplyPostCreationSettings();
IsClientInfoValid();
IsLoggingEnabledAndNeeded();
LibraryCommission();
LibraryDecommission();
LibraryLogEvent();
LibraryRegisterClient();
LibraryUnregisterClient();
LockVerifierSection();
LogDriverInfoStream();
McGenControlCallbackV2();
McGenEventRegister();
McGenEventUnregister();
McGenEventWrite();
McTemplateK0pp();
McTemplateK0upp();
Mx::MxDbgPrint();
Mx::MxHasEnoughRemainingThreadStack();
MxTimer::Initialize();
MxTimer::InitializeEx();
MxTimer::Start();
MxTimer::StartWithReturn();
MxTimer::Stop();
MxTimer::~MxTimer();
MxWnf::MxSubscribeWnfStateChange();
MxWorkItem::Allocate();
MxWorkItem::Free();
PerfEvtDeviceD0EntryStart();
PerfEvtDeviceD0ExitStart();
PerfEvtDevicePrepareHardwareStart();
PerfEvtDeviceReleaseHardwareStart();
PerfEvtIoStopStart();
PerfEvtIoStopStop();
PiRegStateOpenClassKey();
PiRegStateReadStackCreationSettingsFromKey();
PnpPassThroughQI();
PnpPassThroughQIWorker();
PpRegStateReadCreateClassCreationSettings();
PpRegStateUpdateStackCreationSettings();
PreprocessIrp();
ProcgrpGetCurrentProcessorNumberEx();
ProcgrpGetProcessorIndexFromNumber();
ProcgrpGetProcessorNumberFromIndex();
ProcgrpQueryActiveGroupCount();
ProcgrpQueryActiveProcessorCountEx();
ProcgrpQueryGroupAffinity();
ProcgrpQueryMaximumGroupCount();
ProcgrpQueryMaximumProcessorCount();
ProcgrpQueryMaximumProcessorCountEx();
ProcgrpRevertToUserAffinityThreadEx();
ProcgrpRevertToUserGroupAffinityThread();
ProcgrpSetSystemAffinityThreadEx();
ProcgrpSetSystemGroupAffinityThread();
ProcgrpSetTargetProcessorDpcEx();
QueryAndAllocString();
RegistryReadLastLoggedTime();
RegistryWriteCurrentTime();
ReportDdiFunctionCountMismatch();
ResumeIdleWorker();
RtlAnsiCharToUnicodeChar();
RtlStringCbCatW();
RtlStringCbCopyUnicodeString();
RtlStringCchPrintfW();
RtlStringCopyWorkerA();
RtlStringCopyWorkerW();
RtlStringVPrintfWorkerW();
RtlUShortAdd();
RtlUnicodeStringCopy();
RtlUnicodeStringPrintf();
RtlUnicodeStringValidateDestWorker();
RtlUnicodeStringValidateSrcWorker();
RtlUnicodeStringValidateWorker();
RtlWideCharArrayCopyWorker();
RtlxQueryRegistryValues();
SeSddlSecurityDescriptorFromSDDL();
SeUtilSecurityInfoFromSecurityDescriptor();
SendDeviceUsageNotification();
SendDeviceUsageNotificationWorker();
SepSddlAddAceToAcl();
SepSddlDaclFromSDDLString();
SepSddlGetAclForString();
SepSddlGetSidForString();
SepSddlLookupAccessMaskInTable();
SepSddlParseWideStringUlong();
SepSddlSecurityDescriptorFromSDDLString();
StopIdleWorker();
TraceLoggingSetInformation();
USBDInternal_BuildAndSendQueryInterfaceSynchronously();
USBDInternal_BuildServicePath();
USBDInternal_BuildandSendIoctlSynchronously();
USBDInternal_QueryUsbVerifierSettings();
USBD_CreateHandle();
USBD_IsochUrbAllocate();
USBD_QueryUsbCapability();
USBD_SyncCompletionRoutine();
USBD_UrbAllocate();
USBD_UrbFree();
USBD_VerifierSettingsCallback();
UnlockVerifierSection();
VerifierPageLockHandle();
VerifyCriticalRegionEntry();
VerifyCriticalRegionExit();
VerifyIrqlExit();
VfAddContextToHandle();
VfAllocateContext();
VfEvtDeviceD0Entry();
VfEvtDeviceD0EntryPostInterruptsEnabled();
VfEvtDeviceD0Exit();
VfEvtDeviceD0ExitPreInterruptsDisabled();
VfEvtDevicePrepareHardware();
VfEvtDeviceQueryRemove();
VfEvtDeviceQueryStop();
VfEvtDeviceRelationsQuery();
VfEvtDeviceReleaseHardware();
VfEvtDeviceSelfManagedIoCleanup();
VfEvtDeviceSelfManagedIoFlush();
VfEvtDeviceSelfManagedIoInit();
VfEvtDeviceSelfManagedIoRestart();
VfEvtDeviceSelfManagedIoSuspend();
VfEvtDeviceSurpriseRemoval();
VfEvtDeviceUsageNotification();
VfEvtDeviceUsageNotificationEx();
VfEvtIoCanceledOnQueue();
VfEvtIoDefault();
VfEvtIoDeviceControl();
VfEvtIoInternalDeviceControl();
VfEvtIoRead();
VfEvtIoResume();
VfEvtIoStop();
VfEvtIoWrite();
VfWdfObjectGetTypedContext();
Vf_VerifyRequestComplete();
Vf_VerifyWdfDeviceWdmDispatchIrp();
Vf_VerifyWdfDeviceWdmDispatchIrpToIoQueue();
Vf_VerifyWdfRequestForwardToIoQueue();
Vf_VerifyWdfRequestForwardToParentDeviceIoQueue();
Vf_VerifyWdfRequestIsCanceled();
WDFCXDEVICE_INIT::_AllocateCxDeviceInit();
WDFDEVICE_INIT::AssignIoType();
WDFDEVICE_INIT::AssignName();
WDFDEVICE_INIT::ShouldCreateSecure();
WDFDEVICE_INIT::WDFDEVICE_INIT();
WDFDEVICE_INIT::_AllocateControlDeviceInit();
WDFDEVICE_INIT::`scalar deleting destructor'();
WDFDEVICE_INIT::~WDFDEVICE_INIT();
WPP_IFR_SF_();
WPP_IFR_SF_D();
WPP_IFR_SF_DD();
WPP_IFR_SF_DDD();
WPP_IFR_SF_DDDDDD();
WPP_IFR_SF_DDDDd();
WPP_IFR_SF_DDd();
WPP_IFR_SF_DDid();
WPP_IFR_SF_Dd();
WPP_IFR_SF_Ddd();
WPP_IFR_SF_Dddd();
WPP_IFR_SF_DqD();
WPP_IFR_SF_Dqq();
WPP_IFR_SF_Dqqd();
WPP_IFR_SF_L();
WPP_IFR_SF_LL();
WPP_IFR_SF_LLd();
WPP_IFR_SF_Ld();
WPP_IFR_SF_Lq();
WPP_IFR_SF_Lqd();
WPP_IFR_SF_LqqLd();
WPP_IFR_SF_Lqqd();
WPP_IFR_SF_PqD();
WPP_IFR_SF_Sd();
WPP_IFR_SF_Z();
WPP_IFR_SF_Zd();
WPP_IFR_SF__guid_d();
WPP_IFR_SF_cd();
WPP_IFR_SF_cqcqq();
WPP_IFR_SF_d();
WPP_IFR_SF_dDqq();
WPP_IFR_SF_dLd();
WPP_IFR_SF_dZq();
WPP_IFR_SF_dd();
WPP_IFR_SF_ddLLdiDD();
WPP_IFR_SF_ddd();
WPP_IFR_SF_dddDqqd();
WPP_IFR_SF_dddd();
WPP_IFR_SF_dddddd();
WPP_IFR_SF_ddi();
WPP_IFR_SF_ddiid();
WPP_IFR_SF_dii();
WPP_IFR_SF_dq();
WPP_IFR_SF_dqd();
WPP_IFR_SF_dqdd();
WPP_IFR_SF_dqq();
WPP_IFR_SF_dqqd();
WPP_IFR_SF_ds();
WPP_IFR_SF_i();
WPP_IFR_SF_idd();
WPP_IFR_SF_idii();
WPP_IFR_SF_iid();
WPP_IFR_SF_iiddiidd();
WPP_IFR_SF_iii();
WPP_IFR_SF_iqdd();
WPP_IFR_SF_q();
WPP_IFR_SF_qD();
WPP_IFR_SF_qDD();
WPP_IFR_SF_qDDDDsdisd();
WPP_IFR_SF_qDDd();
WPP_IFR_SF_qDPq();
WPP_IFR_SF_qDPqd();
WPP_IFR_SF_qDd();
WPP_IFR_SF_qDiD();
WPP_IFR_SF_qDqD();
WPP_IFR_SF_qDqd();
WPP_IFR_SF_qL();
WPP_IFR_SF_qLL();
WPP_IFR_SF_qLLd();
WPP_IFR_SF_qLd();
WPP_IFR_SF_qLqd();
WPP_IFR_SF_qLqdi();
WPP_IFR_SF_qLsqd();
WPP_IFR_SF_qPPd();
WPP_IFR_SF_qZ();
WPP_IFR_SF_qZd();
WPP_IFR_SF_qc();
WPP_IFR_SF_qcDqd();
WPP_IFR_SF_qcd();
WPP_IFR_SF_qcq();
WPP_IFR_SF_qd();
WPP_IFR_SF_qdD();
WPP_IFR_SF_qdL();
WPP_IFR_SF_qdd();
WPP_IFR_SF_qddd();
WPP_IFR_SF_qddq();
WPP_IFR_SF_qdid();
WPP_IFR_SF_qdq();
WPP_IFR_SF_qdqqqqd();
WPP_IFR_SF_qi();
WPP_IFR_SF_qid();
WPP_IFR_SF_qii();
WPP_IFR_SF_qiid();
WPP_IFR_SF_qiqd();
WPP_IFR_SF_ql();
WPP_IFR_SF_qld();
WPP_IFR_SF_qll();
WPP_IFR_SF_qq();
WPP_IFR_SF_qqD();
WPP_IFR_SF_qqDD();
WPP_IFR_SF_qqDLd();
WPP_IFR_SF_qqDd();
WPP_IFR_SF_qqDdqq();
WPP_IFR_SF_qqDq();
WPP_IFR_SF_qqDqq();
WPP_IFR_SF_qqDqqq();
WPP_IFR_SF_qqDqqqd();
WPP_IFR_SF_qqL();
WPP_IFR_SF_qqLL();
WPP_IFR_SF_qqLLL();
WPP_IFR_SF_qqLd();
WPP_IFR_SF_qqLdqqq();
WPP_IFR_SF_qqcDq();
WPP_IFR_SF_qqcDqd();
WPP_IFR_SF_qqcLq();
WPP_IFR_SF_qqcq();
WPP_IFR_SF_qqcqL();
WPP_IFR_SF_qqcqLd();
WPP_IFR_SF_qqd();
WPP_IFR_SF_qqdd();
WPP_IFR_SF_qqddd();
WPP_IFR_SF_qqdid();
WPP_IFR_SF_qqdq();
WPP_IFR_SF_qqdqdd();
WPP_IFR_SF_qqiDq();
WPP_IFR_SF_qqid();
WPP_IFR_SF_qqii();
WPP_IFR_SF_qqiid();
WPP_IFR_SF_qqq();
WPP_IFR_SF_qqqD();
WPP_IFR_SF_qqqDd();
WPP_IFR_SF_qqqd();
WPP_IFR_SF_qqqdD();
WPP_IFR_SF_qqqi();
WPP_IFR_SF_qqqq();
WPP_IFR_SF_qqqqd();
WPP_IFR_SF_qqqqi();
WPP_IFR_SF_qqqqq();
WPP_IFR_SF_qqs();
WPP_IFR_SF_qqsd();
WPP_IFR_SF_qs();
WPP_IFR_SF_qsd();
WPP_IFR_SF_s();
WPP_IFR_SF_sSLSs();
WPP_IFR_SF_sd();
WPP_IFR_SF_sq();
WPP_IFR_SF_sqq();
WPP_IFR_SF_sqqLd();
WPP_IFR_SF_sqqd();
WPP_IFR_SF_sqqii();
WPP_IFR_SF_sqqq();
WdfBindClientHelper();
WdfDeleteKmdfVersionFromRegistry();
WdfWriteKmdfVersionToRegistry();
WdmlibInit();
WdmlibIoCreateDeviceSecure();
WdmlibProcgrpInitialize();
WdmlibRtlInitUnicodeStringEx();
WppGuidToStr();
WppInitGlobalLoggerWdf();
WppIntToHex();
WppTraceCallbackWdf();
_C_specific_handler();
_DeviceUsageNotificationWorkItem();
_FX_DRIVER_GLOBALS::IsCorrectVersionRegistered();
_FX_DRIVER_GLOBALS::IsVersionGreaterThanOrEqualTo();
_FX_DRIVER_GLOBALS::RegisterClientVersion();
_FX_DRIVER_GLOBALS::Release();
_FX_DRIVER_GLOBALS::SetVerifierState();
_FX_DRIVER_GLOBALS::WaitForSignal();
_FX_DRIVER_TRACKER_CACHE_AWARE::Register();
_MxWnfStateChangeCallback();
_TlgCreateSz();
_TlgCreateWsz();
_TlgDefineProvider_annotation__Tlgg_TelemetryProviderProv();
_TlgEnableCallback();
_TlgKeywordOn();
_TlgWrite();
__GSHandlerCheck();
__GSHandlerCheckCommon();
__GSHandlerCheck_SEH();
__report_gsfailure();
__security_check_cookie();
__security_init_cookie();
_flsbuf();
_flswbuf();
_fputwc_nolock();
_get_printf_count_output();
_guard_check_icall_nop();
_guard_dispatch_icall_nop();
_invalid_parameter();
_vsnwprintf();
_vsnwprintf_l();
_woutput_l();
`vector constructor iterator'();
`vector destructor iterator'();
imp_VfWdfChildListAddOrUpdateChildDescriptionAsPresent();
imp_VfWdfChildListBeginIteration();
imp_VfWdfChildListBeginScan();
imp_VfWdfChildListCreate();
imp_VfWdfChildListEndIteration();
imp_VfWdfChildListEndScan();
imp_VfWdfChildListGetDevice();
imp_VfWdfChildListRequestChildEject();
imp_VfWdfChildListRetrieveAddressDescription();
imp_VfWdfChildListRetrieveNextDevice();
imp_VfWdfChildListRetrievePdo();
imp_VfWdfChildListUpdateAllChildDescriptionsAsPresent();
imp_VfWdfChildListUpdateChildDescriptionAsMissing();
imp_VfWdfCmResourceListAppendDescriptor();
imp_VfWdfCmResourceListGetCount();
imp_VfWdfCmResourceListGetDescriptor();
imp_VfWdfCmResourceListInsertDescriptor();
imp_VfWdfCmResourceListRemove();
imp_VfWdfCmResourceListRemoveByDescriptor();
imp_VfWdfCollectionAdd();
imp_VfWdfCollectionCreate();
imp_VfWdfCollectionGetCount();
imp_VfWdfCollectionGetFirstItem();
imp_VfWdfCollectionGetItem();
imp_VfWdfCollectionGetLastItem();
imp_VfWdfCollectionRemove();
imp_VfWdfCollectionRemoveItem();
imp_VfWdfCommonBufferCreate();
imp_VfWdfCommonBufferCreateWithConfig();
imp_VfWdfCommonBufferGetAlignedLogicalAddress();
imp_VfWdfCommonBufferGetAlignedVirtualAddress();
imp_VfWdfCommonBufferGetLength();
imp_VfWdfCompanionTargetSendTaskSynchronously();
imp_VfWdfCompanionTargetWdmGetCompanionProcess();
imp_VfWdfControlDeviceInitAllocate();
imp_VfWdfControlDeviceInitSetShutdownNotification();
imp_VfWdfControlFinishInitializing();
imp_VfWdfCxDeviceInitAllocate();
imp_VfWdfCxDeviceInitAssignWdmIrpPreprocessCallback();
imp_VfWdfCxDeviceInitSetFileObjectConfig();
imp_VfWdfCxDeviceInitSetIoInCallerContextCallback();
imp_VfWdfCxDeviceInitSetPnpPowerEventCallbacks();
imp_VfWdfCxDeviceInitSetRequestAttributes();
imp_VfWdfCxVerifierKeBugCheck();
imp_VfWdfDeviceAddDependentUsageDeviceObject();
imp_VfWdfDeviceAddQueryInterface();
imp_VfWdfDeviceAddRemovalRelationsPhysicalDevice();
imp_VfWdfDeviceAllocAndQueryProperty();
imp_VfWdfDeviceAllocAndQueryPropertyEx();
imp_VfWdfDeviceAssignMofResourceName();
imp_VfWdfDeviceAssignProperty();
imp_VfWdfDeviceAssignS0IdleSettings();
imp_VfWdfDeviceAssignSxWakeSettings();
imp_VfWdfDeviceClearRemovalRelationsDevices();
imp_VfWdfDeviceConfigureRequestDispatching();
imp_VfWdfDeviceConfigureWdmIrpDispatchCallback();
imp_VfWdfDeviceCreate();
imp_VfWdfDeviceCreateDeviceInterface();
imp_VfWdfDeviceCreateSymbolicLink();
imp_VfWdfDeviceEnqueueRequest();
imp_VfWdfDeviceGetAlignmentRequirement();
imp_VfWdfDeviceGetCharacteristics();
imp_VfWdfDeviceGetDefaultQueue();
imp_VfWdfDeviceGetDevicePnpState();
imp_VfWdfDeviceGetDevicePowerPolicyState();
imp_VfWdfDeviceGetDevicePowerState();
imp_VfWdfDeviceGetDeviceState();
imp_VfWdfDeviceGetDriver();
imp_VfWdfDeviceGetFileObject();
imp_VfWdfDeviceGetIoTarget();
imp_VfWdfDeviceGetSelfIoTarget();
imp_VfWdfDeviceGetSystemPowerAction();
imp_VfWdfDeviceIndicateWakeStatus();
imp_VfWdfDeviceInitAllowSelfIoTarget();
imp_VfWdfDeviceInitAssignName();
imp_VfWdfDeviceInitAssignSDDLString();
imp_VfWdfDeviceInitAssignWdmIrpPreprocessCallback();
imp_VfWdfDeviceInitFree();
imp_VfWdfDeviceInitRegisterPnpStateChangeCallback();
imp_VfWdfDeviceInitRegisterPowerPolicyStateChangeCallback();
imp_VfWdfDeviceInitRegisterPowerStateChangeCallback();
imp_VfWdfDeviceInitSetCharacteristics();
imp_VfWdfDeviceInitSetDeviceClass();
imp_VfWdfDeviceInitSetDeviceType();
imp_VfWdfDeviceInitSetExclusive();
imp_VfWdfDeviceInitSetFileObjectConfig();
imp_VfWdfDeviceInitSetIoInCallerContextCallback();
imp_VfWdfDeviceInitSetIoType();
imp_VfWdfDeviceInitSetIoTypeEx();
imp_VfWdfDeviceInitSetPnpPowerEventCallbacks();
imp_VfWdfDeviceInitSetPowerInrush();
imp_VfWdfDeviceInitSetPowerNotPageable();
imp_VfWdfDeviceInitSetPowerPageable();
imp_VfWdfDeviceInitSetPowerPolicyEventCallbacks();
imp_VfWdfDeviceInitSetPowerPolicyOwnership();
imp_VfWdfDeviceInitSetReleaseHardwareOrderOnFailure();
imp_VfWdfDeviceInitSetRemoveLockOptions();
imp_VfWdfDeviceInitSetRequestAttributes();
imp_VfWdfDeviceMiniportCreate();
imp_VfWdfDeviceOpenDevicemapKey();
imp_VfWdfDeviceOpenRegistryKey();
imp_VfWdfDeviceQueryProperty();
imp_VfWdfDeviceQueryPropertyEx();
imp_VfWdfDeviceRemoveDependentUsageDeviceObject();
imp_VfWdfDeviceRemoveRemovalRelationsPhysicalDevice();
imp_VfWdfDeviceResumeIdleActual();
imp_VfWdfDeviceResumeIdleNoTrack();
imp_VfWdfDeviceRetrieveCompanionTarget();
imp_VfWdfDeviceRetrieveDeviceInterfaceString();
imp_VfWdfDeviceRetrieveDeviceName();
imp_VfWdfDeviceSetAlignmentRequirement();
imp_VfWdfDeviceSetBusInformationForChildren();
imp_VfWdfDeviceSetCharacteristics();
imp_VfWdfDeviceSetDeviceInterfaceState();
imp_VfWdfDeviceSetDeviceState();
imp_VfWdfDeviceSetFailed();
imp_VfWdfDeviceSetPnpCapabilities();
imp_VfWdfDeviceSetPowerCapabilities();
imp_VfWdfDeviceSetSpecialFileSupport();
imp_VfWdfDeviceSetStaticStopRemove();
imp_VfWdfDeviceStopIdleActual();
imp_VfWdfDeviceStopIdleNoTrack();
imp_VfWdfDeviceWdmAssignPowerFrameworkSettings();
imp_VfWdfDeviceWdmDispatchIrp();
imp_VfWdfDeviceWdmDispatchIrpToIoQueue();
imp_VfWdfDeviceWdmDispatchPreprocessedIrp();
imp_VfWdfDeviceWdmGetAttachedDevice();
imp_VfWdfDeviceWdmGetDeviceObject();
imp_VfWdfDeviceWdmGetPhysicalDevice();
imp_VfWdfDmaEnablerConfigureSystemProfile();
imp_VfWdfDmaEnablerCreate();
imp_VfWdfDmaEnablerGetFragmentLength();
imp_VfWdfDmaEnablerGetMaximumLength();
imp_VfWdfDmaEnablerGetMaximumScatterGatherElements();
imp_VfWdfDmaEnablerSetMaximumScatterGatherElements();
imp_VfWdfDmaEnablerWdmGetDmaAdapter();
imp_VfWdfDmaTransactionAllocateResources();
imp_VfWdfDmaTransactionCancel();
imp_VfWdfDmaTransactionCreate();
imp_VfWdfDmaTransactionDmaCompleted();
imp_VfWdfDmaTransactionDmaCompletedFinal();
imp_VfWdfDmaTransactionDmaCompletedWithLength();
imp_VfWdfDmaTransactionExecute();
imp_VfWdfDmaTransactionFreeResources();
imp_VfWdfDmaTransactionGetBytesTransferred();
imp_VfWdfDmaTransactionGetCurrentDmaTransferLength();
imp_VfWdfDmaTransactionGetDevice();
imp_VfWdfDmaTransactionGetRequest();
imp_VfWdfDmaTransactionGetTransferInfo();
imp_VfWdfDmaTransactionInitialize();
imp_VfWdfDmaTransactionInitializeUsingOffset();
imp_VfWdfDmaTransactionInitializeUsingRequest();
imp_VfWdfDmaTransactionRelease();
imp_VfWdfDmaTransactionSetChannelConfigurationCallback();
imp_VfWdfDmaTransactionSetDeviceAddressOffset();
imp_VfWdfDmaTransactionSetImmediateExecution();
imp_VfWdfDmaTransactionSetMaximumLength();
imp_VfWdfDmaTransactionSetSingleTransferRequirement();
imp_VfWdfDmaTransactionSetTransferCompleteCallback();
imp_VfWdfDmaTransactionStopSystemTransfer();
imp_VfWdfDmaTransactionWdmGetTransferContext();
imp_VfWdfDpcCancel();
imp_VfWdfDpcCreate();
imp_VfWdfDpcEnqueue();
imp_VfWdfDpcGetParentObject();
imp_VfWdfDpcWdmGetDpc();
imp_VfWdfDriverCreate();
imp_VfWdfDriverErrorReportApiMissing();
imp_VfWdfDriverGetRegistryPath();
imp_VfWdfDriverIsVersionAvailable();
imp_VfWdfDriverMiniportUnload();
imp_VfWdfDriverOpenParametersRegistryKey();
imp_VfWdfDriverOpenPersistentStateRegistryKey();
imp_VfWdfDriverRegisterTraceInfo();
imp_VfWdfDriverRetrieveVersionString();
imp_VfWdfDriverWdmGetDriverObject();
imp_VfWdfFdoAddStaticChild();
imp_VfWdfFdoGetDefaultChildList();
imp_VfWdfFdoInitAllocAndQueryProperty();
imp_VfWdfFdoInitAllocAndQueryPropertyEx();
imp_VfWdfFdoInitOpenRegistryKey();
imp_VfWdfFdoInitQueryProperty();
imp_VfWdfFdoInitQueryPropertyEx();
imp_VfWdfFdoInitSetDefaultChildListConfig();
imp_VfWdfFdoInitSetEventCallbacks();
imp_VfWdfFdoInitSetFilter();
imp_VfWdfFdoInitWdmGetPhysicalDevice();
imp_VfWdfFdoLockStaticChildListForIteration();
imp_VfWdfFdoQueryForInterface();
imp_VfWdfFdoRetrieveNextStaticChild();
imp_VfWdfFdoUnlockStaticChildListFromIteration();
imp_VfWdfFileObjectGetDevice();
imp_VfWdfFileObjectGetFileName();
imp_VfWdfFileObjectGetFlags();
imp_VfWdfFileObjectGetInitiatorProcessId();
imp_VfWdfFileObjectWdmGetFileObject();
imp_VfWdfGetTriageInfo();
imp_VfWdfInterruptAcquireLock();
imp_VfWdfInterruptCreate();
imp_VfWdfInterruptDisable();
imp_VfWdfInterruptEnable();
imp_VfWdfInterruptGetDevice();
imp_VfWdfInterruptGetInfo();
imp_VfWdfInterruptQueueDpcForIsr();
imp_VfWdfInterruptQueueWorkItemForIsr();
imp_VfWdfInterruptReleaseLock();
imp_VfWdfInterruptReportActive();
imp_VfWdfInterruptReportInactive();
imp_VfWdfInterruptSetExtendedPolicy();
imp_VfWdfInterruptSetPolicy();
imp_VfWdfInterruptSynchronize();
imp_VfWdfInterruptTryToAcquireLock();
imp_VfWdfInterruptWdmGetInterrupt();
imp_VfWdfIoQueueAssignForwardProgressPolicy();
imp_VfWdfIoQueueCreate();
imp_VfWdfIoQueueDrain();
imp_VfWdfIoQueueDrainSynchronously();
imp_VfWdfIoQueueFindRequest();
imp_VfWdfIoQueueGetDevice();
imp_VfWdfIoQueueGetState();
imp_VfWdfIoQueuePurge();
imp_VfWdfIoQueuePurgeSynchronously();
imp_VfWdfIoQueueReadyNotify();
imp_VfWdfIoQueueRetrieveFoundRequest();
imp_VfWdfIoQueueRetrieveNextRequest();
imp_VfWdfIoQueueRetrieveRequestByFileObject();
imp_VfWdfIoQueueStart();
imp_VfWdfIoQueueStop();
imp_VfWdfIoQueueStopAndPurge();
imp_VfWdfIoQueueStopAndPurgeSynchronously();
imp_VfWdfIoQueueStopSynchronously();
imp_VfWdfIoResourceListAppendDescriptor();
imp_VfWdfIoResourceListCreate();
imp_VfWdfIoResourceListGetCount();
imp_VfWdfIoResourceListGetDescriptor();
imp_VfWdfIoResourceListInsertDescriptor();
imp_VfWdfIoResourceListRemove();
imp_VfWdfIoResourceListRemoveByDescriptor();
imp_VfWdfIoResourceListUpdateDescriptor();
imp_VfWdfIoResourceRequirementsListAppendIoResList();
imp_VfWdfIoResourceRequirementsListGetCount();
imp_VfWdfIoResourceRequirementsListGetIoResList();
imp_VfWdfIoResourceRequirementsListInsertIoResList();
imp_VfWdfIoResourceRequirementsListRemove();
imp_VfWdfIoResourceRequirementsListRemoveByIoResList();
imp_VfWdfIoResourceRequirementsListSetInterfaceType();
imp_VfWdfIoResourceRequirementsListSetSlotNumber();
imp_VfWdfIoTargetAllocAndQueryTargetProperty();
imp_VfWdfIoTargetClose();
imp_VfWdfIoTargetCloseForQueryRemove();
imp_VfWdfIoTargetCreate();
imp_VfWdfIoTargetFormatRequestForInternalIoctl();
imp_VfWdfIoTargetFormatRequestForInternalIoctlOthers();
imp_VfWdfIoTargetFormatRequestForIoctl();
imp_VfWdfIoTargetFormatRequestForRead();
imp_VfWdfIoTargetFormatRequestForWrite();
imp_VfWdfIoTargetGetDevice();
imp_VfWdfIoTargetGetState();
imp_VfWdfIoTargetOpen();
imp_VfWdfIoTargetPurge();
imp_VfWdfIoTargetQueryForInterface();
imp_VfWdfIoTargetQueryTargetProperty();
imp_VfWdfIoTargetSelfAssignDefaultIoQueue();
imp_VfWdfIoTargetSendInternalIoctlOthersSynchronously();
imp_VfWdfIoTargetSendInternalIoctlSynchronously();
imp_VfWdfIoTargetSendIoctlSynchronously();
imp_VfWdfIoTargetSendReadSynchronously();
imp_VfWdfIoTargetSendWriteSynchronously();
imp_VfWdfIoTargetStart();
imp_VfWdfIoTargetStop();
imp_VfWdfIoTargetWdmGetTargetDeviceObject();
imp_VfWdfIoTargetWdmGetTargetFileHandle();
imp_VfWdfIoTargetWdmGetTargetFileObject();
imp_VfWdfIoTargetWdmGetTargetPhysicalDevice();
imp_VfWdfLookasideListCreate();
imp_VfWdfMemoryAssignBuffer();
imp_VfWdfMemoryCopyFromBuffer();
imp_VfWdfMemoryCopyToBuffer();
imp_VfWdfMemoryCreate();
imp_VfWdfMemoryCreateFromLookaside();
imp_VfWdfMemoryCreatePreallocated();
imp_VfWdfMemoryGetBuffer();
imp_VfWdfObjectAcquireLock();
imp_VfWdfObjectAllocateContext();
imp_VfWdfObjectContextGetObject();
imp_VfWdfObjectCreate();
imp_VfWdfObjectDelete();
imp_VfWdfObjectDereferenceActual();
imp_VfWdfObjectGetTypedContextWorker();
imp_VfWdfObjectQuery();
imp_VfWdfObjectReferenceActual();
imp_VfWdfObjectReleaseLock();
imp_VfWdfPdoAddEjectionRelationsPhysicalDevice();
imp_VfWdfPdoClearEjectionRelationsDevices();
imp_VfWdfPdoGetParent();
imp_VfWdfPdoInitAddCompatibleID();
imp_VfWdfPdoInitAddDeviceText();
imp_VfWdfPdoInitAddHardwareID();
imp_VfWdfPdoInitAllocate();
imp_VfWdfPdoInitAllowForwardingRequestToParent();
imp_VfWdfPdoInitAssignContainerID();
imp_VfWdfPdoInitAssignDeviceID();
imp_VfWdfPdoInitAssignInstanceID();
imp_VfWdfPdoInitAssignRawDevice();
imp_VfWdfPdoInitSetDefaultLocale();
imp_VfWdfPdoInitSetEventCallbacks();
imp_VfWdfPdoMarkMissing();
imp_VfWdfPdoRemoveEjectionRelationsPhysicalDevice();
imp_VfWdfPdoRequestEject();
imp_VfWdfPdoRetrieveAddressDescription();
imp_VfWdfPdoRetrieveIdentificationDescription();
imp_VfWdfPdoUpdateAddressDescription();
imp_VfWdfRegistryAssignMemory();
imp_VfWdfRegistryAssignMultiString();
imp_VfWdfRegistryAssignString();
imp_VfWdfRegistryAssignULong();
imp_VfWdfRegistryAssignUnicodeString();
imp_VfWdfRegistryAssignValue();
imp_VfWdfRegistryClose();
imp_VfWdfRegistryCreateKey();
imp_VfWdfRegistryOpenKey();
imp_VfWdfRegistryQueryMemory();
imp_VfWdfRegistryQueryMultiString();
imp_VfWdfRegistryQueryString();
imp_VfWdfRegistryQueryULong();
imp_VfWdfRegistryQueryUnicodeString();
imp_VfWdfRegistryQueryValue();
imp_VfWdfRegistryRemoveKey();
imp_VfWdfRegistryRemoveValue();
imp_VfWdfRegistryWdmGetHandle();
imp_VfWdfRequestAllocateTimer();
imp_VfWdfRequestCancelSentRequest();
imp_VfWdfRequestChangeTarget();
imp_VfWdfRequestComplete();
imp_VfWdfRequestCompleteWithInformation();
imp_VfWdfRequestCompleteWithPriorityBoost();
imp_VfWdfRequestCreate();
imp_VfWdfRequestCreateFromIrp();
imp_VfWdfRequestFormatRequestUsingCurrentType();
imp_VfWdfRequestForwardToIoQueue();
imp_VfWdfRequestForwardToParentDeviceIoQueue();
imp_VfWdfRequestGetCompletionParams();
imp_VfWdfRequestGetFileObject();
imp_VfWdfRequestGetInformation();
imp_VfWdfRequestGetIoQueue();
imp_VfWdfRequestGetParameters();
imp_VfWdfRequestGetRequestorMode();
imp_VfWdfRequestGetRequestorProcessId();
imp_VfWdfRequestGetStatus();
imp_VfWdfRequestIsCanceled();
imp_VfWdfRequestIsFrom32BitProcess();
imp_VfWdfRequestIsReserved();
imp_VfWdfRequestMarkCancelable();
imp_VfWdfRequestMarkCancelableEx();
imp_VfWdfRequestProbeAndLockUserBufferForRead();
imp_VfWdfRequestProbeAndLockUserBufferForWrite();
imp_VfWdfRequestRequeue();
imp_VfWdfRequestRetrieveInputBuffer();
imp_VfWdfRequestRetrieveInputMemory();
imp_VfWdfRequestRetrieveInputWdmMdl();
imp_VfWdfRequestRetrieveOutputBuffer();
imp_VfWdfRequestRetrieveOutputMemory();
imp_VfWdfRequestRetrieveOutputWdmMdl();
imp_VfWdfRequestRetrieveUnsafeUserInputBuffer();
imp_VfWdfRequestRetrieveUnsafeUserOutputBuffer();
imp_VfWdfRequestReuse();
imp_VfWdfRequestSend();
imp_VfWdfRequestSetCompletionRoutine();
imp_VfWdfRequestSetInformation();
imp_VfWdfRequestStopAcknowledge();
imp_VfWdfRequestUnmarkCancelable();
imp_VfWdfRequestWdmFormatUsingStackLocation();
imp_VfWdfRequestWdmGetIrp();
imp_VfWdfSpinLockAcquire();
imp_VfWdfSpinLockCreate();
imp_VfWdfSpinLockRelease();
imp_VfWdfStringCreate();
imp_VfWdfStringGetUnicodeString();
imp_VfWdfTimerCreate();
imp_VfWdfTimerGetParentObject();
imp_VfWdfTimerStart();
imp_VfWdfTimerStop();
imp_VfWdfUsbInterfaceGetConfiguredPipe();
imp_VfWdfUsbInterfaceGetConfiguredSettingIndex();
imp_VfWdfUsbInterfaceGetDescriptor();
imp_VfWdfUsbInterfaceGetEndpointInformation();
imp_VfWdfUsbInterfaceGetInterfaceNumber();
imp_VfWdfUsbInterfaceGetNumConfiguredPipes();
imp_VfWdfUsbInterfaceGetNumEndpoints();
imp_VfWdfUsbInterfaceGetNumSettings();
imp_VfWdfUsbInterfaceSelectSetting();
imp_VfWdfUsbTargetDeviceAllocAndQueryString();
imp_VfWdfUsbTargetDeviceCreate();
imp_VfWdfUsbTargetDeviceCreateIsochUrb();
imp_VfWdfUsbTargetDeviceCreateUrb();
imp_VfWdfUsbTargetDeviceCreateWithParameters();
imp_VfWdfUsbTargetDeviceCyclePortSynchronously();
imp_VfWdfUsbTargetDeviceFormatRequestForControlTransfer();
imp_VfWdfUsbTargetDeviceFormatRequestForCyclePort();
imp_VfWdfUsbTargetDeviceFormatRequestForString();
imp_VfWdfUsbTargetDeviceFormatRequestForUrb();
imp_VfWdfUsbTargetDeviceGetDeviceDescriptor();
imp_VfWdfUsbTargetDeviceGetInterface();
imp_VfWdfUsbTargetDeviceGetNumInterfaces();
imp_VfWdfUsbTargetDeviceIsConnectedSynchronous();
imp_VfWdfUsbTargetDeviceQueryString();
imp_VfWdfUsbTargetDeviceQueryUsbCapability();
imp_VfWdfUsbTargetDeviceResetPortSynchronously();
imp_VfWdfUsbTargetDeviceRetrieveConfigDescriptor();
imp_VfWdfUsbTargetDeviceRetrieveCurrentFrameNumber();
imp_VfWdfUsbTargetDeviceRetrieveInformation();
imp_VfWdfUsbTargetDeviceSelectConfig();
imp_VfWdfUsbTargetDeviceSendControlTransferSynchronously();
imp_VfWdfUsbTargetDeviceSendUrbSynchronously();
imp_VfWdfUsbTargetDeviceWdmGetConfigurationHandle();
imp_VfWdfUsbTargetPipeAbortSynchronously();
imp_VfWdfUsbTargetPipeConfigContinuousReader();
imp_VfWdfUsbTargetPipeFormatRequestForAbort();
imp_VfWdfUsbTargetPipeFormatRequestForRead();
imp_VfWdfUsbTargetPipeFormatRequestForReset();
imp_VfWdfUsbTargetPipeFormatRequestForUrb();
imp_VfWdfUsbTargetPipeFormatRequestForWrite();
imp_VfWdfUsbTargetPipeGetInformation();
imp_VfWdfUsbTargetPipeGetType();
imp_VfWdfUsbTargetPipeIsInEndpoint();
imp_VfWdfUsbTargetPipeIsOutEndpoint();
imp_VfWdfUsbTargetPipeReadSynchronously();
imp_VfWdfUsbTargetPipeResetSynchronously();
imp_VfWdfUsbTargetPipeSendUrbSynchronously();
imp_VfWdfUsbTargetPipeSetNoMaximumPacketSizeCheck();
imp_VfWdfUsbTargetPipeWdmGetPipeHandle();
imp_VfWdfUsbTargetPipeWriteSynchronously();
imp_VfWdfVerifierDbgBreakPoint();
imp_VfWdfVerifierKeBugCheck();
imp_VfWdfWaitLockAcquire();
imp_VfWdfWaitLockCreate();
imp_VfWdfWaitLockRelease();
imp_VfWdfWdmDeviceGetWdfDeviceHandle();
imp_VfWdfWdmDriverGetWdfDriverHandle();
imp_VfWdfWmiInstanceCreate();
imp_VfWdfWmiInstanceDeregister();
imp_VfWdfWmiInstanceFireEvent();
imp_VfWdfWmiInstanceGetDevice();
imp_VfWdfWmiInstanceGetProvider();
imp_VfWdfWmiInstanceRegister();
imp_VfWdfWmiProviderCreate();
imp_VfWdfWmiProviderGetDevice();
imp_VfWdfWmiProviderGetTracingHandle();
imp_VfWdfWmiProviderIsEnabled();
imp_VfWdfWorkItemCreate();
imp_VfWdfWorkItemEnqueue();
imp_VfWdfWorkItemFlush();
imp_VfWdfWorkItemGetParentObject();
imp_WdfChildListAddOrUpdateChildDescriptionAsPresent();
imp_WdfChildListBeginIteration();
imp_WdfChildListBeginScan();
imp_WdfChildListCreate();
imp_WdfChildListEndIteration();
imp_WdfChildListEndScan();
imp_WdfChildListGetDevice();
imp_WdfChildListRequestChildEject();
imp_WdfChildListRetrieveAddressDescription();
imp_WdfChildListRetrieveNextDevice();
imp_WdfChildListRetrievePdo();
imp_WdfChildListUpdateAllChildDescriptionsAsPresent();
imp_WdfChildListUpdateChildDescriptionAsMissing();
imp_WdfCmResourceListAppendDescriptor();
imp_WdfCmResourceListGetCount();
imp_WdfCmResourceListGetDescriptor();
imp_WdfCmResourceListInsertDescriptor();
imp_WdfCmResourceListRemove();
imp_WdfCmResourceListRemoveByDescriptor();
imp_WdfCollectionAdd();
imp_WdfCollectionCreate();
imp_WdfCollectionGetCount();
imp_WdfCollectionGetFirstItem();
imp_WdfCollectionGetItem();
imp_WdfCollectionGetLastItem();
imp_WdfCollectionRemove();
imp_WdfCollectionRemoveItem();
imp_WdfCommonBufferCreate();
imp_WdfCommonBufferCreateWithConfig();
imp_WdfCommonBufferGetAlignedLogicalAddress();
imp_WdfCommonBufferGetAlignedVirtualAddress();
imp_WdfCommonBufferGetLength();
imp_WdfCompanionTargetSendTaskSynchronously();
imp_WdfCompanionTargetWdmGetCompanionProcess();
imp_WdfControlDeviceInitAllocate();
imp_WdfControlDeviceInitSetShutdownNotification();
imp_WdfControlFinishInitializing();
imp_WdfCxDeviceInitAllocate();
imp_WdfCxDeviceInitAssignWdmIrpPreprocessCallback();
imp_WdfCxDeviceInitSetFileObjectConfig();
imp_WdfCxDeviceInitSetIoInCallerContextCallback();
imp_WdfCxDeviceInitSetPnpPowerEventCallbacks();
imp_WdfCxDeviceInitSetRequestAttributes();
imp_WdfCxVerifierKeBugCheck();
imp_WdfDeviceAddDependentUsageDeviceObject();
imp_WdfDeviceAddQueryInterface();
imp_WdfDeviceAddRemovalRelationsPhysicalDevice();
imp_WdfDeviceAllocAndQueryProperty();
imp_WdfDeviceAllocAndQueryPropertyEx();
imp_WdfDeviceAssignMofResourceName();
imp_WdfDeviceAssignProperty();
imp_WdfDeviceAssignS0IdleSettings();
imp_WdfDeviceAssignSxWakeSettings();
imp_WdfDeviceClearRemovalRelationsDevices();
imp_WdfDeviceConfigureRequestDispatching();
imp_WdfDeviceConfigureWdmIrpDispatchCallback();
imp_WdfDeviceCreate();
imp_WdfDeviceCreateDeviceInterface();
imp_WdfDeviceCreateSymbolicLink();
imp_WdfDeviceEnqueueRequest();
imp_WdfDeviceGetAlignmentRequirement();
imp_WdfDeviceGetCharacteristics();
imp_WdfDeviceGetDefaultQueue();
imp_WdfDeviceGetDevicePnpState();
imp_WdfDeviceGetDevicePowerPolicyState();
imp_WdfDeviceGetDevicePowerState();
imp_WdfDeviceGetDeviceState();
imp_WdfDeviceGetDriver();
imp_WdfDeviceGetFileObject();
imp_WdfDeviceGetIoTarget();
imp_WdfDeviceGetSelfIoTarget();
imp_WdfDeviceGetSystemPowerAction();
imp_WdfDeviceIndicateWakeStatus();
imp_WdfDeviceInitAllowSelfIoTarget();
imp_WdfDeviceInitAssignName();
imp_WdfDeviceInitAssignSDDLString();
imp_WdfDeviceInitAssignWdmIrpPreprocessCallback();
imp_WdfDeviceInitFree();
imp_WdfDeviceInitRegisterPnpStateChangeCallback();
imp_WdfDeviceInitRegisterPowerPolicyStateChangeCallback();
imp_WdfDeviceInitRegisterPowerStateChangeCallback();
imp_WdfDeviceInitSetCharacteristics();
imp_WdfDeviceInitSetDeviceClass();
imp_WdfDeviceInitSetDeviceType();
imp_WdfDeviceInitSetExclusive();
imp_WdfDeviceInitSetFileObjectConfig();
imp_WdfDeviceInitSetIoInCallerContextCallback();
imp_WdfDeviceInitSetIoType();
imp_WdfDeviceInitSetIoTypeEx();
imp_WdfDeviceInitSetPnpPowerEventCallbacks();
imp_WdfDeviceInitSetPowerInrush();
imp_WdfDeviceInitSetPowerNotPageable();
imp_WdfDeviceInitSetPowerPageable();
imp_WdfDeviceInitSetPowerPolicyEventCallbacks();
imp_WdfDeviceInitSetPowerPolicyOwnership();
imp_WdfDeviceInitSetReleaseHardwareOrderOnFailure();
imp_WdfDeviceInitSetRemoveLockOptions();
imp_WdfDeviceInitSetRequestAttributes();
imp_WdfDeviceMiniportCreate();
imp_WdfDeviceOpenDevicemapKey();
imp_WdfDeviceOpenRegistryKey();
imp_WdfDeviceQueryProperty();
imp_WdfDeviceQueryPropertyEx();
imp_WdfDeviceRemoveDependentUsageDeviceObject();
imp_WdfDeviceRemoveRemovalRelationsPhysicalDevice();
imp_WdfDeviceResumeIdleActual();
imp_WdfDeviceResumeIdleNoTrack();
imp_WdfDeviceRetrieveCompanionTarget();
imp_WdfDeviceRetrieveDeviceInterfaceString();
imp_WdfDeviceRetrieveDeviceName();
imp_WdfDeviceSetAlignmentRequirement();
imp_WdfDeviceSetBusInformationForChildren();
imp_WdfDeviceSetCharacteristics();
imp_WdfDeviceSetDeviceInterfaceState();
imp_WdfDeviceSetDeviceState();
imp_WdfDeviceSetFailed();
imp_WdfDeviceSetPnpCapabilities();
imp_WdfDeviceSetPowerCapabilities();
imp_WdfDeviceSetSpecialFileSupport();
imp_WdfDeviceSetStaticStopRemove();
imp_WdfDeviceStopIdleActual();
imp_WdfDeviceStopIdleNoTrack();
imp_WdfDeviceWdmAssignPowerFrameworkSettings();
imp_WdfDeviceWdmDispatchIrp();
imp_WdfDeviceWdmDispatchIrpToIoQueue();
imp_WdfDeviceWdmDispatchPreprocessedIrp();
imp_WdfDeviceWdmGetAttachedDevice();
imp_WdfDeviceWdmGetDeviceObject();
imp_WdfDeviceWdmGetPhysicalDevice();
imp_WdfDmaEnablerConfigureSystemProfile();
imp_WdfDmaEnablerCreate();
imp_WdfDmaEnablerGetFragmentLength();
imp_WdfDmaEnablerGetMaximumLength();
imp_WdfDmaEnablerGetMaximumScatterGatherElements();
imp_WdfDmaEnablerSetMaximumScatterGatherElements();
imp_WdfDmaEnablerWdmGetDmaAdapter();
imp_WdfDmaTransactionAllocateResources();
imp_WdfDmaTransactionCancel();
imp_WdfDmaTransactionCreate();
imp_WdfDmaTransactionDmaCompleted();
imp_WdfDmaTransactionDmaCompletedFinal();
imp_WdfDmaTransactionDmaCompletedWithLength();
imp_WdfDmaTransactionExecute();
imp_WdfDmaTransactionFreeResources();
imp_WdfDmaTransactionGetBytesTransferred();
imp_WdfDmaTransactionGetCurrentDmaTransferLength();
imp_WdfDmaTransactionGetDevice();
imp_WdfDmaTransactionGetRequest();
imp_WdfDmaTransactionGetTransferInfo();
imp_WdfDmaTransactionInitialize();
imp_WdfDmaTransactionInitializeUsingOffset();
imp_WdfDmaTransactionInitializeUsingRequest();
imp_WdfDmaTransactionRelease();
imp_WdfDmaTransactionSetChannelConfigurationCallback();
imp_WdfDmaTransactionSetDeviceAddressOffset();
imp_WdfDmaTransactionSetImmediateExecution();
imp_WdfDmaTransactionSetMaximumLength();
imp_WdfDmaTransactionSetSingleTransferRequirement();
imp_WdfDmaTransactionSetTransferCompleteCallback();
imp_WdfDmaTransactionStopSystemTransfer();
imp_WdfDmaTransactionWdmGetTransferContext();
imp_WdfDpcCancel();
imp_WdfDpcCreate();
imp_WdfDpcEnqueue();
imp_WdfDpcGetParentObject();
imp_WdfDpcWdmGetDpc();
imp_WdfDriverCreate();
imp_WdfDriverErrorReportApiMissing();
imp_WdfDriverGetRegistryPath();
imp_WdfDriverIsVersionAvailable();
imp_WdfDriverMiniportUnload();
imp_WdfDriverOpenParametersRegistryKey();
imp_WdfDriverOpenPersistentStateRegistryKey();
imp_WdfDriverRegisterTraceInfo();
imp_WdfDriverRetrieveVersionString();
imp_WdfDriverWdmGetDriverObject();
imp_WdfFdoAddStaticChild();
imp_WdfFdoGetDefaultChildList();
imp_WdfFdoInitAllocAndQueryProperty();
imp_WdfFdoInitAllocAndQueryPropertyEx();
imp_WdfFdoInitOpenRegistryKey();
imp_WdfFdoInitQueryProperty();
imp_WdfFdoInitQueryPropertyEx();
imp_WdfFdoInitSetDefaultChildListConfig();
imp_WdfFdoInitSetEventCallbacks();
imp_WdfFdoInitSetFilter();
imp_WdfFdoInitWdmGetPhysicalDevice();
imp_WdfFdoLockStaticChildListForIteration();
imp_WdfFdoQueryForInterface();
imp_WdfFdoRetrieveNextStaticChild();
imp_WdfFdoUnlockStaticChildListFromIteration();
imp_WdfFileObjectGetDevice();
imp_WdfFileObjectGetFileName();
imp_WdfFileObjectGetFlags();
imp_WdfFileObjectGetInitiatorProcessId();
imp_WdfFileObjectWdmGetFileObject();
imp_WdfGetTriageInfo();
imp_WdfInterruptAcquireLock();
imp_WdfInterruptCreate();
imp_WdfInterruptDisable();
imp_WdfInterruptEnable();
imp_WdfInterruptGetDevice();
imp_WdfInterruptGetInfo();
imp_WdfInterruptQueueDpcForIsr();
imp_WdfInterruptQueueWorkItemForIsr();
imp_WdfInterruptReleaseLock();
imp_WdfInterruptReportActive();
imp_WdfInterruptReportInactive();
imp_WdfInterruptSetExtendedPolicy();
imp_WdfInterruptSetPolicy();
imp_WdfInterruptSynchronize();
imp_WdfInterruptTryToAcquireLock();
imp_WdfInterruptWdmGetInterrupt();
imp_WdfIoQueueAssignForwardProgressPolicy();
imp_WdfIoQueueCreate();
imp_WdfIoQueueDrain();
imp_WdfIoQueueDrainSynchronously();
imp_WdfIoQueueFindRequest();
imp_WdfIoQueueGetDevice();
imp_WdfIoQueueGetState();
imp_WdfIoQueuePurge();
imp_WdfIoQueuePurgeSynchronously();
imp_WdfIoQueueReadyNotify();
imp_WdfIoQueueRetrieveFoundRequest();
imp_WdfIoQueueRetrieveNextRequest();
imp_WdfIoQueueRetrieveRequestByFileObject();
imp_WdfIoQueueStart();
imp_WdfIoQueueStop();
imp_WdfIoQueueStopAndPurge();
imp_WdfIoQueueStopAndPurgeSynchronously();
imp_WdfIoQueueStopSynchronously();
imp_WdfIoResourceListAppendDescriptor();
imp_WdfIoResourceListCreate();
imp_WdfIoResourceListGetCount();
imp_WdfIoResourceListGetDescriptor();
imp_WdfIoResourceListInsertDescriptor();
imp_WdfIoResourceListRemove();
imp_WdfIoResourceListRemoveByDescriptor();
imp_WdfIoResourceListUpdateDescriptor();
imp_WdfIoResourceRequirementsListAppendIoResList();
imp_WdfIoResourceRequirementsListGetCount();
imp_WdfIoResourceRequirementsListGetIoResList();
imp_WdfIoResourceRequirementsListInsertIoResList();
imp_WdfIoResourceRequirementsListRemove();
imp_WdfIoResourceRequirementsListRemoveByIoResList();
imp_WdfIoResourceRequirementsListSetInterfaceType();
imp_WdfIoResourceRequirementsListSetSlotNumber();
imp_WdfIoTargetAllocAndQueryTargetProperty();
imp_WdfIoTargetClose();
imp_WdfIoTargetCloseForQueryRemove();
imp_WdfIoTargetCreate();
imp_WdfIoTargetFormatRequestForInternalIoctl();
imp_WdfIoTargetFormatRequestForInternalIoctlOthers();
imp_WdfIoTargetFormatRequestForIoctl();
imp_WdfIoTargetFormatRequestForRead();
imp_WdfIoTargetFormatRequestForWrite();
imp_WdfIoTargetGetDevice();
imp_WdfIoTargetGetState();
imp_WdfIoTargetOpen();
imp_WdfIoTargetPurge();
imp_WdfIoTargetQueryForInterface();
imp_WdfIoTargetQueryTargetProperty();
imp_WdfIoTargetSelfAssignDefaultIoQueue();
imp_WdfIoTargetSendInternalIoctlOthersSynchronously();
imp_WdfIoTargetSendInternalIoctlSynchronously();
imp_WdfIoTargetSendIoctlSynchronously();
imp_WdfIoTargetSendReadSynchronously();
imp_WdfIoTargetSendWriteSynchronously();
imp_WdfIoTargetStart();
imp_WdfIoTargetStop();
imp_WdfIoTargetWdmGetTargetDeviceObject();
imp_WdfIoTargetWdmGetTargetFileHandle();
imp_WdfIoTargetWdmGetTargetFileObject();
imp_WdfIoTargetWdmGetTargetPhysicalDevice();
imp_WdfLookasideListCreate();
imp_WdfMemoryAssignBuffer();
imp_WdfMemoryCopyFromBuffer();
imp_WdfMemoryCopyToBuffer();
imp_WdfMemoryCreate();
imp_WdfMemoryCreateFromLookaside();
imp_WdfMemoryCreatePreallocated();
imp_WdfMemoryGetBuffer();
imp_WdfObjectAcquireLock();
imp_WdfObjectAllocateContext();
imp_WdfObjectContextGetObject();
imp_WdfObjectCreate();
imp_WdfObjectDelete();
imp_WdfObjectDereferenceActual();
imp_WdfObjectGetTypedContextWorker();
imp_WdfObjectQuery();
imp_WdfObjectReferenceActual();
imp_WdfObjectReleaseLock();
imp_WdfPdoAddEjectionRelationsPhysicalDevice();
imp_WdfPdoClearEjectionRelationsDevices();
imp_WdfPdoGetParent();
imp_WdfPdoInitAddCompatibleID();
imp_WdfPdoInitAddDeviceText();
imp_WdfPdoInitAddHardwareID();
imp_WdfPdoInitAllocate();
imp_WdfPdoInitAllowForwardingRequestToParent();
imp_WdfPdoInitAssignContainerID();
imp_WdfPdoInitAssignDeviceID();
imp_WdfPdoInitAssignInstanceID();
imp_WdfPdoInitAssignRawDevice();
imp_WdfPdoInitSetDefaultLocale();
imp_WdfPdoInitSetEventCallbacks();
imp_WdfPdoMarkMissing();
imp_WdfPdoRemoveEjectionRelationsPhysicalDevice();
imp_WdfPdoRequestEject();
imp_WdfPdoRetrieveAddressDescription();
imp_WdfPdoRetrieveIdentificationDescription();
imp_WdfPdoUpdateAddressDescription();
imp_WdfRegistryAssignMemory();
imp_WdfRegistryAssignMultiString();
imp_WdfRegistryAssignString();
imp_WdfRegistryAssignULong();
imp_WdfRegistryAssignUnicodeString();
imp_WdfRegistryAssignValue();
imp_WdfRegistryClose();
imp_WdfRegistryCreateKey();
imp_WdfRegistryOpenKey();
imp_WdfRegistryQueryMemory();
imp_WdfRegistryQueryMultiString();
imp_WdfRegistryQueryString();
imp_WdfRegistryQueryULong();
imp_WdfRegistryQueryUnicodeString();
imp_WdfRegistryQueryValue();
imp_WdfRegistryRemoveKey();
imp_WdfRegistryRemoveValue();
imp_WdfRegistryWdmGetHandle();
imp_WdfRequestAllocateTimer();
imp_WdfRequestCancelSentRequest();
imp_WdfRequestChangeTarget();
imp_WdfRequestComplete();
imp_WdfRequestCompleteWithInformation();
imp_WdfRequestCompleteWithPriorityBoost();
imp_WdfRequestCreate();
imp_WdfRequestCreateFromIrp();
imp_WdfRequestFormatRequestUsingCurrentType();
imp_WdfRequestForwardToIoQueue();
imp_WdfRequestForwardToParentDeviceIoQueue();
imp_WdfRequestGetCompletionParams();
imp_WdfRequestGetFileObject();
imp_WdfRequestGetInformation();
imp_WdfRequestGetIoQueue();
imp_WdfRequestGetParameters();
imp_WdfRequestGetRequestorMode();
imp_WdfRequestGetRequestorProcessId();
imp_WdfRequestGetStatus();
imp_WdfRequestIsCanceled();
imp_WdfRequestIsFrom32BitProcess();
imp_WdfRequestIsReserved();
imp_WdfRequestMarkCancelable();
imp_WdfRequestMarkCancelableEx();
imp_WdfRequestProbeAndLockUserBufferForRead();
imp_WdfRequestProbeAndLockUserBufferForWrite();
imp_WdfRequestRequeue();
imp_WdfRequestRetrieveInputBuffer();
imp_WdfRequestRetrieveInputMemory();
imp_WdfRequestRetrieveInputWdmMdl();
imp_WdfRequestRetrieveOutputBuffer();
imp_WdfRequestRetrieveOutputMemory();
imp_WdfRequestRetrieveOutputWdmMdl();
imp_WdfRequestRetrieveUnsafeUserInputBuffer();
imp_WdfRequestRetrieveUnsafeUserOutputBuffer();
imp_WdfRequestReuse();
imp_WdfRequestSend();
imp_WdfRequestSetCompletionRoutine();
imp_WdfRequestSetInformation();
imp_WdfRequestStopAcknowledge();
imp_WdfRequestUnmarkCancelable();
imp_WdfRequestWdmFormatUsingStackLocation();
imp_WdfRequestWdmGetIrp();
imp_WdfSpinLockAcquire();
imp_WdfSpinLockCreate();
imp_WdfSpinLockRelease();
imp_WdfStringCreate();
imp_WdfStringGetUnicodeString();
imp_WdfTimerCreate();
imp_WdfTimerGetParentObject();
imp_WdfTimerStart();
imp_WdfTimerStop();
imp_WdfUsbInterfaceGetConfiguredPipe();
imp_WdfUsbInterfaceGetConfiguredSettingIndex();
imp_WdfUsbInterfaceGetDescriptor();
imp_WdfUsbInterfaceGetEndpointInformation();
imp_WdfUsbInterfaceGetInterfaceNumber();
imp_WdfUsbInterfaceGetNumConfiguredPipes();
imp_WdfUsbInterfaceGetNumEndpoints();
imp_WdfUsbInterfaceGetNumSettings();
imp_WdfUsbInterfaceSelectSetting();
imp_WdfUsbTargetDeviceAllocAndQueryString();
imp_WdfUsbTargetDeviceCreate();
imp_WdfUsbTargetDeviceCreateIsochUrb();
imp_WdfUsbTargetDeviceCreateUrb();
imp_WdfUsbTargetDeviceCreateWithParameters();
imp_WdfUsbTargetDeviceCyclePortSynchronously();
imp_WdfUsbTargetDeviceFormatRequestForControlTransfer();
imp_WdfUsbTargetDeviceFormatRequestForCyclePort();
imp_WdfUsbTargetDeviceFormatRequestForString();
imp_WdfUsbTargetDeviceFormatRequestForUrb();
imp_WdfUsbTargetDeviceGetDeviceDescriptor();
imp_WdfUsbTargetDeviceGetInterface();
imp_WdfUsbTargetDeviceGetNumInterfaces();
imp_WdfUsbTargetDeviceIsConnectedSynchronous();
imp_WdfUsbTargetDeviceQueryString();
imp_WdfUsbTargetDeviceQueryUsbCapability();
imp_WdfUsbTargetDeviceResetPortSynchronously();
imp_WdfUsbTargetDeviceRetrieveConfigDescriptor();
imp_WdfUsbTargetDeviceRetrieveCurrentFrameNumber();
imp_WdfUsbTargetDeviceRetrieveInformation();
imp_WdfUsbTargetDeviceSelectConfig();
imp_WdfUsbTargetDeviceSendControlTransferSynchronously();
imp_WdfUsbTargetDeviceSendUrbSynchronously();
imp_WdfUsbTargetDeviceWdmGetConfigurationHandle();
imp_WdfUsbTargetPipeAbortSynchronously();
imp_WdfUsbTargetPipeConfigContinuousReader();
imp_WdfUsbTargetPipeFormatRequestForAbort();
imp_WdfUsbTargetPipeFormatRequestForRead();
imp_WdfUsbTargetPipeFormatRequestForReset();
imp_WdfUsbTargetPipeFormatRequestForUrb();
imp_WdfUsbTargetPipeFormatRequestForWrite();
imp_WdfUsbTargetPipeGetInformation();
imp_WdfUsbTargetPipeGetType();
imp_WdfUsbTargetPipeIsInEndpoint();
imp_WdfUsbTargetPipeIsOutEndpoint();
imp_WdfUsbTargetPipeReadSynchronously();
imp_WdfUsbTargetPipeResetSynchronously();
imp_WdfUsbTargetPipeSendUrbSynchronously();
imp_WdfUsbTargetPipeSetNoMaximumPacketSizeCheck();
imp_WdfUsbTargetPipeWdmGetPipeHandle();
imp_WdfUsbTargetPipeWriteSynchronously();
imp_WdfVerifierDbgBreakPoint();
imp_WdfVerifierKeBugCheck();
imp_WdfWaitLockAcquire();
imp_WdfWaitLockCreate();
imp_WdfWaitLockRelease();
imp_WdfWdmDeviceGetWdfDeviceHandle();
imp_WdfWdmDriverGetWdfDriverHandle();
imp_WdfWmiInstanceCreate();
imp_WdfWmiInstanceDeregister();
imp_WdfWmiInstanceFireEvent();
imp_WdfWmiInstanceGetDevice();
imp_WdfWmiInstanceGetProvider();
imp_WdfWmiInstanceRegister();
imp_WdfWmiProviderCreate();
imp_WdfWmiProviderGetDevice();
imp_WdfWmiProviderGetTracingHandle();
imp_WdfWmiProviderIsEnabled();
imp_WdfWorkItemCreate();
imp_WdfWorkItemEnqueue();
imp_WdfWorkItemFlush();
imp_WdfWorkItemGetParentObject();
mbtowc();
memcpy();
memset();
purecall();
strcmp();
wcscmp();
write_char();
write_multi_char();
write_string();
