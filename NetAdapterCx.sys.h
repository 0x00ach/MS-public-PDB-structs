struct ACPI_INTERFACE_STANDARD2;
struct ACPI_REGS_INTERFACE_STANDARD;
struct ANON_OBJECT_HEADER;
struct ANON_OBJECT_HEADER_BIGOBJ;
struct ANON_OBJECT_HEADER_V2;
struct Actions;
struct AdapterExtensionInit;
struct AdapterInit;
struct AffinitizedQueue;
struct ArmedNotifications;
struct BATTERY_REPORTING_SCALE;
struct BINARY_DATA;
struct BREAK_ON_STATUS_BUFFER;
struct BULK_SECURITY_TEST_DATA;
struct CM_Power_Data_s;
struct CORRELATION_VECTOR;
struct CO_ADDRESS_FAMILY;
struct CO_SAP;
struct CREATE_USN_JOURNAL_DATA;
struct DEBUG_DEVICE_ADDRESS;
struct DEBUG_MEMORY_REQUIREMENTS;
struct DELETE_USN_JOURNAL_DATA;
struct DL_TEREDO_ADDRESS;
struct DL_TEREDO_ADDRESS_PRV;
struct DL_TUNNEL_ADDRESS;
struct DMA;
struct DOT11_ACCESSNETWORKOPTIONS;
struct DOT11_ASSOCIATION_COMPLETION_PARAMETERS;
struct DOT11_ASSOCIATION_INFO_LIST;
struct DOT11_ASSOCIATION_PARAMS;
struct DOT11_ASSOCIATION_START_PARAMETERS;
struct DOT11_AUTH_ALGORITHM_LIST;
struct DOT11_AUTH_CIPHER_PAIR;
struct DOT11_AUTH_CIPHER_PAIR_LIST;
struct DOT11_BSSID_CANDIDATE;
struct DOT11_BSSID_LIST;
struct DOT11_BSS_ENTRY;
struct DOT11_BYTE_ARRAY;
struct DOT11_CHANNEL_HINT;
struct DOT11_CIPHER_ALGORITHM_LIST;
struct DOT11_CIPHER_DEFAULT_KEY_VALUE;
struct DOT11_CIPHER_KEY_MAPPING_KEY_VALUE;
struct DOT11_CONNECTION_COMPLETION_PARAMETERS;
struct DOT11_CONNECTION_START_PARAMETERS;
struct DOT11_COUNTRY_OR_REGION_STRING_LIST;
struct DOT11_DATA_RATE_MAPPING_ENTRY;
struct DOT11_DISASSOCIATION_PARAMETERS;
struct DOT11_ENCAP_ENTRY;
struct DOT11_ERP_PHY_ATTRIBUTES;
struct DOT11_EXTSTA_ATTRIBUTES;
struct DOT11_EXTSTA_CAPABILITY;
struct DOT11_EXTSTA_RECV_CONTEXT;
struct DOT11_EXTSTA_SEND_CONTEXT;
struct DOT11_HRDSSS_PHY_ATTRIBUTES;
struct DOT11_IBSS_PARAMS;
struct DOT11_KEY_ALGO_BIP;
struct DOT11_KEY_ALGO_CCMP;
struct DOT11_KEY_ALGO_GCMP;
struct DOT11_KEY_ALGO_TKIP_MIC;
struct DOT11_LINK_QUALITY_ENTRY;
struct DOT11_LINK_QUALITY_PARAMETERS;
struct DOT11_MAC_ADDRESS_LIST;
struct DOT11_MAC_FRAME_STATISTICS;
struct DOT11_MAC_INFO;
struct DOT11_MANUFACTURING_CALLBACK_PARAMETERS;
struct DOT11_MPDU_MAX_LENGTH_INDICATION;
struct DOT11_OFDM_PHY_ATTRIBUTES;
struct DOT11_OFFLOAD_NETWORK;
struct DOT11_PHY_ATTRIBUTES;
struct DOT11_PHY_FRAME_STATISTICS;
struct DOT11_PHY_ID_LIST;
struct DOT11_PHY_STATE_PARAMETERS;
struct DOT11_PHY_TYPE_LIST;
struct DOT11_PMKID_CANDIDATE_LIST_PARAMETERS;
struct DOT11_PMKID_ENTRY;
struct DOT11_PMKID_LIST;
struct DOT11_PORT_STATE_NOTIFICATION;
struct DOT11_PRIVACY_EXEMPTION;
struct DOT11_PRIVACY_EXEMPTION_LIST;
struct DOT11_QOS_PARAMS;
struct DOT11_ROAMING_COMPLETION_PARAMETERS;
struct DOT11_ROAMING_START_PARAMETERS;
struct DOT11_SSID_LIST;
struct DOT11_STATISTICS;
struct DOT11_TKIPMIC_FAILURE_PARAMETERS;
struct DOT11_VENUEINFO;
struct DOT11_VWIFI_ATTRIBUTES;
struct DRIVER_CONFIGURATION_KNOB;
struct DeferredEvents;
struct DispatchContext;
struct DmaContext;
struct EVENT_ACTION;
struct EVENT_INSTANCE_INFO;
struct EXCEPTION_HISTORY_ENTRY;
struct EX_BOOT_DEVICE_HANDLE__;
struct EntryFuncs;
struct ExternalTransitions;
struct FILTERDBS;
struct FIND_BY_SID_DATA;
struct FIND_BY_SID_OUTPUT;
struct HAL_DISPATCH;
struct HAL_PRIVATE_DISPATCH;
struct HNETPACKETEXTENSIONCOLLECTION__;
struct IMAGE_AUX_SYMBOL_TOKEN_DEF;
struct IMAGE_COR20_HEADER;
struct IMPORT_OBJECT_HEADER;
struct INET_PORT_RESERVATION_INFORMATION;
struct INET_PORT_RESERVATION_INSTANCE;
struct INET_PORT_RESERVATION_TOKEN;
struct INxApp;
struct INxAppFactory;
struct INxNblDispatcher;
struct INxNblRx;
struct INxNblTx;
struct InternalTransitions;
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;
struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;
struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;
struct KALLOCATION_TAG<1668118638,1>;
struct KALLOCATION_TAG<1835169902,1>;
struct KALLOCATION_TAG<1850294606,1>;
struct KALLOCATION_TAG<1885501550,512>;
struct KALLOCATION_TAG<1919776878,1>;
struct KALLOCATION_TAG<1920090443,1>;
struct KALLOCATION_TAG<1920226123,512>;
struct KALLOCATION_TAG_DPC_ALLOC<1383625294,512>;
struct KALLOCATION_TAG_DPC_ALLOC<1716484174,512>;
struct KALLOCATION_TAG_DPC_ALLOC<1817727566,512>;
struct KALLOCATION_TAG_DPC_ALLOC<1833203790,512>;
struct KALLOCATION_TAG_DPC_ALLOC<1883338830,512>;
struct KALLOCATION_TAG_DPC_ALLOC<2018801742,512>;
struct KALLOCATOR<1668118638,1>;
struct KALLOCATOR<1835169902,1>;
struct KALLOCATOR<1850294606,1>;
struct KALLOCATOR<1885501550,512>;
struct KALLOCATOR<1919776878,1>;
struct KALLOCATOR<1920090443,1>;
struct KALLOCATOR<1920226123,512>;
struct KALLOCATOR_NONPAGED<1383625294,512>;
struct KALLOCATOR_NONPAGED<1716484174,512>;
struct KALLOCATOR_NONPAGED<1817727566,512>;
struct KALLOCATOR_NONPAGED<1833203790,512>;
struct KALLOCATOR_NONPAGED<1883338830,512>;
struct KALLOCATOR_NONPAGED<2018801742,512>;
struct KEY_PID_ARRAY;
struct KFreePool<_NET_RING_BUFFER>;
struct KFreePool<unsigned char>;
struct KFreePool<wchar_t>;
struct KFreePoolNP<_MDL>;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct MARK_HANDLE_INFO;
struct MARK_HANDLE_INFO32;
struct MEM_EXTENDED_PARAMETER;
struct MFT_ENUM_DATA_V0;
struct MFT_ENUM_DATA_V1;
struct MOVE_FILE_DATA;
struct MOVE_FILE_RECORD_DATA;
struct MSIX_TABLE_POINTER;
struct MdlTranlationResult;
struct MxAutoWorkItem;
struct NDIS_CO_DEVICE_PROFILE;
struct NDIS_PD_COUNTER_HANDLE__;
struct NDIS_PD_FILTER_HANDLE__;
struct NDIS_PD_PROVIDER_HANDLE__;
struct NDIS_WDF_CX_DRIVER_CONTEXT__;
struct NDIS_WDF_CX_DRIVER__;
struct NDIS_WMI_OUTPUT_INFO;
struct NDK_VERSION;
struct NETADAPTEREXT_INIT;
struct NETADAPTER_INIT;
struct NETADAPTER__;
struct NETCONFIGURATION__;
struct NETPACKETQUEUE__;
struct NETPOWERSETTINGS__;
struct NETREQUESTQUEUE__;
struct NETREQUEST__;
struct NETRXQUEUE_INIT;
struct NETTXQUEUE_INIT;
struct NET_CLIENT_ADAPTER__;
struct NET_CLIENT_BUFFER_POOL__;
struct NET_CLIENT_MAPPING_CAPABILITIES__;
struct NET_CLIENT_QUEUE__;
struct NET_PACKET_CONTEXT_TOKEN;
struct NET_PACKET_EXTENSION_PRIVATE;
struct NONPAGED_OBJECT<1885501550>;
struct NONPAGED_OBJECT<1920226123>;
struct NOTIFY_USER_POWER_SETTING;
struct NTFS_EXTENDED_VOLUME_DATA;
struct NTFS_FILE_RECORD_INPUT_BUFFER;
struct NTFS_FILE_RECORD_OUTPUT_BUFFER;
struct NTFS_VOLUME_DATA_BUFFER;
struct NX_PERF_NIC_GENERAL_CHARACTERISTICS;
struct NX_PERF_RX_NIC_CHARACTERISTICS;
struct NX_PERF_RX_TUNING_PARAMETERS;
struct NX_PERF_TX_NIC_CHARACTERISTICS;
struct NX_PERF_TX_TUNING_PARAMETERS;
struct NX_PRIVATE_GLOBALS;
struct NdisDebugBlock<1668118638>;
struct NdisDebugBlock<1835169902>;
struct NdisDebugBlock<1850294606>;
struct NdisDebugBlock<1885501550>;
struct NdisDebugBlock<1919776878>;
struct NdisDebugBlock<1920090443>;
struct NdisDebugBlock<1920226123>;
struct NxAdapterStateMachine<NxAdapter>::Actions;
struct NxAdapterStateMachine<NxAdapter>::DeferredEvents;
struct NxAdapterStateMachine<NxAdapter>::EntryFuncs;
struct NxAdapterStateMachine<NxAdapter>::ExternalTransitions;
struct NxAdapterStateMachine<NxAdapter>::InternalTransitions;
struct NxAdapterStateMachine<NxAdapter>::PopTransitions;
struct NxAdapterStateMachine<NxAdapter>::PurgeEvents;
struct NxAdapterStateMachine<NxAdapter>::SlotArrays;
struct NxAdapterStateMachine<NxAdapter>::StateMachineEngineConfig;
struct NxAdapterStateMachine<NxAdapter>::StopTimerOnExitDetails;
struct NxBufferDescriptor;
struct NxBufferPool::NxBufferDescriptor;
struct NxBufferPool::NxChunkBaseAddress;
struct NxChunkBaseAddress;
struct NxDeviceStateMachine<NxDevice>::Actions;
struct NxDeviceStateMachine<NxDevice>::DeferredEvents;
struct NxDeviceStateMachine<NxDevice>::EntryFuncs;
struct NxDeviceStateMachine<NxDevice>::ExternalTransitions;
struct NxDeviceStateMachine<NxDevice>::InternalTransitions;
struct NxDeviceStateMachine<NxDevice>::PopTransitions;
struct NxDeviceStateMachine<NxDevice>::PurgeEvents;
struct NxDeviceStateMachine<NxDevice>::SlotArrays;
struct NxDeviceStateMachine<NxDevice>::StateMachineEngineConfig;
struct NxDeviceStateMachine<NxDevice>::StopTimerOnExitDetails;
struct NxExecutionContextCounters;
struct NxNblTranslationStats;
struct NxNblTranslator::PacketContext;
struct NxReceiveScaling::AffinitizedQueue;
struct NxReceiveScaling::TranslatedIndirectionEntries;
struct NxRingBufferCounters;
struct NxRxXlat::ArmedNotifications;
struct NxRxXlat::PacketContext;
struct NxTxXlat::ArmedNotifications;
struct PAGED_OBJECT<1668118638>;
struct PAGED_OBJECT<1835169902>;
struct PAGED_OBJECT<1850294606>;
struct PAGED_OBJECT<1919776878>;
struct PAGED_OBJECT<1920090443>;
struct PCI_AGP_EXTENDED_CAPABILITY;
struct PCI_HT_CAPABILITY;
struct PCI_HT_INTERRUPT_INDEX_1;
struct PCI_HT_INTERRUPT_INDEX_N;
struct PCI_MSIX_CAPABILITY;
struct PCI_MSIX_TABLE_ENTRY;
struct PCI_MSI_CAPABILITY;
struct PCI_MSI_CAPABILITY::_PCI_MSI_MESSAGE_CONTROL;
struct PCI_X_CAPABILITY;
struct POHANDLE__;
struct POWER_ACTION_POLICY;
struct POWER_STATE_HANDLER;
struct POWER_STATE_NOTIFY_HANDLER;
struct PPM_IDLESTATE_EVENT;
struct PPM_IDLE_ACCOUNTING;
struct PPM_IDLE_ACCOUNTING_EX;
struct PPM_IDLE_STATE_ACCOUNTING;
struct PPM_IDLE_STATE_ACCOUNTING_EX;
struct PPM_IDLE_STATE_BUCKET_EX;
struct PPM_PERFSTATE_DOMAIN_EVENT;
struct PPM_PERFSTATE_EVENT;
struct PPM_THERMALCHANGE_EVENT;
struct PPM_THERMAL_POLICY_EVENT;
struct PPM_WMI_IDLE_STATE;
struct PPM_WMI_IDLE_STATES;
struct PPM_WMI_IDLE_STATES_EX;
struct PPM_WMI_LEGACY_PERFSTATE;
struct PPM_WMI_PERF_STATE;
struct PPM_WMI_PERF_STATES;
struct PPM_WMI_PERF_STATES_EX;
struct PROCESSOR_IDLESTATE_INFO;
struct PROCESSOR_IDLESTATE_POLICY;
struct PROCESSOR_IDLE_TIMES;
struct PROCESSOR_PERFSTATE_POLICY;
struct PacketContext;
struct PopTransitions;
struct PurgeEvents;
struct QOS_OBJECT_HDR;
struct QUEUE_CREATION_CONTEXT;
struct RCVALL_IF;
struct READ_FILE_USN_DATA;
struct READ_USN_JOURNAL_DATA_V0;
struct READ_USN_JOURNAL_DATA_V1;
struct RECORDER_LOG__;
struct REFS_VOLUME_DATA_BUFFER;
struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
struct RETRIEVAL_POINTERS_BUFFER;
struct RETRIEVAL_POINTER_COUNT;
struct RIO_BUFFERID_t;
struct RIO_CQ_t;
struct RIO_RQ_t;
struct ROUTING_TOKEN;
struct RX_NBL_CONTEXT;
struct RX_NB_CONTEXT;
struct Rtl::KString;
struct SCOPE_ID;
struct SET_POWER_SETTING_VALUE;
struct STARTING_LCN_INPUT_BUFFER;
struct STARTING_LCN_INPUT_BUFFER_EX;
struct STARTING_VCN_INPUT_BUFFER;
struct SYSTEM_BATTERY_STATE;
struct SYSTEM_POWER_CAPABILITIES;
struct SYSTEM_POWER_LEVEL;
struct SlotArrays;
struct SmFx::EVENT_SPECIFICATION;
struct SmFx::EXTERNAL_TRANSITION;
struct SmFx::INTERNAL_TRANSITION;
struct SmFx::LockType;
struct SmFx::POP_TRANSITION;
struct SmFx::STATE_MACHINE_ENGINE_CONFIG;
struct SmFx::STATE_MACHINE_SPECIFICATION;
struct SmFx::STATE_SPECIFICATION;
struct SmFx::STOP_TIMER_ON_EXIT_DETAILS;
struct SmFx::SUBMACHINE_SPECIFICATION;
struct SmFx::StateMachineEngine::StateMachineEngineImpl::EVENT_ACTION;
struct SmFx::StateMachineEngine::StateMachineEngineImpl::EXCEPTION_HISTORY_ENTRY;
struct SmFx::StateMachineEngine::StateMachineEngineImpl::TRANSITION_HISTORY_ENTRY;
struct SmFx::WorkerType;
struct StateMachineEngineConfig;
struct StopTimerOnExitDetails;
struct TRANSITION_HISTORY_ENTRY;
struct TRANSPORT_SETTING_ID;
struct TranslatedIndirectionEntries;
struct TxPacketCompletionStatus;
struct USN_JOURNAL_DATA_V0;
struct USN_JOURNAL_DATA_V1;
struct USN_JOURNAL_DATA_V2;
struct USN_RANGE_TRACK_OUTPUT;
struct USN_RECORD_COMMON_HEADER;
struct USN_RECORD_EXTENT;
struct USN_RECORD_V2;
struct USN_RECORD_V3;
struct USN_RECORD_V4;
struct USN_TRACK_MODIFIED_RANGES;
struct VOLUME_BITMAP_BUFFER;
struct WDFCHILDLIST__;
struct WDFCMRESLIST__;
struct WDFCOLLECTION__;
struct WDFCOMMONBUFFER__;
struct WDFCOMPANIONTARGET__;
struct WDFCXDEVICE_INIT;
struct WDFDEVICE_INIT;
struct WDFDEVICE__;
struct WDFDMAENABLER__;
struct WDFDMATRANSACTION__;
struct WDFDPC__;
struct WDFDRIVER__;
struct WDFFILEOBJECT__;
struct WDFINTERRUPT__;
struct WDFIORESLIST__;
struct WDFIORESREQLIST__;
struct WDFIOTARGET__;
struct WDFKEY__;
struct WDFLOOKASIDE__;
struct WDFMEMORY__;
struct WDFQUEUE__;
struct WDFREQUEST__;
struct WDFSPINLOCK__;
struct WDFSTRING__;
struct WDFTIMER__;
struct WDFUSBDEVICE__;
struct WDFUSBINTERFACE__;
struct WDFUSBPIPE__;
struct WDFWAITLOCK__;
struct WDFWMIINSTANCE__;
struct WDFWMIPROVIDER__;
struct WDFWORKITEM__;
struct WHEA_PCIXDEVICE_REGISTER_PAIR;
struct WMIREGGUIDW;
struct WMIREGINFOW;
struct WPP_RECORDER_COUNTER__;
struct WppPointerToUshort;
struct XSAVE_CPU_ERRATA;
struct XSAVE_CPU_INFO;
struct _ACCESS_ALLOWED_ACE;
struct _ACCESS_ALLOWED_CALLBACK_ACE;
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
struct _ACCESS_ALLOWED_OBJECT_ACE;
struct _ACCESS_DENIED_ACE;
struct _ACCESS_DENIED_CALLBACK_ACE;
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
struct _ACCESS_DENIED_OBJECT_ACE;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACE_HEADER;
struct _ACL;
struct _ACL_REVISION_INFORMATION;
struct _ACL_SIZE_INFORMATION;
struct _ACPI_CMOS_INTERFACE_STANDARD;
struct _ACPI_DEBUGGING_DEVICE_IN_USE;
struct _ACPI_INTERFACE_STANDARD;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
struct _ADAPTER_OBJECT;
struct _ADMINISTRATOR_POWER_POLICY;
struct _AGP_TARGET_BUS_INTERFACE_STANDARD;
struct _ALPC_BASIC_INFORMATION;
struct _ALPC_CONTEXT_ATTR;
struct _ALPC_DATA_VIEW_ATTR;
struct _ALPC_DIRECT_ATTR;
struct _ALPC_HANDLE_ATTR;
struct _ALPC_HANDLE_ATTR32;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _ALPC_MESSAGE_HANDLE_INFORMATION;
struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT;
struct _ALPC_PORT_ATTRIBUTES;
struct _ALPC_PORT_CALLBACK_INFORMATION;
struct _ALPC_PORT_COMPLETION_LIST_INFORMATION;
struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION;
struct _ALPC_SECURITY_ATTR;
struct _ALPC_SERVER_INFORMATION;
struct _ALPC_TOKEN_ATTR;
struct _ALPC_WORK_ON_BEHALF_ATTR;
struct _ALPC_WORK_ON_BEHALF_TICKET;
struct _AMD64_CONTEXT;
struct _APPLICATIONLAUNCH_SETTING_VALUE;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_CONFLICT_INFO;
struct _ARBITER_INTERFACE;
struct _ARBITER_LIST_ENTRY;
struct _ARBITER_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARC_DISK_INFORMATION;
struct _ARC_DISK_SIGNATURE;
struct _ARM64_CONTEXT;
struct _ARM64_NT_CONTEXT;
struct _ARM_CONTEXT;
struct _ARM_ERRATA_INFO;
struct _ARM_LOADER_BLOCK;
struct _ARP_HEADER;
struct _ASSEMBLY_STORAGE_MAP;
struct _ASSOCIATE_NAMERES_CONTEXT_INPUT;
struct _ATOM_BASIC_INFORMATION;
struct _ATOM_TABLE_INFORMATION;
struct _AUX_ACCESS_DATA;
struct _BDCB_IMAGE_INFORMATION;
struct _BDCB_STATUS_UPDATE_CONTEXT;
struct _BLDR_DATA_TABLE_ENTRY;
struct _BOOTDISK_INFORMATION;
struct _BOOTDISK_INFORMATION_EX;
struct _BOOTDISK_INFORMATION_LITE;
struct _BOOT_AREA_INFO;
struct _BOOT_DRIVER_LIST_ENTRY;
struct _BOOT_ENTROPY_LDR_RESULT;
struct _BOOT_ENTROPY_NT_RESULT;
struct _BOOT_ENTROPY_SOURCE_LDR_RESULT;
struct _BOOT_ENTROPY_SOURCE_NT_RESULT;
struct _BOOT_ENTRY;
struct _BOOT_ENTRY_LIST;
struct _BOOT_OPTIONS;
struct _BSSID_INFO;
struct _BUS_HANDLER;
struct _BUS_INTERFACE_STANDARD;
struct _BUS_RESOURCE_UPDATE_INTERFACE;
struct _CACHE_DESCRIPTOR;
struct _CACHE_RELATIONSHIP;
struct _CALLBACK_OBJECT;
struct _CALL_FRAME;
struct _CFG_CALL_TARGET_INFO;
struct _CFG_CALL_TARGET_LIST_INFORMATION;
struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
struct _CLAIM_SECURITY_ATTRIBUTE_V1;
struct _CLFS_LOG_NAME_INFORMATION;
struct _CLFS_MGMT_CLIENT_REGISTRATION;
struct _CLFS_MGMT_NOTIFICATION;
struct _CLFS_MGMT_POLICY;
struct _CLFS_NODE_ID;
struct _CLFS_PHYSICAL_LSN_INFORMATION;
struct _CLFS_STREAM_ID_INFORMATION;
struct _CLIENT_ID;
struct _CLIENT_ID64;
struct _CLS_ARCHIVE_DESCRIPTOR;
struct _CLS_CONTAINER_INFORMATION;
struct _CLS_INFORMATION;
struct _CLS_IO_STATISTICS;
struct _CLS_IO_STATISTICS_HEADER;
struct _CLS_LSN;
struct _CLS_SCAN_CONTEXT;
struct _CLS_WRITE_ENTRY;
struct _CLUSTER_RANGE;
struct _CMC_DRIVER_INFO;
struct _CM_COMPONENT_INFORMATION;
struct _CM_DISK_GEOMETRY_DEVICE_DATA;
struct _CM_EISA_FUNCTION_INFORMATION;
struct _CM_EISA_SLOT_INFORMATION;
struct _CM_FLOPPY_DEVICE_DATA;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_INT13_DRIVE_PARAMETER;
struct _CM_KEYBOARD_DEVICE_DATA;
struct _CM_MCA_POS_DATA;
struct _CM_MONITOR_DEVICE_DATA;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_PCCARD_DEVICE_DATA;
struct _CM_PNP_BIOS_DEVICE_NODE;
struct _CM_PNP_BIOS_INSTALLATION_CHECK;
struct _CM_RESOURCE_LIST;
struct _CM_ROM_BLOCK;
struct _CM_SCSI_DEVICE_DATA;
struct _CM_SERIAL_DEVICE_DATA;
struct _CM_SONIC_DEVICE_DATA;
struct _CM_VIDEO_DEVICE_DATA;
struct _COMPOUND_ACCESS_ALLOWED_ACE;
struct _COMPRESSED_DATA_INFO;
struct _CONFIGURATION_COMPONENT;
struct _CONFIGURATION_COMPONENT_DATA;
struct _CONFIGURATION_INFORMATION;
struct _CONTAINER_ID_INFO;
struct _CONTAINER_ROOT_INFO_INPUT;
struct _CONTAINER_ROOT_INFO_OUTPUT;
struct _CONTAINER_VOLUME_STATE;
struct _CONTEXT;
struct _CONTEXT_CHUNK;
struct _CONTEXT_EX;
struct _CONTROLLER_OBJECT;
struct _COORDINATED_IDLE_DEPENDENCY;
struct _COORDINATED_IDLE_STATE;
struct _COORDINATED_IDLE_STATES;
struct _COUNTED_REASON_CONTEXT;
struct _COUNTER_READING;
struct _COVERAGE_MODULES;
struct _COVERAGE_MODULE_INFO;
struct _COVERAGE_MODULE_REQUEST;
struct _COVERAGE_SECTION_HEADER;
struct _COVERAGE_UNLOADED_MODULE_ENTRY;
struct _CO_ADDRESS;
struct _CO_ADDRESS_LIST;
struct _CO_CALL_MANAGER_PARAMETERS;
struct _CO_CALL_PARAMETERS;
struct _CO_MEDIA_PARAMETERS;
struct _CO_PVC;
struct _CO_SPECIFIC_PARAMETERS;
struct _CPE_DRIVER_INFO;
struct _CPTABLEINFO;
struct _CRASHDUMP_FUNCTIONS_INTERFACE;
struct _CREATE_USER_PROCESS_ECP_CONTEXT;
struct _CRITICAL_PROCESS_EXCEPTION_DATA;
struct _CSADDR_INFO;
struct _CSTRING;
struct _CSV_CONTROL_PARAM;
struct _CSV_IS_OWNED_BY_CSVFS;
struct _CSV_MGMT_LOCK;
struct _CSV_NAMESPACE_INFO;
struct _CSV_QUERY_FILE_REVISION;
struct _CSV_QUERY_FILE_REVISION_FILE_ID_128;
struct _CSV_QUERY_MDS_PATH;
struct _CSV_QUERY_MDS_PATH_V2;
struct _CSV_QUERY_REDIRECT_STATE;
struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
struct _CSV_QUERY_VOLUME_REDIRECT_STATE;
struct _CURDIR;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
struct _D3COLD_AUX_POWER_AND_TIMING_INTERFACE;
struct _D3COLD_SUPPORT_INTERFACE;
struct _DBGK_WERUSER_PARAM;
struct _DBGK_WORKER_PARAM;
struct _DEBUGGING_DEVICE_IN_USE;
struct _DEBUGGING_DEVICE_IN_USE_INFORMATION;
struct _DEBUG_DEVICE_DESCRIPTOR;
struct _DEBUG_TRANSPORT_DATA;
struct _DECRYPTION_STATUS_BUFFER;
struct _DEDUP_CHUNK_INFORMATION_HASH32;
struct _DEDUP_FILE_OPERATION;
struct _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER;
struct _DEFINE_STORAGE_RESERVE_INPUT;
struct _DELETE_STORAGE_RESERVE_INPUT;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_DESCRIPTION;
struct _DEVICE_FAULT_CONFIGURATION;
struct _DEVICE_FLAGS;
struct _DEVICE_HANDLER_OBJECT;
struct _DEVICE_INTERFACE_CHANGE_NOTIFICATION;
struct _DEVICE_MAP;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVICE_RELATIONS;
struct _DEVICE_RESET_INTERFACE_STANDARD;
struct _DEVOBJ_EXTENSION;
struct _DEVPROPCOMPKEY;
struct _DEVPROPERTY;
struct _DEVPROPKEY;
struct _DIAGNOSTIC_BUFFER;
struct _DISK_SIGNATURE;
struct _DISPATCHER_CONTEXT;
struct _DISPATCHER_HEADER;
struct _DMA_ADAPTER;
struct _DMA_ADAPTER_INFO;
struct _DMA_ADAPTER_INFO_V1;
struct _DMA_CACHE_COHERENCY_INTERFACE;
struct _DMA_CONFIGURATION_BYTE0;
struct _DMA_CONFIGURATION_BYTE1;
struct _DMA_IOMMU_INTERFACE;
struct _DMA_OPERATIONS;
struct _DMA_TRANSFER_INFO;
struct _DMA_TRANSFER_INFO_V1;
struct _DMA_TRANSFER_INFO_V2;
struct _DOMAIN_CONFIGURATION;
struct _DOMAIN_CONFIGURATION_ARM64;
struct _DOT11_ADDITIONAL_IE;
struct _DOT11_ANQP_QUERY_COMPLETE_PARAMETERS;
struct _DOT11_AP_JOIN_REQUEST;
struct _DOT11_ASSOCIATION_INFO_EX;
struct _DOT11_AVAILABLE_CHANNEL_LIST;
struct _DOT11_AVAILABLE_FREQUENCY_LIST;
struct _DOT11_BSS_DESCRIPTION;
struct _DOT11_CAN_SUSTAIN_AP_PARAMETERS;
struct _DOT11_COUNTERS_ENTRY;
struct _DOT11_CURRENT_OFFLOAD_CAPABILITY;
struct _DOT11_CURRENT_OPERATION_MODE;
struct _DOT11_CURRENT_OPTIONAL_CAPABILITY;
struct _DOT11_DATA_RATE_MAPPING_TABLE;
struct _DOT11_DEFAULT_WEP_OFFLOAD;
struct _DOT11_DEFAULT_WEP_UPLOAD;
struct _DOT11_DISASSOCIATE_PEER_REQUEST;
struct _DOT11_DIVERSITY_SELECTION_RX;
struct _DOT11_DIVERSITY_SELECTION_RX_LIST;
struct _DOT11_EXTAP_ATTRIBUTES;
struct _DOT11_FRAGMENT_DESCRIPTOR;
struct _DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS;
struct _DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS;
struct _DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS;
struct _DOT11_HOPPING_PATTERN_ENTRY;
struct _DOT11_HOPPING_PATTERN_ENTRY_LIST;
struct _DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS;
struct _DOT11_INCOMING_ASSOC_DECISION;
struct _DOT11_INCOMING_ASSOC_DECISION_V2;
struct _DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS;
struct _DOT11_INCOMING_ASSOC_STARTED_PARAMETERS;
struct _DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS;
struct _DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS;
struct _DOT11_IV48_COUNTER;
struct _DOT11_JOIN_REQUEST;
struct _DOT11_MAC_PARAMETERS;
struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC;
struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX;
struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX;
struct _DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS;
struct _DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS;
struct _DOT11_MANUFACTURING_TEST;
struct _DOT11_MANUFACTURING_TEST_QUERY_DATA;
struct _DOT11_MANUFACTURING_TEST_SET_DATA;
struct _DOT11_MANUFACTURING_TEST_SLEEP;
struct _DOT11_MD_CAPABILITY_ENTRY_LIST;
struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY;
struct _DOT11_NIC_SPECIFIC_EXTENSION;
struct _DOT11_OFFLOAD_CAPABILITY;
struct _DOT11_OFFLOAD_NETWORK_LIST_INFO;
struct _DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS;
struct _DOT11_OI;
struct _DOT11_OPERATION_MODE_CAPABILITY;
struct _DOT11_OPTIONAL_CAPABILITY;
struct _DOT11_PEER_INFO;
struct _DOT11_PEER_INFO_LIST;
struct _DOT11_PEER_STATISTICS;
struct _DOT11_PER_MSDU_COUNTERS;
struct _DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS;
struct _DOT11_PHY_TYPE_INFO;
struct _DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO;
struct _DOT11_POWER_MGMT_MODE;
struct _DOT11_POWER_MGMT_MODE_STATUS_INFO;
struct _DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS;
struct _DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS;
struct _DOT11_QOS_TX_DURATION;
struct _DOT11_QOS_TX_MEDIUM_TIME;
struct _DOT11_RATE_SET;
struct _DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS;
struct _DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS;
struct _DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS;
struct _DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS;
struct _DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS;
struct _DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS;
struct _DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS;
struct _DOT11_RECV_CONTEXT;
struct _DOT11_RECV_SENSITIVITY;
struct _DOT11_RECV_SENSITIVITY_LIST;
struct _DOT11_REG_DOMAINS_SUPPORT_VALUE;
struct _DOT11_REG_DOMAIN_VALUE;
struct _DOT11_RESET_REQUEST;
struct _DOT11_RSN_REKEY_PARAMETERS;
struct _DOT11_RSSI_RANGE;
struct _DOT11_SCAN_REQUEST;
struct _DOT11_SCAN_REQUEST_V2;
struct _DOT11_SEND_CONTEXT;
struct _DOT11_SEND_EXTENSION_INFO;
struct _DOT11_SEND_EXTENSION_INFO_V2;
struct _DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS;
struct _DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS;
struct _DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS;
struct _DOT11_SEND_INVITATION_REQUEST_PARAMETERS;
struct _DOT11_SEND_INVITATION_RESPONSE_PARAMETERS;
struct _DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS;
struct _DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS;
struct _DOT11_SSID;
struct _DOT11_START_REQUEST;
struct _DOT11_STATUS_INDICATION;
struct _DOT11_STOP_AP_PARAMETERS;
struct _DOT11_SUPPORTED_ANTENNA;
struct _DOT11_SUPPORTED_ANTENNA_LIST;
struct _DOT11_SUPPORTED_DATA_RATES_VALUE;
struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2;
struct _DOT11_SUPPORTED_DSSS_CHANNEL;
struct _DOT11_SUPPORTED_DSSS_CHANNEL_LIST;
struct _DOT11_SUPPORTED_OFDM_FREQUENCY;
struct _DOT11_SUPPORTED_OFDM_FREQUENCY_LIST;
struct _DOT11_SUPPORTED_PHY_TYPES;
struct _DOT11_SUPPORTED_POWER_LEVELS;
struct _DOT11_UPDATE_IE;
struct _DOT11_VWIFI_COMBINATION;
struct _DOT11_VWIFI_COMBINATION_V2;
struct _DOT11_VWIFI_COMBINATION_V3;
struct _DOT11_WEP_OFFLOAD;
struct _DOT11_WEP_UPLOAD;
struct _DOT11_WFD_ADDITIONAL_IE;
struct _DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR;
struct _DOT11_WFD_ADVERTISED_SERVICE_LIST;
struct _DOT11_WFD_ADVERTISEMENT_ID;
struct _DOT11_WFD_ATTRIBUTES;
struct _DOT11_WFD_CHANNEL;
struct _DOT11_WFD_CONFIGURATION_TIMEOUT;
struct _DOT11_WFD_DEVICE_CAPABILITY_CONFIG;
struct _DOT11_WFD_DEVICE_ENTRY;
struct _DOT11_WFD_DEVICE_INFO;
struct _DOT11_WFD_DEVICE_LISTEN_CHANNEL;
struct _DOT11_WFD_DEVICE_TYPE;
struct _DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS;
struct _DOT11_WFD_DISCOVER_DEVICE_FILTER;
struct _DOT11_WFD_DISCOVER_REQUEST;
struct _DOT11_WFD_GO_INTENT;
struct _DOT11_WFD_GROUP_ID;
struct _DOT11_WFD_GROUP_JOIN_PARAMETERS;
struct _DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG;
struct _DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2;
struct _DOT11_WFD_GROUP_START_PARAMETERS;
struct _DOT11_WFD_INVITATION_FLAGS;
struct _DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST;
struct _DOT11_WFD_SERVICE_HASH_LIST;
struct _DOT11_WFD_SESSION_ID;
struct _DOT11_WFD_SESSION_INFO;
struct _DOT11_WME_AC_PARAMETERS;
struct _DOT11_WME_AC_PARAMTERS_LIST;
struct _DOT11_WME_UPDATE_IE;
struct _DOT11_WPA_TSC;
struct _DOT11_WPS_DEVICE_NAME;
struct _DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _DRIVER_VERIFIER_THUNK_PAIRS;
struct _DRIVE_LAYOUT_INFORMATION;
struct _DUMP_INITIALIZATION_CONTEXT;
struct _DUPLICATE_EXTENTS_DATA;
struct _DUPLICATE_EXTENTS_DATA32;
struct _DUPLICATE_EXTENTS_DATA_EX;
struct _DUPLICATE_EXTENTS_DATA_EX32;
struct _DYNAMIC_FUNCTION_TABLE;
struct _DesiredStorageClass;
struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _ECP_HEADER;
struct _ECP_LIST;
struct _EFI_DRIVER_ENTRY;
struct _EFI_DRIVER_ENTRY_LIST;
struct _EFI_FIRMWARE_INFORMATION;
struct _EISA_DMA_CONFIGURATION;
struct _EISA_IRQ_CONFIGURATION;
struct _EISA_IRQ_DESCRIPTOR;
struct _EISA_MEMORY_CONFIGURATION;
struct _EISA_MEMORY_TYPE;
struct _EISA_PORT_CONFIGURATION;
struct _EISA_PORT_DESCRIPTOR;
struct _EJOB;
struct _EMULATOR_ACCESS_ENTRY;
struct _EM_CALLBACK_REGISTRATION;
struct _EM_CLIENT_NOTIFICATION_REGISTRATION;
struct _EM_ENTRY_DATA;
struct _EM_ENTRY_REGISTRATION;
struct _ENCLAVE_CREATE_INFO_SGX;
struct _ENCLAVE_CREATE_INFO_VBS;
struct _ENCLAVE_INIT_INFO_SGX;
struct _ENCLAVE_INIT_INFO_VBS;
struct _ENCLAVE_LOAD_INFO_VBS;
struct _ENCRYPTED_DATA_INFO;
struct _ENCRYPTION_BUFFER;
struct _ENCRYPTION_KEY_CTRL_INPUT;
struct _ENLISTMENT_BASIC_INFORMATION;
struct _ENLISTMENT_CRM_INFORMATION;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>;
struct _ENUM_FLAG_INTEGER_FOR_SIZE<8>;
struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS>;
struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS>;
struct _ENUM_FLAG_SIZED_INTEGER<enum SmFx::InternalTransitionFlags>;
struct _ENUM_FLAG_SIZED_INTEGER<enum SmFx::StateFlags>;
struct _ENUM_FLAG_SIZED_INTEGER<enum SmFx::StateSlotType>;
struct _ENUM_FLAG_SIZED_INTEGER<enum _NET_CLIENT_BUFFER_POOL_FLAGS>;
struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_RESOURCE_POLICY_FLAGS>;
struct _EPROCESS;
struct _ERESOURCE;
struct _ETHERNET_HEADER;
struct _ETHREAD;
struct _ETW_BUFFER_CONTEXT;
struct _ETW_HW_TRACE_EXT_INTERFACE;
struct _ETW_HW_TRACE_HOST_INTERFACE;
struct _ETW_TRACE_SESSION_SETTINGS;
struct _EVENTLOGRECORD;
struct _EVENTSFORLOGFILE;
struct _EVENT_BASIC_INFORMATION;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EVENT_FILTER_EVENT_ID;
struct _EVENT_FILTER_EVENT_NAME;
struct _EVENT_FILTER_HEADER;
struct _EVENT_FILTER_LEVEL_KW;
struct _EVENT_INSTANCE_HEADER;
struct _EVENT_TRACE;
struct _EVENT_TRACE_HEADER;
struct _EXCEPTION_LOG;
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_RECORD32;
struct _EXCEPTION_RECORD64;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EXFAT_STATISTICS;
struct _EXHANDLE;
struct _EXTENDED_ENCRYPTED_DATA_INFO;
struct _EXTENT_READ_CACHE_INFO_BUFFER;
struct _EXT_DELETE_PARAMETERS;
struct _EXT_IOMMU_DEVICE_ID;
struct _EXT_IOMMU_DEVICE_ID_ACPI;
struct _EXT_IOMMU_DEVICE_ID_GIC;
struct _EXT_IOMMU_DEVICE_ID_PCI;
struct _EXT_IOMMU_DEVICE_ID_TEST;
struct _EXT_SET_PARAMETERS_V0;
struct _EX_BOOT_DEVICE_REGISTRATION;
struct _EX_EXTENSION;
struct _EX_EXTENSION_REGISTRATION_1;
struct _EX_PUSH_LOCK;
struct _EX_PUSH_LOCK_AUTO_EXPAND;
struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE;
struct _EX_PUSH_LOCK_CACHE_AWARE_LEGACY;
struct _EX_PUSH_LOCK_CACHE_AWARE_PADDED;
struct _EX_RUNDOWN_REF;
struct _EX_RUNDOWN_REF_CACHE_AWARE;
struct _EX_RUNDOWN_REF_CACHE_AWARE_STATE;
struct _EX_TIMER;
struct _EX_WNF_SUBSCRIPTION;
struct _FAST_ERESOURCE;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FAST_OWNER_ENTRY;
struct _FAT_STATISTICS;
struct _FAULT_INFORMATION;
struct _FAULT_INFORMATION_ARM64;
struct _FAULT_INFORMATION_ARM64_FLAGS;
struct _FIBER;
struct _FILEOFFSET_INFORMATION;
struct _FILESYSTEM_STATISTICS;
struct _FILESYSTEM_STATISTICS_EX;
struct _FILE_ACCESS_INFORMATION;
struct _FILE_ALIGNMENT_INFORMATION;
struct _FILE_ALLOCATED_RANGE_BUFFER;
struct _FILE_ALLOCATION_INFORMATION;
struct _FILE_ALL_INFORMATION;
struct _FILE_ATTRIBUTE_TAG_INFORMATION;
struct _FILE_BASIC_INFORMATION;
struct _FILE_BOTH_DIR_INFORMATION;
struct _FILE_CASE_SENSITIVE_INFORMATION;
struct _FILE_COMPLETION_INFORMATION;
struct _FILE_COMPRESSION_INFORMATION;
struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION;
struct _FILE_DIRECTORY_INFORMATION;
struct _FILE_DISPOSITION_INFORMATION;
struct _FILE_DISPOSITION_INFORMATION_EX;
struct _FILE_EA_INFORMATION;
struct _FILE_END_OF_FILE_INFORMATION;
struct _FILE_FS_ATTRIBUTE_INFORMATION;
struct _FILE_FS_CONTROL_INFORMATION;
struct _FILE_FS_DATA_COPY_INFORMATION;
struct _FILE_FS_DEVICE_INFORMATION;
struct _FILE_FS_DRIVER_PATH_INFORMATION;
struct _FILE_FS_FULL_SIZE_INFORMATION;
struct _FILE_FS_FULL_SIZE_INFORMATION_EX;
struct _FILE_FS_LABEL_INFORMATION;
struct _FILE_FS_METADATA_SIZE_INFORMATION;
struct _FILE_FS_OBJECTID_INFORMATION;
struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION;
struct _FILE_FS_SECTOR_SIZE_INFORMATION;
struct _FILE_FS_SIZE_INFORMATION;
struct _FILE_FS_VOLUME_FLAGS_INFORMATION;
struct _FILE_FS_VOLUME_INFORMATION;
struct _FILE_FULL_DIR_INFORMATION;
struct _FILE_FULL_EA_INFORMATION;
struct _FILE_GET_EA_INFORMATION;
struct _FILE_GET_QUOTA_INFORMATION;
struct _FILE_ID_128;
struct _FILE_ID_BOTH_DIR_INFORMATION;
struct _FILE_ID_EXTD_BOTH_DIR_INFORMATION;
struct _FILE_ID_EXTD_DIR_INFORMATION;
struct _FILE_ID_FULL_DIR_INFORMATION;
struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION;
struct _FILE_ID_INFORMATION;
struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER;
struct _FILE_INTERNAL_INFORMATION;
struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION;
struct _FILE_IO_COMPLETION_INFORMATION;
struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
struct _FILE_IO_PRIORITY_HINT_INFORMATION;
struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX;
struct _FILE_IS_REMOTE_DEVICE_INFORMATION;
struct _FILE_LAYOUT_ENTRY;
struct _FILE_LAYOUT_INFO_ENTRY;
struct _FILE_LAYOUT_NAME_ENTRY;
struct _FILE_LEVEL_TRIM;
struct _FILE_LEVEL_TRIM_OUTPUT;
struct _FILE_LEVEL_TRIM_RANGE;
struct _FILE_LINKS_FULL_ID_INFORMATION;
struct _FILE_LINKS_INFORMATION;
struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION;
struct _FILE_LINK_ENTRY_INFORMATION;
struct _FILE_LINK_INFORMATION;
struct _FILE_MAILSLOT_PEEK_BUFFER;
struct _FILE_MAILSLOT_QUERY_INFORMATION;
struct _FILE_MAILSLOT_SET_INFORMATION;
struct _FILE_MAKE_COMPATIBLE_BUFFER;
struct _FILE_MEMORY_PARTITION_INFORMATION;
struct _FILE_MODE_INFORMATION;
struct _FILE_MOVE_CLUSTER_INFORMATION;
struct _FILE_NAMES_INFORMATION;
struct _FILE_NAME_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION;
struct _FILE_NOTIFY_EXTENDED_INFORMATION;
struct _FILE_NOTIFY_INFORMATION;
struct _FILE_NUMA_NODE_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_OBJECTID_BUFFER;
struct _FILE_OBJECTID_INFORMATION;
struct _FILE_PATH;
struct _FILE_PIPE_ASSIGN_EVENT_BUFFER;
struct _FILE_PIPE_CLIENT_PROCESS_BUFFER;
struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX;
struct _FILE_PIPE_CREATE_SYMLINK_INPUT;
struct _FILE_PIPE_DELETE_SYMLINK_INPUT;
struct _FILE_PIPE_EVENT_BUFFER;
struct _FILE_PIPE_EVENT_ENUM_INPUT_BUFFER;
struct _FILE_PIPE_EVENT_ENUM_OUTPUT_BUFFER;
struct _FILE_PIPE_EVENT_SELECT_BUFFER;
struct _FILE_PIPE_INFORMATION;
struct _FILE_PIPE_LOCAL_INFORMATION;
struct _FILE_PIPE_PEEK_BUFFER;
struct _FILE_PIPE_REMOTE_INFORMATION;
struct _FILE_PIPE_SILO_ARRIVAL_INPUT;
struct _FILE_PIPE_WAIT_FOR_BUFFER;
struct _FILE_POSITION_INFORMATION;
struct _FILE_PREFETCH;
struct _FILE_PREFETCH_EX;
struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION;
struct _FILE_PROVIDER_EXTERNAL_INFO_V0;
struct _FILE_PROVIDER_EXTERNAL_INFO_V1;
struct _FILE_QUERY_METADATA_OPTIMIZATION_OUTPUT;
struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
struct _FILE_QUERY_SPARING_BUFFER;
struct _FILE_QUERY_STORAGE_RESERVE_ID_INFORMATION_EX;
struct _FILE_QUOTA_INFORMATION;
struct _FILE_REFERENCE_RANGE;
struct _FILE_REGION_INFO;
struct _FILE_REGION_INPUT;
struct _FILE_REGION_OUTPUT;
struct _FILE_REMOTE_PROTOCOL_INFORMATION;
struct _FILE_RENAME_INFORMATION;
struct _FILE_REPARSE_POINT_INFORMATION;
struct _FILE_SET_DEFECT_MGMT_BUFFER;
struct _FILE_SET_SPARSE_BUFFER;
struct _FILE_SET_STORAGE_RESERVE_ID_INFORMATION_EX;
struct _FILE_SFIO_RESERVE_INFORMATION;
struct _FILE_SFIO_VOLUME_INFORMATION;
struct _FILE_STANDARD_INFORMATION;
struct _FILE_STANDARD_INFORMATION_EX;
struct _FILE_STANDARD_LINK_INFORMATION;
struct _FILE_STAT_INFORMATION;
struct _FILE_STAT_LX_INFORMATION;
struct _FILE_STORAGE_RESERVE_ID_INFORMATION;
struct _FILE_STORAGE_TIER;
struct _FILE_STORAGE_TIER_REGION;
struct _FILE_STREAM_INFORMATION;
struct _FILE_SYSTEM_RECOGNITION_INFORMATION;
struct _FILE_TRACKING_INFORMATION;
struct _FILE_TYPE_NOTIFICATION_INPUT;
struct _FILE_VALID_DATA_LENGTH_INFORMATION;
struct _FILE_VOLUME_NAME_INFORMATION;
struct _FILE_ZERO_DATA_INFORMATION;
struct _FILE_ZERO_DATA_INFORMATION_EX;
struct _FIRMWARE_INFORMATION_LOADER_BLOCK;
struct _FLOAT128;
struct _FLS_CALLBACK_INFO;
struct _FNSAVE_FORMAT;
struct _FPGA_CONTROL_INTERFACE;
struct _FPO_DATA;
struct _FP_128;
struct _FP_32;
struct _FP_64;
struct _FP_80;
struct _FP_IEEE_RECORD;
struct _FP_IEEE_VALUE;
struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
struct _FSCTL_GHOST_FILE_EXTENTS_INPUT_BUFFER;
struct _FSCTL_OFFLOAD_READ_INPUT;
struct _FSCTL_OFFLOAD_READ_OUTPUT;
struct _FSCTL_OFFLOAD_WRITE_INPUT;
struct _FSCTL_OFFLOAD_WRITE_OUTPUT;
struct _FSCTL_QUERY_FAT_BPB_BUFFER;
struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_INPUT_RANGE;
struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_OUTPUT;
struct _FSCTL_QUERY_REGION_INFO_INPUT;
struct _FSCTL_QUERY_REGION_INFO_OUTPUT;
struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
struct _FSCTL_QUERY_VOLUME_NUMA_INFO_OUTPUT;
struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
struct _FSCTL_UNMAP_SPACE_INPUT_BUFFER;
struct _FSCTL_UNMAP_SPACE_OUTPUT;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _FUNCTION_LEVEL_DEVICE_RESET_PARAMETERS;
struct _FUNCTION_LEVEL_RESET_PARAMETERS;
struct _GDI_TEB_BATCH;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERATE_NAME_CONTEXT;
struct _GENERIC_MAPPING;
struct _GEN_GET_NETCARD_TIME;
struct _GEN_GET_TIME_CAPS;
struct _GET_FILTER_FILE_IDENTIFIER_INPUT;
struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT;
struct _GHOSTED_FILE_EXTENT;
struct _GROUP_AFFINITY;
struct _GROUP_RELATIONSHIP;
struct _GS_HANDLER_DATA;
struct _GUID;
struct _HAL_ACPI_AUDIT_INFORMATION;
struct _HAL_AMLI_BAD_IO_ADDRESS_LIST;
struct _HAL_BUS_INFORMATION;
struct _HAL_CALLBACKS;
struct _HAL_CHANNEL_COMMAND;
struct _HAL_CHANNEL_MEMORY_RANGES;
struct _HAL_CLOCK_TIMER_CONFIGURATION;
struct _HAL_DMA_REMAPPING_INFORMATION;
struct _HAL_DP_REPLACE_PARAMETERS;
struct _HAL_ERROR_INFO;
struct _HAL_EXTENSION_INSTANCE_ENTRY;
struct _HAL_EXTENSION_MODULE_ENTRY;
struct _HAL_EXTERNAL_CACHE_INFO;
struct _HAL_HARDWARE_WATCHDOG_INFORMATION;
struct _HAL_HETEROGENEOUS_MEMORY_ATTRIBUTES_INTERFACE;
struct _HAL_HMA_MEMORY_SIDE_CACHE_INFO;
struct _HAL_HV_DMA_DOMAIN_CONFIG;
struct _HAL_HV_DMA_DOMAIN_INFO;
struct _HAL_HV_SVM_DEVICE_CAPABILITIES;
struct _HAL_HV_SVM_SYSTEM_CAPABILITIES;
struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION;
struct _HAL_INTERRUPT_TARGET_INFORMATION;
struct _HAL_IOMMU_DISPATCH;
struct _HAL_IOMMU_RESERVED_REGION_INFORMATION;
struct _HAL_IRT_INFORMATION;
struct _HAL_LBR_ENTRY;
struct _HAL_LOG_REGISTER_CONTEXT;
struct _HAL_MCA_INTERFACE;
struct _HAL_MESSAGE_TARGET_REQUEST;
struct _HAL_NODE_RANGE;
struct _HAL_NUMA_TOPOLOGY_INTERFACE;
struct _HAL_PARKING_PAGE_INFORMATION;
struct _HAL_PLATFORM_INFORMATION;
struct _HAL_PLATFORM_TIMER_INFORMATION;
struct _HAL_PMC_COUNTERS;
struct _HAL_PORT_RANGE_INTERFACE;
struct _HAL_POWER_INFORMATION;
struct _HAL_PROCESSOR_FEATURE;
struct _HAL_PROCESSOR_SPEED_INFO;
struct _HAL_PROFILE_SOURCE_ADD;
struct _HAL_PROFILE_SOURCE_INFORMATION;
struct _HAL_PROFILE_SOURCE_INFORMATION_EX;
struct _HAL_PROFILE_SOURCE_INTERVAL;
struct _HAL_PROFILE_SOURCE_LIST;
struct _HAL_PROFILE_SOURCE_REMOVE;
struct _HAL_QUERY_PROCESSOR_EFFICIENCY_INFORMATION;
struct _HAL_RUNTIME_SERVICES_BLOCK_INFO;
struct _HAL_SET_I386_EXCEPTION_CHAIN_TERMINATOR_INFORMATION;
struct _HAL_STATE_ELEMENT;
struct _HAL_STATE_ELEMENT_INFORMATION;
struct _HAL_UNMASKED_INTERRUPT_INFORMATION;
struct _HANDLE_TABLE;
struct _HARDERROR_MSG;
struct _HARDWARE_COUNTER;
struct _HARDWARE_PTE;
struct _HEADLESS_LOADER_BLOCK;
struct _HIBERFILE_BUCKET;
struct _HOT_PATCH_IMAGE_INFO;
struct _HSM_OPCODE;
struct _HV_DETAILS;
struct _HWPROFILE_CHANGE_NOTIFICATION;
struct _I386_LOADER_BLOCK;
struct _ICMPV4_ADDRESS_MASK_MESSAGE;
struct _ICMPV4_ROUTER_ADVERT_ENTRY;
struct _ICMPV4_ROUTER_ADVERT_HEADER;
struct _ICMPV4_ROUTER_SOLICIT;
struct _ICMPV4_TIMESTAMP_MESSAGE;
struct _ICMP_HEADER;
struct _ICMP_MESSAGE;
struct _IF_COUNTED_STRING_LH;
struct _IF_PHYSICAL_ADDRESS_LH;
struct _IGMPV3_QUERY_HEADER;
struct _IGMPV3_REPORT_HEADER_;
struct _IGMPV3_REPORT_RECORD_HEADER;
struct _IGMP_HEADER;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_ARCHIVE_MEMBER_HEADER;
struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_BASE_RELOCATION;
struct _IMAGE_BOUND_FORWARDER_REF;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_CHPE_METADATA_X86;
struct _IMAGE_CHPE_RANGE_ENTRY;
struct _IMAGE_COFF_SYMBOLS_HEADER;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_DEBUG_MISC;
struct _IMAGE_DELAYLOAD_DESCRIPTOR;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_DYNAMIC_RELOCATION32;
struct _IMAGE_DYNAMIC_RELOCATION32_V2;
struct _IMAGE_DYNAMIC_RELOCATION64;
struct _IMAGE_DYNAMIC_RELOCATION64_V2;
struct _IMAGE_DYNAMIC_RELOCATION_TABLE;
struct _IMAGE_ENCLAVE_CONFIG32;
struct _IMAGE_ENCLAVE_CONFIG64;
struct _IMAGE_ENCLAVE_IMPORT;
struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
struct _IMAGE_EXPORT_DIRECTORY;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_FUNCTION_ENTRY;
struct _IMAGE_FUNCTION_ENTRY64;
struct _IMAGE_HOT_PATCH_BASE;
struct _IMAGE_HOT_PATCH_HASHES;
struct _IMAGE_HOT_PATCH_INFO;
struct _IMAGE_IMPORT_BY_NAME;
struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
struct _IMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
struct _IMAGE_INFO;
struct _IMAGE_INFO_EX;
struct _IMAGE_LINENUMBER;
struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
struct _IMAGE_LOAD_CONFIG_DIRECTORY32;
struct _IMAGE_LOAD_CONFIG_DIRECTORY64;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_OPTIONAL_HEADER64;
struct _IMAGE_OS2_HEADER;
struct _IMAGE_POLICY_ENTRY;
struct _IMAGE_POLICY_METADATA;
struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
struct _IMAGE_RELOCATION;
struct _IMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_STRING;
struct _IMAGE_RESOURCE_DIR_STRING_U;
struct _IMAGE_ROM_HEADERS;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_SECTION_HEADER;
struct _IMAGE_SEPARATE_DEBUG_HEADER;
struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
struct _IMAGE_SYMBOL;
struct _IMAGE_SYMBOL_EX;
struct _IMAGE_THUNK_DATA32;
struct _IMAGE_THUNK_DATA64;
struct _IMAGE_TLS_DIRECTORY32;
struct _IMAGE_TLS_DIRECTORY64;
struct _IMAGE_VXD_HEADER;
struct _INET_PORT_RANGE;
struct _INITIAL_PRIVILEGE_SET;
struct _INITIAL_TEB;
struct _INPUT_MAPPING_ELEMENT;
struct _INTERFACE;
struct _INTERFACE_INFO;
struct _INTERFACE_INFO_EX;
struct _INTERRUPT_CONNECTION_DATA;
struct _INTERRUPT_HT_INTR_INFO;
struct _INTERRUPT_REMAPPING_INFO;
struct _INTERRUPT_VECTOR_DATA;
struct _INT_ROUTE_INTERFACE_STANDARD;
struct _INVERTED_FUNCTION_TABLE;
struct _INVERTED_FUNCTION_TABLE_ENTRY;
struct _IOMMU_BUS_INTERFACE;
struct _IOMMU_DMA_DOMAIN;
struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;
struct _IO_ADAPTER_CRYPTO_PARAMETERS;
struct _IO_ATTRIBUTION_INFORMATION;
struct _IO_COMPLETION_BASIC_INFORMATION;
struct _IO_COMPLETION_CONTEXT;
struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS;
struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS;
struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS;
struct _IO_CONNECT_INTERRUPT_PARAMETERS;
struct _IO_COUNTERS;
struct _IO_CSQ;
struct _IO_CSQ_IRP_CONTEXT;
struct _IO_DISCONNECT_INTERRUPT_PARAMETERS;
struct _IO_DISK_IO_ATTRIBUTION_STATS;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_ERROR_LOG_MESSAGE;
struct _IO_ERROR_LOG_PACKET;
struct _IO_FOEXT_SILO_PARAMETERS;
struct _IO_INTERRUPT_MESSAGE_INFO;
struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY;
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
struct _IO_LIVEDUMP_CONTROL;
struct _IO_LIVEDUMP_SECONDARY_DATA;
struct _IO_LIVEDUMP_SECONDARY_DATA_HEADER;
struct _IO_LOAD_CRASHDUMP_PARAMS;
struct _IO_LOAD_CRASHDUMP_RESULT;
struct _IO_MINI_COMPLETION_PACKET_USER;
struct _IO_PRIORITY_INFO;
struct _IO_RATE_HOST_INTERFACE;
struct _IO_RATE_ROUTINE_TABLE;
struct _IO_REMOVE_LOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_REMOVE_LOCK_DBG_BLOCK;
struct _IO_REMOVE_LOCK_TRACKING_BLOCK;
struct _IO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_SESSION_CONNECT_INFO;
struct _IO_SESSION_STATE_INFORMATION;
struct _IO_SESSION_STATE_NOTIFICATION;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_STATUS_BLOCK32;
struct _IO_STEER_INTERRUPT_CONNECTION;
struct _IO_STEER_INTERRUPT_CONNECTION_CONTEXT;
struct _IO_STEER_INTERRUPT_TARGET;
struct _IO_TIMER;
struct _IO_TRACKING_CALLBACK_INFO;
struct _IO_TRACKING_SETTINGS;
struct _IO_WORKITEM;
struct _IPSEC_OFFLOAD_V2_ADD_SA;
struct _IPSEC_OFFLOAD_V2_ADD_SA_EX;
struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO;
struct _IPSEC_OFFLOAD_V2_DELETE_SA;
struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION;
struct _IPSEC_OFFLOAD_V2_UPDATE_SA;
struct _IPTLS_METADATA;
struct _IPV4_ARP_PARAMETERS;
struct _IPV4_HEADER;
struct _IPV4_OPTION_HEADER;
struct _IPV4_ROUTING_HEADER;
struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IPV4_TIMESTAMP_OPTION;
struct _IPV6_EXTENSION_HEADER;
struct _IPV6_FRAGMENT_HEADER;
struct _IPV6_HEADER;
struct _IPV6_NS_PARAMETERS;
struct _IPV6_OPTION_HEADER;
struct _IPV6_OPTION_JUMBOGRAM;
struct _IPV6_OPTION_ROUTER_ALERT;
struct _IPV6_ROUTING_HEADER;
struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IRP;
struct _IR_TIMER_EXTRA_CREATE_PARAMETER;
struct _ImageArchitectureEntry;
struct _ImageArchitectureHeader;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _JOBOBJECT_CONTAINER_IDENTIFIER_V2;
struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2;
struct _JOBOBJECT_FREEZE_INFORMATION;
struct _JOBOBJECT_INTERFERENCE_INFORMATION;
struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
struct _JOBOBJECT_IO_ATTRIBUTION_STATS;
struct _JOBOBJECT_JOBSET_INFORMATION;
struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION_V2;
struct _JOBOBJECT_MEMORY_USAGE_INFORMATION;
struct _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2;
struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_V2;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
struct _JOBOBJECT_WAKE_FILTER;
struct _JOBOBJECT_WAKE_INFORMATION;
struct _JOBOBJECT_WAKE_INFORMATION_V1;
struct _JOB_SET_ARRAY;
struct _JOURNAL_ABSOLUTE_INFORMATION;
struct _JOURNAL_CLIENT_INFORMATION;
struct _JOURNAL_CREATE_DELETE_KEY_INFORMATION;
struct _JOURNAL_RENAME_KEY_INFORMATION;
struct _JOURNAL_SET_DELETE_VALUE_INFORMATION;
struct _JOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION;
struct _JOURNAL_SET_KEY_SECURITY_INFORMATION;
struct _JOURNAL_SET_KEY_USER_FLAGS_INFORMATION;
struct _JOURNAL_TRANSACTION_BOUNDARY_INFORMATION;
struct _KADDRESS_RANGE;
struct _KADDRESS_RANGE_DESCRIPTOR;
struct _KAFFINITY_ENUMERATION_CONTEXT;
struct _KAFFINITY_EX;
struct _KAPC;
struct _KAPC_STATE;
struct _KBUGCHECK_ADD_PAGES;
struct _KBUGCHECK_CALLBACK_RECORD;
struct _KBUGCHECK_DUMP_IO;
struct _KBUGCHECK_REASON_CALLBACK_RECORD;
struct _KBUGCHECK_REMOVE_PAGES;
struct _KBUGCHECK_SECONDARY_DUMP_DATA;
struct _KBUGCHECK_SECONDARY_DUMP_DATA_EX;
struct _KBUGCHECK_TRIAGE_DUMP_DATA;
struct _KCRM_MARSHAL_HEADER;
struct _KCRM_PROTOCOL_BLOB;
struct _KCRM_TRANSACTION_BLOB;
struct _KDESCRIPTOR;
struct _KDESCRIPTOR32;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KDPC_WATCHDOG_INFORMATION;
struct _KD_POWER_HANDLER;
struct _KENLISTMENT;
struct _KERNEL_USER_TIMES;
struct _KEVENT;
struct _KEXCEPTION_FRAME;
struct _KEY_BASIC_INFORMATION;
struct _KEY_CACHED_INFORMATION;
struct _KEY_CONTROL_FLAGS_INFORMATION;
struct _KEY_FLAGS_INFORMATION;
struct _KEY_FULL_INFORMATION;
struct _KEY_HANDLE_TAGS_INFORMATION;
struct _KEY_LAYER_INFORMATION;
struct _KEY_NAME_INFORMATION;
struct _KEY_NODE_INFORMATION;
struct _KEY_OPEN_SUBKEYS_INFORMATION;
struct _KEY_SET_LAYER_INFORMATION;
struct _KEY_SET_VIRTUALIZATION_INFORMATION;
struct _KEY_TRUST_INFORMATION;
struct _KEY_VALUE_BASIC_INFORMATION;
struct _KEY_VALUE_ENTRY;
struct _KEY_VALUE_FULL_INFORMATION;
struct _KEY_VALUE_LAYER_INFORMATION;
struct _KEY_VALUE_PARTIAL_INFORMATION;
struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
struct _KEY_VIRTUALIZATION_INFORMATION;
struct _KEY_WOW64_FLAGS_INFORMATION;
struct _KEY_WRITE_TIME_INFORMATION;
struct _KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT;
struct _KE_SUPERVISOR_STATE_EXT_HOST_INTERFACE;
struct _KFLOATING_SAVE;
struct _KGATE;
struct _KGDTENTRY;
struct _KINTEGRITY_CHECK_FILTER_ADDRESS_RANGE;
struct _KINTEGRITY_CHECK_FILTER_PROCESSOR_AFFINITY;
struct _KINTEGRITY_CHECK_OPAQUE_STATE;
struct _KINTEGRITY_CHECK_PARAMETERS;
struct _KINTERRUPT;
struct _KIPI_COUNTS;
struct _KLDR_DATA_TABLE_ENTRY;
struct _KLDR_DATA_TABLE_ENTRY32;
struct _KLDR_DATA_TABLE_ENTRY64;
struct _KLDTENTRY;
struct _KLOCK_QUEUE_HANDLE;
struct _KMUTANT;
struct _KNODE;
struct _KNONVOLATILE_CONTEXT_POINTERS;
struct _KPCR;
struct _KPRCB;
struct _KPRIQUEUE;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KQUEUE;
struct _KREQUEST_PACKET;
struct _KRESOURCEMANAGER;
struct _KSECURE_FAULT_INFORMATION;
struct _KSEMAPHORE;
struct _KSPECIAL_REGISTERS;
struct _KSPIN_LOCK_QUEUE;
struct _KSTART_FRAME;
struct _KSWITCH_FRAME;
struct _KSYSTEM_TIME;
struct _KTB_FLUSH_VA;
struct _KTHREAD;
struct _KTIMER;
struct _KTM;
struct _KTMOBJECT_CURSOR;
struct _KTRANSACTION;
struct _KTRAP_FRAME;
struct _KTRIAGE_DUMP_DATA_ARRAY;
struct _KTSS64;
struct _KUMS_CONTEXT_HEADER;
struct _KUSER_SHARED_DATA;
struct _KWAIT_BLOCK;
struct _KWAIT_CHAIN;
struct _K_MDL_Advance;
struct _K_NET_BUFFER_Advance;
struct _K_NET_BUFFER_LIST_Advance;
struct _LAST_EXCEPTION_LOG;
struct _LBLOB;
struct _LDRP_CSLIST;
struct _LDRP_LOAD_CONTEXT;
struct _LDR_DATA_TABLE_ENTRY;
struct _LDR_DATA_TABLE_ENTRY32;
struct _LDR_DATA_TABLE_ENTRY64;
struct _LDR_DDAG_NODE;
struct _LDR_DLL_LOADED_NOTIFICATION_DATA;
struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA;
struct _LDR_ENUM_RESOURCE_ENTRY;
struct _LDR_FAILURE_DATA;
struct _LDR_IMPORT_CALLBACK_INFO;
struct _LDR_RESLOADER_RET;
struct _LDR_SECTION_INFO;
struct _LDR_SERVICE_TAG_RECORD;
struct _LDR_VERIFY_IMAGE_INFO;
struct _LEAP_SECOND_DATA;
struct _LEAP_SECOND_DATA_REGISTRY_ENTRY;
struct _LEARNING_MODE_OBJECT_INFORMATION;
struct _LEGACY_BUS_INFORMATION;
struct _LEGACY_DEVICE_DETECTION_INTERFACE;
struct _LIBRARY_MODULE;
struct _LINK_SHARE_ACCESS;
struct _LINK_TRACKING_INFORMATION;
struct _LIST_ENTRY;
struct _LOADER_BUGCHECK_PARAMETERS;
struct _LOADER_HIVE_BLOCK;
struct _LOADER_HIVE_RECOVERY_INFO;
struct _LOADER_PARAMETER_BLOCK;
struct _LOADER_PARAMETER_CI_EXTENSION;
struct _LOADER_PARAMETER_EXTENSION;
struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION;
struct _LOADER_PARTITION_INFORMATION_EX;
struct _LOADER_PERFORMANCE_DATA;
struct _LOADER_RESET_REASON;
struct _LOAD_ASDATA_TABLE;
struct _LOCK_STATE;
struct _LOCK_STATE_EX;
struct _LOOKASIDE_LIST_EX;
struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY;
struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT;
struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
struct _LPC_CLIENT_DIED_MSG;
struct _LPC_UNREGISTER_PROCESS_MSG;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _LUNICODE_STRING;
struct _LUTF8_STRING;
struct _M128A;
struct _MACHINE_FRAME;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MANAGE_HOT_PATCH_LOAD_PATCH;
struct _MANAGE_HOT_PATCH_QUERY_ACTIVE_PATCHES;
struct _MANAGE_HOT_PATCH_QUERY_PATCHES;
struct _MANAGE_HOT_PATCH_UNLOAD_PATCH;
struct _MANAGE_WRITES_TO_EXECUTABLE_MEMORY;
struct _MAP_REGISTER_ENTRY;
struct _MARKER_TYPE;
struct _MCA_DRIVER_INFO;
struct _MCA_EXCEPTION;
struct _MDL;
struct _MEDIA_SPECIFIC_INFORMATION;
struct _MEMORY_ALLOCATION_DESCRIPTOR;
struct _MEMORY_BASIC_INFORMATION;
struct _MEMORY_BASIC_INFORMATION32;
struct _MEMORY_BASIC_INFORMATION64;
struct _MEMORY_COMBINE_INFORMATION;
struct _MEMORY_COMBINE_INFORMATION_EX;
struct _MEMORY_COMBINE_INFORMATION_EX2;
struct _MEMORY_ENCLAVE_IMAGE_INFORMATION;
struct _MEMORY_EXHAUSTION_INFORMATION;
struct _MEMORY_FRAME_INFORMATION;
struct _MEMORY_IMAGE_INFORMATION;
struct _MEMORY_PARTITION_CONFIGURATION_INFORMATION;
struct _MEMORY_PARTITION_INITIAL_ADD_INFORMATION;
struct _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION;
struct _MEMORY_PARTITION_PAGEFILE_INFORMATION;
struct _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION;
struct _MEMORY_PARTITION_PAGE_RANGE;
struct _MEMORY_PARTITION_TRANSFER_INFORMATION;
struct _MEMORY_RANGE_ENTRY;
struct _MEMORY_REGION_INFORMATION;
struct _MEMORY_SCRUB_INFORMATION;
struct _MEMORY_SHARED_COMMIT_INFORMATION;
struct _MEMORY_WORKING_SET_BLOCK;
struct _MEMORY_WORKING_SET_EX_BLOCK;
struct _MEMORY_WORKING_SET_EX_INFORMATION;
struct _MEMORY_WORKING_SET_INFORMATION;
struct _MEM_ADDRESS_REQUIREMENTS;
struct _MESSAGE_RESOURCE_BLOCK;
struct _MESSAGE_RESOURCE_DATA;
struct _MESSAGE_RESOURCE_ENTRY;
struct _METHOD;
struct _MIB_IF_ROW2;
struct _MLDV2_QUERY_HEADER;
struct _MLDV2_REPORT_HEADER;
struct _MLDV2_REPORT_RECORD_HEADER;
struct _MLD_HEADER;
struct _MMPFN_IDENTITY;
struct _MM_COPY_ADDRESS;
struct _MM_ETW_PAGE_INFO;
struct _MM_ETW_PAGE_INFO_EX;
struct _MM_ETW_WORKING_SET_PFN_RUNDOWN;
struct _MM_PHYSICAL_ADDRESS_LIST;
struct _MOF_FIELD;
struct _MOVE_FILE_DATA32;
struct _MUICCENTRY;
struct _MUICCHEADER;
struct _MUILANGCFGLIST;
struct _MUILANGCFGNODE;
struct _MUILANGINFO;
struct _MUILANGLIST;
struct _MUILANGLISTNODE;
struct _MUILANGUAGES;
struct _MUIREGISTRYINFO;
struct _MUISTRINGPOOL;
struct _MULTI_TIME;
struct _MUTANT_BASIC_INFORMATION;
struct _MUTANT_OWNER_INFORMATION;
struct _MdTimer;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NBL_COUNTED_QUEUE;
struct _NBL_QUEUE;
struct _NDIS_802_11_AI_REQFI;
struct _NDIS_802_11_AI_RESFI;
struct _NDIS_802_11_ASSOCIATION_INFORMATION;
struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION;
struct _NDIS_802_11_AUTHENTICATION_EVENT;
struct _NDIS_802_11_AUTHENTICATION_REQUEST;
struct _NDIS_802_11_BSSID_LIST;
struct _NDIS_802_11_BSSID_LIST_EX;
struct _NDIS_802_11_CAPABILITY;
struct _NDIS_802_11_CONFIGURATION;
struct _NDIS_802_11_CONFIGURATION_FH;
struct _NDIS_802_11_FIXED_IEs;
struct _NDIS_802_11_KEY;
struct _NDIS_802_11_NETWORK_TYPE_LIST;
struct _NDIS_802_11_NON_BCAST_SSID_LIST;
struct _NDIS_802_11_PMKID;
struct _NDIS_802_11_PMKID_CANDIDATE_LIST;
struct _NDIS_802_11_REMOVE_KEY;
struct _NDIS_802_11_SSID;
struct _NDIS_802_11_STATISTICS;
struct _NDIS_802_11_STATUS_INDICATION;
struct _NDIS_802_11_TEST;
struct _NDIS_802_11_VARIABLE_IEs;
struct _NDIS_802_11_WEP;
struct _NDIS_AF_LIST;
struct _NDIS_BIND_FAILED_NOTIFICATION;
struct _NDIS_BIND_PARAMETERS;
struct _NDIS_CALL_MANAGER_CHARACTERISTICS;
struct _NDIS_CONFIGURATION_OBJECT;
struct _NDIS_CONFIGURATION_PARAMETER;
struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS;
struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS;
struct _NDIS_CO_LINK_SPEED;
struct _NDIS_DEVICE_OBJECT_ATTRIBUTES;
struct _NDIS_DMA_BLOCK;
struct _NDIS_DMA_DESCRIPTION;
struct _NDIS_DRIVER_OPTIONAL_HANDLERS;
struct _NDIS_DRIVER_WRAPPER_HANDLE;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO;
struct _NDIS_ENUM_FILTERS;
struct _NDIS_EVENT;
struct _NDIS_FILTER_ATTACH_PARAMETERS;
struct _NDIS_FILTER_ATTRIBUTES;
struct _NDIS_FILTER_DRIVER_CHARACTERISTICS;
struct _NDIS_FILTER_INTERFACE;
struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS;
struct _NDIS_FILTER_PAUSE_PARAMETERS;
struct _NDIS_FILTER_RESTART_PARAMETERS;
struct _NDIS_GENERIC_OBJECT;
struct _NDIS_GFP_ETHERNET_HEADER_FIELDS;
struct _NDIS_GFP_EXACT_MATCH_PROFILE;
struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH;
struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE;
struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH;
struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE;
struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH;
struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH;
struct _NDIS_GFP_WILDCARD_MATCH_PROFILE;
struct _NDIS_GFT_BYTE_COUNTER_VALUE;
struct _NDIS_GFT_COUNTER_INFO;
struct _NDIS_GFT_COUNTER_INFO_ARRAY;
struct _NDIS_GFT_COUNTER_PARAMETERS;
struct _NDIS_GFT_COUNTER_VALUE;
struct _NDIS_GFT_COUNTER_VALUE_ARRAY;
struct _NDIS_GFT_CUSTOM_ACTION;
struct _NDIS_GFT_CUSTOM_ACTION_PROFILE;
struct _NDIS_GFT_DELETE_PROFILE_PARAMETERS;
struct _NDIS_GFT_DELETE_TABLE_PARAMETERS;
struct _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY;
struct _NDIS_GFT_FLOW_ENTRY_ARRAY;
struct _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER;
struct _NDIS_GFT_FLOW_ENTRY_ID_ARRAY;
struct _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY;
struct _NDIS_GFT_FREE_COUNTER_PARAMETERS;
struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION;
struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE;
struct _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE;
struct _NDIS_GFT_OFFLOAD_CAPABILITIES;
struct _NDIS_GFT_OFFLOAD_PARAMETERS;
struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE;
struct _NDIS_GFT_PACKET_COUNTER_VALUE;
struct _NDIS_GFT_PROFILE_INFO;
struct _NDIS_GFT_PROFILE_INFO_ARRAY;
struct _NDIS_GFT_STATISTICS;
struct _NDIS_GFT_TABLE_INFO;
struct _NDIS_GFT_TABLE_INFO_ARRAY;
struct _NDIS_GFT_TABLE_PARAMETERS;
struct _NDIS_GFT_VPORT_PARAMETERS;
struct _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY;
struct _NDIS_GUID;
struct _NDIS_HARDWARE_CROSSTIMESTAMP;
struct _NDIS_HD_SPLIT_ATTRIBUTES;
struct _NDIS_HD_SPLIT_CURRENT_CONFIG;
struct _NDIS_HD_SPLIT_PARAMETERS;
struct _NDIS_HYPERVISOR_INFO;
struct _NDIS_IF_PROVIDER_CHARACTERISTICS;
struct _NDIS_INTERFACE_INFORMATION;
struct _NDIS_INTERRUPT_MODERATION_PARAMETERS;
struct _NDIS_IPSEC_OFFLOAD_V1;
struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2;
struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO;
struct _NDIS_IP_OPER_STATE;
struct _NDIS_IP_OPER_STATUS;
struct _NDIS_IP_OPER_STATUS_INFO;
struct _NDIS_IRDA_PACKET_INFO;
struct _NDIS_ISOLATION_NAME;
struct _NDIS_ISOLATION_PARAMETERS;
struct _NDIS_LINK_PARAMETERS;
struct _NDIS_LINK_SPEED;
struct _NDIS_LINK_STATE;
struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_BLOCK;
struct _NDIS_MINIPORT_BLOCK_TYPE;
struct _NDIS_MINIPORT_CO_CHARACTERISTICS;
struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS;
struct _NDIS_MINIPORT_INIT_PARAMETERS;
struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS;
struct _NDIS_MINIPORT_PAUSE_PARAMETERS;
struct _NDIS_MINIPORT_PNP_CHARACTERISTICS;
struct _NDIS_MINIPORT_RESTART_PARAMETERS;
struct _NDIS_MINIPORT_SS_CHARACTERISTICS;
struct _NDIS_MINIPORT_TIMER;
struct _NDIS_MSIX_CONFIG_PARAMETERS;
struct _NDIS_M_DRIVER_BLOCK;
struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION;
struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX;
struct _NDIS_NDK_CAPABILITIES;
struct _NDIS_NDK_CONNECTIONS;
struct _NDIS_NDK_CONNECTION_ENTRY;
struct _NDIS_NDK_LOCAL_ENDPOINTS;
struct _NDIS_NDK_LOCAL_ENDPOINT_ENTRY;
struct _NDIS_NDK_PARAMETERS;
struct _NDIS_NDK_PERFORMANCE_COUNTERS;
struct _NDIS_NDK_REQUEST_PARAMETERS;
struct _NDIS_NDK_RESPONSE_PARAMETERS;
struct _NDIS_NDK_STATISTICS_INFO;
struct _NDIS_NET_BUFFER_LIST_8021Q_INFO;
struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO;
struct _NDIS_NET_BUFFER_LIST_GFT_OFFLOAD_INFO;
struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO;
struct _NDIS_NET_BUFFER_LIST_VIRTUAL_SUBNET_INFO;
struct _NDIS_NIC_SWITCH_CAPABILITIES;
struct _NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS;
struct _NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS;
struct _NDIS_NIC_SWITCH_FREE_VF_PARAMETERS;
struct _NDIS_NIC_SWITCH_INFO;
struct _NDIS_NIC_SWITCH_INFO_ARRAY;
struct _NDIS_NIC_SWITCH_PARAMETERS;
struct _NDIS_NIC_SWITCH_VF_INFO;
struct _NDIS_NIC_SWITCH_VF_INFO_ARRAY;
struct _NDIS_NIC_SWITCH_VF_PARAMETERS;
struct _NDIS_NIC_SWITCH_VPORT_INFO;
struct _NDIS_NIC_SWITCH_VPORT_INFO_ARRAY;
struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS;
struct _NDIS_OBJECT_HEADER;
struct _NDIS_OFFLOAD;
struct _NDIS_OFFLOAD_ENCAPSULATION;
struct _NDIS_OFFLOAD_PARAMETERS;
struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS;
struct _NDIS_OID_REQUEST;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET;
struct _NDIS_OPEN_BLOCK;
struct _NDIS_OPEN_PARAMETERS;
struct _NDIS_OPER_STATE;
struct _NDIS_PACKET_8021Q_INFO;
struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES;
struct _NDIS_PD_ACQUIRE_QUEUES_PARAMETERS;
struct _NDIS_PD_CAPABILITIES;
struct _NDIS_PD_CLOSE_PROVIDER_PARAMETERS;
struct _NDIS_PD_CONFIG;
struct _NDIS_PD_COUNTER_PARAMETERS;
struct _NDIS_PD_FILTER_COUNTER;
struct _NDIS_PD_FILTER_PARAMETERS;
struct _NDIS_PD_OPEN_PROVIDER_PARAMETERS;
struct _NDIS_PD_POST_AND_DRAIN_ARG;
struct _NDIS_PD_PROVIDER_DISPATCH;
struct _NDIS_PD_QUEUE;
struct _NDIS_PD_QUEUE_DISPATCH;
struct _NDIS_PD_QUEUE_PARAMETERS;
struct _NDIS_PD_RECEIVE_QUEUE_COUNTER;
struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER;
struct _NDIS_PHYSICAL_ADDRESS_UNIT;
struct _NDIS_PM_CAPABILITIES;
struct _NDIS_PM_COUNTED_STRING;
struct _NDIS_PM_PACKET_PATTERN;
struct _NDIS_PM_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS;
struct _NDIS_PM_WAKE_PACKET;
struct _NDIS_PM_WAKE_REASON;
struct _NDIS_PM_WAKE_UP_CAPABILITIES;
struct _NDIS_PM_WOL_PATTERN;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN;
struct _NDIS_PNP_CAPABILITIES;
struct _NDIS_PORT;
struct _NDIS_PORT_ARRAY;
struct _NDIS_PORT_AUTHENTICATION_PARAMETERS;
struct _NDIS_PORT_CHARACTERISTICS;
struct _NDIS_PORT_STATE;
struct _NDIS_PROCESSOR_INFO;
struct _NDIS_PROCESSOR_INFO_EX;
struct _NDIS_PROTOCOL_BLOCK;
struct _NDIS_PROTOCOL_CO_CHARACTERISTICS;
struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS;
struct _NDIS_PROTOCOL_PAUSE_PARAMETERS;
struct _NDIS_PROTOCOL_RESTART_PARAMETERS;
struct _NDIS_QOS_CAPABILITIES;
struct _NDIS_QOS_CLASSIFICATION_ELEMENT;
struct _NDIS_QOS_OFFLOAD_CAPABILITIES;
struct _NDIS_QOS_PARAMETERS;
struct _NDIS_QOS_SQ_PARAMETERS;
struct _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY;
struct _NDIS_RECEIVE_FILTER_CAPABILITIES;
struct _NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_INFO;
struct _NDIS_RECEIVE_FILTER_INFO_ARRAY;
struct _NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE;
struct _NDIS_RECEIVE_HASH_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY;
struct _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_FREE_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_INFO;
struct _NDIS_RECEIVE_QUEUE_INFO_ARRAY;
struct _NDIS_RECEIVE_QUEUE_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_STATE;
struct _NDIS_RECEIVE_SCALE_CAPABILITIES;
struct _NDIS_RECEIVE_SCALE_PARAMETERS;
struct _NDIS_RECEIVE_SCALE_PARAMETERS_V2;
struct _NDIS_RECEIVE_THROTTLE_PARAMETERS;
struct _NDIS_RESTART_ATTRIBUTES;
struct _NDIS_RESTART_GENERAL_ATTRIBUTES;
struct _NDIS_RFC6877_464XLAT_OFFLOAD;
struct _NDIS_ROUTING_DOMAIN_ENTRY;
struct _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY;
struct _NDIS_RSC_STATISTICS_INFO;
struct _NDIS_RSS_PROCESSOR;
struct _NDIS_RSS_PROCESSOR_INFO;
struct _NDIS_RSS_SET_INDIRECTION_ENTRIES;
struct _NDIS_RSS_SET_INDIRECTION_ENTRY;
struct _NDIS_RW_LOCK;
struct _NDIS_RW_LOCK_EX;
struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS;
struct _NDIS_SG_DMA_DESCRIPTION;
struct _NDIS_SHARED_MEMORY_PARAMETERS;
struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS;
struct _NDIS_SPIN_LOCK;
struct _NDIS_SRIOV_BAR_RESOURCES_INFO;
struct _NDIS_SRIOV_CAPABILITIES;
struct _NDIS_SRIOV_CONFIG_STATE_PARAMETERS;
struct _NDIS_SRIOV_OVERLYING_ADAPTER_INFO;
struct _NDIS_SRIOV_PF_LUID_INFO;
struct _NDIS_SRIOV_PROBED_BARS_INFO;
struct _NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS;
struct _NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS;
struct _NDIS_SRIOV_RESET_VF_PARAMETERS;
struct _NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS;
struct _NDIS_SRIOV_VF_CONFIG_STATE;
struct _NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO;
struct _NDIS_SRIOV_VF_SERIAL_NUMBER_INFO;
struct _NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO;
struct _NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS;
struct _NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS;
struct _NDIS_STATISTICS_INFO;
struct _NDIS_STATISTICS_VALUE;
struct _NDIS_STATISTICS_VALUE_EX;
struct _NDIS_STATUS_INDICATION;
struct _NDIS_SWITCH_FEATURE_STATUS_CUSTOM;
struct _NDIS_SWITCH_FEATURE_STATUS_PARAMETERS;
struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY;
struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO;
struct _NDIS_SWITCH_NIC_ARRAY;
struct _NDIS_SWITCH_NIC_OID_REQUEST;
struct _NDIS_SWITCH_NIC_PARAMETERS;
struct _NDIS_SWITCH_NIC_SAVE_STATE;
struct _NDIS_SWITCH_NIC_STATUS_INDICATION;
struct _NDIS_SWITCH_OPTIONAL_HANDLERS;
struct _NDIS_SWITCH_PARAMETERS;
struct _NDIS_SWITCH_PORT_ARRAY;
struct _NDIS_SWITCH_PORT_DESTINATION;
struct _NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM;
struct _NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS;
struct _NDIS_SWITCH_PORT_PARAMETERS;
struct _NDIS_SWITCH_PORT_PROPERTY_CUSTOM;
struct _NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS;
struct _NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO;
struct _NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS;
struct _NDIS_SWITCH_PORT_PROPERTY_ISOLATION;
struct _NDIS_SWITCH_PORT_PROPERTY_PARAMETERS;
struct _NDIS_SWITCH_PORT_PROPERTY_PROFILE;
struct _NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN;
struct _NDIS_SWITCH_PORT_PROPERTY_SECURITY;
struct _NDIS_SWITCH_PORT_PROPERTY_VLAN;
struct _NDIS_SWITCH_PROPERTY_CUSTOM;
struct _NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS;
struct _NDIS_SWITCH_PROPERTY_ENUM_INFO;
struct _NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS;
struct _NDIS_SWITCH_PROPERTY_PARAMETERS;
struct _NDIS_SYSTEM_PROCESSOR_INFO;
struct _NDIS_SYSTEM_PROCESSOR_INFO_EX;
struct _NDIS_TCP_CONNECTION_OFFLOAD;
struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO;
struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD;
struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2;
struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD;
struct _NDIS_TCP_SEND_OFFLOADS_SUPPLEMENTAL_NET_BUFFER_LIST_INFO;
struct _NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES;
struct _NDIS_TIMER;
struct _NDIS_TIMER_CHARACTERISTICS;
struct _NDIS_TIMESTAMP_CAPABILITIES;
struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS;
struct _NDIS_VAR_DATA_DESC;
struct _NDIS_WAN_FRAGMENT;
struct _NDIS_WAN_GET_STATS;
struct _NDIS_WAN_LINE_DOWN;
struct _NDIS_WAN_LINE_UP;
struct _NDIS_WAN_PROTOCOL_CAPS;
struct _NDIS_WDF_COMPLETE_ADD_PARAMS;
struct _NDIS_WDF_CX_CHARACTERISTICS;
struct _NDIS_WLAN_BSSID;
struct _NDIS_WLAN_BSSID_EX;
struct _NDIS_WMI_ENUM_ADAPTER;
struct _NDIS_WMI_EVENT_HEADER;
struct _NDIS_WMI_GROUP_AFFINITY;
struct _NDIS_WMI_IPSEC_OFFLOAD_V1;
struct _NDIS_WMI_METHOD_HEADER;
struct _NDIS_WMI_NDK_CAPABILITIES;
struct _NDIS_WMI_OFFLOAD;
struct _NDIS_WMI_PM_ACTIVE_CAPABILITIES;
struct _NDIS_WMI_PM_ADMIN_CONFIG;
struct _NDIS_WMI_RECEIVE_QUEUE_INFO;
struct _NDIS_WMI_RECEIVE_QUEUE_PARAMETERS;
struct _NDIS_WMI_SET_HEADER;
struct _NDIS_WMI_TCP_CONNECTION_OFFLOAD;
struct _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD;
struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1;
struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2;
struct _NDIS_WORK_ITEM;
struct _NDIS_WRAPPER_HANDLE;
struct _NDK_ADAPTER_INFO;
struct _NDK_WMI_ADAPTER_INFO;
struct _NETADAPTERCX_GLOBAL_TRIAGE_BLOCK;
struct _NETFUNCTIONS;
struct _NETVERSION;
struct _NETWORK_ADDRESS;
struct _NETWORK_ADDRESS_IP;
struct _NETWORK_ADDRESS_IP6;
struct _NETWORK_ADDRESS_IPX;
struct _NETWORK_ADDRESS_LIST;
struct _NETWORK_APP_INSTANCE_EA;
struct _NETWORK_LOADER_BLOCK;
struct _NET_ADAPTER_DATAPATH_CALLBACKS;
struct _NET_ADAPTER_DMA_CAPABILITIES;
struct _NET_ADAPTER_LINK_LAYER_CAPABILITIES;
struct _NET_ADAPTER_LINK_STATE;
struct _NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES;
struct _NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES;
struct _NET_ADAPTER_POWER_CAPABILITIES;
struct _NET_ADAPTER_RECEIVE_SCALING_CAPABILITIES;
struct _NET_ADAPTER_RECEIVE_SCALING_CAPABILITIES::_RECEIEVE_SCALING_ENCAPSULATION;
struct _NET_ADAPTER_RECEIVE_SCALING_HASH_SECRET_KEY;
struct _NET_ADAPTER_RECEIVE_SCALING_INDIRECTION_ENTRIES;
struct _NET_ADAPTER_RECEIVE_SCALING_INDIRECTION_ENTRY;
struct _NET_ADAPTER_RX_CAPABILITIES;
struct _NET_ADAPTER_TX_CAPABILITIES;
struct _NET_BUFFER;
struct _NET_BUFFER_DATA;
struct _NET_BUFFER_LIST;
struct _NET_BUFFER_LIST_CONTEXT;
struct _NET_BUFFER_LIST_DATA;
struct _NET_BUFFER_LIST_POOL_PARAMETERS;
struct _NET_BUFFER_LIST_TIMESTAMP;
struct _NET_BUFFER_POOL_PARAMETERS;
struct _NET_BUFFER_SHARED_MEMORY;
struct _NET_CLIENT_ADAPTER_DATAPATH_CAPABILITIES;
struct _NET_CLIENT_ADAPTER_DISPATCH;
struct _NET_CLIENT_ADAPTER_OFFLOAD_DISPATCH;
struct _NET_CLIENT_ADAPTER_PROPERTIES;
struct _NET_CLIENT_ADAPTER_RECEIVE_SCALING_CAPABILITIES;
struct _NET_CLIENT_ADAPTER_RECEIVE_SCALING_DISPATCH;
struct _NET_CLIENT_BUFFER_POOL_CONFIG;
struct _NET_CLIENT_BUFFER_POOL_DISPATCH;
struct _NET_CLIENT_CONTROL_DISPATCH;
struct _NET_CLIENT_DISPATCH;
struct _NET_CLIENT_MEMORY_CONSTRAINTS;
struct _NET_CLIENT_MEMORY_CONSTRAINTS::DMA;
struct _NET_CLIENT_OFFLOAD_CHECKSUM_CAPABILITIES;
struct _NET_CLIENT_OFFLOAD_LSO_CAPABILITIES;
struct _NET_CLIENT_PACKET_EXTENSION;
struct _NET_CLIENT_QUEUE_CONFIG;
struct _NET_CLIENT_QUEUE_DISPATCH;
struct _NET_CLIENT_QUEUE_NOTIFY_DISPATCH;
struct _NET_CLIENT_RECEIVE_SCALING_HASH_SECRET_KEY;
struct _NET_CLIENT_RECEIVE_SCALING_INDIRECTION_ENTRIES;
struct _NET_CLIENT_RECEIVE_SCALING_INDIRECTION_ENTRY;
struct _NET_DATAPATH_DESCRIPTOR;
struct _NET_DEVICE_PNP_EVENT;
struct _NET_DRIVER_GLOBALS;
struct _NET_IF_ALIAS_LH;
struct _NET_IF_INFORMATION;
struct _NET_IF_RCV_ADDRESS_LH;
struct _NET_PACKET;
struct _NET_PACKET_8021Q_HEADER;
struct _NET_PACKET_ADVANCED_OFFLOAD;
struct _NET_PACKET_CHECKSUM;
struct _NET_PACKET_CONTEXT_ATTRIBUTES;
struct _NET_PACKET_CONTEXT_TOKEN_INTERNAL;
struct _NET_PACKET_EXTENSION;
struct _NET_PACKET_EXTENSION_QUERY;
struct _NET_PACKET_FRAGMENT;
struct _NET_PACKET_LARGE_SEND_SEGMENTATION;
struct _NET_PACKET_LAYOUT;
struct _NET_PACKET_QUEUE_CONFIG;
struct _NET_PACKET_RECEIVE_SEGMENT_COALESCENCE;
struct _NET_PHYSICAL_LOCATION_LH;
struct _NET_PNP_EVENT;
struct _NET_PNP_EVENT_NOTIFICATION;
struct _NET_REQUEST_QUEUE_CONFIG;
struct _NET_REQUEST_QUEUE_METHOD_HANDLER;
struct _NET_REQUEST_QUEUE_QUERY_DATA_HANDLER;
struct _NET_REQUEST_QUEUE_SET_DATA_HANDLER;
struct _NET_RING_BUFFER;
struct _NLSTABLEINFO;
struct _NLS_DATA_BLOCK;
struct _NL_BANDWIDTH_INFORMATION;
struct _NL_INTERFACE_OFFLOAD_ROD;
struct _NL_PATH_BANDWIDTH_ROD;
struct _NON_PAGED_DEBUG_INFO;
struct _NPAGED_LOOKASIDE_LIST;
struct _NPI_MODULEID;
struct _NTFS_STATISTICS;
struct _NTFS_STATISTICS_EX;
struct _NT_IMAGE_INFO;
struct _NT_TIB;
struct _NT_TIB32;
struct _NT_TIB64;
struct _NUMA_NODE_RELATIONSHIP;
struct _NV_MEMORY_RANGE;
struct _NX_NET_POWER_ENTRY;
struct _NX_STOP_IDLE_WORKITEM_CONTEXT;
struct _OBJECTID;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_ATTRIBUTES32;
struct _OBJECT_ATTRIBUTES64;
struct _OBJECT_BASIC_INFORMATION;
struct _OBJECT_CREATE_INFORMATION;
struct _OBJECT_DIRECTORY;
struct _OBJECT_DIRECTORY_ENTRY;
struct _OBJECT_DIRECTORY_INFORMATION;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HANDLE_FLAG_INFORMATION;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_HEADER;
struct _OBJECT_HEADER_NAME_INFO;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_TYPE;
struct _OBJECT_TYPES_INFORMATION;
struct _OBJECT_TYPE_INFORMATION;
struct _OBJECT_TYPE_INITIALIZER;
struct _OBJECT_TYPE_LIST;
struct _OB_CALLBACK_REGISTRATION;
struct _OB_EXTENDED_PARSE_PARAMETERS;
struct _OB_EXTENDED_USER_INFO;
struct _OB_OPERATION_REGISTRATION;
struct _OB_POST_CREATE_HANDLE_INFORMATION;
struct _OB_POST_DUPLICATE_HANDLE_INFORMATION;
struct _OB_POST_OPERATION_INFORMATION;
struct _OB_PRE_CREATE_HANDLE_INFORMATION;
struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION;
struct _OB_PRE_OPERATION_INFORMATION;
struct _OEM_FONT_FILE_HEADER;
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1;
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
struct _OFFLOAD_ALGO_INFO;
struct _OFFLOAD_IPSEC_ADD_SA;
struct _OFFLOAD_IPSEC_ADD_UDPESP_SA;
struct _OFFLOAD_IPSEC_DELETE_SA;
struct _OFFLOAD_IPSEC_DELETE_UDPESP_SA;
struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY;
struct _OFFLOAD_SECURITY_ASSOCIATION;
struct _OPLOCK_KEY_CONTEXT;
struct _OPLOCK_KEY_ECP_CONTEXT;
struct _OSVERSIONINFOA;
struct _OSVERSIONINFOEX2A;
struct _OSVERSIONINFOEX2W;
struct _OSVERSIONINFOEXA;
struct _OSVERSIONINFOEXW;
struct _OSVERSIONINFOW;
struct _OWNER_ENTRY;
struct _PACKEDEVENTINFO;
struct _PAGEDIR_INFORMATION;
struct _PAGED_LOOKASIDE_LIST;
struct _PAGE_PRIORITY_INFORMATION;
struct _PARSE_MESSAGE_CONTEXT;
struct _PARTITION_DESCRIPTOR;
struct _PARTITION_UNIT_INTERFACE;
struct _PATHNAME_BUFFER;
struct _PCAT_FIRMWARE_INFORMATION;
struct _PCIBUSDATA;
struct _PCIX_BRIDGE_CAPABILITY;
struct _PCI_ADVANCED_FEATURES_CAPABILITY;
struct _PCI_AGP_APERTURE_PAGE_SIZE;
struct _PCI_AGP_CAPABILITY;
struct _PCI_AGP_CAPABILITY::_PCI_AGP_COMMAND;
struct _PCI_AGP_CAPABILITY::_PCI_AGP_STATUS;
struct _PCI_AGP_COMMAND;
struct _PCI_AGP_CONTROL;
struct _PCI_AGP_ISOCH_COMMAND;
struct _PCI_AGP_ISOCH_STATUS;
struct _PCI_AGP_STATUS;
struct _PCI_BUSMASTER_DESCRIPTOR;
struct _PCI_BUS_INTERFACE_STANDARD;
struct _PCI_CAPABILITIES_HEADER;
struct _PCI_COMMON_CONFIG;
struct _PCI_COMMON_HEADER;
struct _PCI_DEBUGGING_DEVICE_IN_USE;
struct _PCI_DEVICE_PRESENCE_PARAMETERS;
struct _PCI_DEVICE_PRESENT_INTERFACE;
struct _PCI_EXPRESS_ACS_CAPABILITY;
struct _PCI_EXPRESS_AER_CAPABILITY;
struct _PCI_EXPRESS_ARI_CAPABILITY;
struct _PCI_EXPRESS_ARI_CAPABILITY_REGISTER;
struct _PCI_EXPRESS_ARI_CONTROL_REGISTER;
struct _PCI_EXPRESS_ATS_CAPABILITY;
struct _PCI_EXPRESS_ATS_CAPABILITY_REGISTER;
struct _PCI_EXPRESS_ATS_CONTROL_REGISTER;
struct _PCI_EXPRESS_BRIDGE_AER_CAPABILITY;
struct _PCI_EXPRESS_CAPABILITY;
struct _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_CAPABILITY;
struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER;
struct _PCI_EXPRESS_L1_PM_SS_CAPABILITY;
struct _PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
struct _PCI_EXPRESS_LTR_CAPABILITY;
struct _PCI_EXPRESS_PASID_CAPABILITY;
struct _PCI_EXPRESS_PRI_CAPABILITY;
struct _PCI_EXPRESS_PTM_CAPABILITY;
struct _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY;
struct _PCI_EXPRESS_RESIZABLE_BAR_ENTRY;
struct _PCI_EXPRESS_ROOTPORT_AER_CAPABILITY;
struct _PCI_EXPRESS_ROOT_PORT_INTERFACE;
struct _PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY;
struct _PCI_EXPRESS_SRIOV_CAPABILITY;
struct _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY;
struct _PCI_EXPRESS_VENDOR_SPECIFIC_CAPABILITY;
struct _PCI_EXPRESS_VIRTUAL_CHANNEL_CAPABILITY;
struct _PCI_FIRMWARE_BUS_CAPS;
struct _PCI_FIRMWARE_BUS_CAPS_RETURN_BUFFER;
struct _PCI_FPB_CAPABILITY;
struct _PCI_FPB_CAPABILITY_HEADER;
struct _PCI_FPB_MEM_HIGH_VECTOR_CONTROL2_REGISTER;
struct _PCI_FPB_VECTOR_ACCESS_DATA_REGISTER;
struct _PCI_HEADER_TYPE_0;
struct _PCI_HEADER_TYPE_1;
struct _PCI_HEADER_TYPE_2;
struct _PCI_MSIX_TABLE_CONFIG_INTERFACE;
struct _PCI_MSI_MESSAGE_ADDRESS;
struct _PCI_MSI_MESSAGE_CONTROL;
struct _PCI_PMC;
struct _PCI_PMC::_PM_SUPPORT;
struct _PCI_PMCSR;
struct _PCI_PMCSR_BSE;
struct _PCI_PM_CAPABILITY;
struct _PCI_REGISTRY_INFO;
struct _PCI_ROOT_BUS_HARDWARE_CAPABILITY;
struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD;
struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD;
struct _PCI_SECURITY_INTERFACE;
struct _PCI_SLOT_NUMBER;
struct _PCI_SUBSYSTEM_IDS_CAPABILITY;
struct _PCI_TYPE0_CFG_CYCLE_BITS;
struct _PCI_TYPE1_CFG_BITS;
struct _PCI_TYPE1_CFG_CYCLE_BITS;
struct _PCI_TYPE2_ADDRESS_BITS;
struct _PCI_TYPE2_CSE_BITS;
struct _PCI_VIRTUALIZATION_INTERFACE;
struct _PCW_BUFFER;
struct _PCW_CALLBACK_TABLE;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_DATA;
struct _PCW_INSTANCE;
struct _PCW_MASK_INFORMATION;
struct _PCW_REGISTRATION;
struct _PCW_REGISTRATION_INFORMATION;
struct _PD_BUFFER;
struct _PD_BUFFER_8021Q_INFO;
struct _PD_BUFFER_VIRTUAL_SUBNET_INFO;
struct _PEB;
struct _PEBS_DS_SAVE_AREA;
struct _PEB_LDR_DATA;
struct _PEP_COORDINATED_DEPENDENCY_OPTION;
struct _PEP_IDLE_UPDATE_REQUEST;
struct _PEP_IDLE_VETO_REQUEST;
struct _PEP_PPM_IDLE_SELECT;
struct _PEP_PPM_LPI_COORDINATED_STATES;
struct _PEP_PPM_PARK_MASK;
struct _PEP_PPM_PARK_SELECTION_V2;
struct _PEP_PPM_QUERY_COORDINATED_DEPENDENCY;
struct _PEP_PPM_QUERY_PLATFORM_STATE;
struct _PERFINFO_GROUPMASK;
struct _PERF_CONTROL_STATE_SELECTION;
struct _PHYSICAL_CHANNEL_RUN;
struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR;
struct _PHYSICAL_COUNTER_RESOURCE_LIST;
struct _PHYSICAL_MEMORY_HEAT_RANGE;
struct _PHYSICAL_MEMORY_RANGE;
struct _PLATFORM_IDLE_STATE;
struct _PLATFORM_IDLE_STATES;
struct _PLATFORM_IDLE_VETO;
struct _PLEX_READ_DATA_REQUEST;
struct _PLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA;
struct _PLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA;
struct _PLUGPLAY_CONTROL_CONFLICT_DATA;
struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY;
struct _PLUGPLAY_CONTROL_CONFLICT_LIST;
struct _PLUGPLAY_CONTROL_CONFLICT_STRINGS;
struct _PLUGPLAY_CONTROL_DEPTH_DATA;
struct _PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA;
struct _PLUGPLAY_CONTROL_DEVICE_INTERFACE_ENABLED;
struct _PLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA;
struct _PLUGPLAY_CONTROL_INSTALL_DATA;
struct _PLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA;
struct _PLUGPLAY_CONTROL_INTERFACE_LIST_DATA;
struct _PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA;
struct _PLUGPLAY_CONTROL_PROPERTY_DATA;
struct _PLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA;
struct _PLUGPLAY_CONTROL_RELATED_DEVICE_DATA;
struct _PLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA;
struct _PLUGPLAY_CONTROL_STATUS_DATA;
struct _PLUGPLAY_CONTROL_TARGET_RELATION_DATA;
struct _PLUGPLAY_CONTROL_USER_RESPONSE_DATA;
struct _PLUGPLAY_CUSTOM_NOTIFICATION;
struct _PLUGPLAY_EVENT_BLOCK;
struct _PLUGPLAY_NOTIFICATION_HEADER;
struct _PLUGPLAY_NOTIFY_HDR;
struct _PMD;
struct _PMKID_CANDIDATE;
struct _PM_DISPATCH_TABLE;
struct _PM_SUPPORT;
struct _PNP_BUS_INFORMATION;
struct _PNP_EXTENDED_ADDRESS_INTERFACE;
struct _PNP_LOCATION_INTERFACE;
struct _PNP_REPLACE_DRIVER_INTERFACE;
struct _PNP_REPLACE_MEMORY_LIST;
struct _PNP_REPLACE_PARAMETERS;
struct _PNP_REPLACE_PROCESSOR_LIST;
struct _PNP_REPLACE_PROCESSOR_LIST_V1;
struct _POOLED_USAGE_AND_LIMITS;
struct _PORT_DATA_ENTRY;
struct _PORT_DATA_INFORMATION;
struct _PORT_MESSAGE;
struct _PORT_VIEW;
struct _POWER_IDLE_RESILIENCY;
struct _POWER_MONITOR_INVOCATION;
struct _POWER_PLATFORM_INFORMATION;
struct _POWER_SEQUENCE;
struct _POWER_SESSION_CONNECT;
struct _POWER_SESSION_RIT_STATE;
struct _POWER_SESSION_TIMEOUTS;
struct _POWER_SESSION_WINLOGON;
struct _POWER_THROTTLING_PROCESS_STATE;
struct _POWER_THROTTLING_THREAD_STATE;
struct _POWER_USER_PRESENCE;
struct _PO_CS_DEVICE_NOTIFICATION;
struct _PO_FX_COMPONENT_IDLE_STATE;
struct _PO_FX_COMPONENT_PERF_INFO;
struct _PO_FX_COMPONENT_PERF_SET;
struct _PO_FX_COMPONENT_V1;
struct _PO_FX_COMPONENT_V2;
struct _PO_FX_DEVICE_V1;
struct _PO_FX_DEVICE_V2;
struct _PO_FX_INTERNAL_DEVICE;
struct _PO_FX_PERF_STATE;
struct _PO_FX_PERF_STATE_CHANGE;
struct _PO_FX_PRIMARY_DEVICE;
struct _PO_SESSION_DISPLAY_STATE;
struct _PO_SESSION_INIT;
struct _PO_SHUTDOWN_NOTIFICATION;
struct _PO_SPR_ACTIVE_SESSION_DATA;
struct _PO_WAKE_SOURCE_DEVICE;
struct _PO_WAKE_SOURCE_FIXED;
struct _PO_WAKE_SOURCE_HEADER;
struct _PO_WAKE_SOURCE_HISTORY;
struct _PO_WAKE_SOURCE_INFO;
struct _PO_WAKE_SOURCE_INTERNAL;
struct _PO_WAKE_SOURCE_TIMER;
struct _PPM_DRIVER_DISPATCH_TABLE;
struct _PPM_IDLE_STATE_OVERRIDE;
struct _PP_LOOKASIDE_LIST;
struct _PREFETCH_VIRTUAL_ADDRESS_ENTRY;
struct _PREFETCH_VIRTUAL_ADDRESS_LIST;
struct _PREFIX_TABLE;
struct _PREFIX_TABLE_ENTRY;
struct _PREREGISTERED_VETO_LIST;
struct _PRIVILEGE_SET;
struct _PROCESSOR_CAP;
struct _PROCESSOR_FEEDBACK_COUNTER;
struct _PROCESSOR_GROUP_INFO;
struct _PROCESSOR_IDLE_CONSTRAINTS;
struct _PROCESSOR_IDLE_DEPENDENCY;
struct _PROCESSOR_IDLE_DOMAIN;
struct _PROCESSOR_IDLE_DOMAINS;
struct _PROCESSOR_IDLE_PREPARE_INFO;
struct _PROCESSOR_IDLE_STATE;
struct _PROCESSOR_IDLE_STATES;
struct _PROCESSOR_IDLE_STATES_EX;
struct _PROCESSOR_IDLE_STATES_HV;
struct _PROCESSOR_IDLE_STATE_EX;
struct _PROCESSOR_IDLE_VETO;
struct _PROCESSOR_LOAD;
struct _PROCESSOR_LOCKSTEP;
struct _PROCESSOR_NUMBER;
struct _PROCESSOR_PERF_CAP_HV;
struct _PROCESSOR_PERF_INFO;
struct _PROCESSOR_PERF_STATES;
struct _PROCESSOR_PERF_STATES_COUNTERS_HV;
struct _PROCESSOR_PERF_STATES_HV;
struct _PROCESSOR_PERF_STATES_UPDATE;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
struct _PROCESSOR_POWER_INFORMATION;
struct _PROCESSOR_POWER_POLICY;
struct _PROCESSOR_POWER_POLICY_INFO;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
struct _PROCESSOR_RELATIONSHIP;
struct _PROCESS_ACCESS_TOKEN;
struct _PROCESS_BASIC_INFORMATION;
struct _PROCESS_BASIC_INFORMATION64;
struct _PROCESS_CHILD_PROCESS_INFORMATION;
struct _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION;
struct _PROCESS_COMMIT_RELEASE_INFORMATION;
struct _PROCESS_CYCLE_TIME_INFORMATION;
struct _PROCESS_DEVICEMAP_INFORMATION;
struct _PROCESS_DEVICEMAP_INFORMATION_EX;
struct _PROCESS_DISK_COUNTERS;
struct _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION;
struct _PROCESS_ENERGY_TRACKING_STATE;
struct _PROCESS_ENERGY_VALUES;
struct _PROCESS_ENERGY_VALUES_EXTENSION;
struct _PROCESS_EXCEPTION_PORT;
struct _PROCESS_EXTENDED_BASIC_INFORMATION;
struct _PROCESS_EXTENDED_BASIC_INFORMATION64;
struct _PROCESS_EXTENDED_ENERGY_VALUES;
struct _PROCESS_FAULT_INFORMATION;
struct _PROCESS_FOREGROUND_BACKGROUND;
struct _PROCESS_HANDLE_INFORMATION;
struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION;
struct _PROCESS_HANDLE_TABLE_ENTRY_INFO;
struct _PROCESS_HANDLE_TRACING_ENABLE;
struct _PROCESS_HANDLE_TRACING_ENABLE_EX;
struct _PROCESS_HANDLE_TRACING_ENTRY;
struct _PROCESS_HANDLE_TRACING_QUERY;
struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;
struct _PROCESS_JOB_MEMORY_INFO;
struct _PROCESS_KEEPALIVE_COUNT_INFORMATION;
struct _PROCESS_LEAP_SECOND_INFORMATION;
struct _PROCESS_MITIGATION_ASLR_POLICY;
struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
struct _PROCESS_MITIGATION_DEP_POLICY;
struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
struct _PROCESS_MITIGATION_POLICY_INFORMATION;
struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
struct _PROCESS_PRIORITY_CLASS;
struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION;
struct _PROCESS_SECURITY_DOMAIN_INFORMATION;
struct _PROCESS_SESSION_INFORMATION;
struct _PROCESS_STACK_ALLOCATION_INFORMATION;
struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX;
struct _PROCESS_TELEMETRY_ID_INFORMATION;
struct _PROCESS_TIMER_DELAY_INFORMATION;
struct _PROCESS_TLS_INFORMATION;
struct _PROCESS_UPTIME_INFORMATION;
struct _PROCESS_WAKE_INFORMATION;
struct _PROCESS_WINDOW_INFORMATION;
struct _PROCESS_WORKING_SET_CONTROL;
struct _PROCESS_WS_WATCH_INFORMATION;
struct _PROCESS_WS_WATCH_INFORMATION_EX;
struct _PROFILE_ACPI_DOCKING_STATE;
struct _PROFILE_PARAMETER_BLOCK;
struct _PROFILE_SOURCE_INFO;
struct _PS_ATTRIBUTE;
struct _PS_ATTRIBUTE_LIST;
struct _PS_BAM_CALLOUT_TABLE;
struct _PS_BAM_HOST_INTERFACE;
struct _PS_BNO_ISOLATION_PARAMETERS;
struct _PS_CPU_QUOTA_QUERY_ENTRY;
struct _PS_CPU_QUOTA_QUERY_INFORMATION;
struct _PS_CPU_QUOTA_SET_INFORMATION;
struct _PS_CREATE_INFO;
struct _PS_CREATE_NOTIFY_INFO;
struct _PS_DAM_CALLOUT_TABLE;
struct _PS_HW_TRACE_HOST_INTERFACE;
struct _PS_MEMORY_RESERVE;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _PS_MMCSS_CALLOUT_TABLE;
struct _PS_MMCSS_HOST_INTERFACE;
struct _PS_OCT_HOST_INTERFACE;
struct _PS_PICO_CREATE_PROCESS_CONTEXT;
struct _PS_PICO_PROCESS_ATTRIBUTES;
struct _PS_PICO_PROVIDER_ROUTINES;
struct _PS_PICO_ROUTINES;
struct _PS_PICO_SYSTEM_CALL_INFORMATION;
struct _PS_PICO_THREAD_ATTRIBUTES;
struct _PS_PKG_CLAIM;
struct _PS_PROCESS_TIMER_COUNTERS;
struct _PS_PROTECTION;
struct _PS_SEC_HOST_INTERFACE;
struct _PS_STD_HANDLE_INFO;
struct _PS_SYSTEM_DLL_INIT_BLOCK;
struct _PTM_CONTROL_INTERFACE;
struct _PUBLIC_OBJECT_BASIC_INFORMATION;
struct _QOS_SD_MODE;
struct _QOS_SHAPING_RATE;
struct _QUAD;
struct _QUERY;
struct _QUERY_BAD_RANGES_INPUT;
struct _QUERY_BAD_RANGES_INPUT_RANGE;
struct _QUERY_BAD_RANGES_OUTPUT;
struct _QUERY_BAD_RANGES_OUTPUT_RANGE;
struct _QUERY_FILE_LAYOUT_INPUT;
struct _QUERY_FILE_LAYOUT_OUTPUT;
struct _QUERY_PERFORMANCE_COUNTER_FLAGS;
struct _QUERY_STORAGE_RESERVE_INPUT;
struct _QUERY_STORAGE_RESERVE_OUTPUT;
struct _QUOTA_LIMITS;
struct _QUOTA_LIMITS_EX;
struct _RC_CONFIG;
struct _REAL_TIME_NOTIFICATION_SETTING_INPUT;
struct _REAL_TIME_NOTIFICATION_SETTING_INPUT_EX;
struct _REAL_TIME_NOTIFICATION_SETTING_OUTPUT;
struct _REARRANGE_FILE_DATA;
struct _REARRANGE_FILE_DATA32;
struct _REASON_BUFFER;
struct _RECEIEVE_SCALING_ENCAPSULATION;
struct _RECORDER_CONFIGURE_PARAMS;
struct _RECORDER_LOG_CREATE_PARAMS;
struct _REENUMERATE_SELF_INTERFACE_STANDARD;
struct _REFERENCE;
struct _REFS_DEALLOCATE_RANGES_INPUT_BUFFER;
struct _REFS_DEALLOCATE_RANGES_RANGE;
struct _REFS_SMR_VOLUME_GC_PARAMETERS;
struct _REFS_SMR_VOLUME_INFO_OUTPUT;
struct _REFS_VOLUME_COUNTER_INFO_INPUT_BUFFER;
struct _REG_CALLBACK_CONTEXT_CLEANUP_INFORMATION;
struct _REG_CREATE_KEY_INFORMATION;
struct _REG_CREATE_KEY_INFORMATION_V1;
struct _REG_DELETE_KEY_INFORMATION;
struct _REG_DELETE_VALUE_KEY_INFORMATION;
struct _REG_ENUMERATE_KEY_INFORMATION;
struct _REG_ENUMERATE_VALUE_KEY_INFORMATION;
struct _REG_KEY_HANDLE_CLOSE_INFORMATION;
struct _REG_LOAD_KEY_INFORMATION;
struct _REG_NOTIFY_INFORMATION;
struct _REG_POST_CREATE_KEY_INFORMATION;
struct _REG_POST_OPERATION_INFORMATION;
struct _REG_PRE_CREATE_KEY_INFORMATION;
struct _REG_QUERY_KEY_INFORMATION;
struct _REG_QUERY_KEY_NAME;
struct _REG_QUERY_KEY_SECURITY_INFORMATION;
struct _REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION;
struct _REG_QUERY_VALUE_KEY_INFORMATION;
struct _REG_RENAME_KEY_INFORMATION;
struct _REG_REPLACE_KEY_INFORMATION;
struct _REG_RESTORE_KEY_INFORMATION;
struct _REG_SAVE_KEY_INFORMATION;
struct _REG_SET_INFORMATION_KEY_INFORMATION;
struct _REG_SET_KEY_SECURITY_INFORMATION;
struct _REG_SET_VALUE_KEY_INFORMATION;
struct _REG_UNLOAD_KEY_INFORMATION;
struct _REMOTE_LINK_TRACKING_INFORMATION_;
struct _REMOTE_PORT_VIEW;
struct _REPAIR_COPIES_INPUT;
struct _REPAIR_COPIES_OUTPUT;
struct _REPAIR_STORAGE_RESERVE_INPUT;
struct _REPARSE_DATA_BUFFER;
struct _REPARSE_DATA_BUFFER_EX;
struct _REPARSE_GUID_DATA_BUFFER;
struct _REPARSE_INDEX_KEY;
struct _REPARSE_POINT_INFORMATION;
struct _REQUEST_MAILBOX;
struct _REQUEST_OPLOCK_INPUT_BUFFER;
struct _REQUEST_OPLOCK_OUTPUT_BUFFER;
struct _REQUEST_RAW_ENCRYPTED_DATA;
struct _RESOURCEMANAGER_BASIC_INFORMATION;
struct _RESOURCEMANAGER_COMPLETION_INFORMATION;
struct _RESOURCE_HASH_ENTRY;
struct _RESOURCE_PERFORMANCE_DATA;
struct _RESUME_PERFORMANCE;
struct _RETRIEVAL_POINTER_BASE;
struct _RIORESULT;
struct _RIO_BUF;
struct _RIO_CMSG_BUFFER;
struct _RSS_SCALABILITY_INFO;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_AVL_TABLE;
struct _RTL_AVL_TREE;
struct _RTL_BACKOFF;
struct _RTL_BALANCED_LINKS;
struct _RTL_BALANCED_NODE;
struct _RTL_BARRIER;
struct _RTL_BITMAP;
struct _RTL_BITMAP_EX;
struct _RTL_BITMAP_RUN;
struct _RTL_BSD_ITEM;
struct _RTL_BUFFER;
struct _RTL_CIRCULAR_LIST_HEAD;
struct _RTL_CRITICAL_SECTION;
struct _RTL_DISK_SPACE_INFO;
struct _RTL_DISK_SPEED_INFO;
struct _RTL_DISK_WRITE_CONSTRAINT_INFO;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION;
struct _RTL_GENERIC_TABLE;
struct _RTL_HEAP_MEMORY_LIMIT_DATA;
struct _RTL_HEAP_MEMORY_LIMIT_INFO;
struct _RTL_HEAP_PARAMETERS;
struct _RTL_IMAGE_MITIGATION_ASLR_POLICY;
struct _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY;
struct _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY;
struct _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
struct _RTL_IMAGE_MITIGATION_DEP_POLICY;
struct _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY;
struct _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
struct _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY;
struct _RTL_IMAGE_MITIGATION_HEAP_POLICY;
struct _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY;
struct _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
struct _RTL_IMAGE_MITIGATION_SEHOP_POLICY;
struct _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
struct _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
struct _RTL_IMAGE_POLICY_METADATA;
struct _RTL_LFG_RNG_STATE;
struct _RTL_MODULE_BASIC_INFO;
struct _RTL_MODULE_EXTENDED_INFO;
struct _RTL_PHYSICAL_MEMORY_INFO;
struct _RTL_PROCESS_BACKTRACES;
struct _RTL_PROCESS_BACKTRACES_CONTROL;
struct _RTL_PROCESS_BACKTRACE_INFORMATION;
struct _RTL_PROCESS_LOCKS;
struct _RTL_PROCESS_LOCK_INFORMATION;
struct _RTL_PROCESS_MODULES;
struct _RTL_PROCESS_MODULE_INFORMATION;
struct _RTL_PROCESS_MODULE_INFORMATION_EX;
struct _RTL_PROCESS_VERIFIER_OPTIONS;
struct _RTL_PROTECTED_ACCESS;
struct _RTL_QUERY_REGISTRY_TABLE;
struct _RTL_RB_TREE;
struct _RTL_RETPOLINE_BINARY_INFO;
struct _RTL_RETPOLINE_RELOCATION_INDEX;
struct _RTL_RETPOLINE_ROUTINES;
struct _RTL_RVA_LIST;
struct _RTL_RVA_LIST_ITERATOR;
struct _RTL_SEGMENT_HEAP_MEMORY_SOURCE;
struct _RTL_SEGMENT_HEAP_PARAMETERS;
struct _RTL_SPARSE_BITMAP_CTX;
struct _RTL_SPARSE_BITMAP_PARAMETER;
struct _RTL_SPARSE_BITMAP_RANGE;
struct _RTL_SPARSE_BITMAP_RUN;
struct _RTL_SPLAY_LINKS;
struct _RTL_STACK_CONTEXT;
struct _RTL_STACK_CONTEXT_ENTRY;
struct _RTL_STACK_TRACE_DATABASE_CREATE;
struct _RTL_TIME_ZONE_INFORMATION;
struct _RTL_TRACE_BLOCK;
struct _RTL_TRACE_DATABASE;
struct _RTL_TRACE_ENUMERATE;
struct _RTL_UMS_COMPLETION_LIST;
struct _RTL_UMS_CONTEXT;
struct _RTL_UMS_SCHEDULER_STARTUP_INFO;
struct _RTL_UNICODE_STRING_BUFFER;
struct _RTL_USER_PROCESS_EXTENDED_PARAMETERS;
struct _RTL_USER_PROCESS_INFORMATION;
struct _RTL_USER_PROCESS_INFORMATION64;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _RTL_WORK_ON_BEHALF_TICKET_EX;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _SCOPE_TABLE_AMD64;
struct _SCRUB_DATA_INPUT;
struct _SCRUB_DATA_OUTPUT;
struct _SCRUB_PARITY_EXTENT;
struct _SCRUB_PARITY_EXTENT_DATA;
struct _SCSI_REQUEST_BLOCK;
struct _SDEV_IDENTIFIER_INTERFACE;
struct _SD_CHANGE_MACHINE_SID_INPUT;
struct _SD_CHANGE_MACHINE_SID_OUTPUT;
struct _SD_ENUM_SDS_ENTRY;
struct _SD_ENUM_SDS_INPUT;
struct _SD_ENUM_SDS_OUTPUT;
struct _SD_GLOBAL_CHANGE_INPUT;
struct _SD_GLOBAL_CHANGE_OUTPUT;
struct _SD_QUERY_STATS_INPUT;
struct _SD_QUERY_STATS_OUTPUT;
struct _SECTIONBASICINFO;
struct _SECTION_IMAGE_INFORMATION;
struct _SECTION_IMAGE_INFORMATION32;
struct _SECTION_IMAGE_INFORMATION64;
struct _SECTION_INTERNAL_IMAGE_INFORMATION;
struct _SECTION_OBJECT_POINTERS;
struct _SECURE_DRIVER_INTERFACE;
struct _SECURITY_CAPABILITIES;
struct _SECURITY_CLIENT_CONTEXT;
struct _SECURITY_DESCRIPTOR;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _SECURITY_OBJECT_AI_PARAMS;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SEED_AND_LENGTH;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SEMAPHORE_BASIC_INFORMATION;
struct _SERVERSILO_BASIC_INFORMATION;
struct _SET;
struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
struct _SET_PURGE_FAILURE_MODE_INPUT;
struct _SE_ACCESS_REPLY;
struct _SE_ACCESS_REQUEST;
struct _SE_ADT_ACCESS_REASON;
struct _SE_ADT_CLAIMS;
struct _SE_ADT_OBJECT_TYPE;
struct _SE_ADT_PARAMETER_ARRAY;
struct _SE_ADT_PARAMETER_ARRAY_ENTRY;
struct _SE_ADT_PARAMETER_ARRAY_EX;
struct _SE_AUDIT_INFO;
struct _SE_EXPORTS;
struct _SE_IMPERSONATION_STATE;
struct _SE_LEARNING_MODE_USER_OBJECT_DATA;
struct _SE_PACKAGE_CAPABILITY_INFO;
struct _SE_SECURITY_DESCRIPTOR;
struct _SE_SET_FILE_CACHE_INFORMATION;
struct _SE_TOKEN_USER;
struct _SHARED_VIRTUAL_DISK_SUPPORT;
struct _SHARE_ACCESS;
struct _SHRINK_VOLUME_INFORMATION;
struct _SHUFFLE_FILE_DATA;
struct _SID;
struct _SID_AND_ATTRIBUTES;
struct _SID_AND_ATTRIBUTES_HASH;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SILOOBJECT_BASIC_INFORMATION;
struct _SILOOBJECT_ROOT_DIRECTORY;
struct _SILO_MONITOR;
struct _SILO_MONITOR_REGISTRATION;
struct _SILO_USER_SHARED_DATA;
struct _SINGLE_LIST_ENTRY;
struct _SINGLE_LIST_ENTRY32;
struct _SI_COPYFILE;
struct _SLIST_ENTRY;
struct _SL_APPX_CACHE;
struct _SL_APPX_CACHE_VALUE_DESCRIPTOR;
struct _SL_HWID_DEVICE_INFO;
struct _SL_KMEM_CACHE;
struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR;
struct _SMBIOS3_TABLE_HEADER;
struct _SNAP_HEADER;
struct _SOCKET_ADDRESS;
struct _SOCKET_ADDRESS_LIST;
struct _SOCKET_PEER_TARGET_NAME;
struct _SOCKET_PROCESSOR_AFFINITY;
struct _SOCKET_SECURITY_QUERY_INFO;
struct _SOCKET_SECURITY_QUERY_INFO_IPSEC2;
struct _SOCKET_SECURITY_QUERY_TEMPLATE;
struct _SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2;
struct _SOCKET_SECURITY_SETTINGS;
struct _SOCKET_SECURITY_SETTINGS_IPSEC;
struct _SOC_SUBSYSTEM_FAILURE_DETAILS;
struct _SPARSE_OVERALLOCATE_DATA;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
struct _STORAGE_RESERVE_AREA_DEFINITION;
struct _STORAGE_RESERVE_AREA_INFO;
struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER;
struct _STREAMS_QUERY_ID_OUTPUT_BUFFER;
struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
struct _STREAM_EXTENT_ENTRY;
struct _STREAM_INFORMATION_ENTRY;
struct _STREAM_INFORMATION_ENTRY::_StreamInformation::_DesiredStorageClass;
struct _STREAM_LAYOUT_ENTRY;
struct _STRING;
struct _STRING32;
struct _STRING64;
struct _SYSDBG_BUS_DATA;
struct _SYSDBG_CONTROL_SPACE;
struct _SYSDBG_IO_SPACE;
struct _SYSDBG_LIVEDUMP_CONTROL;
struct _SYSDBG_MSR;
struct _SYSDBG_PHYSICAL;
struct _SYSDBG_TRIAGE_DUMP;
struct _SYSDBG_VIRTUAL;
struct _SYSTEM_ACCESS_FILTER_ACE;
struct _SYSTEM_ACPI_AUDIT_INFORMATION;
struct _SYSTEM_ACTIVITY_MODERATION_INFO;
struct _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS;
struct _SYSTEM_ALARM_ACE;
struct _SYSTEM_ALARM_CALLBACK_ACE;
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
struct _SYSTEM_ALARM_OBJECT_ACE;
struct _SYSTEM_AUDIT_ACE;
struct _SYSTEM_AUDIT_CALLBACK_ACE;
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
struct _SYSTEM_AUDIT_OBJECT_ACE;
struct _SYSTEM_BASIC_INFORMATION;
struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION;
struct _SYSTEM_BIGPOOL_ENTRY;
struct _SYSTEM_BIGPOOL_INFORMATION;
struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION;
struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION_V1;
struct _SYSTEM_BOOT_GRAPHICS_INFORMATION;
struct _SYSTEM_BOOT_LOGO_INFORMATION;
struct _SYSTEM_CALL_COUNT_INFORMATION;
struct _SYSTEM_CALL_TIME_INFORMATION;
struct _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION;
struct _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION;
struct _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION;
struct _SYSTEM_CODEINTEGRITY_INFORMATION;
struct _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION;
struct _SYSTEM_CONSOLE_INFORMATION;
struct _SYSTEM_CONTEXT_SWITCH_INFORMATION;
struct _SYSTEM_CPU_SET_INFORMATION;
struct _SYSTEM_CPU_SET_TAG_INFORMATION;
struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION;
struct _SYSTEM_DEVICE_DATA_INFORMATION;
struct _SYSTEM_DEVICE_INFORMATION;
struct _SYSTEM_DMA_GUARD_POLICY_INFORMATION;
struct _SYSTEM_DPC_BEHAVIOR_INFORMATION;
struct _SYSTEM_ELAM_CERTIFICATE_INFORMATION;
struct _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION;
struct _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION;
struct _SYSTEM_ENTROPY_TIMING_INFORMATION;
struct _SYSTEM_ERROR_PORT_TIMEOUTS;
struct _SYSTEM_EXCEPTION_INFORMATION;
struct _SYSTEM_EXTENDED_THREAD_INFORMATION;
struct _SYSTEM_FILECACHE_INFORMATION;
struct _SYSTEM_FIRMWARE_PARTITION_INFORMATION;
struct _SYSTEM_FIRMWARE_TABLE_HANDLER;
struct _SYSTEM_FIRMWARE_TABLE_INFORMATION;
struct _SYSTEM_FLAGS_INFORMATION;
struct _SYSTEM_FLUSH_INFORMATION;
struct _SYSTEM_GDI_DRIVER_INFORMATION;
struct _SYSTEM_HANDLE_INFORMATION;
struct _SYSTEM_HANDLE_INFORMATION_EX;
struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO;
struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;
struct _SYSTEM_HIBERFILE_INFORMATION;
struct _SYSTEM_HOT_PATCH_REGISTRY_VALUE;
struct _SYSTEM_HYPERVISOR_DETAIL_INFORMATION;
struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION;
struct _SYSTEM_HYPERVISOR_QUERY_INFORMATION;
struct _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION;
struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION;
struct _SYSTEM_INTERRUPT_CPU_SET_INFORMATION;
struct _SYSTEM_INTERRUPT_INFORMATION;
struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT;
struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT;
struct _SYSTEM_ISOLATED_USER_MODE_INFORMATION;
struct _SYSTEM_KERNEL_DEBUGGER_FLAGS;
struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION;
struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX;
struct _SYSTEM_KERNEL_VA_SHADOW_INFORMATION;
struct _SYSTEM_LEAP_SECOND_INFORMATION;
struct _SYSTEM_LEGACY_DRIVER_INFORMATION;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
struct _SYSTEM_LOOKASIDE_INFORMATION;
struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION;
struct _SYSTEM_MANDATORY_LABEL_ACE;
struct _SYSTEM_MANUFACTURING_INFORMATION;
struct _SYSTEM_MEMORY_CHANNEL_INFORMATION;
struct _SYSTEM_MEMORY_INFORMATION;
struct _SYSTEM_MEMORY_LIST_INFORMATION;
struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION;
struct _SYSTEM_MEMORY_USAGE_INFORMATION;
struct _SYSTEM_NET_RATE_CONTROL_CALLBACK_TABLE;
struct _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER;
struct _SYSTEM_NET_RATE_CONTROL_QUOTA_CONTEXT;
struct _SYSTEM_NET_RATE_CONTROL_SET_CONTEXT;
struct _SYSTEM_NUMA_INFORMATION;
struct _SYSTEM_NUMA_PROXIMITY_MAP;
struct _SYSTEM_OBJECTTYPE_INFORMATION;
struct _SYSTEM_OBJECT_INFORMATION;
struct _SYSTEM_PAGEFILE_INFORMATION;
struct _SYSTEM_PAGEFILE_INFORMATION_EX;
struct _SYSTEM_PERFORMANCE_INFORMATION;
struct _SYSTEM_PHYSICAL_MEMORY_INFORMATION;
struct _SYSTEM_PLATFORM_BINARY_INFORMATION;
struct _SYSTEM_POLICY_INFORMATION;
struct _SYSTEM_POOLTAG;
struct _SYSTEM_POOLTAG_INFORMATION;
struct _SYSTEM_POOL_ENTRY;
struct _SYSTEM_POOL_INFORMATION;
struct _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION;
struct _SYSTEM_POWER_INFORMATION;
struct _SYSTEM_POWER_LOGGING_ENTRY;
struct _SYSTEM_POWER_POLICY;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _SYSTEM_POWER_STATE_DISABLE_REASON;
struct _SYSTEM_PREFETCH_OPTIONS;
struct _SYSTEM_PREFETCH_PATCH_INFORMATION;
struct _SYSTEM_PREFETCH_STATS;
struct _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION;
struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
struct _SYSTEM_PROCESSOR_FEATURES_INFORMATION;
struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION;
struct _SYSTEM_PROCESSOR_IDLE_INFORMATION;
struct _SYSTEM_PROCESSOR_INFORMATION;
struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION;
struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION;
struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT;
struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX;
struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION;
struct _SYSTEM_PROCESSOR_POLICY_INFORMATION;
struct _SYSTEM_PROCESSOR_POWER_INFORMATION;
struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA;
struct _SYSTEM_PROCESS_ID_INFORMATION;
struct _SYSTEM_PROCESS_INFORMATION;
struct _SYSTEM_PROCESS_INFORMATION_EXTENSION;
struct _SYSTEM_PROCESS_TRUST_LABEL_ACE;
struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION;
struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION;
struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE;
struct _SYSTEM_REF_TRACE_INFORMATION;
struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS;
struct _SYSTEM_REGISTRY_QUOTA_INFORMATION;
struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
struct _SYSTEM_ROOT_SILO_INFORMATION;
struct _SYSTEM_SCOPED_POLICY_ID_ACE;
struct _SYSTEM_SECUREBOOT_INFORMATION;
struct _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION;
struct _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION;
struct _SYSTEM_SECUREBOOT_POLICY_INFORMATION;
struct _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION;
struct _SYSTEM_SESSION_BIGPOOL_INFORMATION;
struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION;
struct _SYSTEM_SESSION_POOLTAG_INFORMATION;
struct _SYSTEM_SESSION_PROCESS_INFORMATION;
struct _SYSTEM_SET_TIME_ADJUST_INFORMATION;
struct _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE;
struct _SYSTEM_SINGLE_MODULE_INFORMATION;
struct _SYSTEM_SPECIAL_POOL_INFORMATION;
struct _SYSTEM_SPECULATION_CONTROL_INFORMATION;
struct _SYSTEM_SYSTEM_DISK_INFORMATION;
struct _SYSTEM_SYSTEM_PARTITION_INFORMATION;
struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION;
struct _SYSTEM_THREAD_INFORMATION;
struct _SYSTEM_TIMEOFDAY_INFORMATION;
struct _SYSTEM_TPM_INFORMATION;
struct _SYSTEM_VA_LIST_INFORMATION;
struct _SYSTEM_VDM_INSTEMUL_INFO;
struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION;
struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION;
struct _SYSTEM_VERIFIER_FAULTS_INFORMATION;
struct _SYSTEM_VERIFIER_INFORMATION;
struct _SYSTEM_VERIFIER_INFORMATION_EX;
struct _SYSTEM_VERIFIER_ISSUE;
struct _SYSTEM_VERIFIER_TRIAGE_INFORMATION;
struct _SYSTEM_VHD_BOOT_INFORMATION;
struct _SYSTEM_VSM_PROTECTION_INFORMATION;
struct _SYSTEM_WATCHDOG_TIMER_INFORMATION;
struct _SYSTEM_WORKINGSET_ENTRY;
struct _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION;
struct _SYSTEM_WRITE_CONSTRAINT_INFORMATION;
struct _T2_SET_PARAMETERS_V0;
struct _TARGET_DEVICE_CUSTOM_NOTIFICATION;
struct _TARGET_DEVICE_REMOVAL_NOTIFICATION;
struct _TCP_ACK_FREQUENCY_PARAMETERS;
struct _TCP_ICW_PARAMETERS;
struct _TCP_INFO_v0;
struct _TCP_INITIAL_RTO_PARAMETERS;
struct _TEB;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TEB_ACTIVE_FRAME_CONTEXT_EX;
struct _TEB_ACTIVE_FRAME_EX;
struct _TELEMETRY_COVERAGE_POINT;
struct _THREAD_BASIC_INFORMATION;
struct _THREAD_CYCLE_TIME_INFORMATION;
struct _THREAD_ENERGY_VALUES;
struct _THREAD_LAST_SYSCALL_INFORMATION;
struct _THREAD_NAME_INFORMATION;
struct _THREAD_PERFORMANCE_DATA;
struct _THREAD_PROFILING_INFORMATION;
struct _THREAD_TEB_INFORMATION;
struct _THREAD_TLS_INFORMATION;
struct _THREAD_UMS_INFORMATION;
struct _TIMER_BASIC_INFORMATION;
struct _TIMER_SET_COALESCABLE_TIMER_INFO;
struct _TIME_FIELDS;
struct _TOKEN_ACCESS_INFORMATION;
struct _TOKEN_APPCONTAINER_INFORMATION;
struct _TOKEN_AUDIT_POLICY;
struct _TOKEN_BNO_ISOLATION_INFORMATION;
struct _TOKEN_CONTROL;
struct _TOKEN_DEFAULT_DACL;
struct _TOKEN_DEVICE_CLAIMS;
struct _TOKEN_ELEVATION;
struct _TOKEN_GROUPS;
struct _TOKEN_GROUPS_AND_PRIVILEGES;
struct _TOKEN_LINKED_TOKEN;
struct _TOKEN_MANDATORY_LABEL;
struct _TOKEN_MANDATORY_POLICY;
struct _TOKEN_ORIGIN;
struct _TOKEN_OWNER;
struct _TOKEN_PRIMARY_GROUP;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION;
struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION;
struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE;
struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
struct _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1;
struct _TOKEN_SECURITY_ATTRIBUTE_V1;
struct _TOKEN_SID_INFORMATION;
struct _TOKEN_SOURCE;
struct _TOKEN_STATISTICS;
struct _TOKEN_USER;
struct _TOKEN_USER_CLAIMS;
struct _TPP_THREAD_DATA_CALLBACK;
struct _TP_ALPC;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
struct _TP_CLEANUP_GROUP;
struct _TP_DEBUG_FREE_INFO;
struct _TP_DIRECT;
struct _TP_IO;
struct _TP_JOB;
struct _TP_POOL;
struct _TP_POOL_STACK_INFORMATION;
struct _TP_TASK;
struct _TP_TASK_CALLBACKS;
struct _TP_TIMER;
struct _TP_WAIT;
struct _TP_WORK;
struct _TRACE_ENABLE_INFO;
struct _TRACE_GUID_INFO;
struct _TRACE_GUID_PROPERTIES;
struct _TRACE_PROVIDER_INSTANCE_INFO;
struct _TRANSACTIONMANAGER_BASIC_INFORMATION;
struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
struct _TRANSACTIONMANAGER_LOG_INFORMATION;
struct _TRANSACTIONMANAGER_OLDEST_INFORMATION;
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
struct _TRANSACTION_BASIC_INFORMATION;
struct _TRANSACTION_BIND_INFORMATION;
struct _TRANSACTION_ENLISTMENTS_INFORMATION;
struct _TRANSACTION_ENLISTMENT_PAIR;
struct _TRANSACTION_LIST_ENTRY;
struct _TRANSACTION_LIST_INFORMATION;
struct _TRANSACTION_NOTIFICATION;
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
struct _TRANSACTION_PROPERTIES_INFORMATION;
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
struct _TRANSLATOR_INTERFACE;
struct _TRANSPORT_HEADER_OFFSET;
struct _TXFS_CREATE_MINIVERSION_INFO;
struct _TXFS_GET_METADATA_INFO_OUT;
struct _TXFS_GET_TRANSACTED_VERSION;
struct _TXFS_LIST_TRANSACTIONS;
struct _TXFS_LIST_TRANSACTIONS_ENTRY;
struct _TXFS_LIST_TRANSACTION_LOCKED_FILES;
struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
struct _TXFS_MODIFY_RM;
struct _TXFS_QUERY_RM_INFORMATION;
struct _TXFS_READ_BACKUP_INFORMATION_OUT;
struct _TXFS_ROLLFORWARD_REDO_INFORMATION;
struct _TXFS_SAVEPOINT_INFORMATION;
struct _TXFS_START_RM_INFORMATION;
struct _TXFS_TRANSACTION_ACTIVE_INFO;
struct _TXFS_WRITE_BACKUP_INFORMATION;
struct _TXN_PARAMETER_BLOCK;
struct _TlgEventMetadata_t;
struct _TlgProviderMetadata_t;
struct _TlgProvider_t;
struct _TlgTypeMapBase<_FILETIME>;
struct _TlgTypeMapBase<_GUID>;
struct _TlgTypeMapBase<_SID *>;
struct _TlgTypeMapBase<_SID const *>;
struct _TlgTypeMapBase<_SYSTEMTIME>;
struct _TlgTypeMapBase<__int64>;
struct _TlgTypeMapBase<bool>;
struct _TlgTypeMapBase<char *>;
struct _TlgTypeMapBase<char const *>;
struct _TlgTypeMapBase<char>;
struct _TlgTypeMapBase<double>;
struct _TlgTypeMapBase<float>;
struct _TlgTypeMapBase<int>;
struct _TlgTypeMapBase<long>;
struct _TlgTypeMapBase<short>;
struct _TlgTypeMapBase<signed char>;
struct _TlgTypeMapBase<unsigned __int64>;
struct _TlgTypeMapBase<unsigned char>;
struct _TlgTypeMapBase<unsigned int>;
struct _TlgTypeMapBase<unsigned long>;
struct _TlgTypeMapBase<unsigned short>;
struct _TlgTypeMapBase<void *>;
struct _TlgTypeMapBase<void const *>;
struct _TlgTypeMapBase<wchar_t *>;
struct _TlgTypeMapBase<wchar_t const *>;
struct _TlgTypeMapBase<wchar_t>;
struct _TraceLoggingMetadata_t;
struct _TypeDescriptor;
struct _UCALLOUT_FRAME;
struct _UMS_CREATE_THREAD_ATTRIBUTES;
struct _UNICODE_PREFIX_TABLE;
struct _UNICODE_PREFIX_TABLE_ENTRY;
struct _UNICODE_STRING;
struct _UNIQUE_PROCESS_INFORMATION;
struct _UNWIND_HISTORY_TABLE;
struct _UNWIND_HISTORY_TABLE_ENTRY;
struct _UNWIND_INFO;
struct _VARIABLE_NAME;
struct _VARIABLE_NAME_AND_VALUE;
struct _VAR_STRING;
struct _VCN_RANGE_INPUT_BUFFER;
struct _VHD_DISK_SIGNATURE;
struct _VIRTUALIZATION_INSTANCE_INFO_INPUT;
struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT;
struct _VIRTUAL_EFI_RUNTIME_SERVICES;
struct _VIRTUAL_RESOURCE;
struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
struct _VIRTUAL_STORAGE_TYPE;
struct _VLAN_TAG;
struct _VM_COUNTERS;
struct _VM_COUNTERS_EX;
struct _VM_COUNTERS_EX2;
struct _VOLUME_REFS_INFO_BUFFER;
struct _VPB;
struct _VXLAN_INFO;
struct _VXLAN_PARAMETERS;
struct _WAIT_CONTEXT_BLOCK;
struct _WAKE_TIMER_INFO;
struct _WDFCX_FILEOBJECT_CONFIG;
struct _WDFCX_PNPPOWER_EVENT_CALLBACKS;
struct _WDFMEMORY_OFFSET;
struct _WDF_BIND_INFO;
struct _WDF_BIND_INFO2;
struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER;
struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER;
struct _WDF_CHILD_LIST_CONFIG;
struct _WDF_CHILD_LIST_ITERATOR;
struct _WDF_CHILD_RETRIEVE_INFO;
struct _WDF_CLASS_BIND_INFO;
struct _WDF_CLASS_BIND_INFO2;
struct _WDF_CLASS_LIBRARY_INFO;
struct _WDF_CLASS_VERSION;
struct _WDF_COMMON_BUFFER_CONFIG;
struct _WDF_CUSTOM_TYPE_CONTEXT;
struct _WDF_DEVICE_PNP_CAPABILITIES;
struct _WDF_DEVICE_PNP_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_CAPABILITIES;
struct _WDF_DEVICE_POWER_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS;
struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA;
struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS;
struct _WDF_DEVICE_PROPERTY_DATA;
struct _WDF_DEVICE_STATE;
struct _WDF_DMA_ENABLER_CONFIG;
struct _WDF_DMA_SYSTEM_PROFILE_CONFIG;
struct _WDF_DPC_CONFIG;
struct _WDF_DRIVER_CONFIG;
struct _WDF_DRIVER_GLOBALS;
struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS;
struct _WDF_FDO_EVENT_CALLBACKS;
struct _WDF_FILEOBJECT_CONFIG;
struct _WDF_IFR_HEADER;
struct _WDF_IFR_OFFSET;
struct _WDF_INTERFACE_HEADER;
struct _WDF_INTERRUPT_CONFIG;
struct _WDF_INTERRUPT_EXTENDED_POLICY;
struct _WDF_INTERRUPT_INFO;
struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS;
struct _WDF_IO_QUEUE_CONFIG;
struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY;
struct _WDF_IO_TARGET_OPEN_PARAMS;
struct _WDF_IO_TYPE_CONFIG;
struct _WDF_LIBRARY_INFO;
struct _WDF_LOADER_INTERFACE;
struct _WDF_LOADER_INTERFACE_CLASS_BIND;
struct _WDF_LOADER_INTERFACE_DIAGNOSTIC;
struct _WDF_MEMORY_DESCRIPTOR;
struct _WDF_OBJECT_ATTRIBUTES;
struct _WDF_OBJECT_CONTEXT_TYPE_INFO;
struct _WDF_PDO_EVENT_CALLBACKS;
struct _WDF_PNPPOWER_EVENT_CALLBACKS;
struct _WDF_POWER_FRAMEWORK_SETTINGS;
struct _WDF_POWER_POLICY_EVENT_CALLBACKS;
struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA;
struct _WDF_QUERY_INTERFACE_CONFIG;
struct _WDF_QUEUE_FATAL_ERROR_DATA;
struct _WDF_REMOVE_LOCK_OPTIONS;
struct _WDF_REQUEST_COMPLETION_PARAMS;
struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA;
struct _WDF_REQUEST_FORWARD_OPTIONS;
struct _WDF_REQUEST_PARAMETERS;
struct _WDF_REQUEST_REUSE_PARAMS;
struct _WDF_REQUEST_SEND_OPTIONS;
struct _WDF_TASK_SEND_OPTIONS;
struct _WDF_TIMER_CONFIG;
struct _WDF_USB_REQUEST_COMPLETION_PARAMS;
struct _WDF_VERSION;
struct _WDF_WMI_INSTANCE_CONFIG;
struct _WDF_WMI_PROVIDER_CONFIG;
struct _WDF_WORKITEM_CONFIG;
struct _WFDSVC_CONNECTION_CAPABILITY;
struct _WHEA128A;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
struct _WHEA_ARMV8_AARCH32_GPRS;
struct _WHEA_ARMV8_AARCH64_EL3_CSR;
struct _WHEA_ARMV8_AARCH64_GPRS;
struct _WHEA_ARM_AARCH32_EL1_CSR;
struct _WHEA_ARM_AARCH32_EL2_CSR;
struct _WHEA_ARM_AARCH32_SECURE_CSR;
struct _WHEA_ARM_AARCH64_EL1_CSR;
struct _WHEA_ARM_AARCH64_EL2_CSR;
struct _WHEA_ARM_BUS_ERROR;
struct _WHEA_ARM_CACHE_ERROR;
struct _WHEA_ARM_MISC_CSR;
struct _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER;
struct _WHEA_ARM_PROCESSOR_ERROR_INFORMATION;
struct _WHEA_ARM_PROCESSOR_ERROR_SECTION;
struct _WHEA_ARM_TLB_ERROR;
struct _WHEA_DRS_OBJECT;
struct _WHEA_ERROR_PACKET_V1;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _WHEA_ERROR_SOURCE_CONFIGURATION;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
struct _WHEA_EVENT_LOG_ENTRY;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WHEA_FIRMWARE_ERROR_RECORD_REFERENCE;
struct _WHEA_GENERIC_ERROR;
struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V1;
struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V2;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_IPF_MCA_DESCRIPTOR;
struct _WHEA_MEMORY_ERROR_SECTION;
struct _WHEA_NMI_ERROR_SECTION;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
struct _WHEA_PCIEXPRESS_DEVICE_ID;
struct _WHEA_PCIEXPRESS_ERROR_SECTION;
struct _WHEA_PCIXBUS_ERROR_SECTION;
struct _WHEA_PCIXDEVICE_ERROR_SECTION;
struct _WHEA_PCIXDEVICE_ID;
struct _WHEA_PCI_SLOT_NUMBER;
struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION;
struct _WHEA_PSHED_INIT_PACKET;
struct _WHEA_PSHED_PLUGIN_CALLBACKS;
struct _WHEA_PSHED_PLUGIN_REGISTRATION_PACKET;
struct _WHEA_RECOVERY_CONTEXT;
struct _WHEA_X64_REGISTER_STATE;
struct _WHEA_X86_REGISTER_STATE;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_CONTEXT_INFO;
struct _WHEA_XPF_MCA_SECTION;
struct _WHEA_XPF_MCE_DESCRIPTOR;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WHEA_XPF_PROCESSOR_ERROR_SECTION;
struct _WHEA_XPF_PROCINFO;
struct _WIM_PROVIDER_ADD_OVERLAY_INPUT;
struct _WIM_PROVIDER_CONTROL_INTEGRITY;
struct _WIM_PROVIDER_EXTERNAL_INFO;
struct _WIM_PROVIDER_INTEGRITY_STATUS;
struct _WIM_PROVIDER_OVERLAY_ENTRY;
struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT;
struct _WIM_PROVIDER_START_INTEGRITY;
struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT;
struct _WIN32K_SYSCALL_FILTER;
struct _WIN32_CLOSEMETHOD_PARAMETERS;
struct _WIN32_DELETEMETHOD_PARAMETERS;
struct _WIN32_JOBCALLOUT_PARAMETERS;
struct _WIN32_JOBINTERFERENCEINFO_CALLOUT_PARAMETERS;
struct _WIN32_OKAYTOCLOSEMETHOD_PARAMETERS;
struct _WIN32_OPENMETHOD_PARAMETERS;
struct _WIN32_PARSEMETHOD_PARAMETERS;
struct _WIN32_POWEREVENT_PARAMETERS;
struct _WIN32_POWERINFO_BRIGHTNESSCHANGE;
struct _WIN32_POWERINFO_BUILTIN_PANEL_STATE;
struct _WIN32_POWERINFO_CALLOUT_PARAMETERS;
struct _WIN32_POWERINFO_DISPLAYREQUIRED;
struct _WIN32_POWERINFO_MONITOR;
struct _WIN32_POWERINFO_POLICYCHANGE;
struct _WIN32_POWERINFO_SESSION;
struct _WIN32_POWERINFO_SESSION_ENGAGEMENT;
struct _WIN32_POWERINFO_USERPRESENT;
struct _WIN32_POWERSTATE_PARAMETERS;
struct _WIN32_PROCESS_CALLOUT_PARAMETERS;
struct _WIN32_PROCESS_TIMERDELAY_CALLOUT_PARAMETERS;
struct _WIN32_PROCESS_TIMER_STATISTICS_CALLOUT_PARAMETERS;
struct _WIN32_SUBSYSTEM_PROCESS_QUERY_CALLOUT_PARAMETERS;
struct _WIN32_THREAD_CALLOUT_PARAMETERS;
struct _WINDOWS_OS_OPTIONS;
struct _WNF_DELIVERY_DESCRIPTOR;
struct _WNF_STATE_NAME;
struct _WNF_TYPE_ID;
struct _WNODE_HEADER;
struct _WOF_EXTERNAL_FILE_ID;
struct _WOF_EXTERNAL_INFO;
struct _WOF_VERSION_INFO;
struct _WOL_BITMAP_PATTERN;
struct _WORKER_FACTORY_BASIC_INFORMATION;
struct _WORKER_FACTORY_DEFERRED_WORK;
struct _WORK_QUEUE_ITEM;
struct _WOW64_ARCHITECTURE_INFORMATION;
struct _WOW64_CONTEXT;
struct _WOW64_CPUAREA_INFO;
struct _WOW64_DESCRIPTOR_TABLE_ENTRY;
struct _WOW64_FLOATING_SAVE_AREA;
struct _WOW64_LDT_ENTRY;
struct _WPP_TRACE_CONTROL_BLOCK;
struct _WPP_TRACE_ENABLE_CONTEXT;
struct _WPP_TRIAGE_INFO;
struct _WRITE_USN_REASON_INPUT;
struct _WSABUF;
struct _WSAMSG;
struct _WSA_COMPATIBILITY_MODE;
struct _Wx86TIB;
struct _Wx86ThreadState;
struct _X86_CALL_FRAME;
struct _X86_NT5_CONTEXT;
struct _XSAVE_AREA;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_CET_U_FORMAT;
struct _XSAVE_FEATURE;
struct _XSAVE_FORMAT;
struct _XSAVE_POLICY;
struct _XSAVE_SUPPORTED_CPU;
struct _XSAVE_VENDOR;
struct _XSAVE_VENDORS;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_CONTEXT;
struct _XSTATE_FEATURE;
struct _XSTATE_SAVE;
struct _X_FILTER;
struct _ZONE_HEADER;
struct _ZONE_SEGMENT_HEADER;
struct __PUBLIC_OBJECT_TYPE_INFORMATION;
struct __lc_time_data;
struct __s_GUID;
struct __vc_attributes::aggregatableAttribute;
struct __vc_attributes::appobjectAttribute;
struct __vc_attributes::async_uuidAttribute;
struct __vc_attributes::atl::aggregatesAttribute;
struct __vc_attributes::atl::com_interface_entryAttribute;
struct __vc_attributes::atl::db_accessorAttribute;
struct __vc_attributes::atl::db_columnAttribute;
struct __vc_attributes::atl::db_commandAttribute;
struct __vc_attributes::atl::db_paramAttribute;
struct __vc_attributes::atl::db_sourceAttribute;
struct __vc_attributes::atl::db_tableAttribute;
struct __vc_attributes::atl::implements_categoryAttribute;
struct __vc_attributes::atl::perf_counterAttribute;
struct __vc_attributes::atl::perf_objectAttribute;
struct __vc_attributes::atl::perfmonAttribute;
struct __vc_attributes::atl::rdxAttribute;
struct __vc_attributes::atl::registration_scriptAttribute;
struct __vc_attributes::atl::request_handlerAttribute;
struct __vc_attributes::atl::requires_categoryAttribute;
struct __vc_attributes::atl::soap_handlerAttribute;
struct __vc_attributes::atl::soap_headerAttribute;
struct __vc_attributes::atl::soap_methodAttribute;
struct __vc_attributes::atl::soap_namespaceAttribute;
struct __vc_attributes::atl::support_error_infoAttribute;
struct __vc_attributes::atl::synchronizeAttribute;
struct __vc_attributes::atl::tag_nameAttribute;
struct __vc_attributes::bindableAttribute;
struct __vc_attributes::call_asAttribute;
struct __vc_attributes::caseAttribute;
struct __vc_attributes::coclassAttribute;
struct __vc_attributes::controlAttribute;
struct __vc_attributes::cpp_quoteAttribute;
struct __vc_attributes::customAttribute;
struct __vc_attributes::defaultAttribute;
struct __vc_attributes::defaultbindAttribute;
struct __vc_attributes::defaultcollelemAttribute;
struct __vc_attributes::defaultvalueAttribute;
struct __vc_attributes::defaultvtableAttribute;
struct __vc_attributes::dispinterfaceAttribute;
struct __vc_attributes::displaybindAttribute;
struct __vc_attributes::dualAttribute;
struct __vc_attributes::emitidlAttribute;
struct __vc_attributes::entryAttribute;
struct __vc_attributes::event_receiverAttribute;
struct __vc_attributes::event_sourceAttribute;
struct __vc_attributes::exportAttribute;
struct __vc_attributes::first_isAttribute;
struct __vc_attributes::helpcontextAttribute;
struct __vc_attributes::helper_attributes::as_stringAttribute;
struct __vc_attributes::helper_attributes::attributeAttribute;
struct __vc_attributes::helper_attributes::default_valueAttribute;
struct __vc_attributes::helper_attributes::help_stringAttribute;
struct __vc_attributes::helper_attributes::multi_valueAttribute;
struct __vc_attributes::helper_attributes::notify_atlprovAttribute;
struct __vc_attributes::helper_attributes::process_earlyAttribute;
struct __vc_attributes::helper_attributes::repeatableAttribute;
struct __vc_attributes::helper_attributes::requires_valueAttribute;
struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute;
struct __vc_attributes::helper_attributes::usageAttribute;
struct __vc_attributes::helper_attributes::v1_alttypeAttribute;
struct __vc_attributes::helper_attributes::v1_earlyAttribute;
struct __vc_attributes::helper_attributes::v1_nameAttribute;
struct __vc_attributes::helpfileAttribute;
struct __vc_attributes::helpstringAttribute;
struct __vc_attributes::helpstringcontextAttribute;
struct __vc_attributes::helpstringdllAttribute;
struct __vc_attributes::hiddenAttribute;
struct __vc_attributes::hookAttribute;
struct __vc_attributes::idAttribute;
struct __vc_attributes::idl_moduleAttribute;
struct __vc_attributes::idl_quoteAttribute;
struct __vc_attributes::iid_isAttribute;
struct __vc_attributes::immediatebindAttribute;
struct __vc_attributes::implementsAttribute;
struct __vc_attributes::importAttribute;
struct __vc_attributes::importidlAttribute;
struct __vc_attributes::importlibAttribute;
struct __vc_attributes::inAttribute;
struct __vc_attributes::includeAttribute;
struct __vc_attributes::includelibAttribute;
struct __vc_attributes::last_isAttribute;
struct __vc_attributes::lcidAttribute;
struct __vc_attributes::length_isAttribute;
struct __vc_attributes::library_blockAttribute;
struct __vc_attributes::licensedAttribute;
struct __vc_attributes::localAttribute;
struct __vc_attributes::max_isAttribute;
struct __vc_attributes::moduleAttribute;
struct __vc_attributes::ms_unionAttribute;
struct __vc_attributes::no_injected_textAttribute;
struct __vc_attributes::nonbrowsableAttribute;
struct __vc_attributes::noncreatableAttribute;
struct __vc_attributes::nonextensibleAttribute;
struct __vc_attributes::objectAttribute;
struct __vc_attributes::odlAttribute;
struct __vc_attributes::oleautomationAttribute;
struct __vc_attributes::optionalAttribute;
struct __vc_attributes::outAttribute;
struct __vc_attributes::pointer_defaultAttribute;
struct __vc_attributes::pragmaAttribute;
struct __vc_attributes::progidAttribute;
struct __vc_attributes::propgetAttribute;
struct __vc_attributes::propputAttribute;
struct __vc_attributes::propputrefAttribute;
struct __vc_attributes::providerAttribute;
struct __vc_attributes::ptrAttribute;
struct __vc_attributes::publicAttribute;
struct __vc_attributes::rangeAttribute;
struct __vc_attributes::readonlyAttribute;
struct __vc_attributes::refAttribute;
struct __vc_attributes::requesteditAttribute;
struct __vc_attributes::restrictedAttribute;
struct __vc_attributes::retvalAttribute;
struct __vc_attributes::satypeAttribute;
struct __vc_attributes::size_isAttribute;
struct __vc_attributes::sourceAttribute;
struct __vc_attributes::stringAttribute;
struct __vc_attributes::switch_isAttribute;
struct __vc_attributes::switch_typeAttribute;
struct __vc_attributes::threadingAttribute;
struct __vc_attributes::transmit_asAttribute;
struct __vc_attributes::uidefaultAttribute;
struct __vc_attributes::unhookAttribute;
struct __vc_attributes::uniqueAttribute;
struct __vc_attributes::usesgetlasterrorAttribute;
struct __vc_attributes::uuidAttribute;
struct __vc_attributes::v1_enumAttribute;
struct __vc_attributes::varargAttribute;
struct __vc_attributes::versionAttribute;
struct __vc_attributes::vi_progidAttribute;
struct __vc_attributes::wire_marshalAttribute;
struct _flowspec;
struct _iobuf;
struct _s__CatchableType;
struct _s__CatchableTypeArray;
struct _s__RTTIBaseClassArray;
struct _s__RTTIBaseClassDescriptor2;
struct _s__RTTIClassHierarchyDescriptor;
struct _s__RTTICompleteObjectLocator2;
struct _s__ThrowInfo;
struct _sockaddr_in6_pair;
struct addrinfo;
struct addrinfoW;
struct addrinfoex2A;
struct addrinfoex2W;
struct addrinfoex3;
struct addrinfoex4;
struct addrinfoexA;
struct addrinfoexW;
struct cmsghdr;
struct group_filter;
struct group_req;
struct group_source_req;
struct in6_addr;
struct in6_pktinfo;
struct in6_pktinfo_ex;
struct in_addr;
struct in_pktinfo;
struct in_pktinfo_ex;
struct in_recverr;
struct ip_mreq;
struct ip_mreq_source;
struct ip_msfilter;
struct ipv6_mreq;
struct lconv;
struct localeinfo_struct;
struct nd_neighbor_advert;
struct nd_neighbor_solicit;
struct nd_opt_dnssl;
struct nd_opt_hdr;
struct nd_opt_mtu;
struct nd_opt_prefix_info;
struct nd_opt_rd_hdr;
struct nd_opt_rdnss;
struct nd_opt_route_info;
struct nd_redirect;
struct nd_router_advert;
struct nd_router_solicit;
struct sockaddr;
struct sockaddr_dl;
struct sockaddr_in;
struct sockaddr_in6;
struct sockaddr_in6_old;
struct sockaddr_in6_w2ksp1;
struct sockaddr_storage;
struct sockaddr_storage_xp;
struct std::nothrow_t;
struct tagLC_ID;
struct tagWNODE_SINGLE_INSTANCE;
struct tcp_hdr;
struct tcp_keepalive;
struct tcp_opt_fastopen;
struct tcp_opt_mss;
struct tcp_opt_sack;
struct tcp_opt_sack::tcp_opt_sack_block;
struct tcp_opt_sack_block;
struct tcp_opt_sack_permitted;
struct tcp_opt_ts;
struct tcp_opt_unknown;
struct tcp_opt_ws;
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
struct wil::details::com_unknown_deleter;
struct wil::details::kspin_lock_saved_irql;
struct wil::details::resource_policy<WDFSPINLOCK__ *,void (__cdecl*)(WDFSPINLOCK__ *),&WdfSpinLockRelease,wistd::integral_constant<unsigned __int64,2>,WDFSPINLOCK__ *,0,std::nullptr_t>;
struct wil::details::resource_policy<WDFWAITLOCK__ *,void (__cdecl*)(WDFWAITLOCK__ *),&WdfWaitLockRelease,wistd::integral_constant<unsigned __int64,2>,WDFWAITLOCK__ *,0,std::nullptr_t>;
struct wil::details::resource_policy<_KTHREAD *,void (__cdecl*)(void *),&DereferenceObject,wistd::integral_constant<unsigned __int64,0>,_KTHREAD *,0,std::nullptr_t>;
struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(unsigned __int64 *),&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned __int64,2>,unsigned __int64 *,0,std::nullptr_t>;
struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned __int64,2>,wil::details::kspin_lock_saved_irql,0,std::nullptr_t>;
struct wil::details::resource_policy<void *,long (__cdecl*)(void *),&ZwClose,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t>;
struct wil::details::resource_policy<void *,long __cdecl(void *),&ZwClose,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t>;
struct wil::details::resource_policy<void *,void (__cdecl*)(void *),&NdisCloseConfiguration,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t>;
struct wil::details::resource_policy<void *,void (__cdecl*)(void *),&NdisFreeNetBufferListPool,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t>;
struct wil::details::resource_policy<void *,void (__cdecl*)(void *),&WdfObjectDelete,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t>;
struct wil::details::variable_size<1>;
struct wil::details::variable_size<2>;
struct wil::details::variable_size<4>;
struct wil::details::variable_size<8>;
struct wil::empty_deleter;
struct wil::variadic_logical_or<>;
struct wistd::_Cat_base<0>;
struct wistd::_Cat_base<1>;
struct wistd::_Conjunction<>;
struct wistd::_Disjunction<>;
struct wistd::_Is_floating_point<double>;
struct wistd::_Is_floating_point<float>;
struct wistd::_Is_floating_point<long double>;
struct wistd::_Is_integral<__int64>;
struct wistd::_Is_integral<bool>;
struct wistd::_Is_integral<char16_t>;
struct wistd::_Is_integral<char32_t>;
struct wistd::_Is_integral<char>;
struct wistd::_Is_integral<int>;
struct wistd::_Is_integral<long>;
struct wistd::_Is_integral<short>;
struct wistd::_Is_integral<signed char>;
struct wistd::_Is_integral<unsigned __int64>;
struct wistd::_Is_integral<unsigned char>;
struct wistd::_Is_integral<unsigned int>;
struct wistd::_Is_integral<unsigned long>;
struct wistd::_Is_integral<unsigned short>;
struct wistd::_Is_integral<wchar_t>;
struct wistd::_Is_void<void>;
struct wistd::_Nil;
struct wistd::_Wrap_int;
struct wistd::add_reference<void const >;
struct wistd::add_reference<void const volatile >;
struct wistd::add_reference<void volatile >;
struct wistd::add_reference<void>;
struct wistd::add_rvalue_reference<void const >;
struct wistd::add_rvalue_reference<void const volatile >;
struct wistd::add_rvalue_reference<void volatile >;
struct wistd::add_rvalue_reference<void>;
struct wistd::default_delete<AdapterInit>;
struct wistd::default_delete<INxApp>;
struct wistd::default_delete<INxMemoryChunk>;
struct wistd::default_delete<INxMemoryChunkAllocator>;
struct wistd::default_delete<INxOffloadFacade>;
struct wistd::default_delete<NxBufferManager>;
struct wistd::default_delete<NxBufferPool>;
struct wistd::default_delete<NxCommonBufferMemoryChunk>;
struct wistd::default_delete<NxDmaAdapter>;
struct wistd::default_delete<NxDmaAllocator>;
struct wistd::default_delete<NxNonPagePoolAllocator>;
struct wistd::default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES> >;
struct wistd::default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES> >;
struct wistd::default_delete<NxOffloadBase>;
struct wistd::default_delete<NxOffloadFacade>;
struct wistd::default_delete<NxOffloadManager>;
struct wistd::default_delete<NxPoolMemoryChunk>;
struct wistd::default_delete<NxReceiveScaling>;
struct wistd::default_delete<NxRxXlat>;
struct wistd::default_delete<NxTranslationApp>;
struct wistd::default_delete<NxTxXlat>;
struct wistd::default_delete<Rtl::KString>;
struct wistd::default_delete<RtlMdl>;
struct wistd::default_delete<unsigned char [0]>;
struct wistd::default_delete<unsigned char>;
struct wistd::enable_if<1,void *>;
struct wistd::integral_constant<bool,0>;
struct wistd::integral_constant<bool,1>;
struct wistd::integral_constant<enum _EVENT_TYPE,0>;
struct wistd::integral_constant<enum _EVENT_TYPE,1>;
struct wistd::integral_constant<unsigned __int64,0>;
struct wistd::integral_constant<unsigned __int64,1>;
struct wistd::integral_constant<unsigned __int64,2>;
struct wistd::is_class<bool>;
struct wistd::is_class<int>;
struct wistd::is_class<unsigned char>;
struct wistd::is_same<wistd::integral_constant<unsigned __int64,2>,wistd::integral_constant<unsigned __int64,0> >;
struct wistd::is_same<wistd::integral_constant<unsigned __int64,2>,wistd::integral_constant<unsigned __int64,1> >;
struct wistd::is_same<wistd::integral_constant<unsigned __int64,2>,wistd::integral_constant<unsigned __int64,2> >;
struct wistd::less<void>;
struct wistd::pointer_traits<AdapterInit *>;
struct wistd::pointer_traits<INxMemoryChunk *>;
struct wistd::pointer_traits<INxMemoryChunkAllocator *>;
struct wistd::pointer_traits<INxOffloadFacade *>;
struct wistd::pointer_traits<NxBufferManager *>;
struct wistd::pointer_traits<NxBufferPool *>;
struct wistd::pointer_traits<NxCommonBufferMemoryChunk *>;
struct wistd::pointer_traits<NxDmaAdapter *>;
struct wistd::pointer_traits<NxOffloadBase *>;
struct wistd::pointer_traits<NxOffloadManager *>;
struct wistd::pointer_traits<NxPoolMemoryChunk *>;
struct wistd::pointer_traits<NxReceiveScaling *>;
struct wistd::pointer_traits<NxRxXlat *>;
struct wistd::pointer_traits<NxTxXlat *>;
struct wistd::pointer_traits<RtlMdl *>;
struct wistd::pointer_traits<_NET_RING_BUFFER *>;
struct wistd::remove_reference<unsigned __int64 * &>;
struct wistd::remove_reference<wil::details::kspin_lock_saved_irql &>;

union AdapterFlags;
union DBGK_LIVEDUMP_FLAGS;
union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO;
union INTEL_CACHE_INFO_EAX;
union INTEL_CACHE_INFO_EBX;
union USN_RECORD_UNION;
union WPP_PROJECT_CONTROL_BLOCK;
union _AER_BRIDGE_DESCRIPTOR_FLAGS;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
union _AMD_L1_CACHE_INFO;
union _AMD_L2_CACHE_INFO;
union _AMD_L3_CACHE_INFO;
union _ARM64_NT_NEON128;
union _BUGCHECK_PROGRESS_SUMMARY;
union _DL_EI48;
union _DL_EI64;
union _DL_EUI48;
union _DL_EUI64;
union _DL_OUI;
union _DeviceFlags;
union _ENCAPSULATION_PROTOCOL_INFO;
union _ENCAPSULATION_PROTOCOL_PARAMETERS;
union _ENERGY_STATE_DURATION;
union _FIELD_VALUE;
union _FILE_SEGMENT_ELEMENT;
union _FOUR_PART_VERSION;
union _HAL_UNMASKED_INTERRUPT_FLAGS;
union _HAL_X64_SEGMENT_SELECTOR;
union _HEADER_FIELD;
union _IMAGE_AUX_SYMBOL;
union _IMAGE_AUX_SYMBOL_EX;
union _INTERRUPT_CONTROLLER_INFO;
union _IOMMU_DEVICE_PROPERTIES;
union _IOMMU_SVM_CAPABILITIES;
union _IO_LIVEDUMP_CONTROL_ADDPAGES;
union _IO_LIVEDUMP_CONTROL_FLAGS;
union _IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS;
union _IPV6_ROUTER_ADVERTISEMENT_FLAGS;
union _JOBOBJECT_ENERGY_TRACKING_STATE;
union _KGDTENTRY64;
union _KGDT_BASE;
union _KGDT_LIMIT;
union _KIDTENTRY64;
union _LARGE_INTEGER;
union _LDR_DLL_NOTIFICATION_DATA;
union _MCG_STATUS;
union _MCI_ADDR;
union _MCI_STATS;
union _MCI_STATUS;
union _MM_ETW_PAGE_EXTRA_INFO;
union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO;
union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES;
union _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS;
union _NDIS_OID_REQUEST::_REQUEST_DATA;
union _NDIS_PD_COUNTER_VALUE;
union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS;
union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE;
union _NDIS_RSC_NBL_INFO;
union _NDIS_RW_LOCK_REFCOUNT;
union _NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO;
union _NET_BUFFER_DATA_LENGTH;
union _NET_BUFFER_HEADER;
union _NET_BUFFER_LIST_HEADER;
union _NET_LUID_LH;
union _NET_REQUEST_QUEUE_ADD_HANDLER_ERROR;
union _OB_POST_OPERATION_PARAMETERS;
union _OB_PRE_OPERATION_PARAMETERS;
union _PCI_EXPRESS_ACS_CAPABILITY_REGISTER;
union _PCI_EXPRESS_ACS_CONTROL;
union _PCI_EXPRESS_AER_CAPABILITIES;
union _PCI_EXPRESS_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK;
union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS;
union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_1;
union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_2;
union _PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER;
union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER;
union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER;
union _PCI_EXPRESS_DEVICE_STATUS_2_REGISTER;
union _PCI_EXPRESS_DEVICE_STATUS_REGISTER;
union _PCI_EXPRESS_ERROR_SOURCE_ID;
union _PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER;
union _PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER;
union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_LINK_CONTROL_REGISTER;
union _PCI_EXPRESS_LINK_STATUS_REGISTER;
union _PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER;
union _PCI_EXPRESS_PASID_CAPABILITY_REGISTER;
union _PCI_EXPRESS_PASID_CONTROL_REGISTER;
union _PCI_EXPRESS_PME_REQUESTOR_ID;
union _PCI_EXPRESS_PRI_CONTROL_REGISTER;
union _PCI_EXPRESS_PRI_STATUS_REGISTER;
union _PCI_EXPRESS_PTM_CAPABILITY_REGISTER;
union _PCI_EXPRESS_PTM_CONTROL_REGISTER;
union _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER;
union _PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER;
union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_ROOT_CONTROL_REGISTER;
union _PCI_EXPRESS_ROOT_ERROR_COMMAND;
union _PCI_EXPRESS_ROOT_ERROR_STATUS;
union _PCI_EXPRESS_ROOT_STATUS_REGISTER;
union _PCI_EXPRESS_SEC_AER_CAPABILITIES;
union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK;
union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY;
union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS;
union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER;
union _PCI_EXPRESS_SLOT_CONTROL_REGISTER;
union _PCI_EXPRESS_SLOT_STATUS_REGISTER;
union _PCI_EXPRESS_SRIOV_CAPS;
union _PCI_EXPRESS_SRIOV_CONTROL;
union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY;
union _PCI_EXPRESS_SRIOV_STATUS;
union _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER;
union _PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER;
union _PCI_EXPRESS_TPH_ST_TABLE_ENTRY;
union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK;
union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY;
union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS;
union _PCI_FPB_CAPABILITIES_REGISTER;
union _PCI_FPB_MEM_HIGH_VECTOR_CONTROL1_REGISTER;
union _PCI_FPB_MEM_LOW_VECTOR_CONTROL_REGISTER;
union _PCI_FPB_RID_VECTOR_CONTROL1_REGISTER;
union _PCI_FPB_RID_VECTOR_CONTROL2_REGISTER;
union _PCI_FPB_VECTOR_ACCESS_CONTROL_REGISTER;
union _PCW_CALLBACK_INFORMATION;
union _POWER_STATE;
union _PREFETCH_VIRTUAL_ADDRESS_FLAGS;
union _PROCESS_AFFINITY_UPDATE_MODE;
union _PROCESS_LOGGING_INFORMATION;
union _PROCESS_MEMORY_ALLOCATION_MODE;
union _PROCESS_READWRITEVM_LOGGING_INFORMATION;
union _PROCESS_SYSTEM_RESOURCE_MANAGEMENT;
union _PROTOCOL_OFFLOAD_PARAMETERS;
union _PS_EXCEPTION_FLAGS;
union _RATE_QUOTA_LIMIT;
union _REQUEST_DATA;
union _RESULT_VALUE;
union _RTL_ELEVATION_FLAGS;
union _RTL_IMAGE_MITIGATION_POLICY;
union _RTL_RUN_ONCE;
union _RTL_TICK_LOCK;
union _SE_SID;
union _SLIST_HEADER;
union _SOCKADDR_INET;
union _STREAM_INFORMATION_ENTRY::_StreamInformation;
union _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES;
union _SYSDBG_LIVEDUMP_CONTROL_FLAGS;
union _StreamInformation;
union _TIMELINE_BITMAP;
union _ULARGE_INTEGER;
union _UNWIND_CODE;
union _VIA_L1_CACHE_INFO;
union _VIA_L2_CACHE_INFO;
union _VIRTUAL_CHANNEL_CAPABILITIES1;
union _VIRTUAL_CHANNEL_CAPABILITIES2;
union _VIRTUAL_CHANNEL_CONTROL;
union _VIRTUAL_CHANNEL_STATUS;
union _VIRTUAL_RESOURCE_CAPABILITY;
union _VIRTUAL_RESOURCE_CONTROL;
union _VIRTUAL_RESOURCE_STATUS;
union _WHEA_ARM_BUS_ERROR_VALID_BITS;
union _WHEA_ARM_CACHE_ERROR_VALID_BITS;
union _WHEA_ARM_PROCESSOR_ERROR;
union _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER_FLAGS;
union _WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS;
union _WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS;
union _WHEA_ARM_TLB_ERROR_VALID_BITS;
union _WHEA_ERROR_INJECTION_CAPABILITIES;
union _WHEA_ERROR_PACKET_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_ERROR_STATUS;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
union _WHEA_GENERIC_ERROR_BLOCKSTATUS;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
union _WHEA_NMI_ERROR_SECTION_FLAGS;
union _WHEA_NOTIFICATION_FLAGS;
union _WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS;
union _WHEA_PCIEXPRESS_COMMAND_STATUS;
union _WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS;
union _WHEA_PCIEXPRESS_VERSION;
union _WHEA_PCIXBUS_COMMAND;
union _WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS;
union _WHEA_PCIXBUS_ID;
union _WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_PROCESSOR_FAMILY_INFO;
union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
union _WHEA_XPF_BUS_CHECK;
union _WHEA_XPF_CACHE_CHECK;
union _WHEA_XPF_MS_CHECK;
union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS;
union _WHEA_XPF_PROCINFO_VALIDBITS;
union _WHEA_XPF_TLB_CHECK;
union _WOL_PATTERN;
union _XPF_MCE_FLAGS;
union _XPF_MC_BANK_FLAGS;
union sockaddr_gen;

enum ARP_HARDWARE_TYPE;
enum ARP_OPCODE;
enum AdapterState;
enum BUS_QUERY_ID_TYPE;
enum BooleanDisposition;
enum BouncePolicy;
enum CI_WINDOWS_LOCKDOWN_RESTRICTION;
enum COMPARTMENT_ID;
enum CONTROL_CHANNEL_TRIGGER_STATUS;
enum CPU_VENDORS;
enum CallRunMode;
enum DEVICE_REGISTRY_PROPERTY;
enum DEVICE_TEXT_TYPE;
enum DL_ADDRESS_TYPE;
enum DMA_COMPLETION_STATUS;
enum DOT11_BAND;
enum DOT11_DIRECTION;
enum DOT11_DS_INFO;
enum DOT11_MANUFACTURING_SELF_TEST_TYPE;
enum DRIVER_CONFIG_ENUM;
enum DeviceInterfaceType;
enum DeviceState;
enum EM_RULE_STATE;
enum ETW_COMPRESSION_RESUMPTION_MODE;
enum EcState;
enum EngineState;
enum Event;
enum EventAction;
enum EventId;
enum FALLBACK_INDEX;
enum FxDriverObjectUmFlags;
enum HAL_APIC_DESTINATION_MODE;
enum HAL_INTERRUPT_TARGET_TYPE;
enum HAL_PCC_CHANNEL_POWER_COMMAND;
enum ICMP4_TIME_EXCEED_CODE;
enum ICMP4_UNREACH_CODE;
enum IF_OPER_STATUS;
enum IGMP_MAX_RESP_CODE_TYPE;
enum IMAGE_AUX_SYMBOL_TYPE;
enum IMPORT_OBJECT_NAME_TYPE;
enum IMPORT_OBJECT_TYPE;
enum INTERRUPT_CONNECTION_TYPE;
enum IPPROTO;
enum IPV4_OPTION_TYPE;
enum IPV6_OPTION_TYPE;
enum IP_OPTION_TIMESTAMP_FLAGS;
enum IPv6ExtensionParseResult;
enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum KD_CALLBACK_ACTION;
enum KD_NAMESPACE_ENUM;
enum KE_PROCESSOR_CHANGE_NOTIFY_STATE;
enum KRegKey::BooleanDisposition;
enum LATENCY_TIME;
enum MCA_EXCEPTION_TYPE;
enum MEM_EXTENDED_PARAMETER_TYPE;
enum MEM_SECTION_EXTENDED_PARAMETER_TYPE;
enum MLD_MAX_RESP_CODE_TYPE;
enum MULTICAST_MODE_TYPE;
enum NDIS_PD_CONTROL_TYPE;
enum NDIS_PD_COUNTER_TYPE;
enum NDIS_PD_PROVIDER_CONTROL_CODE;
enum NDIS_PD_QUEUE_CONTROL_CODE;
enum NDIS_PD_QUEUE_TYPE;
enum ND_OPTION_TYPE;
enum NET_CLIENT_TRI_STATE;
enum NL_ADDRESS_TYPE;
enum NL_DAD_STATE;
enum NL_PREFIX_ORIGIN;
enum NL_ROUTE_PROTOCOL;
enum NL_SUFFIX_ORIGIN;
enum NxAdapterStateMachine<NxAdapter>::Event;
enum NxAdapterStateMachine<NxAdapter>::EventId;
enum NxAdapterStateMachine<NxAdapter>::StateId;
enum NxAdapterStateMachine<NxAdapter>::StateIndex;
enum NxAdapterStateMachine<NxAdapter>::SubmachineName;
enum NxDeviceStateMachine<NxDevice>::Event;
enum NxDeviceStateMachine<NxDevice>::EventId;
enum NxDeviceStateMachine<NxDevice>::StateId;
enum NxDeviceStateMachine<NxDevice>::StateIndex;
enum NxDeviceStateMachine<NxDevice>::SubmachineName;
enum NxExecutionContext::EcState;
enum NxNblTranslationStatus;
enum NxQueue::Type;
enum OffloadType;
enum PCI_BUS_WIDTH;
enum PCI_EXPRESS_ASPM_CONTROL;
enum PCI_EXPRESS_ASPM_SUPPORT;
enum PCI_EXPRESS_CARD_PRESENCE;
enum PCI_EXPRESS_DEVICE_TYPE;
enum PCI_EXPRESS_INDICATOR_STATE;
enum PCI_EXPRESS_L0s_EXIT_LATENCY;
enum PCI_EXPRESS_L1_EXIT_LATENCY;
enum PCI_EXPRESS_MAX_PAYLOAD_SIZE;
enum PCI_EXPRESS_MRL_STATE;
enum PCI_EXPRESS_POWER_STATE;
enum PCI_HT_CapabilitiesType;
enum PNP_DEPENDENCY_PATH_TYPE;
enum POWER_ACTION;
enum POWER_INFORMATION_LEVEL;
enum POWER_MONITOR_REQUEST_REASON;
enum POWER_STATE_DISABLED_TYPE;
enum POWER_STATE_HANDLER_TYPE;
enum POWER_USER_PRESENCE_TYPE;
enum PO_FIXED_WAKE_SOURCE_TYPE;
enum PO_INTERNAL_WAKE_SOURCE_TYPE;
enum PO_LATENCY_HINT_TYPE;
enum PO_WAKE_SOURCE_TYPE;
enum PS_CREATE_STATE;
enum RCVALL_VALUE;
enum RTL_BSD_ITEM_TYPE;
enum RTL_DISK_SPACE_POLICY;
enum RTL_DISK_SPEED_POLICY;
enum RTL_DISK_WRITE_CONSTRAINT_POLICY;
enum RTL_PHYSICAL_MEMORY_POLICY;
enum ReplacesCorHdrNumericDefines;
enum SCOPE_LEVEL;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum SYSTEM_POWER_CONDITION;
enum SmFx::EventQueueingDisposition;
enum SmFx::InternalTransitionFlags;
enum SmFx::MachineException;
enum SmFx::Memory::PoolType;
enum SmFx::StateFlags;
enum SmFx::StateMachineEngine::StateMachineEngineImpl::EngineState;
enum SmFx::StateMachineEngine::StateMachineEngineImpl::EventAction;
enum SmFx::StateSlotType;
enum SmFx::StateType;
enum SmFx::StopTimerResult;
enum SmFx::TransitionType;
enum StateId;
enum StateIndex;
enum SubmachineName;
enum TCP_ICW_LEVEL;
enum TUNNEL_TYPE;
enum TlgIn_t;
enum TlgOut_t;
enum Type;
enum VERIFIER_MODE;
enum WELL_KNOWN_SID_TYPE;
enum WPP_CTL_NAMES;
enum WPP_DEFINE_BIT_NAMES;
enum _ACCESS_REASON_TYPE;
enum _ACL_INFORMATION_CLASS;
enum _ACPI_REG_TYPE;
enum _ALPC_MESSAGE_INFORMATION_CLASS;
enum _ALPC_PORT_INFORMATION_CLASS;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _APPCONTAINER_SID_TYPE;
enum _ARBITER_ACTION;
enum _ARBITER_REQUEST_SOURCE;
enum _ARBITER_RESULT;
enum _ATOM_INFORMATION_CLASS;
enum _AUDIT_EVENT_TYPE;
enum _BDCB_CALLBACK_TYPE;
enum _BDCB_CLASSIFICATION;
enum _BDCB_STATUS_UPDATE_TYPE;
enum _BOOT_ENTROPY_SOURCE_ID;
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE;
enum _BOUND_CALLBACK_STATUS;
enum _BUS_DATA_TYPE;
enum _CH_DESCRIPTION_TYPE;
enum _CI_WINDOWS_LOCKDOWN_MODE;
enum _CLFS_CONTEXT_MODE;
enum _CLFS_IOSTATS_CLASS;
enum _CLFS_LOG_ARCHIVE_MODE;
enum _CLFS_MGMT_NOTIFICATION_TYPE;
enum _CLFS_MGMT_POLICY_TYPE;
enum _CLS_CONTEXT_MODE;
enum _CLS_IOSTATS_CLASS;
enum _CLS_LOG_INFORMATION_CLASS;
enum _CMOS_DEVICE_TYPE;
enum _CM_ERROR_CONTROL_TYPE;
enum _CM_SERVICE_LOAD_TYPE;
enum _CM_SERVICE_NODE_TYPE;
enum _CM_SHARE_DISPOSITION;
enum _CONFIGURATION_CLASS;
enum _CONFIGURATION_TYPE;
enum _CONTAINER_TYPE;
enum _COVERAGE_REQUEST_CODES;
enum _CPU_SET_INFORMATION_TYPE;
enum _CREATE_FILE_TYPE;
enum _CSVFS_DISK_CONNECTIVITY;
enum _CSV_CONTROL_OP;
enum _D3COLD_LAST_TRANSITION_STATUS;
enum _DEBUG_CONTROL_SPACE_ITEM;
enum _DEVICE_DIRECTORY_TYPE;
enum _DEVICE_INSTALL_STATE;
enum _DEVICE_POWER_STATE;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_REMOVAL_POLICY;
enum _DEVICE_RESET_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
enum _DEVPROPSTORE;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum _DMA_SPEED;
enum _DMA_WIDTH;
enum _DOMAIN_CONFIGURATION_ARCH;
enum _DOT11_ACK_POLICY;
enum _DOT11_AC_PARAM;
enum _DOT11_ANQP_QUERY_RESULT;
enum _DOT11_ASSOCIATION_STATE;
enum _DOT11_AUTH_ALGORITHM;
enum _DOT11_BSS_TYPE;
enum _DOT11_CIPHER_ALGORITHM;
enum _DOT11_DIVERSITY_SUPPORT;
enum _DOT11_HOP_ALGO_ADOPTED;
enum _DOT11_KEY_DIRECTION;
enum _DOT11_MANUFACTURING_CALLBACK_TYPE;
enum _DOT11_MANUFACTURING_TEST_TYPE;
enum _DOT11_OFFLOAD_TYPE;
enum _DOT11_PHY_TYPE;
enum _DOT11_POWER_MODE;
enum _DOT11_POWER_MODE_REASON;
enum _DOT11_RESET_TYPE;
enum _DOT11_SCAN_TYPE;
enum _DOT11_TEMP_TYPE;
enum _DOT11_UPDATE_IE_OP;
enum _DOT11_WFD_DISCOVER_TYPE;
enum _DOT11_WFD_SCAN_TYPE;
enum _DOT11_WPS_CONFIG_METHOD;
enum _DOT11_WPS_DEVICE_PASSWORD_ID;
enum _DPFLTR_TYPE;
enum _DRIVER_DIRECTORY_TYPE;
enum _DRIVER_REGKEY_TYPE;
enum _DRIVER_RUNTIME_INIT_FLAGS;
enum _DUMP_EVENTS;
enum _EMULATOR_PORT_ACCESS_TYPE;
enum _ENLISTMENT_INFORMATION_CLASS;
enum _ERROR_SEVERITY_VALUE;
enum _EVENT_INFORMATION_CLASS;
enum _EVENT_INFO_CLASS;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
enum _EXCEPTION_LOG_TYPE;
enum _EXTENDED_AGP_REGISTER;
enum _EXT_IOMMU_DEVICE_TYPE;
enum _EX_POOL_PRIORITY;
enum _FAULT_INFORMATION_ARCH;
enum _FAULT_INFORMATION_ARM64_TYPE;
enum _FILE_INFORMATION_CLASS;
enum _FILE_METADATA_OPTIMIZATION_STATE;
enum _FILE_STORAGE_TIER_CLASS;
enum _FILE_STORAGE_TIER_MEDIA_TYPE;
enum _FILTER_BOOT_OPTION_OPERATION;
enum _FIRMWARE_REENTRY;
enum _FIRMWARE_TYPE;
enum _FP_IEEE_COMPARE_RESULT;
enum _FP_IEEE_OPERATION_CODE;
enum _FP__IEEE_FORMAT;
enum _FP__IEEE_ROUNDING_MODE;
enum _FSINFOCLASS;
enum _FUNCTION_TABLE_TYPE;
enum _FailureCode;
enum _HAL_CLOCK_TIMER_MODE;
enum _HAL_DISPLAY_BIOS_INFORMATION;
enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE;
enum _HAL_PLATFORM_TIMER_SOURCE;
enum _HAL_PROCESSOR_STAT_TYPE;
enum _HAL_QUERY_INFORMATION_CLASS;
enum _HAL_SET_INFORMATION_CLASS;
enum _HAL_WATCHDOG_TIMER_SOURCE;
enum _HARDERROR_RESPONSE;
enum _HARDERROR_RESPONSE_OPTION;
enum _HARDWARE_COUNTER_TYPE;
enum _HIBERFILE_BUCKET_SIZE;
enum _HMA_CACHE_ASSOCIATIVITY;
enum _HMA_CACHE_LEVEL;
enum _HMA_CACHE_WRITE_POLICY;
enum _HOT_PATCH_INFORMATION_CLASS;
enum _IF_ACCESS_TYPE;
enum _IF_ADMINISTRATIVE_STATE;
enum _IMAGE_MITIGATION_POLICY;
enum _IMAGE_POLICY_ENTRY_TYPE;
enum _IMAGE_POLICY_ID;
enum _INTEL_CACHE_TYPE;
enum _INTERFACE_TYPE;
enum _INTERLOCKED_RESULT;
enum _INTERNAL_IF_OPER_STATUS;
enum _IO_ACCESS_MODE;
enum _IO_ACCESS_TYPE;
enum _IO_ALLOCATION_ACTION;
enum _IO_COMPLETION_INFORMATION_CLASS;
enum _IO_COMPLETION_ROUTINE_RESULT;
enum _IO_CONTAINER_INFORMATION_CLASS;
enum _IO_CONTAINER_NOTIFICATION_CLASS;
enum _IO_NOTIFICATION_EVENT_CATEGORY;
enum _IO_PAGING_PRIORITY;
enum _IO_PRIORITY_HINT;
enum _IO_QUERY_DEVICE_DATA_FORMAT;
enum _IO_RATE_CONTROL_TYPE;
enum _IO_SESSION_EVENT;
enum _IO_SESSION_STATE;
enum _IO_STEER_INTERRUPT_CONNECTION_TYPE;
enum _IO_STEER_INTERRUPT_TARGET_TYPE;
enum _IPI_TYPE;
enum _IPSEC_OFFLOAD_V2_OPERATION;
enum _IRQ_DEVICE_POLICY;
enum _IRQ_DEVICE_POLICY_USHORT;
enum _IRQ_GROUP_POLICY;
enum _IRQ_PRIORITY;
enum _JOBOBJECTINFOCLASS;
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE;
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
enum _JOURNAL_CHANGE_INFORMATION_CLASS;
enum _JOURNAL_INFORMATION_CLASS;
enum _KAPC_ENVIRONMENT;
enum _KBUGCHECK_BUFFER_DUMP_STATE;
enum _KBUGCHECK_CALLBACK_REASON;
enum _KBUGCHECK_DUMP_IO_TYPE;
enum _KDPC_IMPORTANCE;
enum _KD_OPTION;
enum _KEY_INFORMATION_CLASS;
enum _KEY_SET_INFORMATION_CLASS;
enum _KEY_VALUE_INFORMATION_CLASS;
enum _KHETERO_CPU_POLICY;
enum _KINTEGRITY_CHECK_CONTROL;
enum _KINTEGRITY_RESOURCE_TYPE;
enum _KINTERRUPT_DISPATCH_STATUS;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
enum _KPROFILE_SOURCE;
enum _KSTACK_TYPE;
enum _KTHREAD_TAG;
enum _KTMOBJECT_TYPE;
enum _KWAIT_REASON;
enum _LDR_DDAG_STATE;
enum _LDR_DLL_LOAD_REASON;
enum _LEARNING_MODE_LOG_LEVEL;
enum _LICENSING_TAMPER_STATE;
enum _LINK_TRACKING_INFORMATION_TYPE;
enum _LOCK_OPERATION;
enum _LOGICAL_PROCESSOR_RELATIONSHIP;
enum _MANDATORY_LEVEL;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _MEMORY_EXHAUSTION_TYPE;
enum _MEMORY_INFORMATION_CLASS;
enum _MEMORY_RESERVE_TYPE;
enum _MEMORY_WORKING_SET_EX_LOCATION;
enum _MIB_IF_ENTRY_LEVEL;
enum _MM_ETW_WORKING_SET_TYPE;
enum _MM_MDL_PAGE_CONTENTS_STATE;
enum _MM_PAGE_PRIORITY;
enum _MM_ROTATE_DIRECTION;
enum _MM_SYSTEM_SIZE;
enum _MODE;
enum _MONITOR_DISPLAY_STATE;
enum _MUTANT_INFORMATION_CLASS;
enum _NDIS_802_11_AUTHENTICATION_MODE;
enum _NDIS_802_11_MEDIA_STREAM_MODE;
enum _NDIS_802_11_NETWORK_INFRASTRUCTURE;
enum _NDIS_802_11_NETWORK_TYPE;
enum _NDIS_802_11_POWER_MODE;
enum _NDIS_802_11_PRIVACY_FILTER;
enum _NDIS_802_11_RADIO_STATUS;
enum _NDIS_802_11_RELOAD_DEFAULTS;
enum _NDIS_802_11_STATUS_TYPE;
enum _NDIS_802_11_WEP_STATUS;
enum _NDIS_802_5_RING_STATE;
enum _NDIS_ARP_HEADER_FIELD;
enum _NDIS_CLASS_ID;
enum _NDIS_DEVICE_PNP_EVENT;
enum _NDIS_DEVICE_POWER_STATE;
enum _NDIS_ENVIRONMENT_TYPE;
enum _NDIS_FDDI_ATTACHMENT_TYPE;
enum _NDIS_FDDI_LCONNECTION_STATE;
enum _NDIS_FDDI_RING_MGT_STATE;
enum _NDIS_FRAME_HEADER;
enum _NDIS_GFP_TABLE_TYPE;
enum _NDIS_GFP_WILDCARD_MATCH_TYPE;
enum _NDIS_GFT_COUNTER_TYPE;
enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY;
enum _NDIS_GFT_COUNTER_VALUE_QUERY_METHOD;
enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT;
enum _NDIS_GFT_FLOW_ENTRY_STATE;
enum _NDIS_GFT_FLOW_ENTRY_TYPE;
enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION;
enum _NDIS_GFT_PROFILE_TYPE;
enum _NDIS_GFT_WILDCARD_ACTION;
enum _NDIS_HALT_ACTION;
enum _NDIS_HARDWARE_STATUS;
enum _NDIS_HYPERVISOR_PARTITION_TYPE;
enum _NDIS_INTERFACE_TYPE;
enum _NDIS_INTERRUPT_MODERATION;
enum _NDIS_INTERRUPT_TYPE;
enum _NDIS_IPV4_HEADER_FIELD;
enum _NDIS_IPV6_HEADER_FIELD;
enum _NDIS_ISOLATION_MODE;
enum _NDIS_MAC_HEADER_FIELD;
enum _NDIS_MAC_PACKET_TYPE;
enum _NDIS_MEDIA_STATE;
enum _NDIS_MEDIUM;
enum _NDIS_MSIX_TABLE_CONFIG;
enum _NDIS_NBL_TRACKER_LIFETIME_EVENT;
enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT;
enum _NDIS_NETWORK_CHANGE_TYPE;
enum _NDIS_NET_BUFFER_LIST_INFO;
enum _NDIS_NIC_SWITCH_TYPE;
enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION;
enum _NDIS_NIC_SWITCH_VPORT_STATE;
enum _NDIS_PARAMETER_TYPE;
enum _NDIS_PER_PACKET_INFO;
enum _NDIS_PHYSICAL_MEDIUM;
enum _NDIS_PM_ADMIN_CONFIG_STATE;
enum _NDIS_PM_CAPABILITY_STATE;
enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE;
enum _NDIS_PM_WAKE_REASON_TYPE;
enum _NDIS_PM_WOL_PACKET;
enum _NDIS_PORT_AUTHORIZATION_STATE;
enum _NDIS_PORT_CONTROL_STATE;
enum _NDIS_PORT_TYPE;
enum _NDIS_POWER_PROFILE;
enum _NDIS_PROCESSOR_TYPE;
enum _NDIS_PROCESSOR_VENDOR;
enum _NDIS_QOS_SQ_TYPE;
enum _NDIS_RECEIVE_FILTER_TEST;
enum _NDIS_RECEIVE_FILTER_TYPE;
enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE;
enum _NDIS_RECEIVE_QUEUE_TYPE;
enum _NDIS_REQUEST_TYPE;
enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS;
enum _NDIS_RSS_PROFILE;
enum _NDIS_SHARED_MEMORY_USAGE;
enum _NDIS_SHUTDOWN_ACTION;
enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS;
enum _NDIS_SWITCH_FEATURE_STATUS_TYPE;
enum _NDIS_SWITCH_NIC_STATE;
enum _NDIS_SWITCH_NIC_TYPE;
enum _NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE;
enum _NDIS_SWITCH_PORT_PROPERTY_TYPE;
enum _NDIS_SWITCH_PORT_PVLAN_MODE;
enum _NDIS_SWITCH_PORT_STATE;
enum _NDIS_SWITCH_PORT_TYPE;
enum _NDIS_SWITCH_PORT_VLAN_MODE;
enum _NDIS_SWITCH_PROPERTY_TYPE;
enum _NDIS_UDP_HEADER_FIELD;
enum _NDIS_WAN_HEADER_FORMAT;
enum _NDIS_WAN_MEDIUM_SUBTYPE;
enum _NDIS_WAN_QUALITY;
enum _NDK_RDMA_TECHNOLOGY;
enum _NETFUNCENUM;
enum _NET_ADAPTER_AUTO_NEGOTIATION_FLAGS;
enum _NET_ADAPTER_MEDIA_SPECIFIC_WAKEUP_EVENTS_FLAGS;
enum _NET_ADAPTER_PAUSE_FUNCTIONS;
enum _NET_ADAPTER_POWER_FLAGS;
enum _NET_ADAPTER_PROTOCOL_OFFLOADS_FLAGS;
enum _NET_ADAPTER_RECEIVE_SCALING_ENCAPSULATION_TYPE;
enum _NET_ADAPTER_RECEIVE_SCALING_HASH_TYPE;
enum _NET_ADAPTER_RECEIVE_SCALING_PROTOCOL_TYPE;
enum _NET_ADAPTER_RECEIVE_SCALING_UNHASHED_TARGET_TYPE;
enum _NET_ADAPTER_STATISTICS_FLAGS;
enum _NET_ADAPTER_WAKEUP_EVENTS_FLAGS;
enum _NET_ADAPTER_WAKE_PATTERN_FLAGS;
enum _NET_CLIENT_BUFFER_POOL_FLAGS;
enum _NET_CLIENT_MEMORY_MANAGEMENT_MODE;
enum _NET_CLIENT_MEMORY_MAPPING_REQUIREMENT;
enum _NET_CONFIGURATION_QUERY_ULONG_FLAGS;
enum _NET_DATPATH_RING_BUFFER_INDEX;
enum _NET_DEVICE_POWER_STATE;
enum _NET_DEVICE_RESET_TYPE;
enum _NET_IF_ACCESS_TYPE;
enum _NET_IF_ADMIN_STATUS;
enum _NET_IF_CONNECTION_TYPE;
enum _NET_IF_DIRECTION_TYPE;
enum _NET_IF_MEDIA_CONNECT_STATE;
enum _NET_IF_MEDIA_DUPLEX_STATE;
enum _NET_IF_OPER_STATUS;
enum _NET_IF_RCV_ADDRESS_TYPE;
enum _NET_MEMORY_MAPPING_REQUIREMENT;
enum _NET_PACKET_ENCAPSULATION_TYPE;
enum _NET_PACKET_FILTER_TYPES_FLAGS;
enum _NET_PACKET_LAYER2_TYPE;
enum _NET_PACKET_LAYER3_TYPE;
enum _NET_PACKET_LAYER4_TYPE;
enum _NET_PACKET_RX_CHECKSUM_EVALUATION;
enum _NET_PACKET_TX_CHECKSUM_ACTION;
enum _NET_PNP_EVENT_CODE;
enum _NET_REQUEST_QUEUE_TYPE;
enum _NET_RING_BUFFER_HEAD_TYPE;
enum _NET_RX_FRAGMENT_BUFFER_ALLOCATION_MODE;
enum _NET_RX_FRAGMENT_BUFFER_ATTACHMENT_MODE;
enum _NL_BANDWIDTH_FLAG;
enum _NL_INTERFACE_NETWORK_CATEGORY_STATE;
enum _NL_LINK_LOCAL_ADDRESS_BEHAVIOR;
enum _NL_NEIGHBOR_STATE;
enum _NL_NETWORK_CATEGORY;
enum _NL_ROUTER_DISCOVERY_BEHAVIOR;
enum _NL_ROUTE_ORIGIN;
enum _NPI_MODULEID_TYPE;
enum _NT_PRODUCT_TYPE;
enum _NX_POWER_ENTRY_TYPE;
enum _NdisWdfPnpPowerAction;
enum _OBJECT_INFORMATION_CLASS;
enum _OB_OPEN_REASON;
enum _OB_PREOP_CALLBACK_STATUS;
enum _OFFLOAD_CONF_ALGO;
enum _OFFLOAD_INTEGRITY_ALGO;
enum _OFFLOAD_OPERATION_E;
enum _OS_DEPLOYEMENT_STATE_VALUES;
enum _PARTITION_INFORMATION_CLASS;
enum _PCI_ACS_BIT;
enum _PCI_BUSMASTER_RID_TYPE;
enum _PCI_HARDWARE_INTERFACE;
enum _PCW_CALLBACK_TYPE;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _PERFINFO_MM_STAT;
enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE;
enum _PHYSICAL_MEMORY_HEAT_TYPE;
enum _PLUGPLAY_CONTROL_CLASS;
enum _PLUGPLAY_EVENT_CATEGORY;
enum _PMTUD_STATE;
enum _PNP_DEVICE_DMA_REMAPPING_POLICY;
enum _PNP_QUERY_RELATION;
enum _PNP_VETO_TYPE;
enum _POOL_TYPE;
enum _PORT_INFORMATION_CLASS;
enum _POWERSTATETASK;
enum _POWER_MONITOR_REQUEST_TYPE;
enum _POWER_PLATFORM_ROLE;
enum _POWER_REQUEST_TYPE;
enum _POWER_STATE_TYPE;
enum _PO_CS_DEVICE_NOTIFICATION_TYPE;
enum _PO_FX_PERF_STATE_TYPE;
enum _PO_FX_PERF_STATE_UNIT;
enum _PO_HIBER_FORCE_DISABLE_REASON;
enum _PO_SLEEP_DISABLE_REASON;
enum _PO_THERMAL_REQUEST_TYPE;
enum _PREFETCH_VIRTUAL_ADDRESS_PRIORITY_TYPE;
enum _PROCESSINFOCLASS;
enum _PROCESSOR_CACHE_TYPE;
enum _PROCESS_ACTIVITY_TYPE;
enum _PROCESS_ENERGY_COMPONENT_TYPE_NUM;
enum _PROCESS_MITIGATION_POLICY;
enum _PROCESS_TLS_INFORMATION_TYPE;
enum _PROCESS_WORKING_SET_OPERATION;
enum _PSCREATEPROCESSNOTIFYTYPE;
enum _PSCREATETHREADNOTIFYTYPE;
enum _PSPOWEREVENTTYPE;
enum _PSPROCESSPRIORITYMODE;
enum _PSW32JOBCALLOUTTYPE;
enum _PSW32THREADCALLOUTTYPE;
enum _PS_ATTRIBUTE_NUM;
enum _PS_BAM_PPM_POLICY;
enum _PS_HW_TRACE_CONTROL;
enum _PS_MITIGATION_OPTION;
enum _PS_PICO_THREAD_DESCRIPTOR_TYPE;
enum _PS_PROTECTED_SIGNER;
enum _PS_PROTECTED_TYPE;
enum _PS_STD_HANDLE_STATE;
enum _PS_WAKE_REASON;
enum _QUERY_FILE_LAYOUT_FILTER_TYPE;
enum _REFS_SMR_VOLUME_GC_ACTION;
enum _REFS_SMR_VOLUME_GC_METHOD;
enum _REFS_SMR_VOLUME_GC_STATE;
enum _REG_ACTION;
enum _REG_NOTIFY_CLASS;
enum _REQUESTER_TYPE;
enum _RESOURCEMANAGER_INFORMATION_CLASS;
enum _RESOURCE_TRANSLATION_DIRECTION;
enum _RTL_GENERIC_COMPARE_RESULTS;
enum _RTL_IMAGE_MITIGATION_OPTION_STATE;
enum _RTL_MEMORY_TYPE;
enum _RTL_RESOURCE_CATEGORY;
enum _RTL_RESOURCE_POLICY_FLAGS;
enum _RTL_SPARSE_BITMAP_CTX_OPERATION;
enum _RTL_STACK_TRACE_DATABASE_CONTROL;
enum _RTL_UMS_SCHEDULER_REASON;
enum _RTL_UMS_THREAD_INFO_CLASS;
enum _SECTION_INFORMATION_CLASS;
enum _SECTION_INHERIT;
enum _SECURE_SETTING_VALUE_TYPE;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
enum _SEMAPHORE_INFORMATION_CLASS;
enum _SERVERSILO_STATE;
enum _SE_ADT_PARAMETER_TYPE;
enum _SE_AUDIT_OPERATION;
enum _SE_IMAGE_SIGNATURE_TYPE;
enum _SE_IMAGE_TYPE;
enum _SE_IMAGE_VERIFICATION_CALLBACK_TYPE;
enum _SE_LEARNING_MODE_DATA_TYPE;
enum _SE_VALIDATE_MAPPING_TYPE;
enum _SHRINK_VOLUME_REQUEST_TYPES;
enum _SHUTDOWN_ACTION;
enum _SID_NAME_USE;
enum _SOCKET_SECURITY_PROTOCOL;
enum _SOCKET_USAGE_TYPE;
enum _SOC_SUBSYSTEM_TYPE;
enum _STATE_LOCATION_TYPE;
enum _STORAGE_RESERVE_ID;
enum _SUBSYSTEM_INFORMATION_TYPE;
enum _SUITE_TYPE;
enum _SYMBOLIC_LINK_INFO_CLASS;
enum _SYSDBG_COMMAND;
enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE;
enum _SYSTEM_ACTIVITY_MODERATION_STATE;
enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS;
enum _SYSTEM_FIRMWARE_TABLE_ACTION;
enum _SYSTEM_INFORMATION_CLASS;
enum _SYSTEM_MEMORY_LIST_COMMAND;
enum _SYSTEM_NET_RATE_CONTROL_TYPE;
enum _SYSTEM_PIXEL_FORMAT;
enum _SYSTEM_POWER_STATE;
enum _SYSTEM_PROCESS_CLASSIFICATION;
enum _SYSTEM_VA_TYPE;
enum _SharedVirtualDiskHandleState;
enum _SharedVirtualDiskSupportType;
enum _TABLE_SEARCH_RESULT;
enum _TCPSTATE;
enum _THREADINFOCLASS;
enum _THREAD_UMS_INFORMATION_COMMAND;
enum _THREAD_WORKLOAD_CLASS;
enum _TIMER_INFORMATION_CLASS;
enum _TIMER_SET_INFORMATION_CLASS;
enum _TIMER_TYPE;
enum _TOKEN_ELEVATION_TYPE;
enum _TOKEN_INFORMATION_CLASS;
enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION;
enum _TOKEN_TYPE;
enum _TP_CALLBACK_PRIORITY;
enum _TP_DEBUG_CLASS;
enum _TP_LOG_LEVEL;
enum _TP_TRACE_TYPE;
enum _TRACE_INFORMATION_CLASS;
enum _TRANSACTIONMANAGER_INFORMATION_CLASS;
enum _TRANSACTION_INFORMATION_CLASS;
enum _TRANSACTION_OUTCOME;
enum _TRANSACTION_STATE;
enum _TUNNEL_SUB_TYPE;
enum _TYPE_OF_MEMORY;
enum _TlgBlob_t;
enum _TlgFlags_t;
enum _TlgOptions_t;
enum _UDP_ENCAP_TYPE;
enum _UNWIND_OP_CODES;
enum _USER_ACTIVITY_PRESENCE;
enum _VERIFIER_RULE_CLASS_ID;
enum _VIRTUAL_MEMORY_INFORMATION_CLASS;
enum _VIRTUAL_STORAGE_BEHAVIOR_CODE;
enum _VerifierAction;
enum _WAIT_TYPE;
enum _WATCHDOG_HANDLER_ACTION;
enum _WATCHDOG_INFORMATION_CLASS;
enum _WDFFUNCENUM;
enum _WDFSTRUCTENUM;
enum _WDF_BUGCHECK_CODES;
enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS;
enum _WDF_DEVICE_FAILED_ACTION;
enum _WDF_DEVICE_IO_TYPE;
enum _WDF_DEVICE_PNP_STATE;
enum _WDF_DEVICE_POWER_POLICY_STATE;
enum _WDF_DEVICE_POWER_STATE;
enum _WDF_DEVICE_SHUTDOWN_FLAGS;
enum _WDF_DEVICE_STATE_FLAGS;
enum _WDF_DISPATCH_IRP_TO_IO_QUEUE_FLAGS;
enum _WDF_DMA_DIRECTION;
enum _WDF_DMA_ENABLER_CONFIG_FLAGS;
enum _WDF_DMA_PROFILE;
enum _WDF_DRIVER_INIT_FLAGS;
enum _WDF_EXECUTION_LEVEL;
enum _WDF_FILEOBJECT_CLASS;
enum _WDF_INTERRUPT_POLARITY;
enum _WDF_INTERRUPT_POLICY;
enum _WDF_INTERRUPT_PRIORITY;
enum _WDF_IO_FORWARD_PROGRESS_ACTION;
enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY;
enum _WDF_IO_QUEUE_DISPATCH_TYPE;
enum _WDF_IO_QUEUE_STATE;
enum _WDF_IO_TARGET_OPEN_TYPE;
enum _WDF_IO_TARGET_PURGE_IO_ACTION;
enum _WDF_IO_TARGET_SENT_IO_ACTION;
enum _WDF_IO_TARGET_STATE;
enum _WDF_MEMORY_DESCRIPTOR_TYPE;
enum _WDF_POWER_DEVICE_STATE;
enum _WDF_POWER_POLICY_IDLE_TIMEOUT_CONSTANTS;
enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE;
enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES;
enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL;
enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL;
enum _WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE;
enum _WDF_REMOVE_LOCK_OPTIONS_FLAGS;
enum _WDF_REQUEST_FATAL_ERROR_CODES;
enum _WDF_REQUEST_FORWARD_OPTIONS_FLAGS;
enum _WDF_REQUEST_REUSE_FLAGS;
enum _WDF_REQUEST_SEND_OPTIONS_FLAGS;
enum _WDF_REQUEST_STOP_ACTION_FLAGS;
enum _WDF_REQUEST_TYPE;
enum _WDF_RETRIEVE_CHILD_FLAGS;
enum _WDF_SPECIAL_FILE_TYPE;
enum _WDF_STATE_NOTIFICATION_TYPE;
enum _WDF_SYNCHRONIZATION_SCOPE;
enum _WDF_TASK_SEND_OPTIONS_FLAGS;
enum _WDF_TRI_STATE;
enum _WDF_WMI_PROVIDER_CONTROL;
enum _WDF_WMI_PROVIDER_FLAGS;
enum _WHEA_CPU_VENDOR;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _WHEA_ERROR_SEVERITY;
enum _WHEA_ERROR_SOURCE_STATE;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _WHEA_PCIEXPRESS_DEVICE_TYPE;
enum _WHEA_RAW_DATA_FORMAT;
enum _WIN32K_INPUT_MODE;
enum _WIN32_CALLOUTS_OPERATION;
enum _WIN32_POWERINFO_TYPE;
enum _WNF_DATA_SCOPE;
enum _WNF_STATE_NAME_INFORMATION;
enum _WNF_STATE_NAME_LIFETIME;
enum _WORKERFACTORYINFOCLASS;
enum _WORKER_FACTORY_CALLBACK_CLASS;
enum _WORK_QUEUE_TYPE;
enum _WPP_FLAG_LEN_ENUM;
enum _WPP_FLAG_LEN_ENUM_MAX;
enum _WPP_TRACE_API_SUITE;
enum _WSA_COMPATIBILITY_BEHAVIOR_ID;
enum __vc_attributes::aggregatableAttribute::type_e;
enum __vc_attributes::event_receiverAttribute::type_e;
enum __vc_attributes::event_sourceAttribute::optimize_e;
enum __vc_attributes::event_sourceAttribute::type_e;
enum __vc_attributes::helper_attributes::usageAttribute::usage_e;
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;
enum __vc_attributes::moduleAttribute::type_e;
enum __vc_attributes::pointer_defaultAttribute::type_e;
enum __vc_attributes::threadingAttribute::threading_e;
enum optimize_e;
enum threading_e;
enum type_e;
enum usage_e;

typedef struct ACPI_INTERFACE_STANDARD2 {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GpeConnectVector;
    PLONG GpeDisconnectVector;
    PLONG GpeEnableEvent;
    PLONG GpeDisableEvent;
    PLONG GpeClearStatus;
    PLONG RegisterForDeviceNotifications;
    PVOID UnregisterForDeviceNotifications;
};

typedef struct ACPI_REGS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PUSHORT ReadAcpiRegister;
    PVOID WriteAcpiRegister;
};

typedef struct ANON_OBJECT_HEADER {
    USHORT Sig1;
    USHORT Sig2;
    USHORT Version;
    USHORT Machine;
    ULONG TimeDateStamp;
    struct _GUID ClassID;
    ULONG SizeOfData;
};

typedef struct ANON_OBJECT_HEADER_BIGOBJ {
    USHORT Sig1;
    USHORT Sig2;
    USHORT Version;
    USHORT Machine;
    ULONG TimeDateStamp;
    struct _GUID ClassID;
    ULONG SizeOfData;
    ULONG Flags;
    ULONG MetaDataSize;
    ULONG MetaDataOffset;
    ULONG NumberOfSections;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
};

typedef struct ANON_OBJECT_HEADER_V2 {
    USHORT Sig1;
    USHORT Sig2;
    USHORT Version;
    USHORT Machine;
    ULONG TimeDateStamp;
    struct _GUID ClassID;
    ULONG SizeOfData;
    ULONG Flags;
    ULONG MetaDataSize;
    ULONG MetaDataOffset;
};

typedef struct Actions {
    VOID DeviceReleasingWaitForNdisHaltActionOnRefreshAdapterList;
    VOID InitializedActionOnRefreshAdapterList;
    VOID InitializedWaitForStartActionOnRefreshAdapterList;
    VOID RebalancingPrepareForStartActionOnRefreshAdapterList;
    VOID ReleasingSurpriseRemovedWaitForNdisHaltActionOnRefreshAdapterList;
    VOID ReleasingWaitClientReleaseActionOnRefreshAdapterList;
    VOID StartedD0ActionOnRefreshAdapterList;
    VOID StartedDxActionOnRefreshAdapterList;
    VOID StartingD0ActionOnRefreshAdapterList;
};

typedef struct AdapterExtensionInit {
    ULONG InitSignature;
    struct NX_PRIVATE_GLOBALS *PrivateGlobals;
    PVOID NetRequestPreprocessCallback;
    VOID AdapterExtensionInit;
};

typedef struct AdapterInit {
    struct PAGED_OBJECT<1850294606> PAGED_OBJECT<1850294606>;
    ULONG InitSignature;
    struct NETADAPTER__ *CreatedAdapter;
    struct _NET_ADAPTER_DATAPATH_CALLBACKS DatapathCallbacks;
    struct _WDF_OBJECT_ATTRIBUTES NetRequestAttributes;
    struct WDFDEVICE__ *Device;
    struct _WDF_OBJECT_ATTRIBUTES NetPowerSettingsAttributes;
    Rtl::KArray<AdapterExtensionInit,1> AdapterExtensions;
    BOOLEAN Default;
    VOID AdapterInit;
    VOID AdapterInit;
    VOID ~AdapterInit;
    struct AdapterInit *operator=;
    PVOID __vecDelDtor;
};

typedef struct AffinitizedQueue {
    NxRxXlat *Queue;
    ULONG64 QueueId;
    struct _GROUP_AFFINITY Affinity;
    VOID AffinitizedQueue;
};

typedef struct ArmedNotifications {
    struct {
        BOOLEAN ShouldArmRxIndication : 1;
        BOOLEAN ShouldArmNblReturned : 1;
        UCHAR Reserved : 6;
    } Flags;
    UCHAR Value;
    VOID ArmedNotifications;
};

typedef struct BATTERY_REPORTING_SCALE {
    ULONG Granularity;
    ULONG Capacity;
};

typedef struct BINARY_DATA {
    USHORT Length;
    PVOID Buffer;
};

typedef struct BREAK_ON_STATUS_BUFFER {
    LONG NtStatus;
    ULONG Win32Error;
    ULONG ThreadId;
    ULONG ProcessId;
    CHAR ImageFileName[16];
};

typedef struct BULK_SECURITY_TEST_DATA {
    ULONG DesiredAccess;
    ULONG SecurityIds[1];
};

typedef struct CM_Power_Data_s {
    ULONG PD_Size;
    enum _DEVICE_POWER_STATE PD_MostRecentPowerState;
    ULONG PD_Capabilities;
    ULONG PD_D1Latency;
    ULONG PD_D2Latency;
    ULONG PD_D3Latency;
    enum _DEVICE_POWER_STATE PD_PowerStateMapping[7];
    enum _SYSTEM_POWER_STATE PD_DeepestSystemWake;
};

typedef struct CORRELATION_VECTOR {
    CHAR Version;
    CHAR Vector[129];
};

typedef struct CO_ADDRESS_FAMILY {
    ULONG AddressFamily;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct CO_SAP {
    ULONG SapType;
    ULONG SapLength;
    UCHAR Sap[1];
};

typedef struct CREATE_USN_JOURNAL_DATA {
    ULONG64 MaximumSize;
    ULONG64 AllocationDelta;
};

typedef struct DEBUG_DEVICE_ADDRESS {
    UCHAR Type;
    UCHAR Valid;
    UCHAR Reserved[2];
    UCHAR BitWidth;
    UCHAR AccessSize;
    PUCHAR TranslatedAddress;
    ULONG Length;
};

typedef struct DEBUG_MEMORY_REQUIREMENTS {
    union _LARGE_INTEGER Start;
    union _LARGE_INTEGER MaxEnd;
    PVOID VirtualAddress;
    ULONG Length;
    UCHAR Cached;
    UCHAR Aligned;
};

typedef struct DELETE_USN_JOURNAL_DATA {
    ULONG64 UsnJournalID;
    ULONG DeleteFlags;
};

typedef struct DL_TEREDO_ADDRESS {
    UCHAR Reserved[6];
    union _DL_EUI64 Eui64;
    USHORT Flags;
    USHORT MappedPort;
    struct in_addr MappedAddress;
};

typedef struct DL_TEREDO_ADDRESS_PRV {
    UCHAR Reserved[6];
    union _DL_EUI64 Eui64;
    USHORT Flags;
    USHORT MappedPort;
    struct in_addr MappedAddress;
    struct in_addr LocalAddress;
    ULONG InterfaceIndex;
    USHORT LocalPort;
    union _DL_EUI48 DlDestination;
};

typedef struct DL_TUNNEL_ADDRESS {
    enum COMPARTMENT_ID CompartmentId;
    struct SCOPE_ID ScopeId;
    UCHAR IpAddress[0];
};

typedef struct DMA {
    PVOID DmaAdapter;
    PVOID PhysicalDeviceObject;
    union _LARGE_INTEGER MaximumPhysicalAddress;
    enum NET_CLIENT_TRI_STATE CacheEnabled;
    ULONG PreferredNode;
};

typedef struct DOT11_ACCESSNETWORKOPTIONS {
    UCHAR AccessNetworkType;
    UCHAR Internet;
    UCHAR ASRA;
    UCHAR ESR;
    UCHAR UESA;
};

typedef struct DOT11_ASSOCIATION_COMPLETION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MacAddr[6];
    ULONG uStatus;
    UCHAR bReAssocReq;
    UCHAR bReAssocResp;
    ULONG uAssocReqOffset;
    ULONG uAssocReqSize;
    ULONG uAssocRespOffset;
    ULONG uAssocRespSize;
    ULONG uBeaconOffset;
    ULONG uBeaconSize;
    ULONG uIHVDataOffset;
    ULONG uIHVDataSize;
    enum _DOT11_AUTH_ALGORITHM AuthAlgo;
    enum _DOT11_CIPHER_ALGORITHM UnicastCipher;
    enum _DOT11_CIPHER_ALGORITHM MulticastCipher;
    ULONG uActivePhyListOffset;
    ULONG uActivePhyListSize;
    UCHAR bFourAddressSupported;
    UCHAR bPortAuthorized;
    UCHAR ucActiveQoSProtocol;
    enum DOT11_DS_INFO DSInfo;
    ULONG uEncapTableOffset;
    ULONG uEncapTableSize;
    enum _DOT11_CIPHER_ALGORITHM MulticastMgmtCipher;
    ULONG uAssocComebackTime;
};

typedef struct DOT11_ASSOCIATION_INFO_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_ASSOCIATION_INFO_EX dot11AssocInfo[1];
};

typedef struct DOT11_ASSOCIATION_PARAMS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR BSSID[6];
    ULONG uAssocRequestIEsOffset;
    ULONG uAssocRequestIEsLength;
};

typedef struct DOT11_ASSOCIATION_START_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MacAddr[6];
    struct _DOT11_SSID SSID;
    ULONG uIHVDataOffset;
    ULONG uIHVDataSize;
};

typedef struct DOT11_AUTH_ALGORITHM_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    enum _DOT11_AUTH_ALGORITHM AlgorithmIds[1];
};

typedef struct DOT11_AUTH_CIPHER_PAIR {
    enum _DOT11_AUTH_ALGORITHM AuthAlgoId;
    enum _DOT11_CIPHER_ALGORITHM CipherAlgoId;
};

typedef struct DOT11_AUTH_CIPHER_PAIR_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct DOT11_AUTH_CIPHER_PAIR AuthCipherPairs[1];
};

typedef struct DOT11_BSSID_CANDIDATE {
    UCHAR BSSID[6];
    ULONG uFlags;
};

typedef struct DOT11_BSSID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    UCHAR BSSIDs[1][6];
};

typedef struct DOT11_BSS_ENTRY {
    ULONG uPhyId;
    union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
    UCHAR dot11BSSID[6];
    enum _DOT11_BSS_TYPE dot11BSSType;
    LONG lRSSI;
    ULONG uLinkQuality;
    UCHAR bInRegDomain;
    USHORT usBeaconPeriod;
    ULONG64 ullTimestamp;
    ULONG64 ullHostTimestamp;
    USHORT usCapabilityInformation;
    ULONG uBufferLength;
    UCHAR ucBuffer[1];
};

typedef struct DOT11_BYTE_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfBytes;
    ULONG uTotalNumOfBytes;
    UCHAR ucBuffer[1];
};

typedef struct DOT11_CHANNEL_HINT {
    enum _DOT11_PHY_TYPE Dot11PhyType;
    ULONG uChannelNumber;
};

typedef struct DOT11_CIPHER_ALGORITHM_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    enum _DOT11_CIPHER_ALGORITHM AlgorithmIds[1];
};

typedef struct DOT11_CIPHER_DEFAULT_KEY_VALUE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uKeyIndex;
    enum _DOT11_CIPHER_ALGORITHM AlgorithmId;
    UCHAR MacAddr[6];
    UCHAR bDelete;
    UCHAR bStatic;
    USHORT usKeyLength;
    UCHAR ucKey[1];
};

typedef struct DOT11_CIPHER_KEY_MAPPING_KEY_VALUE {
    UCHAR PeerMacAddr[6];
    enum _DOT11_CIPHER_ALGORITHM AlgorithmId;
    enum DOT11_DIRECTION Direction;
    UCHAR bDelete;
    UCHAR bStatic;
    USHORT usKeyLength;
    UCHAR ucKey[1];
};

typedef struct DOT11_CONNECTION_COMPLETION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uStatus;
};

typedef struct DOT11_CONNECTION_START_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_BSS_TYPE BSSType;
    UCHAR AdhocBSSID[6];
    struct _DOT11_SSID AdhocSSID;
};

typedef struct DOT11_COUNTRY_OR_REGION_STRING_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    UCHAR CountryOrRegionStrings[1][3];
};

typedef struct DOT11_DATA_RATE_MAPPING_ENTRY {
    UCHAR ucDataRateIndex;
    UCHAR ucDataRateFlag;
    USHORT usDataRateValue;
};

typedef struct DOT11_DISASSOCIATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MacAddr[6];
    ULONG uReason;
    ULONG uIHVDataOffset;
    ULONG uIHVDataSize;
};

typedef struct DOT11_ENCAP_ENTRY {
    USHORT usEtherType;
    USHORT usEncapType;
};

typedef struct DOT11_ERP_PHY_ATTRIBUTES {
    struct DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
    UCHAR bERPPBCCOptionImplemented;
    UCHAR bDSSSOFDMOptionImplemented;
    UCHAR bShortSlotTimeOptionImplemented;
};

typedef struct DOT11_EXTSTA_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uScanSSIDListSize;
    ULONG uDesiredBSSIDListSize;
    ULONG uDesiredSSIDListSize;
    ULONG uExcludedMacAddressListSize;
    ULONG uPrivacyExemptionListSize;
    ULONG uKeyMappingTableSize;
    ULONG uDefaultKeyTableSize;
    ULONG uWEPKeyValueMaxLength;
    ULONG uPMKIDCacheSize;
    ULONG uMaxNumPerSTADefaultKeyTables;
    UCHAR bStrictlyOrderedServiceClassImplemented;
    UCHAR ucSupportedQoSProtocolFlags;
    UCHAR bSafeModeImplemented;
    ULONG uNumSupportedCountryOrRegionStrings;
    PUCHAR pSupportedCountryOrRegionStrings[3];
    ULONG uInfraNumSupportedUcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedUcastAlgoPairs;
    ULONG uInfraNumSupportedMcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedMcastAlgoPairs;
    ULONG uAdhocNumSupportedUcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pAdhocSupportedUcastAlgoPairs;
    ULONG uAdhocNumSupportedMcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pAdhocSupportedMcastAlgoPairs;
    UCHAR bAutoPowerSaveMode;
    ULONG uMaxNetworkOffloadListSize;
    UCHAR bMFPCapable;
    ULONG uInfraNumSupportedMcastMgmtAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedMcastMgmtAlgoPairs;
    UCHAR bNeighborReportSupported;
    UCHAR bAPChannelReportSupported;
    UCHAR bActionFramesSupported;
    UCHAR bANQPQueryOffloadSupported;
    UCHAR bHESSIDConnectionSupported;
};

typedef struct DOT11_EXTSTA_CAPABILITY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uScanSSIDListSize;
    ULONG uDesiredBSSIDListSize;
    ULONG uDesiredSSIDListSize;
    ULONG uExcludedMacAddressListSize;
    ULONG uPrivacyExemptionListSize;
    ULONG uKeyMappingTableSize;
    ULONG uDefaultKeyTableSize;
    ULONG uWEPKeyValueMaxLength;
    ULONG uPMKIDCacheSize;
    ULONG uMaxNumPerSTADefaultKeyTables;
};

typedef struct DOT11_EXTSTA_RECV_CONTEXT {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uReceiveFlags;
    ULONG uPhyId;
    ULONG uChCenterFrequency;
    USHORT usNumberOfMPDUsReceived;
    LONG lRSSI;
    UCHAR ucDataRate;
    ULONG uSizeMediaSpecificInfo;
    PVOID pvMediaSpecificInfo;
    ULONG64 ullTimestamp;
};

typedef struct DOT11_EXTSTA_SEND_CONTEXT {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT usExemptionActionType;
    ULONG uPhyId;
    ULONG uDelayedSleepValue;
    PVOID pvMediaSpecificInfo;
    ULONG uSendFlags;
};

typedef struct DOT11_HRDSSS_PHY_ATTRIBUTES {
    UCHAR bShortPreambleOptionImplemented;
    UCHAR bPBCCOptionImplemented;
    UCHAR bChannelAgilityPresent;
    ULONG uHRCCAModeSupported;
};

typedef struct DOT11_IBSS_PARAMS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR bJoinOnly;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct DOT11_KEY_ALGO_BIP {
    UCHAR ucIPN[6];
    ULONG ulBIPKeyLength;
    UCHAR ucBIPKey[1];
};

typedef struct DOT11_KEY_ALGO_CCMP {
    UCHAR ucIV48Counter[6];
    ULONG ulCCMPKeyLength;
    UCHAR ucCCMPKey[1];
};

typedef struct DOT11_KEY_ALGO_GCMP {
    UCHAR ucIV48Counter[6];
    ULONG ulGCMPKeyLength;
    UCHAR ucGCMPKey[1];
};

typedef struct DOT11_KEY_ALGO_TKIP_MIC {
    UCHAR ucIV48Counter[6];
    ULONG ulTKIPKeyLength;
    ULONG ulMICKeyLength;
    UCHAR ucTKIPMICKeys[1];
};

typedef struct DOT11_LINK_QUALITY_ENTRY {
    UCHAR PeerMacAddr[6];
    UCHAR ucLinkQuality;
};

typedef struct DOT11_LINK_QUALITY_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uLinkQualityListSize;
    ULONG uLinkQualityListOffset;
};

typedef struct DOT11_MAC_ADDRESS_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    UCHAR MacAddrs[1][6];
};

typedef struct DOT11_MAC_FRAME_STATISTICS {
    ULONG64 ullTransmittedFrameCount;
    ULONG64 ullReceivedFrameCount;
    ULONG64 ullTransmittedFailureFrameCount;
    ULONG64 ullReceivedFailureFrameCount;
    ULONG64 ullWEPExcludedCount;
    ULONG64 ullTKIPLocalMICFailures;
    ULONG64 ullTKIPReplays;
    ULONG64 ullTKIPICVErrorCount;
    ULONG64 ullCCMPReplays;
    ULONG64 ullCCMPDecryptErrors;
    ULONG64 ullWEPUndecryptableCount;
    ULONG64 ullWEPICVErrorCount;
    ULONG64 ullDecryptSuccessCount;
    ULONG64 ullDecryptFailureCount;
};

typedef struct DOT11_MAC_INFO {
    ULONG uReserved;
    ULONG uNdisPortNumber;
    UCHAR MacAddr[6];
};

typedef struct DOT11_MANUFACTURING_CALLBACK_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_MANUFACTURING_CALLBACK_TYPE dot11ManufacturingCallbackType;
    ULONG uStatus;
    PVOID pvContext;
};

typedef struct DOT11_MPDU_MAX_LENGTH_INDICATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uPhyId;
    ULONG uMPDUMaxLength;
};

typedef struct DOT11_OFDM_PHY_ATTRIBUTES {
    ULONG uFrequencyBandsSupported;
};

typedef struct DOT11_OFFLOAD_NETWORK {
    struct _DOT11_SSID Ssid;
    enum _DOT11_CIPHER_ALGORITHM UnicastCipher;
    enum _DOT11_AUTH_ALGORITHM AuthAlgo;
    struct DOT11_CHANNEL_HINT Dot11ChannelHints[4];
};

typedef struct DOT11_PHY_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_PHY_TYPE PhyType;
    UCHAR bHardwarePhyState;
    UCHAR bSoftwarePhyState;
    UCHAR bCFPollable;
    ULONG uMPDUMaxLength;
    enum _DOT11_TEMP_TYPE TempType;
    enum _DOT11_DIVERSITY_SUPPORT DiversitySupport;
     <unnamed-type-PhySpecificAttributes>;
    union {
        struct DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
        struct DOT11_OFDM_PHY_ATTRIBUTES OFDMAttributes;
        struct DOT11_ERP_PHY_ATTRIBUTES ERPAttributes;
    } PhySpecificAttributes;
    ULONG uNumberSupportedPowerLevels;
    ULONG TxPowerLevels[8];
    ULONG uNumDataRateMappingEntries;
    struct DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[126];
    struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 SupportedDataRatesValue;
};

typedef struct DOT11_PHY_FRAME_STATISTICS {
    ULONG64 ullTransmittedFrameCount;
    ULONG64 ullMulticastTransmittedFrameCount;
    ULONG64 ullFailedCount;
    ULONG64 ullRetryCount;
    ULONG64 ullMultipleRetryCount;
    ULONG64 ullMaxTXLifetimeExceededCount;
    ULONG64 ullTransmittedFragmentCount;
    ULONG64 ullRTSSuccessCount;
    ULONG64 ullRTSFailureCount;
    ULONG64 ullACKFailureCount;
    ULONG64 ullReceivedFrameCount;
    ULONG64 ullMulticastReceivedFrameCount;
    ULONG64 ullPromiscuousReceivedFrameCount;
    ULONG64 ullMaxRXLifetimeExceededCount;
    ULONG64 ullFrameDuplicateCount;
    ULONG64 ullReceivedFragmentCount;
    ULONG64 ullPromiscuousReceivedFragmentCount;
    ULONG64 ullFCSErrorCount;
};

typedef struct DOT11_PHY_ID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG dot11PhyId[1];
};

typedef struct DOT11_PHY_STATE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uPhyId;
    UCHAR bHardwarePhyState;
    UCHAR bSoftwarePhyState;
};

typedef struct DOT11_PHY_TYPE_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    enum _DOT11_PHY_TYPE dot11PhyType[1];
};

typedef struct DOT11_PMKID_CANDIDATE_LIST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uCandidateListSize;
    ULONG uCandidateListOffset;
};

typedef struct DOT11_PMKID_ENTRY {
    UCHAR BSSID[6];
    UCHAR PMKID[16];
    ULONG uFlags;
};

typedef struct DOT11_PMKID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct DOT11_PMKID_ENTRY PMKIDs[1];
};

typedef struct DOT11_PORT_STATE_NOTIFICATION {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMac[6];
    UCHAR bOpen;
};

typedef struct DOT11_PRIVACY_EXEMPTION {
    USHORT usEtherType;
    USHORT usExemptionActionType;
    USHORT usExemptionPacketType;
};

typedef struct DOT11_PRIVACY_EXEMPTION_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct DOT11_PRIVACY_EXEMPTION PrivacyExemptionEntries[1];
};

typedef struct DOT11_QOS_PARAMS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ucEnabledQoSProtocolFlags;
};

typedef struct DOT11_ROAMING_COMPLETION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uStatus;
};

typedef struct DOT11_ROAMING_START_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR AdhocBSSID[6];
    struct _DOT11_SSID AdhocSSID;
    ULONG uRoamingReason;
};

typedef struct DOT11_SSID_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_SSID SSIDs[1];
};

typedef struct DOT11_STATISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 ullFourWayHandshakeFailures;
    ULONG64 ullTKIPCounterMeasuresInvoked;
    ULONG64 ullReserved;
    struct DOT11_MAC_FRAME_STATISTICS MacUcastCounters;
    struct DOT11_MAC_FRAME_STATISTICS MacMcastCounters;
    struct DOT11_PHY_FRAME_STATISTICS PhyCounters[1];
};

typedef struct DOT11_TKIPMIC_FAILURE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR bDefaultKeyFailure;
    ULONG uKeyIndex;
    UCHAR PeerMac[6];
};

typedef struct DOT11_VENUEINFO {
    UCHAR VenueGroup;
    UCHAR VenueType;
};

typedef struct DOT11_VWIFI_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uTotalNumOfEntries;
    struct _DOT11_VWIFI_COMBINATION Combinations[1];
};

typedef struct DRIVER_CONFIGURATION_KNOB {
    enum DRIVER_CONFIG_ENUM ConfigurationEnum;
    PWCHAR ConfigurationName;
    ULONG ConfigurationMinValue;
    ULONG ConfigurationMaxValue;
    ULONG ConfigurationDefaultValue;
    ULONG ConfigurationCurrentValue;
    ULONG Flags;
};

typedef struct DeferredEvents {
    USHORT c_rebalancingPrepareForStart[0];
    USHORT c_startedDx[0];
};

typedef struct DispatchContext {
    ULONG64 CurrentExtensionIndex;
    VOID DispatchContext;
};

typedef struct DmaContext {
    PVOID ScatterGatherBuffer;
    PVOID DmaTransferContext;
    struct _SCATTER_GATHER_LIST *ScatterGatherList;
    struct _MDL *MdlChain;
    BOOLEAN UnmapMdlChain;
    VOID DmaContext;
};

typedef struct EVENT_ACTION {
    enum SmFx::StateMachineEngine::StateMachineEngineImpl::EventAction action;
    USHORT eventIndex;
    UCHAR stackDepth;
    struct {
        struct SmFx::EXTERNAL_TRANSITION *transition;
    } external;
    struct {
        struct SmFx::INTERNAL_TRANSITION *transition;
    } internal;
    struct {
        struct SmFx::POP_TRANSITION *transition;
    } pop;
    struct {
        struct SmFx::SUBMACHINE_SPECIFICATION *submachine;
    } call;
};

typedef struct EVENT_INSTANCE_INFO {
    PVOID RegHandle;
    ULONG InstanceId;
};

typedef struct EXCEPTION_HISTORY_ENTRY {
    enum SmFx::MachineException exception;
    USHORT relevantEvent;
    USHORT relevantState;
};

typedef struct EX_BOOT_DEVICE_HANDLE__ {
    LONG unused;
};

typedef struct EntryFuncs {
    USHORT AdapterDatapathStoppingEntry;
    USHORT DatapathHaltDestroyingEntry;
    USHORT DatapathPausedEntry;
    USHORT DatapathPausedCreatingEntry;
    USHORT DatapathPausedDestroyingEntry;
    USHORT DatapathPausedStartingEntry;
    USHORT DatapathPauseStoppingEntry;
    USHORT DatapathRemovePausedEntry;
    USHORT DatapathRestartDestroyingEntry;
    USHORT DatapathRestartedCreatingEntry;
    USHORT DatapathRestartedStartingEntry;
    USHORT DatapathRestartRemovingEntry;
    USHORT DatapathRestartStoppingEntry;
    USHORT DatapathRunningEntry;
    USHORT DatapathStoppedPausedEntry;
    USHORT DatapathStoppingPauseCompleteEntry;
    USHORT HaltedEntry;
    USHORT HaltingEntry;
    USHORT InitializedEntry;
    USHORT PausedEntry;
    USHORT PauseSurpriseRemovingEntry;
    USHORT RestartedEntry;
    USHORT SurpriseRemovePausedEntry;
};

typedef struct ExternalTransitions {
    struct SmFx::EXTERNAL_TRANSITION c_datapathHaltDestroying[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPaused[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPausedCreating[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPausedDestroying[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPausedStarting[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPauseStopping[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRemovePaused[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartDestroying[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartedCreating[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartedStarting[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartRemoving[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartRemoving2[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartStopping[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRunning[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathStoppedPaused[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathStoppingPauseComplete[0];
    struct SmFx::EXTERNAL_TRANSITION c_halted[0];
    struct SmFx::EXTERNAL_TRANSITION c_halting[0];
    struct SmFx::EXTERNAL_TRANSITION c_initialized[0];
    struct SmFx::EXTERNAL_TRANSITION c_paused[0];
    struct SmFx::EXTERNAL_TRANSITION c_pauseSurpriseRemoving[0];
    struct SmFx::EXTERNAL_TRANSITION c_restarted[0];
    struct SmFx::EXTERNAL_TRANSITION c_surpriseRemovePaused[0];
};

typedef struct FILTERDBS {
    struct _X_FILTER *EthDB;
    struct _X_FILTER *NullDB;
    struct _X_FILTER *TrDB;
    PVOID YYYDB;
    PVOID XXXDB;
};

typedef struct FIND_BY_SID_DATA {
    ULONG Restart;
    struct _SID Sid;
};

typedef struct FIND_BY_SID_OUTPUT {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct HAL_DISPATCH {
    ULONG Version;
    PLONG HalQuerySystemInformation;
    PLONG HalSetSystemInformation;
    PLONG HalQueryBusSlots;
    ULONG Spare1;
    PVOID HalExamineMBR;
    PLONG HalIoReadPartitionTable;
    PLONG HalIoSetPartitionInformation;
    PLONG HalIoWritePartitionTable;
    struct _BUS_HANDLER **HalReferenceHandlerForBus;
    PVOID HalReferenceBusHandler;
    PVOID HalDereferenceBusHandler;
    PLONG HalInitPnpDriver;
    PLONG HalInitPowerManagement;
    struct _DMA_ADAPTER **HalGetDmaAdapter;
    PLONG HalGetInterruptTranslator;
    PLONG HalStartMirroring;
    PLONG HalEndMirroring;
    PLONG HalMirrorPhysicalMemory;
    PVOID HalEndOfBoot;
    PLONG HalMirrorVerify;
    PVOID *HalGetCachedAcpiTable;
    PVOID HalSetPciErrorHandlerCallback;
};

typedef struct HAL_PRIVATE_DISPATCH {
    ULONG Version;
    struct _BUS_HANDLER **HalHandlerForBus;
    struct _BUS_HANDLER **HalHandlerForConfigSpace;
    PVOID HalLocateHiberRanges;
    PLONG HalRegisterBusHandler;
    PVOID HalSetWakeEnable;
    PLONG HalSetWakeAlarm;
    PUCHAR HalPciTranslateBusAddress;
    PLONG HalPciAssignSlotResources;
    PVOID HalHaltSystem;
    PUCHAR HalFindBusAddressTranslation;
    PUCHAR HalResetDisplay;
    PLONG HalAllocateMapRegisters;
    PLONG KdSetupPciDeviceForDebugging;
    PLONG KdReleasePciDeviceForDebugging;
    PVOID *KdGetAcpiTablePhase0;
    PVOID KdCheckPowerButton;
    PUCHAR HalVectorToIDTEntry;
    PVOID *KdMapPhysicalMemory64;
    PVOID KdUnmapVirtualAddress;
    PULONG KdGetPciDataByOffset;
    PULONG KdSetPciDataByOffset;
    PULONG HalGetInterruptVectorOverride;
    PLONG HalGetVectorInputOverride;
    PLONG HalLoadMicrocode;
    PLONG HalUnloadMicrocode;
    PLONG HalPostMicrocodeUpdate;
    PLONG HalAllocateMessageTargetOverride;
    PVOID HalFreeMessageTargetOverride;
    PLONG HalDpReplaceBegin;
    PVOID HalDpReplaceTarget;
    PLONG HalDpReplaceControl;
    PVOID HalDpReplaceEnd;
    PVOID HalPrepareForBugcheck;
    PUCHAR HalQueryWakeTime;
    PVOID HalReportIdleStateUsage;
    PVOID HalTscSynchronization;
    PLONG HalWheaInitProcessorGenericSection;
    PVOID HalStopLegacyUsbInterrupts;
    PLONG HalReadWheaPhysicalMemory;
    PLONG HalWriteWheaPhysicalMemory;
    PLONG HalDpMaskLevelTriggeredInterrupts;
    PLONG HalDpUnmaskLevelTriggeredInterrupts;
    PLONG HalDpGetInterruptReplayState;
    PLONG HalDpReplayInterrupts;
    PUCHAR HalQueryIoPortAccessSupported;
    PLONG KdSetupIntegratedDeviceForDebugging;
    PLONG KdReleaseIntegratedDeviceForDebugging;
    PVOID HalGetEnlightenmentInformation;
    PVOID *HalAllocateEarlyPages;
    PVOID *HalMapEarlyPages;
    PVOID Dummy1;
    PVOID Dummy2;
    PVOID HalNotifyProcessorFreeze;
    PLONG HalPrepareProcessorForIdle;
    PVOID HalRegisterLogRoutine;
    PVOID HalResumeProcessorFromIdle;
    PVOID Dummy;
    PULONG HalVectorToIDTEntryEx;
    PLONG HalSecondaryInterruptQueryPrimaryInformation;
    PLONG HalMaskInterrupt;
    PLONG HalUnmaskInterrupt;
    PUCHAR HalIsInterruptTypeSecondary;
    PLONG HalAllocateGsivForSecondaryInterrupt;
    PLONG HalAddInterruptRemapping;
    PVOID HalRemoveInterruptRemapping;
    PVOID HalSaveAndDisableHvEnlightenment;
    PVOID HalRestoreHvEnlightenment;
    PVOID HalFlushIoBuffersExternalCache;
    PVOID HalFlushExternalCache;
    PLONG HalPciEarlyRestore;
    PLONG HalGetProcessorId;
    PLONG HalAllocatePmcCounterSet;
    PVOID HalCollectPmcCounters;
    PVOID HalFreePmcCounterSet;
    PLONG HalProcessorHalt;
    PULONG64 HalTimerQueryCycleCounter;
    PVOID Dummy3;
    PVOID HalPciMarkHiberPhase;
    PLONG HalQueryProcessorRestartEntryPoint;
    PLONG HalRequestInterrupt;
    PLONG HalEnumerateUnmaskedInterrupts;
    PVOID HalFlushAndInvalidatePageExternalCache;
    PLONG KdEnumerateDebuggingDevices;
    PVOID HalFlushIoRectangleExternalCache;
    PVOID HalPowerEarlyRestore;
    PLONG HalQueryCapsuleCapabilities;
    PLONG HalUpdateCapsule;
    PUCHAR HalPciMultiStageResumeCapable;
    PVOID HalDmaFreeCrashDumpRegisters;
    PUCHAR HalAcpiAoacCapable;
    PLONG HalInterruptSetDestination;
    PVOID HalGetClockConfiguration;
    PVOID HalClockTimerActivate;
    PVOID HalClockTimerInitialize;
    PVOID HalClockTimerStop;
    PLONG HalClockTimerArm;
    PUCHAR HalTimerOnlyClockInterruptPending;
    PVOID *HalAcpiGetMultiNode;
    PVOID *HalPowerSetRebootHandler;
    PVOID HalIommuRegisterDispatchTable;
    PVOID HalTimerWatchdogStart;
    PVOID HalTimerWatchdogResetCountdown;
    PVOID HalTimerWatchdogStop;
    PUCHAR HalTimerWatchdogGeneratedLastReset;
    PLONG HalTimerWatchdogTriggerSystemReset;
    PLONG HalInterruptVectorDataToGsiv;
    PLONG HalInterruptGetHighestPriorityInterrupt;
    PLONG HalProcessorOn;
    PLONG HalProcessorOff;
    PLONG HalProcessorFreeze;
    PLONG HalDmaLinkDeviceObjectByToken;
    PLONG HalDmaCheckAdapterToken;
    PVOID Dummy4;
    PLONG HalTimerConvertPerformanceCounterToAuxiliaryCounter;
    PLONG HalTimerConvertAuxiliaryCounterToPerformanceCounter;
    PLONG HalTimerQueryAuxiliaryCounterFrequency;
    PLONG HalConnectThermalInterrupt;
    PUCHAR HalIsEFIRuntimeActive;
    PUCHAR HalTimerQueryAndResetRtcErrors;
    PVOID HalAcpiLateRestore;
    PLONG KdWatchdogDelayExpiration;
    PLONG HalGetProcessorStats;
    PULONG64 HalTimerWatchdogQueryDueTime;
    PLONG HalConnectSyntheticInterrupt;
    PVOID HalPreprocessNmi;
    PLONG HalEnumerateEnvironmentVariablesWithFilter;
    PLONG HalCaptureLastBranchRecordStack;
    PUCHAR HalClearLastBranchRecordStack;
    PLONG HalConfigureLastBranchRecord;
    PUCHAR HalGetLastBranchInformation;
    PVOID HalResumeLastBranchRecord;
    PLONG HalStartLastBranchRecord;
    PLONG HalStopLastBranchRecord;
    PLONG HalIommuBlockDevice;
    PLONG HalIommuUnblockDevice;
    PLONG HalGetIommuInterface;
    PLONG HalRequestGenericErrorRecovery;
    PLONG HalTimerQueryHostPerformanceCounter;
    PLONG HalTopologyQueryProcessorRelationships;
    PVOID HalInitPlatformDebugTriggers;
    PVOID HalRunPlatformDebugTriggers;
    PVOID *HalTimerGetReferencePage;
};

typedef struct HNETPACKETEXTENSIONCOLLECTION__ {
    LONG unused;
};

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    UCHAR bAuxType;
    UCHAR bReserved;
    ULONG SymbolTableIndex;
    UCHAR rgbReserved[12];
};

typedef struct IMAGE_COR20_HEADER {
    ULONG cb;
    USHORT MajorRuntimeVersion;
    USHORT MinorRuntimeVersion;
    struct _IMAGE_DATA_DIRECTORY MetaData;
    ULONG Flags;
    ULONG EntryPointToken;
    ULONG EntryPointRVA;
    struct _IMAGE_DATA_DIRECTORY Resources;
    struct _IMAGE_DATA_DIRECTORY StrongNameSignature;
    struct _IMAGE_DATA_DIRECTORY CodeManagerTable;
    struct _IMAGE_DATA_DIRECTORY VTableFixups;
    struct _IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    struct _IMAGE_DATA_DIRECTORY ManagedNativeHeader;
};

typedef struct IMPORT_OBJECT_HEADER {
    USHORT Sig1;
    USHORT Sig2;
    USHORT Version;
    USHORT Machine;
    ULONG TimeDateStamp;
    ULONG SizeOfData;
    USHORT Ordinal;
    USHORT Hint;
    USHORT Type : 2;
    USHORT NameType : 3;
    USHORT Reserved : 11;
};

typedef struct INET_PORT_RESERVATION_INFORMATION {
    ULONG OwningPid;
};

typedef struct INET_PORT_RESERVATION_INSTANCE {
    struct _INET_PORT_RANGE Reservation;
    struct INET_PORT_RESERVATION_TOKEN Token;
};

typedef struct INET_PORT_RESERVATION_TOKEN {
    ULONG64 Token;
};

typedef struct INxApp {
    struct KALLOCATOR_NONPAGED<1883338830,512> KALLOCATOR_NONPAGED<1883338830,512>;
Error: Could not get member name.
    VOID ~INxApp;
    VOID INxApp;
    VOID INxApp;
    struct INxApp *operator=;
    VOID __local_vftable_ctor_closure;
    PVOID __vecDelDtor;
};

typedef struct INxAppFactory {
Error: Could not get member name.
    VOID ~INxAppFactory;
    LONG CreateApp;
    VOID INxAppFactory;
    VOID INxAppFactory;
    struct INxAppFactory *operator=;
    VOID __local_vftable_ctor_closure;
    PVOID __vecDelDtor;
};

typedef struct INxNblDispatcher {
Error: Could not get member name.
    VOID SetTxHandler;
    VOID SetRxHandler;
    VOID SendNetBufferLists;
    VOID SendNetBufferListsComplete;
    BOOLEAN IndicateReceiveNetBufferLists;
    VOID ReturnNetBufferLists;
    VOID INxNblDispatcher;
    VOID INxNblDispatcher;
    VOID INxNblDispatcher;
    struct INxNblDispatcher *operator=;
    struct INxNblDispatcher *operator=;
};

typedef struct INxNblRx {
Error: Could not get member name.
    ULONG ReturnNetBufferLists;
    VOID INxNblRx;
    VOID INxNblRx;
    VOID INxNblRx;
    struct INxNblRx *operator=;
    struct INxNblRx *operator=;
};

typedef struct INxNblTx {
Error: Could not get member name.
    VOID SendNetBufferLists;
    VOID INxNblTx;
    VOID INxNblTx;
    VOID INxNblTx;
    struct INxNblTx *operator=;
    struct INxNblTx *operator=;
};

typedef struct InternalTransitions {
    struct SmFx::INTERNAL_TRANSITION c_deviceReleasingWaitForNdisHalt[0];
    struct SmFx::INTERNAL_TRANSITION c_initialized[0];
    struct SmFx::INTERNAL_TRANSITION c_initializedWaitForStart[0];
    struct SmFx::INTERNAL_TRANSITION c_rebalancingPrepareForStart[0];
    struct SmFx::INTERNAL_TRANSITION c_released[0];
    struct SmFx::INTERNAL_TRANSITION c_releasingSurpriseRemovedWaitForNdisHalt[0];
    struct SmFx::INTERNAL_TRANSITION c_releasingWaitClientRelease[0];
    struct SmFx::INTERNAL_TRANSITION c_startedD0[0];
    struct SmFx::INTERNAL_TRANSITION c_startedDx[0];
    struct SmFx::INTERNAL_TRANSITION c_startingD0[0];
};

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWCHAR VolumeName;
    ULONG BaseIoSize;
    enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    USHORT VolumeNameLength;
};

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWCHAR VolumeName;
    ULONG BaseIoSize;
    enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    USHORT VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
};

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWCHAR VolumeName;
    ULONG BaseIoSize;
    enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    USHORT VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
    LONG64 SoftMaxIops;
    LONG64 SoftMaxBandwidth;
    LONG64 SoftMaxTimePercent;
    LONG64 LimitExcessNotifyIops;
    LONG64 LimitExcessNotifyBandwidth;
    LONG64 LimitExcessNotifyTimePercent;
};

typedef struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
    ULONG LimitFlags;
    ULONG ViolationLimitFlags;
    ULONG64 IoReadBytes;
    ULONG64 IoReadBytesLimit;
    ULONG64 IoWriteBytes;
    ULONG64 IoWriteBytesLimit;
    union _LARGE_INTEGER PerJobUserTime;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG64 JobMemory;
    ULONG64 JobHighMemoryLimit;
    ULONG64 JobMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    ULONG64 JobLowMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
};

typedef struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
    ULONG64 MaxBandwidth;
    enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
    UCHAR DscpTag;
};

typedef struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
    ULONG64 IoReadBytesLimit;
    ULONG64 IoWriteBytesLimit;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG64 JobHighMemoryLimit;
    ULONG64 JobMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval;
    ULONG LimitFlags;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    ULONG64 JobLowMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
};

typedef struct KALLOCATION_TAG<1668118638,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1835169902,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1850294606,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1885501550,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1919776878,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1920090443,1> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG<1920226123,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG_DPC_ALLOC<1383625294,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG_DPC_ALLOC<1716484174,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG_DPC_ALLOC<1817727566,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG_DPC_ALLOC<1833203790,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG_DPC_ALLOC<1883338830,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATION_TAG_DPC_ALLOC<2018801742,512> {
    ULONG AllocationTag;
    ULONG AllocationArena;
};

typedef struct KALLOCATOR<1668118638,1> {
    struct KALLOCATION_TAG<1668118638,1> KALLOCATION_TAG<1668118638,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1835169902,1> {
    struct KALLOCATION_TAG<1835169902,1> KALLOCATION_TAG<1835169902,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1850294606,1> {
    struct KALLOCATION_TAG<1850294606,1> KALLOCATION_TAG<1850294606,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1885501550,512> {
    struct KALLOCATION_TAG<1885501550,512> KALLOCATION_TAG<1885501550,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1919776878,1> {
    struct KALLOCATION_TAG<1919776878,1> KALLOCATION_TAG<1919776878,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1920090443,1> {
    struct KALLOCATION_TAG<1920090443,1> KALLOCATION_TAG<1920090443,1>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR<1920226123,512> {
    struct KALLOCATION_TAG<1920226123,512> KALLOCATION_TAG<1920226123,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR_NONPAGED<1383625294,512> {
    struct KALLOCATION_TAG_DPC_ALLOC<1383625294,512> KALLOCATION_TAG_DPC_ALLOC<1383625294,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR_NONPAGED<1716484174,512> {
    struct KALLOCATION_TAG_DPC_ALLOC<1716484174,512> KALLOCATION_TAG_DPC_ALLOC<1716484174,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR_NONPAGED<1817727566,512> {
    struct KALLOCATION_TAG_DPC_ALLOC<1817727566,512> KALLOCATION_TAG_DPC_ALLOC<1817727566,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR_NONPAGED<1833203790,512> {
    struct KALLOCATION_TAG_DPC_ALLOC<1833203790,512> KALLOCATION_TAG_DPC_ALLOC<1833203790,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR_NONPAGED<1883338830,512> {
    struct KALLOCATION_TAG_DPC_ALLOC<1883338830,512> KALLOCATION_TAG_DPC_ALLOC<1883338830,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KALLOCATOR_NONPAGED<2018801742,512> {
    struct KALLOCATION_TAG_DPC_ALLOC<2018801742,512> KALLOCATION_TAG_DPC_ALLOC<2018801742,512>;
    PVOID operator new;
    PVOID operator new;
    PVOID operator new;
    VOID operator delete;
    VOID operator delete;
    PVOID operator new[];
    VOID operator delete[];
};

typedef struct KEY_PID_ARRAY {
    PVOID PID;
    struct _UNICODE_STRING KeyName;
};

typedef struct KFreePool<_NET_RING_BUFFER> {
    VOID KFreePool<_NET_RING_BUFFER>;
    VOID operator();
};

typedef struct KFreePool<unsigned char> {
    VOID KFreePool<unsigned char>;
    VOID operator();
};

typedef struct KFreePool<wchar_t> {
    VOID KFreePool<wchar_t>;
    VOID operator();
};

typedef struct KFreePoolNP<_MDL> {
    VOID KFreePoolNP<_MDL>;
    VOID operator();
};

typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
};

typedef struct LIST_ENTRY64 {
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct MARK_HANDLE_INFO {
    ULONG UsnSourceInfo;
    ULONG CopyNumber;
    PVOID VolumeHandle;
    ULONG HandleInfo;
};

typedef struct MARK_HANDLE_INFO32 {
    ULONG UsnSourceInfo;
    ULONG CopyNumber;
    ULONG VolumeHandle;
    ULONG HandleInfo;
};

typedef struct MEM_EXTENDED_PARAMETER {
    ULONG64 Type : 8;
    ULONG64 Reserved : 56;
    ULONG64 ULong64;
    PVOID Pointer;
    ULONG64 Size;
    PVOID Handle;
    ULONG ULong;
};

typedef struct MFT_ENUM_DATA_V0 {
    ULONG64 StartFileReferenceNumber;
    LONG64 LowUsn;
    LONG64 HighUsn;
};

typedef struct MFT_ENUM_DATA_V1 {
    ULONG64 StartFileReferenceNumber;
    LONG64 LowUsn;
    LONG64 HighUsn;
    USHORT MinMajorVersion;
    USHORT MaxMajorVersion;
};

typedef struct MOVE_FILE_DATA {
    PVOID FileHandle;
    union _LARGE_INTEGER StartingVcn;
    union _LARGE_INTEGER StartingLcn;
    ULONG ClusterCount;
};

typedef struct MOVE_FILE_RECORD_DATA {
    PVOID FileHandle;
    union _LARGE_INTEGER SourceFileRecord;
    union _LARGE_INTEGER TargetFileRecord;
};

typedef struct MSIX_TABLE_POINTER {
    ULONG BaseIndexRegister : 3;
    ULONG Reserved : 29;
    ULONG TableOffset;
};

typedef struct MdlTranlationResult {
    enum NxNblTranslationStatus Status;
    NetRingBufferRange<_NET_PACKET_FRAGMENT> FragmentChain;
};

typedef struct MxAutoWorkItem {
    MxWorkItem MxWorkItem;
    VOID MxAutoWorkItem;
    VOID ~MxAutoWorkItem;
    PVOID __vecDelDtor;
};

typedef struct NDIS_CO_DEVICE_PROFILE {
    struct _NDIS_VAR_DATA_DESC DeviceDescription;
    struct _NDIS_VAR_DATA_DESC DevSpecificInfo;
    ULONG ulTAPISupplementaryPassThru;
    ULONG ulAddressModes;
    ULONG ulNumAddresses;
    ULONG ulBearerModes;
    ULONG ulMaxTxRate;
    ULONG ulMinTxRate;
    ULONG ulMaxRxRate;
    ULONG ulMinRxRate;
    ULONG ulMediaModes;
    ULONG ulGenerateToneModes;
    ULONG ulGenerateToneMaxNumFreq;
    ULONG ulGenerateDigitModes;
    ULONG ulMonitorToneMaxNumFreq;
    ULONG ulMonitorToneMaxNumEntries;
    ULONG ulMonitorDigitModes;
    ULONG ulGatherDigitsMinTimeout;
    ULONG ulGatherDigitsMaxTimeout;
    ULONG ulDevCapFlags;
    ULONG ulMaxNumActiveCalls;
    ULONG ulAnswerMode;
    ULONG ulUUIAcceptSize;
    ULONG ulUUIAnswerSize;
    ULONG ulUUIMakeCallSize;
    ULONG ulUUIDropSize;
    ULONG ulUUISendUserUserInfoSize;
    ULONG ulUUICallInfoSize;
};

typedef struct NDIS_PD_COUNTER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_PD_FILTER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_PD_PROVIDER_HANDLE__ {
    LONG unused;
};

typedef struct NDIS_WDF_CX_DRIVER_CONTEXT__ {
    LONG unused;
};

typedef struct NDIS_WDF_CX_DRIVER__ {
    LONG unused;
};

typedef struct NDIS_WMI_OUTPUT_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    UCHAR SupportedRevision;
    ULONG DataOffset;
};

typedef struct NDK_VERSION {
    USHORT Major;
    USHORT Minor;
};

typedef struct NETADAPTEREXT_INIT {
};

typedef struct NETADAPTER_INIT {
};

typedef struct NETADAPTER__ {
    LONG unused;
};

typedef struct NETCONFIGURATION__ {
    LONG unused;
};

typedef struct NETPACKETQUEUE__ {
    LONG unused;
};

typedef struct NETPOWERSETTINGS__ {
    LONG unused;
};

typedef struct NETREQUESTQUEUE__ {
    LONG unused;
};

typedef struct NETREQUEST__ {
    LONG unused;
};

typedef struct NETRXQUEUE_INIT {
};

typedef struct NETTXQUEUE_INIT {
};

typedef struct NET_CLIENT_ADAPTER__ {
    LONG unused;
};

typedef struct NET_CLIENT_BUFFER_POOL__ {
    LONG unused;
};

typedef struct NET_CLIENT_MAPPING_CAPABILITIES__ {
    LONG unused;
};

typedef struct NET_CLIENT_QUEUE__ {
    LONG unused;
};

typedef struct NET_PACKET_CONTEXT_TOKEN {
};

typedef struct NET_PACKET_EXTENSION_PRIVATE {
    PWCHAR Name;
    ULONG64 Size;
    ULONG Version;
    ULONG NonWdfStyleAlignment;
    ULONG64 AssignedOffset;
    BOOLEAN DeregisterInProgress;
    struct NET_PACKET_EXTENSION_PRIVATE *Next;
    PVOID CallbackContext;
    PVOID InitializeFn;
    PVOID DestroyFn;
    PLONG CopyFn;
    PVOID ReuseFn;
    VOID NET_PACKET_EXTENSION_PRIVATE;
};

typedef struct NONPAGED_OBJECT<1885501550> {
    struct KALLOCATOR<1885501550,512> KALLOCATOR<1885501550,512>;
    struct NdisDebugBlock<1885501550> NdisDebugBlock<1885501550>;
};

typedef struct NONPAGED_OBJECT<1920226123> {
    struct KALLOCATOR<1920226123,512> KALLOCATOR<1920226123,512>;
    struct NdisDebugBlock<1920226123> NdisDebugBlock<1920226123>;
};

typedef struct NOTIFY_USER_POWER_SETTING {
    struct _GUID Guid;
};

typedef struct NTFS_EXTENDED_VOLUME_DATA {
    ULONG ByteCount;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG BytesPerPhysicalSector;
    USHORT LfsMajorVersion;
    USHORT LfsMinorVersion;
    ULONG MaxDeviceTrimExtentCount;
    ULONG MaxDeviceTrimByteCount;
    ULONG MaxVolumeTrimExtentCount;
    ULONG MaxVolumeTrimByteCount;
};

typedef struct NTFS_FILE_RECORD_INPUT_BUFFER {
    union _LARGE_INTEGER FileReferenceNumber;
};

typedef struct NTFS_FILE_RECORD_OUTPUT_BUFFER {
    union _LARGE_INTEGER FileReferenceNumber;
    ULONG FileRecordLength;
    UCHAR FileRecordBuffer[1];
};

typedef struct NTFS_VOLUME_DATA_BUFFER {
    union _LARGE_INTEGER VolumeSerialNumber;
    union _LARGE_INTEGER NumberSectors;
    union _LARGE_INTEGER TotalClusters;
    union _LARGE_INTEGER FreeClusters;
    union _LARGE_INTEGER TotalReserved;
    ULONG BytesPerSector;
    ULONG BytesPerCluster;
    ULONG BytesPerFileRecordSegment;
    ULONG ClustersPerFileRecordSegment;
    union _LARGE_INTEGER MftValidDataLength;
    union _LARGE_INTEGER MftStartLcn;
    union _LARGE_INTEGER Mft2StartLcn;
    union _LARGE_INTEGER MftZoneStart;
    union _LARGE_INTEGER MftZoneEnd;
};

typedef struct NX_PERF_NIC_GENERAL_CHARACTERISTICS {
    ULONG MediaType;
    BOOLEAN IsDriverVerifierEnabled;
};

typedef struct NX_PERF_RX_NIC_CHARACTERISTICS {
    struct NX_PERF_NIC_GENERAL_CHARACTERISTICS Nic;
    ULONG FragmentRingNumberOfElementsHint;
    ULONG64 MaximumFragmentBufferSize;
    ULONG64 MaxPacketSizeWithRsc;
    ULONG64 NominalLinkSpeed;
};

typedef struct NX_PERF_RX_TUNING_PARAMETERS {
    ULONG PacketRingElementCount;
    ULONG FragmentRingElementCount;
    ULONG NumberOfBuffers;
    ULONG NumberOfNbls;
};

typedef struct NX_PERF_TX_NIC_CHARACTERISTICS {
    struct NX_PERF_NIC_GENERAL_CHARACTERISTICS Nic;
    ULONG FragmentRingNumberOfElementsHint;
    ULONG64 MaximumFragmentBufferSize;
    ULONG MaxFragmentsPerPacket;
    ULONG64 MaxPacketSizeWithLso;
    ULONG64 NominalLinkSpeed;
};

typedef struct NX_PERF_TX_TUNING_PARAMETERS {
    ULONG PacketRingElementCount;
    ULONG FragmentRingElementCount;
    ULONG NumberOfBounceBuffers;
};

typedef struct NX_PRIVATE_GLOBALS {
    ULONG Signature;
    UCHAR CxVerifierOn;
    struct _NET_DRIVER_GLOBALS Public;
    NxDriver *NxDriver;
    struct _WDF_DRIVER_GLOBALS *ClientDriverGlobals;
};

typedef struct NdisDebugBlock<1668118638> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1835169902> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1850294606> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1885501550> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1919776878> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1920090443> {
    VOID ASSERT_VALID;
};

typedef struct NdisDebugBlock<1920226123> {
    VOID ASSERT_VALID;
};

typedef struct NxAdapterStateMachine<NxAdapter>::Actions {
};

typedef struct NxAdapterStateMachine<NxAdapter>::DeferredEvents {
};

typedef struct NxAdapterStateMachine<NxAdapter>::EntryFuncs {
    USHORT AdapterDatapathStoppingEntry;
    USHORT DatapathHaltDestroyingEntry;
    USHORT DatapathPausedEntry;
    USHORT DatapathPausedCreatingEntry;
    USHORT DatapathPausedDestroyingEntry;
    USHORT DatapathPausedStartingEntry;
    USHORT DatapathPauseStoppingEntry;
    USHORT DatapathRemovePausedEntry;
    USHORT DatapathRestartDestroyingEntry;
    USHORT DatapathRestartedCreatingEntry;
    USHORT DatapathRestartedStartingEntry;
    USHORT DatapathRestartRemovingEntry;
    USHORT DatapathRestartStoppingEntry;
    USHORT DatapathRunningEntry;
    USHORT DatapathStoppedPausedEntry;
    USHORT DatapathStoppingPauseCompleteEntry;
    USHORT HaltedEntry;
    USHORT HaltingEntry;
    USHORT InitializedEntry;
    USHORT PausedEntry;
    USHORT PauseSurpriseRemovingEntry;
    USHORT RestartedEntry;
    USHORT SurpriseRemovePausedEntry;
};

typedef struct NxAdapterStateMachine<NxAdapter>::ExternalTransitions {
    struct SmFx::EXTERNAL_TRANSITION c_datapathHaltDestroying[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPaused[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPausedCreating[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPausedDestroying[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPausedStarting[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathPauseStopping[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRemovePaused[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartDestroying[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartedCreating[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartedStarting[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartRemoving[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartRemoving2[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRestartStopping[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathRunning[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathStoppedPaused[0];
    struct SmFx::EXTERNAL_TRANSITION c_datapathStoppingPauseComplete[0];
    struct SmFx::EXTERNAL_TRANSITION c_halted[0];
    struct SmFx::EXTERNAL_TRANSITION c_halting[0];
    struct SmFx::EXTERNAL_TRANSITION c_initialized[0];
    struct SmFx::EXTERNAL_TRANSITION c_paused[0];
    struct SmFx::EXTERNAL_TRANSITION c_pauseSurpriseRemoving[0];
    struct SmFx::EXTERNAL_TRANSITION c_restarted[0];
    struct SmFx::EXTERNAL_TRANSITION c_surpriseRemovePaused[0];
};

typedef struct NxAdapterStateMachine<NxAdapter>::InternalTransitions {
};

typedef struct NxAdapterStateMachine<NxAdapter>::PopTransitions {
    struct SmFx::POP_TRANSITION c_halted[0];
};

typedef struct NxAdapterStateMachine<NxAdapter>::PurgeEvents {
};

typedef struct NxAdapterStateMachine<NxAdapter>::SlotArrays {
    PVOID c_adapterDatapathStopping[0];
    PVOID c_datapathHaltDestroying[0];
    PVOID c_datapathPaused[0];
    PVOID c_datapathPausedCreating[0];
    PVOID c_datapathPausedDestroying[0];
    PVOID c_datapathPausedStarting[0];
    PVOID c_datapathPauseStopping[0];
    PVOID c_datapathRemovePaused[0];
    PVOID c_datapathRestartDestroying[0];
    PVOID c_datapathRestartedCreating[0];
    PVOID c_datapathRestartedStarting[0];
    PVOID c_datapathRestartRemoving[0];
    PVOID c_datapathRestartRemoving2[0];
    PVOID c_datapathRestartStopping[0];
    PVOID c_datapathRunning[0];
    PVOID c_datapathStoppedPaused[0];
    PVOID c_datapathStoppingPauseComplete[0];
    PVOID c_halted[0];
    PVOID c_halting[0];
    PVOID c_initialized[0];
    PVOID c_paused[0];
    PVOID c_pauseSurpriseRemoving[0];
    PVOID c_restarted[0];
    PVOID c_surpriseRemovePaused[0];
};

typedef struct NxAdapterStateMachine<NxAdapter>::StateMachineEngineConfig {
    VOID StateMachineEngineConfig;
    struct _DEVICE_OBJECT *deviceObject;
    ULONG poolTag;
};

typedef struct NxAdapterStateMachine<NxAdapter>::StopTimerOnExitDetails {
};

typedef struct NxBufferDescriptor {
    PVOID VirtualAddress;
    union _LARGE_INTEGER LogicalAddress;
    ULONG64 ChunkIndex;
    ULONG64 BufferIndex;
    PVOID Context;
};

typedef struct NxBufferPool::NxBufferDescriptor {
    PVOID VirtualAddress;
    union _LARGE_INTEGER LogicalAddress;
    ULONG64 ChunkIndex;
    ULONG64 BufferIndex;
    PVOID Context;
};

typedef struct NxBufferPool::NxChunkBaseAddress {
    PVOID VirtualAddress;
    union _LARGE_INTEGER LogicalAddress;
};

typedef struct NxChunkBaseAddress {
    PVOID VirtualAddress;
    union _LARGE_INTEGER LogicalAddress;
};

typedef struct NxDeviceStateMachine<NxDevice>::Actions {
    VOID DeviceReleasingWaitForNdisHaltActionOnRefreshAdapterList;
    VOID InitializedActionOnRefreshAdapterList;
    VOID InitializedWaitForStartActionOnRefreshAdapterList;
    VOID RebalancingPrepareForStartActionOnRefreshAdapterList;
    VOID ReleasingSurpriseRemovedWaitForNdisHaltActionOnRefreshAdapterList;
    VOID ReleasingWaitClientReleaseActionOnRefreshAdapterList;
    VOID StartedD0ActionOnRefreshAdapterList;
    VOID StartedDxActionOnRefreshAdapterList;
    VOID StartingD0ActionOnRefreshAdapterList;
};

typedef struct NxDeviceStateMachine<NxDevice>::DeferredEvents {
    USHORT c_rebalancingPrepareForStart[0];
    USHORT c_startedDx[0];
};

typedef struct NxDeviceStateMachine<NxDevice>::EntryFuncs {
    USHORT CxPrepareHardwareFailedEntry;
    USHORT DeviceAddFailedReportToNdisEntry;
    USHORT InitializedPrePrepareHardwareEntry;
    USHORT RebalancingPrePrepareHardwareEntry;
    USHORT RebalancingReinitializeSelfManagedIoEntry;
    USHORT ReleasedPrepareRebalanceEntry;
    USHORT ReleasedReportToNdisEntry;
    USHORT ReleasedSelfManagedIoCleanupEntry;
    USHORT ReleasingAreAllAdaptersHaltedEntry;
    USHORT ReleasingIsSurpriseRemovedEntry;
    USHORT ReleasingReportPreReleaseToNdisEntry;
    USHORT ReleasingReportSurpriseRemoveToNdisEntry;
    USHORT ReleasingSurpriseRemovedAreAllAdaptersHaltedEntry;
    USHORT ReleasingSurpriseRemovedReportPreReleaseToNdisEntry;
    USHORT ReleasingSuspendIoEntry;
    USHORT RemovedEntry;
    USHORT StartedEnteringHighPowerEntry;
    USHORT StartedEnteringLowPowerEntry;
    USHORT StartingCheckPowerPolicyOwnershipEntry;
    USHORT StartingCompleteStartEntry;
    USHORT StartingInitializeSelfManagedIoEntry;
};

typedef struct NxDeviceStateMachine<NxDevice>::ExternalTransitions {
    struct SmFx::EXTERNAL_TRANSITION c_cxPrepareHardwareFailed[0];
    struct SmFx::EXTERNAL_TRANSITION c_deviceAddFailedReportToNdis[0];
    struct SmFx::EXTERNAL_TRANSITION c_deviceReleasingWaitForNdisHalt[0];
    struct SmFx::EXTERNAL_TRANSITION c_initialized[0];
    struct SmFx::EXTERNAL_TRANSITION c_initializedPrePrepareHardware[0];
    struct SmFx::EXTERNAL_TRANSITION c_initializedWaitForStart[0];
    struct SmFx::EXTERNAL_TRANSITION c_rebalancingPrepareForStart[0];
    struct SmFx::EXTERNAL_TRANSITION c_rebalancingPrePrepareHardware[0];
    struct SmFx::EXTERNAL_TRANSITION c_rebalancingReinitializeSelfManagedIo[0];
    struct SmFx::EXTERNAL_TRANSITION c_released[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasedPrepareRebalance[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasedReportToNdis[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasedSelfManagedIoCleanup[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingAreAllAdaptersHalted[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingIsSurpriseRemoved[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingReportPreReleaseToNdis[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingReportSurpriseRemoveToNdis[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingSurpriseRemovedAreAllAdaptersHalted[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingSurpriseRemovedReportPreReleaseToNdis[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingSurpriseRemovedWaitForNdisHalt[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingSuspendIo[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingWaitClientRelease[0];
    struct SmFx::EXTERNAL_TRANSITION c_releasingWaitForReleaseHardware[0];
    struct SmFx::EXTERNAL_TRANSITION c_startedD0[0];
    struct SmFx::EXTERNAL_TRANSITION c_startedDx[0];
    struct SmFx::EXTERNAL_TRANSITION c_startedEnteringHighPower[0];
    struct SmFx::EXTERNAL_TRANSITION c_startedEnteringLowPower[0];
    struct SmFx::EXTERNAL_TRANSITION c_startingCheckPowerPolicyOwnership[0];
    struct SmFx::EXTERNAL_TRANSITION c_startingCompleteStart[0];
    struct SmFx::EXTERNAL_TRANSITION c_startingD0[0];
    struct SmFx::EXTERNAL_TRANSITION c_startingInitializeSelfManagedIo[0];
    struct SmFx::EXTERNAL_TRANSITION c_waitForCleanup[0];
};

typedef struct NxDeviceStateMachine<NxDevice>::InternalTransitions {
    struct SmFx::INTERNAL_TRANSITION c_deviceReleasingWaitForNdisHalt[0];
    struct SmFx::INTERNAL_TRANSITION c_initialized[0];
    struct SmFx::INTERNAL_TRANSITION c_initializedWaitForStart[0];
    struct SmFx::INTERNAL_TRANSITION c_rebalancingPrepareForStart[0];
    struct SmFx::INTERNAL_TRANSITION c_released[0];
    struct SmFx::INTERNAL_TRANSITION c_releasingSurpriseRemovedWaitForNdisHalt[0];
    struct SmFx::INTERNAL_TRANSITION c_releasingWaitClientRelease[0];
    struct SmFx::INTERNAL_TRANSITION c_startedD0[0];
    struct SmFx::INTERNAL_TRANSITION c_startedDx[0];
    struct SmFx::INTERNAL_TRANSITION c_startingD0[0];
};

typedef struct NxDeviceStateMachine<NxDevice>::PopTransitions {
    struct SmFx::POP_TRANSITION c_removed[0];
};

typedef struct NxDeviceStateMachine<NxDevice>::PurgeEvents {
    USHORT c_releasedPrepareRebalance[0];
    USHORT c_releasingWaitClientRelease[0];
};

typedef struct NxDeviceStateMachine<NxDevice>::SlotArrays {
    PVOID c_cxPrepareHardwareFailed[0];
    PVOID c_deviceAddFailedReportToNdis[0];
    PVOID c_deviceReleasingWaitForNdisHalt[0];
    PVOID c_initialized[0];
    PVOID c_initializedPrePrepareHardware[0];
    PVOID c_initializedWaitForStart[0];
    PVOID c_rebalancingPrepareForStart[0];
    PVOID c_rebalancingPrePrepareHardware[0];
    PVOID c_rebalancingReinitializeSelfManagedIo[0];
    PVOID c_released[0];
    PVOID c_releasedPrepareRebalance[0];
    PVOID c_releasedReportToNdis[0];
    PVOID c_releasedSelfManagedIoCleanup[0];
    PVOID c_releasingAreAllAdaptersHalted[0];
    PVOID c_releasingIsSurpriseRemoved[0];
    PVOID c_releasingReportPreReleaseToNdis[0];
    PVOID c_releasingReportSurpriseRemoveToNdis[0];
    PVOID c_releasingSurpriseRemovedAreAllAdaptersHalted[0];
    PVOID c_releasingSurpriseRemovedReportPreReleaseToNdis[0];
    PVOID c_releasingSurpriseRemovedWaitForNdisHalt[0];
    PVOID c_releasingSuspendIo[0];
    PVOID c_releasingWaitClientRelease[0];
    PVOID c_releasingWaitForReleaseHardware[0];
    PVOID c_removed[0];
    PVOID c_startedD0[0];
    PVOID c_startedDx[0];
    PVOID c_startedEnteringHighPower[0];
    PVOID c_startedEnteringLowPower[0];
    PVOID c_startingCheckPowerPolicyOwnership[0];
    PVOID c_startingCompleteStart[0];
    PVOID c_startingD0[0];
    PVOID c_startingInitializeSelfManagedIo[0];
    PVOID c_waitForCleanup[0];
};

typedef struct NxDeviceStateMachine<NxDevice>::StateMachineEngineConfig {
    VOID StateMachineEngineConfig;
    struct _DEVICE_OBJECT *deviceObject;
    ULONG poolTag;
};

typedef struct NxDeviceStateMachine<NxDevice>::StopTimerOnExitDetails {
};

typedef struct NxExecutionContextCounters {
    ULONG64 IterationCount;
    ULONG64 BusyWaitIterationCount;
    ULONG64 CpuCycleTime;
    ULONG64 ThreadCycleTime;
    ULONG64 TotalCpuCycleTime;
    ULONG64 ProcessingCycles;
    ULONG64 BusyWaitCycles;
    ULONG64 IdleCycles;
    VOID NxExecutionContextCounters;
};

typedef struct NxNblTranslationStats {
     <unnamed-type-Packet>;
    struct {
        ULONG64 BounceSuccess;
        ULONG64 BounceFailure;
        ULONG64 CannotTranslate;
        ULONG64 UnalignedBuffer;
        VOID <unnamed-type-Packet>;
    } Packet;
     <unnamed-type-DMA>;
    struct {
        ULONG64 InsufficientResouces;
        ULONG64 BufferTooSmall;
        ULONG64 CannotMapSglToFragments;
        ULONG64 PhysicalAddressTooLarge;
        ULONG64 OtherErrors;
        VOID <unnamed-type-DMA>;
    } DMA;
    VOID NxNblTranslationStats;
};

typedef struct NxNblTranslator::PacketContext {
    struct _NET_BUFFER_LIST *NetBufferListToComplete;
    VOID PacketContext;
};

typedef struct NxReceiveScaling::AffinitizedQueue {
    NxRxXlat *Queue;
    ULONG64 QueueId;
    struct _GROUP_AFFINITY Affinity;
    VOID AffinitizedQueue;
};

typedef struct NxReceiveScaling::TranslatedIndirectionEntries {
    struct _NET_CLIENT_RECEIVE_SCALING_INDIRECTION_ENTRY Entries[128];
    ULONG Restore[128];
};

typedef struct NxRingBufferCounters {
    ULONG64 NumberOfNetPacketsProduced;
    ULONG64 NumberOfNetPacketsConsumed;
    ULONG64 CumulativeRingBufferDepthInLastInterval;
    ULONG64 IterationCountInLastInterval;
    ULONG64 RingbufferFullyOccupiedCount;
    ULONG64 RingbufferEmptyCount;
    ULONG64 RingbufferPartiallyOccupiedCount;
    VOID NxRingBufferCounters;
};

typedef struct NxRxXlat::ArmedNotifications {
    struct {
        BOOLEAN ShouldArmRxIndication : 1;
        BOOLEAN ShouldArmNblReturned : 1;
        UCHAR Reserved : 6;
    } Flags;
    UCHAR Value;
    VOID ArmedNotifications;
};

typedef struct NxRxXlat::PacketContext {
    struct _NET_BUFFER_LIST *NetBufferList;
};

typedef struct NxTxXlat::ArmedNotifications {
    struct {
        BOOLEAN ShouldArmTxCompletion : 1;
        BOOLEAN ShouldArmNblArrival : 1;
        UCHAR Reserved : 6;
    } Flags;
    UCHAR Value;
    VOID ArmedNotifications;
};

typedef struct PAGED_OBJECT<1668118638> {
    struct KALLOCATOR<1668118638,1> KALLOCATOR<1668118638,1>;
    struct NdisDebugBlock<1668118638> NdisDebugBlock<1668118638>;
};

typedef struct PAGED_OBJECT<1835169902> {
    struct KALLOCATOR<1835169902,1> KALLOCATOR<1835169902,1>;
    struct NdisDebugBlock<1835169902> NdisDebugBlock<1835169902>;
};

typedef struct PAGED_OBJECT<1850294606> {
    struct KALLOCATOR<1850294606,1> KALLOCATOR<1850294606,1>;
    struct NdisDebugBlock<1850294606> NdisDebugBlock<1850294606>;
};

typedef struct PAGED_OBJECT<1919776878> {
    struct KALLOCATOR<1919776878,1> KALLOCATOR<1919776878,1>;
    struct NdisDebugBlock<1919776878> NdisDebugBlock<1919776878>;
};

typedef struct PAGED_OBJECT<1920090443> {
    struct KALLOCATOR<1920090443,1> KALLOCATOR<1920090443,1>;
    struct NdisDebugBlock<1920090443> NdisDebugBlock<1920090443>;
};

typedef struct PCI_AGP_EXTENDED_CAPABILITY {
    struct _PCI_AGP_ISOCH_STATUS IsochStatus;
    struct _PCI_AGP_CONTROL AgpControl;
    USHORT ApertureSize;
    struct _PCI_AGP_APERTURE_PAGE_SIZE AperturePageSize;
    ULONG GartLow;
    ULONG GartHigh;
    struct _PCI_AGP_ISOCH_COMMAND IsochCommand;
};

typedef struct PCI_HT_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-Command>;
    union {
         <unnamed-type-Generic>;
        struct {
            USHORT Reserved : 11;
            USHORT CapabilityType : 5;
        } Generic;
         <unnamed-type-Interrupt>;
        struct {
            USHORT Index : 8;
            USHORT Reserved : 3;
            USHORT CapabilityType : 5;
        } Interrupt;
         <unnamed-type-MsiMapping>;
        struct {
            USHORT Enable : 1;
            USHORT Fixed : 1;
            USHORT Reserved : 9;
            USHORT CapabilityType : 5;
        } MsiMapping;
    } Command;
     <unnamed-type-Offset04>;
    union {
        ULONG InterruptDataPort;
         <unnamed-type-MsiMapping>;
        struct {
            ULONG Reserved : 20;
            ULONG AddressLow : 12;
        } MsiMapping;
    } Offset04;
     <unnamed-type-Offset08>;
    union {
         <unnamed-type-MsiMapping>;
        struct {
            ULONG AddressUpper;
        } MsiMapping;
    } Offset08;
};

typedef struct PCI_HT_INTERRUPT_INDEX_1 {
    USHORT Reserved1;
    UCHAR LastInterrupt;
    UCHAR Reserved2;
};

typedef struct PCI_HT_INTERRUPT_INDEX_N {
     <unnamed-type-LowPart>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG Mask : 1;
            ULONG Polarity : 1;
            ULONG MessageType : 3;
            ULONG RequestEOI : 1;
            ULONG DestinationMode : 1;
            ULONG MessageType3 : 1;
            ULONG Destination : 8;
            ULONG Vector : 8;
            ULONG ExtendedAddress : 8;
        } bits;
        ULONG AsULONG;
    } LowPart;
     <unnamed-type-HighPart>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG ExtendedDestination : 24;
            ULONG Reserved : 6;
            ULONG PassPW : 1;
            ULONG WaitingForEOI : 1;
        } bits;
        ULONG AsULONG;
    } HighPart;
};

typedef struct PCI_MSIX_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-MessageControl>;
    struct {
        USHORT TableSize : 11;
        USHORT Reserved : 3;
        USHORT FunctionMask : 1;
        USHORT MSIXEnable : 1;
    } MessageControl;
    struct MSIX_TABLE_POINTER MessageTable;
    struct MSIX_TABLE_POINTER PBATable;
};

typedef struct PCI_MSIX_TABLE_ENTRY {
    union _LARGE_INTEGER MessageAddress;
    ULONG MessageData;
     <unnamed-type-VectorControl>;
    struct {
        ULONG Mask : 1;
        ULONG Reserved : 15;
        ULONG StLower : 8;
        ULONG StUpper : 8;
    } VectorControl;
};

typedef struct PCI_MSI_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     _PCI_MSI_MESSAGE_CONTROL;
    struct PCI_MSI_CAPABILITY::_PCI_MSI_MESSAGE_CONTROL MessageControl;
     <unnamed-type-MessageAddressLower>;
    union {
         _PCI_MSI_MESSAGE_ADDRESS;
        struct {
            ULONG Reserved : 2;
            ULONG Address : 30;
        } Register;
        ULONG Raw;
    } MessageAddressLower;
    struct {
        USHORT MessageData;
        USHORT Reserved;
        ULONG MaskBits;
        ULONG PendingBits;
    } Option32Bit;
    struct {
        ULONG MessageAddressUpper;
        USHORT MessageData;
        USHORT Reserved;
        ULONG MaskBits;
        ULONG PendingBits;
    } Option64Bit;
};

typedef struct PCI_MSI_CAPABILITY::_PCI_MSI_MESSAGE_CONTROL {
    USHORT MSIEnable : 1;
    USHORT MultipleMessageCapable : 3;
    USHORT MultipleMessageEnable : 3;
    USHORT CapableOf64Bits : 1;
    USHORT PerVectorMaskCapable : 1;
    USHORT Reserved : 7;
};

typedef struct PCI_X_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-Command>;
    union {
         <unnamed-type-bits>;
        struct {
            USHORT DataParityErrorRecoveryEnable : 1;
            USHORT EnableRelaxedOrdering : 1;
            USHORT MaxMemoryReadByteCount : 2;
            USHORT MaxOutstandingSplitTransactions : 3;
            USHORT Reserved : 9;
        } bits;
        USHORT AsUSHORT;
    } Command;
     <unnamed-type-Status>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG FunctionNumber : 3;
            ULONG DeviceNumber : 5;
            ULONG BusNumber : 8;
            ULONG Device64Bit : 1;
            ULONG Capable133MHz : 1;
            ULONG SplitCompletionDiscarded : 1;
            ULONG UnexpectedSplitCompletion : 1;
            ULONG DeviceComplexity : 1;
            ULONG DesignedMaxMemoryReadByteCount : 2;
            ULONG DesignedMaxOutstandingSplitTransactions : 3;
            ULONG DesignedMaxCumulativeReadSize : 3;
            ULONG ReceivedSplitCompletionErrorMessage : 1;
            ULONG CapablePCIX266 : 1;
            ULONG CapablePCIX533 : 1;
        } bits;
        ULONG AsULONG;
    } Status;
};

typedef struct POHANDLE__ {
    LONG unused;
};

typedef struct POWER_ACTION_POLICY {
    enum POWER_ACTION Action;
    ULONG Flags;
    ULONG EventCode;
};

typedef struct POWER_STATE_HANDLER {
    enum POWER_STATE_HANDLER_TYPE Type;
    UCHAR RtcWake;
    UCHAR Spare[3];
    PLONG Handler;
    PVOID Context;
};

typedef struct POWER_STATE_NOTIFY_HANDLER {
    PLONG Handler;
    PVOID Context;
};

typedef struct PPM_IDLESTATE_EVENT {
    ULONG NewState;
    ULONG OldState;
    ULONG64 Processors;
};

typedef struct PPM_IDLE_ACCOUNTING {
    ULONG StateCount;
    ULONG TotalTransitions;
    ULONG ResetCount;
    ULONG64 StartTime;
    struct PPM_IDLE_STATE_ACCOUNTING State[1];
};

typedef struct PPM_IDLE_ACCOUNTING_EX {
    ULONG StateCount;
    ULONG TotalTransitions;
    ULONG ResetCount;
    ULONG AbortCount;
    ULONG64 StartTime;
    struct PPM_IDLE_STATE_ACCOUNTING_EX State[1];
};

typedef struct PPM_IDLE_STATE_ACCOUNTING {
    ULONG IdleTransitions;
    ULONG FailedTransitions;
    ULONG InvalidBucketIndex;
    ULONG64 TotalTime;
    ULONG IdleTimeBuckets[6];
};

typedef struct PPM_IDLE_STATE_ACCOUNTING_EX {
    ULONG64 TotalTime;
    ULONG IdleTransitions;
    ULONG FailedTransitions;
    ULONG InvalidBucketIndex;
    ULONG MinTimeUs;
    ULONG MaxTimeUs;
    ULONG CancelledTransitions;
    struct PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
};

typedef struct PPM_IDLE_STATE_BUCKET_EX {
    ULONG64 TotalTimeUs;
    ULONG MinTimeUs;
    ULONG MaxTimeUs;
    ULONG Count;
};

typedef struct PPM_PERFSTATE_DOMAIN_EVENT {
    ULONG State;
    ULONG Latency;
    ULONG Speed;
    ULONG64 Processors;
};

typedef struct PPM_PERFSTATE_EVENT {
    ULONG State;
    ULONG Status;
    ULONG Latency;
    ULONG Speed;
    ULONG Processor;
};

typedef struct PPM_THERMALCHANGE_EVENT {
    ULONG ThermalConstraint;
    ULONG64 Processors;
};

typedef struct PPM_THERMAL_POLICY_EVENT {
    UCHAR Mode;
    ULONG64 Processors;
};

typedef struct PPM_WMI_IDLE_STATE {
    ULONG Latency;
    ULONG Power;
    ULONG TimeCheck;
    UCHAR PromotePercent;
    UCHAR DemotePercent;
    UCHAR StateType;
    UCHAR Reserved;
    ULONG StateFlags;
    ULONG Context;
    ULONG IdleHandler;
    ULONG Reserved1;
};

typedef struct PPM_WMI_IDLE_STATES {
    ULONG Type;
    ULONG Count;
    ULONG TargetState;
    ULONG OldState;
    ULONG64 TargetProcessors;
    struct PPM_WMI_IDLE_STATE State[1];
};

typedef struct PPM_WMI_IDLE_STATES_EX {
    ULONG Type;
    ULONG Count;
    ULONG TargetState;
    ULONG OldState;
    PVOID TargetProcessors;
    struct PPM_WMI_IDLE_STATE State[1];
};

typedef struct PPM_WMI_LEGACY_PERFSTATE {
    ULONG Frequency;
    ULONG Flags;
    ULONG PercentFrequency;
};

typedef struct PPM_WMI_PERF_STATE {
    ULONG Frequency;
    ULONG Power;
    UCHAR PercentFrequency;
    UCHAR IncreaseLevel;
    UCHAR DecreaseLevel;
    UCHAR Type;
    ULONG IncreaseTime;
    ULONG DecreaseTime;
    ULONG64 Control;
    ULONG64 Status;
    ULONG HitCount;
    ULONG Reserved1;
    ULONG64 Reserved2;
    ULONG64 Reserved3;
};

typedef struct PPM_WMI_PERF_STATES {
    ULONG Count;
    ULONG MaxFrequency;
    ULONG CurrentState;
    ULONG MaxPerfState;
    ULONG MinPerfState;
    ULONG LowestPerfState;
    ULONG ThermalConstraint;
    UCHAR BusyAdjThreshold;
    UCHAR PolicyType;
    UCHAR Type;
    UCHAR Reserved;
    ULONG TimerInterval;
    ULONG64 TargetProcessors;
    ULONG PStateHandler;
    ULONG PStateContext;
    ULONG TStateHandler;
    ULONG TStateContext;
    ULONG FeedbackHandler;
    ULONG Reserved1;
    ULONG64 Reserved2;
    struct PPM_WMI_PERF_STATE State[1];
};

typedef struct PPM_WMI_PERF_STATES_EX {
    ULONG Count;
    ULONG MaxFrequency;
    ULONG CurrentState;
    ULONG MaxPerfState;
    ULONG MinPerfState;
    ULONG LowestPerfState;
    ULONG ThermalConstraint;
    UCHAR BusyAdjThreshold;
    UCHAR PolicyType;
    UCHAR Type;
    UCHAR Reserved;
    ULONG TimerInterval;
    PVOID TargetProcessors;
    ULONG PStateHandler;
    ULONG PStateContext;
    ULONG TStateHandler;
    ULONG TStateContext;
    ULONG FeedbackHandler;
    ULONG Reserved1;
    ULONG64 Reserved2;
    struct PPM_WMI_PERF_STATE State[1];
};

typedef struct PROCESSOR_IDLESTATE_INFO {
    ULONG TimeCheck;
    UCHAR DemotePercent;
    UCHAR PromotePercent;
    UCHAR Spare[2];
};

typedef struct PROCESSOR_IDLESTATE_POLICY {
    USHORT Revision;
     <unnamed-type-Flags>;
    union {
        USHORT AsUSHORT;
        USHORT AllowScaling : 1;
        USHORT Disabled : 1;
        USHORT Reserved : 14;
    } Flags;
    ULONG PolicyCount;
    struct PROCESSOR_IDLESTATE_INFO Policy[3];
};

typedef struct PROCESSOR_IDLE_TIMES {
    ULONG64 StartTime;
    ULONG64 EndTime;
    ULONG Reserved[4];
};

typedef struct PROCESSOR_PERFSTATE_POLICY {
    ULONG Revision;
    UCHAR MaxThrottle;
    UCHAR MinThrottle;
    UCHAR BusyAdjThreshold;
    UCHAR Spare;
    union {
        UCHAR AsUCHAR;
        UCHAR NoDomainAccounting : 1;
        UCHAR IncreasePolicy : 2;
        UCHAR DecreasePolicy : 2;
        UCHAR Reserved : 3;
    } Flags;
    ULONG TimeCheck;
    ULONG IncreaseTime;
    ULONG DecreaseTime;
    ULONG IncreasePercent;
    ULONG DecreasePercent;
};

typedef struct PacketContext {
    struct _NET_BUFFER_LIST *NetBufferListToComplete;
    VOID PacketContext;
};

typedef struct PopTransitions {
    struct SmFx::POP_TRANSITION c_halted[0];
};

typedef struct PurgeEvents {
    USHORT c_releasedPrepareRebalance[0];
    USHORT c_releasingWaitClientRelease[0];
};

typedef struct QOS_OBJECT_HDR {
    ULONG ObjectType;
    ULONG ObjectLength;
};

typedef struct QUEUE_CREATION_CONTEXT {
    ULONG Signature;
    struct _KTHREAD *CurrentThread;
    struct _NET_CLIENT_QUEUE_CONFIG *ClientQueueConfig;
    struct _NET_CLIENT_QUEUE_NOTIFY_DISPATCH *ClientDispatch;
    struct _NET_CLIENT_QUEUE_DISPATCH **AdapterDispatch;
    NxAdapter *Adapter;
    Rtl::KArray<_NET_PACKET_CONTEXT_ATTRIBUTES,1> PacketContextAttributes;
    Rtl::KArray<NET_PACKET_EXTENSION_PRIVATE,1> NetAdapterAddedPacketExtensions;
    Rtl::KArray<NET_PACKET_EXTENSION_PRIVATE,1> NetClientAddedPacketExtensions;
    ULONG QueueId;
    PVOID ClientQueue;
    wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void *,void (__cdecl*)(void *),&WdfObjectDelete,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t> > > CreatedQueueObject;
    VOID QUEUE_CREATION_CONTEXT;
    VOID QUEUE_CREATION_CONTEXT;
    VOID ~QUEUE_CREATION_CONTEXT;
    struct QUEUE_CREATION_CONTEXT *operator=;
    PVOID __vecDelDtor;
};

typedef struct RCVALL_IF {
    enum RCVALL_VALUE Mode;
    ULONG Interface;
};

typedef struct READ_FILE_USN_DATA {
    USHORT MinMajorVersion;
    USHORT MaxMajorVersion;
};

typedef struct READ_USN_JOURNAL_DATA_V0 {
    LONG64 StartUsn;
    ULONG ReasonMask;
    ULONG ReturnOnlyOnClose;
    ULONG64 Timeout;
    ULONG64 BytesToWaitFor;
    ULONG64 UsnJournalID;
};

typedef struct READ_USN_JOURNAL_DATA_V1 {
    LONG64 StartUsn;
    ULONG ReasonMask;
    ULONG ReturnOnlyOnClose;
    ULONG64 Timeout;
    ULONG64 BytesToWaitFor;
    ULONG64 UsnJournalID;
    USHORT MinMajorVersion;
    USHORT MaxMajorVersion;
};

typedef struct RECORDER_LOG__ {
    LONG unused;
};

typedef struct REFS_VOLUME_DATA_BUFFER {
    ULONG ByteCount;
    ULONG MajorVersion;
    ULONG MinorVersion;
    ULONG BytesPerPhysicalSector;
    union _LARGE_INTEGER VolumeSerialNumber;
    union _LARGE_INTEGER NumberSectors;
    union _LARGE_INTEGER TotalClusters;
    union _LARGE_INTEGER FreeClusters;
    union _LARGE_INTEGER TotalReserved;
    ULONG BytesPerSector;
    ULONG BytesPerCluster;
    union _LARGE_INTEGER MaximumSizeOfResidentFile;
    union _LARGE_INTEGER Reserved[10];
};

typedef struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
    ULONG ExtentCount;
    union _LARGE_INTEGER StartingVcn;
     <unnamed-type-Extents>;
    struct {
        union _LARGE_INTEGER NextVcn;
        union _LARGE_INTEGER Lcn;
        ULONG ReferenceCount;
    } Extents[1];
};

typedef struct RETRIEVAL_POINTERS_BUFFER {
    ULONG ExtentCount;
    union _LARGE_INTEGER StartingVcn;
     <unnamed-type-Extents>;
    struct {
        union _LARGE_INTEGER NextVcn;
        union _LARGE_INTEGER Lcn;
    } Extents[1];
};

typedef struct RETRIEVAL_POINTER_COUNT {
    ULONG ExtentCount;
};

typedef struct RIO_BUFFERID_t {
};

typedef struct RIO_CQ_t {
};

typedef struct RIO_RQ_t {
};

typedef struct ROUTING_TOKEN {
    PVOID LinkNode;
    ULONG StaticVector;
    UCHAR Flags;
};

typedef struct RX_NBL_CONTEXT {
    NxRxXlat *Queue;
};

typedef struct RX_NB_CONTEXT {
    LONG64 DmaLogicalAddress;
    PVOID RxBufferReturnContext;
};

typedef struct Rtl::KString {
    struct NONPAGED_OBJECT<1920226123> NONPAGED_OBJECT<1920226123>;
    struct _UNICODE_STRING _UNICODE_STRING;
    struct Rtl::KString *Initialize;
    struct Rtl::KString *Initialize;
    VOID KString;
    VOID KString;
    VOID KString;
    struct Rtl::KString *operator=;
};

typedef struct SCOPE_ID {
    ULONG Zone : 28;
    ULONG Level : 4;
    ULONG Value;
};

typedef struct SET_POWER_SETTING_VALUE {
    ULONG Version;
    struct _GUID Guid;
    enum SYSTEM_POWER_CONDITION PowerCondition;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct STARTING_LCN_INPUT_BUFFER {
    union _LARGE_INTEGER StartingLcn;
};

typedef struct STARTING_LCN_INPUT_BUFFER_EX {
    union _LARGE_INTEGER StartingLcn;
    ULONG Flags;
};

typedef struct STARTING_VCN_INPUT_BUFFER {
    union _LARGE_INTEGER StartingVcn;
};

typedef struct SYSTEM_BATTERY_STATE {
    UCHAR AcOnLine;
    UCHAR BatteryPresent;
    UCHAR Charging;
    UCHAR Discharging;
    UCHAR Spare1[3];
    UCHAR Tag;
    ULONG MaxCapacity;
    ULONG RemainingCapacity;
    ULONG Rate;
    ULONG EstimatedTime;
    ULONG DefaultAlert1;
    ULONG DefaultAlert2;
};

typedef struct SYSTEM_POWER_CAPABILITIES {
    UCHAR PowerButtonPresent;
    UCHAR SleepButtonPresent;
    UCHAR LidPresent;
    UCHAR SystemS1;
    UCHAR SystemS2;
    UCHAR SystemS3;
    UCHAR SystemS4;
    UCHAR SystemS5;
    UCHAR HiberFilePresent;
    UCHAR FullWake;
    UCHAR VideoDimPresent;
    UCHAR ApmPresent;
    UCHAR UpsPresent;
    UCHAR ThermalControl;
    UCHAR ProcessorThrottle;
    UCHAR ProcessorMinThrottle;
    UCHAR ProcessorMaxThrottle;
    UCHAR FastSystemS4;
    UCHAR Hiberboot;
    UCHAR WakeAlarmPresent;
    UCHAR AoAc;
    UCHAR DiskSpinDown;
    UCHAR HiberFileType;
    UCHAR AoAcConnectivitySupported;
    UCHAR spare3[6];
    UCHAR SystemBatteriesPresent;
    UCHAR BatteriesAreShortTerm;
    struct BATTERY_REPORTING_SCALE BatteryScale[3];
    enum _SYSTEM_POWER_STATE AcOnLineWake;
    enum _SYSTEM_POWER_STATE SoftLidWake;
    enum _SYSTEM_POWER_STATE RtcWake;
    enum _SYSTEM_POWER_STATE MinDeviceWakeState;
    enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
};

typedef struct SYSTEM_POWER_LEVEL {
    UCHAR Enable;
    UCHAR Spare[3];
    ULONG BatteryLevel;
    struct POWER_ACTION_POLICY PowerPolicy;
    enum _SYSTEM_POWER_STATE MinSystemState;
};

typedef struct SlotArrays {
    PVOID c_adapterDatapathStopping[0];
    PVOID c_datapathHaltDestroying[0];
    PVOID c_datapathPaused[0];
    PVOID c_datapathPausedCreating[0];
    PVOID c_datapathPausedDestroying[0];
    PVOID c_datapathPausedStarting[0];
    PVOID c_datapathPauseStopping[0];
    PVOID c_datapathRemovePaused[0];
    PVOID c_datapathRestartDestroying[0];
    PVOID c_datapathRestartedCreating[0];
    PVOID c_datapathRestartedStarting[0];
    PVOID c_datapathRestartRemoving[0];
    PVOID c_datapathRestartRemoving2[0];
    PVOID c_datapathRestartStopping[0];
    PVOID c_datapathRunning[0];
    PVOID c_datapathStoppedPaused[0];
    PVOID c_datapathStoppingPauseComplete[0];
    PVOID c_halted[0];
    PVOID c_halting[0];
    PVOID c_initialized[0];
    PVOID c_paused[0];
    PVOID c_pauseSurpriseRemoving[0];
    PVOID c_restarted[0];
    PVOID c_surpriseRemovePaused[0];
};

typedef struct SmFx::EVENT_SPECIFICATION {
    USHORT id;
    enum SmFx::EventQueueingDisposition queueingDisposition;
};

typedef struct SmFx::EXTERNAL_TRANSITION {
    USHORT triggeringEventIndex;
    USHORT targetStateIndex;
};

typedef struct SmFx::INTERNAL_TRANSITION {
    USHORT triggeringEventIndex;
    enum SmFx::InternalTransitionFlags flags;
    PVOID action;
};

typedef struct SmFx::LockType {
    ULONG64 lock;
    BOOLEAN isInitialized;
    UCHAR oldIrql;
};

typedef struct SmFx::POP_TRANSITION {
    USHORT triggeringEventIndex;
    USHORT returnEventIndex;
};

typedef struct SmFx::STATE_MACHINE_ENGINE_CONFIG {
    struct SmFx::STATE_MACHINE_SPECIFICATION *machineSpec;
    PVOID context;
    struct _DEVICE_OBJECT *deviceObject;
    ULONG poolTag;
    PVOID logExceptionCallback;
    PVOID logEventEnqueueCallback;
    PVOID logTransitionCallback;
    PVOID machineDestroyedCallback;
    BOOLEAN isWorkerRequired;
    UCHAR stackSize;
};

typedef struct SmFx::STATE_MACHINE_SPECIFICATION {
    UCHAR mainMachine;
    USHORT defaultSyncEvent;
    struct SmFx::SUBMACHINE_SPECIFICATION *machineTable;
    struct SmFx::EVENT_SPECIFICATION *eventTable;
    struct SmFx::STATE_SPECIFICATION *stateTable;
};

typedef struct SmFx::STATE_SPECIFICATION {
    USHORT id;
    enum SmFx::StateFlags flags;
    enum SmFx::StateType type;
    enum SmFx::StateSlotType activeSlots;
    UCHAR callSubmachine;
    PVOID *slots;
};

typedef struct SmFx::STOP_TIMER_ON_EXIT_DETAILS {
    USHORT timerFiredEvent;
    enum SmFx::StopTimerResult *stopTimerFunction;
};

typedef struct SmFx::SUBMACHINE_SPECIFICATION {
    USHORT initialStateIndex;
};

typedef struct SmFx::StateMachineEngine::StateMachineEngineImpl::EVENT_ACTION {
    enum SmFx::StateMachineEngine::StateMachineEngineImpl::EventAction action;
    USHORT eventIndex;
    UCHAR stackDepth;
    struct {
        struct SmFx::EXTERNAL_TRANSITION *transition;
    } external;
    struct {
        struct SmFx::INTERNAL_TRANSITION *transition;
    } internal;
    struct {
        struct SmFx::POP_TRANSITION *transition;
    } pop;
    struct {
        struct SmFx::SUBMACHINE_SPECIFICATION *submachine;
    } call;
};

typedef struct SmFx::StateMachineEngine::StateMachineEngineImpl::EXCEPTION_HISTORY_ENTRY {
    enum SmFx::MachineException exception;
    USHORT relevantEvent;
    USHORT relevantState;
};

typedef struct SmFx::StateMachineEngine::StateMachineEngineImpl::TRANSITION_HISTORY_ENTRY {
    enum SmFx::TransitionType transitionType;
    USHORT processedEvent;
    USHORT stateIndex;
    UCHAR stackDepth;
};

typedef struct SmFx::WorkerType {
    struct _IO_WORKITEM *workItem;
    struct _DEVICE_OBJECT *deviceObject;
};

typedef struct StateMachineEngineConfig {
    VOID StateMachineEngineConfig;
    struct _DEVICE_OBJECT *deviceObject;
    ULONG poolTag;
};

typedef struct StopTimerOnExitDetails {
};

typedef struct TRANSITION_HISTORY_ENTRY {
    enum SmFx::TransitionType transitionType;
    USHORT processedEvent;
    USHORT stateIndex;
    UCHAR stackDepth;
};

typedef struct TRANSPORT_SETTING_ID {
    struct _GUID Guid;
};

typedef struct TranslatedIndirectionEntries {
    struct _NET_CLIENT_RECEIVE_SCALING_INDIRECTION_ENTRY Entries[128];
    ULONG Restore[128];
};

typedef struct TxPacketCompletionStatus {
    NetRingBufferIterator<_NET_PACKET> CompletedTo;
    struct _NET_BUFFER_LIST *CompletedChain;
    ULONG NumCompletedNbls;
    VOID TxPacketCompletionStatus;
};

typedef struct USN_JOURNAL_DATA_V0 {
    ULONG64 UsnJournalID;
    LONG64 FirstUsn;
    LONG64 NextUsn;
    LONG64 LowestValidUsn;
    LONG64 MaxUsn;
    ULONG64 MaximumSize;
    ULONG64 AllocationDelta;
};

typedef struct USN_JOURNAL_DATA_V1 {
    ULONG64 UsnJournalID;
    LONG64 FirstUsn;
    LONG64 NextUsn;
    LONG64 LowestValidUsn;
    LONG64 MaxUsn;
    ULONG64 MaximumSize;
    ULONG64 AllocationDelta;
    USHORT MinSupportedMajorVersion;
    USHORT MaxSupportedMajorVersion;
};

typedef struct USN_JOURNAL_DATA_V2 {
    ULONG64 UsnJournalID;
    LONG64 FirstUsn;
    LONG64 NextUsn;
    LONG64 LowestValidUsn;
    LONG64 MaxUsn;
    ULONG64 MaximumSize;
    ULONG64 AllocationDelta;
    USHORT MinSupportedMajorVersion;
    USHORT MaxSupportedMajorVersion;
    ULONG Flags;
    ULONG64 RangeTrackChunkSize;
    LONG64 RangeTrackFileSizeThreshold;
};

typedef struct USN_RANGE_TRACK_OUTPUT {
    LONG64 Usn;
};

typedef struct USN_RECORD_COMMON_HEADER {
    ULONG RecordLength;
    USHORT MajorVersion;
    USHORT MinorVersion;
};

typedef struct USN_RECORD_EXTENT {
    LONG64 Offset;
    LONG64 Length;
};

typedef struct USN_RECORD_V2 {
    ULONG RecordLength;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG64 FileReferenceNumber;
    ULONG64 ParentFileReferenceNumber;
    LONG64 Usn;
    union _LARGE_INTEGER TimeStamp;
    ULONG Reason;
    ULONG SourceInfo;
    ULONG SecurityId;
    ULONG FileAttributes;
    USHORT FileNameLength;
    USHORT FileNameOffset;
    WCHAR FileName[1];
};

typedef struct USN_RECORD_V3 {
    ULONG RecordLength;
    USHORT MajorVersion;
    USHORT MinorVersion;
    struct _FILE_ID_128 FileReferenceNumber;
    struct _FILE_ID_128 ParentFileReferenceNumber;
    LONG64 Usn;
    union _LARGE_INTEGER TimeStamp;
    ULONG Reason;
    ULONG SourceInfo;
    ULONG SecurityId;
    ULONG FileAttributes;
    USHORT FileNameLength;
    USHORT FileNameOffset;
    WCHAR FileName[1];
};

typedef struct USN_RECORD_V4 {
    struct USN_RECORD_COMMON_HEADER Header;
    struct _FILE_ID_128 FileReferenceNumber;
    struct _FILE_ID_128 ParentFileReferenceNumber;
    LONG64 Usn;
    ULONG Reason;
    ULONG SourceInfo;
    ULONG RemainingExtents;
    USHORT NumberOfExtents;
    USHORT ExtentSize;
    struct USN_RECORD_EXTENT Extents[1];
};

typedef struct USN_TRACK_MODIFIED_RANGES {
    ULONG Flags;
    ULONG Unused;
    ULONG64 ChunkSize;
    LONG64 FileSizeThreshold;
};

typedef struct VOLUME_BITMAP_BUFFER {
    union _LARGE_INTEGER StartingLcn;
    union _LARGE_INTEGER BitmapSize;
    UCHAR Buffer[1];
};

typedef struct WDFCHILDLIST__ {
    LONG unused;
};

typedef struct WDFCMRESLIST__ {
    LONG unused;
};

typedef struct WDFCOLLECTION__ {
    LONG unused;
};

typedef struct WDFCOMMONBUFFER__ {
    LONG unused;
};

typedef struct WDFCOMPANIONTARGET__ {
    LONG unused;
};

typedef struct WDFCXDEVICE_INIT {
};

typedef struct WDFDEVICE_INIT {
};

typedef struct WDFDEVICE__ {
    LONG unused;
};

typedef struct WDFDMAENABLER__ {
    LONG unused;
};

typedef struct WDFDMATRANSACTION__ {
    LONG unused;
};

typedef struct WDFDPC__ {
    LONG unused;
};

typedef struct WDFDRIVER__ {
    LONG unused;
};

typedef struct WDFFILEOBJECT__ {
    LONG unused;
};

typedef struct WDFINTERRUPT__ {
    LONG unused;
};

typedef struct WDFIORESLIST__ {
    LONG unused;
};

typedef struct WDFIORESREQLIST__ {
    LONG unused;
};

typedef struct WDFIOTARGET__ {
    LONG unused;
};

typedef struct WDFKEY__ {
    LONG unused;
};

typedef struct WDFLOOKASIDE__ {
    LONG unused;
};

typedef struct WDFMEMORY__ {
    LONG unused;
};

typedef struct WDFQUEUE__ {
    LONG unused;
};

typedef struct WDFREQUEST__ {
    LONG unused;
};

typedef struct WDFSPINLOCK__ {
    LONG unused;
};

typedef struct WDFSTRING__ {
    LONG unused;
};

typedef struct WDFTIMER__ {
    LONG unused;
};

typedef struct WDFUSBDEVICE__ {
    LONG unused;
};

typedef struct WDFUSBINTERFACE__ {
    LONG unused;
};

typedef struct WDFUSBPIPE__ {
    LONG unused;
};

typedef struct WDFWAITLOCK__ {
    LONG unused;
};

typedef struct WDFWMIINSTANCE__ {
    LONG unused;
};

typedef struct WDFWMIPROVIDER__ {
    LONG unused;
};

typedef struct WDFWORKITEM__ {
    LONG unused;
};

typedef struct WHEA_PCIXDEVICE_REGISTER_PAIR {
    ULONG64 Register;
    ULONG64 Data;
};

typedef struct WMIREGGUIDW {
    struct _GUID Guid;
    ULONG Flags;
    ULONG InstanceCount;
    ULONG InstanceNameList;
    ULONG BaseNameOffset;
    ULONG64 Pdo;
    ULONG64 InstanceInfo;
};

typedef struct WMIREGINFOW {
    ULONG BufferSize;
    ULONG NextWmiRegInfo;
    ULONG RegistryPath;
    ULONG MofResourceName;
    ULONG GuidCount;
    struct WMIREGGUIDW WmiRegGuid[0];
};

typedef struct WPP_RECORDER_COUNTER__ {
    LONG unused;
};

typedef struct WppPointerToUshort {
    USHORT m_val;
    VOID WppPointerToUshort;
    PUSHORT get;
};

typedef struct XSAVE_CPU_ERRATA {
    ULONG NumberOfErrata;
    struct XSAVE_CPU_INFO Errata[1];
};

typedef struct XSAVE_CPU_INFO {
    UCHAR Processor;
    USHORT Family;
    USHORT Model;
    USHORT Stepping;
    USHORT ExtendedModel;
    ULONG ExtendedFamily;
    ULONG64 MicrocodeVersion;
    ULONG Reserved;
};

typedef struct _ACCESS_ALLOWED_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _ACCESS_DENIED_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _ACCESS_REASONS {
    ULONG Data[32];
};

typedef struct _ACCESS_STATE {
    struct _LUID OperationID;
    UCHAR SecurityEvaluated;
    UCHAR GenerateAudit;
    UCHAR GenerateOnClose;
    UCHAR PrivilegesAllocated;
    ULONG Flags;
    ULONG RemainingDesiredAccess;
    ULONG PreviouslyGrantedAccess;
    ULONG OriginalDesiredAccess;
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
    PVOID SecurityDescriptor;
    PVOID AuxData;
     <unnamed-type-Privileges>;
    union {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
        struct _PRIVILEGE_SET PrivilegeSet;
    } Privileges;
    UCHAR AuditPrivileges;
    struct _UNICODE_STRING ObjectName;
    struct _UNICODE_STRING ObjectTypeName;
};

typedef struct _ACE_HEADER {
    UCHAR AceType;
    UCHAR AceFlags;
    USHORT AceSize;
};

typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
};

typedef struct _ACL_REVISION_INFORMATION {
    ULONG AclRevision;
};

typedef struct _ACL_SIZE_INFORMATION {
    ULONG AceCount;
    ULONG AclBytesInUse;
    ULONG AclBytesFree;
};

typedef struct _ACPI_CMOS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ReadCmos;
    PULONG WriteCmos;
};

typedef struct _ACPI_DEBUGGING_DEVICE_IN_USE {
    ULONG NameSpacePathLength;
    WCHAR NameSpacePath[1];
};

typedef struct _ACPI_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GpeConnectVector;
    PLONG GpeDisconnectVector;
    PLONG GpeEnableEvent;
    PLONG GpeDisableEvent;
    PLONG GpeClearStatus;
    PLONG RegisterForDeviceNotifications;
    PVOID UnregisterForDeviceNotifications;
};

typedef struct _ACTIVATION_CONTEXT {
};

typedef struct _ACTIVATION_CONTEXT_DATA {
};

typedef struct _ACTIVATION_CONTEXT_STACK {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
    struct _LIST_ENTRY FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _ADAPTER_OBJECT {
};

typedef struct _ADMINISTRATOR_POWER_POLICY {
    enum _SYSTEM_POWER_STATE MinSleep;
    enum _SYSTEM_POWER_STATE MaxSleep;
    ULONG MinVideoTimeout;
    ULONG MaxVideoTimeout;
    ULONG MinSpindownTimeout;
    ULONG MaxSpindownTimeout;
};

typedef struct _AGP_TARGET_BUS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG SetBusData;
    PULONG GetBusData;
    UCHAR CapabilityID;
};

typedef struct _ALPC_BASIC_INFORMATION {
    ULONG Flags;
    ULONG SequenceNo;
    PVOID PortContext;
};

typedef struct _ALPC_CONTEXT_ATTR {
    PVOID PortContext;
    PVOID MessageContext;
    ULONG Sequence;
    ULONG MessageId;
    ULONG CallbackId;
};

typedef struct _ALPC_DATA_VIEW_ATTR {
    ULONG Flags;
    PVOID SectionHandle;
    PVOID ViewBase;
    ULONG64 ViewSize;
};

typedef struct _ALPC_DIRECT_ATTR {
    PVOID Event;
};

typedef struct _ALPC_HANDLE_ATTR {
    ULONG Flags;
    ULONG Reserved0 : 16;
    ULONG SameAccess : 1;
    ULONG SameAttributes : 1;
    ULONG Indirect : 1;
    ULONG Inherit : 1;
    ULONG Reserved1 : 12;
    PVOID Handle;
    struct _ALPC_HANDLE_ATTR32 *HandleAttrArray;
    ULONG ObjectType;
    ULONG HandleCount;
    ULONG DesiredAccess;
    ULONG GrantedAccess;
};

typedef struct _ALPC_HANDLE_ATTR32 {
    ULONG Flags;
    ULONG Reserved0 : 16;
    ULONG SameAccess : 1;
    ULONG SameAttributes : 1;
    ULONG Indirect : 1;
    ULONG Inherit : 1;
    ULONG Reserved1 : 12;
    ULONG Handle;
    ULONG ObjectType;
    ULONG DesiredAccess;
    ULONG GrantedAccess;
};

typedef struct _ALPC_MESSAGE_ATTRIBUTES {
    ULONG AllocatedAttributes;
    ULONG ValidAttributes;
};

typedef struct _ALPC_MESSAGE_HANDLE_INFORMATION {
    ULONG Index;
    ULONG Flags;
    ULONG Handle;
    ULONG ObjectType;
    ULONG GrantedAccess;
};

typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    PVOID CompletionPort;
};

typedef struct _ALPC_PORT_ATTRIBUTES {
    ULONG Flags;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    ULONG64 MaxMessageLength;
    ULONG64 MemoryBandwidth;
    ULONG64 MaxPoolUsage;
    ULONG64 MaxSectionSize;
    ULONG64 MaxViewSize;
    ULONG64 MaxTotalSectionSize;
    ULONG DupObjectTypes;
    ULONG Reserved;
};

typedef struct _ALPC_PORT_CALLBACK_INFORMATION {
    PVOID CallbackObject;
    PVOID Context;
};

typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION {
    PVOID Buffer;
    ULONG Size;
    ULONG ConcurrencyCount;
    ULONG AttributeFlags;
};

typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION {
    PVOID Buffer;
    ULONG Size;
};

typedef struct _ALPC_SECURITY_ATTR {
    ULONG Flags;
    struct _SECURITY_QUALITY_OF_SERVICE *QoS;
    PVOID ContextHandle;
};

typedef struct _ALPC_SERVER_INFORMATION {
    struct {
        PVOID ThreadHandle;
    } In;
    struct {
        UCHAR ThreadBlocked;
        PVOID ConnectedProcessId;
        struct _UNICODE_STRING ConnectionPortName;
    } Out;
};

typedef struct _ALPC_TOKEN_ATTR {
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    struct _LUID ModifiedId;
};

typedef struct _ALPC_WORK_ON_BEHALF_ATTR {
    struct _ALPC_WORK_ON_BEHALF_TICKET Ticket;
};

typedef struct _ALPC_WORK_ON_BEHALF_TICKET {
    ULONG ThreadId;
    ULONG ThreadCreationTimeLow;
};

typedef struct _AMD64_CONTEXT {
};

typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
    union _LARGE_INTEGER ActivationTime;
    ULONG Flags;
    ULONG ButtonInstanceID;
};

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS {
    struct _DEVICE_OBJECT *ReserveDevice;
};

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_CONFLICT_INFO {
    struct _DEVICE_OBJECT *OwningObject;
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG ArbiterHandler;
    ULONG Flags;
};

typedef struct _ARBITER_LIST_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG AlternativeCount;
    struct _IO_RESOURCE_DESCRIPTOR *Alternatives;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    enum _ARBITER_REQUEST_SOURCE RequestSource;
    ULONG Flags;
    LONG64 WorkSpace;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG SlotNumber;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *Assignment;
    struct _IO_RESOURCE_DESCRIPTOR *SelectedAlternative;
    enum _ARBITER_RESULT Result;
};

typedef struct _ARBITER_PARAMETERS {
     <unnamed-type-Parameters>;
    union {
        struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
        struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
        struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
        struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
        struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
        struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
        struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    } Parameters;
};

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS {
    struct _CM_PARTIAL_RESOURCE_LIST **AllocatedResources;
};

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _IO_RESOURCE_DESCRIPTOR *ConflictingResource;
    PULONG ConflictCount;
    struct _ARBITER_CONFLICT_INFO **Conflicts;
};

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARC_DISK_INFORMATION {
    struct _LIST_ENTRY DiskSignatures;
};

typedef struct _ARC_DISK_SIGNATURE {
    struct _LIST_ENTRY ListEntry;
    ULONG Signature;
    PCHAR ArcName;
    ULONG CheckSum;
    UCHAR ValidPartitionTable;
    UCHAR xInt13;
    UCHAR IsGpt;
    UCHAR Reserved;
    UCHAR GptSignature[16];
    struct _VHD_DISK_SIGNATURE *VhdSignature;
};

typedef struct _ARM64_CONTEXT {
};

typedef struct _ARM64_NT_CONTEXT {
    ULONG ContextFlags;
    ULONG Cpsr;
    ULONG64 X0;
    ULONG64 X1;
    ULONG64 X2;
    ULONG64 X3;
    ULONG64 X4;
    ULONG64 X5;
    ULONG64 X6;
    ULONG64 X7;
    ULONG64 X8;
    ULONG64 X9;
    ULONG64 X10;
    ULONG64 X11;
    ULONG64 X12;
    ULONG64 X13;
    ULONG64 X14;
    ULONG64 X15;
    ULONG64 X16;
    ULONG64 X17;
    ULONG64 X18;
    ULONG64 X19;
    ULONG64 X20;
    ULONG64 X21;
    ULONG64 X22;
    ULONG64 X23;
    ULONG64 X24;
    ULONG64 X25;
    ULONG64 X26;
    ULONG64 X27;
    ULONG64 X28;
    ULONG64 Fp;
    ULONG64 Lr;
    ULONG64 X[31];
    ULONG64 Sp;
    ULONG64 Pc;
    union _ARM64_NT_NEON128 V[32];
    ULONG Fpcr;
    ULONG Fpsr;
    ULONG Bcr[8];
    ULONG64 Bvr[8];
    ULONG Wcr[2];
    ULONG64 Wvr[2];
};

typedef struct _ARM_CONTEXT {
};

typedef struct _ARM_ERRATA_INFO {
    ULONG Flags;
    ULONG SignalIpiOnTlbFlush : 1;
    ULONG Disable32BitEl0TimerReads : 1;
    ULONG Reserved : 30;
};

typedef struct _ARM_LOADER_BLOCK {
    ULONG PlaceHolder;
};

typedef struct _ARP_HEADER {
    USHORT HardwareAddressSpace;
    USHORT ProtocolAddressSpace;
    UCHAR HardwareAddressLength;
    UCHAR ProtocolAddressLength;
    USHORT Opcode;
    UCHAR SenderHardwareAddress[0];
};

typedef struct _ASSEMBLY_STORAGE_MAP {
};

typedef struct _ASSOCIATE_NAMERES_CONTEXT_INPUT {
    struct TRANSPORT_SETTING_ID TransportSettingId;
    ULONG64 Handle;
};

typedef struct _ATOM_BASIC_INFORMATION {
    USHORT UsageCount;
    USHORT Flags;
    USHORT NameLength;
    WCHAR Name[1];
};

typedef struct _ATOM_TABLE_INFORMATION {
    ULONG NumberOfAtoms;
    USHORT Atoms[1];
};

typedef struct _AUX_ACCESS_DATA {
    struct _PRIVILEGE_SET *PrivilegesUsed;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG AccessesToAudit;
    ULONG MaximumAuditMask;
    struct _GUID TransactionId;
    PVOID NewSecurityDescriptor;
    PVOID ExistingSecurityDescriptor;
    PVOID ParentSecurityDescriptor;
    PVOID DeRefSecurityDescriptor;
    PVOID SDLock;
    struct _ACCESS_REASONS AccessReasons;
    UCHAR GenerateStagingEvents;
};

typedef struct _BDCB_IMAGE_INFORMATION {
    enum _BDCB_CLASSIFICATION Classification;
    ULONG ImageFlags;
    struct _UNICODE_STRING ImageName;
    struct _UNICODE_STRING RegistryPath;
    struct _UNICODE_STRING CertificatePublisher;
    struct _UNICODE_STRING CertificateIssuer;
    PVOID ImageHash;
    PVOID CertificateThumbprint;
    ULONG ImageHashAlgorithm;
    ULONG ThumbprintHashAlgorithm;
    ULONG ImageHashLength;
    ULONG CertificateThumbprintLength;
};

typedef struct _BDCB_STATUS_UPDATE_CONTEXT {
    enum _BDCB_STATUS_UPDATE_TYPE StatusType;
};

typedef struct _BLDR_DATA_TABLE_ENTRY {
    struct _KLDR_DATA_TABLE_ENTRY KldrEntry;
    struct _UNICODE_STRING CertificatePublisher;
    struct _UNICODE_STRING CertificateIssuer;
    PVOID ImageHash;
    PVOID CertificateThumbprint;
    ULONG ImageHashAlgorithm;
    ULONG ThumbprintHashAlgorithm;
    ULONG ImageHashLength;
    ULONG CertificateThumbprintLength;
    ULONG LoadInformation;
    ULONG Flags;
};

typedef struct _BOOTDISK_INFORMATION {
    LONG64 BootPartitionOffset;
    LONG64 SystemPartitionOffset;
    ULONG BootDeviceSignature;
    ULONG SystemDeviceSignature;
};

typedef struct _BOOTDISK_INFORMATION_EX {
    LONG64 BootPartitionOffset;
    LONG64 SystemPartitionOffset;
    ULONG BootDeviceSignature;
    ULONG SystemDeviceSignature;
    struct _GUID BootDeviceGuid;
    struct _GUID SystemDeviceGuid;
    UCHAR BootDeviceIsGpt;
    UCHAR SystemDeviceIsGpt;
};

typedef struct _BOOTDISK_INFORMATION_LITE {
    ULONG NumberEntries;
    struct _LOADER_PARTITION_INFORMATION_EX Entries[1];
};

typedef struct _BOOT_AREA_INFO {
    ULONG BootSectorCount;
     <unnamed-type-BootSectors>;
    struct {
        union _LARGE_INTEGER Offset;
    } BootSectors[2];
};

typedef struct _BOOT_DRIVER_LIST_ENTRY {
    struct _LIST_ENTRY Link;
    struct _UNICODE_STRING FilePath;
    struct _UNICODE_STRING RegistryPath;
    struct _BLDR_DATA_TABLE_ENTRY *LdrEntry;
    LONG LoadStatus;
    ULONG LoadInformation;
};

typedef struct _BOOT_ENTROPY_LDR_RESULT {
    ULONG maxEntropySources;
    struct _BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[10];
    UCHAR SeedBytesForCng[48];
    UCHAR RngBytesForNtoskrnl[1024];
    UCHAR KdEntropy[32];
};

typedef struct _BOOT_ENTROPY_NT_RESULT {
    ULONG maxEntropySources;
    struct _BOOT_ENTROPY_SOURCE_NT_RESULT EntropySourceResult[10];
    UCHAR SeedBytesForCng[48];
};

typedef struct _BOOT_ENTROPY_SOURCE_LDR_RESULT {
    enum _BOOT_ENTROPY_SOURCE_ID SourceId;
    ULONG64 Policy;
    enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
    LONG ResultStatus;
    ULONG64 Time;
    ULONG EntropyLength;
    UCHAR EntropyData[64];
};

typedef struct _BOOT_ENTROPY_SOURCE_NT_RESULT {
    enum _BOOT_ENTROPY_SOURCE_ID SourceId;
    ULONG64 Policy;
    enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
    LONG ResultStatus;
    ULONG64 Time;
    ULONG EntropyLength;
    UCHAR EntropyData[64];
};

typedef struct _BOOT_ENTRY {
    ULONG Version;
    ULONG Length;
    ULONG Id;
    ULONG Attributes;
    ULONG FriendlyNameOffset;
    ULONG BootFilePathOffset;
    ULONG OsOptionsLength;
    UCHAR OsOptions[1];
};

typedef struct _BOOT_ENTRY_LIST {
    ULONG NextEntryOffset;
    struct _BOOT_ENTRY BootEntry;
};

typedef struct _BOOT_OPTIONS {
    ULONG Version;
    ULONG Length;
    ULONG Timeout;
    ULONG CurrentBootEntryId;
    ULONG NextBootEntryId;
    WCHAR HeadlessRedirection[1];
};

typedef struct _BSSID_INFO {
    UCHAR BSSID[6];
    UCHAR PMKID[16];
};

typedef struct _BUS_HANDLER {
};

typedef struct _BUS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PUCHAR TranslateBusAddress;
    struct _DMA_ADAPTER **GetDmaAdapter;
    PULONG SetBusData;
    PULONG GetBusData;
};

typedef struct _BUS_RESOURCE_UPDATE_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GetUpdatedBusResource;
};

typedef struct _CACHE_DESCRIPTOR {
    UCHAR Level;
    UCHAR Associativity;
    USHORT LineSize;
    ULONG Size;
    enum _PROCESSOR_CACHE_TYPE Type;
};

typedef struct _CACHE_RELATIONSHIP {
    UCHAR Level;
    UCHAR Associativity;
    USHORT LineSize;
    ULONG CacheSize;
    enum _PROCESSOR_CACHE_TYPE Type;
    UCHAR Reserved[20];
    struct _GROUP_AFFINITY GroupMask;
};

typedef struct _CALLBACK_OBJECT {
};

typedef struct _CALL_FRAME {
    PVOID ReturnAddress;
    PVOID Param1Home;
    PVOID Param2Home;
    PVOID Param3Home;
    PVOID Param4Home;
};

typedef struct _CFG_CALL_TARGET_INFO {
    ULONG64 Offset;
    ULONG64 Flags;
};

typedef struct _CFG_CALL_TARGET_LIST_INFORMATION {
    ULONG NumberOfEntries;
    ULONG Reserved;
    PULONG NumberOfEntriesProcessed;
    struct _CFG_CALL_TARGET_INFO *CallTargetInfo;
    PVOID Section;
    ULONG64 FileOffset;
};

typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
    USHORT Version;
    USHORT Reserved;
    ULONG AttributeCount;
     <unnamed-type-Attribute>;
    union {
        struct _CLAIM_SECURITY_ATTRIBUTE_V1 *pAttributeV1;
    } Attribute;
};

typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    ULONG64 Version;
    PWCHAR Name;
};

typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID pValue;
    ULONG ValueLength;
};

typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
    ULONG Name;
    USHORT ValueType;
    USHORT Reserved;
    ULONG Flags;
    ULONG ValueCount;
     <unnamed-type-Values>;
    union {
        ULONG pInt64[1];
        ULONG pUint64[1];
        ULONG ppString[1];
        ULONG pFqbn[1];
        ULONG pOctetString[1];
    } Values;
};

typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
    PWCHAR Name;
    USHORT ValueType;
    USHORT Reserved;
    ULONG Flags;
    ULONG ValueCount;
     <unnamed-type-Values>;
    union {
        PLONG64 pInt64;
        PULONG64 pUint64;
        PWCHAR *ppString;
        struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE *pFqbn;
        struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE *pOctetString;
    } Values;
};

typedef struct _CLFS_LOG_NAME_INFORMATION {
    USHORT NameLengthInBytes;
    WCHAR Name[1];
};

typedef struct _CLFS_MGMT_CLIENT_REGISTRATION {
    ULONG Version;
    PLONG AdvanceTailCallback;
    PVOID AdvanceTailCallbackData;
    PVOID LogGrowthCompleteCallback;
    PVOID LogGrowthCompleteCallbackData;
    PVOID LogUnpinnedCallback;
    PVOID LogUnpinnedCallbackData;
};

typedef struct _CLFS_MGMT_NOTIFICATION {
    enum _CLFS_MGMT_NOTIFICATION_TYPE Notification;
    struct _CLS_LSN Lsn;
    USHORT LogIsPinned;
};

typedef struct _CLFS_MGMT_POLICY {
    ULONG Version;
    ULONG LengthInBytes;
    ULONG PolicyFlags;
    enum _CLFS_MGMT_POLICY_TYPE PolicyType;
     <unnamed-type-PolicyParameters>;
    union {
         <unnamed-type-MaximumSize>;
        struct {
            ULONG Containers;
        } MaximumSize;
         <unnamed-type-MinimumSize>;
        struct {
            ULONG Containers;
        } MinimumSize;
         <unnamed-type-NewContainerSize>;
        struct {
            ULONG SizeInBytes;
        } NewContainerSize;
         <unnamed-type-GrowthRate>;
        struct {
            ULONG AbsoluteGrowthInContainers;
            ULONG RelativeGrowthPercentage;
        } GrowthRate;
         <unnamed-type-LogTail>;
        struct {
            ULONG MinimumAvailablePercentage;
            ULONG MinimumAvailableContainers;
        } LogTail;
         <unnamed-type-AutoShrink>;
        struct {
            ULONG Percentage;
        } AutoShrink;
         <unnamed-type-AutoGrow>;
        struct {
            ULONG Enabled;
        } AutoGrow;
         <unnamed-type-NewContainerPrefix>;
        struct {
            USHORT PrefixLengthInBytes;
            WCHAR PrefixString[1];
        } NewContainerPrefix;
         <unnamed-type-NewContainerSuffix>;
        struct {
            ULONG64 NextContainerSuffix;
        } NewContainerSuffix;
         <unnamed-type-NewContainerExtension>;
        struct {
            USHORT ExtensionLengthInBytes;
            WCHAR ExtensionString[1];
        } NewContainerExtension;
    } PolicyParameters;
};

typedef struct _CLFS_NODE_ID {
    ULONG cType;
    ULONG cbNode;
};

typedef struct _CLFS_PHYSICAL_LSN_INFORMATION {
    UCHAR StreamIdentifier;
    struct _CLS_LSN VirtualLsn;
    struct _CLS_LSN PhysicalLsn;
};

typedef struct _CLFS_STREAM_ID_INFORMATION {
    UCHAR StreamIdentifier;
};

typedef struct _CLIENT_ID {
    PVOID UniqueProcess;
    PVOID UniqueThread;
};

typedef struct _CLIENT_ID64 {
    ULONG64 UniqueProcess;
    ULONG64 UniqueThread;
};

typedef struct _CLS_ARCHIVE_DESCRIPTOR {
    ULONG64 coffLow;
    ULONG64 coffHigh;
    struct _CLS_CONTAINER_INFORMATION infoContainer;
};

typedef struct _CLS_CONTAINER_INFORMATION {
    ULONG FileAttributes;
    ULONG64 CreationTime;
    ULONG64 LastAccessTime;
    ULONG64 LastWriteTime;
    LONG64 ContainerSize;
    ULONG FileNameActualLength;
    ULONG FileNameLength;
    WCHAR FileName[256];
    ULONG State;
    ULONG PhysicalContainerId;
    ULONG LogicalContainerId;
};

typedef struct _CLS_INFORMATION {
    LONG64 TotalAvailable;
    LONG64 CurrentAvailable;
    LONG64 TotalReservation;
    ULONG64 BaseFileSize;
    ULONG64 ContainerSize;
    ULONG TotalContainers;
    ULONG FreeContainers;
    ULONG TotalClients;
    ULONG Attributes;
    ULONG FlushThreshold;
    ULONG SectorSize;
    struct _CLS_LSN MinArchiveTailLsn;
    struct _CLS_LSN BaseLsn;
    struct _CLS_LSN LastFlushedLsn;
    struct _CLS_LSN LastLsn;
    struct _CLS_LSN RestartLsn;
    struct _GUID Identity;
};

typedef struct _CLS_IO_STATISTICS {
    struct _CLS_IO_STATISTICS_HEADER hdrIoStats;
    ULONG64 cFlush;
    ULONG64 cbFlush;
    ULONG64 cMetaFlush;
    ULONG64 cbMetaFlush;
};

typedef struct _CLS_IO_STATISTICS_HEADER {
    UCHAR ubMajorVersion;
    UCHAR ubMinorVersion;
    enum _CLFS_IOSTATS_CLASS eStatsClass;
    USHORT cbLength;
    ULONG coffData;
};

typedef struct _CLS_LSN {
    ULONG64 Internal;
};

typedef struct _CLS_SCAN_CONTEXT {
    struct _CLFS_NODE_ID cidNode;
    struct _FILE_OBJECT *plfoLog;
    ULONG cIndex;
    ULONG cContainers;
    ULONG cContainersReturned;
    UCHAR eScanMode;
    struct _CLS_CONTAINER_INFORMATION *pinfoContainer;
};

typedef struct _CLS_WRITE_ENTRY {
    PVOID Buffer;
    ULONG ByteLength;
};

typedef struct _CLUSTER_RANGE {
    union _LARGE_INTEGER StartingCluster;
    union _LARGE_INTEGER ClusterCount;
};

typedef struct _CMC_DRIVER_INFO {
    PVOID ExceptionCallback;
    PVOID DpcCallback;
    PVOID DeviceContext;
};

typedef struct _CM_COMPONENT_INFORMATION {
    struct _DEVICE_FLAGS Flags;
    ULONG Version;
    ULONG Key;
    ULONG64 AffinityMask;
};

typedef struct _CM_DISK_GEOMETRY_DEVICE_DATA {
    ULONG BytesPerSector;
    ULONG NumberOfCylinders;
    ULONG SectorsPerTrack;
    ULONG NumberOfHeads;
};

typedef struct _CM_EISA_FUNCTION_INFORMATION {
    ULONG CompressedId;
    UCHAR IdSlotFlags1;
    UCHAR IdSlotFlags2;
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    UCHAR Selections[26];
    UCHAR FunctionFlags;
    UCHAR TypeString[80];
    struct _EISA_MEMORY_CONFIGURATION EisaMemory[9];
    struct _EISA_IRQ_CONFIGURATION EisaIrq[7];
    struct _EISA_DMA_CONFIGURATION EisaDma[4];
    struct _EISA_PORT_CONFIGURATION EisaPort[20];
    UCHAR InitializationData[60];
};

typedef struct _CM_EISA_SLOT_INFORMATION {
    UCHAR ReturnCode;
    UCHAR ReturnFlags;
    UCHAR MajorRevision;
    UCHAR MinorRevision;
    USHORT Checksum;
    UCHAR NumberFunctions;
    UCHAR FunctionInformation;
    ULONG CompressedId;
};

typedef struct _CM_FLOPPY_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    CHAR Size[8];
    ULONG MaxDensity;
    ULONG MountDensity;
    UCHAR StepRateHeadUnloadTime;
    UCHAR HeadLoadTime;
    UCHAR MotorOffTime;
    UCHAR SectorLengthCode;
    UCHAR SectorPerTrack;
    UCHAR ReadWriteGapLength;
    UCHAR DataTransferLength;
    UCHAR FormatGapLength;
    UCHAR FormatFillCharacter;
    UCHAR HeadSettleTime;
    UCHAR MotorSettleTime;
    UCHAR MaximumTrackValue;
    UCHAR DataTransferRate;
};

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

typedef struct _CM_INT13_DRIVE_PARAMETER {
    USHORT DriveSelect;
    ULONG MaxCylinders;
    USHORT SectorsPerTrack;
    USHORT MaxHeads;
    USHORT NumberDrives;
};

typedef struct _CM_KEYBOARD_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR Type;
    UCHAR Subtype;
    USHORT KeyboardFlags;
};

typedef struct _CM_MCA_POS_DATA {
    USHORT AdapterId;
    UCHAR PosData1;
    UCHAR PosData2;
    UCHAR PosData3;
    UCHAR PosData4;
};

typedef struct _CM_MONITOR_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT HorizontalScreenSize;
    USHORT VerticalScreenSize;
    USHORT HorizontalResolution;
    USHORT VerticalResolution;
    USHORT HorizontalDisplayTimeLow;
    USHORT HorizontalDisplayTime;
    USHORT HorizontalDisplayTimeHigh;
    USHORT HorizontalBackPorchLow;
    USHORT HorizontalBackPorch;
    USHORT HorizontalBackPorchHigh;
    USHORT HorizontalFrontPorchLow;
    USHORT HorizontalFrontPorch;
    USHORT HorizontalFrontPorchHigh;
    USHORT HorizontalSyncLow;
    USHORT HorizontalSync;
    USHORT HorizontalSyncHigh;
    USHORT VerticalBackPorchLow;
    USHORT VerticalBackPorch;
    USHORT VerticalBackPorchHigh;
    USHORT VerticalFrontPorchLow;
    USHORT VerticalFrontPorch;
    USHORT VerticalFrontPorchHigh;
    USHORT VerticalSyncLow;
    USHORT VerticalSync;
    USHORT VerticalSyncHigh;
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
     <unnamed-type-u>;
    union {
         <unnamed-type-Generic>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Generic;
         <unnamed-type-Port>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Port;
         <unnamed-type-Interrupt>;
        struct {
            ULONG Level;
            ULONG Vector;
            ULONG64 Affinity;
        } Interrupt;
         <unnamed-type-MessageInterrupt>;
        struct {
            struct {
                USHORT Reserved;
                USHORT MessageCount;
                ULONG Vector;
                ULONG64 Affinity;
            } Raw;
            struct {
                ULONG Level;
                ULONG Vector;
                ULONG64 Affinity;
            } Translated;
        } MessageInterrupt;
         <unnamed-type-Memory>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Memory;
         <unnamed-type-Dma>;
        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;
         <unnamed-type-DmaV3>;
        struct {
            ULONG Channel;
            ULONG RequestLine;
            UCHAR TransferWidth;
            UCHAR Reserved1;
            UCHAR Reserved2;
            UCHAR Reserved3;
        } DmaV3;
         <unnamed-type-DevicePrivate>;
        struct {
            ULONG Data[3];
        } DevicePrivate;
         <unnamed-type-BusNumber>;
        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;
         <unnamed-type-DeviceSpecificData>;
        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
         <unnamed-type-Memory40>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length40;
        } Memory40;
         <unnamed-type-Memory48>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length48;
        } Memory48;
         <unnamed-type-Memory64>;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length64;
        } Memory64;
         <unnamed-type-Connection>;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

typedef struct _CM_PCCARD_DEVICE_DATA {
    UCHAR Flags;
    UCHAR ErrorCode;
    USHORT Reserved;
    ULONG BusData;
    ULONG DeviceId;
    ULONG LegacyBaseAddress;
    UCHAR IRQMap[16];
};

typedef struct _CM_PNP_BIOS_DEVICE_NODE {
    USHORT Size;
    UCHAR Node;
    ULONG ProductId;
    UCHAR DeviceType[3];
    USHORT DeviceAttributes;
};

typedef struct _CM_PNP_BIOS_INSTALLATION_CHECK {
    UCHAR Signature[4];
    UCHAR Revision;
    UCHAR Length;
    USHORT ControlField;
    UCHAR Checksum;
    ULONG EventFlagAddress;
    USHORT RealModeEntryOffset;
    USHORT RealModeEntrySegment;
    USHORT ProtectedModeEntryOffset;
    ULONG ProtectedModeCodeBaseAddress;
    ULONG OemDeviceId;
    USHORT RealModeDataBaseAddress;
    ULONG ProtectedModeDataBaseAddress;
};

typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

typedef struct _CM_ROM_BLOCK {
    ULONG Address;
    ULONG Size;
};

typedef struct _CM_SCSI_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR HostIdentifier;
};

typedef struct _CM_SERIAL_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG BaudClock;
};

typedef struct _CM_SONIC_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT DataConfigurationRegister;
    UCHAR EthernetAddress[8];
};

typedef struct _CM_VIDEO_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG VideoClock;
};

typedef struct _COMPOUND_ACCESS_ALLOWED_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    USHORT CompoundAceType;
    USHORT Reserved;
    ULONG SidStart;
};

typedef struct _COMPRESSED_DATA_INFO {
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};

typedef struct _CONFIGURATION_COMPONENT {
    enum _CONFIGURATION_CLASS Class;
    enum _CONFIGURATION_TYPE Type;
    struct _DEVICE_FLAGS Flags;
    USHORT Version;
    USHORT Revision;
    ULONG Key;
    ULONG AffinityMask;
    USHORT Group;
    USHORT GroupIndex;
    ULONG ConfigurationDataLength;
    ULONG IdentifierLength;
    PCHAR Identifier;
};

typedef struct _CONFIGURATION_COMPONENT_DATA {
    struct _CONFIGURATION_COMPONENT_DATA *Parent;
    struct _CONFIGURATION_COMPONENT_DATA *Child;
    struct _CONFIGURATION_COMPONENT_DATA *Sibling;
    struct _CONFIGURATION_COMPONENT ComponentEntry;
    PVOID ConfigurationData;
};

typedef struct _CONFIGURATION_INFORMATION {
    ULONG DiskCount;
    ULONG FloppyCount;
    ULONG CdRomCount;
    ULONG TapeCount;
    ULONG ScsiPortCount;
    ULONG SerialCount;
    ULONG ParallelCount;
    UCHAR AtDiskPrimaryAddressClaimed;
    UCHAR AtDiskSecondaryAddressClaimed;
    ULONG Version;
    ULONG MediumChangerCount;
};

typedef struct _CONTAINER_ID_INFO {
    struct _GUID ContainerId;
    ULONG Flags;
};

typedef struct _CONTAINER_ROOT_INFO_INPUT {
    ULONG Flags;
};

typedef struct _CONTAINER_ROOT_INFO_OUTPUT {
    USHORT ContainerRootIdLength;
    UCHAR ContainerRootId[1];
};

typedef struct _CONTAINER_VOLUME_STATE {
    ULONG Flags;
};

typedef struct _CONTEXT {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5Home;
    ULONG64 P6Home;
    ULONG ContextFlags;
    ULONG MxCsr;
    USHORT SegCs;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    USHORT SegSs;
    ULONG EFlags;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rbx;
    ULONG64 Rsp;
    ULONG64 Rbp;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Rip;
    struct _XSAVE_FORMAT FltSave;
    struct _M128A Header[2];
    struct _M128A Legacy[8];
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    struct _M128A VectorRegister[26];
    ULONG64 VectorControl;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
};

typedef struct _CONTEXT_CHUNK {
    LONG Offset;
    ULONG Length;
};

typedef struct _CONTEXT_EX {
    struct _CONTEXT_CHUNK All;
    struct _CONTEXT_CHUNK Legacy;
    struct _CONTEXT_CHUNK XState;
};

typedef struct _CONTROLLER_OBJECT {
    SHORT Type;
    SHORT Size;
    PVOID ControllerExtension;
    struct _KDEVICE_QUEUE DeviceWaitQueue;
    ULONG Spare1;
    union _LARGE_INTEGER Spare2;
};

typedef struct _COORDINATED_IDLE_DEPENDENCY {
    ULONG ProcessorIndex;
    ULONG OptionCount;
    struct _PEP_COORDINATED_DEPENDENCY_OPTION *Options;
};

typedef struct _COORDINATED_IDLE_STATE {
    struct _KAFFINITY_EX Processors;
    struct _UNICODE_STRING Name;
    ULONG64 LevelId;
    ULONG Latency;
    ULONG BreakEvenTime;
    ULONG MaximumDependencyOptions;
    ULONG DependencyCount;
    UCHAR Platform;
    UCHAR WakesSpuriously;
    UCHAR Interruptible;
    UCHAR ContextLost;
    struct _COORDINATED_IDLE_DEPENDENCY *Dependencies;
};

typedef struct _COORDINATED_IDLE_STATES {
    ULONG Count;
    PULONG IdleTest;
    PLONG IdlePreExecute;
    PVOID IdleComplete;
    PLONG QueryPlatformStateResidency;
    UCHAR Update;
    struct _COORDINATED_IDLE_STATE State[1];
};

typedef struct _COUNTED_REASON_CONTEXT {
    ULONG Version;
    ULONG Flags;
    struct _UNICODE_STRING ResourceFileName;
    USHORT ResourceReasonId;
    ULONG StringCount;
    struct _UNICODE_STRING *ReasonStrings;
    struct _UNICODE_STRING SimpleString;
};

typedef struct _COUNTER_READING {
    enum _HARDWARE_COUNTER_TYPE Type;
    ULONG Index;
    ULONG64 Start;
    ULONG64 Total;
};

typedef struct _COVERAGE_MODULES {
    ULONG ListAndReset;
    ULONG NumberOfModules;
    struct _COVERAGE_MODULE_REQUEST ModuleRequestInfo;
    struct _COVERAGE_MODULE_INFO Modules[1];
};

typedef struct _COVERAGE_MODULE_INFO {
    ULONG ModuleInfoSize;
    ULONG IsBinaryLoaded;
    struct _UNICODE_STRING ModulePathName;
    ULONG CoverageSectionSize;
    UCHAR CoverageSection[1];
};

typedef struct _COVERAGE_MODULE_REQUEST {
    enum _COVERAGE_REQUEST_CODES RequestType;
     <unnamed-type-SearchInfo>;
    union {
        UCHAR MD5Hash[16];
        struct _UNICODE_STRING ModuleName;
    } SearchInfo;
};

typedef struct _COVERAGE_SECTION_HEADER {
    ULONG Signature;
    ULONG CoverageType;
    UCHAR MD5Hash[16];
    ULONG CoverageSectionSize;
    ULONG CoverageVectorSize;
    ULONG CoverageVectorOffset;
    ULONG ExtraDataOffset;
};

typedef struct _COVERAGE_UNLOADED_MODULE_ENTRY {
    struct _LIST_ENTRY NextEntry;
    struct _UNICODE_STRING BaseDllName;
    struct _UNICODE_STRING FullDllName;
    ULONG CoverageSectionSize;
    PVOID CoverageSection;
};

typedef struct _CO_ADDRESS {
    ULONG AddressSize;
    UCHAR Address[1];
};

typedef struct _CO_ADDRESS_LIST {
    ULONG NumberOfAddressesAvailable;
    ULONG NumberOfAddresses;
    struct _CO_ADDRESS AddressList;
};

typedef struct _CO_CALL_MANAGER_PARAMETERS {
    struct _flowspec Transmit;
    struct _flowspec Receive;
    struct _CO_SPECIFIC_PARAMETERS CallMgrSpecific;
};

typedef struct _CO_CALL_PARAMETERS {
    ULONG Flags;
    struct _CO_CALL_MANAGER_PARAMETERS *CallMgrParameters;
    struct _CO_MEDIA_PARAMETERS *MediaParameters;
};

typedef struct _CO_MEDIA_PARAMETERS {
    ULONG Flags;
    ULONG ReceivePriority;
    ULONG ReceiveSizeHint;
    struct _CO_SPECIFIC_PARAMETERS MediaSpecific;
};

typedef struct _CO_PVC {
    PVOID NdisAfHandle;
    struct _CO_SPECIFIC_PARAMETERS PvcParameters;
};

typedef struct _CO_SPECIFIC_PARAMETERS {
    ULONG ParamType;
    ULONG Length;
    UCHAR Parameters[1];
};

typedef struct _CPE_DRIVER_INFO {
    PVOID ExceptionCallback;
    PVOID DpcCallback;
    PVOID DeviceContext;
};

typedef struct _CPTABLEINFO {
    USHORT CodePage;
    USHORT MaximumCharacterSize;
    USHORT DefaultChar;
    USHORT UniDefaultChar;
    USHORT TransDefaultChar;
    USHORT TransUniDefaultChar;
    USHORT DBCSCodePage;
    UCHAR LeadByte[12];
    PUSHORT MultiByteTable;
    PVOID WideCharTable;
    PUSHORT DBCSRanges;
    PUSHORT DBCSOffsets;
};

typedef struct _CRASHDUMP_FUNCTIONS_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG PowerOn;
};

typedef struct _CREATE_USER_PROCESS_ECP_CONTEXT {
    USHORT Size;
    USHORT Reserved;
    PVOID AccessToken;
};

typedef struct _CRITICAL_PROCESS_EXCEPTION_DATA {
    struct _GUID ReportId;
    struct _UNICODE_STRING ModuleName;
    ULONG ModuleTimestamp;
    ULONG ModuleSize;
    ULONG64 Offset;
};

typedef struct _CSADDR_INFO {
    struct _SOCKET_ADDRESS LocalAddr;
    struct _SOCKET_ADDRESS RemoteAddr;
    LONG iSocketType;
    LONG iProtocol;
};

typedef struct _CSTRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _CSV_CONTROL_PARAM {
    enum _CSV_CONTROL_OP Operation;
    LONG64 Unused;
};

typedef struct _CSV_IS_OWNED_BY_CSVFS {
    UCHAR OwnedByCSVFS;
};

typedef struct _CSV_MGMT_LOCK {
    ULONG Flags;
};

typedef struct _CSV_NAMESPACE_INFO {
    ULONG Version;
    ULONG DeviceNumber;
    union _LARGE_INTEGER StartingOffset;
    ULONG SectorSize;
};

typedef struct _CSV_QUERY_FILE_REVISION {
    LONG64 FileId;
    LONG64 FileRevision[3];
};

typedef struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
    struct _FILE_ID_128 FileId;
    LONG64 FileRevision[3];
};

typedef struct _CSV_QUERY_MDS_PATH {
    ULONG MdsNodeId;
    ULONG DsNodeId;
    ULONG PathLength;
    WCHAR Path[1];
};

typedef struct _CSV_QUERY_MDS_PATH_V2 {
    LONG64 Version;
    ULONG RequiredSize;
    ULONG MdsNodeId;
    ULONG DsNodeId;
    ULONG Flags;
    enum _CSVFS_DISK_CONNECTIVITY DiskConnectivity;
    struct _GUID VolumeId;
    ULONG IpAddressOffset;
    ULONG IpAddressLength;
    ULONG PathOffset;
    ULONG PathLength;
};

typedef struct _CSV_QUERY_REDIRECT_STATE {
    ULONG MdsNodeId;
    ULONG DsNodeId;
    UCHAR FileRedirected;
};

typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
    ULONG64 VetoedFromAltitudeIntegral;
    ULONG64 VetoedFromAltitudeDecimal;
    WCHAR Reason[256];
};

typedef struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
    ULONG MdsNodeId;
    ULONG DsNodeId;
    UCHAR IsDiskConnected;
    UCHAR ClusterEnableDirectIo;
    enum _CSVFS_DISK_CONNECTIVITY DiskConnectivity;
};

typedef struct _CURDIR {
    struct _UNICODE_STRING DosPath;
    PVOID Handle;
};

typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
    ULONG Size;
    PWCHAR TriggerId;
};

typedef struct _D3COLD_AUX_POWER_AND_TIMING_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID RequestCorePowerRail;
    PLONG RequestAuxPower;
    PLONG RequestPerstDelay;
};

typedef struct _D3COLD_SUPPORT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID SetD3ColdSupport;
    PLONG GetIdleWakeInfo;
    PLONG GetD3ColdCapability;
    PLONG GetBusDriverD3ColdSupport;
    PVOID GetLastTransitionStatus;
};

typedef struct _DBGK_WERUSER_PARAM {
    PVOID ThreadHandle;
    ULONG64 Flags;
    struct _EXCEPTION_RECORD ExceptionRecord;
};

typedef struct _DBGK_WORKER_PARAM {
    struct _ETHREAD *Thread;
    ULONG64 WerFlags;
    UCHAR HasExceptionRecord;
    struct _EXCEPTION_RECORD ExceptionRecord;
    struct _WORK_QUEUE_ITEM WorkItem;
};

typedef struct _DEBUGGING_DEVICE_IN_USE {
    enum KD_NAMESPACE_ENUM NameSpace;
    ULONG StructureLength;
    struct _ACPI_DEBUGGING_DEVICE_IN_USE AcpiDevice;
    struct _PCI_DEBUGGING_DEVICE_IN_USE PciDevice;
};

typedef struct _DEBUGGING_DEVICE_IN_USE_INFORMATION {
    ULONG DeviceCount;
    struct _DEBUGGING_DEVICE_IN_USE Device[1];
};

typedef struct _DEBUG_DEVICE_DESCRIPTOR {
    ULONG Bus;
    ULONG Slot;
    USHORT Segment;
    USHORT VendorID;
    USHORT DeviceID;
    UCHAR BaseClass;
    UCHAR SubClass;
    UCHAR ProgIf;
    UCHAR Flags;
    UCHAR DbgHalScratchAllocated : 1;
    UCHAR DbgBarsMapped : 1;
    UCHAR DbgScratchAllocated : 1;
    UCHAR Initialized;
    UCHAR Configured;
    struct DEBUG_DEVICE_ADDRESS BaseAddress[6];
    struct DEBUG_MEMORY_REQUIREMENTS Memory;
    USHORT PortType;
    USHORT PortSubtype;
    PVOID OemData;
    ULONG OemDataLength;
    enum KD_NAMESPACE_ENUM NameSpace;
    PWCHAR NameSpacePath;
    ULONG NameSpacePathLength;
    ULONG TransportType;
    struct _DEBUG_TRANSPORT_DATA TransportData;
};

typedef struct _DEBUG_TRANSPORT_DATA {
    ULONG HwContextSize;
    UCHAR UseSerialFraming;
    UCHAR ValidUSBCoreId;
    UCHAR USBCoreId;
};

typedef struct _DECRYPTION_STATUS_BUFFER {
    UCHAR NoEncryptedStreams;
};

typedef struct _DEDUP_CHUNK_INFORMATION_HASH32 {
    ULONG ChunkFlags;
    LONG64 ChunkOffsetInFile;
    LONG64 ChunkSize;
    UCHAR HashVal[32];
};

typedef struct _DEDUP_FILE_OPERATION {
    ULONG Code;
};

typedef struct _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER {
    ULONG Version;
    ULONG QueryFlags;
    ULONG HashAlgorithm;
    union _LARGE_INTEGER RangeOffsetInFile;
    union _LARGE_INTEGER RangeLength;
};

typedef struct _DEFINE_STORAGE_RESERVE_INPUT {
    ULONG Version;
    ULONG Flags;
    ULONG AreaDefinitionOffset;
    ULONG AreaDefinitionCount;
    struct _STORAGE_RESERVE_AREA_DEFINITION AreaDefinition[1];
};

typedef struct _DELETE_STORAGE_RESERVE_INPUT {
    ULONG Version;
    ULONG Flags;
    ULONG AreaIdOffset;
    ULONG AreaIdCount;
    enum _STORAGE_RESERVE_ID AreaId[1];
};

typedef struct _DEVICE_CAPABILITIES {
    USHORT Size;
    USHORT Version;
    ULONG DeviceD1 : 1;
    ULONG DeviceD2 : 1;
    ULONG LockSupported : 1;
    ULONG EjectSupported : 1;
    ULONG Removable : 1;
    ULONG DockDevice : 1;
    ULONG UniqueID : 1;
    ULONG SilentInstall : 1;
    ULONG RawDeviceOK : 1;
    ULONG SurpriseRemovalOK : 1;
    ULONG WakeFromD0 : 1;
    ULONG WakeFromD1 : 1;
    ULONG WakeFromD2 : 1;
    ULONG WakeFromD3 : 1;
    ULONG HardwareDisabled : 1;
    ULONG NonDynamic : 1;
    ULONG WarmEjectSupported : 1;
    ULONG NoDisplayInUI : 1;
    ULONG Reserved1 : 1;
    ULONG WakeFromInterrupt : 1;
    ULONG SecureDevice : 1;
    ULONG ChildOfVgaEnabledBridge : 1;
    ULONG DecodeIoOnBoot : 1;
    ULONG Reserved : 9;
    ULONG Address;
    ULONG UINumber;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _SYSTEM_POWER_STATE SystemWake;
    enum _DEVICE_POWER_STATE DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct _DEVICE_DESCRIPTION {
    ULONG Version;
    UCHAR Master;
    UCHAR ScatterGather;
    UCHAR DemandMode;
    UCHAR AutoInitialize;
    UCHAR Dma32BitAddresses;
    UCHAR IgnoreCount;
    UCHAR Reserved1;
    UCHAR Dma64BitAddresses;
    ULONG BusNumber;
    ULONG DmaChannel;
    enum _INTERFACE_TYPE InterfaceType;
    enum _DMA_WIDTH DmaWidth;
    enum _DMA_SPEED DmaSpeed;
    ULONG MaximumLength;
    ULONG DmaPort;
    ULONG DmaAddressWidth;
    ULONG DmaControllerInstance;
    ULONG DmaRequestLine;
    union _LARGE_INTEGER DeviceAddress;
};

typedef struct _DEVICE_FAULT_CONFIGURATION {
    PVOID FaultHandler;
    PVOID FaultContext;
};

typedef struct _DEVICE_FLAGS {
    ULONG Failed : 1;
    ULONG ReadOnly : 1;
    ULONG Removable : 1;
    ULONG ConsoleIn : 1;
    ULONG ConsoleOut : 1;
    ULONG Input : 1;
    ULONG Output : 1;
};

typedef struct _DEVICE_HANDLER_OBJECT {
};

typedef struct _DEVICE_INTERFACE_CHANGE_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
    struct _GUID InterfaceClassGuid;
    struct _UNICODE_STRING *SymbolicLinkName;
};

typedef struct _DEVICE_MAP {
};

typedef struct _DEVICE_OBJECT {
    SHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    struct _IO_TIMER *Timer;
    ULONG Flags;
    ULONG Characteristics;
    struct _VPB *Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CHAR StackSize;
     <unnamed-type-Queue>;
    union {
        struct _LIST_ENTRY ListEntry;
        struct _WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    struct _KDEVICE_QUEUE DeviceQueue;
    struct _KDPC Dpc;
    ULONG ActiveThreadCount;
    PVOID SecurityDescriptor;
    struct _KEVENT DeviceLock;
    USHORT SectorSize;
    USHORT Spare1;
    struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
    PVOID Reserved;
    VOID _DEVICE_OBJECT;
    VOID _DEVICE_OBJECT;
    struct _DEVICE_OBJECT *operator=;
    struct _DEVICE_OBJECT *operator=;
};

typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
};

typedef struct _DEVICE_RELATIONS {
    ULONG Count;
    struct _DEVICE_OBJECT *Objects[1];
};

typedef struct _DEVICE_RESET_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG DeviceReset;
    ULONG SupportedResetTypes;
    PVOID Reserved;
};

typedef struct _DEVOBJ_EXTENSION {
    SHORT Type;
    USHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PowerFlags;
    struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
    ULONG ExtensionFlags;
    PVOID DeviceNode;
    struct _DEVICE_OBJECT *AttachedTo;
    LONG StartIoCount;
    LONG StartIoKey;
    ULONG StartIoFlags;
    struct _VPB *Vpb;
    PVOID DependencyNode;
    PVOID InterruptContext;
    PVOID VerifierContext;
};

typedef struct _DEVPROPCOMPKEY {
    struct _DEVPROPKEY Key;
    enum _DEVPROPSTORE Store;
    PWCHAR LocaleName;
};

typedef struct _DEVPROPERTY {
    struct _DEVPROPCOMPKEY CompKey;
    ULONG Type;
    ULONG BufferSize;
    PVOID Buffer;
};

typedef struct _DEVPROPKEY {
    struct _GUID fmtid;
    ULONG pid;
};

typedef struct _DIAGNOSTIC_BUFFER {
    ULONG64 Size;
    enum _REQUESTER_TYPE CallerType;
    ULONG64 ProcessImageNameOffset;
    ULONG ProcessId;
    ULONG ServiceTag;
    ULONG64 DeviceDescriptionOffset;
    ULONG64 DevicePathOffset;
    ULONG64 ReasonOffset;
};

typedef struct _DISK_SIGNATURE {
    ULONG PartitionStyle;
    struct {
        ULONG Signature;
        ULONG CheckSum;
    } Mbr;
    struct {
        struct _GUID DiskId;
    } Gpt;
};

typedef struct _DISPATCHER_CONTEXT {
    ULONG64 ControlPc;
    ULONG64 ImageBase;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionEntry;
    ULONG64 EstablisherFrame;
    ULONG64 TargetIp;
    struct _CONTEXT *ContextRecord;
    enum _EXCEPTION_DISPOSITION *LanguageHandler;
    PVOID HandlerData;
    struct _UNWIND_HISTORY_TABLE *HistoryTable;
    ULONG ScopeIndex;
    ULONG Fill0;
};

typedef struct _DISPATCHER_HEADER {
    LONG Lock;
    LONG LockNV;
    UCHAR Type;
    UCHAR Signalling;
    UCHAR Size;
    UCHAR Reserved1;
    UCHAR TimerType;
    UCHAR TimerControlFlags;
    UCHAR Absolute : 1;
    UCHAR Wake : 1;
    UCHAR EncodedTolerableDelay : 6;
    UCHAR Hand;
    UCHAR TimerMiscFlags;
    UCHAR Index : 6;
    UCHAR Inserted : 1;
    UCHAR Expired : 1;
    UCHAR Timer2Type;
    UCHAR Timer2Flags;
    UCHAR Timer2Inserted : 1;
    UCHAR Timer2Expiring : 1;
    UCHAR Timer2CancelPending : 1;
    UCHAR Timer2SetPending : 1;
    UCHAR Timer2Running : 1;
    UCHAR Timer2Disabled : 1;
    UCHAR Timer2ReservedFlags : 2;
    UCHAR Timer2ComponentId;
    UCHAR Timer2RelativeId;
    UCHAR QueueType;
    UCHAR QueueControlFlags;
    UCHAR Abandoned : 1;
    UCHAR DisableIncrement : 1;
    UCHAR QueueReservedControlFlags : 6;
    UCHAR QueueSize;
    UCHAR QueueReserved;
    UCHAR ThreadType;
    UCHAR ThreadReserved;
    UCHAR ThreadControlFlags;
    UCHAR CycleProfiling : 1;
    UCHAR CounterProfiling : 1;
    UCHAR GroupScheduling : 1;
    UCHAR AffinitySet : 1;
    UCHAR Tagged : 1;
    UCHAR EnergyProfiling : 1;
    UCHAR SchedulerAssist : 1;
    UCHAR ThreadReservedControlFlags : 1;
    UCHAR DebugActive;
    UCHAR ActiveDR7 : 1;
    UCHAR Instrumented : 1;
    UCHAR Minimal : 1;
    UCHAR Reserved4 : 3;
    UCHAR UmsScheduled : 1;
    UCHAR UmsPrimary : 1;
    UCHAR MutantType;
    UCHAR MutantSize;
    UCHAR DpcActive;
    UCHAR MutantReserved;
    LONG SignalState;
    struct _LIST_ENTRY WaitListHead;
    VOID _DISPATCHER_HEADER;
    VOID _DISPATCHER_HEADER;
    struct _DISPATCHER_HEADER *operator=;
    struct _DISPATCHER_HEADER *operator=;
};

typedef struct _DMA_ADAPTER {
    USHORT Version;
    USHORT Size;
    struct _DMA_OPERATIONS *DmaOperations;
};

typedef struct _DMA_ADAPTER_INFO {
    ULONG Version;
    struct _DMA_ADAPTER_INFO_V1 V1;
};

typedef struct _DMA_ADAPTER_INFO_V1 {
    ULONG ReadDmaCounterAvailable;
    ULONG ScatterGatherLimit;
    ULONG DmaAddressWidth;
    ULONG Flags;
    ULONG MinimumTransferUnit;
};

typedef struct _DMA_CACHE_COHERENCY_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    UCHAR CacheCoherent;
};

typedef struct _DMA_CONFIGURATION_BYTE0 {
    UCHAR Channel : 3;
    UCHAR Reserved : 3;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _DMA_CONFIGURATION_BYTE1 {
    UCHAR Reserved0 : 2;
    UCHAR TransferSize : 2;
    UCHAR Timing : 2;
    UCHAR Reserved1 : 2;
};

typedef struct _DMA_IOMMU_INTERFACE {
    ULONG Version;
    PLONG CreateDomain;
    PLONG DeleteDomain;
    PLONG AttachDevice;
    PLONG DetachDevice;
    PLONG FlushDomain;
    PLONG FlushDomainByVaList;
    PLONG QueryInputMappings;
    PLONG MapLogicalRange;
    PLONG UnmapLogicalRange;
    PLONG MapIdentityRange;
    PLONG UnmapIdentityRange;
    PLONG SetDeviceFaultReporting;
    PLONG ConfigureDomain;
};

typedef struct _DMA_OPERATIONS {
    ULONG Size;
    PVOID PutDmaAdapter;
    PVOID *AllocateCommonBuffer;
    PVOID FreeCommonBuffer;
    PLONG AllocateAdapterChannel;
    PUCHAR FlushAdapterBuffers;
    PVOID FreeAdapterChannel;
    PVOID FreeMapRegisters;
    union _LARGE_INTEGER *MapTransfer;
    PULONG GetDmaAlignment;
    PULONG ReadDmaCounter;
    PLONG GetScatterGatherList;
    PVOID PutScatterGatherList;
    PLONG CalculateScatterGatherList;
    PLONG BuildScatterGatherList;
    PLONG BuildMdlFromScatterGatherList;
    PLONG GetDmaAdapterInfo;
    PLONG GetDmaTransferInfo;
    PLONG InitializeDmaTransferContext;
    PVOID *AllocateCommonBufferEx;
    PLONG AllocateAdapterChannelEx;
    PLONG ConfigureAdapterChannel;
    PUCHAR CancelAdapterChannel;
    PLONG MapTransferEx;
    PLONG GetScatterGatherListEx;
    PLONG BuildScatterGatherListEx;
    PLONG FlushAdapterBuffersEx;
    PVOID FreeAdapterObject;
    PLONG CancelMappedTransfer;
    PLONG AllocateDomainCommonBuffer;
    PLONG FlushDmaBuffer;
    PLONG JoinDmaDomain;
    PLONG LeaveDmaDomain;
    PVOID *GetDmaDomain;
    PVOID *AllocateCommonBufferWithBounds;
};

typedef struct _DMA_TRANSFER_INFO {
    ULONG Version;
    struct _DMA_TRANSFER_INFO_V1 V1;
    struct _DMA_TRANSFER_INFO_V2 V2;
};

typedef struct _DMA_TRANSFER_INFO_V1 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
};

typedef struct _DMA_TRANSFER_INFO_V2 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
    ULONG LogicalPageCount;
};

typedef struct _DOMAIN_CONFIGURATION {
    enum _DOMAIN_CONFIGURATION_ARCH Type;
    struct _DOMAIN_CONFIGURATION_ARM64 Arm64;
};

typedef struct _DOMAIN_CONFIGURATION_ARM64 {
    union _LARGE_INTEGER Ttbr0;
    union _LARGE_INTEGER Ttbr1;
    ULONG Mair0;
    ULONG Mair1;
    UCHAR InputSize0;
    UCHAR InputSize1;
    UCHAR CoherentTableWalks;
    UCHAR TranslationEnabled;
};

typedef struct _DOT11_ADDITIONAL_IE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uBeaconIEsOffset;
    ULONG uBeaconIEsLength;
    ULONG uResponseIEsOffset;
    ULONG uResponseIEsLength;
};

typedef struct _DOT11_ANQP_QUERY_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_ANQP_QUERY_RESULT Status;
    PVOID hContext;
    ULONG uResponseLength;
};

typedef struct _DOT11_AP_JOIN_REQUEST {
    ULONG uJoinFailureTimeout;
    struct _DOT11_RATE_SET OperationalRateSet;
    ULONG uChCenterFrequency;
    struct _DOT11_BSS_DESCRIPTION dot11BSSDescription;
};

typedef struct _DOT11_ASSOCIATION_INFO_EX {
    UCHAR PeerMacAddress[6];
    UCHAR BSSID[6];
    USHORT usCapabilityInformation;
    USHORT usListenInterval;
    UCHAR ucPeerSupportedRates[255];
    USHORT usAssociationID;
    enum _DOT11_ASSOCIATION_STATE dot11AssociationState;
    enum _DOT11_POWER_MODE dot11PowerMode;
    union _LARGE_INTEGER liAssociationUpTime;
    ULONG64 ullNumOfTxPacketSuccesses;
    ULONG64 ullNumOfTxPacketFailures;
    ULONG64 ullNumOfRxPacketSuccesses;
    ULONG64 ullNumOfRxPacketFailures;
};

typedef struct _DOT11_AVAILABLE_CHANNEL_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG uChannelNumber[1];
};

typedef struct _DOT11_AVAILABLE_FREQUENCY_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG uFrequencyValue[1];
};

typedef struct _DOT11_BSS_DESCRIPTION {
    ULONG uReserved;
    UCHAR dot11BSSID[6];
    enum _DOT11_BSS_TYPE dot11BSSType;
    USHORT usBeaconPeriod;
    ULONG64 ullTimestamp;
    USHORT usCapabilityInformation;
    ULONG uBufferLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_CAN_SUSTAIN_AP_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG ulReason;
};

typedef struct _DOT11_COUNTERS_ENTRY {
    ULONG uTransmittedFragmentCount;
    ULONG uMulticastTransmittedFrameCount;
    ULONG uFailedCount;
    ULONG uRetryCount;
    ULONG uMultipleRetryCount;
    ULONG uFrameDuplicateCount;
    ULONG uRTSSuccessCount;
    ULONG uRTSFailureCount;
    ULONG uACKFailureCount;
    ULONG uReceivedFragmentCount;
    ULONG uMulticastReceivedFrameCount;
    ULONG uFCSErrorCount;
    ULONG uTransmittedFrameCount;
};

typedef struct _DOT11_CURRENT_OFFLOAD_CAPABILITY {
    ULONG uReserved;
    ULONG uFlags;
};

typedef struct _DOT11_CURRENT_OPERATION_MODE {
    ULONG uReserved;
    ULONG uCurrentOpMode;
};

typedef struct _DOT11_CURRENT_OPTIONAL_CAPABILITY {
    ULONG uReserved;
    UCHAR bDot11CFPollable;
    UCHAR bDot11PCF;
    UCHAR bDot11PCFMPDUTransferToPC;
    UCHAR bStrictlyOrderedServiceClass;
};

typedef struct _DOT11_DATA_RATE_MAPPING_TABLE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uDataRateMappingLength;
    struct DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[126];
};

typedef struct _DOT11_DEFAULT_WEP_OFFLOAD {
    ULONG uReserved;
    PVOID hOffloadContext;
    PVOID hOffload;
    ULONG dwIndex;
    enum _DOT11_OFFLOAD_TYPE dot11OffloadType;
    ULONG dwAlgorithm;
    ULONG uFlags;
    enum _DOT11_KEY_DIRECTION dot11KeyDirection;
    UCHAR ucMacAddress[6];
    ULONG uNumOfRWsOnMe;
    struct _DOT11_IV48_COUNTER dot11IV48Counters[16];
    USHORT usDot11RWBitMaps[16];
    USHORT usKeyLength;
    UCHAR ucKey[1];
};

typedef struct _DOT11_DEFAULT_WEP_UPLOAD {
    ULONG uReserved;
    enum _DOT11_OFFLOAD_TYPE dot11OffloadType;
    PVOID hOffload;
    ULONG uNumOfRWsUsed;
    struct _DOT11_IV48_COUNTER dot11IV48Counters[16];
    USHORT usDot11RWBitMaps[16];
};

typedef struct _DOT11_DISASSOCIATE_PEER_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
    USHORT usReason;
};

typedef struct _DOT11_DIVERSITY_SELECTION_RX {
    ULONG uAntennaListIndex;
    UCHAR bDiversitySelectionRX;
};

typedef struct _DOT11_DIVERSITY_SELECTION_RX_LIST {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_DIVERSITY_SELECTION_RX dot11DiversitySelectionRx[1];
};

typedef struct _DOT11_EXTAP_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uScanSSIDListSize;
    ULONG uDesiredSSIDListSize;
    ULONG uPrivacyExemptionListSize;
    ULONG uAssociationTableSize;
    ULONG uDefaultKeyTableSize;
    ULONG uWEPKeyValueMaxLength;
    UCHAR bStrictlyOrderedServiceClassImplemented;
    ULONG uNumSupportedCountryOrRegionStrings;
    PUCHAR pSupportedCountryOrRegionStrings[3];
    ULONG uInfraNumSupportedUcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedUcastAlgoPairs;
    ULONG uInfraNumSupportedMcastAlgoPairs;
    struct DOT11_AUTH_CIPHER_PAIR *pInfraSupportedMcastAlgoPairs;
};

typedef struct _DOT11_FRAGMENT_DESCRIPTOR {
    ULONG uOffset;
    ULONG uLength;
};

typedef struct _DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_HOPPING_PATTERN_ENTRY {
    ULONG uHoppingPatternIndex;
    ULONG uRandomTableFieldNumber;
};

typedef struct _DOT11_HOPPING_PATTERN_ENTRY_LIST {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_HOPPING_PATTERN_ENTRY dot11HoppingPatternEntry[1];
};

typedef struct _DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
    ULONG uStatus;
    UCHAR ucErrorSource;
    UCHAR bReAssocReq;
    UCHAR bReAssocResp;
    ULONG uAssocReqOffset;
    ULONG uAssocReqSize;
    ULONG uAssocRespOffset;
    ULONG uAssocRespSize;
    enum _DOT11_AUTH_ALGORITHM AuthAlgo;
    enum _DOT11_CIPHER_ALGORITHM UnicastCipher;
    enum _DOT11_CIPHER_ALGORITHM MulticastCipher;
    ULONG uActivePhyListOffset;
    ULONG uActivePhyListSize;
    ULONG uBeaconOffset;
    ULONG uBeaconSize;
};

typedef struct _DOT11_INCOMING_ASSOC_DECISION {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
    UCHAR bAccept;
    USHORT usReasonCode;
    ULONG uAssocResponseIEsOffset;
    ULONG uAssocResponseIEsLength;
};

typedef struct _DOT11_INCOMING_ASSOC_DECISION_V2 {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
    UCHAR bAccept;
    USHORT usReasonCode;
    ULONG uAssocResponseIEsOffset;
    ULONG uAssocResponseIEsLength;
    UCHAR WFDStatus;
};

typedef struct _DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
    UCHAR bReAssocReq;
    ULONG uAssocReqOffset;
    ULONG uAssocReqSize;
};

typedef struct _DOT11_INCOMING_ASSOC_STARTED_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerMacAddr[6];
};

typedef struct _DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR ReceiverAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ReceiverDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_IV48_COUNTER {
    ULONG uIV32Counter;
    USHORT usIV16Counter;
};

typedef struct _DOT11_JOIN_REQUEST {
    ULONG uJoinFailureTimeout;
    struct _DOT11_RATE_SET OperationalRateSet;
    ULONG uChCenterFrequency;
    struct _DOT11_BSS_DESCRIPTION dot11BSSDescription;
};

typedef struct _DOT11_MAC_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uOpmodeMask;
};

typedef struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC {
    enum DOT11_BAND Dot11Band;
    ULONG uChannel;
    LONG ADCPowerLevel;
};

typedef struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX {
    UCHAR bEnabled;
    enum DOT11_BAND Dot11Band;
    ULONG uChannel;
    LONG PowerLevel;
};

typedef struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX {
    UCHAR bEnable;
    UCHAR bOpenLoop;
    enum DOT11_BAND Dot11Band;
    ULONG uChannel;
    ULONG uSetPowerLevel;
    LONG ADCPowerLevel;
};

typedef struct _DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS {
    enum DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
    ULONG uTestID;
    UCHAR bResult;
    ULONG uPinFailedBitMask;
    PVOID pvContext;
    ULONG uBytesWrittenOut;
    UCHAR ucBufferOut[1];
};

typedef struct _DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS {
    enum DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
    ULONG uTestID;
    ULONG uPinBitMask;
    PVOID pvContext;
    ULONG uBufferLength;
    UCHAR ucBufferIn[1];
};

typedef struct _DOT11_MANUFACTURING_TEST {
    enum _DOT11_MANUFACTURING_TEST_TYPE dot11ManufacturingTestType;
    ULONG uBufferLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_MANUFACTURING_TEST_QUERY_DATA {
    ULONG uKey;
    ULONG uOffset;
    ULONG uBufferLength;
    ULONG uBytesRead;
    UCHAR ucBufferOut[1];
};

typedef struct _DOT11_MANUFACTURING_TEST_SET_DATA {
    ULONG uKey;
    ULONG uOffset;
    ULONG uBufferLength;
    UCHAR ucBufferIn[1];
};

typedef struct _DOT11_MANUFACTURING_TEST_SLEEP {
    ULONG uSleepTime;
    PVOID pvContext;
};

typedef struct _DOT11_MD_CAPABILITY_ENTRY_LIST {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY dot11MDCapabilityEntry[1];
};

typedef struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY {
    ULONG uMultiDomainCapabilityIndex;
    ULONG uFirstChannelNumber;
    ULONG uNumberOfChannels;
    LONG lMaximumTransmitPowerLevel;
};

typedef struct _DOT11_NIC_SPECIFIC_EXTENSION {
    ULONG uBufferLength;
    ULONG uTotalBufferLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_OFFLOAD_CAPABILITY {
    ULONG uReserved;
    ULONG uFlags;
    ULONG uSupportedWEPAlgorithms;
    ULONG uNumOfReplayWindows;
    ULONG uMaxWEPKeyMappingLength;
    ULONG uSupportedAuthAlgorithms;
    ULONG uMaxAuthKeyMappingLength;
};

typedef struct _DOT11_OFFLOAD_NETWORK_LIST_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG ulFlags;
    ULONG FastScanPeriod;
    ULONG FastScanIterations;
    ULONG SlowScanPeriod;
    ULONG uNumOfEntries;
    struct DOT11_OFFLOAD_NETWORK offloadNetworkList[1];
};

typedef struct _DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    LONG Status;
};

typedef struct _DOT11_OI {
    USHORT OILength;
    UCHAR OI[5];
};

typedef struct _DOT11_OPERATION_MODE_CAPABILITY {
    ULONG uReserved;
    ULONG uMajorVersion;
    ULONG uMinorVersion;
    ULONG uNumOfTXBuffers;
    ULONG uNumOfRXBuffers;
    ULONG uOpModeCapability;
};

typedef struct _DOT11_OPTIONAL_CAPABILITY {
    ULONG uReserved;
    UCHAR bDot11PCF;
    UCHAR bDot11PCFMPDUTransferToPC;
    UCHAR bStrictlyOrderedServiceClass;
};

typedef struct _DOT11_PEER_INFO {
    UCHAR MacAddress[6];
    USHORT usCapabilityInformation;
    enum _DOT11_AUTH_ALGORITHM AuthAlgo;
    enum _DOT11_CIPHER_ALGORITHM UnicastCipherAlgo;
    enum _DOT11_CIPHER_ALGORITHM MulticastCipherAlgo;
    UCHAR bWpsEnabled;
    USHORT usListenInterval;
    UCHAR ucSupportedRates[255];
    USHORT usAssociationID;
    enum _DOT11_ASSOCIATION_STATE AssociationState;
    enum _DOT11_POWER_MODE PowerMode;
    union _LARGE_INTEGER liAssociationUpTime;
    struct _DOT11_PEER_STATISTICS Statistics;
};

typedef struct _DOT11_PEER_INFO_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_PEER_INFO PeerInfo[1];
};

typedef struct _DOT11_PEER_STATISTICS {
    ULONG64 ullDecryptSuccessCount;
    ULONG64 ullDecryptFailureCount;
    ULONG64 ullTxPacketSuccessCount;
    ULONG64 ullTxPacketFailureCount;
    ULONG64 ullRxPacketSuccessCount;
    ULONG64 ullRxPacketFailureCount;
};

typedef struct _DOT11_PER_MSDU_COUNTERS {
    ULONG uTransmittedFragmentCount;
    ULONG uRetryCount;
    ULONG uRTSSuccessCount;
    ULONG uRTSFailureCount;
    ULONG uACKFailureCount;
};

typedef struct _DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG ulPhyId;
    ULONG ulChannel;
    ULONG ulFrequency;
};

typedef struct _DOT11_PHY_TYPE_INFO {
    enum _DOT11_PHY_TYPE dot11PhyType;
    UCHAR bUseParameters;
    ULONG uProbeDelay;
    ULONG uMinChannelTime;
    ULONG uMaxChannelTime;
    enum _CH_DESCRIPTION_TYPE ChDescriptionType;
    ULONG uChannelListSize;
    UCHAR ucChannelListBuffer[1];
};

typedef struct _DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR bEnabled;
};

typedef struct _DOT11_POWER_MGMT_MODE {
    enum _DOT11_POWER_MODE dot11PowerMode;
    ULONG uPowerSaveLevel;
    USHORT usListenInterval;
    USHORT usAID;
    UCHAR bReceiveDTIMs;
};

typedef struct _DOT11_POWER_MGMT_MODE_STATUS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_POWER_MODE PowerSaveMode;
    ULONG uPowerSaveLevel;
    enum _DOT11_POWER_MODE_REASON Reason;
};

typedef struct _DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR ReceiverAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ReceiverDeviceAddress[6];
    UCHAR DialogToken;
    LONG Status;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_QOS_TX_DURATION {
    ULONG uNominalMSDUSize;
    ULONG uMinPHYRate;
    ULONG uDuration;
};

typedef struct _DOT11_QOS_TX_MEDIUM_TIME {
    UCHAR dot11PeerAddress[6];
    UCHAR ucQoSPriority;
    ULONG uMediumTimeAdmited;
};

typedef struct _DOT11_RATE_SET {
    ULONG uRateSetLength;
    UCHAR ucRateSet[126];
};

typedef struct _DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    PVOID ResponseContext;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR TransmitterDeviceAddress[6];
    UCHAR BSSID[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR TransmitterDeviceAddress[6];
    UCHAR BSSID[6];
    UCHAR DialogToken;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR TransmitterDeviceAddress[6];
    UCHAR BSSID[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR TransmitterDeviceAddress[6];
    UCHAR BSSID[6];
    UCHAR DialogToken;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_RECV_CONTEXT {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID pvReserved;
    enum _DOT11_PHY_TYPE dot11PhyType;
    ULONG uChCenterFrequency;
    LONG lRSSI;
    ULONG uRSSI;
    UCHAR ucPriority;
    UCHAR ucDataRate;
    UCHAR ucPeerMacAddress[6];
    ULONG dwExtendedStatus;
    PVOID hWEPOffloadContext;
    PVOID hAuthOffloadContext;
    USHORT usWEPAppliedMask;
    USHORT usWPAMSDUPriority;
    struct _DOT11_IV48_COUNTER dot11LowestIV48Counter;
    USHORT usDot11LeftRWBitMap;
    struct _DOT11_IV48_COUNTER dot11HighestIV48Counter;
    USHORT usDot11RightRWBitMap;
    USHORT usNumberOfMPDUsReceived;
};

typedef struct _DOT11_RECV_SENSITIVITY {
    UCHAR ucDataRate;
    LONG lRSSIMin;
    LONG lRSSIMax;
};

typedef struct _DOT11_RECV_SENSITIVITY_LIST {
    enum _DOT11_PHY_TYPE dot11PhyType;
    ULONG uPhyId;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_RECV_SENSITIVITY dot11RecvSensitivity[1];
};

typedef struct _DOT11_REG_DOMAINS_SUPPORT_VALUE {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_REG_DOMAIN_VALUE dot11RegDomainValue[1];
};

typedef struct _DOT11_REG_DOMAIN_VALUE {
    ULONG uRegDomainsSupportIndex;
    ULONG uRegDomainsSupportValue;
};

typedef struct _DOT11_RESET_REQUEST {
    enum _DOT11_RESET_TYPE dot11ResetType;
    UCHAR dot11MacAddress[6];
    UCHAR bSetDefaultMIB;
};

typedef struct _DOT11_RSN_REKEY_PARAMETERS {
    ULONG Flags;
    UCHAR KCK[16];
    UCHAR KEK[16];
    ULONG64 KeyReplayCounter;
};

typedef struct _DOT11_RSSI_RANGE {
    enum _DOT11_PHY_TYPE dot11PhyType;
    ULONG uRSSIMin;
    ULONG uRSSIMax;
};

typedef struct _DOT11_SCAN_REQUEST {
    enum _DOT11_BSS_TYPE dot11BSSType;
    UCHAR dot11BSSID[6];
    struct _DOT11_SSID dot11SSID;
    enum _DOT11_SCAN_TYPE dot11ScanType;
    UCHAR bRestrictedScan;
    UCHAR bUseRequestIE;
    ULONG uRequestIDsOffset;
    ULONG uNumOfRequestIDs;
    ULONG uPhyTypesOffset;
    ULONG uNumOfPhyTypes;
    ULONG uIEsOffset;
    ULONG uIEsLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_SCAN_REQUEST_V2 {
    enum _DOT11_BSS_TYPE dot11BSSType;
    UCHAR dot11BSSID[6];
    enum _DOT11_SCAN_TYPE dot11ScanType;
    UCHAR bRestrictedScan;
    ULONG udot11SSIDsOffset;
    ULONG uNumOfdot11SSIDs;
    UCHAR bUseRequestIE;
    ULONG uRequestIDsOffset;
    ULONG uNumOfRequestIDs;
    ULONG uPhyTypeInfosOffset;
    ULONG uNumOfPhyTypeInfos;
    ULONG uIEsOffset;
    ULONG uIEsLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_SEND_CONTEXT {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID pvReserved;
    ULONG uFlags;
    ULONG uPSLifetime;
    ULONG uDelayedSleepValue;
    UCHAR ucTXDataRates[8];
    UCHAR bIndicateAssociatedACKs;
    UCHAR bIndicateTXStatus;
    UCHAR ucPriority;
    UCHAR bDontFragment;
    ULONG dwExtendedStatus;
    PVOID hIntegrityOffload;
    PVOID hWEPOffload;
    UCHAR ucWPAMSDUPriority;
    UCHAR ucNumOfRWsOnPeer;
    USHORT usAID;
    struct _DOT11_PER_MSDU_COUNTERS *pDot11PerMSDUCounters;
};

typedef struct _DOT11_SEND_EXTENSION_INFO {
    ULONG uVersion;
    struct _NDIS_OBJECT_HEADER Header;
    PVOID pvReserved;
    ULONG uFlags;
    ULONG uPSLifetime;
    ULONG uDelayedSleepValue;
    UCHAR ucTXDataRates[8];
    UCHAR bIndicateAssociatedACKs;
    UCHAR bIndicateTXStatus;
    UCHAR ucPriority;
    UCHAR bDontFragment;
    ULONG dwExtendedStatus;
    PVOID hIntegrityOffload;
    PVOID hWEPOffload;
    UCHAR ucWPAMSDUPriority;
    UCHAR ucNumOfRWsOnPeer;
    USHORT usAID;
    struct _DOT11_PER_MSDU_COUNTERS *pDot11PerMSDUCounters;
    USHORT usNumberOfFragments;
    struct _DOT11_FRAGMENT_DESCRIPTOR Dot11FragmentDescriptors[1];
};

typedef struct _DOT11_SEND_EXTENSION_INFO_V2 {
    UCHAR ucQoSPriority : 4;
    UCHAR ucAckPolicy : 4;
    USHORT usExtendedTXDataRatesOffset;
    UCHAR ucNumOfExtendedTXDataRates;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    PVOID ResponseContext;
    ULONG uSendTimeout;
    UCHAR Status;
    UCHAR GroupCapability;
    struct _DOT11_WFD_GROUP_ID GroupID;
    UCHAR bUseGroupID;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    ULONG uSendTimeout;
    struct _DOT11_WFD_GO_INTENT GroupOwnerIntent;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    UCHAR IntendedInterfaceAddress[6];
    UCHAR GroupCapability;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR PeerDeviceAddress[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uSendTimeout;
    UCHAR Status;
    struct _DOT11_WFD_GO_INTENT GroupOwnerIntent;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    UCHAR IntendedInterfaceAddress[6];
    UCHAR GroupCapability;
    struct _DOT11_WFD_GROUP_ID GroupID;
    UCHAR bUseGroupID;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_INVITATION_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR DialogToken;
    UCHAR PeerDeviceAddress[6];
    ULONG uSendTimeout;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    struct _DOT11_WFD_INVITATION_FLAGS InvitationFlags;
    UCHAR GroupBSSID[6];
    UCHAR bUseGroupBSSID;
    struct _DOT11_WFD_CHANNEL OperatingChannel;
    UCHAR bUseSpecifiedOperatingChannel;
    struct _DOT11_WFD_GROUP_ID GroupID;
    UCHAR bLocalGO;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_INVITATION_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ReceiverDeviceAddress[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uSendTimeout;
    UCHAR Status;
    struct _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    UCHAR GroupBSSID[6];
    UCHAR bUseGroupBSSID;
    struct _DOT11_WFD_CHANNEL OperatingChannel;
    UCHAR bUseSpecifiedOperatingChannel;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR DialogToken;
    UCHAR PeerDeviceAddress[6];
    ULONG uSendTimeout;
    UCHAR GroupCapability;
    struct _DOT11_WFD_GROUP_ID GroupID;
    UCHAR bUseGroupID;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ReceiverDeviceAddress[6];
    UCHAR DialogToken;
    PVOID RequestContext;
    ULONG uSendTimeout;
    ULONG uIEsOffset;
    ULONG uIEsLength;
};

typedef struct _DOT11_SSID {
    ULONG uSSIDLength;
    UCHAR ucSSID[32];
};

typedef struct _DOT11_START_REQUEST {
    ULONG uStartFailureTimeout;
    struct _DOT11_RATE_SET OperationalRateSet;
    ULONG uChCenterFrequency;
    struct _DOT11_BSS_DESCRIPTION dot11BSSDescription;
};

typedef struct _DOT11_STATUS_INDICATION {
    ULONG uStatusType;
    LONG ndisStatus;
};

typedef struct _DOT11_STOP_AP_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG ulReason;
};

typedef struct _DOT11_SUPPORTED_ANTENNA {
    ULONG uAntennaListIndex;
    UCHAR bSupportedAntenna;
};

typedef struct _DOT11_SUPPORTED_ANTENNA_LIST {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_SUPPORTED_ANTENNA dot11SupportedAntenna[1];
};

typedef struct _DOT11_SUPPORTED_DATA_RATES_VALUE {
    UCHAR ucSupportedTxDataRatesValue[8];
    UCHAR ucSupportedRxDataRatesValue[8];
};

typedef struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 {
    UCHAR ucSupportedTxDataRatesValue[255];
    UCHAR ucSupportedRxDataRatesValue[255];
};

typedef struct _DOT11_SUPPORTED_DSSS_CHANNEL {
    ULONG uChannel;
};

typedef struct _DOT11_SUPPORTED_DSSS_CHANNEL_LIST {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_SUPPORTED_DSSS_CHANNEL dot11SupportedDSSSChannel[1];
};

typedef struct _DOT11_SUPPORTED_OFDM_FREQUENCY {
    ULONG uCenterFrequency;
};

typedef struct _DOT11_SUPPORTED_OFDM_FREQUENCY_LIST {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_SUPPORTED_OFDM_FREQUENCY dot11SupportedOFDMFrequency[1];
};

typedef struct _DOT11_SUPPORTED_PHY_TYPES {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    enum _DOT11_PHY_TYPE dot11PHYType[1];
};

typedef struct _DOT11_SUPPORTED_POWER_LEVELS {
    ULONG uNumOfSupportedPowerLevels;
    ULONG uTxPowerLevelValues[8];
};

typedef struct _DOT11_UPDATE_IE {
    enum _DOT11_UPDATE_IE_OP dot11UpdateIEOp;
    ULONG uBufferLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_VWIFI_COMBINATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumInfrastructure;
    ULONG uNumAdhoc;
    ULONG uNumSoftAP;
};

typedef struct _DOT11_VWIFI_COMBINATION_V2 {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumInfrastructure;
    ULONG uNumAdhoc;
    ULONG uNumSoftAP;
    ULONG uNumVirtualStation;
};

typedef struct _DOT11_VWIFI_COMBINATION_V3 {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumInfrastructure;
    ULONG uNumAdhoc;
    ULONG uNumSoftAP;
    ULONG uNumVirtualStation;
    ULONG uNumWFDGroup;
};

typedef struct _DOT11_WEP_OFFLOAD {
    ULONG uReserved;
    PVOID hOffloadContext;
    PVOID hOffload;
    enum _DOT11_OFFLOAD_TYPE dot11OffloadType;
    ULONG dwAlgorithm;
    UCHAR bRowIsOutbound;
    UCHAR bUseDefault;
    ULONG uFlags;
    UCHAR ucMacAddress[6];
    ULONG uNumOfRWsOnPeer;
    ULONG uNumOfRWsOnMe;
    struct _DOT11_IV48_COUNTER dot11IV48Counters[16];
    USHORT usDot11RWBitMaps[16];
    USHORT usKeyLength;
    UCHAR ucKey[1];
};

typedef struct _DOT11_WEP_UPLOAD {
    ULONG uReserved;
    enum _DOT11_OFFLOAD_TYPE dot11OffloadType;
    PVOID hOffload;
    ULONG uNumOfRWsUsed;
    struct _DOT11_IV48_COUNTER dot11IV48Counters[16];
    USHORT usDot11RWBitMaps[16];
};

typedef struct _DOT11_WFD_ADDITIONAL_IE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uBeaconIEsOffset;
    ULONG uBeaconIEsLength;
    ULONG uProbeResponseIEsOffset;
    ULONG uProbeResponseIEsLength;
    ULONG uDefaultRequestIEsOffset;
    ULONG uDefaultRequestIEsLength;
};

typedef struct _DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR {
    ULONG AdvertisementID;
    USHORT ConfigMethods;
    UCHAR ServiceNameLength;
    UCHAR ServiceName[255];
};

typedef struct _DOT11_WFD_ADVERTISED_SERVICE_LIST {
    USHORT ServiceCount;
    struct _DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR AdvertisedService[1];
};

typedef struct _DOT11_WFD_ADVERTISEMENT_ID {
    ULONG AdvertisementID;
    UCHAR ServiceAddress[6];
};

typedef struct _DOT11_WFD_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumConcurrentGORole;
    ULONG uNumConcurrentClientRole;
    ULONG WPSVersionsSupported;
    UCHAR bServiceDiscoverySupported;
    UCHAR bClientDiscoverabilitySupported;
    UCHAR bInfrastructureManagementSupported;
    ULONG uMaxSecondaryDeviceTypeListSize;
    UCHAR DeviceAddress[6];
    ULONG uInterfaceAddressListCount;
    PUCHAR pInterfaceAddressList[6];
    ULONG uNumSupportedCountryOrRegionStrings;
    PUCHAR pSupportedCountryOrRegionStrings[3];
    ULONG uDiscoveryFilterListSize;
    ULONG uGORoleClientTableSize;
};

typedef struct _DOT11_WFD_CHANNEL {
    UCHAR CountryRegionString[3];
    UCHAR OperatingClass;
    UCHAR ChannelNumber;
};

typedef struct _DOT11_WFD_CONFIGURATION_TIMEOUT {
    UCHAR GOTimeout;
    UCHAR ClientTimeout;
};

typedef struct _DOT11_WFD_DEVICE_CAPABILITY_CONFIG {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR bServiceDiscoveryEnabled;
    UCHAR bClientDiscoverabilityEnabled;
    UCHAR bConcurrentOperationSupported;
    UCHAR bInfrastructureManagementEnabled;
    UCHAR bDeviceLimitReached;
    UCHAR bInvitationProcedureEnabled;
    ULONG WPSVersionsEnabled;
};

typedef struct _DOT11_WFD_DEVICE_ENTRY {
    ULONG uPhyId;
    union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
    UCHAR dot11BSSID[6];
    enum _DOT11_BSS_TYPE dot11BSSType;
    UCHAR TransmitterAddress[6];
    LONG lRSSI;
    ULONG uLinkQuality;
    USHORT usBeaconPeriod;
    ULONG64 ullTimestamp;
    ULONG64 ullBeaconHostTimestamp;
    ULONG64 ullProbeResponseHostTimestamp;
    USHORT usCapabilityInformation;
    ULONG uBeaconIEsOffset;
    ULONG uBeaconIEsLength;
    ULONG uProbeResponseIEsOffset;
    ULONG uProbeResponseIEsLength;
};

typedef struct _DOT11_WFD_DEVICE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR DeviceAddress[6];
    USHORT ConfigMethods;
    struct _DOT11_WFD_DEVICE_TYPE PrimaryDeviceType;
    struct _DOT11_WPS_DEVICE_NAME DeviceName;
};

typedef struct _DOT11_WFD_DEVICE_LISTEN_CHANNEL {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ChannelNumber;
};

typedef struct _DOT11_WFD_DEVICE_TYPE {
    USHORT CategoryID;
    USHORT SubCategoryID;
    UCHAR OUI[4];
};

typedef struct _DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    LONG Status;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    ULONG uListOffset;
    ULONG uListLength;
};

typedef struct _DOT11_WFD_DISCOVER_DEVICE_FILTER {
    UCHAR DeviceID[6];
    UCHAR ucBitmask;
    struct _DOT11_SSID GroupSSID;
};

typedef struct _DOT11_WFD_DISCOVER_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    enum _DOT11_WFD_DISCOVER_TYPE DiscoverType;
    enum _DOT11_WFD_SCAN_TYPE ScanType;
    ULONG uDiscoverTimeout;
    ULONG uDeviceFilterListOffset;
    ULONG uNumDeviceFilters;
    ULONG uIEsOffset;
    ULONG uIEsLength;
    UCHAR bForceScanLegacyNetworks;
};

typedef struct _DOT11_WFD_GO_INTENT {
    UCHAR TieBreaker : 1;
    UCHAR Intent : 7;
};

typedef struct _DOT11_WFD_GROUP_ID {
    UCHAR DeviceAddress[6];
    struct _DOT11_SSID SSID;
};

typedef struct _DOT11_WFD_GROUP_JOIN_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _DOT11_WFD_CHANNEL GOOperatingChannel;
    ULONG GOConfigTime;
    UCHAR bInGroupFormation;
    UCHAR bWaitForWPSReady;
};

typedef struct _DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR bPersistentGroupEnabled;
    UCHAR bIntraBSSDistributionSupported;
    UCHAR bCrossConnectionSupported;
    UCHAR bPersistentReconnectSupported;
    UCHAR bGroupFormationEnabled;
    ULONG uMaximumGroupLimit;
};

typedef struct _DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR bPersistentGroupEnabled;
    UCHAR bIntraBSSDistributionSupported;
    UCHAR bCrossConnectionSupported;
    UCHAR bPersistentReconnectSupported;
    UCHAR bGroupFormationEnabled;
    ULONG uMaximumGroupLimit;
    UCHAR bEapolKeyIpAddressAllocationSupported;
};

typedef struct _DOT11_WFD_GROUP_START_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _DOT11_WFD_CHANNEL AdvertisedOperatingChannel;
};

typedef struct _DOT11_WFD_INVITATION_FLAGS {
    UCHAR InvitationType : 1;
    UCHAR Reserved : 7;
};

typedef struct _DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_WFD_DEVICE_TYPE SecondaryDeviceTypes[1];
};

typedef struct _DOT11_WFD_SERVICE_HASH_LIST {
    USHORT ServiceHashCount;
    UCHAR ServiceHash[1][6];
};

typedef struct _DOT11_WFD_SESSION_ID {
    ULONG SessionID;
    UCHAR SessionAddress[6];
};

typedef struct _DOT11_WFD_SESSION_INFO {
    USHORT uSessionInfoLength;
    UCHAR ucSessionInfo[144];
};

typedef struct _DOT11_WME_AC_PARAMETERS {
    UCHAR ucAccessCategoryIndex;
    UCHAR ucAIFSN;
    UCHAR ucECWmin;
    UCHAR ucECWmax;
    USHORT usTXOPLimit;
};

typedef struct _DOT11_WME_AC_PARAMTERS_LIST {
    ULONG uNumOfEntries;
    ULONG uTotalNumOfEntries;
    struct _DOT11_WME_AC_PARAMETERS dot11WMEACParameters[1];
};

typedef struct _DOT11_WME_UPDATE_IE {
    ULONG uParamElemMinBeaconIntervals;
    ULONG uWMEInfoElemOffset;
    ULONG uWMEInfoElemLength;
    ULONG uWMEParamElemOffset;
    ULONG uWMEParamElemLength;
    UCHAR ucBuffer[1];
};

typedef struct _DOT11_WPA_TSC {
    ULONG uReserved;
    enum _DOT11_OFFLOAD_TYPE dot11OffloadType;
    PVOID hOffload;
    struct _DOT11_IV48_COUNTER dot11IV48Counter;
};

typedef struct _DOT11_WPS_DEVICE_NAME {
    ULONG uDeviceNameLength;
    UCHAR ucDeviceName[32];
};

typedef struct _DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK {
    ULONG Signature;
    USHORT Revision;
    USHORT Size;
    USHORT DpcWatchdogProfileOffset;
    ULONG DpcWatchdogProfileLength;
};

typedef struct _DRIVER_EXTENSION {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG AddDevice;
    ULONG Count;
    struct _UNICODE_STRING ServiceKeyName;
};

typedef struct _DRIVER_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG Flags;
    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    struct _DRIVER_EXTENSION *DriverExtension;
    struct _UNICODE_STRING DriverName;
    struct _UNICODE_STRING *HardwareDatabase;
    struct _FAST_IO_DISPATCH *FastIoDispatch;
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG MajorFunction[28];
};

typedef struct _DRIVER_VERIFIER_THUNK_PAIRS {
    PULONG64 PristineRoutine;
    PULONG64 NewRoutine;
};

typedef struct _DRIVE_LAYOUT_INFORMATION {
};

typedef struct _DUMP_INITIALIZATION_CONTEXT {
    ULONG Length;
    ULONG Reserved;
    PVOID MemoryBlock;
    PVOID CommonBuffer[2];
    union _LARGE_INTEGER PhysicalAddress[2];
    PVOID StallRoutine;
    PUCHAR OpenRoutine;
    PLONG WriteRoutine;
    PVOID FinishRoutine;
    struct _ADAPTER_OBJECT *AdapterObject;
    PVOID MappedRegisterBase;
    PVOID PortConfiguration;
    UCHAR CrashDump;
    UCHAR MarkMemoryOnly;
    UCHAR HiberResume;
    UCHAR Reserved1;
    ULONG MaximumTransferSize;
    ULONG CommonBufferSize;
    PVOID TargetAddress;
    PLONG WritePendingRoutine;
    ULONG PartitionStyle;
     <unnamed-type-DiskInfo>;
    union {
         <unnamed-type-Mbr>;
        struct {
            ULONG Signature;
            ULONG CheckSum;
        } Mbr;
         <unnamed-type-Gpt>;
        struct {
            struct _GUID DiskId;
        } Gpt;
    } DiskInfo;
    PLONG ReadRoutine;
    PLONG GetDriveTelemetryRoutine;
    ULONG LogSectionTruncateSize;
    ULONG Parameters[16];
    PVOID GetTransferSizesRoutine;
    PVOID DumpNotifyRoutine;
};

typedef struct _DUPLICATE_EXTENTS_DATA {
    PVOID FileHandle;
    union _LARGE_INTEGER SourceFileOffset;
    union _LARGE_INTEGER TargetFileOffset;
    union _LARGE_INTEGER ByteCount;
};

typedef struct _DUPLICATE_EXTENTS_DATA32 {
    ULONG FileHandle;
    union _LARGE_INTEGER SourceFileOffset;
    union _LARGE_INTEGER TargetFileOffset;
    union _LARGE_INTEGER ByteCount;
};

typedef struct _DUPLICATE_EXTENTS_DATA_EX {
    ULONG64 Size;
    PVOID FileHandle;
    union _LARGE_INTEGER SourceFileOffset;
    union _LARGE_INTEGER TargetFileOffset;
    union _LARGE_INTEGER ByteCount;
    ULONG Flags;
};

typedef struct _DUPLICATE_EXTENTS_DATA_EX32 {
    ULONG Size;
    ULONG FileHandle;
    union _LARGE_INTEGER SourceFileOffset;
    union _LARGE_INTEGER TargetFileOffset;
    union _LARGE_INTEGER ByteCount;
    ULONG Flags;
};

typedef struct _DYNAMIC_FUNCTION_TABLE {
    struct _LIST_ENTRY ListEntry;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionTable;
    union _LARGE_INTEGER TimeStamp;
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 BaseAddress;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY **Callback;
    PVOID Context;
    PWCHAR OutOfProcessCallbackDll;
    enum _FUNCTION_TABLE_TYPE Type;
    ULONG EntryCount;
    struct _RTL_BALANCED_NODE TreeNode;
};

typedef struct _DesiredStorageClass {
    enum _FILE_STORAGE_TIER_CLASS Class;
    ULONG Flags;
};

typedef struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS {
    ULONG Flags;
};

typedef struct _ECP_HEADER {
};

typedef struct _ECP_LIST {
};

typedef struct _EFI_DRIVER_ENTRY {
    ULONG Version;
    ULONG Length;
    ULONG Id;
    ULONG FriendlyNameOffset;
    ULONG DriverFilePathOffset;
};

typedef struct _EFI_DRIVER_ENTRY_LIST {
    ULONG NextEntryOffset;
    struct _EFI_DRIVER_ENTRY DriverEntry;
};

typedef struct _EFI_FIRMWARE_INFORMATION {
    ULONG FirmwareVersion;
    struct _VIRTUAL_EFI_RUNTIME_SERVICES *VirtualEfiRuntimeServices;
    LONG SetVirtualAddressMapStatus;
    ULONG MissedMappingsCount;
    struct _LIST_ENTRY FirmwareResourceList;
    PVOID EfiMemoryMap;
    ULONG EfiMemoryMapSize;
    ULONG EfiMemoryMapDescriptorSize;
};

typedef struct _EISA_DMA_CONFIGURATION {
    struct _DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
    struct _DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
};

typedef struct _EISA_IRQ_CONFIGURATION {
    struct _EISA_IRQ_DESCRIPTOR ConfigurationByte;
    UCHAR Reserved;
};

typedef struct _EISA_IRQ_DESCRIPTOR {
    UCHAR Interrupt : 4;
    UCHAR Reserved : 1;
    UCHAR LevelTriggered : 1;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _EISA_MEMORY_CONFIGURATION {
    struct _EISA_MEMORY_TYPE ConfigurationByte;
    UCHAR DataSize;
    USHORT AddressLowWord;
    UCHAR AddressHighByte;
    USHORT MemorySize;
};

typedef struct _EISA_MEMORY_TYPE {
    UCHAR ReadWrite : 1;
    UCHAR Cached : 1;
    UCHAR Reserved0 : 1;
    UCHAR Type : 2;
    UCHAR Shared : 1;
    UCHAR Reserved1 : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _EISA_PORT_CONFIGURATION {
    struct _EISA_PORT_DESCRIPTOR Configuration;
    USHORT PortAddress;
};

typedef struct _EISA_PORT_DESCRIPTOR {
    UCHAR NumberPorts : 5;
    UCHAR Reserved : 1;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
};

typedef struct _EJOB {
};

typedef struct _EMULATOR_ACCESS_ENTRY {
    ULONG BasePort;
    ULONG NumConsecutivePorts;
    enum _EMULATOR_PORT_ACCESS_TYPE AccessType;
    UCHAR AccessMode;
    UCHAR StringSupport;
    PVOID Routine;
};

typedef struct _EM_CALLBACK_REGISTRATION {
    struct _GUID *CallbackGuid;
    enum EM_RULE_STATE *CallbackFunction;
    PVOID Context;
};

typedef struct _EM_CLIENT_NOTIFICATION_REGISTRATION {
    struct _GUID *RuleId;
    PVOID RuleNotifyCallback;
    PVOID Context;
};

typedef struct _EM_ENTRY_DATA {
    PVOID Data;
    ULONG DataLength;
};

typedef struct _EM_ENTRY_REGISTRATION {
    struct _GUID *EntryGuid;
    PVOID LazyEntryCallback;
    PVOID LazyCallbackContext;
};

typedef struct _ENCLAVE_CREATE_INFO_SGX {
    UCHAR Secs[4096];
};

typedef struct _ENCLAVE_CREATE_INFO_VBS {
    ULONG Flags;
    UCHAR OwnerID[32];
};

typedef struct _ENCLAVE_INIT_INFO_SGX {
    UCHAR SigStruct[1808];
    UCHAR Reserved1[240];
    UCHAR EInitToken[304];
    UCHAR Reserved2[1744];
};

typedef struct _ENCLAVE_INIT_INFO_VBS {
    ULONG Length;
    ULONG ThreadCount;
};

typedef struct _ENCLAVE_LOAD_INFO_VBS {
    PVOID ImageHandle;
    ULONG64 Unused;
    USHORT NameLength;
    WCHAR Name[1];
};

typedef struct _ENCRYPTED_DATA_INFO {
    ULONG64 StartingFileOffset;
    ULONG OutputBufferOffset;
    ULONG BytesWithinFileSize;
    ULONG BytesWithinValidDataLength;
    USHORT CompressionFormat;
    UCHAR DataUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR EncryptionFormat;
    USHORT NumberOfDataBlocks;
    ULONG DataBlockSize[1];
};

typedef struct _ENCRYPTION_BUFFER {
    ULONG EncryptionOperation;
    UCHAR Private[1];
};

typedef struct _ENCRYPTION_KEY_CTRL_INPUT {
    ULONG HeaderSize;
    ULONG StructureSize;
    USHORT KeyOffset;
    USHORT KeySize;
    ULONG DplLock;
    ULONG64 DplUserId;
    ULONG64 DplCredentialId;
};

typedef struct _ENLISTMENT_BASIC_INFORMATION {
    struct _GUID EnlistmentId;
    struct _GUID TransactionId;
    struct _GUID ResourceManagerId;
};

typedef struct _ENLISTMENT_CRM_INFORMATION {
    struct _GUID CrmTransactionManagerId;
    struct _GUID CrmResourceManagerId;
    struct _GUID CrmEnlistmentId;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<1> {
    CHAR type;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<2> {
    SHORT type;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<4> {
    LONG type;
};

typedef struct _ENUM_FLAG_INTEGER_FOR_SIZE<8> {
    LONG64 type;
};

typedef struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS> {
    LONG type;
};

typedef struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS> {
    LONG type;
};

typedef struct _ENUM_FLAG_SIZED_INTEGER<enum SmFx::InternalTransitionFlags> {
    CHAR type;
};

typedef struct _ENUM_FLAG_SIZED_INTEGER<enum SmFx::StateFlags> {
    CHAR type;
};

typedef struct _ENUM_FLAG_SIZED_INTEGER<enum SmFx::StateSlotType> {
    SHORT type;
};

typedef struct _ENUM_FLAG_SIZED_INTEGER<enum _NET_CLIENT_BUFFER_POOL_FLAGS> {
    LONG type;
};

typedef struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_RESOURCE_POLICY_FLAGS> {
    LONG type;
};

typedef struct _EPROCESS {
};

typedef struct _ERESOURCE {
    struct _LIST_ENTRY SystemResourcesList;
    struct _OWNER_ENTRY *OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    UCHAR ReservedLowFlags;
    UCHAR WaiterPriority;
    PVOID SharedWaiters;
    PVOID ExclusiveWaiters;
    struct _OWNER_ENTRY OwnerEntry;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;
    PVOID Reserved2;
    PVOID Address;
    ULONG64 CreatorBackTraceIndex;
    ULONG64 SpinLock;
};

typedef struct _ETHERNET_HEADER {
    union _DL_EUI48 Destination;
    union _DL_EUI48 Source;
    USHORT Type;
    USHORT Length;
};

typedef struct _ETHREAD {
};

typedef struct _ETW_BUFFER_CONTEXT {
    UCHAR ProcessorNumber;
    UCHAR Alignment;
    USHORT ProcessorIndex;
    USHORT LoggerId;
};

typedef struct _ETW_HW_TRACE_EXT_INTERFACE {
    PLONG StartProcessorTraceOnEachCore;
    PLONG StopProcessorTraceOnEachCore;
    PLONG LogProcessorTraceOnCurrentCore;
};

typedef struct _ETW_HW_TRACE_HOST_INTERFACE {
    PVOID EtwWriteProcessorTrace;
};

typedef struct _ETW_TRACE_SESSION_SETTINGS {
    ULONG Version;
    ULONG BufferSize;
    ULONG MinimumBuffers;
    ULONG MaximumBuffers;
    ULONG LoggerMode;
    ULONG FlushTimer;
    ULONG FlushThreshold;
    ULONG ClockType;
};

typedef struct _EVENTLOGRECORD {
    ULONG Length;
    ULONG Reserved;
    ULONG RecordNumber;
    ULONG TimeGenerated;
    ULONG TimeWritten;
    ULONG EventID;
    USHORT EventType;
    USHORT NumStrings;
    USHORT EventCategory;
    USHORT ReservedFlags;
    ULONG ClosingRecordNumber;
    ULONG StringOffset;
    ULONG UserSidLength;
    ULONG UserSidOffset;
    ULONG DataLength;
    ULONG DataOffset;
};

typedef struct _EVENTSFORLOGFILE {
    ULONG ulSize;
    WCHAR szLogicalLogFile[256];
    ULONG ulNumRecords;
    struct _EVENTLOGRECORD pEventLogRecords[0];
};

typedef struct _EVENT_BASIC_INFORMATION {
    enum _EVENT_TYPE EventType;
    LONG EventState;
};

typedef struct _EVENT_DATA_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Reserved;
    UCHAR Type;
    UCHAR Reserved1;
    USHORT Reserved2;
};

typedef struct _EVENT_DESCRIPTOR {
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONG64 Keyword;
};

typedef struct _EVENT_FILTER_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Type;
};

typedef struct _EVENT_FILTER_EVENT_ID {
    UCHAR FilterIn;
    UCHAR Reserved;
    USHORT Count;
    USHORT Events[1];
};

typedef struct _EVENT_FILTER_EVENT_NAME {
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    UCHAR Level;
    UCHAR FilterIn;
    USHORT NameCount;
    UCHAR Names[1];
};

typedef struct _EVENT_FILTER_HEADER {
    USHORT Id;
    UCHAR Version;
    UCHAR Reserved[5];
    ULONG64 InstanceId;
    ULONG Size;
    ULONG NextOffset;
};

typedef struct _EVENT_FILTER_LEVEL_KW {
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    UCHAR Level;
    UCHAR FilterIn;
};

typedef struct _EVENT_INSTANCE_HEADER {
    USHORT Size;
    USHORT FieldTypeFlags;
    UCHAR HeaderType;
    UCHAR MarkerFlags;
    ULONG Version;
    struct {
        UCHAR Type;
        UCHAR Level;
        USHORT Version;
    } Class;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    ULONG64 RegHandle;
    ULONG InstanceId;
    ULONG ParentInstanceId;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    ULONG EventId;
    ULONG Flags;
    ULONG64 ParentRegHandle;
};

typedef struct _EVENT_TRACE {
    struct _EVENT_TRACE_HEADER Header;
    ULONG InstanceId;
    ULONG ParentInstanceId;
    struct _GUID ParentGuid;
    PVOID MofData;
    ULONG MofLength;
    ULONG ClientContext;
    struct _ETW_BUFFER_CONTEXT BufferContext;
};

typedef struct _EVENT_TRACE_HEADER {
    USHORT Size;
    USHORT FieldTypeFlags;
    UCHAR HeaderType;
    UCHAR MarkerFlags;
    ULONG Version;
    struct {
        UCHAR Type;
        UCHAR Level;
        USHORT Version;
    } Class;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID Guid;
    ULONG64 GuidPtr;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    ULONG ClientContext;
    ULONG Flags;
};

typedef struct _EXCEPTION_LOG {
    struct _EXCEPTION_RECORD ExceptionRecord;
    struct _CONTEXT ContextRecord;
    enum _EXCEPTION_LOG_TYPE Type;
    LONG Disposition;
    ULONG64 Thread;
    ULONG64 ControlPc;
    PVOID Handler;
};

typedef struct _EXCEPTION_POINTERS {
    struct _EXCEPTION_RECORD *ExceptionRecord;
    struct _CONTEXT *ContextRecord;
};

typedef struct _EXCEPTION_RECORD {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD32 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG ExceptionRecord;
    ULONG ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD64 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG NumberParameters;
    ULONG __unusedAlignment;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    enum _EXCEPTION_DISPOSITION *Handler;
};

typedef struct _EXFAT_STATISTICS {
    ULONG CreateHits;
    ULONG SuccessfulCreates;
    ULONG FailedCreates;
    ULONG NonCachedReads;
    ULONG NonCachedReadBytes;
    ULONG NonCachedWrites;
    ULONG NonCachedWriteBytes;
    ULONG NonCachedDiskReads;
    ULONG NonCachedDiskWrites;
};

typedef struct _EXHANDLE {
    ULONG TagBits : 2;
    ULONG Index : 30;
    PVOID GenericHandleOverlay;
    ULONG64 Value;
};

typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {
    ULONG ExtendedCode;
    ULONG Length;
    ULONG Flags;
    ULONG Reserved;
};

typedef struct _EXTENT_READ_CACHE_INFO_BUFFER {
    union _LARGE_INTEGER AllocatedCache;
    union _LARGE_INTEGER PopulatedCache;
    union _LARGE_INTEGER InErrorCache;
};

typedef struct _EXT_DELETE_PARAMETERS {
    ULONG Version;
    ULONG Reserved;
    PVOID DeleteCallback;
    PVOID DeleteContext;
};

typedef struct _EXT_IOMMU_DEVICE_ID {
    enum _EXT_IOMMU_DEVICE_TYPE DeviceType;
    struct _EXT_IOMMU_DEVICE_ID_PCI Pci;
    struct _EXT_IOMMU_DEVICE_ID_ACPI Acpi;
    UCHAR IoApicId;
    ULONG64 LogicalId;
    struct _EXT_IOMMU_DEVICE_ID_TEST Test;
    struct _EXT_IOMMU_DEVICE_ID_GIC Gic;
};

typedef struct _EXT_IOMMU_DEVICE_ID_ACPI {
    PCHAR ObjectName;
};

typedef struct _EXT_IOMMU_DEVICE_ID_GIC {
    ULONG LineNumber;
};

typedef struct _EXT_IOMMU_DEVICE_ID_PCI {
    ULONG64 AsUINT64;
    USHORT PciSegmentNumber;
    USHORT PhantomFunctionBits : 2;
    USHORT BusRange : 1;
    USHORT DevicePathLength : 5;
    USHORT StartBusNumber : 8;
    USHORT Bdf;
    UCHAR SubordinateBus;
    UCHAR SecondaryBus;
    PUSHORT DevicePath;
};

typedef struct _EXT_IOMMU_DEVICE_ID_TEST {
    ULONG64 UniqueId;
};

typedef struct _EXT_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONG64 NoWakeTolerance;
};

typedef struct _EX_BOOT_DEVICE_REGISTRATION {
    ULONG Version;
    ULONG Flags;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *DeviceObject;
    PUCHAR IsBootDeviceReady;
    PVOID Context;
};

typedef struct _EX_EXTENSION {
};

typedef struct _EX_EXTENSION_REGISTRATION_1 {
    USHORT ExtensionId;
    USHORT ExtensionVersion;
    USHORT FunctionCount;
    PVOID FunctionTable;
    PVOID *HostTable;
    PVOID DriverObject;
};

typedef struct _EX_PUSH_LOCK {
    ULONG64 Locked : 1;
    ULONG64 Waiting : 1;
    ULONG64 Waking : 1;
    ULONG64 MultipleShared : 1;
    ULONG64 Shared : 60;
    ULONG64 Value;
    PVOID Ptr;
};

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND {
    struct _EX_PUSH_LOCK LocalLock;
    struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State;
    ULONG Stats;
};

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE {
    ULONG Expanded : 1;
    ULONG Transitioning : 1;
    ULONG Pageable : 1;
    ULONG Value;
};

typedef struct _EX_PUSH_LOCK_CACHE_AWARE_LEGACY {
    struct _EX_PUSH_LOCK *Locks[32];
};

typedef struct _EX_PUSH_LOCK_CACHE_AWARE_PADDED {
    struct _EX_PUSH_LOCK Lock;
    UCHAR Pad[120];
    UCHAR Single;
    PVOID ParentLock;
};

typedef struct _EX_RUNDOWN_REF {
    ULONG64 Count;
    PVOID Ptr;
};

typedef struct _EX_RUNDOWN_REF_CACHE_AWARE {
    struct _EX_RUNDOWN_REF *RunRefs;
    PVOID PoolToFree;
    ULONG RunRefSize;
    ULONG Number;
};

typedef struct _EX_RUNDOWN_REF_CACHE_AWARE_STATE {
    ULONG Expanded : 1;
    ULONG Transitioning : 1;
    ULONG ExpansionDisabled : 1;
    ULONG Pageable : 1;
    ULONG Value;
};

typedef struct _EX_TIMER {
};

typedef struct _EX_WNF_SUBSCRIPTION {
};

typedef struct _FAST_ERESOURCE {
    PVOID Reserved1[3];
    ULONG Reserved2;
    PVOID Reserved3[4];
    ULONG Reserved4[4];
    PVOID Reserved5;
    PVOID Reserved6[2];
};

typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PUCHAR FastIoCheckIfPossible;
    PUCHAR FastIoRead;
    PUCHAR FastIoWrite;
    PUCHAR FastIoQueryBasicInfo;
    PUCHAR FastIoQueryStandardInfo;
    PUCHAR FastIoLock;
    PUCHAR FastIoUnlockSingle;
    PUCHAR FastIoUnlockAll;
    PUCHAR FastIoUnlockAllByKey;
    PUCHAR FastIoDeviceControl;
    PVOID AcquireFileForNtCreateSection;
    PVOID ReleaseFileForNtCreateSection;
    PVOID FastIoDetachDevice;
    PUCHAR FastIoQueryNetworkOpenInfo;
    PLONG AcquireForModWrite;
    PUCHAR MdlRead;
    PUCHAR MdlReadComplete;
    PUCHAR PrepareMdlWrite;
    PUCHAR MdlWriteComplete;
    PUCHAR FastIoReadCompressed;
    PUCHAR FastIoWriteCompressed;
    PUCHAR MdlReadCompleteCompressed;
    PUCHAR MdlWriteCompleteCompressed;
    PUCHAR FastIoQueryOpen;
    PLONG ReleaseForModWrite;
    PLONG AcquireForCcFlush;
    PLONG ReleaseForCcFlush;
};

typedef struct _FAST_MUTEX {
    LONG Count;
    PVOID Owner;
    ULONG Contention;
    struct _KEVENT Event;
    ULONG OldIrql;
};

typedef struct _FAST_OWNER_ENTRY {
    PVOID Reserved[9];
};

typedef struct _FAT_STATISTICS {
    ULONG CreateHits;
    ULONG SuccessfulCreates;
    ULONG FailedCreates;
    ULONG NonCachedReads;
    ULONG NonCachedReadBytes;
    ULONG NonCachedWrites;
    ULONG NonCachedWriteBytes;
    ULONG NonCachedDiskReads;
    ULONG NonCachedDiskWrites;
};

typedef struct _FAULT_INFORMATION {
    enum _FAULT_INFORMATION_ARCH Type;
    struct _FAULT_INFORMATION_ARM64 Arm64;
};

typedef struct _FAULT_INFORMATION_ARM64 {
    PVOID DomainHandle;
    PVOID FaultAddress;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    ULONG InputMappingId;
    struct _FAULT_INFORMATION_ARM64_FLAGS Flags;
    enum _FAULT_INFORMATION_ARM64_TYPE Type;
};

typedef struct _FAULT_INFORMATION_ARM64_FLAGS {
    ULONG WriteNotRead : 1;
    ULONG InstructionNotData : 1;
    ULONG Privileged : 1;
    ULONG FaultAddressValid : 1;
    ULONG Reserved : 28;
};

typedef struct _FIBER {
    PVOID FiberData;
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID DeallocationStack;
    struct _CONTEXT FiberContext;
    struct _Wx86TIB *Wx86Tib;
    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer;
    PVOID FlsData;
    ULONG GuaranteedStackBytes;
    USHORT TebFlags;
    USHORT ReservedPad;
    ULONG64 FiberCookie;
};

typedef struct _FILEOFFSET_INFORMATION {
    ULONG64 DontUse : 9;
    ULONG64 Offset : 48;
    ULONG64 Reserved : 7;
};

typedef struct _FILESYSTEM_STATISTICS {
    USHORT FileSystemType;
    USHORT Version;
    ULONG SizeOfCompleteStructure;
    ULONG UserFileReads;
    ULONG UserFileReadBytes;
    ULONG UserDiskReads;
    ULONG UserFileWrites;
    ULONG UserFileWriteBytes;
    ULONG UserDiskWrites;
    ULONG MetaDataReads;
    ULONG MetaDataReadBytes;
    ULONG MetaDataDiskReads;
    ULONG MetaDataWrites;
    ULONG MetaDataWriteBytes;
    ULONG MetaDataDiskWrites;
};

typedef struct _FILESYSTEM_STATISTICS_EX {
    USHORT FileSystemType;
    USHORT Version;
    ULONG SizeOfCompleteStructure;
    ULONG64 UserFileReads;
    ULONG64 UserFileReadBytes;
    ULONG64 UserDiskReads;
    ULONG64 UserFileWrites;
    ULONG64 UserFileWriteBytes;
    ULONG64 UserDiskWrites;
    ULONG64 MetaDataReads;
    ULONG64 MetaDataReadBytes;
    ULONG64 MetaDataDiskReads;
    ULONG64 MetaDataWrites;
    ULONG64 MetaDataWriteBytes;
    ULONG64 MetaDataDiskWrites;
};

typedef struct _FILE_ACCESS_INFORMATION {
    ULONG AccessFlags;
};

typedef struct _FILE_ALIGNMENT_INFORMATION {
    ULONG AlignmentRequirement;
};

typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
    union _LARGE_INTEGER FileOffset;
    union _LARGE_INTEGER Length;
};

typedef struct _FILE_ALLOCATION_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
};

typedef struct _FILE_ALL_INFORMATION {
    struct _FILE_BASIC_INFORMATION BasicInformation;
    struct _FILE_STANDARD_INFORMATION StandardInformation;
    struct _FILE_INTERNAL_INFORMATION InternalInformation;
    struct _FILE_EA_INFORMATION EaInformation;
    struct _FILE_ACCESS_INFORMATION AccessInformation;
    struct _FILE_POSITION_INFORMATION PositionInformation;
    struct _FILE_MODE_INFORMATION ModeInformation;
    struct _FILE_ALIGNMENT_INFORMATION AlignmentInformation;
    struct _FILE_NAME_INFORMATION NameInformation;
};

typedef struct _FILE_ATTRIBUTE_TAG_INFORMATION {
    ULONG FileAttributes;
    ULONG ReparseTag;
};

typedef struct _FILE_BASIC_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};

typedef struct _FILE_BOTH_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    CHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
};

typedef struct _FILE_CASE_SENSITIVE_INFORMATION {
    ULONG Flags;
};

typedef struct _FILE_COMPLETION_INFORMATION {
    PVOID Port;
    PVOID Key;
};

typedef struct _FILE_COMPRESSION_INFORMATION {
    union _LARGE_INTEGER CompressedFileSize;
    USHORT CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
};

typedef struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
    enum _FILE_STORAGE_TIER_CLASS Class;
    ULONG Flags;
};

typedef struct _FILE_DIRECTORY_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_DISPOSITION_INFORMATION {
    UCHAR DeleteFile;
};

typedef struct _FILE_DISPOSITION_INFORMATION_EX {
    ULONG Flags;
};

typedef struct _FILE_EA_INFORMATION {
    ULONG EaSize;
};

typedef struct _FILE_END_OF_FILE_INFORMATION {
    union _LARGE_INTEGER EndOfFile;
};

typedef struct _FILE_FS_ATTRIBUTE_INFORMATION {
    ULONG FileSystemAttributes;
    LONG MaximumComponentNameLength;
    ULONG FileSystemNameLength;
    WCHAR FileSystemName[1];
};

typedef struct _FILE_FS_CONTROL_INFORMATION {
    union _LARGE_INTEGER FreeSpaceStartFiltering;
    union _LARGE_INTEGER FreeSpaceThreshold;
    union _LARGE_INTEGER FreeSpaceStopFiltering;
    union _LARGE_INTEGER DefaultQuotaThreshold;
    union _LARGE_INTEGER DefaultQuotaLimit;
    ULONG FileSystemControlFlags;
};

typedef struct _FILE_FS_DATA_COPY_INFORMATION {
    ULONG NumberOfCopies;
};

typedef struct _FILE_FS_DEVICE_INFORMATION {
    ULONG DeviceType;
    ULONG Characteristics;
};

typedef struct _FILE_FS_DRIVER_PATH_INFORMATION {
    UCHAR DriverInPath;
    ULONG DriverNameLength;
    WCHAR DriverName[1];
};

typedef struct _FILE_FS_FULL_SIZE_INFORMATION {
    union _LARGE_INTEGER TotalAllocationUnits;
    union _LARGE_INTEGER CallerAvailableAllocationUnits;
    union _LARGE_INTEGER ActualAvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_FULL_SIZE_INFORMATION_EX {
    ULONG64 ActualTotalAllocationUnits;
    ULONG64 ActualAvailableAllocationUnits;
    ULONG64 ActualPoolUnavailableAllocationUnits;
    ULONG64 CallerTotalAllocationUnits;
    ULONG64 CallerAvailableAllocationUnits;
    ULONG64 CallerPoolUnavailableAllocationUnits;
    ULONG64 UsedAllocationUnits;
    ULONG64 TotalReservedAllocationUnits;
    ULONG64 VolumeStorageReserveAllocationUnits;
    ULONG64 AvailableCommittedAllocationUnits;
    ULONG64 PoolAvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_LABEL_INFORMATION {
    ULONG VolumeLabelLength;
    WCHAR VolumeLabel[1];
};

typedef struct _FILE_FS_METADATA_SIZE_INFORMATION {
    union _LARGE_INTEGER TotalMetadataAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_OBJECTID_INFORMATION {
    UCHAR ObjectId[16];
    UCHAR ExtendedInfo[48];
};

typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
    ULONG VolumeFlags;
    ULONG FlagMask;
    ULONG Version;
    ULONG Reserved;
};

typedef struct _FILE_FS_SECTOR_SIZE_INFORMATION {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
};

typedef struct _FILE_FS_SIZE_INFORMATION {
    union _LARGE_INTEGER TotalAllocationUnits;
    union _LARGE_INTEGER AvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};

typedef struct _FILE_FS_VOLUME_FLAGS_INFORMATION {
    ULONG Flags;
};

typedef struct _FILE_FS_VOLUME_INFORMATION {
    union _LARGE_INTEGER VolumeCreationTime;
    ULONG VolumeSerialNumber;
    ULONG VolumeLabelLength;
    UCHAR SupportsObjects;
    WCHAR VolumeLabel[1];
};

typedef struct _FILE_FULL_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
};

typedef struct _FILE_FULL_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR Flags;
    UCHAR EaNameLength;
    USHORT EaValueLength;
    CHAR EaName[1];
};

typedef struct _FILE_GET_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR EaNameLength;
    CHAR EaName[1];
};

typedef struct _FILE_GET_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    struct _SID Sid;
};

typedef struct _FILE_ID_128 {
    UCHAR Identifier[16];
};

typedef struct _FILE_ID_BOTH_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    CHAR ShortNameLength;
    WCHAR ShortName[12];
    union _LARGE_INTEGER FileId;
    WCHAR FileName[1];
};

typedef struct _FILE_ID_EXTD_BOTH_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    struct _FILE_ID_128 FileId;
    CHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
};

typedef struct _FILE_ID_EXTD_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    struct _FILE_ID_128 FileId;
    WCHAR FileName[1];
};

typedef struct _FILE_ID_FULL_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    union _LARGE_INTEGER FileId;
    WCHAR FileName[1];
};

typedef struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER EndOfFile;
    union _LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    union _LARGE_INTEGER FileId;
    struct _GUID LockingTransactionId;
    ULONG TxInfoFlags;
    WCHAR FileName[1];
};

typedef struct _FILE_ID_INFORMATION {
    ULONG64 VolumeSerialNumber;
    struct _FILE_ID_128 FileId;
};

typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
    ULONG64 Hint1;
    ULONG64 Hint2;
    ULONG64 Clsn;
    LONG Status;
};

typedef struct _FILE_INTERNAL_INFORMATION {
    union _LARGE_INTEGER IndexNumber;
};

typedef struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION {
    PUCHAR IoStatusBlockRange;
    ULONG Length;
};

typedef struct _FILE_IO_COMPLETION_INFORMATION {
    PVOID KeyContext;
    PVOID ApcContext;
    struct _IO_STATUS_BLOCK IoStatusBlock;
};

typedef struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION {
    ULONG Flags;
};

typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION {
    enum _IO_PRIORITY_HINT PriorityHint;
};

typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX {
    enum _IO_PRIORITY_HINT PriorityHint;
    UCHAR BoostOutstanding;
};

typedef struct _FILE_IS_REMOTE_DEVICE_INFORMATION {
    UCHAR IsRemote;
};

typedef struct _FILE_LAYOUT_ENTRY {
    ULONG Version;
    ULONG NextFileOffset;
    ULONG Flags;
    ULONG FileAttributes;
    ULONG64 FileReferenceNumber;
    ULONG FirstNameOffset;
    ULONG FirstStreamOffset;
    ULONG ExtraInfoOffset;
    ULONG ExtraInfoLength;
};

typedef struct _FILE_LAYOUT_INFO_ENTRY {
     <unnamed-type-BasicInformation>;
    struct {
        union _LARGE_INTEGER CreationTime;
        union _LARGE_INTEGER LastAccessTime;
        union _LARGE_INTEGER LastWriteTime;
        union _LARGE_INTEGER ChangeTime;
        ULONG FileAttributes;
    } BasicInformation;
    ULONG OwnerId;
    ULONG SecurityId;
    LONG64 Usn;
    enum _STORAGE_RESERVE_ID StorageReserveId;
};

typedef struct _FILE_LAYOUT_NAME_ENTRY {
    ULONG NextNameOffset;
    ULONG Flags;
    ULONG64 ParentFileReferenceNumber;
    ULONG FileNameLength;
    ULONG Reserved;
    WCHAR FileName[1];
};

typedef struct _FILE_LEVEL_TRIM {
    ULONG Key;
    ULONG NumRanges;
    struct _FILE_LEVEL_TRIM_RANGE Ranges[1];
};

typedef struct _FILE_LEVEL_TRIM_OUTPUT {
    ULONG NumRangesProcessed;
};

typedef struct _FILE_LEVEL_TRIM_RANGE {
    ULONG64 Offset;
    ULONG64 Length;
};

typedef struct _FILE_LINKS_FULL_ID_INFORMATION {
    ULONG BytesNeeded;
    ULONG EntriesReturned;
    struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION Entry;
};

typedef struct _FILE_LINKS_INFORMATION {
    ULONG BytesNeeded;
    ULONG EntriesReturned;
    struct _FILE_LINK_ENTRY_INFORMATION Entry;
};

typedef struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION {
    ULONG NextEntryOffset;
    struct _FILE_ID_128 ParentFileId;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_LINK_ENTRY_INFORMATION {
    ULONG NextEntryOffset;
    LONG64 ParentFileId;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_LINK_INFORMATION {
    UCHAR ReplaceIfExists;
    ULONG Flags;
    PVOID RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_MAILSLOT_PEEK_BUFFER {
    ULONG ReadDataAvailable;
    ULONG NumberOfMessages;
    ULONG MessageLength;
};

typedef struct _FILE_MAILSLOT_QUERY_INFORMATION {
    ULONG MaximumMessageSize;
    ULONG MailslotQuota;
    ULONG NextMessageSize;
    ULONG MessagesAvailable;
    union _LARGE_INTEGER ReadTimeout;
};

typedef struct _FILE_MAILSLOT_SET_INFORMATION {
    union _LARGE_INTEGER *ReadTimeout;
};

typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
    UCHAR CloseDisc;
};

typedef struct _FILE_MEMORY_PARTITION_INFORMATION {
    ULONG64 OwnerPartitionHandle;
     <unnamed-type-Flags>;
    union {
        UCHAR NoCrossPartitionAccess;
        UCHAR Spare[3];
        ULONG AllFlags;
    } Flags;
};

typedef struct _FILE_MODE_INFORMATION {
    ULONG Mode;
};

typedef struct _FILE_MOVE_CLUSTER_INFORMATION {
    ULONG ClusterCount;
    PVOID RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_NAMES_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};

typedef struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_NOTIFY_EXTENDED_INFORMATION {
    ULONG NextEntryOffset;
    ULONG Action;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastModificationTime;
    union _LARGE_INTEGER LastChangeTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER AllocatedLength;
    union _LARGE_INTEGER FileSize;
    ULONG FileAttributes;
    ULONG ReparsePointTag;
    union _LARGE_INTEGER FileId;
    union _LARGE_INTEGER ParentFileId;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_NOTIFY_INFORMATION {
    ULONG NextEntryOffset;
    ULONG Action;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_NUMA_NODE_INFORMATION {
    USHORT NodeNumber;
};

typedef struct _FILE_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _VPB *Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    struct _SECTION_OBJECT_POINTERS *SectionObjectPointer;
    PVOID PrivateCacheMap;
    LONG FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    UCHAR LockOperation;
    UCHAR DeletePending;
    UCHAR ReadAccess;
    UCHAR WriteAccess;
    UCHAR DeleteAccess;
    UCHAR SharedRead;
    UCHAR SharedWrite;
    UCHAR SharedDelete;
    ULONG Flags;
    struct _UNICODE_STRING FileName;
    union _LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    struct _KEVENT Lock;
    struct _KEVENT Event;
    struct _IO_COMPLETION_CONTEXT *CompletionContext;
    ULONG64 IrpListLock;
    struct _LIST_ENTRY IrpList;
    PVOID FileObjectExtension;
    VOID _FILE_OBJECT;
    VOID _FILE_OBJECT;
    struct _FILE_OBJECT *operator=;
    struct _FILE_OBJECT *operator=;
};

typedef struct _FILE_OBJECTID_BUFFER {
    UCHAR ObjectId[16];
    UCHAR BirthVolumeId[16];
    UCHAR BirthObjectId[16];
    UCHAR DomainId[16];
    UCHAR ExtendedInfo[48];
};

typedef struct _FILE_OBJECTID_INFORMATION {
    LONG64 FileReference;
    UCHAR ObjectId[16];
    UCHAR BirthVolumeId[16];
    UCHAR BirthObjectId[16];
    UCHAR DomainId[16];
    UCHAR ExtendedInfo[48];
};

typedef struct _FILE_PATH {
    ULONG Version;
    ULONG Length;
    ULONG Type;
    UCHAR FilePath[1];
};

typedef struct _FILE_PIPE_ASSIGN_EVENT_BUFFER {
    PVOID EventHandle;
    ULONG KeyValue;
};

typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER {
    PVOID ClientSession;
    PVOID ClientProcess;
};

typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX {
    PVOID ClientSession;
    PVOID ClientProcess;
    USHORT ClientComputerNameLength;
    WCHAR ClientComputerBuffer[16];
};

typedef struct _FILE_PIPE_CREATE_SYMLINK_INPUT {
    USHORT NameOffset;
    USHORT NameLength;
    USHORT SubstituteNameOffset;
    USHORT SubstituteNameLength;
    ULONG Flags;
};

typedef struct _FILE_PIPE_DELETE_SYMLINK_INPUT {
    USHORT NameOffset;
    USHORT NameLength;
};

typedef struct _FILE_PIPE_EVENT_BUFFER {
    ULONG NamedPipeState;
    ULONG EntryType;
    ULONG ByteCount;
    ULONG KeyValue;
    ULONG NumberRequests;
};

typedef struct _FILE_PIPE_EVENT_ENUM_INPUT_BUFFER {
    ULONG64 EventHandle;
};

typedef struct _FILE_PIPE_EVENT_ENUM_OUTPUT_BUFFER {
    ULONG EventTypes;
};

typedef struct _FILE_PIPE_EVENT_SELECT_BUFFER {
    ULONG EventTypes;
    ULONG64 EventHandle;
};

typedef struct _FILE_PIPE_INFORMATION {
    ULONG ReadMode;
    ULONG CompletionMode;
};

typedef struct _FILE_PIPE_LOCAL_INFORMATION {
    ULONG NamedPipeType;
    ULONG NamedPipeConfiguration;
    ULONG MaximumInstances;
    ULONG CurrentInstances;
    ULONG InboundQuota;
    ULONG ReadDataAvailable;
    ULONG OutboundQuota;
    ULONG WriteQuotaAvailable;
    ULONG NamedPipeState;
    ULONG NamedPipeEnd;
};

typedef struct _FILE_PIPE_PEEK_BUFFER {
    ULONG NamedPipeState;
    ULONG ReadDataAvailable;
    ULONG NumberOfMessages;
    ULONG MessageLength;
    CHAR Data[1];
};

typedef struct _FILE_PIPE_REMOTE_INFORMATION {
    union _LARGE_INTEGER CollectDataTime;
    ULONG MaximumCollectionCount;
};

typedef struct _FILE_PIPE_SILO_ARRIVAL_INPUT {
    PVOID JobHandle;
};

typedef struct _FILE_PIPE_WAIT_FOR_BUFFER {
    union _LARGE_INTEGER Timeout;
    ULONG NameLength;
    UCHAR TimeoutSpecified;
    WCHAR Name[1];
};

typedef struct _FILE_POSITION_INFORMATION {
    union _LARGE_INTEGER CurrentByteOffset;
};

typedef struct _FILE_PREFETCH {
    ULONG Type;
    ULONG Count;
    ULONG64 Prefetch[1];
};

typedef struct _FILE_PREFETCH_EX {
    ULONG Type;
    ULONG Count;
    PVOID Context;
    ULONG64 Prefetch[1];
};

typedef struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION {
    ULONG NumberOfProcessIdsInList;
    ULONG64 ProcessIdList[1];
};

typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
    ULONG Version;
    ULONG Algorithm;
};

typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
    ULONG Version;
    ULONG Algorithm;
    ULONG Flags;
};

typedef struct _FILE_QUERY_METADATA_OPTIMIZATION_OUTPUT {
    enum _FILE_METADATA_OPTIMIZATION_STATE State;
    ULONG AttributeListSize;
    ULONG MetadataSpaceUsed;
    ULONG MetadataSpaceAllocated;
    ULONG NumberOfFileRecords;
    ULONG NumberOfResidentAttributes;
    ULONG NumberOfNonresidentAttributes;
    ULONG TotalInProgress;
    ULONG TotalPending;
};

typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
    union _LARGE_INTEGER DirectoryCount;
    union _LARGE_INTEGER FileCount;
    USHORT FsFormatMajVersion;
    USHORT FsFormatMinVersion;
    WCHAR FsFormatName[12];
    union _LARGE_INTEGER FormatTime;
    union _LARGE_INTEGER LastUpdateTime;
    WCHAR CopyrightInfo[34];
    WCHAR AbstractInfo[34];
    WCHAR FormattingImplementationInfo[34];
    WCHAR LastModifyingImplementationInfo[34];
};

typedef struct _FILE_QUERY_SPARING_BUFFER {
    ULONG SparingUnitBytes;
    UCHAR SoftwareSparing;
    ULONG TotalSpareBlocks;
    ULONG FreeSpareBlocks;
};

typedef struct _FILE_QUERY_STORAGE_RESERVE_ID_INFORMATION_EX {
    enum _STORAGE_RESERVE_ID StorageReserveId;
    LONG64 SpaceUsed;
};

typedef struct _FILE_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER QuotaUsed;
    union _LARGE_INTEGER QuotaThreshold;
    union _LARGE_INTEGER QuotaLimit;
    struct _SID Sid;
};

typedef struct _FILE_REFERENCE_RANGE {
    ULONG64 StartingFileReferenceNumber;
    ULONG64 EndingFileReferenceNumber;
};

typedef struct _FILE_REGION_INFO {
    LONG64 FileOffset;
    LONG64 Length;
    ULONG Usage;
    ULONG Reserved;
};

typedef struct _FILE_REGION_INPUT {
    LONG64 FileOffset;
    LONG64 Length;
    ULONG DesiredUsage;
};

typedef struct _FILE_REGION_OUTPUT {
    ULONG Flags;
    ULONG TotalRegionEntryCount;
    ULONG RegionEntryCount;
    ULONG Reserved;
    struct _FILE_REGION_INFO Region[1];
};

typedef struct _FILE_REMOTE_PROTOCOL_INFORMATION {
    USHORT StructureVersion;
    USHORT StructureSize;
    ULONG Protocol;
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;
    USHORT Reserved;
    ULONG Flags;
     <unnamed-type-GenericReserved>;
    struct {
        ULONG Reserved[8];
    } GenericReserved;
     <unnamed-type-ProtocolSpecific>;
    union {
         <unnamed-type-Smb2>;
        struct {
             <unnamed-type-Server>;
            struct {
                ULONG Capabilities;
            } Server;
             <unnamed-type-Share>;
            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
                UCHAR ShareType;
                UCHAR Reserved0[3];
                ULONG Reserved1;
            } Share;
        } Smb2;
        ULONG Reserved[16];
    } ProtocolSpecific;
};

typedef struct _FILE_RENAME_INFORMATION {
    UCHAR ReplaceIfExists;
    ULONG Flags;
    PVOID RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};

typedef struct _FILE_REPARSE_POINT_INFORMATION {
    LONG64 FileReference;
    ULONG Tag;
};

typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
    UCHAR Disable;
};

typedef struct _FILE_SET_SPARSE_BUFFER {
    UCHAR SetSparse;
};

typedef struct _FILE_SET_STORAGE_RESERVE_ID_INFORMATION_EX {
    enum _STORAGE_RESERVE_ID StorageReserveId;
    ULONG Flags;
};

typedef struct _FILE_SFIO_RESERVE_INFORMATION {
    ULONG RequestsPerPeriod;
    ULONG Period;
    UCHAR RetryFailures;
    UCHAR Discardable;
    ULONG RequestSize;
    ULONG NumOutstandingRequests;
};

typedef struct _FILE_SFIO_VOLUME_INFORMATION {
    ULONG MaximumRequestsPerPeriod;
    ULONG MinimumPeriod;
    ULONG MinimumTransferSize;
};

typedef struct _FILE_STANDARD_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FILE_STANDARD_INFORMATION_EX {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
    UCHAR AlternateStream;
    UCHAR MetadataAttribute;
};

typedef struct _FILE_STANDARD_LINK_INFORMATION {
    ULONG NumberOfAccessibleLinks;
    ULONG TotalNumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FILE_STAT_INFORMATION {
    union _LARGE_INTEGER FileId;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
    ULONG ReparseTag;
    ULONG NumberOfLinks;
    ULONG EffectiveAccess;
};

typedef struct _FILE_STAT_LX_INFORMATION {
    union _LARGE_INTEGER FileId;
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
    ULONG ReparseTag;
    ULONG NumberOfLinks;
    ULONG EffectiveAccess;
    ULONG LxFlags;
    ULONG LxUid;
    ULONG LxGid;
    ULONG LxMode;
    ULONG LxDeviceIdMajor;
    ULONG LxDeviceIdMinor;
};

typedef struct _FILE_STORAGE_RESERVE_ID_INFORMATION {
    enum _STORAGE_RESERVE_ID StorageReserveId;
};

typedef struct _FILE_STORAGE_TIER {
    struct _GUID Id;
    WCHAR Name[256];
    WCHAR Description[256];
    ULONG64 Flags;
    ULONG64 ProvisionedCapacity;
    enum _FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
    enum _FILE_STORAGE_TIER_CLASS Class;
};

typedef struct _FILE_STORAGE_TIER_REGION {
    struct _GUID TierId;
    ULONG64 Offset;
    ULONG64 Length;
};

typedef struct _FILE_STREAM_INFORMATION {
    ULONG NextEntryOffset;
    ULONG StreamNameLength;
    union _LARGE_INTEGER StreamSize;
    union _LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
};

typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
    CHAR FileSystem[9];
};

typedef struct _FILE_TRACKING_INFORMATION {
    PVOID DestinationFile;
    ULONG ObjectInformationLength;
    CHAR ObjectInformation[1];
};

typedef struct _FILE_TYPE_NOTIFICATION_INPUT {
    ULONG Flags;
    ULONG NumFileTypeIDs;
    struct _GUID FileTypeID[1];
};

typedef struct _FILE_VALID_DATA_LENGTH_INFORMATION {
    union _LARGE_INTEGER ValidDataLength;
};

typedef struct _FILE_VOLUME_NAME_INFORMATION {
    ULONG DeviceNameLength;
    WCHAR DeviceName[1];
};

typedef struct _FILE_ZERO_DATA_INFORMATION {
    union _LARGE_INTEGER FileOffset;
    union _LARGE_INTEGER BeyondFinalZero;
};

typedef struct _FILE_ZERO_DATA_INFORMATION_EX {
    union _LARGE_INTEGER FileOffset;
    union _LARGE_INTEGER BeyondFinalZero;
    ULONG Flags;
};

typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK {
    ULONG FirmwareTypeUefi : 1;
    ULONG EfiRuntimeUseIum : 1;
    ULONG EfiRuntimePageProtectionSupported : 1;
    ULONG Reserved : 29;
     <unnamed-type-u>;
    union {
        struct _EFI_FIRMWARE_INFORMATION EfiInformation;
        struct _PCAT_FIRMWARE_INFORMATION PcatInformation;
    } u;
};

typedef struct _FLOAT128 {
    LONG64 LowPart;
    LONG64 HighPart;
};

typedef struct _FLS_CALLBACK_INFO {
};

typedef struct _FNSAVE_FORMAT {
    ULONG ControlWord;
    ULONG StatusWord;
    ULONG TagWord;
    ULONG ErrorOffset;
    ULONG ErrorSelector;
    ULONG DataOffset;
    ULONG DataSelector;
    UCHAR RegisterArea[80];
};

typedef struct _FPGA_CONTROL_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID BusScan;
    PLONG ControlLink;
    PLONG ControlConfigSpace;
    PLONG ControlErrorReporting;
};

typedef struct _FPO_DATA {
    ULONG ulOffStart;
    ULONG cbProcSize;
    ULONG cdwLocals;
    USHORT cdwParams;
    USHORT cbProlog : 8;
    USHORT cbRegs : 3;
    USHORT fHasSEH : 1;
    USHORT fUseBP : 1;
    USHORT reserved : 1;
    USHORT cbFrame : 2;
};

typedef struct _FP_128 {
    ULONG W[4];
};

typedef struct _FP_32 {
    ULONG W[1];
};

typedef struct _FP_64 {
    ULONG W[2];
};

typedef struct _FP_80 {
    ULONG W[3];
};

typedef struct _FP_IEEE_RECORD {
    struct _FP_IEEE_VALUE Operand1;
    struct _FP_IEEE_VALUE Operand2;
    struct _FP_IEEE_VALUE Result;
};

typedef struct _FP_IEEE_VALUE {
     <unnamed-type-Value>;
    union {
        SHORT I16Value;
        USHORT U16Value;
        LONG I32Value;
        ULONG U32Value;
        PVOID StringValue;
        ULONG CompareValue;
        struct _FP_32 Fp32Value;
        union _LARGE_INTEGER I64Value;
        union _ULARGE_INTEGER U64Value;
        struct _FP_64 Fp64Value;
        struct _FP_80 Fp80Value;
        struct _FP_128 Fp128Value;
    } Value;
     <unnamed-type-Control>;
    struct {
        ULONG RoundingMode : 2;
        ULONG Inexact : 1;
        ULONG Underflow : 1;
        ULONG Overflow : 1;
        ULONG ZeroDivide : 1;
        ULONG InvalidOperation : 1;
        ULONG OperandValid : 1;
        ULONG Format : 4;
        ULONG Precision : 4;
        ULONG Operation : 12;
        ULONG Spare : 3;
        ULONG HardwareException : 1;
    } Control;
};

typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
    USHORT ChecksumAlgorithm;
    USHORT Reserved;
    ULONG Flags;
    ULONG ChecksumChunkSizeInBytes;
    ULONG ClusterSizeInBytes;
};

typedef struct _FSCTL_GHOST_FILE_EXTENTS_INPUT_BUFFER {
    union _LARGE_INTEGER FileOffset;
    union _LARGE_INTEGER ByteCount;
    struct _GUID RecallOwnerGuid;
    ULONG RecallMetadataBufferSize;
    UCHAR RecallMetadataBuffer[1];
};

typedef struct _FSCTL_OFFLOAD_READ_INPUT {
    ULONG Size;
    ULONG Flags;
    ULONG TokenTimeToLive;
    ULONG Reserved;
    ULONG64 FileOffset;
    ULONG64 CopyLength;
};

typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
    ULONG Size;
    ULONG Flags;
    ULONG64 TransferLength;
    UCHAR Token[512];
};

typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
    ULONG Size;
    ULONG Flags;
    ULONG64 FileOffset;
    ULONG64 CopyLength;
    ULONG64 TransferOffset;
    UCHAR Token[512];
};

typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
    ULONG Size;
    ULONG Flags;
    ULONG64 LengthWritten;
};

typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
    UCHAR First0x24BytesOfBootSector[36];
};

typedef struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_INPUT_RANGE {
    union _LARGE_INTEGER FileOffset;
    union _LARGE_INTEGER ByteCount;
};

typedef struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_OUTPUT {
    ULONG ExtentCount;
    ULONG TotalExtentCount;
    UCHAR Extents[1];
};

typedef struct _FSCTL_QUERY_REGION_INFO_INPUT {
    ULONG Version;
    ULONG Size;
    ULONG Flags;
    ULONG NumberOfTierIds;
    struct _GUID TierIds[1];
};

typedef struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
    ULONG Version;
    ULONG Size;
    ULONG Flags;
    ULONG Reserved;
    ULONG64 Alignment;
    ULONG TotalNumberOfRegions;
    ULONG NumberOfRegionsReturned;
    struct _FILE_STORAGE_TIER_REGION Regions[1];
};

typedef struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
    ULONG Version;
    ULONG Size;
    ULONG Flags;
    ULONG TotalNumberOfTiers;
    ULONG NumberOfTiersReturned;
    struct _FILE_STORAGE_TIER Tiers[1];
};

typedef struct _FSCTL_QUERY_VOLUME_NUMA_INFO_OUTPUT {
    ULONG NumaNode;
};

typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
    USHORT ChecksumAlgorithm;
    USHORT Reserved;
    ULONG Flags;
};

typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
    UCHAR EnableIntegrity;
    UCHAR KeepIntegrityStateUnchanged;
    USHORT Reserved;
    ULONG Flags;
    UCHAR Version;
    UCHAR Reserved2[7];
};

typedef struct _FSCTL_UNMAP_SPACE_INPUT_BUFFER {
    union _LARGE_INTEGER BytesToUnmap;
};

typedef struct _FSCTL_UNMAP_SPACE_OUTPUT {
    union _LARGE_INTEGER BytesUnmapped;
};

typedef struct _FSRTL_ADVANCED_FCB_HEADER {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    UCHAR Flags;
    UCHAR IsFastIoPossible;
    UCHAR Flags2;
    UCHAR Reserved : 4;
    UCHAR Version : 4;
    struct _ERESOURCE *Resource;
    struct _ERESOURCE *PagingIoResource;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER FileSize;
    union _LARGE_INTEGER ValidDataLength;
    struct _FAST_MUTEX *FastMutex;
    struct _LIST_ENTRY FilterContexts;
    ULONG64 PushLock;
    PVOID *FileContextSupportPointer;
    PVOID Oplock;
    PVOID ReservedForRemote;
    PVOID ReservedContext;
};

typedef struct _FUNCTION_LEVEL_DEVICE_RESET_PARAMETERS {
    ULONG Size;
    PVOID DeviceResetCompletion;
    PVOID CompletionContext;
};

typedef struct _FUNCTION_LEVEL_RESET_PARAMETERS {
    struct _FUNCTION_LEVEL_DEVICE_RESET_PARAMETERS CompletionParameters;
    struct _KEVENT Event;
    LONG Status;
    VOID _FUNCTION_LEVEL_RESET_PARAMETERS;
    VOID _FUNCTION_LEVEL_RESET_PARAMETERS;
    struct _FUNCTION_LEVEL_RESET_PARAMETERS *operator=;
    struct _FUNCTION_LEVEL_RESET_PARAMETERS *operator=;
};

typedef struct _GDI_TEB_BATCH {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG64 HDC;
    ULONG Buffer[310];
};

typedef struct _GENERAL_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERAL_LOOKASIDE_POOL {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERATE_NAME_CONTEXT {
    USHORT Checksum;
    UCHAR ChecksumInserted;
    UCHAR NameLength;
    WCHAR NameBuffer[8];
    ULONG ExtensionLength;
    WCHAR ExtensionBuffer[4];
    ULONG LastIndexValue;
};

typedef struct _GENERIC_MAPPING {
    ULONG GenericRead;
    ULONG GenericWrite;
    ULONG GenericExecute;
    ULONG GenericAll;
};

typedef struct _GEN_GET_NETCARD_TIME {
    ULONG64 ReadTime;
};

typedef struct _GEN_GET_TIME_CAPS {
    ULONG Flags;
    ULONG ClockPrecision;
};

typedef struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
    USHORT AltitudeLength;
    WCHAR Altitude[1];
};

typedef struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
    USHORT FilterFileIdentifierLength;
    UCHAR FilterFileIdentifier[1];
};

typedef struct _GHOSTED_FILE_EXTENT {
    union _LARGE_INTEGER FileOffset;
    union _LARGE_INTEGER ByteCount;
    struct _GUID RecallOwnerGuid;
    ULONG NextEntryOffset;
    ULONG RecallMetadataBufferSize;
    UCHAR RecallMetadataBuffer[1];
};

typedef struct _GROUP_AFFINITY {
    ULONG64 Mask;
    USHORT Group;
    USHORT Reserved[3];
};

typedef struct _GROUP_RELATIONSHIP {
    USHORT MaximumGroupCount;
    USHORT ActiveGroupCount;
    UCHAR Reserved[20];
    struct _PROCESSOR_GROUP_INFO GroupInfo[1];
};

typedef struct _GS_HANDLER_DATA {
    union {
        struct {
            ULONG EHandler : 1;
            ULONG UHandler : 1;
            ULONG HasAlignment : 1;
        } Bits;
        LONG CookieOffset;
    } u;
    LONG AlignedBaseOffset;
    LONG Alignment;
};

typedef struct _GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct _HAL_ACPI_AUDIT_INFORMATION {
    ULONG RsdpCount;
    ULONG SameRsdt : 1;
    ULONG SlicPresent : 1;
    ULONG SlicDifferent : 1;
};

typedef struct _HAL_AMLI_BAD_IO_ADDRESS_LIST {
    ULONG BadAddrBegin;
    ULONG BadAddrSize;
    ULONG OSVersionTrigger;
    PLONG IOHandler;
};

typedef struct _HAL_BUS_INFORMATION {
    enum _INTERFACE_TYPE BusType;
    enum _BUS_DATA_TYPE ConfigurationType;
    ULONG BusNumber;
    ULONG Reserved;
};

typedef struct _HAL_CALLBACKS {
    struct _CALLBACK_OBJECT *SetSystemInformation;
    struct _CALLBACK_OBJECT *BusCheck;
};

typedef struct _HAL_CHANNEL_COMMAND {
    USHORT Node;
    USHORT Channel;
    enum HAL_PCC_CHANNEL_POWER_COMMAND Command;
    ULONG Status;
    ULONG64 Data;
};

typedef struct _HAL_CHANNEL_MEMORY_RANGES {
    ULONG64 PageFrameIndex;
    USHORT MpnId;
    USHORT Node;
    USHORT Channel;
    UCHAR IsPowerManageable;
    UCHAR DeepPowerState;
};

typedef struct _HAL_CLOCK_TIMER_CONFIGURATION {
    UCHAR Flags;
    UCHAR AlwaysOnTimer : 1;
    UCHAR HighLatency : 1;
    UCHAR PerCpuTimer : 1;
    UCHAR DynamicTickSupported : 1;
    ULONG KnownType;
    ULONG Capabilities;
    ULONG64 MaxIncrement;
    ULONG MinIncrement;
};

typedef struct _HAL_DMA_REMAPPING_INFORMATION {
    UCHAR RemappingCapable;
};

typedef struct _HAL_DP_REPLACE_PARAMETERS {
    ULONG Flags;
    struct _PNP_REPLACE_PROCESSOR_LIST *TargetProcessors;
    struct _PNP_REPLACE_PROCESSOR_LIST *SpareProcessors;
};

typedef struct _HAL_ERROR_INFO {
    ULONG Version;
    ULONG InitMaxSize;
    ULONG McaMaxSize;
    ULONG McaPreviousEventsCount;
    ULONG McaCorrectedEventsCount;
    ULONG McaKernelDeliveryFails;
    ULONG McaDriverDpcQueueFails;
    ULONG McaReserved;
    ULONG CmcMaxSize;
    ULONG CmcPollingInterval;
    ULONG CmcInterruptsCount;
    ULONG CmcKernelDeliveryFails;
    ULONG CmcDriverDpcQueueFails;
    ULONG CmcGetStateFails;
    ULONG CmcClearStateFails;
    ULONG CmcReserved;
    ULONG64 CmcLogId;
    ULONG CpeMaxSize;
    ULONG CpePollingInterval;
    ULONG CpeInterruptsCount;
    ULONG CpeKernelDeliveryFails;
    ULONG CpeDriverDpcQueueFails;
    ULONG CpeGetStateFails;
    ULONG CpeClearStateFails;
    ULONG CpeInterruptSources;
    ULONG64 CpeLogId;
    ULONG64 KernelReserved[4];
};

typedef struct _HAL_EXTENSION_INSTANCE_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG OffsetIntoCsrt;
};

typedef struct _HAL_EXTENSION_MODULE_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID HalExtensionInfo;
    struct _LIST_ENTRY HalExtensionInstanceList;
    LONG ModuleLoadStatus;
    PCHAR ModuleName;
    PCHAR ModulePath;
};

typedef struct _HAL_EXTERNAL_CACHE_INFO {
    struct _CACHE_DESCRIPTOR CacheDescriptor;
    UCHAR GlobalSyncRequired;
};

typedef struct _HAL_HARDWARE_WATCHDOG_INFORMATION {
    enum _HAL_WATCHDOG_TIMER_SOURCE WatchdogSource;
};

typedef struct _HAL_HETEROGENEOUS_MEMORY_ATTRIBUTES_INTERFACE {
    PLONG QueryMemorySideCacheInfo;
};

typedef struct _HAL_HMA_MEMORY_SIDE_CACHE_INFO {
    ULONG NodeNumber;
    ULONG ProximityDomain;
    ULONG64 MemorySideCacheSize;
    enum _HMA_CACHE_LEVEL TotalCacheLevels;
    enum _HMA_CACHE_LEVEL CacheLevel;
    enum _HMA_CACHE_ASSOCIATIVITY CacheAssociativity;
    enum _HMA_CACHE_WRITE_POLICY WritePolicy;
    ULONG CacheLineSize;
};

typedef struct _HAL_HV_DMA_DOMAIN_CONFIG {
    union _LARGE_INTEGER Ttbr0;
    union _LARGE_INTEGER Ttbr1;
    ULONG Mair0;
    ULONG Mair1;
    UCHAR InputSize0;
    UCHAR InputSize1;
    USHORT Asid;
    UCHAR CoherentTableWalks;
    UCHAR TranslationEnabled;
};

typedef struct _HAL_HV_DMA_DOMAIN_INFO {
    ULONG DomainId;
    UCHAR IsStage1;
};

typedef struct _HAL_HV_SVM_DEVICE_CAPABILITIES {
    ULONG SvmSupported : 1;
    ULONG PciExecute : 1;
    ULONG NoExecute : 1;
    ULONG Reserved : 28;
    ULONG OverflowPossible : 1;
    ULONG PasidCount;
    ULONG IommuIndex;
};

typedef struct _HAL_HV_SVM_SYSTEM_CAPABILITIES {
    ULONG SvmSupported : 1;
    ULONG GpaAlwaysValid : 1;
    ULONG MaxPasidSpaceCount;
    ULONG MaxPasidSpacePasidCount;
    ULONG MaxPrqSize;
    ULONG IommuCount;
    ULONG MinIommuPasidCount;
};

typedef struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION {
    ULONG Enlightenments;
    ULONG HypervisorConnected;
    PVOID EndOfInterrupt;
    PVOID ApicWriteIcr;
    ULONG Reserved0;
    ULONG SpinCountMask;
    PVOID LongSpinWait;
    PULONG64 GetReferenceTime;
    PLONG SetSystemSleepProperty;
    PLONG EnterSleepState;
    PLONG NotifyDebugDeviceAvailable;
    PLONG MapDeviceInterrupt;
    PLONG UnmapDeviceInterrupt;
    PLONG RetargetDeviceInterrupt;
    PLONG SetHpetConfig;
    PLONG NotifyHpetEnabled;
    PLONG QueryAssociatedProcessors;
    PLONG ReadMultipleMsr;
    PLONG WriteMultipleMsr;
    PLONG ReadCpuid;
    PLONG LpWritebackInvalidate;
    PLONG GetMachineCheckContext;
    PLONG SuspendPartition;
    PLONG ResumePartition;
    PLONG SetSystemMachineCheckProperty;
    PLONG WheaErrorNotification;
    PULONG GetProcessorIndexFromVpIndex;
    PLONG SyntheticClusterIpi;
    PUCHAR VpStartEnabled;
    PLONG StartVirtualProcessor;
    PLONG GetVpIndexFromApicId;
    PLONG IumAccessPciDevice;
    PULONG64 IumEfiRuntimeService;
    PVOID SvmGetSystemCapabilities;
    PLONG SvmGetDeviceCapabilities;
    PLONG SvmCreatePasidSpace;
    PLONG SvmSetPasidAddressSpace;
    PVOID SvmFlushPasid;
    PLONG SvmAttachPasidSpace;
    PLONG SvmDetachPasidSpace;
    PLONG SvmEnablePasid;
    PLONG SvmDisablePasid;
    PLONG SvmAcknowledgePageRequest;
    PLONG SvmCreatePrQueue;
    PLONG SvmDeletePrQueue;
    PLONG SvmClearPrqStalled;
    PLONG SvmSetDeviceEnabled;
    PLONG HvDebuggerPowerHandler;
    PLONG SetQpcBias;
    PULONG64 GetQpcBias;
    PLONG RegisterDeviceId;
    PLONG UnregisterDeviceId;
    PLONG AllocateDeviceDomain;
    PLONG AttachDeviceDomain;
    PLONG DetachDeviceDomain;
    PLONG DeleteDeviceDomain;
    PLONG MapDeviceLogicalRange;
    PLONG UnmapDeviceLogicalRange;
    PLONG MapDeviceSparsePages;
    PLONG UnmapDeviceSparsePages;
    PLONG GetDmaGuardEnabled;
    PLONG UpdateMicrocode;
};

typedef struct _HAL_INTERRUPT_TARGET_INFORMATION {
    enum HAL_INTERRUPT_TARGET_TYPE Type;
    struct _PROCESSOR_NUMBER ProcessorNumber;
    ULONG Flags;
    struct {
        ULONG LogicalApicId;
        ULONG ClusterId;
        enum HAL_APIC_DESTINATION_MODE DestinationMode;
    } Apic;
    struct {
        UCHAR Enabled;
        ULONG MinimumIndex;
        ULONG MaximumIndex;
    } Irt;
};

typedef struct _HAL_IOMMU_DISPATCH {
    PUCHAR HalIommuSupportEnabled;
    PLONG HalIommuGetConfiguration;
    PLONG HalIommuGetLibraryContext;
    PLONG HalIommuMapDevice;
    PLONG HalIommuEnableDevicePasid;
    PLONG HalIommuSetAddressSpace;
    PLONG HalIommuDisableDevicePasid;
    PLONG HalIommuUnmapDevice;
    PLONG HalIommuFreeLibraryContext;
    PVOID HalIommuFlushTb;
    PVOID HalIommuFlushAllPasid;
    PUCHAR HalIommuProcessPageRequestQueue;
    PVOID HalIommuFaultRoutine;
    PVOID *HalIommuReferenceAsid;
    PVOID HalIommuDereferenceAsid;
    PLONG HalIommuServicePageFault;
    PLONG HalIommuDevicePowerChange;
    PLONG HalIommuBeginDeviceReset;
    PLONG HalIommuFinalizeDeviceReset;
};

typedef struct _HAL_IOMMU_RESERVED_REGION_INFORMATION {
    struct _DEVICE_OBJECT *DeviceObject;
    UCHAR RequiresReservedRegion;
};

typedef struct _HAL_IRT_INFORMATION {
    ULONG SegmentCount;
    ULONG IrtEntriesForParentOsPerSegment;
    ULONG IrtEntriesForChildOsesPerSegment;
};

typedef struct _HAL_LBR_ENTRY {
    PVOID FromAddress;
    PVOID ToAddress;
    PVOID Reserved;
};

typedef struct _HAL_LOG_REGISTER_CONTEXT {
    PVOID LogRoutine;
    ULONG Flag;
};

typedef struct _HAL_MCA_INTERFACE {
    PVOID Lock;
    PVOID Unlock;
    PLONG ReadRegister;
};

typedef struct _HAL_MESSAGE_TARGET_REQUEST {
    enum HAL_INTERRUPT_TARGET_TYPE Type;
     <unnamed-type-Apic>;
    struct {
        ULONG Vector;
        struct _GROUP_AFFINITY TargetProcessors;
        enum HAL_APIC_DESTINATION_MODE DestinationMode;
        struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
    } Apic;
};

typedef struct _HAL_NODE_RANGE {
    ULONG64 PageFrameIndex;
    ULONG Node;
};

typedef struct _HAL_NUMA_TOPOLOGY_INTERFACE {
    USHORT NumberOfNodes;
    PLONG QueryProcessorNode;
    PVOID Spare;
    PLONG QueryProximityNode;
    PLONG AddRangeProximity;
    PLONG QueryProximityId;
    PLONG QueryNodeCapacity;
    PLONG QueryNodeDistance;
};

typedef struct _HAL_PARKING_PAGE_INFORMATION {
    ULONG Processor;
    union _LARGE_INTEGER PhysicalPageAddress;
    PVOID VirtualPageAddress;
};

typedef struct _HAL_PLATFORM_INFORMATION {
    ULONG PlatformFlags;
};

typedef struct _HAL_PLATFORM_TIMER_INFORMATION {
    ULONG Version;
    enum _HAL_PLATFORM_TIMER_SOURCE ClockInterruptSource;
    enum _HAL_PLATFORM_TIMER_SOURCE PerformanceCounterSource;
};

typedef struct _HAL_PMC_COUNTERS {
};

typedef struct _HAL_PORT_RANGE_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG QueryAllocateRange;
    PVOID FreeRange;
};

typedef struct _HAL_POWER_INFORMATION {
    ULONG TBD;
};

typedef struct _HAL_PROCESSOR_FEATURE {
    ULONG UsableFeatureBits;
};

typedef struct _HAL_PROCESSOR_SPEED_INFO {
    ULONG ProcessorSpeed;
};

typedef struct _HAL_PROFILE_SOURCE_ADD {
    UCHAR PerfEvtEventSelect;
    UCHAR PerfEvtUnitSelect;
    ULONG PerfEvtType;
    ULONG FormattedEvent;
    ULONG InitialInterval;
    struct _KAFFINITY_EX PerfEvtAffinity;
    UCHAR AllowsHalt;
    WCHAR ProfileSourceDescription[1];
};

typedef struct _HAL_PROFILE_SOURCE_INFORMATION {
    enum _KPROFILE_SOURCE Source;
    UCHAR Supported;
    ULONG Interval;
    PWCHAR Description;
};

typedef struct _HAL_PROFILE_SOURCE_INFORMATION_EX {
    enum _KPROFILE_SOURCE Source;
    UCHAR Supported;
    ULONG64 Interval;
    ULONG64 DefInterval;
    ULONG64 MaxInterval;
    ULONG64 MinInterval;
};

typedef struct _HAL_PROFILE_SOURCE_INTERVAL {
    enum _KPROFILE_SOURCE Source;
    ULONG Interval;
};

typedef struct _HAL_PROFILE_SOURCE_LIST {
    ULONG NextEntryOffset;
    enum _KPROFILE_SOURCE Source;
    ULONG MinInterval;
    ULONG MaxInterval;
    ULONG64 Reserved;
    WCHAR Description[1];
};

typedef struct _HAL_PROFILE_SOURCE_REMOVE {
    enum _KPROFILE_SOURCE ProfileSource;
    struct _KAFFINITY_EX RemovalAffinity;
};

typedef struct _HAL_QUERY_PROCESSOR_EFFICIENCY_INFORMATION {
    ULONG ProcessorIndex;
    UCHAR PowerEfficiencyClass;
    UCHAR Spare[3];
};

typedef struct _HAL_RUNTIME_SERVICES_BLOCK_INFO {
    PVOID RuntimeServicesBlock;
    ULONG Size;
};

typedef struct _HAL_SET_I386_EXCEPTION_CHAIN_TERMINATOR_INFORMATION {
    PVOID ExceptionChainTerminator;
};

typedef struct _HAL_STATE_ELEMENT {
    PVOID Address;
    ULONG64 Size;
};

typedef struct _HAL_STATE_ELEMENT_INFORMATION {
    struct _HAL_STATE_ELEMENT *StateElements;
    ULONG64 StateElementCount;
};

typedef struct _HAL_UNMASKED_INTERRUPT_INFORMATION {
    USHORT Version;
    USHORT Size;
    union _HAL_UNMASKED_INTERRUPT_FLAGS Flags;
    enum _KINTERRUPT_MODE Mode;
    enum _KINTERRUPT_POLARITY Polarity;
    ULONG Gsiv;
    USHORT PinNumber;
    PVOID DeviceHandle;
};

typedef struct _HANDLE_TABLE {
};

typedef struct _HARDERROR_MSG {
    struct _PORT_MESSAGE h;
    LONG Status;
    union _LARGE_INTEGER ErrorTime;
    ULONG ValidResponseOptions;
    ULONG Response;
    ULONG NumberOfParameters;
    ULONG UnicodeStringParameterMask;
    ULONG64 Parameters[5];
};

typedef struct _HARDWARE_COUNTER {
    enum _HARDWARE_COUNTER_TYPE Type;
    ULONG Reserved;
    ULONG64 Index;
};

typedef struct _HARDWARE_PTE {
    ULONG64 Valid : 1;
    ULONG64 Write : 1;
    ULONG64 Owner : 1;
    ULONG64 WriteThrough : 1;
    ULONG64 CacheDisable : 1;
    ULONG64 Accessed : 1;
    ULONG64 Dirty : 1;
    ULONG64 LargePage : 1;
    ULONG64 Global : 1;
    ULONG64 CopyOnWrite : 1;
    ULONG64 Prototype : 1;
    ULONG64 reserved0 : 1;
    ULONG64 PageFrameNumber : 36;
    ULONG64 reserved1 : 4;
    ULONG64 SoftwareWsIndex : 11;
    ULONG64 NoExecute : 1;
};

typedef struct _HEADLESS_LOADER_BLOCK {
};

typedef struct _HIBERFILE_BUCKET {
    ULONG64 MaxPhysicalMemory;
    ULONG PhysicalMemoryPercent[3];
};

typedef struct _HOT_PATCH_IMAGE_INFO {
    ULONG CheckSum;
    ULONG TimeDateStamp;
};

typedef struct _HSM_OPCODE {
    ULONG Tag;
    ULONG Code;
};

typedef struct _HV_DETAILS {
    ULONG Data[4];
};

typedef struct _HWPROFILE_CHANGE_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
};

typedef struct _I386_LOADER_BLOCK {
    PVOID CommonDataArea;
    ULONG MachineType;
    ULONG VirtualBias;
};

typedef struct _ICMPV4_ADDRESS_MASK_MESSAGE {
    struct _ICMP_MESSAGE Header;
    ULONG AddressMask;
};

typedef struct _ICMPV4_ROUTER_ADVERT_ENTRY {
    struct in_addr RouterAdvertAddr;
    LONG PreferenceLevel;
};

typedef struct _ICMPV4_ROUTER_ADVERT_HEADER {
    struct _ICMP_MESSAGE RaHeader;
};

typedef struct _ICMPV4_ROUTER_SOLICIT {
    struct _ICMP_MESSAGE RsHeader;
};

typedef struct _ICMPV4_TIMESTAMP_MESSAGE {
    struct _ICMP_MESSAGE Header;
    ULONG OriginateTimestamp;
    ULONG ReceiveTimestamp;
    ULONG TransmitTimestamp;
};

typedef struct _ICMP_HEADER {
    UCHAR Type;
    UCHAR Code;
    USHORT Checksum;
};

typedef struct _ICMP_MESSAGE {
    struct _ICMP_HEADER Header;
     <unnamed-type-Data>;
    union {
        ULONG Data32[1];
        USHORT Data16[2];
        UCHAR Data8[4];
    } Data;
};

typedef struct _IF_COUNTED_STRING_LH {
    USHORT Length;
    WCHAR String[257];
};

typedef struct _IF_PHYSICAL_ADDRESS_LH {
    USHORT Length;
    UCHAR Address[32];
};

typedef struct _IGMPV3_QUERY_HEADER {
    UCHAR Type;
    UCHAR MaxRespCode;
    UCHAR MaxRespCodeMantissa : 4;
    UCHAR MaxRespCodeExponent : 3;
    UCHAR MaxRespCodeType : 1;
    USHORT Checksum;
    struct in_addr MulticastAddress;
    UCHAR QuerierRobustnessVariable : 3;
    UCHAR SuppressRouterSideProcessing : 1;
    UCHAR Reserved : 4;
    UCHAR QueriersQueryInterfaceCode;
    UCHAR QQCMantissa : 4;
    UCHAR QQCExponent : 3;
    UCHAR QQCType : 1;
    USHORT SourceCount;
};

typedef struct _IGMPV3_REPORT_HEADER_ {
    UCHAR Type;
    UCHAR Reserved;
    USHORT Checksum;
    USHORT Reserved2;
    USHORT RecordCount;
};

typedef struct _IGMPV3_REPORT_RECORD_HEADER {
    UCHAR Type;
    UCHAR AuxillaryDataLength;
    USHORT SourceCount;
    struct in_addr MulticastAddress;
};

typedef struct _IGMP_HEADER {
    UCHAR Type : 4;
    UCHAR Version : 4;
    UCHAR VersionType;
    UCHAR Reserved;
    UCHAR MaxRespTime;
    UCHAR Code;
    USHORT Checksum;
    struct in_addr MulticastAddress;
};

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONG64 BeginAddress;
    ULONG64 EndAddress;
    ULONG64 ExceptionHandler;
    ULONG64 HandlerData;
    ULONG64 PrologEndAddress;
};

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG EndAddress;
    ULONG ExceptionHandler;
    ULONG HandlerData;
    ULONG PrologEndAddress;
};

typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    UCHAR Name[16];
    UCHAR Date[12];
    UCHAR UserID[6];
    UCHAR GroupID[6];
    UCHAR Mode[8];
    UCHAR Size[10];
    UCHAR EndHeader[2];
};

typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG UnwindData;
    ULONG Flag : 2;
    ULONG FunctionLength : 11;
    ULONG RegF : 3;
    ULONG RegI : 4;
    ULONG H : 1;
    ULONG CR : 2;
    ULONG FrameSize : 9;
};

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG UnwindData;
    ULONG Flag : 2;
    ULONG FunctionLength : 11;
    ULONG Ret : 2;
    ULONG H : 1;
    ULONG Reg : 3;
    ULONG R : 1;
    ULONG L : 1;
    ULONG C : 1;
    ULONG StackAdjust : 10;
};

typedef struct _IMAGE_BASE_RELOCATION {
    ULONG VirtualAddress;
    ULONG SizeOfBlock;
};

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    ULONG TimeDateStamp;
    USHORT OffsetModuleName;
    USHORT Reserved;
};

typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    ULONG TimeDateStamp;
    USHORT OffsetModuleName;
    USHORT NumberOfModuleForwarderRefs;
};

typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    ULONG FuncStart;
    ULONG PrologLen : 8;
    ULONG FuncLen : 22;
    ULONG ThirtyTwoBit : 1;
    ULONG ExceptionFlag : 1;
};

typedef struct _IMAGE_CHPE_METADATA_X86 {
    ULONG Version;
    ULONG CHPECodeAddressRangeOffset;
    ULONG CHPECodeAddressRangeCount;
    ULONG WowA64ExceptionHandlerFunctionPointer;
    ULONG WowA64DispatchCallFunctionPointer;
    ULONG WowA64DispatchIndirectCallFunctionPointer;
    ULONG WowA64DispatchIndirectCallCfgFunctionPointer;
    ULONG WowA64DispatchRetFunctionPointer;
    ULONG WowA64DispatchRetLeafFunctionPointer;
    ULONG WowA64DispatchJumpFunctionPointer;
    ULONG CompilerIATPointer;
    ULONG WowA64RdtscFunctionPointer;
};

typedef struct _IMAGE_CHPE_RANGE_ENTRY {
    ULONG StartOffset;
    ULONG NativeCode : 1;
    ULONG AddressBits : 31;
    ULONG Length;
};

typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    ULONG NumberOfSymbols;
    ULONG LvaToFirstSymbol;
    ULONG NumberOfLinenumbers;
    ULONG LvaToFirstLinenumber;
    ULONG RvaToFirstByteOfCode;
    ULONG RvaToLastByteOfCode;
    ULONG RvaToFirstByteOfData;
    ULONG RvaToLastByteOfData;
};

typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG VirtualAddress;
    ULONG Size;
};

typedef struct _IMAGE_DEBUG_DIRECTORY {
    ULONG Characteristics;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG Type;
    ULONG SizeOfData;
    ULONG AddressOfRawData;
    ULONG PointerToRawData;
};

typedef struct _IMAGE_DEBUG_MISC {
    ULONG DataType;
    ULONG Length;
    UCHAR Unicode;
    UCHAR Reserved[3];
    UCHAR Data[1];
};

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
     <unnamed-type-Attributes>;
    union {
        ULONG AllAttributes;
        ULONG RvaBased : 1;
        ULONG ReservedAttributes : 31;
    } Attributes;
    ULONG DllNameRVA;
    ULONG ModuleHandleRVA;
    ULONG ImportAddressTableRVA;
    ULONG ImportNameTableRVA;
    ULONG BoundImportAddressTableRVA;
    ULONG UnloadInformationTableRVA;
    ULONG TimeDateStamp;
};

typedef struct _IMAGE_DOS_HEADER {
    USHORT e_magic;
    USHORT e_cblp;
    USHORT e_cp;
    USHORT e_crlc;
    USHORT e_cparhdr;
    USHORT e_minalloc;
    USHORT e_maxalloc;
    USHORT e_ss;
    USHORT e_sp;
    USHORT e_csum;
    USHORT e_ip;
    USHORT e_cs;
    USHORT e_lfarlc;
    USHORT e_ovno;
    USHORT e_res[4];
    USHORT e_oemid;
    USHORT e_oeminfo;
    USHORT e_res2[10];
    LONG e_lfanew;
};

typedef struct _IMAGE_DYNAMIC_RELOCATION32 {
    ULONG Symbol;
    ULONG BaseRelocSize;
};

typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
    ULONG HeaderSize;
    ULONG FixupInfoSize;
    ULONG Symbol;
    ULONG SymbolGroup;
    ULONG Flags;
};

typedef struct _IMAGE_DYNAMIC_RELOCATION64 {
    ULONG64 Symbol;
    ULONG BaseRelocSize;
};

typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
    ULONG HeaderSize;
    ULONG FixupInfoSize;
    ULONG64 Symbol;
    ULONG SymbolGroup;
    ULONG Flags;
};

typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
    ULONG Version;
    ULONG Size;
};

typedef struct _IMAGE_ENCLAVE_CONFIG32 {
    ULONG Size;
    ULONG MinimumRequiredConfigSize;
    ULONG PolicyFlags;
    ULONG NumberOfImports;
    ULONG ImportList;
    ULONG ImportEntrySize;
    UCHAR FamilyID[16];
    UCHAR ImageID[16];
    ULONG ImageVersion;
    ULONG SecurityVersion;
    ULONG EnclaveSize;
    ULONG NumberOfThreads;
    ULONG EnclaveFlags;
};

typedef struct _IMAGE_ENCLAVE_CONFIG64 {
    ULONG Size;
    ULONG MinimumRequiredConfigSize;
    ULONG PolicyFlags;
    ULONG NumberOfImports;
    ULONG ImportList;
    ULONG ImportEntrySize;
    UCHAR FamilyID[16];
    UCHAR ImageID[16];
    ULONG ImageVersion;
    ULONG SecurityVersion;
    ULONG64 EnclaveSize;
    ULONG NumberOfThreads;
    ULONG EnclaveFlags;
};

typedef struct _IMAGE_ENCLAVE_IMPORT {
    ULONG MatchType;
    ULONG MinimumSecurityVersion;
    UCHAR UniqueOrAuthorID[32];
    UCHAR FamilyID[16];
    UCHAR ImageID[16];
    ULONG ImportName;
    ULONG Reserved;
};

typedef struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
    ULONG EpilogueCount;
    UCHAR EpilogueByteCount;
    UCHAR BranchDescriptorElementSize;
    USHORT BranchDescriptorCount;
};

typedef struct _IMAGE_EXPORT_DIRECTORY {
    ULONG Characteristics;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG Name;
    ULONG Base;
    ULONG NumberOfFunctions;
    ULONG NumberOfNames;
    ULONG AddressOfFunctions;
    ULONG AddressOfNames;
    ULONG AddressOfNameOrdinals;
};

typedef struct _IMAGE_FILE_HEADER {
    USHORT Machine;
    USHORT NumberOfSections;
    ULONG TimeDateStamp;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
    USHORT SizeOfOptionalHeader;
    USHORT Characteristics;
};

typedef struct _IMAGE_FUNCTION_ENTRY {
    ULONG StartingAddress;
    ULONG EndingAddress;
    ULONG EndOfPrologue;
};

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONG64 StartingAddress;
    ULONG64 EndingAddress;
    ULONG64 EndOfPrologue;
    ULONG64 UnwindInfoAddress;
};

typedef struct _IMAGE_HOT_PATCH_BASE {
    ULONG SequenceNumber;
    ULONG Flags;
    ULONG OriginalTimeDateStamp;
    ULONG OriginalCheckSum;
    ULONG CodeIntegrityInfo;
    ULONG CodeIntegritySize;
    ULONG PatchTable;
    ULONG BufferOffset;
};

typedef struct _IMAGE_HOT_PATCH_HASHES {
    UCHAR SHA256[32];
    UCHAR SHA1[20];
};

typedef struct _IMAGE_HOT_PATCH_INFO {
    ULONG Version;
    ULONG Size;
    ULONG SequenceNumber;
    ULONG BaseImageList;
    ULONG BaseImageCount;
    ULONG BufferOffset;
    ULONG ExtraPatchSize;
};

typedef struct _IMAGE_IMPORT_BY_NAME {
    USHORT Hint;
    CHAR Name[1];
};

typedef struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
    ULONG PageRelativeOffset : 12;
    ULONG IndirectCall : 1;
    ULONG IATIndex : 19;
};

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    ULONG Characteristics;
    ULONG OriginalFirstThunk;
    ULONG TimeDateStamp;
    ULONG ForwarderChain;
    ULONG Name;
    ULONG FirstThunk;
};

typedef struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
    USHORT PageRelativeOffset : 12;
    USHORT IndirectCall : 1;
    USHORT RexWPrefix : 1;
    USHORT CfgCheck : 1;
    USHORT Reserved : 1;
};

typedef struct _IMAGE_INFO {
    ULONG Properties;
    ULONG ImageAddressingMode : 8;
    ULONG SystemModeImage : 1;
    ULONG ImageMappedToAllPids : 1;
    ULONG ExtendedInfoPresent : 1;
    ULONG MachineTypeMismatch : 1;
    ULONG ImageSignatureLevel : 4;
    ULONG ImageSignatureType : 3;
    ULONG ImagePartialMap : 1;
    ULONG Reserved : 12;
    PVOID ImageBase;
    ULONG ImageSelector;
    ULONG64 ImageSize;
    ULONG ImageSectionNumber;
};

typedef struct _IMAGE_INFO_EX {
    ULONG64 Size;
    struct _IMAGE_INFO ImageInfo;
    struct _FILE_OBJECT *FileObject;
};

typedef struct _IMAGE_LINENUMBER {
     <unnamed-type-Type>;
    union {
        ULONG SymbolTableIndex;
        ULONG VirtualAddress;
    } Type;
    USHORT Linenumber;
};

typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    USHORT Flags;
    USHORT Catalog;
    ULONG CatalogOffset;
    ULONG Reserved;
};

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    ULONG Size;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG GlobalFlagsClear;
    ULONG GlobalFlagsSet;
    ULONG CriticalSectionDefaultTimeout;
    ULONG DeCommitFreeBlockThreshold;
    ULONG DeCommitTotalFreeThreshold;
    ULONG LockPrefixTable;
    ULONG MaximumAllocationSize;
    ULONG VirtualMemoryThreshold;
    ULONG ProcessHeapFlags;
    ULONG ProcessAffinityMask;
    USHORT CSDVersion;
    USHORT DependentLoadFlags;
    ULONG EditList;
    ULONG SecurityCookie;
    ULONG SEHandlerTable;
    ULONG SEHandlerCount;
    ULONG GuardCFCheckFunctionPointer;
    ULONG GuardCFDispatchFunctionPointer;
    ULONG GuardCFFunctionTable;
    ULONG GuardCFFunctionCount;
    ULONG GuardFlags;
    struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONG GuardAddressTakenIatEntryTable;
    ULONG GuardAddressTakenIatEntryCount;
    ULONG GuardLongJumpTargetTable;
    ULONG GuardLongJumpTargetCount;
    ULONG DynamicValueRelocTable;
    ULONG CHPEMetadataPointer;
    ULONG GuardRFFailureRoutine;
    ULONG GuardRFFailureRoutineFunctionPointer;
    ULONG DynamicValueRelocTableOffset;
    USHORT DynamicValueRelocTableSection;
    USHORT Reserved2;
    ULONG GuardRFVerifyStackPointerFunctionPointer;
    ULONG HotPatchTableOffset;
    ULONG Reserved3;
    ULONG EnclaveConfigurationPointer;
    ULONG VolatileMetadataPointer;
};

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    ULONG Size;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG GlobalFlagsClear;
    ULONG GlobalFlagsSet;
    ULONG CriticalSectionDefaultTimeout;
    ULONG64 DeCommitFreeBlockThreshold;
    ULONG64 DeCommitTotalFreeThreshold;
    ULONG64 LockPrefixTable;
    ULONG64 MaximumAllocationSize;
    ULONG64 VirtualMemoryThreshold;
    ULONG64 ProcessAffinityMask;
    ULONG ProcessHeapFlags;
    USHORT CSDVersion;
    USHORT DependentLoadFlags;
    ULONG64 EditList;
    ULONG64 SecurityCookie;
    ULONG64 SEHandlerTable;
    ULONG64 SEHandlerCount;
    ULONG64 GuardCFCheckFunctionPointer;
    ULONG64 GuardCFDispatchFunctionPointer;
    ULONG64 GuardCFFunctionTable;
    ULONG64 GuardCFFunctionCount;
    ULONG GuardFlags;
    struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONG64 GuardAddressTakenIatEntryTable;
    ULONG64 GuardAddressTakenIatEntryCount;
    ULONG64 GuardLongJumpTargetTable;
    ULONG64 GuardLongJumpTargetCount;
    ULONG64 DynamicValueRelocTable;
    ULONG64 CHPEMetadataPointer;
    ULONG64 GuardRFFailureRoutine;
    ULONG64 GuardRFFailureRoutineFunctionPointer;
    ULONG DynamicValueRelocTableOffset;
    USHORT DynamicValueRelocTableSection;
    USHORT Reserved2;
    ULONG64 GuardRFVerifyStackPointerFunctionPointer;
    ULONG HotPatchTableOffset;
    ULONG Reserved3;
    ULONG64 EnclaveConfigurationPointer;
    ULONG64 VolatileMetadataPointer;
};

typedef struct _IMAGE_NT_HEADERS {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

typedef struct _IMAGE_NT_HEADERS64 {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

typedef struct _IMAGE_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG BaseOfData;
    ULONG ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG SizeOfStackReserve;
    ULONG SizeOfStackCommit;
    ULONG SizeOfHeapReserve;
    ULONG SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG64 ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG64 SizeOfStackReserve;
    ULONG64 SizeOfStackCommit;
    ULONG64 SizeOfHeapReserve;
    ULONG64 SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _IMAGE_OS2_HEADER {
    USHORT ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    USHORT ne_enttab;
    USHORT ne_cbenttab;
    LONG ne_crc;
    USHORT ne_flags;
    USHORT ne_autodata;
    USHORT ne_heap;
    USHORT ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    USHORT ne_cseg;
    USHORT ne_cmod;
    USHORT ne_cbnrestab;
    USHORT ne_segtab;
    USHORT ne_rsrctab;
    USHORT ne_restab;
    USHORT ne_modtab;
    USHORT ne_imptab;
    LONG ne_nrestab;
    USHORT ne_cmovent;
    USHORT ne_align;
    USHORT ne_cres;
    UCHAR ne_exetyp;
    UCHAR ne_flagsothers;
    USHORT ne_pretthunks;
    USHORT ne_psegrefbytes;
    USHORT ne_swaparea;
    USHORT ne_expver;
};

typedef struct _IMAGE_POLICY_ENTRY {
    enum _IMAGE_POLICY_ENTRY_TYPE Type;
    enum _IMAGE_POLICY_ID PolicyId;
     <unnamed-type-u>;
    union {
        PVOID None;
        UCHAR BoolValue;
        CHAR Int8Value;
        UCHAR UInt8Value;
        SHORT Int16Value;
        USHORT UInt16Value;
        LONG Int32Value;
        ULONG UInt32Value;
        LONG64 Int64Value;
        ULONG64 UInt64Value;
        PCHAR AnsiStringValue;
        PWCHAR UnicodeStringValue;
    } u;
};

typedef struct _IMAGE_POLICY_METADATA {
    UCHAR Version;
    UCHAR Reserved0[7];
    ULONG64 ApplicationId;
    struct _IMAGE_POLICY_ENTRY Policies[0];
};

typedef struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
    UCHAR PrologueByteCount;
};

typedef struct _IMAGE_RELOCATION {
    ULONG VirtualAddress;
    ULONG RelocCount;
    ULONG SymbolTableIndex;
    USHORT Type;
};

typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    ULONG OffsetToData;
    ULONG Size;
    ULONG CodePage;
    ULONG Reserved;
};

typedef struct _IMAGE_RESOURCE_DIRECTORY {
    ULONG Characteristics;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    USHORT NumberOfNamedEntries;
    USHORT NumberOfIdEntries;
};

typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    ULONG NameOffset : 31;
    ULONG NameIsString : 1;
    ULONG Name;
    USHORT Id;
    ULONG OffsetToData;
    ULONG OffsetToDirectory : 31;
    ULONG DataIsDirectory : 1;
};

typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    USHORT Length;
    CHAR NameString[1];
};

typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    USHORT Length;
    WCHAR NameString[1];
};

typedef struct _IMAGE_ROM_HEADERS {
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
};

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG BaseOfData;
    ULONG BaseOfBss;
    ULONG GprMask;
    ULONG CprMask[4];
    ULONG GpValue;
};

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG EndAddress;
    ULONG UnwindInfoAddress;
    ULONG UnwindData;
};

typedef struct _IMAGE_SECTION_HEADER {
    UCHAR Name[8];
     <unnamed-type-Misc>;
    union {
        ULONG PhysicalAddress;
        ULONG VirtualSize;
    } Misc;
    ULONG VirtualAddress;
    ULONG SizeOfRawData;
    ULONG PointerToRawData;
    ULONG PointerToRelocations;
    ULONG PointerToLinenumbers;
    USHORT NumberOfRelocations;
    USHORT NumberOfLinenumbers;
    ULONG Characteristics;
};

typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    USHORT Signature;
    USHORT Flags;
    USHORT Machine;
    USHORT Characteristics;
    ULONG TimeDateStamp;
    ULONG CheckSum;
    ULONG ImageBase;
    ULONG SizeOfImage;
    ULONG NumberOfSections;
    ULONG ExportedNamesSize;
    ULONG DebugDirectorySize;
    ULONG SectionAlignment;
    ULONG Reserved[2];
};

typedef struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
    USHORT PageRelativeOffset : 12;
    USHORT RegisterNumber : 4;
};

typedef struct _IMAGE_SYMBOL {
     <unnamed-type-N>;
    union {
        UCHAR ShortName[8];
         <unnamed-type-Name>;
        struct {
            ULONG Short;
            ULONG Long;
        } Name;
        ULONG LongName[2];
    } N;
    ULONG Value;
    SHORT SectionNumber;
    USHORT Type;
    UCHAR StorageClass;
    UCHAR NumberOfAuxSymbols;
};

typedef struct _IMAGE_SYMBOL_EX {
     <unnamed-type-N>;
    union {
        UCHAR ShortName[8];
         <unnamed-type-Name>;
        struct {
            ULONG Short;
            ULONG Long;
        } Name;
        ULONG LongName[2];
    } N;
    ULONG Value;
    LONG SectionNumber;
    USHORT Type;
    UCHAR StorageClass;
    UCHAR NumberOfAuxSymbols;
};

typedef struct _IMAGE_THUNK_DATA32 {
     <unnamed-type-u1>;
    union {
        ULONG ForwarderString;
        ULONG Function;
        ULONG Ordinal;
        ULONG AddressOfData;
    } u1;
};

typedef struct _IMAGE_THUNK_DATA64 {
     <unnamed-type-u1>;
    union {
        ULONG64 ForwarderString;
        ULONG64 Function;
        ULONG64 Ordinal;
        ULONG64 AddressOfData;
    } u1;
};

typedef struct _IMAGE_TLS_DIRECTORY32 {
    ULONG StartAddressOfRawData;
    ULONG EndAddressOfRawData;
    ULONG AddressOfIndex;
    ULONG AddressOfCallBacks;
    ULONG SizeOfZeroFill;
    ULONG Characteristics;
    ULONG Reserved0 : 20;
    ULONG Alignment : 4;
    ULONG Reserved1 : 8;
};

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONG64 StartAddressOfRawData;
    ULONG64 EndAddressOfRawData;
    ULONG64 AddressOfIndex;
    ULONG64 AddressOfCallBacks;
    ULONG SizeOfZeroFill;
    ULONG Characteristics;
    ULONG Reserved0 : 20;
    ULONG Alignment : 4;
    ULONG Reserved1 : 8;
};

typedef struct _IMAGE_VXD_HEADER {
    USHORT e32_magic;
    UCHAR e32_border;
    UCHAR e32_worder;
    ULONG e32_level;
    USHORT e32_cpu;
    USHORT e32_os;
    ULONG e32_ver;
    ULONG e32_mflags;
    ULONG e32_mpages;
    ULONG e32_startobj;
    ULONG e32_eip;
    ULONG e32_stackobj;
    ULONG e32_esp;
    ULONG e32_pagesize;
    ULONG e32_lastpagesize;
    ULONG e32_fixupsize;
    ULONG e32_fixupsum;
    ULONG e32_ldrsize;
    ULONG e32_ldrsum;
    ULONG e32_objtab;
    ULONG e32_objcnt;
    ULONG e32_objmap;
    ULONG e32_itermap;
    ULONG e32_rsrctab;
    ULONG e32_rsrccnt;
    ULONG e32_restab;
    ULONG e32_enttab;
    ULONG e32_dirtab;
    ULONG e32_dircnt;
    ULONG e32_fpagetab;
    ULONG e32_frectab;
    ULONG e32_impmod;
    ULONG e32_impmodcnt;
    ULONG e32_impproc;
    ULONG e32_pagesum;
    ULONG e32_datapage;
    ULONG e32_preload;
    ULONG e32_nrestab;
    ULONG e32_cbnrestab;
    ULONG e32_nressum;
    ULONG e32_autodata;
    ULONG e32_debuginfo;
    ULONG e32_debuglen;
    ULONG e32_instpreload;
    ULONG e32_instdemand;
    ULONG e32_heapsize;
    UCHAR e32_res3[12];
    ULONG e32_winresoff;
    ULONG e32_winreslen;
    USHORT e32_devid;
    USHORT e32_ddkver;
};

typedef struct _INET_PORT_RANGE {
    USHORT StartPort;
    USHORT NumberOfPorts;
};

typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[3];
};

typedef struct _INITIAL_TEB {
     <unnamed-type-OldInitialTeb>;
    struct {
        PVOID OldStackBase;
        PVOID OldStackLimit;
    } OldInitialTeb;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID StackAllocationBase;
};

typedef struct _INPUT_MAPPING_ELEMENT {
    ULONG InputMappingId;
};

typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
};

typedef struct _INTERFACE_INFO {
    ULONG iiFlags;
    union sockaddr_gen iiAddress;
    union sockaddr_gen iiBroadcastAddress;
    union sockaddr_gen iiNetmask;
};

typedef struct _INTERFACE_INFO_EX {
    ULONG iiFlags;
    struct _SOCKET_ADDRESS iiAddress;
    struct _SOCKET_ADDRESS iiBroadcastAddress;
    struct _SOCKET_ADDRESS iiNetmask;
};

typedef struct _INTERRUPT_CONNECTION_DATA {
    ULONG Count;
    struct _INTERRUPT_VECTOR_DATA Vectors[1];
};

typedef struct _INTERRUPT_HT_INTR_INFO {
     <unnamed-type-LowPart>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG Mask : 1;
            ULONG Polarity : 1;
            ULONG MessageType : 3;
            ULONG RequestEOI : 1;
            ULONG DestinationMode : 1;
            ULONG MessageType3 : 1;
            ULONG Destination : 8;
            ULONG Vector : 8;
            ULONG ExtendedAddress : 8;
        } bits;
        ULONG AsULONG;
    } LowPart;
     <unnamed-type-HighPart>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG ExtendedDestination : 24;
            ULONG Reserved : 6;
            ULONG PassPW : 1;
            ULONG WaitingForEOI : 1;
        } bits;
        ULONG AsULONG;
    } HighPart;
};

typedef struct _INTERRUPT_REMAPPING_INFO {
    ULONG IrtIndex : 30;
    ULONG FlagHalInternal : 1;
    ULONG FlagTranslated : 1;
     <unnamed-type-u>;
    union {
         <unnamed-type-Msi>;
        struct {
            ULONG MessageAddressHigh;
            ULONG MessageAddressLow;
            USHORT MessageData;
            USHORT Reserved;
        } Msi;
    } u;
};

typedef struct _INTERRUPT_VECTOR_DATA {
    enum INTERRUPT_CONNECTION_TYPE Type;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_POLARITY Polarity;
    enum _KINTERRUPT_MODE Mode;
    struct _GROUP_AFFINITY TargetProcessors;
    struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
     <unnamed-type-ControllerInput>;
    struct {
        ULONG Gsiv;
        ULONG WakeInterrupt : 1;
        ULONG ReservedFlags : 31;
    } ControllerInput;
    ULONG64 HvDeviceId;
    struct {
        union _LARGE_INTEGER Address;
        ULONG DataPayload;
    } XapicMessage;
    struct {
        struct _INTERRUPT_HT_INTR_INFO IntrInfo;
    } Hypertransport;
    struct {
        union _LARGE_INTEGER Address;
        ULONG DataPayload;
    } GenericMessage;
    struct {
        enum HAL_APIC_DESTINATION_MODE DestinationMode;
    } MessageRequest;
};

typedef struct _INT_ROUTE_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GetInterruptRouting;
    PVOID Reserved;
    PVOID UpdateInterruptLine;
};

typedef struct _INVERTED_FUNCTION_TABLE {
    ULONG CurrentSize;
    ULONG MaximumSize;
    ULONG Epoch;
    UCHAR Overflow;
    struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[512];
    VOID _INVERTED_FUNCTION_TABLE;
    VOID _INVERTED_FUNCTION_TABLE;
    struct _INVERTED_FUNCTION_TABLE *operator=;
    struct _INVERTED_FUNCTION_TABLE *operator=;
};

typedef struct _INVERTED_FUNCTION_TABLE_ENTRY {
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionTable;
    struct _DYNAMIC_FUNCTION_TABLE *DynamicTable;
    PVOID ImageBase;
    ULONG SizeOfImage;
    ULONG SizeOfTable;
};

typedef struct _IOMMU_BUS_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GetSvmCapabilities;
    PLONG EnableSvmCapabilities;
    PLONG DisableSvmCapabilities;
    PLONG GetDeviceProperties;
    PLONG GetDeviceId;
};

typedef struct _IOMMU_DMA_DOMAIN {
};

typedef struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR {
    ULONG Version;
    ULONG Size;
    ULONG CryptoIndex;
    ULONG AlgorithmId;
    ULONG DataUnitSize;
    ULONG KeySize;
    UCHAR KeyHash[32];
    PVOID KeyVirtualAddress;
    union _LARGE_INTEGER KeyPhysicalAddress;
};

typedef struct _IO_ADAPTER_CRYPTO_PARAMETERS {
    ULONG64 Tweak;
    struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR *KeyDescriptor;
};

typedef struct _IO_ATTRIBUTION_INFORMATION {
    ULONG Version;
     <unnamed-type-Flags>;
    union {
        ULONG MajorCode : 8;
        ULONG IoStart : 1;
        ULONG QueueOnly : 1;
        ULONG IoFailed : 1;
        ULONG VirtualDevice : 1;
        ULONG Spare : 20;
        ULONG AllFlags;
    } Flags;
    ULONG Length;
    ULONG64 ServiceStartTime;
    ULONG64 CurrentTime;
};

typedef struct _IO_COMPLETION_BASIC_INFORMATION {
    LONG Depth;
};

typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
};

typedef struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _KINTERRUPT **InterruptObject;
    PUCHAR ServiceRoutine;
    PVOID ServiceContext;
    PULONG64 SpinLock;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
    UCHAR ShareVector;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE InterruptMode;
    ULONG64 ProcessorEnableMask;
    USHORT Group;
};

typedef struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _KINTERRUPT **InterruptObject;
    PUCHAR ServiceRoutine;
    PVOID ServiceContext;
    PULONG64 SpinLock;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
};

typedef struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
     <unnamed-type-ConnectionContext>;
    union {
        PVOID *Generic;
        struct _IO_INTERRUPT_MESSAGE_INFO **InterruptMessageTable;
        struct _KINTERRUPT **InterruptObject;
    } ConnectionContext;
    PUCHAR MessageServiceRoutine;
    PVOID ServiceContext;
    PULONG64 SpinLock;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
    PUCHAR FallBackServiceRoutine;
};

typedef struct _IO_CONNECT_INTERRUPT_PARAMETERS {
    ULONG Version;
    struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS FullySpecified;
    struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS LineBased;
    struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS MessageBased;
};

typedef struct _IO_COUNTERS {
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 OtherOperationCount;
    ULONG64 ReadTransferCount;
    ULONG64 WriteTransferCount;
    ULONG64 OtherTransferCount;
};

typedef struct _IO_CSQ {
    ULONG Type;
    PVOID CsqInsertIrp;
    PVOID CsqRemoveIrp;
    struct _IRP **CsqPeekNextIrp;
    PVOID CsqAcquireLock;
    PVOID CsqReleaseLock;
    PVOID CsqCompleteCanceledIrp;
    PVOID ReservePointer;
};

typedef struct _IO_CSQ_IRP_CONTEXT {
    ULONG Type;
    struct _IRP *Irp;
    struct _IO_CSQ *Csq;
};

typedef struct _IO_DISCONNECT_INTERRUPT_PARAMETERS {
    ULONG Version;
     <unnamed-type-ConnectionContext>;
    union {
        PVOID Generic;
        struct _KINTERRUPT *InterruptObject;
        struct _IO_INTERRUPT_MESSAGE_INFO *InterruptMessageTable;
    } ConnectionContext;
};

typedef struct _IO_DISK_IO_ATTRIBUTION_STATS {
    ULONG64 TotalNonOverlappedQueueTime;
    ULONG64 TotalNonOverlappedServiceTime;
    ULONG64 TotalSize;
    ULONG64 IoCount;
};

typedef struct _IO_DRIVER_CREATE_CONTEXT {
    SHORT Size;
    struct _ECP_LIST *ExtraCreateParameter;
    PVOID DeviceObjectHint;
    struct _TXN_PARAMETER_BLOCK *TxnParameters;
    struct _EJOB *SiloContext;
};

typedef struct _IO_ERROR_LOG_MESSAGE {
    USHORT Type;
    USHORT Size;
    USHORT DriverNameLength;
    union _LARGE_INTEGER TimeStamp;
    ULONG DriverNameOffset;
    struct _IO_ERROR_LOG_PACKET EntryData;
};

typedef struct _IO_ERROR_LOG_PACKET {
    UCHAR MajorFunctionCode;
    UCHAR RetryCount;
    USHORT DumpDataSize;
    USHORT NumberOfStrings;
    USHORT StringOffset;
    USHORT EventCategory;
    LONG ErrorCode;
    ULONG UniqueErrorValue;
    LONG FinalStatus;
    ULONG SequenceNumber;
    ULONG IoControlCode;
    union _LARGE_INTEGER DeviceOffset;
    ULONG DumpData[1];
};

typedef struct _IO_FOEXT_SILO_PARAMETERS {
    ULONG Length;
    ULONG HasHardReference : 1;
    ULONG SpareFlags : 31;
    ULONG Flags;
    struct _EJOB *SiloContext;
};

typedef struct _IO_INTERRUPT_MESSAGE_INFO {
    UCHAR UnifiedIrql;
    ULONG MessageCount;
    struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY MessageInfo[1];
};

typedef struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY {
    union _LARGE_INTEGER MessageAddress;
    ULONG64 TargetProcessorSet;
    struct _KINTERRUPT *InterruptObject;
    ULONG MessageData;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _KINTERRUPT_POLARITY Polarity;
};

typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
    USHORT Validation;
    USHORT Flags;
    PVOID TrackedOffsetCallback;
};

typedef struct _IO_LIVEDUMP_CONTROL {
    ULONG Version;
    ULONG Size;
    PVOID DumpFileHandle;
    PVOID CancelObject;
    union _IO_LIVEDUMP_CONTROL_FLAGS Flags;
    union _IO_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
    struct _IO_LIVEDUMP_SECONDARY_DATA_HEADER SecondaryData;
};

typedef struct _IO_LIVEDUMP_SECONDARY_DATA {
    struct _GUID Identifier;
    PVOID Data;
    ULONG Size;
    ULONG Reserved;
    struct _IO_LIVEDUMP_SECONDARY_DATA *Next;
};

typedef struct _IO_LIVEDUMP_SECONDARY_DATA_HEADER {
    ULONG Flags;
    ULONG Reserved;
    struct _IO_LIVEDUMP_SECONDARY_DATA *Data;
};

typedef struct _IO_LOAD_CRASHDUMP_PARAMS {
    ULONG Size;
    struct _UNICODE_STRING *NamePrefix;
    struct _UNICODE_STRING *LoadedBaseName;
};

typedef struct _IO_LOAD_CRASHDUMP_RESULT {
    ULONG Size;
    PVOID ImageHandle;
    PVOID ImageBaseAddress;
};

typedef struct _IO_MINI_COMPLETION_PACKET_USER {
    struct _LIST_ENTRY ListEntry;
    ULONG PacketType;
    PVOID KeyContext;
    PVOID ApcContext;
    LONG IoStatus;
    ULONG64 IoStatusInformation;
    PVOID MiniPacketCallback;
    PVOID Context;
    UCHAR Allocated;
};

typedef struct _IO_PRIORITY_INFO {
    ULONG Size;
    ULONG ThreadPriority;
    ULONG PagePriority;
    enum _IO_PRIORITY_HINT IoPriority;
};

typedef struct _IO_RATE_HOST_INTERFACE {
    PULONG GetRateControl;
    PVOID ReleaseRateControl;
    PULONG IsProcessAntiMalware;
    PULONG IsPriorityBoostActive;
    PVOID UpdateThreadIoRateThrottle;
    PLONG UpdateIrpIoAttributionHandle;
    PLONG NotifyQuotaState;
};

typedef struct _IO_RATE_ROUTINE_TABLE {
    PLONG StartRateControl;
    PVOID StopRateControl;
    PVOID BoostThread;
};

typedef struct _IO_REMOVE_LOCK {
    struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
    VOID _IO_REMOVE_LOCK;
    VOID _IO_REMOVE_LOCK;
    struct _IO_REMOVE_LOCK *operator=;
    struct _IO_REMOVE_LOCK *operator=;
};

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
    UCHAR Removed;
    UCHAR Reserved[3];
    LONG IoCount;
    struct _KEVENT RemoveEvent;
    VOID _IO_REMOVE_LOCK_COMMON_BLOCK;
    VOID _IO_REMOVE_LOCK_COMMON_BLOCK;
    struct _IO_REMOVE_LOCK_COMMON_BLOCK *operator=;
    struct _IO_REMOVE_LOCK_COMMON_BLOCK *operator=;
};

typedef struct _IO_REMOVE_LOCK_DBG_BLOCK {
    LONG Signature;
    ULONG HighWatermark;
    LONG64 MaxLockedTicks;
    LONG AllocateTag;
    struct _LIST_ENTRY LockList;
    ULONG64 Spin;
    LONG LowMemoryCount;
    ULONG Reserved1[4];
    PVOID Reserved2;
    struct _IO_REMOVE_LOCK_TRACKING_BLOCK *Blocks;
};

typedef struct _IO_REMOVE_LOCK_TRACKING_BLOCK {
};

typedef struct _IO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS {
    ULONG Version;
     <unnamed-type-ConnectionContext>;
    union {
        PVOID Generic;
        struct _KINTERRUPT *InterruptObject;
        struct _IO_INTERRUPT_MESSAGE_INFO *InterruptMessageTable;
    } ConnectionContext;
};

typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;
    UCHAR ShareDisposition;
    UCHAR Spare1;
    USHORT Flags;
    USHORT Spare2;
    union {
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Port;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory;
        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
            enum _IRQ_DEVICE_POLICY AffinityPolicy;
            enum _IRQ_PRIORITY PriorityPolicy;
            ULONG64 TargetedProcessors;
        } Interrupt;
        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;
        struct {
            ULONG RequestLine;
            ULONG Reserved;
            ULONG Channel;
            ULONG TransferWidth;
        } DmaV3;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Generic;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG Priority;
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;
        struct {
            ULONG Length40;
            ULONG Alignment40;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory40;
        struct {
            ULONG Length48;
            ULONG Alignment48;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory48;
        struct {
            ULONG Length64;
            ULONG Alignment64;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    struct _IO_RESOURCE_LIST List[1];
};

typedef struct _IO_SECURITY_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _ACCESS_STATE *AccessState;
    ULONG DesiredAccess;
    ULONG FullCreateOptions;
};

typedef struct _IO_SESSION_CONNECT_INFO {
    ULONG SessionId;
    UCHAR LocalSession;
};

typedef struct _IO_SESSION_STATE_INFORMATION {
    ULONG SessionId;
    enum _IO_SESSION_STATE SessionState;
    UCHAR LocalSession;
};

typedef struct _IO_SESSION_STATE_NOTIFICATION {
    ULONG Size;
    ULONG Flags;
    PVOID IoObject;
    ULONG EventMask;
    PVOID Context;
};

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-CreatePipe>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
        } CreatePipe;
         <unnamed-type-CreateMailslot>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _MAILSLOT_CREATE_PARAMETERS *Parameters;
        } CreateMailslot;
         <unnamed-type-Read>;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG Length;
            ULONG Key;
            ULONG Flags;
            union _LARGE_INTEGER ByteOffset;
        } Write;
         <unnamed-type-QueryDirectory>;
        struct {
            ULONG Length;
            struct _UNICODE_STRING *FileName;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;
         <unnamed-type-NotifyDirectory>;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;
         <unnamed-type-NotifyDirectoryEx>;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
            enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
        } NotifyDirectoryEx;
         <unnamed-type-QueryFile>;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
        } QueryFile;
         <unnamed-type-SetFile>;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            struct _FILE_OBJECT *FileObject;
            UCHAR ReplaceIfExists;
            UCHAR AdvanceOnly;
            ULONG ClusterCount;
            PVOID DeleteHandle;
        } SetFile;
         <unnamed-type-QueryEa>;
        struct {
            ULONG Length;
            PVOID EaList;
            ULONG EaListLength;
            ULONG EaIndex;
        } QueryEa;
         <unnamed-type-SetEa>;
        struct {
            ULONG Length;
        } SetEa;
         <unnamed-type-QueryVolume>;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } QueryVolume;
         <unnamed-type-SetVolume>;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } SetVolume;
         <unnamed-type-FileSystemControl>;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
         <unnamed-type-LockControl>;
        struct {
            union _LARGE_INTEGER *Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } LockControl;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-QuerySecurity>;
        struct {
            ULONG SecurityInformation;
            ULONG Length;
        } QuerySecurity;
         <unnamed-type-SetSecurity>;
        struct {
            ULONG SecurityInformation;
            PVOID SecurityDescriptor;
        } SetSecurity;
         <unnamed-type-MountVolume>;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } MountVolume;
         <unnamed-type-VerifyVolume>;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } VerifyVolume;
         <unnamed-type-Scsi>;
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
         <unnamed-type-QueryQuota>;
        struct {
            ULONG Length;
            PVOID StartSid;
            struct _FILE_GET_QUOTA_INFORMATION *SidList;
            ULONG SidListLength;
        } QueryQuota;
         <unnamed-type-SetQuota>;
        struct {
            ULONG Length;
        } SetQuota;
         <unnamed-type-QueryDeviceRelations>;
        struct {
            enum _DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;
         <unnamed-type-QueryInterface>;
        struct {
            struct _GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            struct _INTERFACE *Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
         <unnamed-type-DeviceCapabilities>;
        struct {
            struct _DEVICE_CAPABILITIES *Capabilities;
        } DeviceCapabilities;
         <unnamed-type-FilterResourceRequirements>;
        struct {
            struct _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
        } FilterResourceRequirements;
         <unnamed-type-ReadWriteConfig>;
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG Length;
        } ReadWriteConfig;
         <unnamed-type-SetLock>;
        struct {
            UCHAR Lock;
        } SetLock;
         <unnamed-type-QueryId>;
        struct {
            enum BUS_QUERY_ID_TYPE IdType;
        } QueryId;
         <unnamed-type-QueryDeviceText>;
        struct {
            enum DEVICE_TEXT_TYPE DeviceTextType;
            ULONG LocaleId;
        } QueryDeviceText;
         <unnamed-type-UsageNotification>;
        struct {
            UCHAR InPath;
            UCHAR Reserved[3];
            enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        } UsageNotification;
         <unnamed-type-WaitWake>;
        struct {
            enum _SYSTEM_POWER_STATE PowerState;
        } WaitWake;
         <unnamed-type-PowerSequence>;
        struct {
            struct _POWER_SEQUENCE *PowerSequence;
        } PowerSequence;
         <unnamed-type-Power>;
        struct {
            ULONG SystemContext;
            struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
            enum _POWER_STATE_TYPE Type;
            union _POWER_STATE State;
            enum POWER_ACTION ShutdownType;
        } Power;
         <unnamed-type-StartDevice>;
        struct {
            struct _CM_RESOURCE_LIST *AllocatedResources;
            struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
        } StartDevice;
         <unnamed-type-WMI>;
        struct {
            ULONG64 ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
         <unnamed-type-Others>;
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    PLONG CompletionRoutine;
    PVOID Context;
};

typedef struct _IO_STATUS_BLOCK {
    LONG Status;
    PVOID Pointer;
    ULONG64 Information;
};

typedef struct _IO_STATUS_BLOCK32 {
    LONG Status;
    ULONG Information;
};

typedef struct _IO_STEER_INTERRUPT_CONNECTION {
    enum _IO_STEER_INTERRUPT_CONNECTION_TYPE Type;
    struct _IO_STEER_INTERRUPT_CONNECTION_CONTEXT Interrupt;
    ULONG Reserved;
};

typedef struct _IO_STEER_INTERRUPT_CONNECTION_CONTEXT {
    ULONG Version;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    PVOID Generic;
    struct _KINTERRUPT *InterruptObject;
    struct _IO_INTERRUPT_MESSAGE_INFO *InterruptMessageTable;
};

typedef struct _IO_STEER_INTERRUPT_TARGET {
    enum _IO_STEER_INTERRUPT_TARGET_TYPE Type;
    struct {
        USHORT Group;
        ULONG64 Mask;
    } CpuSetMask;
    ULONG Reserved;
};

typedef struct _IO_TIMER {
};

typedef struct _IO_TRACKING_CALLBACK_INFO {
    USHORT Size;
    ULONG64 ElapsedTime;
    ULONG DeviceType;
};

typedef struct _IO_TRACKING_SETTINGS {
    USHORT Size;
    PVOID TrackingCallback;
};

typedef struct _IO_WORKITEM {
};

typedef struct _IPSEC_OFFLOAD_V2_ADD_SA {
    struct _NDIS_OBJECT_HEADER Header;
    struct _IPSEC_OFFLOAD_V2_ADD_SA *Next;
    ULONG NumExtHdrs;
    ULONG Flags;
    struct {
        ULONG SrcAddr;
        ULONG DestAddr;
    } IPv4Endpoints;
    struct {
        UCHAR SrcAddr[16];
        UCHAR DestAddr[16];
    } IPv6Endpoints;
    PVOID OffloadHandle;
    ULONG UdpEspEncapsulation;
    struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION SecAssoc[2];
    ULONG KeyLength;
    UCHAR KeyData[1];
};

typedef struct _IPSEC_OFFLOAD_V2_ADD_SA_EX {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG NumExtHdrs;
    ULONG Flags;
    struct {
        ULONG SrcAddr;
        ULONG DestAddr;
    } IPv4Endpoints;
    struct {
        UCHAR SrcAddr[16];
        UCHAR DestAddr[16];
    } IPv6Endpoints;
    PVOID OffloadHandle;
    ULONG UdpEspEncapsulation;
    struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION SecAssoc[2];
    ULONG KeyLength;
    ULONG KeyOffset;
    ULONG SourceSwitchPortId;
    USHORT VlanId;
};

typedef struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO {
    ULONG Identifier;
    ULONG KeyLength;
    ULONG KeyOffsetBytes;
    ULONG AdditionalInfo;
};

typedef struct _IPSEC_OFFLOAD_V2_DELETE_SA {
    struct _NDIS_OBJECT_HEADER Header;
    struct _IPSEC_OFFLOAD_V2_DELETE_SA *Next;
    PVOID OffloadHandle;
};

typedef struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION {
    ULONG Flags;
    enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
    ULONG Spi;
    struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO AuthenticationAlgorithm;
    struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO EncryptionAlgorithm;
    ULONG SequenceNumberHighOrder;
};

typedef struct _IPSEC_OFFLOAD_V2_UPDATE_SA {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID OffloadHandle;
    enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
    ULONG Spi;
    ULONG SequenceNumberHighOrder;
};

typedef struct _IPTLS_METADATA {
    ULONG64 SequenceNumber;
};

typedef struct _IPV4_ARP_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv4Address[4];
    UCHAR HostIPv4Address[4];
    UCHAR MacAddress[6];
};

typedef struct _IPV4_HEADER {
    UCHAR VersionAndHeaderLength;
    UCHAR HeaderLength : 4;
    UCHAR Version : 4;
    UCHAR TypeOfServiceAndEcnField;
    UCHAR EcnField : 2;
    UCHAR TypeOfService : 6;
    USHORT TotalLength;
    USHORT Identification;
    USHORT FlagsAndOffset;
    USHORT DontUse1 : 5;
    USHORT MoreFragments : 1;
    USHORT DontFragment : 1;
    USHORT Reserved : 1;
    USHORT DontUse2 : 8;
    UCHAR TimeToLive;
    UCHAR Protocol;
    USHORT HeaderChecksum;
    struct in_addr SourceAddress;
    struct in_addr DestinationAddress;
};

typedef struct _IPV4_OPTION_HEADER {
    UCHAR OptionType;
    UCHAR OptionNumber : 5;
    UCHAR OptionClass : 2;
    UCHAR CopiedFlag : 1;
    UCHAR OptionLength;
};

typedef struct _IPV4_ROUTING_HEADER {
    struct _IPV4_OPTION_HEADER OptionHeader;
    UCHAR Pointer;
};

typedef struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv4SourceAddress[4];
    UCHAR IPv4DestAddress[4];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _IPV4_TIMESTAMP_OPTION {
    struct _IPV4_OPTION_HEADER OptionHeader;
    UCHAR Pointer;
    UCHAR FlagsOverflow;
    UCHAR Flags : 4;
    UCHAR Overflow : 4;
};

typedef struct _IPV6_EXTENSION_HEADER {
    UCHAR NextHeader;
    UCHAR Length;
};

typedef struct _IPV6_FRAGMENT_HEADER {
    UCHAR NextHeader;
    UCHAR Reserved;
    USHORT DontUse1 : 8;
    USHORT MoreFragments : 1;
    USHORT ReservedBits : 2;
    USHORT DontUse2 : 5;
    USHORT OffsetAndFlags;
    ULONG Id;
};

typedef struct _IPV6_HEADER {
    ULONG VersionClassFlow;
    USHORT PayloadLength;
    UCHAR NextHeader;
    UCHAR HopLimit;
    struct in6_addr SourceAddress;
    struct in6_addr DestinationAddress;
};

typedef struct _IPV6_NS_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv6Address[16];
    UCHAR SolicitedNodeIPv6Address[16];
    UCHAR MacAddress[6];
    UCHAR TargetIPv6Addresses[2][16];
};

typedef struct _IPV6_OPTION_HEADER {
    UCHAR Type;
    UCHAR DataLength;
};

typedef struct _IPV6_OPTION_JUMBOGRAM {
    struct _IPV6_OPTION_HEADER Header;
    UCHAR JumbogramLength[4];
};

typedef struct _IPV6_OPTION_ROUTER_ALERT {
    struct _IPV6_OPTION_HEADER Header;
    UCHAR Value[2];
};

typedef struct _IPV6_ROUTING_HEADER {
    UCHAR NextHeader;
    UCHAR Length;
    UCHAR RoutingType;
    UCHAR SegmentsLeft;
    UCHAR Reserved[4];
};

typedef struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv6SourceAddress[16];
    UCHAR IPv6DestAddress[16];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _IRP {
    SHORT Type;
    USHORT Size;
    struct _MDL *MdlAddress;
    ULONG Flags;
    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;
    struct _LIST_ENTRY ThreadListEntry;
    struct _IO_STATUS_BLOCK IoStatus;
    CHAR RequestorMode;
    UCHAR PendingReturned;
    CHAR StackCount;
    CHAR CurrentLocation;
    UCHAR Cancel;
    UCHAR CancelIrql;
    CHAR ApcEnvironment;
    UCHAR AllocationFlags;
    struct _IO_STATUS_BLOCK *UserIosb;
    struct _KEVENT *UserEvent;
    union {
        struct {
            PVOID UserApcRoutine;
            PVOID IssuingProcess;
            PVOID UserApcContext;
        } AsynchronousParameters;
        union _LARGE_INTEGER AllocationSize;
    } Overlay;
    PVOID CancelRoutine;
    PVOID UserBuffer;
    union {
        struct {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
            PVOID DriverContext[4];
            struct _ETHREAD *Thread;
            PCHAR AuxiliaryBuffer;
            struct _LIST_ENTRY ListEntry;
            struct _IO_STACK_LOCATION *CurrentStackLocation;
            ULONG PacketType;
            struct _FILE_OBJECT *OriginalFileObject;
        } Overlay;
        struct _KAPC Apc;
        PVOID CompletionKey;
    } Tail;
};

typedef struct _IR_TIMER_EXTRA_CREATE_PARAMETER {
    USHORT ComponentId;
    USHORT RelativeId;
};

typedef struct _ImageArchitectureEntry {
    ULONG FixupInstRVA;
    ULONG NewInst;
};

typedef struct _ImageArchitectureHeader {
    ULONG AmaskValue : 1;
    ULONG AmaskShift : 8;
    ULONG FirstEntryRVA;
};

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    PVOID CompletionPort;
};

typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    union _LARGE_INTEGER TotalUserTime;
    union _LARGE_INTEGER TotalKernelTime;
    union _LARGE_INTEGER ThisPeriodTotalUserTime;
    union _LARGE_INTEGER ThisPeriodTotalKernelTime;
    ULONG TotalPageFaultCount;
    ULONG TotalProcesses;
    ULONG ActiveProcesses;
    ULONG TotalTerminatedProcesses;
};

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    struct _IO_COUNTERS IoInfo;
};

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    union _LARGE_INTEGER PerProcessUserTimeLimit;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG LimitFlags;
    ULONG64 MinimumWorkingSetSize;
    ULONG64 MaximumWorkingSetSize;
    ULONG ActiveProcessLimit;
    ULONG64 Affinity;
    ULONG PriorityClass;
    ULONG SchedulingClass;
};

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    ULONG NumberOfAssignedProcesses;
    ULONG NumberOfProcessIdsInList;
    ULONG64 ProcessIdList[1];
};

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    ULONG UIRestrictionsClass;
};

typedef struct _JOBOBJECT_CONTAINER_IDENTIFIER_V2 {
    struct _GUID ContainerId;
    struct _GUID ContainerTelemetryId;
    ULONG JobId;
};

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    ULONG ControlFlags;
    ULONG CpuRate;
    ULONG Weight;
    USHORT MinRate;
    USHORT MaxRate;
};

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    ULONG EndOfJobTimeAction;
};

typedef struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION {
    struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    struct _IO_COUNTERS IoInfo;
    struct _PROCESS_DISK_COUNTERS DiskIoInfo;
    ULONG64 ContextSwitches;
    union _LARGE_INTEGER TotalCycleTime;
    ULONG64 ReadyTime;
    struct _PROCESS_ENERGY_VALUES EnergyValues;
};

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    struct _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    struct _IO_COUNTERS IoInfo;
    ULONG64 ProcessMemoryLimit;
    ULONG64 JobMemoryLimit;
    ULONG64 PeakProcessMemoryUsed;
    ULONG64 PeakJobMemoryUsed;
};

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2 {
    struct _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    struct _IO_COUNTERS IoInfo;
    ULONG64 ProcessMemoryLimit;
    ULONG64 JobMemoryLimit;
    ULONG64 PeakProcessMemoryUsed;
    ULONG64 PeakJobMemoryUsed;
    ULONG64 JobTotalMemoryLimit;
};

typedef struct _JOBOBJECT_FREEZE_INFORMATION {
    ULONG Flags;
    ULONG FreezeOperation : 1;
    ULONG FilterOperation : 1;
    ULONG SwapOperation : 1;
    ULONG Reserved : 29;
    UCHAR Freeze;
    UCHAR Swap;
    UCHAR Reserved0[2];
    struct _JOBOBJECT_WAKE_FILTER WakeFilter;
};

typedef struct _JOBOBJECT_INTERFERENCE_INFORMATION {
    ULONG64 Count;
};

typedef struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
    ULONG ControlFlags;
    struct _JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
    struct _JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
};

typedef struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
    ULONG64 IoCount;
    ULONG64 TotalNonOverlappedQueueTime;
    ULONG64 TotalNonOverlappedServiceTime;
    ULONG64 TotalSize;
};

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    ULONG MemberLevel;
};

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    ULONG LimitFlags;
    ULONG ViolationLimitFlags;
    ULONG64 IoReadBytes;
    ULONG64 IoReadBytesLimit;
    ULONG64 IoWriteBytes;
    ULONG64 IoWriteBytesLimit;
    union _LARGE_INTEGER PerJobUserTime;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG64 JobMemory;
    ULONG64 JobMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
};

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION_V2 {
    ULONG LimitFlags;
    ULONG ViolationLimitFlags;
    ULONG64 IoReadBytes;
    ULONG64 IoReadBytesLimit;
    ULONG64 IoWriteBytes;
    ULONG64 IoWriteBytesLimit;
    union _LARGE_INTEGER PerJobUserTime;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG64 JobMemory;
    ULONG64 JobLowMemoryLimit;
    ULONG64 JobHighMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
};

typedef struct _JOBOBJECT_MEMORY_USAGE_INFORMATION {
    ULONG64 JobMemory;
    ULONG64 PeakJobMemoryUsed;
};

typedef struct _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2 {
    struct _JOBOBJECT_MEMORY_USAGE_INFORMATION BasicInfo;
    ULONG64 JobSharedMemory;
    ULONG64 Reserved[2];
};

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    ULONG64 IoReadBytesLimit;
    ULONG64 IoWriteBytesLimit;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG64 JobMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    ULONG LimitFlags;
};

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_V2 {
    ULONG64 IoReadBytesLimit;
    ULONG64 IoWriteBytesLimit;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG64 JobLowMemoryLimit;
    ULONG64 JobHighMemoryLimit;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    ULONG LimitFlags;
};

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    ULONG SecurityLimitFlags;
    PVOID JobToken;
    struct _TOKEN_GROUPS *SidsToDisable;
    struct _TOKEN_PRIVILEGES *PrivilegesToDelete;
    struct _TOKEN_GROUPS *RestrictedSids;
};

typedef struct _JOBOBJECT_WAKE_FILTER {
    ULONG HighEdgeFilter;
    ULONG LowEdgeFilter;
};

typedef struct _JOBOBJECT_WAKE_INFORMATION {
    ULONG64 NotificationChannel;
    ULONG64 WakeCounters[7];
};

typedef struct _JOBOBJECT_WAKE_INFORMATION_V1 {
    ULONG64 NotificationChannel;
    ULONG64 WakeCounters[4];
};

typedef struct _JOB_SET_ARRAY {
    PVOID JobHandle;
    ULONG MemberLevel;
    ULONG Flags;
};

typedef struct _JOURNAL_ABSOLUTE_INFORMATION {
    union _LARGE_INTEGER StartTimeStamp;
    union _LARGE_INTEGER EndTimeStamp;
    ULONG64 NumberOfRecords;
    ULONG FillLevel;
};

typedef struct _JOURNAL_CLIENT_INFORMATION {
    union _LARGE_INTEGER StartTimeStamp;
    union _LARGE_INTEGER CurrentTimeStamp;
    ULONG64 RecordsToProcess;
    ULONG RelativeFillLevel;
};

typedef struct _JOURNAL_CREATE_DELETE_KEY_INFORMATION {
    enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
    ULONG64 RecordNumber;
    union _LARGE_INTEGER TimeStamp;
    struct _UNICODE_STRING KeyPathName;
    ULONG SecurityDescriptorLength;
    PVOID SecurityDescriptor;
    USHORT ClassLength;
    PVOID ClassData;
    UCHAR SymbolicLink;
};

typedef struct _JOURNAL_RENAME_KEY_INFORMATION {
    enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
    ULONG64 RecordNumber;
    union _LARGE_INTEGER TimeStamp;
    struct _UNICODE_STRING KeyPathName;
    struct _UNICODE_STRING KeyKeyName;
};

typedef struct _JOURNAL_SET_DELETE_VALUE_INFORMATION {
    enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
    ULONG64 RecordNumber;
    union _LARGE_INTEGER TimeStamp;
    struct _UNICODE_STRING KeyPathName;
    struct _UNICODE_STRING ValueName;
    ULONG OldValueType;
    ULONG OldDataLength;
    PVOID OldData;
    ULONG NewValueType;
    ULONG NewDataLength;
    PVOID NewData;
};

typedef struct _JOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION {
    enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
    ULONG64 RecordNumber;
    union _LARGE_INTEGER TimeStamp;
    struct _UNICODE_STRING KeyPathName;
    union _LARGE_INTEGER OldLastWriteTime;
    union _LARGE_INTEGER NewLastWriteTime;
};

typedef struct _JOURNAL_SET_KEY_SECURITY_INFORMATION {
    enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
    ULONG64 RecordNumber;
    union _LARGE_INTEGER TimeStamp;
    struct _UNICODE_STRING KeyPathName;
    ULONG OldSecurityDescriptorLength;
    PVOID OldSecurityDescriptor;
    ULONG NewSecurityDescriptorLength;
    PVOID NewSecurityDescriptor;
};

typedef struct _JOURNAL_SET_KEY_USER_FLAGS_INFORMATION {
    enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
    ULONG64 RecordNumber;
    union _LARGE_INTEGER TimeStamp;
    struct _UNICODE_STRING KeyPathName;
    ULONG OldFlags;
    ULONG NewFlags;
};

typedef struct _JOURNAL_TRANSACTION_BOUNDARY_INFORMATION {
    enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
    ULONG64 RecordNumber;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID TransactionID;
};

typedef struct _KADDRESS_RANGE {
    PVOID Address;
    ULONG64 Size;
};

typedef struct _KADDRESS_RANGE_DESCRIPTOR {
    struct _KADDRESS_RANGE *AddressRanges;
    ULONG64 AddressRangeCount;
};

typedef struct _KAFFINITY_ENUMERATION_CONTEXT {
    struct _KAFFINITY_EX *Affinity;
    ULONG64 CurrentMask;
    USHORT CurrentIndex;
};

typedef struct _KAFFINITY_EX {
    USHORT Count;
    USHORT Size;
    ULONG Reserved;
    ULONG64 Bitmap[20];
};

typedef struct _KAPC {
    UCHAR Type;
    UCHAR SpareByte0;
    UCHAR Size;
    UCHAR SpareByte1;
    ULONG SpareLong0;
    struct _KTHREAD *Thread;
    struct _LIST_ENTRY ApcListEntry;
    PVOID Reserved[3];
    PVOID NormalContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CHAR ApcStateIndex;
    CHAR ApcMode;
    UCHAR Inserted;
};

typedef struct _KAPC_STATE {
    struct _LIST_ENTRY ApcListHead[2];
    struct _KPROCESS *Process;
    UCHAR InProgressFlags;
    UCHAR KernelApcInProgress : 1;
    UCHAR SpecialApcInProgress : 1;
    UCHAR KernelApcPending;
    UCHAR UserApcPendingAll;
    UCHAR SpecialUserApcPending : 1;
    UCHAR UserApcPending : 1;
};

typedef struct _KBUGCHECK_ADD_PAGES {
    PVOID Context;
    ULONG Flags;
    ULONG BugCheckCode;
    ULONG64 Address;
    ULONG64 Count;
};

typedef struct _KBUGCHECK_CALLBACK_RECORD {
    struct _LIST_ENTRY Entry;
    PVOID CallbackRoutine;
    PVOID Buffer;
    ULONG Length;
    PUCHAR Component;
    ULONG64 Checksum;
    UCHAR State;
};

typedef struct _KBUGCHECK_DUMP_IO {
    ULONG64 Offset;
    PVOID Buffer;
    ULONG BufferLength;
    enum _KBUGCHECK_DUMP_IO_TYPE Type;
};

typedef struct _KBUGCHECK_REASON_CALLBACK_RECORD {
    struct _LIST_ENTRY Entry;
    PVOID CallbackRoutine;
    PUCHAR Component;
    ULONG64 Checksum;
    enum _KBUGCHECK_CALLBACK_REASON Reason;
    UCHAR State;
};

typedef struct _KBUGCHECK_REMOVE_PAGES {
    PVOID Context;
    ULONG Flags;
    ULONG BugCheckCode;
    ULONG64 Address;
    ULONG64 Count;
};

typedef struct _KBUGCHECK_SECONDARY_DUMP_DATA {
    PVOID InBuffer;
    ULONG InBufferLength;
    ULONG MaximumAllowed;
    struct _GUID Guid;
    PVOID OutBuffer;
    ULONG OutBufferLength;
};

typedef struct _KBUGCHECK_SECONDARY_DUMP_DATA_EX {
    PVOID InBuffer;
    ULONG InBufferLength;
    ULONG MaximumAllowed;
    struct _GUID Guid;
    PVOID OutBuffer;
    ULONG OutBufferLength;
    PVOID Context;
    ULONG Flags;
    ULONG DumpType;
    ULONG BugCheckCode;
    ULONG64 BugCheckParameter1;
    ULONG64 BugCheckParameter2;
    ULONG64 BugCheckParameter3;
    ULONG64 BugCheckParameter4;
};

typedef struct _KBUGCHECK_TRIAGE_DUMP_DATA {
    struct _KTRIAGE_DUMP_DATA_ARRAY *DataArray;
    ULONG Flags;
    ULONG MaxVirtMemSize;
    ULONG BugCheckCode;
    ULONG64 BugCheckParameter1;
    ULONG64 BugCheckParameter2;
    ULONG64 BugCheckParameter3;
    ULONG64 BugCheckParameter4;
};

typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
};

typedef struct _KCRM_PROTOCOL_BLOB {
    struct _GUID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
};

typedef struct _KCRM_TRANSACTION_BLOB {
    struct _GUID UOW;
    struct _GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
};

typedef struct _KDESCRIPTOR {
    USHORT Pad[3];
    USHORT Limit;
    PVOID Base;
};

typedef struct _KDESCRIPTOR32 {
    USHORT Pad[3];
    USHORT Limit;
    ULONG Base;
};

typedef struct _KDEVICE_QUEUE {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY DeviceListHead;
    ULONG64 Lock;
    UCHAR Busy;
    LONG64 Reserved : 8;
    LONG64 Hint : 56;
};

typedef struct _KDEVICE_QUEUE_ENTRY {
    struct _LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    UCHAR Inserted;
};

typedef struct _KDPC {
    ULONG TargetInfoAsUlong;
    UCHAR Type;
    UCHAR Importance;
    USHORT Number;
    struct _SINGLE_LIST_ENTRY DpcListEntry;
    ULONG64 ProcessorHistory;
    PVOID DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PVOID DpcData;
};

typedef struct _KDPC_WATCHDOG_INFORMATION {
    ULONG DpcTimeLimit;
    ULONG DpcTimeCount;
    ULONG DpcWatchdogLimit;
    ULONG DpcWatchdogCount;
    ULONG Reserved;
};

typedef struct _KD_POWER_HANDLER {
    struct _LIST_ENTRY List;
    PLONG SetPower;
    PVOID Context;
};

typedef struct _KENLISTMENT {
};

typedef struct _KERNEL_USER_TIMES {
    union _LARGE_INTEGER CreateTime;
    union _LARGE_INTEGER ExitTime;
    union _LARGE_INTEGER KernelTime;
    union _LARGE_INTEGER UserTime;
};

typedef struct _KEVENT {
    struct _DISPATCHER_HEADER Header;
    VOID _KEVENT;
    VOID _KEVENT;
    struct _KEVENT *operator=;
    struct _KEVENT *operator=;
};

typedef struct _KEXCEPTION_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;
    ULONG64 Spare1;
    struct _M128A Xmm6;
    struct _M128A Xmm7;
    struct _M128A Xmm8;
    struct _M128A Xmm9;
    struct _M128A Xmm10;
    struct _M128A Xmm11;
    struct _M128A Xmm12;
    struct _M128A Xmm13;
    struct _M128A Xmm14;
    struct _M128A Xmm15;
    ULONG64 TrapFrame;
    ULONG64 OutputBuffer;
    ULONG64 OutputLength;
    ULONG64 Spare2;
    ULONG64 MxCsr;
    ULONG64 Rbp;
    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    ULONG64 Return;
};

typedef struct _KEY_BASIC_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_CACHED_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG SubKeys;
    ULONG MaxNameLen;
    ULONG Values;
    ULONG MaxValueNameLen;
    ULONG MaxValueDataLen;
    ULONG NameLength;
};

typedef struct _KEY_CONTROL_FLAGS_INFORMATION {
    ULONG ControlFlags;
};

typedef struct _KEY_FLAGS_INFORMATION {
    ULONG Wow64Flags;
    ULONG KeyFlags;
    ULONG ControlFlags;
};

typedef struct _KEY_FULL_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG ClassOffset;
    ULONG ClassLength;
    ULONG SubKeys;
    ULONG MaxNameLen;
    ULONG MaxClassLen;
    ULONG Values;
    ULONG MaxValueNameLen;
    ULONG MaxValueDataLen;
    WCHAR Class[1];
};

typedef struct _KEY_HANDLE_TAGS_INFORMATION {
    ULONG HandleTags;
};

typedef struct _KEY_LAYER_INFORMATION {
    ULONG IsTombstone : 1;
    ULONG IsSupersedeLocal : 1;
    ULONG IsSupersedeTree : 1;
    ULONG ClassIsInherited : 1;
    ULONG Reserved : 28;
};

typedef struct _KEY_NAME_INFORMATION {
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_NODE_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG ClassOffset;
    ULONG ClassLength;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_OPEN_SUBKEYS_INFORMATION {
    ULONG Count;
    struct KEY_PID_ARRAY KeyArray[1];
};

typedef struct _KEY_SET_LAYER_INFORMATION {
    ULONG IsTombstone : 1;
    ULONG IsSupersedeLocal : 1;
    ULONG IsSupersedeTree : 1;
    ULONG ClassIsInherited : 1;
    ULONG Reserved : 28;
};

typedef struct _KEY_SET_VIRTUALIZATION_INFORMATION {
    ULONG VirtualTarget : 1;
    ULONG VirtualStore : 1;
    ULONG VirtualSource : 1;
    ULONG Reserved : 29;
};

typedef struct _KEY_TRUST_INFORMATION {
    ULONG TrustedKey : 1;
    ULONG Reserved : 31;
};

typedef struct _KEY_VALUE_BASIC_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_VALUE_ENTRY {
    struct _UNICODE_STRING *ValueName;
    ULONG DataLength;
    ULONG DataOffset;
    ULONG Type;
};

typedef struct _KEY_VALUE_FULL_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG NameLength;
    WCHAR Name[1];
};

typedef struct _KEY_VALUE_LAYER_INFORMATION {
    ULONG IsTombstone : 1;
    ULONG Reserved : 31;
};

typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _KEY_VIRTUALIZATION_INFORMATION {
    ULONG VirtualizationCandidate : 1;
    ULONG VirtualizationEnabled : 1;
    ULONG VirtualTarget : 1;
    ULONG VirtualStore : 1;
    ULONG VirtualSource : 1;
    ULONG Reserved : 27;
};

typedef struct _KEY_WOW64_FLAGS_INFORMATION {
    ULONG UserFlags;
};

typedef struct _KEY_WRITE_TIME_INFORMATION {
    union _LARGE_INTEGER LastWriteTime;
};

typedef struct _KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT {
    enum KE_PROCESSOR_CHANGE_NOTIFY_STATE State;
    ULONG NtNumber;
    LONG Status;
    struct _PROCESSOR_NUMBER ProcNumber;
};

typedef struct _KE_SUPERVISOR_STATE_EXT_HOST_INTERFACE {
    PLONG StartSavingSupervisorState;
    PLONG GetSavedSupervisorState;
    PLONG QueryIptSupport;
    PLONG GetSavedIptState;
};

typedef struct _KFLOATING_SAVE {
    ULONG Dummy;
};

typedef struct _KGATE {
    struct _DISPATCHER_HEADER Header;
    VOID _KGATE;
    VOID _KGATE;
    struct _KGATE *operator=;
    struct _KGATE *operator=;
};

typedef struct _KGDTENTRY {
};

typedef struct _KINTEGRITY_CHECK_FILTER_ADDRESS_RANGE {
    struct _KADDRESS_RANGE Range;
};

typedef struct _KINTEGRITY_CHECK_FILTER_PROCESSOR_AFFINITY {
    struct _GROUP_AFFINITY GroupAffinity;
};

typedef struct _KINTEGRITY_CHECK_OPAQUE_STATE {
    ULONG Index;
    ULONG Restart;
    ULONG64 Reserved[4];
};

typedef struct _KINTEGRITY_CHECK_PARAMETERS {
    ULONG64 Size;
    ULONG ApiVersion;
    enum _KINTEGRITY_CHECK_CONTROL Control;
    ULONG WorkQuota;
    ULONG Flags;
    ULONG64 Reserved[3];
     <unnamed-type-ControlInput>;
    union {
         <unnamed-type-ResourceType>;
        struct {
            enum _KINTEGRITY_RESOURCE_TYPE Type;
            ULONG FilterSize;
            PVOID Filter;
        } ResourceType;
    } ControlInput;
};

typedef struct _KINTERRUPT {
};

typedef struct _KIPI_COUNTS {
    ULONG Freeze;
    ULONG Packet;
    ULONG DPC;
    ULONG APC;
    ULONG FlushSingleTb;
    ULONG FlushMultipleTb;
    ULONG FlushEntireTb;
    ULONG GenericCall;
    ULONG ChangeColor;
    ULONG SweepDcache;
    ULONG SweepIcache;
    ULONG SweepIcacheRange;
    ULONG FlushIoBuffers;
    ULONG GratuitousDPC;
};

typedef struct _KLDR_DATA_TABLE_ENTRY {
    struct _LIST_ENTRY InLoadOrderLinks;
    PVOID ExceptionTable;
    ULONG ExceptionTableSize;
    PVOID GpValue;
    struct _NON_PAGED_DEBUG_INFO *NonPagedDebugInfo;
    PVOID DllBase;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    struct _UNICODE_STRING FullDllName;
    struct _UNICODE_STRING BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
     <unnamed-type-u1>;
    union {
        USHORT SignatureLevel : 4;
        USHORT SignatureType : 3;
        USHORT Unused : 9;
        USHORT EntireField;
    } u1;
    PVOID SectionPointer;
    ULONG CheckSum;
    ULONG CoverageSectionSize;
    PVOID CoverageSection;
    PVOID LoadedImports;
    PVOID Spare;
    ULONG SizeOfImageNotRounded;
    ULONG TimeDateStamp;
};

typedef struct _KLDR_DATA_TABLE_ENTRY32 {
    struct LIST_ENTRY32 InLoadOrderLinks;
    ULONG __Undefined1;
    ULONG __Undefined2;
    ULONG __Undefined3;
    ULONG NonPagedDebugInfo;
    ULONG DllBase;
    ULONG EntryPoint;
    ULONG SizeOfImage;
    struct _STRING32 FullDllName;
    struct _STRING32 BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    USHORT __Undefined5;
    ULONG __Undefined6;
    ULONG CheckSum;
    ULONG TimeDateStamp;
};

typedef struct _KLDR_DATA_TABLE_ENTRY64 {
    struct LIST_ENTRY64 InLoadOrderLinks;
    ULONG64 __Undefined1;
    ULONG64 __Undefined2;
    ULONG64 __Undefined3;
    ULONG64 NonPagedDebugInfo;
    ULONG64 DllBase;
    ULONG64 EntryPoint;
    ULONG SizeOfImage;
    struct _STRING64 FullDllName;
    struct _STRING64 BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    USHORT __Undefined5;
    ULONG64 __Undefined6;
    ULONG CheckSum;
    ULONG __padding1;
    ULONG TimeDateStamp;
    ULONG __padding2;
};

typedef struct _KLDTENTRY {
    USHORT LimitLow;
    USHORT BaseLow;
     <unnamed-type-HighWord>;
    union {
         <unnamed-type-Bytes>;
        struct {
            UCHAR BaseMid;
            UCHAR Flags1;
            UCHAR Flags2;
            UCHAR BaseHi;
        } Bytes;
         <unnamed-type-Bits>;
        struct {
            ULONG BaseMid : 8;
            ULONG Type : 5;
            ULONG Dpl : 2;
            ULONG Pres : 1;
            ULONG LimitHi : 4;
            ULONG Sys : 1;
            ULONG Reserved_0 : 1;
            ULONG Default_Big : 1;
            ULONG Granularity : 1;
            ULONG BaseHi : 8;
        } Bits;
    } HighWord;
};

typedef struct _KLOCK_QUEUE_HANDLE {
    struct _KSPIN_LOCK_QUEUE LockQueue;
    UCHAR OldIrql;
    VOID _KLOCK_QUEUE_HANDLE;
    VOID _KLOCK_QUEUE_HANDLE;
    struct _KLOCK_QUEUE_HANDLE *operator=;
    struct _KLOCK_QUEUE_HANDLE *operator=;
};

typedef struct _KMUTANT {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY MutantListEntry;
    struct _KTHREAD *OwnerThread;
    UCHAR Abandoned;
    UCHAR ApcDisable;
    VOID _KMUTANT;
    VOID _KMUTANT;
    struct _KMUTANT *operator=;
    struct _KMUTANT *operator=;
};

typedef struct _KNODE {
};

typedef struct _KNONVOLATILE_CONTEXT_POINTERS {
    struct _M128A *FloatingContext[16];
    struct _M128A *Xmm0;
    struct _M128A *Xmm1;
    struct _M128A *Xmm2;
    struct _M128A *Xmm3;
    struct _M128A *Xmm4;
    struct _M128A *Xmm5;
    struct _M128A *Xmm6;
    struct _M128A *Xmm7;
    struct _M128A *Xmm8;
    struct _M128A *Xmm9;
    struct _M128A *Xmm10;
    struct _M128A *Xmm11;
    struct _M128A *Xmm12;
    struct _M128A *Xmm13;
    struct _M128A *Xmm14;
    struct _M128A *Xmm15;
    PULONG64 IntegerContext[16];
    PULONG64 Rax;
    PULONG64 Rcx;
    PULONG64 Rdx;
    PULONG64 Rbx;
    PULONG64 Rsp;
    PULONG64 Rbp;
    PULONG64 Rsi;
    PULONG64 Rdi;
    PULONG64 R8;
    PULONG64 R9;
    PULONG64 R10;
    PULONG64 R11;
    PULONG64 R12;
    PULONG64 R13;
    PULONG64 R14;
    PULONG64 R15;
};

typedef struct _KPCR {
    struct _NT_TIB NtTib;
    union _KGDTENTRY64 *GdtBase;
    struct _KTSS64 *TssBase;
    ULONG64 UserRsp;
    struct _KPCR *Self;
    struct _KPRCB *CurrentPrcb;
    struct _KSPIN_LOCK_QUEUE *LockArray;
    PVOID Used_Self;
    union _KIDTENTRY64 *IdtBase;
    ULONG64 Unused[2];
    UCHAR Irql;
    UCHAR SecondLevelCacheAssociativity;
    UCHAR ObsoleteNumber;
    UCHAR Fill0;
    ULONG Unused0[3];
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG StallScaleFactor;
    PVOID Unused1[3];
    ULONG KernelReserved[15];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG Unused2;
    PVOID KdVersionBlock;
    PVOID Unused3;
    ULONG PcrAlign1[24];
};

typedef struct _KPRCB {
    ULONG MxCsr;
    UCHAR LegacyNumber;
    UCHAR ReservedMustBeZero;
    UCHAR InterruptRequest;
    UCHAR IdleHalt;
    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;
    UCHAR NestingLevel;
    UCHAR ClockOwner;
    UCHAR PendingTickFlags;
    UCHAR PendingTick : 1;
    UCHAR PendingBackupTick : 1;
    UCHAR IdleState;
    ULONG Number;
    ULONG64 RspBase;
    ULONG64 PrcbLock;
    PCHAR PriorityState;
    CHAR CpuType;
    CHAR CpuID;
    USHORT CpuStep;
    UCHAR CpuStepping;
    UCHAR CpuModel;
    ULONG MHz;
    ULONG64 HalReserved[8];
    USHORT MinorVersion;
    USHORT MajorVersion;
    UCHAR BuildType;
    UCHAR CpuVendor;
    UCHAR CoresPerPhysicalProcessor;
    UCHAR LogicalProcessorsPerCore;
    ULONG64 PrcbPad04[6];
    struct _KNODE *ParentNode;
    ULONG64 GroupSetMember;
    UCHAR Group;
    UCHAR GroupIndex;
    UCHAR PrcbPad05[2];
    ULONG InitialApicId;
    ULONG ScbOffset;
    ULONG ApicMask;
    PVOID AcpiReserved;
    ULONG CFlushSize;
    ULONG64 TrappedSecurityDomain;
    UCHAR BpbState;
    UCHAR BpbCpuIdle : 1;
    UCHAR BpbFlushRsbOnTrap : 1;
    UCHAR BpbIbpbOnReturn : 1;
    UCHAR BpbIbpbOnTrap : 1;
    UCHAR BpbIbpbOnRetpolineExit : 1;
    UCHAR BpbStateReserved : 3;
    UCHAR BpbFeatures;
    UCHAR BpbClearOnIdle : 1;
    UCHAR BpbEnabled : 1;
    UCHAR BpbSmep : 1;
    UCHAR BpbFeaturesReserved : 5;
    UCHAR BpbCurrentSpecCtrl;
    UCHAR BpbKernelSpecCtrl;
    UCHAR BpbNmiSpecCtrl;
    UCHAR BpbUserSpecCtrl;
    SHORT PairRegister;
    ULONG64 PrcbPad11[2];
    struct _KPROCESSOR_STATE ProcessorState;
    struct _XSAVE_AREA_HEADER *ExtendedSupervisorState;
    ULONG ProcessorSignature;
    ULONG ProcessorFlags;
    ULONG64 PrcbPad12a;
    ULONG64 PrcbPad12[3];
    VOID _KPRCB;
    VOID _KPRCB;
    struct _KPRCB *operator=;
    struct _KPRCB *operator=;
};

typedef struct _KPRIQUEUE {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY EntryListHead[32];
    LONG CurrentCount[32];
    ULONG MaximumCount;
    struct _LIST_ENTRY ThreadListHead;
    VOID _KPRIQUEUE;
    VOID _KPRIQUEUE;
    struct _KPRIQUEUE *operator=;
    struct _KPRIQUEUE *operator=;
};

typedef struct _KPROCESS {
};

typedef struct _KPROCESSOR_STATE {
    struct _KSPECIAL_REGISTERS SpecialRegisters;
    struct _CONTEXT ContextFrame;
};

typedef struct _KQUEUE {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY EntryListHead;
    ULONG CurrentCount;
    ULONG MaximumCount;
    struct _LIST_ENTRY ThreadListHead;
    VOID _KQUEUE;
    VOID _KQUEUE;
    struct _KQUEUE *operator=;
    struct _KQUEUE *operator=;
};

typedef struct _KREQUEST_PACKET {
    PVOID CurrentPacket[3];
    PVOID WorkerRoutine;
};

typedef struct _KRESOURCEMANAGER {
};

typedef struct _KSECURE_FAULT_INFORMATION {
    ULONG64 FaultCode;
    ULONG64 FaultVa;
};

typedef struct _KSEMAPHORE {
    struct _DISPATCHER_HEADER Header;
    LONG Limit;
    VOID _KSEMAPHORE;
    VOID _KSEMAPHORE;
    struct _KSEMAPHORE *operator=;
    struct _KSEMAPHORE *operator=;
};

typedef struct _KSPECIAL_REGISTERS {
    ULONG64 Cr0;
    ULONG64 Cr2;
    ULONG64 Cr3;
    ULONG64 Cr4;
    ULONG64 KernelDr0;
    ULONG64 KernelDr1;
    ULONG64 KernelDr2;
    ULONG64 KernelDr3;
    ULONG64 KernelDr6;
    ULONG64 KernelDr7;
    struct _KDESCRIPTOR Gdtr;
    struct _KDESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG MxCsr;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    ULONG64 Cr8;
    ULONG64 MsrGsBase;
    ULONG64 MsrGsSwap;
    ULONG64 MsrStar;
    ULONG64 MsrLStar;
    ULONG64 MsrCStar;
    ULONG64 MsrSyscallMask;
    ULONG64 Xcr0;
    ULONG64 MsrFsBase;
    ULONG64 SpecialPadding0;
};

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE *Next;
    PULONG64 Lock;
    VOID _KSPIN_LOCK_QUEUE;
    VOID _KSPIN_LOCK_QUEUE;
    struct _KSPIN_LOCK_QUEUE *operator=;
    struct _KSPIN_LOCK_QUEUE *operator=;
};

typedef struct _KSTART_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 Reserved;
    ULONG64 Return;
};

typedef struct _KSWITCH_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5Home;
    UCHAR ApcBypass;
    UCHAR Fill1[7];
    ULONG64 Rbp;
    ULONG64 Return;
};

typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};

typedef struct _KTB_FLUSH_VA {
     <unnamed-type-u1>;
    union {
        ULONG64 NumberOfEntries : 10;
        ULONG64 PageSize : 2;
        PVOID Va;
        ULONG64 VaLong;
    } u1;
};

typedef struct _KTHREAD {
};

typedef struct _KTIMER {
    struct _DISPATCHER_HEADER Header;
    union _ULARGE_INTEGER DueTime;
    struct _LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;
    ULONG Processor;
    ULONG Period;
    VOID _KTIMER;
    VOID _KTIMER;
    struct _KTIMER *operator=;
    struct _KTIMER *operator=;
};

typedef struct _KTM {
};

typedef struct _KTMOBJECT_CURSOR {
    struct _GUID LastQuery;
    ULONG ObjectIdCount;
    struct _GUID ObjectIds[1];
};

typedef struct _KTRANSACTION {
};

typedef struct _KTRAP_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;
    CHAR PreviousMode;
    UCHAR PreviousIrql;
    UCHAR FaultIndicator;
    UCHAR ExceptionActive;
    ULONG MxCsr;
    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 GsBase;
    ULONG64 GsSwap;
    struct _M128A Xmm0;
    struct _M128A Xmm1;
    struct _M128A Xmm2;
    struct _M128A Xmm3;
    struct _M128A Xmm4;
    struct _M128A Xmm5;
    ULONG64 FaultAddress;
    ULONG64 ContextRecord;
    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    ULONG64 TrapFrame;
    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 Rbp;
    ULONG64 ErrorCode;
    ULONG64 ExceptionFrame;
    ULONG64 Rip;
    USHORT SegCs;
    UCHAR Fill0;
    UCHAR Logging;
    USHORT Fill1[2];
    ULONG EFlags;
    ULONG Fill2;
    ULONG64 Rsp;
    USHORT SegSs;
    USHORT Fill3;
    ULONG Fill4;
};

typedef struct _KTRIAGE_DUMP_DATA_ARRAY {
    struct _LIST_ENTRY List;
    ULONG NumBlocksUsed;
    ULONG NumBlocksTotal;
    ULONG VirtMemSize;
    ULONG ComponentNameBufferLength;
    PUCHAR ComponentName;
    struct _KADDRESS_RANGE Blocks[1];
};

typedef struct _KTSS64 {
    ULONG Reserved0;
    ULONG64 Rsp0;
    ULONG64 Rsp1;
    ULONG64 Rsp2;
    ULONG64 Ist[8];
    ULONG64 Reserved1;
    USHORT Reserved2;
    USHORT IoMapBase;
};

typedef struct _KUMS_CONTEXT_HEADER {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    PVOID StackTop;
    ULONG64 StackSize;
    ULONG64 RspOffset;
    ULONG64 Rip;
    struct _XSAVE_FORMAT *FltSave;
    ULONG64 Volatile : 1;
    ULONG64 Reserved : 63;
    ULONG64 Flags;
    struct _KTRAP_FRAME *TrapFrame;
    struct _KEXCEPTION_FRAME *ExceptionFrame;
    struct _KTHREAD *SourceThread;
    ULONG64 Return;
};

typedef struct _KUSER_SHARED_DATA {
    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;
    struct _KSYSTEM_TIME InterruptTime;
    struct _KSYSTEM_TIME SystemTime;
    struct _KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    WCHAR NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG LargePageMinimum;
    ULONG AitSamplingValue;
    ULONG AppCompatFlag;
    ULONG64 RNGSeedVersion;
    ULONG GlobalValidationRunlevel;
    LONG TimeZoneBiasStamp;
    ULONG NtBuildNumber;
    enum _NT_PRODUCT_TYPE NtProductType;
    UCHAR ProductTypeIsValid;
    UCHAR Reserved0[1];
    USHORT NativeProcessorArchitecture;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    UCHAR ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    ULONG TimeSlip;
    enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
    ULONG BootId;
    union _LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    UCHAR KdDebuggerEnabled;
    UCHAR MitigationPolicies;
    UCHAR NXSupportPolicy : 2;
    UCHAR SEHValidationPolicy : 2;
    UCHAR CurDirDevicesSkippedForDlls : 2;
    UCHAR Reserved : 2;
    UCHAR Reserved6[2];
    ULONG ActiveConsoleId;
    ULONG DismountCount;
    ULONG ComPlusPackage;
    ULONG LastSystemRITEventTickCount;
    ULONG NumberOfPhysicalPages;
    UCHAR SafeBootMode;
    UCHAR VirtualizationFlags;
    UCHAR Reserved12[2];
    ULONG SharedDataFlags;
    ULONG DbgErrorPortPresent : 1;
    ULONG DbgElevationEnabled : 1;
    ULONG DbgVirtEnabled : 1;
    ULONG DbgInstallerDetectEnabled : 1;
    ULONG DbgLkgEnabled : 1;
    ULONG DbgDynProcessorEnabled : 1;
    ULONG DbgConsoleBrokerEnabled : 1;
    ULONG DbgSecureBootEnabled : 1;
    ULONG DbgMultiSessionSku : 1;
    ULONG DbgMultiUsersInSessionSku : 1;
    ULONG DbgStateSeparationEnabled : 1;
    ULONG SpareBits : 21;
    ULONG DataFlagsPad[1];
    ULONG64 TestRetInstruction;
    LONG64 QpcFrequency;
    ULONG SystemCall;
    ULONG SystemCallPad0;
    ULONG64 SystemCallPad[2];
    struct _KSYSTEM_TIME TickCount;
    ULONG64 TickCountQuad;
    ULONG ReservedTickCountOverlay[3];
    ULONG TickCountPad[1];
    ULONG Cookie;
    ULONG CookiePad[1];
    LONG64 ConsoleSessionForegroundProcessId;
    ULONG64 TimeUpdateLock;
    ULONG64 BaselineSystemTimeQpc;
    ULONG64 BaselineInterruptTimeQpc;
    ULONG64 QpcSystemTimeIncrement;
    ULONG64 QpcInterruptTimeIncrement;
    UCHAR QpcSystemTimeIncrementShift;
    UCHAR QpcInterruptTimeIncrementShift;
    USHORT UnparkedProcessorCount;
    ULONG EnclaveFeatureMask[4];
    ULONG TelemetryCoverageRound;
    USHORT UserModeGlobalLogger[16];
    ULONG ImageFileExecutionOptions;
    ULONG LangGenerationCount;
    ULONG64 Reserved4;
    ULONG64 InterruptTimeBias;
    ULONG64 QpcBias;
    ULONG ActiveProcessorCount;
    UCHAR ActiveGroupCount;
    UCHAR Reserved9;
    USHORT QpcData;
    UCHAR QpcBypassEnabled;
    UCHAR QpcShift;
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
    struct _XSTATE_CONFIGURATION XState;
};

typedef struct _KWAIT_BLOCK {
    struct _LIST_ENTRY WaitListEntry;
    UCHAR WaitType;
    UCHAR BlockState;
    USHORT WaitKey;
    LONG SpareLong;
    struct _KTHREAD *Thread;
    struct _KQUEUE *NotificationQueue;
    PVOID Object;
    PVOID SparePtr;
    VOID _KWAIT_BLOCK;
    VOID _KWAIT_BLOCK;
    struct _KWAIT_BLOCK *operator=;
    struct _KWAIT_BLOCK *operator=;
};

typedef struct _KWAIT_CHAIN {
    PVOID Head;
};

typedef struct _K_MDL_Advance {
    struct _MDL *operator();
};

typedef struct _K_NET_BUFFER_Advance {
    struct _NET_BUFFER *operator();
};

typedef struct _K_NET_BUFFER_LIST_Advance {
    struct _NET_BUFFER_LIST *operator();
};

typedef struct _LAST_EXCEPTION_LOG {
    struct _EXCEPTION_RECORD ExceptionRecord;
    struct _CONTEXT ContextRecord;
    ULONG ControlPc;
    enum _EXCEPTION_DISPOSITION Disposition;
    ULONG HandlerData[5];
};

typedef struct _LBLOB {
    ULONG64 Length;
    ULONG64 MaximumLength;
    PUCHAR Buffer;
};

typedef struct _LDRP_CSLIST {
    struct _SINGLE_LIST_ENTRY *Tail;
};

typedef struct _LDRP_LOAD_CONTEXT {
};

typedef struct _LDR_DATA_TABLE_ENTRY {
    struct _LIST_ENTRY InLoadOrderLinks;
    struct _LIST_ENTRY InMemoryOrderLinks;
    struct _LIST_ENTRY InInitializationOrderLinks;
    PVOID DllBase;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    struct _UNICODE_STRING FullDllName;
    struct _UNICODE_STRING BaseDllName;
    UCHAR FlagGroup[4];
    ULONG Flags;
    ULONG PackagedBinary : 1;
    ULONG MarkedForRemoval : 1;
    ULONG ImageDll : 1;
    ULONG LoadNotificationsSent : 1;
    ULONG TelemetryEntryProcessed : 1;
    ULONG ProcessStaticImport : 1;
    ULONG InLegacyLists : 1;
    ULONG InIndexes : 1;
    ULONG ShimDll : 1;
    ULONG InExceptionTable : 1;
    ULONG ReservedFlags1 : 2;
    ULONG LoadInProgress : 1;
    ULONG LoadConfigProcessed : 1;
    ULONG EntryProcessed : 1;
    ULONG ProtectDelayLoad : 1;
    ULONG ReservedFlags3 : 2;
    ULONG DontCallForThreads : 1;
    ULONG ProcessAttachCalled : 1;
    ULONG ProcessAttachFailed : 1;
    ULONG CorDeferredValidate : 1;
    ULONG CorImage : 1;
    ULONG DontRelocate : 1;
    ULONG CorILOnly : 1;
    ULONG ChpeImage : 1;
    ULONG ReservedFlags5 : 2;
    ULONG Redirected : 1;
    ULONG ReservedFlags6 : 2;
    ULONG CompatDatabaseProcessed : 1;
    USHORT ObsoleteLoadCount;
    USHORT TlsIndex;
    struct _LIST_ENTRY HashLinks;
    ULONG TimeDateStamp;
    struct _ACTIVATION_CONTEXT *EntryPointActivationContext;
    PVOID Lock;
    struct _LDR_DDAG_NODE *DdagNode;
    struct _LIST_ENTRY NodeModuleLink;
    struct _LDRP_LOAD_CONTEXT *LoadContext;
    PVOID ParentDllBase;
    PVOID SwitchBackContext;
    struct _RTL_BALANCED_NODE BaseAddressIndexNode;
    struct _RTL_BALANCED_NODE MappingInfoIndexNode;
    ULONG64 OriginalBase;
    union _LARGE_INTEGER LoadTime;
    ULONG BaseNameHashValue;
    enum _LDR_DLL_LOAD_REASON LoadReason;
    ULONG ImplicitPathOptions;
    ULONG ReferenceCount;
    ULONG DependentLoadFlags;
    UCHAR SigningLevel;
};

typedef struct _LDR_DATA_TABLE_ENTRY32 {
    struct LIST_ENTRY32 InLoadOrderLinks;
    struct LIST_ENTRY32 InMemoryOrderLinks;
    struct LIST_ENTRY32 InInitializationOrderLinks;
    ULONG DllBase;
    ULONG EntryPoint;
    ULONG SizeOfImage;
    struct _STRING32 FullDllName;
    struct _STRING32 BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    USHORT TlsIndex;
    struct LIST_ENTRY32 HashLinks;
    ULONG SectionPointer;
    ULONG CheckSum;
    ULONG TimeDateStamp;
    ULONG LoadedImports;
};

typedef struct _LDR_DATA_TABLE_ENTRY64 {
    struct LIST_ENTRY64 InLoadOrderLinks;
    struct LIST_ENTRY64 InMemoryOrderLinks;
    struct LIST_ENTRY64 InInitializationOrderLinks;
    ULONG64 DllBase;
    ULONG64 EntryPoint;
    ULONG SizeOfImage;
    struct _STRING64 FullDllName;
    struct _STRING64 BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    USHORT TlsIndex;
    struct LIST_ENTRY64 HashLinks;
    ULONG64 SectionPointer;
    ULONG CheckSum;
    ULONG TimeDateStamp;
    ULONG64 LoadedImports;
};

typedef struct _LDR_DDAG_NODE {
    struct _LIST_ENTRY Modules;
    struct _LDR_SERVICE_TAG_RECORD *ServiceTagList;
    ULONG LoadCount;
    ULONG LoadWhileUnloadingCount;
    ULONG LowestLink;
    struct _LDRP_CSLIST Dependencies;
    struct _LDRP_CSLIST IncomingDependencies;
    enum _LDR_DDAG_STATE State;
    struct _SINGLE_LIST_ENTRY CondenseLink;
    ULONG PreorderNumber;
};

typedef struct _LDR_DLL_LOADED_NOTIFICATION_DATA {
    ULONG Flags;
    struct _UNICODE_STRING *FullDllName;
    struct _UNICODE_STRING *BaseDllName;
    PVOID DllBase;
    ULONG SizeOfImage;
};

typedef struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA {
    ULONG Flags;
    struct _UNICODE_STRING *FullDllName;
    struct _UNICODE_STRING *BaseDllName;
    PVOID DllBase;
    ULONG SizeOfImage;
};

typedef struct _LDR_ENUM_RESOURCE_ENTRY {
     <unnamed-type-Path>;
    union {
        ULONG64 NameOrId;
        struct _IMAGE_RESOURCE_DIRECTORY_STRING *Name;
        USHORT Id;
        USHORT NameIsPresent;
    } Path[3];
    PVOID Data;
    ULONG Size;
    ULONG Reserved;
};

typedef struct _LDR_FAILURE_DATA {
    LONG Status;
    WCHAR ImageName[32];
    WCHAR AdditionalInfo[32];
};

typedef struct _LDR_IMPORT_CALLBACK_INFO {
    PVOID ImportCallbackRoutine;
    PVOID ImportCallbackParameter;
};

typedef struct _LDR_RESLOADER_RET {
    PVOID Module;
    PVOID DataEntry;
    PVOID TargetModule;
};

typedef struct _LDR_SECTION_INFO {
    PVOID SectionHandle;
    ULONG DesiredAccess;
    struct _OBJECT_ATTRIBUTES *ObjA;
    ULONG SectionPageProtection;
    ULONG AllocationAttributes;
};

typedef struct _LDR_SERVICE_TAG_RECORD {
    struct _LDR_SERVICE_TAG_RECORD *Next;
    ULONG ServiceTag;
};

typedef struct _LDR_VERIFY_IMAGE_INFO {
    ULONG Size;
    ULONG Flags;
    struct _LDR_IMPORT_CALLBACK_INFO CallbackInfo;
    struct _LDR_SECTION_INFO SectionInfo;
    USHORT ImageCharacteristics;
};

typedef struct _LEAP_SECOND_DATA {
};

typedef struct _LEAP_SECOND_DATA_REGISTRY_ENTRY {
    SHORT Year;
    SHORT Month;
    SHORT Day;
    SHORT Hour;
    SHORT Flags;
    SHORT Reserved;
};

typedef struct _LEARNING_MODE_OBJECT_INFORMATION {
    struct _SINGLE_LIST_ENTRY ListEntry;
    enum _LEARNING_MODE_LOG_LEVEL LogLevel;
    struct _UNICODE_STRING *ObjectType;
    struct _UNICODE_STRING *ObjectName;
    PVOID RootDirectory;
    struct _UNICODE_STRING FullObjectName;
};

typedef struct _LEGACY_BUS_INFORMATION {
    struct _GUID BusTypeGuid;
    enum _INTERFACE_TYPE LegacyBusType;
    ULONG BusNumber;
};

typedef struct _LEGACY_DEVICE_DETECTION_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG LegacyDeviceDetection;
};

typedef struct _LIBRARY_MODULE {
};

typedef struct _LINK_SHARE_ACCESS {
    ULONG OpenCount;
    ULONG Deleters;
    ULONG SharedDelete;
};

typedef struct _LINK_TRACKING_INFORMATION {
    enum _LINK_TRACKING_INFORMATION_TYPE Type;
    UCHAR VolumeId[16];
};

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
};

typedef struct _LOADER_BUGCHECK_PARAMETERS {
    ULONG BugcheckCode;
    ULONG64 BugcheckParameter1;
    ULONG64 BugcheckParameter2;
    ULONG64 BugcheckParameter3;
    ULONG64 BugcheckParameter4;
};

typedef struct _LOADER_HIVE_BLOCK {
    struct _LIST_ENTRY Entry;
    PWCHAR FilePath;
    ULONG Flags;
    PVOID RegistryBase;
    ULONG RegistryLength;
    PWCHAR RegistryName;
    PWCHAR RegistryParent;
    struct _LOADER_HIVE_RECOVERY_INFO RecoveryInfo;
    PCHAR ArcDeviceName;
    union _LARGE_INTEGER RegistryBasePa;
};

typedef struct _LOADER_HIVE_RECOVERY_INFO {
    ULONG Recovered : 1;
    ULONG LegacyRecovery : 1;
    ULONG SoftRebootConflict : 1;
    ULONG MostRecentLog : 3;
    ULONG Spare : 27;
    ULONG LogNextSequence;
    ULONG LogMinimumSequence;
    ULONG LogCurrentOffset;
};

typedef struct _LOADER_PARAMETER_BLOCK {
    ULONG OsMajorVersion;
    ULONG OsMinorVersion;
    ULONG Size;
    ULONG OsLoaderSecurityVersion;
    struct _LIST_ENTRY LoadOrderListHead;
    struct _LIST_ENTRY MemoryDescriptorListHead;
    struct _LIST_ENTRY BootDriverListHead;
    struct _LIST_ENTRY EarlyLaunchListHead;
    struct _LIST_ENTRY CoreDriverListHead;
    struct _LIST_ENTRY CoreExtensionsDriverListHead;
    struct _LIST_ENTRY TpmCoreDriverListHead;
    ULONG64 KernelStack;
    ULONG64 Prcb;
    ULONG64 Process;
    ULONG64 Thread;
    ULONG KernelStackSize;
    ULONG RegistryLength;
    PVOID RegistryBase;
    struct _CONFIGURATION_COMPONENT_DATA *ConfigurationRoot;
    PCHAR ArcBootDeviceName;
    PCHAR ArcHalDeviceName;
    PCHAR NtBootPathName;
    PCHAR NtHalPathName;
    PCHAR LoadOptions;
    struct _NLS_DATA_BLOCK *NlsData;
    struct _ARC_DISK_INFORMATION *ArcDiskInformation;
    struct _LOADER_PARAMETER_EXTENSION *Extension;
     <unnamed-type-u>;
    union {
        struct _I386_LOADER_BLOCK I386;
        struct _ARM_LOADER_BLOCK Arm;
    } u;
    struct _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;
    PCHAR OsBootstatPathName;
    PCHAR ArcOSDataDeviceName;
    PCHAR ArcWindowsSysPartName;
};

typedef struct _LOADER_PARAMETER_CI_EXTENSION {
    ULONG CodeIntegrityOptions;
    ULONG UpgradeInProgress : 1;
    ULONG IsWinPE : 1;
    ULONG CustomKernelSignersAllowed : 1;
    ULONG Reserved : 29;
    union _LARGE_INTEGER WhqlEnforcementDate;
    ULONG RevocationListOffset;
    ULONG RevocationListSize;
    ULONG CodeIntegrityPolicyOffset;
    ULONG CodeIntegrityPolicySize;
    ULONG CodeIntegrityPolicyHashOffset;
    ULONG CodeIntegrityPolicyHashSize;
    ULONG CodeIntegrityPolicyOriginalHashOffset;
    ULONG CodeIntegrityPolicyOriginalHashSize;
    LONG WeakCryptoPolicyLoadStatus;
    ULONG WeakCryptoPolicyOffset;
    ULONG WeakCryptoPolicySize;
    ULONG SecureBootPolicyOffset;
    ULONG SecureBootPolicySize;
    ULONG Reserved2;
    UCHAR SerializedData[1];
};

typedef struct _LOADER_PARAMETER_EXTENSION {
    ULONG Size;
    struct _PROFILE_PARAMETER_BLOCK Profile;
    PVOID EmInfFileImage;
    ULONG EmInfFileSize;
    PVOID TriageDumpBlock;
    struct _HEADLESS_LOADER_BLOCK *HeadlessLoaderBlock;
    struct _SMBIOS3_TABLE_HEADER *SMBiosEPSHeader;
    PVOID DrvDBImage;
    ULONG DrvDBSize;
    struct _NETWORK_LOADER_BLOCK *NetworkLoaderBlock;
    struct _LIST_ENTRY FirmwareDescriptorListHead;
    PVOID AcpiTable;
    ULONG AcpiTableSize;
    ULONG LastBootSucceeded : 1;
    ULONG LastBootShutdown : 1;
    ULONG IoPortAccessSupported : 1;
    ULONG BootDebuggerActive : 1;
    ULONG StrongCodeGuarantees : 1;
    ULONG HardStrongCodeGuarantees : 1;
    ULONG SidSharingDisabled : 1;
    ULONG TpmInitialized : 1;
    ULONG VsmConfigured : 1;
    ULONG IumEnabled : 1;
    ULONG IsSmbboot : 1;
    ULONG BootLogEnabled : 1;
    ULONG DriverVerifierEnabled : 1;
    ULONG Unused : 8;
    ULONG FeatureSimulations : 6;
    ULONG MicrocodeSelfHosting : 1;
    ULONG XhciLegacyHandoffSkip : 1;
    ULONG DisableInsiderOptInHVCI : 1;
    ULONG MicrocodeMinVerSupported : 1;
    ULONG GpuIommuEnabled : 1;
    struct _LOADER_PERFORMANCE_DATA LoaderPerformanceData;
    struct _LIST_ENTRY BootApplicationPersistentData;
    PVOID WmdTestResult;
    struct _GUID BootIdentifier;
    ULONG ResumePages;
    PVOID DumpHeader;
    PVOID BgContext;
    PVOID NumaLocalityInfo;
    PVOID NumaGroupAssignment;
    struct _LIST_ENTRY AttachedHives;
    ULONG MemoryCachingRequirementsCount;
    PVOID MemoryCachingRequirements;
    struct _BOOT_ENTROPY_LDR_RESULT BootEntropyResult;
    ULONG64 ProcessorCounterFrequency;
    struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;
    struct _GUID HardwareConfigurationId;
    struct _LIST_ENTRY HalExtensionModuleList;
    union _LARGE_INTEGER SystemTime;
    ULONG64 TimeStampAtSystemTimeRead;
    ULONG64 BootFlags;
    ULONG64 DbgMenuOsSelection : 1;
    ULONG64 DbgHiberBoot : 1;
    ULONG64 DbgSoftRestart : 1;
    ULONG64 DbgMeasuredLaunch : 1;
    ULONG64 InternalBootFlags;
    ULONG64 DbgUtcBootTime : 1;
    ULONG64 DbgRtcBootTime : 1;
    ULONG64 DbgNoLegacyServices : 1;
    PVOID WfsFPData;
    ULONG WfsFPDataSize;
    struct _LOADER_BUGCHECK_PARAMETERS BugcheckParameters;
    PVOID ApiSetSchema;
    ULONG ApiSetSchemaSize;
    struct _LIST_ENTRY ApiSetSchemaExtensions;
    struct _UNICODE_STRING AcpiBiosVersion;
    struct _UNICODE_STRING SmbiosVersion;
    struct _UNICODE_STRING EfiVersion;
    struct _DEBUG_DEVICE_DESCRIPTOR *KdDebugDevice;
    struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable;
    struct _UNICODE_STRING ManufacturingProfile;
    PVOID BbtBuffer;
    ULONG64 XsaveAllowedFeatures;
    ULONG XsaveFlags;
    PVOID BootOptions;
    ULONG IumEnablement;
    ULONG IumPolicy;
    LONG IumStatus;
    ULONG BootId;
    struct _LOADER_PARAMETER_CI_EXTENSION *CodeIntegrityData;
    ULONG CodeIntegrityDataSize;
    struct _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;
    ULONG SoftRestartCount;
    LONG64 SoftRestartTime;
    PVOID HypercallCodeVa;
    PVOID HalVirtualAddress;
    ULONG64 HalNumberOfBytes;
    struct _LEAP_SECOND_DATA *LeapSecondData;
    ULONG MajorRelease;
    ULONG Reserved1;
    CHAR NtBuildLab[224];
    CHAR NtBuildLabEx[224];
    struct _LOADER_RESET_REASON ResetReason;
    ULONG MaxPciBusNumber;
    ULONG FeatureSettings;
};

typedef struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION {
    ULONG InitialHypervisorCrashdumpAreaPageCount;
    ULONG HypervisorCrashdumpAreaPageCount;
    ULONG64 InitialHypervisorCrashdumpAreaSpa;
    ULONG64 HypervisorCrashdumpAreaSpa;
    ULONG64 HypervisorLaunchStatus;
    ULONG64 HypervisorLaunchStatusArg1;
    ULONG64 HypervisorLaunchStatusArg2;
    ULONG64 HypervisorLaunchStatusArg3;
    ULONG64 HypervisorLaunchStatusArg4;
};

typedef struct _LOADER_PARTITION_INFORMATION_EX {
    ULONG PartitionStyle;
    ULONG PartitionNumber;
    ULONG Signature;
    struct _GUID DeviceId;
    ULONG Flags;
};

typedef struct _LOADER_PERFORMANCE_DATA {
    ULONG64 StartTime;
    ULONG64 EndTime;
    ULONG64 PreloadEndTime;
    ULONG64 TcbLoaderStartTime;
    ULONG64 LoadHypervisorTime;
    ULONG64 LaunchHypervisorTime;
    ULONG64 LoadVsmTime;
    ULONG64 LaunchVsmTime;
    ULONG64 LoadDriversTime;
};

typedef struct _LOADER_RESET_REASON {
    UCHAR Supplied;
     <unnamed-type-Basic>;
    union {
         <unnamed-type-Component>;
        struct {
            UCHAR Pch;
            UCHAR EmbeddedController;
            UCHAR Reserved[6];
        } Component;
        ULONG64 AsULONG64;
        UCHAR AsBytes[8];
    } Basic;
    ULONG AdditionalInfo[8];
};

typedef struct _LOAD_ASDATA_TABLE {
    PVOID Module;
    PWCHAR FilePath;
    ULONG64 Size;
    PVOID Handle;
    LONG RefCount;
    struct _ACTIVATION_CONTEXT *EntryPointActivationContext;
};

typedef struct _LOCK_STATE {
    USHORT LockState;
    UCHAR OldIrql;
};

typedef struct _LOCK_STATE_EX {
    UCHAR OldIrql;
    UCHAR LockState;
    UCHAR Flags;
};

typedef struct _LOOKASIDE_LIST_EX {
    struct _GENERAL_LOOKASIDE_POOL L;
};

typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
    ULONG OffsetToNext;
    ULONG Flags;
    union _LARGE_INTEGER Reserved;
    union _LARGE_INTEGER Cluster;
    WCHAR FileName[1];
};

typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
    ULONG Flags;
    ULONG NumberOfClusters;
    union _LARGE_INTEGER Cluster[1];
};

typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
    ULONG Offset;
    ULONG NumberOfMatches;
    ULONG BufferSizeRequired;
};

typedef struct _LPC_CLIENT_DIED_MSG {
    struct _PORT_MESSAGE PortMsg;
    union _LARGE_INTEGER CreateTime;
};

typedef struct _LPC_UNREGISTER_PROCESS_MSG {
    struct _PORT_MESSAGE PortMsg;
    PVOID UniqueProcessId;
};

typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
};

typedef struct _LUID_AND_ATTRIBUTES {
    struct _LUID Luid;
    ULONG Attributes;
};

typedef struct _LUNICODE_STRING {
    ULONG64 Length;
    ULONG64 MaximumLength;
    PWCHAR Buffer;
};

typedef struct _LUTF8_STRING {
    ULONG64 Length;
    ULONG64 MaximumLength;
    PUCHAR Buffer;
};

typedef struct _M128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _MACHINE_FRAME {
    ULONG64 Rip;
    USHORT SegCs;
    USHORT Fill1[3];
    ULONG EFlags;
    ULONG Fill2;
    ULONG64 Rsp;
    USHORT SegSs;
    USHORT Fill3[3];
};

typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    union _LARGE_INTEGER ReadTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _MANAGE_HOT_PATCH_LOAD_PATCH {
    ULONG Version;
    struct _UNICODE_STRING PatchPath;
     <unnamed-type-UserSid>;
    union {
        struct _SID Sid;
        UCHAR Buffer[68];
    } UserSid;
    struct _HOT_PATCH_IMAGE_INFO BaseInfo;
};

typedef struct _MANAGE_HOT_PATCH_QUERY_ACTIVE_PATCHES {
    ULONG Version;
    PVOID ProcessHandle;
    ULONG PatchCount;
    struct _UNICODE_STRING *PatchPathStrings;
    struct _HOT_PATCH_IMAGE_INFO *BaseInfos;
};

typedef struct _MANAGE_HOT_PATCH_QUERY_PATCHES {
    ULONG Version;
     <unnamed-type-UserSid>;
    union {
        struct _SID Sid;
        UCHAR Buffer[68];
    } UserSid;
    ULONG PatchCount;
    struct _UNICODE_STRING *PatchPathStrings;
    struct _HOT_PATCH_IMAGE_INFO *BaseInfos;
};

typedef struct _MANAGE_HOT_PATCH_UNLOAD_PATCH {
    ULONG Version;
    struct _HOT_PATCH_IMAGE_INFO BaseInfo;
     <unnamed-type-UserSid>;
    union {
        struct _SID Sid;
        UCHAR Buffer[68];
    } UserSid;
};

typedef struct _MANAGE_WRITES_TO_EXECUTABLE_MEMORY {
    ULONG Version : 8;
    ULONG ProcessEnableWriteExceptions : 1;
    ULONG ThreadAllowWrites : 1;
    ULONG Spare : 22;
};

typedef struct _MAP_REGISTER_ENTRY {
    PVOID MapRegister;
    UCHAR WriteToDevice;
};

typedef struct _MARKER_TYPE {
    UCHAR Pad[16];
};

typedef struct _MCA_DRIVER_INFO {
    PUCHAR ExceptionCallback;
    PVOID DpcCallback;
    PVOID DeviceContext;
};

typedef struct _MCA_EXCEPTION {
    ULONG VersionNumber;
    enum MCA_EXCEPTION_TYPE ExceptionType;
    union _LARGE_INTEGER TimeStamp;
    ULONG ProcessorNumber;
    ULONG Reserved1;
     <unnamed-type-u>;
    union {
         <unnamed-type-Mca>;
        struct {
            UCHAR BankNumber;
            UCHAR Reserved2[7];
            union _MCI_STATS Status;
            union _MCI_ADDR Address;
            ULONG64 Misc;
        } Mca;
         <unnamed-type-Mce>;
        struct {
            ULONG64 Address;
            ULONG64 Type;
        } Mce;
    } u;
    ULONG ExtCnt;
    ULONG Reserved3;
    ULONG64 ExtReg[24];
};

typedef struct _MDL {
    struct _MDL *Next;
    SHORT Size;
    SHORT MdlFlags;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
};

typedef struct _MEDIA_SPECIFIC_INFORMATION {
    ULONG NextEntryOffset;
    enum _NDIS_CLASS_ID ClassId;
    ULONG Size;
    UCHAR ClassInformation[1];
};

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR {
    struct _LIST_ENTRY ListEntry;
    enum _TYPE_OF_MEMORY MemoryType;
    ULONG64 BasePage;
    ULONG64 PageCount;
};

typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    ULONG AllocationProtect;
    ULONG64 RegionSize;
    ULONG State;
    ULONG Protect;
    ULONG Type;
};

typedef struct _MEMORY_BASIC_INFORMATION32 {
    ULONG BaseAddress;
    ULONG AllocationBase;
    ULONG AllocationProtect;
    ULONG RegionSize;
    ULONG State;
    ULONG Protect;
    ULONG Type;
};

typedef struct _MEMORY_BASIC_INFORMATION64 {
    ULONG64 BaseAddress;
    ULONG64 AllocationBase;
    ULONG AllocationProtect;
    ULONG __alignment1;
    ULONG64 RegionSize;
    ULONG State;
    ULONG Protect;
    ULONG Type;
    ULONG __alignment2;
};

typedef struct _MEMORY_COMBINE_INFORMATION {
    PVOID Handle;
    ULONG64 PagesCombined;
};

typedef struct _MEMORY_COMBINE_INFORMATION_EX {
    PVOID Handle;
    ULONG64 PagesCombined;
    ULONG Flags;
};

typedef struct _MEMORY_COMBINE_INFORMATION_EX2 {
    PVOID Handle;
    ULONG64 PagesCombined;
    ULONG Flags;
    PVOID ProcessHandle;
};

typedef struct _MEMORY_ENCLAVE_IMAGE_INFORMATION {
    struct _MEMORY_IMAGE_INFORMATION ImageInfo;
    UCHAR UniqueID[32];
    UCHAR AuthorID[32];
};

typedef struct _MEMORY_EXHAUSTION_INFORMATION {
    USHORT Version;
    USHORT Reserved;
    enum _MEMORY_EXHAUSTION_TYPE Type;
    ULONG64 Value;
};

typedef struct _MEMORY_FRAME_INFORMATION {
    ULONG64 UseDescription : 4;
    ULONG64 ListDescription : 3;
    ULONG64 Cold : 1;
    ULONG64 Pinned : 1;
    ULONG64 DontUse : 48;
    ULONG64 Priority : 3;
    ULONG64 Reserved : 4;
};

typedef struct _MEMORY_IMAGE_INFORMATION {
    PVOID ImageBase;
    ULONG64 SizeOfImage;
    ULONG ImageFlags;
    ULONG ImagePartialMap : 1;
    ULONG ImageNotExecutable : 1;
    ULONG ImageSigningLevel : 4;
    ULONG Reserved : 26;
};

typedef struct _MEMORY_PARTITION_CONFIGURATION_INFORMATION {
    ULONG Flags;
    ULONG NumaNode;
    ULONG Channel;
    ULONG NumberOfNumaNodes;
    ULONG64 ResidentAvailablePages;
    ULONG64 CommittedPages;
    ULONG64 CommitLimit;
    ULONG64 PeakCommitment;
    ULONG64 TotalNumberOfPages;
    ULONG64 AvailablePages;
    ULONG64 ZeroPages;
    ULONG64 FreePages;
    ULONG64 StandbyPages;
    ULONG64 StandbyPageCountByPriority[8];
    ULONG64 RepurposedPagesByPriority[8];
    ULONG64 MaximumCommitLimit;
    ULONG64 DonatedPagesToPartitions;
    ULONG PartitionId;
};

typedef struct _MEMORY_PARTITION_INITIAL_ADD_INFORMATION {
    ULONG Flags;
    ULONG NumberOfRanges;
    ULONG64 NumberOfPagesAdded;
    struct _MEMORY_PARTITION_PAGE_RANGE PartitionRanges[1];
};

typedef struct _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION {
     <unnamed-type-Flags>;
    union {
        ULONG CommitEvents : 1;
        ULONG Spare : 31;
        ULONG AllFlags;
    } Flags;
    ULONG HandleAttributes;
    ULONG DesiredAccess;
    PVOID LowCommitCondition;
    PVOID HighCommitCondition;
    PVOID MaximumCommitCondition;
};

typedef struct _MEMORY_PARTITION_PAGEFILE_INFORMATION {
    struct _UNICODE_STRING PageFileName;
    union _LARGE_INTEGER MinimumSize;
    union _LARGE_INTEGER MaximumSize;
    ULONG Flags;
};

typedef struct _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION {
    PVOID StopHandle;
    ULONG Flags;
    ULONG64 TotalNumberOfPages;
};

typedef struct _MEMORY_PARTITION_PAGE_RANGE {
    ULONG64 StartPage;
    ULONG64 NumberOfPages;
};

typedef struct _MEMORY_PARTITION_TRANSFER_INFORMATION {
    ULONG64 NumberOfPages;
    ULONG NumaNode;
    ULONG Flags;
};

typedef struct _MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    ULONG64 NumberOfBytes;
};

typedef struct _MEMORY_REGION_INFORMATION {
    PVOID AllocationBase;
    ULONG AllocationProtect;
    ULONG RegionType;
    ULONG Private : 1;
    ULONG MappedDataFile : 1;
    ULONG MappedImage : 1;
    ULONG MappedPageFile : 1;
    ULONG MappedPhysical : 1;
    ULONG DirectMapped : 1;
    ULONG SoftwareEnclave : 1;
    ULONG PageSize64K : 1;
    ULONG PlaceholderReservation : 1;
    ULONG Reserved : 23;
    ULONG64 RegionSize;
    ULONG64 CommitSize;
};

typedef struct _MEMORY_SCRUB_INFORMATION {
    PVOID Handle;
    ULONG64 PagesScrubbed;
};

typedef struct _MEMORY_SHARED_COMMIT_INFORMATION {
    ULONG64 CommitSize;
};

typedef struct _MEMORY_WORKING_SET_BLOCK {
    ULONG64 Protection : 5;
    ULONG64 ShareCount : 3;
    ULONG64 Shared : 1;
    ULONG64 Node : 3;
    ULONG64 VirtualPage : 52;
};

typedef struct _MEMORY_WORKING_SET_EX_BLOCK {
    ULONG64 Valid : 1;
    ULONG64 ShareCount : 3;
    ULONG64 Win32Protection : 11;
    ULONG64 Shared : 1;
    ULONG64 Node : 6;
    ULONG64 Locked : 1;
    ULONG64 LargePage : 1;
    ULONG64 Priority : 3;
    ULONG64 Reserved : 3;
    ULONG64 SharedOriginal : 1;
    ULONG64 Bad : 1;
    ULONG64 ReservedUlong : 32;
    struct {
        ULONG64 Valid : 1;
        ULONG64 Reserved0 : 14;
        ULONG64 Shared : 1;
        ULONG64 Reserved1 : 5;
        ULONG64 PageTable : 1;
        ULONG64 Location : 2;
        ULONG64 Priority : 3;
        ULONG64 ModifiedList : 1;
        ULONG64 Reserved2 : 2;
        ULONG64 SharedOriginal : 1;
        ULONG64 Bad : 1;
        ULONG64 ReservedUlong : 32;
    } Invalid;
};

typedef struct _MEMORY_WORKING_SET_EX_INFORMATION {
    PVOID VirtualAddress;
     <unnamed-type-u1>;
    union {
        struct _MEMORY_WORKING_SET_EX_BLOCK VirtualAttributes;
        ULONG64 Long;
    } u1;
};

typedef struct _MEMORY_WORKING_SET_INFORMATION {
    ULONG64 NumberOfEntries;
    struct _MEMORY_WORKING_SET_BLOCK WorkingSetInfo[1];
};

typedef struct _MEM_ADDRESS_REQUIREMENTS {
    PVOID LowestStartingAddress;
    PVOID HighestEndingAddress;
    ULONG64 Alignment;
};

typedef struct _MESSAGE_RESOURCE_BLOCK {
    ULONG LowId;
    ULONG HighId;
    ULONG OffsetToEntries;
};

typedef struct _MESSAGE_RESOURCE_DATA {
    ULONG NumberOfBlocks;
    struct _MESSAGE_RESOURCE_BLOCK Blocks[1];
};

typedef struct _MESSAGE_RESOURCE_ENTRY {
    USHORT Length;
    USHORT Flags;
    UCHAR Text[1];
};

typedef struct _METHOD {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InputBufferLength;
    ULONG OutputBufferLength;
    ULONG MethodId;
    ULONG BytesWritten;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _MIB_IF_ROW2 {
    union _NET_LUID_LH InterfaceLuid;
    ULONG InterfaceIndex;
    struct _GUID InterfaceGuid;
    WCHAR Alias[257];
    WCHAR Description[257];
    ULONG PhysicalAddressLength;
    UCHAR PhysicalAddress[32];
    UCHAR PermanentPhysicalAddress[32];
    ULONG Mtu;
    ULONG Type;
    enum TUNNEL_TYPE TunnelType;
    enum _NDIS_MEDIUM MediaType;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
     <unnamed-type-InterfaceAndOperStatusFlags>;
    struct {
        UCHAR HardwareInterface : 1;
        UCHAR FilterInterface : 1;
        UCHAR ConnectorPresent : 1;
        UCHAR NotAuthenticated : 1;
        UCHAR NotMediaConnected : 1;
        UCHAR Paused : 1;
        UCHAR LowPower : 1;
        UCHAR EndPointInterface : 1;
    } InterfaceAndOperStatusFlags;
    enum IF_OPER_STATUS OperStatus;
    enum _NET_IF_ADMIN_STATUS AdminStatus;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    struct _GUID NetworkGuid;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    ULONG64 TransmitLinkSpeed;
    ULONG64 ReceiveLinkSpeed;
    ULONG64 InOctets;
    ULONG64 InUcastPkts;
    ULONG64 InNUcastPkts;
    ULONG64 InDiscards;
    ULONG64 InErrors;
    ULONG64 InUnknownProtos;
    ULONG64 InUcastOctets;
    ULONG64 InMulticastOctets;
    ULONG64 InBroadcastOctets;
    ULONG64 OutOctets;
    ULONG64 OutUcastPkts;
    ULONG64 OutNUcastPkts;
    ULONG64 OutDiscards;
    ULONG64 OutErrors;
    ULONG64 OutUcastOctets;
    ULONG64 OutMulticastOctets;
    ULONG64 OutBroadcastOctets;
    ULONG64 OutQLen;
};

typedef struct _MLDV2_QUERY_HEADER {
    struct _ICMP_HEADER IcmpHeader;
    USHORT MaxRespCode;
    USHORT MaxRespCodeMantissaHi : 4;
    USHORT MaxRespCodeExponent : 3;
    USHORT MaxRespCodeType : 1;
    USHORT MaxRespCodeMantissaLo : 8;
    USHORT Reserved;
    struct in6_addr MulticastAddress;
    UCHAR QuerierRobustnessVariable : 3;
    UCHAR SuppressRouterSideProcessing : 1;
    UCHAR QueryReserved : 4;
    UCHAR QueriersQueryInterfaceCode;
    UCHAR QQCMantissa : 4;
    UCHAR QQCExponent : 3;
    UCHAR QQCType : 1;
    USHORT SourceCount;
};

typedef struct _MLDV2_REPORT_HEADER {
    struct _ICMP_HEADER IcmpHeader;
    USHORT Reserved;
    USHORT RecordCount;
};

typedef struct _MLDV2_REPORT_RECORD_HEADER {
    UCHAR Type;
    UCHAR AuxillaryDataLength;
    USHORT SourceCount;
    struct in6_addr MulticastAddress;
};

typedef struct _MLD_HEADER {
    struct _ICMP_HEADER IcmpHeader;
    USHORT MaxRespTime;
    USHORT Reserved;
    struct in6_addr MulticastAddress;
};

typedef struct _MMPFN_IDENTITY {
     <unnamed-type-u1>;
    union {
        struct _MEMORY_FRAME_INFORMATION e1;
        struct _FILEOFFSET_INFORMATION e2;
        struct _PAGEDIR_INFORMATION e3;
        struct _UNIQUE_PROCESS_INFORMATION e4;
    } u1;
    ULONG64 PageFrameIndex;
     <unnamed-type-u2>;
    union {
         <unnamed-type-e1>;
        struct {
            ULONG64 Image : 1;
            ULONG64 Mismatch : 1;
        } e1;
         <unnamed-type-e2>;
        struct {
            ULONG64 CombinedPage : 1;
        } e2;
        PVOID FileObject;
        PVOID UniqueFileObjectKey;
        PVOID ProtoPteAddress;
        PVOID VirtualAddress;
    } u2;
};

typedef struct _MM_COPY_ADDRESS {
    PVOID VirtualAddress;
    union _LARGE_INTEGER PhysicalAddress;
};

typedef struct _MM_ETW_PAGE_INFO {
    struct _MMPFN_IDENTITY PfnIdentity;
};

typedef struct _MM_ETW_PAGE_INFO_EX {
    struct _MM_ETW_PAGE_INFO PageInfo;
    union _MM_ETW_PAGE_EXTRA_INFO Info;
};

typedef struct _MM_ETW_WORKING_SET_PFN_RUNDOWN {
    ULONG64 ProcessId;
    ULONG64 EntryCount;
    struct _MM_ETW_PAGE_INFO_EX WorkingSetInfo[1];
};

typedef struct _MM_PHYSICAL_ADDRESS_LIST {
    union _LARGE_INTEGER PhysicalAddress;
    ULONG64 NumberOfBytes;
};

typedef struct _MOF_FIELD {
    ULONG64 DataPtr;
    ULONG Length;
    ULONG DataType;
};

typedef struct _MOVE_FILE_DATA32 {
    ULONG FileHandle;
    union _LARGE_INTEGER StartingVcn;
    union _LARGE_INTEGER StartingLcn;
    ULONG ClusterCount;
};

typedef struct _MUICCENTRY {
    ULONG lCultureNameOffset;
    ULONG ulCultureID;
    ULONG ulLanguageType;
    struct _MUICCENTRY *pNeutralCulture;
    struct _MUICCENTRY *lBaseLanguageIndices[4];
    LONG lParentLanguageIndices[4];
};

typedef struct _MUICCHEADER {
    ULONG ulMaxStringsSize;
    ULONG ulSizeStrings;
    ULONG ulMaxNumInstalledCultures;
    ULONG ulNumInstalledCultures;
    ULONG ulMaxNumUnverifiedCultures;
    ULONG ulNumUnverifiedCultures;
};

typedef struct _MUILANGCFGLIST {
    ULONG TotalSize;
    USHORT NumLanguages;
    USHORT MaxNumLanguages;
    struct _MUILANGCFGNODE *LanguageConfigs;
};

typedef struct _MUILANGCFGNODE {
    SHORT LangSpec;
    USHORT FallbackTypes;
    USHORT Reserved;
    SHORT FallbackSpecs[3];
};

typedef struct _MUILANGINFO {
    USHORT Flags;
    USHORT Reserved;
    USHORT LangId;
    SHORT LangNameIndex;
    USHORT FallbackTypes;
    SHORT NeutralLangSpec;
    SHORT FallbackSpecs[4];
    SHORT AlternateCodePage[4];
};

typedef struct _MUILANGLIST {
    ULONG TotalSize;
    USHORT NumLanguages;
    USHORT MaxNumLanguages;
    UCHAR bUseUseMachineConfigList;
    struct _MUIREGISTRYINFO *RegInfo;
    struct _MUILANGLISTNODE *Languages;
    ULONG64 ullMask;
    ULONG uConsoleFlag;
    WCHAR Checksum[10];
};

typedef struct _MUILANGLISTNODE {
    USHORT LanguageType;
    USHORT Reserved;
    SHORT LanguageSpec;
};

typedef struct _MUILANGUAGES {
    ULONG TotalSize;
    USHORT MaxNumLanguages;
    USHORT NumLanguages;
    USHORT NumInstalledLanguages;
    struct _MUILANGINFO *LangInfos;
};

typedef struct _MUIREGISTRYINFO {
    ULONG Owned;
    USHORT InstallLanguageFallback[4];
    ULONG Generation;
    ULONG ProcessGeneration;
    struct _MUILANGUAGES *Installed;
    struct _MUISTRINGPOOL *Strings;
    struct _MUILANGCFGLIST *MachineConfig;
    struct _MUILANGCFGLIST *UserConfig;
    struct _MUILANGLIST *MachinePreferred;
    struct _MUILANGLIST *UserPreferred;
    struct _MUILANGLIST *ProcessPreferred;
    struct _MUILANGLIST *MergedUser;
    struct _MUILANGLIST *MergedMachine;
    struct _MUILANGLIST *MergedFallback;
    struct _MUIREGISTRYINFO *PrevRegInfo;
    ULONG MUI_Locked;
    ULONG MUI_SE;
    ULONG MUI_NumberAllowed;
    PWCHAR MUI_AllowedLanguage;
    PWCHAR MUI_InstalledSKU;
    ULONG cbInstalledSKU;
    ULONG cbAllowedLanguage;
    PWCHAR MUI_DisallowedLanguage;
    ULONG cbDisallowedLanguage;
};

typedef struct _MUISTRINGPOOL {
    ULONG TotalSize;
    USHORT MaxNumStrings;
    USHORT NumStrings;
    USHORT MaxNumCharsInPool;
    USHORT NumCharsInPool;
    PSHORT Strings;
    PWCHAR Pool;
};

typedef struct _MULTI_TIME {
    union _LARGE_INTEGER Qpc;
    union _LARGE_INTEGER HostQpc;
    LONG64 SystemTime;
};

typedef struct _MUTANT_BASIC_INFORMATION {
    LONG CurrentCount;
    UCHAR OwnedByCaller;
    UCHAR AbandonedState;
};

typedef struct _MUTANT_OWNER_INFORMATION {
    struct _CLIENT_ID ClientId;
};

typedef struct _MdTimer {
    LONG m_Period;
    UCHAR m_IsExtTimer;
    PVOID m_TimerCallback;
    struct _KTIMER KernelTimer;
    struct _KDPC TimerDpc;
    PVOID m_ExTimerCallback;
    struct _EX_TIMER *m_KernelExTimer;
    PVOID m_TimerContext;
};

typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    union _LARGE_INTEGER DefaultTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _NBL_COUNTED_QUEUE {
    struct _NBL_QUEUE Queue;
    ULONG64 NblCount;
};

typedef struct _NBL_QUEUE {
    struct _NET_BUFFER_LIST *First;
    struct _NET_BUFFER_LIST **Last;
    VOID _NBL_QUEUE;
    VOID _NBL_QUEUE;
    struct _NBL_QUEUE *operator=;
    struct _NBL_QUEUE *operator=;
};

typedef struct _NDIS_802_11_AI_REQFI {
    USHORT Capabilities;
    USHORT ListenInterval;
    UCHAR CurrentAPAddress[6];
};

typedef struct _NDIS_802_11_AI_RESFI {
    USHORT Capabilities;
    USHORT StatusCode;
    USHORT AssociationId;
};

typedef struct _NDIS_802_11_ASSOCIATION_INFORMATION {
    ULONG Length;
    USHORT AvailableRequestFixedIEs;
    struct _NDIS_802_11_AI_REQFI RequestFixedIEs;
    ULONG RequestIELength;
    ULONG OffsetRequestIEs;
    USHORT AvailableResponseFixedIEs;
    struct _NDIS_802_11_AI_RESFI ResponseFixedIEs;
    ULONG ResponseIELength;
    ULONG OffsetResponseIEs;
};

typedef struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION {
    enum _NDIS_802_11_AUTHENTICATION_MODE AuthModeSupported;
    enum _NDIS_802_11_WEP_STATUS EncryptStatusSupported;
};

typedef struct _NDIS_802_11_AUTHENTICATION_EVENT {
    struct _NDIS_802_11_STATUS_INDICATION Status;
    struct _NDIS_802_11_AUTHENTICATION_REQUEST Request[1];
};

typedef struct _NDIS_802_11_AUTHENTICATION_REQUEST {
    ULONG Length;
    UCHAR Bssid[6];
    ULONG Flags;
};

typedef struct _NDIS_802_11_BSSID_LIST {
    ULONG NumberOfItems;
    struct _NDIS_WLAN_BSSID Bssid[1];
};

typedef struct _NDIS_802_11_BSSID_LIST_EX {
    ULONG NumberOfItems;
    struct _NDIS_WLAN_BSSID_EX Bssid[1];
};

typedef struct _NDIS_802_11_CAPABILITY {
    ULONG Length;
    ULONG Version;
    ULONG NoOfPMKIDs;
    ULONG NoOfAuthEncryptPairsSupported;
    struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION AuthenticationEncryptionSupported[1];
};

typedef struct _NDIS_802_11_CONFIGURATION {
    ULONG Length;
    ULONG BeaconPeriod;
    ULONG ATIMWindow;
    ULONG DSConfig;
    struct _NDIS_802_11_CONFIGURATION_FH FHConfig;
};

typedef struct _NDIS_802_11_CONFIGURATION_FH {
    ULONG Length;
    ULONG HopPattern;
    ULONG HopSet;
    ULONG DwellTime;
};

typedef struct _NDIS_802_11_FIXED_IEs {
    UCHAR Timestamp[8];
    USHORT BeaconInterval;
    USHORT Capabilities;
};

typedef struct _NDIS_802_11_KEY {
    ULONG Length;
    ULONG KeyIndex;
    ULONG KeyLength;
    UCHAR BSSID[6];
    ULONG64 KeyRSC;
    UCHAR KeyMaterial[1];
};

typedef struct _NDIS_802_11_NETWORK_TYPE_LIST {
    ULONG NumberOfItems;
    enum _NDIS_802_11_NETWORK_TYPE NetworkType[1];
};

typedef struct _NDIS_802_11_NON_BCAST_SSID_LIST {
    ULONG NumberOfItems;
    struct _NDIS_802_11_SSID Non_Bcast_Ssid[1];
};

typedef struct _NDIS_802_11_PMKID {
    ULONG Length;
    ULONG BSSIDInfoCount;
    struct _BSSID_INFO BSSIDInfo[1];
};

typedef struct _NDIS_802_11_PMKID_CANDIDATE_LIST {
    ULONG Version;
    ULONG NumCandidates;
    struct _PMKID_CANDIDATE CandidateList[1];
};

typedef struct _NDIS_802_11_REMOVE_KEY {
    ULONG Length;
    ULONG KeyIndex;
    UCHAR BSSID[6];
};

typedef struct _NDIS_802_11_SSID {
    ULONG SsidLength;
    UCHAR Ssid[32];
};

typedef struct _NDIS_802_11_STATISTICS {
    ULONG Length;
    union _LARGE_INTEGER TransmittedFragmentCount;
    union _LARGE_INTEGER MulticastTransmittedFrameCount;
    union _LARGE_INTEGER FailedCount;
    union _LARGE_INTEGER RetryCount;
    union _LARGE_INTEGER MultipleRetryCount;
    union _LARGE_INTEGER RTSSuccessCount;
    union _LARGE_INTEGER RTSFailureCount;
    union _LARGE_INTEGER ACKFailureCount;
    union _LARGE_INTEGER FrameDuplicateCount;
    union _LARGE_INTEGER ReceivedFragmentCount;
    union _LARGE_INTEGER MulticastReceivedFrameCount;
    union _LARGE_INTEGER FCSErrorCount;
    union _LARGE_INTEGER TKIPLocalMICFailures;
    union _LARGE_INTEGER TKIPICVErrorCount;
    union _LARGE_INTEGER TKIPCounterMeasuresInvoked;
    union _LARGE_INTEGER TKIPReplays;
    union _LARGE_INTEGER CCMPFormatErrors;
    union _LARGE_INTEGER CCMPReplays;
    union _LARGE_INTEGER CCMPDecryptErrors;
    union _LARGE_INTEGER FourWayHandshakeFailures;
    union _LARGE_INTEGER WEPUndecryptableCount;
    union _LARGE_INTEGER WEPICVErrorCount;
    union _LARGE_INTEGER DecryptSuccessCount;
    union _LARGE_INTEGER DecryptFailureCount;
};

typedef struct _NDIS_802_11_STATUS_INDICATION {
    enum _NDIS_802_11_STATUS_TYPE StatusType;
};

typedef struct _NDIS_802_11_TEST {
    ULONG Length;
    ULONG Type;
    struct _NDIS_802_11_AUTHENTICATION_EVENT AuthenticationEvent;
    LONG RssiTrigger;
};

typedef struct _NDIS_802_11_VARIABLE_IEs {
    UCHAR ElementID;
    UCHAR Length;
    UCHAR data[1];
};

typedef struct _NDIS_802_11_WEP {
    ULONG Length;
    ULONG KeyIndex;
    ULONG KeyLength;
    UCHAR KeyMaterial[1];
};

typedef struct _NDIS_AF_LIST {
};

typedef struct _NDIS_BIND_FAILED_NOTIFICATION {
    struct _NDIS_OBJECT_HEADER Header;
    union _NET_LUID_LH MiniportNetLuid;
};

typedef struct _NDIS_BIND_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _UNICODE_STRING *ProtocolSection;
    struct _UNICODE_STRING *AdapterName;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    enum _NDIS_MEDIUM MediaType;
    ULONG MtuSize;
    ULONG64 MaxXmitLinkSpeed;
    ULONG64 XmitLinkSpeed;
    ULONG64 MaxRcvLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG LookaheadSize;
    struct _NDIS_PNP_CAPABILITIES *PowerManagementCapabilities;
    ULONG SupportedPacketFilters;
    ULONG MaxMulticastListSize;
    USHORT MacAddressLength;
    UCHAR CurrentMacAddress[32];
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES *RcvScaleCapabilities;
    union _NET_LUID_LH BoundIfNetluid;
    ULONG BoundIfIndex;
    union _NET_LUID_LH LowestIfNetluid;
    ULONG LowestIfIndex;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    USHORT IfType;
    UCHAR IfConnectorPresent;
    struct _NDIS_PORT *ActivePorts;
    ULONG DataBackFillSize;
    ULONG ContextBackFillSize;
    ULONG MacOptions;
    ULONG CompartmentId;
    struct _NDIS_OFFLOAD *DefaultOffloadConfiguration;
    struct _NDIS_TCP_CONNECTION_OFFLOAD *TcpConnectionOffloadCapabilities;
    struct _UNICODE_STRING *BoundAdapterName;
    struct _NDIS_HD_SPLIT_CURRENT_CONFIG *HDSplitCurrentConfig;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *ReceiveFilterCapabilities;
    struct _NDIS_PM_CAPABILITIES *PowerManagementCapabilitiesEx;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *NicSwitchCapabilities;
    UCHAR NDKEnabled;
    struct _NDIS_NDK_CAPABILITIES *NDKCapabilities;
    struct _NDIS_SRIOV_CAPABILITIES *SriovCapabilities;
    struct _NDIS_NIC_SWITCH_INFO_ARRAY *NicSwitchArray;
};

typedef struct _NDIS_CALL_MANAGER_CHARACTERISTICS {
};

typedef struct _NDIS_CONFIGURATION_OBJECT {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID NdisHandle;
    ULONG Flags;
};

typedef struct _NDIS_CONFIGURATION_PARAMETER {
    enum _NDIS_PARAMETER_TYPE ParameterType;
     <unnamed-type-ParameterData>;
    union {
        ULONG IntegerData;
        struct _UNICODE_STRING StringData;
        struct BINARY_DATA BinaryData;
    } ParameterData;
};

typedef struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Reserved;
    PLONG CmCreateVcHandler;
    PLONG CmDeleteVcHandler;
    PLONG CmOpenAfHandler;
    PLONG CmCloseAfHandler;
    PLONG CmRegisterSapHandler;
    PLONG CmDeregisterSapHandler;
    PLONG CmMakeCallHandler;
    PLONG CmCloseCallHandler;
    PVOID CmIncomingCallCompleteHandler;
    PLONG CmAddPartyHandler;
    PLONG CmDropPartyHandler;
    PVOID CmActivateVcCompleteHandler;
    PVOID CmDeactivateVcCompleteHandler;
    PLONG CmModifyCallQoSHandler;
    PLONG CmOidRequestHandler;
    PVOID CmOidRequestCompleteHandler;
    PVOID CmNotifyCloseAfCompleteHandler;
};

typedef struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Reserved;
    PLONG ClCreateVcHandler;
    PLONG ClDeleteVcHandler;
    PLONG ClOidRequestHandler;
    PVOID ClOidRequestCompleteHandler;
    PVOID ClOpenAfCompleteHandlerEx;
    PVOID ClCloseAfCompleteHandler;
    PVOID ClRegisterSapCompleteHandler;
    PVOID ClDeregisterSapCompleteHandler;
    PVOID ClMakeCallCompleteHandler;
    PVOID ClModifyCallQoSCompleteHandler;
    PVOID ClCloseCallCompleteHandler;
    PVOID ClAddPartyCompleteHandler;
    PVOID ClDropPartyCompleteHandler;
    PLONG ClIncomingCallHandler;
    PVOID ClIncomingCallQoSChangeHandler;
    PVOID ClIncomingCloseCallHandler;
    PVOID ClIncomingDropPartyHandler;
    PVOID ClCallConnectedHandler;
    PLONG ClNotifyCloseAfHandler;
};

typedef struct _NDIS_CO_LINK_SPEED {
    ULONG Outbound;
    ULONG Inbound;
};

typedef struct _NDIS_DEVICE_OBJECT_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _UNICODE_STRING *DeviceName;
    struct _UNICODE_STRING *SymbolicName;
    PLONG *MajorFunctions;
    ULONG ExtensionSize;
    struct _UNICODE_STRING *DefaultSDDLString;
    struct _GUID *DeviceClassGuid;
};

typedef struct _NDIS_DMA_BLOCK {
    PVOID MapRegisterBase;
    struct _KEVENT AllocationEvent;
    PVOID SystemAdapterObject;
    PVOID Miniport;
    UCHAR InProgress;
    VOID _NDIS_DMA_BLOCK;
    VOID _NDIS_DMA_BLOCK;
    struct _NDIS_DMA_BLOCK *operator=;
    struct _NDIS_DMA_BLOCK *operator=;
};

typedef struct _NDIS_DMA_DESCRIPTION {
    UCHAR DemandMode;
    UCHAR AutoInitialize;
    UCHAR DmaChannelSpecified;
    enum _DMA_WIDTH DmaWidth;
    enum _DMA_SPEED DmaSpeed;
    ULONG DmaPort;
    ULONG DmaChannel;
};

typedef struct _NDIS_DRIVER_OPTIONAL_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
};

typedef struct _NDIS_DRIVER_WRAPPER_HANDLE {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID NdisWrapperHandle;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD {
    ULONG TransmitChecksumOffloadSupported : 4;
    ULONG ReceiveChecksumOffloadSupported : 4;
    ULONG LsoV2Supported : 4;
    ULONG RssSupported : 4;
    ULONG VmqSupported : 4;
    ULONG MaxHeaderSizeSupported;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 {
    ULONG TransmitChecksumOffloadSupported : 4;
    ULONG ReceiveChecksumOffloadSupported : 4;
    ULONG LsoV2Supported : 4;
    ULONG RssSupported : 4;
    ULONG VmqSupported : 4;
    ULONG Reserved : 12;
    ULONG MaxHeaderSizeSupported;
     _ENCAPSULATION_PROTOCOL_INFO;
    union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO EncapsulationProtocolInfo;
    ULONG Reserved1;
    ULONG Reserved2;
};

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO {
    USHORT VxlanUDPPortNumber;
    USHORT VxlanUDPPortNumberConfigurable : 1;
};

typedef struct _NDIS_ENUM_FILTERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG NumberOfFilters;
    ULONG OffsetFirstFilter;
    struct _NDIS_FILTER_INTERFACE Filter[1];
};

typedef struct _NDIS_EVENT {
    struct _KEVENT Event;
    VOID _NDIS_EVENT;
    VOID _NDIS_EVENT;
    struct _NDIS_EVENT *operator=;
    struct _NDIS_EVENT *operator=;
};

typedef struct _NDIS_FILTER_ATTACH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    struct _UNICODE_STRING *FilterModuleGuidName;
    ULONG BaseMiniportIfIndex;
    struct _UNICODE_STRING *BaseMiniportInstanceName;
    struct _UNICODE_STRING *BaseMiniportName;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_MEDIUM MiniportMediaType;
    enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
    PVOID MiniportMediaSpecificAttributes;
    struct _NDIS_OFFLOAD *DefaultOffloadConfiguration;
    USHORT MacAddressLength;
    UCHAR CurrentMacAddress[32];
    union _NET_LUID_LH BaseMiniportNetLuid;
    ULONG LowerIfIndex;
    union _NET_LUID_LH LowerIfNetLuid;
    ULONG Flags;
    struct _NDIS_HD_SPLIT_CURRENT_CONFIG *HDSplitCurrentConfig;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *ReceiveFilterCapabilities;
    struct _DEVICE_OBJECT *MiniportPhysicalDeviceObject;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *NicSwitchCapabilities;
    UCHAR BaseMiniportIfConnectorPresent;
    struct _NDIS_SRIOV_CAPABILITIES *SriovCapabilities;
    struct _NDIS_NIC_SWITCH_INFO_ARRAY *NicSwitchArray;
};

typedef struct _NDIS_FILTER_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
};

typedef struct _NDIS_FILTER_DRIVER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Flags;
    struct _UNICODE_STRING FriendlyName;
    struct _UNICODE_STRING UniqueName;
    struct _UNICODE_STRING ServiceName;
    PLONG SetOptionsHandler;
    PLONG SetFilterModuleOptionsHandler;
    PLONG AttachHandler;
    PVOID DetachHandler;
    PLONG RestartHandler;
    PLONG PauseHandler;
    PVOID SendNetBufferListsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID CancelSendNetBufferListsHandler;
    PVOID ReceiveNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
    PLONG OidRequestHandler;
    PVOID OidRequestCompleteHandler;
    PVOID CancelOidRequestHandler;
    PVOID DevicePnPEventNotifyHandler;
    PLONG NetPnPEventHandler;
    PVOID StatusHandler;
    PLONG DirectOidRequestHandler;
    PVOID DirectOidRequestCompleteHandler;
    PVOID CancelDirectOidRequestHandler;
    PLONG SynchronousOidRequestHandler;
    PVOID SynchronousOidRequestCompleteHandler;
};

typedef struct _NDIS_FILTER_INTERFACE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG FilterType;
    ULONG FilterRunType;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    struct _UNICODE_STRING FilterClass;
    struct _UNICODE_STRING FilterInstanceName;
};

typedef struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID SendNetBufferListsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID CancelSendNetBufferListsHandler;
    PVOID ReceiveNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
};

typedef struct _NDIS_FILTER_PAUSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PauseReason;
};

typedef struct _NDIS_FILTER_RESTART_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_MEDIUM MiniportMediaType;
    enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
    struct _NDIS_RESTART_ATTRIBUTES *RestartAttributes;
    ULONG LowerIfIndex;
    union _NET_LUID_LH LowerIfNetLuid;
    ULONG Flags;
};

typedef struct _NDIS_GENERIC_OBJECT {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID Caller;
    PVOID CallersCaller;
    struct _DRIVER_OBJECT *DriverObject;
};

typedef struct _NDIS_GFP_ETHERNET_HEADER_FIELDS {
    UCHAR DestinationMacAddress[6];
    UCHAR SourceMacAddress[6];
    USHORT EthType;
    USHORT CustomerVlanId;
    USHORT ProviderVlanId;
    UCHAR Priority;
};

typedef struct _NDIS_GFP_EXACT_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG NumSupportedEntries;
    ULONG HeaderGroupExactMatchProfileArrayOffset;
    ULONG HeaderGroupExactMatchProfileArrayNumElements;
    ULONG HeaderGroupExactMatchProfileArrayElementSize;
};

typedef struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
    struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
     <unnamed-type-IPAddress>;
    union {
         <unnamed-type-IPv4Address>;
        struct {
            struct in_addr SourceIPAddress;
            struct in_addr DestinationIPAddress;
        } IPv4Address;
         <unnamed-type-IPv6Address>;
        struct {
            struct in6_addr SourceIPAddress;
            struct in6_addr DestinationIPAddress;
        } IPv6Address;
    } IPAddress;
    UCHAR Dscp;
    UCHAR IPProtocol;
     <unnamed-type-TransportOrEncapsulation>;
    union {
         <unnamed-type-Udp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
        } Udp;
         <unnamed-type-Tcp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
            UCHAR TcpFlags;
        } Tcp;
         <unnamed-type-Icmp>;
        struct {
            UCHAR Type;
            UCHAR Code;
        } Icmp;
         <unnamed-type-Encapsulation>;
        struct {
            ULONG TenantId;
            USHORT GreProtocol;
        } Encapsulation;
    } TransportOrEncapsulation;
};

typedef struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
};

typedef struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileId;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
    struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
    union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPSrcAndDestAddress;
    UCHAR Dscp;
    UCHAR IPProtocol;
     <unnamed-type-TransportOrEncapsulation>;
    union {
         <unnamed-type-UdpHeader>;
        struct {
            struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH UdpSrcAndDestPort;
        } UdpHeader;
         <unnamed-type-TcpHeader>;
        struct {
            struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH TcpSrcAndDestPort;
            UCHAR TcpFlags;
        } TcpHeader;
         <unnamed-type-IcmpHeader>;
        struct {
            UCHAR Type;
            UCHAR Code;
        } IcmpHeader;
         <unnamed-type-Encapsulation>;
        struct {
            ULONG TenantId;
            USHORT GreProtocol;
        } Encapsulation;
    } TransportOrEncapsulation;
};

typedef struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HeadersPresent;
    ULONG64 MatchFields;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourceIPv4AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationIPv4AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourceIPv6AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationIPv6AddressMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourcePortMatchType;
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationPortMatchType;
    UCHAR TcpFlags;
};

typedef struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH {
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
    struct in_addr IPAddress;
     <unnamed-type-MatchValue>;
    union {
        ULONG PrefixLength;
        ULONG RangeSize;
    } MatchValue;
};

typedef struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH SourceIPv4Address;
    struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH DestinationIPv4Address;
};

typedef struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH {
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
    struct in6_addr IPAddress;
     <unnamed-type-MatchValue>;
    union {
        ULONG PrefixLength;
        ULONG RangeSize;
    } MatchValue;
};

typedef struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH SourceIPv6Address;
    struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH DestinationIPv6Address;
};

typedef struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH {
    enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
    USHORT Port;
    USHORT Range;
};

typedef struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH {
    struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH SourcePort;
    struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH DestinationPort;
};

typedef struct _NDIS_GFP_WILDCARD_MATCH_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG NumSupportedEntries;
    ULONG HeaderGroupWildcardMatchProfileArrayOffset;
    ULONG HeaderGroupWildcardMatchProfileArrayNumElements;
    ULONG HeaderGroupWildcardMatchProfileArrayElementSize;
};

typedef struct _NDIS_GFT_BYTE_COUNTER_VALUE {
    ULONG64 Bytes;
    union _LARGE_INTEGER LastUpdate;
};

typedef struct _NDIS_GFT_COUNTER_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG CounterIdStart;
    ULONG NumCounters;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG UpdatePeriod;
};

typedef struct _NDIS_GFT_COUNTER_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG CounterInfoArrayOffset;
    ULONG CounterInfoArrayNumElements;
    ULONG CounterInfoArrayElementSize;
};

typedef struct _NDIS_GFT_COUNTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG CounterIdStart;
    ULONG NumCounters;
    ULONG UpdatePeriod;
     <unnamed-type-CounterValuesBufferStart>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE *PacketCounters;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE *ByteCounters;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE *PacketAndByteCounters;
    } CounterValuesBufferStart;
};

typedef struct _NDIS_GFT_COUNTER_VALUE {
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
     <unnamed-type-CounterValue>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE Packets;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE Bytes;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE PacketsAndBytes;
    } CounterValue;
};

typedef struct _NDIS_GFT_COUNTER_VALUE_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
     <unnamed-type-StartId>;
    union {
        ULONG64 FlowEntryId;
        ULONG CounterId;
    } StartId;
    ULONG NumCounters;
    ULONG CounterValueArrayOffset;
    ULONG CounterValueArrayNumElements;
    ULONG CounterValueArrayElementSize;
};

typedef struct _NDIS_GFT_CUSTOM_ACTION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileId;
    ULONG Type;
    ULONG Length;
    ULONG64 Alignment;
    UCHAR ActionData[1];
};

typedef struct _NDIS_GFT_CUSTOM_ACTION_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG Type;
    ULONG Length;
    ULONG64 Alignment;
    UCHAR ActionProfileData[1];
};

typedef struct _NDIS_GFT_DELETE_PROFILE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileId;
};

typedef struct _NDIS_GFT_DELETE_TABLE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
};

typedef struct _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG MatchProfileId;
    LONG MatchRequestStatus;
    LONG ActionRequestStatus;
    ULONG CounterFlags;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG UpdatePeriod;
     <unnamed-type-CounterValueBuffer>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE *PacketCounterAddress;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE *ByteCounterAddress;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE *PacketAndByteCounterAddress;
    } CounterValueBuffer;
    ULONG HeaderTranspositionProfileId;
    ULONG RedirectionVPortId;
    ULONG TtlIsOneRedirectionVPortId;
    ULONG NumCounterObjects;
    ULONG CounterIdArray[8];
    enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT CacheHint;
    ULONG64 ClientFlowEntryId;
    ULONG64 ProviderFlowEntryId;
    enum _NDIS_GFT_FLOW_ENTRY_STATE FlowEntryState;
    ULONG HeaderGroupExactMatchArrayOffset;
    ULONG HeaderGroupExactMatchArrayNumElements;
    ULONG HeaderGroupExactMatchArrayElementSize;
    ULONG HeaderGroupTranspositionArrayOffset;
    ULONG HeaderGroupTranspositionArrayNumElements;
    ULONG HeaderGroupTranspositionArrayElementSize;
    ULONG CustomActionOffset;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_FLOW_ENTRY_TYPE EntryType;
    ULONG FlowEntryArrayOffset;
    ULONG FlowEntryArrayNumElements;
    ULONG FlowEntryArrayElementSize;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER {
    ULONG64 FlowEntryId;
    struct _NDIS_GFT_COUNTER_VALUE CounterValue;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_ID_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
     <unnamed-type-IdArray>;
    union {
         <unnamed-type-FlowEntryIdArray>;
        struct {
            ULONG ProviderFlowEntryIdArrayOffset;
            ULONG ProviderFlowEntryIdArrayNumElements;
            ULONG ProviderFlowEntryIdArrayElementSize;
        } FlowEntryIdArray;
         <unnamed-type-FlowEntryIdAndCounterArray>;
        struct {
            ULONG ProviderFlowEntryIdAndCounterArrayOffset;
            ULONG ProviderFlowEntryIdAndCounterArrayNumElements;
            ULONG ProviderFlowEntryIdAndCounterArrayElementSize;
        } FlowEntryIdAndCounterArray;
    } IdArray;
};

typedef struct _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG64 ProviderFlowEntryIdStart;
    ULONG FlowEntryIdCount;
    ULONG FlowEntryInfoArrayOffset;
    ULONG FlowEntryInfoArrayNumElements;
    ULONG FlowEntryInfoArrayElementSize;
};

typedef struct _NDIS_GFT_FREE_COUNTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG CounterIdStart;
    ULONG NumCounters;
    ULONG LastCounterValueArrayOffset;
    ULONG LastCounterValueArrayNumElements;
    ULONG LastCounterValueArrayElementSize;
};

typedef struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION Action;
    ULONG HeadersPresent;
    ULONG64 HeaderFields;
    struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
     <unnamed-type-IPAddress>;
    union {
         <unnamed-type-IPv4Address>;
        struct {
            struct in_addr SourceIPAddress;
            struct in_addr DestinationIPAddress;
        } IPv4Address;
         <unnamed-type-IPv6Address>;
        struct {
            struct in6_addr SourceIPAddress;
            struct in6_addr DestinationIPAddress;
        } IPv6Address;
    } IPAddress;
    UCHAR Ttl;
    UCHAR Dscp;
    UCHAR IPProtocol;
     <unnamed-type-TransportOrEncapsulation>;
    union {
         <unnamed-type-Udp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
        } Udp;
         <unnamed-type-Tcp>;
        struct {
            USHORT SourcePort;
            USHORT DestinationPort;
        } Tcp;
         <unnamed-type-Encapsulation>;
        struct {
            ULONG TenantId;
            USHORT GreProtocol;
            USHORT Entropy;
        } Encapsulation;
    } TransportOrEncapsulation;
};

typedef struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION Action;
    ULONG HeadersPresent;
    ULONG HeaderFields;
};

typedef struct _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG HeaderGroupTranspositionProfileArrayOffset;
    ULONG HeaderGroupTranspositionProfileArrayNumElements;
    ULONG HeaderGroupTranspositionProfileArrayElementSize;
    ULONG CustomActionProfileOffset;
};

typedef struct _NDIS_GFT_OFFLOAD_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG CounterCapabilities;
    ULONG SupportedTableTypes;
    ULONG SupportedEncapsulationTypes;
    ULONG SupportedIngressExactMatchTableActions;
    ULONG SupportedEgressExactMatchTableActions;
    ULONG SoftwareSupportedIngressExactMatchTableActions;
    ULONG SoftwareSupportedEgressExactMatchTableActions;
    ULONG SupportedIngressWildcardMatchTableActions;
    ULONG SupportedEgressWildcardMatchTableActions;
    ULONG SoftwareSupportedIngressWildcardMatchTableActions;
    ULONG SoftwareSupportedEgressWildcardMatchTableActions;
    ULONG NumPacketCounterObjects;
    ULONG NumByteCounterObjects;
    ULONG NumPacketAndByteCounterObjects;
    ULONG NumCounterObjectsPerIngressExactMatchFlowEntry;
    ULONG NumCounterObjectsPerEgressExactMatchFlowEntry;
    ULONG NumCounterObjectsPerIngressWildcardMatchFlowEntry;
    ULONG NumCounterObjectsPerEgressWildcardMatchFlowEntry;
};

typedef struct _NDIS_GFT_OFFLOAD_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ExceptionVPortId;
    ULONG CopyLookaheadLength;
    ULONG SampleLookaheadLength;
};

typedef struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE {
    ULONG64 Packets;
    ULONG64 Bytes;
    union _LARGE_INTEGER LastUpdate;
};

typedef struct _NDIS_GFT_PACKET_COUNTER_VALUE {
    ULONG64 Packets;
    union _LARGE_INTEGER LastUpdate;
};

typedef struct _NDIS_GFT_PROFILE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_GFT_PROFILE_TYPE ProfileType;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG ProfileId;
    ULONG NumSupportedFlowEntries;
    ULONG NumCurrentFlowEntries;
    ULONG HeaderGroupArrayOffset;
    ULONG HeaderGroupArrayNumElements;
    ULONG HeaderGroupArrayElementSize;
};

typedef struct _NDIS_GFT_PROFILE_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG ProfileInfoArrayOffset;
    ULONG ProfileInfoArrayNumElements;
    ULONG ProfileInfoArrayElementSize;
};

typedef struct _NDIS_GFT_STATISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG64 ProviderFlowEntryId;
    ULONG64 Packets;
    ULONG64 Bytes;
    ULONG64 L1CacheHits;
    ULONG64 L2CacheHits;
    ULONG64 L3CacheHits;
    ULONG64 L1CacheMisses;
    ULONG64 L2CacheMisses;
    ULONG64 L3CacheMisses;
};

typedef struct _NDIS_GFT_TABLE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG NextTableId;
    ULONG NumFlowEntries;
};

typedef struct _NDIS_GFT_TABLE_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableArrayOffset;
    ULONG TableArrayNumElements;
    ULONG TableArrayElementSize;
};

typedef struct _NDIS_GFT_TABLE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    enum _NDIS_GFP_TABLE_TYPE TableType;
    ULONG NextTableId;
};

typedef struct _NDIS_GFT_VPORT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG VPortId;
    ULONG ExceptionVPortId;
    ULONG SamplingRate;
    ULONG64 DscpMask;
    ULONG NumDscpMaskCounterObjects;
    ULONG DscpMaskCounterIdArray[64];
    ULONG64 PriorityMask;
    ULONG NumPriorityMaskCounterObjects;
    ULONG PriorityMaskCounterIdArray[8];
    USHORT VxLanSrcPortBase;
    USHORT VxLanSrcPortRange;
    ULONG DscpFlags;
};

typedef struct _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TableId;
    ULONG VPortId;
    ULONG MatchProfileId;
    LONG MatchRequestStatus;
    LONG ActionRequestStatus;
    ULONG CounterFlags;
    enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
    enum _NDIS_GFT_COUNTER_TYPE CounterType;
    ULONG UpdatePeriod;
     <unnamed-type-CounterValueBuffer>;
    union {
        struct _NDIS_GFT_PACKET_COUNTER_VALUE *PacketCounterAddress;
        struct _NDIS_GFT_BYTE_COUNTER_VALUE *ByteCounterAddress;
        struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE *PacketAndByteCounterAddress;
    } CounterValueBuffer;
    ULONG Priority;
    enum _NDIS_GFT_WILDCARD_ACTION Action;
    ULONG RedirectionVPortId;
    ULONG TtlIsOneRedirectionVPortId;
    ULONG NumCounterObjects;
    ULONG CounterIdArray[8];
    enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT CacheHint;
    ULONG64 ClientFlowEntryId;
    ULONG64 ProviderFlowEntryId;
    enum _NDIS_GFT_FLOW_ENTRY_STATE FlowState;
    ULONG HeaderGroupWildcardMatchArrayOffset;
    ULONG HeaderGroupWildcardMatchArrayNumElements;
    ULONG HeaderGroupWildcardMatchArrayElementSize;
    ULONG CustomActionOffset;
};

typedef struct _NDIS_GUID {
    struct _GUID Guid;
    ULONG Oid;
    LONG Status;
    ULONG Size;
    ULONG Flags;
};

typedef struct _NDIS_HARDWARE_CROSSTIMESTAMP {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG64 SystemTimestamp1;
    ULONG64 HardwareClockTimestamp;
    ULONG64 SystemTimestamp2;
};

typedef struct _NDIS_HD_SPLIT_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG HardwareCapabilities;
    ULONG CurrentCapabilities;
    ULONG HDSplitFlags;
    ULONG BackfillSize;
    ULONG MaxHeaderSize;
};

typedef struct _NDIS_HD_SPLIT_CURRENT_CONFIG {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG HardwareCapabilities;
    ULONG CurrentCapabilities;
    ULONG HDSplitFlags;
    ULONG HDSplitCombineFlags;
    ULONG BackfillSize;
    ULONG MaxHeaderSize;
};

typedef struct _NDIS_HD_SPLIT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG HDSplitCombineFlags;
};

typedef struct _NDIS_HYPERVISOR_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_HYPERVISOR_PARTITION_TYPE PartitionType;
};

typedef struct _NDIS_IF_PROVIDER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PLONG QueryObjectHandler;
    PLONG SetObjectHandler;
    PVOID Reserved1;
    PVOID Reserved2;
};

typedef struct _NDIS_INTERFACE_INFORMATION {
    enum _NET_IF_OPER_STATUS ifOperStatus;
    ULONG ifOperStatusFlags;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG ifMtu;
    UCHAR ifPromiscuousMode;
    UCHAR ifDeviceWakeUpEnable;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    ULONG64 ifLastChange;
    ULONG64 ifCounterDiscontinuityTime;
    ULONG64 ifInUnknownProtos;
    ULONG64 ifInDiscards;
    ULONG64 ifInErrors;
    ULONG64 ifHCInOctets;
    ULONG64 ifHCInUcastPkts;
    ULONG64 ifHCInMulticastPkts;
    ULONG64 ifHCInBroadcastPkts;
    ULONG64 ifHCOutOctets;
    ULONG64 ifHCOutUcastPkts;
    ULONG64 ifHCOutMulticastPkts;
    ULONG64 ifHCOutBroadcastPkts;
    ULONG64 ifOutErrors;
    ULONG64 ifOutDiscards;
    ULONG64 ifHCInUcastOctets;
    ULONG64 ifHCInMulticastOctets;
    ULONG64 ifHCInBroadcastOctets;
    ULONG64 ifHCOutUcastOctets;
    ULONG64 ifHCOutMulticastOctets;
    ULONG64 ifHCOutBroadcastOctets;
    ULONG CompartmentId;
    ULONG SupportedStatistics;
};

typedef struct _NDIS_INTERRUPT_MODERATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_INTERRUPT_MODERATION InterruptModeration;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V1 {
     <unnamed-type-Supported>;
    struct {
        ULONG Encapsulation;
        ULONG AhEspCombined;
        ULONG TransportTunnelCombined;
        ULONG IPv4Options;
        ULONG Flags;
    } Supported;
     <unnamed-type-IPv4AH>;
    struct {
        ULONG Md5 : 2;
        ULONG Sha_1 : 2;
        ULONG Transport : 2;
        ULONG Tunnel : 2;
        ULONG Send : 2;
        ULONG Receive : 2;
    } IPv4AH;
     <unnamed-type-IPv4ESP>;
    struct {
        ULONG Des : 2;
        ULONG Reserved : 2;
        ULONG TripleDes : 2;
        ULONG NullEsp : 2;
        ULONG Transport : 2;
        ULONG Tunnel : 2;
        ULONG Send : 2;
        ULONG Receive : 2;
    } IPv4ESP;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO {
    struct {
        PVOID OffloadHandle;
    } Transmit;
    struct {
        USHORT SaDeleteReq : 1;
        USHORT CryptoDone : 1;
        USHORT NextCryptoDone : 1;
        USHORT Pad : 13;
        USHORT CryptoStatus;
    } Receive;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2 {
    ULONG Encapsulation;
    UCHAR IPv6Supported;
    UCHAR IPv4Options;
    UCHAR IPv6NonIPsecExtensionHeaders;
    UCHAR Ah;
    UCHAR Esp;
    UCHAR AhEspCombined;
    UCHAR Transport;
    UCHAR Tunnel;
    UCHAR TransportTunnelCombined;
    UCHAR LsoSupported;
    UCHAR ExtendedSequenceNumbers;
    ULONG UdpEsp;
    ULONG AuthenticationAlgorithms;
    ULONG EncryptionAlgorithms;
    ULONG SaOffloadCapacity;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO {
    struct {
        ULONG NextHeader : 8;
        ULONG PadLength : 8;
        ULONG AhHeaderOffset : 8;
        ULONG EspHeaderOffset : 8;
    } Transmit;
    struct {
        ULONG NextHeader : 8;
        ULONG PadLength : 8;
        ULONG HeaderInfoSet : 1;
    } Receive;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO {
    struct {
        PVOID OffloadHandle;
    } Transmit;
    struct {
        ULONG SaDeleteReq : 1;
        ULONG CryptoDone : 1;
        ULONG NextCryptoDone : 1;
        ULONG Reserved : 13;
        ULONG CryptoStatus : 16;
    } Receive;
};

typedef struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO {
     <unnamed-type-Transmit>;
    struct {
        PVOID TunnelHandle;
    } Transmit;
};

typedef struct _NDIS_IP_OPER_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _NDIS_IP_OPER_STATUS IpOperationalStatus;
};

typedef struct _NDIS_IP_OPER_STATUS {
    ULONG AddressFamily;
    enum _NET_IF_OPER_STATUS OperationalStatus;
    ULONG OperationalStatusFlags;
};

typedef struct _NDIS_IP_OPER_STATUS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG NumberofAddressFamiliesReturned;
    struct _NDIS_IP_OPER_STATUS IpOperationalStatus[32];
};

typedef struct _NDIS_IRDA_PACKET_INFO {
    ULONG ExtraBOFs;
    ULONG MinTurnAroundTime;
};

typedef struct _NDIS_ISOLATION_NAME {
    USHORT Length;
    WCHAR String[128];
};

typedef struct _NDIS_ISOLATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_ISOLATION_MODE IsolationMode;
    UCHAR AllowUntaggedTraffic;
    ULONG NumRoutingDomainEntries;
    ULONG FirstRoutingDomainEntryOffset;
};

typedef struct _NDIS_LINK_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
    ULONG AutoNegotiationFlags;
};

typedef struct _NDIS_LINK_SPEED {
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
};

typedef struct _NDIS_LINK_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
    ULONG AutoNegotiationFlags;
};

typedef struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_MEDIUM MediaType;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
    ULONG MtuSize;
    ULONG64 MaxXmitLinkSpeed;
    ULONG64 XmitLinkSpeed;
    ULONG64 MaxRcvLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    ULONG LookaheadSize;
    struct _NDIS_PNP_CAPABILITIES *PowerManagementCapabilities;
    ULONG MacOptions;
    ULONG SupportedPacketFilters;
    ULONG MaxMulticastListSize;
    USHORT MacAddressLength;
    UCHAR PermanentMacAddress[32];
    UCHAR CurrentMacAddress[32];
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES *RecvScaleCapabilities;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    USHORT IfType;
    UCHAR IfConnectorPresent;
    ULONG SupportedStatistics;
    ULONG SupportedPauseFunctions;
    ULONG DataBackFillSize;
    ULONG ContextBackFillSize;
    PULONG SupportedOidList;
    ULONG SupportedOidListLength;
    ULONG AutoNegotiationFlags;
    struct _NDIS_PM_CAPABILITIES *PowerManagementCapabilitiesEx;
};

typedef struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_HD_SPLIT_ATTRIBUTES *HDSplitAttributes;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *HardwareReceiveFilterCapabilities;
    struct _NDIS_RECEIVE_FILTER_CAPABILITIES *CurrentReceiveFilterCapabilities;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *HardwareNicSwitchCapabilities;
    struct _NDIS_NIC_SWITCH_CAPABILITIES *CurrentNicSwitchCapabilities;
    struct _NDIS_SRIOV_CAPABILITIES *HardwareSriovCapabilities;
    struct _NDIS_SRIOV_CAPABILITIES *CurrentSriovCapabilities;
    struct _NDIS_QOS_CAPABILITIES *HardwareQosCapabilities;
    struct _NDIS_QOS_CAPABILITIES *CurrentQosCapabilities;
    struct _NDIS_GFT_OFFLOAD_CAPABILITIES *HardwareGftOffloadCapabilities;
    struct _NDIS_GFT_OFFLOAD_CAPABILITIES *CurrentGftOffloadCapabilities;
};

typedef struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG OpModeCapability;
    ULONG NumOfTXBuffers;
    ULONG NumOfRXBuffers;
    UCHAR MultiDomainCapabilityImplemented;
    ULONG NumSupportedPhys;
    struct DOT11_PHY_ATTRIBUTES *SupportedPhyAttributes;
    struct DOT11_EXTSTA_ATTRIBUTES *ExtSTAAttributes;
    struct DOT11_VWIFI_ATTRIBUTES *VWiFiAttributes;
    struct _DOT11_EXTAP_ATTRIBUTES *ExtAPAttributes;
    struct _DOT11_WFD_ATTRIBUTES *WFDAttributes;
};

typedef struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR Enabled;
    struct _NDIS_NDK_CAPABILITIES *NdkCapabilities;
};

typedef struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_OFFLOAD *DefaultOffloadConfiguration;
    struct _NDIS_OFFLOAD *HardwareOffloadCapabilities;
    struct _NDIS_TCP_CONNECTION_OFFLOAD *DefaultTcpConnectionOffloadConfiguration;
    struct _NDIS_TCP_CONNECTION_OFFLOAD *TcpConnectionOffloadHardwareCapabilities;
};

typedef struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    UCHAR DmaAddressWidth;
};

typedef struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID MiniportAdapterContext;
    ULONG AttributeFlags;
    ULONG CheckForHangTimeInSeconds;
    enum _NDIS_INTERFACE_TYPE InterfaceType;
};

typedef struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID MiniportAddDeviceContext;
    ULONG Flags;
};

typedef struct _NDIS_MINIPORT_BLOCK {
};

typedef struct _NDIS_MINIPORT_BLOCK_TYPE {
    ULONG unused;
};

typedef struct _NDIS_MINIPORT_CO_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PLONG CoCreateVcHandler;
    PLONG CoDeleteVcHandler;
    PLONG CoActivateVcHandler;
    PLONG CoDeactivateVcHandler;
    PVOID CoSendNetBufferListsHandler;
    PLONG CoOidRequestHandler;
};

typedef struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Flags;
    PLONG SetOptionsHandler;
    PLONG InitializeHandlerEx;
    PVOID HaltHandlerEx;
    PVOID UnloadHandler;
    PLONG PauseHandler;
    PLONG RestartHandler;
    PLONG OidRequestHandler;
    PVOID SendNetBufferListsHandler;
    PVOID ReturnNetBufferListsHandler;
    PVOID CancelSendHandler;
    PUCHAR CheckForHangHandlerEx;
    PLONG ResetHandlerEx;
    PVOID DevicePnPEventNotifyHandler;
    PVOID ShutdownHandlerEx;
    PVOID CancelOidRequestHandler;
    PLONG DirectOidRequestHandler;
    PVOID CancelDirectOidRequestHandler;
    PLONG SynchronousOidRequestHandler;
};

typedef struct _NDIS_MINIPORT_INIT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _CM_PARTIAL_RESOURCE_LIST *AllocatedResources;
    PVOID IMDeviceInstanceContext;
    PVOID MiniportAddDeviceContext;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    struct _NDIS_PORT_AUTHENTICATION_PARAMETERS *DefaultPortAuthStates;
    struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES *PciDeviceCustomProperties;
};

typedef struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PUCHAR InterruptHandler;
    PVOID InterruptDpcHandler;
    PVOID DisableInterruptHandler;
    PVOID EnableInterruptHandler;
    UCHAR MsiSupported;
    UCHAR MsiSyncWithAllMessages;
    PUCHAR MessageInterruptHandler;
    PVOID MessageInterruptDpcHandler;
    PVOID DisableMessageInterruptHandler;
    PVOID EnableMessageInterruptHandler;
    enum _NDIS_INTERRUPT_TYPE InterruptType;
    struct _IO_INTERRUPT_MESSAGE_INFO *MessageInfoTable;
};

typedef struct _NDIS_MINIPORT_PAUSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PauseReason;
};

typedef struct _NDIS_MINIPORT_PNP_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PLONG MiniportAddDeviceHandler;
    PVOID MiniportRemoveDeviceHandler;
    PLONG MiniportFilterResourceRequirementsHandler;
    PLONG MiniportStartDeviceHandler;
    ULONG Flags;
};

typedef struct _NDIS_MINIPORT_RESTART_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_RESTART_ATTRIBUTES *RestartAttributes;
    ULONG Flags;
};

typedef struct _NDIS_MINIPORT_SS_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PLONG IdleNotificationHandler;
    PVOID CancelIdleNotificationHandler;
};

typedef struct _NDIS_MINIPORT_TIMER {
    struct _KTIMER Timer;
    struct _KDPC Dpc;
    PVOID MiniportTimerFunction;
    PVOID MiniportTimerContext;
    struct _NDIS_MINIPORT_BLOCK *Miniport;
    struct _NDIS_MINIPORT_TIMER *NextTimer;
    VOID _NDIS_MINIPORT_TIMER;
    VOID _NDIS_MINIPORT_TIMER;
    struct _NDIS_MINIPORT_TIMER *operator=;
    struct _NDIS_MINIPORT_TIMER *operator=;
};

typedef struct _NDIS_MSIX_CONFIG_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_MSIX_TABLE_CONFIG ConfigOperation;
    ULONG TableEntry;
    ULONG MessageNumber;
};

typedef struct _NDIS_M_DRIVER_BLOCK {
};

typedef struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION {
    struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION *NextEntry;
    ULONG Tag;
    UCHAR Data[1];
};

typedef struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX *NextEntry;
    ULONG Tag;
    PVOID Data;
};

typedef struct _NDIS_NDK_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaxQpCount;
    ULONG MaxCqCount;
    ULONG MaxMrCount;
    ULONG MaxPdCount;
    ULONG MaxInboundReadLimit;
    ULONG MaxOutboundReadLimit;
    ULONG MaxMwCount;
    ULONG MaxSrqCount;
    ULONG64 MissingCounterMask;
    struct _NDK_ADAPTER_INFO *NdkInfo;
};

typedef struct _NDIS_NDK_CONNECTIONS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Count;
    UCHAR NDConnectionsMappedtoTCPConnections;
    struct _NDIS_NDK_CONNECTION_ENTRY Connections[1];
};

typedef struct _NDIS_NDK_CONNECTION_ENTRY {
    union _SOCKADDR_INET Local;
    union _SOCKADDR_INET Remote;
    UCHAR UserModeOwner;
    ULONG OwnerPid;
};

typedef struct _NDIS_NDK_LOCAL_ENDPOINTS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Count;
    UCHAR NDLocalEndpointsMappedtoTCPLocalEndpoints;
    struct _NDIS_NDK_LOCAL_ENDPOINT_ENTRY LocalEndpoints[1];
};

typedef struct _NDIS_NDK_LOCAL_ENDPOINT_ENTRY {
    union _SOCKADDR_INET Local;
    UCHAR UserModeOwner;
    UCHAR Listener;
    ULONG OwnerPid;
};

typedef struct _NDIS_NDK_PARAMETERS {
    struct _NDIS_NDK_REQUEST_PARAMETERS NdkRequest;
    struct _NDIS_NDK_RESPONSE_PARAMETERS NdkResponse;
};

typedef struct _NDIS_NDK_PERFORMANCE_COUNTERS {
    ULONG64 Connect;
    ULONG64 Accept;
    ULONG64 ConnectFailure;
    ULONG64 ConnectionError;
    ULONG64 ActiveConnection;
    ULONG64 Reserved01;
    ULONG64 Reserved02;
    ULONG64 Reserved03;
    ULONG64 Reserved04;
    ULONG64 Reserved05;
    ULONG64 Reserved06;
    ULONG64 Reserved07;
    ULONG64 Reserved08;
    ULONG64 Reserved09;
    ULONG64 Reserved10;
    ULONG64 Reserved11;
    ULONG64 Reserved12;
    ULONG64 Reserved13;
    ULONG64 Reserved14;
    ULONG64 Reserved15;
    ULONG64 Reserved16;
    ULONG64 Reserved17;
    ULONG64 Reserved18;
    ULONG64 Reserved19;
    ULONG64 Reserved20;
    ULONG64 CQError;
    ULONG64 RDMAInOctets;
    ULONG64 RDMAOutOctets;
    ULONG64 RDMAInFrames;
    ULONG64 RDMAOutFrames;
};

typedef struct _NDIS_NDK_REQUEST_PARAMETERS {
    UCHAR RdmaRequested;
    ULONG SwitchPortId;
    ULONG IfIndex;
    UCHAR MacAddress[32];
    ULONG VlanId;
    struct _NDIS_NDK_CAPABILITIES NdkReserved;
};

typedef struct _NDIS_NDK_RESPONSE_PARAMETERS {
    UCHAR CapabilitiesAvailable;
    struct _NDIS_NDK_CAPABILITIES ReceivedCapabilities;
};

typedef struct _NDIS_NDK_STATISTICS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _NDIS_NDK_PERFORMANCE_COUNTERS CounterSet;
};

typedef struct _NDIS_NET_BUFFER_LIST_8021Q_INFO {
    struct {
        ULONG UserPriority : 3;
        ULONG CanonicalFormatId : 1;
        ULONG VlanId : 12;
        ULONG Reserved : 16;
    } TagHeader;
    struct {
        ULONG UserPriority : 3;
        ULONG CanonicalFormatId : 1;
        ULONG VlanId : 12;
        ULONG WMMInfo : 4;
        ULONG Reserved : 12;
    } WLanTagHeader;
    PVOID Value;
};

typedef struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO {
    struct {
        USHORT FilterId;
         <unnamed-type-QueueVPortInfo>;
        union {
            USHORT QueueId;
            USHORT VPortId;
        } QueueVPortInfo;
    } FilteringInfo;
    PVOID Value;
};

typedef struct _NDIS_NET_BUFFER_LIST_GFT_OFFLOAD_INFO {
    ULONG Flags;
    USHORT VPortId;
    USHORT Reserved;
};

typedef struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO {
    PVOID MediaSpecificInfo;
    PVOID NativeWifiSpecificInfo;
    PVOID Value;
};

typedef struct _NDIS_NET_BUFFER_LIST_VIRTUAL_SUBNET_INFO {
    ULONG VirtualSubnetId : 24;
    ULONG ReservedVsidBits : 8;
    ULONG Reserved;
    PVOID Value;
};

typedef struct _NDIS_NIC_SWITCH_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG NdisReserved1;
    ULONG NumTotalMacAddresses;
    ULONG NumMacAddressesPerPort;
    ULONG NumVlansPerPort;
    ULONG NdisReserved2;
    ULONG NdisReserved3;
    ULONG NicSwitchCapabilities;
    ULONG MaxNumSwitches;
    ULONG MaxNumVPorts;
    ULONG NdisReserved4;
    ULONG MaxNumVFs;
    ULONG MaxNumQueuePairs;
    ULONG NdisReserved5;
    ULONG NdisReserved6;
    ULONG NdisReserved7;
    ULONG MaxNumQueuePairsPerNonDefaultVPort;
    ULONG NdisReserved8;
    ULONG NdisReserved9;
    ULONG NdisReserved10;
    ULONG NdisReserved11;
    ULONG NdisReserved12;
    ULONG MaxNumMacAddresses;
    ULONG NdisReserved13;
    ULONG NdisReserved14;
    ULONG NdisReserved15;
    ULONG NdisReserved16;
    ULONG NdisReserved17;
    ULONG MaxNumRssCapableNonDefaultPFVPorts;
    ULONG NumberOfIndirectionTableEntriesForDefaultVPort;
    ULONG NumberOfIndirectionTableEntriesPerNonDefaultPFVPort;
    ULONG MaxNumQueuePairsForDefaultVPort;
};

typedef struct _NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
};

typedef struct _NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG VPortId;
};

typedef struct _NDIS_NIC_SWITCH_FREE_VF_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    USHORT VFId;
};

typedef struct _NDIS_NIC_SWITCH_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_NIC_SWITCH_TYPE SwitchType;
    ULONG SwitchId;
    struct _IF_COUNTED_STRING_LH SwitchFriendlyName;
    ULONG NumVFs;
    ULONG NumAllocatedVFs;
    ULONG NumVPorts;
    ULONG NumActiveVPorts;
    ULONG NumQueuePairsForDefaultVPort;
    ULONG NumQueuePairsForNonDefaultVPorts;
    ULONG NumActiveDefaultVPortMacAddresses;
    ULONG NumActiveNonDefaultVPortMacAddresses;
    ULONG NumActiveDefaultVPortVlanIds;
    ULONG NumActiveNonDefaultVPortVlanIds;
};

typedef struct _NDIS_NIC_SWITCH_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_NIC_SWITCH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_NIC_SWITCH_TYPE SwitchType;
    ULONG SwitchId;
    struct _IF_COUNTED_STRING_LH SwitchFriendlyName;
    ULONG NumVFs;
    ULONG NdisReserved1;
    ULONG NdisReserved2;
    ULONG NdisReserved3;
    ULONG NumQueuePairsForDefaultVPort;
};

typedef struct _NDIS_NIC_SWITCH_VF_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
    struct _IF_COUNTED_STRING_LH VMName;
    struct _IF_COUNTED_STRING_LH VMFriendlyName;
    struct _IF_COUNTED_STRING_LH NicName;
    USHORT MacAddressLength;
    UCHAR PermanentMacAddress[32];
    UCHAR CurrentMacAddress[32];
    USHORT VFId;
    ULONG RequestorId;
};

typedef struct _NDIS_NIC_SWITCH_VF_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
    ULONG FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_NIC_SWITCH_VF_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
    struct _IF_COUNTED_STRING_LH VMName;
    struct _IF_COUNTED_STRING_LH VMFriendlyName;
    struct _IF_COUNTED_STRING_LH NicName;
    USHORT MacAddressLength;
    UCHAR PermanentMacAddress[32];
    UCHAR CurrentMacAddress[32];
    USHORT VFId;
    ULONG RequestorId;
};

typedef struct _NDIS_NIC_SWITCH_VPORT_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG VPortId;
    ULONG Flags;
    ULONG SwitchId;
    struct _IF_COUNTED_STRING_LH VPortName;
    USHORT AttachedFunctionId;
    ULONG NumQueuePairs;
    enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION InterruptModeration;
    enum _NDIS_NIC_SWITCH_VPORT_STATE VPortState;
    struct _GROUP_AFFINITY ProcessorAffinity;
    ULONG LookaheadSize;
    ULONG NumFilters;
};

typedef struct _NDIS_NIC_SWITCH_VPORT_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
    USHORT AttachedFunctionId;
    ULONG FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SwitchId;
    ULONG VPortId;
    struct _IF_COUNTED_STRING_LH VPortName;
    USHORT AttachedFunctionId;
    ULONG NumQueuePairs;
    enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION InterruptModeration;
    enum _NDIS_NIC_SWITCH_VPORT_STATE VPortState;
    struct _GROUP_AFFINITY ProcessorAffinity;
    ULONG LookaheadSize;
    struct _NDIS_NDK_PARAMETERS NdkParams;
    ULONG QosSqId;
};

typedef struct _NDIS_OBJECT_HEADER {
    UCHAR Type;
    UCHAR Revision;
    USHORT Size;
};

typedef struct _NDIS_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD Checksum;
    struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
    struct _NDIS_IPSEC_OFFLOAD_V1 IPsecV1;
    struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
    ULONG Flags;
    struct _NDIS_IPSEC_OFFLOAD_V2 IPsecV2;
    struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD Rsc;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD EncapsulatedPacketTaskOffloadGre;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 EncapsulatedPacketTaskOffloadVxlan;
    UCHAR EncapsulationTypes;
    struct _NDIS_RFC6877_464XLAT_OFFLOAD Rfc6877Xlat;
};

typedef struct _NDIS_OFFLOAD_ENCAPSULATION {
    struct _NDIS_OBJECT_HEADER Header;
     <unnamed-type-IPv4>;
    struct {
        ULONG Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        ULONG Enabled;
        ULONG EncapsulationType;
        ULONG HeaderSize;
    } IPv6;
};

typedef struct _NDIS_OFFLOAD_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR IPv4Checksum;
    UCHAR TCPIPv4Checksum;
    UCHAR UDPIPv4Checksum;
    UCHAR TCPIPv6Checksum;
    UCHAR UDPIPv6Checksum;
    UCHAR LsoV1;
    UCHAR IPsecV1;
    UCHAR LsoV2IPv4;
    UCHAR LsoV2IPv6;
    UCHAR TcpConnectionIPv4;
    UCHAR TcpConnectionIPv6;
    ULONG Flags;
    UCHAR IPsecV2;
    UCHAR IPsecV2IPv4;
    UCHAR RscIPv4;
    UCHAR RscIPv6;
    UCHAR EncapsulatedPacketTaskOffload;
    UCHAR EncapsulationTypes;
     _ENCAPSULATION_PROTOCOL_PARAMETERS;
    union _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS EncapsulationProtocolParameters;
};

typedef struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS {
    USHORT VxlanUDPPortNumber;
};

typedef struct _NDIS_OID_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_REQUEST_TYPE RequestType;
    ULONG PortNumber;
    ULONG Timeout;
    PVOID RequestId;
    PVOID RequestHandle;
     _REQUEST_DATA;
    union _NDIS_OID_REQUEST::_REQUEST_DATA DATA;
    UCHAR NdisReserved[128];
    UCHAR MiniportReserved[16];
    UCHAR SourceReserved[16];
    UCHAR SupportedRevision;
    UCHAR Reserved1;
    USHORT Reserved2;
    ULONG SwitchId;
    ULONG VPortId;
    ULONG Flags;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InputBufferLength;
    ULONG OutputBufferLength;
    ULONG MethodId;
    ULONG BytesWritten;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _NDIS_OPEN_BLOCK {
};

typedef struct _NDIS_OPEN_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    struct _UNICODE_STRING *AdapterName;
    enum _NDIS_MEDIUM *MediumArray;
    ULONG MediumArraySize;
    PULONG SelectedMediumIndex;
    PUSHORT FrameTypeArray;
    ULONG FrameTypeArraySize;
};

typedef struct _NDIS_OPER_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NET_IF_OPER_STATUS OperationalStatus;
    ULONG OperationalStatusFlags;
};

typedef struct _NDIS_PACKET_8021Q_INFO {
    struct {
        ULONG UserPriority : 3;
        ULONG CanonicalFormatId : 1;
        ULONG VlanId : 12;
        ULONG Reserved : 16;
    } TagHeader;
    PVOID Value;
};

typedef struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG DeviceType;
    ULONG CurrentSpeedAndMode;
    ULONG CurrentPayloadSize;
    ULONG MaxPayloadSize;
    ULONG MaxReadRequestSize;
    ULONG CurrentLinkSpeed;
    ULONG CurrentLinkWidth;
    ULONG MaxLinkSpeed;
    ULONG MaxLinkWidth;
    ULONG PciExpressVersion;
    ULONG InterruptType;
    ULONG MaxInterruptMessages;
};

typedef struct _NDIS_PD_ACQUIRE_QUEUES_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
};

typedef struct _NDIS_PD_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaximumTxPartialBufferCount;
    ULONG MaximumRxPartialBufferCount;
    UCHAR RxFilterContextWidth;
    ULONG CapabilityFlags;
    ULONG MaxNumberOfRxQueues;
    ULONG MaxNumberOfTxQueues;
    ULONG MaxNumberOfRxQueuesForDefaultVport;
    ULONG MaxNumberOfTxQueuesForDefaultVport;
    ULONG MaxNumberOfRxQueuesPerNonDefaultVport;
    ULONG MaxNumberOfTxQueuesPerNonDefaultVport;
    ULONG ExactMatchProfileArrayOffset;
    ULONG ExactMatchProfileArrayNumElements;
    ULONG ExactMatchProfileArrayElementSize;
    ULONG WildcardMatchProfileArrayOffset;
    ULONG WildcardMatchProfileArrayNumElements;
    ULONG WildcardMatchProfileArrayElementSize;
    ULONG MinimumModerationInterval;
    ULONG MaximumModerationInterval;
    ULONG ModerationIntervalGranularity;
    ULONG MaxRxQueueSize;
    ULONG MaxTxQueueSize;
};

typedef struct _NDIS_PD_CLOSE_PROVIDER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct NDIS_PD_PROVIDER_HANDLE__ *ProviderHandle;
};

typedef struct _NDIS_PD_CONFIG {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    UCHAR Enabled;
    ULONG CapabilitiesOffset;
    ULONG CapabilitiesSize;
};

typedef struct _NDIS_PD_COUNTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PWCHAR CounterName;
    enum NDIS_PD_COUNTER_TYPE Type;
};

typedef struct _NDIS_PD_FILTER_COUNTER {
    ULONG64 PacketsMatched;
    ULONG64 BytesMatched;
};

typedef struct _NDIS_PD_FILTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MatchProfileId;
    ULONG Priority;
    struct NDIS_PD_COUNTER_HANDLE__ *CounterHandle;
    struct _NDIS_PD_QUEUE *TargetReceiveQueue;
    ULONG64 RxFilterContext;
    PUCHAR HeaderGroupMatchArray;
    ULONG HeaderGroupMatchArrayNumElements;
    ULONG HeaderGroupMatchArrayElementSize;
    ULONG HeaderGroupMatchArrayTotalSize;
};

typedef struct _NDIS_PD_OPEN_PROVIDER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct NDIS_PD_PROVIDER_HANDLE__ *ProviderHandle;
    struct _NDIS_PD_PROVIDER_DISPATCH *ProviderDispatch;
};

typedef struct _NDIS_PD_POST_AND_DRAIN_ARG {
    struct _PD_BUFFER *PostBufferListHead;
    struct _PD_BUFFER **DrainBufferListTail;
    ULONG MaxDrainCount;
    ULONG DrainCount;
    ULONG PostCount;
    UCHAR QueueDepthThresholdReached;
};

typedef struct _NDIS_PD_PROVIDER_DISPATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PLONG NdisPDAllocateQueue;
    PVOID NdisPDFreeQueue;
    PLONG NdisPDAcquireReceiveQueues;
    PVOID NdisPDReleaseReceiveQueues;
    PLONG NdisPDAllocateCounter;
    PVOID NdisPDFreeCounter;
    PVOID NdisPDQueryCounter;
    PLONG NdisPDSetReceiveFilter;
    PVOID NdisPDClearReceiveFilter;
    PVOID NdisPDRequestDrainNotification;
    PLONG NdisPDQueueControl;
    PLONG NdisPDProviderControl;
};

typedef struct _NDIS_PD_QUEUE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _NDIS_PD_QUEUE_DISPATCH *Dispatch;
    PVOID PDPlatformReserved[2];
    PVOID PDClientReserved[2];
};

typedef struct _NDIS_PD_QUEUE_DISPATCH {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID PDPostAndDrainBufferList;
    PVOID PDQueryQueueDepth;
    PVOID PDFlushQueue;
    PVOID PDPostAndDrainBufferListEx;
};

typedef struct _NDIS_PD_QUEUE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum NDIS_PD_QUEUE_TYPE QueueType;
    ULONG QueueSize;
    ULONG ReceiveDataLength;
    struct _GROUP_AFFINITY Affinity;
    ULONG TrafficClassId;
    ULONG MaximumPartialBufferCount;
    struct NDIS_PD_COUNTER_HANDLE__ *CounterHandle;
};

typedef struct _NDIS_PD_RECEIVE_QUEUE_COUNTER {
    ULONG64 PacketsReceived;
    ULONG64 BytesReceived;
    ULONG64 PacketsDropped;
};

typedef struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER {
    ULONG64 PacketsTransmitted;
    ULONG64 BytesTransmitted;
};

typedef struct _NDIS_PHYSICAL_ADDRESS_UNIT {
    union _LARGE_INTEGER PhysicalAddress;
    ULONG Length;
};

typedef struct _NDIS_PM_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SupportedWoLPacketPatterns;
    ULONG NumTotalWoLPatterns;
    ULONG MaxWoLPatternSize;
    ULONG MaxWoLPatternOffset;
    ULONG MaxWoLPacketSaveBuffer;
    ULONG SupportedProtocolOffloads;
    ULONG NumArpOffloadIPv4Addresses;
    ULONG NumNSOffloadIPv6Addresses;
    enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
    ULONG SupportedWakeUpEvents;
    ULONG MediaSpecificWakeUpEvents;
};

typedef struct _NDIS_PM_COUNTED_STRING {
    USHORT Length;
    WCHAR String[65];
};

typedef struct _NDIS_PM_PACKET_PATTERN {
    ULONG Priority;
    ULONG Reserved;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
    ULONG PatternFlags;
};

typedef struct _NDIS_PM_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG EnabledWoLPacketPatterns;
    ULONG EnabledProtocolOffloads;
    ULONG WakeUpFlags;
    ULONG MediaSpecificWakeUpEvents;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Priority;
    enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE ProtocolOffloadType;
    struct _NDIS_PM_COUNTED_STRING FriendlyName;
    ULONG ProtocolOffloadId;
    ULONG NextProtocolOffloadOffset;
     _PROTOCOL_OFFLOAD_PARAMETERS;
    union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS ProtocolOffloadParameters;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS {
    ULONG Flags;
    UCHAR KCK[16];
    UCHAR KEK[16];
    ULONG64 KeyReplayCounter;
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv4Address[4];
    UCHAR HostIPv4Address[4];
    UCHAR MacAddress[6];
};

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS {
    ULONG Flags;
    UCHAR RemoteIPv6Address[16];
    UCHAR SolicitedNodeIPv6Address[16];
    UCHAR MacAddress[6];
    UCHAR TargetIPv6Addresses[2][16];
};

typedef struct _NDIS_PM_WAKE_PACKET {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PatternId;
    struct _NDIS_PM_COUNTED_STRING PatternFriendlyName;
    ULONG OriginalPacketSize;
    ULONG SavedPacketSize;
    ULONG SavedPacketOffset;
};

typedef struct _NDIS_PM_WAKE_REASON {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_PM_WAKE_REASON_TYPE WakeReason;
    ULONG InfoBufferOffset;
    ULONG InfoBufferSize;
};

typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES {
    enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
    enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
};

typedef struct _NDIS_PM_WOL_PATTERN {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG Priority;
    enum _NDIS_PM_WOL_PACKET WoLPacketType;
    struct _NDIS_PM_COUNTED_STRING FriendlyName;
    ULONG PatternId;
    ULONG NextWoLPatternOffset;
     _WOL_PATTERN;
    union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN WoLPattern;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS {
    ULONG Flags;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv4SourceAddress[4];
    UCHAR IPv4DestAddress[4];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS {
    ULONG Flags;
    UCHAR IPv6SourceAddress[16];
    UCHAR IPv6DestAddress[16];
    USHORT TCPSourcePortNumber;
    USHORT TCPDestPortNumber;
};

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN {
    ULONG Flags;
    ULONG MaskOffset;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
};

typedef struct _NDIS_PNP_CAPABILITIES {
    ULONG Flags;
    struct _NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;
};

typedef struct _NDIS_PORT {
    struct _NDIS_PORT *Next;
    PVOID NdisReserved;
    PVOID MiniportReserved;
    PVOID ProtocolReserved;
    struct _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
};

typedef struct _NDIS_PORT_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG NumberOfPorts;
    ULONG OffsetFirstPort;
    ULONG ElementSize;
    struct _NDIS_PORT_CHARACTERISTICS Ports[1];
};

typedef struct _NDIS_PORT_AUTHENTICATION_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_PORT_CONTROL_STATE SendControlState;
    enum _NDIS_PORT_CONTROL_STATE RcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
};

typedef struct _NDIS_PORT_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    ULONG Flags;
    enum _NDIS_PORT_TYPE Type;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_DIRECTION_TYPE Direction;
    enum _NDIS_PORT_CONTROL_STATE SendControlState;
    enum _NDIS_PORT_CONTROL_STATE RcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
};

typedef struct _NDIS_PORT_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    ULONG64 XmitLinkSpeed;
    ULONG64 RcvLinkSpeed;
    enum _NET_IF_DIRECTION_TYPE Direction;
    enum _NDIS_PORT_CONTROL_STATE SendControlState;
    enum _NDIS_PORT_CONTROL_STATE RcvControlState;
    enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
    enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
    ULONG Flags;
};

typedef struct _NDIS_PROCESSOR_INFO {
    ULONG CpuNumber;
    ULONG PhysicalPackageId;
    ULONG CoreId;
    ULONG HyperThreadID;
};

typedef struct _NDIS_PROCESSOR_INFO_EX {
    struct _PROCESSOR_NUMBER ProcNum;
    ULONG SocketId;
    ULONG CoreId;
    ULONG HyperThreadId;
    USHORT NodeId;
    USHORT NodeDistance;
};

typedef struct _NDIS_PROTOCOL_BLOCK {
};

typedef struct _NDIS_PROTOCOL_CO_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID CoStatusHandlerEx;
    PVOID CoAfRegisterNotifyHandler;
    PVOID CoReceiveNetBufferListsHandler;
    PVOID CoSendNetBufferListsCompleteHandler;
};

typedef struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UCHAR MajorDriverVersion;
    UCHAR MinorDriverVersion;
    ULONG Flags;
    struct _UNICODE_STRING Name;
    PLONG SetOptionsHandler;
    PLONG BindAdapterHandlerEx;
    PLONG UnbindAdapterHandlerEx;
    PVOID OpenAdapterCompleteHandlerEx;
    PVOID CloseAdapterCompleteHandlerEx;
    PLONG NetPnPEventHandler;
    PVOID UninstallHandler;
    PVOID OidRequestCompleteHandler;
    PVOID StatusHandlerEx;
    PVOID ReceiveNetBufferListsHandler;
    PVOID SendNetBufferListsCompleteHandler;
    PVOID DirectOidRequestCompleteHandler;
};

typedef struct _NDIS_PROTOCOL_PAUSE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PauseReason;
};

typedef struct _NDIS_PROTOCOL_RESTART_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    PUCHAR FilterModuleNameBuffer;
    ULONG FilterModuleNameBufferLength;
    struct _NDIS_RESTART_ATTRIBUTES *RestartAttributes;
    ULONG BoundIfIndex;
    union _NET_LUID_LH BoundIfNetluid;
    ULONG Flags;
};

typedef struct _NDIS_QOS_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaxNumTrafficClasses;
    ULONG MaxNumEtsCapableTrafficClasses;
    ULONG MaxNumPfcEnabledTrafficClasses;
};

typedef struct _NDIS_QOS_CLASSIFICATION_ELEMENT {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    USHORT ConditionSelector;
    USHORT ConditionField;
    USHORT ActionSelector;
    USHORT ActionField;
};

typedef struct _NDIS_QOS_OFFLOAD_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SupportedSqTypes;
    UCHAR TransmitCapSupported[8];
    UCHAR TransmitReservationSupported[8];
    UCHAR ReceiveCapSupported[8];
    UCHAR TransmitGftCapSupported[8];
    UCHAR ReceiveGftCapSupported[8];
    UCHAR TcSupportedTable[8];
    ULONG NumStandardSqsSupported;
    ULONG NumGftSqsSupported;
    ULONG ReservationGranularitySupported;
    ULONG MaxNumSqInputs;
};

typedef struct _NDIS_QOS_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG NumTrafficClasses;
    UCHAR PriorityAssignmentTable[8];
    UCHAR TcBandwidthAssignmentTable[8];
    UCHAR TsaAssignmentTable[8];
    ULONG PfcEnable;
    ULONG NumClassificationElements;
    ULONG ClassificationElementSize;
    ULONG FirstClassificationElementOffset;
};

typedef struct _NDIS_QOS_SQ_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SqId;
    enum _NDIS_QOS_SQ_TYPE SqType;
    UCHAR TcEnabledTable[8];
    ULONG TcTransmitBandwidthCapTable[8];
    ULONG TcTransmitBandwidthReservationTable[8];
    ULONG TcReceiveBandwidthCapTable[8];
};

typedef struct _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_QOS_SQ_TYPE SqType;
    ULONG FirstSqId;
    ULONG MaxSqsToReturn;
    ULONG SqParamsArrayOffset;
    ULONG SqParamsArrayNumElements;
    ULONG SqParamsArrayElementSize;
};

typedef struct _NDIS_RECEIVE_FILTER_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG EnabledFilterTypes;
    ULONG EnabledQueueTypes;
    ULONG NumQueues;
    ULONG SupportedQueueProperties;
    ULONG SupportedFilterTests;
    ULONG SupportedHeaders;
    ULONG SupportedMacHeaderFields;
    ULONG MaxMacHeaderFilters;
    ULONG MaxQueueGroups;
    ULONG MaxQueuesPerQueueGroup;
    ULONG MinLookaheadSplitSize;
    ULONG MaxLookaheadSplitSize;
    ULONG SupportedARPHeaderFields;
    ULONG SupportedIPv4HeaderFields;
    ULONG SupportedIPv6HeaderFields;
    ULONG SupportedUdpHeaderFields;
    ULONG MaxFieldTestsPerPacketCoalescingFilter;
    ULONG MaxPacketCoalescingFilters;
    ULONG NdisReserved;
};

typedef struct _NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    ULONG FilterId;
};

typedef struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_FRAME_HEADER FrameHeader;
    enum _NDIS_RECEIVE_FILTER_TEST ReceiveFilterTest;
     _HEADER_FIELD;
    union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD HeaderField;
     _FIELD_VALUE;
    union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE FieldValue;
     _RESULT_VALUE;
    union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE ResultValue;
};

typedef struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG EnabledFilterTypes;
    ULONG EnabledQueueTypes;
};

typedef struct _NDIS_RECEIVE_FILTER_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_FILTER_TYPE FilterType;
    ULONG FilterId;
};

typedef struct _NDIS_RECEIVE_FILTER_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG QueueId;
    ULONG FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
    ULONG Flags;
    ULONG VPortId;
};

typedef struct _NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG FilterId;
    ULONG SourceQueueId;
    ULONG SourceVPortId;
    ULONG DestQueueId;
    ULONG DestVPortId;
};

typedef struct _NDIS_RECEIVE_FILTER_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_FILTER_TYPE FilterType;
    ULONG QueueId;
    ULONG FilterId;
    ULONG FieldParametersArrayOffset;
    ULONG FieldParametersArrayNumElements;
    ULONG FieldParametersArrayElementSize;
    ULONG RequestedFilterIdBitCount;
    ULONG MaxCoalescingDelay;
    ULONG VPortId;
};

typedef struct _NDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG QueueId;
};

typedef struct _NDIS_RECEIVE_HASH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HashInformation;
    USHORT HashSecretKeySize;
    ULONG HashSecretKeyOffset;
};

typedef struct _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    LONG CompletionStatus;
};

typedef struct _NDIS_RECEIVE_QUEUE_FREE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
};

typedef struct _NDIS_RECEIVE_QUEUE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_QUEUE_TYPE QueueType;
    ULONG QueueId;
    ULONG QueueGroupId;
    enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
    struct _GROUP_AFFINITY ProcessorAffinity;
    ULONG NumSuggestedReceiveBuffers;
    ULONG MSIXTableEntry;
    ULONG LookaheadSize;
    struct _IF_COUNTED_STRING_LH VmName;
    struct _IF_COUNTED_STRING_LH QueueName;
    ULONG NumFilters;
    ULONG InterruptCoalescingDomainId;
};

typedef struct _NDIS_RECEIVE_QUEUE_INFO_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_RECEIVE_QUEUE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_QUEUE_TYPE QueueType;
    ULONG QueueId;
    ULONG QueueGroupId;
    struct _GROUP_AFFINITY ProcessorAffinity;
    ULONG NumSuggestedReceiveBuffers;
    ULONG MSIXTableEntry;
    ULONG LookaheadSize;
    struct _IF_COUNTED_STRING_LH VmName;
    struct _IF_COUNTED_STRING_LH QueueName;
    ULONG PortId;
    ULONG InterruptCoalescingDomainId;
    ULONG QosSqId;
};

typedef struct _NDIS_RECEIVE_QUEUE_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
};

typedef struct _NDIS_RECEIVE_SCALE_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG CapabilitiesFlags;
    ULONG NumberOfInterruptMessages;
    ULONG NumberOfReceiveQueues;
    USHORT NumberOfIndirectionTableEntries;
};

typedef struct _NDIS_RECEIVE_SCALE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT Flags;
    USHORT BaseCpuNumber;
    ULONG HashInformation;
    USHORT IndirectionTableSize;
    ULONG IndirectionTableOffset;
    USHORT HashSecretKeySize;
    ULONG HashSecretKeyOffset;
    ULONG ProcessorMasksOffset;
    ULONG NumberOfProcessorMasks;
    ULONG ProcessorMasksEntrySize;
    struct _PROCESSOR_NUMBER DefaultProcessorNumber;
};

typedef struct _NDIS_RECEIVE_SCALE_PARAMETERS_V2 {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG HashInformation;
    ULONG HashSecretKeySize;
    ULONG HashSecretKeyOffset;
    ULONG NumberOfQueues;
    ULONG NumberOfIndirectionTableEntries;
};

typedef struct _NDIS_RECEIVE_THROTTLE_PARAMETERS {
    ULONG MaxNblsToIndicate;
    ULONG MoreNblsPending : 1;
};

typedef struct _NDIS_RESTART_ATTRIBUTES {
    struct _NDIS_RESTART_ATTRIBUTES *Next;
    ULONG Oid;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _NDIS_RESTART_GENERAL_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG MtuSize;
    ULONG64 MaxXmitLinkSpeed;
    ULONG64 MaxRcvLinkSpeed;
    ULONG LookaheadSize;
    ULONG MacOptions;
    ULONG SupportedPacketFilters;
    ULONG MaxMulticastListSize;
    struct _NDIS_RECEIVE_SCALE_CAPABILITIES *RecvScaleCapabilities;
    enum _NET_IF_ACCESS_TYPE AccessType;
    ULONG Flags;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    ULONG SupportedStatistics;
    ULONG DataBackFillSize;
    ULONG ContextBackFillSize;
    PULONG SupportedOidList;
    ULONG SupportedOidListLength;
    ULONG MaxLookaheadSizeAccessed;
};

typedef struct _NDIS_RFC6877_464XLAT_OFFLOAD {
    enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS XlatOffload;
    ULONG Flags;
};

typedef struct _NDIS_ROUTING_DOMAIN_ENTRY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _GUID RoutingDomainId;
    struct _NDIS_ISOLATION_NAME RoutingDomainName;
    ULONG NumIsolationEntries;
    ULONG FirstIsolationEntryOffset;
};

typedef struct _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _NDIS_ISOLATION_NAME IsolationIdName;
    ULONG VirtualSubnetId : 24;
    ULONG VlanId : 12;
    ULONG IsolationId;
};

typedef struct _NDIS_RSC_STATISTICS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 CoalescedPkts;
    ULONG64 CoalescedOctets;
    ULONG64 CoalesceEvents;
    ULONG64 Aborts;
};

typedef struct _NDIS_RSS_PROCESSOR {
    struct _PROCESSOR_NUMBER ProcNum;
    USHORT PreferenceIndex;
    USHORT Reserved;
};

typedef struct _NDIS_RSS_PROCESSOR_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _PROCESSOR_NUMBER RssBaseProcessor;
    ULONG MaxNumRssProcessors;
    USHORT PreferredNumaNode;
    ULONG RssProcessorArrayOffset;
    ULONG RssProcessorCount;
    ULONG RssProcessorEntrySize;
    struct _PROCESSOR_NUMBER RssMaxProcessor;
    enum _NDIS_RSS_PROFILE RssProfile;
};

typedef struct _NDIS_RSS_SET_INDIRECTION_ENTRIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG RssEntrySize;
    ULONG RssEntryTableOffset;
    ULONG NumberOfRssEntries;
};

typedef struct _NDIS_RSS_SET_INDIRECTION_ENTRY {
    ULONG SwitchId;
    ULONG VPortId;
    ULONG Flags;
    USHORT IndirectionTableIndex;
    struct _PROCESSOR_NUMBER TargetProcessorNumber;
    LONG EntryStatus;
};

typedef struct _NDIS_RW_LOCK {
    ULONG64 SpinLock;
    PVOID Context;
    UCHAR Reserved[16];
    union _NDIS_RW_LOCK_REFCOUNT RefCount[64];
    ULONG RefCountEx[256];
    ULONG64 RefCountLock;
    ULONG SharedRefCount;
    UCHAR WriterWaiting;
    VOID _NDIS_RW_LOCK;
    VOID _NDIS_RW_LOCK;
    struct _NDIS_RW_LOCK *operator=;
    struct _NDIS_RW_LOCK *operator=;
};

typedef struct _NDIS_RW_LOCK_EX {
};

typedef struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    enum _NDIS_SHARED_MEMORY_USAGE SharedMemoryUsage;
    struct _MDL *Mdl;
    PVOID CurrentVa;
    ULONG Length;
    PVOID ProcessSGListHandler;
    PVOID Context;
    struct _SCATTER_GATHER_LIST *ScatterGatherListBuffer;
    ULONG ScatterGatherListBufferSize;
    ULONG ScatterGatherListBufferSizeNeeded;
};

typedef struct _NDIS_SG_DMA_DESCRIPTION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG MaximumPhysicalMapping;
    PVOID ProcessSGListHandler;
    PVOID SharedMemAllocateCompleteHandler;
    ULONG ScatterGatherListSize;
};

typedef struct _NDIS_SHARED_MEMORY_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG QueueId;
    PVOID SharedMemoryHandle;
    ULONG PreferredNode;
    enum _NDIS_SHARED_MEMORY_USAGE Usage;
    ULONG Length;
    PVOID VirtualAddress;
    ULONG SGListBufferLength;
    struct _SCATTER_GATHER_LIST *SGListBuffer;
    ULONG VPortId;
};

typedef struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    PVOID ProviderContext;
    PLONG AllocateSharedMemoryHandler;
    PVOID FreeSharedMemoryHandler;
};

typedef struct _NDIS_SPIN_LOCK {
    ULONG64 SpinLock;
    UCHAR OldIrql;
};

typedef struct _NDIS_SRIOV_BAR_RESOURCES_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    USHORT BarIndex;
    ULONG BarResourcesOffset;
};

typedef struct _NDIS_SRIOV_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SriovCapabilities;
};

typedef struct _NDIS_SRIOV_CONFIG_STATE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG BlockId;
    ULONG Length;
};

typedef struct _NDIS_SRIOV_OVERLYING_ADAPTER_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG IfIndex;
    ULONG NdisReserved1;
    ULONG NdisReserved2;
};

typedef struct _NDIS_SRIOV_PF_LUID_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    struct _LUID Luid;
};

typedef struct _NDIS_SRIOV_PROBED_BARS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG BaseRegisterValuesOffset;
};

typedef struct _NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    ULONG BlockId;
    ULONG Length;
    ULONG BufferOffset;
};

typedef struct _NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    ULONG Offset;
    ULONG Length;
    ULONG BufferOffset;
};

typedef struct _NDIS_SRIOV_RESET_VF_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
};

typedef struct _NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    enum _NDIS_DEVICE_POWER_STATE PowerState;
    UCHAR WakeEnable;
};

typedef struct _NDIS_SRIOV_VF_CONFIG_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    ULONG BlockId;
    ULONG Length;
};

typedef struct _NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 BlockMask;
};

typedef struct _NDIS_SRIOV_VF_SERIAL_NUMBER_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG SerialNumber;
};

typedef struct _NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    USHORT VendorId;
    USHORT DeviceId;
};

typedef struct _NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    ULONG BlockId;
    ULONG Length;
    ULONG BufferOffset;
};

typedef struct _NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    USHORT VFId;
    ULONG Offset;
    ULONG Length;
    ULONG BufferOffset;
};

typedef struct _NDIS_STATISTICS_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG SupportedStatistics;
    ULONG64 ifInDiscards;
    ULONG64 ifInErrors;
    ULONG64 ifHCInOctets;
    ULONG64 ifHCInUcastPkts;
    ULONG64 ifHCInMulticastPkts;
    ULONG64 ifHCInBroadcastPkts;
    ULONG64 ifHCOutOctets;
    ULONG64 ifHCOutUcastPkts;
    ULONG64 ifHCOutMulticastPkts;
    ULONG64 ifHCOutBroadcastPkts;
    ULONG64 ifOutErrors;
    ULONG64 ifOutDiscards;
    ULONG64 ifHCInUcastOctets;
    ULONG64 ifHCInMulticastOctets;
    ULONG64 ifHCInBroadcastOctets;
    ULONG64 ifHCOutUcastOctets;
    ULONG64 ifHCOutMulticastOctets;
    ULONG64 ifHCOutBroadcastOctets;
};

typedef struct _NDIS_STATISTICS_VALUE {
    ULONG Oid;
    ULONG DataLength;
    UCHAR Data[1];
};

typedef struct _NDIS_STATISTICS_VALUE_EX {
    ULONG Oid;
    ULONG DataLength;
    ULONG Length;
    UCHAR Data[1];
};

typedef struct _NDIS_STATUS_INDICATION {
    struct _NDIS_OBJECT_HEADER Header;
    PVOID SourceHandle;
    ULONG PortNumber;
    LONG StatusCode;
    ULONG Flags;
    PVOID DestinationHandle;
    PVOID RequestId;
    PVOID StatusBuffer;
    ULONG StatusBufferSize;
    struct _GUID Guid;
    PVOID NdisReserved[4];
};

typedef struct _NDIS_SWITCH_FEATURE_STATUS_CUSTOM {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG FeatureStatusCustomBufferLength;
    ULONG FeatureStatusCustomBufferOffset;
};

typedef struct _NDIS_SWITCH_FEATURE_STATUS_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_SWITCH_FEATURE_STATUS_TYPE FeatureStatusType;
    struct _GUID FeatureStatusId;
    struct _GUID FeatureStatusInstanceId;
    USHORT FeatureStatusVersion;
    USHORT SerializationVersion;
    ULONG FeatureStatusBufferOffset;
    ULONG FeatureStatusBufferLength;
};

typedef struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG ElementSize;
    ULONG NumElements;
    ULONG NumDestinations;
    PVOID FirstElement;
};

typedef struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    PCHAR ContextName;
    struct _GUID *ExtensionId;
};

typedef struct _NDIS_SWITCH_NIC_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    USHORT FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_SWITCH_NIC_OID_REQUEST {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SourcePortId;
    USHORT SourceNicIndex;
    ULONG DestinationPortId;
    USHORT DestinationNicIndex;
    struct _NDIS_OID_REQUEST *OidRequest;
};

typedef struct _NDIS_SWITCH_NIC_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _IF_COUNTED_STRING_LH NicName;
    struct _IF_COUNTED_STRING_LH NicFriendlyName;
    ULONG PortId;
    USHORT NicIndex;
    enum _NDIS_SWITCH_NIC_TYPE NicType;
    enum _NDIS_SWITCH_NIC_STATE NicState;
    struct _IF_COUNTED_STRING_LH VmName;
    struct _IF_COUNTED_STRING_LH VmFriendlyName;
    struct _GUID NetCfgInstanceId;
    ULONG MTU;
    USHORT NumaNodeId;
    UCHAR PermanentMacAddress[32];
    UCHAR VMMacAddress[32];
    UCHAR CurrentMacAddress[32];
    UCHAR VFAssigned;
    ULONG64 NdisReserved[2];
};

typedef struct _NDIS_SWITCH_NIC_SAVE_STATE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PortId;
    USHORT NicIndex;
    struct _GUID ExtensionId;
    struct _IF_COUNTED_STRING_LH ExtensionFriendlyName;
    struct _GUID FeatureClassId;
    USHORT SaveDataSize;
    USHORT SaveDataOffset;
    ULONG SaveDataSizeOverflow;
};

typedef struct _NDIS_SWITCH_NIC_STATUS_INDICATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG SourcePortId;
    USHORT SourceNicIndex;
    ULONG DestinationPortId;
    USHORT DestinationNicIndex;
    struct _NDIS_STATUS_INDICATION *StatusIndication;
};

typedef struct _NDIS_SWITCH_OPTIONAL_HANDLERS {
    struct _NDIS_OBJECT_HEADER Header;
    PLONG AllocateNetBufferListForwardingContext;
    PVOID FreeNetBufferListForwardingContext;
    PLONG SetNetBufferListSource;
    PLONG AddNetBufferListDestination;
    PLONG GrowNetBufferListDestinations;
    PVOID GetNetBufferListDestinations;
    PLONG UpdateNetBufferListDestinations;
    PLONG CopyNetBufferListInfo;
    PLONG ReferenceSwitchNic;
    PLONG DereferenceSwitchNic;
    PLONG ReferenceSwitchPort;
    PLONG DereferenceSwitchPort;
    PVOID ReportFilteredNetBufferLists;
    PLONG SetNetBufferListSwitchContext;
    PVOID *GetNetBufferListSwitchContext;
    PVOID SwitchPDReserved[14];
};

typedef struct _NDIS_SWITCH_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _IF_COUNTED_STRING_LH SwitchName;
    struct _IF_COUNTED_STRING_LH SwitchFriendlyName;
    ULONG NumSwitchPorts;
    UCHAR IsActive;
};

typedef struct _NDIS_SWITCH_PORT_ARRAY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    USHORT FirstElementOffset;
    ULONG NumElements;
    ULONG ElementSize;
};

typedef struct _NDIS_SWITCH_PORT_DESTINATION {
    ULONG PortId;
    USHORT NicIndex;
    USHORT IsExcluded : 1;
    USHORT PreserveVLAN : 1;
    USHORT PreservePriority : 1;
    USHORT Reserved : 13;
};

typedef struct _NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG FeatureStatusBufferLength;
    ULONG FeatureStatusBufferOffset;
};

typedef struct _NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PortId;
    enum _NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE FeatureStatusType;
    struct _GUID FeatureStatusId;
    USHORT FeatureStatusVersion;
    USHORT SerializationVersion;
    struct _GUID FeatureStatusInstanceId;
    ULONG FeatureStatusBufferLength;
    ULONG FeatureStatusBufferOffset;
    ULONG Reserved;
};

typedef struct _NDIS_SWITCH_PORT_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PortId;
    struct _IF_COUNTED_STRING_LH PortName;
    struct _IF_COUNTED_STRING_LH PortFriendlyName;
    enum _NDIS_SWITCH_PORT_TYPE PortType;
    UCHAR IsValidationPort;
    enum _NDIS_SWITCH_PORT_STATE PortState;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_CUSTOM {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PropertyBufferLength;
    ULONG PropertyBufferOffset;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PortId;
    enum _NDIS_SWITCH_PORT_PROPERTY_TYPE PropertyType;
    struct _GUID PropertyId;
    struct _GUID PropertyInstanceId;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    USHORT PropertyVersion;
    struct _GUID PropertyInstanceId;
    ULONG QwordAlignedPropertyBufferLength;
    ULONG PropertyBufferLength;
    ULONG PropertyBufferOffset;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PortId;
    enum _NDIS_SWITCH_PORT_PROPERTY_TYPE PropertyType;
    struct _GUID PropertyId;
    USHORT SerializationVersion;
    ULONG FirstPropertyOffset;
    ULONG NumProperties;
    USHORT Reserved;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_ISOLATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_ISOLATION_MODE IsolationMode;
    UCHAR AllowUntaggedTraffic;
    ULONG DefaultIsolationId;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PortId;
    enum _NDIS_SWITCH_PORT_PROPERTY_TYPE PropertyType;
    struct _GUID PropertyId;
    USHORT PropertyVersion;
    USHORT SerializationVersion;
    struct _GUID PropertyInstanceId;
    ULONG PropertyBufferLength;
    ULONG PropertyBufferOffset;
    ULONG Reserved;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_PROFILE {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _IF_COUNTED_STRING_LH ProfileName;
    struct _GUID ProfileId;
    struct _IF_COUNTED_STRING_LH VendorName;
    struct _GUID VendorId;
    ULONG ProfileData;
    struct _GUID NetCfgInstanceId;
     <unnamed-type-PciLocation>;
    struct {
        ULONG PciSegmentNumber : 16;
        ULONG PciBusNumber : 8;
        ULONG PciDeviceNumber : 5;
        ULONG PciFunctionNumber : 3;
    } PciLocation;
    ULONG CdnLabelId;
    struct _IF_COUNTED_STRING_LH CdnLabel;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _GUID RoutingDomainId;
    struct _NDIS_ISOLATION_NAME RoutingDomainName;
    ULONG NumIsolationEntries;
    USHORT FirstIsolationEntryOffset;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_SECURITY {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    UCHAR AllowMacSpoofing;
    UCHAR AllowIeeePriorityTag;
    ULONG VirtualSubnetId;
    UCHAR AllowTeaming;
    ULONG DynamicIPAddressLimit;
};

typedef struct _NDIS_SWITCH_PORT_PROPERTY_VLAN {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_SWITCH_PORT_VLAN_MODE OperationMode;
    struct {
        USHORT AccessVlanId;
        USHORT NativeVlanId;
        ULONG64 PruneVlanIdArray[64];
        ULONG64 TrunkVlanIdArray[64];
    } VlanProperties;
    struct {
        enum _NDIS_SWITCH_PORT_PVLAN_MODE PvlanMode;
        USHORT PrimaryVlanId;
        USHORT SecondaryVlanId;
        ULONG64 SecondaryVlanIdArray[64];
    } PvlanProperties;
};

typedef struct _NDIS_SWITCH_PROPERTY_CUSTOM {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG PropertyBufferLength;
    ULONG PropertyBufferOffset;
};

typedef struct _NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_SWITCH_PROPERTY_TYPE PropertyType;
    struct _GUID PropertyId;
    struct _GUID PropertyInstanceId;
};

typedef struct _NDIS_SWITCH_PROPERTY_ENUM_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _GUID PropertyInstanceId;
    USHORT PropertyVersion;
    ULONG QwordAlignedPropertyBufferLength;
    ULONG PropertyBufferLength;
    ULONG PropertyBufferOffset;
};

typedef struct _NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_SWITCH_PROPERTY_TYPE PropertyType;
    struct _GUID PropertyId;
    USHORT SerializationVersion;
    ULONG FirstPropertyOffset;
    ULONG NumProperties;
};

typedef struct _NDIS_SWITCH_PROPERTY_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_SWITCH_PROPERTY_TYPE PropertyType;
    struct _GUID PropertyId;
    USHORT PropertyVersion;
    USHORT SerializationVersion;
    struct _GUID PropertyInstanceId;
    ULONG PropertyBufferLength;
    ULONG PropertyBufferOffset;
};

typedef struct _NDIS_SYSTEM_PROCESSOR_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_PROCESSOR_VENDOR ProcessorVendor;
    ULONG NumPhysicalPackages;
    ULONG NumCores;
    ULONG NumCoresPerPhysicalPackage;
    ULONG MaxHyperThreadingCpusPerCore;
    ULONG RssBaseCpu;
    ULONG RssCpuCount;
    PUCHAR RssProcessors;
    struct _NDIS_PROCESSOR_INFO CpuInfo[64];
};

typedef struct _NDIS_SYSTEM_PROCESSOR_INFO_EX {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_PROCESSOR_VENDOR ProcessorVendor;
    ULONG NumSockets;
    ULONG NumCores;
    ULONG NumCoresPerSocket;
    ULONG MaxHyperThreadingProcsPerCore;
    ULONG ProcessorInfoOffset;
    ULONG NumberOfProcessors;
    ULONG ProcessorInfoEntrySize;
};

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Encapsulation;
    ULONG SupportIPv4 : 2;
    ULONG SupportIPv6 : 2;
    ULONG SupportIPv6ExtensionHeaders : 2;
    ULONG SupportSack : 2;
    ULONG CongestionAlgorithm : 4;
    ULONG TcpConnectionOffloadCapacity;
    ULONG Flags;
};

typedef struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO {
    struct {
        ULONG IsIPv4 : 1;
        ULONG IsIPv6 : 1;
        ULONG TcpChecksum : 1;
        ULONG UdpChecksum : 1;
        ULONG IpHeaderChecksum : 1;
        ULONG Reserved : 11;
        ULONG TcpHeaderOffset : 10;
    } Transmit;
    struct {
        ULONG TcpChecksumFailed : 1;
        ULONG UdpChecksumFailed : 1;
        ULONG IpChecksumFailed : 1;
        ULONG TcpChecksumSucceeded : 1;
        ULONG UdpChecksumSucceeded : 1;
        ULONG IpChecksumSucceeded : 1;
        ULONG Loopback : 1;
        ULONG TcpChecksumValueInvalid : 1;
        ULONG IpChecksumValueInvalid : 1;
    } Receive;
    PVOID Value;
};

typedef struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD {
     <unnamed-type-IPv4Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
        ULONG IpChecksum : 2;
    } IPv4Transmit;
     <unnamed-type-IPv4Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
        ULONG IpChecksum : 2;
    } IPv4Receive;
     <unnamed-type-IPv6Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
    } IPv6Transmit;
     <unnamed-type-IPv6Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
        ULONG TcpChecksum : 2;
        ULONG UdpChecksum : 2;
    } IPv6Receive;
};

typedef struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO {
    struct {
        ULONG NdisPacketChecksumV4 : 1;
        ULONG NdisPacketChecksumV6 : 1;
        ULONG NdisPacketTcpChecksum : 1;
        ULONG NdisPacketUdpChecksum : 1;
        ULONG NdisPacketIpChecksum : 1;
    } Transmit;
    struct {
        ULONG NdisPacketTcpChecksumFailed : 1;
        ULONG NdisPacketUdpChecksumFailed : 1;
        ULONG NdisPacketIpChecksumFailed : 1;
        ULONG NdisPacketTcpChecksumSucceeded : 1;
        ULONG NdisPacketUdpChecksumSucceeded : 1;
        ULONG NdisPacketIpChecksumSucceeded : 1;
        ULONG NdisPacketLoopback : 1;
    } Receive;
    ULONG Value;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO {
    struct {
        ULONG Unused : 30;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } Transmit;
    struct {
        ULONG MSS : 20;
        ULONG TcpHeaderOffset : 10;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } LsoV1Transmit;
    struct {
        ULONG TcpPayload : 30;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } LsoV1TransmitComplete;
    struct {
        ULONG MSS : 20;
        ULONG TcpHeaderOffset : 10;
        ULONG Type : 1;
        ULONG IPVersion : 1;
    } LsoV2Transmit;
    struct {
        ULONG Reserved : 30;
        ULONG Type : 1;
        ULONG Reserved2 : 1;
    } LsoV2TransmitComplete;
    PVOID Value;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG TcpOptions : 2;
        ULONG IpOptions : 2;
    } IPv4;
};

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG IpExtensionHeadersSupported : 2;
        ULONG TcpOptionsSupported : 2;
    } IPv6;
};

typedef struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD {
     <unnamed-type-IPv4>;
    struct {
        UCHAR Enabled;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        UCHAR Enabled;
    } IPv6;
};

typedef struct _NDIS_TCP_SEND_OFFLOADS_SUPPLEMENTAL_NET_BUFFER_LIST_INFO {
    struct {
        ULONG IsEncapsulatedPacket : 1;
        ULONG EncapsulatedPacketOffsetsValid : 1;
        ULONG InnerFrameOffset : 8;
        ULONG TransportIpHeaderRelativeOffset : 6;
        ULONG TcpHeaderRelativeOffset : 10;
        ULONG IsInnerIPv6 : 1;
        ULONG TcpOptionsPresent : 1;
        ULONG Reserved : 4;
    } EncapsulatedPacketOffsets;
    PVOID Value;
};

typedef struct _NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    ULONG TimeoutArrayLength;
    ULONG TimeoutArray[1];
};

typedef struct _NDIS_TIMER {
    struct _KTIMER Timer;
    struct _KDPC Dpc;
    VOID _NDIS_TIMER;
    VOID _NDIS_TIMER;
    struct _NDIS_TIMER *operator=;
    struct _NDIS_TIMER *operator=;
};

typedef struct _NDIS_TIMER_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG AllocationTag;
    PVOID TimerFunction;
    PVOID FunctionContext;
};

typedef struct _NDIS_TIMESTAMP_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG64 HardwareClockFrequencyHz;
    UCHAR CrossTimestamp;
    ULONG64 Reserved1;
    ULONG64 Reserved2;
    struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
};

typedef struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS {
    UCHAR PtpV2OverUdpIPv4EventMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv4AllMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv4EventMsgTransmitHw;
    UCHAR PtpV2OverUdpIPv4AllMsgTransmitHw;
    UCHAR PtpV2OverUdpIPv6EventMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv6AllMsgReceiveHw;
    UCHAR PtpV2OverUdpIPv6EventMsgTransmitHw;
    UCHAR PtpV2OverUdpIPv6AllMsgTransmitHw;
    UCHAR AllReceiveHw;
    UCHAR AllTransmitHw;
    UCHAR TaggedTransmitHw;
    UCHAR AllReceiveSw;
    UCHAR AllTransmitSw;
    UCHAR TaggedTransmitSw;
};

typedef struct _NDIS_VAR_DATA_DESC {
    USHORT Length;
    USHORT MaximumLength;
    ULONG64 Offset;
};

typedef struct _NDIS_WAN_FRAGMENT {
    UCHAR RemoteAddress[6];
    UCHAR LocalAddress[6];
};

typedef struct _NDIS_WAN_GET_STATS {
    UCHAR LocalAddress[6];
    ULONG BytesSent;
    ULONG BytesRcvd;
    ULONG FramesSent;
    ULONG FramesRcvd;
    ULONG CRCErrors;
    ULONG TimeoutErrors;
    ULONG AlignmentErrors;
    ULONG SerialOverrunErrors;
    ULONG FramingErrors;
    ULONG BufferOverrunErrors;
    ULONG BytesTransmittedUncompressed;
    ULONG BytesReceivedUncompressed;
    ULONG BytesTransmittedCompressed;
    ULONG BytesReceivedCompressed;
};

typedef struct _NDIS_WAN_LINE_DOWN {
    UCHAR RemoteAddress[6];
    UCHAR LocalAddress[6];
};

typedef struct _NDIS_WAN_LINE_UP {
    ULONG LinkSpeed;
    ULONG MaximumTotalSize;
    enum _NDIS_WAN_QUALITY Quality;
    USHORT SendWindow;
    UCHAR RemoteAddress[6];
    UCHAR LocalAddress[6];
    ULONG ProtocolBufferLength;
    PUCHAR ProtocolBuffer;
    USHORT ProtocolType;
    struct _UNICODE_STRING DeviceName;
};

typedef struct _NDIS_WAN_PROTOCOL_CAPS {
    ULONG Flags;
    ULONG Reserved;
};

typedef struct _NDIS_WDF_COMPLETE_ADD_PARAMS {
    union _NET_LUID_LH NetLuid;
    enum _NDIS_MEDIUM MediaType;
    struct _UNICODE_STRING BaseName;
};

typedef struct _NDIS_WDF_CX_CHARACTERISTICS {
    struct _NDIS_OBJECT_HEADER Header;
    PLONG EvtCxPowerReference;
    PVOID EvtCxPowerDereference;
    PVOID EvtCxPowerAoAcEngage;
    PLONG EvtCxPowerAoAcDisengage;
    struct _DEVICE_OBJECT **EvtCxGetDeviceObject;
    struct _DEVICE_OBJECT **EvtCxGetNextDeviceObject;
    PLONG EvtCxGetAssignedFdoName;
    PVOID *EvtCxGetNdisHandleFromDeviceObject;
    PVOID EvtCxUpdatePMParameters;
    PLONG EvtCxAllocateMiniportBlock;
    PVOID EvtCxMiniportCompleteAdd;
    PVOID EvtCxDeviceStartComplete;
    PLONG EvtCxMiniportDeviceReset;
    PLONG EvtCxMiniportQueryDeviceResetSupport;
};

typedef struct _NDIS_WLAN_BSSID {
    ULONG Length;
    UCHAR MacAddress[6];
    UCHAR Reserved[2];
    struct _NDIS_802_11_SSID Ssid;
    ULONG Privacy;
    LONG Rssi;
    enum _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
    struct _NDIS_802_11_CONFIGURATION Configuration;
    enum _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
    UCHAR SupportedRates[8];
};

typedef struct _NDIS_WLAN_BSSID_EX {
    ULONG Length;
    UCHAR MacAddress[6];
    UCHAR Reserved[2];
    struct _NDIS_802_11_SSID Ssid;
    ULONG Privacy;
    LONG Rssi;
    enum _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
    struct _NDIS_802_11_CONFIGURATION Configuration;
    enum _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
    UCHAR SupportedRates[16];
    ULONG IELength;
    UCHAR IEs[1];
};

typedef struct _NDIS_WMI_ENUM_ADAPTER {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    USHORT DeviceNameLength;
    CHAR DeviceName[1];
};

typedef struct _NDIS_WMI_EVENT_HEADER {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG IfIndex;
    union _NET_LUID_LH NetLuid;
    ULONG64 RequestId;
    ULONG PortNumber;
    ULONG DeviceNameLength;
    ULONG DeviceNameOffset;
    UCHAR Padding[4];
};

typedef struct _NDIS_WMI_GROUP_AFFINITY {
    ULONG64 Mask;
    USHORT Group;
    USHORT Reserved[3];
};

typedef struct _NDIS_WMI_IPSEC_OFFLOAD_V1 {
     <unnamed-type-Supported>;
    struct {
        ULONG Encapsulation;
        ULONG AhEspCombined;
        ULONG TransportTunnelCombined;
        ULONG IPv4Options;
        ULONG Flags;
    } Supported;
     <unnamed-type-IPv4AH>;
    struct {
        ULONG Md5;
        ULONG Sha_1;
        ULONG Transport;
        ULONG Tunnel;
        ULONG Send;
        ULONG Receive;
    } IPv4AH;
     <unnamed-type-IPv4ESP>;
    struct {
        ULONG Des;
        ULONG Reserved;
        ULONG TripleDes;
        ULONG NullEsp;
        ULONG Transport;
        ULONG Tunnel;
        ULONG Send;
        ULONG Receive;
    } IPv4ESP;
};

typedef struct _NDIS_WMI_METHOD_HEADER {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    union _NET_LUID_LH NetLuid;
    ULONG64 RequestId;
    ULONG Timeout;
    UCHAR Padding[4];
};

typedef struct _NDIS_WMI_NDK_CAPABILITIES {
    ULONG MaxQpCount;
    ULONG MaxCqCount;
    ULONG MaxMrCount;
    ULONG MaxPdCount;
    ULONG MaxInboundReadLimit;
    ULONG MaxOutboundReadLimit;
    ULONG MaxMwCount;
    ULONG MaxSrqCount;
    ULONG64 MissingCounterMask;
    struct _NDK_WMI_ADAPTER_INFO NdkInfo;
};

typedef struct _NDIS_WMI_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD Checksum;
    struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
    struct _NDIS_WMI_IPSEC_OFFLOAD_V1 IPsecV1;
    struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
    ULONG Flags;
    struct _NDIS_IPSEC_OFFLOAD_V2 IPsecV2;
    struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD Rsc;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD EncapsulatedPacketTaskOffloadGre;
};

typedef struct _NDIS_WMI_PM_ACTIVE_CAPABILITIES {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_PM_CAPABILITY_STATE WakeOnPattern;
    enum _NDIS_PM_CAPABILITY_STATE WakeOnMagicPacket;
    enum _NDIS_PM_CAPABILITY_STATE DeviceSleepOnDisconnect;
    enum _NDIS_PM_CAPABILITY_STATE PMARPOffload;
    enum _NDIS_PM_CAPABILITY_STATE PMNSOffload;
    enum _NDIS_PM_CAPABILITY_STATE PMWiFiRekeyOffload;
};

typedef struct _NDIS_WMI_PM_ADMIN_CONFIG {
    struct _NDIS_OBJECT_HEADER Header;
    enum _NDIS_PM_ADMIN_CONFIG_STATE WakeOnPattern;
    enum _NDIS_PM_ADMIN_CONFIG_STATE WakeOnMagicPacket;
    enum _NDIS_PM_ADMIN_CONFIG_STATE DeviceSleepOnDisconnect;
    enum _NDIS_PM_ADMIN_CONFIG_STATE PMARPOffload;
    enum _NDIS_PM_ADMIN_CONFIG_STATE PMNSOffload;
    enum _NDIS_PM_ADMIN_CONFIG_STATE PMWiFiRekeyOffload;
};

typedef struct _NDIS_WMI_RECEIVE_QUEUE_INFO {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_QUEUE_TYPE QueueType;
    ULONG QueueId;
    ULONG QueueGroupId;
    enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
    struct _NDIS_WMI_GROUP_AFFINITY ProcessorAffinity;
    ULONG NumSuggestedReceiveBuffers;
    ULONG MSIXTableEntry;
    ULONG LookaheadSize;
    struct _IF_COUNTED_STRING_LH VmName;
    struct _IF_COUNTED_STRING_LH QueueName;
};

typedef struct _NDIS_WMI_RECEIVE_QUEUE_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    enum _NDIS_RECEIVE_QUEUE_TYPE QueueType;
    ULONG QueueId;
    ULONG QueueGroupId;
    struct _NDIS_WMI_GROUP_AFFINITY ProcessorAffinity;
    ULONG NumSuggestedReceiveBuffers;
    ULONG MSIXTableEntry;
    ULONG LookaheadSize;
    struct _IF_COUNTED_STRING_LH VmName;
    struct _IF_COUNTED_STRING_LH QueueName;
};

typedef struct _NDIS_WMI_SET_HEADER {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    union _NET_LUID_LH NetLuid;
    ULONG64 RequestId;
    ULONG Timeout;
    UCHAR Padding[4];
};

typedef struct _NDIS_WMI_TCP_CONNECTION_OFFLOAD {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Encapsulation;
    ULONG SupportIPv4;
    ULONG SupportIPv6;
    ULONG SupportIPv6ExtensionHeaders;
    ULONG SupportSack;
    ULONG TcpConnectionOffloadCapacity;
    ULONG Flags;
};

typedef struct _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD {
     <unnamed-type-IPv4Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported;
        ULONG TcpOptionsSupported;
        ULONG TcpChecksum;
        ULONG UdpChecksum;
        ULONG IpChecksum;
    } IPv4Transmit;
     <unnamed-type-IPv4Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpOptionsSupported;
        ULONG TcpOptionsSupported;
        ULONG TcpChecksum;
        ULONG UdpChecksum;
        ULONG IpChecksum;
    } IPv4Receive;
     <unnamed-type-IPv6Transmit>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported;
        ULONG TcpOptionsSupported;
        ULONG TcpChecksum;
        ULONG UdpChecksum;
    } IPv6Transmit;
     <unnamed-type-IPv6Receive>;
    struct {
        ULONG Encapsulation;
        ULONG IpExtensionHeadersSupported;
        ULONG TcpOptionsSupported;
        ULONG TcpChecksum;
        ULONG UdpChecksum;
    } IPv6Receive;
};

typedef struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG TcpOptions;
        ULONG IpOptions;
    } IPv4;
};

typedef struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 {
     <unnamed-type-IPv4>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
    } IPv4;
     <unnamed-type-IPv6>;
    struct {
        ULONG Encapsulation;
        ULONG MaxOffLoadSize;
        ULONG MinSegmentCount;
        ULONG IpExtensionHeadersSupported;
        ULONG TcpOptionsSupported;
    } IPv6;
};

typedef struct _NDIS_WORK_ITEM {
    PVOID Context;
    PVOID Routine;
    UCHAR WrapperReserved[64];
};

typedef struct _NDIS_WRAPPER_HANDLE {
};

typedef struct _NDK_ADAPTER_INFO {
    struct NDK_VERSION Version;
    ULONG VendorId;
    ULONG DeviceId;
    ULONG64 MaxRegistrationSize;
    ULONG64 MaxWindowSize;
    ULONG FRMRPageCount;
    ULONG MaxInitiatorRequestSge;
    ULONG MaxReceiveRequestSge;
    ULONG MaxReadRequestSge;
    ULONG MaxTransferLength;
    ULONG MaxInlineDataSize;
    ULONG MaxInboundReadLimit;
    ULONG MaxOutboundReadLimit;
    ULONG MaxReceiveQueueDepth;
    ULONG MaxInitiatorQueueDepth;
    ULONG MaxSrqDepth;
    ULONG MaxCqDepth;
    ULONG LargeRequestThreshold;
    ULONG MaxCallerData;
    ULONG MaxCalleeData;
    ULONG AdapterFlags;
    enum _NDK_RDMA_TECHNOLOGY RdmaTechnology;
};

typedef struct _NDK_WMI_ADAPTER_INFO {
    struct NDK_VERSION Version;
    ULONG VendorId;
    ULONG DeviceId;
    ULONG64 MaxRegistrationSize;
    ULONG64 MaxWindowSize;
    ULONG FRMRPageCount;
    ULONG MaxInitiatorRequestSge;
    ULONG MaxReceiveRequestSge;
    ULONG MaxReadRequestSge;
    ULONG MaxTransferLength;
    ULONG MaxInlineDataSize;
    ULONG MaxInboundReadLimit;
    ULONG MaxOutboundReadLimit;
    ULONG MaxReceiveQueueDepth;
    ULONG MaxInitiatorQueueDepth;
    ULONG MaxSrqDepth;
    ULONG MaxCqDepth;
    ULONG LargeRequestThreshold;
    ULONG MaxCallerData;
    ULONG MaxCalleeData;
    ULONG AdapterFlags;
    enum _NDK_RDMA_TECHNOLOGY RdmaTechnology;
};

typedef struct _NETADAPTERCX_GLOBAL_TRIAGE_BLOCK {
    ULONG Signature;
    USHORT Version;
    USHORT Size;
    USHORT StateMachineEngineOffset;
    USHORT NxDeviceAdapterCollectionOffset;
    USHORT NxAdapterCollectionCountOffset;
    USHORT NxAdapterLinkageOffset;
};

typedef struct _NETFUNCTIONS {
    struct NETADAPTER_INIT **pfnNetDefaultAdapterInitAllocate;
    struct NETADAPTER_INIT **pfnNetAdapterInitAllocate;
    PVOID pfnNetAdapterInitFree;
    PVOID pfnNetAdapterInitSetDatapathCallbacks;
    PVOID pfnNetAdapterInitSetNetRequestAttributes;
    PVOID pfnNetAdapterInitSetNetPowerSettingsAttributes;
    PLONG pfnNetAdapterDeviceInitConfig;
    PLONG pfnNetAdapterCreate;
    PLONG pfnNetAdapterStart;
    PVOID pfnNetAdapterStop;
    PVOID pfnNetAdapterSetLinkLayerCapabilities;
    PVOID pfnNetAdapterSetLinkLayerMtuSize;
    PVOID pfnNetAdapterSetPowerCapabilities;
    PVOID pfnNetAdapterSetDataPathCapabilities;
    PVOID pfnNetAdapterSetCurrentLinkState;
    PVOID *pfnNetAdapterWdmGetNdisHandle;
    union _NET_LUID_LH *pfnNetAdapterGetNetLuid;
    PLONG pfnNetAdapterOpenConfiguration;
    struct NETPOWERSETTINGS__ **pfnNetAdapterGetPowerSettings;
    PVOID *pfnNetAdapterDriverWdmGetHandle;
    PVOID pfnNetAdapterSetPermanentLinkLayerAddress;
    PVOID pfnNetAdapterSetCurrentLinkLayerAddress;
    PVOID pfnNetAdapterOffloadSetChecksumCapabilities;
    PVOID pfnNetAdapterOffloadSetLsoCapabilities;
    struct NETADAPTER__ **pfnNetAdapterInitGetCreatedAdapter;
    struct NETADAPTEREXT_INIT **pfnNetAdapterExtensionInitAllocate;
    PVOID pfnNetAdapterExtensionInitSetNetRequestPreprocessCallback;
    PVOID pfnNetAdapterDispatchPreprocessedNetRequest;
    PVOID *pfnNetAdapterGetParent;
    PULONG pfnNetAdapterGetLinkLayerMtuSize;
    PVOID *pfnNetPacketGetTypedContext;
    PVOID *pfnNetPacketGetContextFromToken;
    PVOID pfnNetConfigurationClose;
    PLONG pfnNetConfigurationOpenSubConfiguration;
    PLONG pfnNetConfigurationQueryUlong;
    PLONG pfnNetConfigurationQueryString;
    PLONG pfnNetConfigurationQueryMultiString;
    PLONG pfnNetConfigurationQueryBinary;
    PLONG pfnNetConfigurationQueryLinkLayerAddress;
    PLONG pfnNetConfigurationAssignUlong;
    PLONG pfnNetConfigurationAssignUnicodeString;
    PLONG pfnNetConfigurationAssignMultiString;
    PLONG pfnNetConfigurationAssignBinary;
    PLONG pfnNetDeviceOpenConfiguration;
    PVOID pfnNetDeviceSetResetCallback;
    PLONG pfnNetAdapterRegisterPacketExtension;
    PLONG pfnNetAdapterQueryRegisteredPacketExtension;
    PLONG pfnNetTxQueueInitAddPacketExtension;
    PLONG pfnNetRxQueueInitAddPacketExtension;
    PULONG pfnNetPowerSettingsGetWakePatternCount;
    PULONG pfnNetPowerSettingsGetWakePatternCountForType;
    struct _NDIS_PM_WOL_PATTERN **pfnNetPowerSettingsGetWakePattern;
    PUCHAR pfnNetPowerSettingsIsWakePatternEnabled;
    PULONG pfnNetPowerSettingsGetEnabledWakeUpFlags;
    PULONG pfnNetPowerSettingsGetEnabledWakePatternFlags;
    PULONG pfnNetPowerSettingsGetEnabledProtocolOffloadFlags;
    PULONG pfnNetPowerSettingsGetEnabledMediaSpecificWakeUpEvents;
    PULONG pfnNetPowerSettingsGetProtocolOffloadCount;
    PULONG pfnNetPowerSettingsGetProtocolOffloadCountForType;
    struct _NDIS_PM_PROTOCOL_OFFLOAD **pfnNetPowerSettingsGetProtocolOffload;
    PUCHAR pfnNetPowerSettingsIsProtocolOffloadEnabled;
    PVOID pfnNetAdapterSetReceiveScalingCapabilities;
    PLONG pfnNetRequestRetrieveInputOutputBuffer;
    struct _NDIS_OID_REQUEST **pfnNetRequestWdmGetNdisOidRequest;
    PVOID pfnNetRequestCompleteWithoutInformation;
    PVOID pfnNetRequestSetDataComplete;
    PVOID pfnNetRequestQueryDataComplete;
    PVOID pfnNetRequestMethodComplete;
    PVOID pfnNetRequestSetBytesNeeded;
    PULONG pfnNetRequestGetId;
    PULONG pfnNetRequestGetPortNumber;
    PULONG pfnNetRequestGetSwitchId;
    PULONG pfnNetRequestGetVPortId;
    enum _NDIS_REQUEST_TYPE *pfnNetRequestGetType;
    struct NETADAPTER__ **pfnNetRequestGetAdapter;
    PLONG pfnNetRequestQueueCreate;
    struct NETADAPTER__ **pfnNetRequestQueueGetAdapter;
    PLONG pfnNetRxQueueCreate;
    PVOID pfnNetRxQueueNotifyMoreReceivedPacketsAvailable;
    PULONG pfnNetRxQueueInitGetQueueId;
    struct _NET_DATAPATH_DESCRIPTOR **pfnNetRxQueueGetDatapathDescriptor;
    struct NET_PACKET_CONTEXT_TOKEN **pfnNetRxQueueGetPacketContextToken;
    PLONG pfnNetRxQueueInitAddPacketContextAttributes;
    PULONG64 pfnNetRxQueueGetPacketExtensionOffset;
    PLONG pfnNetTxQueueCreate;
    PVOID pfnNetTxQueueNotifyMoreCompletedPacketsAvailable;
    PULONG pfnNetTxQueueInitGetQueueId;
    struct _NET_DATAPATH_DESCRIPTOR **pfnNetTxQueueGetDatapathDescriptor;
    struct NET_PACKET_CONTEXT_TOKEN **pfnNetTxQueueGetPacketContextToken;
    PLONG pfnNetTxQueueInitAddPacketContextAttributes;
    PULONG64 pfnNetTxQueueGetPacketExtensionOffset;
};

typedef struct _NETVERSION {
    ULONG Size;
    ULONG FuncCount;
    struct _NETFUNCTIONS Functions;
};

typedef struct _NETWORK_ADDRESS {
    USHORT AddressLength;
    USHORT AddressType;
    UCHAR Address[1];
};

typedef struct _NETWORK_ADDRESS_IP {
    USHORT sin_port;
    ULONG in_addr;
    UCHAR sin_zero[8];
};

typedef struct _NETWORK_ADDRESS_IP6 {
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    USHORT sin6_addr[8];
    ULONG sin6_scope_id;
};

typedef struct _NETWORK_ADDRESS_IPX {
    ULONG NetworkAddress;
    UCHAR NodeAddress[6];
    USHORT Socket;
};

typedef struct _NETWORK_ADDRESS_LIST {
    LONG AddressCount;
    USHORT AddressType;
    struct _NETWORK_ADDRESS Address[1];
};

typedef struct _NETWORK_APP_INSTANCE_EA {
    struct _GUID AppInstanceID;
    ULONG CsvFlags;
};

typedef struct _NETWORK_LOADER_BLOCK {
    PUCHAR DHCPServerACK;
    ULONG DHCPServerACKLength;
    PUCHAR BootServerReplyPacket;
    ULONG BootServerReplyPacketLength;
};

typedef struct _NET_ADAPTER_DATAPATH_CALLBACKS {
    ULONG Size;
    PLONG EvtAdapterCreateTxQueue;
    PLONG EvtAdapterCreateRxQueue;
};

typedef struct _NET_ADAPTER_DMA_CAPABILITIES {
    ULONG Size;
    struct WDFDMAENABLER__ *DmaEnabler;
    union _LARGE_INTEGER MaximumPhysicalAddress;
    enum _WDF_TRI_STATE CacheEnabled;
    ULONG PreferredNode;
};

typedef struct _NET_ADAPTER_LINK_LAYER_CAPABILITIES {
    ULONG Size;
    enum _NET_PACKET_FILTER_TYPES_FLAGS SupportedPacketFilters;
    ULONG MaxMulticastListSize;
    enum _NET_ADAPTER_STATISTICS_FLAGS SupportedStatistics;
    ULONG64 MaxTxLinkSpeed;
    ULONG64 MaxRxLinkSpeed;
};

typedef struct _NET_ADAPTER_LINK_STATE {
    ULONG Size;
    ULONG64 TxLinkSpeed;
    ULONG64 RxLinkSpeed;
    enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
    enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
    enum _NET_ADAPTER_PAUSE_FUNCTIONS SupportedPauseFunctions;
    enum _NET_ADAPTER_AUTO_NEGOTIATION_FLAGS AutoNegotiationFlags;
};

typedef struct _NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES {
    ULONG Size;
    UCHAR IPv4;
    UCHAR Tcp;
    UCHAR Udp;
};

typedef struct _NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES {
    ULONG Size;
    UCHAR IPv4;
    UCHAR IPv6;
    ULONG64 MaximumOffloadSize;
    ULONG64 MinimumSegmentCount;
};

typedef struct _NET_ADAPTER_POWER_CAPABILITIES {
    ULONG Size;
    enum _NET_ADAPTER_POWER_FLAGS Flags;
    enum _NET_ADAPTER_WAKE_PATTERN_FLAGS SupportedWakePatterns;
    ULONG NumTotalWakePatterns;
    ULONG MaxWakePatternSize;
    ULONG MaxWakePatternOffset;
    ULONG MaxWakePacketSaveBuffer;
    enum _NET_ADAPTER_PROTOCOL_OFFLOADS_FLAGS SupportedProtocolOffloads;
    ULONG NumArpOffloadIPv4Addresses;
    ULONG NumNSOffloadIPv6Addresses;
    enum _NET_ADAPTER_WAKEUP_EVENTS_FLAGS SupportedWakeUpEvents;
    enum _NET_ADAPTER_MEDIA_SPECIFIC_WAKEUP_EVENTS_FLAGS SupportedMediaSpecificWakeUpEvents;
    PLONG EvtAdapterPreviewWakePattern;
    PLONG EvtAdapterPreviewProtocolOffload;
    enum _WDF_TRI_STATE ManageS0IdlePowerReferences;
};

typedef struct _NET_ADAPTER_RECEIVE_SCALING_CAPABILITIES {
    ULONG Size;
    ULONG64 NumberOfQueues;
    ULONG64 IndirectionTableSize;
    ULONG64 UnhashedTargetIndex;
    enum _NET_ADAPTER_RECEIVE_SCALING_UNHASHED_TARGET_TYPE UnhashedTargetType;
    enum _NET_ADAPTER_RECEIVE_SCALING_HASH_TYPE ReceiveScalingHashTypes;
    enum _NET_ADAPTER_RECEIVE_SCALING_PROTOCOL_TYPE ReceiveScalingProtocolTypes;
     _RECEIEVE_SCALING_ENCAPSULATION;
    struct _NET_ADAPTER_RECEIVE_SCALING_CAPABILITIES::_RECEIEVE_SCALING_ENCAPSULATION ReceiveScalingEncapsulationTypes;
    UCHAR SynchronizeSetIndirectionEntries;
    PLONG EvtAdapterReceiveScalingEnable;
    PVOID EvtAdapterReceiveScalingDisable;
    PLONG EvtAdapterReceiveScalingSetHashSecretKey;
    PLONG EvtAdapterReceiveScalingSetIndirectionEntries;
};

typedef struct _NET_ADAPTER_RECEIVE_SCALING_CAPABILITIES::_RECEIEVE_SCALING_ENCAPSULATION {
    enum _NET_ADAPTER_RECEIVE_SCALING_ENCAPSULATION_TYPE Outer;
    enum _NET_ADAPTER_RECEIVE_SCALING_ENCAPSULATION_TYPE Inner;
};

typedef struct _NET_ADAPTER_RECEIVE_SCALING_HASH_SECRET_KEY {
    PUCHAR Key;
    ULONG64 Length;
};

typedef struct _NET_ADAPTER_RECEIVE_SCALING_INDIRECTION_ENTRIES {
    struct _NET_ADAPTER_RECEIVE_SCALING_INDIRECTION_ENTRY *Entries;
    ULONG64 Length;
};

typedef struct _NET_ADAPTER_RECEIVE_SCALING_INDIRECTION_ENTRY {
    struct NETPACKETQUEUE__ *Queue;
    LONG Status;
    ULONG Index;
};

typedef struct _NET_ADAPTER_RX_CAPABILITIES {
    ULONG Size;
    enum _NET_RX_FRAGMENT_BUFFER_ALLOCATION_MODE AllocationMode;
    enum _NET_RX_FRAGMENT_BUFFER_ATTACHMENT_MODE AttachmentMode;
    ULONG FragmentRingNumberOfElementsHint;
    ULONG64 MaximumFragmentBufferSize;
    ULONG64 MaximumNumberOfQueues;
    PVOID EvtAdapterReturnRxBuffer;
    enum _NET_MEMORY_MAPPING_REQUIREMENT MappingRequirement;
    ULONG64 FragmentBufferAlignment;
    struct _NET_ADAPTER_DMA_CAPABILITIES *DmaCapabilities;
};

typedef struct _NET_ADAPTER_TX_CAPABILITIES {
    ULONG Size;
    enum _NET_MEMORY_MAPPING_REQUIREMENT MappingRequirement;
    ULONG64 MaximumFragmentBufferSize;
    ULONG64 PayloadBackfill;
    ULONG64 MaximumNumberOfFragments;
    ULONG64 FragmentBufferAlignment;
    ULONG FragmentRingNumberOfElementsHint;
    ULONG64 MaximumNumberOfQueues;
    struct _NET_ADAPTER_DMA_CAPABILITIES *DmaCapabilities;
};

typedef struct _NET_BUFFER {
    struct _NET_BUFFER *Next;
    struct _MDL *CurrentMdl;
    ULONG CurrentMdlOffset;
    ULONG DataLength;
    ULONG64 stDataLength;
    struct _MDL *MdlChain;
    ULONG DataOffset;
    union _SLIST_HEADER Link;
    union _NET_BUFFER_HEADER NetBufferHeader;
    USHORT ChecksumBias;
    USHORT Reserved;
    PVOID NdisPoolHandle;
    PVOID NdisReserved[2];
    PVOID ProtocolReserved[6];
    PVOID MiniportReserved[4];
    union _LARGE_INTEGER DataPhysicalAddress;
    struct _NET_BUFFER_SHARED_MEMORY *SharedMemoryInfo;
    struct _SCATTER_GATHER_LIST *ScatterGatherList;
};

typedef struct _NET_BUFFER_DATA {
    struct _NET_BUFFER *Next;
    struct _MDL *CurrentMdl;
    ULONG CurrentMdlOffset;
    union _NET_BUFFER_DATA_LENGTH NbDataLength;
    struct _MDL *MdlChain;
    ULONG DataOffset;
};

typedef struct _NET_BUFFER_LIST {
    struct _NET_BUFFER_LIST *Next;
    struct _NET_BUFFER *FirstNetBuffer;
    union _SLIST_HEADER Link;
    union _NET_BUFFER_LIST_HEADER NetBufferListHeader;
    struct _NET_BUFFER_LIST_CONTEXT *Context;
    struct _NET_BUFFER_LIST *ParentNetBufferList;
    PVOID NdisPoolHandle;
    PVOID NdisReserved[2];
    PVOID ProtocolReserved[4];
    PVOID MiniportReserved[2];
    PVOID Scratch;
    PVOID SourceHandle;
    ULONG NblFlags;
    LONG ChildRefCount;
    ULONG Flags;
    LONG Status;
    ULONG NdisReserved2;
    PVOID NetBufferListInfo[27];
};

typedef struct _NET_BUFFER_LIST_CONTEXT {
    struct _NET_BUFFER_LIST_CONTEXT *Next;
    USHORT Size;
    USHORT Offset;
    UCHAR ContextData[0];
};

typedef struct _NET_BUFFER_LIST_DATA {
    struct _NET_BUFFER_LIST *Next;
    struct _NET_BUFFER *FirstNetBuffer;
};

typedef struct _NET_BUFFER_LIST_POOL_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    UCHAR ProtocolId;
    UCHAR fAllocateNetBuffer;
    USHORT ContextSize;
    ULONG PoolTag;
    ULONG DataSize;
};

typedef struct _NET_BUFFER_LIST_TIMESTAMP {
    ULONG64 Timestamp;
};

typedef struct _NET_BUFFER_POOL_PARAMETERS {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PoolTag;
    ULONG DataSize;
};

typedef struct _NET_BUFFER_SHARED_MEMORY {
    struct _NET_BUFFER_SHARED_MEMORY *NextSharedMemorySegment;
    ULONG SharedMemoryFlags;
    PVOID SharedMemoryHandle;
    ULONG SharedMemoryOffset;
    ULONG SharedMemoryLength;
};

typedef struct _NET_CLIENT_ADAPTER_DATAPATH_CAPABILITIES {
    enum _NET_CLIENT_MEMORY_MANAGEMENT_MODE RxMemoryManagementMode;
    struct _NET_CLIENT_MEMORY_CONSTRAINTS TxMemoryConstraints;
    struct _NET_CLIENT_MEMORY_CONSTRAINTS RxMemoryConstraints;
    ULONG64 MaximumTxFragmentSize;
    ULONG64 MaximumRxFragmentSize;
    ULONG64 MaximumNumberOfTxFragments;
    ULONG64 TxPayloadBackfill;
    ULONG64 MaximumNumberOfTxQueues;
    ULONG64 MaximumNumberOfRxQueues;
    ULONG PreferredTxFragmentRingSize;
    ULONG PreferredRxFragmentRingSize;
    ULONG NominalMtu;
    ULONG MtuWithLso;
    ULONG MtuWithRsc;
    ULONG64 NominalMaxTxLinkSpeed;
    ULONG64 NominalMaxRxLinkSpeed;
    UCHAR FlushBuffers;
};

typedef struct _NET_CLIENT_ADAPTER_DISPATCH {
    ULONG Size;
    PVOID SetDeviceFailed;
    PVOID GetProperties;
    PVOID GetDatapathCapabilities;
    PVOID GetReceiveScalingCapabilities;
    PLONG CreateTxQueue;
    PLONG CreateRxQueue;
    PVOID DestroyQueue;
    PVOID ReturnRxBuffer;
    PLONG RegisterPacketExtension;
    PLONG QueryRegisteredPacketExtension;
    struct _NET_CLIENT_ADAPTER_RECEIVE_SCALING_DISPATCH ReceiveScalingDispatch;
    struct _NET_CLIENT_ADAPTER_OFFLOAD_DISPATCH OffloadDispatch;
};

typedef struct _NET_CLIENT_ADAPTER_OFFLOAD_DISPATCH {
    PVOID GetChecksumHardwareCapabilities;
    PVOID GetChecksumDefaultCapabilities;
    PVOID SetChecksumActiveCapabilities;
    PVOID GetLsoHardwareCapabilities;
    PVOID GetLsoDefaultCapabilities;
    PVOID SetLsoActiveCapabilities;
};

typedef struct _NET_CLIENT_ADAPTER_PROPERTIES {
    enum _NDIS_MEDIUM MediaType;
    union _NET_LUID_LH NetLuid;
    UCHAR DriverIsVerifying;
    PVOID NdisAdapterHandle;
    PVOID NblDispatcher;
};

typedef struct _NET_CLIENT_ADAPTER_RECEIVE_SCALING_CAPABILITIES {
    ULONG64 NumberOfIndirectionQueues;
    ULONG64 NumberOfIndirectionTableEntries;
};

typedef struct _NET_CLIENT_ADAPTER_RECEIVE_SCALING_DISPATCH {
    PLONG Enable;
    PVOID Disable;
    PLONG SetIndirectionEntries;
    PLONG SetHashSecretKey;
};

typedef struct _NET_CLIENT_BUFFER_POOL_CONFIG {
    struct _NET_CLIENT_MEMORY_CONSTRAINTS *MemoryConstraints;
    ULONG64 BufferCount;
    ULONG64 BufferSize;
    ULONG64 BufferAlignmentOffset;
    ULONG64 BufferAlignment;
    ULONG PreferredNode;
    enum _NET_CLIENT_BUFFER_POOL_FLAGS Flag;
};

typedef struct _NET_CLIENT_BUFFER_POOL_DISPATCH {
    ULONG Size;
    PVOID NetClientDestroyBufferPool;
    PULONG NetClientAllocateBuffers;
    PVOID NetClientFreeBuffers;
};

typedef struct _NET_CLIENT_CONTROL_DISPATCH {
    ULONG Size;
    PVOID CreateDatapath;
    PVOID DestroyDatapath;
    PVOID StartDatapath;
    PVOID StopDatapath;
    PUCHAR NdisOidRequestHandler;
    PUCHAR NdisDirectOidRequestHandler;
    PUCHAR NdisSynchronousOidRequestHandler;
    PLONG OffloadInitialize;
};

typedef struct _NET_CLIENT_DISPATCH {
    ULONG Size;
    PLONG NetClientCreateBufferPool;
    PULONG NetClientQueryDriverConfigurationUlong;
    PUCHAR NetClientQueryDriverConfigurationBoolean;
};

typedef struct _NET_CLIENT_MEMORY_CONSTRAINTS {
    enum _NET_CLIENT_MEMORY_MAPPING_REQUIREMENT MappingRequirement;
    ULONG64 AlignmentRequirement;
     DMA;
    struct _NET_CLIENT_MEMORY_CONSTRAINTS::DMA Dma;
};

typedef struct _NET_CLIENT_MEMORY_CONSTRAINTS::DMA {
    PVOID DmaAdapter;
    PVOID PhysicalDeviceObject;
    union _LARGE_INTEGER MaximumPhysicalAddress;
    enum NET_CLIENT_TRI_STATE CacheEnabled;
    ULONG PreferredNode;
};

typedef struct _NET_CLIENT_OFFLOAD_CHECKSUM_CAPABILITIES {
    ULONG Size;
    UCHAR IPv4;
    UCHAR Tcp;
    UCHAR Udp;
};

typedef struct _NET_CLIENT_OFFLOAD_LSO_CAPABILITIES {
    ULONG Size;
    UCHAR IPv4;
    UCHAR IPv6;
    ULONG64 MaximumOffloadSize;
    ULONG64 MinimumSegmentCount;
};

typedef struct _NET_CLIENT_PACKET_EXTENSION {
    ULONG Size;
    PWCHAR Name;
    ULONG Version;
    ULONG Alignment;
    ULONG64 ExtensionSize;
};

typedef struct _NET_CLIENT_QUEUE_CONFIG {
    ULONG Size;
    ULONG NumberOfPackets;
    ULONG NumberOfFragments;
    struct _NET_CLIENT_PACKET_EXTENSION *PacketExtensions;
    ULONG64 NumberOfPacketExtensions;
};

typedef struct _NET_CLIENT_QUEUE_DISPATCH {
    ULONG Size;
    PVOID Start;
    PVOID Stop;
    PVOID Advance;
    PVOID Cancel;
    PVOID SetArmed;
    PULONG64 GetPacketExtensionOffset;
    struct _NET_DATAPATH_DESCRIPTOR **GetNetDatapathDescriptor;
};

typedef struct _NET_CLIENT_QUEUE_NOTIFY_DISPATCH {
    ULONG Size;
    PVOID Notify;
};

typedef struct _NET_CLIENT_RECEIVE_SCALING_HASH_SECRET_KEY {
    PUCHAR Key;
    ULONG64 Length;
};

typedef struct _NET_CLIENT_RECEIVE_SCALING_INDIRECTION_ENTRIES {
    struct _NET_CLIENT_RECEIVE_SCALING_INDIRECTION_ENTRY *Entries;
    ULONG64 Length;
};

typedef struct _NET_CLIENT_RECEIVE_SCALING_INDIRECTION_ENTRY {
    struct NET_CLIENT_QUEUE__ *Queue;
    LONG Status;
    ULONG Index;
};

typedef struct _NET_DATAPATH_DESCRIPTOR {
    struct _NET_RING_BUFFER *RingBuffer[2];
};

typedef struct _NET_DEVICE_PNP_EVENT {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    enum _NDIS_DEVICE_PNP_EVENT DevicePnPEvent;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    UCHAR NdisReserved[16];
};

typedef struct _NET_DRIVER_GLOBALS {
    ULONG Unused;
};

typedef struct _NET_IF_ALIAS_LH {
    USHORT ifAliasLength;
    USHORT ifAliasOffset;
};

typedef struct _NET_IF_INFORMATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG Flags;
    struct _NET_PHYSICAL_LOCATION_LH PhysicalLocation;
    ULONG WanTunnelType;
    ULONG PortNumber;
    enum _NET_IF_ACCESS_TYPE AccessType;
    enum _NET_IF_DIRECTION_TYPE DirectionType;
    enum _NET_IF_CONNECTION_TYPE ConnectionType;
    UCHAR ifConnectorPresent;
    USHORT PhysAddressLength;
    USHORT PhysAddressOffset;
    USHORT PermanentPhysAddressOffset;
    USHORT FriendlyNameLength;
    USHORT FriendlyNameOffset;
    struct _GUID InterfaceGuid;
    struct _GUID NetworkGuid;
    ULONG SupportedStatistics;
    enum _NDIS_MEDIUM MediaType;
    enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
};

typedef struct _NET_IF_RCV_ADDRESS_LH {
    enum _NET_IF_RCV_ADDRESS_TYPE ifRcvAddressType;
    USHORT ifRcvAddressLength;
    USHORT ifRcvAddressOffset;
};

typedef struct _NET_PACKET {
    ULONG FragmentOffset;
    USHORT FragmentCount;
    struct _NET_PACKET_LAYOUT Layout;
    UCHAR IgnoreThisPacket : 1;
    UCHAR AdvancedOffloadRequested : 1;
    UCHAR Completed : 1;
    UCHAR NetPacketReserved0 : 5;
    ULONG NetPacketReserved1;
};

typedef struct _NET_PACKET_8021Q_HEADER {
    USHORT UserPriority : 3;
    USHORT CanonicalFormatId : 1;
    USHORT VlanId : 12;
};

typedef struct _NET_PACKET_ADVANCED_OFFLOAD {
    USHORT InsertVlanHeader : 1;
    USHORT InsertNestedVlanHeader : 1;
    USHORT InsertEncapsulationHeader : 4;
    USHORT Reserved1 : 10;
    struct _NET_PACKET_LAYOUT EncapsulatedLayout;
    struct _NET_PACKET_CHECKSUM EncapsulatedChecksum;
    struct _NET_PACKET_8021Q_HEADER VlanHeader;
    struct _NET_PACKET_8021Q_HEADER NestedVlanHeader;
    ULONG TcpMss : 20;
    ULONG Reserved2 : 12;
    ULONG VirtualSubnetId : 24;
    ULONG Reserved3 : 8;
};

typedef struct _NET_PACKET_CHECKSUM {
    UCHAR Layer2 : 2;
    UCHAR Layer3 : 2;
    UCHAR Layer4 : 2;
    UCHAR Reserved : 2;
};

typedef struct _NET_PACKET_CONTEXT_ATTRIBUTES {
    ULONG Size;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *ContextTypeInfo;
};

typedef struct _NET_PACKET_CONTEXT_TOKEN_INTERNAL {
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *ContextTypeInfo;
    ULONG Offset;
    ULONG Size;
};

typedef struct _NET_PACKET_EXTENSION {
    ULONG Size;
    PWCHAR Name;
    ULONG Version;
    ULONG Alignment;
    ULONG64 ExtensionSize;
};

typedef struct _NET_PACKET_EXTENSION_QUERY {
    ULONG Size;
    PWCHAR Name;
    ULONG Version;
};

typedef struct _NET_PACKET_FRAGMENT {
    ULONG64 OsReserved_Bounced : 1;
    ULONG64 Reserved : 63;
    PVOID RxBufferReturnContext;
    union {
        struct _MDL *Mdl;
        union _LARGE_INTEGER DmaLogicalAddress;
        ULONG64 AsInteger;
    } Mapping;
    PVOID VirtualAddress;
    ULONG64 ValidLength : 26;
    ULONG64 Capacity : 26;
    ULONG64 Offset : 10;
    ULONG64 NetPacketFragmentReserved1 : 1;
    ULONG64 Scratch : 1;
};

typedef struct _NET_PACKET_LARGE_SEND_SEGMENTATION {
    struct {
        ULONG Mss : 20;
        ULONG Reserved0 : 12;
    } TCP;
};

typedef struct _NET_PACKET_LAYOUT {
    UCHAR Layer2Type : 4;
    UCHAR Layer3Type : 4;
    UCHAR Layer4Type : 4;
    UCHAR Reserved : 4;
    USHORT Layer2HeaderLength : 7;
    USHORT Layer3HeaderLength : 9;
    UCHAR Layer4HeaderLength : 8;
};

typedef struct _NET_PACKET_QUEUE_CONFIG {
    ULONG Size;
    PVOID EvtStart;
    PVOID EvtStop;
    PVOID EvtAdvance;
    PVOID EvtSetNotificationEnabled;
    PVOID EvtCancel;
};

typedef struct _NET_PACKET_RECEIVE_SEGMENT_COALESCENCE {
    USHORT CoalescedSegmentCount;
    struct {
        USHORT RscTcpTimestampDelta;
    } TCP;
};

typedef struct _NET_PHYSICAL_LOCATION_LH {
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG FunctionNumber;
};

typedef struct _NET_PNP_EVENT {
    enum _NET_PNP_EVENT_CODE NetEvent;
    PVOID Buffer;
    ULONG BufferLength;
    ULONG64 NdisReserved[4];
    ULONG64 TransportReserved[4];
    ULONG64 TdiReserved[4];
    ULONG64 TdiClientReserved[4];
};

typedef struct _NET_PNP_EVENT_NOTIFICATION {
    struct _NDIS_OBJECT_HEADER Header;
    ULONG PortNumber;
    struct _NET_PNP_EVENT NetPnPEvent;
    ULONG Flags;
    ULONG SwitchId;
    ULONG VPortId;
};

typedef struct _NET_REQUEST_QUEUE_CONFIG {
    ULONG Size;
    struct NETADAPTER__ *Adapter;
    enum _NET_REQUEST_QUEUE_TYPE Type;
    PVOID EvtRequestDefaultSetData;
    PVOID EvtRequestDefaultQueryData;
    PVOID EvtRequestDefaultMethod;
    PVOID EvtRequestDefault;
    union _NET_REQUEST_QUEUE_ADD_HANDLER_ERROR AddHandlerError;
    ULONG SizeOfSetDataHandler;
    ULONG SizeOfQueryDataHandler;
    ULONG SizeOfMethodHandler;
    struct _NET_REQUEST_QUEUE_SET_DATA_HANDLER *SetDataHandlers;
    struct _NET_REQUEST_QUEUE_QUERY_DATA_HANDLER *QueryDataHandlers;
    struct _NET_REQUEST_QUEUE_METHOD_HANDLER *MethodHandlers;
};

typedef struct _NET_REQUEST_QUEUE_METHOD_HANDLER {
    struct _NET_REQUEST_QUEUE_METHOD_HANDLER *Next;
    struct WDFMEMORY__ *Memory;
    ULONG Oid;
    PVOID EvtRequestMethod;
    ULONG MinimumInputLength;
    ULONG MinimumOutputLength;
};

typedef struct _NET_REQUEST_QUEUE_QUERY_DATA_HANDLER {
    struct _NET_REQUEST_QUEUE_QUERY_DATA_HANDLER *Next;
    struct WDFMEMORY__ *Memory;
    ULONG Oid;
    PVOID EvtRequestQueryData;
    ULONG MinimumInputLength;
    ULONG MinimumOutputLength;
};

typedef struct _NET_REQUEST_QUEUE_SET_DATA_HANDLER {
    struct _NET_REQUEST_QUEUE_SET_DATA_HANDLER *Next;
    struct WDFMEMORY__ *Memory;
    ULONG Oid;
    PVOID EvtRequestSetData;
    ULONG MinimumInputLength;
    ULONG MinimumOutputLength;
};

typedef struct _NET_RING_BUFFER {
    USHORT OSReserved1;
    USHORT ElementStride;
    ULONG NumberOfElements;
    ULONG ElementIndexMask;
    ULONG BeginIndex;
    ULONG NextIndex;
    ULONG EndIndex;
    PVOID NetAdapterScratch[2];
    PVOID OSReserved2[3];
    UCHAR Buffer[1];
};

typedef struct _NLSTABLEINFO {
    struct _CPTABLEINFO OemTableInfo;
    struct _CPTABLEINFO AnsiTableInfo;
    PUSHORT UpperCaseTable;
    PUSHORT LowerCaseTable;
};

typedef struct _NLS_DATA_BLOCK {
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
};

typedef struct _NL_BANDWIDTH_INFORMATION {
    ULONG64 Bandwidth;
    ULONG64 Instability;
    UCHAR BandwidthPeaked;
};

typedef struct _NL_INTERFACE_OFFLOAD_ROD {
    UCHAR NlChecksumSupported : 1;
    UCHAR NlOptionsSupported : 1;
    UCHAR TlDatagramChecksumSupported : 1;
    UCHAR TlStreamChecksumSupported : 1;
    UCHAR TlStreamOptionsSupported : 1;
    UCHAR FastPathCompatible : 1;
    UCHAR TlLargeSendOffloadSupported : 1;
    UCHAR TlGiantSendOffloadSupported : 1;
};

typedef struct _NL_PATH_BANDWIDTH_ROD {
    ULONG64 Bandwidth;
    ULONG64 Instability;
    UCHAR BandwidthPeaked;
};

typedef struct _NON_PAGED_DEBUG_INFO {
    USHORT Signature;
    USHORT Flags;
    ULONG Size;
    USHORT Machine;
    USHORT Characteristics;
    ULONG TimeDateStamp;
    ULONG CheckSum;
    ULONG SizeOfImage;
    ULONG64 ImageBase;
};

typedef struct _NPAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _NPI_MODULEID {
    USHORT Length;
    enum _NPI_MODULEID_TYPE Type;
    struct _GUID Guid;
    struct _LUID IfLuid;
};

typedef struct _NTFS_STATISTICS {
    ULONG LogFileFullExceptions;
    ULONG OtherExceptions;
    ULONG MftReads;
    ULONG MftReadBytes;
    ULONG MftWrites;
    ULONG MftWriteBytes;
     <unnamed-type-MftWritesUserLevel>;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } MftWritesUserLevel;
    USHORT MftWritesFlushForLogFileFull;
    USHORT MftWritesLazyWriter;
    USHORT MftWritesUserRequest;
    ULONG Mft2Writes;
    ULONG Mft2WriteBytes;
     <unnamed-type-Mft2WritesUserLevel>;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } Mft2WritesUserLevel;
    USHORT Mft2WritesFlushForLogFileFull;
    USHORT Mft2WritesLazyWriter;
    USHORT Mft2WritesUserRequest;
    ULONG RootIndexReads;
    ULONG RootIndexReadBytes;
    ULONG RootIndexWrites;
    ULONG RootIndexWriteBytes;
    ULONG BitmapReads;
    ULONG BitmapReadBytes;
    ULONG BitmapWrites;
    ULONG BitmapWriteBytes;
    USHORT BitmapWritesFlushForLogFileFull;
    USHORT BitmapWritesLazyWriter;
    USHORT BitmapWritesUserRequest;
     <unnamed-type-BitmapWritesUserLevel>;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
    } BitmapWritesUserLevel;
    ULONG MftBitmapReads;
    ULONG MftBitmapReadBytes;
    ULONG MftBitmapWrites;
    ULONG MftBitmapWriteBytes;
    USHORT MftBitmapWritesFlushForLogFileFull;
    USHORT MftBitmapWritesLazyWriter;
    USHORT MftBitmapWritesUserRequest;
     <unnamed-type-MftBitmapWritesUserLevel>;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } MftBitmapWritesUserLevel;
    ULONG UserIndexReads;
    ULONG UserIndexReadBytes;
    ULONG UserIndexWrites;
    ULONG UserIndexWriteBytes;
    ULONG LogFileReads;
    ULONG LogFileReadBytes;
    ULONG LogFileWrites;
    ULONG LogFileWriteBytes;
     <unnamed-type-Allocate>;
    struct {
        ULONG Calls;
        ULONG Clusters;
        ULONG Hints;
        ULONG RunsReturned;
        ULONG HintsHonored;
        ULONG HintsClusters;
        ULONG Cache;
        ULONG CacheClusters;
        ULONG CacheMiss;
        ULONG CacheMissClusters;
    } Allocate;
    ULONG DiskResourcesExhausted;
};

typedef struct _NTFS_STATISTICS_EX {
    ULONG LogFileFullExceptions;
    ULONG OtherExceptions;
    ULONG64 MftReads;
    ULONG64 MftReadBytes;
    ULONG64 MftWrites;
    ULONG64 MftWriteBytes;
     <unnamed-type-MftWritesUserLevel>;
    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } MftWritesUserLevel;
    ULONG MftWritesFlushForLogFileFull;
    ULONG MftWritesLazyWriter;
    ULONG MftWritesUserRequest;
    ULONG64 Mft2Writes;
    ULONG64 Mft2WriteBytes;
     <unnamed-type-Mft2WritesUserLevel>;
    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } Mft2WritesUserLevel;
    ULONG Mft2WritesFlushForLogFileFull;
    ULONG Mft2WritesLazyWriter;
    ULONG Mft2WritesUserRequest;
    ULONG64 RootIndexReads;
    ULONG64 RootIndexReadBytes;
    ULONG64 RootIndexWrites;
    ULONG64 RootIndexWriteBytes;
    ULONG64 BitmapReads;
    ULONG64 BitmapReadBytes;
    ULONG64 BitmapWrites;
    ULONG64 BitmapWriteBytes;
    ULONG BitmapWritesFlushForLogFileFull;
    ULONG BitmapWritesLazyWriter;
    ULONG BitmapWritesUserRequest;
     <unnamed-type-BitmapWritesUserLevel>;
    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } BitmapWritesUserLevel;
    ULONG64 MftBitmapReads;
    ULONG64 MftBitmapReadBytes;
    ULONG64 MftBitmapWrites;
    ULONG64 MftBitmapWriteBytes;
    ULONG MftBitmapWritesFlushForLogFileFull;
    ULONG MftBitmapWritesLazyWriter;
    ULONG MftBitmapWritesUserRequest;
     <unnamed-type-MftBitmapWritesUserLevel>;
    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } MftBitmapWritesUserLevel;
    ULONG64 UserIndexReads;
    ULONG64 UserIndexReadBytes;
    ULONG64 UserIndexWrites;
    ULONG64 UserIndexWriteBytes;
    ULONG64 LogFileReads;
    ULONG64 LogFileReadBytes;
    ULONG64 LogFileWrites;
    ULONG64 LogFileWriteBytes;
     <unnamed-type-Allocate>;
    struct {
        ULONG Calls;
        ULONG RunsReturned;
        ULONG Hints;
        ULONG HintsHonored;
        ULONG Cache;
        ULONG CacheMiss;
        ULONG64 Clusters;
        ULONG64 HintsClusters;
        ULONG64 CacheClusters;
        ULONG64 CacheMissClusters;
    } Allocate;
    ULONG DiskResourcesExhausted;
    ULONG64 VolumeTrimCount;
    ULONG64 VolumeTrimTime;
    ULONG64 VolumeTrimByteCount;
    ULONG64 FileLevelTrimCount;
    ULONG64 FileLevelTrimTime;
    ULONG64 FileLevelTrimByteCount;
    ULONG64 VolumeTrimSkippedCount;
    ULONG64 VolumeTrimSkippedByteCount;
    ULONG64 NtfsFillStatInfoFromMftRecordCalledCount;
    ULONG64 NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
    ULONG64 NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
};

typedef struct _NT_IMAGE_INFO {
    ULONG Version;
    ULONG OsMajorVersion;
    ULONG OsMinorVersion;
    ULONG MajorRelease;
    ULONG LoaderBlockSize;
    ULONG LoaderExtensionSize;
};

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    ULONG Version;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
};

typedef struct _NT_TIB32 {
    ULONG ExceptionList;
    ULONG StackBase;
    ULONG StackLimit;
    ULONG SubSystemTib;
    ULONG FiberData;
    ULONG Version;
    ULONG ArbitraryUserPointer;
    ULONG Self;
};

typedef struct _NT_TIB64 {
    ULONG64 ExceptionList;
    ULONG64 StackBase;
    ULONG64 StackLimit;
    ULONG64 SubSystemTib;
    ULONG64 FiberData;
    ULONG Version;
    ULONG64 ArbitraryUserPointer;
    ULONG64 Self;
};

typedef struct _NUMA_NODE_RELATIONSHIP {
    ULONG NodeNumber;
    UCHAR Reserved[20];
    struct _GROUP_AFFINITY GroupMask;
};

typedef struct _NV_MEMORY_RANGE {
    PVOID BaseAddress;
    ULONG64 Length;
};

typedef struct _NX_NET_POWER_ENTRY {
    ULONG Size;
    struct _SINGLE_LIST_ENTRY ListEntry;
    UCHAR Enabled;
    struct _NDIS_PM_WOL_PATTERN NdisWoLPattern;
    struct _NDIS_PM_PROTOCOL_OFFLOAD NdisProtocolOffload;
};

typedef struct _NX_STOP_IDLE_WORKITEM_CONTEXT {
    UCHAR IsAoAcWorkItem;
};

typedef struct _OBJECTID {
    struct _GUID Lineage;
    ULONG Uniquifier;
};

typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    PVOID RootDirectory;
    struct _UNICODE_STRING *ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
};

typedef struct _OBJECT_ATTRIBUTES32 {
    ULONG Length;
    ULONG RootDirectory;
    ULONG ObjectName;
    ULONG Attributes;
    ULONG SecurityDescriptor;
    ULONG SecurityQualityOfService;
};

typedef struct _OBJECT_ATTRIBUTES64 {
    ULONG Length;
    ULONG64 RootDirectory;
    ULONG64 ObjectName;
    ULONG Attributes;
    ULONG64 SecurityDescriptor;
    ULONG64 SecurityQualityOfService;
};

typedef struct _OBJECT_BASIC_INFORMATION {
    ULONG Attributes;
    ULONG GrantedAccess;
    ULONG HandleCount;
    ULONG PointerCount;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG Reserved[3];
    ULONG NameInfoSize;
    ULONG TypeInfoSize;
    ULONG SecurityDescriptorSize;
    union _LARGE_INTEGER CreationTime;
};

typedef struct _OBJECT_CREATE_INFORMATION {
};

typedef struct _OBJECT_DIRECTORY {
    struct _OBJECT_DIRECTORY_ENTRY *HashBuckets[37];
    struct _EX_PUSH_LOCK Lock;
    struct _DEVICE_MAP *DeviceMap;
    struct _OBJECT_DIRECTORY *ShadowDirectory;
    PVOID NamespaceEntry;
    PVOID SessionObject;
    ULONG Flags;
    ULONG SessionId;
};

typedef struct _OBJECT_DIRECTORY_ENTRY {
};

typedef struct _OBJECT_DIRECTORY_INFORMATION {
    struct _UNICODE_STRING Name;
    struct _UNICODE_STRING TypeName;
};

typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
};

typedef struct _OBJECT_HANDLE_FLAG_INFORMATION {
    UCHAR Inherit;
    UCHAR ProtectFromClose;
};

typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ULONG GrantedAccess;
};

typedef struct _OBJECT_HEADER {
    LONG64 PointerCount;
    LONG64 HandleCount;
    PVOID NextToFree;
    struct _EX_PUSH_LOCK Lock;
    UCHAR TypeIndex;
    UCHAR TraceFlags;
    UCHAR DbgRefTrace : 1;
    UCHAR DbgTracePermanent : 1;
    UCHAR InfoMask;
    UCHAR Flags;
    UCHAR NewObject : 1;
    UCHAR KernelObject : 1;
    UCHAR KernelOnlyAccess : 1;
    UCHAR ExclusiveObject : 1;
    UCHAR PermanentObject : 1;
    UCHAR DefaultSecurityQuota : 1;
    UCHAR SingleHandleEntry : 1;
    UCHAR DeletedInline : 1;
    ULONG Reserved;
    struct _OBJECT_CREATE_INFORMATION *ObjectCreateInfo;
    PVOID QuotaBlockCharged;
    PVOID SecurityDescriptor;
    struct _QUAD Body;
};

typedef struct _OBJECT_HEADER_NAME_INFO {
    struct _OBJECT_DIRECTORY *Directory;
    struct _UNICODE_STRING Name;
    LONG ReferenceCount;
    ULONG Reserved;
};

typedef struct _OBJECT_NAME_INFORMATION {
    struct _UNICODE_STRING Name;
};

typedef struct _OBJECT_TYPE {
    struct _LIST_ENTRY TypeList;
    struct _UNICODE_STRING Name;
    PVOID DefaultObject;
    UCHAR Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;
    struct _EX_PUSH_LOCK TypeLock;
    ULONG Key;
    struct _LIST_ENTRY CallbackList;
};

typedef struct _OBJECT_TYPES_INFORMATION {
    ULONG NumberOfTypes;
};

typedef struct _OBJECT_TYPE_INFORMATION {
    struct _UNICODE_STRING TypeName;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG TotalPagedPoolUsage;
    ULONG TotalNonPagedPoolUsage;
    ULONG TotalNamePoolUsage;
    ULONG TotalHandleTableUsage;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    ULONG HighWaterPagedPoolUsage;
    ULONG HighWaterNonPagedPoolUsage;
    ULONG HighWaterNamePoolUsage;
    ULONG HighWaterHandleTableUsage;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    UCHAR SecurityRequired;
    UCHAR MaintainHandleCount;
    UCHAR TypeIndex;
    CHAR ReservedByte;
    ULONG PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
};

typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    USHORT ObjectTypeFlags;
    UCHAR CaseInsensitive : 1;
    UCHAR UnnamedObjectsOnly : 1;
    UCHAR UseDefaultObject : 1;
    UCHAR SecurityRequired : 1;
    UCHAR MaintainHandleCount : 1;
    UCHAR MaintainTypeList : 1;
    UCHAR SupportsObjectCallbacks : 1;
    UCHAR CacheAligned : 1;
    UCHAR UseExtendedParameters : 1;
    UCHAR Reserved : 7;
    ULONG ObjectTypeCode;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG RetainAccess;
    enum _POOL_TYPE PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    PVOID DumpProcedure;
    PLONG OpenProcedure;
    PVOID CloseProcedure;
    PVOID DeleteProcedure;
    PLONG ParseProcedure;
    PLONG ParseProcedureEx;
    PLONG SecurityProcedure;
    PLONG QueryNameProcedure;
    PUCHAR OkayToCloseProcedure;
    ULONG WaitObjectFlagMask;
    USHORT WaitObjectFlagOffset;
    USHORT WaitObjectPointerOffset;
};

typedef struct _OBJECT_TYPE_LIST {
    USHORT Level;
    USHORT Sbz;
    struct _GUID *ObjectType;
};

typedef struct _OB_CALLBACK_REGISTRATION {
    USHORT Version;
    USHORT OperationRegistrationCount;
    struct _UNICODE_STRING Altitude;
    PVOID RegistrationContext;
    struct _OB_OPERATION_REGISTRATION *OperationRegistration;
};

typedef struct _OB_EXTENDED_PARSE_PARAMETERS {
    USHORT Length;
    ULONG RestrictedAccessMask;
    struct _EJOB *Silo;
};

typedef struct _OB_EXTENDED_USER_INFO {
    PVOID Context1;
    PVOID Context2;
};

typedef struct _OB_OPERATION_REGISTRATION {
    struct _OBJECT_TYPE **ObjectType;
    ULONG Operations;
    enum _OB_PREOP_CALLBACK_STATUS *PreOperation;
    PVOID PostOperation;
};

typedef struct _OB_POST_CREATE_HANDLE_INFORMATION {
    ULONG GrantedAccess;
};

typedef struct _OB_POST_DUPLICATE_HANDLE_INFORMATION {
    ULONG GrantedAccess;
};

typedef struct _OB_POST_OPERATION_INFORMATION {
    ULONG Operation;
    ULONG Flags;
    ULONG KernelHandle : 1;
    ULONG Reserved : 31;
    PVOID Object;
    struct _OBJECT_TYPE *ObjectType;
    PVOID CallContext;
    LONG ReturnStatus;
    union _OB_POST_OPERATION_PARAMETERS *Parameters;
};

typedef struct _OB_PRE_CREATE_HANDLE_INFORMATION {
    ULONG DesiredAccess;
    ULONG OriginalDesiredAccess;
};

typedef struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION {
    ULONG DesiredAccess;
    ULONG OriginalDesiredAccess;
    PVOID SourceProcess;
    PVOID TargetProcess;
};

typedef struct _OB_PRE_OPERATION_INFORMATION {
    ULONG Operation;
    ULONG Flags;
    ULONG KernelHandle : 1;
    ULONG Reserved : 31;
    PVOID Object;
    struct _OBJECT_TYPE *ObjectType;
    PVOID CallContext;
    union _OB_PRE_OPERATION_PARAMETERS *Parameters;
};

typedef struct _OEM_FONT_FILE_HEADER {
    USHORT Version;
    ULONG FileSize;
    UCHAR Copyright[60];
    USHORT Type;
    USHORT Points;
    USHORT VerticleResolution;
    USHORT HorizontalResolution;
    USHORT Ascent;
    USHORT InternalLeading;
    USHORT ExternalLeading;
    UCHAR Italic;
    UCHAR Underline;
    UCHAR StrikeOut;
    USHORT Weight;
    UCHAR CharacterSet;
    USHORT PixelWidth;
    USHORT PixelHeight;
    UCHAR Family;
    USHORT AverageWidth;
    USHORT MaximumWidth;
    UCHAR FirstCharacter;
    UCHAR LastCharacter;
    UCHAR DefaultCharacter;
    UCHAR BreakCharacter;
    USHORT WidthInBytes;
    ULONG Device;
    ULONG Face;
    ULONG BitsPointer;
    ULONG BitsOffset;
    UCHAR Filler;
     <unnamed-type-Map>;
    struct {
        USHORT Width;
        USHORT Offset;
    } Map[1];
};

typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1 {
    ULONG Version;
    ULONG AbnormalResetOccurred;
    ULONG OfflineMemoryDumpCapable;
};

typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 {
    ULONG Version;
    ULONG AbnormalResetOccurred;
    ULONG OfflineMemoryDumpCapable;
    union _LARGE_INTEGER ResetDataAddress;
    ULONG ResetDataSize;
};

typedef struct _OFFLOAD_ALGO_INFO {
    ULONG algoIdentifier;
    ULONG algoKeylen;
    ULONG algoRounds;
};

typedef struct _OFFLOAD_IPSEC_ADD_SA {
    ULONG SrcAddr;
    ULONG SrcMask;
    ULONG DestAddr;
    ULONG DestMask;
    ULONG Protocol;
    USHORT SrcPort;
    USHORT DestPort;
    ULONG SrcTunnelAddr;
    ULONG DestTunnelAddr;
    USHORT Flags;
    SHORT NumSAs;
    struct _OFFLOAD_SECURITY_ASSOCIATION SecAssoc[3];
    PVOID OffloadHandle;
    ULONG KeyLen;
    UCHAR KeyMat[1];
};

typedef struct _OFFLOAD_IPSEC_ADD_UDPESP_SA {
    ULONG SrcAddr;
    ULONG SrcMask;
    ULONG DstAddr;
    ULONG DstMask;
    ULONG Protocol;
    USHORT SrcPort;
    USHORT DstPort;
    ULONG SrcTunnelAddr;
    ULONG DstTunnelAddr;
    USHORT Flags;
    SHORT NumSAs;
    struct _OFFLOAD_SECURITY_ASSOCIATION SecAssoc[3];
    PVOID OffloadHandle;
    struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY EncapTypeEntry;
    PVOID EncapTypeEntryOffldHandle;
    ULONG KeyLen;
    UCHAR KeyMat[1];
};

typedef struct _OFFLOAD_IPSEC_DELETE_SA {
    PVOID OffloadHandle;
};

typedef struct _OFFLOAD_IPSEC_DELETE_UDPESP_SA {
    PVOID OffloadHandle;
    PVOID EncapTypeEntryOffldHandle;
};

typedef struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY {
    enum _UDP_ENCAP_TYPE UdpEncapType;
    USHORT DstEncapPort;
};

typedef struct _OFFLOAD_SECURITY_ASSOCIATION {
    enum _OFFLOAD_OPERATION_E Operation;
    ULONG SPI;
    struct _OFFLOAD_ALGO_INFO IntegrityAlgo;
    struct _OFFLOAD_ALGO_INFO ConfAlgo;
    struct _OFFLOAD_ALGO_INFO Reserved;
};

typedef struct _OPLOCK_KEY_CONTEXT {
    USHORT Version;
    USHORT Flags;
    struct _GUID ParentOplockKey;
    struct _GUID TargetOplockKey;
    ULONG Reserved;
};

typedef struct _OPLOCK_KEY_ECP_CONTEXT {
};

typedef struct _OSVERSIONINFOA {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    CHAR szCSDVersion[128];
};

typedef struct _OSVERSIONINFOEX2A {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    CHAR szCSDVersion[128];
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
    ULONG wSuiteMaskEx;
    ULONG wReserved2;
};

typedef struct _OSVERSIONINFOEX2W {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    WCHAR szCSDVersion[128];
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
    ULONG wSuiteMaskEx;
    ULONG wReserved2;
};

typedef struct _OSVERSIONINFOEXA {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    CHAR szCSDVersion[128];
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
};

typedef struct _OSVERSIONINFOEXW {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    WCHAR szCSDVersion[128];
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
};

typedef struct _OSVERSIONINFOW {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    WCHAR szCSDVersion[128];
};

typedef struct _OWNER_ENTRY {
    ULONG64 OwnerThread;
    ULONG IoPriorityBoosted : 1;
    ULONG OwnerReferenced : 1;
    ULONG IoQoSPriorityBoosted : 1;
    ULONG OwnerCount : 29;
    ULONG TableSize;
};

typedef struct _PACKEDEVENTINFO {
    ULONG ulSize;
    ULONG ulNumEventsForLogFile;
    ULONG ulOffsets[0];
};

typedef struct _PAGEDIR_INFORMATION {
    ULONG64 DontUse : 9;
    ULONG64 PageDirectoryBase : 48;
    ULONG64 Reserved : 7;
};

typedef struct _PAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
};

typedef struct _PAGE_PRIORITY_INFORMATION {
    ULONG PagePriority;
};

typedef struct _PARSE_MESSAGE_CONTEXT {
    ULONG fFlags;
    ULONG cwSavColumn;
    ULONG64 iwSrc;
    ULONG64 iwDst;
    ULONG64 iwDstSpace;
    PCHAR lpvArgStart;
};

typedef struct _PARTITION_DESCRIPTOR {
    UCHAR ActiveFlag;
    UCHAR StartingTrack;
    UCHAR StartingCylinderLsb;
    UCHAR StartingCylinderMsb;
    UCHAR PartitionType;
    UCHAR EndingTrack;
    UCHAR EndingCylinderLsb;
    UCHAR EndingCylinderMsb;
    UCHAR StartingSectorLsb0;
    UCHAR StartingSectorLsb1;
    UCHAR StartingSectorMsb0;
    UCHAR StartingSectorMsb1;
    UCHAR PartitionLengthLsb0;
    UCHAR PartitionLengthLsb1;
    UCHAR PartitionLengthMsb0;
    UCHAR PartitionLengthMsb1;
};

typedef struct _PARTITION_UNIT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GetUniqueId;
    PLONG GetSpareProperties;
    PUCHAR IsValidSpare;
};

typedef struct _PATHNAME_BUFFER {
    ULONG PathNameLength;
    WCHAR Name[1];
};

typedef struct _PCAT_FIRMWARE_INFORMATION {
    ULONG PlaceHolder;
};

typedef struct _PCIBUSDATA {
    ULONG Tag;
    ULONG Version;
    PVOID ReadConfig;
    PVOID WriteConfig;
    PVOID Pin2Line;
    PVOID Line2Pin;
    struct _PCI_SLOT_NUMBER ParentSlot;
    PVOID Reserved[4];
};

typedef struct _PCIX_BRIDGE_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-SecondaryStatus>;
    union {
        USHORT Bus64Bit : 1;
        USHORT Bus133MHzCapable : 1;
        USHORT SplitCompletionDiscarded : 1;
        USHORT UnexpectedSplitCompletion : 1;
        USHORT SplitCompletionOverrun : 1;
        USHORT SplitRequestDelayed : 1;
        USHORT BusModeFrequency : 4;
        USHORT Rsvd : 2;
        USHORT Version : 2;
        USHORT Bus266MHzCapable : 1;
        USHORT Bus533MHzCapable : 1;
        USHORT AsUSHORT;
    } SecondaryStatus;
     <unnamed-type-BridgeStatus>;
    union {
        ULONG FunctionNumber : 3;
        ULONG DeviceNumber : 5;
        ULONG BusNumber : 8;
        ULONG Device64Bit : 1;
        ULONG Device133MHzCapable : 1;
        ULONG SplitCompletionDiscarded : 1;
        ULONG UnexpectedSplitCompletion : 1;
        ULONG SplitCompletionOverrun : 1;
        ULONG SplitRequestDelayed : 1;
        ULONG Rsvd : 7;
        ULONG DIMCapable : 1;
        ULONG Device266MHzCapable : 1;
        ULONG Device533MHzCapable : 1;
        ULONG AsULONG;
    } BridgeStatus;
    USHORT UpstreamSplitTransactionCapacity;
    USHORT UpstreamSplitTransactionLimit;
    USHORT DownstreamSplitTransactionCapacity;
    USHORT DownstreamSplitTransactionLimit;
     <unnamed-type-EccControlStatus>;
    union {
        ULONG SelectSecondaryRegisters : 1;
        ULONG ErrorPresentInOtherBank : 1;
        ULONG AdditionalCorrectableError : 1;
        ULONG AdditionalUncorrectableError : 1;
        ULONG ErrorPhase : 3;
        ULONG ErrorCorrected : 1;
        ULONG Syndrome : 8;
        ULONG ErrorFirstCommand : 4;
        ULONG ErrorSecondCommand : 4;
        ULONG ErrorUpperAttributes : 4;
        ULONG ControlUpdateEnable : 1;
        ULONG Rsvd : 1;
        ULONG DisableSingleBitCorrection : 1;
        ULONG EccMode : 1;
        ULONG AsULONG;
    } EccControlStatus;
    ULONG EccFirstAddress;
    ULONG EccSecondAddress;
    ULONG EccAttribute;
};

typedef struct _PCI_ADVANCED_FEATURES_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    UCHAR Length;
     <unnamed-type-Capabilities>;
    union {
        UCHAR FunctionLevelResetSupported : 1;
        UCHAR TransactionsPendingSupported : 1;
        UCHAR Rsvd : 6;
        UCHAR AsUCHAR;
    } Capabilities;
     <unnamed-type-Control>;
    union {
        UCHAR InitiateFunctionLevelReset : 1;
        UCHAR Rsvd : 7;
        UCHAR AsUCHAR;
    } Control;
     <unnamed-type-Status>;
    union {
        UCHAR TransactionsPending : 1;
        UCHAR Rsvd : 7;
        UCHAR AsUCHAR;
    } Status;
};

typedef struct _PCI_AGP_APERTURE_PAGE_SIZE {
    USHORT PageSizeMask : 11;
    USHORT Rsvd1 : 1;
    USHORT PageSizeSelect : 4;
};

typedef struct _PCI_AGP_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    USHORT Minor : 4;
    USHORT Major : 4;
    USHORT Rsvd1 : 8;
     _PCI_AGP_STATUS;
    struct _PCI_AGP_CAPABILITY::_PCI_AGP_STATUS AGPStatus;
     _PCI_AGP_COMMAND;
    struct _PCI_AGP_CAPABILITY::_PCI_AGP_COMMAND AGPCommand;
};

typedef struct _PCI_AGP_CAPABILITY::_PCI_AGP_COMMAND {
    ULONG Rate : 3;
    ULONG Rsvd1 : 1;
    ULONG FastWriteEnable : 1;
    ULONG FourGBEnable : 1;
    ULONG Rsvd2 : 1;
    ULONG Gart64 : 1;
    ULONG AGPEnable : 1;
    ULONG SBAEnable : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncReqSize : 3;
    ULONG Rsvd3 : 8;
    ULONG RequestQueueDepth : 8;
};

typedef struct _PCI_AGP_CAPABILITY::_PCI_AGP_STATUS {
    ULONG Rate : 3;
    ULONG Agp3Mode : 1;
    ULONG FastWrite : 1;
    ULONG FourGB : 1;
    ULONG HostTransDisable : 1;
    ULONG Gart64 : 1;
    ULONG ITA_Coherent : 1;
    ULONG SideBandAddressing : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncRequestSize : 3;
    ULONG Rsvd1 : 1;
    ULONG Isoch : 1;
    ULONG Rsvd2 : 6;
    ULONG RequestQueueDepthMaximum : 8;
};

typedef struct _PCI_AGP_COMMAND {
    ULONG Rate : 3;
    ULONG Rsvd1 : 1;
    ULONG FastWriteEnable : 1;
    ULONG FourGBEnable : 1;
    ULONG Rsvd2 : 1;
    ULONG Gart64 : 1;
    ULONG AGPEnable : 1;
    ULONG SBAEnable : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncReqSize : 3;
    ULONG Rsvd3 : 8;
    ULONG RequestQueueDepth : 8;
};

typedef struct _PCI_AGP_CONTROL {
    ULONG Rsvd1 : 7;
    ULONG GTLB_Enable : 1;
    ULONG AP_Enable : 1;
    ULONG CAL_Disable : 1;
    ULONG Rsvd2 : 22;
};

typedef struct _PCI_AGP_ISOCH_COMMAND {
    USHORT Rsvd1 : 6;
    USHORT Isoch_Y : 2;
    USHORT Isoch_N : 8;
};

typedef struct _PCI_AGP_ISOCH_STATUS {
    ULONG ErrorCode : 2;
    ULONG Rsvd1 : 1;
    ULONG Isoch_L : 3;
    ULONG Isoch_Y : 2;
    ULONG Isoch_N : 8;
    ULONG Rsvd2 : 16;
};

typedef struct _PCI_AGP_STATUS {
    ULONG Rate : 3;
    ULONG Agp3Mode : 1;
    ULONG FastWrite : 1;
    ULONG FourGB : 1;
    ULONG HostTransDisable : 1;
    ULONG Gart64 : 1;
    ULONG ITA_Coherent : 1;
    ULONG SideBandAddressing : 1;
    ULONG CalibrationCycle : 3;
    ULONG AsyncRequestSize : 3;
    ULONG Rsvd1 : 1;
    ULONG Isoch : 1;
    ULONG Rsvd2 : 6;
    ULONG RequestQueueDepthMaximum : 8;
};

typedef struct _PCI_BUSMASTER_DESCRIPTOR {
    enum _PCI_BUSMASTER_RID_TYPE Type;
    ULONG Segment;
    struct {
        UCHAR Bus;
        UCHAR Device;
        UCHAR Function;
        UCHAR Reserved;
    } DeviceRid;
    struct {
        UCHAR Bus;
        UCHAR Device;
        UCHAR Function;
        UCHAR Reserved;
    } BridgeRid;
    struct {
        UCHAR SecondaryBus;
        UCHAR SubordinateBus;
    } MultipleBridges;
};

typedef struct _PCI_BUS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ReadConfig;
    PULONG WriteConfig;
    PVOID PinToLine;
    PVOID LineToPin;
    PVOID RootBusCapability;
    PVOID ExpressWakeControl;
    PVOID PrepareMultistageResume;
};

typedef struct _PCI_CAPABILITIES_HEADER {
    UCHAR CapabilityID;
    UCHAR Next;
};

typedef struct _PCI_COMMON_CONFIG {
    struct _PCI_COMMON_HEADER _PCI_COMMON_HEADER;
    UCHAR DeviceSpecific[192];
};

typedef struct _PCI_COMMON_HEADER {
    USHORT VendorID;
    USHORT DeviceID;
    USHORT Command;
    USHORT Status;
    UCHAR RevisionID;
    UCHAR ProgIf;
    UCHAR SubClass;
    UCHAR BaseClass;
    UCHAR CacheLineSize;
    UCHAR LatencyTimer;
    UCHAR HeaderType;
    UCHAR BIST;
     <unnamed-type-u>;
    union {
         _PCI_HEADER_TYPE_0;
        struct {
            ULONG BaseAddresses[6];
            ULONG CIS;
            USHORT SubVendorID;
            USHORT SubSystemID;
            ULONG ROMBaseAddress;
            UCHAR CapabilitiesPtr;
            UCHAR Reserved1[3];
            ULONG Reserved2;
            UCHAR InterruptLine;
            UCHAR InterruptPin;
            UCHAR MinimumGrant;
            UCHAR MaximumLatency;
        } type0;
         _PCI_HEADER_TYPE_1;
        struct {
            ULONG BaseAddresses[2];
            UCHAR PrimaryBus;
            UCHAR SecondaryBus;
            UCHAR SubordinateBus;
            UCHAR SecondaryLatency;
            UCHAR IOBase;
            UCHAR IOLimit;
            USHORT SecondaryStatus;
            USHORT MemoryBase;
            USHORT MemoryLimit;
            USHORT PrefetchBase;
            USHORT PrefetchLimit;
            ULONG PrefetchBaseUpper32;
            ULONG PrefetchLimitUpper32;
            USHORT IOBaseUpper16;
            USHORT IOLimitUpper16;
            UCHAR CapabilitiesPtr;
            UCHAR Reserved1[3];
            ULONG ROMBaseAddress;
            UCHAR InterruptLine;
            UCHAR InterruptPin;
            USHORT BridgeControl;
        } type1;
         _PCI_HEADER_TYPE_2;
        struct {
            ULONG SocketRegistersBaseAddress;
            UCHAR CapabilitiesPtr;
            UCHAR Reserved;
            USHORT SecondaryStatus;
            UCHAR PrimaryBus;
            UCHAR SecondaryBus;
            UCHAR SubordinateBus;
            UCHAR SecondaryLatency;
             <unnamed-type-Range>;
            struct {
                ULONG Base;
                ULONG Limit;
            } Range[4];
            UCHAR InterruptLine;
            UCHAR InterruptPin;
            USHORT BridgeControl;
        } type2;
    } u;
};

typedef struct _PCI_DEBUGGING_DEVICE_IN_USE {
    USHORT Segment;
    ULONG Bus;
    ULONG Slot;
};

typedef struct _PCI_DEVICE_PRESENCE_PARAMETERS {
    ULONG Size;
    ULONG Flags;
    USHORT VendorID;
    USHORT DeviceID;
    UCHAR RevisionID;
    USHORT SubVendorID;
    USHORT SubSystemID;
    UCHAR BaseClass;
    UCHAR SubClass;
    UCHAR ProgIf;
};

typedef struct _PCI_DEVICE_PRESENT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PUCHAR IsDevicePresent;
    PUCHAR IsDevicePresentEx;
};

typedef struct _PCI_EXPRESS_ACS_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_ACS_CAPABILITY_REGISTER Capability;
    union _PCI_EXPRESS_ACS_CONTROL Control;
    ULONG EgressControl[1];
};

typedef struct _PCI_EXPRESS_AER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    union _PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
    union _PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
    ULONG SecHeaderLog[4];
};

typedef struct _PCI_EXPRESS_ARI_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    struct _PCI_EXPRESS_ARI_CAPABILITY_REGISTER Capability;
    struct _PCI_EXPRESS_ARI_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_ARI_CAPABILITY_REGISTER {
    USHORT MfvcFunctionGroupsCapability : 1;
    USHORT AcsFunctionGroupsCapability : 1;
    USHORT Reserved : 6;
    USHORT NextFunctionNumber : 8;
};

typedef struct _PCI_EXPRESS_ARI_CONTROL_REGISTER {
    USHORT MfvcFunctionGroupsEnable : 1;
    USHORT AcsFunctionGroupsEnable : 1;
    USHORT Reserved1 : 2;
    USHORT FunctionGroup : 3;
    USHORT Reserved2 : 9;
};

typedef struct _PCI_EXPRESS_ATS_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    struct _PCI_EXPRESS_ATS_CAPABILITY_REGISTER Capability;
    struct _PCI_EXPRESS_ATS_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_ATS_CAPABILITY_REGISTER {
    USHORT InvalidateQueueDepth : 5;
    USHORT PageAlignedRequest : 1;
    USHORT GlobalInvalidateSupported : 1;
    USHORT Reserved : 9;
};

typedef struct _PCI_EXPRESS_ATS_CONTROL_REGISTER {
    USHORT SmallestTransactionUnit : 5;
    USHORT Reserved : 10;
    USHORT Enable : 1;
};

typedef struct _PCI_EXPRESS_BRIDGE_AER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    union _PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
    union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
    union _PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
    ULONG SecHeaderLog[4];
};

typedef struct _PCI_EXPRESS_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    union _PCI_EXPRESS_CAPABILITIES_REGISTER ExpressCapabilities;
    union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER DeviceCapabilities;
    union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER DeviceControl;
    union _PCI_EXPRESS_DEVICE_STATUS_REGISTER DeviceStatus;
    union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER LinkCapabilities;
    union _PCI_EXPRESS_LINK_CONTROL_REGISTER LinkControl;
    union _PCI_EXPRESS_LINK_STATUS_REGISTER LinkStatus;
    union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER SlotCapabilities;
    union _PCI_EXPRESS_SLOT_CONTROL_REGISTER SlotControl;
    union _PCI_EXPRESS_SLOT_STATUS_REGISTER SlotStatus;
    union _PCI_EXPRESS_ROOT_CONTROL_REGISTER RootControl;
    union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER RootCapabilities;
    union _PCI_EXPRESS_ROOT_STATUS_REGISTER RootStatus;
    union _PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER DeviceCapabilities2;
    union _PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER DeviceControl2;
    union _PCI_EXPRESS_DEVICE_STATUS_2_REGISTER DeviceStatus2;
};

typedef struct _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_1 DvsecHeader1;
    union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_2 DvsecHeader2;
    USHORT DvsecRegisters[1];
};

typedef struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER {
    USHORT CapabilityID;
    USHORT Version : 4;
    USHORT Next : 12;
};

typedef struct _PCI_EXPRESS_L1_PM_SS_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER L1PmSsCapabilities;
    union _PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER L1PmSsControl1;
    union _PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER L1PmSsControl2;
};

typedef struct _PCI_EXPRESS_LINK_QUIESCENT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG PciExpressEnterLinkQuiescentMode;
    PLONG PciExpressExitLinkQuiescentMode;
};

typedef struct _PCI_EXPRESS_LTR_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER Latency;
};

typedef struct _PCI_EXPRESS_PASID_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_PASID_CAPABILITY_REGISTER Capability;
    union _PCI_EXPRESS_PASID_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_PRI_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_PRI_CONTROL_REGISTER Control;
    union _PCI_EXPRESS_PRI_STATUS_REGISTER Status;
    ULONG PRCapacity;
    ULONG PRAllocation;
};

typedef struct _PCI_EXPRESS_PTM_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_PTM_CAPABILITY_REGISTER PtmCapability;
    union _PCI_EXPRESS_PTM_CONTROL_REGISTER PtmControl;
};

typedef struct _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    struct _PCI_EXPRESS_RESIZABLE_BAR_ENTRY Entry[6];
};

typedef struct _PCI_EXPRESS_RESIZABLE_BAR_ENTRY {
    union _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER Capability;
    union _PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER Control;
};

typedef struct _PCI_EXPRESS_ROOTPORT_AER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    union _PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    union _PCI_EXPRESS_ROOT_ERROR_COMMAND RootErrorCommand;
    union _PCI_EXPRESS_ROOT_ERROR_STATUS RootErrorStatus;
    union _PCI_EXPRESS_ERROR_SOURCE_ID ErrorSourceId;
};

typedef struct _PCI_EXPRESS_ROOT_PORT_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ReadConfigSpace;
    PULONG WriteConfigSpace;
};

typedef struct _PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    ULONG LowSerialNumber;
    ULONG HighSerialNumber;
};

typedef struct _PCI_EXPRESS_SRIOV_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_SRIOV_CAPS SRIOVCapabilities;
    union _PCI_EXPRESS_SRIOV_CONTROL SRIOVControl;
    union _PCI_EXPRESS_SRIOV_STATUS SRIOVStatus;
    USHORT InitialVFs;
    USHORT TotalVFs;
    USHORT NumVFs;
    UCHAR FunctionDependencyLink;
    UCHAR RsvdP1;
    USHORT FirstVFOffset;
    USHORT VFStride;
    USHORT RsvdP2;
    USHORT VFDeviceId;
    ULONG SupportedPageSizes;
    ULONG SystemPageSize;
    ULONG BaseAddresses[6];
    union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY VFMigrationStateArrayOffset;
};

typedef struct _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER RequesterCapability;
    union _PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER RequesterControl;
};

typedef struct _PCI_EXPRESS_VENDOR_SPECIFIC_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    USHORT VsecId;
    USHORT VsecRev : 4;
    USHORT VsecLength : 12;
};

typedef struct _PCI_EXPRESS_VIRTUAL_CHANNEL_CAPABILITY {
    struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    union _VIRTUAL_CHANNEL_CAPABILITIES1 Capabilities1;
    union _VIRTUAL_CHANNEL_CAPABILITIES2 Capabilities2;
    union _VIRTUAL_CHANNEL_CONTROL Control;
    union _VIRTUAL_CHANNEL_STATUS Status;
    struct _VIRTUAL_RESOURCE Resource[8];
};

typedef struct _PCI_FIRMWARE_BUS_CAPS {
    USHORT Type;
    USHORT Length;
    UCHAR SixtyFourBitDevice : 1;
    UCHAR PciXMode1EccCapable : 1;
    UCHAR DeviceIdMessagingCapable : 1;
    UCHAR ObffWakeSignalCapable : 1;
    UCHAR Reserved1 : 4;
    UCHAR CurrentSpeedAndMode;
    UCHAR SupportedSpeedsAndModesLowByte;
    UCHAR SupportedSpeedsAndModesHighByte;
    UCHAR Voltage;
    UCHAR Reserved2[7];
};

typedef struct _PCI_FIRMWARE_BUS_CAPS_RETURN_BUFFER {
    USHORT Version;
    USHORT Status;
    ULONG Length;
    struct _PCI_FIRMWARE_BUS_CAPS Caps;
};

typedef struct _PCI_FPB_CAPABILITY {
    struct _PCI_FPB_CAPABILITY_HEADER Header;
    union _PCI_FPB_CAPABILITIES_REGISTER CapabilitiesRegister;
    union _PCI_FPB_RID_VECTOR_CONTROL1_REGISTER RidVectorControl1Register;
    union _PCI_FPB_RID_VECTOR_CONTROL2_REGISTER RidVectorControl2Register;
    union _PCI_FPB_MEM_LOW_VECTOR_CONTROL_REGISTER MemLowVectorControlRegister;
    union _PCI_FPB_MEM_HIGH_VECTOR_CONTROL1_REGISTER MemHighVectorControl1Register;
    struct _PCI_FPB_MEM_HIGH_VECTOR_CONTROL2_REGISTER MemHighVectorControl2Register;
    union _PCI_FPB_VECTOR_ACCESS_CONTROL_REGISTER VectorAccessControlRegister;
    struct _PCI_FPB_VECTOR_ACCESS_DATA_REGISTER VectorAccessDataRegister;
};

typedef struct _PCI_FPB_CAPABILITY_HEADER {
    struct _PCI_CAPABILITIES_HEADER Header;
    USHORT Reserved;
};

typedef struct _PCI_FPB_MEM_HIGH_VECTOR_CONTROL2_REGISTER {
    ULONG MemHighVectorStartUpper;
};

typedef struct _PCI_FPB_VECTOR_ACCESS_DATA_REGISTER {
    ULONG VectorAccessData;
};

typedef struct _PCI_HEADER_TYPE_0 {
    ULONG BaseAddresses[6];
    ULONG CIS;
    USHORT SubVendorID;
    USHORT SubSystemID;
    ULONG ROMBaseAddress;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved1[3];
    ULONG Reserved2;
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    UCHAR MinimumGrant;
    UCHAR MaximumLatency;
};

typedef struct _PCI_HEADER_TYPE_1 {
    ULONG BaseAddresses[2];
    UCHAR PrimaryBus;
    UCHAR SecondaryBus;
    UCHAR SubordinateBus;
    UCHAR SecondaryLatency;
    UCHAR IOBase;
    UCHAR IOLimit;
    USHORT SecondaryStatus;
    USHORT MemoryBase;
    USHORT MemoryLimit;
    USHORT PrefetchBase;
    USHORT PrefetchLimit;
    ULONG PrefetchBaseUpper32;
    ULONG PrefetchLimitUpper32;
    USHORT IOBaseUpper16;
    USHORT IOLimitUpper16;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved1[3];
    ULONG ROMBaseAddress;
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    USHORT BridgeControl;
};

typedef struct _PCI_HEADER_TYPE_2 {
    ULONG SocketRegistersBaseAddress;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved;
    USHORT SecondaryStatus;
    UCHAR PrimaryBus;
    UCHAR SecondaryBus;
    UCHAR SubordinateBus;
    UCHAR SecondaryLatency;
     <unnamed-type-Range>;
    struct {
        ULONG Base;
        ULONG Limit;
    } Range[4];
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    USHORT BridgeControl;
};

typedef struct _PCI_MSIX_TABLE_CONFIG_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG SetTableEntry;
    PLONG MaskTableEntry;
    PLONG UnmaskTableEntry;
    PLONG GetTableEntry;
    PLONG GetTableSize;
};

typedef struct _PCI_MSI_MESSAGE_ADDRESS {
    ULONG Reserved : 2;
    ULONG Address : 30;
};

typedef struct _PCI_MSI_MESSAGE_CONTROL {
    USHORT MSIEnable : 1;
    USHORT MultipleMessageCapable : 3;
    USHORT MultipleMessageEnable : 3;
    USHORT CapableOf64Bits : 1;
    USHORT PerVectorMaskCapable : 1;
    USHORT Reserved : 7;
};

typedef struct _PCI_PMC {
    UCHAR Version : 3;
    UCHAR PMEClock : 1;
    UCHAR Rsvd1 : 1;
    UCHAR DeviceSpecificInitialization : 1;
    UCHAR Rsvd2 : 2;
     _PM_SUPPORT;
    struct _PCI_PMC::_PM_SUPPORT Support;
};

typedef struct _PCI_PMC::_PM_SUPPORT {
    UCHAR Rsvd2 : 1;
    UCHAR D1 : 1;
    UCHAR D2 : 1;
    UCHAR PMED0 : 1;
    UCHAR PMED1 : 1;
    UCHAR PMED2 : 1;
    UCHAR PMED3Hot : 1;
    UCHAR PMED3Cold : 1;
};

typedef struct _PCI_PMCSR {
    USHORT PowerState : 2;
    USHORT Rsvd1 : 1;
    USHORT NoSoftReset : 1;
    USHORT Rsvd2 : 4;
    USHORT PMEEnable : 1;
    USHORT DataSelect : 4;
    USHORT DataScale : 2;
    USHORT PMEStatus : 1;
};

typedef struct _PCI_PMCSR_BSE {
    UCHAR Rsvd1 : 6;
    UCHAR D3HotSupportsStopClock : 1;
    UCHAR BusPowerClockControlEnabled : 1;
};

typedef struct _PCI_PM_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
     <unnamed-type-PMC>;
    union {
        struct _PCI_PMC Capabilities;
        USHORT AsUSHORT;
    } PMC;
     <unnamed-type-PMCSR>;
    union {
        struct _PCI_PMCSR ControlStatus;
        USHORT AsUSHORT;
    } PMCSR;
     <unnamed-type-PMCSR_BSE>;
    union {
        struct _PCI_PMCSR_BSE BridgeSupport;
        UCHAR AsUCHAR;
    } PMCSR_BSE;
    UCHAR Data;
};

typedef struct _PCI_REGISTRY_INFO {
    UCHAR MajorRevision;
    UCHAR MinorRevision;
    UCHAR NoBuses;
    UCHAR HardwareMechanism;
};

typedef struct _PCI_ROOT_BUS_HARDWARE_CAPABILITY {
    enum _PCI_HARDWARE_INTERFACE SecondaryInterface;
    UCHAR BusCapabilitiesFound;
    ULONG CurrentSpeedAndMode;
    ULONG SupportedSpeedsAndModes;
    UCHAR DeviceIDMessagingCapable;
    enum PCI_BUS_WIDTH SecondaryBusWidth;
    struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD OscFeatureSupport;
    struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlRequest;
    struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlGranted;
};

typedef struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD {
     <unnamed-type-u>;
    union {
        ULONG ExpressNativeHotPlug : 1;
        ULONG ShpcNativeHotPlug : 1;
        ULONG ExpressNativePME : 1;
        ULONG ExpressAdvancedErrorReporting : 1;
        ULONG ExpressCapabilityStructure : 1;
        ULONG LatencyToleranceReporting : 1;
        ULONG Reserved : 26;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD {
     <unnamed-type-u>;
    union {
        ULONG ExtendedConfigOpRegions : 1;
        ULONG ActiveStatePowerManagement : 1;
        ULONG ClockPowerManagement : 1;
        ULONG SegmentGroups : 1;
        ULONG MessageSignaledInterrupts : 1;
        ULONG OptimizedBufferFlushAndFill : 1;
        ULONG AspmOptionality : 1;
        ULONG Reserved : 25;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_SECURITY_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG SetAccessControlServices;
};

typedef struct _PCI_SLOT_NUMBER {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG DeviceNumber : 5;
            ULONG FunctionNumber : 3;
            ULONG Reserved : 24;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_SUBSYSTEM_IDS_CAPABILITY {
    struct _PCI_CAPABILITIES_HEADER Header;
    USHORT Reserved;
    USHORT SubVendorID;
    USHORT SubSystemID;
};

typedef struct _PCI_TYPE0_CFG_CYCLE_BITS {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG Reserved1 : 2;
            ULONG RegisterNumber : 6;
            ULONG FunctionNumber : 3;
            ULONG Reserved2 : 21;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_TYPE1_CFG_BITS {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG Reserved1 : 2;
            ULONG RegisterNumber : 6;
            ULONG FunctionNumber : 3;
            ULONG DeviceNumber : 5;
            ULONG BusNumber : 8;
            ULONG Reserved2 : 7;
            ULONG Enable : 1;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_TYPE1_CFG_CYCLE_BITS {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG Reserved1 : 2;
            ULONG RegisterNumber : 6;
            ULONG FunctionNumber : 3;
            ULONG DeviceNumber : 5;
            ULONG BusNumber : 8;
            ULONG Reserved2 : 8;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _PCI_TYPE2_ADDRESS_BITS {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            USHORT RegisterNumber : 8;
            USHORT Agent : 4;
            USHORT AddressBase : 4;
        } bits;
        USHORT AsUSHORT;
    } u;
};

typedef struct _PCI_TYPE2_CSE_BITS {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            UCHAR Enable : 1;
            UCHAR FunctionNumber : 3;
            UCHAR Key : 4;
        } bits;
        UCHAR AsUCHAR;
    } u;
};

typedef struct _PCI_VIRTUALIZATION_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG SetVirtualFunctionData;
    PULONG GetVirtualFunctionData;
    PLONG GetLocation;
    PVOID GetResources;
    PLONG EnableVirtualization;
    PLONG GetVirtualFunctionProbedBars;
};

typedef struct _PCW_BUFFER {
};

typedef struct _PCW_CALLBACK_TABLE {
    PLONG Register;
    PVOID Unregister;
    PLONG CreateInstance;
    PVOID CloseInstance;
    PLONG AddInstance;
};

typedef struct _PCW_COUNTER_DESCRIPTOR {
    USHORT Id;
    USHORT StructIndex;
    USHORT Offset;
    USHORT Size;
};

typedef struct _PCW_COUNTER_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
};

typedef struct _PCW_DATA {
    PVOID Data;
    ULONG Size;
};

typedef struct _PCW_INSTANCE {
};

typedef struct _PCW_MASK_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
    ULONG InstanceId;
    UCHAR CollectMultiple;
    struct _PCW_BUFFER *Buffer;
    struct _KEVENT *CancelEvent;
};

typedef struct _PCW_REGISTRATION {
};

typedef struct _PCW_REGISTRATION_INFORMATION {
    ULONG Version;
    struct _UNICODE_STRING *Name;
    ULONG CounterCount;
    struct _PCW_COUNTER_DESCRIPTOR *Counters;
    PLONG Callback;
    PVOID CallbackContext;
};

typedef struct _PD_BUFFER {
    struct _PD_BUFFER *NextPDBuffer;
    struct _PD_BUFFER *NextPartialPDBuffer;
    PVOID PDClientReserved;
    PVOID PDClientContext;
    PUCHAR DataBufferVirtualAddress;
    union _LARGE_INTEGER DataBufferDmaLogicalAddress;
    ULONG DataBufferSize;
    USHORT PDClientContextSize;
    USHORT Attributes;
    USHORT Flags;
    USHORT DataStart;
    ULONG DataLength;
    struct {
        ULONG64 RxFilterContext;
        ULONG64 GftFlowEntryId;
        ULONG RxHashValue;
        ULONG RxIPHeaderChecksumSucceeded : 1;
        ULONG RxTCPChecksumSucceeded : 1;
        ULONG RxUDPChecksumSucceeded : 1;
        ULONG RxIPHeaderChecksumFailed : 1;
        ULONG RxTCPChecksumFailed : 1;
        ULONG RxUDPChecksumFailed : 1;
        ULONG RxHashComputed : 1;
        ULONG RxHashWithL4PortNumbers : 1;
        ULONG RxGftDirectionIngress : 1;
        ULONG RxGftExceptionPacket : 1;
        ULONG RxGftCopyPacket : 1;
        ULONG RxGftSamplePacket : 1;
        ULONG RxReserved1 : 4;
        ULONG RxCoalescedSegCount : 16;
        ULONG RxRscTcpTimestampDelta;
        ULONG RxOffloads[2];
        ULONG TxIsIPv4 : 1;
        ULONG TxIsIPv6 : 1;
        ULONG TxTransportHeaderOffset : 10;
        ULONG TxMSS : 20;
        ULONG TxComputeIPHeaderChecksum : 1;
        ULONG TxComputeTCPChecksum : 1;
        ULONG TxComputeUDPChecksum : 1;
        ULONG TxIsEncapsulatedPacket : 1;
        ULONG TxInnerPacketOffsetsValid : 1;
        ULONG TxReserved1 : 11;
        ULONG TxInnerFrameOffset : 8;
        ULONG TxInnerIpHeaderRelativeOffset : 6;
        ULONG TxInnerIsIPv6 : 1;
        ULONG TxInnerTcpOptionsPresent : 1;
        ULONG TxOffloads[2];
        struct _PD_BUFFER_VIRTUAL_SUBNET_INFO VirtualSubnetInfo;
        struct _PD_BUFFER_8021Q_INFO Ieee8021qInfo;
        USHORT GftSourceVPortId;
        ULONG Reserved;
        ULONG64 ProviderScratch;
    } MetaDataV0;
};

typedef struct _PD_BUFFER_8021Q_INFO {
    USHORT UserPriority : 3;
    USHORT CanonicalFormatId : 1;
    USHORT VlanId : 12;
};

typedef struct _PD_BUFFER_VIRTUAL_SUBNET_INFO {
    ULONG VirtualSubnetId : 24;
    ULONG Reserved : 8;
};

typedef struct _PEB {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR IsLongPathAwareProcess : 1;
    UCHAR Padding0[4];
    PVOID Mutant;
    PVOID ImageBaseAddress;
    struct _PEB_LDR_DATA *Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    struct _RTL_CRITICAL_SECTION *FastPebLock;
    union _SLIST_HEADER *AtlThunkSListPtr;
    PVOID IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ProcessPreviouslyThrottled : 1;
    ULONG ProcessCurrentlyThrottled : 1;
    ULONG ProcessImagesHotPatched : 1;
    ULONG ReservedBits0 : 24;
    UCHAR Padding1[4];
    PVOID KernelCallbackTable;
    PVOID UserSharedInfoPtr;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
    ULONG TlsExpansionCounter;
    UCHAR Padding2[4];
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PVOID SharedData;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG64 HeapSegmentReserve;
    ULONG64 HeapSegmentCommit;
    ULONG64 HeapDeCommitTotalFreeThreshold;
    ULONG64 HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    UCHAR Padding3[4];
    struct _RTL_CRITICAL_SECTION *LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    UCHAR Padding4[4];
    ULONG64 ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[60];
    PVOID PostProcessInitRoutine;
    PVOID TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    UCHAR Padding5[4];
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    PVOID pShimData;
    PVOID AppCompatInfo;
    struct _UNICODE_STRING CSDVersion;
    struct _ACTIVATION_CONTEXT_DATA *ActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
    struct _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
    ULONG64 MinimumStackCommit;
    struct _FLS_CALLBACK_INFO *FlsCallback;
    struct _LIST_ENTRY FlsListHead;
    PVOID FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    PVOID WerRegistrationData;
    PVOID WerShipAssertPtr;
    PVOID pUnused;
    PVOID pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    UCHAR Padding6[4];
    ULONG64 CsrServerReadOnlySharedMemoryBase;
    ULONG64 TppWorkerpListLock;
    struct _LIST_ENTRY TppWorkerpList;
    PVOID WaitOnAddressHashTable[128];
    PVOID TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    struct _LEAP_SECOND_DATA *LeapSecondData;
    ULONG LeapSecondFlags;
    ULONG SixtySecondEnabled : 1;
    ULONG Reserved : 31;
    ULONG NtGlobalFlag2;
};

typedef struct _PEBS_DS_SAVE_AREA {
    ULONG64 BtsBufferBase;
    ULONG64 BtsIndex;
    ULONG64 BtsAbsoluteMaximum;
    ULONG64 BtsInterruptThreshold;
    ULONG64 PebsBufferBase;
    ULONG64 PebsIndex;
    ULONG64 PebsAbsoluteMaximum;
    ULONG64 PebsInterruptThreshold;
    ULONG64 PebsCounterReset0;
    ULONG64 PebsCounterReset1;
    ULONG64 PebsCounterReset2;
    ULONG64 PebsCounterReset3;
};

typedef struct _PEB_LDR_DATA {
    ULONG Length;
    UCHAR Initialized;
    PVOID SsHandle;
    struct _LIST_ENTRY InLoadOrderModuleList;
    struct _LIST_ENTRY InMemoryOrderModuleList;
    struct _LIST_ENTRY InInitializationOrderModuleList;
    PVOID EntryInProgress;
    UCHAR ShutdownInProgress;
    PVOID ShutdownThreadId;
};

typedef struct _PEP_COORDINATED_DEPENDENCY_OPTION {
};

typedef struct _PEP_IDLE_UPDATE_REQUEST {
    ULONG StateIndex;
    ULONG Latency;
    ULONG BreakEvenDuration;
};

typedef struct _PEP_IDLE_VETO_REQUEST {
    ULONG StateIndex;
    ULONG VetoReason;
    UCHAR Increment;
};

typedef struct _PEP_PPM_IDLE_SELECT {
};

typedef struct _PEP_PPM_LPI_COORDINATED_STATES {
};

typedef struct _PEP_PPM_PARK_MASK {
};

typedef struct _PEP_PPM_PARK_SELECTION_V2 {
};

typedef struct _PEP_PPM_QUERY_COORDINATED_DEPENDENCY {
};

typedef struct _PEP_PPM_QUERY_PLATFORM_STATE {
};

typedef struct _PERFINFO_GROUPMASK {
    ULONG Masks[8];
};

typedef struct _PERF_CONTROL_STATE_SELECTION {
    ULONG64 SelectedState;
    ULONG SelectedPercent;
    ULONG SelectedFrequency;
    ULONG MinPercent;
    ULONG MaxPercent;
    ULONG TolerancePercent;
    ULONG EppPercent;
    ULONG AutonomousActivityWindow;
    UCHAR Autonomous;
    UCHAR InheritFromDomain;
};

typedef struct _PHYSICAL_CHANNEL_RUN {
    ULONG NodeNumber;
    ULONG ChannelNumber;
    ULONG64 BasePage;
    ULONG64 PageCount;
    ULONG64 Flags;
};

typedef struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR {
    enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE Type;
    ULONG Flags;
     <unnamed-type-u>;
    union {
        ULONG CounterIndex;
        ULONG ExtendedRegisterAddress;
         <unnamed-type-Range>;
        struct {
            ULONG Begin;
            ULONG End;
        } Range;
    } u;
};

typedef struct _PHYSICAL_COUNTER_RESOURCE_LIST {
    ULONG Count;
    struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _PHYSICAL_MEMORY_HEAT_RANGE {
     <unnamed-type-u1>;
    union {
        ULONG64 NumberOfPages : 10;
        ULONG64 PageSize : 2;
        ULONG64 PhysicalAddress;
    } u1;
};

typedef struct _PHYSICAL_MEMORY_RANGE {
    union _LARGE_INTEGER BaseAddress;
    union _LARGE_INTEGER NumberOfBytes;
};

typedef struct _PLATFORM_IDLE_STATE {
    struct _PROCESSOR_NUMBER InitiatingProcessor;
    UCHAR OneInitiator;
    UCHAR InitiatingState;
    ULONG Latency;
    ULONG BreakEvenTime;
    ULONG DependencyCount;
    struct _UNICODE_STRING Name;
    struct _PROCESSOR_IDLE_DEPENDENCY *Dependencies;
};

typedef struct _PLATFORM_IDLE_STATES {
    ULONG Version;
    ULONG Count;
    ULONG Definitions;
    PULONG IdleTest;
    PLONG IdlePreExecute;
    PVOID IdleComplete;
    PLONG QueryPlatformStateResidency;
    UCHAR Update;
    struct _PLATFORM_IDLE_STATE State[1];
};

typedef struct _PLATFORM_IDLE_VETO {
    ULONG Version;
    ULONG StateIndex;
    ULONG VetoReason;
    UCHAR Increment;
};

typedef struct _PLEX_READ_DATA_REQUEST {
    union _LARGE_INTEGER ByteOffset;
    ULONG ByteLength;
    ULONG PlexNumber;
};

typedef struct _PLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA {
    ULONG Flags;
    ULONG BufferLength;
    PVOID Buffer;
};

typedef struct _PLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA {
    struct _UNICODE_STRING DeviceInstance;
    struct _GUID *InterfaceGuid;
    struct _UNICODE_STRING Reference;
    UCHAR Register;
    PWCHAR SymLink;
    ULONG SymLinkLength;
};

typedef struct _PLUGPLAY_CONTROL_CONFLICT_DATA {
    struct _UNICODE_STRING DeviceInstance;
    struct _CM_RESOURCE_LIST *ResourceList;
    ULONG ResourceListSize;
    struct _PLUGPLAY_CONTROL_CONFLICT_LIST *ConflictBuffer;
    ULONG ConflictBufferSize;
    ULONG Flags;
    LONG Status;
};

typedef struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY {
    ULONG DeviceInstance;
    ULONG DeviceFlags;
    ULONG ResourceType;
    ULONG64 ResourceStart;
    ULONG64 ResourceEnd;
    ULONG ResourceFlags;
};

typedef struct _PLUGPLAY_CONTROL_CONFLICT_LIST {
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG ConflictsCounted;
    ULONG ConflictsListed;
    ULONG RequiredBufferSize;
    struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY ConflictEntry[1];
};

typedef struct _PLUGPLAY_CONTROL_CONFLICT_STRINGS {
    ULONG NullDeviceInstance;
    WCHAR DeviceInstanceStrings[1];
};

typedef struct _PLUGPLAY_CONTROL_DEPTH_DATA {
    struct _UNICODE_STRING DeviceInstance;
    ULONG DeviceDepth;
};

typedef struct _PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA {
    struct _UNICODE_STRING DeviceInstance;
    ULONG Flags;
};

typedef struct _PLUGPLAY_CONTROL_DEVICE_INTERFACE_ENABLED {
    struct _UNICODE_STRING DeviceInterface;
    ULONG Flags;
    UCHAR Enabled;
};

typedef struct _PLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA {
    struct _UNICODE_STRING DeviceInstance;
    enum _PNP_QUERY_RELATION Operation;
    ULONG BufferLength;
    PWCHAR Buffer;
};

typedef struct _PLUGPLAY_CONTROL_INSTALL_DATA {
    ULONG BufferLength;
    PWCHAR Buffer;
};

typedef struct _PLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA {
    struct _UNICODE_STRING SymbolicLinkName;
    struct _GUID *AliasClassGuid;
    PWCHAR AliasSymbolicLinkName;
    ULONG AliasSymbolicLinkNameLength;
};

typedef struct _PLUGPLAY_CONTROL_INTERFACE_LIST_DATA {
    struct _UNICODE_STRING DeviceInstance;
    struct _GUID *InterfaceGuid;
    PWCHAR InterfaceList;
    ULONG InterfaceListSize;
    ULONG Flags;
};

typedef struct _PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA {
    struct _UNICODE_STRING ServiceName;
    PWCHAR DeviceInstance;
    ULONG DeviceInstanceLength;
};

typedef struct _PLUGPLAY_CONTROL_PROPERTY_DATA {
    struct _UNICODE_STRING DeviceInstance;
    ULONG PropertyType;
    PVOID Buffer;
    ULONG BufferSize;
};

typedef struct _PLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA {
    struct _UNICODE_STRING DeviceInstance;
    ULONG Flags;
    enum _PNP_VETO_TYPE VetoType;
    PWCHAR VetoName;
    ULONG VetoNameLength;
};

typedef struct _PLUGPLAY_CONTROL_RELATED_DEVICE_DATA {
    struct _UNICODE_STRING TargetDeviceInstance;
    ULONG Relation;
    PWCHAR RelatedDeviceInstance;
    ULONG RelatedDeviceInstanceLength;
};

typedef struct _PLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA {
    ULONG DeviceInstanceLength;
    PWCHAR DeviceInstance;
};

typedef struct _PLUGPLAY_CONTROL_STATUS_DATA {
    struct _UNICODE_STRING DeviceInstance;
    ULONG Operation;
    ULONG DeviceStatus;
    ULONG DeviceProblem;
    ULONG Flags;
    LONG ProblemStatus;
};

typedef struct _PLUGPLAY_CONTROL_TARGET_RELATION_DATA {
    PVOID UserFileHandle;
    LONG Status;
    ULONG DeviceInstanceLen;
    PWCHAR DeviceInstance;
};

typedef struct _PLUGPLAY_CONTROL_USER_RESPONSE_DATA {
    ULONG Response;
    enum _PNP_VETO_TYPE VetoType;
    PWCHAR VetoName;
    ULONG VetoNameLength;
};

typedef struct _PLUGPLAY_CUSTOM_NOTIFICATION {
    struct _PLUGPLAY_NOTIFY_HDR HeaderInfo;
    PVOID FileObject;
    LONG NameBufferOffset;
    UCHAR CustomDataBuffer[1];
};

typedef struct _PLUGPLAY_EVENT_BLOCK {
    struct _GUID EventGuid;
    enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
    PULONG Result;
    ULONG Flags;
    ULONG TotalSize;
    PVOID DeviceObject;
     <unnamed-type-u>;
    union {
         <unnamed-type-DeviceClass>;
        struct {
            struct _GUID ClassGuid;
            WCHAR SymbolicLinkName[1];
        } DeviceClass;
         <unnamed-type-TargetDevice>;
        struct {
            WCHAR DeviceId[1];
        } TargetDevice;
         <unnamed-type-InstallDevice>;
        struct {
            WCHAR DeviceId[1];
        } InstallDevice;
         <unnamed-type-CustomNotification>;
        struct {
            PVOID NotificationStructure;
            WCHAR DeviceId[1];
        } CustomNotification;
         <unnamed-type-ProfileNotification>;
        struct {
            PVOID Notification;
        } ProfileNotification;
         <unnamed-type-PowerNotification>;
        struct {
            ULONG NotificationCode;
            ULONG NotificationData;
        } PowerNotification;
         <unnamed-type-VetoNotification>;
        struct {
            enum _PNP_VETO_TYPE VetoType;
            WCHAR DeviceIdVetoNameBuffer[1];
        } VetoNotification;
         <unnamed-type-BlockedDriverNotification>;
        struct {
            struct _GUID BlockedDriverGuid;
        } BlockedDriverNotification;
         <unnamed-type-InvalidIDNotification>;
        struct {
            WCHAR ParentId[1];
        } InvalidIDNotification;
         <unnamed-type-PowerSettingNotification>;
        struct {
            struct _GUID PowerSettingGuid;
            ULONG Flags;
            ULONG SessionId;
            ULONG DataLength;
            UCHAR Data[1];
        } PowerSettingNotification;
         <unnamed-type-PropertyChangeNotification>;
        struct {
            WCHAR DeviceId[1];
        } PropertyChangeNotification;
         <unnamed-type-DeviceInstanceNotification>;
        struct {
            WCHAR DeviceId[1];
        } DeviceInstanceNotification;
    } u;
};

typedef struct _PLUGPLAY_NOTIFICATION_HEADER {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
};

typedef struct _PLUGPLAY_NOTIFY_HDR {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
};

typedef struct _PMD {
    LONG mdisp;
    LONG pdisp;
    LONG vdisp;
};

typedef struct _PMKID_CANDIDATE {
    UCHAR BSSID[6];
    ULONG Flags;
};

typedef struct _PM_DISPATCH_TABLE {
    ULONG Signature;
    ULONG Version;
    PVOID Function[1];
};

typedef struct _PM_SUPPORT {
    UCHAR Rsvd2 : 1;
    UCHAR D1 : 1;
    UCHAR D2 : 1;
    UCHAR PMED0 : 1;
    UCHAR PMED1 : 1;
    UCHAR PMED2 : 1;
    UCHAR PMED3Hot : 1;
    UCHAR PMED3Cold : 1;
};

typedef struct _PNP_BUS_INFORMATION {
    struct _GUID BusTypeGuid;
    enum _INTERFACE_TYPE LegacyBusType;
    ULONG BusNumber;
};

typedef struct _PNP_EXTENDED_ADDRESS_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID QueryExtendedAddress;
};

typedef struct _PNP_LOCATION_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG GetLocationString;
};

typedef struct _PNP_REPLACE_DRIVER_INTERFACE {
    ULONG Size;
    ULONG Version;
    ULONG Flags;
    PVOID Unload;
    PLONG BeginReplace;
    PLONG EndReplace;
    PLONG MirrorPhysicalMemory;
    PLONG SetProcessorId;
    PLONG Swap;
    PLONG InitiateHardwareMirror;
    PLONG MirrorPlatformMemory;
    PLONG GetMemoryDestination;
    PLONG EnableDisableHardwareQuiesce;
};

typedef struct _PNP_REPLACE_MEMORY_LIST {
    ULONG AllocatedCount;
    ULONG Count;
    ULONG64 TotalLength;
     <unnamed-type-Ranges>;
    struct {
        union _LARGE_INTEGER Address;
        ULONG64 Length;
    } Ranges[1];
};

typedef struct _PNP_REPLACE_PARAMETERS {
    ULONG Size;
    ULONG Version;
    ULONG64 Target;
    ULONG64 Spare;
    struct _PNP_REPLACE_PROCESSOR_LIST *TargetProcessors;
    struct _PNP_REPLACE_PROCESSOR_LIST *SpareProcessors;
    struct _PNP_REPLACE_MEMORY_LIST *TargetMemory;
    struct _PNP_REPLACE_MEMORY_LIST *SpareMemory;
    PLONG MapMemory;
};

typedef struct _PNP_REPLACE_PROCESSOR_LIST {
    PULONG64 Affinity;
    ULONG GroupCount;
    ULONG AllocatedCount;
    ULONG Count;
    ULONG ApicIds[1];
};

typedef struct _PNP_REPLACE_PROCESSOR_LIST_V1 {
    ULONG64 AffinityMask;
    ULONG AllocatedCount;
    ULONG Count;
    ULONG ApicIds[1];
};

typedef struct _POOLED_USAGE_AND_LIMITS {
    ULONG64 PeakPagedPoolUsage;
    ULONG64 PagedPoolUsage;
    ULONG64 PagedPoolLimit;
    ULONG64 PeakNonPagedPoolUsage;
    ULONG64 NonPagedPoolUsage;
    ULONG64 NonPagedPoolLimit;
    ULONG64 PeakPagefileUsage;
    ULONG64 PagefileUsage;
    ULONG64 PagefileLimit;
};

typedef struct _PORT_DATA_ENTRY {
    PVOID Base;
    ULONG Size;
};

typedef struct _PORT_DATA_INFORMATION {
    ULONG CountDataEntries;
    struct _PORT_DATA_ENTRY DataEntries[1];
};

typedef struct _PORT_MESSAGE {
     <unnamed-type-u1>;
    union {
         <unnamed-type-s1>;
        struct {
            SHORT DataLength;
            SHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
     <unnamed-type-u2>;
    union {
         <unnamed-type-s2>;
        struct {
            SHORT Type;
            SHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    struct _CLIENT_ID ClientId;
    DOUBLE DoNotUseThisField;
    ULONG MessageId;
    ULONG64 ClientViewSize;
    ULONG CallbackId;
};

typedef struct _PORT_VIEW {
    ULONG Length;
    PVOID SectionHandle;
    ULONG SectionOffset;
    ULONG64 ViewSize;
    PVOID ViewBase;
    PVOID ViewRemoteBase;
};

typedef struct _POWER_IDLE_RESILIENCY {
    ULONG CoalescingTimeout;
    ULONG IdleResiliencyPeriod;
};

typedef struct _POWER_MONITOR_INVOCATION {
    UCHAR Console;
    enum POWER_MONITOR_REQUEST_REASON RequestReason;
};

typedef struct _POWER_PLATFORM_INFORMATION {
    UCHAR AoAc;
};

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
};

typedef struct _POWER_SESSION_CONNECT {
    UCHAR Connected;
    UCHAR Console;
};

typedef struct _POWER_SESSION_RIT_STATE {
    UCHAR Active;
    ULONG LastInputTime;
};

typedef struct _POWER_SESSION_TIMEOUTS {
    ULONG InputTimeout;
    ULONG DisplayTimeout;
};

typedef struct _POWER_SESSION_WINLOGON {
    ULONG SessionId;
    UCHAR Console;
    UCHAR Locked;
};

typedef struct _POWER_THROTTLING_PROCESS_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};

typedef struct _POWER_THROTTLING_THREAD_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};

typedef struct _POWER_USER_PRESENCE {
    enum POWER_USER_PRESENCE_TYPE UserPresence;
};

typedef struct _PO_CS_DEVICE_NOTIFICATION {
    PVOID Device;
    enum _PO_CS_DEVICE_NOTIFICATION_TYPE DeviceType;
    UCHAR Arriving;
    UCHAR Compliant;
};

typedef struct _PO_FX_COMPONENT_IDLE_STATE {
    ULONG64 TransitionLatency;
    ULONG64 ResidencyRequirement;
    ULONG NominalPower;
};

typedef struct _PO_FX_COMPONENT_PERF_INFO {
    ULONG PerfStateSetsCount;
    struct _PO_FX_COMPONENT_PERF_SET PerfStateSets[1];
};

typedef struct _PO_FX_COMPONENT_PERF_SET {
    struct _UNICODE_STRING Name;
    ULONG64 Flags;
    enum _PO_FX_PERF_STATE_UNIT Unit;
    enum _PO_FX_PERF_STATE_TYPE Type;
    struct {
        ULONG Count;
        struct _PO_FX_PERF_STATE *States;
    } Discrete;
    struct {
        ULONG64 Minimum;
        ULONG64 Maximum;
    } Range;
};

typedef struct _PO_FX_COMPONENT_V1 {
    struct _GUID Id;
    ULONG IdleStateCount;
    ULONG DeepestWakeableIdleState;
    struct _PO_FX_COMPONENT_IDLE_STATE *IdleStates;
};

typedef struct _PO_FX_COMPONENT_V2 {
    struct _GUID Id;
    ULONG64 Flags;
    ULONG DeepestWakeableIdleState;
    ULONG IdleStateCount;
    struct _PO_FX_COMPONENT_IDLE_STATE *IdleStates;
    ULONG ProviderCount;
    PULONG Providers;
};

typedef struct _PO_FX_DEVICE_V1 {
    ULONG Version;
    ULONG ComponentCount;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PVOID DevicePowerRequiredCallback;
    PVOID DevicePowerNotRequiredCallback;
    PLONG PowerControlCallback;
    PVOID DeviceContext;
    struct _PO_FX_COMPONENT_V1 Components[1];
};

typedef struct _PO_FX_DEVICE_V2 {
    ULONG Version;
    ULONG64 Flags;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PVOID DevicePowerRequiredCallback;
    PVOID DevicePowerNotRequiredCallback;
    PLONG PowerControlCallback;
    PVOID DeviceContext;
    ULONG ComponentCount;
    struct _PO_FX_COMPONENT_V2 Components[1];
};

typedef struct _PO_FX_INTERNAL_DEVICE {
    ULONG Version;
    ULONG64 Flags;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PVOID DevicePowerRequiredCallback;
    PVOID DevicePowerNotRequiredCallback;
    PLONG PowerControlCallback;
    PVOID DirectedPowerTransitionCallback;
    ULONG DirectedFxTimeoutInSeconds;
    PVOID DeviceContext;
    ULONG ComponentCount;
    struct _PO_FX_COMPONENT_V2 Components[1];
};

typedef struct _PO_FX_PERF_STATE {
    ULONG64 Value;
    PVOID Context;
};

typedef struct _PO_FX_PERF_STATE_CHANGE {
    ULONG Set;
    ULONG StateIndex;
    ULONG64 StateValue;
};

typedef struct _PO_FX_PRIMARY_DEVICE {
    ULONG Version;
    ULONG ComponentCount;
    ULONG Flags;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PVOID DevicePowerRequiredCallback;
    PVOID DevicePowerNotRequiredCallback;
    PLONG PowerControlCallback;
    PVOID ComponentCriticalTransitionCallback;
    PVOID DeviceContext;
    struct _PO_FX_COMPONENT_V1 Components[1];
};

typedef struct _PO_SESSION_DISPLAY_STATE {
    ULONG SessionId;
    ULONG DisplayState;
    enum POWER_MONITOR_REQUEST_REASON RequestReason;
    UCHAR IsConsole;
    UCHAR LogicalTransition;
    UCHAR VisibleTransition;
    UCHAR LogicalOn;
};

typedef struct _PO_SESSION_INIT {
    PUCHAR Sleeping;
    PUCHAR HybridShutdown;
    ULONG DisplayTimeout;
    ULONG DisplayDimTimeout;
    ULONG AwayMode;
    ULONG AcDc;
    ULONG NormalBrightnessLevel;
    ULONG DimBrightnessLevel;
    ULONG AlsOffset;
    ULONG EsOffset;
    UCHAR EsEngaged;
    UCHAR LidOpen;
    ULONG AlsEnabled;
    UCHAR TtmEnabled;
};

typedef struct _PO_SHUTDOWN_NOTIFICATION {
    PVOID MarkForBootPhase;
    PVOID Callback;
    PVOID Context;
};

typedef struct _PO_SPR_ACTIVE_SESSION_DATA {
    UCHAR Start;
    struct _GUID ActiveSessionGuid;
};

typedef struct _PO_WAKE_SOURCE_DEVICE {
    struct _PO_WAKE_SOURCE_HEADER Header;
    WCHAR InstancePath[1];
};

typedef struct _PO_WAKE_SOURCE_FIXED {
    struct _PO_WAKE_SOURCE_HEADER Header;
    enum PO_FIXED_WAKE_SOURCE_TYPE FixedWakeSourceType;
};

typedef struct _PO_WAKE_SOURCE_HEADER {
    enum PO_WAKE_SOURCE_TYPE Type;
    ULONG Size;
};

typedef struct _PO_WAKE_SOURCE_HISTORY {
    ULONG Count;
    ULONG Offsets[1];
};

typedef struct _PO_WAKE_SOURCE_INFO {
    ULONG Count;
    ULONG Offsets[1];
};

typedef struct _PO_WAKE_SOURCE_INTERNAL {
    struct _PO_WAKE_SOURCE_HEADER Header;
    enum PO_INTERNAL_WAKE_SOURCE_TYPE InternalWakeSourceType;
};

typedef struct _PO_WAKE_SOURCE_TIMER {
    struct _PO_WAKE_SOURCE_HEADER Header;
    struct _DIAGNOSTIC_BUFFER Reason;
};

typedef struct _PPM_DRIVER_DISPATCH_TABLE {
    ULONG InterfaceVersion;
    PLONG RegisterPerfStates;
    PVOID UpdatePerfStates;
    PLONG RegisterPerfCap;
    PLONG RegisterSpmSettings;
    PLONG RegisterIdleStates;
    PLONG RegisterIdleDomains;
    PLONG RegisterPlatformStates;
    PLONG RegisterCoordinatedStates;
    PLONG RegisterVetoList;
    PLONG RemoveVetoBias;
    PLONG UpdateProcessorIdleVeto;
    PLONG UpdatePlatformIdleVeto;
    PLONG RegisterPerfStatesHv;
    PLONG RegisterPerfCapHv;
    PLONG RegisterIdleStatesHv;
    PLONG RegisterPerfStatesCountersHv;
    PLONG SetProcessorPep;
    PLONG ParkPreferenceNotification;
    PLONG ParkMaskNotification;
    PLONG IdleSelectNotification;
    PLONG QueryPlatformStateNotification;
    PLONG QueryCoordinatedDependencyNotification;
    PLONG NotifyLpiCoordinatedStatesNotification;
    PVOID RegisterEnergyEstimation;
    PLONG RequestProcessorHalt;
    PUCHAR GetHgsEnablementStatus;
    PVOID DispatchHgsInterrupt;
};

typedef struct _PPM_IDLE_STATE_OVERRIDE {
    ULONG CStateIndex;
    struct _PROCESSOR_NUMBER ProcessorNumber;
};

typedef struct _PP_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE *P;
    struct _GENERAL_LOOKASIDE *L;
};

typedef struct _PREFETCH_VIRTUAL_ADDRESS_ENTRY {
    PVOID VirtualAddress;
    ULONG64 NumberOfBytes;
};

typedef struct _PREFETCH_VIRTUAL_ADDRESS_LIST {
    ULONG Version;
    union _PREFETCH_VIRTUAL_ADDRESS_FLAGS u1;
    PVOID AddressSpaceHandle;
    ULONG64 NumberOfEntries;
    struct _PREFETCH_VIRTUAL_ADDRESS_ENTRY *VirtualAddresses;
};

typedef struct _PREFIX_TABLE {
    SHORT NodeTypeCode;
    SHORT NameLength;
    struct _PREFIX_TABLE_ENTRY *NextPrefixTree;
};

typedef struct _PREFIX_TABLE_ENTRY {
    SHORT NodeTypeCode;
    SHORT NameLength;
    struct _PREFIX_TABLE_ENTRY *NextPrefixTree;
    struct _RTL_SPLAY_LINKS Links;
    struct _STRING *Prefix;
};

typedef struct _PREREGISTERED_VETO_LIST {
    ULONG VetoCount;
    struct _UNICODE_STRING VetoNames[1];
};

typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[1];
};

typedef struct _PROCESSOR_CAP {
    ULONG Version;
    struct _PROCESSOR_NUMBER ProcessorNumber;
    ULONG PlatformCap;
    ULONG ThermalCap;
    ULONG LimitReasons;
};

typedef struct _PROCESSOR_FEEDBACK_COUNTER {
    PVOID InstantaneousRead;
    PVOID DifferentialRead;
    ULONG NominalRate;
    ULONG Type;
    UCHAR Affinitized;
    UCHAR Differential;
    UCHAR DiscardIdleTime;
};

typedef struct _PROCESSOR_GROUP_INFO {
    UCHAR MaximumProcessorCount;
    UCHAR ActiveProcessorCount;
    UCHAR Reserved[38];
    ULONG64 ActiveProcessorMask;
};

typedef struct _PROCESSOR_IDLE_CONSTRAINTS {
    ULONG64 TotalTime;
    ULONG64 IdleTime;
    ULONG64 ExpectedIdleDuration;
    ULONG64 MaxIdleDuration;
    ULONG OverrideState;
    ULONG TimeCheck;
    UCHAR PromotePercent;
    UCHAR DemotePercent;
    UCHAR Parked;
    UCHAR Interruptible;
    UCHAR PlatformIdle;
    UCHAR ExpectedWakeReason;
    UCHAR IdleStateMax;
};

typedef struct _PROCESSOR_IDLE_DEPENDENCY {
    ULONG ProcessorIndex;
    UCHAR ExpectedState;
    UCHAR AllowDeeperStates;
    UCHAR LooseDependency;
};

typedef struct _PROCESSOR_IDLE_DOMAIN {
    struct _KAFFINITY_EX Members;
};

typedef struct _PROCESSOR_IDLE_DOMAINS {
    ULONG Version;
    ULONG Count;
    struct _KAFFINITY_EX TargetProcessors;
    struct _PROCESSOR_IDLE_DOMAIN State[1];
};

typedef struct _PROCESSOR_IDLE_PREPARE_INFO {
    PVOID Context;
    struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;
    ULONG DependencyCount;
    ULONG DependencyUsed;
    struct _PROCESSOR_IDLE_DEPENDENCY *DependencyArray;
    ULONG PlatformIdleStateIndex;
    ULONG ProcessorIdleStateIndex;
    ULONG IdleSelectFailureMask;
};

typedef struct _PROCESSOR_IDLE_STATE {
    UCHAR StateType;
    ULONG StateFlags;
    ULONG HardwareLatency;
    ULONG Power;
    ULONG64 Context;
    PLONG Handler;
};

typedef struct _PROCESSOR_IDLE_STATES {
    ULONG Size;
    ULONG Revision;
    ULONG Count;
    ULONG Type;
    ULONG64 TargetProcessors;
    struct _PROCESSOR_IDLE_STATE State[1];
};

typedef struct _PROCESSOR_IDLE_STATES_EX {
    ULONG Version;
    struct _PROCESSOR_NUMBER Processor;
    PVOID Context;
    UCHAR EstimateIdleDuration;
    UCHAR Update;
    UCHAR StrictVetoBias;
    UCHAR InterfaceVersion;
    PVOID IdlePrepare;
    PVOID IdleCancel;
    PULONG IdlePreselect;
    PULONG IdleTest;
    PULONG IdleAvailabilityCheck;
    PLONG IdlePreExecute;
    ULONG64 LevelId;
    PLONG IdleExecute;
    PVOID IdleComplete;
    PUCHAR IdleIsHalted;
    PUCHAR IdleInitiateWake;
    ULONG MaximumDependencies;
    ULONG ProcessorIdleCount;
    struct _PROCESSOR_IDLE_STATE_EX State[1];
};

typedef struct _PROCESSOR_IDLE_STATES_HV {
    ULONG Version;
    ULONG InitialApicId;
    PVOID IdleStateConfig;
};

typedef struct _PROCESSOR_IDLE_STATE_EX {
    ULONG Interruptible : 1;
    ULONG CacheCoherent : 1;
    ULONG ThreadContextRetained : 1;
    ULONG CStateType : 4;
    ULONG WakesSpuriously : 1;
    ULONG PlatformOnly : 1;
    ULONG Reserved : 21;
    ULONG NoCState : 1;
    ULONG InterruptsEnabled : 1;
    ULONG Latency;
    ULONG BreakEvenDuration;
    ULONG Power;
    struct _UNICODE_STRING Name;
};

typedef struct _PROCESSOR_IDLE_VETO {
    ULONG Version;
    struct _PROCESSOR_NUMBER ProcessorNumber;
    ULONG StateIndex;
    ULONG VetoReason;
    UCHAR Increment;
};

typedef struct _PROCESSOR_LOAD {
    struct _PROCESSOR_NUMBER ProcessorNumber;
    UCHAR BusyPercentage;
    UCHAR FrequencyPercentage;
};

typedef struct _PROCESSOR_LOCKSTEP {
    ULONG Processor;
    LONG Limit;
    LONG TargetCount;
    PLONG TargetPhase;
    VOID _PROCESSOR_LOCKSTEP;
    VOID _PROCESSOR_LOCKSTEP;
    struct _PROCESSOR_LOCKSTEP *operator=;
    struct _PROCESSOR_LOCKSTEP *operator=;
};

typedef struct _PROCESSOR_NUMBER {
    USHORT Group;
    UCHAR Number;
    UCHAR Reserved;
};

typedef struct _PROCESSOR_PERF_CAP_HV {
    ULONG Version;
    ULONG InitialApicId;
    ULONG Ppc;
    ULONG Tpc;
    ULONG ThermalCap;
};

typedef struct _PROCESSOR_PERF_INFO {
    struct _PROCESSOR_NUMBER Number;
    ULONG64 PerfContext;
    ULONG PlatformCap;
    ULONG ThermalCap;
    ULONG LimitReasons;
};

typedef struct _PROCESSOR_PERF_STATES {
    ULONG Version;
    USHORT Type;
    UCHAR HardPlatformCap;
    UCHAR AffinitizeControl;
    UCHAR EfficientThrottle;
    UCHAR EppViaPerfControl;
    UCHAR AutonomousActivityWindowViaPerfControl;
    UCHAR AllowSchedulerDirectedPerfStates;
    UCHAR IdleProcessorVotesCount;
    ULONG ProcessorCount;
    ULONG NominalFrequency;
    ULONG MaxPerfPercent;
    ULONG MinPerfPercent;
    ULONG MinThrottlePercent;
    ULONG FeedbackCounterCount;
    ULONG MinimumPerfCheckPeriod;
    ULONG AdvertizedMaximumFrequency;
    ULONG SuggestedQosHysteresis;
    UCHAR AutonomousMode;
    ULONG64 MinimumRelativePerformance;
    ULONG64 NominalRelativePerformance;
    ULONG64 GlobalContext;
    ULONG64 DomainContext;
    struct _KAFFINITY_EX TargetProcessors;
    PVOID GetFFHThrottleState;
    PVOID TimeWindowHandler;
    PVOID BoostPolicyHandler;
    PVOID BoostModeHandler;
    PVOID AutonomousActivityWindowHandler;
    PVOID AutonomousModeHandler;
    PLONG StartPolicyUpdate;
    PLONG CompletePolicyUpdate;
    PVOID ReinitializeHandler;
    PULONG PerfSelectionHandler;
    PVOID PerfControlHandler;
    PVOID DomainPerfControlHandler;
    PVOID PerfControlReadFeedback;
    PVOID PerfControlAcquirePerformance;
    PVOID PerfControlCommitPerformance;
    PVOID ParkPreference;
    PVOID ParkMask;
    PVOID PerfCheckComplete;
    struct _PROCESSOR_FEEDBACK_COUNTER *FeedbackCounters;
    struct _PROCESSOR_PERF_INFO *Processors;
    PULONG64 CounterContexts;
};

typedef struct _PROCESSOR_PERF_STATES_COUNTERS_HV {
    ULONG Version;
    PVOID HypervisorStates;
    struct _PROCESSOR_PERF_STATES *KernelStates;
};

typedef struct _PROCESSOR_PERF_STATES_HV {
    ULONG Version;
    ULONG InitialApicId;
    PVOID PerfStateConfig;
    PVOID ThrottleStateConfig;
    PVOID PccConfig;
};

typedef struct _PROCESSOR_PERF_STATES_UPDATE {
    ULONG MaxPerfPercent;
    struct _KAFFINITY_EX TargetProcessors;
};

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES {
    ULONG Count;
    struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];
};

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY {
    ULONG64 Residency;
    ULONG64 TransitionCount;
};

typedef struct _PROCESSOR_POWER_INFORMATION {
    ULONG Number;
    ULONG MaxMhz;
    ULONG CurrentMhz;
    ULONG MhzLimit;
    ULONG MaxIdleState;
    ULONG CurrentIdleState;
};

typedef struct _PROCESSOR_POWER_POLICY {
    ULONG Revision;
    UCHAR DynamicThrottle;
    UCHAR Spare[3];
    ULONG DisableCStates : 1;
    ULONG Reserved : 31;
    ULONG PolicyCount;
    struct _PROCESSOR_POWER_POLICY_INFO Policy[3];
};

typedef struct _PROCESSOR_POWER_POLICY_INFO {
    ULONG TimeCheck;
    ULONG DemoteLimit;
    ULONG PromoteLimit;
    UCHAR DemotePercent;
    UCHAR PromotePercent;
    UCHAR Spare[2];
    ULONG AllowDemotion : 1;
    ULONG AllowPromotion : 1;
    ULONG Reserved : 30;
};

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA {
    struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
};

typedef struct _PROCESSOR_RELATIONSHIP {
    UCHAR Flags;
    UCHAR EfficiencyClass;
    UCHAR Reserved[20];
    USHORT GroupCount;
    struct _GROUP_AFFINITY GroupMask[1];
};

typedef struct _PROCESS_ACCESS_TOKEN {
    PVOID Token;
    PVOID Thread;
};

typedef struct _PROCESS_BASIC_INFORMATION {
    LONG ExitStatus;
    struct _PEB *PebBaseAddress;
    ULONG64 AffinityMask;
    LONG BasePriority;
    ULONG64 UniqueProcessId;
    ULONG64 InheritedFromUniqueProcessId;
};

typedef struct _PROCESS_BASIC_INFORMATION64 {
    LONG ExitStatus;
    ULONG Pad1;
    ULONG64 PebBaseAddress;
    ULONG64 AffinityMask;
    LONG BasePriority;
    ULONG Pad2;
    ULONG64 UniqueProcessId;
    ULONG64 InheritedFromUniqueProcessId;
};

typedef struct _PROCESS_CHILD_PROCESS_INFORMATION {
    UCHAR ProhibitChildProcesses;
    UCHAR AlwaysAllowSecureChildProcess;
    UCHAR AuditProhibitChildProcesses;
};

typedef struct _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION {
    PVOID ProcessHandle;
};

typedef struct _PROCESS_COMMIT_RELEASE_INFORMATION {
    ULONG Version;
    ULONG Eligible : 1;
    ULONG ReleaseRepurposedMemResetCommit : 1;
    ULONG ForceReleaseMemResetCommit : 1;
    ULONG Spare : 29;
    ULONG64 CommitDebt;
    ULONG64 CommittedMemResetSize;
    ULONG64 RepurposedMemResetSize;
};

typedef struct _PROCESS_CYCLE_TIME_INFORMATION {
    ULONG64 AccumulatedCycles;
    ULONG64 CurrentCycleCount;
};

typedef struct _PROCESS_DEVICEMAP_INFORMATION {
    struct {
        PVOID DirectoryHandle;
    } Set;
    struct {
        ULONG DriveMap;
        UCHAR DriveType[32];
    } Query;
};

typedef struct _PROCESS_DEVICEMAP_INFORMATION_EX {
    struct {
        PVOID DirectoryHandle;
    } Set;
    struct {
        ULONG DriveMap;
        UCHAR DriveType[32];
    } Query;
    ULONG Flags;
};

typedef struct _PROCESS_DISK_COUNTERS {
    ULONG64 BytesRead;
    ULONG64 BytesWritten;
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 FlushOperationCount;
};

typedef struct _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION {
    struct _DYNAMIC_FUNCTION_TABLE *DynamicFunctionTable;
    UCHAR Remove;
};

typedef struct _PROCESS_ENERGY_TRACKING_STATE {
    ULONG StateUpdateMask;
    ULONG StateDesiredValue;
    ULONG StateSequence;
    ULONG UpdateTag : 1;
    WCHAR Tag[64];
};

typedef struct _PROCESS_ENERGY_VALUES {
    ULONG64 Cycles[4][2];
    ULONG64 DiskEnergy;
    ULONG64 NetworkTailEnergy;
    ULONG64 MBBTailEnergy;
    ULONG64 NetworkTxRxBytes;
    ULONG64 MBBTxRxBytes;
    union _ENERGY_STATE_DURATION Durations[3];
    union _ENERGY_STATE_DURATION ForegroundDuration;
    union _ENERGY_STATE_DURATION DesktopVisibleDuration;
    union _ENERGY_STATE_DURATION PSMForegroundDuration;
    ULONG CompositionRendered;
    ULONG CompositionDirtyGenerated;
    ULONG CompositionDirtyPropagated;
    ULONG Reserved1;
    ULONG64 AttributedCycles[4][2];
    ULONG64 WorkOnBehalfCycles[4][2];
};

typedef struct _PROCESS_ENERGY_VALUES_EXTENSION {
    union _TIMELINE_BITMAP Timelines[14];
    union _TIMELINE_BITMAP CpuTimeline;
    union _TIMELINE_BITMAP DiskTimeline;
    union _TIMELINE_BITMAP NetworkTimeline;
    union _TIMELINE_BITMAP MBBTimeline;
    union _TIMELINE_BITMAP ForegroundTimeline;
    union _TIMELINE_BITMAP DesktopVisibleTimeline;
    union _TIMELINE_BITMAP CompositionRenderedTimeline;
    union _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
    union _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
    union _TIMELINE_BITMAP InputTimeline;
    union _TIMELINE_BITMAP AudioInTimeline;
    union _TIMELINE_BITMAP AudioOutTimeline;
    union _TIMELINE_BITMAP DisplayRequiredTimeline;
    union _TIMELINE_BITMAP KeyboardInputTimeline;
    union _ENERGY_STATE_DURATION Durations[5];
    union _ENERGY_STATE_DURATION InputDuration;
    union _ENERGY_STATE_DURATION AudioInDuration;
    union _ENERGY_STATE_DURATION AudioOutDuration;
    union _ENERGY_STATE_DURATION DisplayRequiredDuration;
    union _ENERGY_STATE_DURATION PSMBackgroundDuration;
    ULONG KeyboardInput;
    ULONG MouseInput;
};

typedef struct _PROCESS_EXCEPTION_PORT {
    PVOID ExceptionPortHandle;
    ULONG StateFlags;
};

typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION {
    ULONG64 Size;
    struct _PROCESS_BASIC_INFORMATION BasicInfo;
    ULONG Flags;
    ULONG IsProtectedProcess : 1;
    ULONG IsWow64Process : 1;
    ULONG IsProcessDeleting : 1;
    ULONG IsCrossSessionCreate : 1;
    ULONG IsFrozen : 1;
    ULONG IsBackground : 1;
    ULONG IsStronglyNamed : 1;
    ULONG IsSecureProcess : 1;
    ULONG IsSubsystemProcess : 1;
    ULONG SpareBits : 23;
};

typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION64 {
    ULONG64 Size;
    struct _PROCESS_BASIC_INFORMATION64 BasicInfo;
    ULONG Flags;
    ULONG IsProtectedProcess : 1;
    ULONG IsWow64Process : 1;
    ULONG IsProcessDeleting : 1;
    ULONG IsCrossSessionCreate : 1;
    ULONG IsFrozen : 1;
    ULONG IsBackground : 1;
    ULONG IsStronglyNamed : 1;
    ULONG IsSecureProcess : 1;
    ULONG IsPicoProcess : 1;
    ULONG SpareBits : 23;
};

typedef struct _PROCESS_EXTENDED_ENERGY_VALUES {
    struct _PROCESS_ENERGY_VALUES Base;
    struct _PROCESS_ENERGY_VALUES_EXTENSION Extension;
};

typedef struct _PROCESS_FAULT_INFORMATION {
    ULONG FaultFlags;
    ULONG AdditionalInfo;
};

typedef struct _PROCESS_FOREGROUND_BACKGROUND {
    UCHAR Foreground;
};

typedef struct _PROCESS_HANDLE_INFORMATION {
    ULONG HandleCount;
    ULONG HandleCountHighWatermark;
};

typedef struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION {
    ULONG64 NumberOfHandles;
    ULONG64 Reserved;
    struct _PROCESS_HANDLE_TABLE_ENTRY_INFO Handles[1];
};

typedef struct _PROCESS_HANDLE_TABLE_ENTRY_INFO {
    PVOID HandleValue;
    ULONG64 HandleCount;
    ULONG64 PointerCount;
    ULONG GrantedAccess;
    ULONG ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
};

typedef struct _PROCESS_HANDLE_TRACING_ENABLE {
    ULONG Flags;
};

typedef struct _PROCESS_HANDLE_TRACING_ENABLE_EX {
    ULONG Flags;
    ULONG TotalSlots;
};

typedef struct _PROCESS_HANDLE_TRACING_ENTRY {
    PVOID Handle;
    struct _CLIENT_ID ClientId;
    ULONG Type;
    PVOID Stacks[16];
};

typedef struct _PROCESS_HANDLE_TRACING_QUERY {
    PVOID Handle;
    ULONG TotalTraces;
    struct _PROCESS_HANDLE_TRACING_ENTRY HandleTrace[1];
};

typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION {
    ULONG Version;
    ULONG Reserved;
    ULONG64 Callback;
};

typedef struct _PROCESS_JOB_MEMORY_INFO {
    ULONG64 SharedCommitUsage;
    ULONG64 PrivateCommitUsage;
    ULONG64 PeakPrivateCommitUsage;
    ULONG64 PrivateCommitLimit;
    ULONG64 TotalCommitLimit;
};

typedef struct _PROCESS_KEEPALIVE_COUNT_INFORMATION {
    ULONG WakeCount;
    ULONG NoWakeCount;
};

typedef struct _PROCESS_LEAP_SECOND_INFORMATION {
    ULONG Flags;
    ULONG Reserved;
};

typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    ULONG Flags;
    ULONG EnableBottomUpRandomization : 1;
    ULONG EnableForceRelocateImages : 1;
    ULONG EnableHighEntropy : 1;
    ULONG DisallowStrippedImages : 1;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    ULONG Flags;
    ULONG MicrosoftSignedOnly : 1;
    ULONG StoreSignedOnly : 1;
    ULONG MitigationOptIn : 1;
    ULONG AuditMicrosoftSignedOnly : 1;
    ULONG AuditStoreSignedOnly : 1;
    ULONG ReservedFlags : 27;
};

typedef struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
    ULONG Flags;
    ULONG NoChildProcessCreation : 1;
    ULONG AuditNoChildProcessCreation : 1;
    ULONG AllowSecureProcessCreation : 1;
    ULONG ReservedFlags : 29;
};

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    ULONG Flags;
    ULONG EnableControlFlowGuard : 1;
    ULONG EnableExportSuppression : 1;
    ULONG StrictMode : 1;
    ULONG ReservedFlags : 29;
};

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    ULONG Flags;
    ULONG Enable : 1;
    ULONG DisableAtlThunkEmulation : 1;
    ULONG ReservedFlags : 30;
    UCHAR Permanent;
};

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    ULONG Flags;
    ULONG ProhibitDynamicCode : 1;
    ULONG AllowThreadOptOut : 1;
    ULONG AllowRemoteDowngrade : 1;
    ULONG AuditProhibitDynamicCode : 1;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    ULONG Flags;
    ULONG DisableExtensionPoints : 1;
    ULONG ReservedFlags : 31;
};

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    ULONG Flags;
    ULONG DisableNonSystemFonts : 1;
    ULONG AuditNonSystemFontLoading : 1;
    ULONG ReservedFlags : 30;
};

typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
    ULONG Flags;
    ULONG NoRemoteImages : 1;
    ULONG NoLowMandatoryLabelImages : 1;
    ULONG PreferSystem32Images : 1;
    ULONG AuditNoRemoteImages : 1;
    ULONG AuditNoLowMandatoryLabelImages : 1;
    ULONG ReservedFlags : 27;
};

typedef struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
    ULONG Flags;
    ULONG EnableExportAddressFilter : 1;
    ULONG AuditExportAddressFilter : 1;
    ULONG EnableExportAddressFilterPlus : 1;
    ULONG AuditExportAddressFilterPlus : 1;
    ULONG EnableImportAddressFilter : 1;
    ULONG AuditImportAddressFilter : 1;
    ULONG EnableRopStackPivot : 1;
    ULONG AuditRopStackPivot : 1;
    ULONG EnableRopCallerCheck : 1;
    ULONG AuditRopCallerCheck : 1;
    ULONG EnableRopSimExec : 1;
    ULONG AuditRopSimExec : 1;
    ULONG ReservedFlags : 20;
};

typedef struct _PROCESS_MITIGATION_POLICY_INFORMATION {
    enum _PROCESS_MITIGATION_POLICY Policy;
    struct _PROCESS_MITIGATION_ASLR_POLICY ASLRPolicy;
    struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY StrictHandleCheckPolicy;
    struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY SystemCallDisablePolicy;
    struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY ExtensionPointDisablePolicy;
    struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY DynamicCodePolicy;
    struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY ControlFlowGuardPolicy;
    struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY SignaturePolicy;
    struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY FontDisablePolicy;
    struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY ImageLoadPolicy;
    struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY SystemCallFilterPolicy;
    struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY PayloadRestrictionPolicy;
    struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY ChildProcessPolicy;
    struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY SideChannelIsolationPolicy;
};

typedef struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
    ULONG Flags;
    ULONG SmtBranchTargetIsolation : 1;
    ULONG IsolateSecurityDomain : 1;
    ULONG DisablePageCombine : 1;
    ULONG SpeculativeStoreBypassDisable : 1;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    ULONG Flags;
    ULONG RaiseExceptionOnInvalidHandleReference : 1;
    ULONG HandleExceptionsPermanentlyEnabled : 1;
    ULONG ReservedFlags : 30;
};

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    ULONG Flags;
    ULONG DisallowWin32kSystemCalls : 1;
    ULONG AuditDisallowWin32kSystemCalls : 1;
    ULONG ReservedFlags : 30;
};

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
    ULONG Flags;
    ULONG FilterId : 4;
    ULONG ReservedFlags : 28;
};

typedef struct _PROCESS_PRIORITY_CLASS {
    UCHAR Foreground;
    UCHAR PriorityClass;
};

typedef struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION {
    struct _UNICODE_STRING TargetDevicePath;
};

typedef struct _PROCESS_SECURITY_DOMAIN_INFORMATION {
    ULONG64 SecurityDomain;
};

typedef struct _PROCESS_SESSION_INFORMATION {
    ULONG SessionId;
};

typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION {
    ULONG64 ReserveSize;
    ULONG64 ZeroBits;
    PVOID StackBase;
};

typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX {
    ULONG PreferredNode;
    ULONG Reserved0;
    ULONG Reserved1;
    ULONG Reserved2;
    struct _PROCESS_STACK_ALLOCATION_INFORMATION AllocInfo;
};

typedef struct _PROCESS_TELEMETRY_ID_INFORMATION {
    ULONG HeaderSize;
    ULONG ProcessId;
    ULONG64 ProcessStartKey;
    ULONG64 CreateTime;
    ULONG64 CreateInterruptTime;
    ULONG64 CreateUnbiasedInterruptTime;
    ULONG64 ProcessSequenceNumber;
    ULONG64 SessionCreateTime;
    ULONG SessionId;
    ULONG BootId;
    ULONG ImageChecksum;
    ULONG ImageTimeDateStamp;
    ULONG UserSidOffset;
    ULONG ImagePathOffset;
    ULONG PackageNameOffset;
    ULONG RelativeAppNameOffset;
    ULONG CommandLineOffset;
};

typedef struct _PROCESS_TIMER_DELAY_INFORMATION {
    ULONG DelayTime;
    ULONG CoalesceTime;
};

typedef struct _PROCESS_TLS_INFORMATION {
    ULONG Flags;
    ULONG OperationType;
    ULONG ThreadDataCount;
    ULONG TlsIndex;
    ULONG PreviousCount;
    struct _THREAD_TLS_INFORMATION ThreadData[1];
};

typedef struct _PROCESS_UPTIME_INFORMATION {
    ULONG64 QueryInterruptTime;
    ULONG64 QueryUnbiasedTime;
    ULONG64 EndInterruptTime;
    ULONG64 TimeSinceCreation;
    ULONG64 Uptime;
    ULONG64 SuspendedTime;
    ULONG HangCount : 4;
    ULONG GhostCount : 4;
    ULONG Crashed : 1;
    ULONG Terminated : 1;
};

typedef struct _PROCESS_WAKE_INFORMATION {
    ULONG64 NotificationChannel;
    ULONG WakeCounters[7];
    struct _JOBOBJECT_WAKE_FILTER WakeFilter;
};

typedef struct _PROCESS_WINDOW_INFORMATION {
    ULONG WindowFlags;
    USHORT WindowTitleLength;
    WCHAR WindowTitle[1];
};

typedef struct _PROCESS_WORKING_SET_CONTROL {
    ULONG Version;
    enum _PROCESS_WORKING_SET_OPERATION Operation;
    ULONG Flags;
};

typedef struct _PROCESS_WS_WATCH_INFORMATION {
    PVOID FaultingPc;
    PVOID FaultingVa;
};

typedef struct _PROCESS_WS_WATCH_INFORMATION_EX {
    struct _PROCESS_WS_WATCH_INFORMATION BasicInfo;
    ULONG64 FaultingThreadId;
    ULONG64 Flags;
};

typedef struct _PROFILE_ACPI_DOCKING_STATE {
    USHORT DockingState;
    USHORT SerialLength;
    WCHAR SerialNumber[1];
};

typedef struct _PROFILE_PARAMETER_BLOCK {
    USHORT Status;
    USHORT Reserved;
    USHORT DockingState;
    USHORT Capabilities;
    ULONG DockID;
    ULONG SerialNumber;
};

typedef struct _PROFILE_SOURCE_INFO {
    ULONG NextEntryOffset;
    ULONG Source;
    ULONG MinInterval;
    ULONG MaxInterval;
    ULONG64 Reserved;
    WCHAR Description[1];
};

typedef struct _PS_ATTRIBUTE {
    ULONG64 Attribute;
    ULONG64 Size;
    ULONG64 Value;
    PVOID ValuePtr;
    PULONG64 ReturnLength;
};

typedef struct _PS_ATTRIBUTE_LIST {
    ULONG64 TotalLength;
    struct _PS_ATTRIBUTE Attributes[1];
};

typedef struct _PS_BAM_CALLOUT_TABLE {
    PVOID CreateProcess;
    PLONG SetThrottleState;
    PLONG GetThrottleState;
    PLONG SetExeModerationState;
    PLONG GetUserSettings;
    PVOID SetLoaderDetour;
};

typedef struct _PS_BAM_HOST_INTERFACE {
    PLONG SetTimerDelay;
    PVOID SetPpmPolicy;
    PVOID TrySetPebThrottlingFlags;
    PVOID SetThreadPpmPolicy;
};

typedef struct _PS_BNO_ISOLATION_PARAMETERS {
    struct _UNICODE_STRING IsolationPrefix;
    ULONG HandleCount;
    PVOID *Handles;
    UCHAR IsolationEnabled;
};

typedef struct _PS_CPU_QUOTA_QUERY_ENTRY {
    ULONG SessionId;
    ULONG Weight;
};

typedef struct _PS_CPU_QUOTA_QUERY_INFORMATION {
    ULONG SessionCount;
    struct _PS_CPU_QUOTA_QUERY_ENTRY SessionInformation[1];
};

typedef struct _PS_CPU_QUOTA_SET_INFORMATION {
    LONG64 SessionHandle;
    ULONG Weight;
};

typedef struct _PS_CREATE_INFO {
    ULONG64 Size;
    enum PS_CREATE_STATE State;
    struct {
        ULONG InitFlags;
        UCHAR WriteOutputOnExit : 1;
        UCHAR DetectManifest : 1;
        UCHAR IFEOSkipDebugger : 1;
        UCHAR IFEODoNotPropagateKeyState : 1;
        UCHAR SpareBits1 : 4;
        UCHAR SpareBits2 : 8;
        USHORT ProhibitedImageCharacteristics : 16;
        ULONG AdditionalFileAccess;
    } InitState;
    struct {
        PVOID FileHandle;
    } FailSection;
    struct {
        USHORT DllCharacteristics;
    } ExeFormat;
    struct {
        PVOID IFEOKey;
    } ExeName;
    struct {
        ULONG OutputFlags;
        UCHAR ProtectedProcess : 1;
        UCHAR AddressSpaceOverride : 1;
        UCHAR DevOverrideEnabled : 1;
        UCHAR ManifestDetected : 1;
        UCHAR ProtectedProcessLight : 1;
        UCHAR SpareBits1 : 3;
        UCHAR SpareBits2 : 8;
        USHORT SpareBits3 : 16;
        PVOID FileHandle;
        PVOID SectionHandle;
        ULONG64 UserProcessParametersNative;
        ULONG UserProcessParametersWow64;
        ULONG CurrentParameterFlags;
        ULONG64 PebAddressNative;
        ULONG PebAddressWow64;
        ULONG64 ManifestAddress;
        ULONG ManifestSize;
    } SuccessState;
};

typedef struct _PS_CREATE_NOTIFY_INFO {
    ULONG64 Size;
    ULONG Flags;
    ULONG FileOpenNameAvailable : 1;
    ULONG IsSubsystemProcess : 1;
    ULONG Reserved : 30;
    PVOID ParentProcessId;
    struct _CLIENT_ID CreatingThreadId;
    struct _FILE_OBJECT *FileObject;
    struct _UNICODE_STRING *ImageFileName;
    struct _UNICODE_STRING *CommandLine;
    LONG CreationStatus;
};

typedef struct _PS_DAM_CALLOUT_TABLE {
    PVOID CreateProcess;
};

typedef struct _PS_HW_TRACE_HOST_INTERFACE {
    PVOID ControlThreadHwTracing;
    enum _PS_HW_TRACE_CONTROL *QueryThreadHwTracing;
};

typedef struct _PS_MEMORY_RESERVE {
    PVOID ReserveAddress;
    ULONG64 ReserveSize;
};

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PS_MITIGATION_OPTIONS_MAP {
    ULONG64 Map[2];
};

typedef struct _PS_MMCSS_CALLOUT_TABLE {
    PVOID FreezeProcess;
};

typedef struct _PS_MMCSS_HOST_INTERFACE {
    PUCHAR GetFreezeState;
};

typedef struct _PS_OCT_HOST_INTERFACE {
    struct _EPROCESS **GetNextProcessEx;
    struct _ETHREAD **GetNextProcessThread;
    PVOID QuitNextProcessThread;
    PLONG GetUserContextThreadInternal;
};

typedef struct _PS_PICO_CREATE_PROCESS_CONTEXT {
    struct _FILE_OBJECT *FileObject;
    struct _UNICODE_STRING *ImageFileName;
    struct _UNICODE_STRING *CommandLine;
};

typedef struct _PS_PICO_PROCESS_ATTRIBUTES {
    PVOID ParentProcess;
    PVOID Token;
    PVOID Context;
    ULONG Flags;
};

typedef struct _PS_PICO_PROVIDER_ROUTINES {
    ULONG64 Size;
    PUCHAR DispatchSystemCall;
    PVOID ExitThread;
    PVOID ExitProcess;
    PUCHAR DispatchException;
    PLONG TerminateProcess;
    PULONG WalkUserStack;
    struct _KADDRESS_RANGE_DESCRIPTOR *ProtectedRanges;
    PLONG GetAllocatedProcessImageName;
    ULONG OpenProcessAllowedAccess;
    ULONG OpenThreadAllowedAccess;
    enum _SUBSYSTEM_INFORMATION_TYPE SubsystemInformationType;
};

typedef struct _PS_PICO_ROUTINES {
    ULONG64 Size;
    PLONG CreateProcess;
    PLONG CreateThread;
    PVOID *GetProcessContext;
    PVOID *GetThreadContext;
    PLONG GetContextThreadInternal;
    PLONG SetContextThreadInternal;
    PLONG TerminateThread;
    PLONG ResumeThread;
    PVOID SetThreadDescriptorBase;
    PLONG SuspendThread;
    PLONG TerminateProcess;
};

typedef struct _PS_PICO_SYSTEM_CALL_INFORMATION {
    struct _KTRAP_FRAME *TrapFrame;
};

typedef struct _PS_PICO_THREAD_ATTRIBUTES {
    PVOID Process;
    ULONG64 UserStack;
    ULONG64 StartRoutine;
    ULONG64 StartParameter1;
    ULONG64 StartParameter2;
    ULONG64 UserFsBase;
    ULONG64 UserGsBase;
    USHORT UserFsSeg;
    USHORT UserGsSeg;
    ULONG64 Rax;
    ULONG64 Rbx;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 Rbp;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    PVOID Context;
};

typedef struct _PS_PKG_CLAIM {
    ULONG64 Flags : 16;
    ULONG64 Origin : 8;
};

typedef struct _PS_PROCESS_TIMER_COUNTERS {
    ULONG KTimerSets;
    ULONG KTimer2Sets;
    ULONG ThreadTimerSets;
};

typedef struct _PS_PROTECTION {
    UCHAR Level;
    UCHAR Type : 3;
    UCHAR Audit : 1;
    UCHAR Signer : 4;
};

typedef struct _PS_SEC_HOST_INTERFACE {
    PUCHAR IsProcessPrimaryTokenFrozen;
};

typedef struct _PS_STD_HANDLE_INFO {
    ULONG Flags;
    ULONG StdHandleState : 2;
    ULONG PseudoHandleMask : 3;
    ULONG StdHandleSubsystemType;
};

typedef struct _PS_SYSTEM_DLL_INIT_BLOCK {
    ULONG Size;
    ULONG64 SystemDllWowRelocation;
    ULONG64 SystemDllNativeRelocation;
    ULONG64 Wow64SharedInformation[16];
    ULONG RngData;
    ULONG Flags;
    ULONG CfgOverride : 1;
    ULONG Reserved : 31;
    struct _PS_MITIGATION_OPTIONS_MAP MitigationOptionsMap;
    ULONG64 CfgBitMap;
    ULONG64 CfgBitMapSize;
    ULONG64 Wow64CfgBitMap;
    ULONG64 Wow64CfgBitMapSize;
    struct _PS_MITIGATION_AUDIT_OPTIONS_MAP MitigationAuditOptionsMap;
};

typedef struct _PTM_CONTROL_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG QueryGranularity;
    PLONG QueryTimeSource;
    PLONG Enable;
    PLONG Disable;
};

typedef struct _PUBLIC_OBJECT_BASIC_INFORMATION {
    ULONG Attributes;
    ULONG GrantedAccess;
    ULONG HandleCount;
    ULONG PointerCount;
    ULONG Reserved[10];
};

typedef struct _QOS_SD_MODE {
    struct QOS_OBJECT_HDR ObjectHdr;
    ULONG ShapeDiscardMode;
};

typedef struct _QOS_SHAPING_RATE {
    struct QOS_OBJECT_HDR ObjectHdr;
    ULONG ShapingRate;
};

typedef struct _QUAD {
    LONG64 UseThisFieldToCopy;
    DOUBLE DoNotUseThisField;
};

typedef struct _QUERY {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesWritten;
    ULONG BytesNeeded;
};

typedef struct _QUERY_BAD_RANGES_INPUT {
    ULONG Flags;
    ULONG NumRanges;
    struct _QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
};

typedef struct _QUERY_BAD_RANGES_INPUT_RANGE {
    ULONG64 StartOffset;
    ULONG64 LengthInBytes;
};

typedef struct _QUERY_BAD_RANGES_OUTPUT {
    ULONG Flags;
    ULONG NumBadRanges;
    ULONG64 NextOffsetToLookUp;
    struct _QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];
};

typedef struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
    ULONG Flags;
    ULONG Reserved;
    ULONG64 StartOffset;
    ULONG64 LengthInBytes;
};

typedef struct _QUERY_FILE_LAYOUT_INPUT {
    ULONG FilterEntryCount;
    ULONG NumberOfPairs;
    ULONG Flags;
    enum _QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
    ULONG Reserved;
     <unnamed-type-Filter>;
    union {
        struct _CLUSTER_RANGE ClusterRanges[1];
        struct _FILE_REFERENCE_RANGE FileReferenceRanges[1];
        enum _STORAGE_RESERVE_ID StorageReserveIds[1];
    } Filter;
};

typedef struct _QUERY_FILE_LAYOUT_OUTPUT {
    ULONG FileEntryCount;
    ULONG FirstFileOffset;
    ULONG Flags;
    ULONG Reserved;
};

typedef struct _QUERY_PERFORMANCE_COUNTER_FLAGS {
    ULONG KernelTransition : 1;
    ULONG Reserved : 31;
    ULONG ul;
};

typedef struct _QUERY_STORAGE_RESERVE_INPUT {
    ULONG Version;
    ULONG Flags;
    ULONG AreaIdOffset;
    ULONG AreaIdCount;
    enum _STORAGE_RESERVE_ID AreaId[1];
};

typedef struct _QUERY_STORAGE_RESERVE_OUTPUT {
    ULONG Version;
    ULONG AreaInfoCount;
    struct _STORAGE_RESERVE_AREA_INFO AreaInfo[1];
};

typedef struct _QUOTA_LIMITS {
    ULONG64 PagedPoolLimit;
    ULONG64 NonPagedPoolLimit;
    ULONG64 MinimumWorkingSetSize;
    ULONG64 MaximumWorkingSetSize;
    ULONG64 PagefileLimit;
    union _LARGE_INTEGER TimeLimit;
};

typedef struct _QUOTA_LIMITS_EX {
    ULONG64 PagedPoolLimit;
    ULONG64 NonPagedPoolLimit;
    ULONG64 MinimumWorkingSetSize;
    ULONG64 MaximumWorkingSetSize;
    ULONG64 PagefileLimit;
    union _LARGE_INTEGER TimeLimit;
    ULONG64 WorkingSetLimit;
    ULONG64 Reserved2;
    ULONG64 Reserved3;
    ULONG64 Reserved4;
    ULONG Flags;
    union _RATE_QUOTA_LIMIT CpuRateLimit;
};

typedef struct _RC_CONFIG {
    ULONG dwSignature;
    ULONG dwLength;
    ULONG dwRCConfigVersion;
    ULONG dwFilePathType;
    ULONG dwFileType;
    ULONG dwSystemAttributes;
    ULONG dwUltimateFallbackLocation;
    ULONG dwServiceCheckSum[4];
    ULONG dwChecksum[4];
    ULONG dwReserved1;
    ULONG dwReserved2;
    ULONG dwMUIFileNameOffset;
    ULONG dwMUIFileNameLength;
    ULONG dwMUIFilePathOffset;
    ULONG dwMUIFilePathLength;
    ULONG dwMainResNameTypesOffset;
    ULONG dwMainResNameTypesLength;
    ULONG dwMainResIDTypesOffset;
    ULONG dwMainResIDTypesLength;
    ULONG dwMUIResNameTypesOffset;
    ULONG dwMUIResNameTypesLength;
    ULONG dwMUIResIDTypesOffset;
    ULONG dwMUIResIDTypesLength;
    ULONG dwLanguageOffset;
    ULONG dwLanguageLength;
    ULONG dwUltimateFallbackLanguageOffset;
    ULONG dwUltimateFallbackLanguageLength;
};

typedef struct _REAL_TIME_NOTIFICATION_SETTING_INPUT {
    struct TRANSPORT_SETTING_ID TransportSettingId;
    struct _GUID BrokerEventGuid;
};

typedef struct _REAL_TIME_NOTIFICATION_SETTING_INPUT_EX {
    struct TRANSPORT_SETTING_ID TransportSettingId;
    struct _GUID BrokerEventGuid;
    UCHAR Unmark;
};

typedef struct _REAL_TIME_NOTIFICATION_SETTING_OUTPUT {
    enum CONTROL_CHANNEL_TRIGGER_STATUS ChannelStatus;
};

typedef struct _REARRANGE_FILE_DATA {
    ULONG64 SourceStartingOffset;
    ULONG64 TargetOffset;
    PVOID SourceFileHandle;
    ULONG Length;
    ULONG Flags;
};

typedef struct _REARRANGE_FILE_DATA32 {
    ULONG64 SourceStartingOffset;
    ULONG64 TargetOffset;
    ULONG SourceFileHandle;
    ULONG Length;
    ULONG Flags;
};

typedef struct _REASON_BUFFER {
    ULONG Flags;
    ULONG64 ResourceFileNameOffset;
    USHORT ResourceReasonId;
    ULONG StringCount;
    ULONG64 SubstitutionStringsOffset;
    ULONG64 SimpleStringOffset;
};

typedef struct _RECEIEVE_SCALING_ENCAPSULATION {
    enum _NET_ADAPTER_RECEIVE_SCALING_ENCAPSULATION_TYPE Outer;
    enum _NET_ADAPTER_RECEIVE_SCALING_ENCAPSULATION_TYPE Inner;
};

typedef struct _RECORDER_CONFIGURE_PARAMS {
    ULONG Size;
    UCHAR CreateDefaultLog;
};

typedef struct _RECORDER_LOG_CREATE_PARAMS {
    ULONG Size;
    ULONG LogTag;
    ULONG TotalBufferSize;
    ULONG ErrorPartitionSize;
    ULONG64 LogIdentifierAppendValue;
    UCHAR LogIdentifierAppendValueSet;
    ULONG LogIdentifierSize;
    CHAR LogIdentifier[16];
};

typedef struct _REENUMERATE_SELF_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PVOID SurpriseRemoveAndReenumerateSelf;
};

typedef struct _REFERENCE {
    ULONG64 SpinLock;
    USHORT ReferenceCount;
    UCHAR Closing;
};

typedef struct _REFS_DEALLOCATE_RANGES_INPUT_BUFFER {
    ULONG RangeCount;
    struct _REFS_DEALLOCATE_RANGES_RANGE Ranges[1];
};

typedef struct _REFS_DEALLOCATE_RANGES_RANGE {
    ULONG64 StartOfRange;
    ULONG64 CountOfRange;
};

typedef struct _REFS_SMR_VOLUME_GC_PARAMETERS {
    ULONG Version;
    ULONG Flags;
    enum _REFS_SMR_VOLUME_GC_ACTION Action;
    enum _REFS_SMR_VOLUME_GC_METHOD Method;
    ULONG IoGranularity;
    ULONG CompressionFormat;
    ULONG64 Unused[8];
};

typedef struct _REFS_SMR_VOLUME_INFO_OUTPUT {
    ULONG Version;
    ULONG Flags;
    union _LARGE_INTEGER SizeOfRandomlyWritableTier;
    union _LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
    union _LARGE_INTEGER SizeofSMRTier;
    union _LARGE_INTEGER FreeSpaceInSMRTier;
    union _LARGE_INTEGER UsableFreeSpaceInSMRTier;
    enum _REFS_SMR_VOLUME_GC_STATE VolumeGcState;
    LONG VolumeGcLastStatus;
    ULONG64 Unused[7];
};

typedef struct _REFS_VOLUME_COUNTER_INFO_INPUT_BUFFER {
    UCHAR ResetCounters;
};

typedef struct _REG_CALLBACK_CONTEXT_CLEANUP_INFORMATION {
    PVOID Object;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_CREATE_KEY_INFORMATION {
    struct _UNICODE_STRING *CompleteName;
    PVOID RootObject;
    PVOID ObjectType;
    ULONG CreateOptions;
    struct _UNICODE_STRING *Class;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
    ULONG DesiredAccess;
    ULONG GrantedAccess;
    PULONG Disposition;
    PVOID *ResultObject;
    PVOID CallContext;
    PVOID RootObjectContext;
    PVOID Transaction;
    PVOID Reserved;
};

typedef struct _REG_CREATE_KEY_INFORMATION_V1 {
    struct _UNICODE_STRING *CompleteName;
    PVOID RootObject;
    PVOID ObjectType;
    ULONG Options;
    struct _UNICODE_STRING *Class;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
    ULONG DesiredAccess;
    ULONG GrantedAccess;
    PULONG Disposition;
    PVOID *ResultObject;
    PVOID CallContext;
    PVOID RootObjectContext;
    PVOID Transaction;
    ULONG64 Version;
    struct _UNICODE_STRING *RemainingName;
    ULONG Wow64Flags;
    ULONG Attributes;
    CHAR CheckAccessMode;
};

typedef struct _REG_DELETE_KEY_INFORMATION {
    PVOID Object;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_DELETE_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *ValueName;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_ENUMERATE_KEY_INFORMATION {
    PVOID Object;
    ULONG Index;
    enum _KEY_INFORMATION_CLASS KeyInformationClass;
    PVOID KeyInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_ENUMERATE_VALUE_KEY_INFORMATION {
    PVOID Object;
    ULONG Index;
    enum _KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass;
    PVOID KeyValueInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_KEY_HANDLE_CLOSE_INFORMATION {
    PVOID Object;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_LOAD_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *KeyName;
    struct _UNICODE_STRING *SourceFile;
    ULONG Flags;
    PVOID TrustClassObject;
    PVOID UserEvent;
    ULONG DesiredAccess;
    PVOID *RootHandle;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_NOTIFY_INFORMATION {
    ULONG NextEntryOffset;
    enum _REG_ACTION Action;
    ULONG KeyLength;
    WCHAR Key[1];
};

typedef struct _REG_POST_CREATE_KEY_INFORMATION {
    struct _UNICODE_STRING *CompleteName;
    PVOID Object;
    LONG Status;
};

typedef struct _REG_POST_OPERATION_INFORMATION {
    PVOID Object;
    LONG Status;
    PVOID PreInformation;
    LONG ReturnStatus;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_PRE_CREATE_KEY_INFORMATION {
    struct _UNICODE_STRING *CompleteName;
};

typedef struct _REG_QUERY_KEY_INFORMATION {
    PVOID Object;
    enum _KEY_INFORMATION_CLASS KeyInformationClass;
    PVOID KeyInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_KEY_NAME {
    PVOID Object;
    struct _OBJECT_NAME_INFORMATION *ObjectNameInfo;
    ULONG Length;
    PULONG ReturnLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_KEY_SECURITY_INFORMATION {
    PVOID Object;
    PULONG SecurityInformation;
    PVOID SecurityDescriptor;
    PULONG Length;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _KEY_VALUE_ENTRY *ValueEntries;
    ULONG EntryCount;
    PVOID ValueBuffer;
    PULONG BufferLength;
    PULONG RequiredBufferLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_QUERY_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *ValueName;
    enum _KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass;
    PVOID KeyValueInformation;
    ULONG Length;
    PULONG ResultLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_RENAME_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *NewName;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_REPLACE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *OldFileName;
    struct _UNICODE_STRING *NewFileName;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_RESTORE_KEY_INFORMATION {
    PVOID Object;
    PVOID FileHandle;
    ULONG Flags;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SAVE_KEY_INFORMATION {
    PVOID Object;
    PVOID FileHandle;
    ULONG Format;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SET_INFORMATION_KEY_INFORMATION {
    PVOID Object;
    enum _KEY_SET_INFORMATION_CLASS KeySetInformationClass;
    PVOID KeySetInformation;
    ULONG KeySetInformationLength;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SET_KEY_SECURITY_INFORMATION {
    PVOID Object;
    PULONG SecurityInformation;
    PVOID SecurityDescriptor;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_SET_VALUE_KEY_INFORMATION {
    PVOID Object;
    struct _UNICODE_STRING *ValueName;
    ULONG TitleIndex;
    ULONG Type;
    PVOID Data;
    ULONG DataSize;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REG_UNLOAD_KEY_INFORMATION {
    PVOID Object;
    PVOID UserEvent;
    PVOID CallContext;
    PVOID ObjectContext;
    PVOID Reserved;
};

typedef struct _REMOTE_LINK_TRACKING_INFORMATION_ {
    PVOID TargetFileObject;
    ULONG TargetLinkTrackingInformationLength;
    UCHAR TargetLinkTrackingInformationBuffer[1];
};

typedef struct _REMOTE_PORT_VIEW {
    ULONG Length;
    ULONG64 ViewSize;
    PVOID ViewBase;
};

typedef struct _REPAIR_COPIES_INPUT {
    ULONG Size;
    ULONG Flags;
    union _LARGE_INTEGER FileOffset;
    ULONG Length;
    ULONG SourceCopy;
    ULONG NumberOfRepairCopies;
    ULONG RepairCopies[1];
};

typedef struct _REPAIR_COPIES_OUTPUT {
    ULONG Size;
    LONG Status;
    union _LARGE_INTEGER ResumeFileOffset;
};

typedef struct _REPAIR_STORAGE_RESERVE_INPUT {
    ULONG Version;
    ULONG Flags;
    ULONG AreaIdOffset;
    ULONG AreaIdCount;
    enum _STORAGE_RESERVE_ID AreaId[1];
};

typedef struct _REPARSE_DATA_BUFFER {
    ULONG ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    struct {
        USHORT SubstituteNameOffset;
        USHORT SubstituteNameLength;
        USHORT PrintNameOffset;
        USHORT PrintNameLength;
        ULONG Flags;
        WCHAR PathBuffer[1];
    } SymbolicLinkReparseBuffer;
    struct {
        USHORT SubstituteNameOffset;
        USHORT SubstituteNameLength;
        USHORT PrintNameOffset;
        USHORT PrintNameLength;
        WCHAR PathBuffer[1];
    } MountPointReparseBuffer;
    struct {
        UCHAR DataBuffer[1];
    } GenericReparseBuffer;
};

typedef struct _REPARSE_DATA_BUFFER_EX {
    ULONG Flags;
    ULONG ExistingReparseTag;
    struct _GUID ExistingReparseGuid;
    ULONG64 Reserved;
    struct _REPARSE_DATA_BUFFER ReparseDataBuffer;
    struct _REPARSE_GUID_DATA_BUFFER ReparseGuidDataBuffer;
};

typedef struct _REPARSE_GUID_DATA_BUFFER {
    ULONG ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    struct _GUID ReparseGuid;
     <unnamed-type-GenericReparseBuffer>;
    struct {
        UCHAR DataBuffer[1];
    } GenericReparseBuffer;
};

typedef struct _REPARSE_INDEX_KEY {
    ULONG FileReparseTag;
    union _LARGE_INTEGER FileId;
};

typedef struct _REPARSE_POINT_INFORMATION {
    USHORT ReparseDataLength;
    USHORT UnparsedNameLength;
};

typedef struct _REQUEST_MAILBOX {
    struct _REQUEST_MAILBOX *Next;
    ULONG64 RequestSummary;
    struct _KREQUEST_PACKET RequestPacket;
    PLONG NodeTargetCountAddr;
    LONG NodeTargetCount;
    VOID _REQUEST_MAILBOX;
    VOID _REQUEST_MAILBOX;
    struct _REQUEST_MAILBOX *operator=;
    struct _REQUEST_MAILBOX *operator=;
};

typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {
    USHORT StructureVersion;
    USHORT StructureLength;
    ULONG RequestedOplockLevel;
    ULONG Flags;
};

typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
    USHORT StructureVersion;
    USHORT StructureLength;
    ULONG OriginalOplockLevel;
    ULONG NewOplockLevel;
    ULONG Flags;
    ULONG AccessMode;
    USHORT ShareMode;
};

typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
    LONG64 FileOffset;
    ULONG Length;
};

typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    struct _GUID ResourceManagerId;
    ULONG DescriptionLength;
    WCHAR Description[1];
};

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    PVOID IoCompletionPortHandle;
    ULONG64 CompletionKey;
};

typedef struct _RESOURCE_HASH_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID Address;
    ULONG ContentionCount;
    ULONG Number;
};

typedef struct _RESOURCE_PERFORMANCE_DATA {
    ULONG ActiveResourceCount;
    ULONG TotalResourceCount;
    ULONG ExclusiveAcquire;
    ULONG SharedFirstLevel;
    ULONG SharedSecondLevel;
    ULONG StarveFirstLevel;
    ULONG StarveSecondLevel;
    ULONG WaitForExclusive;
    ULONG OwnerTableExpands;
    ULONG MaximumTableExpand;
    struct _LIST_ENTRY HashTable[64];
};

typedef struct _RESUME_PERFORMANCE {
    ULONG PostTimeMs;
    ULONG64 TotalResumeTimeMs;
    ULONG64 ResumeCompleteTimestamp;
};

typedef struct _RETRIEVAL_POINTER_BASE {
    union _LARGE_INTEGER FileAreaOffset;
};

typedef struct _RIORESULT {
    LONG Status;
    ULONG BytesTransferred;
    ULONG64 SocketContext;
    ULONG64 RequestContext;
};

typedef struct _RIO_BUF {
    struct RIO_BUFFERID_t *BufferId;
    ULONG Offset;
    ULONG Length;
};

typedef struct _RIO_CMSG_BUFFER {
    ULONG TotalLength;
};

typedef struct _RSS_SCALABILITY_INFO {
    UCHAR RssEnabled;
};

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
};

typedef struct _RTL_AVL_TABLE {
    struct _RTL_BALANCED_LINKS BalancedRoot;
    PVOID OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    ULONG DepthOfTree;
    struct _RTL_BALANCED_LINKS *RestartKey;
    ULONG DeleteCount;
    enum _RTL_GENERIC_COMPARE_RESULTS *CompareRoutine;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    PVOID TableContext;
};

typedef struct _RTL_AVL_TREE {
    struct _RTL_BALANCED_NODE *Root;
};

typedef struct _RTL_BACKOFF {
    ULONG Delay;
};

typedef struct _RTL_BALANCED_LINKS {
    struct _RTL_BALANCED_LINKS *Parent;
    struct _RTL_BALANCED_LINKS *LeftChild;
    struct _RTL_BALANCED_LINKS *RightChild;
    CHAR Balance;
    UCHAR Reserved[3];
};

typedef struct _RTL_BALANCED_NODE {
    struct _RTL_BALANCED_NODE *Children[2];
    struct _RTL_BALANCED_NODE *Left;
    struct _RTL_BALANCED_NODE *Right;
    UCHAR Red : 1;
    UCHAR Balance : 2;
    ULONG64 ParentValue;
};

typedef struct _RTL_BARRIER {
    LONG Barrier;
    LONG LeftBarrier;
    PVOID WaitEvent[2];
    LONG TotalProcessors;
    ULONG Spins;
    struct {
        ULONG Reserved1;
        ULONG Reserved2;
        ULONG64 Reserved3[2];
        ULONG Reserved4;
        ULONG Reserved5;
    } DUMMYRESERVEDSTRUCTNAME;
    VOID _RTL_BARRIER;
    VOID _RTL_BARRIER;
    struct _RTL_BARRIER *operator=;
    struct _RTL_BARRIER *operator=;
};

typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;
    PULONG Buffer;
};

typedef struct _RTL_BITMAP_EX {
    ULONG64 SizeOfBitMap;
    PULONG64 Buffer;
};

typedef struct _RTL_BITMAP_RUN {
    ULONG StartingIndex;
    ULONG NumberOfBits;
};

typedef struct _RTL_BSD_ITEM {
    enum RTL_BSD_ITEM_TYPE Type;
    PVOID DataBuffer;
    ULONG DataLength;
};

typedef struct _RTL_BUFFER {
    PUCHAR Buffer;
    PUCHAR StaticBuffer;
    ULONG64 Size;
    ULONG64 StaticSize;
};

typedef struct _RTL_CIRCULAR_LIST_HEAD {
    struct _LIST_ENTRY *HeadEntry;
};

typedef struct _RTL_CRITICAL_SECTION {
};

typedef struct _RTL_DISK_SPACE_INFO {
    enum RTL_DISK_SPACE_POLICY Policy;
};

typedef struct _RTL_DISK_SPEED_INFO {
    enum RTL_DISK_SPEED_POLICY Policy;
};

typedef struct _RTL_DISK_WRITE_CONSTRAINT_INFO {
    enum RTL_DISK_WRITE_CONSTRAINT_POLICY Policy;
};

typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    struct _STRING DosPath;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE {
    ULONG Flags;
    ULONG Shift;
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;
    PVOID Directory;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
    struct _LIST_ENTRY *ChainHead;
    struct _LIST_ENTRY *PrevLinkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
    struct _LIST_ENTRY Linkage;
    ULONG64 Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    struct _LIST_ENTRY *CurEntry;
    struct _LIST_ENTRY *ChainHead;
    ULONG BucketIndex;
};

typedef struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION {
    struct _RTL_TIME_ZONE_INFORMATION tzi;
    WCHAR TimeZoneKeyName[128];
    UCHAR DynamicDaylightTimeDisabled;
};

typedef struct _RTL_GENERIC_TABLE {
    struct _RTL_SPLAY_LINKS *TableRoot;
    struct _LIST_ENTRY InsertOrderList;
    struct _LIST_ENTRY *OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    enum _RTL_GENERIC_COMPARE_RESULTS *CompareRoutine;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    PVOID TableContext;
};

typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA {
    ULONG64 CommitLimitBytes;
    ULONG64 CommitLimitFailureCode;
    ULONG64 MaxAllocationSizeBytes;
    ULONG64 AllocationLimitFailureCode;
};

typedef struct _RTL_HEAP_MEMORY_LIMIT_INFO {
    ULONG Version;
    struct _RTL_HEAP_MEMORY_LIMIT_DATA Data;
};

typedef struct _RTL_HEAP_PARAMETERS {
    ULONG Length;
    ULONG64 SegmentReserve;
    ULONG64 SegmentCommit;
    ULONG64 DeCommitFreeBlockThreshold;
    ULONG64 DeCommitTotalFreeThreshold;
    ULONG64 MaximumAllocationSize;
    ULONG64 VirtualMemoryThreshold;
    ULONG64 InitialCommit;
    ULONG64 InitialReserve;
    PLONG CommitRoutine;
    ULONG64 Reserved[2];
};

typedef struct _RTL_IMAGE_MITIGATION_ASLR_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY ForceRelocateImages;
    union _RTL_IMAGE_MITIGATION_POLICY BottomUpRandomization;
    union _RTL_IMAGE_MITIGATION_POLICY HighEntropyRandomization;
};

typedef struct _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY BlockNonMicrosoftSignedBinaries;
    union _RTL_IMAGE_MITIGATION_POLICY EnforceSigningOnModuleDependencies;
};

typedef struct _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY DisallowChildProcessCreation;
};

typedef struct _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY ControlFlowGuard;
    union _RTL_IMAGE_MITIGATION_POLICY StrictControlFlowGuard;
};

typedef struct _RTL_IMAGE_MITIGATION_DEP_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY Dep;
};

typedef struct _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY BlockDynamicCode;
};

typedef struct _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY DisableExtensionPoints;
};

typedef struct _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY DisableNonSystemFonts;
};

typedef struct _RTL_IMAGE_MITIGATION_HEAP_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY TerminateOnHeapErrors;
};

typedef struct _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY BlockRemoteImageLoads;
    union _RTL_IMAGE_MITIGATION_POLICY BlockLowLabelImageLoads;
    union _RTL_IMAGE_MITIGATION_POLICY PreferSystem32;
};

typedef struct _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilter;
    union _RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilterPlus;
    union _RTL_IMAGE_MITIGATION_POLICY EnableImportAddressFilter;
    union _RTL_IMAGE_MITIGATION_POLICY EnableRopStackPivot;
    union _RTL_IMAGE_MITIGATION_POLICY EnableRopCallerCheck;
    union _RTL_IMAGE_MITIGATION_POLICY EnableRopSimExec;
    WCHAR EafPlusModuleList[512];
};

typedef struct _RTL_IMAGE_MITIGATION_SEHOP_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY Sehop;
};

typedef struct _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY StrictHandleChecks;
};

typedef struct _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union _RTL_IMAGE_MITIGATION_POLICY BlockWin32kSystemCalls;
};

typedef struct _RTL_IMAGE_POLICY_METADATA {
    struct _IMAGE_POLICY_METADATA *PolicyMetadata;
    ULONG64 LBound;
    ULONG64 UBound;
};

typedef struct _RTL_LFG_RNG_STATE {
    ULONG SeedArray[55];
    ULONG Next;
    ULONG NextP;
};

typedef struct _RTL_MODULE_BASIC_INFO {
    PVOID ImageBase;
};

typedef struct _RTL_MODULE_EXTENDED_INFO {
    struct _RTL_MODULE_BASIC_INFO BasicInfo;
    ULONG ImageSize;
    USHORT FileNameOffset;
    UCHAR FullPathName[256];
};

typedef struct _RTL_PHYSICAL_MEMORY_INFO {
    enum RTL_PHYSICAL_MEMORY_POLICY Policy;
};

typedef struct _RTL_PROCESS_BACKTRACES {
    ULONG64 CommittedMemory;
    ULONG64 ReservedMemory;
    ULONG NumberOfBackTraceLookups;
    ULONG NumberOfBackTraces;
    struct _RTL_PROCESS_BACKTRACE_INFORMATION BackTraces[1];
};

typedef struct _RTL_PROCESS_BACKTRACES_CONTROL {
    ULONG ControlCode;
    ULONG ControlSize;
    UCHAR ControlData[1];
    struct _RTL_STACK_TRACE_DATABASE_CREATE DatabaseCreate;
};

typedef struct _RTL_PROCESS_BACKTRACE_INFORMATION {
    PCHAR SymbolicBackTrace;
    ULONG TraceCount;
    USHORT Index;
    USHORT Depth;
    PVOID BackTrace[32];
};

typedef struct _RTL_PROCESS_LOCKS {
    ULONG NumberOfLocks;
    struct _RTL_PROCESS_LOCK_INFORMATION Locks[1];
};

typedef struct _RTL_PROCESS_LOCK_INFORMATION {
    PVOID Address;
    USHORT Type;
    USHORT CreatorBackTraceIndex;
    PVOID OwningThread;
    LONG LockCount;
    ULONG ContentionCount;
    ULONG EntryCount;
    LONG RecursionCount;
    ULONG NumberOfWaitingShared;
    ULONG NumberOfWaitingExclusive;
};

typedef struct _RTL_PROCESS_MODULES {
    ULONG NumberOfModules;
    struct _RTL_PROCESS_MODULE_INFORMATION Modules[1];
};

typedef struct _RTL_PROCESS_MODULE_INFORMATION {
    PVOID Section;
    PVOID MappedBase;
    PVOID ImageBase;
    ULONG ImageSize;
    ULONG Flags;
    USHORT LoadOrderIndex;
    USHORT InitOrderIndex;
    USHORT LoadCount;
    USHORT OffsetToFileName;
    UCHAR FullPathName[256];
};

typedef struct _RTL_PROCESS_MODULE_INFORMATION_EX {
    USHORT NextOffset;
    struct _RTL_PROCESS_MODULE_INFORMATION BaseInfo;
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    PVOID DefaultBase;
};

typedef struct _RTL_PROCESS_VERIFIER_OPTIONS {
    ULONG SizeStruct;
    ULONG Option;
    UCHAR OptionData[1];
};

typedef struct _RTL_PROTECTED_ACCESS {
    ULONG DominateMask;
    ULONG DeniedProcessAccess;
    ULONG DeniedThreadAccess;
};

typedef struct _RTL_QUERY_REGISTRY_TABLE {
    PLONG QueryRoutine;
    ULONG Flags;
    PWCHAR Name;
    PVOID EntryContext;
    ULONG DefaultType;
    PVOID DefaultData;
    ULONG DefaultLength;
};

typedef struct _RTL_RB_TREE {
    struct _RTL_BALANCED_NODE *Root;
    UCHAR Encoded : 1;
    struct _RTL_BALANCED_NODE *Min;
};

typedef struct _RTL_RETPOLINE_BINARY_INFO {
    LONG RetpolineStubsStartRva;
    ULONG CfgDispatchFunctionPtrRva;
    ULONG IATRva;
    PLONG ImportRvas;
    PULONG64 IAT;
    PVOID ImageBase;
};

typedef struct _RTL_RETPOLINE_RELOCATION_INDEX {
    USHORT ImportRelocationSize;
    USHORT IndirectRelocationSize;
    USHORT SwitchJumpRelocationSize;
    USHORT StraddleType;
     <unnamed-type-StraddleReloc>;
    union {
        struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION Import;
        struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION Indir;
        struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION SwitchJump;
    } StraddleReloc;
};

typedef struct _RTL_RETPOLINE_ROUTINES {
    ULONG SwitchtableJump[16];
    ULONG CfgIndirectRax;
    ULONG NonCfgIndirectRax;
    ULONG ImportR10;
};

typedef struct _RTL_RVA_LIST {
    ULONG64 RvaCount;
    ULONG StateBitsPerRva;
    PUCHAR CompressedBuffer;
    ULONG64 CompressedBufferSize;
    struct _RTL_BITMAP_EX RvaStateBitMap;
    PULONG StateBitValueMap;
    PVOID ExtensionBuffer;
};

typedef struct _RTL_RVA_LIST_ITERATOR {
    ULONG CurrentRva;
    ULONG CurrentRvaIndex;
    ULONG CompressedRvaDataOffset;
};

typedef struct _RTL_SEGMENT_HEAP_MEMORY_SOURCE {
    ULONG Flags;
    ULONG MemoryTypeMask;
    ULONG NumaNode;
    PVOID PartitionHandle;
    ULONG64 Reserved[2];
};

typedef struct _RTL_SEGMENT_HEAP_PARAMETERS {
    USHORT Version;
    USHORT Size;
    ULONG Flags;
    struct _RTL_SEGMENT_HEAP_MEMORY_SOURCE MemorySource;
    ULONG64 Reserved[4];
};

typedef struct _RTL_SPARSE_BITMAP_CTX {
    ULONG64 Lock;
    struct _RTL_SPARSE_BITMAP_RANGE **BitmapRanges;
    struct _RTL_BITMAP RangeArrayCommitStatus;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    ULONG RangeCount;
    ULONG RangeIndexLimit;
    ULONG BitsPerRange;
    ULONG RangeCountMax;
    ULONG RangeMetadataOffset;
    ULONG MetadataSizePerBit;
    ULONG DefaultBitsSet : 1;
    ULONG SparseRangeArray : 1;
    ULONG NoInternalLocking : 1;
    ULONG SpareFlags : 29;
};

typedef struct _RTL_SPARSE_BITMAP_PARAMETER {
    ULONG64 BitCountMax;
    ULONG MetadataSizePerBit;
    ULONG BitsPerRange;
    ULONG RangeCountMax;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    ULONG DefaultBitsSet : 1;
    ULONG SparseRangeArray : 1;
    ULONG NoInternalLocking : 1;
    ULONG SpareFlags : 29;
};

typedef struct _RTL_SPARSE_BITMAP_RANGE {
    ULONG64 Lock;
    struct _RTL_BITMAP RangeBitmap;
    struct _SINGLE_LIST_ENTRY Next;
};

typedef struct _RTL_SPARSE_BITMAP_RUN {
    ULONG StartingIndexLow;
    ULONG StartingIndexHigh;
    ULONG Length;
    PVOID Metadata;
};

typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
};

typedef struct _RTL_STACK_CONTEXT {
    ULONG NumberOfEntries;
    struct _RTL_STACK_CONTEXT_ENTRY Entry[1];
};

typedef struct _RTL_STACK_CONTEXT_ENTRY {
    ULONG64 Address;
    ULONG64 Data;
};

typedef struct _RTL_STACK_TRACE_DATABASE_CREATE {
    PVOID CommitBase;
    ULONG64 CommitSize;
    ULONG64 ReserveSize;
};

typedef struct _RTL_TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    struct _TIME_FIELDS StandardStart;
    LONG StandardBias;
    WCHAR DaylightName[32];
    struct _TIME_FIELDS DaylightStart;
    LONG DaylightBias;
};

typedef struct _RTL_TRACE_BLOCK {
    ULONG Magic;
    ULONG Count;
    ULONG Size;
    ULONG64 UserCount;
    ULONG64 UserSize;
    PVOID UserContext;
    struct _RTL_TRACE_BLOCK *Next;
    PVOID *Trace;
};

typedef struct _RTL_TRACE_DATABASE {
};

typedef struct _RTL_TRACE_ENUMERATE {
    struct _RTL_TRACE_DATABASE *Database;
    ULONG Index;
    struct _RTL_TRACE_BLOCK *Block;
};

typedef struct _RTL_UMS_COMPLETION_LIST {
    struct _SINGLE_LIST_ENTRY *ThreadListHead;
    PVOID CompletionEvent;
    ULONG CompletionFlags;
    struct _SINGLE_LIST_ENTRY InternalListHead;
};

typedef struct _RTL_UMS_CONTEXT {
    struct _SINGLE_LIST_ENTRY Link;
    struct _CONTEXT Context;
    PVOID Teb;
    PVOID UserContext;
    ULONG ScheduledThread : 1;
    ULONG Suspended : 1;
    ULONG VolatileContext : 1;
    ULONG Terminated : 1;
    ULONG DebugActive : 1;
    ULONG RunningOnSelfThread : 1;
    ULONG DenyRunningOnSelfThread : 1;
    LONG Flags;
    ULONG64 KernelUpdateLock : 2;
    ULONG64 PrimaryClientID : 62;
    ULONG64 ContextLock;
    struct _RTL_UMS_CONTEXT *PrimaryUmsContext;
    ULONG SwitchCount;
    ULONG KernelYieldCount;
    ULONG MixedYieldCount;
    ULONG YieldCount;
    VOID _RTL_UMS_CONTEXT;
    VOID _RTL_UMS_CONTEXT;
    struct _RTL_UMS_CONTEXT *operator=;
    struct _RTL_UMS_CONTEXT *operator=;
};

typedef struct _RTL_UMS_SCHEDULER_STARTUP_INFO {
    ULONG UmsVersion;
    struct _RTL_UMS_COMPLETION_LIST *CompletionList;
    PVOID SchedulerProc;
    PVOID SchedulerParam;
};

typedef struct _RTL_UNICODE_STRING_BUFFER {
    struct _UNICODE_STRING String;
    struct _RTL_BUFFER ByteBuffer;
    UCHAR MinimumStaticBufferForTerminalNul[2];
};

typedef struct _RTL_USER_PROCESS_EXTENDED_PARAMETERS {
    USHORT Version;
    USHORT NodeNumber;
    PVOID ProcessSecurityDescriptor;
    PVOID ThreadSecurityDescriptor;
    PVOID ParentProcess;
    PVOID DebugPort;
    PVOID TokenHandle;
    PVOID JobHandle;
};

typedef struct _RTL_USER_PROCESS_INFORMATION {
    ULONG Length;
    PVOID Process;
    PVOID Thread;
    struct _CLIENT_ID ClientId;
    struct _SECTION_IMAGE_INFORMATION ImageInformation;
};

typedef struct _RTL_USER_PROCESS_INFORMATION64 {
    ULONG Length;
    LONG64 Process;
    LONG64 Thread;
    struct _CLIENT_ID64 ClientId;
    struct _SECTION_IMAGE_INFORMATION64 ImageInformation;
};

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    PVOID ConsoleHandle;
    ULONG ConsoleFlags;
    PVOID StandardInput;
    PVOID StandardOutput;
    PVOID StandardError;
    struct _CURDIR CurrentDirectory;
    struct _UNICODE_STRING DllPath;
    struct _UNICODE_STRING ImagePathName;
    struct _UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    struct _UNICODE_STRING WindowTitle;
    struct _UNICODE_STRING DesktopInfo;
    struct _UNICODE_STRING ShellInfo;
    struct _UNICODE_STRING RuntimeData;
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
    ULONG64 EnvironmentSize;
    ULONG64 EnvironmentVersion;
    PVOID PackageDependencyData;
    ULONG ProcessGroupId;
    ULONG LoaderThreads;
    struct _UNICODE_STRING RedirectionDllName;
};

typedef struct _RTL_WORK_ON_BEHALF_TICKET_EX {
    struct _ALPC_WORK_ON_BEHALF_TICKET Ticket;
    ULONG Flags;
    ULONG CurrentThread : 1;
    ULONG Reserved1 : 31;
    ULONG Reserved2;
};

typedef struct _SCATTER_GATHER_ELEMENT {
    union _LARGE_INTEGER Address;
    ULONG Length;
    ULONG64 Reserved;
};

typedef struct _SCATTER_GATHER_LIST {
    ULONG NumberOfElements;
    ULONG64 Reserved;
    struct _SCATTER_GATHER_ELEMENT Elements[0];
};

typedef struct _SCOPE_TABLE_AMD64 {
    ULONG Count;
     <unnamed-type-ScopeRecord>;
    struct {
        ULONG BeginAddress;
        ULONG EndAddress;
        ULONG HandlerAddress;
        ULONG JumpTarget;
    } ScopeRecord[1];
};

typedef struct _SCRUB_DATA_INPUT {
    ULONG Size;
    ULONG Flags;
    ULONG MaximumIos;
    ULONG ObjectId[4];
    ULONG Reserved[25];
    UCHAR ResumeContext[816];
};

typedef struct _SCRUB_DATA_OUTPUT {
    ULONG Size;
    ULONG Flags;
    ULONG Status;
    ULONG64 ErrorFileOffset;
    ULONG64 ErrorLength;
    ULONG64 NumberOfBytesRepaired;
    ULONG64 NumberOfBytesFailed;
    ULONG64 InternalFileReference;
    USHORT ResumeContextLength;
    USHORT ParityExtentDataOffset;
    ULONG Reserved[9];
    ULONG64 NumberOfMetadataBytesProcessed;
    ULONG64 NumberOfDataBytesProcessed;
    ULONG64 TotalNumberOfMetadataBytesInUse;
    ULONG64 TotalNumberOfDataBytesInUse;
    UCHAR ResumeContext[816];
};

typedef struct _SCRUB_PARITY_EXTENT {
    LONG64 Offset;
    ULONG64 Length;
};

typedef struct _SCRUB_PARITY_EXTENT_DATA {
    USHORT Size;
    USHORT Flags;
    USHORT NumberOfParityExtents;
    USHORT MaximumNumberOfParityExtents;
    struct _SCRUB_PARITY_EXTENT ParityExtents[1];
};

typedef struct _SCSI_REQUEST_BLOCK {
};

typedef struct _SDEV_IDENTIFIER_INTERFACE {
    struct _INTERFACE InterfaceHeader;
    PULONG64 GetIdentifier;
};

typedef struct _SD_CHANGE_MACHINE_SID_INPUT {
    USHORT CurrentMachineSIDOffset;
    USHORT CurrentMachineSIDLength;
    USHORT NewMachineSIDOffset;
    USHORT NewMachineSIDLength;
};

typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {
    ULONG64 NumSDChangedSuccess;
    ULONG64 NumSDChangedFail;
    ULONG64 NumSDUnused;
    ULONG64 NumSDTotal;
    ULONG64 NumMftSDChangedSuccess;
    ULONG64 NumMftSDChangedFail;
    ULONG64 NumMftSDTotal;
};

typedef struct _SD_ENUM_SDS_ENTRY {
    ULONG Hash;
    ULONG SecurityId;
    ULONG64 Offset;
    ULONG Length;
    UCHAR Descriptor[1];
};

typedef struct _SD_ENUM_SDS_INPUT {
    ULONG64 StartingOffset;
    ULONG64 MaxSDEntriesToReturn;
};

typedef struct _SD_ENUM_SDS_OUTPUT {
    ULONG64 NextOffset;
    ULONG64 NumSDEntriesReturned;
    ULONG64 NumSDBytesReturned;
    struct _SD_ENUM_SDS_ENTRY SDEntry[1];
};

typedef struct _SD_GLOBAL_CHANGE_INPUT {
    ULONG Flags;
    ULONG ChangeType;
    struct _SD_CHANGE_MACHINE_SID_INPUT SdChange;
    struct _SD_QUERY_STATS_INPUT SdQueryStats;
    struct _SD_ENUM_SDS_INPUT SdEnumSds;
};

typedef struct _SD_GLOBAL_CHANGE_OUTPUT {
    ULONG Flags;
    ULONG ChangeType;
    struct _SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
    struct _SD_QUERY_STATS_OUTPUT SdQueryStats;
    struct _SD_ENUM_SDS_OUTPUT SdEnumSds;
};

typedef struct _SD_QUERY_STATS_INPUT {
    ULONG Reserved;
};

typedef struct _SD_QUERY_STATS_OUTPUT {
    ULONG64 SdsStreamSize;
    ULONG64 SdsAllocationSize;
    ULONG64 SiiStreamSize;
    ULONG64 SiiAllocationSize;
    ULONG64 SdhStreamSize;
    ULONG64 SdhAllocationSize;
    ULONG64 NumSDTotal;
    ULONG64 NumSDUnused;
};

typedef struct _SECTIONBASICINFO {
    PVOID BaseAddress;
    ULONG AllocationAttributes;
    union _LARGE_INTEGER MaximumSize;
};

typedef struct _SECTION_IMAGE_INFORMATION {
    PVOID TransferAddress;
    ULONG ZeroBits;
    ULONG64 MaximumStackSize;
    ULONG64 CommittedStackSize;
    ULONG SubSystemType;
    USHORT SubSystemMinorVersion;
    USHORT SubSystemMajorVersion;
    ULONG SubSystemVersion;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    ULONG OperatingSystemVersion;
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    UCHAR ImageContainsCode;
    UCHAR ImageFlags;
    UCHAR ComPlusNativeReady : 1;
    UCHAR ComPlusILOnly : 1;
    UCHAR ImageDynamicallyRelocated : 1;
    UCHAR ImageMappedFlat : 1;
    UCHAR BaseBelow4gb : 1;
    UCHAR ComPlusPrefer32bit : 1;
    UCHAR Reserved : 2;
    ULONG LoaderFlags;
    ULONG ImageFileSize;
    ULONG CheckSum;
};

typedef struct _SECTION_IMAGE_INFORMATION32 {
    ULONG TransferAddress;
    ULONG ZeroBits;
    ULONG MaximumStackSize;
    ULONG CommittedStackSize;
    ULONG SubSystemType;
    USHORT SubSystemMinorVersion;
    USHORT SubSystemMajorVersion;
    ULONG SubSystemVersion;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    ULONG OperatingSystemVersion;
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    UCHAR ImageContainsCode;
    UCHAR ImageFlags;
    UCHAR ComPlus : 1;
    UCHAR ImageDynamicallyRelocated : 1;
    UCHAR Reserved : 6;
    ULONG LoaderFlags;
    ULONG ImageFileSize;
    ULONG CheckSum;
};

typedef struct _SECTION_IMAGE_INFORMATION64 {
    ULONG64 TransferAddress;
    ULONG ZeroBits;
    ULONG64 MaximumStackSize;
    ULONG64 CommittedStackSize;
    ULONG SubSystemType;
    USHORT SubSystemMinorVersion;
    USHORT SubSystemMajorVersion;
    ULONG SubSystemVersion;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    ULONG OperatingSystemVersion;
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    UCHAR ImageContainsCode;
    UCHAR ImageFlags;
    UCHAR ComPlus : 1;
    UCHAR ImageDynamicallyRelocated : 1;
    UCHAR Reserved : 6;
    ULONG LoaderFlags;
    ULONG ImageFileSize;
    ULONG CheckSum;
};

typedef struct _SECTION_INTERNAL_IMAGE_INFORMATION {
    struct _SECTION_IMAGE_INFORMATION SectionInformation;
    ULONG ExtendedFlags;
    ULONG ImageExportSuppressionEnabled : 1;
    ULONG Reserved : 31;
};

typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
};

typedef struct _SECURE_DRIVER_INTERFACE {
    struct _INTERFACE InterfaceHeader;
    struct _EPROCESS **ProcessReference;
    PVOID ProcessDereference;
    ULONG Reserved;
};

typedef struct _SECURITY_CAPABILITIES {
    PVOID AppContainerSid;
    struct _SID_AND_ATTRIBUTES *Capabilities;
    ULONG CapabilityCount;
    ULONG Reserved;
};

typedef struct _SECURITY_CLIENT_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    PVOID ClientToken;
    UCHAR DirectlyAccessClientToken;
    UCHAR DirectAccessEffectiveOnly;
    UCHAR ServerIsRemote;
    struct _TOKEN_CONTROL ClientTokenControl;
};

typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    PVOID Owner;
    PVOID Group;
    struct _ACL *Sacl;
    struct _ACL *Dacl;
};

typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    ULONG Owner;
    ULONG Group;
    ULONG Sacl;
    ULONG Dacl;
};

typedef struct _SECURITY_OBJECT_AI_PARAMS {
    ULONG Size;
    ULONG ConstraintMask;
};

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    UCHAR ContextTrackingMode;
    UCHAR EffectiveOnly;
};

typedef struct _SECURITY_SEED_AND_LENGTH {
    UCHAR Length;
    UCHAR Seed;
};

typedef struct _SECURITY_SUBJECT_CONTEXT {
    PVOID ClientToken;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PVOID PrimaryToken;
    PVOID ProcessAuditId;
};

typedef struct _SEMAPHORE_BASIC_INFORMATION {
    LONG CurrentCount;
    LONG MaximumCount;
};

typedef struct _SERVERSILO_BASIC_INFORMATION {
    ULONG ServiceSessionId;
    enum _SERVERSILO_STATE State;
    LONG ExitStatus;
};

typedef struct _SET {
    ULONG Oid;
    PVOID InformationBuffer;
    ULONG InformationBufferLength;
    ULONG BytesRead;
    ULONG BytesNeeded;
};

typedef struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
    ULONG Flags;
    ULONG AlignmentShift;
    ULONG64 FileOffsetToAlign;
    ULONG FallbackAlignmentShift;
};

typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
    ULONG Flags;
};

typedef struct _SE_ACCESS_REPLY {
    ULONG Size;
    ULONG ResultListCount;
    PULONG GrantedAccess;
    PLONG AccessStatus;
    struct _ACCESS_REASONS *AccessReason;
    struct _PRIVILEGE_SET **Privileges;
};

typedef struct _SE_ACCESS_REQUEST {
    ULONG Size;
    struct _SE_SECURITY_DESCRIPTOR *SeSecurityDescriptor;
    ULONG DesiredAccess;
    ULONG PreviouslyGrantedAccess;
    PVOID PrincipalSelfSid;
    struct _GENERIC_MAPPING *GenericMapping;
    ULONG ObjectTypeListCount;
    struct _OBJECT_TYPE_LIST *ObjectTypeList;
};

typedef struct _SE_ADT_ACCESS_REASON {
    ULONG AccessMask;
    ULONG AccessReasons[32];
    ULONG ObjectTypeIndex;
    ULONG AccessGranted;
    PVOID SecurityDescriptor;
};

typedef struct _SE_ADT_CLAIMS {
    ULONG Length;
    PVOID Claims;
};

typedef struct _SE_ADT_OBJECT_TYPE {
    struct _GUID ObjectType;
    USHORT Flags;
    USHORT Level;
    ULONG AccessMask;
};

typedef struct _SE_ADT_PARAMETER_ARRAY {
    ULONG CategoryId;
    ULONG AuditId;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    struct _SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
};

typedef struct _SE_ADT_PARAMETER_ARRAY_ENTRY {
    enum _SE_ADT_PARAMETER_TYPE Type;
    ULONG Length;
    ULONG64 Data[2];
    PVOID Address;
};

typedef struct _SE_ADT_PARAMETER_ARRAY_EX {
    ULONG CategoryId;
    ULONG AuditId;
    ULONG Version;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    struct _SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
};

typedef struct _SE_AUDIT_INFO {
    ULONG Size;
    enum _AUDIT_EVENT_TYPE AuditType;
    enum _SE_AUDIT_OPERATION AuditOperation;
    ULONG AuditFlags;
    struct _UNICODE_STRING SubsystemName;
    struct _UNICODE_STRING ObjectTypeName;
    struct _UNICODE_STRING ObjectName;
    PVOID HandleId;
    struct _GUID *TransactionId;
    struct _LUID *OperationId;
    UCHAR ObjectCreation;
    UCHAR GenerateOnClose;
};

typedef struct _SE_EXPORTS {
    struct _LUID SeCreateTokenPrivilege;
    struct _LUID SeAssignPrimaryTokenPrivilege;
    struct _LUID SeLockMemoryPrivilege;
    struct _LUID SeIncreaseQuotaPrivilege;
    struct _LUID SeUnsolicitedInputPrivilege;
    struct _LUID SeTcbPrivilege;
    struct _LUID SeSecurityPrivilege;
    struct _LUID SeTakeOwnershipPrivilege;
    struct _LUID SeLoadDriverPrivilege;
    struct _LUID SeCreatePagefilePrivilege;
    struct _LUID SeIncreaseBasePriorityPrivilege;
    struct _LUID SeSystemProfilePrivilege;
    struct _LUID SeSystemtimePrivilege;
    struct _LUID SeProfileSingleProcessPrivilege;
    struct _LUID SeCreatePermanentPrivilege;
    struct _LUID SeBackupPrivilege;
    struct _LUID SeRestorePrivilege;
    struct _LUID SeShutdownPrivilege;
    struct _LUID SeDebugPrivilege;
    struct _LUID SeAuditPrivilege;
    struct _LUID SeSystemEnvironmentPrivilege;
    struct _LUID SeChangeNotifyPrivilege;
    struct _LUID SeRemoteShutdownPrivilege;
    PVOID SeNullSid;
    PVOID SeWorldSid;
    PVOID SeLocalSid;
    PVOID SeCreatorOwnerSid;
    PVOID SeCreatorGroupSid;
    PVOID SeNtAuthoritySid;
    PVOID SeDialupSid;
    PVOID SeNetworkSid;
    PVOID SeBatchSid;
    PVOID SeInteractiveSid;
    PVOID SeLocalSystemSid;
    PVOID SeAliasAdminsSid;
    PVOID SeAliasUsersSid;
    PVOID SeAliasGuestsSid;
    PVOID SeAliasPowerUsersSid;
    PVOID SeAliasAccountOpsSid;
    PVOID SeAliasSystemOpsSid;
    PVOID SeAliasPrintOpsSid;
    PVOID SeAliasBackupOpsSid;
    PVOID SeAuthenticatedUsersSid;
    PVOID SeRestrictedSid;
    PVOID SeAnonymousLogonSid;
    struct _LUID SeUndockPrivilege;
    struct _LUID SeSyncAgentPrivilege;
    struct _LUID SeEnableDelegationPrivilege;
    PVOID SeLocalServiceSid;
    PVOID SeNetworkServiceSid;
    struct _LUID SeManageVolumePrivilege;
    struct _LUID SeImpersonatePrivilege;
    struct _LUID SeCreateGlobalPrivilege;
    struct _LUID SeTrustedCredManAccessPrivilege;
    struct _LUID SeRelabelPrivilege;
    struct _LUID SeIncreaseWorkingSetPrivilege;
    struct _LUID SeTimeZonePrivilege;
    struct _LUID SeCreateSymbolicLinkPrivilege;
    PVOID SeIUserSid;
    PVOID SeUntrustedMandatorySid;
    PVOID SeLowMandatorySid;
    PVOID SeMediumMandatorySid;
    PVOID SeHighMandatorySid;
    PVOID SeSystemMandatorySid;
    PVOID SeOwnerRightsSid;
    PVOID SeAllAppPackagesSid;
    PVOID SeUserModeDriversSid;
    PVOID SeProcTrustWinTcbSid;
    PVOID SeTrustedInstallerSid;
    struct _LUID SeDelegateSessionUserImpersonatePrivilege;
};

typedef struct _SE_IMPERSONATION_STATE {
    PVOID Token;
    UCHAR CopyOnOpen;
    UCHAR EffectiveOnly;
    enum _SECURITY_IMPERSONATION_LEVEL Level;
};

typedef struct _SE_LEARNING_MODE_USER_OBJECT_DATA {
    ULONG Cookie;
    struct _UNICODE_STRING *ObjectType;
    struct _UNICODE_STRING *ObjectName;
};

typedef struct _SE_PACKAGE_CAPABILITY_INFO {
    ULONG Remaining;
    ULONG PackageGrantedAccess;
    ULONG CapabilityGrantedAccess;
    ULONG UserGroupsRemaining;
    ULONG AllAppPackagesSkippedAccess;
    UCHAR PackagesPresent;
    UCHAR PackageMatch;
    UCHAR CapabilityMatch;
    UCHAR LogPermissiveFailure;
    UCHAR AllAppPackagesSkipped;
};

typedef struct _SE_SECURITY_DESCRIPTOR {
    ULONG Size;
    ULONG Flags;
    PVOID SecurityDescriptor;
};

typedef struct _SE_SET_FILE_CACHE_INFORMATION {
    ULONG Size;
    struct _UNICODE_STRING CatalogDirectoryPath;
};

typedef struct _SE_TOKEN_USER {
    struct _TOKEN_USER TokenUser;
    struct _SID_AND_ATTRIBUTES User;
    struct _SID Sid;
    UCHAR Buffer[68];
};

typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {
    enum _SharedVirtualDiskSupportType SharedVirtualDiskSupport;
    enum _SharedVirtualDiskHandleState HandleState;
};

typedef struct _SHARE_ACCESS {
    ULONG OpenCount;
    ULONG Readers;
    ULONG Writers;
    ULONG Deleters;
    ULONG SharedRead;
    ULONG SharedWrite;
    ULONG SharedDelete;
};

typedef struct _SHRINK_VOLUME_INFORMATION {
    enum _SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
    ULONG64 Flags;
    LONG64 NewNumberOfSectors;
};

typedef struct _SHUFFLE_FILE_DATA {
    LONG64 StartingOffset;
    LONG64 Length;
    ULONG Flags;
};

typedef struct _SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[1];
};

typedef struct _SID_AND_ATTRIBUTES {
    PVOID Sid;
    ULONG Attributes;
};

typedef struct _SID_AND_ATTRIBUTES_HASH {
    ULONG SidCount;
    struct _SID_AND_ATTRIBUTES *SidAttr;
    ULONG64 Hash[32];
};

typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
};

typedef struct _SILOOBJECT_BASIC_INFORMATION {
    ULONG SiloId;
    ULONG SiloParentId;
    ULONG NumberOfProcesses;
    UCHAR IsInServerSilo;
    UCHAR Reserved[3];
};

typedef struct _SILOOBJECT_ROOT_DIRECTORY {
    ULONG ControlFlags;
    struct _UNICODE_STRING Path;
};

typedef struct _SILO_MONITOR {
};

typedef struct _SILO_MONITOR_REGISTRATION {
    UCHAR Version;
    UCHAR MonitorHost;
    UCHAR MonitorExistingSilos;
    UCHAR Reserved[5];
    struct _UNICODE_STRING *DriverObjectName;
    struct _UNICODE_STRING *ComponentName;
    PLONG CreateCallback;
    PVOID TerminateCallback;
};

typedef struct _SILO_USER_SHARED_DATA {
    ULONG ServiceSessionId;
    ULONG ActiveConsoleId;
    LONG64 ConsoleSessionForegroundProcessId;
    enum _NT_PRODUCT_TYPE NtProductType;
    ULONG SuiteMask;
    ULONG SharedUserSessionId;
    UCHAR IsMultiSessionSku;
    WCHAR NtSystemRoot[260];
    USHORT UserModeGlobalLogger[16];
};

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
};

typedef struct _SINGLE_LIST_ENTRY32 {
    ULONG Next;
};

typedef struct _SI_COPYFILE {
    ULONG SourceFileNameLength;
    ULONG DestinationFileNameLength;
    ULONG Flags;
    WCHAR FileNameBuffer[1];
};

typedef struct _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
};

typedef struct _SL_APPX_CACHE {
    ULONG Version;
    ULONG Flags;
    ULONG DataSize;
    ULONG64 DataCheckSum;
    struct _SL_APPX_CACHE_VALUE_DESCRIPTOR Descriptors[1];
};

typedef struct _SL_APPX_CACHE_VALUE_DESCRIPTOR {
    UCHAR HashedName[32];
    ULONG64 Expiration;
    ULONG DataSize;
    UCHAR Data[1];
};

typedef struct _SL_HWID_DEVICE_INFO {
    ULONG SizeBytes;
    UCHAR Type;
    UCHAR DeviceRemovalPolicy;
    UCHAR AuthenticationStatus;
    UCHAR Disposition;
    ULONG DeviceNodeLevel;
    struct _GUID Guid;
    UCHAR Data[1];
};

typedef struct _SL_KMEM_CACHE {
    ULONG TotalSize;
    ULONG SizeOfData;
    ULONG SignatureSize;
    ULONG Flags;
    ULONG Version;
    struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR Descriptors[1];
};

typedef struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR {
    USHORT Size;
    USHORT NameLength;
    USHORT Type;
    USHORT DataLength;
    ULONG Attributes;
    ULONG Reserved;
    WCHAR Name[1];
};

typedef struct _SMBIOS3_TABLE_HEADER {
};

typedef struct _SNAP_HEADER {
    UCHAR Dsap;
    UCHAR Ssap;
    UCHAR Control;
    UCHAR Oui[3];
    USHORT Type;
};

typedef struct _SOCKET_ADDRESS {
    struct sockaddr *lpSockaddr;
    LONG iSockaddrLength;
};

typedef struct _SOCKET_ADDRESS_LIST {
    LONG iAddressCount;
    struct _SOCKET_ADDRESS Address[1];
};

typedef struct _SOCKET_PEER_TARGET_NAME {
    enum _SOCKET_SECURITY_PROTOCOL SecurityProtocol;
    struct sockaddr_storage PeerAddress;
    ULONG PeerTargetNameStringLen;
    WCHAR AllStrings[0];
};

typedef struct _SOCKET_PROCESSOR_AFFINITY {
    struct _PROCESSOR_NUMBER Processor;
    USHORT NumaNodeId;
    USHORT Reserved;
};

typedef struct _SOCKET_SECURITY_QUERY_INFO {
    enum _SOCKET_SECURITY_PROTOCOL SecurityProtocol;
    ULONG Flags;
    ULONG64 PeerApplicationAccessTokenHandle;
    ULONG64 PeerMachineAccessTokenHandle;
};

typedef struct _SOCKET_SECURITY_QUERY_INFO_IPSEC2 {
    enum _SOCKET_SECURITY_PROTOCOL SecurityProtocol;
    ULONG Flags;
    ULONG64 PeerApplicationAccessTokenHandle;
    ULONG64 PeerMachineAccessTokenHandle;
    ULONG64 MmSaId;
    ULONG64 QmSaId;
    ULONG NegotiationWinerr;
    struct _GUID SaLookupContext;
};

typedef struct _SOCKET_SECURITY_QUERY_TEMPLATE {
    enum _SOCKET_SECURITY_PROTOCOL SecurityProtocol;
    struct sockaddr_storage PeerAddress;
    ULONG PeerTokenAccessMask;
};

typedef struct _SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2 {
    enum _SOCKET_SECURITY_PROTOCOL SecurityProtocol;
    struct sockaddr_storage PeerAddress;
    ULONG PeerTokenAccessMask;
    ULONG Flags;
    ULONG FieldMask;
};

typedef struct _SOCKET_SECURITY_SETTINGS {
    enum _SOCKET_SECURITY_PROTOCOL SecurityProtocol;
    ULONG SecurityFlags;
};

typedef struct _SOCKET_SECURITY_SETTINGS_IPSEC {
    enum _SOCKET_SECURITY_PROTOCOL SecurityProtocol;
    ULONG SecurityFlags;
    ULONG IpsecFlags;
    struct _GUID AuthipMMPolicyKey;
    struct _GUID AuthipQMPolicyKey;
    struct _GUID Reserved;
    ULONG64 Reserved2;
    ULONG UserNameStringLen;
    ULONG DomainNameStringLen;
    ULONG PasswordStringLen;
    WCHAR AllStrings[0];
};

typedef struct _SOC_SUBSYSTEM_FAILURE_DETAILS {
    enum _SOC_SUBSYSTEM_TYPE SubsysType;
    ULONG64 FirmwareVersion;
    ULONG64 HardwareVersion;
    ULONG UnifiedFailureRegionSize;
    CHAR UnifiedFailureRegion[1];
};

typedef struct _SPARSE_OVERALLOCATE_DATA {
    ULONG SparseOverAllocateSize;
};

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
    ULONG EntryLength;
    ULONG DependencyTypeFlags;
    ULONG ProviderSpecificFlags;
    struct _VIRTUAL_STORAGE_TYPE VirtualStorageType;
};

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
    ULONG EntryLength;
    ULONG DependencyTypeFlags;
    ULONG ProviderSpecificFlags;
    struct _VIRTUAL_STORAGE_TYPE VirtualStorageType;
    ULONG AncestorLevel;
    ULONG HostVolumeNameOffset;
    ULONG HostVolumeNameSize;
    ULONG DependentVolumeNameOffset;
    ULONG DependentVolumeNameSize;
    ULONG RelativePathOffset;
    ULONG RelativePathSize;
    ULONG DependentDeviceNameOffset;
    ULONG DependentDeviceNameSize;
};

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
    ULONG RequestLevel;
    ULONG RequestFlags;
};

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
    ULONG ResponseLevel;
    ULONG NumberEntries;
    struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[0];
    struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[0];
};

typedef struct _STORAGE_RESERVE_AREA_DEFINITION {
    enum _STORAGE_RESERVE_ID Id;
    ULONG Flags;
    LONG64 SpaceGuarantee;
};

typedef struct _STORAGE_RESERVE_AREA_INFO {
    enum _STORAGE_RESERVE_ID Id;
    ULONG Flags;
    LONG64 SpaceGuarantee;
    LONG64 SpaceUsed;
};

typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
    ULONG Flags;
    ULONG StreamId;
};

typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
    ULONG StreamId;
};

typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
    ULONG OptimalWriteSize;
    ULONG StreamGranularitySize;
    ULONG StreamIdMin;
    ULONG StreamIdMax;
};

typedef struct _STREAM_EXTENT_ENTRY {
    ULONG Flags;
     <unnamed-type-ExtentInformation>;
    union {
        struct RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
    } ExtentInformation;
};

typedef struct _STREAM_INFORMATION_ENTRY {
    ULONG Version;
    ULONG Flags;
     _StreamInformation;
    union _STREAM_INFORMATION_ENTRY::_StreamInformation StreamInformation;
};

typedef struct _STREAM_INFORMATION_ENTRY::_StreamInformation::_DesiredStorageClass {
    enum _FILE_STORAGE_TIER_CLASS Class;
    ULONG Flags;
};

typedef struct _STREAM_LAYOUT_ENTRY {
    ULONG Version;
    ULONG NextStreamOffset;
    ULONG Flags;
    ULONG ExtentInformationOffset;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG StreamInformationOffset;
    ULONG AttributeTypeCode;
    ULONG AttributeFlags;
    ULONG StreamIdentifierLength;
    WCHAR StreamIdentifier[1];
};

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _STRING32 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG Buffer;
};

typedef struct _STRING64 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG64 Buffer;
};

typedef struct _SYSDBG_BUS_DATA {
    ULONG Address;
    PVOID Buffer;
    ULONG Request;
    enum _BUS_DATA_TYPE BusDataType;
    ULONG BusNumber;
    ULONG SlotNumber;
};

typedef struct _SYSDBG_CONTROL_SPACE {
    ULONG64 Address;
    PVOID Buffer;
    ULONG Request;
    ULONG Processor;
};

typedef struct _SYSDBG_IO_SPACE {
    ULONG64 Address;
    PVOID Buffer;
    ULONG Request;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG AddressSpace;
};

typedef struct _SYSDBG_LIVEDUMP_CONTROL {
    ULONG Version;
    ULONG BugCheckCode;
    ULONG64 BugCheckParam1;
    ULONG64 BugCheckParam2;
    ULONG64 BugCheckParam3;
    ULONG64 BugCheckParam4;
    PVOID DumpFileHandle;
    PVOID CancelEventHandle;
    union _SYSDBG_LIVEDUMP_CONTROL_FLAGS Flags;
    union _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
};

typedef struct _SYSDBG_MSR {
    ULONG Msr;
    ULONG64 Data;
};

typedef struct _SYSDBG_PHYSICAL {
    union _LARGE_INTEGER Address;
    PVOID Buffer;
    ULONG Request;
};

typedef struct _SYSDBG_TRIAGE_DUMP {
    ULONG Flags;
    ULONG BugCheckCode;
    ULONG64 BugCheckParam1;
    ULONG64 BugCheckParam2;
    ULONG64 BugCheckParam3;
    ULONG64 BugCheckParam4;
    ULONG ProcessHandles;
    ULONG ThreadHandles;
    PVOID *Handles;
};

typedef struct _SYSDBG_VIRTUAL {
    PVOID Address;
    PVOID Buffer;
    ULONG Request;
};

typedef struct _SYSTEM_ACCESS_FILTER_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_ACPI_AUDIT_INFORMATION {
    ULONG RsdpCount;
    ULONG SameRsdt : 1;
    ULONG SlicPresent : 1;
    ULONG SlicDifferent : 1;
};

typedef struct _SYSTEM_ACTIVITY_MODERATION_INFO {
    struct _UNICODE_STRING Identifier;
    enum _SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
    enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE AppType;
};

typedef struct _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS {
    PVOID UserKeyHandle;
};

typedef struct _SYSTEM_ALARM_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _SYSTEM_AUDIT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG Flags;
    struct _GUID ObjectType;
    struct _GUID InheritedObjectType;
    ULONG SidStart;
};

typedef struct _SYSTEM_BASIC_INFORMATION {
    ULONG Reserved;
    ULONG TimerResolution;
    ULONG PageSize;
    ULONG NumberOfPhysicalPages;
    ULONG LowestPhysicalPageNumber;
    ULONG HighestPhysicalPageNumber;
    ULONG AllocationGranularity;
    ULONG64 MinimumUserModeAddress;
    ULONG64 MaximumUserModeAddress;
    ULONG64 ActiveProcessorsAffinityMask;
    CHAR NumberOfProcessors;
};

typedef struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION {
    ULONG64 AvailablePages;
    ULONG64 CommittedPages;
    ULONG64 CommitLimit;
    ULONG64 PeakCommitment;
};

typedef struct _SYSTEM_BIGPOOL_ENTRY {
    PVOID VirtualAddress;
    ULONG64 NonPaged : 1;
    ULONG64 SizeInBytes;
    UCHAR Tag[4];
    ULONG TagUlong;
};

typedef struct _SYSTEM_BIGPOOL_INFORMATION {
    ULONG Count;
    struct _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[1];
};

typedef struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION {
    struct _GUID BootIdentifier;
    enum _FIRMWARE_TYPE FirmwareType;
    ULONG64 BootFlags;
    ULONG64 DbgMenuOsSelection : 1;
    ULONG64 DbgHiberBoot : 1;
    ULONG64 DbgSoftBoot : 1;
    ULONG64 DbgMeasuredLaunch : 1;
    ULONG64 DbgMeasuredLaunchCapable : 1;
};

typedef struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION_V1 {
    struct _GUID BootIdentifier;
    enum _FIRMWARE_TYPE FirmwareType;
};

typedef struct _SYSTEM_BOOT_GRAPHICS_INFORMATION {
    union _LARGE_INTEGER FrameBuffer;
    ULONG Width;
    ULONG Height;
    ULONG PixelStride;
    ULONG Flags;
    enum _SYSTEM_PIXEL_FORMAT Format;
    ULONG DisplayRotation;
};

typedef struct _SYSTEM_BOOT_LOGO_INFORMATION {
    ULONG Flags;
    ULONG BitmapOffset;
};

typedef struct _SYSTEM_CALL_COUNT_INFORMATION {
    ULONG Length;
    ULONG NumberOfTables;
};

typedef struct _SYSTEM_CALL_TIME_INFORMATION {
    ULONG Length;
    ULONG TotalCalls;
    union _LARGE_INTEGER TimeOfCalls[1];
};

typedef struct _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION {
    ULONG Options;
    ULONG HVCIOptions;
    ULONG64 Version;
    struct _GUID PolicyGuid;
};

typedef struct _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION {
    PVOID FileHandle;
    ULONG ImageSize;
    PVOID Image;
};

typedef struct _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION {
    PVOID ImageFile;
    ULONG Type;
};

typedef struct _SYSTEM_CODEINTEGRITY_INFORMATION {
    ULONG Length;
    ULONG CodeIntegrityOptions;
};

typedef struct _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION {
    ULONG Flags;
    ULONG Locked : 1;
    ULONG UnlockApplied : 1;
    ULONG UnlockIdValid : 1;
    ULONG Reserved : 29;
    UCHAR UnlockId[32];
};

typedef struct _SYSTEM_CONSOLE_INFORMATION {
    ULONG DriverLoaded : 1;
    ULONG Spare : 31;
};

typedef struct _SYSTEM_CONTEXT_SWITCH_INFORMATION {
    ULONG ContextSwitches;
    ULONG FindAny;
    ULONG FindLast;
    ULONG FindIdeal;
    ULONG IdleAny;
    ULONG IdleCurrent;
    ULONG IdleLast;
    ULONG IdleIdeal;
    ULONG PreemptAny;
    ULONG PreemptCurrent;
    ULONG PreemptLast;
    ULONG SwitchToIdle;
};

typedef struct _SYSTEM_CPU_SET_INFORMATION {
    ULONG Size;
    enum _CPU_SET_INFORMATION_TYPE Type;
    struct {
        ULONG Id;
        USHORT Group;
        UCHAR LogicalProcessorIndex;
        UCHAR CoreIndex;
        UCHAR LastLevelCacheIndex;
        UCHAR NumaNodeIndex;
        UCHAR EfficiencyClass;
        UCHAR AllFlags;
        UCHAR Parked : 1;
        UCHAR Allocated : 1;
        UCHAR AllocatedToTargetProcess : 1;
        UCHAR RealTime : 1;
        UCHAR ReservedFlags : 4;
        ULONG Reserved;
        UCHAR SchedulingClass;
        ULONG64 AllocationTag;
    } CpuSet;
};

typedef struct _SYSTEM_CPU_SET_TAG_INFORMATION {
    ULONG64 Tag;
    ULONG64 CpuSets[1];
};

typedef struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION {
    enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS CrashDumpConfigurationClass;
};

typedef struct _SYSTEM_DEVICE_DATA_INFORMATION {
    struct _UNICODE_STRING DeviceId;
    struct _UNICODE_STRING DataName;
    ULONG DataType;
    ULONG DataBufferLength;
    PVOID DataBuffer;
};

typedef struct _SYSTEM_DEVICE_INFORMATION {
    ULONG NumberOfDisks;
    ULONG NumberOfFloppies;
    ULONG NumberOfCdRoms;
    ULONG NumberOfTapes;
    ULONG NumberOfSerialPorts;
    ULONG NumberOfParallelPorts;
};

typedef struct _SYSTEM_DMA_GUARD_POLICY_INFORMATION {
    UCHAR DmaGuardPolicyEnabled;
};

typedef struct _SYSTEM_DPC_BEHAVIOR_INFORMATION {
    ULONG Spare;
    ULONG DpcQueueDepth;
    ULONG MinimumDpcRate;
    ULONG AdjustDpcThreshold;
    ULONG IdealDpcRate;
};

typedef struct _SYSTEM_ELAM_CERTIFICATE_INFORMATION {
    PVOID ElamDriverFile;
};

typedef struct _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION {
    UCHAR EnclaveLaunchSigner[32];
};

typedef struct _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION {
    UCHAR Enabled;
};

typedef struct _SYSTEM_ENTROPY_TIMING_INFORMATION {
    PVOID EntropyRoutine;
    PVOID InitializationRoutine;
    PVOID InitializationContext;
};

typedef struct _SYSTEM_ERROR_PORT_TIMEOUTS {
    ULONG StartTimeout;
    ULONG CommTimeout;
};

typedef struct _SYSTEM_EXCEPTION_INFORMATION {
    ULONG AlignmentFixupCount;
    ULONG ExceptionDispatchCount;
    ULONG FloatingEmulationCount;
    ULONG ByteWordEmulationCount;
};

typedef struct _SYSTEM_EXTENDED_THREAD_INFORMATION {
    struct _SYSTEM_THREAD_INFORMATION ThreadInfo;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID Win32StartAddress;
    PVOID TebBase;
    ULONG64 Reserved2;
    ULONG64 Reserved3;
    ULONG64 Reserved4;
};

typedef struct _SYSTEM_FILECACHE_INFORMATION {
    ULONG64 CurrentSize;
    ULONG64 PeakSize;
    ULONG PageFaultCount;
    ULONG64 MinimumWorkingSet;
    ULONG64 MaximumWorkingSet;
    ULONG64 CurrentSizeIncludingTransitionInPages;
    ULONG64 PeakSizeIncludingTransitionInPages;
    ULONG TransitionRePurposeCount;
    ULONG Flags;
};

typedef struct _SYSTEM_FIRMWARE_PARTITION_INFORMATION {
    struct _UNICODE_STRING FirmwarePartition;
};

typedef struct _SYSTEM_FIRMWARE_TABLE_HANDLER {
    ULONG ProviderSignature;
    UCHAR Register;
    PLONG FirmwareTableHandler;
    PVOID DriverObject;
};

typedef struct _SYSTEM_FIRMWARE_TABLE_INFORMATION {
    ULONG ProviderSignature;
    enum _SYSTEM_FIRMWARE_TABLE_ACTION Action;
    ULONG TableID;
    ULONG TableBufferLength;
    UCHAR TableBuffer[1];
};

typedef struct _SYSTEM_FLAGS_INFORMATION {
    ULONG Flags;
};

typedef struct _SYSTEM_FLUSH_INFORMATION {
    ULONG SupportedFlushMethods;
    ULONG ProcessorCacheFlushSize;
    ULONG64 SystemFlushCapabilities;
    ULONG64 Reserved[2];
};

typedef struct _SYSTEM_GDI_DRIVER_INFORMATION {
    struct _UNICODE_STRING DriverName;
    PVOID ImageAddress;
    PVOID SectionPointer;
    PVOID EntryPoint;
    struct _IMAGE_EXPORT_DIRECTORY *ExportSectionPointer;
    ULONG ImageLength;
};

typedef struct _SYSTEM_HANDLE_INFORMATION {
    ULONG NumberOfHandles;
    struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
};

typedef struct _SYSTEM_HANDLE_INFORMATION_EX {
    ULONG64 NumberOfHandles;
    ULONG64 Reserved;
    struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[1];
};

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO {
    USHORT UniqueProcessId;
    USHORT CreatorBackTraceIndex;
    UCHAR ObjectTypeIndex;
    UCHAR HandleAttributes;
    USHORT HandleValue;
    PVOID Object;
    ULONG GrantedAccess;
};

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX {
    PVOID Object;
    ULONG64 UniqueProcessId;
    ULONG64 HandleValue;
    ULONG GrantedAccess;
    USHORT CreatorBackTraceIndex;
    USHORT ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
};

typedef struct _SYSTEM_HIBERFILE_INFORMATION {
    ULONG NumberOfMcbPairs;
    union _LARGE_INTEGER Mcb[1];
};

typedef struct _SYSTEM_HOT_PATCH_REGISTRY_VALUE {
    USHORT ImageNameLength;
    WCHAR ImageName[1];
};

typedef struct _SYSTEM_HYPERVISOR_DETAIL_INFORMATION {
    struct _HV_DETAILS HvVendorAndMaxFunction;
    struct _HV_DETAILS HypervisorInterface;
    struct _HV_DETAILS HypervisorVersion;
    struct _HV_DETAILS HvFeatures;
    struct _HV_DETAILS HwFeatures;
    struct _HV_DETAILS EnlightenmentInfo;
    struct _HV_DETAILS ImplementationLimits;
};

typedef struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION {
    ULONG NumberOfLogicalProcessors;
    ULONG NumberOfCores;
};

typedef struct _SYSTEM_HYPERVISOR_QUERY_INFORMATION {
    UCHAR HypervisorConnected;
    UCHAR HypervisorDebuggingEnabled;
    UCHAR HypervisorPresent;
    UCHAR Spare0[5];
    ULONG64 EnabledEnlightenments;
};

typedef struct _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION {
    PVOID HypervisorSharedUserVa;
};

typedef struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION {
    ULONG FlagsToEnable;
    ULONG FlagsToDisable;
};

typedef struct _SYSTEM_INTERRUPT_CPU_SET_INFORMATION {
    ULONG Gsiv;
    USHORT Group;
    ULONG64 CpuSets;
};

typedef struct _SYSTEM_INTERRUPT_INFORMATION {
    ULONG ContextSwitches;
    ULONG DpcCount;
    ULONG DpcRate;
    ULONG TimeIncrement;
    ULONG DpcBypassCount;
    ULONG ApcBypassCount;
};

typedef struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT {
    ULONG Gsiv;
    UCHAR ControllerInterrupt;
    UCHAR EdgeInterrupt;
    UCHAR IsPrimaryInterrupt;
    struct _GROUP_AFFINITY TargetAffinity;
};

typedef struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT {
    ULONG Enabled : 1;
    ULONG Reserved : 31;
    ULONG AsULONG;
};

typedef struct _SYSTEM_ISOLATED_USER_MODE_INFORMATION {
    UCHAR SecureKernelRunning : 1;
    UCHAR HvciEnabled : 1;
    UCHAR HvciStrictMode : 1;
    UCHAR DebugEnabled : 1;
    UCHAR FirmwarePageProtection : 1;
    UCHAR EncryptionKeyAvailable : 1;
    UCHAR SpareFlags : 2;
    UCHAR TrustletRunning : 1;
    UCHAR HvciDisableAllowed : 1;
    UCHAR SpareFlags2 : 6;
    UCHAR Spare0[6];
    ULONG64 Spare1;
};

typedef struct _SYSTEM_KERNEL_DEBUGGER_FLAGS {
    UCHAR KernelDebuggerIgnoreUmExceptions;
};

typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
    UCHAR KernelDebuggerEnabled;
    UCHAR KernelDebuggerNotPresent;
};

typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX {
    UCHAR DebuggerAllowed;
    UCHAR DebuggerEnabled;
    UCHAR DebuggerPresent;
};

typedef struct _SYSTEM_KERNEL_VA_SHADOW_INFORMATION {
     <unnamed-type-KvaShadowFlags>;
    struct {
        ULONG KvaShadowEnabled : 1;
        ULONG KvaShadowUserGlobal : 1;
        ULONG KvaShadowPcid : 1;
        ULONG KvaShadowInvpcid : 1;
        ULONG KvaShadowRequired : 1;
        ULONG KvaShadowRequiredAvailable : 1;
        ULONG Reserved : 26;
    } KvaShadowFlags;
};

typedef struct _SYSTEM_LEAP_SECOND_INFORMATION {
    UCHAR Enabled;
    ULONG Flags;
};

typedef struct _SYSTEM_LEGACY_DRIVER_INFORMATION {
    ULONG VetoType;
    struct _UNICODE_STRING VetoList;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG64 ProcessorMask;
    enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    struct {
        UCHAR Flags;
    } ProcessorCore;
    struct {
        ULONG NodeNumber;
    } NumaNode;
    struct _CACHE_DESCRIPTOR Cache;
    ULONG64 Reserved[2];
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    ULONG Size;
    struct _PROCESSOR_RELATIONSHIP Processor;
    struct _NUMA_NODE_RELATIONSHIP NumaNode;
    struct _CACHE_RELATIONSHIP Cache;
    struct _GROUP_RELATIONSHIP Group;
};

typedef struct _SYSTEM_LOOKASIDE_INFORMATION {
    USHORT CurrentDepth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG Type;
    ULONG Tag;
    ULONG Size;
};

typedef struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION {
    ULONG LowPriReadOperations;
    ULONG LowPriWriteOperations;
    ULONG KernelBumpedToNormalOperations;
    ULONG LowPriPagingReadOperations;
    ULONG KernelPagingReadsBumpedToNormal;
    ULONG LowPriPagingWriteOperations;
    ULONG KernelPagingWritesBumpedToNormal;
    ULONG BoostedIrpCount;
    ULONG BoostedPagingIrpCount;
    ULONG BlanketBoostCount;
};

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_MANUFACTURING_INFORMATION {
    ULONG Options;
    struct _UNICODE_STRING ProfileName;
};

typedef struct _SYSTEM_MEMORY_CHANNEL_INFORMATION {
    ULONG ChannelNumber;
    ULONG ChannelHeatIndex;
    ULONG64 TotalPageCount;
    ULONG64 ZeroPageCount;
    ULONG64 FreePageCount;
    ULONG64 StandbyPageCount;
};

typedef struct _SYSTEM_MEMORY_INFORMATION {
    ULONG64 PagedPoolCommitPageCount;
    ULONG64 NonPagedPoolPageCount;
    ULONG64 MdlPageCount;
    ULONG64 CommitPageCount;
};

typedef struct _SYSTEM_MEMORY_LIST_INFORMATION {
    ULONG64 ZeroPageCount;
    ULONG64 FreePageCount;
    ULONG64 ModifiedPageCount;
    ULONG64 ModifiedNoWritePageCount;
    ULONG64 BadPageCount;
    ULONG64 PageCountByPriority[8];
    ULONG64 RepurposedPagesByPriority[8];
    ULONG64 ModifiedPageCountPageFile;
};

typedef struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION {
    ULONG64 NumberOfRuns;
    ULONG NumberOfNodes;
    ULONG NumberOfChannels;
    struct _PHYSICAL_CHANNEL_RUN Run[1];
};

typedef struct _SYSTEM_MEMORY_USAGE_INFORMATION {
    ULONG64 TotalPhysicalBytes;
    ULONG64 AvailableBytes;
    LONG64 ResidentAvailableBytes;
    ULONG64 CommittedBytes;
    ULONG64 SharedCommittedBytes;
    ULONG64 CommitLimitBytes;
    ULONG64 PeakCommitmentBytes;
};

typedef struct _SYSTEM_NET_RATE_CONTROL_CALLBACK_TABLE {
    PLONG NetRateControlDispatch;
};

typedef struct _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER {
    ULONG64 PolicyCookie;
    enum _SYSTEM_NET_RATE_CONTROL_TYPE Type;
};

typedef struct _SYSTEM_NET_RATE_CONTROL_QUOTA_CONTEXT {
    struct _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER Header;
    ULONG64 OverQuotaHistory;
    ULONG IntervalLength;
    ULONG NumberOfIntervals;
};

typedef struct _SYSTEM_NET_RATE_CONTROL_SET_CONTEXT {
    struct _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER Header;
    ULONG64 MaxBandwidth;
    struct _GUID *ContainerId;
    ULONG Flags;
    ULONG Set : 1;
    ULONG Update : 1;
    ULONG Clear : 1;
    ULONG DscpTagEnabled : 1;
    ULONG MaxBandwidthEnabled : 1;
    ULONG Reserved : 27;
    UCHAR DscpTag;
};

typedef struct _SYSTEM_NUMA_INFORMATION {
    ULONG HighestNodeNumber;
    ULONG Reserved;
    struct _GROUP_AFFINITY ActiveProcessorsGroupAffinity[64];
    ULONG64 AvailableMemory[64];
    ULONG64 Pad[128];
};

typedef struct _SYSTEM_NUMA_PROXIMITY_MAP {
    ULONG NodeProximityId;
    USHORT NodeNumber;
};

typedef struct _SYSTEM_OBJECTTYPE_INFORMATION {
    ULONG NextEntryOffset;
    ULONG NumberOfObjects;
    ULONG NumberOfHandles;
    ULONG TypeIndex;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG PoolType;
    UCHAR SecurityRequired;
    UCHAR WaitableObject;
    struct _UNICODE_STRING TypeName;
};

typedef struct _SYSTEM_OBJECT_INFORMATION {
    ULONG NextEntryOffset;
    PVOID Object;
    PVOID CreatorUniqueProcess;
    USHORT CreatorBackTraceIndex;
    USHORT Flags;
    LONG PointerCount;
    LONG HandleCount;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    PVOID ExclusiveProcessId;
    PVOID SecurityDescriptor;
    struct _OBJECT_NAME_INFORMATION NameInfo;
};

typedef struct _SYSTEM_PAGEFILE_INFORMATION {
    ULONG NextEntryOffset;
    ULONG TotalSize;
    ULONG TotalInUse;
    ULONG PeakUsage;
    struct _UNICODE_STRING PageFileName;
};

typedef struct _SYSTEM_PAGEFILE_INFORMATION_EX {
    struct _SYSTEM_PAGEFILE_INFORMATION Info;
    ULONG MinimumSize;
    ULONG MaximumSize;
};

typedef struct _SYSTEM_PERFORMANCE_INFORMATION {
    union _LARGE_INTEGER IdleProcessTime;
    union _LARGE_INTEGER IoReadTransferCount;
    union _LARGE_INTEGER IoWriteTransferCount;
    union _LARGE_INTEGER IoOtherTransferCount;
    ULONG IoReadOperationCount;
    ULONG IoWriteOperationCount;
    ULONG IoOtherOperationCount;
    ULONG AvailablePages;
    ULONG CommittedPages;
    ULONG CommitLimit;
    ULONG PeakCommitment;
    ULONG PageFaultCount;
    ULONG CopyOnWriteCount;
    ULONG TransitionCount;
    ULONG CacheTransitionCount;
    ULONG DemandZeroCount;
    ULONG PageReadCount;
    ULONG PageReadIoCount;
    ULONG CacheReadCount;
    ULONG CacheIoCount;
    ULONG DirtyPagesWriteCount;
    ULONG DirtyWriteIoCount;
    ULONG MappedPagesWriteCount;
    ULONG MappedWriteIoCount;
    ULONG PagedPoolPages;
    ULONG NonPagedPoolPages;
    ULONG PagedPoolAllocs;
    ULONG PagedPoolFrees;
    ULONG NonPagedPoolAllocs;
    ULONG NonPagedPoolFrees;
    ULONG FreeSystemPtes;
    ULONG ResidentSystemCodePage;
    ULONG TotalSystemDriverPages;
    ULONG TotalSystemCodePages;
    ULONG NonPagedPoolLookasideHits;
    ULONG PagedPoolLookasideHits;
    ULONG AvailablePagedPoolPages;
    ULONG ResidentSystemCachePage;
    ULONG ResidentPagedPoolPage;
    ULONG ResidentSystemDriverPage;
    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadResourceMiss;
    ULONG CcFastReadNotPossible;
    ULONG CcFastMdlReadNoWait;
    ULONG CcFastMdlReadWait;
    ULONG CcFastMdlReadResourceMiss;
    ULONG CcFastMdlReadNotPossible;
    ULONG CcMapDataNoWait;
    ULONG CcMapDataWait;
    ULONG CcMapDataNoWaitMiss;
    ULONG CcMapDataWaitMiss;
    ULONG CcPinMappedDataCount;
    ULONG CcPinReadNoWait;
    ULONG CcPinReadWait;
    ULONG CcPinReadNoWaitMiss;
    ULONG CcPinReadWaitMiss;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;
    ULONG CcCopyReadWaitMiss;
    ULONG CcMdlReadNoWait;
    ULONG CcMdlReadWait;
    ULONG CcMdlReadNoWaitMiss;
    ULONG CcMdlReadWaitMiss;
    ULONG CcReadAheadIos;
    ULONG CcLazyWriteIos;
    ULONG CcLazyWritePages;
    ULONG CcDataFlushes;
    ULONG CcDataPages;
    ULONG ContextSwitches;
    ULONG FirstLevelTbFills;
    ULONG SecondLevelTbFills;
    ULONG SystemCalls;
    ULONG64 CcTotalDirtyPages;
    ULONG64 CcDirtyPageThreshold;
    LONG64 ResidentAvailablePages;
    ULONG64 SharedCommittedPages;
};

typedef struct _SYSTEM_PHYSICAL_MEMORY_INFORMATION {
    ULONG64 TotalPhysicalBytes;
    ULONG64 LowestPhysicalAddress;
    ULONG64 HighestPhysicalAddress;
};

typedef struct _SYSTEM_PLATFORM_BINARY_INFORMATION {
    ULONG64 PhysicalAddress;
    PVOID HandoffBuffer;
    PVOID CommandLineBuffer;
    ULONG HandoffBufferSize;
    ULONG CommandLineBufferSize;
};

typedef struct _SYSTEM_POLICY_INFORMATION {
    PVOID InputData;
    PVOID OutputData;
    ULONG InputDataSize;
    ULONG OutputDataSize;
    ULONG Version;
};

typedef struct _SYSTEM_POOLTAG {
    UCHAR Tag[4];
    ULONG TagUlong;
    ULONG PagedAllocs;
    ULONG PagedFrees;
    ULONG64 PagedUsed;
    ULONG NonPagedAllocs;
    ULONG NonPagedFrees;
    ULONG64 NonPagedUsed;
};

typedef struct _SYSTEM_POOLTAG_INFORMATION {
    ULONG Count;
    struct _SYSTEM_POOLTAG TagInfo[1];
};

typedef struct _SYSTEM_POOL_ENTRY {
    UCHAR Allocated;
    UCHAR Spare0;
    USHORT AllocatorBackTraceIndex;
    ULONG Size;
    UCHAR Tag[4];
    ULONG TagUlong;
    PVOID ProcessChargedQuota;
};

typedef struct _SYSTEM_POOL_INFORMATION {
    ULONG64 TotalSize;
    PVOID FirstEntry;
    USHORT EntryOverhead;
    UCHAR PoolTagPresent;
    UCHAR Spare0;
    ULONG NumberOfEntries;
    struct _SYSTEM_POOL_ENTRY Entries[1];
};

typedef struct _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION {
    UCHAR EfiLauncherEnabled;
};

typedef struct _SYSTEM_POWER_INFORMATION {
    ULONG MaxIdlenessAllowed;
    ULONG Idleness;
    ULONG TimeRemaining;
    UCHAR CoolingMode;
};

typedef struct _SYSTEM_POWER_LOGGING_ENTRY {
    ULONG Reason;
    ULONG States;
};

typedef struct _SYSTEM_POWER_POLICY {
    ULONG Revision;
    struct POWER_ACTION_POLICY PowerButton;
    struct POWER_ACTION_POLICY SleepButton;
    struct POWER_ACTION_POLICY LidClose;
    enum _SYSTEM_POWER_STATE LidOpenWake;
    ULONG Reserved;
    struct POWER_ACTION_POLICY Idle;
    ULONG IdleTimeout;
    UCHAR IdleSensitivity;
    UCHAR DynamicThrottle;
    UCHAR Spare2[2];
    enum _SYSTEM_POWER_STATE MinSleep;
    enum _SYSTEM_POWER_STATE MaxSleep;
    enum _SYSTEM_POWER_STATE ReducedLatencySleep;
    ULONG WinLogonFlags;
    ULONG Spare3;
    ULONG DozeS4Timeout;
    ULONG BroadcastCapacityResolution;
    struct SYSTEM_POWER_LEVEL DischargePolicy[4];
    ULONG VideoTimeout;
    UCHAR VideoDimDisplay;
    ULONG VideoReserved[3];
    ULONG SpindownTimeout;
    UCHAR OptimizeForPower;
    UCHAR FanThrottleTolerance;
    UCHAR ForcedThrottle;
    UCHAR MinThrottle;
    struct POWER_ACTION_POLICY OverThrottled;
};

typedef struct _SYSTEM_POWER_STATE_CONTEXT {
    ULONG Reserved1 : 8;
    ULONG TargetSystemState : 4;
    ULONG EffectiveSystemState : 4;
    ULONG CurrentSystemState : 4;
    ULONG IgnoreHibernationPath : 1;
    ULONG PseudoTransition : 1;
    ULONG KernelSoftReboot : 1;
    ULONG DirectedDripsTransition : 1;
    ULONG Reserved2 : 8;
    ULONG ContextAsUlong;
};

typedef struct _SYSTEM_POWER_STATE_DISABLE_REASON {
    UCHAR AffectedState[8];
    ULONG PowerReasonCode;
    ULONG PowerReasonLength;
};

typedef struct _SYSTEM_PREFETCH_OPTIONS {
    ULONG LowerPriority : 1;
    ULONG VirtualOffsets : 1;
    ULONG TrickleIOs : 1;
    ULONG SkipInStorePages : 1;
    ULONG PrefetchFilesByVa : 1;
    ULONG SkipMemoryStorePages : 1;
    ULONG Spare : 2;
    ULONG ScenarioType : 8;
};

typedef struct _SYSTEM_PREFETCH_PATCH_INFORMATION {
    ULONG PrefetchPatchCount;
};

typedef struct _SYSTEM_PREFETCH_STATS {
    ULONG DemandFilePageCount;
    ULONG DemandFileIOCount;
    ULONG TrickleFilePageCount;
    ULONG TrickleFileIOCount;
    ULONG DemandPrivatePageCount;
    ULONG DemandPrivateIOCount;
    ULONG TricklePrivatePageCount;
    ULONG TricklePrivateIOCount;
};

typedef struct _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION {
    ULONG64 Cycles[4][2];
};

typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    ULONG64 CycleTime;
};

typedef struct _SYSTEM_PROCESSOR_FEATURES_INFORMATION {
    ULONG64 ProcessorFeatureBits;
    ULONG64 Reserved[3];
};

typedef struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION {
    ULONG64 CycleTime;
};

typedef struct _SYSTEM_PROCESSOR_IDLE_INFORMATION {
    ULONG64 IdleTime;
    ULONG64 C1Time;
    ULONG64 C2Time;
    ULONG64 C3Time;
    ULONG C1Transitions;
    ULONG C2Transitions;
    ULONG C3Transitions;
    ULONG Padding;
};

typedef struct _SYSTEM_PROCESSOR_INFORMATION {
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    USHORT MaximumProcessors;
    ULONG ProcessorFeatureBits;
};

typedef struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION {
    ULONG Operation;
};

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION {
    ULONG ProcessorCount;
    ULONG Offsets[1];
};

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT {
    ULONG64 Hits;
    UCHAR PercentFrequency;
};

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
    union _LARGE_INTEGER IdleTime;
    union _LARGE_INTEGER KernelTime;
    union _LARGE_INTEGER UserTime;
    union _LARGE_INTEGER DpcTime;
    union _LARGE_INTEGER InterruptTime;
    ULONG InterruptCount;
};

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX {
    union _LARGE_INTEGER IdleTime;
    union _LARGE_INTEGER KernelTime;
    union _LARGE_INTEGER UserTime;
    union _LARGE_INTEGER DpcTime;
    union _LARGE_INTEGER InterruptTime;
    ULONG InterruptCount;
    ULONG Spare0;
    union _LARGE_INTEGER AvailableTime;
    union _LARGE_INTEGER Spare1;
    union _LARGE_INTEGER Spare2;
};

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION {
    ULONG ProcessorNumber;
    ULONG StateCount;
    struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT States[1];
};

typedef struct _SYSTEM_PROCESSOR_POLICY_INFORMATION {
    ULONG Length;
    ULONG PolicyId;
    struct _XSAVE_POLICY Policy;
};

typedef struct _SYSTEM_PROCESSOR_POWER_INFORMATION {
    UCHAR CurrentFrequency;
    UCHAR ThermalLimitFrequency;
    UCHAR ConstantThrottleFrequency;
    UCHAR DegradedThrottleFrequency;
    UCHAR LastBusyFrequency;
    UCHAR LastC3Frequency;
    UCHAR LastAdjustedBusyFrequency;
    UCHAR ProcessorMinThrottle;
    UCHAR ProcessorMaxThrottle;
    ULONG NumberOfFrequencies;
    ULONG PromotionCount;
    ULONG DemotionCount;
    ULONG ErrorCount;
    ULONG RetryCount;
    ULONG64 CurrentFrequencyTime;
    ULONG64 CurrentProcessorTime;
    ULONG64 CurrentProcessorIdleTime;
    ULONG64 LastProcessorTime;
    ULONG64 LastProcessorIdleTime;
    ULONG64 Energy;
};

typedef struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA {
    struct _PROCESSOR_PROFILE_CONTROL_AREA *ProcessorProfileControlArea;
    UCHAR Allocate;
};

typedef struct _SYSTEM_PROCESS_ID_INFORMATION {
    PVOID ProcessId;
    struct _UNICODE_STRING ImageName;
};

typedef struct _SYSTEM_PROCESS_INFORMATION {
    ULONG NextEntryOffset;
    ULONG NumberOfThreads;
    union _LARGE_INTEGER WorkingSetPrivateSize;
    ULONG HardFaultCount;
    ULONG NumberOfThreadsHighWatermark;
    ULONG64 CycleTime;
    union _LARGE_INTEGER CreateTime;
    union _LARGE_INTEGER UserTime;
    union _LARGE_INTEGER KernelTime;
    struct _UNICODE_STRING ImageName;
    LONG BasePriority;
    PVOID UniqueProcessId;
    PVOID InheritedFromUniqueProcessId;
    ULONG HandleCount;
    ULONG SessionId;
    ULONG64 UniqueProcessKey;
    ULONG64 PeakVirtualSize;
    ULONG64 VirtualSize;
    ULONG PageFaultCount;
    ULONG64 PeakWorkingSetSize;
    ULONG64 WorkingSetSize;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PagefileUsage;
    ULONG64 PeakPagefileUsage;
    ULONG64 PrivatePageCount;
    union _LARGE_INTEGER ReadOperationCount;
    union _LARGE_INTEGER WriteOperationCount;
    union _LARGE_INTEGER OtherOperationCount;
    union _LARGE_INTEGER ReadTransferCount;
    union _LARGE_INTEGER WriteTransferCount;
    union _LARGE_INTEGER OtherTransferCount;
};

typedef struct _SYSTEM_PROCESS_INFORMATION_EXTENSION {
    struct _PROCESS_DISK_COUNTERS DiskCounters;
    ULONG64 ContextSwitches;
    ULONG Flags;
    ULONG HasStrongId : 1;
    ULONG Classification : 4;
    ULONG BackgroundActivityModerated : 1;
    ULONG Spare : 26;
    ULONG UserSidOffset;
    ULONG PackageFullNameOffset;
    struct _PROCESS_ENERGY_VALUES EnergyValues;
    ULONG AppIdOffset;
    ULONG64 SharedCommitCharge;
    ULONG JobObjectId;
    ULONG SpareUlong;
    ULONG64 ProcessSequenceNumber;
};

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION {
    ULONG Version;
    struct _QUERY_PERFORMANCE_COUNTER_FLAGS Flags;
    struct _QUERY_PERFORMANCE_COUNTER_FLAGS ValidFlags;
};

typedef struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION {
    ULONG TimeAdjustment;
    ULONG TimeIncrement;
    UCHAR Enable;
};

typedef struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE {
    ULONG64 TimeAdjustment;
    ULONG64 TimeIncrement;
    UCHAR Enable;
};

typedef struct _SYSTEM_REF_TRACE_INFORMATION {
    UCHAR TraceEnable;
    UCHAR TracePermanent;
    struct _UNICODE_STRING TraceProcessName;
    struct _UNICODE_STRING TracePoolTags;
};

typedef struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS {
    PVOID KeyHandle;
    struct _UNICODE_STRING *ValueNamePointer;
    PULONG RequiredLengthPointer;
    PUCHAR Buffer;
    ULONG BufferLength;
    ULONG Type;
    PUCHAR AppendBuffer;
    ULONG AppendBufferLength;
    UCHAR CreateIfDoesntExist;
    UCHAR TruncateExistingValue;
};

typedef struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {
    ULONG RegistryQuotaAllowed;
    ULONG RegistryQuotaUsed;
    ULONG64 PagedPoolSize;
};

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_ROOT_SILO_INFORMATION {
    ULONG NumberOfSilos;
    ULONG SiloIdList[1];
};

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    struct _ACE_HEADER Header;
    ULONG Mask;
    ULONG SidStart;
};

typedef struct _SYSTEM_SECUREBOOT_INFORMATION {
    UCHAR SecureBootEnabled;
    UCHAR SecureBootCapable;
};

typedef struct _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION {
    ULONG PlatformManifestSize;
    UCHAR PlatformManifest[1];
};

typedef struct _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION {
    struct _SYSTEM_SECUREBOOT_POLICY_INFORMATION PolicyInformation;
    ULONG PolicySize;
    UCHAR Policy[1];
};

typedef struct _SYSTEM_SECUREBOOT_POLICY_INFORMATION {
    struct _GUID PolicyPublisher;
    ULONG PolicyVersion;
    ULONG PolicyOptions;
};

typedef struct _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION {
    ULONG ExtentCount;
    ULONG ValidStructureSize;
    ULONG NextExtentIndex;
    ULONG ExtentRestart;
    ULONG CycleCount;
    ULONG TimeoutCount;
    ULONG64 CycleTime;
    ULONG64 CycleTimeMax;
    ULONG64 ExtentTime;
    ULONG ExtentTimeIndex;
    ULONG ExtentTimeMaxIndex;
    ULONG64 ExtentTimeMax;
    ULONG64 HyperFlushTimeMax;
    ULONG64 TranslateVaTimeMax;
    ULONG64 DebugExemptionCount;
    ULONG64 TbHitCount;
    ULONG64 TbMissCount;
    ULONG64 VinaPendingYield;
    ULONG64 HashCycles;
    ULONG HistogramOffset;
    ULONG HistogramBuckets;
    ULONG HistogramShift;
    ULONG Reserved1;
    ULONG64 PageNotPresentCount;
};

typedef struct _SYSTEM_SESSION_BIGPOOL_INFORMATION {
    ULONG64 NextEntryOffset;
    ULONG SessionId;
    ULONG Count;
    struct _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[1];
};

typedef struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION {
    ULONG64 NextEntryOffset;
    ULONG SessionId;
    ULONG ViewFailures;
    ULONG64 NumberOfBytesAvailable;
    ULONG64 NumberOfBytesAvailableContiguous;
};

typedef struct _SYSTEM_SESSION_POOLTAG_INFORMATION {
    ULONG64 NextEntryOffset;
    ULONG SessionId;
    ULONG Count;
    struct _SYSTEM_POOLTAG TagInfo[1];
};

typedef struct _SYSTEM_SESSION_PROCESS_INFORMATION {
    ULONG SessionId;
    ULONG SizeOfBuf;
    PVOID Buffer;
};

typedef struct _SYSTEM_SET_TIME_ADJUST_INFORMATION {
    ULONG TimeAdjustment;
    UCHAR Enable;
};

typedef struct _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE {
    ULONG64 TimeAdjustment;
    UCHAR Enable;
};

typedef struct _SYSTEM_SINGLE_MODULE_INFORMATION {
    PVOID TargetModuleAddress;
    struct _RTL_PROCESS_MODULE_INFORMATION_EX ExInfo;
};

typedef struct _SYSTEM_SPECIAL_POOL_INFORMATION {
    ULONG PoolTag;
    ULONG Flags;
};

typedef struct _SYSTEM_SPECULATION_CONTROL_INFORMATION {
     <unnamed-type-SpeculationControlFlags>;
    struct {
        ULONG BpbEnabled : 1;
        ULONG BpbDisabledSystemPolicy : 1;
        ULONG BpbDisabledNoHardwareSupport : 1;
        ULONG SpecCtrlEnumerated : 1;
        ULONG SpecCmdEnumerated : 1;
        ULONG IbrsPresent : 1;
        ULONG StibpPresent : 1;
        ULONG SmepPresent : 1;
        ULONG SpeculativeStoreBypassDisableAvailable : 1;
        ULONG SpeculativeStoreBypassDisableSupported : 1;
        ULONG SpeculativeStoreBypassDisabledSystemWide : 1;
        ULONG SpeculativeStoreBypassDisabledKernel : 1;
        ULONG SpeculativeStoreBypassDisableRequired : 1;
        ULONG BpbDisabledKernelToUser : 1;
        ULONG Reserved : 18;
    } SpeculationControlFlags;
};

typedef struct _SYSTEM_SYSTEM_DISK_INFORMATION {
    struct _UNICODE_STRING SystemDisk;
};

typedef struct _SYSTEM_SYSTEM_PARTITION_INFORMATION {
    struct _UNICODE_STRING SystemPartition;
};

typedef struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION {
    struct _CLIENT_ID ClientId;
    LONG Priority;
};

typedef struct _SYSTEM_THREAD_INFORMATION {
    union _LARGE_INTEGER KernelTime;
    union _LARGE_INTEGER UserTime;
    union _LARGE_INTEGER CreateTime;
    ULONG WaitTime;
    PVOID StartAddress;
    struct _CLIENT_ID ClientId;
    LONG Priority;
    LONG BasePriority;
    ULONG ContextSwitches;
    ULONG ThreadState;
    ULONG WaitReason;
};

typedef struct _SYSTEM_TIMEOFDAY_INFORMATION {
    union _LARGE_INTEGER BootTime;
    union _LARGE_INTEGER CurrentTime;
    union _LARGE_INTEGER TimeZoneBias;
    ULONG TimeZoneId;
    ULONG Reserved;
    ULONG64 BootTimeBias;
    ULONG64 SleepTimeBias;
};

typedef struct _SYSTEM_TPM_INFORMATION {
    ULONG Flags;
};

typedef struct _SYSTEM_VA_LIST_INFORMATION {
    ULONG64 VirtualSize;
    ULONG64 VirtualPeak;
    ULONG64 VirtualLimit;
    ULONG64 AllocationFailures;
};

typedef struct _SYSTEM_VDM_INSTEMUL_INFO {
    ULONG SegmentNotPresent;
    ULONG VdmOpcode0F;
    ULONG OpcodeESPrefix;
    ULONG OpcodeCSPrefix;
    ULONG OpcodeSSPrefix;
    ULONG OpcodeDSPrefix;
    ULONG OpcodeFSPrefix;
    ULONG OpcodeGSPrefix;
    ULONG OpcodeOPER32Prefix;
    ULONG OpcodeADDR32Prefix;
    ULONG OpcodeINSB;
    ULONG OpcodeINSW;
    ULONG OpcodeOUTSB;
    ULONG OpcodeOUTSW;
    ULONG OpcodePUSHF;
    ULONG OpcodePOPF;
    ULONG OpcodeINTnn;
    ULONG OpcodeINTO;
    ULONG OpcodeIRET;
    ULONG OpcodeINBimm;
    ULONG OpcodeINWimm;
    ULONG OpcodeOUTBimm;
    ULONG OpcodeOUTWimm;
    ULONG OpcodeINB;
    ULONG OpcodeINW;
    ULONG OpcodeOUTB;
    ULONG OpcodeOUTW;
    ULONG OpcodeLOCKPrefix;
    ULONG OpcodeREPNEPrefix;
    ULONG OpcodeREPPrefix;
    ULONG OpcodeHLT;
    ULONG OpcodeCLI;
    ULONG OpcodeSTI;
    ULONG BopCount;
};

typedef struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION {
    ULONG CancelProbability;
    ULONG CancelThreshold;
    ULONG CompletionThreshold;
    ULONG CancellationVerifierDisabled;
    ULONG AvailableIssues;
    struct _SYSTEM_VERIFIER_ISSUE Issues[128];
};

typedef struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION {
    struct _SYSTEM_VERIFIER_INFORMATION Legacy;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsWithNoTag;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG64 LockedBytes;
    ULONG64 PeakLockedBytes;
    ULONG64 MappedLockedBytes;
    ULONG64 PeakMappedLockedBytes;
    ULONG64 MappedIoSpaceBytes;
    ULONG64 PeakMappedIoSpaceBytes;
    ULONG64 PagesForMdlBytes;
    ULONG64 PeakPagesForMdlBytes;
    ULONG64 ContiguousMemoryBytes;
    ULONG64 PeakContiguousMemoryBytes;
    ULONG ExecutePoolTypes;
    ULONG ExecutePageProtections;
    ULONG ExecutePageMappings;
    ULONG ExecuteWriteSections;
    ULONG SectionAlignmentFailures;
    ULONG IATInExecutableSection;
};

typedef struct _SYSTEM_VERIFIER_FAULTS_INFORMATION {
    ULONG Probability;
    ULONG MaxProbability;
    struct _UNICODE_STRING PoolTags;
    struct _UNICODE_STRING Applications;
};

typedef struct _SYSTEM_VERIFIER_INFORMATION {
    ULONG NextEntryOffset;
    ULONG Level;
    ULONG RuleClasses[2];
    ULONG AreAllDriversBeingVerified;
    struct _UNICODE_STRING DriverName;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsAttempted;
    ULONG AllocationsSucceeded;
    ULONG AllocationsSucceededSpecialPool;
    ULONG AllocationsWithNoTag;
    ULONG TrimRequests;
    ULONG Trims;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG Loads;
    ULONG Unloads;
    ULONG UnTrackedPool;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    ULONG64 PagedPoolUsageInBytes;
    ULONG64 NonPagedPoolUsageInBytes;
    ULONG64 PeakPagedPoolUsageInBytes;
    ULONG64 PeakNonPagedPoolUsageInBytes;
};

typedef struct _SYSTEM_VERIFIER_INFORMATION_EX {
    ULONG VerifyMode;
    ULONG OptionChanges;
    struct _UNICODE_STRING PreviousBucketName;
    ULONG IrpCancelTimeoutMsec;
    ULONG VerifierExtensionEnabled;
    ULONG Reserved[1];
};

typedef struct _SYSTEM_VERIFIER_ISSUE {
    ULONG64 IssueType;
    PVOID Address;
    ULONG64 Parameters[2];
};

typedef struct _SYSTEM_VERIFIER_TRIAGE_INFORMATION {
    ULONG ActionTaken;
    ULONG64 CrashData[5];
    ULONG VerifierMode;
    ULONG VerifierFlags;
    WCHAR VerifierTargets[256];
};

typedef struct _SYSTEM_VHD_BOOT_INFORMATION {
    UCHAR OsDiskIsVhd;
    ULONG OsVhdFilePathOffset;
    WCHAR OsVhdParentVolume[1];
};

typedef struct _SYSTEM_VSM_PROTECTION_INFORMATION {
    UCHAR DmaProtectionsAvailable;
    UCHAR DmaProtectionsInUse;
    UCHAR HardwareMbecAvailable;
};

typedef struct _SYSTEM_WATCHDOG_TIMER_INFORMATION {
    enum _WATCHDOG_INFORMATION_CLASS WdInfoClass;
    ULONG DataValue;
};

typedef struct _SYSTEM_WORKINGSET_ENTRY {
    ULONG UniqueProcessId;
    ULONG SessionId;
    ULONG64 WorkingSetPageCount;
    ULONG64 CommitPageCount;
    ULONG64 PagedPoolPageCount;
    ULONG64 VirtualSizeInPages;
    ULONG64 PrivateWorkingSetPageCount;
};

typedef struct _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION {
    ULONG64 WorkloadClass;
    ULONG64 CpuSets[1];
};

typedef struct _SYSTEM_WRITE_CONSTRAINT_INFORMATION {
    ULONG WriteConstraintPolicy;
    ULONG Reserved;
};

typedef struct _T2_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONG64 NoWakeTolerance;
};

typedef struct _TARGET_DEVICE_CUSTOM_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
    struct _FILE_OBJECT *FileObject;
    LONG NameBufferOffset;
    UCHAR CustomDataBuffer[1];
};

typedef struct _TARGET_DEVICE_REMOVAL_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    struct _GUID Event;
    struct _FILE_OBJECT *FileObject;
};

typedef struct _TCP_ACK_FREQUENCY_PARAMETERS {
    UCHAR TcpDelayedAckFrequency;
};

typedef struct _TCP_ICW_PARAMETERS {
    enum TCP_ICW_LEVEL Level;
};

typedef struct _TCP_INFO_v0 {
    enum _TCPSTATE State;
    ULONG Mss;
    ULONG64 ConnectionTimeMs;
    UCHAR TimestampsEnabled;
    ULONG RttUs;
    ULONG MinRttUs;
    ULONG BytesInFlight;
    ULONG Cwnd;
    ULONG SndWnd;
    ULONG RcvWnd;
    ULONG RcvBuf;
    ULONG64 BytesOut;
    ULONG64 BytesIn;
    ULONG BytesReordered;
    ULONG BytesRetrans;
    ULONG FastRetrans;
    ULONG DupAcksIn;
    ULONG TimeoutEpisodes;
    UCHAR SynRetrans;
};

typedef struct _TCP_INITIAL_RTO_PARAMETERS {
    USHORT Rtt;
    UCHAR MaxSynRetransmissions;
};

typedef struct _TEB {
    struct _NT_TIB NtTib;
    PVOID EnvironmentPointer;
    struct _CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    struct _PEB *ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    PVOID WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID ReservedForDebuggerInstrumentation[16];
    PVOID SystemReserved1[30];
    CHAR PlaceholderCompatibilityMode;
    UCHAR PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    LONG ExceptionCode;
    UCHAR Padding0[4];
    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer;
    ULONG64 InstrumentationCallbackSp;
    ULONG64 InstrumentationCallbackPreviousPc;
    ULONG64 InstrumentationCallbackPreviousSp;
    ULONG TxFsContext;
    UCHAR InstrumentationCallbackDisabled;
    UCHAR UnalignedLoadStoreExceptions;
    UCHAR Padding1[2];
    struct _GDI_TEB_BATCH GdiTebBatch;
    struct _CLIENT_ID RealClientId;
    PVOID GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    ULONG64 Win32ClientInfo[62];
    PVOID glDispatchTable[233];
    ULONG64 glReserved1[29];
    PVOID glReserved2;
    PVOID glSectionInfo;
    PVOID glSection;
    PVOID glTable;
    PVOID glCurrentRC;
    PVOID glContext;
    ULONG LastStatusValue;
    UCHAR Padding2[4];
    struct _UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    UCHAR Padding3[6];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    struct _LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorMode;
    UCHAR Padding4[4];
    PVOID Instrumentation[11];
    struct _GUID ActivityId;
    PVOID SubProcessTag;
    PVOID PerflibData;
    PVOID EtwTraceData;
    PVOID WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    UCHAR Padding5[4];
    PVOID ReservedForPerf;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
    UCHAR Padding6[4];
    PVOID SavedPriorityState;
    ULONG64 ReservedForCodeCoverage;
    PVOID ThreadPoolData;
    PVOID *TlsExpansionSlots;
    PVOID DeallocationBStore;
    PVOID BStoreLimit;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    PVOID NlsCache;
    PVOID pShimData;
    ULONG HeapData;
    UCHAR Padding7[4];
    PVOID CurrentTransactionHandle;
    struct _TEB_ACTIVE_FRAME *ActiveFrame;
    PVOID FlsData;
    PVOID PreferredLanguages;
    PVOID UserPrefLanguages;
    PVOID MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT LoadOwner : 1;
    USHORT LoaderWorker : 1;
    USHORT SkipLoaderInit : 1;
    USHORT SpareSameTebBits : 1;
    PVOID TxnScopeEnterCallback;
    PVOID TxnScopeExitCallback;
    PVOID TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    PVOID ResourceRetValue;
    PVOID ReservedForWdf;
    ULONG64 ReservedForCrt;
    struct _GUID EffectiveContainerId;
};

typedef struct _TEB_ACTIVE_FRAME {
    ULONG Flags;
    struct _TEB_ACTIVE_FRAME *Previous;
    struct _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

typedef struct _TEB_ACTIVE_FRAME_CONTEXT {
    ULONG Flags;
    PCHAR FrameName;
};

typedef struct _TEB_ACTIVE_FRAME_CONTEXT_EX {
    struct _TEB_ACTIVE_FRAME_CONTEXT BasicContext;
    PCHAR SourceLocation;
};

typedef struct _TEB_ACTIVE_FRAME_EX {
    struct _TEB_ACTIVE_FRAME BasicFrame;
    PVOID ExtensionIdentifier;
};

typedef struct _TELEMETRY_COVERAGE_POINT {
};

typedef struct _THREAD_BASIC_INFORMATION {
    LONG ExitStatus;
    struct _TEB *TebBaseAddress;
    struct _CLIENT_ID ClientId;
    ULONG64 AffinityMask;
    LONG Priority;
    LONG BasePriority;
};

typedef struct _THREAD_CYCLE_TIME_INFORMATION {
    ULONG64 AccumulatedCycles;
    ULONG64 CurrentCycleCount;
};

typedef struct _THREAD_ENERGY_VALUES {
    ULONG64 Cycles[4][2];
    ULONG64 AttributedCycles[4][2];
    ULONG64 WorkOnBehalfCycles[4][2];
    union _TIMELINE_BITMAP CpuTimeline;
};

typedef struct _THREAD_LAST_SYSCALL_INFORMATION {
    PVOID FirstArgument;
    USHORT SystemCallNumber;
    USHORT Pad[3];
    ULONG64 WaitTime;
};

typedef struct _THREAD_NAME_INFORMATION {
    struct _UNICODE_STRING ThreadName;
};

typedef struct _THREAD_PERFORMANCE_DATA {
    USHORT Size;
    USHORT Version;
    struct _PROCESSOR_NUMBER ProcessorNumber;
    ULONG ContextSwitches;
    ULONG HwCountersCount;
    ULONG64 UpdateCount;
    ULONG64 WaitReasonBitMap;
    ULONG64 HardwareCounters;
    struct _COUNTER_READING CycleTime;
    struct _COUNTER_READING HwCounters[16];
    VOID _THREAD_PERFORMANCE_DATA;
    VOID _THREAD_PERFORMANCE_DATA;
    struct _THREAD_PERFORMANCE_DATA *operator=;
    struct _THREAD_PERFORMANCE_DATA *operator=;
};

typedef struct _THREAD_PROFILING_INFORMATION {
    ULONG64 HardwareCounters;
    ULONG Flags;
    ULONG Enable;
    struct _THREAD_PERFORMANCE_DATA *PerformanceData;
};

typedef struct _THREAD_TEB_INFORMATION {
    PVOID TebInformation;
    ULONG TebOffset;
    ULONG BytesToRead;
};

typedef struct _THREAD_TLS_INFORMATION {
    ULONG Flags;
    PVOID NewTlsData;
    PVOID OldTlsData;
    PVOID ThreadId;
};

typedef struct _THREAD_UMS_INFORMATION {
    enum _THREAD_UMS_INFORMATION_COMMAND Command;
    struct _RTL_UMS_COMPLETION_LIST *CompletionList;
    struct _RTL_UMS_CONTEXT *UmsContext;
    ULONG Flags;
    ULONG IsUmsSchedulerThread : 1;
    ULONG IsUmsWorkerThread : 1;
};

typedef struct _TIMER_BASIC_INFORMATION {
    union _LARGE_INTEGER RemainingTime;
    UCHAR TimerState;
};

typedef struct _TIMER_SET_COALESCABLE_TIMER_INFO {
    union _LARGE_INTEGER DueTime;
    PVOID TimerApcRoutine;
    PVOID TimerContext;
    struct _COUNTED_REASON_CONTEXT *WakeContext;
    ULONG Period;
    ULONG TolerableDelay;
    PUCHAR PreviousState;
};

typedef struct _TIME_FIELDS {
    SHORT Year;
    SHORT Month;
    SHORT Day;
    SHORT Hour;
    SHORT Minute;
    SHORT Second;
    SHORT Milliseconds;
    SHORT Weekday;
};

typedef struct _TOKEN_ACCESS_INFORMATION {
    struct _SID_AND_ATTRIBUTES_HASH *SidHash;
    struct _SID_AND_ATTRIBUTES_HASH *RestrictedSidHash;
    struct _TOKEN_PRIVILEGES *Privileges;
    struct _LUID AuthenticationId;
    enum _TOKEN_TYPE TokenType;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;
    ULONG Flags;
    ULONG AppContainerNumber;
    PVOID PackageSid;
    struct _SID_AND_ATTRIBUTES_HASH *CapabilitiesHash;
    PVOID TrustLevelSid;
    PVOID SecurityAttributes;
};

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PVOID TokenAppContainer;
};

typedef struct _TOKEN_AUDIT_POLICY {
    UCHAR PerUserPolicy[30];
};

typedef struct _TOKEN_BNO_ISOLATION_INFORMATION {
    PWCHAR IsolationPrefix;
    UCHAR IsolationEnabled;
};

typedef struct _TOKEN_CONTROL {
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    struct _LUID ModifiedId;
    struct _TOKEN_SOURCE TokenSource;
};

typedef struct _TOKEN_DEFAULT_DACL {
    struct _ACL *DefaultDacl;
};

typedef struct _TOKEN_DEVICE_CLAIMS {
    PVOID DeviceClaims;
};

typedef struct _TOKEN_ELEVATION {
    ULONG TokenIsElevated;
};

typedef struct _TOKEN_GROUPS {
    ULONG GroupCount;
    struct _SID_AND_ATTRIBUTES Groups[1];
};

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    ULONG SidCount;
    ULONG SidLength;
    struct _SID_AND_ATTRIBUTES *Sids;
    ULONG RestrictedSidCount;
    ULONG RestrictedSidLength;
    struct _SID_AND_ATTRIBUTES *RestrictedSids;
    ULONG PrivilegeCount;
    ULONG PrivilegeLength;
    struct _LUID_AND_ATTRIBUTES *Privileges;
    struct _LUID AuthenticationId;
};

typedef struct _TOKEN_LINKED_TOKEN {
    PVOID LinkedToken;
};

typedef struct _TOKEN_MANDATORY_LABEL {
    struct _SID_AND_ATTRIBUTES Label;
};

typedef struct _TOKEN_MANDATORY_POLICY {
    ULONG Policy;
};

typedef struct _TOKEN_ORIGIN {
    struct _LUID OriginatingLogonSession;
};

typedef struct _TOKEN_OWNER {
    PVOID Owner;
};

typedef struct _TOKEN_PRIMARY_GROUP {
    PVOID PrimaryGroup;
};

typedef struct _TOKEN_PRIVILEGES {
    ULONG PrivilegeCount;
    struct _LUID_AND_ATTRIBUTES Privileges[1];
};

typedef struct _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION {
    struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION *Attributes;
    enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION *Operations;
};

typedef struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION {
    USHORT Version;
    USHORT Reserved;
    ULONG AttributeCount;
     <unnamed-type-Attribute>;
    union {
        struct _TOKEN_SECURITY_ATTRIBUTE_V1 *pAttributeV1;
    } Attribute;
};

typedef struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE {
    ULONG64 Version;
    struct _UNICODE_STRING Name;
};

typedef struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID pValue;
    ULONG ValueLength;
};

typedef struct _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1 {
    ULONG Name;
    USHORT ValueType;
    USHORT Reserved;
    ULONG Flags;
    ULONG ValueCount;
     <unnamed-type-Values>;
    union {
        ULONG pInt64[1];
        ULONG pUint64[1];
        ULONG ppString[1];
        ULONG pFqbn[1];
        ULONG pOctetString[1];
    } Values;
};

typedef struct _TOKEN_SECURITY_ATTRIBUTE_V1 {
    struct _UNICODE_STRING Name;
    USHORT ValueType;
    USHORT Reserved;
    ULONG Flags;
    ULONG ValueCount;
     <unnamed-type-Values>;
    union {
        PLONG64 pInt64;
        PULONG64 pUint64;
        struct _UNICODE_STRING *pString;
        struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE *pFqbn;
        struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE *pOctetString;
    } Values;
};

typedef struct _TOKEN_SID_INFORMATION {
    PVOID Sid;
};

typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    struct _LUID SourceIdentifier;
};

typedef struct _TOKEN_STATISTICS {
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    union _LARGE_INTEGER ExpirationTime;
    enum _TOKEN_TYPE TokenType;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    ULONG DynamicCharged;
    ULONG DynamicAvailable;
    ULONG GroupCount;
    ULONG PrivilegeCount;
    struct _LUID ModifiedId;
};

typedef struct _TOKEN_USER {
    struct _SID_AND_ATTRIBUTES User;
};

typedef struct _TOKEN_USER_CLAIMS {
    PVOID UserClaims;
};

typedef struct _TPP_THREAD_DATA_CALLBACK {
};

typedef struct _TP_ALPC {
};

typedef struct _TP_CALLBACK_ENVIRON_V3 {
    ULONG Version;
    struct _TP_POOL *Pool;
    struct _TP_CLEANUP_GROUP *CleanupGroup;
    PVOID CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PVOID FinalizationCallback;
     <unnamed-type-u>;
    union {
        ULONG Flags;
         <unnamed-type-s>;
        struct {
            ULONG LongFunction : 1;
            ULONG Persistent : 1;
            ULONG Private : 30;
        } s;
    } u;
    enum _TP_CALLBACK_PRIORITY CallbackPriority;
    ULONG Size;
};

typedef struct _TP_CALLBACK_INSTANCE {
};

typedef struct _TP_CLEANUP_GROUP {
};

typedef struct _TP_DEBUG_FREE_INFO {
    ULONG FreeListSize;
};

typedef struct _TP_DIRECT {
    struct _TP_TASK Task;
    ULONG64 Lock;
    struct _LIST_ENTRY IoCompletionInformationList;
    PVOID Callback;
    ULONG NumaNode;
    UCHAR IdealProcessor;
};

typedef struct _TP_IO {
};

typedef struct _TP_JOB {
};

typedef struct _TP_POOL {
};

typedef struct _TP_POOL_STACK_INFORMATION {
    ULONG64 StackReserve;
    ULONG64 StackCommit;
};

typedef struct _TP_TASK {
    struct _TP_TASK_CALLBACKS *Callbacks;
    ULONG NumaNode;
    UCHAR IdealProcessor;
    struct _LIST_ENTRY ListEntry;
};

typedef struct _TP_TASK_CALLBACKS {
    PVOID ExecuteCallback;
    PVOID Unposted;
};

typedef struct _TP_TIMER {
};

typedef struct _TP_WAIT {
};

typedef struct _TP_WORK {
};

typedef struct _TRACE_ENABLE_INFO {
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserved1;
    USHORT LoggerId;
    ULONG EnableProperty;
    ULONG Reserved2;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
};

typedef struct _TRACE_GUID_INFO {
    ULONG InstanceCount;
    ULONG Reserved;
};

typedef struct _TRACE_GUID_PROPERTIES {
    struct _GUID Guid;
    ULONG GuidType;
    ULONG LoggerId;
    ULONG EnableLevel;
    ULONG EnableFlags;
    UCHAR IsEnable;
};

typedef struct _TRACE_PROVIDER_INSTANCE_INFO {
    ULONG NextOffset;
    ULONG EnableCount;
    ULONG Pid;
    ULONG Flags;
};

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    struct _GUID TmIdentity;
    union _LARGE_INTEGER VirtualClock;
};

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    ULONG LogPathLength;
    WCHAR LogPath[1];
};

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    struct _GUID LogIdentity;
};

typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    struct _GUID OldestTransactionGuid;
};

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONG64 LastRecoveredLsn;
};

typedef struct _TRANSACTION_BASIC_INFORMATION {
    struct _GUID TransactionId;
    ULONG State;
    ULONG Outcome;
};

typedef struct _TRANSACTION_BIND_INFORMATION {
    PVOID TmHandle;
};

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    ULONG NumberOfEnlistments;
    struct _TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
};

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    struct _GUID EnlistmentId;
    struct _GUID ResourceManagerId;
};

typedef struct _TRANSACTION_LIST_ENTRY {
    struct _GUID UOW;
};

typedef struct _TRANSACTION_LIST_INFORMATION {
    ULONG NumberOfTransactions;
    struct _TRANSACTION_LIST_ENTRY TransactionInformation[1];
};

typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    union _LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
};

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    struct _GUID UOW;
};

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    struct _GUID UOW;
    struct _GUID TmIdentity;
    ULONG BufferLength;
};

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    struct _GUID EnlistmentId;
    struct _GUID UOW;
};

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    ULONG SavepointId;
};

typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    struct _GUID TmIdentity;
    ULONG Flags;
};

typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    union _LARGE_INTEGER Timeout;
    ULONG Outcome;
    ULONG DescriptionLength;
    WCHAR Description[1];
};

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    struct _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
};

typedef struct _TRANSLATOR_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG TranslateResources;
    PLONG TranslateResourceRequirements;
};

typedef struct _TRANSPORT_HEADER_OFFSET {
    USHORT ProtocolType;
    USHORT HeaderOffset;
};

typedef struct _TXFS_CREATE_MINIVERSION_INFO {
    USHORT StructureVersion;
    USHORT StructureLength;
    ULONG BaseVersion;
    USHORT MiniVersion;
};

typedef struct _TXFS_GET_METADATA_INFO_OUT {
     <unnamed-type-TxfFileId>;
    struct {
        LONG64 LowPart;
        LONG64 HighPart;
    } TxfFileId;
    struct _GUID LockingTransaction;
    ULONG64 LastLsn;
    ULONG TransactionState;
};

typedef struct _TXFS_GET_TRANSACTED_VERSION {
    ULONG ThisBaseVersion;
    ULONG LatestVersion;
    USHORT ThisMiniVersion;
    USHORT FirstMiniVersion;
    USHORT LatestMiniVersion;
};

typedef struct _TXFS_LIST_TRANSACTIONS {
    ULONG64 NumberOfTransactions;
    ULONG64 BufferSizeRequired;
};

typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {
    struct _GUID TransactionId;
    ULONG TransactionState;
    ULONG Reserved1;
    ULONG Reserved2;
    LONG64 Reserved3;
};

typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
    struct _GUID KtmTransaction;
    ULONG64 NumberOfFiles;
    ULONG64 BufferSizeRequired;
    ULONG64 Offset;
};

typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
    ULONG64 Offset;
    ULONG NameFlags;
    LONG64 FileId;
    ULONG Reserved1;
    ULONG Reserved2;
    LONG64 Reserved3;
    WCHAR FileName[1];
};

typedef struct _TXFS_MODIFY_RM {
    ULONG Flags;
    ULONG LogContainerCountMax;
    ULONG LogContainerCountMin;
    ULONG LogContainerCount;
    ULONG LogGrowthIncrement;
    ULONG LogAutoShrinkPercentage;
    ULONG64 Reserved;
    USHORT LoggingMode;
};

typedef struct _TXFS_QUERY_RM_INFORMATION {
    ULONG BytesRequired;
    ULONG64 TailLsn;
    ULONG64 CurrentLsn;
    ULONG64 ArchiveTailLsn;
    ULONG64 LogContainerSize;
    union _LARGE_INTEGER HighestVirtualClock;
    ULONG LogContainerCount;
    ULONG LogContainerCountMax;
    ULONG LogContainerCountMin;
    ULONG LogGrowthIncrement;
    ULONG LogAutoShrinkPercentage;
    ULONG Flags;
    USHORT LoggingMode;
    USHORT Reserved;
    ULONG RmState;
    ULONG64 LogCapacity;
    ULONG64 LogFree;
    ULONG64 TopsSize;
    ULONG64 TopsUsed;
    ULONG64 TransactionCount;
    ULONG64 OnePCCount;
    ULONG64 TwoPCCount;
    ULONG64 NumberLogFileFull;
    ULONG64 OldestTransactionAge;
    struct _GUID RMName;
    ULONG TmLogPathOffset;
};

typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
    ULONG BufferLength;
    UCHAR Buffer[1];
};

typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
    union _LARGE_INTEGER LastVirtualClock;
    ULONG64 LastRedoLsn;
    ULONG64 HighestRecoveryLsn;
    ULONG Flags;
};

typedef struct _TXFS_SAVEPOINT_INFORMATION {
    PVOID KtmTransaction;
    ULONG ActionCode;
    ULONG SavepointId;
};

typedef struct _TXFS_START_RM_INFORMATION {
    ULONG Flags;
    ULONG64 LogContainerSize;
    ULONG LogContainerCountMin;
    ULONG LogContainerCountMax;
    ULONG LogGrowthIncrement;
    ULONG LogAutoShrinkPercentage;
    ULONG TmLogPathOffset;
    USHORT TmLogPathLength;
    USHORT LoggingMode;
    USHORT LogPathLength;
    USHORT Reserved;
    WCHAR LogPath[1];
};

typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {
    UCHAR TransactionsActiveAtSnapshot;
};

typedef struct _TXFS_WRITE_BACKUP_INFORMATION {
    UCHAR Buffer[1];
};

typedef struct _TXN_PARAMETER_BLOCK {
    USHORT Length;
    USHORT TxFsContext;
    PVOID TransactionObject;
};

typedef struct _TlgEventMetadata_t {
    UCHAR Type;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    ULONG64 Keyword;
    USHORT RemainingSize;
};

typedef struct _TlgProviderMetadata_t {
    UCHAR Type;
    struct _GUID ProviderId;
    USHORT RemainingSize;
};

typedef struct _TlgProvider_t {
    ULONG LevelPlus1;
    PUSHORT ProviderMetadataPtr;
    ULONG64 KeywordAny;
    ULONG64 KeywordAll;
    ULONG64 RegHandle;
    PVOID EnableCallback;
    PVOID CallbackContext;
};

typedef struct _TlgTypeMapBase<_FILETIME> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<_GUID> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<_SID *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<_SID const *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<_SYSTEMTIME> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<__int64> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<bool> {
    USHORT _TlgTypeType0;
    USHORT _TlgTypeType1;
    USHORT _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<char *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<char const *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<char> {
    USHORT _TlgTypeType0;
    USHORT _TlgTypeType1;
    USHORT _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<double> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<float> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<int> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<long> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<short> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<signed char> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned __int64> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned char> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned int> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned long> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<unsigned short> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<void *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<void const *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<wchar_t *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<wchar_t const *> {
    UCHAR _TlgTypeType0;
    USHORT _TlgTypeType1;
    UCHAR _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TlgTypeMapBase<wchar_t> {
    USHORT _TlgTypeType0;
    USHORT _TlgTypeType1;
    USHORT _TlgType0;
    USHORT _TlgType1;
};

typedef struct _TraceLoggingMetadata_t {
    ULONG Signature;
    USHORT Size;
    UCHAR Version;
    UCHAR Flags;
    ULONG64 Magic;
};

typedef struct _TypeDescriptor {
    PVOID pVFTable;
    PVOID spare;
    CHAR name[0];
};

typedef struct _UCALLOUT_FRAME {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    PVOID Buffer;
    ULONG Length;
    ULONG ApiNumber;
    struct _MACHINE_FRAME MachineFrame;
};

typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    ULONG UmsVersion;
    struct _RTL_UMS_CONTEXT *RtlUmsContext;
    PVOID UmsContext;
    struct _RTL_UMS_COMPLETION_LIST *RtlUmsCompletionList;
    PVOID UmsCompletionList;
};

typedef struct _UNICODE_PREFIX_TABLE {
    SHORT NodeTypeCode;
    SHORT NameLength;
    struct _UNICODE_PREFIX_TABLE_ENTRY *NextPrefixTree;
    struct _UNICODE_PREFIX_TABLE_ENTRY *LastNextEntry;
};

typedef struct _UNICODE_PREFIX_TABLE_ENTRY {
    SHORT NodeTypeCode;
    SHORT NameLength;
    struct _UNICODE_PREFIX_TABLE_ENTRY *NextPrefixTree;
    struct _UNICODE_PREFIX_TABLE_ENTRY *CaseMatch;
    struct _RTL_SPLAY_LINKS Links;
    struct _UNICODE_STRING *Prefix;
};

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWCHAR Buffer;
};

typedef struct _UNIQUE_PROCESS_INFORMATION {
    ULONG64 DontUse : 9;
    ULONG64 UniqueProcessKey : 48;
    ULONG64 Reserved : 7;
};

typedef struct _UNWIND_HISTORY_TABLE {
    ULONG Count;
    UCHAR LocalHint;
    UCHAR GlobalHint;
    UCHAR Search;
    UCHAR Once;
    ULONG64 LowAddress;
    ULONG64 HighAddress;
    struct _UNWIND_HISTORY_TABLE_ENTRY Entry[12];
};

typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
    ULONG64 ImageBase;
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionEntry;
};

typedef struct _UNWIND_INFO {
    UCHAR Version : 3;
    UCHAR Flags : 5;
    UCHAR SizeOfProlog;
    UCHAR CountOfCodes;
    UCHAR FrameRegister : 4;
    UCHAR FrameOffset : 4;
    union _UNWIND_CODE UnwindCode[1];
};

typedef struct _VARIABLE_NAME {
    ULONG NextEntryOffset;
    struct _GUID VendorGuid;
    WCHAR Name[1];
};

typedef struct _VARIABLE_NAME_AND_VALUE {
    ULONG NextEntryOffset;
    ULONG ValueOffset;
    ULONG ValueLength;
    ULONG Attributes;
    struct _GUID VendorGuid;
    WCHAR Name[1];
};

typedef struct _VAR_STRING {
    ULONG ulTotalSize;
    ULONG ulNeededSize;
    ULONG ulUsedSize;
    ULONG ulStringFormat;
    ULONG ulStringSize;
    ULONG ulStringOffset;
};

typedef struct _VCN_RANGE_INPUT_BUFFER {
    union _LARGE_INTEGER StartingVcn;
    union _LARGE_INTEGER ClusterCount;
};

typedef struct _VHD_DISK_SIGNATURE {
    ULONG ParentPartitionNumber;
    UCHAR BootDevice[1];
};

typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
    ULONG NumberOfWorkerThreads;
    ULONG Flags;
};

typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
    USHORT HeaderSize;
    ULONG Flags;
    ULONG NotificationInfoSize;
    USHORT NotificationInfoOffset;
    USHORT ProviderMajorVersion;
};

typedef struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
    struct _GUID VirtualizationInstanceID;
};

typedef struct _VIRTUAL_EFI_RUNTIME_SERVICES {
    ULONG64 GetTime;
    ULONG64 SetTime;
    ULONG64 GetWakeupTime;
    ULONG64 SetWakeupTime;
    ULONG64 SetVirtualAddressMap;
    ULONG64 ConvertPointer;
    ULONG64 GetVariable;
    ULONG64 GetNextVariableName;
    ULONG64 SetVariable;
    ULONG64 GetNextHighMonotonicCount;
    ULONG64 ResetSystem;
    ULONG64 UpdateCapsule;
    ULONG64 QueryCapsuleCapabilities;
    ULONG64 QueryVariableInfo;
};

typedef struct _VIRTUAL_RESOURCE {
    union _VIRTUAL_RESOURCE_CAPABILITY Capability;
    union _VIRTUAL_RESOURCE_CONTROL Control;
    USHORT RsvdP;
    union _VIRTUAL_RESOURCE_STATUS Status;
};

typedef struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
    ULONG Size;
    enum _VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
};

typedef struct _VIRTUAL_STORAGE_TYPE {
    ULONG DeviceId;
    struct _GUID VendorId;
};

typedef struct _VLAN_TAG {
    USHORT Tag;
    USHORT VID : 12;
    USHORT CFI : 1;
    USHORT User_Priority : 3;
    USHORT Type;
};

typedef struct _VM_COUNTERS {
    ULONG64 PeakVirtualSize;
    ULONG64 VirtualSize;
    ULONG PageFaultCount;
    ULONG64 PeakWorkingSetSize;
    ULONG64 WorkingSetSize;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PagefileUsage;
    ULONG64 PeakPagefileUsage;
};

typedef struct _VM_COUNTERS_EX {
    ULONG64 PeakVirtualSize;
    ULONG64 VirtualSize;
    ULONG PageFaultCount;
    ULONG64 PeakWorkingSetSize;
    ULONG64 WorkingSetSize;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PagefileUsage;
    ULONG64 PeakPagefileUsage;
    ULONG64 PrivateUsage;
};

typedef struct _VM_COUNTERS_EX2 {
    struct _VM_COUNTERS_EX CountersEx;
    ULONG64 PrivateWorkingSetSize;
    ULONG64 SharedCommitUsage;
};

typedef struct _VOLUME_REFS_INFO_BUFFER {
    union _LARGE_INTEGER CacheSizeInBytes;
    union _LARGE_INTEGER AllocatedCacheInBytes;
    union _LARGE_INTEGER PopulatedCacheInBytes;
    union _LARGE_INTEGER InErrorCacheInBytes;
    union _LARGE_INTEGER MemoryUsedForCacheMetadata;
    ULONG CacheLineSize;
    LONG CacheTransactionsOutstanding;
    LONG CacheLinesFree;
    LONG CacheLinesInError;
    union _LARGE_INTEGER CacheHitsInBytes;
    union _LARGE_INTEGER CacheMissesInBytes;
    union _LARGE_INTEGER CachePopulationUpdatesInBytes;
    union _LARGE_INTEGER CacheWriteThroughUpdatesInBytes;
    union _LARGE_INTEGER CacheInvalidationsInBytes;
    union _LARGE_INTEGER CacheOverReadsInBytes;
    union _LARGE_INTEGER MetadataWrittenBytes;
    LONG CacheHitCounter;
    LONG CacheMissCounter;
    LONG CacheLineAllocationCounter;
    LONG CacheInvalidationsCounter;
    LONG CachePopulationUpdatesCounter;
    LONG CacheWriteThroughUpdatesCounter;
    LONG MaxCacheTransactionsOutstanding;
    LONG DataWritesReallocationCount;
    LONG DataInPlaceWriteCount;
    LONG MetadataAllocationsFastTierCount;
    LONG MetadataAllocationsSlowTierCount;
    LONG DataAllocationsFastTierCount;
    LONG DataAllocationsSlowTierCount;
    LONG DestagesSlowTierToFastTier;
    LONG DestagesFastTierToSlowTier;
    LONG SlowTierDataFillRatio;
    LONG FastTierDataFillRatio;
    LONG SlowTierMetadataFillRatio;
    LONG FastTierMetadataFillRatio;
    LONG SlowToFastDestageReadLatency;
    LONG SlowToFastDestageReadLatencyBase;
    LONG SlowToFastDestageWriteLatency;
    LONG SlowToFastDestageWriteLatencyBase;
    LONG FastToSlowDestageReadLatency;
    LONG FastToSlowDestageReadLatencyBase;
    LONG FastToSlowDestageWriteLatency;
    LONG FastToSlowDestageWriteLatencyBase;
    LONG SlowTierContainerFillRatio;
    LONG SlowTierContainerFillRatioBase;
    LONG FastTierContainerFillRatio;
    LONG FastTierContainerFillRatioBase;
    LONG TreeUpdateLatency;
    LONG TreeUpdateLatencyBase;
    LONG CheckpointLatency;
    LONG CheckpointLatencyBase;
    LONG TreeUpdateCount;
    LONG CheckpointCount;
    LONG LogWriteCount;
    LONG LogFillRatio;
    LONG ReadCacheInvalidationsForOverwrite;
    LONG ReadCacheInvalidationsForReuse;
    LONG ReadCacheInvalidationsGeneral;
    LONG ReadCacheChecksOnMount;
    LONG ReadCacheIssuesOnMount;
    LONG TrimLatency;
    LONG TrimLatencyBase;
    LONG DataCompactionCount;
    LONG CompactionReadLatency;
    LONG CompactionReadLatencyBase;
    LONG CompactionWriteLatency;
    LONG CompactionWriteLatencyBase;
    union _LARGE_INTEGER DataInPlaceWriteClusterCount;
    LONG CompactionFailedDueToIneligibleContainer;
    LONG CompactionFailedDueToMaxFragmentation;
    LONG CompactedContainerFillRatio;
    LONG CompactedContainerFillRatioBase;
    LONG ContainerMoveRetryCount;
    LONG ContainerMoveFailedDueToIneligibleContainer;
    LONG CompactionFailureCount;
    LONG ContainerMoveFailureCount;
    union _LARGE_INTEGER NumberOfDirtyMetadataPages;
    LONG NumberOfDirtyTableListEntries;
    LONG NumberOfDeleteQueueEntries;
};

typedef struct _VPB {
    SHORT Type;
    SHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[32];
};

typedef struct _VXLAN_INFO {
    USHORT VxlanUDPPortNumber;
    USHORT VxlanUDPPortNumberConfigurable : 1;
};

typedef struct _VXLAN_PARAMETERS {
    USHORT VxlanUDPPortNumber;
};

typedef struct _WAIT_CONTEXT_BLOCK {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct _LIST_ENTRY DmaWaitEntry;
    ULONG NumberOfChannels;
    ULONG SyncCallback : 1;
    ULONG DmaContext : 1;
    ULONG ZeroMapRegisters : 1;
    ULONG Reserved : 9;
    ULONG NumberOfRemapPages : 20;
    enum _IO_ALLOCATION_ACTION *DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    struct _KDPC *BufferChainingDpc;
};

typedef struct _WAKE_TIMER_INFO {
    ULONG64 OffsetToNext;
    union _ULARGE_INTEGER DueTime;
    ULONG Period;
    struct _DIAGNOSTIC_BUFFER ReasonContext;
};

typedef struct _WDFCX_FILEOBJECT_CONFIG {
    ULONG Size;
    PUCHAR EvtCxDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDFCX_PNPPOWER_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtCxDevicePrePrepareHardware;
    PVOID EvtCxDevicePrePrepareHardwareFailedCleanup;
    PLONG EvtCxDevicePostPrepareHardware;
    PLONG EvtCxDevicePreReleaseHardware;
    PLONG EvtCxDevicePostReleaseHardware;
    PLONG EvtCxDevicePreD0Entry;
    PVOID EvtCxDevicePreD0EntryFailedCleanup;
    PLONG EvtCxDevicePostD0Entry;
    PLONG EvtCxDevicePreD0Exit;
    PLONG EvtCxDevicePostD0Exit;
    PVOID EvtCxDevicePreSurpriseRemoval;
    PVOID EvtCxDevicePostSurpriseRemoval;
    PLONG EvtCxDevicePreSelfManagedIoInit;
    PVOID EvtCxDevicePreSelfManagedIoInitFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoInit;
    PLONG EvtCxDevicePreSelfManagedIoRestart;
    PVOID EvtCxDevicePreSelfManagedIoRestartFailedCleanup;
    PLONG EvtCxDevicePostSelfManagedIoRestart;
    PLONG EvtCxDevicePreSelfManagedIoSuspend;
    PLONG EvtCxDevicePostSelfManagedIoSuspend;
    PVOID EvtCxDevicePreSelfManagedIoFlush;
    PVOID EvtCxDevicePostSelfManagedIoFlush;
    PVOID EvtCxDevicePreSelfManagedIoCleanup;
    PVOID EvtCxDevicePostSelfManagedIoCleanup;
};

typedef struct _WDFMEMORY_OFFSET {
    ULONG64 BufferOffset;
    ULONG64 BufferLength;
};

typedef struct _WDF_BIND_INFO {
    ULONG Size;
    PWCHAR Component;
    struct _WDF_VERSION Version;
    ULONG FuncCount;
    PVOID *FuncTable;
    struct _LIBRARY_MODULE *Module;
};

typedef struct _WDF_BIND_INFO2 {
    struct _WDF_BIND_INFO V1;
    PULONG MinimumVersionRequired;
    PUCHAR ClientVersionHigherThanFramework;
    PULONG FuncCountPtr;
    PULONG StructCountPtr;
    PULONG64 *StructTable;
};

typedef struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER {
    ULONG AddressDescriptionSize;
};

typedef struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER {
    ULONG IdentificationDescriptionSize;
};

typedef struct _WDF_CHILD_LIST_CONFIG {
    ULONG Size;
    ULONG IdentificationDescriptionSize;
    ULONG AddressDescriptionSize;
    PLONG EvtChildListCreateDevice;
    PVOID EvtChildListScanForChildren;
    PVOID EvtChildListIdentificationDescriptionCopy;
    PLONG EvtChildListIdentificationDescriptionDuplicate;
    PVOID EvtChildListIdentificationDescriptionCleanup;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
    PVOID EvtChildListAddressDescriptionCopy;
    PLONG EvtChildListAddressDescriptionDuplicate;
    PVOID EvtChildListAddressDescriptionCleanup;
    PUCHAR EvtChildListDeviceReenumerated;
};

typedef struct _WDF_CHILD_LIST_ITERATOR {
    ULONG Size;
    ULONG Flags;
    PVOID Reserved[4];
};

typedef struct _WDF_CHILD_RETRIEVE_INFO {
    ULONG Size;
    struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *IdentificationDescription;
    struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER *AddressDescription;
    enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS Status;
    PUCHAR EvtChildListIdentificationDescriptionCompare;
};

typedef struct _WDF_CLASS_BIND_INFO {
    ULONG Size;
    PWCHAR ClassName;
    struct _WDF_CLASS_VERSION Version;
    PVOID *FunctionTable;
    ULONG FunctionTableCount;
    PVOID ClassBindInfo;
    PLONG ClientBindClass;
    PVOID ClientUnbindClass;
    PVOID ClassModule;
};

typedef struct _WDF_CLASS_BIND_INFO2 {
    struct _WDF_CLASS_BIND_INFO V1;
    PULONG MinimumVersionRequired;
    PUCHAR ClientVersionHigherThanFramework;
    PULONG FuncCountPtr;
    PULONG StructCountPtr;
    PULONG64 *StructTable;
};

typedef struct _WDF_CLASS_LIBRARY_INFO {
    ULONG Size;
    struct _WDF_CLASS_VERSION Version;
    PLONG ClassLibraryInitialize;
    PVOID ClassLibraryDeinitialize;
    PLONG ClassLibraryBindClient;
    PVOID ClassLibraryUnbindClient;
};

typedef struct _WDF_CLASS_VERSION {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_COMMON_BUFFER_CONFIG {
    ULONG Size;
    ULONG AlignmentRequirement;
};

typedef struct _WDF_CUSTOM_TYPE_CONTEXT {
    ULONG Size;
    ULONG64 Data;
};

typedef struct _WDF_DEVICE_PNP_CAPABILITIES {
    ULONG Size;
    enum _WDF_TRI_STATE LockSupported;
    enum _WDF_TRI_STATE EjectSupported;
    enum _WDF_TRI_STATE Removable;
    enum _WDF_TRI_STATE DockDevice;
    enum _WDF_TRI_STATE UniqueID;
    enum _WDF_TRI_STATE SilentInstall;
    enum _WDF_TRI_STATE SurpriseRemovalOK;
    enum _WDF_TRI_STATE HardwareDisabled;
    enum _WDF_TRI_STATE NoDisplayInUI;
    ULONG Address;
    ULONG UINumber;
};

typedef struct _WDF_DEVICE_PNP_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_PNP_STATE CurrentState;
            enum _WDF_DEVICE_PNP_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_CAPABILITIES {
    ULONG Size;
    enum _WDF_TRI_STATE DeviceD1;
    enum _WDF_TRI_STATE DeviceD2;
    enum _WDF_TRI_STATE WakeFromD0;
    enum _WDF_TRI_STATE WakeFromD1;
    enum _WDF_TRI_STATE WakeFromD2;
    enum _WDF_TRI_STATE WakeFromD3;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _DEVICE_POWER_STATE DeviceWake;
    enum _SYSTEM_POWER_STATE SystemWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
    enum _DEVICE_POWER_STATE IdealDxStateForSx;
};

typedef struct _WDF_DEVICE_POWER_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_STATE CurrentState;
            enum _WDF_DEVICE_POWER_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS {
    ULONG Size;
    enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps;
    enum _DEVICE_POWER_STATE DxState;
    ULONG IdleTimeout;
    enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL UserControlOfIdleSettings;
    enum _WDF_TRI_STATE Enabled;
    enum _WDF_TRI_STATE PowerUpIdleDeviceOnSystemWake;
    enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE IdleTimeoutType;
    enum _WDF_TRI_STATE ExcludeD3Cold;
};

typedef struct _WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA {
    enum _WDF_STATE_NOTIFICATION_TYPE Type;
     <unnamed-type-Data>;
    union {
         <unnamed-type-EnterState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } EnterState;
         <unnamed-type-PostProcessState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
        } PostProcessState;
         <unnamed-type-LeaveState>;
        struct {
            enum _WDF_DEVICE_POWER_POLICY_STATE CurrentState;
            enum _WDF_DEVICE_POWER_POLICY_STATE NewState;
        } LeaveState;
    } Data;
};

typedef struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS {
    ULONG Size;
    enum _DEVICE_POWER_STATE DxState;
    enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL UserControlOfWakeSettings;
    enum _WDF_TRI_STATE Enabled;
    UCHAR ArmForWakeIfChildrenAreArmedForWake;
    UCHAR IndicateChildWakeOnParentWake;
};

typedef struct _WDF_DEVICE_PROPERTY_DATA {
    ULONG Size;
    struct _DEVPROPKEY *PropertyKey;
    ULONG Lcid;
    ULONG Flags;
};

typedef struct _WDF_DEVICE_STATE {
    ULONG Size;
    enum _WDF_TRI_STATE Disabled;
    enum _WDF_TRI_STATE DontDisplayInUI;
    enum _WDF_TRI_STATE Failed;
    enum _WDF_TRI_STATE NotDisableable;
    enum _WDF_TRI_STATE Removed;
    enum _WDF_TRI_STATE ResourcesChanged;
};

typedef struct _WDF_DMA_ENABLER_CONFIG {
    ULONG Size;
    enum _WDF_DMA_PROFILE Profile;
    ULONG64 MaximumLength;
    PLONG EvtDmaEnablerFill;
    PLONG EvtDmaEnablerFlush;
    PLONG EvtDmaEnablerDisable;
    PLONG EvtDmaEnablerEnable;
    PLONG EvtDmaEnablerSelfManagedIoStart;
    PLONG EvtDmaEnablerSelfManagedIoStop;
    ULONG AddressWidthOverride;
    ULONG WdmDmaVersionOverride;
    ULONG Flags;
};

typedef struct _WDF_DMA_SYSTEM_PROFILE_CONFIG {
    ULONG Size;
    UCHAR DemandMode;
    UCHAR LoopedTransfer;
    enum _DMA_WIDTH DmaWidth;
    union _LARGE_INTEGER DeviceAddress;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *DmaDescriptor;
};

typedef struct _WDF_DPC_CONFIG {
    ULONG Size;
    PVOID EvtDpcFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WDF_DRIVER_CONFIG {
    ULONG Size;
    PLONG EvtDriverDeviceAdd;
    PVOID EvtDriverUnload;
    ULONG DriverInitFlags;
    ULONG DriverPoolTag;
};

typedef struct _WDF_DRIVER_GLOBALS {
    struct WDFDRIVER__ *Driver;
    ULONG DriverFlags;
    ULONG DriverTag;
    CHAR DriverName[32];
    UCHAR DisplaceDriverUnload;
};

typedef struct _WDF_DRIVER_VERSION_AVAILABLE_PARAMS {
    ULONG Size;
    ULONG MajorVersion;
    ULONG MinorVersion;
};

typedef struct _WDF_FDO_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceFilterAddResourceRequirements;
    PLONG EvtDeviceFilterRemoveResourceRequirements;
    PLONG EvtDeviceRemoveAddedResources;
};

typedef struct _WDF_FILEOBJECT_CONFIG {
    ULONG Size;
    PVOID EvtDeviceFileCreate;
    PVOID EvtFileClose;
    PVOID EvtFileCleanup;
    enum _WDF_TRI_STATE AutoForwardCleanupClose;
    enum _WDF_FILEOBJECT_CLASS FileObjectClass;
};

typedef struct _WDF_IFR_HEADER {
    struct _GUID Guid;
    PUCHAR Base;
    ULONG Size;
    struct _WDF_IFR_OFFSET Offset;
    LONG Sequence;
    CHAR DriverName[32];
};

typedef struct _WDF_IFR_OFFSET {
     <unnamed-type-u>;
    union {
         <unnamed-type-s>;
        struct {
            USHORT Current;
            USHORT Previous;
        } s;
        LONG AsLONG;
    } u;
};

typedef struct _WDF_INTERFACE_HEADER {
    struct _GUID *InterfaceType;
    ULONG InterfaceSize;
};

typedef struct _WDF_INTERRUPT_CONFIG {
    ULONG Size;
    struct WDFSPINLOCK__ *SpinLock;
    enum _WDF_TRI_STATE ShareVector;
    UCHAR FloatingSave;
    UCHAR AutomaticSerialization;
    PUCHAR EvtInterruptIsr;
    PVOID EvtInterruptDpc;
    PLONG EvtInterruptEnable;
    PLONG EvtInterruptDisable;
    PVOID EvtInterruptWorkItem;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptRaw;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *InterruptTranslated;
    struct WDFWAITLOCK__ *WaitLock;
    UCHAR PassiveHandling;
    enum _WDF_TRI_STATE ReportInactiveOnPowerDown;
    UCHAR CanWakeDevice;
};

typedef struct _WDF_INTERRUPT_EXTENDED_POLICY {
    ULONG Size;
    enum _WDF_INTERRUPT_POLICY Policy;
    enum _WDF_INTERRUPT_PRIORITY Priority;
    struct _GROUP_AFFINITY TargetProcessorSetAndGroup;
};

typedef struct _WDF_INTERRUPT_INFO {
    ULONG Size;
    ULONG64 Reserved1;
    ULONG64 TargetProcessorSet;
    ULONG Reserved2;
    ULONG MessageNumber;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_MODE Mode;
    enum _WDF_INTERRUPT_POLARITY Polarity;
    UCHAR MessageSignaled;
    UCHAR ShareDisposition;
    USHORT Group;
};

typedef struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS {
     <unnamed-type-Policy>;
    union {
         <unnamed-type-ExaminePolicy>;
        struct {
            enum _WDF_IO_FORWARD_PROGRESS_ACTION *EvtIoWdmIrpForForwardProgress;
        } ExaminePolicy;
    } Policy;
};

typedef struct _WDF_IO_QUEUE_CONFIG {
    ULONG Size;
    enum _WDF_IO_QUEUE_DISPATCH_TYPE DispatchType;
    enum _WDF_TRI_STATE PowerManaged;
    UCHAR AllowZeroLengthRequests;
    UCHAR DefaultQueue;
    PVOID EvtIoDefault;
    PVOID EvtIoRead;
    PVOID EvtIoWrite;
    PVOID EvtIoDeviceControl;
    PVOID EvtIoInternalDeviceControl;
    PVOID EvtIoStop;
    PVOID EvtIoResume;
    PVOID EvtIoCanceledOnQueue;
     <unnamed-type-Settings>;
    union {
         <unnamed-type-Parallel>;
        struct {
            ULONG NumberOfPresentedRequests;
        } Parallel;
    } Settings;
    struct WDFDRIVER__ *Driver;
};

typedef struct _WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY {
    ULONG Size;
    ULONG TotalForwardProgressRequests;
    enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY ForwardProgressReservedPolicy;
    struct _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS ForwardProgressReservePolicySettings;
    PLONG EvtIoAllocateResourcesForReservedRequest;
    PLONG EvtIoAllocateRequestResources;
};

typedef struct _WDF_IO_TARGET_OPEN_PARAMS {
    ULONG Size;
    enum _WDF_IO_TARGET_OPEN_TYPE Type;
    PLONG EvtIoTargetQueryRemove;
    PVOID EvtIoTargetRemoveCanceled;
    PVOID EvtIoTargetRemoveComplete;
    struct _DEVICE_OBJECT *TargetDeviceObject;
    struct _FILE_OBJECT *TargetFileObject;
    struct _UNICODE_STRING TargetDeviceName;
    ULONG DesiredAccess;
    ULONG ShareAccess;
    ULONG FileAttributes;
    ULONG CreateDisposition;
    ULONG CreateOptions;
    PVOID EaBuffer;
    ULONG EaBufferLength;
    PLONG64 AllocationSize;
    ULONG FileInformation;
    struct _UNICODE_STRING FileName;
};

typedef struct _WDF_IO_TYPE_CONFIG {
    ULONG Size;
    enum _WDF_DEVICE_IO_TYPE ReadWriteIoType;
    enum _WDF_DEVICE_IO_TYPE DeviceControlIoType;
    ULONG DirectTransferThreshold;
};

typedef struct _WDF_LIBRARY_INFO {
    ULONG Size;
    PLONG LibraryCommission;
    PLONG LibraryDecommission;
    PLONG LibraryRegisterClient;
    PLONG LibraryUnregisterClient;
    struct _WDF_VERSION Version;
};

typedef struct _WDF_LOADER_INTERFACE {
    struct _WDF_INTERFACE_HEADER Header;
    PLONG RegisterLibrary;
    PLONG VersionBind;
    PLONG VersionUnbind;
    PLONG DiagnosticsValueByNameAsULONG;
};

typedef struct _WDF_LOADER_INTERFACE_CLASS_BIND {
    struct _WDF_INTERFACE_HEADER Header;
    PLONG VersionBindClass;
    PVOID VersionUnbindClass;
};

typedef struct _WDF_LOADER_INTERFACE_DIAGNOSTIC {
    struct _WDF_INTERFACE_HEADER Header;
    PLONG DiagnosticsValueByNameAsULONG;
};

typedef struct _WDF_MEMORY_DESCRIPTOR {
    enum _WDF_MEMORY_DESCRIPTOR_TYPE Type;
     <unnamed-type-u>;
    union {
         <unnamed-type-BufferType>;
        struct {
            PVOID Buffer;
            ULONG Length;
        } BufferType;
         <unnamed-type-MdlType>;
        struct {
            struct _MDL *Mdl;
            ULONG BufferLength;
        } MdlType;
         <unnamed-type-HandleType>;
        struct {
            struct WDFMEMORY__ *Memory;
            struct _WDFMEMORY_OFFSET *Offsets;
        } HandleType;
    } u;
};

typedef struct _WDF_OBJECT_ATTRIBUTES {
    ULONG Size;
    PVOID EvtCleanupCallback;
    PVOID EvtDestroyCallback;
    enum _WDF_EXECUTION_LEVEL ExecutionLevel;
    enum _WDF_SYNCHRONIZATION_SCOPE SynchronizationScope;
    PVOID ParentObject;
    ULONG64 ContextSizeOverride;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *ContextTypeInfo;
};

typedef struct _WDF_OBJECT_CONTEXT_TYPE_INFO {
    ULONG Size;
    PCHAR ContextName;
    ULONG64 ContextSize;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO *UniqueType;
    struct _WDF_OBJECT_CONTEXT_TYPE_INFO **EvtDriverGetUniqueContextType;
};

typedef struct _WDF_PDO_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceResourcesQuery;
    PLONG EvtDeviceResourceRequirementsQuery;
    PLONG EvtDeviceEject;
    PLONG EvtDeviceSetLock;
    PLONG EvtDeviceEnableWakeAtBus;
    PVOID EvtDeviceDisableWakeAtBus;
    PVOID EvtDeviceReportedMissing;
};

typedef struct _WDF_PNPPOWER_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceD0Entry;
    PLONG EvtDeviceD0EntryPostInterruptsEnabled;
    PLONG EvtDeviceD0Exit;
    PLONG EvtDeviceD0ExitPreInterruptsDisabled;
    PLONG EvtDevicePrepareHardware;
    PLONG EvtDeviceReleaseHardware;
    PVOID EvtDeviceSelfManagedIoCleanup;
    PVOID EvtDeviceSelfManagedIoFlush;
    PLONG EvtDeviceSelfManagedIoInit;
    PLONG EvtDeviceSelfManagedIoSuspend;
    PLONG EvtDeviceSelfManagedIoRestart;
    PVOID EvtDeviceSurpriseRemoval;
    PLONG EvtDeviceQueryRemove;
    PLONG EvtDeviceQueryStop;
    PVOID EvtDeviceUsageNotification;
    PVOID EvtDeviceRelationsQuery;
    PLONG EvtDeviceUsageNotificationEx;
};

typedef struct _WDF_POWER_FRAMEWORK_SETTINGS {
    ULONG Size;
    PLONG EvtDeviceWdmPostPoFxRegisterDevice;
    PVOID EvtDeviceWdmPrePoFxUnregisterDevice;
    struct _PO_FX_COMPONENT_V1 *Component;
    PVOID ComponentActiveConditionCallback;
    PVOID ComponentIdleConditionCallback;
    PVOID ComponentIdleStateCallback;
    PLONG PowerControlCallback;
    PVOID PoFxDeviceContext;
};

typedef struct _WDF_POWER_POLICY_EVENT_CALLBACKS {
    ULONG Size;
    PLONG EvtDeviceArmWakeFromS0;
    PVOID EvtDeviceDisarmWakeFromS0;
    PVOID EvtDeviceWakeFromS0Triggered;
    PLONG EvtDeviceArmWakeFromSx;
    PVOID EvtDeviceDisarmWakeFromSx;
    PVOID EvtDeviceWakeFromSxTriggered;
    PLONG EvtDeviceArmWakeFromSxWithReason;
};

typedef struct _WDF_POWER_ROUTINE_TIMED_OUT_DATA {
    enum _WDF_DEVICE_POWER_STATE PowerState;
    enum _WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState;
    struct _DEVICE_OBJECT *DeviceObject;
    struct WDFDEVICE__ *Device;
    struct _KTHREAD *TimedOutThread;
};

typedef struct _WDF_QUERY_INTERFACE_CONFIG {
    ULONG Size;
    struct _INTERFACE *Interface;
    struct _GUID *InterfaceType;
    UCHAR SendQueryToParentStack;
    PLONG EvtDeviceProcessQueryInterfaceRequest;
    UCHAR ImportInterface;
};

typedef struct _WDF_QUEUE_FATAL_ERROR_DATA {
    struct WDFQUEUE__ *Queue;
    struct WDFREQUEST__ *Request;
    LONG Status;
};

typedef struct _WDF_REMOVE_LOCK_OPTIONS {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_COMPLETION_PARAMS {
    ULONG Size;
    enum _WDF_REQUEST_TYPE Type;
    struct _IO_STATUS_BLOCK IoStatus;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Write>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Write;
         <unnamed-type-Read>;
        struct {
            struct WDFMEMORY__ *Buffer;
            ULONG64 Length;
            ULONG64 Offset;
        } Read;
         <unnamed-type-Ioctl>;
        struct {
            ULONG IoControlCode;
             <unnamed-type-Input>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
            } Input;
             <unnamed-type-Output>;
            struct {
                struct WDFMEMORY__ *Buffer;
                ULONG64 Offset;
                ULONG64 Length;
            } Output;
        } Ioctl;
         <unnamed-type-Others>;
        struct {
             <unnamed-type-Argument1>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument1;
             <unnamed-type-Argument2>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument2;
             <unnamed-type-Argument3>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument3;
             <unnamed-type-Argument4>;
            union {
                PVOID Ptr;
                ULONG64 Value;
            } Argument4;
        } Others;
         <unnamed-type-Usb>;
        struct {
            struct _WDF_USB_REQUEST_COMPLETION_PARAMS *Completion;
        } Usb;
    } Parameters;
};

typedef struct _WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA {
    struct WDFREQUEST__ *Request;
    struct _IRP *Irp;
    ULONG OutputBufferLength;
    ULONG64 Information;
    UCHAR MajorFunction;
};

typedef struct _WDF_REQUEST_FORWARD_OPTIONS {
    ULONG Size;
    ULONG Flags;
};

typedef struct _WDF_REQUEST_PARAMETERS {
    USHORT Size;
    UCHAR MinorFunction;
    enum _WDF_REQUEST_TYPE Type;
     <unnamed-type-Parameters>;
    union {
         <unnamed-type-Create>;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
         <unnamed-type-Read>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Read;
         <unnamed-type-Write>;
        struct {
            ULONG64 Length;
            ULONG Key;
            LONG64 DeviceOffset;
        } Write;
         <unnamed-type-DeviceIoControl>;
        struct {
            ULONG64 OutputBufferLength;
            ULONG64 InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
         <unnamed-type-Others>;
        struct {
            PVOID Arg1;
            PVOID Arg2;
            ULONG IoControlCode;
            PVOID Arg4;
        } Others;
    } Parameters;
};

typedef struct _WDF_REQUEST_REUSE_PARAMS {
    ULONG Size;
    ULONG Flags;
    LONG Status;
    struct _IRP *NewIrp;
};

typedef struct _WDF_REQUEST_SEND_OPTIONS {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_TASK_SEND_OPTIONS {
    ULONG Size;
    ULONG Flags;
    LONG64 Timeout;
};

typedef struct _WDF_TIMER_CONFIG {
    ULONG Size;
    PVOID EvtTimerFunc;
    ULONG Period;
    UCHAR AutomaticSerialization;
    ULONG TolerableDelay;
    UCHAR UseHighResolutionTimer;
};

typedef struct _WDF_USB_REQUEST_COMPLETION_PARAMS {
};

typedef struct _WDF_VERSION {
    ULONG Major;
    ULONG Minor;
    ULONG Build;
};

typedef struct _WDF_WMI_INSTANCE_CONFIG {
    ULONG Size;
    struct WDFWMIPROVIDER__ *Provider;
    struct _WDF_WMI_PROVIDER_CONFIG *ProviderConfig;
    UCHAR UseContextForQuery;
    UCHAR Register;
    PLONG EvtWmiInstanceQueryInstance;
    PLONG EvtWmiInstanceSetInstance;
    PLONG EvtWmiInstanceSetItem;
    PLONG EvtWmiInstanceExecuteMethod;
};

typedef struct _WDF_WMI_PROVIDER_CONFIG {
    ULONG Size;
    struct _GUID Guid;
    ULONG Flags;
    ULONG MinInstanceBufferSize;
    PLONG EvtWmiProviderFunctionControl;
};

typedef struct _WDF_WORKITEM_CONFIG {
    ULONG Size;
    PVOID EvtWorkItemFunc;
    UCHAR AutomaticSerialization;
};

typedef struct _WFDSVC_CONNECTION_CAPABILITY {
    UCHAR bNew;
    UCHAR bClient;
    UCHAR bGO;
};

typedef struct _WHEA128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG SecondaryUncorrectableErrorMask;
    ULONG SecondaryUncorrectableErrorSev;
    ULONG SecondaryCapsAndControl;
};

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
};

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG RootErrorCommand;
};

typedef struct _WHEA_ARMV8_AARCH32_GPRS {
    ULONG R0;
    ULONG R1;
    ULONG R2;
    ULONG R3;
    ULONG R4;
    ULONG R5;
    ULONG R6;
    ULONG R7;
    ULONG R8;
    ULONG R9;
    ULONG R10;
    ULONG R11;
    ULONG R12;
    ULONG R13;
    ULONG R14;
    ULONG R15;
};

typedef struct _WHEA_ARMV8_AARCH64_EL3_CSR {
    ULONG64 ELR_EL3;
    ULONG64 ESR_EL3;
    ULONG64 FAR_EL3;
    ULONG64 MAIR_EL3;
    ULONG64 SCTLR_EL3;
    ULONG64 SP_EL3;
    ULONG64 SPSR_EL3;
    ULONG64 TCR_EL3;
    ULONG64 TPIDR_EL3;
    ULONG64 TTBR0_EL3;
};

typedef struct _WHEA_ARMV8_AARCH64_GPRS {
    ULONG64 X0;
    ULONG64 X1;
    ULONG64 X2;
    ULONG64 X3;
    ULONG64 X4;
    ULONG64 X5;
    ULONG64 X6;
    ULONG64 X7;
    ULONG64 X8;
    ULONG64 X9;
    ULONG64 X10;
    ULONG64 X11;
    ULONG64 X12;
    ULONG64 X13;
    ULONG64 X14;
    ULONG64 X15;
    ULONG64 X16;
    ULONG64 X17;
    ULONG64 X18;
    ULONG64 X19;
    ULONG64 X20;
    ULONG64 X21;
    ULONG64 X22;
    ULONG64 X23;
    ULONG64 X24;
    ULONG64 X25;
    ULONG64 X26;
    ULONG64 X27;
    ULONG64 X28;
    ULONG64 X29;
    ULONG64 X30;
    ULONG64 SP;
};

typedef struct _WHEA_ARM_AARCH32_EL1_CSR {
    ULONG DFAR;
    ULONG DFSR;
    ULONG IFAR;
    ULONG ISR;
    ULONG MAIR0;
    ULONG MAIR1;
    ULONG MIDR;
    ULONG MPIDR;
    ULONG NMRR;
    ULONG PRRR;
    ULONG SCTLR;
    ULONG SPSR;
    ULONG SPSR_abt;
    ULONG SPSR_fiq;
    ULONG SPSR_irq;
    ULONG SPSR_svc;
    ULONG SPSR_und;
    ULONG TPIDRPRW;
    ULONG TPIDRURO;
    ULONG TPIDRURW;
    ULONG TTBCR;
    ULONG TTBR0;
    ULONG TTBR1;
    ULONG DACR;
};

typedef struct _WHEA_ARM_AARCH32_EL2_CSR {
    ULONG ELR_hyp;
    ULONG HAMAIR0;
    ULONG HAMAIR1;
    ULONG HCR;
    ULONG HCR2;
    ULONG HDFAR;
    ULONG HIFAR;
    ULONG HPFAR;
    ULONG HSR;
    ULONG HTCR;
    ULONG HTPIDR;
    ULONG HTTBR;
    ULONG SPSR_hyp;
    ULONG VTCR;
    ULONG VTTBR;
    ULONG DACR32_EL2;
};

typedef struct _WHEA_ARM_AARCH32_SECURE_CSR {
    ULONG SCTLR;
    ULONG SPSR_mon;
};

typedef struct _WHEA_ARM_AARCH64_EL1_CSR {
    ULONG64 ELR_EL1;
    ULONG64 ESR_EL2;
    ULONG64 FAR_EL1;
    ULONG64 ISR_EL1;
    ULONG64 MAIR_EL1;
    ULONG64 MIDR_EL1;
    ULONG64 MPIDR_EL1;
    ULONG64 SCTLR_EL1;
    ULONG64 SP_EL0;
    ULONG64 SP_EL1;
    ULONG64 SPSR_EL1;
    ULONG64 TCR_EL1;
    ULONG64 TPIDR_EL0;
    ULONG64 TPIDR_EL1;
    ULONG64 TPIDRRO_EL0;
    ULONG64 TTBR0_EL1;
    ULONG64 TTBR1_EL1;
};

typedef struct _WHEA_ARM_AARCH64_EL2_CSR {
    ULONG64 ELR_EL2;
    ULONG64 ESR_EL2;
    ULONG64 FAR_EL2;
    ULONG64 HACR_EL2;
    ULONG64 HCR_EL2;
    ULONG64 HPFAR_EL2;
    ULONG64 MAIR_EL2;
    ULONG64 SCTLR_EL2;
    ULONG64 SP_EL2;
    ULONG64 SPSR_EL2;
    ULONG64 TCR_EL2;
    ULONG64 TPIDR_EL2;
    ULONG64 TTBR0_EL2;
    ULONG64 VTCR_EL2;
    ULONG64 VTTBR_EL2;
};

typedef struct _WHEA_ARM_BUS_ERROR {
    union _WHEA_ARM_BUS_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType : 2;
    UCHAR Operation : 4;
    UCHAR Level : 3;
    UCHAR ProcessorContextCorrupt : 1;
    UCHAR Corrected : 1;
    UCHAR PrecisePC : 1;
    UCHAR RestartablePC : 1;
    UCHAR ParticipationType : 2;
    UCHAR TimeOut : 1;
    UCHAR AddressSpace : 2;
    USHORT MemoryAccessAttributes : 9;
    UCHAR AccessMode : 1;
    ULONG Reserved : 20;
};

typedef struct _WHEA_ARM_CACHE_ERROR {
    union _WHEA_ARM_CACHE_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType : 2;
    UCHAR Operation : 4;
    UCHAR Level : 3;
    UCHAR ProcessorContextCorrupt : 1;
    UCHAR Corrected : 1;
    UCHAR PrecisePC : 1;
    UCHAR RestartablePC : 1;
    ULONG64 Reserved : 35;
};

typedef struct _WHEA_ARM_MISC_CSR {
    USHORT MRSEncoding;
    ULONG64 Value;
};

typedef struct _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER {
    USHORT Version;
    USHORT RegisterContextType;
    ULONG RegisterArraySize;
    UCHAR RegisterArray[1];
};

typedef struct _WHEA_ARM_PROCESSOR_ERROR_INFORMATION {
    UCHAR Version;
    UCHAR Length;
    union _WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS ValidationBit;
    UCHAR Type;
    USHORT MultipleError;
    UCHAR Flags;
    ULONG64 ErrorInformation;
    ULONG64 VirtualFaultAddress;
    ULONG64 PhysicalFaultAddress;
};

typedef struct _WHEA_ARM_PROCESSOR_ERROR_SECTION {
    union _WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS ValidBits;
    USHORT ErrorInformationStructures;
    USHORT ContextInformationStructures;
    ULONG SectionLength;
    UCHAR ErrorAffinityLevel;
    UCHAR Reserved[3];
    ULONG64 MPIDR_EL1;
    ULONG64 MIDR_EL1;
    ULONG RunningState;
    ULONG PSCIState;
    UCHAR Data[1];
};

typedef struct _WHEA_ARM_TLB_ERROR {
    union _WHEA_ARM_TLB_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType : 2;
    UCHAR Operation : 4;
    UCHAR Level : 3;
    UCHAR ProcessorContextCorrupt : 1;
    UCHAR Corrected : 1;
    UCHAR PrecisePC : 1;
    UCHAR RestartablePC : 1;
    ULONG64 Reserved : 36;
};

typedef struct _WHEA_DRS_OBJECT {
    struct _WHEA_DRS_OBJECT *Next;
    LONG Busy;
    PVOID Handler;
    UCHAR Level;
    PVOID Context;
};

typedef struct _WHEA_ERROR_PACKET_V1 {
    ULONG Signature;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    ULONG Size;
    ULONG RawDataLength;
    ULONG64 Reserved1;
    ULONG64 Context;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    ULONG Reserved2;
    ULONG Version;
    ULONG64 Cpu;
     <unnamed-type-u>;
    union {
        struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION ProcessorError;
        struct _WHEA_MEMORY_ERROR_SECTION MemoryError;
        struct _WHEA_NMI_ERROR_SECTION NmiError;
        struct _WHEA_PCIEXPRESS_ERROR_SECTION PciExpressError;
        struct _WHEA_PCIXBUS_ERROR_SECTION PciXBusError;
        struct _WHEA_PCIXDEVICE_ERROR_SECTION PciXDeviceError;
    } u;
    enum _WHEA_RAW_DATA_FORMAT RawDataFormat;
    ULONG RawDataOffset;
    UCHAR RawData[1];
};

typedef struct _WHEA_ERROR_PACKET_V2 {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    struct _GUID NotifyType;
    ULONG64 Context;
    enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
    ULONG Reserved1;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG PshedDataOffset;
    ULONG PshedDataLength;
};

typedef struct _WHEA_ERROR_RECORD {
    struct _WHEA_ERROR_RECORD_HEADER Header;
    struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
};

typedef struct _WHEA_ERROR_RECORD_HEADER {
    ULONG Signature;
    union _WHEA_REVISION Revision;
    ULONG SignatureEnd;
    USHORT SectionCount;
    enum _WHEA_ERROR_SEVERITY Severity;
    union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
    ULONG Length;
    union _WHEA_TIMESTAMP Timestamp;
    struct _GUID PlatformId;
    struct _GUID PartitionId;
    struct _GUID CreatorId;
    struct _GUID NotifyType;
    ULONG64 RecordId;
    union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
    union _WHEA_PERSISTENCE_INFO PersistenceInfo;
    UCHAR Reserved[12];
};

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
    ULONG SectionOffset;
    ULONG SectionLength;
    union _WHEA_REVISION Revision;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
    UCHAR Reserved;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
    struct _GUID SectionType;
    struct _GUID FRUId;
    enum _WHEA_ERROR_SEVERITY SectionSeverity;
    CHAR FRUText[20];
};

typedef struct _WHEA_ERROR_SOURCE_CONFIGURATION {
    ULONG Flags;
    PLONG Correct;
    PLONG Initialize;
    PLONG CreateRecord;
    PLONG Recover;
};

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR {
    ULONG Length;
    ULONG Version;
    enum _WHEA_ERROR_SOURCE_TYPE Type;
    enum _WHEA_ERROR_SOURCE_STATE State;
    ULONG MaxRawDataLength;
    ULONG NumRecordsToPreallocate;
    ULONG MaxSectionsPerRecord;
    ULONG ErrorSourceId;
    ULONG PlatformErrorSourceId;
    ULONG Flags;
     <unnamed-type-Info>;
    union {
        struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
        struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
        struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
        struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
        struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
        struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
        struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
        struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
        struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;
    } Info;
};

typedef struct _WHEA_EVENT_LOG_ENTRY {
    struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
};

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
    ULONG OwnerTag;
    enum _WHEA_EVENT_LOG_ENTRY_ID Id;
    union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
    ULONG PayloadLength;
};

typedef struct _WHEA_FIRMWARE_ERROR_RECORD_REFERENCE {
    UCHAR Type;
    UCHAR Reserved[7];
    ULONG64 FirmwareRecordId;
};

typedef struct _WHEA_GENERIC_ERROR {
    union _WHEA_GENERIC_ERROR_BLOCKSTATUS BlockStatus;
    ULONG RawDataOffset;
    ULONG RawDataLength;
    ULONG DataLength;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    UCHAR Data[1];
};

typedef struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V1 {
    struct _GUID SectionType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    union _WHEA_REVISION Revision;
    UCHAR ValidBits;
    UCHAR Flags;
    ULONG ErrorDataLength;
    struct _GUID FRUId;
    UCHAR FRUText[20];
    UCHAR Data[1];
};

typedef struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V2 {
    struct _GUID SectionType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    union _WHEA_REVISION Revision;
    UCHAR ValidBits;
    UCHAR Flags;
    ULONG ErrorDataLength;
    struct _GUID FRUId;
    UCHAR FRUText[20];
    union _WHEA_TIMESTAMP Timestamp;
    UCHAR Data[1];
};

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR {
    USHORT Type;
    UCHAR Reserved;
    UCHAR Enabled;
    ULONG ErrStatusBlockLength;
    ULONG RelatedErrorSourceId;
    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    union _LARGE_INTEGER ErrStatusAddress;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
};

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
    USHORT Type;
    UCHAR Reserved;
    UCHAR Enabled;
    ULONG ErrStatusBlockLength;
    ULONG RelatedErrorSourceId;
    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    union _LARGE_INTEGER ErrStatusAddress;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
    UCHAR ReadAckAddressSpaceID;
    UCHAR ReadAckAddressBitWidth;
    UCHAR ReadAckAddressBitOffset;
    UCHAR ReadAckAddressAccessSize;
    union _LARGE_INTEGER ReadAckAddress;
    ULONG64 ReadAckPreserveMask;
    ULONG64 ReadAckWriteMask;
};

typedef struct _WHEA_IPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_CPE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_MCA_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_MEMORY_ERROR_SECTION {
    union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    ULONG64 PhysicalAddress;
    ULONG64 PhysicalAddressMask;
    USHORT Node;
    USHORT Card;
    USHORT Module;
    USHORT Bank;
    USHORT Device;
    USHORT Row;
    USHORT Column;
    USHORT BitPosition;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 TargetId;
    UCHAR ErrorType;
    UCHAR Extended;
    USHORT RankNumber;
    USHORT CardHandle;
    USHORT ModuleHandle;
};

typedef struct _WHEA_NMI_ERROR_SECTION {
    UCHAR Data[8];
    union _WHEA_NMI_ERROR_SECTION_FLAGS Flags;
};

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR {
    UCHAR Type;
    UCHAR Length;
    union _WHEA_NOTIFICATION_FLAGS Flags;
     <unnamed-type-u>;
    union {
         <unnamed-type-Polled>;
        struct {
            ULONG PollInterval;
        } Polled;
         <unnamed-type-Interrupt>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Interrupt;
         <unnamed-type-LocalInterrupt>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } LocalInterrupt;
         <unnamed-type-Sci>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sci;
         <unnamed-type-Nmi>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Nmi;
         <unnamed-type-Sea>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sea;
         <unnamed-type-Sei>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sei;
         <unnamed-type-Gsiv>;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Gsiv;
    } u;
};

typedef struct _WHEA_PCIEXPRESS_DEVICE_ID {
    USHORT VendorID;
    USHORT DeviceID;
    ULONG ClassCode : 24;
    ULONG FunctionNumber : 8;
    ULONG DeviceNumber : 8;
    ULONG Segment : 16;
    ULONG PrimaryBusNumber : 8;
    ULONG SecondaryBusNumber : 8;
    ULONG Reserved1 : 3;
    ULONG SlotNumber : 13;
    ULONG Reserved2 : 8;
};

typedef struct _WHEA_PCIEXPRESS_ERROR_SECTION {
    union _WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS ValidBits;
    enum _WHEA_PCIEXPRESS_DEVICE_TYPE PortType;
    union _WHEA_PCIEXPRESS_VERSION Version;
    union _WHEA_PCIEXPRESS_COMMAND_STATUS CommandStatus;
    ULONG Reserved;
    struct _WHEA_PCIEXPRESS_DEVICE_ID DeviceId;
    ULONG64 DeviceSerialNumber;
    union _WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS BridgeControlStatus;
    UCHAR ExpressCapability[60];
    UCHAR AerInfo[96];
};

typedef struct _WHEA_PCIXBUS_ERROR_SECTION {
    union _WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    USHORT ErrorType;
    union _WHEA_PCIXBUS_ID BusId;
    ULONG Reserved;
    ULONG64 BusAddress;
    ULONG64 BusData;
    union _WHEA_PCIXBUS_COMMAND BusCommand;
    ULONG64 RequesterId;
    ULONG64 CompleterId;
    ULONG64 TargetId;
};

typedef struct _WHEA_PCIXDEVICE_ERROR_SECTION {
    union _WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    struct _WHEA_PCIXDEVICE_ID IdInfo;
    ULONG MemoryNumber;
    ULONG IoNumber;
    struct WHEA_PCIXDEVICE_REGISTER_PAIR RegisterDataPairs[1];
};

typedef struct _WHEA_PCIXDEVICE_ID {
    USHORT VendorId;
    USHORT DeviceId;
    ULONG ClassCode : 24;
    ULONG FunctionNumber : 8;
    ULONG DeviceNumber : 8;
    ULONG BusNumber : 8;
    ULONG SegmentNumber : 8;
    ULONG Reserved1 : 8;
    ULONG Reserved2;
};

typedef struct _WHEA_PCI_SLOT_NUMBER {
     <unnamed-type-u>;
    union {
         <unnamed-type-bits>;
        struct {
            ULONG DeviceNumber : 5;
            ULONG FunctionNumber : 3;
            ULONG Reserved : 24;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION {
    union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;
    UCHAR ProcessorType;
    UCHAR InstructionSet;
    UCHAR ErrorType;
    UCHAR Operation;
    UCHAR Flags;
    UCHAR Level;
    USHORT Reserved;
    ULONG64 CPUVersion;
    UCHAR CPUBrandString[128];
    ULONG64 ProcessorId;
    ULONG64 TargetAddress;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 InstructionPointer;
};

typedef struct _WHEA_PSHED_INIT_PACKET {
    ULONG Size;
    ULONG Version;
};

typedef struct _WHEA_PSHED_PLUGIN_CALLBACKS {
    PLONG GetAllErrorSources;
    PVOID Reserved;
    PLONG GetErrorSourceInfo;
    PLONG SetErrorSourceInfo;
    PLONG EnableErrorSource;
    PLONG DisableErrorSource;
    PLONG WriteErrorRecord;
    PLONG ReadErrorRecord;
    PLONG ClearErrorRecord;
    PLONG RetrieveErrorInfo;
    PLONG FinalizeErrorRecord;
    PLONG ClearErrorStatus;
    PLONG AttemptRecovery;
    PLONG GetInjectionCapabilities;
    PLONG InjectError;
};

typedef struct _WHEA_PSHED_PLUGIN_REGISTRATION_PACKET {
    ULONG Length;
    ULONG Version;
    PVOID Context;
    ULONG FunctionalAreaMask;
    ULONG Reserved;
    struct _WHEA_PSHED_PLUGIN_CALLBACKS Callbacks;
};

typedef struct _WHEA_RECOVERY_CONTEXT {
    struct {
        ULONG64 Address;
        UCHAR Consumed;
        USHORT ErrorCode;
        UCHAR ErrorIpValid;
        UCHAR RestartIpValid;
    } MemoryError;
    ULONG64 PartitionId;
    ULONG VpIndex;
};

typedef struct _WHEA_X64_REGISTER_STATE {
    ULONG64 Rax;
    ULONG64 Rbx;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 Rbp;
    ULONG64 Rsp;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;
    USHORT Cs;
    USHORT Ds;
    USHORT Ss;
    USHORT Es;
    USHORT Fs;
    USHORT Gs;
    ULONG Reserved;
    ULONG64 Rflags;
    ULONG64 Eip;
    ULONG64 Cr0;
    ULONG64 Cr1;
    ULONG64 Cr2;
    ULONG64 Cr3;
    ULONG64 Cr4;
    ULONG64 Cr8;
    struct _WHEA128A Gdtr;
    struct _WHEA128A Idtr;
    USHORT Ldtr;
    USHORT Tr;
};

typedef struct _WHEA_X86_REGISTER_STATE {
    ULONG Eax;
    ULONG Ebx;
    ULONG Ecx;
    ULONG Edx;
    ULONG Esi;
    ULONG Edi;
    ULONG Ebp;
    ULONG Esp;
    USHORT Cs;
    USHORT Ds;
    USHORT Ss;
    USHORT Es;
    USHORT Fs;
    USHORT Gs;
    ULONG Eflags;
    ULONG Eip;
    ULONG Cr0;
    ULONG Cr1;
    ULONG Cr2;
    ULONG Cr3;
    ULONG Cr4;
    ULONG64 Gdtr;
    ULONG64 Idtr;
    USHORT Ldtr;
    USHORT Tr;
};

typedef struct _WHEA_XPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    ULONG Reserved;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_CONTEXT_INFO {
    USHORT RegisterContextType;
    USHORT RegisterDataSize;
    ULONG MSRAddress;
    ULONG64 MmRegisterAddress;
};

typedef struct _WHEA_XPF_MCA_SECTION {
    ULONG VersionNumber;
    enum _WHEA_CPU_VENDOR CpuVendor;
    union _LARGE_INTEGER Timestamp;
    ULONG ProcessorNumber;
    union _MCG_STATUS GlobalStatus;
    ULONG64 InstructionPointer;
    ULONG BankNumber;
    union _MCI_STATUS Status;
    ULONG64 Address;
    ULONG64 Misc;
    ULONG ExtendedRegisterCount;
    ULONG ApicId;
    ULONG64 ExtendedRegisters[24];
};

typedef struct _WHEA_XPF_MCE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    union _XPF_MCE_FLAGS Flags;
    ULONG64 MCG_Capability;
    ULONG64 MCG_GlobalControl;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR {
    UCHAR BankNumber;
    UCHAR ClearOnInitialization;
    UCHAR StatusDataFormat;
    union _XPF_MC_BANK_FLAGS Flags;
    ULONG ControlMsr;
    ULONG StatusMsr;
    ULONG AddressMsr;
    ULONG MiscMsr;
    ULONG64 ControlData;
};

typedef struct _WHEA_XPF_NMI_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
};

typedef struct _WHEA_XPF_PROCESSOR_ERROR_SECTION {
    union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits;
    ULONG64 LocalAPICId;
    UCHAR CpuId[48];
    UCHAR VariableInfo[1];
};

typedef struct _WHEA_XPF_PROCINFO {
    struct _GUID CheckInfoId;
    union _WHEA_XPF_PROCINFO_VALIDBITS ValidBits;
     <unnamed-type-CheckInfo>;
    union {
        union _WHEA_XPF_CACHE_CHECK CacheCheck;
        union _WHEA_XPF_TLB_CHECK TlbCheck;
        union _WHEA_XPF_BUS_CHECK BusCheck;
        union _WHEA_XPF_MS_CHECK MsCheck;
        ULONG64 AsULONGLONG;
    } CheckInfo;
    ULONG64 TargetId;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 InstructionPointer;
};

typedef struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
    ULONG WimType;
    ULONG WimIndex;
    ULONG WimFileNameOffset;
    ULONG WimFileNameLength;
};

typedef struct _WIM_PROVIDER_CONTROL_INTEGRITY {
    ULONG ControlCode;
};

typedef struct _WIM_PROVIDER_EXTERNAL_INFO {
    ULONG Version;
    ULONG Flags;
    union _LARGE_INTEGER DataSourceId;
    UCHAR ResourceHash[20];
};

typedef struct _WIM_PROVIDER_INTEGRITY_STATUS {
    UCHAR IntegrityComplete;
    UCHAR IntegrityRunning;
    ULONG64 IntegrityAvailable;
    ULONG64 IntegrityRequired;
};

typedef struct _WIM_PROVIDER_OVERLAY_ENTRY {
    ULONG NextEntryOffset;
    union _LARGE_INTEGER DataSourceId;
    struct _GUID WimGuid;
    ULONG WimFileNameOffset;
    ULONG WimType;
    ULONG WimIndex;
    ULONG Flags;
};

typedef struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
    union _LARGE_INTEGER DataSourceId;
};

typedef struct _WIM_PROVIDER_START_INTEGRITY {
    union _LARGE_INTEGER DataSourceId;
};

typedef struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
    union _LARGE_INTEGER DataSourceId;
};

typedef struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
    union _LARGE_INTEGER DataSourceId;
    ULONG WimFileNameOffset;
    ULONG WimFileNameLength;
};

typedef struct _WIN32K_SYSCALL_FILTER {
    ULONG FilterState;
    ULONG FilterSet;
};

typedef struct _WIN32_CLOSEMETHOD_PARAMETERS {
    struct _EPROCESS *Process;
    PVOID Object;
    ULONG ProcessHandleCount;
    ULONG SystemHandleCount;
};

typedef struct _WIN32_DELETEMETHOD_PARAMETERS {
    PVOID Object;
};

typedef struct _WIN32_JOBCALLOUT_PARAMETERS {
    PVOID Job;
    enum _PSW32JOBCALLOUTTYPE CalloutType;
    PVOID Data;
};

typedef struct _WIN32_JOBINTERFERENCEINFO_CALLOUT_PARAMETERS {
    struct _EPROCESS *Process;
    PULONG InterferenceCount;
};

typedef struct _WIN32_OKAYTOCLOSEMETHOD_PARAMETERS {
    struct _EPROCESS *Process;
    PVOID Object;
    PVOID Handle;
    CHAR PreviousMode;
};

typedef struct _WIN32_OPENMETHOD_PARAMETERS {
    enum _OB_OPEN_REASON OpenReason;
    struct _EPROCESS *Process;
    PVOID Object;
    ULONG GrantedAccess;
    ULONG HandleCount;
};

typedef struct _WIN32_PARSEMETHOD_PARAMETERS {
    PVOID ParseObject;
    PVOID ObjectType;
    struct _ACCESS_STATE *AccessState;
    CHAR AccessMode;
    ULONG Attributes;
    struct _UNICODE_STRING *CompleteName;
    struct _UNICODE_STRING *RemainingName;
    PVOID Context;
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    PVOID *Object;
};

typedef struct _WIN32_POWEREVENT_PARAMETERS {
    enum _PSPOWEREVENTTYPE EventNumber;
    ULONG64 Code;
};

typedef struct _WIN32_POWERINFO_BRIGHTNESSCHANGE {
    ULONG EffectiveBrightnessPercentage;
    ULONG EffectiveBrightnessMillinits;
    ULONG NewBrightnessTransitionTime;
    ULONG DimmingTransitionTime;
    ULONG DimmedBrightnessPercentage;
    ULONG DimmedBrightnessMillinits;
    ULONG NewDimmedTransitionTime;
    ULONG UnDimmingTransitionTime;
};

typedef struct _WIN32_POWERINFO_BUILTIN_PANEL_STATE {
    enum _MONITOR_DISPLAY_STATE State;
};

typedef struct _WIN32_POWERINFO_CALLOUT_PARAMETERS {
    enum _WIN32_POWERINFO_TYPE Type;
    UCHAR Synchronous;
    ULONG InputSize;
    PVOID InputBuffer;
    ULONG OutputSize;
    PVOID OutputBuffer;
};

typedef struct _WIN32_POWERINFO_DISPLAYREQUIRED {
    LONG RequestCountChange;
};

typedef struct _WIN32_POWERINFO_MONITOR {
    enum _POWER_MONITOR_REQUEST_TYPE Type;
    enum POWER_MONITOR_REQUEST_REASON RequestReason;
};

typedef struct _WIN32_POWERINFO_POLICYCHANGE {
    struct _GUID Guid;
    ULONG Value;
};

typedef struct _WIN32_POWERINFO_SESSION {
    UCHAR On;
    enum POWER_MONITOR_REQUEST_REASON RequestReason;
};

typedef struct _WIN32_POWERINFO_SESSION_ENGAGEMENT {
    UCHAR Engaged;
};

typedef struct _WIN32_POWERINFO_USERPRESENT {
    UCHAR Virtual;
    UCHAR UpdateLastInputOnly;
    enum POWER_MONITOR_REQUEST_REASON RequestReason;
};

typedef struct _WIN32_POWERSTATE_PARAMETERS {
    UCHAR Promotion;
    enum POWER_ACTION SystemAction;
    enum _SYSTEM_POWER_STATE MinSystemState;
    ULONG Flags;
    enum _POWERSTATETASK PowerStateTask;
    enum POWER_MONITOR_REQUEST_REASON RequestReason;
};

typedef struct _WIN32_PROCESS_CALLOUT_PARAMETERS {
    struct _EPROCESS *Process;
    ULONG Flags;
    ULONG Initialize : 1;
    ULONG WindowsSigned : 1;
    ULONG Reserved : 30;
};

typedef struct _WIN32_PROCESS_TIMERDELAY_CALLOUT_PARAMETERS {
    struct _EPROCESS *Process;
    ULONG TimerDelayMs;
    ULONG CoalesceToleranceMs;
};

typedef struct _WIN32_PROCESS_TIMER_STATISTICS_CALLOUT_PARAMETERS {
    struct _EPROCESS *Process;
    ULONG ExpiredTimersCount;
};

typedef struct _WIN32_SUBSYSTEM_PROCESS_QUERY_CALLOUT_PARAMETERS {
    struct _EPROCESS *SubsystemProcess;
};

typedef struct _WIN32_THREAD_CALLOUT_PARAMETERS {
    struct _ETHREAD *Thread;
    enum _PSW32THREADCALLOUTTYPE CalloutType;
};

typedef struct _WINDOWS_OS_OPTIONS {
    UCHAR Signature[8];
    ULONG Version;
    ULONG Length;
    ULONG OsLoadPathOffset;
    WCHAR OsLoadOptions[1];
};

typedef struct _WNF_DELIVERY_DESCRIPTOR {
    ULONG64 SubscriptionId;
    struct _WNF_STATE_NAME StateName;
    ULONG ChangeStamp;
    ULONG StateDataSize;
    ULONG EventMask;
    struct _WNF_TYPE_ID TypeId;
    ULONG StateDataOffset;
};

typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
};

typedef struct _WNF_TYPE_ID {
    struct _GUID TypeId;
};

typedef struct _WNODE_HEADER {
    ULONG BufferSize;
    ULONG ProviderId;
    ULONG64 HistoricalContext;
    ULONG Version;
    ULONG Linkage;
    ULONG CountLost;
    PVOID KernelHandle;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID Guid;
    ULONG ClientContext;
    ULONG Flags;
};

typedef struct _WOF_EXTERNAL_FILE_ID {
    struct _FILE_ID_128 FileId;
};

typedef struct _WOF_EXTERNAL_INFO {
    ULONG Version;
    ULONG Provider;
};

typedef struct _WOF_VERSION_INFO {
    ULONG WofVersion;
};

typedef struct _WOL_BITMAP_PATTERN {
    ULONG Flags;
    ULONG MaskOffset;
    ULONG MaskSize;
    ULONG PatternOffset;
    ULONG PatternSize;
};

typedef struct _WORKER_FACTORY_BASIC_INFORMATION {
    union _LARGE_INTEGER Timeout;
    union _LARGE_INTEGER RetryTimeout;
    union _LARGE_INTEGER IdleTimeout;
    UCHAR Paused;
    UCHAR TimerSet;
    UCHAR QueuedToExWorker;
    UCHAR MayCreate;
    UCHAR CreateInProgress;
    UCHAR InsertedIntoQueue;
    UCHAR Shutdown;
    ULONG BindingCount;
    ULONG ThreadMinimum;
    ULONG ThreadMaximum;
    ULONG PendingWorkerCount;
    ULONG WaitingWorkerCount;
    ULONG TotalWorkerCount;
    ULONG ReleaseCount;
    LONG64 InfiniteWaitGoal;
    PLONG StartRoutine;
    PVOID StartParameter;
    PVOID ProcessId;
    ULONG64 StackReserve;
    ULONG64 StackCommit;
    LONG LastThreadCreationStatus;
};

typedef struct _WORKER_FACTORY_DEFERRED_WORK {
    struct _PORT_MESSAGE *AlpcSendMessage;
    PVOID AlpcSendMessagePort;
    ULONG AlpcSendMessageFlags;
    ULONG Flags;
};

typedef struct _WORK_QUEUE_ITEM {
    struct _LIST_ENTRY List;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _WOW64_ARCHITECTURE_INFORMATION {
    ULONG Machine : 16;
    ULONG KernelMode : 1;
    ULONG UserMode : 1;
    ULONG Native : 1;
    ULONG Process : 1;
    ULONG ReservedZero0 : 12;
};

typedef struct _WOW64_CONTEXT {
    ULONG ContextFlags;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    struct _WOW64_FLOATING_SAVE_AREA FloatSave;
    ULONG SegGs;
    ULONG SegFs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    ULONG Ebp;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG Esp;
    ULONG SegSs;
    UCHAR ExtendedRegisters[512];
};

typedef struct _WOW64_CPUAREA_INFO {
    PVOID Context;
    struct _X86_NT5_CONTEXT *ContextX86;
    struct _AMD64_CONTEXT *ContextAmd64;
    struct _ARM_CONTEXT *ContextArm;
    struct _ARM64_CONTEXT *ContextArm64;
    PVOID *PerThreadDataLocation;
    PULONG ContextFlagsLocation;
    PULONG CpuAreaFlagsLocation;
    ULONG ArchContextFlag;
    USHORT Machine;
};

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    ULONG Selector;
    struct _WOW64_LDT_ENTRY Descriptor;
};

typedef struct _WOW64_FLOATING_SAVE_AREA {
    ULONG ControlWord;
    ULONG StatusWord;
    ULONG TagWord;
    ULONG ErrorOffset;
    ULONG ErrorSelector;
    ULONG DataOffset;
    ULONG DataSelector;
    UCHAR RegisterArea[80];
    ULONG Cr0NpxState;
};

typedef struct _WOW64_LDT_ENTRY {
    USHORT LimitLow;
    USHORT BaseLow;
     <unnamed-type-HighWord>;
    union {
         <unnamed-type-Bytes>;
        struct {
            UCHAR BaseMid;
            UCHAR Flags1;
            UCHAR Flags2;
            UCHAR BaseHi;
        } Bytes;
         <unnamed-type-Bits>;
        struct {
            ULONG BaseMid : 8;
            ULONG Type : 5;
            ULONG Dpl : 2;
            ULONG Pres : 1;
            ULONG LimitHi : 4;
            ULONG Sys : 1;
            ULONG Reserved_0 : 1;
            ULONG Default_Big : 1;
            ULONG Granularity : 1;
            ULONG BaseHi : 8;
        } Bits;
    } HighWord;
};

typedef struct _WPP_TRACE_CONTROL_BLOCK {
    PLONG Callback;
    struct _GUID *ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK *Next;
    LONG64 Logger;
    struct _UNICODE_STRING *RegistryPath;
    UCHAR FlagsLen;
    UCHAR Level;
    USHORT Reserved;
    ULONG Flags[1];
    ULONG ReservedFlags;
    ULONG64 RegHandle;
    PVOID AutoLogContext;
    USHORT AutoLogVerboseEnabled;
    USHORT AutoLogAttachToMiniDump;
};

typedef struct _WPP_TRACE_ENABLE_CONTEXT {
    USHORT LoggerId;
    UCHAR Level;
    UCHAR InternalFlag;
    ULONG EnableFlags;
};

typedef struct _WPP_TRIAGE_INFO {
    ULONG WppAutoLogHeaderSize;
    ULONG WppDriverContextOffset;
    ULONG WppAutoLogHeaderSizeOffset;
    ULONG WppSizeOfAutoLogHeaderSizeField;
    ULONG WppDriverContextSize;
};

typedef struct _WRITE_USN_REASON_INPUT {
    ULONG Flags;
    ULONG UsnReasonToWrite;
};

typedef struct _WSABUF {
    ULONG len;
    PCHAR buf;
};

typedef struct _WSAMSG {
    struct sockaddr *name;
    LONG namelen;
    struct _WSABUF *lpBuffers;
    ULONG dwBufferCount;
    struct _WSABUF Control;
    ULONG dwFlags;
};

typedef struct _WSA_COMPATIBILITY_MODE {
    enum _WSA_COMPATIBILITY_BEHAVIOR_ID BehaviorId;
    ULONG TargetOsVersion;
};

typedef struct _Wx86TIB {
    ULONG Size;
    ULONG InitialPc;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID DeallocationStack;
    ULONG LogFlags;
    ULONG InitialSp;
    UCHAR SimulationCount;
    UCHAR InCpuSimulation;
    UCHAR EmulateInitialPc;
    UCHAR Initialized;
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID CpuContext;
    struct _CONTEXT *InitialExceptionContext;
    PVOID pCallersRIID;
    PVOID pCallersUnknown;
    ULONG Flags;
    PVOID SelfRegDllName;
    PVOID SelfRegDllHandle;
};

typedef struct _Wx86ThreadState {
    PULONG CallBx86Eip;
    PVOID DeallocationCpu;
    UCHAR UseKnownWx86Dll;
    CHAR OleStubInvoked;
};

typedef struct _X86_CALL_FRAME {
    ULONG ReturnAddress;
    ULONG Param1;
    ULONG Param2;
    ULONG CompatibilityArea;
};

typedef struct _X86_NT5_CONTEXT {
};

typedef struct _XSAVE_AREA {
    struct _XSAVE_FORMAT LegacyState;
    struct _XSAVE_AREA_HEADER Header;
};

typedef struct _XSAVE_AREA_HEADER {
    ULONG64 Mask;
    ULONG64 CompactionMask;
    ULONG64 Reserved2[6];
};

typedef struct _XSAVE_CET_U_FORMAT {
    ULONG64 Ia32CetUMsr;
    ULONG64 Ia32Pl3SspMsr;
};

typedef struct _XSAVE_FEATURE {
    ULONG FeatureId;
    struct _XSAVE_VENDORS *Vendors;
    ULONG64 Unused;
};

typedef struct _XSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    UCHAR TagWord;
    UCHAR Reserved1;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    USHORT ErrorSelector;
    USHORT Reserved2;
    ULONG DataOffset;
    USHORT DataSelector;
    USHORT Reserved3;
    ULONG MxCsr;
    ULONG MxCsr_Mask;
    struct _M128A FloatRegisters[8];
    struct _M128A XmmRegisters[16];
    UCHAR Reserved4[96];
};

typedef struct _XSAVE_POLICY {
    ULONG Version;
    ULONG Size;
    ULONG Flags;
    ULONG MaxSaveAreaLength;
    ULONG64 FeatureBitmask;
    ULONG NumberOfFeatures;
    struct _XSAVE_FEATURE Features[1];
};

typedef struct _XSAVE_SUPPORTED_CPU {
    struct XSAVE_CPU_INFO CpuInfo;
    struct XSAVE_CPU_ERRATA *CpuErrata;
    ULONG64 Unused;
};

typedef struct _XSAVE_VENDOR {
    ULONG VendorId[3];
    struct _XSAVE_SUPPORTED_CPU SupportedCpu;
};

typedef struct _XSAVE_VENDORS {
    ULONG NumberOfVendors;
    struct _XSAVE_VENDOR Vendor[1];
};

typedef struct _XSTATE_CONFIGURATION {
    ULONG64 EnabledFeatures;
    ULONG64 EnabledVolatileFeatures;
    ULONG Size;
    ULONG ControlFlags;
    ULONG OptimizedSave : 1;
    ULONG CompactionEnabled : 1;
    struct _XSTATE_FEATURE Features[64];
    ULONG64 EnabledSupervisorFeatures;
    ULONG64 AlignedFeatures;
    ULONG AllFeatureSize;
    ULONG AllFeatures[64];
    ULONG64 EnabledUserVisibleSupervisorFeatures;
};

typedef struct _XSTATE_CONTEXT {
    ULONG64 Mask;
    ULONG Length;
    ULONG Reserved1;
    struct _XSAVE_AREA *Area;
    PVOID Buffer;
};

typedef struct _XSTATE_FEATURE {
    ULONG Offset;
    ULONG Size;
};

typedef struct _XSTATE_SAVE {
    struct _XSTATE_SAVE *Prev;
    struct _KTHREAD *Thread;
    UCHAR Level;
    struct _XSTATE_CONTEXT XStateContext;
};

typedef struct _X_FILTER {
};

typedef struct _ZONE_HEADER {
    struct _SINGLE_LIST_ENTRY FreeList;
    struct _SINGLE_LIST_ENTRY SegmentList;
    ULONG BlockSize;
    ULONG TotalSegmentSize;
};

typedef struct _ZONE_SEGMENT_HEADER {
    struct _SINGLE_LIST_ENTRY SegmentList;
    PVOID Reserved;
};

typedef struct __PUBLIC_OBJECT_TYPE_INFORMATION {
    struct _UNICODE_STRING TypeName;
    ULONG Reserved[22];
};

typedef struct __lc_time_data {
};

typedef struct __s_GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct __vc_attributes::aggregatableAttribute {
    LONG type_e;
    VOID aggregatableAttribute;
    VOID aggregatableAttribute;
    enum __vc_attributes::aggregatableAttribute::type_e type;
};

typedef struct __vc_attributes::appobjectAttribute {
    VOID appobjectAttribute;
};

typedef struct __vc_attributes::async_uuidAttribute {
    VOID async_uuidAttribute;
    PCHAR uuid;
};

typedef struct __vc_attributes::atl::aggregatesAttribute {
    VOID aggregatesAttribute;
    VOID aggregatesAttribute;
    PCHAR clsid;
};

typedef struct __vc_attributes::atl::com_interface_entryAttribute {
    VOID com_interface_entryAttribute;
    VOID com_interface_entryAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::db_accessorAttribute {
    VOID db_accessorAttribute;
    VOID db_accessorAttribute;
    LONG id;
    BOOLEAN auto_;
};

typedef struct __vc_attributes::atl::db_columnAttribute {
    VOID db_columnAttribute;
    VOID db_columnAttribute;
    VOID db_columnAttribute;
    PCHAR ordinal;
    PCHAR dbtype;
    PCHAR precision;
    PCHAR scale;
    PCHAR status;
    PCHAR length;
};

typedef struct __vc_attributes::atl::db_commandAttribute {
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    VOID db_commandAttribute;
    PCHAR command;
    PCHAR name;
    PCHAR source_name;
    PCHAR hresult;
    PCHAR bindings;
    PCHAR bulk_fetch;
};

typedef struct __vc_attributes::atl::db_paramAttribute {
    VOID db_paramAttribute;
    VOID db_paramAttribute;
    VOID db_paramAttribute;
    PCHAR ordinal;
    PCHAR paramtype;
    PCHAR dbtype;
    PCHAR precision;
    PCHAR scale;
    PCHAR status;
    PCHAR length;
};

typedef struct __vc_attributes::atl::db_sourceAttribute {
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    VOID db_sourceAttribute;
    PCHAR source;
    PCHAR name;
    PCHAR hresult;
};

typedef struct __vc_attributes::atl::db_tableAttribute {
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    VOID db_tableAttribute;
    PCHAR table;
    PCHAR name;
    PCHAR source_name;
    PCHAR hresult;
    PCHAR bulk_fetch;
};

typedef struct __vc_attributes::atl::implements_categoryAttribute {
    VOID implements_categoryAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::perf_counterAttribute {
    VOID perf_counterAttribute;
    VOID perf_counterAttribute;
    PCHAR namestring;
    PCHAR helpstring;
    LONG name_res;
    LONG help_res;
    LONG countertype;
    LONG defscale;
    BOOLEAN default_counter;
    LONG detail;
    LONG max_counter_size;
    PCHAR countertype_string;
};

typedef struct __vc_attributes::atl::perf_objectAttribute {
    VOID perf_objectAttribute;
    VOID perf_objectAttribute;
    LONG name_res;
    LONG help_res;
    PCHAR namestring;
    PCHAR helpstring;
    LONG detail;
    BOOLEAN no_instances;
    PCHAR class_;
    LONG maxinstnamelen;
};

typedef struct __vc_attributes::atl::perfmonAttribute {
    VOID perfmonAttribute;
    VOID perfmonAttribute;
    VOID perfmonAttribute;
    PCHAR name;
    BOOLEAN register;
};

typedef struct __vc_attributes::atl::rdxAttribute {
    VOID rdxAttribute;
    VOID rdxAttribute;
    VOID rdxAttribute;
    PCHAR key;
    PCHAR valuename;
    PCHAR regtype;
};

typedef struct __vc_attributes::atl::registration_scriptAttribute {
    VOID registration_scriptAttribute;
    VOID registration_scriptAttribute;
    PCHAR script;
};

typedef struct __vc_attributes::atl::request_handlerAttribute {
    VOID request_handlerAttribute;
    VOID request_handlerAttribute;
    VOID request_handlerAttribute;
    PCHAR name;
    PCHAR sdl;
};

typedef struct __vc_attributes::atl::requires_categoryAttribute {
    VOID requires_categoryAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::soap_handlerAttribute {
    VOID soap_handlerAttribute;
    VOID soap_handlerAttribute;
    PCHAR name;
    PCHAR namespace;
    PCHAR protocol;
    PCHAR style;
    PCHAR use;
};

typedef struct __vc_attributes::atl::soap_headerAttribute {
    VOID soap_headerAttribute;
    VOID soap_headerAttribute;
    VOID soap_headerAttribute;
    PCHAR value;
    BOOLEAN required;
    BOOLEAN in;
    BOOLEAN out;
};

typedef struct __vc_attributes::atl::soap_methodAttribute {
    VOID soap_methodAttribute;
    VOID soap_methodAttribute;
    PCHAR name;
};

typedef struct __vc_attributes::atl::soap_namespaceAttribute {
    VOID soap_namespaceAttribute;
    VOID soap_namespaceAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::atl::support_error_infoAttribute {
    VOID support_error_infoAttribute;
    PCHAR error_interface;
};

typedef struct __vc_attributes::atl::synchronizeAttribute {
    VOID synchronizeAttribute;
};

typedef struct __vc_attributes::atl::tag_nameAttribute {
    VOID tag_nameAttribute;
    VOID tag_nameAttribute;
    VOID tag_nameAttribute;
    PCHAR name;
    PCHAR parse_func;
};

typedef struct __vc_attributes::bindableAttribute {
    VOID bindableAttribute;
};

typedef struct __vc_attributes::call_asAttribute {
    VOID call_asAttribute;
    PVOID local_proc;
};

typedef struct __vc_attributes::caseAttribute {
    VOID caseAttribute;
    LONG value;
};

typedef struct __vc_attributes::coclassAttribute {
    VOID coclassAttribute;
};

typedef struct __vc_attributes::controlAttribute {
    VOID controlAttribute;
};

typedef struct __vc_attributes::cpp_quoteAttribute {
    VOID cpp_quoteAttribute;
    PCHAR string;
};

typedef struct __vc_attributes::customAttribute {
    VOID customAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::defaultAttribute {
    VOID defaultAttribute;
    VOID defaultAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::defaultbindAttribute {
    VOID defaultbindAttribute;
};

typedef struct __vc_attributes::defaultcollelemAttribute {
    VOID defaultcollelemAttribute;
};

typedef struct __vc_attributes::defaultvalueAttribute {
    VOID defaultvalueAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::defaultvtableAttribute {
    VOID defaultvtableAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::dispinterfaceAttribute {
    VOID dispinterfaceAttribute;
};

typedef struct __vc_attributes::displaybindAttribute {
    VOID displaybindAttribute;
};

typedef struct __vc_attributes::dualAttribute {
    VOID dualAttribute;
};

typedef struct __vc_attributes::emitidlAttribute {
    LONG restricted;
    LONG forced;
    LONG push;
    LONG pop;
    VOID emitidlAttribute;
    VOID emitidlAttribute;
    VOID emitidlAttribute;
    LONG value;
    BOOLEAN defaultimports;
};

typedef struct __vc_attributes::entryAttribute {
    VOID entryAttribute;
    PCHAR entry_id;
};

typedef struct __vc_attributes::event_receiverAttribute {
    LONG type_e;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    VOID event_receiverAttribute;
    enum __vc_attributes::event_receiverAttribute::type_e type;
    BOOLEAN layout_dependent;
};

typedef struct __vc_attributes::event_sourceAttribute {
    LONG type_e;
    LONG optimize_e;
    VOID event_sourceAttribute;
    VOID event_sourceAttribute;
    enum __vc_attributes::event_sourceAttribute::type_e type;
    enum __vc_attributes::event_sourceAttribute::optimize_e optimize;
    BOOLEAN decorate;
};

typedef struct __vc_attributes::exportAttribute {
    VOID exportAttribute;
};

typedef struct __vc_attributes::first_isAttribute {
    VOID first_isAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::helpcontextAttribute {
    VOID helpcontextAttribute;
    PCHAR helpcontext_value;
};

typedef struct __vc_attributes::helper_attributes::as_stringAttribute {
    VOID as_stringAttribute;
};

typedef struct __vc_attributes::helper_attributes::attributeAttribute {
    LONG All;
    LONG Assembly;
    LONG Class;
    LONG Constructor;
    LONG Delegate;
    LONG Enum;
    LONG Event;
    LONG Field;
    LONG GenericParameter;
    LONG Interface;
    LONG Method;
    LONG Module;
    LONG Parameter;
    LONG Property;
    LONG ReturnValue;
    LONG Struct;
    VOID attributeAttribute;
    VOID attributeAttribute;
    LONG ValidOn;
    BOOLEAN AllowMultiple;
    BOOLEAN Inherited;
};

typedef struct __vc_attributes::helper_attributes::default_valueAttribute {
    VOID default_valueAttribute;
    PVOID value;
};

typedef struct __vc_attributes::helper_attributes::help_stringAttribute {
    VOID help_stringAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::helper_attributes::multi_valueAttribute {
    VOID multi_valueAttribute;
};

typedef struct __vc_attributes::helper_attributes::notify_atlprovAttribute {
    VOID notify_atlprovAttribute;
};

typedef struct __vc_attributes::helper_attributes::process_earlyAttribute {
    VOID process_earlyAttribute;
};

typedef struct __vc_attributes::helper_attributes::repeatableAttribute {
    VOID repeatableAttribute;
};

typedef struct __vc_attributes::helper_attributes::requires_valueAttribute {
    VOID requires_valueAttribute;
};

typedef struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute {
    LONG All;
    LONG Assembly;
    LONG Class;
    LONG Constructor;
    LONG Delegate;
    LONG Enum;
    LONG Event;
    LONG Field;
    LONG GenericParameter;
    LONG Interface;
    LONG Method;
    LONG Module;
    LONG Parameter;
    LONG Property;
    LONG ReturnValue;
    LONG Struct;
    LONG Typedef;
    VOID source_annotation_attributeAttribute;
    VOID source_annotation_attributeAttribute;
    LONG ValidOn;
    BOOLEAN AllowMultiple;
};

typedef struct __vc_attributes::helper_attributes::usageAttribute {
    LONG usage_e;
    VOID usageAttribute;
    ULONG value;
};

typedef struct __vc_attributes::helper_attributes::v1_alttypeAttribute {
    LONG type_e;
    VOID v1_alttypeAttribute;
    enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

typedef struct __vc_attributes::helper_attributes::v1_earlyAttribute {
    VOID v1_earlyAttribute;
};

typedef struct __vc_attributes::helper_attributes::v1_nameAttribute {
    VOID v1_nameAttribute;
    PCHAR name;
};

typedef struct __vc_attributes::helpfileAttribute {
    VOID helpfileAttribute;
    PCHAR filename;
};

typedef struct __vc_attributes::helpstringAttribute {
    VOID helpstringAttribute;
    PCHAR help_text_string;
};

typedef struct __vc_attributes::helpstringcontextAttribute {
    VOID helpstringcontextAttribute;
    LONG contextid;
};

typedef struct __vc_attributes::helpstringdllAttribute {
    VOID helpstringdllAttribute;
    PCHAR dllname;
};

typedef struct __vc_attributes::hiddenAttribute {
    VOID hiddenAttribute;
};

typedef struct __vc_attributes::hookAttribute {
    VOID hookAttribute;
    VOID hookAttribute;
    VOID hookAttribute;
    VOID hookAttribute;
    PCHAR event;
    PCHAR source;
    PCHAR handler;
    PCHAR receiver;
};

typedef struct __vc_attributes::idAttribute {
    VOID idAttribute;
    LONG id_num;
};

typedef struct __vc_attributes::idl_moduleAttribute {
    VOID idl_moduleAttribute;
    VOID idl_moduleAttribute;
    PCHAR name;
    PCHAR dllname;
    PCHAR version;
    PCHAR uuid;
    PCHAR helpstring;
    LONG helpstringcontext;
    LONG helpcontext;
    BOOLEAN hidden;
    BOOLEAN restricted;
};

typedef struct __vc_attributes::idl_quoteAttribute {
    VOID idl_quoteAttribute;
    VOID idl_quoteAttribute;
    PCHAR text;
};

typedef struct __vc_attributes::iid_isAttribute {
    VOID iid_isAttribute;
    PCHAR limited_expression;
};

typedef struct __vc_attributes::immediatebindAttribute {
    VOID immediatebindAttribute;
};

typedef struct __vc_attributes::implementsAttribute {
    VOID implementsAttribute;
    VOID implementsAttribute;
    PCHAR interfaces;
    PCHAR dispinterfaces;
};

typedef struct __vc_attributes::importAttribute {
    VOID importAttribute;
    PCHAR idl_file;
};

typedef struct __vc_attributes::importidlAttribute {
    VOID importidlAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::importlibAttribute {
    VOID importlibAttribute;
    PCHAR tlb_file;
};

typedef struct __vc_attributes::inAttribute {
    VOID inAttribute;
};

typedef struct __vc_attributes::includeAttribute {
    VOID includeAttribute;
    PCHAR include_file;
};

typedef struct __vc_attributes::includelibAttribute {
    VOID includelibAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::last_isAttribute {
    VOID last_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::lcidAttribute {
    VOID lcidAttribute;
};

typedef struct __vc_attributes::length_isAttribute {
    VOID length_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::library_blockAttribute {
    VOID library_blockAttribute;
};

typedef struct __vc_attributes::licensedAttribute {
    VOID licensedAttribute;
};

typedef struct __vc_attributes::localAttribute {
    VOID localAttribute;
};

typedef struct __vc_attributes::max_isAttribute {
    VOID max_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::moduleAttribute {
    LONG type_e;
    VOID moduleAttribute;
    VOID moduleAttribute;
    VOID moduleAttribute;
    enum __vc_attributes::moduleAttribute::type_e type;
    PCHAR name;
    PCHAR version;
    PCHAR uuid;
    LONG lcid;
    BOOLEAN control;
    PCHAR helpstring;
    LONG helpstringcontext;
    PCHAR helpstringdll;
    PCHAR helpfile;
    LONG helpcontext;
    BOOLEAN hidden;
    BOOLEAN restricted;
    PCHAR custom;
    PCHAR resource_name;
};

typedef struct __vc_attributes::ms_unionAttribute {
    VOID ms_unionAttribute;
};

typedef struct __vc_attributes::no_injected_textAttribute {
    VOID no_injected_textAttribute;
    VOID no_injected_textAttribute;
    BOOLEAN value;
};

typedef struct __vc_attributes::nonbrowsableAttribute {
    VOID nonbrowsableAttribute;
};

typedef struct __vc_attributes::noncreatableAttribute {
    VOID noncreatableAttribute;
};

typedef struct __vc_attributes::nonextensibleAttribute {
    VOID nonextensibleAttribute;
};

typedef struct __vc_attributes::objectAttribute {
    VOID objectAttribute;
};

typedef struct __vc_attributes::odlAttribute {
    VOID odlAttribute;
};

typedef struct __vc_attributes::oleautomationAttribute {
    VOID oleautomationAttribute;
};

typedef struct __vc_attributes::optionalAttribute {
    VOID optionalAttribute;
};

typedef struct __vc_attributes::outAttribute {
    VOID outAttribute;
};

typedef struct __vc_attributes::pointer_defaultAttribute {
    LONG type_e;
    VOID pointer_defaultAttribute;
    enum __vc_attributes::pointer_defaultAttribute::type_e type;
};

typedef struct __vc_attributes::pragmaAttribute {
    VOID pragmaAttribute;
    PCHAR token_sequence;
};

typedef struct __vc_attributes::progidAttribute {
    VOID progidAttribute;
    PCHAR name;
};

typedef struct __vc_attributes::propgetAttribute {
    VOID propgetAttribute;
};

typedef struct __vc_attributes::propputAttribute {
    VOID propputAttribute;
};

typedef struct __vc_attributes::propputrefAttribute {
    VOID propputrefAttribute;
};

typedef struct __vc_attributes::providerAttribute {
    VOID providerAttribute;
    VOID providerAttribute;
    PCHAR name;
    PCHAR uuid;
    LONG cookies;
};

typedef struct __vc_attributes::ptrAttribute {
    VOID ptrAttribute;
};

typedef struct __vc_attributes::publicAttribute {
    VOID publicAttribute;
};

typedef struct __vc_attributes::rangeAttribute {
    VOID rangeAttribute;
    LONG low_val;
    LONG high_val;
};

typedef struct __vc_attributes::readonlyAttribute {
    VOID readonlyAttribute;
};

typedef struct __vc_attributes::refAttribute {
    VOID refAttribute;
};

typedef struct __vc_attributes::requesteditAttribute {
    VOID requesteditAttribute;
};

typedef struct __vc_attributes::restrictedAttribute {
    VOID restrictedAttribute;
    VOID restrictedAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::retvalAttribute {
    VOID retvalAttribute;
};

typedef struct __vc_attributes::satypeAttribute {
    VOID satypeAttribute;
    VOID satypeAttribute;
    PCHAR type;
};

typedef struct __vc_attributes::size_isAttribute {
    VOID size_isAttribute;
    PCHAR expression;
};

typedef struct __vc_attributes::sourceAttribute {
    VOID sourceAttribute;
    VOID sourceAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::stringAttribute {
    VOID stringAttribute;
};

typedef struct __vc_attributes::switch_isAttribute {
    VOID switch_isAttribute;
    PCHAR limited_expression;
};

typedef struct __vc_attributes::switch_typeAttribute {
    VOID switch_typeAttribute;
    PCHAR switch_type_specifier;
};

typedef struct __vc_attributes::threadingAttribute {
    LONG threading_e;
    VOID threadingAttribute;
    VOID threadingAttribute;
    enum __vc_attributes::threadingAttribute::threading_e value;
};

typedef struct __vc_attributes::transmit_asAttribute {
    VOID transmit_asAttribute;
    PCHAR xmit_type;
};

typedef struct __vc_attributes::uidefaultAttribute {
    VOID uidefaultAttribute;
};

typedef struct __vc_attributes::unhookAttribute {
    VOID unhookAttribute;
    VOID unhookAttribute;
    VOID unhookAttribute;
    VOID unhookAttribute;
    PCHAR event;
    PCHAR source;
    PCHAR handler;
    PCHAR receiver;
};

typedef struct __vc_attributes::uniqueAttribute {
    VOID uniqueAttribute;
};

typedef struct __vc_attributes::usesgetlasterrorAttribute {
    VOID usesgetlasterrorAttribute;
};

typedef struct __vc_attributes::uuidAttribute {
    VOID uuidAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::v1_enumAttribute {
    VOID v1_enumAttribute;
};

typedef struct __vc_attributes::varargAttribute {
    VOID varargAttribute;
};

typedef struct __vc_attributes::versionAttribute {
    VOID versionAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::vi_progidAttribute {
    VOID vi_progidAttribute;
    PCHAR value;
};

typedef struct __vc_attributes::wire_marshalAttribute {
    VOID wire_marshalAttribute;
    PCHAR wire_type;
};

typedef struct _flowspec {
    ULONG TokenRate;
    ULONG TokenBucketSize;
    ULONG PeakBandwidth;
    ULONG Latency;
    ULONG DelayVariation;
    ULONG ServiceType;
    ULONG MaxSduSize;
    ULONG MinimumPolicedSize;
};

typedef struct _iobuf {
    PCHAR _ptr;
    LONG _cnt;
    PCHAR _base;
    LONG _flag;
    LONG _file;
    LONG _charbuf;
    LONG _bufsiz;
    PCHAR _tmpfname;
};

typedef struct _s__CatchableType {
    ULONG properties;
    struct _TypeDescriptor *pType;
    struct _PMD thisDisplacement;
    LONG sizeOrOffset;
    PVOID copyFunction;
};

typedef struct _s__CatchableTypeArray {
    LONG nCatchableTypes;
    struct _s__CatchableType *arrayOfCatchableTypes[0];
};

typedef struct _s__RTTIBaseClassArray {
    struct _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[0];
};

typedef struct _s__RTTIBaseClassDescriptor2 {
    struct _TypeDescriptor *pTypeDescriptor;
    ULONG numContainedBases;
    struct _PMD where;
    ULONG attributes;
    struct _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

typedef struct _s__RTTIClassHierarchyDescriptor {
    ULONG signature;
    ULONG attributes;
    ULONG numBaseClasses;
    struct _s__RTTIBaseClassArray *pBaseClassArray;
};

typedef struct _s__RTTICompleteObjectLocator2 {
    ULONG signature;
    ULONG offset;
    ULONG cdOffset;
    struct _TypeDescriptor *pTypeDescriptor;
    struct _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
    struct _s__RTTICompleteObjectLocator2 *pSelf;
};

typedef struct _s__ThrowInfo {
    ULONG attributes;
    PVOID pmfnUnwind;
    PLONG pForwardCompat;
    struct _s__CatchableTypeArray *pCatchableTypeArray;
};

typedef struct _sockaddr_in6_pair {
    struct sockaddr_in6 *SourceAddress;
    struct sockaddr_in6 *DestinationAddress;
};

typedef struct addrinfo {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PCHAR ai_canonname;
    struct sockaddr *ai_addr;
    struct addrinfo *ai_next;
};

typedef struct addrinfoW {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PWCHAR ai_canonname;
    struct sockaddr *ai_addr;
    struct addrinfoW *ai_next;
};

typedef struct addrinfoex2A {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PCHAR ai_canonname;
    struct sockaddr *ai_addr;
    PVOID ai_blob;
    ULONG64 ai_bloblen;
    struct _GUID *ai_provider;
    struct addrinfoex2A *ai_next;
    LONG ai_version;
    PCHAR ai_fqdn;
};

typedef struct addrinfoex2W {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PWCHAR ai_canonname;
    struct sockaddr *ai_addr;
    PVOID ai_blob;
    ULONG64 ai_bloblen;
    struct _GUID *ai_provider;
    struct addrinfoex2W *ai_next;
    LONG ai_version;
    PWCHAR ai_fqdn;
};

typedef struct addrinfoex3 {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PWCHAR ai_canonname;
    struct sockaddr *ai_addr;
    PVOID ai_blob;
    ULONG64 ai_bloblen;
    struct _GUID *ai_provider;
    struct addrinfoex3 *ai_next;
    LONG ai_version;
    PWCHAR ai_fqdn;
    LONG ai_interfaceindex;
};

typedef struct addrinfoex4 {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PWCHAR ai_canonname;
    struct sockaddr *ai_addr;
    PVOID ai_blob;
    ULONG64 ai_bloblen;
    struct _GUID *ai_provider;
    struct addrinfoex4 *ai_next;
    LONG ai_version;
    PWCHAR ai_fqdn;
    LONG ai_interfaceindex;
    PVOID ai_resolutionhandle;
};

typedef struct addrinfoexA {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PCHAR ai_canonname;
    struct sockaddr *ai_addr;
    PVOID ai_blob;
    ULONG64 ai_bloblen;
    struct _GUID *ai_provider;
    struct addrinfoexA *ai_next;
};

typedef struct addrinfoexW {
    LONG ai_flags;
    LONG ai_family;
    LONG ai_socktype;
    LONG ai_protocol;
    ULONG64 ai_addrlen;
    PWCHAR ai_canonname;
    struct sockaddr *ai_addr;
    PVOID ai_blob;
    ULONG64 ai_bloblen;
    struct _GUID *ai_provider;
    struct addrinfoexW *ai_next;
};

typedef struct cmsghdr {
    ULONG64 cmsg_len;
    LONG cmsg_level;
    LONG cmsg_type;
};

typedef struct group_filter {
    ULONG gf_interface;
    struct sockaddr_storage gf_group;
    enum MULTICAST_MODE_TYPE gf_fmode;
    ULONG gf_numsrc;
    struct sockaddr_storage gf_slist[1];
};

typedef struct group_req {
    ULONG gr_interface;
    struct sockaddr_storage gr_group;
};

typedef struct group_source_req {
    ULONG gsr_interface;
    struct sockaddr_storage gsr_group;
    struct sockaddr_storage gsr_source;
};

typedef struct in6_addr {
     <unnamed-type-u>;
    union {
        UCHAR Byte[16];
        USHORT Word[8];
    } u;
};

typedef struct in6_pktinfo {
    struct in6_addr ipi6_addr;
    ULONG ipi6_ifindex;
};

typedef struct in6_pktinfo_ex {
    struct in6_pktinfo pkt_info;
    struct SCOPE_ID scope_id;
};

typedef struct in_addr {
     <unnamed-type-S_un>;
    union {
         <unnamed-type-S_un_b>;
        struct {
            UCHAR s_b1;
            UCHAR s_b2;
            UCHAR s_b3;
            UCHAR s_b4;
        } S_un_b;
         <unnamed-type-S_un_w>;
        struct {
            USHORT s_w1;
            USHORT s_w2;
        } S_un_w;
        ULONG S_addr;
    } S_un;
};

typedef struct in_pktinfo {
    struct in_addr ipi_addr;
    ULONG ipi_ifindex;
};

typedef struct in_pktinfo_ex {
    struct in_pktinfo pkt_info;
    struct SCOPE_ID scope_id;
};

typedef struct in_recverr {
    enum IPPROTO protocol;
    ULONG info;
    UCHAR type;
    UCHAR code;
};

typedef struct ip_mreq {
    struct in_addr imr_multiaddr;
    struct in_addr imr_interface;
};

typedef struct ip_mreq_source {
    struct in_addr imr_multiaddr;
    struct in_addr imr_sourceaddr;
    struct in_addr imr_interface;
};

typedef struct ip_msfilter {
    struct in_addr imsf_multiaddr;
    struct in_addr imsf_interface;
    enum MULTICAST_MODE_TYPE imsf_fmode;
    ULONG imsf_numsrc;
    struct in_addr imsf_slist[1];
};

typedef struct ipv6_mreq {
    struct in6_addr ipv6mr_multiaddr;
    ULONG ipv6mr_interface;
};

typedef struct lconv {
};

typedef struct localeinfo_struct {
    struct threadlocaleinfostruct *locinfo;
    struct threadmbcinfostruct *mbcinfo;
};

typedef struct nd_neighbor_advert {
    struct _ICMP_MESSAGE nd_na_hdr;
    struct in6_addr nd_na_target;
};

typedef struct nd_neighbor_solicit {
    struct _ICMP_MESSAGE nd_ns_hdr;
    struct in6_addr nd_ns_target;
};

typedef struct nd_opt_dnssl {
    UCHAR nd_opt_dnssl_type;
    UCHAR nd_opt_dnssl_len;
    USHORT nd_opt_dnssl_reserved;
    ULONG nd_opt_dnssl_lifetime;
};

typedef struct nd_opt_hdr {
    UCHAR nd_opt_type;
    UCHAR nd_opt_len;
};

typedef struct nd_opt_mtu {
    UCHAR nd_opt_mtu_type;
    UCHAR nd_opt_mtu_len;
    USHORT nd_opt_mtu_reserved;
    ULONG nd_opt_mtu_mtu;
};

typedef struct nd_opt_prefix_info {
    UCHAR nd_opt_pi_type;
    UCHAR nd_opt_pi_len;
    UCHAR nd_opt_pi_prefix_len;
    UCHAR nd_opt_pi_flags_reserved;
    struct {
        UCHAR Route : 1;
        UCHAR Reserved1 : 3;
        UCHAR SitePrefix : 1;
        UCHAR RouterAddress : 1;
        UCHAR Autonomous : 1;
        UCHAR OnLink : 1;
    } Flags;
    ULONG nd_opt_pi_valid_time;
    ULONG nd_opt_pi_preferred_time;
    ULONG nd_opt_pi_reserved2;
    UCHAR nd_opt_pi_reserved3[3];
    UCHAR nd_opt_pi_site_prefix_len;
    struct in6_addr nd_opt_pi_prefix;
};

typedef struct nd_opt_rd_hdr {
    UCHAR nd_opt_rh_type;
    UCHAR nd_opt_rh_len;
    USHORT nd_opt_rh_reserved1;
    ULONG nd_opt_rh_reserved2;
};

typedef struct nd_opt_rdnss {
    UCHAR nd_opt_rdnss_type;
    UCHAR nd_opt_rdnss_len;
    USHORT nd_opt_rdnss_reserved;
    ULONG nd_opt_rdnss_lifetime;
};

typedef struct nd_opt_route_info {
    UCHAR nd_opt_ri_type;
    UCHAR nd_opt_ri_len;
    UCHAR nd_opt_ri_prefix_len;
    UCHAR nd_opt_ri_flags_reserved;
    struct {
        UCHAR Reserved : 3;
        UCHAR Preference : 2;
    } Flags;
    ULONG nd_opt_ri_route_lifetime;
    struct in6_addr nd_opt_ri_prefix;
};

typedef struct nd_redirect {
    struct _ICMP_MESSAGE nd_rd_hdr;
    struct in6_addr nd_rd_target;
    struct in6_addr nd_rd_dst;
};

typedef struct nd_router_advert {
    struct _ICMP_MESSAGE nd_ra_hdr;
    ULONG nd_ra_reachable;
    ULONG nd_ra_retransmit;
};

typedef struct nd_router_solicit {
    struct _ICMP_MESSAGE nd_rs_hdr;
};

typedef struct sockaddr {
    USHORT sa_family;
    CHAR sa_data[14];
};

typedef struct sockaddr_dl {
    USHORT sdl_family;
    UCHAR sdl_data[8];
    UCHAR sdl_zero[4];
};

typedef struct sockaddr_in {
    USHORT sin_family;
    USHORT sin_port;
    struct in_addr sin_addr;
    CHAR sin_zero[8];
};

typedef struct sockaddr_in6 {
    USHORT sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    struct in6_addr sin6_addr;
    ULONG sin6_scope_id;
    struct SCOPE_ID sin6_scope_struct;
};

typedef struct sockaddr_in6_old {
    SHORT sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    struct in6_addr sin6_addr;
};

typedef struct sockaddr_in6_w2ksp1 {
    SHORT sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    struct in6_addr sin6_addr;
    ULONG sin6_scope_id;
};

typedef struct sockaddr_storage {
    USHORT ss_family;
    CHAR __ss_pad1[6];
    LONG64 __ss_align;
    CHAR __ss_pad2[112];
};

typedef struct sockaddr_storage_xp {
    SHORT ss_family;
    CHAR __ss_pad1[6];
    LONG64 __ss_align;
    CHAR __ss_pad2[112];
};

typedef struct std::nothrow_t {
};

typedef struct tagLC_ID {
    USHORT wLanguage;
    USHORT wCountry;
    USHORT wCodePage;
};

typedef struct tagWNODE_SINGLE_INSTANCE {
    struct _WNODE_HEADER WnodeHeader;
    ULONG OffsetInstanceName;
    ULONG InstanceIndex;
    ULONG DataBlockOffset;
    ULONG SizeDataBlock;
    UCHAR VariableData[0];
};

typedef struct tcp_hdr {
    USHORT th_sport;
    USHORT th_dport;
    ULONG th_seq;
    ULONG th_ack;
    UCHAR th_x2 : 4;
    UCHAR th_len : 4;
    UCHAR th_flags;
    USHORT th_win;
    USHORT th_sum;
    USHORT th_urp;
};

typedef struct tcp_keepalive {
    ULONG onoff;
    ULONG keepalivetime;
    ULONG keepaliveinterval;
};

typedef struct tcp_opt_fastopen {
    UCHAR Kind;
    UCHAR Length;
    UCHAR Cookie[0];
};

typedef struct tcp_opt_mss {
    UCHAR Kind;
    UCHAR Length;
    USHORT Mss;
};

typedef struct tcp_opt_sack {
    UCHAR Kind;
    UCHAR Length;
     tcp_opt_sack_block;
    struct tcp_opt_sack::tcp_opt_sack_block Block[0];
};

typedef struct tcp_opt_sack::tcp_opt_sack_block {
    ULONG Left;
    ULONG Right;
};

typedef struct tcp_opt_sack_block {
    ULONG Left;
    ULONG Right;
};

typedef struct tcp_opt_sack_permitted {
    UCHAR Kind;
    UCHAR Length;
};

typedef struct tcp_opt_ts {
    UCHAR Kind;
    UCHAR Length;
    ULONG Val;
    ULONG EcR;
};

typedef struct tcp_opt_unknown {
    UCHAR Kind;
    UCHAR Length;
};

typedef struct tcp_opt_ws {
    UCHAR Kind;
    UCHAR Length;
    UCHAR ShiftCnt;
};

typedef struct threadlocaleinfostruct {
    LONG refcount;
    ULONG lc_codepage;
    ULONG lc_collate_cp;
    ULONG lc_handle[6];
    struct tagLC_ID lc_id[6];
     <unnamed-type-lc_category>;
    struct {
        PCHAR locale;
        PWCHAR wlocale;
        PLONG refcount;
        PLONG wrefcount;
    } lc_category[6];
    LONG lc_clike;
    LONG mb_cur_max;
    PLONG lconv_intl_refcount;
    PLONG lconv_num_refcount;
    PLONG lconv_mon_refcount;
    struct lconv *lconv;
    PLONG ctype1_refcount;
    PWCHAR ctype1;
    PUSHORT pctype;
    PUCHAR pclmap;
    PUCHAR pcumap;
    struct __lc_time_data *lc_time_curr;
};

typedef struct threadmbcinfostruct {
};

typedef struct wil::details::com_unknown_deleter {
};

typedef struct wil::details::kspin_lock_saved_irql {
    PULONG64 spinLock;
    UCHAR savedIrql;
    VOID kspin_lock_saved_irql;
    VOID kspin_lock_saved_irql;
    PULONG64 operator unsigned __int64 *;
    VOID Release;
};

typedef struct wil::details::resource_policy<WDFSPINLOCK__ *,void (__cdecl*)(WDFSPINLOCK__ *),&WdfSpinLockRelease,wistd::integral_constant<unsigned __int64,2>,WDFSPINLOCK__ *,0,std::nullptr_t> {
    struct WDFSPINLOCK__ *pointer_storage;
    struct WDFSPINLOCK__ *pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,2> pointer_access;
    struct WDFSPINLOCK__ *invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<WDFWAITLOCK__ *,void (__cdecl*)(WDFWAITLOCK__ *),&WdfWaitLockRelease,wistd::integral_constant<unsigned __int64,2>,WDFWAITLOCK__ *,0,std::nullptr_t> {
    struct WDFWAITLOCK__ *pointer_storage;
    struct WDFWAITLOCK__ *pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,2> pointer_access;
    struct WDFWAITLOCK__ *invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<_KTHREAD *,void (__cdecl*)(void *),&DereferenceObject,wistd::integral_constant<unsigned __int64,0>,_KTHREAD *,0,std::nullptr_t> {
    struct _KTHREAD *pointer_storage;
    struct _KTHREAD *pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,0> pointer_access;
    struct _KTHREAD *invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(unsigned __int64 *),&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned __int64,2>,unsigned __int64 *,0,std::nullptr_t> {
    PULONG64 pointer_storage;
    PULONG64 pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,2> pointer_access;
    PULONG64 invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<unsigned __int64 *,void __cdecl(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned __int64,2>,wil::details::kspin_lock_saved_irql,0,std::nullptr_t> {
    struct wil::details::kspin_lock_saved_irql pointer_storage;
    PULONG64 pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,2> pointer_access;
    struct wil::details::kspin_lock_saved_irql invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<void *,long (__cdecl*)(void *),&ZwClose,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t> {
    PVOID pointer_storage;
    PVOID pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,0> pointer_access;
    PVOID invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<void *,long __cdecl(void *),&ZwClose,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t> {
    PVOID pointer_storage;
    PVOID pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,0> pointer_access;
    PVOID invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<void *,void (__cdecl*)(void *),&NdisCloseConfiguration,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t> {
    PVOID pointer_storage;
    PVOID pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,0> pointer_access;
    PVOID invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<void *,void (__cdecl*)(void *),&NdisFreeNetBufferListPool,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t> {
    PVOID pointer_storage;
    PVOID pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,0> pointer_access;
    PVOID invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::resource_policy<void *,void (__cdecl*)(void *),&WdfObjectDelete,wistd::integral_constant<unsigned __int64,0>,void *,0,std::nullptr_t> {
    PVOID pointer_storage;
    PVOID pointer;
    PVOID pointer_invalid;
    struct wistd::integral_constant<unsigned __int64,0> pointer_access;
    PVOID invalid_value;
    BOOLEAN is_valid;
    VOID close;
    VOID close_reset;
};

typedef struct wil::details::variable_size<1> {
    UCHAR type;
};

typedef struct wil::details::variable_size<2> {
    USHORT type;
};

typedef struct wil::details::variable_size<4> {
    ULONG type;
};

typedef struct wil::details::variable_size<8> {
    ULONG64 type;
};

typedef struct wil::empty_deleter {
};

typedef struct wil::variadic_logical_or<> {
    struct wistd::integral_constant<bool,0> wistd::integral_constant<bool,0>;
};

typedef struct wistd::_Cat_base<0> {
    struct wistd::integral_constant<bool,0> wistd::integral_constant<bool,0>;
};

typedef struct wistd::_Cat_base<1> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Conjunction<> {
    struct wistd::integral_constant<bool,1> type;
};

typedef struct wistd::_Disjunction<> {
    struct wistd::integral_constant<bool,0> type;
};

typedef struct wistd::_Is_floating_point<double> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_floating_point<float> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_floating_point<long double> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<__int64> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<bool> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<char16_t> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<char32_t> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<char> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<int> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<long> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<short> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<signed char> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<unsigned __int64> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<unsigned char> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<unsigned int> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<unsigned long> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<unsigned short> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_integral<wchar_t> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Is_void<void> {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::_Nil {
};

typedef struct wistd::_Wrap_int {
    VOID _Wrap_int;
};

typedef struct wistd::add_reference<void const > {
    VOID type;
};

typedef struct wistd::add_reference<void const volatile > {
    VOID type;
};

typedef struct wistd::add_reference<void volatile > {
    VOID type;
};

typedef struct wistd::add_reference<void> {
    VOID type;
};

typedef struct wistd::add_rvalue_reference<void const > {
    VOID type;
};

typedef struct wistd::add_rvalue_reference<void const volatile > {
    VOID type;
};

typedef struct wistd::add_rvalue_reference<void volatile > {
    VOID type;
};

typedef struct wistd::add_rvalue_reference<void> {
    VOID type;
};

typedef struct wistd::default_delete<AdapterInit> {
    struct wistd::default_delete<AdapterInit> _Myt;
    VOID default_delete<AdapterInit>;
    VOID operator();
};

typedef struct wistd::default_delete<INxApp> {
    struct wistd::default_delete<INxApp> _Myt;
    VOID default_delete<INxApp>;
    VOID operator();
};

typedef struct wistd::default_delete<INxMemoryChunk> {
    struct wistd::default_delete<INxMemoryChunk> _Myt;
    VOID default_delete<INxMemoryChunk>;
    VOID operator();
};

typedef struct wistd::default_delete<INxMemoryChunkAllocator> {
    struct wistd::default_delete<INxMemoryChunkAllocator> _Myt;
    VOID default_delete<INxMemoryChunkAllocator>;
    VOID operator();
};

typedef struct wistd::default_delete<INxOffloadFacade> {
    struct wistd::default_delete<INxOffloadFacade> _Myt;
    VOID default_delete<INxOffloadFacade>;
    VOID operator();
};

typedef struct wistd::default_delete<NxBufferManager> {
    struct wistd::default_delete<NxBufferManager> _Myt;
    VOID default_delete<NxBufferManager>;
    VOID operator();
};

typedef struct wistd::default_delete<NxBufferPool> {
    struct wistd::default_delete<NxBufferPool> _Myt;
    VOID default_delete<NxBufferPool>;
    VOID operator();
};

typedef struct wistd::default_delete<NxCommonBufferMemoryChunk> {
    struct wistd::default_delete<NxCommonBufferMemoryChunk> _Myt;
    VOID default_delete<NxCommonBufferMemoryChunk>;
    VOID operator();
};

typedef struct wistd::default_delete<NxDmaAdapter> {
    struct wistd::default_delete<NxDmaAdapter> _Myt;
    VOID default_delete<NxDmaAdapter>;
    VOID operator();
};

typedef struct wistd::default_delete<NxDmaAllocator> {
    struct wistd::default_delete<NxDmaAllocator> _Myt;
    VOID default_delete<NxDmaAllocator>;
    VOID operator();
};

typedef struct wistd::default_delete<NxNonPagePoolAllocator> {
    struct wistd::default_delete<NxNonPagePoolAllocator> _Myt;
    VOID default_delete<NxNonPagePoolAllocator>;
    VOID operator();
};

typedef struct wistd::default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES> > {
    struct wistd::default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES> > _Myt;
    VOID default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES> >;
    VOID operator();
};

typedef struct wistd::default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES> > {
    struct wistd::default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES> > _Myt;
    VOID default_delete<NxOffload<_NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES> >;
    VOID operator();
};

typedef struct wistd::default_delete<NxOffloadBase> {
    struct wistd::default_delete<NxOffloadBase> _Myt;
    VOID default_delete<NxOffloadBase>;
    VOID operator();
};

typedef struct wistd::default_delete<NxOffloadFacade> {
    struct wistd::default_delete<NxOffloadFacade> _Myt;
    VOID default_delete<NxOffloadFacade>;
    VOID operator();
};

typedef struct wistd::default_delete<NxOffloadManager> {
    struct wistd::default_delete<NxOffloadManager> _Myt;
    VOID default_delete<NxOffloadManager>;
    VOID operator();
};

typedef struct wistd::default_delete<NxPoolMemoryChunk> {
    struct wistd::default_delete<NxPoolMemoryChunk> _Myt;
    VOID default_delete<NxPoolMemoryChunk>;
    VOID operator();
};

typedef struct wistd::default_delete<NxReceiveScaling> {
    struct wistd::default_delete<NxReceiveScaling> _Myt;
    VOID default_delete<NxReceiveScaling>;
    VOID operator();
};

typedef struct wistd::default_delete<NxRxXlat> {
    struct wistd::default_delete<NxRxXlat> _Myt;
    VOID default_delete<NxRxXlat>;
    VOID operator();
};

typedef struct wistd::default_delete<NxTranslationApp> {
    struct wistd::default_delete<NxTranslationApp> _Myt;
    VOID default_delete<NxTranslationApp>;
    VOID operator();
};

typedef struct wistd::default_delete<NxTxXlat> {
    struct wistd::default_delete<NxTxXlat> _Myt;
    VOID default_delete<NxTxXlat>;
    VOID operator();
};

typedef struct wistd::default_delete<Rtl::KString> {
    struct wistd::default_delete<Rtl::KString> _Myt;
    VOID default_delete<Rtl::KString>;
    VOID operator();
};

typedef struct wistd::default_delete<RtlMdl> {
    struct wistd::default_delete<RtlMdl> _Myt;
    VOID default_delete<RtlMdl>;
    VOID operator();
};

typedef struct wistd::default_delete<unsigned char [0]> {
    struct wistd::default_delete<unsigned char> _Myt;
    VOID default_delete<unsigned char [0]>;
    VOID operator();
};

typedef struct wistd::default_delete<unsigned char> {
};

typedef struct wistd::enable_if<1,void *> {
    PVOID type;
};

typedef struct wistd::integral_constant<bool,0> {
    BOOLEAN value;
    BOOLEAN value_type;
    struct wistd::integral_constant<bool,0> type;
    BOOLEAN operator bool;
};

typedef struct wistd::integral_constant<bool,1> {
    BOOLEAN value;
    BOOLEAN value_type;
    struct wistd::integral_constant<bool,1> type;
    BOOLEAN operator bool;
};

typedef struct wistd::integral_constant<enum _EVENT_TYPE,0> {
    enum _EVENT_TYPE value;
    enum _EVENT_TYPE value_type;
    struct wistd::integral_constant<enum _EVENT_TYPE,0> type;
    enum _EVENT_TYPE operator enum _EVENT_TYPE;
};

typedef struct wistd::integral_constant<enum _EVENT_TYPE,1> {
    enum _EVENT_TYPE value;
    enum _EVENT_TYPE value_type;
    struct wistd::integral_constant<enum _EVENT_TYPE,1> type;
    enum _EVENT_TYPE operator enum _EVENT_TYPE;
};

typedef struct wistd::integral_constant<unsigned __int64,0> {
    ULONG64 value;
    ULONG64 value_type;
    struct wistd::integral_constant<unsigned __int64,0> type;
    ULONG64 operator unsigned __int64;
};

typedef struct wistd::integral_constant<unsigned __int64,1> {
};

typedef struct wistd::integral_constant<unsigned __int64,2> {
};

typedef struct wistd::is_class<bool> {
    struct wistd::_Cat_base<0> wistd::_Cat_base<0>;
};

typedef struct wistd::is_class<int> {
    struct wistd::_Cat_base<0> wistd::_Cat_base<0>;
};

typedef struct wistd::is_class<unsigned char> {
    struct wistd::_Cat_base<0> wistd::_Cat_base<0>;
};

typedef struct wistd::is_same<wistd::integral_constant<unsigned __int64,2>,wistd::integral_constant<unsigned __int64,0> > {
    struct wistd::integral_constant<bool,0> wistd::integral_constant<bool,0>;
};

typedef struct wistd::is_same<wistd::integral_constant<unsigned __int64,2>,wistd::integral_constant<unsigned __int64,1> > {
    struct wistd::integral_constant<bool,0> wistd::integral_constant<bool,0>;
};

typedef struct wistd::is_same<wistd::integral_constant<unsigned __int64,2>,wistd::integral_constant<unsigned __int64,2> > {
    struct wistd::integral_constant<bool,1> wistd::integral_constant<bool,1>;
};

typedef struct wistd::less<void> {
    LONG is_transparent;
};

typedef struct wistd::pointer_traits<AdapterInit *> {
    struct wistd::pointer_traits<AdapterInit *> other;
    struct AdapterInit element_type;
    struct AdapterInit *pointer;
    LONG64 difference_type;
    struct AdapterInit *_Reftype;
    struct AdapterInit *pointer_to;
};

typedef struct wistd::pointer_traits<INxMemoryChunk *> {
    struct wistd::pointer_traits<INxMemoryChunk *> other;
    INxMemoryChunk element_type;
    INxMemoryChunk *pointer;
    LONG64 difference_type;
    INxMemoryChunk *_Reftype;
    INxMemoryChunk *pointer_to;
};

typedef struct wistd::pointer_traits<INxMemoryChunkAllocator *> {
    struct wistd::pointer_traits<INxMemoryChunkAllocator *> other;
    INxMemoryChunkAllocator element_type;
    INxMemoryChunkAllocator *pointer;
    LONG64 difference_type;
    INxMemoryChunkAllocator *_Reftype;
    INxMemoryChunkAllocator *pointer_to;
};

typedef struct wistd::pointer_traits<INxOffloadFacade *> {
    struct wistd::pointer_traits<INxOffloadFacade *> other;
    INxOffloadFacade element_type;
    INxOffloadFacade *pointer;
    LONG64 difference_type;
    INxOffloadFacade *_Reftype;
    INxOffloadFacade *pointer_to;
};

typedef struct wistd::pointer_traits<NxBufferManager *> {
    struct wistd::pointer_traits<NxBufferManager *> other;
    NxBufferManager element_type;
    NxBufferManager *pointer;
    LONG64 difference_type;
    NxBufferManager *_Reftype;
    NxBufferManager *pointer_to;
};

typedef struct wistd::pointer_traits<NxBufferPool *> {
    struct wistd::pointer_traits<NxBufferPool *> other;
    NxBufferPool element_type;
    NxBufferPool *pointer;
    LONG64 difference_type;
    NxBufferPool *_Reftype;
    NxBufferPool *pointer_to;
};

typedef struct wistd::pointer_traits<NxCommonBufferMemoryChunk *> {
    struct wistd::pointer_traits<NxCommonBufferMemoryChunk *> other;
    NxCommonBufferMemoryChunk element_type;
    NxCommonBufferMemoryChunk *pointer;
    LONG64 difference_type;
    NxCommonBufferMemoryChunk *_Reftype;
    NxCommonBufferMemoryChunk *pointer_to;
};

typedef struct wistd::pointer_traits<NxDmaAdapter *> {
    struct wistd::pointer_traits<NxDmaAdapter *> other;
    NxDmaAdapter element_type;
    NxDmaAdapter *pointer;
    LONG64 difference_type;
    NxDmaAdapter *_Reftype;
    NxDmaAdapter *pointer_to;
};

typedef struct wistd::pointer_traits<NxOffloadBase *> {
    struct wistd::pointer_traits<NxOffloadBase *> other;
    NxOffloadBase element_type;
    NxOffloadBase *pointer;
    LONG64 difference_type;
    NxOffloadBase *_Reftype;
    NxOffloadBase *pointer_to;
};

typedef struct wistd::pointer_traits<NxOffloadManager *> {
    struct wistd::pointer_traits<NxOffloadManager *> other;
    NxOffloadManager element_type;
    NxOffloadManager *pointer;
    LONG64 difference_type;
    NxOffloadManager *_Reftype;
    NxOffloadManager *pointer_to;
};

typedef struct wistd::pointer_traits<NxPoolMemoryChunk *> {
    struct wistd::pointer_traits<NxPoolMemoryChunk *> other;
    NxPoolMemoryChunk element_type;
    NxPoolMemoryChunk *pointer;
    LONG64 difference_type;
    NxPoolMemoryChunk *_Reftype;
    NxPoolMemoryChunk *pointer_to;
};

typedef struct wistd::pointer_traits<NxReceiveScaling *> {
    struct wistd::pointer_traits<NxReceiveScaling *> other;
    NxReceiveScaling element_type;
    NxReceiveScaling *pointer;
    LONG64 difference_type;
    NxReceiveScaling *_Reftype;
    NxReceiveScaling *pointer_to;
};

typedef struct wistd::pointer_traits<NxRxXlat *> {
    struct wistd::pointer_traits<NxRxXlat *> other;
    NxRxXlat element_type;
    NxRxXlat *pointer;
    LONG64 difference_type;
    NxRxXlat *_Reftype;
    NxRxXlat *pointer_to;
};

typedef struct wistd::pointer_traits<NxTxXlat *> {
    struct wistd::pointer_traits<NxTxXlat *> other;
    NxTxXlat element_type;
    NxTxXlat *pointer;
    LONG64 difference_type;
    NxTxXlat *_Reftype;
    NxTxXlat *pointer_to;
};

typedef struct wistd::pointer_traits<RtlMdl *> {
    struct wistd::pointer_traits<RtlMdl *> other;
    RtlMdl element_type;
    RtlMdl *pointer;
    LONG64 difference_type;
    RtlMdl *_Reftype;
    RtlMdl *pointer_to;
};

typedef struct wistd::pointer_traits<_NET_RING_BUFFER *> {
    struct wistd::pointer_traits<_NET_RING_BUFFER *> other;
    struct _NET_RING_BUFFER element_type;
    struct _NET_RING_BUFFER *pointer;
    LONG64 difference_type;
    struct _NET_RING_BUFFER *_Reftype;
    struct _NET_RING_BUFFER *pointer_to;
};

typedef struct wistd::remove_reference<unsigned __int64 * &> {
    PULONG64 type;
};

typedef struct wistd::remove_reference<wil::details::kspin_lock_saved_irql &> {
    struct wil::details::kspin_lock_saved_irql type;
};

typedef union AdapterFlags {
    ULONG StartCalled : 1;
    ULONG GeneralAttributesSet : 1;
    ULONG StartPending : 1;
    ULONG StopPending : 1;
    ULONG Unused : 28;
    ULONG AsInteger;
};

typedef union DBGK_LIVEDUMP_FLAGS {
    ULONG UserPages : 1;
    ULONG Reserved : 31;
    ULONG AsUlong;
};

typedef union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO {
    ULONG uChCenterFrequency;
     <unnamed-type-FHSS>;
    struct {
        ULONG uHopPattern;
        ULONG uHopSet;
        ULONG uDwellTime;
    } FHSS;
};

typedef union INTEL_CACHE_INFO_EAX {
    ULONG Ulong;
    enum _INTEL_CACHE_TYPE Type;
    ULONG Level : 3;
    ULONG SelfInitializing : 1;
    ULONG FullyAssociative : 1;
    ULONG Reserved : 4;
    ULONG ThreadsSharing : 12;
    ULONG ProcessorCores : 6;
};

typedef union INTEL_CACHE_INFO_EBX {
    ULONG Ulong;
    ULONG LineSize : 12;
    ULONG Partitions : 10;
    ULONG Associativity : 10;
};

typedef union USN_RECORD_UNION {
    struct USN_RECORD_COMMON_HEADER Header;
    struct USN_RECORD_V2 V2;
    struct USN_RECORD_V3 V3;
    struct USN_RECORD_V4 V4;
};

typedef union WPP_PROJECT_CONTROL_BLOCK {
    struct _WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[80];
};

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT SecondaryUncorrectableErrorMaskRW : 1;
    USHORT SecondaryUncorrectableErrorSevRW : 1;
    USHORT SecondaryCapsAndControlRW : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT Reserved : 12;
    USHORT AsUSHORT;
};

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT RootErrorCommandRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _AMD_L1_CACHE_INFO {
    ULONG Ulong;
    UCHAR LineSize;
    UCHAR LinesPerTag;
    UCHAR Associativity;
    UCHAR Size;
};

typedef union _AMD_L2_CACHE_INFO {
    ULONG Ulong;
    UCHAR LineSize;
    UCHAR LinesPerTag : 4;
    UCHAR Associativity : 4;
    USHORT Size;
};

typedef union _AMD_L3_CACHE_INFO {
    ULONG Ulong;
    UCHAR LineSize;
    UCHAR LinesPerTag : 4;
    UCHAR Associativity : 4;
    USHORT Reserved : 2;
    USHORT Size : 14;
};

typedef union _ARM64_NT_NEON128 {
    ULONG64 Low;
    LONG64 High;
    DOUBLE D[2];
    FLOAT S[4];
    USHORT H[8];
    UCHAR B[16];
};

typedef union _BUGCHECK_PROGRESS_SUMMARY {
    ULONG BPS_Checkpoint : 9;
    ULONG BPS_Information : 7;
    ULONG BPS_Error : 16;
    ULONG AsUlong;
};

typedef union _DL_EI48 {
    UCHAR Byte[3];
};

typedef union _DL_EI64 {
    UCHAR Byte[5];
};

typedef union _DL_EUI48 {
    UCHAR Byte[6];
    union _DL_OUI Oui;
    union _DL_EI48 Ei48;
};

typedef union _DL_EUI64 {
    UCHAR Byte[8];
    ULONG64 Value;
    union _DL_OUI Oui;
    union _DL_EI64 Ei64;
    UCHAR Type;
    UCHAR Tse;
    union _DL_EI48 Ei48;
};

typedef union _DL_OUI {
    UCHAR Byte[3];
    UCHAR Group : 1;
    UCHAR Local : 1;
};

typedef union _DeviceFlags {
    ULONG InDxPowerTransition : 1;
    ULONG IsPowerPolicyOwner : 1;
    ULONG SurpriseRemoved : 1;
    ULONG Flags;
};

typedef union _ENCAPSULATION_PROTOCOL_INFO {
     _VXLAN_INFO;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO VxlanInfo;
    ULONG Value;
};

typedef union _ENCAPSULATION_PROTOCOL_PARAMETERS {
     _VXLAN_PARAMETERS;
    struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS VxlanParameters;
    ULONG Value;
};

typedef union _ENERGY_STATE_DURATION {
    ULONG64 Value;
    ULONG LastChangeTime;
    ULONG Duration : 31;
    ULONG IsInState : 1;
};

typedef union _FIELD_VALUE {
    UCHAR FieldByteValue;
    USHORT FieldShortValue;
    ULONG FieldLongValue;
    ULONG64 FieldLong64Value;
    UCHAR FieldByteArrayValue[16];
};

typedef union _FILE_SEGMENT_ELEMENT {
    PVOID Buffer;
    ULONG64 Alignment;
};

typedef union _FOUR_PART_VERSION {
    ULONG64 Version64;
     <unnamed-type-Version32>;
    struct {
        ULONG BuildAndRevision;
        ULONG MajorAndMinor;
    } Version32;
     <unnamed-type-Version16>;
    struct {
        USHORT Revision;
        USHORT Build;
        USHORT Minor;
        USHORT Major;
    } Version16;
};

typedef union _HAL_UNMASKED_INTERRUPT_FLAGS {
    USHORT SecondaryInterrupt : 1;
    USHORT Reserved : 15;
    USHORT AsUSHORT;
};

typedef union _HAL_X64_SEGMENT_SELECTOR {
    USHORT AsUINT16;
    USHORT Rpl : 2;
    USHORT LdtSelector : 1;
    USHORT TableIndex : 13;
};

typedef union _HEADER_FIELD {
    enum _NDIS_MAC_HEADER_FIELD MacHeaderField;
    enum _NDIS_ARP_HEADER_FIELD ArpHeaderField;
    enum _NDIS_IPV4_HEADER_FIELD IPv4HeaderField;
    enum _NDIS_IPV6_HEADER_FIELD IPv6HeaderField;
    enum _NDIS_UDP_HEADER_FIELD UdpHeaderField;
};

typedef union _IMAGE_AUX_SYMBOL {
     <unnamed-type-Sym>;
    struct {
        ULONG TagIndex;
         <unnamed-type-Misc>;
        union {
             <unnamed-type-LnSz>;
            struct {
                USHORT Linenumber;
                USHORT Size;
            } LnSz;
            ULONG TotalSize;
        } Misc;
         <unnamed-type-FcnAry>;
        union {
             <unnamed-type-Function>;
            struct {
                ULONG PointerToLinenumber;
                ULONG PointerToNextFunction;
            } Function;
             <unnamed-type-Array>;
            struct {
                USHORT Dimension[4];
            } Array;
        } FcnAry;
        USHORT TvIndex;
    } Sym;
     <unnamed-type-File>;
    struct {
        UCHAR Name[18];
    } File;
     <unnamed-type-Section>;
    struct {
        ULONG Length;
        USHORT NumberOfRelocations;
        USHORT NumberOfLinenumbers;
        ULONG CheckSum;
        SHORT Number;
        UCHAR Selection;
        UCHAR bReserved;
        SHORT HighNumber;
    } Section;
    struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
     <unnamed-type-CRC>;
    struct {
        ULONG crc;
        UCHAR rgbReserved[14];
    } CRC;
};

typedef union _IMAGE_AUX_SYMBOL_EX {
     <unnamed-type-Sym>;
    struct {
        ULONG WeakDefaultSymIndex;
        ULONG WeakSearchType;
        UCHAR rgbReserved[12];
    } Sym;
     <unnamed-type-File>;
    struct {
        UCHAR Name[20];
    } File;
     <unnamed-type-Section>;
    struct {
        ULONG Length;
        USHORT NumberOfRelocations;
        USHORT NumberOfLinenumbers;
        ULONG CheckSum;
        SHORT Number;
        UCHAR Selection;
        UCHAR bReserved;
        SHORT HighNumber;
        UCHAR rgbReserved[2];
    } Section;
    struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    UCHAR rgbReserved[2];
     <unnamed-type-CRC>;
    struct {
        ULONG crc;
        UCHAR rgbReserved[16];
    } CRC;
};

typedef union _INTERRUPT_CONTROLLER_INFO {
    ULONG Flags;
    ULONG LevelSensitiveInterruptSteering : 1;
    ULONG LatchedInterruptSteering : 1;
    ULONG Reserved : 30;
};

typedef union _IOMMU_DEVICE_PROPERTIES {
    ULONG IsThunderbolt : 1;
    ULONG DmaCapableAtBoot : 1;
    ULONG Rsvd : 30;
    ULONG AsULONG;
};

typedef union _IOMMU_SVM_CAPABILITIES {
    ULONG AtsCapability : 1;
    ULONG PriCapability : 1;
    ULONG PasidCapability : 1;
    struct {
        ULONG PasidMaxWidth : 5;
        ULONG PasidExePerm : 1;
        ULONG PasidPrivMode : 1;
        ULONG AtsPageAlignedRequest : 1;
        ULONG AtsGlobalInvalidate : 1;
        ULONG AtsInvalidateQueueDepth : 5;
    } CapReg;
    ULONG Rsvd : 15;
    ULONG AsULONG;
};

typedef union _IO_LIVEDUMP_CONTROL_ADDPAGES {
    ULONG HypervisorPages : 1;
    ULONG Reserved : 31;
    ULONG AsUlong;
};

typedef union _IO_LIVEDUMP_CONTROL_FLAGS {
    ULONG UseDumpStorageStack : 1;
    ULONG CompressMemoryPagesData : 1;
    ULONG IncludeUserSpaceMemoryPages : 1;
    ULONG DeferDumpFileWrite : 1;
    ULONG AbortIfMemoryPressure : 1;
    ULONG Reserved : 27;
    ULONG AsUlong;
};

typedef union _IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS {
    UCHAR Reserved1 : 5;
    UCHAR Override : 1;
    UCHAR Solicited : 1;
    UCHAR Router : 1;
    UCHAR Reserved2[3];
    ULONG Value;
};

typedef union _IPV6_ROUTER_ADVERTISEMENT_FLAGS {
    UCHAR Reserved : 3;
    UCHAR Preference : 2;
    UCHAR HomeAgent : 1;
    UCHAR OtherStatefulConfiguration : 1;
    UCHAR ManagedAddressConfiguration : 1;
    UCHAR Value;
};

typedef union _JOBOBJECT_ENERGY_TRACKING_STATE {
    ULONG64 Value;
    ULONG UpdateMask;
    ULONG DesiredState;
};

typedef union _KGDTENTRY64 {
    USHORT LimitLow;
    USHORT BaseLow;
    struct {
        UCHAR BaseMiddle;
        UCHAR Flags1;
        UCHAR Flags2;
        UCHAR BaseHigh;
    } Bytes;
    struct {
        ULONG BaseMiddle : 8;
        ULONG Type : 5;
        ULONG Dpl : 2;
        ULONG Present : 1;
        ULONG LimitHigh : 4;
        ULONG System : 1;
        ULONG LongMode : 1;
        ULONG DefaultBig : 1;
        ULONG Granularity : 1;
        ULONG BaseHigh : 8;
    } Bits;
    ULONG BaseUpper;
    ULONG MustBeZero;
    LONG64 DataLow;
    LONG64 DataHigh;
};

typedef union _KGDT_BASE {
    USHORT BaseLow;
    UCHAR BaseMiddle;
    UCHAR BaseHigh;
    ULONG BaseUpper;
    ULONG64 Base;
};

typedef union _KGDT_LIMIT {
    USHORT LimitLow;
    USHORT LimitHigh : 4;
    USHORT MustBeZero : 12;
    ULONG Limit;
};

typedef union _KIDTENTRY64 {
    USHORT OffsetLow;
    USHORT Selector;
    USHORT IstIndex : 3;
    USHORT Reserved0 : 5;
    USHORT Type : 5;
    USHORT Dpl : 2;
    USHORT Present : 1;
    USHORT OffsetMiddle;
    ULONG OffsetHigh;
    ULONG Reserved1;
    ULONG64 Alignment;
};

typedef union _LARGE_INTEGER {
    ULONG LowPart;
    LONG HighPart;
     <unnamed-type-u>;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONG64 QuadPart;
};

typedef union _LDR_DLL_NOTIFICATION_DATA {
    struct _LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
    struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
};

typedef union _MCG_STATUS {
    ULONG RestartIpValid : 1;
    ULONG ErrorIpValid : 1;
    ULONG MachineCheckInProgress : 1;
    ULONG LocalMceValid : 1;
    ULONG Reserved1 : 28;
    ULONG Reserved2;
    ULONG64 QuadPart;
};

typedef union _MCI_ADDR {
    ULONG Address;
    ULONG Reserved;
    ULONG64 QuadPart;
};

typedef union _MCI_STATS {
     <unnamed-type-MciStatus>;
    struct {
        USHORT McaErrorCode;
        USHORT ModelErrorCode;
        ULONG OtherInformation : 25;
        ULONG ContextCorrupt : 1;
        ULONG AddressValid : 1;
        ULONG MiscValid : 1;
        ULONG ErrorEnabled : 1;
        ULONG UncorrectedError : 1;
        ULONG StatusOverFlow : 1;
        ULONG Valid : 1;
    } MciStatus;
    ULONG64 QuadPart;
};

typedef union _MCI_STATUS {
    USHORT McaErrorCode;
    USHORT ModelErrorCode;
    ULONG OtherInformation : 23;
    ULONG ActionRequired : 1;
    ULONG Signalling : 1;
    ULONG ContextCorrupt : 1;
    ULONG AddressValid : 1;
    ULONG MiscValid : 1;
    ULONG ErrorEnabled : 1;
    ULONG UncorrectedError : 1;
    ULONG StatusOverFlow : 1;
    ULONG Valid : 1;
    ULONG64 QuadPart;
};

typedef union _MM_ETW_PAGE_EXTRA_INFO {
     <unnamed-type-e1>;
    struct {
        ULONG64 SharedInitial : 1;
    } e1;
     <unnamed-type-e2>;
    struct {
        ULONG64 WorkingSetType : 2;
        ULONG64 NotAddedtoWS : 1;
        ULONG64 COWFault : 1;
    } e2;
    ULONG64 ProtoPte;
    PVOID VirtualAddress;
};

typedef union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO {
     _VXLAN_INFO;
    struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO VxlanInfo;
    ULONG Value;
};

typedef union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPv4SrcAndDestAddress;
    struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPv6SrcAndDestAddress;
};

typedef union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES {
    struct _NDIS_OBJECT_HEADER Header;
    struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES AddDeviceRegistrationAttributes;
    struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES RegistrationAttributes;
    struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES GeneralAttributes;
    struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES OffloadAttributes;
    struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES Native_802_11_Attributes;
    struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES HardwareAssistAttributes;
    struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES NDKAttributes;
    struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES PacketDirectAttributes;
};

typedef union _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS {
     _VXLAN_PARAMETERS;
    struct _NDIS_OFFLOAD_PARAMETERS::_ENCAPSULATION_PROTOCOL_PARAMETERS::_VXLAN_PARAMETERS VxlanParameters;
    ULONG Value;
};

typedef union _NDIS_OID_REQUEST::_REQUEST_DATA {
     _QUERY;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY QUERY_INFORMATION;
     _SET;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET SET_INFORMATION;
     _METHOD;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD METHOD_INFORMATION;
};

typedef union _NDIS_PD_COUNTER_VALUE {
    struct _NDIS_PD_RECEIVE_QUEUE_COUNTER ReceiveQueue;
    struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER TransmitQueue;
    struct _NDIS_PD_FILTER_COUNTER Filter;
};

typedef union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS {
     _IPV4_ARP_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS IPv4ARPParameters;
     _IPV6_NS_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS IPv6NSParameters;
     _DOT11_RSN_REKEY_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
};

typedef union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN {
     _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
     _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
     _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
     _WOL_BITMAP_PATTERN;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN WoLBitMapPattern;
};

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE {
    UCHAR FieldByteValue;
    USHORT FieldShortValue;
    ULONG FieldLongValue;
    ULONG64 FieldLong64Value;
    UCHAR FieldByteArrayValue[16];
};

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD {
    enum _NDIS_MAC_HEADER_FIELD MacHeaderField;
    enum _NDIS_ARP_HEADER_FIELD ArpHeaderField;
    enum _NDIS_IPV4_HEADER_FIELD IPv4HeaderField;
    enum _NDIS_IPV6_HEADER_FIELD IPv6HeaderField;
    enum _NDIS_UDP_HEADER_FIELD UdpHeaderField;
};

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE {
    UCHAR ResultByteValue;
    USHORT ResultShortValue;
    ULONG ResultLongValue;
    ULONG64 ResultLong64Value;
    UCHAR ResultByteArrayValue[16];
};

typedef union _NDIS_RSC_NBL_INFO {
     <unnamed-type-Info>;
    struct {
        USHORT CoalescedSegCount;
        USHORT DupAckCount;
    } Info;
    PVOID Value;
};

typedef union _NDIS_RW_LOCK_REFCOUNT {
    ULONG RefCount;
    UCHAR cacheLine[16];
};

typedef union _NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO {
    ULONG64 AsUINT64;
    ULONG NumAvailableDestinations : 16;
    ULONG SourcePortId : 16;
    ULONG SourceNicIndex : 8;
    ULONG NativeForwardingRequired : 1;
    ULONG Reserved1 : 1;
    ULONG IsPacketDataSafe : 1;
    ULONG SafePacketDataSize : 12;
    ULONG IsPacketDataUncached : 1;
    ULONG IsSafePacketDataUncached : 1;
    ULONG Reserved2 : 7;
};

typedef union _NET_BUFFER_DATA_LENGTH {
    ULONG DataLength;
    ULONG64 stDataLength;
};

typedef union _NET_BUFFER_HEADER {
    struct _NET_BUFFER_DATA NetBufferData;
    union _SLIST_HEADER Link;
};

typedef union _NET_BUFFER_LIST_HEADER {
    struct _NET_BUFFER_LIST_DATA NetBufferListData;
    union _SLIST_HEADER Link;
};

typedef union _NET_LUID_LH {
    ULONG64 Value;
     <unnamed-type-Info>;
    struct {
        ULONG64 Reserved : 24;
        ULONG64 NetLuidIndex : 24;
        ULONG64 IfType : 16;
    } Info;
};

typedef union _NET_REQUEST_QUEUE_ADD_HANDLER_ERROR {
    UCHAR AllocationFailed : 1;
    UCHAR CallbackNull : 1;
    UCHAR AdapterNull : 1;
    UCHAR AsUchar;
};

typedef union _OB_POST_OPERATION_PARAMETERS {
    struct _OB_POST_CREATE_HANDLE_INFORMATION CreateHandleInformation;
    struct _OB_POST_DUPLICATE_HANDLE_INFORMATION DuplicateHandleInformation;
};

typedef union _OB_PRE_OPERATION_PARAMETERS {
    struct _OB_PRE_CREATE_HANDLE_INFORMATION CreateHandleInformation;
    struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION DuplicateHandleInformation;
};

typedef union _PCI_EXPRESS_ACS_CAPABILITY_REGISTER {
    USHORT SourceValidation : 1;
    USHORT TranslationBlocking : 1;
    USHORT RequestRedirect : 1;
    USHORT CompletionRedirect : 1;
    USHORT UpstreamForwarding : 1;
    USHORT EgressControl : 1;
    USHORT DirectTranslation : 1;
    USHORT Reserved : 1;
    USHORT EgressControlVectorSize : 8;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ACS_CONTROL {
    USHORT SourceValidation : 1;
    USHORT TranslationBlocking : 1;
    USHORT RequestRedirect : 1;
    USHORT CompletionRedirect : 1;
    USHORT UpstreamForwarding : 1;
    USHORT EgressControl : 1;
    USHORT DirectTranslation : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_AER_CAPABILITIES {
    ULONG FirstErrorPointer : 5;
    ULONG ECRCGenerationCapable : 1;
    ULONG ECRCGenerationEnable : 1;
    ULONG ECRCCheckCapable : 1;
    ULONG ECRCCheckEnable : 1;
    ULONG MultipleHeaderRecordingCapable : 1;
    ULONG MultipleHeaderRecordingEnable : 1;
    ULONG TlpPrefixLogPresent : 1;
    ULONG Reserved : 20;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_CAPABILITIES_REGISTER {
    USHORT CapabilityVersion : 4;
    USHORT DeviceType : 4;
    USHORT SlotImplemented : 1;
    USHORT InterruptMessageNumber : 5;
    USHORT Rsvd : 2;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK {
    ULONG ReceiverError : 1;
    ULONG Reserved1 : 5;
    ULONG BadTLP : 1;
    ULONG BadDLLP : 1;
    ULONG ReplayNumRollover : 1;
    ULONG Reserved2 : 3;
    ULONG ReplayTimerTimeout : 1;
    ULONG AdvisoryNonFatalError : 1;
    ULONG CorrectedInternalError : 1;
    ULONG HeaderLogOverflow : 1;
    ULONG Reserved3 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS {
    ULONG ReceiverError : 1;
    ULONG Reserved1 : 5;
    ULONG BadTLP : 1;
    ULONG BadDLLP : 1;
    ULONG ReplayNumRollover : 1;
    ULONG Reserved2 : 3;
    ULONG ReplayTimerTimeout : 1;
    ULONG AdvisoryNonFatalError : 1;
    ULONG CorrectedInternalError : 1;
    ULONG HeaderLogOverflow : 1;
    ULONG Reserved3 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_1 {
    ULONG DvsecVendorId : 16;
    ULONG DvsecVersion : 4;
    ULONG DvsecLength : 12;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DESIGNATED_VENDOR_SPECIFIC_HEADER_2 {
    USHORT DvsecId : 16;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER {
    ULONG CompletionTimeoutRangesSupported : 4;
    ULONG CompletionTimeoutDisableSupported : 1;
    ULONG AriForwardingSupported : 1;
    ULONG AtomicOpRoutingSupported : 1;
    ULONG AtomicOpCompleterSupported32Bit : 1;
    ULONG AtomicOpCompleterSupported64Bit : 1;
    ULONG CASCompleterSupported128Bit : 1;
    ULONG NoROEnabledPRPRPassing : 1;
    ULONG LTRMechanismSupported : 1;
    ULONG TPHCompleterSupported : 2;
    ULONG Rsvd : 4;
    ULONG OBFFSupported : 2;
    ULONG ExtendedFmtFieldSuported : 1;
    ULONG EndEndTLPPrefixSupported : 1;
    ULONG MaxEndEndTLPPrefixes : 2;
    ULONG Rsvd2 : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER {
    ULONG MaxPayloadSizeSupported : 3;
    ULONG PhantomFunctionsSupported : 2;
    ULONG ExtendedTagSupported : 1;
    ULONG L0sAcceptableLatency : 3;
    ULONG L1AcceptableLatency : 3;
    ULONG Undefined : 3;
    ULONG RoleBasedErrorReporting : 1;
    ULONG Rsvd1 : 2;
    ULONG CapturedSlotPowerLimit : 8;
    ULONG CapturedSlotPowerLimitScale : 2;
    ULONG FunctionLevelResetCapability : 1;
    ULONG Rsvd2 : 3;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER {
    USHORT CompletionTimeoutValue : 4;
    USHORT CompletionTimeoutDisable : 1;
    USHORT AriForwardingEnable : 1;
    USHORT AtomicOpRequesterEnable : 1;
    USHORT AtomicOpEgresBlocking : 1;
    USHORT IDORequestEnable : 1;
    USHORT IDOCompletionEnable : 1;
    USHORT LTRMechanismEnable : 1;
    USHORT Rsvd : 2;
    USHORT OBFFEnable : 2;
    USHORT EndEndTLPPrefixBlocking : 1;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER {
    USHORT CorrectableErrorEnable : 1;
    USHORT NonFatalErrorEnable : 1;
    USHORT FatalErrorEnable : 1;
    USHORT UnsupportedRequestErrorEnable : 1;
    USHORT EnableRelaxedOrder : 1;
    USHORT MaxPayloadSize : 3;
    USHORT ExtendedTagEnable : 1;
    USHORT PhantomFunctionsEnable : 1;
    USHORT AuxPowerEnable : 1;
    USHORT NoSnoopEnable : 1;
    USHORT MaxReadRequestSize : 3;
    USHORT BridgeConfigRetryEnable : 1;
    USHORT InitiateFunctionLevelReset : 1;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_STATUS_2_REGISTER {
    USHORT Rsvd : 16;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_DEVICE_STATUS_REGISTER {
    USHORT CorrectableErrorDetected : 1;
    USHORT NonFatalErrorDetected : 1;
    USHORT FatalErrorDetected : 1;
    USHORT UnsupportedRequestDetected : 1;
    USHORT AuxPowerDetected : 1;
    USHORT TransactionsPending : 1;
    USHORT Rsvd : 10;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ERROR_SOURCE_ID {
    USHORT CorrectableSourceIdFun : 3;
    USHORT CorrectableSourceIdDev : 5;
    USHORT CorrectableSourceIdBus : 8;
    USHORT UncorrectableSourceIdFun : 3;
    USHORT UncorrectableSourceIdDev : 5;
    USHORT UncorrectableSourceIdBus : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER {
    ULONG PciPmL12Supported : 1;
    ULONG PciPmL11Supported : 1;
    ULONG AspmL12Supported : 1;
    ULONG AspmL11Supported : 1;
    ULONG L1PmSsSupported : 1;
    ULONG Rsvd : 3;
    ULONG PortCommonModeRestoreTime : 8;
    ULONG PortTPowerOnScale : 2;
    ULONG Rsvd2 : 1;
    ULONG PortTPowerOnValue : 5;
    ULONG Rsvd3 : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER {
    ULONG PciPmL12Enabled : 1;
    ULONG PciPmL11Enabled : 1;
    ULONG AspmL12Enabled : 1;
    ULONG AspmL11Enabled : 1;
    ULONG Rsvd : 4;
    ULONG CommonModeRestoreTime : 8;
    ULONG LtrL12ThresholdValue : 10;
    ULONG Rsvd2 : 3;
    ULONG LtrL12ThresholdScale : 3;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER {
    ULONG TPowerOnScale : 2;
    ULONG Rsvd : 1;
    ULONG TPowerOnValue : 5;
    ULONG Rsvd2 : 24;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER {
    ULONG MaximumLinkSpeed : 4;
    ULONG MaximumLinkWidth : 6;
    ULONG ActiveStatePMSupport : 2;
    ULONG L0sExitLatency : 3;
    ULONG L1ExitLatency : 3;
    ULONG ClockPowerManagement : 1;
    ULONG SurpriseDownErrorReportingCapable : 1;
    ULONG DataLinkLayerActiveReportingCapable : 1;
    ULONG LinkBandwidthNotificationCapability : 1;
    ULONG AspmOptionalityCompliance : 1;
    ULONG Rsvd : 1;
    ULONG PortNumber : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_LINK_CONTROL_REGISTER {
    USHORT ActiveStatePMControl : 2;
    USHORT Rsvd1 : 1;
    USHORT ReadCompletionBoundary : 1;
    USHORT LinkDisable : 1;
    USHORT RetrainLink : 1;
    USHORT CommonClockConfig : 1;
    USHORT ExtendedSynch : 1;
    USHORT EnableClockPowerManagement : 1;
    USHORT Rsvd2 : 7;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_LINK_STATUS_REGISTER {
    USHORT LinkSpeed : 4;
    USHORT LinkWidth : 6;
    USHORT Undefined : 1;
    USHORT LinkTraining : 1;
    USHORT SlotClockConfig : 1;
    USHORT DataLinkLayerActive : 1;
    USHORT Rsvd : 2;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER {
    ULONG MaxSnoopLatencyValue : 10;
    ULONG MaxSnoopLatencyScale : 3;
    ULONG Rsvd : 2;
    ULONG MaxSnoopRequirement : 1;
    ULONG MaxNoSnoopLatencyValue : 10;
    ULONG MaxNoSnoopLatencyScale : 3;
    ULONG Rsvd2 : 2;
    ULONG MaxNoSnoopRequirement : 1;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_PASID_CAPABILITY_REGISTER {
    USHORT Rsvd : 1;
    USHORT ExecutePermissionSupported : 1;
    USHORT PrivilegedModeSupported : 1;
    USHORT Rsvd2 : 5;
    USHORT MaxPASIDWidth : 5;
    USHORT Rsvd3 : 3;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PASID_CONTROL_REGISTER {
    USHORT PASIDEnable : 1;
    USHORT ExecutePermissionEnable : 1;
    USHORT PrivilegedModeEnable : 1;
    USHORT Rsvd : 13;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PME_REQUESTOR_ID {
    USHORT FunctionNumber : 3;
    USHORT DeviceNumber : 5;
    USHORT BusNumber : 8;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PRI_CONTROL_REGISTER {
    USHORT Enable : 1;
    USHORT Reset : 1;
    USHORT Rsvd : 14;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PRI_STATUS_REGISTER {
    USHORT ResponseFailure : 1;
    USHORT UnexpectedPageRequestGroupIndex : 1;
    USHORT Rsvd : 6;
    USHORT Stopped : 1;
    USHORT Rsvd2 : 6;
    USHORT PrgResponsePasidRequired : 1;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_PTM_CAPABILITY_REGISTER {
    ULONG RequesterCapable : 1;
    ULONG ResponderCapable : 1;
    ULONG RootCapable : 1;
    ULONG Rsvd : 5;
    ULONG LocalGranularity : 8;
    ULONG Rsvd2 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_PTM_CONTROL_REGISTER {
    ULONG Enable : 1;
    ULONG RootSelect : 1;
    ULONG Rsvd : 6;
    ULONG EffectiveGranularity : 8;
    ULONG Rsvd2 : 16;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER {
    ULONG Rsvd : 4;
    ULONG SizesSupported : 20;
    ULONG Rsvd2 : 8;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER {
    ULONG BarIndex : 3;
    ULONG Rsvd : 2;
    ULONG NumberOfResizableBars : 3;
    ULONG BarSize : 5;
    ULONG Rsvd2 : 19;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER {
    USHORT CRSSoftwareVisibility : 1;
    USHORT Rsvd : 15;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ROOT_CONTROL_REGISTER {
    USHORT CorrectableSerrEnable : 1;
    USHORT NonFatalSerrEnable : 1;
    USHORT FatalSerrEnable : 1;
    USHORT PMEInterruptEnable : 1;
    USHORT CRSSoftwareVisibilityEnable : 1;
    USHORT Rsvd : 11;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_ROOT_ERROR_COMMAND {
    ULONG CorrectableErrorReportingEnable : 1;
    ULONG NonFatalErrorReportingEnable : 1;
    ULONG FatalErrorReportingEnable : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_ROOT_ERROR_STATUS {
    ULONG CorrectableErrorReceived : 1;
    ULONG MultipleCorrectableErrorsReceived : 1;
    ULONG UncorrectableErrorReceived : 1;
    ULONG MultipleUncorrectableErrorsReceived : 1;
    ULONG FirstUncorrectableFatal : 1;
    ULONG NonFatalErrorMessagesReceived : 1;
    ULONG FatalErrorMessagesReceived : 1;
    ULONG Reserved : 20;
    ULONG AdvancedErrorInterruptMessageNumber : 5;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_ROOT_STATUS_REGISTER {
    ULONG PMERequestorId : 16;
    ULONG PMEStatus : 1;
    ULONG PMEPending : 1;
    ULONG Rsvd : 14;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_AER_CAPABILITIES {
    ULONG SecondaryUncorrectableFirstErrorPtr : 5;
    ULONG Reserved : 27;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK {
    ULONG TargetAbortOnSplitCompletion : 1;
    ULONG MasterAbortOnSplitCompletion : 1;
    ULONG ReceivedTargetAbort : 1;
    ULONG ReceivedMasterAbort : 1;
    ULONG RsvdZ : 1;
    ULONG UnexpectedSplitCompletionError : 1;
    ULONG UncorrectableSplitCompletion : 1;
    ULONG UncorrectableDataError : 1;
    ULONG UncorrectableAttributeError : 1;
    ULONG UncorrectableAddressError : 1;
    ULONG DelayedTransactionDiscardTimerExpired : 1;
    ULONG PERRAsserted : 1;
    ULONG SERRAsserted : 1;
    ULONG InternalBridgeError : 1;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY {
    ULONG TargetAbortOnSplitCompletion : 1;
    ULONG MasterAbortOnSplitCompletion : 1;
    ULONG ReceivedTargetAbort : 1;
    ULONG ReceivedMasterAbort : 1;
    ULONG RsvdZ : 1;
    ULONG UnexpectedSplitCompletionError : 1;
    ULONG UncorrectableSplitCompletion : 1;
    ULONG UncorrectableDataError : 1;
    ULONG UncorrectableAttributeError : 1;
    ULONG UncorrectableAddressError : 1;
    ULONG DelayedTransactionDiscardTimerExpired : 1;
    ULONG PERRAsserted : 1;
    ULONG SERRAsserted : 1;
    ULONG InternalBridgeError : 1;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS {
    ULONG TargetAbortOnSplitCompletion : 1;
    ULONG MasterAbortOnSplitCompletion : 1;
    ULONG ReceivedTargetAbort : 1;
    ULONG ReceivedMasterAbort : 1;
    ULONG RsvdZ : 1;
    ULONG UnexpectedSplitCompletionError : 1;
    ULONG UncorrectableSplitCompletion : 1;
    ULONG UncorrectableDataError : 1;
    ULONG UncorrectableAttributeError : 1;
    ULONG UncorrectableAddressError : 1;
    ULONG DelayedTransactionDiscardTimerExpired : 1;
    ULONG PERRAsserted : 1;
    ULONG SERRAsserted : 1;
    ULONG InternalBridgeError : 1;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER {
    ULONG AttentionButtonPresent : 1;
    ULONG PowerControllerPresent : 1;
    ULONG MRLSensorPresent : 1;
    ULONG AttentionIndicatorPresent : 1;
    ULONG PowerIndicatorPresent : 1;
    ULONG HotPlugSurprise : 1;
    ULONG HotPlugCapable : 1;
    ULONG SlotPowerLimit : 8;
    ULONG SlotPowerLimitScale : 2;
    ULONG ElectromechanicalLockPresent : 1;
    ULONG NoCommandCompletedSupport : 1;
    ULONG PhysicalSlotNumber : 13;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SLOT_CONTROL_REGISTER {
    USHORT AttentionButtonEnable : 1;
    USHORT PowerFaultDetectEnable : 1;
    USHORT MRLSensorEnable : 1;
    USHORT PresenceDetectEnable : 1;
    USHORT CommandCompletedEnable : 1;
    USHORT HotPlugInterruptEnable : 1;
    USHORT AttentionIndicatorControl : 2;
    USHORT PowerIndicatorControl : 2;
    USHORT PowerControllerControl : 1;
    USHORT ElectromechanicalLockControl : 1;
    USHORT DataLinkStateChangeEnable : 1;
    USHORT Rsvd : 3;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_SLOT_STATUS_REGISTER {
    USHORT AttentionButtonPressed : 1;
    USHORT PowerFaultDetected : 1;
    USHORT MRLSensorChanged : 1;
    USHORT PresenceDetectChanged : 1;
    USHORT CommandCompleted : 1;
    USHORT MRLSensorState : 1;
    USHORT PresenceDetectState : 1;
    USHORT ElectromechanicalLockEngaged : 1;
    USHORT DataLinkStateChanged : 1;
    USHORT Rsvd : 7;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_SRIOV_CAPS {
    ULONG VFMigrationCapable : 1;
    ULONG Reserved1 : 20;
    ULONG VFMigrationInterruptNumber : 11;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SRIOV_CONTROL {
    USHORT VFEnable : 1;
    USHORT VFMigrationEnable : 1;
    USHORT VFMigrationInterruptEnable : 1;
    USHORT VFMemorySpaceEnable : 1;
    USHORT ARICapableHierarchy : 1;
    USHORT Reserved1 : 11;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY {
    ULONG VFMigrationStateBIR : 3;
    ULONG VFMigrationStateOffset : 29;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_SRIOV_STATUS {
    USHORT VFMigrationStatus : 1;
    USHORT Reserved1 : 15;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER {
    ULONG NoStModeSupported : 1;
    ULONG InteruptVectorModeSupported : 1;
    ULONG DeviceSpecificModeSupported : 1;
    ULONG Rsvd : 5;
    ULONG ExtendedTPHRequesterSupported : 1;
    ULONG StTableLocation : 2;
    ULONG Rsvd2 : 5;
    ULONG StTableSize : 11;
    ULONG Rsvd3 : 5;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER {
    ULONG StModeSelect : 3;
    ULONG Rsvd : 5;
    ULONG TphRequesterEnable : 2;
    ULONG Rsvd2 : 22;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_TPH_ST_TABLE_ENTRY {
    USHORT LowerEntry : 8;
    USHORT UpperEntry : 8;
    USHORT AsUSHORT;
};

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK {
    ULONG Undefined : 1;
    ULONG Reserved1 : 3;
    ULONG DataLinkProtocolError : 1;
    ULONG SurpriseDownError : 1;
    ULONG Reserved2 : 6;
    ULONG PoisonedTLP : 1;
    ULONG FlowControlProtocolError : 1;
    ULONG CompletionTimeout : 1;
    ULONG CompleterAbort : 1;
    ULONG UnexpectedCompletion : 1;
    ULONG ReceiverOverflow : 1;
    ULONG MalformedTLP : 1;
    ULONG ECRCError : 1;
    ULONG UnsupportedRequestError : 1;
    ULONG AcsViolation : 1;
    ULONG UncorrectableInternalError : 1;
    ULONG MCBlockedTlp : 1;
    ULONG AtomicOpEgressBlocked : 1;
    ULONG TlpPrefixBlocked : 1;
    ULONG Reserved3 : 6;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY {
    ULONG Undefined : 1;
    ULONG Reserved1 : 3;
    ULONG DataLinkProtocolError : 1;
    ULONG SurpriseDownError : 1;
    ULONG Reserved2 : 6;
    ULONG PoisonedTLP : 1;
    ULONG FlowControlProtocolError : 1;
    ULONG CompletionTimeout : 1;
    ULONG CompleterAbort : 1;
    ULONG UnexpectedCompletion : 1;
    ULONG ReceiverOverflow : 1;
    ULONG MalformedTLP : 1;
    ULONG ECRCError : 1;
    ULONG UnsupportedRequestError : 1;
    ULONG AcsViolation : 1;
    ULONG UncorrectableInternalError : 1;
    ULONG MCBlockedTlp : 1;
    ULONG AtomicOpEgressBlocked : 1;
    ULONG TlpPrefixBlocked : 1;
    ULONG Reserved3 : 6;
    ULONG AsULONG;
};

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS {
    ULONG Undefined : 1;
    ULONG Reserved1 : 3;
    ULONG DataLinkProtocolError : 1;
    ULONG SurpriseDownError : 1;
    ULONG Reserved2 : 6;
    ULONG PoisonedTLP : 1;
    ULONG FlowControlProtocolError : 1;
    ULONG CompletionTimeout : 1;
    ULONG CompleterAbort : 1;
    ULONG UnexpectedCompletion : 1;
    ULONG ReceiverOverflow : 1;
    ULONG MalformedTLP : 1;
    ULONG ECRCError : 1;
    ULONG UnsupportedRequestError : 1;
    ULONG AcsViolation : 1;
    ULONG UncorrectableInternalError : 1;
    ULONG MCBlockedTlp : 1;
    ULONG AtomicOpEgressBlocked : 1;
    ULONG TlpPrefixBlocked : 1;
    ULONG Reserved3 : 6;
    ULONG AsULONG;
};

typedef union _PCI_FPB_CAPABILITIES_REGISTER {
    ULONG RidDecodeMechanismSupported : 1;
    ULONG MemLowDecodeMechanismSupported : 1;
    ULONG MemHighDecodeMechanismSupported : 1;
    ULONG NumSecDev : 5;
    ULONG RidVectorSizeSupported : 3;
    ULONG Rsvd0 : 5;
    ULONG MemLowVectorSizeSupported : 3;
    ULONG Rsvd1 : 5;
    ULONG MemHighVectorSizeSupported : 3;
    ULONG Rsvd2 : 5;
    ULONG AsULONG;
};

typedef union _PCI_FPB_MEM_HIGH_VECTOR_CONTROL1_REGISTER {
    ULONG MemHighDecodeMechanismEnable : 1;
    ULONG Rsvd0 : 3;
    ULONG MemHighVectorGranularity : 4;
    ULONG Rsvd1 : 20;
    ULONG MemHighVectorStartLower : 4;
    ULONG AsULONG;
};

typedef union _PCI_FPB_MEM_LOW_VECTOR_CONTROL_REGISTER {
    ULONG MemLowDecodeMechanismEnable : 1;
    ULONG Rsvd0 : 3;
    ULONG MemLowVectorGranularity : 4;
    ULONG Rsvd1 : 12;
    ULONG MemLowVectorStart : 12;
    ULONG AsULONG;
};

typedef union _PCI_FPB_RID_VECTOR_CONTROL1_REGISTER {
    ULONG RidDecodeMechanismEnable : 1;
    ULONG Rsvd0 : 3;
    ULONG RidVectorGranularity : 4;
    ULONG Rsvd1 : 11;
    ULONG RidVectorStart : 13;
    ULONG AsULONG;
};

typedef union _PCI_FPB_RID_VECTOR_CONTROL2_REGISTER {
    ULONG Rsvd0 : 3;
    ULONG RidSecondaryStart : 13;
    ULONG Rsvd1 : 16;
    ULONG AsULONG;
};

typedef union _PCI_FPB_VECTOR_ACCESS_CONTROL_REGISTER {
    ULONG VectorAccessOffset : 8;
    ULONG Rsvd0 : 6;
    ULONG VectorSelect : 2;
    ULONG Rsvd1 : 16;
    ULONG AsULONG;
};

typedef union _PCW_CALLBACK_INFORMATION {
    struct _PCW_COUNTER_INFORMATION AddCounter;
    struct _PCW_COUNTER_INFORMATION RemoveCounter;
    struct _PCW_MASK_INFORMATION EnumerateInstances;
    struct _PCW_MASK_INFORMATION CollectData;
};

typedef union _POWER_STATE {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
};

typedef union _PREFETCH_VIRTUAL_ADDRESS_FLAGS {
     <unnamed-type-Flags>;
    struct {
        ULONG ConsumeOnlySamePriorityOrLowerPages : 1;
        ULONG PagePriority : 2;
        ULONG MustBeZero : 29;
    } Flags;
    ULONG AllFlags;
};

typedef union _PROCESS_AFFINITY_UPDATE_MODE {
    ULONG Flags;
    ULONG EnableAutoUpdate : 1;
    ULONG Permanent : 1;
    ULONG Reserved : 30;
};

typedef union _PROCESS_LOGGING_INFORMATION {
    ULONG Flags;
    ULONG EnableReadVmLogging : 1;
    ULONG EnableWriteVmLogging : 1;
    ULONG EnableProcessSuspendResumeLogging : 1;
    ULONG EnableThreadSuspendResumeLogging : 1;
    ULONG Reserved : 28;
};

typedef union _PROCESS_MEMORY_ALLOCATION_MODE {
    ULONG Flags;
    ULONG TopDown : 1;
    ULONG Reserved : 31;
};

typedef union _PROCESS_READWRITEVM_LOGGING_INFORMATION {
    UCHAR Flags;
    UCHAR EnableReadVmLogging : 1;
    UCHAR EnableWriteVmLogging : 1;
    UCHAR Unused : 6;
};

typedef union _PROCESS_SYSTEM_RESOURCE_MANAGEMENT {
    ULONG Flags;
    ULONG Foreground : 1;
    ULONG Reserved : 31;
};

typedef union _PROTOCOL_OFFLOAD_PARAMETERS {
     _IPV4_ARP_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS IPv4ARPParameters;
     _IPV6_NS_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS IPv6NSParameters;
     _DOT11_RSN_REKEY_PARAMETERS;
    struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
};

typedef union _PS_EXCEPTION_FLAGS {
    ULONG Flags;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG Reserved : 30;
};

typedef union _RATE_QUOTA_LIMIT {
    ULONG RateData;
    ULONG RatePercent : 7;
    ULONG Reserved0 : 25;
};

typedef union _REQUEST_DATA {
     _QUERY;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY QUERY_INFORMATION;
     _SET;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET SET_INFORMATION;
     _METHOD;
    struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD METHOD_INFORMATION;
};

typedef union _RESULT_VALUE {
    UCHAR ResultByteValue;
    USHORT ResultShortValue;
    ULONG ResultLongValue;
    ULONG64 ResultLong64Value;
    UCHAR ResultByteArrayValue[16];
};

typedef union _RTL_ELEVATION_FLAGS {
    ULONG Flags;
    ULONG ElevationEnabled : 1;
    ULONG VirtualizationEnabled : 1;
    ULONG InstallerDetectEnabled : 1;
    ULONG ReservedBits : 29;
};

typedef union _RTL_IMAGE_MITIGATION_POLICY {
    ULONG64 AuditState : 2;
    ULONG64 AuditFlag : 1;
    ULONG64 EnableAdditionalAuditingOption : 1;
    ULONG64 Reserved : 60;
    ULONG64 PolicyState : 2;
    ULONG64 AlwaysInherit : 1;
    ULONG64 EnableAdditionalPolicyOption : 1;
    ULONG64 AuditReserved : 60;
};

typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
};

typedef union _RTL_TICK_LOCK {
    ULONG64 AsULong64;
    ULONG64 Busy : 1;
    ULONG64 Ticks : 63;
};

typedef union _SE_SID {
    struct _SID Sid;
    UCHAR Buffer[68];
};

typedef union _SLIST_HEADER {
    ULONG64 Alignment;
    ULONG64 Region;
     <unnamed-type-HeaderX64>;
    struct {
        ULONG64 Depth : 16;
        ULONG64 Sequence : 48;
        ULONG64 Reserved : 4;
        ULONG64 NextEntry : 60;
    } HeaderX64;
};

typedef union _SOCKADDR_INET {
    struct sockaddr_in Ipv4;
    struct sockaddr_in6 Ipv6;
    USHORT si_family;
};

typedef union _STREAM_INFORMATION_ENTRY::_StreamInformation {
     _DesiredStorageClass;
    struct _STREAM_INFORMATION_ENTRY::_StreamInformation::_DesiredStorageClass DesiredStorageClass;
};

typedef union _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES {
    ULONG HypervisorPages : 1;
    ULONG Reserved : 31;
    ULONG AsUlong;
};

typedef union _SYSDBG_LIVEDUMP_CONTROL_FLAGS {
    ULONG UseDumpStorageStack : 1;
    ULONG CompressMemoryPagesData : 1;
    ULONG IncludeUserSpaceMemoryPages : 1;
    ULONG AbortIfMemoryPressure : 1;
    ULONG Reserved : 28;
    ULONG AsUlong;
};

typedef union _StreamInformation {
     _DesiredStorageClass;
    struct _STREAM_INFORMATION_ENTRY::_StreamInformation::_DesiredStorageClass DesiredStorageClass;
};

typedef union _TIMELINE_BITMAP {
    ULONG64 Value;
    ULONG EndTime;
    ULONG Bitmap;
};

typedef union _ULARGE_INTEGER {
    ULONG LowPart;
    ULONG HighPart;
     <unnamed-type-u>;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONG64 QuadPart;
};

typedef union _UNWIND_CODE {
    UCHAR CodeOffset;
    UCHAR UnwindOp : 4;
    UCHAR OpInfo : 4;
     <unnamed-type-EpilogueCode>;
    struct {
        UCHAR OffsetLow;
        UCHAR UnwindOp : 4;
        UCHAR OffsetHigh : 4;
    } EpilogueCode;
    USHORT FrameOffset;
};

typedef union _VIA_L1_CACHE_INFO {
    ULONG Ulong;
    UCHAR LineSize;
    UCHAR LinesPerTag;
    UCHAR Associativity;
    UCHAR Size;
};

typedef union _VIA_L2_CACHE_INFO {
    ULONG Ulong;
    UCHAR LineSize;
    UCHAR LinesPerTag : 4;
    UCHAR Associativity : 4;
    USHORT Size;
};

typedef union _VIRTUAL_CHANNEL_CAPABILITIES1 {
    ULONG ExtendedVCCount : 3;
    ULONG RsvdP1 : 1;
    ULONG LowPriorityExtendedVCCount : 3;
    ULONG RsvdP2 : 1;
    ULONG ReferenceClock : 2;
    ULONG PortArbitrationTableEntrySize : 2;
    ULONG RsvdP3 : 20;
    ULONG AsULONG;
};

typedef union _VIRTUAL_CHANNEL_CAPABILITIES2 {
    ULONG VCArbitrationCapability : 8;
    ULONG RsvdP : 16;
    ULONG VCArbitrationTableOffset : 8;
    ULONG AsULONG;
};

typedef union _VIRTUAL_CHANNEL_CONTROL {
    USHORT LoadVCArbitrationTable : 1;
    USHORT VCArbitrationSelect : 3;
    USHORT RsvdP : 12;
    USHORT AsUSHORT;
};

typedef union _VIRTUAL_CHANNEL_STATUS {
    USHORT VCArbitrationTableStatus : 1;
    USHORT RsvdZ : 15;
    USHORT AsUSHORT;
};

typedef union _VIRTUAL_RESOURCE_CAPABILITY {
    ULONG PortArbitrationCapability : 8;
    ULONG RsvdP1 : 6;
    ULONG Undefined : 1;
    ULONG RejectSnoopTransactions : 1;
    ULONG MaximumTimeSlots : 7;
    ULONG RsvdP2 : 1;
    ULONG PortArbitrationTableOffset : 8;
    ULONG AsULONG;
};

typedef union _VIRTUAL_RESOURCE_CONTROL {
    ULONG TcVcMap : 8;
    ULONG RsvdP1 : 8;
    ULONG LoadPortArbitrationTable : 1;
    ULONG PortArbitrationSelect : 3;
    ULONG RsvdP2 : 4;
    ULONG VcID : 3;
    ULONG RsvdP3 : 4;
    ULONG VcEnable : 1;
    ULONG AsULONG;
};

typedef union _VIRTUAL_RESOURCE_STATUS {
    USHORT PortArbitrationTableStatus : 1;
    USHORT VcNegotiationPending : 1;
    USHORT RsvdZ : 14;
    USHORT AsUSHORT;
};

typedef union _WHEA_ARM_BUS_ERROR_VALID_BITS {
    USHORT TransactionType : 1;
    USHORT Operation : 1;
    USHORT Level : 1;
    USHORT ProcessorContextCorrupt : 1;
    USHORT Corrected : 1;
    USHORT PrecisePC : 1;
    USHORT RestartablePC : 1;
    USHORT ParticipationType : 1;
    USHORT Timeout : 1;
    USHORT AddressSpace : 1;
    USHORT MemoryAttributes : 1;
    USHORT AccessMode : 1;
    USHORT Reserved : 4;
    USHORT AsUSHORT;
};

typedef union _WHEA_ARM_CACHE_ERROR_VALID_BITS {
    USHORT TransactionType : 1;
    USHORT Operation : 1;
    USHORT Level : 1;
    USHORT ProcessorContextCorrupt : 1;
    USHORT Corrected : 1;
    USHORT PrecisePC : 1;
    USHORT RestartablePC : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR {
    struct _WHEA_ARM_CACHE_ERROR CacheError;
    struct _WHEA_ARM_TLB_ERROR TlbError;
    struct _WHEA_ARM_BUS_ERROR BusError;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER_FLAGS {
    ULONG ExceptionLevel : 1;
    ULONG NonSecure : 1;
    ULONG AArch64 : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS {
    USHORT MultipleError : 1;
    USHORT Flags : 1;
    USHORT ErrorInformation : 1;
    USHORT VirtualFaultAddress : 1;
    USHORT PhysicalFaultAddress : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS {
    ULONG MPIDR : 1;
    ULONG AffinityLevel : 1;
    ULONG RunningState : 1;
    ULONG VendorSpecificInfo : 1;
    ULONG Reserved : 28;
    ULONG AsULONG;
};

typedef union _WHEA_ARM_TLB_ERROR_VALID_BITS {
    USHORT TransactionType : 1;
    USHORT Operation : 1;
    USHORT Level : 1;
    USHORT ProcessorContextCorrupt : 1;
    USHORT Corrected : 1;
    USHORT PrecisePC : 1;
    USHORT RestartablePC : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _WHEA_ERROR_INJECTION_CAPABILITIES {
    ULONG ProcessorCorrectable : 1;
    ULONG ProcessorUncorrectableNonFatal : 1;
    ULONG ProcessorUncorrectableFatal : 1;
    ULONG MemoryCorrectable : 1;
    ULONG MemoryUncorrectableNonFatal : 1;
    ULONG MemoryUncorrectableFatal : 1;
    ULONG PCIExpressCorrectable : 1;
    ULONG PCIExpressUncorrectableNonFatal : 1;
    ULONG PCIExpressUncorrectableFatal : 1;
    ULONG PlatformCorrectable : 1;
    ULONG PlatformUncorrectableNonFatal : 1;
    ULONG PlatformUncorrectableFatal : 1;
    ULONG IA64Corrected : 1;
    ULONG IA64Recoverable : 1;
    ULONG IA64Fatal : 1;
    ULONG IA64RecoverableCache : 1;
    ULONG IA64RecoverableRegFile : 1;
    ULONG Reserved : 15;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_PACKET_FLAGS {
    ULONG PreviousError : 1;
    ULONG Reserved1 : 1;
    ULONG HypervisorError : 1;
    ULONG Simulated : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved2 : 26;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
    ULONG Recovered : 1;
    ULONG PreviousError : 1;
    ULONG Simulated : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
    ULONG PlatformId : 1;
    ULONG Timestamp : 1;
    ULONG PartitionId : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
    ULONG Primary : 1;
    ULONG ContainmentWarning : 1;
    ULONG Reset : 1;
    ULONG ThresholdExceeded : 1;
    ULONG ResourceNotAvailable : 1;
    ULONG LatentError : 1;
    ULONG Propagated : 1;
    ULONG Reserved : 25;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
    UCHAR FRUId : 1;
    UCHAR FRUText : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _WHEA_ERROR_STATUS {
    ULONG64 ErrorStatus;
    ULONG64 Reserved1 : 8;
    ULONG64 ErrorType : 8;
    ULONG64 Address : 1;
    ULONG64 Control : 1;
    ULONG64 Data : 1;
    ULONG64 Responder : 1;
    ULONG64 Requester : 1;
    ULONG64 FirstError : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved2 : 41;
};

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS {
    ULONG Reserved : 32;
    ULONG AsULONG;
};

typedef union _WHEA_GENERIC_ERROR_BLOCKSTATUS {
    ULONG UncorrectableError : 1;
    ULONG CorrectableError : 1;
    ULONG MultipleUncorrectableErrors : 1;
    ULONG MultipleCorrectableErrors : 1;
    ULONG ErrorDataEntryCount : 10;
    ULONG Reserved : 18;
    ULONG AsULONG;
};

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 PhysicalAddress : 1;
    ULONG64 PhysicalAddressMask : 1;
    ULONG64 Node : 1;
    ULONG64 Card : 1;
    ULONG64 Module : 1;
    ULONG64 Bank : 1;
    ULONG64 Device : 1;
    ULONG64 Row : 1;
    ULONG64 Column : 1;
    ULONG64 BitPosition : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 TargetId : 1;
    ULONG64 ErrorType : 1;
    ULONG64 RankNumber : 1;
    ULONG64 CardHandle : 1;
    ULONG64 ModuleHandle : 1;
    ULONG64 ExtendedRow : 1;
    ULONG64 BankGroup : 1;
    ULONG64 BankAddress : 1;
    ULONG64 ChipIdentification : 1;
    ULONG64 Reserved : 42;
    ULONG64 ValidBits;
};

typedef union _WHEA_NMI_ERROR_SECTION_FLAGS {
    ULONG HypervisorError : 1;
    ULONG Reserved : 31;
    ULONG AsULONG;
};

typedef union _WHEA_NOTIFICATION_FLAGS {
    USHORT PollIntervalRW : 1;
    USHORT SwitchToPollingThresholdRW : 1;
    USHORT SwitchToPollingWindowRW : 1;
    USHORT ErrorThresholdRW : 1;
    USHORT ErrorThresholdWindowRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS {
    USHORT BridgeSecondaryStatus;
    USHORT BridgeControl;
    ULONG AsULONG;
};

typedef union _WHEA_PCIEXPRESS_COMMAND_STATUS {
    USHORT Command;
    USHORT Status;
    ULONG AsULONG;
};

typedef union _WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS {
    ULONG64 PortType : 1;
    ULONG64 Version : 1;
    ULONG64 CommandStatus : 1;
    ULONG64 DeviceId : 1;
    ULONG64 DeviceSerialNumber : 1;
    ULONG64 BridgeControlStatus : 1;
    ULONG64 ExpressCapability : 1;
    ULONG64 AerInfo : 1;
    ULONG64 Reserved : 56;
    ULONG64 ValidBits;
};

typedef union _WHEA_PCIEXPRESS_VERSION {
    UCHAR MinorVersion;
    UCHAR MajorVersion;
    USHORT Reserved;
    ULONG AsULONG;
};

typedef union _WHEA_PCIXBUS_COMMAND {
    ULONG64 Command : 56;
    ULONG64 PCIXCommand : 1;
    ULONG64 Reserved : 7;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 ErrorType : 1;
    ULONG64 BusId : 1;
    ULONG64 BusAddress : 1;
    ULONG64 BusData : 1;
    ULONG64 BusCommand : 1;
    ULONG64 RequesterId : 1;
    ULONG64 CompleterId : 1;
    ULONG64 TargetId : 1;
    ULONG64 Reserved : 55;
    ULONG64 ValidBits;
};

typedef union _WHEA_PCIXBUS_ID {
    UCHAR BusNumber;
    UCHAR BusSegment;
    USHORT AsUSHORT;
};

typedef union _WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 IdInfo : 1;
    ULONG64 MemoryNumber : 1;
    ULONG64 IoNumber : 1;
    ULONG64 RegisterDataPairs : 1;
    ULONG64 Reserved : 59;
    ULONG64 ValidBits;
};

typedef union _WHEA_PERSISTENCE_INFO {
    ULONG64 Signature : 16;
    ULONG64 Length : 24;
    ULONG64 Identifier : 16;
    ULONG64 Attributes : 2;
    ULONG64 DoNotLog : 1;
    ULONG64 Reserved : 5;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_PROCESSOR_FAMILY_INFO {
    ULONG Stepping : 4;
    ULONG Model : 4;
    ULONG Family : 4;
    ULONG ProcessorType : 2;
    ULONG Reserved1 : 2;
    ULONG ExtendedModel : 4;
    ULONG ExtendedFamily : 8;
    ULONG Reserved2 : 4;
    ULONG Reserved3;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS {
    ULONG64 ProcessorType : 1;
    ULONG64 InstructionSet : 1;
    ULONG64 ErrorType : 1;
    ULONG64 Operation : 1;
    ULONG64 Flags : 1;
    ULONG64 Level : 1;
    ULONG64 CPUVersion : 1;
    ULONG64 CPUBrandString : 1;
    ULONG64 ProcessorId : 1;
    ULONG64 TargetAddress : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 InstructionPointer : 1;
    ULONG64 Reserved : 51;
    ULONG64 ValidBits;
};

typedef union _WHEA_REVISION {
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    USHORT AsUSHORT;
};

typedef union _WHEA_TIMESTAMP {
    ULONG64 Seconds : 8;
    ULONG64 Minutes : 8;
    ULONG64 Hours : 8;
    ULONG64 Precise : 1;
    ULONG64 Reserved : 7;
    ULONG64 Day : 8;
    ULONG64 Month : 8;
    ULONG64 Year : 8;
    ULONG64 Century : 8;
    union _LARGE_INTEGER AsLARGE_INTEGER;
};

typedef union _WHEA_XPF_BUS_CHECK {
    ULONG64 TransactionTypeValid : 1;
    ULONG64 OperationValid : 1;
    ULONG64 LevelValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ParticipationValid : 1;
    ULONG64 TimeoutValid : 1;
    ULONG64 AddressSpaceValid : 1;
    ULONG64 ReservedValid : 5;
    ULONG64 TransactionType : 2;
    ULONG64 Operation : 4;
    ULONG64 Level : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Participation : 2;
    ULONG64 Timeout : 1;
    ULONG64 AddressSpace : 2;
    ULONG64 Reserved : 29;
    ULONG64 XpfBusCheck;
};

typedef union _WHEA_XPF_CACHE_CHECK {
    ULONG64 TransactionTypeValid : 1;
    ULONG64 OperationValid : 1;
    ULONG64 LevelValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ReservedValid : 8;
    ULONG64 TransactionType : 2;
    ULONG64 Operation : 4;
    ULONG64 Level : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved : 34;
    ULONG64 XpfCacheCheck;
};

typedef union _WHEA_XPF_MS_CHECK {
    ULONG64 ErrorTypeValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ReservedValue : 10;
    ULONG64 ErrorType : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved : 40;
    ULONG64 XpfMsCheck;
};

typedef union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS {
    ULONG64 LocalAPICId : 1;
    ULONG64 CpuId : 1;
    ULONG64 ProcInfoCount : 6;
    ULONG64 ContextInfoCount : 6;
    ULONG64 Reserved : 50;
    ULONG64 ValidBits;
};

typedef union _WHEA_XPF_PROCINFO_VALIDBITS {
    ULONG64 CheckInfo : 1;
    ULONG64 TargetId : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 InstructionPointer : 1;
    ULONG64 Reserved : 59;
    ULONG64 ValidBits;
};

typedef union _WHEA_XPF_TLB_CHECK {
    ULONG64 TransactionTypeValid : 1;
    ULONG64 OperationValid : 1;
    ULONG64 LevelValid : 1;
    ULONG64 ProcessorContextCorruptValid : 1;
    ULONG64 UncorrectedValid : 1;
    ULONG64 PreciseIPValid : 1;
    ULONG64 RestartableIPValid : 1;
    ULONG64 OverflowValid : 1;
    ULONG64 ReservedValid : 8;
    ULONG64 TransactionType : 2;
    ULONG64 Operation : 4;
    ULONG64 Level : 3;
    ULONG64 ProcessorContextCorrupt : 1;
    ULONG64 Uncorrected : 1;
    ULONG64 PreciseIP : 1;
    ULONG64 RestartableIP : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved : 34;
    ULONG64 XpfTLBCheck;
};

typedef union _WOL_PATTERN {
     _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
     _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
     _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
     _WOL_BITMAP_PATTERN;
    struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN WoLBitMapPattern;
};

typedef union _XPF_MCE_FLAGS {
    ULONG MCG_CapabilityRW : 1;
    ULONG MCG_GlobalControlRW : 1;
    ULONG Reserved : 30;
    ULONG AsULONG;
};

typedef union _XPF_MC_BANK_FLAGS {
    UCHAR ClearOnInitializationRW : 1;
    UCHAR ControlDataRW : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union sockaddr_gen {
    struct sockaddr Address;
    struct sockaddr_in AddressIn;
    struct sockaddr_in6_old AddressIn6;
};

typedef enum ARP_HARDWARE_TYPE {
    ARP_HW_ENET = 1,
    ARP_HW_802 = 6
};

typedef enum ARP_OPCODE {
    ARP_REQUEST = 1,
    ARP_RESPONSE = 2
};

typedef enum AdapterState {
    Initialized = 0,
    Started = 1,
    Stopping = 2,
    Stopped = 3
};

typedef enum BUS_QUERY_ID_TYPE {
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5
};

typedef enum BooleanDisposition {
    FailIfNotFound = 0,
    DefaultToFalse = 1,
    DefaultToTrue = 2
};

typedef enum BouncePolicy {
    IfNeeded = 0,
    Always = 1
};

typedef enum CI_WINDOWS_LOCKDOWN_RESTRICTION {
    CI_WINDOWS_LOCKDOWN_RESTRICTION_NONE = 0,
    CI_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK = 1,
    CI_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK_PERMANENT = 2,
    CI_WINDOWS_LOCKDOWN_RESTRICTION_MAX = 3
};

typedef enum COMPARTMENT_ID {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID = 1
};

typedef enum CONTROL_CHANNEL_TRIGGER_STATUS {
    CONTROL_CHANNEL_TRIGGER_STATUS_INVALID = 0,
    CONTROL_CHANNEL_TRIGGER_STATUS_SOFTWARE_SLOT_ALLOCATED = 1,
    CONTROL_CHANNEL_TRIGGER_STATUS_HARDWARE_SLOT_ALLOCATED = 2,
    CONTROL_CHANNEL_TRIGGER_STATUS_POLICY_ERROR = 3,
    CONTROL_CHANNEL_TRIGGER_STATUS_SYSTEM_ERROR = 4,
    CONTROL_CHANNEL_TRIGGER_STATUS_TRANSPORT_DISCONNECTED = 5,
    CONTROL_CHANNEL_TRIGGER_STATUS_SERVICE_UNAVAILABLE = 6
};

typedef enum CPU_VENDORS {
    CPU_UNKNOWN = 0,
    CPU_AMD = 1,
    CPU_INTEL = 2,
    CPU_VIA = 3
};

typedef enum CallRunMode {
    RunSynchronous = 0,
    RunAsynchronous = 1,
    RunAsynchronousButOkayToBlock = 2
};

typedef enum DEVICE_REGISTRY_PROPERTY {
    DevicePropertyDeviceDescription = 0,
    DevicePropertyHardwareID = 1,
    DevicePropertyCompatibleIDs = 2,
    DevicePropertyBootConfiguration = 3,
    DevicePropertyBootConfigurationTranslated = 4,
    DevicePropertyClassName = 5,
    DevicePropertyClassGuid = 6,
    DevicePropertyDriverKeyName = 7,
    DevicePropertyManufacturer = 8,
    DevicePropertyFriendlyName = 9,
    DevicePropertyLocationInformation = 10,
    DevicePropertyPhysicalDeviceObjectName = 11,
    DevicePropertyBusTypeGuid = 12,
    DevicePropertyLegacyBusType = 13,
    DevicePropertyBusNumber = 14,
    DevicePropertyEnumeratorName = 15,
    DevicePropertyAddress = 16,
    DevicePropertyUINumber = 17,
    DevicePropertyInstallState = 18,
    DevicePropertyRemovalPolicy = 19,
    DevicePropertyResourceRequirements = 20,
    DevicePropertyAllocatedResources = 21,
    DevicePropertyContainerID = 22
};

typedef enum DEVICE_TEXT_TYPE {
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1
};

typedef enum DL_ADDRESS_TYPE {
    DlUnicast = 0,
    DlMulticast = 1,
    DlBroadcast = 2
};

typedef enum DMA_COMPLETION_STATUS {
    DmaComplete = 0,
    DmaAborted = 1,
    DmaError = 2,
    DmaCancelled = 3
};

typedef enum DOT11_BAND {
    dot11_band_2p4g = 1,
    dot11_band_4p9g = 2,
    dot11_band_5g = 3
};

typedef enum DOT11_DIRECTION {
    DOT11_DIR_INBOUND = 1,
    DOT11_DIR_OUTBOUND = 2,
    DOT11_DIR_BOTH = 3
};

typedef enum DOT11_DS_INFO {
    DOT11_DS_CHANGED = 0,
    DOT11_DS_UNCHANGED = 1,
    DOT11_DS_UNKNOWN = 2
};

typedef enum DOT11_MANUFACTURING_SELF_TEST_TYPE {
    DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE = 1,
    DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE = 2,
    DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE = 3
};

typedef enum DRIVER_CONFIG_ENUM {
    TX_THREAD_PRIORITY = 0,
    RX_THREAD_PRIORITY = 1,
    TX_THREAD_AFFINITY = 2,
    RX_THREAD_AFFINITY = 3,
    TX_THREAD_AFFINITY_ENABLED = 4,
    RX_THREAD_AFFINITY_ENABLED = 5,
    TX_REPORT_PERF_COUNTERS = 6,
    TX_PERF_COUNTERS_ITERATION_INTERVAL = 7,
    RX_REPORT_PERF_COUNTERS = 8,
    RX_PERF_COUNTERS_ITERATION_INTERVAL = 9,
    EC_UPDATE_PERF_COUNTERS = 10,
    ALLOW_DMA_HAL_BYPASS = 11,
    DMA_BOUNCE_POLICY = 12
};

typedef enum DeviceInterfaceType {
    Ndis = 0,
    NetAdapterCx = 1,
    SideBand = 2
};

typedef enum DeviceState {
    Initialized = 0,
    SelfManagedIoInitialized = 1,
    Started = 2,
    ReleasingPhase1Pending = 3,
    ReleasingPhase2Pending = 4,
    Released = 5,
    Removed = 6
};

typedef enum EM_RULE_STATE {
    STATE_FALSE = 0,
    STATE_UNKNOWN = 1,
    STATE_TRUE = 2
};

typedef enum ETW_COMPRESSION_RESUMPTION_MODE {
    EtwCompressionModeRestart = 0,
    EtwCompressionModeNoDisable = 1,
    EtwCompressionModeNoRestart = 2
};

typedef enum EcState {
    Stopped = 0,
    Started = 1,
    Stopping = 2,
    Terminated = 3
};

typedef enum EngineState {
    Invalid = 0,
    Stopped = 1,
    Running = 2,
    WaitingForWorkerStateEntry = 3,
    WaitingForWorkerEventAction = 4,
    WaitingForTimerFiredEvent = 5
};

typedef enum Event {
    _noevent_ = 0,
    AdapterHalted = 1,
    CxPostReleaseHardware = 2,
    CxPostSelfManagedIoCleanup = 3,
    CxPostSelfManagedIoInit = 4,
    CxPostSelfManagedIoRestart = 5,
    CxPrePrepareHardware = 6,
    CxPrePrepareHardwareFailedCleanup = 7,
    CxPreReleaseHardware = 8,
    CxPreSelfManagedIoSuspend = 9,
    No = 10,
    RefreshAdapterList = 11,
    StartComplete = 12,
    SyncFail = 13,
    SyncSuccess = 14,
    WdfDeviceObjectCleanup = 15,
    Yes = 16
};

typedef enum EventAction {
    Invalid = 0,
    NoAction = 1,
    ExternalTransition = 2,
    InternalTransition = 3,
    PopTransition = 4,
    Defer = 5,
    CallTransition = 6
};

typedef enum EventId {
    _noevent_ = 0,
    AdapterStart = 1,
    AdapterStop = 2,
    AdapterStopping = 3,
    DatapathStart = 4,
    DatapathStop = 5,
    EvtCleanup = 6,
    NdisMiniportHalt = 7,
    NdisMiniportInitializeEx = 8,
    NdisMiniportPause = 9,
    NdisMiniportRestart = 10,
    No = 11,
    SyncFail = 12,
    SyncSuccess = 13,
    Yes = 14
};

typedef enum FALLBACK_INDEX {
    FallbackIndexTcpFastopen = 0,
    FallbackIndexMax = 1
};

typedef enum FxDriverObjectUmFlags {
};

typedef enum HAL_APIC_DESTINATION_MODE {
    ApicDestinationModePhysical = 1,
    ApicDestinationModeLogicalFlat = 2,
    ApicDestinationModeLogicalClustered = 3,
    ApicDestinationModeUnknown = 4
};

typedef enum HAL_INTERRUPT_TARGET_TYPE {
    InterruptTargetTypeApic = 0,
    InterruptTargetTypeApicRequest = 1,
    InterruptTargetTypeGlobal = 2
};

typedef enum HAL_PCC_CHANNEL_POWER_COMMAND {
    HalPccChannelPowerCommandGetPowerState = 1,
    HalPccChannelPowerCommandSetPowerState = 2,
    HalPccChannelPowerCommandGetExpectedPowerConsumed = 3,
    HalPccChannelPowerCommandGetEnergyConsumed = 4,
    HalPccChannelPowerCommandMax = 5
};

typedef enum ICMP4_TIME_EXCEED_CODE {
    ICMP4_TIME_EXCEED_TRANSIT = 0,
    ICMP4_TIME_EXCEED_REASSEMBLY = 1
};

typedef enum ICMP4_UNREACH_CODE {
    ICMP4_UNREACH_NET = 0,
    ICMP4_UNREACH_HOST = 1,
    ICMP4_UNREACH_PROTOCOL = 2,
    ICMP4_UNREACH_PORT = 3,
    ICMP4_UNREACH_FRAG_NEEDED = 4,
    ICMP4_UNREACH_SOURCEROUTE_FAILED = 5,
    ICMP4_UNREACH_NET_UNKNOWN = 6,
    ICMP4_UNREACH_HOST_UNKNOWN = 7,
    ICMP4_UNREACH_ISOLATED = 8,
    ICMP4_UNREACH_NET_ADMIN = 9,
    ICMP4_UNREACH_HOST_ADMIN = 10,
    ICMP4_UNREACH_NET_TOS = 11,
    ICMP4_UNREACH_HOST_TOS = 12,
    ICMP4_UNREACH_ADMIN = 13
};

typedef enum IF_OPER_STATUS {
    IfOperStatusUp = 1,
    IfOperStatusDown = 2,
    IfOperStatusTesting = 3,
    IfOperStatusUnknown = 4,
    IfOperStatusDormant = 5,
    IfOperStatusNotPresent = 6,
    IfOperStatusLowerLayerDown = 7
};

typedef enum IGMP_MAX_RESP_CODE_TYPE {
    IGMP_MAX_RESP_CODE_TYPE_NORMAL = 0,
    IGMP_MAX_RESP_CODE_TYPE_FLOAT = 1
};

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
};

typedef enum IMPORT_OBJECT_NAME_TYPE {
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,
    IMPORT_OBJECT_NAME_EXPORTAS = 4
};

typedef enum IMPORT_OBJECT_TYPE {
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2
};

typedef enum INTERRUPT_CONNECTION_TYPE {
    InterruptTypeControllerInput = 0,
    InterruptTypeXapicMessage = 1,
    InterruptTypeHypertransport = 2,
    InterruptTypeMessageRequest = 3
};

typedef enum IPPROTO {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_GGP = 3,
    IPPROTO_IPV4 = 4,
    IPPROTO_ST = 5,
    IPPROTO_TCP = 6,
    IPPROTO_CBT = 7,
    IPPROTO_EGP = 8,
    IPPROTO_IGP = 9,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_RDP = 27,
    IPPROTO_IPV6 = 41,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_ND = 77,
    IPPROTO_ICLFXBM = 78,
    IPPROTO_PIM = 103,
    IPPROTO_PGM = 113,
    IPPROTO_L2TP = 115,
    IPPROTO_SCTP = 132,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
    IPPROTO_RESERVED_RAW = 257,
    IPPROTO_RESERVED_IPSEC = 258,
    IPPROTO_RESERVED_IPSECOFFLOAD = 259,
    IPPROTO_RESERVED_WNV = 260,
    IPPROTO_RESERVED_MAX = 261
};

typedef enum IPV4_OPTION_TYPE {
    IP_OPT_EOL = 0,
    IP_OPT_NOP = 1,
    IP_OPT_SECURITY = 130,
    IP_OPT_LSRR = 131,
    IP_OPT_TS = 68,
    IP_OPT_RR = 7,
    IP_OPT_SSRR = 137,
    IP_OPT_SID = 136,
    IP_OPT_ROUTER_ALERT = 148,
    IP_OPT_MULTIDEST = 149
};

typedef enum IPV6_OPTION_TYPE {
    IP6OPT_PAD1 = 0,
    IP6OPT_PADN = 1,
    IP6OPT_TUNNEL_LIMIT = 4,
    IP6OPT_ROUTER_ALERT = 5,
    IP6OPT_JUMBO = 194,
    IP6OPT_NSAP_ADDR = 195
};

typedef enum IP_OPTION_TIMESTAMP_FLAGS {
    IP_OPTION_TIMESTAMP_ONLY = 0,
    IP_OPTION_TIMESTAMP_ADDRESS = 1,
    IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS = 3
};

typedef enum IPv6ExtensionParseResult {
    Ok = 0,
    UnknownExtension = 1,
    MalformedExtension = 2
};

typedef enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3
};

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
};

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
};

typedef enum KD_CALLBACK_ACTION {
    KdConfigureDeviceAndContinue = 0,
    KdSkipDeviceAndContinue = 1,
    KdConfigureDeviceAndStop = 2,
    KdSkipDeviceAndStop = 3
};

typedef enum KD_NAMESPACE_ENUM {
    KdNameSpacePCI = 0,
    KdNameSpaceACPI = 1,
    KdNameSpaceAny = 2,
    KdNameSpaceNone = 3,
    KdNameSpaceMax = 4
};

typedef enum KE_PROCESSOR_CHANGE_NOTIFY_STATE {
    KeProcessorAddStartNotify = 0,
    KeProcessorAddCompleteNotify = 1,
    KeProcessorAddFailureNotify = 2
};

typedef enum KRegKey::BooleanDisposition {
    FailIfNotFound = 0,
    DefaultToFalse = 1,
    DefaultToTrue = 2
};

typedef enum LATENCY_TIME {
    LT_DONT_CARE = 0,
    LT_LOWEST_LATENCY = 1
};

typedef enum MCA_EXCEPTION_TYPE {
    HAL_MCE_RECORD = 0,
    HAL_MCA_RECORD = 1
};

typedef enum MEM_EXTENDED_PARAMETER_TYPE {
    MemExtendedParameterInvalidType = 0,
    MemExtendedParameterAddressRequirements = 1,
    MemExtendedParameterNumaNode = 2,
    MemExtendedParameterPartitionHandle = 3,
    MemExtendedParameterUserPhysicalHandle = 4,
    MemExtendedParameterAttributeFlags = 5,
    MemExtendedParameterMax = 6
};

typedef enum MEM_SECTION_EXTENDED_PARAMETER_TYPE {
    MemSectionExtendedParameterInvalidType = 0,
    MemSectionExtendedParameterUserPhysicalFlags = 1,
    MemSectionExtendedParameterNumaNode = 2,
    MemSectionExtendedParameterMax = 3
};

typedef enum MLD_MAX_RESP_CODE_TYPE {
    MLD_MAX_RESP_CODE_TYPE_NORMAL = 0,
    MLD_MAX_RESP_CODE_TYPE_FLOAT = 1
};

typedef enum MULTICAST_MODE_TYPE {
    MCAST_INCLUDE = 0,
    MCAST_EXCLUDE = 1
};

typedef enum NDIS_PD_CONTROL_TYPE {
    NdisPDCTL_IN = 0,
    NdisPDCTL_OUT = 1,
    NdisPDCTL_INOUT = 2
};

typedef enum NDIS_PD_COUNTER_TYPE {
    PDCounterTypeUnknown = 0,
    PDCounterTypeReceiveQueue = 1,
    PDCounterTypeTransmitQueue = 2,
    PDCounterTypeReceiveFilter = 3,
    PDCounterTypeMax = 4
};

typedef enum NDIS_PD_PROVIDER_CONTROL_CODE {
    NdisPDPCTLUnknown = 0,
    NdisPDPCTLCapabilities = 1,
    NdisPDPCTLMax = 2
};

typedef enum NDIS_PD_QUEUE_CONTROL_CODE {
    NdisPDQCTLUnknown = 0,
    NdisPDQCTLQueueDepthThreshold = 1,
    NdisPDQCTLModerationInterval = 2,
    NdisPDQCTLModerationCount = 3,
    NdisPDQCTLNotificationGroupId = 4,
    NdisPDQCTLSchedulerQueueId = 5,
    NdisPDQCTLMax = 6
};

typedef enum NDIS_PD_QUEUE_TYPE {
    PDQueueTypeUnknown = 0,
    PDQueueTypeReceive = 1,
    PDQueueTypeTransmit = 2,
    PDQueueTypeMax = 3
};

typedef enum ND_OPTION_TYPE {
    ND_OPT_SOURCE_LINKADDR = 1,
    ND_OPT_TARGET_LINKADDR = 2,
    ND_OPT_PREFIX_INFORMATION = 3,
    ND_OPT_REDIRECTED_HEADER = 4,
    ND_OPT_MTU = 5,
    ND_OPT_NBMA_SHORTCUT_LIMIT = 6,
    ND_OPT_ADVERTISEMENT_INTERVAL = 7,
    ND_OPT_HOME_AGENT_INFORMATION = 8,
    ND_OPT_SOURCE_ADDR_LIST = 9,
    ND_OPT_TARGET_ADDR_LIST = 10,
    ND_OPT_ROUTE_INFO = 24,
    ND_OPT_RDNSS = 25,
    ND_OPT_DNSSL = 31
};

typedef enum NET_CLIENT_TRI_STATE {
    NET_CLIENT_TRI_STATE_FALSE = 0,
    NET_CLIENT_TRI_STATE_TRUE = 1,
    NET_CLIENT_TRI_STATE_DEFAULT = 2
};

typedef enum NL_ADDRESS_TYPE {
    NlatUnspecified = 0,
    NlatUnicast = 1,
    NlatAnycast = 2,
    NlatMulticast = 3,
    NlatBroadcast = 4,
    NlatInvalid = 5
};

typedef enum NL_DAD_STATE {
    NldsInvalid = 0,
    NldsTentative = 1,
    NldsDuplicate = 2,
    NldsDeprecated = 3,
    NldsPreferred = 4,
    IpDadStateInvalid = 0,
    IpDadStateTentative = 1,
    IpDadStateDuplicate = 2,
    IpDadStateDeprecated = 3,
    IpDadStatePreferred = 4
};

typedef enum NL_PREFIX_ORIGIN {
    IpPrefixOriginOther = 0,
    IpPrefixOriginManual = 1,
    IpPrefixOriginWellKnown = 2,
    IpPrefixOriginDhcp = 3,
    IpPrefixOriginRouterAdvertisement = 4,
    IpPrefixOriginUnchanged = 16
};

typedef enum NL_ROUTE_PROTOCOL {
    RouteProtocolOther = 1,
    RouteProtocolLocal = 2,
    RouteProtocolNetMgmt = 3,
    RouteProtocolIcmp = 4,
    RouteProtocolEgp = 5,
    RouteProtocolGgp = 6,
    RouteProtocolHello = 7,
    RouteProtocolRip = 8,
    RouteProtocolIsIs = 9,
    RouteProtocolEsIs = 10,
    RouteProtocolCisco = 11,
    RouteProtocolBbn = 12,
    RouteProtocolOspf = 13,
    RouteProtocolBgp = 14,
    RouteProtocolIdpr = 15,
    RouteProtocolEigrp = 16,
    RouteProtocolDvmrp = 17,
    RouteProtocolRpl = 18,
    RouteProtocolDhcp = 19,
    MIB_IPPROTO_OTHER = 1,
    PROTO_IP_OTHER = 1,
    MIB_IPPROTO_LOCAL = 2,
    PROTO_IP_LOCAL = 2,
    MIB_IPPROTO_NETMGMT = 3,
    PROTO_IP_NETMGMT = 3,
    MIB_IPPROTO_ICMP = 4,
    PROTO_IP_ICMP = 4,
    MIB_IPPROTO_EGP = 5,
    PROTO_IP_EGP = 5,
    MIB_IPPROTO_GGP = 6,
    PROTO_IP_GGP = 6,
    MIB_IPPROTO_HELLO = 7,
    PROTO_IP_HELLO = 7,
    MIB_IPPROTO_RIP = 8,
    PROTO_IP_RIP = 8,
    MIB_IPPROTO_IS_IS = 9,
    PROTO_IP_IS_IS = 9,
    MIB_IPPROTO_ES_IS = 10,
    PROTO_IP_ES_IS = 10,
    MIB_IPPROTO_CISCO = 11,
    PROTO_IP_CISCO = 11,
    MIB_IPPROTO_BBN = 12,
    PROTO_IP_BBN = 12,
    MIB_IPPROTO_OSPF = 13,
    PROTO_IP_OSPF = 13,
    MIB_IPPROTO_BGP = 14,
    PROTO_IP_BGP = 14,
    MIB_IPPROTO_IDPR = 15,
    PROTO_IP_IDPR = 15,
    MIB_IPPROTO_EIGRP = 16,
    PROTO_IP_EIGRP = 16,
    MIB_IPPROTO_DVMRP = 17,
    PROTO_IP_DVMRP = 17,
    MIB_IPPROTO_RPL = 18,
    PROTO_IP_RPL = 18,
    MIB_IPPROTO_DHCP = 19,
    PROTO_IP_DHCP = 19,
    MIB_IPPROTO_NT_AUTOSTATIC = 10002,
    PROTO_IP_NT_AUTOSTATIC = 10002,
    MIB_IPPROTO_NT_STATIC = 10006,
    PROTO_IP_NT_STATIC = 10006,
    MIB_IPPROTO_NT_STATIC_NON_DOD = 10007,
    PROTO_IP_NT_STATIC_NON_DOD = 10007
};

typedef enum NL_SUFFIX_ORIGIN {
    NlsoOther = 0,
    NlsoManual = 1,
    NlsoWellKnown = 2,
    NlsoDhcp = 3,
    NlsoLinkLayerAddress = 4,
    NlsoRandom = 5,
    IpSuffixOriginOther = 0,
    IpSuffixOriginManual = 1,
    IpSuffixOriginWellKnown = 2,
    IpSuffixOriginDhcp = 3,
    IpSuffixOriginLinkLayerAddress = 4,
    IpSuffixOriginRandom = 5,
    IpSuffixOriginUnchanged = 16
};

typedef enum NxAdapterStateMachine<NxAdapter>::Event {
    _noevent_ = 0,
    AdapterStart = 1,
    AdapterStop = 2,
    AdapterStopping = 3,
    DatapathStart = 4,
    DatapathStop = 5,
    EvtCleanup = 6,
    NdisMiniportHalt = 7,
    NdisMiniportInitializeEx = 8,
    NdisMiniportPause = 9,
    NdisMiniportRestart = 10,
    No = 11,
    SyncFail = 12,
    SyncSuccess = 13,
    Yes = 14
};

typedef enum NxAdapterStateMachine<NxAdapter>::EventId {
    _noevent_ = 0,
    AdapterStart = 1,
    AdapterStop = 2,
    AdapterStopping = 3,
    DatapathStart = 4,
    DatapathStop = 5,
    EvtCleanup = 6,
    NdisMiniportHalt = 7,
    NdisMiniportInitializeEx = 8,
    NdisMiniportPause = 9,
    NdisMiniportRestart = 10,
    No = 11,
    SyncFail = 12,
    SyncSuccess = 13,
    Yes = 14
};

typedef enum NxAdapterStateMachine<NxAdapter>::StateId {
    _nostate_ = 0,
    AdapterDatapathStopping = 1,
    DatapathHaltDestroying = 2,
    DatapathPaused = 3,
    DatapathPausedCreating = 4,
    DatapathPausedDestroying = 5,
    DatapathPausedStarting = 6,
    DatapathPauseStopping = 7,
    DatapathRemovePaused = 8,
    DatapathRestartDestroying = 9,
    DatapathRestartedCreating = 10,
    DatapathRestartedStarting = 11,
    DatapathRestartRemoving = 12,
    DatapathRestartRemoving2 = 13,
    DatapathRestartStopping = 14,
    DatapathRunning = 15,
    DatapathStoppedPaused = 16,
    DatapathStoppingPauseComplete = 17,
    Halted = 18,
    Halting = 19,
    Initialized = 20,
    Paused = 21,
    PauseSurpriseRemoving = 22,
    Restarted = 23,
    SurpriseRemovePaused = 24
};

typedef enum NxAdapterStateMachine<NxAdapter>::StateIndex {
    _nostate_ = 0,
    AdapterDatapathStopping = 1,
    DatapathHaltDestroying = 2,
    DatapathPaused = 3,
    DatapathPausedCreating = 4,
    DatapathPausedDestroying = 5,
    DatapathPausedStarting = 6,
    DatapathPauseStopping = 7,
    DatapathRemovePaused = 8,
    DatapathRestartDestroying = 9,
    DatapathRestartedCreating = 10,
    DatapathRestartedStarting = 11,
    DatapathRestartRemoving = 12,
    DatapathRestartRemoving2 = 13,
    DatapathRestartStopping = 14,
    DatapathRunning = 15,
    DatapathStoppedPaused = 16,
    DatapathStoppingPauseComplete = 17,
    Halted = 18,
    Halting = 19,
    Initialized = 20,
    Paused = 21,
    PauseSurpriseRemoving = 22,
    Restarted = 23,
    SurpriseRemovePaused = 24
};

typedef enum NxAdapterStateMachine<NxAdapter>::SubmachineName {
    _nosubmachine_ = 0,
    NxAdapter = 1
};

typedef enum NxDeviceStateMachine<NxDevice>::Event {
    _noevent_ = 0,
    AdapterHalted = 1,
    CxPostReleaseHardware = 2,
    CxPostSelfManagedIoCleanup = 3,
    CxPostSelfManagedIoInit = 4,
    CxPostSelfManagedIoRestart = 5,
    CxPrePrepareHardware = 6,
    CxPrePrepareHardwareFailedCleanup = 7,
    CxPreReleaseHardware = 8,
    CxPreSelfManagedIoSuspend = 9,
    No = 10,
    RefreshAdapterList = 11,
    StartComplete = 12,
    SyncFail = 13,
    SyncSuccess = 14,
    WdfDeviceObjectCleanup = 15,
    Yes = 16
};

typedef enum NxDeviceStateMachine<NxDevice>::EventId {
    _noevent_ = 0,
    AdapterHalted = 1,
    CxPostReleaseHardware = 2,
    CxPostSelfManagedIoCleanup = 3,
    CxPostSelfManagedIoInit = 4,
    CxPostSelfManagedIoRestart = 5,
    CxPrePrepareHardware = 6,
    CxPrePrepareHardwareFailedCleanup = 7,
    CxPreReleaseHardware = 8,
    CxPreSelfManagedIoSuspend = 9,
    No = 10,
    RefreshAdapterList = 11,
    StartComplete = 12,
    SyncFail = 13,
    SyncSuccess = 14,
    WdfDeviceObjectCleanup = 15,
    Yes = 16
};

typedef enum NxDeviceStateMachine<NxDevice>::StateId {
    _nostate_ = 0,
    CxPrepareHardwareFailed = 1,
    DeviceAddFailedReportToNdis = 2,
    DeviceReleasingWaitForNdisHalt = 3,
    Initialized = 4,
    InitializedPrePrepareHardware = 5,
    InitializedWaitForStart = 6,
    RebalancingPrepareForStart = 7,
    RebalancingPrePrepareHardware = 8,
    RebalancingReinitializeSelfManagedIo = 9,
    Released = 10,
    ReleasedPrepareRebalance = 11,
    ReleasedReportToNdis = 12,
    ReleasedSelfManagedIoCleanup = 13,
    ReleasingAreAllAdaptersHalted = 14,
    ReleasingIsSurpriseRemoved = 15,
    ReleasingReportPreReleaseToNdis = 16,
    ReleasingReportSurpriseRemoveToNdis = 17,
    ReleasingSurpriseRemovedAreAllAdaptersHalted = 18,
    ReleasingSurpriseRemovedReportPreReleaseToNdis = 19,
    ReleasingSurpriseRemovedWaitForNdisHalt = 20,
    ReleasingSuspendIo = 21,
    ReleasingWaitClientRelease = 22,
    ReleasingWaitForReleaseHardware = 23,
    Removed = 24,
    StartedD0 = 25,
    StartedDx = 26,
    StartedEnteringHighPower = 27,
    StartedEnteringLowPower = 28,
    StartingCheckPowerPolicyOwnership = 29,
    StartingCompleteStart = 30,
    StartingD0 = 31,
    StartingInitializeSelfManagedIo = 32,
    WaitForCleanup = 33
};

typedef enum NxDeviceStateMachine<NxDevice>::StateIndex {
    _nostate_ = 0,
    CxPrepareHardwareFailed = 1,
    DeviceAddFailedReportToNdis = 2,
    DeviceReleasingWaitForNdisHalt = 3,
    Initialized = 4,
    InitializedPrePrepareHardware = 5,
    InitializedWaitForStart = 6,
    RebalancingPrepareForStart = 7,
    RebalancingPrePrepareHardware = 8,
    RebalancingReinitializeSelfManagedIo = 9,
    Released = 10,
    ReleasedPrepareRebalance = 11,
    ReleasedReportToNdis = 12,
    ReleasedSelfManagedIoCleanup = 13,
    ReleasingAreAllAdaptersHalted = 14,
    ReleasingIsSurpriseRemoved = 15,
    ReleasingReportPreReleaseToNdis = 16,
    ReleasingReportSurpriseRemoveToNdis = 17,
    ReleasingSurpriseRemovedAreAllAdaptersHalted = 18,
    ReleasingSurpriseRemovedReportPreReleaseToNdis = 19,
    ReleasingSurpriseRemovedWaitForNdisHalt = 20,
    ReleasingSuspendIo = 21,
    ReleasingWaitClientRelease = 22,
    ReleasingWaitForReleaseHardware = 23,
    Removed = 24,
    StartedD0 = 25,
    StartedDx = 26,
    StartedEnteringHighPower = 27,
    StartedEnteringLowPower = 28,
    StartingCheckPowerPolicyOwnership = 29,
    StartingCompleteStart = 30,
    StartingD0 = 31,
    StartingInitializeSelfManagedIo = 32,
    WaitForCleanup = 33
};

typedef enum NxDeviceStateMachine<NxDevice>::SubmachineName {
    _nosubmachine_ = 0,
    StateMachine = 1
};

typedef enum NxExecutionContext::EcState {
    Stopped = 0,
    Started = 1,
    Stopping = 2,
    Terminated = 3
};

typedef enum NxNblTranslationStatus {
    Success = 0,
    InsufficientResources = 1,
    BounceRequired = 2,
    CannotTranslate = 3
};

typedef enum NxQueue::Type {
    Rx = 0,
    Tx = 1
};

typedef enum OffloadType {
    Checksum = 0,
    Lso = 1,
    Rsc = 2
};

typedef enum PCI_BUS_WIDTH {
    BusWidth32Bits = 0,
    BusWidth64Bits = 1
};

typedef enum PCI_EXPRESS_ASPM_CONTROL {
    L0sAndL1EntryDisabled = 0,
    L0sEntryEnabled = 1,
    L1EntryEnabled = 2,
    L0sAndL1EntryEnabled = 3
};

typedef enum PCI_EXPRESS_ASPM_SUPPORT {
    NoAspmSupport = 0,
    L0sEntrySupport = 1,
    L1EntrySupport = 2,
    L0sAndL1EntrySupport = 3
};

typedef enum PCI_EXPRESS_CARD_PRESENCE {
    SlotEmpty = 0,
    CardPresent = 1
};

typedef enum PCI_EXPRESS_DEVICE_TYPE {
    PciExpressEndpoint = 0,
    PciExpressLegacyEndpoint = 1,
    PciExpressRootPort = 4,
    PciExpressUpstreamSwitchPort = 5,
    PciExpressDownstreamSwitchPort = 6,
    PciExpressToPciXBridge = 7,
    PciXToExpressBridge = 8,
    PciExpressRootComplexIntegratedEndpoint = 9,
    PciExpressRootComplexEventCollector = 10
};

typedef enum PCI_EXPRESS_INDICATOR_STATE {
    IndicatorOn = 1,
    IndicatorBlink = 2,
    IndicatorOff = 3
};

typedef enum PCI_EXPRESS_L0s_EXIT_LATENCY {
    L0s_Below64ns = 0,
    L0s_64ns_128ns = 1,
    L0s_128ns_256ns = 2,
    L0s_256ns_512ns = 3,
    L0s_512ns_1us = 4,
    L0s_1us_2us = 5,
    L0s_2us_4us = 6,
    L0s_Above4us = 7
};

typedef enum PCI_EXPRESS_L1_EXIT_LATENCY {
    L1_Below1us = 0,
    L1_1us_2us = 1,
    L1_2us_4us = 2,
    L1_4us_8us = 3,
    L1_8us_16us = 4,
    L1_16us_32us = 5,
    L1_32us_64us = 6,
    L1_Above64us = 7
};

typedef enum PCI_EXPRESS_MAX_PAYLOAD_SIZE {
    MaxPayload128Bytes = 0,
    MaxPayload256Bytes = 1,
    MaxPayload512Bytes = 2,
    MaxPayload1024Bytes = 3,
    MaxPayload2048Bytes = 4,
    MaxPayload4096Bytes = 5
};

typedef enum PCI_EXPRESS_MRL_STATE {
    MRLClosed = 0,
    MRLOpen = 1
};

typedef enum PCI_EXPRESS_POWER_STATE {
    PowerOn = 0,
    PowerOff = 1
};

typedef enum PCI_HT_CapabilitiesType {
    HTSlavePrimary0 = 0,
    HTSlavePrimary1 = 1,
    HTSlavePrimary2 = 2,
    HTSlavePrimary3 = 3,
    HTHostSecondary0 = 4,
    HTHostSecondary1 = 5,
    HTHostSecondary2 = 6,
    HTHostSecondary3 = 7,
    HTInterruptDiscoveryConfig = 16,
    HTAddressMapping = 20,
    HTInterruptMsiMapping = 21
};

typedef enum PNP_DEPENDENCY_PATH_TYPE {
    DependencyPathNone = 0,
    DependencyPathDirect = 1,
    DependencyPathIndirect = 2
};

typedef enum POWER_ACTION {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8
};

typedef enum POWER_INFORMATION_LEVEL {
    SystemPowerPolicyAc = 0,
    SystemPowerPolicyDc = 1,
    VerifySystemPolicyAc = 2,
    VerifySystemPolicyDc = 3,
    SystemPowerCapabilities = 4,
    SystemBatteryState = 5,
    SystemPowerStateHandler = 6,
    ProcessorStateHandler = 7,
    SystemPowerPolicyCurrent = 8,
    AdministratorPowerPolicy = 9,
    SystemReserveHiberFile = 10,
    ProcessorInformation = 11,
    SystemPowerInformation = 12,
    ProcessorStateHandler2 = 13,
    LastWakeTime = 14,
    LastSleepTime = 15,
    SystemExecutionState = 16,
    SystemPowerStateNotifyHandler = 17,
    ProcessorPowerPolicyAc = 18,
    ProcessorPowerPolicyDc = 19,
    VerifyProcessorPowerPolicyAc = 20,
    VerifyProcessorPowerPolicyDc = 21,
    ProcessorPowerPolicyCurrent = 22,
    SystemPowerStateLogging = 23,
    SystemPowerLoggingEntry = 24,
    SetPowerSettingValue = 25,
    NotifyUserPowerSetting = 26,
    PowerInformationLevelUnused0 = 27,
    SystemMonitorHiberBootPowerOff = 28,
    SystemVideoState = 29,
    TraceApplicationPowerMessage = 30,
    TraceApplicationPowerMessageEnd = 31,
    ProcessorPerfStates = 32,
    ProcessorIdleStates = 33,
    ProcessorCap = 34,
    SystemWakeSource = 35,
    SystemHiberFileInformation = 36,
    TraceServicePowerMessage = 37,
    ProcessorLoad = 38,
    PowerShutdownNotification = 39,
    MonitorCapabilities = 40,
    SessionPowerInit = 41,
    SessionDisplayState = 42,
    PowerRequestCreate = 43,
    PowerRequestAction = 44,
    GetPowerRequestList = 45,
    ProcessorInformationEx = 46,
    NotifyUserModeLegacyPowerEvent = 47,
    GroupPark = 48,
    ProcessorIdleDomains = 49,
    WakeTimerList = 50,
    SystemHiberFileSize = 51,
    ProcessorIdleStatesHv = 52,
    ProcessorPerfStatesHv = 53,
    ProcessorPerfCapHv = 54,
    ProcessorSetIdle = 55,
    LogicalProcessorIdling = 56,
    UserPresence = 57,
    PowerSettingNotificationName = 58,
    GetPowerSettingValue = 59,
    IdleResiliency = 60,
    SessionRITState = 61,
    SessionConnectNotification = 62,
    SessionPowerCleanup = 63,
    SessionLockState = 64,
    SystemHiberbootState = 65,
    PlatformInformation = 66,
    PdcInvocation = 67,
    MonitorInvocation = 68,
    FirmwareTableInformationRegistered = 69,
    SetShutdownSelectedTime = 70,
    SuspendResumeInvocation = 71,
    PlmPowerRequestCreate = 72,
    ScreenOff = 73,
    CsDeviceNotification = 74,
    PlatformRole = 75,
    LastResumePerformance = 76,
    DisplayBurst = 77,
    ExitLatencySamplingPercentage = 78,
    RegisterSpmPowerSettings = 79,
    PlatformIdleStates = 80,
    ProcessorIdleVeto = 81,
    PlatformIdleVeto = 82,
    SystemBatteryStatePrecise = 83,
    ThermalEvent = 84,
    PowerRequestActionInternal = 85,
    BatteryDeviceState = 86,
    PowerInformationInternal = 87,
    ThermalStandby = 88,
    SystemHiberFileType = 89,
    PhysicalPowerButtonPress = 90,
    QueryPotentialDripsConstraint = 91,
    EnergyTrackerCreate = 92,
    EnergyTrackerQuery = 93,
    UpdateBlackBoxRecorder = 94,
    PowerInformationLevelMaximum = 95
};

typedef enum POWER_MONITOR_REQUEST_REASON {
    MonitorRequestReasonUnknown = 0,
    MonitorRequestReasonPowerButton = 1,
    MonitorRequestReasonRemoteConnection = 2,
    MonitorRequestReasonScMonitorpower = 3,
    MonitorRequestReasonUserInput = 4,
    MonitorRequestReasonAcDcDisplayBurst = 5,
    MonitorRequestReasonUserDisplayBurst = 6,
    MonitorRequestReasonPoSetSystemState = 7,
    MonitorRequestReasonSetThreadExecutionState = 8,
    MonitorRequestReasonFullWake = 9,
    MonitorRequestReasonSessionUnlock = 10,
    MonitorRequestReasonScreenOffRequest = 11,
    MonitorRequestReasonIdleTimeout = 12,
    MonitorRequestReasonPolicyChange = 13,
    MonitorRequestReasonSleepButton = 14,
    MonitorRequestReasonLid = 15,
    MonitorRequestReasonBatteryCountChange = 16,
    MonitorRequestReasonGracePeriod = 17,
    MonitorRequestReasonPnP = 18,
    MonitorRequestReasonDP = 19,
    MonitorRequestReasonSxTransition = 20,
    MonitorRequestReasonSystemIdle = 21,
    MonitorRequestReasonNearProximity = 22,
    MonitorRequestReasonThermalStandby = 23,
    MonitorRequestReasonResumePdc = 24,
    MonitorRequestReasonResumeS4 = 25,
    MonitorRequestReasonTerminal = 26,
    MonitorRequestReasonPdcSignal = 27,
    MonitorRequestReasonAcDcDisplayBurstSuppressed = 28,
    MonitorRequestReasonSystemStateEntered = 29,
    MonitorRequestReasonWinrt = 30,
    MonitorRequestReasonUserInputKeyboard = 31,
    MonitorRequestReasonUserInputMouse = 32,
    MonitorRequestReasonUserInputTouch = 33,
    MonitorRequestReasonUserInputPen = 34,
    MonitorRequestReasonUserInputAccelerometer = 35,
    MonitorRequestReasonUserInputHid = 36,
    MonitorRequestReasonUserInputPoUserPresent = 37,
    MonitorRequestReasonUserInputSessionSwitch = 38,
    MonitorRequestReasonUserInputInitialization = 39,
    MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40,
    MonitorRequestReasonPdcSignalWindowsMobileShell = 41,
    MonitorRequestReasonPdcSignalHeyCortana = 42,
    MonitorRequestReasonPdcSignalHolographicShell = 43,
    MonitorRequestReasonPdcSignalFingerprint = 44,
    MonitorRequestReasonDirectedDrips = 45,
    MonitorRequestReasonMax = 46
};

typedef enum POWER_STATE_DISABLED_TYPE {
    PoDisabledStateSleeping1 = 0,
    PoDisabledStateSleeping2 = 1,
    PoDisabledStateSleeping3 = 2,
    PoDisabledStateSleeping4 = 3,
    PoDisabledStateSleeping0Idle = 4,
    PoDisabledStateReserved5 = 5,
    PoDisabledStateSleeping4Firmware = 6,
    PoDisabledStateMaximum = 7
};

typedef enum POWER_STATE_HANDLER_TYPE {
    PowerStateSleeping1 = 0,
    PowerStateSleeping2 = 1,
    PowerStateSleeping3 = 2,
    PowerStateSleeping4 = 3,
    PowerStateShutdownOff = 4,
    PowerStateShutdownReset = 5,
    PowerStateSleeping4Firmware = 6,
    PowerStateMaximum = 7
};

typedef enum POWER_USER_PRESENCE_TYPE {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 255
};

typedef enum PO_FIXED_WAKE_SOURCE_TYPE {
    FixedWakeSourcePowerButton = 0,
    FixedWakeSourceSleepButton = 1,
    FixedWakeSourceRtc = 2,
    FixedWakeSourceDozeToHibernate = 3
};

typedef enum PO_INTERNAL_WAKE_SOURCE_TYPE {
    InternalWakeSourceDozeToHibernate = 0,
    InternalWakeSourcePredictedUserPresence = 1
};

typedef enum PO_LATENCY_HINT_TYPE {
    PoLatencyHintMouse = 0,
    PoLatencyHintKeyboard = 1,
    PoLatencyHintTouch = 2,
    PoLatencyHintLowLatencyWorkload = 3,
    PoLatencyHintDeadline = 4,
    PoLatencyHintNfc = 5,
    PoLatencyHintDwm = 6,
    PoLatencyHintMaximum = 7
};

typedef enum PO_WAKE_SOURCE_TYPE {
    DeviceWakeSourceType = 0,
    FixedWakeSourceType = 1,
    TimerWakeSourceType = 2,
    TimerPresumedWakeSourceType = 3,
    InternalWakeSourceType = 4
};

typedef enum PS_CREATE_STATE {
    PsCreateInitialState = 0,
    PsCreateFailOnFileOpen = 1,
    PsCreateFailOnSectionCreate = 2,
    PsCreateFailExeFormat = 3,
    PsCreateFailMachineMismatch = 4,
    PsCreateFailExeName = 5,
    PsCreateSuccess = 6,
    PsCreateMaximumStates = 7
};

typedef enum RCVALL_VALUE {
    RCVALL_OFF = 0,
    RCVALL_ON = 1,
    RCVALL_SOCKETLEVELONLY = 2,
    RCVALL_IPLEVEL = 3
};

typedef enum RTL_BSD_ITEM_TYPE {
    RtlBsdItemVersionNumber = 0,
    RtlBsdItemProductType = 1,
    RtlBsdItemAabEnabled = 2,
    RtlBsdItemAabTimeout = 3,
    RtlBsdItemBootGood = 4,
    RtlBsdItemBootShutdown = 5,
    RtlBsdSleepInProgress = 6,
    RtlBsdPowerTransition = 7,
    RtlBsdItemBootAttemptCount = 8,
    RtlBsdItemBootCheckpoint = 9,
    RtlBsdItemBootId = 10,
    RtlBsdItemShutdownBootId = 11,
    RtlBsdItemReportedAbnormalShutdownBootId = 12,
    RtlBsdItemErrorInfo = 13,
    RtlBsdItemPowerButtonPressInfo = 14,
    RtlBsdItemChecksum = 15,
    RtlBsdPowerTransitionExtension = 16,
    RtlBsdItemMax = 17
};

typedef enum RTL_DISK_SPACE_POLICY {
    RtlDiskSpacePolicyVeryLow = 5,
    RtlDiskSpacePolicyLow = 10,
    RtlDiskSpacePolicyBelowNormal = 15,
    RtlDiskSpacePolicyNormal = 20
};

typedef enum RTL_DISK_SPEED_POLICY {
    RtlDiskSpeedPolicyNormal = 10,
    RtlDiskSpeedPolicyFast = 20
};

typedef enum RTL_DISK_WRITE_CONSTRAINT_POLICY {
    RtlDiskWriteConstraintPolicyLimited = 50,
    RtlDiskWriteConstraintPolicyNormal = 100
};

typedef enum RTL_PHYSICAL_MEMORY_POLICY {
    RtlPhysicalMemoryPolicyLow = 10,
    RtlPhysicalMemoryPolicyNormal = 20
};

typedef enum ReplacesCorHdrNumericDefines {
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
    COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
};

typedef enum SCOPE_LEVEL {
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14,
    ScopeLevelCount = 16
};

typedef enum SE_WS_APPX_SIGNATURE_ORIGIN {
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4
};

typedef enum SYSTEM_POWER_CONDITION {
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3
};

typedef enum SmFx::EventQueueingDisposition {
    Invalid = 0,
    Unlimited = 1,
    KeepLatestOnly = 2,
    KeepOldestOnly = 3
};

typedef enum SmFx::InternalTransitionFlags {
    None = 0,
    RequiresPassiveLevel = 1,
    RequiresDedicatedThread = 2
};

typedef enum SmFx::MachineException {
    None = 0,
    UnhandledEvent = 1,
    EventQueueOverflow = 2,
    StackOverflow = 3
};

typedef enum SmFx::Memory::PoolType {
    Paged = 0,
    NonPaged = 1
};

typedef enum SmFx::StateFlags {
    None = 0,
    RequiresPassiveLevel = 1,
    RequiresDedicatedThread = 2
};

typedef enum SmFx::StateMachineEngine::StateMachineEngineImpl::EngineState {
    Invalid = 0,
    Stopped = 1,
    Running = 2,
    WaitingForWorkerStateEntry = 3,
    WaitingForWorkerEventAction = 4,
    WaitingForTimerFiredEvent = 5
};

typedef enum SmFx::StateMachineEngine::StateMachineEngineImpl::EventAction {
    Invalid = 0,
    NoAction = 1,
    ExternalTransition = 2,
    InternalTransition = 3,
    PopTransition = 4,
    Defer = 5,
    CallTransition = 6
};

typedef enum SmFx::StateSlotType {
    None = 0,
    EntryFunction = 1,
    ExternalTransitions = 2,
    InternalTransitions = 4,
    DeferredEvents = 8,
    PopTransitions = 16,
    PurgeEvents = 32,
    StopTimerOnExit = 64
};

typedef enum SmFx::StateType {
    Invalid = 0,
    Sync = 1,
    Async = 2,
    Call = 3
};

typedef enum SmFx::StopTimerResult {
    Invalid = 0,
    TimerStopped = 1,
    WaitForTimerFiredEventAndIgnoreIt = 2
};

typedef enum SmFx::TransitionType {
    Invalid = 0,
    External = 1,
    Internal = 2,
    ExplicitPop = 3,
    ImplicitPop = 4,
    Call = 5,
    Ignore = 6,
    Purge = 7
};

typedef enum StateId {
    _nostate_ = 0,
    AdapterDatapathStopping = 1,
    DatapathHaltDestroying = 2,
    DatapathPaused = 3,
    DatapathPausedCreating = 4,
    DatapathPausedDestroying = 5,
    DatapathPausedStarting = 6,
    DatapathPauseStopping = 7,
    DatapathRemovePaused = 8,
    DatapathRestartDestroying = 9,
    DatapathRestartedCreating = 10,
    DatapathRestartedStarting = 11,
    DatapathRestartRemoving = 12,
    DatapathRestartRemoving2 = 13,
    DatapathRestartStopping = 14,
    DatapathRunning = 15,
    DatapathStoppedPaused = 16,
    DatapathStoppingPauseComplete = 17,
    Halted = 18,
    Halting = 19,
    Initialized = 20,
    Paused = 21,
    PauseSurpriseRemoving = 22,
    Restarted = 23,
    SurpriseRemovePaused = 24
};

typedef enum StateIndex {
    _nostate_ = 0,
    CxPrepareHardwareFailed = 1,
    DeviceAddFailedReportToNdis = 2,
    DeviceReleasingWaitForNdisHalt = 3,
    Initialized = 4,
    InitializedPrePrepareHardware = 5,
    InitializedWaitForStart = 6,
    RebalancingPrepareForStart = 7,
    RebalancingPrePrepareHardware = 8,
    RebalancingReinitializeSelfManagedIo = 9,
    Released = 10,
    ReleasedPrepareRebalance = 11,
    ReleasedReportToNdis = 12,
    ReleasedSelfManagedIoCleanup = 13,
    ReleasingAreAllAdaptersHalted = 14,
    ReleasingIsSurpriseRemoved = 15,
    ReleasingReportPreReleaseToNdis = 16,
    ReleasingReportSurpriseRemoveToNdis = 17,
    ReleasingSurpriseRemovedAreAllAdaptersHalted = 18,
    ReleasingSurpriseRemovedReportPreReleaseToNdis = 19,
    ReleasingSurpriseRemovedWaitForNdisHalt = 20,
    ReleasingSuspendIo = 21,
    ReleasingWaitClientRelease = 22,
    ReleasingWaitForReleaseHardware = 23,
    Removed = 24,
    StartedD0 = 25,
    StartedDx = 26,
    StartedEnteringHighPower = 27,
    StartedEnteringLowPower = 28,
    StartingCheckPowerPolicyOwnership = 29,
    StartingCompleteStart = 30,
    StartingD0 = 31,
    StartingInitializeSelfManagedIo = 32,
    WaitForCleanup = 33
};

typedef enum SubmachineName {
    _nosubmachine_ = 0,
    StateMachine = 1
};

typedef enum TCP_ICW_LEVEL {
    TCP_ICW_LEVEL_DEFAULT = 0,
    TCP_ICW_LEVEL_HIGH = 1,
    TCP_ICW_LEVEL_VERY_HIGH = 2,
    TCP_ICW_LEVEL_AGGRESSIVE = 3,
    TCP_ICW_LEVEL_EXPERIMENTAL = 4,
    TCP_ICW_LEVEL_COMPAT = 254,
    TCP_ICW_LEVEL_MAX = 255
};

typedef enum TUNNEL_TYPE {
    TUNNEL_TYPE_NONE = 0,
    TUNNEL_TYPE_OTHER = 1,
    TUNNEL_TYPE_DIRECT = 2,
    TUNNEL_TYPE_6TO4 = 11,
    TUNNEL_TYPE_ISATAP = 13,
    TUNNEL_TYPE_TEREDO = 14,
    TUNNEL_TYPE_IPHTTPS = 15
};

typedef enum TlgIn_t {
    TlgInNULL = 0,
    TlgInUNICODESTRING = 1,
    TlgInANSISTRING = 2,
    TlgInINT8 = 3,
    TlgInUINT8 = 4,
    TlgInINT16 = 5,
    TlgInUINT16 = 6,
    TlgInINT32 = 7,
    TlgInUINT32 = 8,
    TlgInINT64 = 9,
    TlgInUINT64 = 10,
    TlgInFLOAT = 11,
    TlgInDOUBLE = 12,
    TlgInBOOL32 = 13,
    TlgInBINARY = 14,
    TlgInGUID = 15,
    _TlgInPOINTER_unsupported = 16,
    TlgInFILETIME = 17,
    TlgInSYSTEMTIME = 18,
    TlgInSID = 19,
    TlgInHEXINT32 = 20,
    TlgInHEXINT64 = 21,
    TlgInCOUNTEDSTRING = 22,
    TlgInCOUNTEDANSISTRING = 23,
    _TlgInSTRUCT = 24,
    TlgInCOUNTEDBINARY = 25,
    _TlgInMax = 26,
    TlgInINTPTR = 9,
    TlgInUINTPTR = 10,
    TlgInPOINTER = 21,
    _TlgInCcount = 32,
    TlgInVcount = 64,
    _TlgInChain = 128,
    _TlgInCustom = 96,
    _TlgInTypeMask = 31,
    _TlgInCountMask = 96,
    _TlgInFlagMask = 224
};

typedef enum TlgOut_t {
    TlgOutNULL = 0,
    TlgOutNOPRINT = 1,
    TlgOutSTRING = 2,
    TlgOutBOOLEAN = 3,
    TlgOutHEX = 4,
    TlgOutPID = 5,
    TlgOutTID = 6,
    TlgOutPORT = 7,
    TlgOutIPV4 = 8,
    TlgOutIPV6 = 9,
    TlgOutSOCKETADDRESS = 10,
    TlgOutXML = 11,
    TlgOutJSON = 12,
    TlgOutWIN32ERROR = 13,
    TlgOutNTSTATUS = 14,
    TlgOutHRESULT = 15,
    TlgOutFILETIME = 16,
    TlgOutSIGNED = 17,
    TlgOutUNSIGNED = 18,
    TlgOutUTF8 = 35,
    TlgOutPKCS7_WITH_TYPE_INFO = 36,
    TlgOutCODE_POINTER = 37,
    _TlgOutMax = 38,
    _TlgOutChain = 128,
    _TlgOutTypeMask = 127
};

typedef enum Type {
    Rx = 0,
    Tx = 1
};

typedef enum VERIFIER_MODE {
    VERIFIER_MODE_UNUSED = 0,
    VERIFIER_MODE_TRIAGE = 1,
    VERIFIER_MODE_FIELD = 2,
    VERIFIER_MODE_LOGO = 3,
    VERIFIER_MODE_TEST = 4
};

typedef enum WELL_KNOWN_SID_TYPE {
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
    WinBuiltinDeviceOwnersSid = 119
};

typedef enum WPP_CTL_NAMES {
    WPP_CTL_NxTraceGuid = 0,
    WPP_LAST_CTL = 1
};

typedef enum WPP_DEFINE_BIT_NAMES {
    WPP_BLOCK_START_NxTraceGuid = 0,
    WPP_BIT_FLAG_DRIVER = 1,
    WPP_BIT_FLAG_ADAPTER = 2,
    WPP_BIT_FLAG_CONFIGURATION = 3,
    WPP_BIT_FLAG_UTILITY = 4,
    WPP_BIT_FLAG_REQUEST = 5,
    WPP_BIT_FLAG_REQUEST_QUEUE = 6,
    WPP_BIT_FLAG_NET_OBJECT = 7,
    WPP_BIT_FLAG_DEVICE = 8,
    WPP_BIT_FLAG_DATA = 9,
    WPP_BIT_FLAG_VERIFIER = 10,
    WPP_BIT_FLAG_TRANSLATOR = 11,
    WPP_BIT_FLAG_POWER = 12,
    WPP_BIT_FLAG_ERROR = 13,
    WPP_BIT_FLAG_NET_QUEUE = 14,
    WPP_BLOCK_END_NxTraceGuid = 15
};

typedef enum _ACCESS_REASON_TYPE {
    AccessReasonNone = 0,
    AccessReasonAllowedAce = 0x10000,
    AccessReasonDeniedAce = 0x20000,
    AccessReasonAllowedParentAce = 0x30000,
    AccessReasonDeniedParentAce = 0x40000,
    AccessReasonNotGrantedByCape = 0x50000,
    AccessReasonNotGrantedByParentCape = 0x60000,
    AccessReasonNotGrantedToAppContainer = 0x70000,
    AccessReasonMissingPrivilege = 0x100000,
    AccessReasonFromPrivilege = 0x200000,
    AccessReasonIntegrityLevel = 0x300000,
    AccessReasonOwnership = 0x400000,
    AccessReasonNullDacl = 0x500000,
    AccessReasonEmptyDacl = 0x600000,
    AccessReasonNoSD = 0x700000,
    AccessReasonNoGrant = 0x800000,
    AccessReasonTrustLabel = 0x900000,
    AccessReasonFilterAce = 0xa00000
};

typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation = 2
};

typedef enum _ACPI_REG_TYPE {
    PM1a_ENABLE = 0,
    PM1b_ENABLE = 1,
    PM1a_STATUS = 2,
    PM1b_STATUS = 3,
    PM1a_CONTROL = 4,
    PM1b_CONTROL = 5,
    GP_STATUS = 6,
    GP_ENABLE = 7,
    SMI_CMD = 8,
    MaxRegType = 9
};

typedef enum _ALPC_MESSAGE_INFORMATION_CLASS {
    AlpcMessageSidInformation = 0,
    AlpcMessageTokenModifiedIdInformation = 1,
    AlpcMessageDirectStatusInformation = 2,
    AlpcMessageHandleInformation = 3
};

typedef enum _ALPC_PORT_INFORMATION_CLASS {
    AlpcBasicInformation = 0,
    AlpcPortInformation = 1,
    AlpcAssociateCompletionPortInformation = 2,
    AlpcConnectedSIDInformation = 3,
    AlpcServerInformation = 4,
    AlpcMessageZoneInformation = 5,
    AlpcRegisterCompletionListInformation = 6,
    AlpcUnregisterCompletionListInformation = 7,
    AlpcAdjustCompletionListConcurrencyCountInformation = 8,
    AlpcRegisterCallbackInformation = 9,
    AlpcCompletionListRundownInformation = 10,
    AlpcWaitForPortReferences = 11
};

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2
};

typedef enum _APPCONTAINER_SID_TYPE {
    NotAppContainerSidType = 0,
    ChildAppContainerSidType = 1,
    ParentAppContainerSidType = 2,
    InvalidAppContainerSidType = 3,
    MaxAppContainerSidType = 4
};

typedef enum _ARBITER_ACTION {
    ArbiterActionTestAllocation = 0,
    ArbiterActionRetestAllocation = 1,
    ArbiterActionCommitAllocation = 2,
    ArbiterActionRollbackAllocation = 3,
    ArbiterActionQueryAllocatedResources = 4,
    ArbiterActionWriteReservedResources = 5,
    ArbiterActionQueryConflict = 6,
    ArbiterActionQueryArbitrate = 7,
    ArbiterActionAddReserved = 8,
    ArbiterActionBootAllocation = 9
};

typedef enum _ARBITER_REQUEST_SOURCE {
    ArbiterRequestUndefined = -1,
    ArbiterRequestLegacyReported = 0,
    ArbiterRequestHalReported = 1,
    ArbiterRequestLegacyAssigned = 2,
    ArbiterRequestPnpDetected = 3,
    ArbiterRequestPnpEnumerated = 4
};

typedef enum _ARBITER_RESULT {
    ArbiterResultUndefined = -1,
    ArbiterResultSuccess = 0,
    ArbiterResultExternalConflict = 1,
    ArbiterResultNullRequest = 2
};

typedef enum _ATOM_INFORMATION_CLASS {
    AtomBasicInformation = 0,
    AtomTableInformation = 1
};

typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess = 0,
    AuditEventDirectoryServiceAccess = 1
};

typedef enum _BDCB_CALLBACK_TYPE {
    BdCbStatusUpdate = 0,
    BdCbInitializeImage = 1
};

typedef enum _BDCB_CLASSIFICATION {
    BdCbClassificationUnknownImage = 0,
    BdCbClassificationKnownGoodImage = 1,
    BdCbClassificationKnownBadImage = 2,
    BdCbClassificationKnownBadImageBootCritical = 3,
    BdCbClassificationEnd = 4
};

typedef enum _BDCB_STATUS_UPDATE_TYPE {
    BdCbStatusPrepareForDependencyLoad = 0,
    BdCbStatusPrepareForDriverLoad = 1,
    BdCbStatusPrepareForUnload = 2
};

typedef enum _BOOT_ENTROPY_SOURCE_ID {
    BootEntropySourceNone = 0,
    BootEntropySourceSeedfile = 1,
    BootEntropySourceExternal = 2,
    BootEntropySourceTpm = 3,
    BootEntropySourceRdrand = 4,
    BootEntropySourceTime = 5,
    BootEntropySourceAcpiOem0 = 6,
    BootEntropySourceUefi = 7,
    BootEntropySourceCng = 8,
    BootEntropySourceTcbTpm = 9,
    BootEntropySourceTcbRdrand = 10,
    BootMaxEntropySources = 10
};

typedef enum _BOOT_ENTROPY_SOURCE_RESULT_CODE {
    BootEntropySourceStructureUninitialized = 0,
    BootEntropySourceDisabledByPolicy = 1,
    BootEntropySourceNotPresent = 2,
    BootEntropySourceError = 3,
    BootEntropySourceSuccess = 4
};

typedef enum _BOUND_CALLBACK_STATUS {
    BoundExceptionContinueSearch = 0,
    BoundExceptionHandled = 1,
    BoundExceptionError = 2,
    BoundExceptionMaximum = 3
};

typedef enum _BUS_DATA_TYPE {
    ConfigurationSpaceUndefined = -1,
    Cmos = 0,
    EisaConfiguration = 1,
    Pos = 2,
    CbusConfiguration = 3,
    PCIConfiguration = 4,
    VMEConfiguration = 5,
    NuBusConfiguration = 6,
    PCMCIAConfiguration = 7,
    MPIConfiguration = 8,
    MPSAConfiguration = 9,
    PNPISAConfiguration = 10,
    SgiInternalConfiguration = 11,
    MaximumBusDataType = 12
};

typedef enum _CH_DESCRIPTION_TYPE {
    ch_description_type_logical = 1,
    ch_description_type_center_frequency = 2,
    ch_description_type_phy_specific = 3
};

typedef enum _CI_WINDOWS_LOCKDOWN_MODE {
    CI_WINDOWS_LOCKDOWN_MODE_UNLOCKED = 0,
    CI_WINDOWS_LOCKDOWN_MODE_TRIAL = 1,
    CI_WINDOWS_LOCKDOWN_MODE_LOCKED = 2,
    CI_WINDOWS_LOCKDOWN_MODE_MAX = 3
};

typedef enum _CLFS_CONTEXT_MODE {
    ClfsContextNone = 0,
    ClfsContextUndoNext = 1,
    ClfsContextPrevious = 2,
    ClfsContextForward = 3
};

typedef enum _CLFS_IOSTATS_CLASS {
    ClfsIoStatsDefault = 0,
    ClfsIoStatsMax = 0xffff
};

typedef enum _CLFS_LOG_ARCHIVE_MODE {
    ClfsLogArchiveEnabled = 1,
    ClfsLogArchiveDisabled = 2
};

typedef enum _CLFS_MGMT_NOTIFICATION_TYPE {
    ClfsMgmtAdvanceTailNotification = 0,
    ClfsMgmtLogFullHandlerNotification = 1,
    ClfsMgmtLogUnpinnedNotification = 2,
    ClfsMgmtLogWriteNotification = 3
};

typedef enum _CLFS_MGMT_POLICY_TYPE {
    ClfsMgmtPolicyMaximumSize = 0,
    ClfsMgmtPolicyMinimumSize = 1,
    ClfsMgmtPolicyNewContainerSize = 2,
    ClfsMgmtPolicyGrowthRate = 3,
    ClfsMgmtPolicyLogTail = 4,
    ClfsMgmtPolicyAutoShrink = 5,
    ClfsMgmtPolicyAutoGrow = 6,
    ClfsMgmtPolicyNewContainerPrefix = 7,
    ClfsMgmtPolicyNewContainerSuffix = 8,
    ClfsMgmtPolicyNewContainerExtension = 9,
    ClfsMgmtPolicyInvalid = 10
};

typedef enum _CLS_CONTEXT_MODE {
    ClsContextNone = 0,
    ClsContextUndoNext = 1,
    ClsContextPrevious = 2,
    ClsContextForward = 3
};

typedef enum _CLS_IOSTATS_CLASS {
    ClsIoStatsDefault = 0,
    ClsIoStatsMax = 0xffff
};

typedef enum _CLS_LOG_INFORMATION_CLASS {
    ClfsLogBasicInformation = 0,
    ClfsLogBasicInformationPhysical = 1,
    ClfsLogPhysicalNameInformation = 2,
    ClfsLogStreamIdentifierInformation = 3,
    ClfsLogSystemMarkingInformation = 4,
    ClfsLogPhysicalLsnInformation = 5
};

typedef enum _CMOS_DEVICE_TYPE {
    CmosTypeStdPCAT = 0,
    CmosTypeIntelPIIX4 = 1,
    CmosTypeDal1501 = 2
};

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0,
    NormalError = 1,
    SevereError = 2,
    CriticalError = 3
};

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0,
    SystemLoad = 1,
    AutoLoad = 2,
    DemandLoad = 3,
    DisableLoad = 4
};

typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 1,
    FileSystemType = 2,
    Win32ServiceOwnProcess = 16,
    Win32ServiceShareProcess = 32,
    AdapterType = 4,
    RecognizerType = 8
};

typedef enum _CM_SHARE_DISPOSITION {
    CmResourceShareUndetermined = 0,
    CmResourceShareDeviceExclusive = 1,
    CmResourceShareDriverExclusive = 2,
    CmResourceShareShared = 3
};

typedef enum _CONFIGURATION_CLASS {
    SystemClass = 0,
    ProcessorClass = 1,
    CacheClass = 2,
    AdapterClass = 3,
    ControllerClass = 4,
    PeripheralClass = 5,
    MemoryClass = 6,
    MaximumClass = 7
};

typedef enum _CONFIGURATION_TYPE {
    ArcSystem = 0,
    CentralProcessor = 1,
    FloatingPointProcessor = 2,
    PrimaryIcache = 3,
    PrimaryDcache = 4,
    SecondaryIcache = 5,
    SecondaryDcache = 6,
    SecondaryCache = 7,
    EisaAdapter = 8,
    TcAdapter = 9,
    ScsiAdapter = 10,
    DtiAdapter = 11,
    MultiFunctionAdapter = 12,
    DiskController = 13,
    TapeController = 14,
    CdromController = 15,
    WormController = 16,
    SerialController = 17,
    NetworkController = 18,
    DisplayController = 19,
    ParallelController = 20,
    PointerController = 21,
    KeyboardController = 22,
    AudioController = 23,
    OtherController = 24,
    DiskPeripheral = 25,
    FloppyDiskPeripheral = 26,
    TapePeripheral = 27,
    ModemPeripheral = 28,
    MonitorPeripheral = 29,
    PrinterPeripheral = 30,
    PointerPeripheral = 31,
    KeyboardPeripheral = 32,
    TerminalPeripheral = 33,
    OtherPeripheral = 34,
    LinePeripheral = 35,
    NetworkPeripheral = 36,
    SystemMemory = 37,
    DockingInformation = 38,
    RealModeIrqRoutingTable = 39,
    RealModePCIEnumeration = 40,
    MaximumType = 41
};

typedef enum _CONTAINER_TYPE {
    ContainerTypeCpu = 0,
    ContainerTypeDiskIo = 1,
    ContainerTypeNetIo = 2,
    ContainerTypeHeap = 3,
    ContainerTypeImmediate = 4,
    ContainerTypeMaximumList = 5
};

typedef enum _COVERAGE_REQUEST_CODES {
    CoverageAllModules = 0,
    CoverageSearchByHash = 1,
    CoverageSearchByName = 2
};

typedef enum _CPU_SET_INFORMATION_TYPE {
    CpuSetInformation = 0
};

typedef enum _CREATE_FILE_TYPE {
    CreateFileTypeNone = 0,
    CreateFileTypeNamedPipe = 1,
    CreateFileTypeMailslot = 2
};

typedef enum _CSVFS_DISK_CONNECTIVITY {
    CsvFsDiskConnectivityNone = 0,
    CsvFsDiskConnectivityMdsNodeOnly = 1,
    CsvFsDiskConnectivitySubsetOfNodes = 2,
    CsvFsDiskConnectivityAllNodes = 3
};

typedef enum _CSV_CONTROL_OP {
    CsvControlStartRedirectFile = 2,
    CsvControlStopRedirectFile = 3,
    CsvControlQueryRedirectState = 4,
    CsvControlQueryFileRevision = 6,
    CsvControlQueryMdsPath = 8,
    CsvControlQueryFileRevisionFileId128 = 9,
    CsvControlQueryVolumeRedirectState = 10,
    CsvControlEnableUSNRangeModificationTracking = 13,
    CsvControlMarkHandleLocalVolumeMount = 14,
    CsvControlUnmarkHandleLocalVolumeMount = 15,
    CsvControlGetCsvFsMdsPathV2 = 18,
    CsvControlDisableCaching = 19,
    CsvControlEnableCaching = 20
};

typedef enum _D3COLD_LAST_TRANSITION_STATUS {
    LastDStateTransitionStatusUnknown = 0,
    LastDStateTransitionD3hot = 1,
    LastDStateTransitionD3cold = 2
};

typedef enum _DEBUG_CONTROL_SPACE_ITEM {
    DEBUG_CONTROL_SPACE_PCR = 0,
    DEBUG_CONTROL_SPACE_PRCB = 1,
    DEBUG_CONTROL_SPACE_KSPECIAL = 2,
    DEBUG_CONTROL_SPACE_THREAD = 3,
    DEBUG_CONTROL_SPACE_MAXIMUM = 4
};

typedef enum _DEVICE_DIRECTORY_TYPE {
    DeviceDirectoryData = 0
};

typedef enum _DEVICE_INSTALL_STATE {
    InstallStateInstalled = 0,
    InstallStateNeedsReinstall = 1,
    InstallStateFailedInstall = 2,
    InstallStateFinishInstall = 3
};

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
};

typedef enum _DEVICE_RELATION_TYPE {
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6
};

typedef enum _DEVICE_REMOVAL_POLICY {
    RemovalPolicyExpectNoRemoval = 1,
    RemovalPolicyExpectOrderlyRemoval = 2,
    RemovalPolicyExpectSurpriseRemoval = 3
};

typedef enum _DEVICE_RESET_TYPE {
    FunctionLevelDeviceReset = 0,
    PlatformLevelDeviceReset = 1
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5
};

typedef enum _DEVICE_WAKE_DEPTH {
    DeviceWakeDepthNotWakeable = 0,
    DeviceWakeDepthD0 = 1,
    DeviceWakeDepthD1 = 2,
    DeviceWakeDepthD2 = 3,
    DeviceWakeDepthD3hot = 4,
    DeviceWakeDepthD3cold = 5,
    DeviceWakeDepthMaximum = 6
};

typedef enum _DEVPROPSTORE {
    DEVPROP_STORE_SYSTEM = 0,
    DEVPROP_STORE_USER = 1
};

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2
};

typedef enum _DMA_SPEED {
    Compatible = 0,
    TypeA = 1,
    TypeB = 2,
    TypeC = 3,
    TypeF = 4,
    MaximumDmaSpeed = 5
};

typedef enum _DMA_WIDTH {
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5
};

typedef enum _DOMAIN_CONFIGURATION_ARCH {
    DomainConfigurationArm64 = 0,
    DomainConfigurationInvalid = 1
};

typedef enum _DOT11_ACK_POLICY {
    dot11_ack_policy_none = 0,
    dot11_ack_policy_acknowledge = 1,
    dot11_ack_policy_do_not_acknowledge = 2
};

typedef enum _DOT11_AC_PARAM {
    dot11_AC_param_BE = 0,
    dot11_AC_param_BK = 1,
    dot11_AC_param_VI = 2,
    dot11_AC_param_VO = 3,
    dot11_AC_param_max = 4
};

typedef enum _DOT11_ANQP_QUERY_RESULT {
    dot11_ANQP_query_result_success = 0,
    dot11_ANQP_query_result_failure = 1,
    dot11_ANQP_query_result_timed_out = 2,
    dot11_ANQP_query_result_resources = 3,
    dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote = 4,
    dot11_ANQP_query_result_gas_protocol_failure = 5,
    dot11_ANQP_query_result_advertisement_server_not_responding = 6,
    dot11_ANQP_query_result_access_issues = 7
};

typedef enum _DOT11_ASSOCIATION_STATE {
    dot11_assoc_state_zero = 0,
    dot11_assoc_state_unauth_unassoc = 1,
    dot11_assoc_state_auth_unassoc = 2,
    dot11_assoc_state_auth_assoc = 3
};

typedef enum _DOT11_AUTH_ALGORITHM {
    DOT11_AUTH_ALGO_80211_OPEN = 1,
    DOT11_AUTH_ALGO_80211_SHARED_KEY = 2,
    DOT11_AUTH_ALGO_WPA = 3,
    DOT11_AUTH_ALGO_WPA_PSK = 4,
    DOT11_AUTH_ALGO_WPA_NONE = 5,
    DOT11_AUTH_ALGO_RSNA = 6,
    DOT11_AUTH_ALGO_RSNA_PSK = 7,
    DOT11_AUTH_ALGO_IHV_START = -2147483648,
    DOT11_AUTH_ALGO_IHV_END = -1
};

typedef enum _DOT11_BSS_TYPE {
    dot11_BSS_type_infrastructure = 1,
    dot11_BSS_type_independent = 2,
    dot11_BSS_type_any = 3
};

typedef enum _DOT11_CIPHER_ALGORITHM {
    DOT11_CIPHER_ALGO_NONE = 0,
    DOT11_CIPHER_ALGO_WEP40 = 1,
    DOT11_CIPHER_ALGO_TKIP = 2,
    DOT11_CIPHER_ALGO_CCMP = 4,
    DOT11_CIPHER_ALGO_WEP104 = 5,
    DOT11_CIPHER_ALGO_BIP = 6,
    DOT11_CIPHER_ALGO_GCMP = 8,
    DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_WEP = 257,
    DOT11_CIPHER_ALGO_IHV_START = -2147483648,
    DOT11_CIPHER_ALGO_IHV_END = -1
};

typedef enum _DOT11_DIVERSITY_SUPPORT {
    dot11_diversity_support_unknown = 0,
    dot11_diversity_support_fixedlist = 1,
    dot11_diversity_support_notsupported = 2,
    dot11_diversity_support_dynamic = 3
};

typedef enum _DOT11_HOP_ALGO_ADOPTED {
    dot11_hop_algo_current = 0,
    dot11_hop_algo_hop_index = 1,
    dot11_hop_algo_hcc = 2
};

typedef enum _DOT11_KEY_DIRECTION {
    dot11_key_direction_both = 1,
    dot11_key_direction_inbound = 2,
    dot11_key_direction_outbound = 3
};

typedef enum _DOT11_MANUFACTURING_CALLBACK_TYPE {
    dot11_manufacturing_callback_unknown = 0,
    dot11_manufacturing_callback_self_test_complete = 1,
    dot11_manufacturing_callback_sleep_complete = 2,
    dot11_manufacturing_callback_IHV_start = -2147483648,
    dot11_manufacturing_callback_IHV_end = -1
};

typedef enum _DOT11_MANUFACTURING_TEST_TYPE {
    dot11_manufacturing_test_unknown = 0,
    dot11_manufacturing_test_self_start = 1,
    dot11_manufacturing_test_self_query_result = 2,
    dot11_manufacturing_test_rx = 3,
    dot11_manufacturing_test_tx = 4,
    dot11_manufacturing_test_query_adc = 5,
    dot11_manufacturing_test_set_data = 6,
    dot11_manufacturing_test_query_data = 7,
    dot11_manufacturing_test_sleep = 8,
    dot11_manufacturing_test_awake = 9,
    dot11_manufacturing_test_IHV_start = -2147483648,
    dot11_manufacturing_test_IHV_end = -1
};

typedef enum _DOT11_OFFLOAD_TYPE {
    dot11_offload_type_wep = 1,
    dot11_offload_type_auth = 2
};

typedef enum _DOT11_PHY_TYPE {
    dot11_phy_type_unknown = 0,
    dot11_phy_type_any = 0,
    dot11_phy_type_fhss = 1,
    dot11_phy_type_dsss = 2,
    dot11_phy_type_irbaseband = 3,
    dot11_phy_type_ofdm = 4,
    dot11_phy_type_hrdsss = 5,
    dot11_phy_type_erp = 6,
    dot11_phy_type_ht = 7,
    dot11_phy_type_vht = 8,
    dot11_phy_type_dmg = 9,
    dot11_phy_type_he = 10,
    dot11_phy_type_IHV_start = -2147483648,
    dot11_phy_type_IHV_end = -1
};

typedef enum _DOT11_POWER_MODE {
    dot11_power_mode_unknown = 0,
    dot11_power_mode_active = 1,
    dot11_power_mode_powersave = 2
};

typedef enum _DOT11_POWER_MODE_REASON {
    dot11_power_mode_reason_no_change = 0,
    dot11_power_mode_reason_noncompliant_AP = 1,
    dot11_power_mode_reason_legacy_WFD_device = 2,
    dot11_power_mode_reason_compliant_AP = 3,
    dot11_power_mode_reason_compliant_WFD_device = 4,
    dot11_power_mode_reason_others = 5
};

typedef enum _DOT11_RESET_TYPE {
    dot11_reset_type_phy = 1,
    dot11_reset_type_mac = 2,
    dot11_reset_type_phy_and_mac = 3
};

typedef enum _DOT11_SCAN_TYPE {
    dot11_scan_type_active = 1,
    dot11_scan_type_passive = 2,
    dot11_scan_type_auto = 3,
    dot11_scan_type_forced = -2147483648
};

typedef enum _DOT11_TEMP_TYPE {
    dot11_temp_type_unknown = 0,
    dot11_temp_type_1 = 1,
    dot11_temp_type_2 = 2
};

typedef enum _DOT11_UPDATE_IE_OP {
    dot11_update_ie_op_create_replace = 1,
    dot11_update_ie_op_delete = 2
};

typedef enum _DOT11_WFD_DISCOVER_TYPE {
    dot11_wfd_discover_type_scan_only = 1,
    dot11_wfd_discover_type_find_only = 2,
    dot11_wfd_discover_type_auto = 3,
    dot11_wfd_discover_type_scan_social_channels = 4,
    dot11_wfd_discover_type_forced = -2147483648
};

typedef enum _DOT11_WFD_SCAN_TYPE {
    dot11_wfd_scan_type_active = 1,
    dot11_wfd_scan_type_passive = 2,
    dot11_wfd_scan_type_auto = 3
};

typedef enum _DOT11_WPS_CONFIG_METHOD {
    DOT11_WPS_CONFIG_METHOD_NULL = 0,
    DOT11_WPS_CONFIG_METHOD_DISPLAY = 8,
    DOT11_WPS_CONFIG_METHOD_NFC_TAG = 32,
    DOT11_WPS_CONFIG_METHOD_NFC_INTERFACE = 64,
    DOT11_WPS_CONFIG_METHOD_PUSHBUTTON = 128,
    DOT11_WPS_CONFIG_METHOD_KEYPAD = 256,
    DOT11_WPS_CONFIG_METHOD_WFDS_DEFAULT = 4096
};

typedef enum _DOT11_WPS_DEVICE_PASSWORD_ID {
    DOT11_WPS_PASSWORD_ID_DEFAULT = 0,
    DOT11_WPS_PASSWORD_ID_USER_SPECIFIED = 1,
    DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED = 2,
    DOT11_WPS_PASSWORD_ID_REKEY = 3,
    DOT11_WPS_PASSWORD_ID_PUSHBUTTON = 4,
    DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED = 5,
    DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER = 7,
    DOT11_WPS_PASSWORD_ID_WFD_SERVICES = 8,
    DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN = 16,
    DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX = 0xffff
};

typedef enum _DPFLTR_TYPE {
    DPFLTR_SYSTEM_ID = 0,
    DPFLTR_SMSS_ID = 1,
    DPFLTR_SETUP_ID = 2,
    DPFLTR_NTFS_ID = 3,
    DPFLTR_FSTUB_ID = 4,
    DPFLTR_CRASHDUMP_ID = 5,
    DPFLTR_CDAUDIO_ID = 6,
    DPFLTR_CDROM_ID = 7,
    DPFLTR_CLASSPNP_ID = 8,
    DPFLTR_DISK_ID = 9,
    DPFLTR_REDBOOK_ID = 10,
    DPFLTR_STORPROP_ID = 11,
    DPFLTR_SCSIPORT_ID = 12,
    DPFLTR_SCSIMINIPORT_ID = 13,
    DPFLTR_CONFIG_ID = 14,
    DPFLTR_I8042PRT_ID = 15,
    DPFLTR_SERMOUSE_ID = 16,
    DPFLTR_LSERMOUS_ID = 17,
    DPFLTR_KBDHID_ID = 18,
    DPFLTR_MOUHID_ID = 19,
    DPFLTR_KBDCLASS_ID = 20,
    DPFLTR_MOUCLASS_ID = 21,
    DPFLTR_TWOTRACK_ID = 22,
    DPFLTR_WMILIB_ID = 23,
    DPFLTR_ACPI_ID = 24,
    DPFLTR_AMLI_ID = 25,
    DPFLTR_HALIA64_ID = 26,
    DPFLTR_VIDEO_ID = 27,
    DPFLTR_SVCHOST_ID = 28,
    DPFLTR_VIDEOPRT_ID = 29,
    DPFLTR_TCPIP_ID = 30,
    DPFLTR_DMSYNTH_ID = 31,
    DPFLTR_NTOSPNP_ID = 32,
    DPFLTR_FASTFAT_ID = 33,
    DPFLTR_SAMSS_ID = 34,
    DPFLTR_PNPMGR_ID = 35,
    DPFLTR_NETAPI_ID = 36,
    DPFLTR_SCSERVER_ID = 37,
    DPFLTR_SCCLIENT_ID = 38,
    DPFLTR_SERIAL_ID = 39,
    DPFLTR_SERENUM_ID = 40,
    DPFLTR_UHCD_ID = 41,
    DPFLTR_RPCPROXY_ID = 42,
    DPFLTR_AUTOCHK_ID = 43,
    DPFLTR_DCOMSS_ID = 44,
    DPFLTR_UNIMODEM_ID = 45,
    DPFLTR_SIS_ID = 46,
    DPFLTR_FLTMGR_ID = 47,
    DPFLTR_WMICORE_ID = 48,
    DPFLTR_BURNENG_ID = 49,
    DPFLTR_IMAPI_ID = 50,
    DPFLTR_SXS_ID = 51,
    DPFLTR_FUSION_ID = 52,
    DPFLTR_IDLETASK_ID = 53,
    DPFLTR_SOFTPCI_ID = 54,
    DPFLTR_TAPE_ID = 55,
    DPFLTR_MCHGR_ID = 56,
    DPFLTR_IDEP_ID = 57,
    DPFLTR_PCIIDE_ID = 58,
    DPFLTR_FLOPPY_ID = 59,
    DPFLTR_FDC_ID = 60,
    DPFLTR_TERMSRV_ID = 61,
    DPFLTR_W32TIME_ID = 62,
    DPFLTR_PREFETCHER_ID = 63,
    DPFLTR_RSFILTER_ID = 64,
    DPFLTR_FCPORT_ID = 65,
    DPFLTR_PCI_ID = 66,
    DPFLTR_DMIO_ID = 67,
    DPFLTR_DMCONFIG_ID = 68,
    DPFLTR_DMADMIN_ID = 69,
    DPFLTR_WSOCKTRANSPORT_ID = 70,
    DPFLTR_VSS_ID = 71,
    DPFLTR_PNPMEM_ID = 72,
    DPFLTR_PROCESSOR_ID = 73,
    DPFLTR_DMSERVER_ID = 74,
    DPFLTR_SR_ID = 75,
    DPFLTR_INFINIBAND_ID = 76,
    DPFLTR_IHVDRIVER_ID = 77,
    DPFLTR_IHVVIDEO_ID = 78,
    DPFLTR_IHVAUDIO_ID = 79,
    DPFLTR_IHVNETWORK_ID = 80,
    DPFLTR_IHVSTREAMING_ID = 81,
    DPFLTR_IHVBUS_ID = 82,
    DPFLTR_HPS_ID = 83,
    DPFLTR_RTLTHREADPOOL_ID = 84,
    DPFLTR_LDR_ID = 85,
    DPFLTR_TCPIP6_ID = 86,
    DPFLTR_ISAPNP_ID = 87,
    DPFLTR_SHPC_ID = 88,
    DPFLTR_STORPORT_ID = 89,
    DPFLTR_STORMINIPORT_ID = 90,
    DPFLTR_PRINTSPOOLER_ID = 91,
    DPFLTR_VSSDYNDISK_ID = 92,
    DPFLTR_VERIFIER_ID = 93,
    DPFLTR_VDS_ID = 94,
    DPFLTR_VDSBAS_ID = 95,
    DPFLTR_VDSDYN_ID = 96,
    DPFLTR_VDSDYNDR_ID = 97,
    DPFLTR_VDSLDR_ID = 98,
    DPFLTR_VDSUTIL_ID = 99,
    DPFLTR_DFRGIFC_ID = 100,
    DPFLTR_DEFAULT_ID = 101,
    DPFLTR_MM_ID = 102,
    DPFLTR_DFSC_ID = 103,
    DPFLTR_WOW64_ID = 104,
    DPFLTR_ALPC_ID = 105,
    DPFLTR_WDI_ID = 106,
    DPFLTR_PERFLIB_ID = 107,
    DPFLTR_KTM_ID = 108,
    DPFLTR_IOSTRESS_ID = 109,
    DPFLTR_HEAP_ID = 110,
    DPFLTR_WHEA_ID = 111,
    DPFLTR_USERGDI_ID = 112,
    DPFLTR_MMCSS_ID = 113,
    DPFLTR_TPM_ID = 114,
    DPFLTR_THREADORDER_ID = 115,
    DPFLTR_ENVIRON_ID = 116,
    DPFLTR_EMS_ID = 117,
    DPFLTR_WDT_ID = 118,
    DPFLTR_FVEVOL_ID = 119,
    DPFLTR_NDIS_ID = 120,
    DPFLTR_NVCTRACE_ID = 121,
    DPFLTR_LUAFV_ID = 122,
    DPFLTR_APPCOMPAT_ID = 123,
    DPFLTR_USBSTOR_ID = 124,
    DPFLTR_SBP2PORT_ID = 125,
    DPFLTR_COVERAGE_ID = 126,
    DPFLTR_CACHEMGR_ID = 127,
    DPFLTR_MOUNTMGR_ID = 128,
    DPFLTR_CFR_ID = 129,
    DPFLTR_TXF_ID = 130,
    DPFLTR_KSECDD_ID = 131,
    DPFLTR_FLTREGRESS_ID = 132,
    DPFLTR_MPIO_ID = 133,
    DPFLTR_MSDSM_ID = 134,
    DPFLTR_UDFS_ID = 135,
    DPFLTR_PSHED_ID = 136,
    DPFLTR_STORVSP_ID = 137,
    DPFLTR_LSASS_ID = 138,
    DPFLTR_SSPICLI_ID = 139,
    DPFLTR_CNG_ID = 140,
    DPFLTR_EXFAT_ID = 141,
    DPFLTR_FILETRACE_ID = 142,
    DPFLTR_XSAVE_ID = 143,
    DPFLTR_SE_ID = 144,
    DPFLTR_DRIVEEXTENDER_ID = 145,
    DPFLTR_POWER_ID = 146,
    DPFLTR_CRASHDUMPXHCI_ID = 147,
    DPFLTR_GPIO_ID = 148,
    DPFLTR_REFS_ID = 149,
    DPFLTR_WER_ID = 150,
    DPFLTR_CAPIMG_ID = 151,
    DPFLTR_VPCI_ID = 152,
    DPFLTR_STORAGECLASSMEMORY_ID = 153,
    DPFLTR_FSLIB_ID = 154,
    DPFLTR_ENDOFTABLE_ID = 155
};

typedef enum _DRIVER_DIRECTORY_TYPE {
    DriverDirectoryImage = 0,
    DriverDirectoryData = 1
};

typedef enum _DRIVER_REGKEY_TYPE {
    DriverRegKeyParameters = 0,
    DriverRegKeyPersistentState = 1
};

typedef enum _DRIVER_RUNTIME_INIT_FLAGS {
    DrvRtPoolNxOptIn = 1,
    LastDrvRtFlag = 2
};

typedef enum _DUMP_EVENTS {
    DUMP_EVENT_NONE = 0,
    DUMP_EVENT_HIBER_RESUME = 1,
    DUMP_EVENT_HIBER_RESUME_END = 2
};

typedef enum _EMULATOR_PORT_ACCESS_TYPE {
    Uchar = 0,
    Ushort = 1,
    Ulong = 2
};

typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation = 0,
    EnlistmentRecoveryInformation = 1,
    EnlistmentCrmInformation = 2
};

typedef enum _ERROR_SEVERITY_VALUE {
    ErrorRecoverable = 0,
    ErrorFatal = 1,
    ErrorCorrected = 2,
    ErrorOthers = 3
};

typedef enum _EVENT_INFORMATION_CLASS {
    EventBasicInformation = 0
};

typedef enum _EVENT_INFO_CLASS {
    EventProviderBinaryTrackInfo = 0,
    EventProviderSetReserved1 = 1,
    EventProviderSetTraits = 2,
    EventProviderUseDescriptorType = 3,
    MaxEventInfo = 4
};

typedef enum _EVENT_TYPE {
    NotificationEvent = 0,
    SynchronizationEvent = 1
};

typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3
};

typedef enum _EXCEPTION_LOG_TYPE {
    LogExceptionEmpty = 0,
    LogExceptionDispatch = 1,
    LogExceptionHandler = 2
};

typedef enum _EXTENDED_AGP_REGISTER {
    IsochStatus = 0,
    AgpControl = 1,
    ApertureSize = 2,
    AperturePageSize = 3,
    GartLow = 4,
    GartHigh = 5,
    IsochCommand = 6
};

typedef enum _EXT_IOMMU_DEVICE_TYPE {
    EXT_IOMMU_DEVICE_TYPE_INVALID = 0,
    EXT_IOMMU_DEVICE_TYPE_PCI = 1,
    EXT_IOMMU_DEVICE_TYPE_ACPI = 2,
    EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,
    EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4,
    EXT_IOMMU_DEVICE_TYPE_GIC = 5,
    EXT_IOMMU_DEVICE_TYPE_TEST = 6,
    EXT_IOMMU_DEVICE_TYPE_MAX = 7
};

typedef enum _EX_POOL_PRIORITY {
    LowPoolPriority = 0,
    LowPoolPrioritySpecialPoolOverrun = 8,
    LowPoolPrioritySpecialPoolUnderrun = 9,
    NormalPoolPriority = 16,
    NormalPoolPrioritySpecialPoolOverrun = 24,
    NormalPoolPrioritySpecialPoolUnderrun = 25,
    HighPoolPriority = 32,
    HighPoolPrioritySpecialPoolOverrun = 40,
    HighPoolPrioritySpecialPoolUnderrun = 41
};

typedef enum _FAULT_INFORMATION_ARCH {
    FaultInformationInvalid = 0,
    FaultInformationArm64 = 1
};

typedef enum _FAULT_INFORMATION_ARM64_TYPE {
    UnsupportedUpstreamTransaction = 0,
    AddressSizeFault = 1,
    TlbMatchConflict = 2,
    ExternalFault = 3,
    PermissionFault = 4,
    AccessFlagFault = 5,
    TranslationFault = 6,
    MaxFaultType = 7
};

typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileDesiredStorageClassInformation = 67,
    FileStatInformation = 68,
    FileMemoryPartitionInformation = 69,
    FileStatLxInformation = 70,
    FileCaseSensitiveInformation = 71,
    FileLinkInformationEx = 72,
    FileLinkInformationExBypassAccessCheck = 73,
    FileStorageReserveIdInformation = 74,
    FileCaseSensitiveInformationForceAccessCheck = 75,
    FileMaximumInformation = 76
};

typedef enum _FILE_METADATA_OPTIMIZATION_STATE {
    FileMetadataOptimizationNone = 0,
    FileMetadataOptimizationInProgress = 1,
    FileMetadataOptimizationPending = 2
};

typedef enum _FILE_STORAGE_TIER_CLASS {
    FileStorageTierClassUnspecified = 0,
    FileStorageTierClassCapacity = 1,
    FileStorageTierClassPerformance = 2,
    FileStorageTierClassMax = 3
};

typedef enum _FILE_STORAGE_TIER_MEDIA_TYPE {
    FileStorageTierMediaTypeUnspecified = 0,
    FileStorageTierMediaTypeDisk = 1,
    FileStorageTierMediaTypeSsd = 2,
    FileStorageTierMediaTypeScm = 4,
    FileStorageTierMediaTypeMax = 5
};

typedef enum _FILTER_BOOT_OPTION_OPERATION {
    FilterBootOptionOperationOpenSystemStore = 0,
    FilterBootOptionOperationSetElement = 1,
    FilterBootOptionOperationDeleteElement = 2,
    FilterBootOptionOperationMax = 3
};

typedef enum _FIRMWARE_REENTRY {
    HalHaltRoutine = 0,
    HalPowerDownRoutine = 1,
    HalRestartRoutine = 2,
    HalRebootRoutine = 3,
    HalInteractiveModeRoutine = 4,
    HalMaximumRoutine = 5
};

typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown = 0,
    FirmwareTypeBios = 1,
    FirmwareTypeUefi = 2,
    FirmwareTypeMax = 3
};

typedef enum _FP_IEEE_COMPARE_RESULT {
    FpCompareEqual = 0,
    FpCompareGreater = 1,
    FpCompareLess = 2,
    FpCompareUnordered = 3
};

typedef enum _FP_IEEE_OPERATION_CODE {
    FpCodeUnspecified = 0,
    FpCodeAdd = 1,
    FpCodeSubtract = 2,
    FpCodeMultiply = 3,
    FpCodeDivide = 4,
    FpCodeSquareRoot = 5,
    FpCodeRemainder = 6,
    FpCodeCompare = 7,
    FpCodeConvert = 8,
    FpCodeRound = 9,
    FpCodeTruncate = 10,
    FpCodeFloor = 11,
    FpCodeCeil = 12,
    FpCodeAcos = 13,
    FpCodeAsin = 14,
    FpCodeAtan = 15,
    FpCodeAtan2 = 16,
    FpCodeCabs = 17,
    FpCodeCos = 18,
    FpCodeCosh = 19,
    FpCodeExp = 20,
    FpCodeFabs = 21,
    FpCodeFmod = 22,
    FpCodeFrexp = 23,
    FpCodeHypot = 24,
    FpCodeLdexp = 25,
    FpCodeLog = 26,
    FpCodeLog10 = 27,
    FpCodeModf = 28,
    FpCodePow = 29,
    FpCodeSin = 30,
    FpCodeSinh = 31,
    FpCodeTan = 32,
    FpCodeTanh = 33,
    FpCodeY0 = 34,
    FpCodeY1 = 35,
    FpCodeYn = 36
};

typedef enum _FP__IEEE_FORMAT {
    FpFormatFp32 = 0,
    FpFormatFp64 = 1,
    FpFormatFp80 = 2,
    FpFormatFp128 = 3,
    FpFormatI16 = 4,
    FpFormatI32 = 5,
    FpFormatI64 = 6,
    FpFormatU16 = 7,
    FpFormatU32 = 8,
    FpFormatU64 = 9,
    FpFormatCompare = 10,
    FpFormatString = 11
};

typedef enum _FP__IEEE_ROUNDING_MODE {
    FpRoundNearest = 0,
    FpRoundMinusInfinity = 1,
    FpRoundPlusInfinity = 2,
    FpRoundChopped = 3
};

typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsMaximumInformation = 15
};

typedef enum _FUNCTION_TABLE_TYPE {
    RF_SORTED = 0,
    RF_UNSORTED = 1,
    RF_CALLBACK = 2,
    RF_KERNEL_DYNAMIC = 3
};

typedef enum _FailureCode {
    FailureCode_CorruptedPrivateGlobals = 0,
    FailureCode_IrqlIsNotPassive = 1,
    FailureCode_IrqlNotLessOrEqualDispatch = 2,
    FailureCode_AdapterAlreadyStarted = 3,
    FailureCode_EvtArmDisarmWakeNotInProgress = 4,
    FailureCode_CompletingNetRequestWithPendingStatus = 5,
    FailureCode_InvalidNetRequestType = 6,
    FailureCode_DefaultRequestQueueAlreadyExists = 7,
    FailureCode_InvalidStructTypeSize = 8,
    FailureCode_InvalidQueueConfiguration = 9,
    FailureCode_InvalidPowerCapabilities = 10,
    FailureCode_MacAddressLengthTooLong = 11,
    FailureCode_InvalidLinkLayerCapabilities = 12,
    FailureCode_InvalidLinkState = 13,
    FailureCode_ObjectIsNotCancelable = 14,
    FailureCode_ParameterCantBeNull = 15,
    FailureCode_InvalidQueryUlongFlag = 16,
    FailureCode_QueryNetworkAddressInvalidParameter = 17,
    FailureCode_QueueConfigurationHasError = 18,
    FailureCode_InvalidRequestQueueType = 19,
    FailureCode_NetPacketContextTypeMismatch = 20,
    FailureCode_NetPacketDoesNotHaveContext = 21,
    FailureCode_MtuMustBeGreaterThanZero = 22,
    FailureCode_BadQueueInitContext = 23,
    FailureCode_CreatingNetQueueFromWrongThread = 24,
    FailureCode_InvalidDatapathCapabilities = 25,
    FailureCode_NetQueueInvalidConfiguration = 26,
    FailureCode_ParentObjectNotNull = 27,
    FailureCode_InvalidNetAdapterConfig = 28,
    FailureCode_QueueAlreadyCreated = 29,
    FailureCode_ObjectAttributesContextSizeTooLarge = 30,
    FailureCode_NotPowerOfTwo = 31,
    FailureCode_IllegalObjectAttributes = 32,
    FailureCode_InvalidPacketContextToken = 33,
    FailureCode_InvalidPacketContextSizeOverride = 34,
    FailureCode_InvalidNetPacketExtensionName = 35,
    FailureCode_InvalidNetPacketExtensionVersion = 36,
    FailureCode_InvalidNetPacketExtensionAlignment = 37,
    FailureCode_InvalidNetPacketExtensionExtensionSize = 38,
    FailureCode_NetPacketExtensionVersionedSizeMismatch = 39,
    FailureCode_InvalidAdapterTxCapabilities = 40,
    FailureCode_InvalidAdapterRxCapabilities = 41,
    FailureCode_InvalidReceiveScalingHashType = 42,
    FailureCode_InvalidReceiveScalingProtocolType = 43,
    FailureCode_InvalidReceiveScalingEncapsulationType = 44,
    FailureCode_IllegalAdapterDelete = 45,
    FailureCode_RemovingDeviceWithAdapters = 46,
    FailureCode_InvalidDatapathCallbacks = 47,
    FailureCode_InvalidNetAdapterInitSignature = 48,
    FailureCode_NetAdapterInitAlreadyUsed = 49,
    FailureCode_InvalidNetAdapterExtensionInitSignature = 50,
    FailureCode_InvalidLsoCapabilities = 51
};

typedef enum _HAL_CLOCK_TIMER_MODE {
    HalClockTimerModePeriodic = 0,
    HalClockTimerModeOneShot = 1,
    HalClockTimerModeMax = 2
};

typedef enum _HAL_DISPLAY_BIOS_INFORMATION {
    HalDisplayInt10Bios = 0,
    HalDisplayEmulatedBios = 1,
    HalDisplayNoBios = 2
};

typedef enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE {
    HalDmaCrashDumpRegisterSet1 = 0,
    HalDmaCrashDumpRegisterSet2 = 1,
    HalDmaCrashDumpRegisterSetMax = 2
};

typedef enum _HAL_PLATFORM_TIMER_SOURCE {
    HalPlatformTimerNotSpecified = 0,
    HalPlatformTimer8254 = 1,
    HalPlatformTimerRtc = 2,
    HalPlatformTimerAcpi = 3,
    HalPlatformTimerAcpiBroken = 4,
    HalPlatformTimerHpet = 5,
    HalPlatformTimerProcessorCounter = 6,
    HalPlatformTimerHvReferenceTime = 7,
    HalPlatformTimerSfi = 8,
    HalPlatformTimerApic = 9,
    HalPlatformTimerHvSynthetic = 10,
    HalPlatformTimerCustom = 11,
    HalPlatformTimerCycleCounter = 12,
    HalPlatformTimerGit = 13
};

typedef enum _HAL_PROCESSOR_STAT_TYPE {
    HalProcessorStatResidency = 0,
    HalProcessorStatCount = 1,
    HalProcessorStatMax = 2
};

typedef enum _HAL_QUERY_INFORMATION_CLASS {
    HalInstalledBusInformation = 0,
    HalProfileSourceInformation = 1,
    HalInformationClassUnused1 = 2,
    HalPowerInformation = 3,
    HalProcessorSpeedInformation = 4,
    HalCallbackInformation = 5,
    HalMapRegisterInformation = 6,
    HalMcaLogInformation = 7,
    HalFrameBufferCachingInformation = 8,
    HalDisplayBiosInformation = 9,
    HalProcessorFeatureInformation = 10,
    HalNumaTopologyInterface = 11,
    HalErrorInformation = 12,
    HalCmcLogInformation = 13,
    HalCpeLogInformation = 14,
    HalQueryMcaInterface = 15,
    HalQueryAMLIIllegalIOPortAddresses = 16,
    HalQueryMaxHotPlugMemoryAddress = 17,
    HalPartitionIpiInterface = 18,
    HalPlatformInformation = 19,
    HalQueryProfileSourceList = 20,
    HalInitLogInformation = 21,
    HalFrequencyInformation = 22,
    HalProcessorBrandString = 23,
    HalHypervisorInformation = 24,
    HalPlatformTimerInformation = 25,
    HalAcpiAuditInformation = 26,
    HalIrtInformation = 27,
    HalSecondaryInterruptInformation = 28,
    HalParkingPageInformation = 29,
    HalNumaRangeTableInformation = 30,
    HalChannelTopologyInformation = 31,
    HalExternalCacheInformation = 32,
    HalQueryDebuggerInformation = 33,
    HalFwBootPerformanceInformation = 34,
    HalFwS3PerformanceInformation = 35,
    HalGetChannelPowerInformation = 36,
    HalQueryStateElementInformation = 37,
    HalPsciInformation = 38,
    HalInterruptControllerInformation = 39,
    HalQueryIommuReservedRegionInformation = 40,
    HalQueryArmErrataInformation = 41,
    HalQueryProcessorEfficiencyInformation = 42,
    HalQueryAcpiWakeAlarmSystemPowerStateInformation = 43,
    HalQueryProfileNumberOfCounters = 44,
    HalQueryHyperlaunchEntrypoint = 45,
    HalHardwareWatchdogInformation = 46,
    HalDmaRemappingInformation = 47,
    HalQueryRuntimeServicesBlockInformation = 48,
    HalHeterogeneousMemoryAttributesInterface = 49
};

typedef enum _HAL_SET_INFORMATION_CLASS {
    HalProfileSourceInterval = 0,
    HalProfileSourceInterruptHandler = 1,
    HalMcaRegisterDriver = 2,
    HalKernelErrorHandler = 3,
    HalCmcRegisterDriver = 4,
    HalCpeRegisterDriver = 5,
    HalMcaLog = 6,
    HalCmcLog = 7,
    HalCpeLog = 8,
    HalGenerateCmcInterrupt = 9,
    HalProfileSourceTimerHandler = 10,
    HalEnlightenment = 11,
    HalProfileDpgoSourceInterruptHandler = 12,
    HalRegisterSecondaryInterruptInterface = 13,
    HalSetChannelPowerInformation = 14,
    HalI386ExceptionChainTerminatorInformation = 15,
    HalSetResetParkDisposition = 16,
    HalSetPsciSuspendMode = 17,
    HalSetHvciEnabled = 18,
    HalSetProcessorTraceInterruptHandler = 19,
    HalProfileSourceAdd = 20,
    HalProfileSourceRemove = 21,
    HalSetSwInterruptHandler = 22
};

typedef enum _HAL_WATCHDOG_TIMER_SOURCE {
    HalWatchdogNone = 0,
    HalWatchdogHv = 1,
    HalWatchdogWdat = 2,
    HalWatchdogUnknown = 3
};

typedef enum _HARDERROR_RESPONSE {
    ResponseReturnToCaller = 0,
    ResponseNotHandled = 1,
    ResponseAbort = 2,
    ResponseCancel = 3,
    ResponseIgnore = 4,
    ResponseNo = 5,
    ResponseOk = 6,
    ResponseRetry = 7,
    ResponseYes = 8,
    ResponseTryAgain = 9,
    ResponseContinue = 10
};

typedef enum _HARDERROR_RESPONSE_OPTION {
    OptionAbortRetryIgnore = 0,
    OptionOk = 1,
    OptionOkCancel = 2,
    OptionRetryCancel = 3,
    OptionYesNo = 4,
    OptionYesNoCancel = 5,
    OptionShutdownSystem = 6,
    OptionOkNoWait = 7,
    OptionCancelTryContinue = 8
};

typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter = 0,
    MaxHardwareCounterType = 1
};

typedef enum _HIBERFILE_BUCKET_SIZE {
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB = 1,
    HiberFileBucket4GB = 2,
    HiberFileBucket8GB = 3,
    HiberFileBucket16GB = 4,
    HiberFileBucket32GB = 5,
    HiberFileBucketUnlimited = 6,
    HiberFileBucketMax = 7
};

typedef enum _HMA_CACHE_ASSOCIATIVITY {
    HmaCacheAssociativityNone = 0,
    HmaCacheAssociativityDirectMapped = 1,
    HmaCacheAssociativityComplex = 2
};

typedef enum _HMA_CACHE_LEVEL {
    HmaCacheLevelMemory = 0,
    HmaCacheLevel1 = 1,
    HmaCacheLevel2 = 2,
    HmaCacheLevel3 = 3,
    HmaCacheLevelLast = 1,
    HmaCacheLevelHighest = 3
};

typedef enum _HMA_CACHE_WRITE_POLICY {
    HmaCacheWritePolicyNone = 0,
    HmaCacheWritePolicyWriteBack = 1,
    HmaCacheWritePolicyWriteThrough = 2
};

typedef enum _HOT_PATCH_INFORMATION_CLASS {
    ManageHotPatchLoadPatch = 0,
    ManageHotPatchUnloadPatch = 1,
    ManageHotPatchQueryPatches = 2,
    ManageHotPatchLoadPatchForUser = 3,
    ManageHotPatchUnloadPatchForUser = 4,
    ManageHotPatchQueryPatchesForUser = 5,
    ManageHotPatchQueryActivePatches = 6,
    ManageHotPatchMax = 7
};

typedef enum _IF_ACCESS_TYPE {
    IF_ACCESS_LOOPBACK = 1,
    IF_ACCESS_BROADCAST = 2,
    IF_ACCESS_POINT_TO_POINT = 3,
    IF_ACCESS_POINTTOPOINT = 3,
    IF_ACCESS_POINT_TO_MULTI_POINT = 4,
    IF_ACCESS_POINTTOMULTIPOINT = 4
};

typedef enum _IF_ADMINISTRATIVE_STATE {
    IF_ADMINISTRATIVE_DISABLED = 0,
    IF_ADMINISTRATIVE_ENABLED = 1,
    IF_ADMINISTRATIVE_DEMANDDIAL = 2
};

typedef enum _IMAGE_MITIGATION_POLICY {
    ImageDepPolicy = 0,
    ImageAslrPolicy = 1,
    ImageDynamicCodePolicy = 2,
    ImageStrictHandleCheckPolicy = 3,
    ImageSystemCallDisablePolicy = 4,
    ImageMitigationOptionsMask = 5,
    ImageExtensionPointDisablePolicy = 6,
    ImageControlFlowGuardPolicy = 7,
    ImageSignaturePolicy = 8,
    ImageFontDisablePolicy = 9,
    ImageImageLoadPolicy = 10,
    ImagePayloadRestrictionPolicy = 11,
    ImageChildProcessPolicy = 12,
    ImageSehopPolicy = 13,
    ImageHeapPolicy = 14,
    MaxImageMitigationPolicy = 15
};

typedef enum _IMAGE_POLICY_ENTRY_TYPE {
    ImagePolicyEntryTypeNone = 0,
    ImagePolicyEntryTypeBool = 1,
    ImagePolicyEntryTypeInt8 = 2,
    ImagePolicyEntryTypeUInt8 = 3,
    ImagePolicyEntryTypeInt16 = 4,
    ImagePolicyEntryTypeUInt16 = 5,
    ImagePolicyEntryTypeInt32 = 6,
    ImagePolicyEntryTypeUInt32 = 7,
    ImagePolicyEntryTypeInt64 = 8,
    ImagePolicyEntryTypeUInt64 = 9,
    ImagePolicyEntryTypeAnsiString = 10,
    ImagePolicyEntryTypeUnicodeString = 11,
    ImagePolicyEntryTypeOverride = 12,
    ImagePolicyEntryTypeMaximum = 13
};

typedef enum _IMAGE_POLICY_ID {
    ImagePolicyIdNone = 0,
    ImagePolicyIdEtw = 1,
    ImagePolicyIdDebug = 2,
    ImagePolicyIdCrashDump = 3,
    ImagePolicyIdCrashDumpKey = 4,
    ImagePolicyIdCrashDumpKeyGuid = 5,
    ImagePolicyIdParentSd = 6,
    ImagePolicyIdParentSdRev = 7,
    ImagePolicyIdSvn = 8,
    ImagePolicyIdDeviceId = 9,
    ImagePolicyIdCapability = 10,
    ImagePolicyIdScenarioId = 11,
    ImagePolicyIdMaximum = 12
};

typedef enum _INTEL_CACHE_TYPE {
    IntelCacheNull = 0,
    IntelCacheData = 1,
    IntelCacheInstruction = 2,
    IntelCacheUnified = 3,
    IntelCacheRam = 4,
    IntelCacheTrace = 5
};

typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18
};

typedef enum _INTERLOCKED_RESULT {
    ResultNegative = 1,
    ResultZero = 0,
    ResultPositive = 2
};

typedef enum _INTERNAL_IF_OPER_STATUS {
    IF_OPER_STATUS_NON_OPERATIONAL = 0,
    IF_OPER_STATUS_UNREACHABLE = 1,
    IF_OPER_STATUS_DISCONNECTED = 2,
    IF_OPER_STATUS_CONNECTING = 3,
    IF_OPER_STATUS_CONNECTED = 4,
    IF_OPER_STATUS_OPERATIONAL = 5
};

typedef enum _IO_ACCESS_MODE {
    SequentialAccess = 0,
    RandomAccess = 1
};

typedef enum _IO_ACCESS_TYPE {
    ReadAccess = 0,
    WriteAccess = 1,
    ModifyAccess = 2
};

typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject = 2,
    DeallocateObjectKeepRegisters = 3
};

typedef enum _IO_COMPLETION_INFORMATION_CLASS {
    IoCompletionBasicInformation = 0
};

typedef enum _IO_COMPLETION_ROUTINE_RESULT {
    ContinueCompletion = 0,
    StopCompletion = -1073741802
};

typedef enum _IO_CONTAINER_INFORMATION_CLASS {
    IoSessionStateInformation = 0,
    IoMaxContainerInformationClass = 1
};

typedef enum _IO_CONTAINER_NOTIFICATION_CLASS {
    IoSessionStateNotification = 0,
    IoMaxContainerNotificationClass = 1
};

typedef enum _IO_NOTIFICATION_EVENT_CATEGORY {
    EventCategoryReserved = 0,
    EventCategoryHardwareProfileChange = 1,
    EventCategoryDeviceInterfaceChange = 2,
    EventCategoryTargetDeviceChange = 3
};

typedef enum _IO_PAGING_PRIORITY {
    IoPagingPriorityInvalid = 0,
    IoPagingPriorityNormal = 1,
    IoPagingPriorityHigh = 2,
    IoPagingPriorityReserved1 = 3,
    IoPagingPriorityReserved2 = 4
};

typedef enum _IO_PRIORITY_HINT {
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5
};

typedef enum _IO_QUERY_DEVICE_DATA_FORMAT {
    IoQueryDeviceIdentifier = 0,
    IoQueryDeviceConfigurationData = 1,
    IoQueryDeviceComponentInformation = 2,
    IoQueryDeviceMaxData = 3
};

typedef enum _IO_RATE_CONTROL_TYPE {
    IoRateControlTypeCapMin = 0,
    IoRateControlTypeIopsCap = 0,
    IoRateControlTypeBandwidthCap = 1,
    IoRateControlTypeTimePercentCap = 2,
    IoRateControlTypeCapMax = 2,
    IoRateControlTypeReservationMin = 3,
    IoRateControlTypeIopsReservation = 3,
    IoRateControlTypeBandwidthReservation = 4,
    IoRateControlTypeTimePercentReservation = 5,
    IoRateControlTypeReservationMax = 5,
    IoRateControlTypeCriticalReservationMin = 6,
    IoRateControlTypeIopsCriticalReservation = 6,
    IoRateControlTypeBandwidthCriticalReservation = 7,
    IoRateControlTypeTimePercentCriticalReservation = 8,
    IoRateControlTypeCriticalReservationMax = 8,
    IoRateControlTypeSoftCapMin = 9,
    IoRateControlTypeIopsSoftCap = 9,
    IoRateControlTypeBandwidthSoftCap = 10,
    IoRateControlTypeTimePercentSoftCap = 11,
    IoRateControlTypeSoftCapMax = 11,
    IoRateControlTypeLimitExcessNotifyMin = 12,
    IoRateControlTypeIopsLimitExcessNotify = 12,
    IoRateControlTypeBandwidthLimitExcessNotify = 13,
    IoRateControlTypeTimePercentLimitExcessNotify = 14,
    IoRateControlTypeLimitExcessNotifyMax = 14,
    IoRateControlTypeMax = 15
};

typedef enum _IO_SESSION_EVENT {
    IoSessionEventIgnore = 0,
    IoSessionEventCreated = 1,
    IoSessionEventTerminated = 2,
    IoSessionEventConnected = 3,
    IoSessionEventDisconnected = 4,
    IoSessionEventLogon = 5,
    IoSessionEventLogoff = 6,
    IoSessionEventMax = 7
};

typedef enum _IO_SESSION_STATE {
    IoSessionStateCreated = 1,
    IoSessionStateInitialized = 2,
    IoSessionStateConnected = 3,
    IoSessionStateDisconnected = 4,
    IoSessionStateDisconnectedLoggedOn = 5,
    IoSessionStateLoggedOn = 6,
    IoSessionStateLoggedOff = 7,
    IoSessionStateTerminated = 8,
    IoSessionStateMax = 9
};

typedef enum _IO_STEER_INTERRUPT_CONNECTION_TYPE {
    InterruptConnectionSingle = 0,
    InterruptConnectionMax = 1
};

typedef enum _IO_STEER_INTERRUPT_TARGET_TYPE {
    InterruptTargetDefault = 0,
    InterruptTargetCpuSetMask = 1,
    InterruptTargetMax = 2
};

typedef enum _IPI_TYPE {
    IpiAffinity = 0,
    IpiAllButSelf = 1,
    IpiAll = 2
};

typedef enum _IPSEC_OFFLOAD_V2_OPERATION {
    IPsecOffloadV2Ah = 1,
    IPsecOffloadV2Esp = 2,
    IPsecOffloadV2Max = 3
};

typedef enum _IRQ_DEVICE_POLICY {
    IrqPolicyMachineDefault = 0,
    IrqPolicyAllCloseProcessors = 1,
    IrqPolicyOneCloseProcessor = 2,
    IrqPolicyAllProcessorsInMachine = 3,
    IrqPolicySpecifiedProcessors = 4,
    IrqPolicySpreadMessagesAcrossAllProcessors = 5,
    IrqPolicyAllProcessorsInMachineWhenSteered = 6
};

typedef enum _IRQ_DEVICE_POLICY_USHORT {
    IrqPolicyMachineDefault = 0,
    IrqPolicyAllCloseProcessors = 1,
    IrqPolicyOneCloseProcessor = 2,
    IrqPolicyAllProcessorsInMachine = 3,
    IrqPolicyAllProcessorsInGroup = 3,
    IrqPolicySpecifiedProcessors = 4,
    IrqPolicySpreadMessagesAcrossAllProcessors = 5,
    IrqPolicyAllProcessorsInMachineWhenSteered = 6,
    IrqPolicyAllProcessorsInGroupWhenSteered = 6
};

typedef enum _IRQ_GROUP_POLICY {
    GroupAffinityAllGroupZero = 0,
    GroupAffinityDontCare = 1
};

typedef enum _IRQ_PRIORITY {
    IrqPriorityUndefined = 0,
    IrqPriorityLow = 1,
    IrqPriorityNormal = 2,
    IrqPriorityHigh = 3
};

typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectFreezeInformation = 18,
    JobObjectExtendedAccountingInformation = 19,
    JobObjectWakeInformation = 20,
    JobObjectBackgroundInformation = 21,
    JobObjectSchedulingRankBiasInformation = 22,
    JobObjectTimerVirtualizationInformation = 23,
    JobObjectCycleTimeNotification = 24,
    JobObjectClearEvent = 25,
    JobObjectInterferenceInformation = 26,
    JobObjectClearPeakJobMemoryUsed = 27,
    JobObjectMemoryUsageInformation = 28,
    JobObjectSharedCommit = 29,
    JobObjectContainerId = 30,
    JobObjectIoRateControlInformation = 31,
    JobObjectSiloRootDirectory = 37,
    JobObjectServerSiloBasicInformation = 38,
    JobObjectServerSiloUserSharedData = 39,
    JobObjectServerSiloInitialize = 40,
    JobObjectServerSiloRunningState = 41,
    JobObjectIoAttribution = 42,
    JobObjectMemoryPartitionInformation = 43,
    JobObjectContainerTelemetryId = 44,
    JobObjectSiloSystemRoot = 45,
    JobObjectEnergyTrackingState = 46,
    JobObjectThreadImpersonationInformation = 47,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass = 48
};

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium = 2,
    ToleranceHigh = 3
};

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium = 2,
    ToleranceIntervalLong = 3
};

typedef enum _JOURNAL_CHANGE_INFORMATION_CLASS {
    JournalCreateKey = 0,
    JournalDeleteKey = 1,
    JournalRenameKey = 2,
    JournalSetValue = 3,
    JournalDeleteValue = 4,
    JournalSetKeySecurity = 5,
    JournalSetKeyUserFlags = 6,
    JournalSetLastWriteTime = 7,
    JournalBeginTransaction = 8,
    JournalCommitTransaction = 9,
    JournalAbortTransaction = 10,
    MaxJournalChangeAction = 11
};

typedef enum _JOURNAL_INFORMATION_CLASS {
    JournalAbsoluteInformation = 0,
    JournalClientInformation = 1,
    MaxJournalInformation = 2
};

typedef enum _KAPC_ENVIRONMENT {
    OriginalApcEnvironment = 0,
    AttachedApcEnvironment = 1,
    CurrentApcEnvironment = 2,
    InsertApcEnvironment = 3
};

typedef enum _KBUGCHECK_BUFFER_DUMP_STATE {
    BufferEmpty = 0,
    BufferInserted = 1,
    BufferStarted = 2,
    BufferFinished = 3,
    BufferIncomplete = 4
};

typedef enum _KBUGCHECK_CALLBACK_REASON {
    KbCallbackInvalid = 0,
    KbCallbackReserved1 = 1,
    KbCallbackSecondaryDumpData = 2,
    KbCallbackDumpIo = 3,
    KbCallbackAddPages = 4,
    KbCallbackSecondaryMultiPartDumpData = 5,
    KbCallbackRemovePages = 6,
    KbCallbackTriageDumpData = 7
};

typedef enum _KBUGCHECK_DUMP_IO_TYPE {
    KbDumpIoInvalid = 0,
    KbDumpIoHeader = 1,
    KbDumpIoBody = 2,
    KbDumpIoSecondaryData = 3,
    KbDumpIoComplete = 4
};

typedef enum _KDPC_IMPORTANCE {
    LowImportance = 0,
    MediumImportance = 1,
    HighImportance = 2,
    MediumHighImportance = 3
};

typedef enum _KD_OPTION {
    KD_OPTION_SET_BLOCK_ENABLE = 0
};

typedef enum _KEY_INFORMATION_CLASS {
    KeyBasicInformation = 0,
    KeyNodeInformation = 1,
    KeyFullInformation = 2,
    KeyNameInformation = 3,
    KeyCachedInformation = 4,
    KeyFlagsInformation = 5,
    KeyVirtualizationInformation = 6,
    KeyHandleTagsInformation = 7,
    KeyTrustInformation = 8,
    KeyLayerInformation = 9,
    MaxKeyInfoClass = 10
};

typedef enum _KEY_SET_INFORMATION_CLASS {
    KeyWriteTimeInformation = 0,
    KeyWow64FlagsInformation = 1,
    KeyControlFlagsInformation = 2,
    KeySetVirtualizationInformation = 3,
    KeySetDebugInformation = 4,
    KeySetHandleTagsInformation = 5,
    KeySetLayerInformation = 6,
    MaxKeySetInfoClass = 7
};

typedef enum _KEY_VALUE_INFORMATION_CLASS {
    KeyValueBasicInformation = 0,
    KeyValueFullInformation = 1,
    KeyValuePartialInformation = 2,
    KeyValueFullInformationAlign64 = 3,
    KeyValuePartialInformationAlign64 = 4,
    KeyValueLayerInformation = 5,
    MaxKeyValueInfoClass = 6
};

typedef enum _KHETERO_CPU_POLICY {
    KHeteroCpuPolicyAll = 0,
    KHeteroCpuPolicyLarge = 1,
    KHeteroCpuPolicyLargeOrIdle = 2,
    KHeteroCpuPolicySmall = 3,
    KHeteroCpuPolicySmallOrIdle = 4,
    KHeteroCpuPolicyDynamic = 5,
    KHeteroCpuPolicyStaticMax = 5,
    KHeteroCpuPolicyBiasedSmall = 6,
    KHeteroCpuPolicyBiasedLarge = 7,
    KHeteroCpuPolicyDefault = 8,
    KHeteroCpuPolicyMax = 9
};

typedef enum _KINTEGRITY_CHECK_CONTROL {
    KIntegrityCheckControlResourceType = 0,
    KIntegrityCheckControlLast = 1
};

typedef enum _KINTEGRITY_RESOURCE_TYPE {
    KIntegrityResourceMemory = 0,
    KIntegrityResourceMsr = 1,
    KIntegrityResourceGdt = 2,
    KIntegrityResourceIdt = 3,
    KIntegrityResourceControlRegister = 4,
    KIntegrityResourceKernelCallout = 5,
    KIntegrityResourceLast = 6
};

typedef enum _KINTERRUPT_DISPATCH_STATUS {
    IsrNotDispatched = 0,
    IsrDispatchDeferred = 1,
    IsrDispatched = 2
};

typedef enum _KINTERRUPT_MODE {
    LevelSensitive = 0,
    Latched = 1
};

typedef enum _KINTERRUPT_POLARITY {
    InterruptPolarityUnknown = 0,
    InterruptActiveHigh = 1,
    InterruptRisingEdge = 1,
    InterruptActiveLow = 2,
    InterruptFallingEdge = 2,
    InterruptActiveBoth = 3,
    InterruptActiveBothTriggerLow = 3,
    InterruptActiveBothTriggerHigh = 4
};

typedef enum _KPROFILE_SOURCE {
    ProfileTime = 0,
    ProfileAlignmentFixup = 1,
    ProfileTotalIssues = 2,
    ProfilePipelineDry = 3,
    ProfileLoadInstructions = 4,
    ProfilePipelineFrozen = 5,
    ProfileBranchInstructions = 6,
    ProfileTotalNonissues = 7,
    ProfileDcacheMisses = 8,
    ProfileIcacheMisses = 9,
    ProfileCacheMisses = 10,
    ProfileBranchMispredictions = 11,
    ProfileStoreInstructions = 12,
    ProfileFpInstructions = 13,
    ProfileIntegerInstructions = 14,
    Profile2Issue = 15,
    Profile3Issue = 16,
    Profile4Issue = 17,
    ProfileSpecialInstructions = 18,
    ProfileTotalCycles = 19,
    ProfileIcacheIssues = 20,
    ProfileDcacheAccesses = 21,
    ProfileMemoryBarrierCycles = 22,
    ProfileLoadLinkedIssues = 23,
    ProfileMaximum = 24
};

typedef enum _KSTACK_TYPE {
    ReserveStackNormal = 0,
    ReserveStackLarge = 1,
    MaximumReserveStacks = 2
};

typedef enum _KTHREAD_TAG {
    KThreadTagNone = 0,
    KThreadTagMediaBuffering = 1,
    KThreadTagMax = 2
};

typedef enum _KTMOBJECT_TYPE {
    KTMOBJECT_TRANSACTION = 0,
    KTMOBJECT_TRANSACTION_MANAGER = 1,
    KTMOBJECT_RESOURCE_MANAGER = 2,
    KTMOBJECT_ENLISTMENT = 3,
    KTMOBJECT_INVALID = 4
};

typedef enum _KWAIT_REASON {
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrSpare0 = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    WrKeyedEvent = 21,
    WrTerminated = 22,
    WrProcessInSwap = 23,
    WrCpuRateControl = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    WrAlertByThreadId = 37,
    WrDeferredPreempt = 38,
    WrPhysicalFault = 39,
    MaximumWaitReason = 40
};

typedef enum _LDR_DDAG_STATE {
    LdrModulesMerged = -5,
    LdrModulesInitError = -4,
    LdrModulesSnapError = -3,
    LdrModulesUnloaded = -2,
    LdrModulesUnloading = -1,
    LdrModulesPlaceHolder = 0,
    LdrModulesMapping = 1,
    LdrModulesMapped = 2,
    LdrModulesWaitingForDependencies = 3,
    LdrModulesSnapping = 4,
    LdrModulesSnapped = 5,
    LdrModulesCondensed = 6,
    LdrModulesReadyToInit = 7,
    LdrModulesInitializing = 8,
    LdrModulesReadyToRun = 9
};

typedef enum _LDR_DLL_LOAD_REASON {
    LoadReasonStaticDependency = 0,
    LoadReasonStaticForwarderDependency = 1,
    LoadReasonDynamicForwarderDependency = 2,
    LoadReasonDelayloadDependency = 3,
    LoadReasonDynamicLoad = 4,
    LoadReasonAsImageLoad = 5,
    LoadReasonAsDataLoad = 6,
    LoadReasonEnclavePrimary = 7,
    LoadReasonEnclaveDependency = 8,
    LoadReasonUnknown = -1
};

typedef enum _LEARNING_MODE_LOG_LEVEL {
    LearningModeLogLevelPassive = 0,
    LearningModeLogLevelNormalApc = 1,
    LearningModeLogLevelSpecialApc = 2,
    LearningModeLogLevelMax = 3
};

typedef enum _LICENSING_TAMPER_STATE {
    LicensingTamperNone = 0,
    LicensingTamperTrustedStore = 1,
    LicensingTamperServiceStopped = 2,
    LicensingTamperModuleAuthentication = 3,
    LicensingTamperCacheData = 4,
    LicensingTamperOther = 5
};

typedef enum _LINK_TRACKING_INFORMATION_TYPE {
    NtfsLinkTrackingInformation = 0,
    DfsLinkTrackingInformation = 1
};

typedef enum _LOCK_OPERATION {
    IoReadAccess = 0,
    IoWriteAccess = 1,
    IoModifyAccess = 2
};

typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore = 0,
    RelationNumaNode = 1,
    RelationCache = 2,
    RelationProcessorPackage = 3,
    RelationGroup = 4,
    RelationAll = 0xffff
};

typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow = 1,
    MandatoryLevelMedium = 2,
    MandatoryLevelHigh = 3,
    MandatoryLevelSystem = 4,
    MandatoryLevelSecureProcess = 5,
    MandatoryLevelCount = 6
};

typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = 2,
    MmHardwareCoherentCached = 3,
    MmNonCachedUnordered = 4,
    MmUSWCCached = 5,
    MmMaximumCacheType = 6,
    MmNotMapped = -1
};

typedef enum _MEMORY_CACHING_TYPE_ORIG {
    MmFrameBufferCached = 2
};

typedef enum _MEMORY_EXHAUSTION_TYPE {
    MemoryExhaustionTypeFailFastOnCommitFailure = 0,
    MemoryExhaustionTypeMax = 1
};

typedef enum _MEMORY_INFORMATION_CLASS {
    MemoryBasicInformation = 0,
    MemoryWorkingSetInformation = 1,
    MemoryMappedFilenameInformation = 2,
    MemoryRegionInformation = 3,
    MemoryWorkingSetExInformation = 4,
    MemorySharedCommitInformation = 5,
    MemoryImageInformation = 6,
    MemoryRegionInformationEx = 7,
    MemoryPrivilegedBasicInformation = 8,
    MemoryEnclaveImageInformation = 9,
    MemoryBasicInformationCapped = 10
};

typedef enum _MEMORY_RESERVE_TYPE {
    MemoryReserveUserApc = 0,
    MemoryReserveIoCompletion = 1,
    MemoryReserveTypeMax = 2
};

typedef enum _MEMORY_WORKING_SET_EX_LOCATION {
    MemoryLocationInvalid = 0,
    MemoryLocationResident = 1,
    MemoryLocationPagefile = 2,
    MemoryLocationReserved = 3
};

typedef enum _MIB_IF_ENTRY_LEVEL {
    MibIfEntryNormal = 0,
    MibIfEntryNormalWithoutStatistics = 2
};

typedef enum _MM_ETW_WORKING_SET_TYPE {
    MmEtwWorkingSetTypeUser = 0,
    MmEtwWorkingSetTypeSession = 1,
    MmEtwWorkingSetTypeSystem = 2,
    MmEtwWorkingSetTypeMaximum = 3
};

typedef enum _MM_MDL_PAGE_CONTENTS_STATE {
    MmMdlPageContentsDynamic = 0,
    MmMdlPageContentsInvariant = 1,
    MmMdlPageContentsQuery = 2
};

typedef enum _MM_PAGE_PRIORITY {
    LowPagePriority = 0,
    NormalPagePriority = 16,
    HighPagePriority = 32
};

typedef enum _MM_ROTATE_DIRECTION {
    MmToFrameBuffer = 0,
    MmToFrameBufferNoCopy = 1,
    MmToRegularMemory = 2,
    MmToRegularMemoryNoCopy = 3,
    MmMaximumRotateDirection = 4
};

typedef enum _MM_SYSTEM_SIZE {
    MmSmallSystem = 0,
    MmMediumSystem = 1,
    MmLargeSystem = 2
};

typedef enum _MODE {
    KernelMode = 0,
    UserMode = 1,
    MaximumMode = 2
};

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn = 1,
    PowerMonitorDim = 2
};

typedef enum _MUTANT_INFORMATION_CLASS {
    MutantBasicInformation = 0,
    MutantOwnerInformation = 1
};

typedef enum _NDIS_802_11_AUTHENTICATION_MODE {
    Ndis802_11AuthModeOpen = 0,
    Ndis802_11AuthModeShared = 1,
    Ndis802_11AuthModeAutoSwitch = 2,
    Ndis802_11AuthModeWPA = 3,
    Ndis802_11AuthModeWPAPSK = 4,
    Ndis802_11AuthModeWPANone = 5,
    Ndis802_11AuthModeWPA2 = 6,
    Ndis802_11AuthModeWPA2PSK = 7,
    Ndis802_11AuthModeMax = 8
};

typedef enum _NDIS_802_11_MEDIA_STREAM_MODE {
    Ndis802_11MediaStreamOff = 0,
    Ndis802_11MediaStreamOn = 1
};

typedef enum _NDIS_802_11_NETWORK_INFRASTRUCTURE {
    Ndis802_11IBSS = 0,
    Ndis802_11Infrastructure = 1,
    Ndis802_11AutoUnknown = 2,
    Ndis802_11InfrastructureMax = 3
};

typedef enum _NDIS_802_11_NETWORK_TYPE {
    Ndis802_11FH = 0,
    Ndis802_11DS = 1,
    Ndis802_11OFDM5 = 2,
    Ndis802_11OFDM24 = 3,
    Ndis802_11Automode = 4,
    Ndis802_11NetworkTypeMax = 5
};

typedef enum _NDIS_802_11_POWER_MODE {
    Ndis802_11PowerModeCAM = 0,
    Ndis802_11PowerModeMAX_PSP = 1,
    Ndis802_11PowerModeFast_PSP = 2,
    Ndis802_11PowerModeMax = 3
};

typedef enum _NDIS_802_11_PRIVACY_FILTER {
    Ndis802_11PrivFilterAcceptAll = 0,
    Ndis802_11PrivFilter8021xWEP = 1
};

typedef enum _NDIS_802_11_RADIO_STATUS {
    Ndis802_11RadioStatusOn = 0,
    Ndis802_11RadioStatusHardwareOff = 1,
    Ndis802_11RadioStatusSoftwareOff = 2,
    Ndis802_11RadioStatusHardwareSoftwareOff = 3,
    Ndis802_11RadioStatusMax = 4
};

typedef enum _NDIS_802_11_RELOAD_DEFAULTS {
    Ndis802_11ReloadWEPKeys = 0
};

typedef enum _NDIS_802_11_STATUS_TYPE {
    Ndis802_11StatusType_Authentication = 0,
    Ndis802_11StatusType_MediaStreamMode = 1,
    Ndis802_11StatusType_PMKID_CandidateList = 2,
    Ndis802_11StatusTypeMax = 3
};

typedef enum _NDIS_802_11_WEP_STATUS {
    Ndis802_11WEPEnabled = 0,
    Ndis802_11Encryption1Enabled = 0,
    Ndis802_11WEPDisabled = 1,
    Ndis802_11EncryptionDisabled = 1,
    Ndis802_11WEPKeyAbsent = 2,
    Ndis802_11Encryption1KeyAbsent = 2,
    Ndis802_11WEPNotSupported = 3,
    Ndis802_11EncryptionNotSupported = 3,
    Ndis802_11Encryption2Enabled = 4,
    Ndis802_11Encryption2KeyAbsent = 5,
    Ndis802_11Encryption3Enabled = 6,
    Ndis802_11Encryption3KeyAbsent = 7
};

typedef enum _NDIS_802_5_RING_STATE {
    NdisRingStateOpened = 1,
    NdisRingStateClosed = 2,
    NdisRingStateOpening = 3,
    NdisRingStateClosing = 4,
    NdisRingStateOpenFailure = 5,
    NdisRingStateRingFailure = 6
};

typedef enum _NDIS_ARP_HEADER_FIELD {
    NdisARPHeaderFieldUndefined = 0,
    NdisARPHeaderFieldOperation = 1,
    NdisARPHeaderFieldSPA = 2,
    NdisARPHeaderFieldTPA = 3,
    NdisARPHeaderFieldMaximum = 4
};

typedef enum _NDIS_CLASS_ID {
    NdisClass802_3Priority = 0,
    NdisClassWirelessWanMbxMailbox = 1,
    NdisClassIrdaPacketInfo = 2,
    NdisClassAtmAALInfo = 3
};

typedef enum _NDIS_DEVICE_PNP_EVENT {
    NdisDevicePnPEventQueryRemoved = 0,
    NdisDevicePnPEventRemoved = 1,
    NdisDevicePnPEventSurpriseRemoved = 2,
    NdisDevicePnPEventQueryStopped = 3,
    NdisDevicePnPEventStopped = 4,
    NdisDevicePnPEventPowerProfileChanged = 5,
    NdisDevicePnPEventFilterListChanged = 6,
    NdisDevicePnPEventMaximum = 7
};

typedef enum _NDIS_DEVICE_POWER_STATE {
    NdisDeviceStateUnspecified = 0,
    NdisDeviceStateD0 = 1,
    NdisDeviceStateD1 = 2,
    NdisDeviceStateD2 = 3,
    NdisDeviceStateD3 = 4,
    NdisDeviceStateMaximum = 5
};

typedef enum _NDIS_ENVIRONMENT_TYPE {
    NdisEnvironmentWindows = 0,
    NdisEnvironmentWindowsNt = 1
};

typedef enum _NDIS_FDDI_ATTACHMENT_TYPE {
    NdisFddiTypeIsolated = 1,
    NdisFddiTypeLocalA = 2,
    NdisFddiTypeLocalB = 3,
    NdisFddiTypeLocalAB = 4,
    NdisFddiTypeLocalS = 5,
    NdisFddiTypeWrapA = 6,
    NdisFddiTypeWrapB = 7,
    NdisFddiTypeWrapAB = 8,
    NdisFddiTypeWrapS = 9,
    NdisFddiTypeCWrapA = 10,
    NdisFddiTypeCWrapB = 11,
    NdisFddiTypeCWrapS = 12,
    NdisFddiTypeThrough = 13
};

typedef enum _NDIS_FDDI_LCONNECTION_STATE {
    NdisFddiStateOff = 1,
    NdisFddiStateBreak = 2,
    NdisFddiStateTrace = 3,
    NdisFddiStateConnect = 4,
    NdisFddiStateNext = 5,
    NdisFddiStateSignal = 6,
    NdisFddiStateJoin = 7,
    NdisFddiStateVerify = 8,
    NdisFddiStateActive = 9,
    NdisFddiStateMaintenance = 10
};

typedef enum _NDIS_FDDI_RING_MGT_STATE {
    NdisFddiRingIsolated = 1,
    NdisFddiRingNonOperational = 2,
    NdisFddiRingOperational = 3,
    NdisFddiRingDetect = 4,
    NdisFddiRingNonOperationalDup = 5,
    NdisFddiRingOperationalDup = 6,
    NdisFddiRingDirected = 7,
    NdisFddiRingTrace = 8
};

typedef enum _NDIS_FRAME_HEADER {
    NdisFrameHeaderUndefined = 0,
    NdisFrameHeaderMac = 1,
    NdisFrameHeaderArp = 2,
    NdisFrameHeaderIPv4 = 3,
    NdisFrameHeaderIPv6 = 4,
    NdisFrameHeaderUdp = 5,
    NdisFrameHeaderMaximum = 6
};

typedef enum _NDIS_GFP_TABLE_TYPE {
    NdisGfpTableTypeUndefined = 0,
    NdisGfpTableTypeWildcardIngress = 1,
    NdisGfpTableTypeWildcardEgress = 2,
    NdisGfpTableTypeExactMatchIngress = 3,
    NdisGfpTableTypeExactMatchEgress = 4,
    NdisGfpTableTypePacketDirect = 5,
    NdisGfpTableTypeMax = 6
};

typedef enum _NDIS_GFP_WILDCARD_MATCH_TYPE {
    NdisGfpWildcardMatchTypeUndefined = 0,
    NdisGfpWildcardMatchTypeEqual = 1,
    NdisGfpWildcardMatchTypeMaskEqual = 2,
    NdisGfpWildcardMatchTypeInRange = 3,
    NdisGfpWildcardMatchTypeMax = 4
};

typedef enum _NDIS_GFT_COUNTER_TYPE {
    NdisGftCounterTypeUndefined = 0,
    NdisGftCounterTypePacketCounter = 1,
    NdisGftCounterTypeByteCounter = 2,
    NdisGftCounterTypePacketAndByteCounter = 3,
    NdisGftCounterTypeMax = 4
};

typedef enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY {
    NdisGftCounterUpdateFrequencyUndefined = 0,
    NdisGftCounterUpdateFrequencyOnQuery = 1,
    NdisGftCounterUpdateFrequencyPerUpdatePeriod = 2,
    NdisGftCounterUpdateFrequencyPerPacket = 3,
    NdisGftCounterUpdateFrequencyMax = 4
};

typedef enum _NDIS_GFT_COUNTER_VALUE_QUERY_METHOD {
    NdisGftQueryValueQueryMethodUndefined = 0,
    NdisGftQueryValueQueryMethodUsingCounterIds = 1,
    NdisGftQueryValueQueryMethodUsingFlowEntryIds = 2,
    NdisGftQueryValueQueryMethodVPortFlowEntries = 3,
    NdisGftQueryValueQueryMethodAllFlowEntries = 4,
    NdisGftQueryValueQueryMethodMax = 5
};

typedef enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT {
    NdisGftFlowEntryCacheHintUndefined = 0,
    NdisGftFlowEntryCacheHintLowFrequency = 100,
    NdisGftFlowEntryCacheHintMediumFrequency = 200,
    NdisGftFlowEntryCacheHintHighFrequency = 300,
    NdisGftFlowEntryCacheHintMax = 1000
};

typedef enum _NDIS_GFT_FLOW_ENTRY_STATE {
    NdisGftFlowEntryStateUndefined = 0,
    NdisGftFlowEntryStateDeactivated = 1,
    NdisGftFlowEntryStateActivated = 2,
    NdisGftFlowEntryStateMax = 3
};

typedef enum _NDIS_GFT_FLOW_ENTRY_TYPE {
    NdisGftFlowEntryTypeUndefined = 0,
    NdisGftFlowEntryTypeExactMatch = 1,
    NdisGftFlowEntryTypeWildcard = 2,
    NdisGftFlowEntryTypeMax = 3
};

typedef enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION {
    NdisGftHeaderGroupTranspositionActionUndefined = 0,
    NdisGftHeaderGroupTranspositionActionModify = 1,
    NdisGftHeaderGroupTranspositionActionIgnore = 2,
    NdisGftHeaderGroupTranspositionActionPush = 3,
    NdisGftHeaderGroupTranspositionActionPop = 4,
    NdisGftHeaderGroupTranspositionActionMax = 5
};

typedef enum _NDIS_GFT_PROFILE_TYPE {
    NdisGftProfileTypeUndefined = 0,
    NdisGftProfileTypeExactMatch = 1,
    NdisGftProfileTypeHeaderTransposition = 2,
    NdisGftProfileTypeWildcardMatch = 3,
    NdisGftProfileTypeMax = 4
};

typedef enum _NDIS_GFT_WILDCARD_ACTION {
    NdisGftWildcardActionUndefined = 0,
    NdisGftWildcardActionAllow = 1,
    NdisGftWildcardActionDrop = 2,
    NdisGftWildcardActionMax = 3
};

typedef enum _NDIS_HALT_ACTION {
    NdisHaltDeviceDisabled = 0,
    NdisHaltDeviceInstanceDeInitialized = 1,
    NdisHaltDevicePoweredDown = 2,
    NdisHaltDeviceSurpriseRemoved = 3,
    NdisHaltDeviceFailed = 4,
    NdisHaltDeviceInitializationFailed = 5,
    NdisHaltDeviceStopped = 6
};

typedef enum _NDIS_HARDWARE_STATUS {
    NdisHardwareStatusReady = 0,
    NdisHardwareStatusInitializing = 1,
    NdisHardwareStatusReset = 2,
    NdisHardwareStatusClosing = 3,
    NdisHardwareStatusNotReady = 4
};

typedef enum _NDIS_HYPERVISOR_PARTITION_TYPE {
    NdisHypervisorPartitionTypeUnknown = 0,
    NdisHypervisorPartitionTypeMsHvParent = 1,
    NdisHypervisorPartitionMsHvChild = 2,
    NdisHypervisorPartitionTypeMax = 3
};

typedef enum _NDIS_INTERFACE_TYPE {
    NdisInterfaceInternal = 0,
    NdisInterfaceIsa = 1,
    NdisInterfaceEisa = 2,
    NdisInterfaceMca = 3,
    NdisInterfaceTurboChannel = 4,
    NdisInterfacePci = 5,
    NdisInterfacePcMcia = 8,
    NdisInterfaceCBus = 9,
    NdisInterfaceMPIBus = 10,
    NdisInterfaceMPSABus = 11,
    NdisInterfaceProcessorInternal = 12,
    NdisInterfaceInternalPowerBus = 13,
    NdisInterfacePNPISABus = 14,
    NdisInterfacePNPBus = 15,
    NdisInterfaceUSB = 16,
    NdisInterfaceIrda = 17,
    NdisInterface1394 = 18,
    NdisMaximumInterfaceType = 19
};

typedef enum _NDIS_INTERRUPT_MODERATION {
    NdisInterruptModerationUnknown = 0,
    NdisInterruptModerationNotSupported = 1,
    NdisInterruptModerationEnabled = 2,
    NdisInterruptModerationDisabled = 3
};

typedef enum _NDIS_INTERRUPT_TYPE {
    NDIS_CONNECT_LINE_BASED = 1,
    NDIS_CONNECT_MESSAGE_BASED = 2
};

typedef enum _NDIS_IPV4_HEADER_FIELD {
    NdisIPv4HeaderFieldUndefined = 0,
    NdisIPv4HeaderFieldProtocol = 1,
    NdisIPv4HeaderFieldMaximum = 2
};

typedef enum _NDIS_IPV6_HEADER_FIELD {
    NdisIPv6HeaderFieldUndefined = 0,
    NdisIPv6HeaderFieldProtocol = 1,
    NdisIPv6HeaderFieldMaximum = 2
};

typedef enum _NDIS_ISOLATION_MODE {
    NdisIsolationModeNone = 0,
    NdisIsolationModeNativeVirtualSubnet = 1,
    NdisIsolationModeExternalVirtualSubnet = 2,
    NdisIsolationModeVlan = 3
};

typedef enum _NDIS_MAC_HEADER_FIELD {
    NdisMacHeaderFieldUndefined = 0,
    NdisMacHeaderFieldDestinationAddress = 1,
    NdisMacHeaderFieldSourceAddress = 2,
    NdisMacHeaderFieldProtocol = 3,
    NdisMacHeaderFieldVlanId = 4,
    NdisMacHeaderFieldPriority = 5,
    NdisMacHeaderFieldPacketType = 6,
    NdisMacHeaderFieldMaximum = 7
};

typedef enum _NDIS_MAC_PACKET_TYPE {
    NdisMacPacketTypeUndefined = 0,
    NdisMacPacketTypeUnicast = 1,
    NdisMacPacketTypeMulticast = 2,
    NdisMacPacketTypeBroadcast = 3,
    NdisMacPacketTypeMaximum = 4
};

typedef enum _NDIS_MEDIA_STATE {
    NdisMediaStateConnected = 0,
    NdisMediaStateDisconnected = 1
};

typedef enum _NDIS_MEDIUM {
    NdisMedium802_3 = 0,
    NdisMedium802_5 = 1,
    NdisMediumFddi = 2,
    NdisMediumWan = 3,
    NdisMediumLocalTalk = 4,
    NdisMediumDix = 5,
    NdisMediumArcnetRaw = 6,
    NdisMediumArcnet878_2 = 7,
    NdisMediumAtm = 8,
    NdisMediumWirelessWan = 9,
    NdisMediumIrda = 10,
    NdisMediumBpc = 11,
    NdisMediumCoWan = 12,
    NdisMedium1394 = 13,
    NdisMediumInfiniBand = 14,
    NdisMediumTunnel = 15,
    NdisMediumNative802_11 = 16,
    NdisMediumLoopback = 17,
    NdisMediumWiMAX = 18,
    NdisMediumIP = 19,
    NdisMediumMax = 20
};

typedef enum _NDIS_MSIX_TABLE_CONFIG {
    NdisMSIXTableConfigSetTableEntry = 0,
    NdisMSIXTableConfigMaskTableEntry = 1,
    NdisMSIXTableConfigUnmaskTableEntry = 2,
    NdisMSIXTableConfigMax = 3
};

typedef enum _NDIS_NBL_TRACKER_LIFETIME_EVENT {
    NdisNblTrackerEvent_QueuedByNdis = 1,
    NdisNblTrackerEvent_NblAllocated = 2,
    NdisNblTrackerEvent_NblAllocatedWithNb = 3,
    NdisNblTrackerEvent_NblFreed = 4,
    NdisNblTrackerEvent_NblAllocatedClone = 5,
    NdisNblTrackerEvent_NblFreedClone = 6,
    NdisNblTrackerEvent_NblAllocatedFragment = 7,
    NdisNblTrackerEvent_NblFreedFragment = 8,
    NdisNblTrackerEvent_NblAllocatedReassembled = 9,
    NdisNblTrackerEvent_NetioAllocatedClone = 10,
    NdisNblTrackerEvent_NetioFreedClone = 11,
    NdisNblTrackerEvent_CustomAllocatedChild = 12,
    NdisNblTrackerEvent_CustomFreedChild = 13,
    NdisNblTrackerEvent_CustomAllocatedNbl = 14,
    NdisNblTrackerEvent_CustomFreedNbl = 15,
    NdisNblTrackerEvent_OtherNotDatapath = 16,
    NdisNblTrackerEvent_PacketTranslationCached = 17,
    NdisNblTrackerEvent_PacketTranslationReused = 18,
    NdisNblTrackerEvent_Translate6To5TxOut = 19,
    NdisNblTrackerEvent_Translate6To5TxReturn = 20,
    NdisNblTrackerEvent_Translate5To6TxOut = 21,
    NdisNblTrackerEvent_Translate5To6TxReturn = 22,
    NdisNblTrackerEvent_Translate5To5TxOut = 23,
    NdisNblTrackerEvent_Translate5To5TxReturn = 24,
    NdisNblTrackerEvent_Translate6To5RxOut = 25,
    NdisNblTrackerEvent_Translate6To5RxReturn = 26,
    NdisNblTrackerEvent_Translate5To6RxOut = 27,
    NdisNblTrackerEvent_Translate5To6RxReturn = 28,
    NdisNblTrackerEvent_Translate5To5RxOut = 29,
    NdisNblTrackerEvent_Translate5To5RxReturn = 30,
    NdisNblTrackerEvent_LifetimeMax = 31
};

typedef enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT {
    NdisNblTrackerEvent_MiniportIndicated = 128,
    NdisNblTrackerEvent_MiniportIndicatedResources = 129,
    NdisNblTrackerEvent_FilterIndicated = 130,
    NdisNblTrackerEvent_FilterIndicatedResources = 131,
    NdisNblTrackerEvent_IndicatedToProtocol = 132,
    NdisNblTrackerEvent_IndicatedToProtocolResources = 133,
    NdisNblTrackerEvent_IndicatedToProtocolPacket = 134,
    NdisNblTrackerEvent_ProtocolReturned = 135,
    NdisNblTrackerEvent_ProtocolReturnedResources = 136,
    NdisNblTrackerEvent_ProtocolReturnedPacket = 137,
    NdisNblTrackerEvent_FilterReturned = 138,
    NdisNblTrackerEvent_ReturnedToFilter = 139,
    NdisNblTrackerEvent_ReturnedToFilterResources = 140,
    NdisNblTrackerEvent_ReturnedToMiniport = 141,
    NdisNblTrackerEvent_ReturnedToMiniportResources = 142,
    NdisNblTrackerEvent_ProtocolSent = 143,
    NdisNblTrackerEvent_FilterSent = 144,
    NdisNblTrackerEvent_SentToFilter = 145,
    NdisNblTrackerEvent_SentToMiniport = 146,
    NdisNblTrackerEvent_MiniportSendCompleted = 147,
    NdisNblTrackerEvent_FilterSendCompleted = 148,
    NdisNblTrackerEvent_SendCompletedToOpen = 149,
    NdisNblTrackerEvent_CustomReceived = 150,
    NdisNblTrackerEvent_CustomReturned = 151,
    NdisNblTrackerEvent_CustomSent = 152,
    NdisNblTrackerEvent_CustomSendCompleted = 153,
    NdisNblTrackerEvent_OtherDatapath = 154,
    NdisNblTrackerEvent_LoopbackIndicated = 155,
    NdisNblTrackerEvent_LoopbackReturned = 156,
    NdisNblTrackerEvent_OwnershipMax = 157
};

typedef enum _NDIS_NETWORK_CHANGE_TYPE {
    NdisPossibleNetworkChange = 1,
    NdisDefinitelyNetworkChange = 2,
    NdisNetworkChangeFromMediaConnect = 3,
    NdisNetworkChangeMax = 4
};

typedef enum _NDIS_NET_BUFFER_LIST_INFO {
    TcpIpChecksumNetBufferListInfo = 0,
    TcpOffloadBytesTransferred = 0,
    IPsecOffloadV1NetBufferListInfo = 1,
    IPsecOffloadV2NetBufferListInfo = 1,
    TcpLargeSendNetBufferListInfo = 2,
    TcpReceiveNoPush = 2,
    ClassificationHandleNetBufferListInfo = 3,
    Ieee8021QNetBufferListInfo = 4,
    NetBufferListCancelId = 5,
    MediaSpecificInformation = 6,
    NetBufferListFrameType = 7,
    NetBufferListProtocolId = 7,
    NetBufferListHashValue = 8,
    NetBufferListHashInfo = 9,
    WfpNetBufferListInfo = 10,
    IPsecOffloadV2TunnelNetBufferListInfo = 11,
    IPsecOffloadV2HeaderNetBufferListInfo = 12,
    NetBufferListCorrelationId = 13,
    NetBufferListFilteringInfo = 14,
    MediaSpecificInformationEx = 15,
    NblOriginalInterfaceIfIndex = 16,
    NblReAuthWfpFlowContext = 16,
    TcpReceiveBytesTransferred = 17,
    NrtNameResolutionId = 17,
    SwitchForwardingReserved = 18,
    SwitchForwardingDetail = 19,
    VirtualSubnetInfo = 20,
    IMReserved = 21,
    TcpRecvSegCoalesceInfo = 22,
    RscTcpTimestampDelta = 23,
    TcpSendOffloadsSupplementalNetBufferListInfo = 23,
    GftOffloadInformation = 24,
    GftFlowEntryId = 25,
    NetBufferListInfoReserved3 = 26,
    MaxNetBufferListInfo = 27
};

typedef enum _NDIS_NIC_SWITCH_TYPE {
    NdisNicSwitchTypeUnspecified = 0,
    NdisNicSwitchTypeExternal = 1,
    NdisNicSwitchTypeMax = 2
};

typedef enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION {
    NdisNicSwitchVPortInterruptModerationUndefined = 0,
    NdisNicSwitchVPortInterruptModerationAdaptive = 1,
    NdisNicSwitchVPortInterruptModerationOff = 2,
    NdisNicSwitchVPortInterruptModerationLow = 100,
    NdisNicSwitchVPortInterruptModerationMedium = 200,
    NdisNicSwitchVPortInterruptModerationHigh = 300
};

typedef enum _NDIS_NIC_SWITCH_VPORT_STATE {
    NdisNicSwitchVPortStateUndefined = 0,
    NdisNicSwitchVPortStateActivated = 1,
    NdisNicSwitchVPortStateDeactivated = 2,
    NdisNicSwitchVPortStateMaximum = 3
};

typedef enum _NDIS_PARAMETER_TYPE {
    NdisParameterInteger = 0,
    NdisParameterHexInteger = 1,
    NdisParameterString = 2,
    NdisParameterMultiString = 3,
    NdisParameterBinary = 4
};

typedef enum _NDIS_PER_PACKET_INFO {
    TcpIpChecksumPacketInfo = 0,
    IpSecPacketInfo = 1,
    TcpLargeSendPacketInfo = 2,
    ClassificationHandlePacketInfo = 3,
    NdisReserved = 4,
    ScatterGatherListPacketInfo = 5,
    Ieee8021QInfo = 6,
    OriginalPacketInfo = 7,
    PacketCancelId = 8,
    OriginalNetBufferList = 9,
    CachedNetBufferList = 10,
    ShortPacketPaddingInfo = 11,
    MaxPerPacketInfo = 12
};

typedef enum _NDIS_PHYSICAL_MEDIUM {
    NdisPhysicalMediumUnspecified = 0,
    NdisPhysicalMediumWirelessLan = 1,
    NdisPhysicalMediumCableModem = 2,
    NdisPhysicalMediumPhoneLine = 3,
    NdisPhysicalMediumPowerLine = 4,
    NdisPhysicalMediumDSL = 5,
    NdisPhysicalMediumFibreChannel = 6,
    NdisPhysicalMedium1394 = 7,
    NdisPhysicalMediumWirelessWan = 8,
    NdisPhysicalMediumNative802_11 = 9,
    NdisPhysicalMediumBluetooth = 10,
    NdisPhysicalMediumInfiniband = 11,
    NdisPhysicalMediumWiMax = 12,
    NdisPhysicalMediumUWB = 13,
    NdisPhysicalMedium802_3 = 14,
    NdisPhysicalMedium802_5 = 15,
    NdisPhysicalMediumIrda = 16,
    NdisPhysicalMediumWiredWAN = 17,
    NdisPhysicalMediumWiredCoWan = 18,
    NdisPhysicalMediumOther = 19,
    NdisPhysicalMediumNative802_15_4 = 20,
    NdisPhysicalMediumMax = 21
};

typedef enum _NDIS_PM_ADMIN_CONFIG_STATE {
    NdisPMAdminConfigUnspecified = 0,
    NdisPMAdminConfigDisabled = 1,
    NdisPMAdminConfigEnabled = 2
};

typedef enum _NDIS_PM_CAPABILITY_STATE {
    NdisPMAdminConfigUnsupported = 0,
    NdisPMAdminConfigInactive = 1,
    NdisPMAdminConfigActive = 2
};

typedef enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE {
    NdisPMProtocolOffloadIdUnspecified = 0,
    NdisPMProtocolOffloadIdIPv4ARP = 1,
    NdisPMProtocolOffloadIdIPv6NS = 2,
    NdisPMProtocolOffload80211RSNRekey = 3,
    NdisPMProtocolOffloadIdMaximum = 4
};

typedef enum _NDIS_PM_WAKE_REASON_TYPE {
    NdisWakeReasonUnspecified = 0,
    NdisWakeReasonPacket = 1,
    NdisWakeReasonMediaDisconnect = 2,
    NdisWakeReasonMediaConnect = 3,
    NdisWakeReasonWlanNLODiscovery = 4096,
    NdisWakeReasonWlanAPAssociationLost = 4097,
    NdisWakeReasonWlanGTKHandshakeError = 4098,
    NdisWakeReasonWlan4WayHandshakeRequest = 4099,
    NdisWakeReasonWwanRegisterState = 8192,
    NdisWakeReasonWwanSMSReceive = 8193,
    NdisWakeReasonWwanUSSDReceive = 8194
};

typedef enum _NDIS_PM_WOL_PACKET {
    NdisPMWoLPacketUnspecified = 0,
    NdisPMWoLPacketBitmapPattern = 1,
    NdisPMWoLPacketMagicPacket = 2,
    NdisPMWoLPacketIPv4TcpSyn = 3,
    NdisPMWoLPacketIPv6TcpSyn = 4,
    NdisPMWoLPacketEapolRequestIdMessage = 5,
    NdisPMWoLPacketMaximum = 6
};

typedef enum _NDIS_PORT_AUTHORIZATION_STATE {
    NdisPortAuthorizationUnknown = 0,
    NdisPortAuthorized = 1,
    NdisPortUnauthorized = 2,
    NdisPortReauthorizing = 3
};

typedef enum _NDIS_PORT_CONTROL_STATE {
    NdisPortControlStateUnknown = 0,
    NdisPortControlStateControlled = 1,
    NdisPortControlStateUncontrolled = 2
};

typedef enum _NDIS_PORT_TYPE {
    NdisPortTypeUndefined = 0,
    NdisPortTypeBridge = 1,
    NdisPortTypeRasConnection = 2,
    NdisPortType8021xSupplicant = 3,
    NdisPortTypeNdisImPlatform = 4,
    NdisPortTypeMax = 5
};

typedef enum _NDIS_POWER_PROFILE {
    NdisPowerProfileBattery = 0,
    NdisPowerProfileAcOnLine = 1
};

typedef enum _NDIS_PROCESSOR_TYPE {
    NdisProcessorX86 = 0,
    NdisProcessorMips = 1,
    NdisProcessorAlpha = 2,
    NdisProcessorPpc = 3,
    NdisProcessorAmd64 = 4,
    NdisProcessorIA64 = 5,
    NdisProcessorArm = 6,
    NdisProcessorArm64 = 7
};

typedef enum _NDIS_PROCESSOR_VENDOR {
    NdisProcessorVendorUnknown = 0,
    NdisProcessorVendorGenuinIntel = 1,
    NdisProcessorVendorGenuineIntel = 1,
    NdisProcessorVendorAuthenticAMD = 2
};

typedef enum _NDIS_QOS_SQ_TYPE {
    NdisQosSqTypeUndefined = 0,
    NdisQosSqTypeStandard = 1,
    NdisQosSqTypeGFT = 2,
    NdisQosSqTypeMax = 3
};

typedef enum _NDIS_RECEIVE_FILTER_TEST {
    NdisReceiveFilterTestUndefined = 0,
    NdisReceiveFilterTestEqual = 1,
    NdisReceiveFilterTestMaskEqual = 2,
    NdisReceiveFilterTestNotEqual = 3,
    NdisReceiveFilterTestMaximum = 4
};

typedef enum _NDIS_RECEIVE_FILTER_TYPE {
    NdisReceiveFilterTypeUndefined = 0,
    NdisReceiveFilterTypeVMQueue = 1,
    NdisReceiveFilterTypePacketCoalescing = 2,
    NdisReceiveFilterTypeMaximum = 3
};

typedef enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE {
    NdisReceiveQueueOperationalStateUndefined = 0,
    NdisReceiveQueueOperationalStateRunning = 1,
    NdisReceiveQueueOperationalStatePaused = 2,
    NdisReceiveQueueOperationalStateDmaStopped = 3,
    NdisReceiveQueueOperationalStateMaximum = 4
};

typedef enum _NDIS_RECEIVE_QUEUE_TYPE {
    NdisReceiveQueueTypeUnspecified = 0,
    NdisReceiveQueueTypeVMQueue = 1,
    NdisReceiveQueueTypeMaximum = 2
};

typedef enum _NDIS_REQUEST_TYPE {
    NdisRequestQueryInformation = 0,
    NdisRequestSetInformation = 1,
    NdisRequestQueryStatistics = 2,
    NdisRequestOpen = 3,
    NdisRequestClose = 4,
    NdisRequestSend = 5,
    NdisRequestTransferData = 6,
    NdisRequestReset = 7,
    NdisRequestGeneric1 = 8,
    NdisRequestGeneric2 = 9,
    NdisRequestGeneric3 = 10,
    NdisRequestGeneric4 = 11,
    NdisRequestMethod = 12
};

typedef enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS {
    NDIS_RFC6877_464XLAT_OFFLOAD_NOT_SUPPORTED = 0,
    NDIS_RFC6877_464XLAT_OFFLOAD_DISABLED = 1,
    NDIS_RFC6877_464XLAT_OFFLOAD_ENABLED = 2,
    NDIS_RFC6877_464XLAT_OFFLOAD_ON_DEMAND = 3
};

typedef enum _NDIS_RSS_PROFILE {
    NdisRssProfileClosest = 1,
    NdisRssProfileClosestStatic = 2,
    NdisRssProfileNuma = 3,
    NdisRssProfileNumaStatic = 4,
    NdisRssProfileConservative = 5,
    NdisRssProfileMaximum = 6
};

typedef enum _NDIS_SHARED_MEMORY_USAGE {
    NdisSharedMemoryUsageUndefined = 0,
    NdisSharedMemoryUsageXmit = 1,
    NdisSharedMemoryUsageXmitHeader = 2,
    NdisSharedMemoryUsageXmitData = 3,
    NdisSharedMemoryUsageReceive = 4,
    NdisSharedMemoryUsageReceiveLookahead = 5,
    NdisSharedMemoryUsageReceivePostLookahead = 6,
    NdisSharedMemoryUsageReceiveHeader = 7,
    NdisSharedMemoryUsageReceiveData = 8,
    NdisSharedMemoryUsageOther = 9,
    NdisSharedMemoryUsageMax = 10
};

typedef enum _NDIS_SHUTDOWN_ACTION {
    NdisShutdownPowerOff = 0,
    NdisShutdownBugCheck = 1
};

typedef enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS {
    NdisPauseFunctionsUnsupported = 0,
    NdisPauseFunctionsSendOnly = 1,
    NdisPauseFunctionsReceiveOnly = 2,
    NdisPauseFunctionsSendAndReceive = 3,
    NdisPauseFunctionsUnknown = 4
};

typedef enum _NDIS_SWITCH_FEATURE_STATUS_TYPE {
    NdisSwitchFeatureStatusTypeUndefined = 0,
    NdisSwitchFeatureStatusTypeCustom = 1,
    NdisSwitchFeatureStatusTypeMaximum = 2
};

typedef enum _NDIS_SWITCH_NIC_STATE {
    NdisSwitchNicStateUnknown = 0,
    NdisSwitchNicStateCreated = 1,
    NdisSwitchNicStateConnected = 2,
    NdisSwitchNicStateDisconnected = 3,
    NdisSwitchNicStateDeleted = 4
};

typedef enum _NDIS_SWITCH_NIC_TYPE {
    NdisSwitchNicTypeExternal = 0,
    NdisSwitchNicTypeSynthetic = 1,
    NdisSwitchNicTypeEmulated = 2,
    NdisSwitchNicTypeInternal = 3
};

typedef enum _NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE {
    NdisSwitchPortFeatureStatusTypeUndefined = 0,
    NdisSwitchPortFeatureStatusTypeCustom = 1,
    NdisSwitchPortFeatureStatusTypeMaximum = 2
};

typedef enum _NDIS_SWITCH_PORT_PROPERTY_TYPE {
    NdisSwitchPortPropertyTypeUndefined = 0,
    NdisSwitchPortPropertyTypeCustom = 1,
    NdisSwitchPortPropertyTypeSecurity = 2,
    NdisSwitchPortPropertyTypeVlan = 3,
    NdisSwitchPortPropertyTypeProfile = 4,
    NdisSwitchPortPropertyTypeIsolation = 5,
    NdisSwitchPortPropertyTypeRoutingDomain = 6,
    NdisSwitchPortPropertyTypeMaximum = 7
};

typedef enum _NDIS_SWITCH_PORT_PVLAN_MODE {
    NdisSwitchPortPvlanModeUndefined = 0,
    NdisSwitchPortPvlanModeIsolated = 1,
    NdisSwitchPortPvlanModeCommunity = 2,
    NdisSwitchPortPvlanModePromiscuous = 3
};

typedef enum _NDIS_SWITCH_PORT_STATE {
    NdisSwitchPortStateUnknown = 0,
    NdisSwitchPortStateCreated = 1,
    NdisSwitchPortStateTeardown = 2,
    NdisSwitchPortStateDeleted = 3
};

typedef enum _NDIS_SWITCH_PORT_TYPE {
    NdisSwitchPortTypeGeneric = 0,
    NdisSwitchPortTypeExternal = 1,
    NdisSwitchPortTypeSynthetic = 2,
    NdisSwitchPortTypeEmulated = 3,
    NdisSwitchPortTypeInternal = 4
};

typedef enum _NDIS_SWITCH_PORT_VLAN_MODE {
    NdisSwitchPortVlanModeUnknown = 0,
    NdisSwitchPortVlanModeAccess = 1,
    NdisSwitchPortVlanModeTrunk = 2,
    NdisSwitchPortVlanModePrivate = 3,
    NdisSwitchPortVlanModeMax = 4
};

typedef enum _NDIS_SWITCH_PROPERTY_TYPE {
    NdisSwitchPropertyTypeUndefined = 0,
    NdisSwitchPropertyTypeCustom = 1,
    NdisSwitchPropertyTypeMaximum = 2
};

typedef enum _NDIS_UDP_HEADER_FIELD {
    NdisUdpHeaderFieldUndefined = 0,
    NdisUdpHeaderFieldDestinationPort = 1,
    NdisUdpHeaderFieldMaximum = 2
};

typedef enum _NDIS_WAN_HEADER_FORMAT {
    NdisWanHeaderNative = 0,
    NdisWanHeaderEthernet = 1
};

typedef enum _NDIS_WAN_MEDIUM_SUBTYPE {
    NdisWanMediumHub = 0,
    NdisWanMediumX_25 = 1,
    NdisWanMediumIsdn = 2,
    NdisWanMediumSerial = 3,
    NdisWanMediumFrameRelay = 4,
    NdisWanMediumAtm = 5,
    NdisWanMediumSonet = 6,
    NdisWanMediumSW56K = 7,
    NdisWanMediumPPTP = 8,
    NdisWanMediumL2TP = 9,
    NdisWanMediumIrda = 10,
    NdisWanMediumParallel = 11,
    NdisWanMediumPppoe = 12,
    NdisWanMediumSSTP = 13,
    NdisWanMediumAgileVPN = 14,
    NdisWanMediumGre = 15,
    NdisWanMediumSubTypeMax = 16
};

typedef enum _NDIS_WAN_QUALITY {
    NdisWanRaw = 0,
    NdisWanErrorControl = 1,
    NdisWanReliable = 2
};

typedef enum _NDK_RDMA_TECHNOLOGY {
    NdkUndefined = 0,
    NdkiWarp = 1,
    NdkInfiniBand = 2,
    NdkRoCE = 3,
    NdkRoCEv2 = 4,
    NdkMaxTechnology = 5
};

typedef enum _NETFUNCENUM {
    NetDefaultAdapterInitAllocateTableIndex = 0,
    NetAdapterInitAllocateTableIndex = 1,
    NetAdapterInitFreeTableIndex = 2,
    NetAdapterInitSetDatapathCallbacksTableIndex = 3,
    NetAdapterInitSetNetRequestAttributesTableIndex = 4,
    NetAdapterInitSetNetPowerSettingsAttributesTableIndex = 5,
    NetAdapterDeviceInitConfigTableIndex = 6,
    NetAdapterCreateTableIndex = 7,
    NetAdapterStartTableIndex = 8,
    NetAdapterStopTableIndex = 9,
    NetAdapterSetLinkLayerCapabilitiesTableIndex = 10,
    NetAdapterSetLinkLayerMtuSizeTableIndex = 11,
    NetAdapterSetPowerCapabilitiesTableIndex = 12,
    NetAdapterSetDataPathCapabilitiesTableIndex = 13,
    NetAdapterSetCurrentLinkStateTableIndex = 14,
    NetAdapterWdmGetNdisHandleTableIndex = 15,
    NetAdapterGetNetLuidTableIndex = 16,
    NetAdapterOpenConfigurationTableIndex = 17,
    NetAdapterGetPowerSettingsTableIndex = 18,
    NetAdapterDriverWdmGetHandleTableIndex = 19,
    NetAdapterSetPermanentLinkLayerAddressTableIndex = 20,
    NetAdapterSetCurrentLinkLayerAddressTableIndex = 21,
    NetAdapterOffloadSetChecksumCapabilitiesTableIndex = 22,
    NetAdapterOffloadSetLsoCapabilitiesTableIndex = 23,
    NetAdapterInitGetCreatedAdapterTableIndex = 24,
    NetAdapterExtensionInitAllocateTableIndex = 25,
    NetAdapterExtensionInitSetNetRequestPreprocessCallbackTableIndex = 26,
    NetAdapterDispatchPreprocessedNetRequestTableIndex = 27,
    NetAdapterGetParentTableIndex = 28,
    NetAdapterGetLinkLayerMtuSizeTableIndex = 29,
    NetPacketGetTypedContextTableIndex = 30,
    NetPacketGetContextFromTokenTableIndex = 31,
    NetConfigurationCloseTableIndex = 32,
    NetConfigurationOpenSubConfigurationTableIndex = 33,
    NetConfigurationQueryUlongTableIndex = 34,
    NetConfigurationQueryStringTableIndex = 35,
    NetConfigurationQueryMultiStringTableIndex = 36,
    NetConfigurationQueryBinaryTableIndex = 37,
    NetConfigurationQueryLinkLayerAddressTableIndex = 38,
    NetConfigurationAssignUlongTableIndex = 39,
    NetConfigurationAssignUnicodeStringTableIndex = 40,
    NetConfigurationAssignMultiStringTableIndex = 41,
    NetConfigurationAssignBinaryTableIndex = 42,
    NetDeviceOpenConfigurationTableIndex = 43,
    NetDeviceSetResetCallbackTableIndex = 44,
    NetAdapterRegisterPacketExtensionTableIndex = 45,
    NetAdapterQueryRegisteredPacketExtensionTableIndex = 46,
    NetTxQueueInitAddPacketExtensionTableIndex = 47,
    NetRxQueueInitAddPacketExtensionTableIndex = 48,
    NetPowerSettingsGetWakePatternCountTableIndex = 49,
    NetPowerSettingsGetWakePatternCountForTypeTableIndex = 50,
    NetPowerSettingsGetWakePatternTableIndex = 51,
    NetPowerSettingsIsWakePatternEnabledTableIndex = 52,
    NetPowerSettingsGetEnabledWakeUpFlagsTableIndex = 53,
    NetPowerSettingsGetEnabledWakePatternFlagsTableIndex = 54,
    NetPowerSettingsGetEnabledProtocolOffloadFlagsTableIndex = 55,
    NetPowerSettingsGetEnabledMediaSpecificWakeUpEventsTableIndex = 56,
    NetPowerSettingsGetProtocolOffloadCountTableIndex = 57,
    NetPowerSettingsGetProtocolOffloadCountForTypeTableIndex = 58,
    NetPowerSettingsGetProtocolOffloadTableIndex = 59,
    NetPowerSettingsIsProtocolOffloadEnabledTableIndex = 60,
    NetAdapterSetReceiveScalingCapabilitiesTableIndex = 61,
    NetRequestRetrieveInputOutputBufferTableIndex = 62,
    NetRequestWdmGetNdisOidRequestTableIndex = 63,
    NetRequestCompleteWithoutInformationTableIndex = 64,
    NetRequestSetDataCompleteTableIndex = 65,
    NetRequestQueryDataCompleteTableIndex = 66,
    NetRequestMethodCompleteTableIndex = 67,
    NetRequestSetBytesNeededTableIndex = 68,
    NetRequestGetIdTableIndex = 69,
    NetRequestGetPortNumberTableIndex = 70,
    NetRequestGetSwitchIdTableIndex = 71,
    NetRequestGetVPortIdTableIndex = 72,
    NetRequestGetTypeTableIndex = 73,
    NetRequestGetAdapterTableIndex = 74,
    NetRequestQueueCreateTableIndex = 75,
    NetRequestQueueGetAdapterTableIndex = 76,
    NetRxQueueCreateTableIndex = 77,
    NetRxQueueNotifyMoreReceivedPacketsAvailableTableIndex = 78,
    NetRxQueueInitGetQueueIdTableIndex = 79,
    NetRxQueueGetDatapathDescriptorTableIndex = 80,
    NetRxQueueGetPacketContextTokenTableIndex = 81,
    NetRxQueueInitAddPacketContextAttributesTableIndex = 82,
    NetRxQueueGetPacketExtensionOffsetTableIndex = 83,
    NetTxQueueCreateTableIndex = 84,
    NetTxQueueNotifyMoreCompletedPacketsAvailableTableIndex = 85,
    NetTxQueueInitGetQueueIdTableIndex = 86,
    NetTxQueueGetDatapathDescriptorTableIndex = 87,
    NetTxQueueGetPacketContextTokenTableIndex = 88,
    NetTxQueueInitAddPacketContextAttributesTableIndex = 89,
    NetTxQueueGetPacketExtensionOffsetTableIndex = 90,
    NetFunctionTableNumEntries = 91
};

typedef enum _NET_ADAPTER_AUTO_NEGOTIATION_FLAGS {
    NET_ADAPTER_AUTO_NEGOTIATION_NO_FLAGS = 0,
    NET_ADAPTER_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED = 1,
    NET_ADAPTER_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED = 2,
    NET_ADAPTER_LINK_STATE_DUPLEX_AUTO_NEGOTIATED = 4,
    NET_ADAPTER_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED = 8
};

typedef enum _NET_ADAPTER_MEDIA_SPECIFIC_WAKEUP_EVENTS_FLAGS {
    NET_ADAPTER_WLAN_WAKE_ON_NLO_DISCOVERY = 1,
    NET_ADAPTER_WLAN_WAKE_ON_AP_ASSOCIATION_LOST = 2,
    NET_ADAPTER_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR = 4,
    NET_ADAPTER_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST = 8,
    NET_ADAPTER_WWAN_WAKE_ON_REGISTER_STATE = 1,
    NET_ADAPTER_WWAN_WAKE_ON_SMS_RECEIVE = 2,
    NET_ADAPTER_WWAN_WAKE_ON_USSD_RECEIVE = 4,
    NET_ADAPTER_WWAN_WAKE_ON_PACKET_STATE = 8,
    NET_ADAPTER_WWAN_WAKE_ON_UICC_CHANGE = 16
};

typedef enum _NET_ADAPTER_PAUSE_FUNCTIONS {
    NetAdapterPauseFunctionsUnsupported = 0,
    NetAdapterPauseFunctionsSendOnly = 1,
    NetAdapterPauseFunctionsReceiveOnly = 2,
    NetAdapterPauseFunctionsSendAndReceive = 3,
    NetAdapterPauseFunctionsUnknown = 4
};

typedef enum _NET_ADAPTER_POWER_FLAGS {
    NET_ADAPTER_POWER_WAKE_PACKET_INDICATION = 1,
    NET_ADAPTER_POWER_SELECTIVE_SUSPEND = 2
};

typedef enum _NET_ADAPTER_PROTOCOL_OFFLOADS_FLAGS {
    NET_ADAPTER_PROTOCOL_OFFLOAD_ARP = 1,
    NET_ADAPTER_PROTOCOL_OFFLOAD_NS = 2,
    NET_ADAPTER_PROTOCOL_OFFLOAD_80211_RSN_REKEY = 128
};

typedef enum _NET_ADAPTER_RECEIVE_SCALING_ENCAPSULATION_TYPE {
    NetAdapterReceiveScalingEncapsulationTypeNone = 0,
    NetAdapterReceiveScalingEncapsulationTypeNVGre = 1,
    NetAdapterReceiveScalingEncapsulationTypeVXLan = 2,
    NetAdapterReceiveScalingEncapsulationTypeVLan = 4
};

typedef enum _NET_ADAPTER_RECEIVE_SCALING_HASH_TYPE {
    NetAdapterReceiveScalingHashTypeNone = 0,
    NetAdapterReceiveScalingHashTypeToeplitz = 1
};

typedef enum _NET_ADAPTER_RECEIVE_SCALING_PROTOCOL_TYPE {
    NetAdapterReceiveScalingProtocolTypeNone = 0,
    NetAdapterReceiveScalingProtocolTypeIPv4 = 1,
    NetAdapterReceiveScalingProtocolTypeIPv4Options = 2,
    NetAdapterReceiveScalingProtocolTypeIPv6 = 4,
    NetAdapterReceiveScalingProtocolTypeIPv6Extensions = 8,
    NetAdapterReceiveScalingProtocolTypeTcp = 16,
    NetAdapterReceiveScalingProtocolTypeUdp = 32
};

typedef enum _NET_ADAPTER_RECEIVE_SCALING_UNHASHED_TARGET_TYPE {
    NetAdapterReceiveScalingUnhashedTargetTypeUnspecified = 0,
    NetAdapterReceiveScalingUnhashedTargetTypeHashIndex = 1
};

typedef enum _NET_ADAPTER_STATISTICS_FLAGS {
    NET_ADAPTER_STATISTICS_NO_FLAGS = 0,
    NET_ADAPTER_STATISTICS_XMIT_OK = 1,
    NET_ADAPTER_STATISTICS_RCV_OK = 2,
    NET_ADAPTER_STATISTICS_XMIT_ERROR = 4,
    NET_ADAPTER_STATISTICS_RCV_ERROR = 8,
    NET_ADAPTER_STATISTICS_RCV_NO_BUFFER = 16,
    NET_ADAPTER_STATISTICS_DIRECTED_BYTES_XMIT = 32,
    NET_ADAPTER_STATISTICS_DIRECTED_FRAMES_XMIT = 64,
    NET_ADAPTER_STATISTICS_MULTICAST_BYTES_XMIT = 128,
    NET_ADAPTER_STATISTICS_MULTICAST_FRAMES_XMIT = 256,
    NET_ADAPTER_STATISTICS_BROADCAST_BYTES_XMIT = 512,
    NET_ADAPTER_STATISTICS_BROADCAST_FRAMES_XMIT = 1024,
    NET_ADAPTER_STATISTICS_DIRECTED_BYTES_RCV = 2048,
    NET_ADAPTER_STATISTICS_DIRECTED_FRAMES_RCV = 4096,
    NET_ADAPTER_STATISTICS_MULTICAST_BYTES_RCV = 8192,
    NET_ADAPTER_STATISTICS_MULTICAST_FRAMES_RCV = 16384,
    NET_ADAPTER_STATISTICS_BROADCAST_BYTES_RCV = 0x8000,
    NET_ADAPTER_STATISTICS_BROADCAST_FRAMES_RCV = 0x10000,
    NET_ADAPTER_STATISTICS_RCV_CRC_ERROR = 0x20000,
    NET_ADAPTER_STATISTICS_TRANSMIT_QUEUE_LENGTH = 0x40000,
    NET_ADAPTER_STATISTICS_BYTES_RCV = 0x80000,
    NET_ADAPTER_STATISTICS_BYTES_XMIT = 0x100000,
    NET_ADAPTER_STATISTICS_RCV_DISCARDS = 0x200000,
    NET_ADAPTER_STATISTICS_GEN_STATISTICS = 0x400000,
    NET_ADAPTER_STATISTICS_XMIT_DISCARDS = 0x8000000
};

typedef enum _NET_ADAPTER_WAKEUP_EVENTS_FLAGS {
    NET_ADAPTER_WAKE_ON_MEDIA_CONNECT = 1,
    NET_ADAPTER_WAKE_ON_MEDIA_DISCONNECT = 2
};

typedef enum _NET_ADAPTER_WAKE_PATTERN_FLAGS {
    NET_ADAPTER_WAKE_BITMAP_PATTERN = 1,
    NET_ADAPTER_WAKE_MAGIC_PACKET = 2,
    NET_ADAPTER_WAKE_IPV4_TCP_SYN = 4,
    NET_ADAPTER_WAKE_IPV6_TCP_SYN = 8,
    NET_ADAPTER_WAKE_IPV4_DEST_ADDR_WILDCARD = 512,
    NET_ADAPTER_WAKE_IPV6_DEST_ADDR_WILDCARD = 2048,
    NET_ADAPTER_WAKE_EAPOL_REQUEST_ID_MESSAGE = 0x10000
};

typedef enum _NET_CLIENT_BUFFER_POOL_FLAGS {
    NET_CLIENT_BUFFER_POOL_FLAGS_NONE = 0,
    NET_CLIENT_BUFFER_POOL_FLAGS_SERIALIZATION = 1
};

typedef enum _NET_CLIENT_MEMORY_MANAGEMENT_MODE {
    NET_CLIENT_MEMORY_MANAGEMENT_MODE_DRIVER = 0,
    NET_CLIENT_MEMORY_MANAGEMENT_MODE_OS_ALLOCATE_AND_ATTACH = 1,
    NET_CLIENT_MEMORY_MANAGEMENT_MODE_OS_ONLY_ALLOCATE = 2
};

typedef enum _NET_CLIENT_MEMORY_MAPPING_REQUIREMENT {
    NET_CLIENT_MEMORY_MAPPING_REQUIREMENT_NONE = 0,
    NET_CLIENT_MEMORY_MAPPING_REQUIREMENT_DMA_MAPPED = 1
};

typedef enum _NET_CONFIGURATION_QUERY_ULONG_FLAGS {
    NET_CONFIGURATION_QUERY_ULONG_NO_FLAGS = 0,
    NET_CONFIGURATION_QUERY_ULONG_MAY_BE_STORED_AS_HEX_STRING = 1
};

typedef enum _NET_DATPATH_RING_BUFFER_INDEX {
    NET_DATPATH_RING_BUFFER_INDEX_PACKET = 0,
    NET_DATPATH_RING_BUFFER_INDEX_FRAGMENT = 1
};

typedef enum _NET_DEVICE_POWER_STATE {
    NetDeviceStateUnspecified = 0,
    NetDeviceStateD0 = 1,
    NetDeviceStateD1 = 2,
    NetDeviceStateD2 = 3,
    NetDeviceStateD3 = 4,
    NetDeviceStateMaximum = 5
};

typedef enum _NET_DEVICE_RESET_TYPE {
    FunctionLevelReset = 0,
    PlatformLevelReset = 1
};

typedef enum _NET_IF_ACCESS_TYPE {
    NET_IF_ACCESS_LOOPBACK = 1,
    NET_IF_ACCESS_BROADCAST = 2,
    NET_IF_ACCESS_POINT_TO_POINT = 3,
    NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
    NET_IF_ACCESS_MAXIMUM = 5
};

typedef enum _NET_IF_ADMIN_STATUS {
    NET_IF_ADMIN_STATUS_UP = 1,
    NET_IF_ADMIN_STATUS_DOWN = 2,
    NET_IF_ADMIN_STATUS_TESTING = 3
};

typedef enum _NET_IF_CONNECTION_TYPE {
    NET_IF_CONNECTION_DEDICATED = 1,
    NET_IF_CONNECTION_PASSIVE = 2,
    NET_IF_CONNECTION_DEMAND = 3,
    NET_IF_CONNECTION_MAXIMUM = 4
};

typedef enum _NET_IF_DIRECTION_TYPE {
    NET_IF_DIRECTION_SENDRECEIVE = 0,
    NET_IF_DIRECTION_SENDONLY = 1,
    NET_IF_DIRECTION_RECEIVEONLY = 2,
    NET_IF_DIRECTION_MAXIMUM = 3
};

typedef enum _NET_IF_MEDIA_CONNECT_STATE {
    MediaConnectStateUnknown = 0,
    MediaConnectStateConnected = 1,
    MediaConnectStateDisconnected = 2
};

typedef enum _NET_IF_MEDIA_DUPLEX_STATE {
    MediaDuplexStateUnknown = 0,
    MediaDuplexStateHalf = 1,
    MediaDuplexStateFull = 2
};

typedef enum _NET_IF_OPER_STATUS {
    NET_IF_OPER_STATUS_UP = 1,
    NET_IF_OPER_STATUS_DOWN = 2,
    NET_IF_OPER_STATUS_TESTING = 3,
    NET_IF_OPER_STATUS_UNKNOWN = 4,
    NET_IF_OPER_STATUS_DORMANT = 5,
    NET_IF_OPER_STATUS_NOT_PRESENT = 6,
    NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7
};

typedef enum _NET_IF_RCV_ADDRESS_TYPE {
    NET_IF_RCV_ADDRESS_TYPE_OTHER = 1,
    NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2,
    NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3
};

typedef enum _NET_MEMORY_MAPPING_REQUIREMENT {
    NetMemoryMappingRequirementNone = 0,
    NetMemoryMappingRequirementDmaMapped = 1
};

typedef enum _NET_PACKET_ENCAPSULATION_TYPE {
    NET_PACKET_ENCAPSULATION_TYPE_UNSPECIFIED = 0,
    NET_PACKET_ENCAPSULATION_TYPE_IP_IN_IP = 1,
    NET_PACKET_ENCAPSULATION_TYPE_IP_IN_GRE = 2,
    NET_PACKET_ENCAPSULATION_TYPE_NVGRE = 3,
    NET_PACKET_ENCAPSULATION_TYPE_VXLAN = 4
};

typedef enum _NET_PACKET_FILTER_TYPES_FLAGS {
    NET_PACKET_FILTER_TYPE_DIRECTED = 1,
    NET_PACKET_FILTER_TYPE_MULTICAST = 2,
    NET_PACKET_FILTER_TYPE_ALL_MULTICAST = 4,
    NET_PACKET_FILTER_TYPE_BROADCAST = 8,
    NET_PACKET_FILTER_TYPE_SOURCE_ROUTING = 16,
    NET_PACKET_FILTER_TYPE_PROMISCUOUS = 32,
    NET_PACKET_FILTER_TYPE_ALL_LOCAL = 128,
    NET_PACKET_FILTER_TYPE_MAC_FRAME = 0x8000,
    NET_PACKET_FILTER_TYPE_NO_LOCAL = 0x10000
};

typedef enum _NET_PACKET_LAYER2_TYPE {
    NET_PACKET_LAYER2_TYPE_UNSPECIFIED = 0,
    NET_PACKET_LAYER2_TYPE_NULL = 1,
    NET_PACKET_LAYER2_TYPE_ETHERNET = 2
};

typedef enum _NET_PACKET_LAYER3_TYPE {
    NET_PACKET_LAYER3_TYPE_UNSPECIFIED = 0,
    NET_PACKET_LAYER3_TYPE_IPV4_UNSPECIFIED_OPTIONS = 1,
    NET_PACKET_LAYER3_TYPE_IPV4_WITH_OPTIONS = 2,
    NET_PACKET_LAYER3_TYPE_IPV4_NO_OPTIONS = 3,
    NET_PACKET_LAYER3_TYPE_IPV6_UNSPECIFIED_EXTENSIONS = 4,
    NET_PACKET_LAYER3_TYPE_IPV6_WITH_EXTENSIONS = 5,
    NET_PACKET_LAYER3_TYPE_IPV6_NO_EXTENSIONS = 6
};

typedef enum _NET_PACKET_LAYER4_TYPE {
    NET_PACKET_LAYER4_TYPE_UNSPECIFIED = 0,
    NET_PACKET_LAYER4_TYPE_TCP = 1,
    NET_PACKET_LAYER4_TYPE_UDP = 2,
    NET_PACKET_LAYER4_TYPE_IP_NOT_FRAGMENTED = 3,
    NET_PACKET_LAYER4_TYPE_IP_FRAGMENT = 4
};

typedef enum _NET_PACKET_RX_CHECKSUM_EVALUATION {
    NET_PACKET_RX_CHECKSUM_NOT_CHECKED = 0,
    NET_PACKET_RX_CHECKSUM_VALID = 1,
    NET_PACKET_RX_CHECKSUM_INVALID = 2
};

typedef enum _NET_PACKET_TX_CHECKSUM_ACTION {
    NET_PACKET_TX_CHECKSUM_PASSTHROUGH = 0,
    NET_PACKET_TX_CHECKSUM_REQUIRED = 2
};

typedef enum _NET_PNP_EVENT_CODE {
    NetEventSetPower = 0,
    NetEventQueryPower = 1,
    NetEventQueryRemoveDevice = 2,
    NetEventCancelRemoveDevice = 3,
    NetEventReconfigure = 4,
    NetEventBindList = 5,
    NetEventBindsComplete = 6,
    NetEventPnPCapabilities = 7,
    NetEventPause = 8,
    NetEventRestart = 9,
    NetEventPortActivation = 10,
    NetEventPortDeactivation = 11,
    NetEventIMReEnableDevice = 12,
    NetEventNDKEnable = 13,
    NetEventNDKDisable = 14,
    NetEventFilterPreDetach = 15,
    NetEventBindFailed = 16,
    NetEventSwitchActivate = 17,
    NetEventAllowBindsAbove = 18,
    NetEventInhibitBindsAbove = 19,
    NetEventAllowStart = 20,
    NetEventRequirePause = 21,
    NetEventUploadGftFlowEntries = 22,
    NetEventMaximum = 23
};

typedef enum _NET_REQUEST_QUEUE_TYPE {
    NetRequestQueueTypeInvalid = 0,
    NetRequestQueueDefaultSequential = 1,
    NetRequestQueueDefaultParallel = 2
};

typedef enum _NET_RING_BUFFER_HEAD_TYPE {
    NET_RING_BUFFER_HEAD_TYPE_END = 0,
    NET_RING_BUFFER_HEAD_TYPE_NEXT = 1,
    NET_RING_BUFFER_HEAD_TYPE_BEGIN = 2,
    NET_RING_BUFFER_HEAD_TYPE_OS = 3
};

typedef enum _NET_RX_FRAGMENT_BUFFER_ALLOCATION_MODE {
    NetRxFragmentBufferAllocationModeSystem = 0,
    NetRxFragmentBufferAllocationModeDriver = 1
};

typedef enum _NET_RX_FRAGMENT_BUFFER_ATTACHMENT_MODE {
    NetRxFragmentBufferAttachmentModeSystem = 0,
    NetRxFragmentBufferAttachmentModeDriver = 1
};

typedef enum _NL_BANDWIDTH_FLAG {
    NlbwDisabled = 0,
    NlbwEnabled = 1,
    NlbwUnchanged = -1
};

typedef enum _NL_INTERFACE_NETWORK_CATEGORY_STATE {
    NlincCategoryUnknown = 0,
    NlincPublic = 1,
    NlincPrivate = 2,
    NlincDomainAuthenticated = 3,
    NlincCategoryStateMax = 4
};

typedef enum _NL_LINK_LOCAL_ADDRESS_BEHAVIOR {
    LinkLocalAlwaysOff = 0,
    LinkLocalDelayed = 1,
    LinkLocalAlwaysOn = 2,
    LinkLocalUnchanged = -1
};

typedef enum _NL_NEIGHBOR_STATE {
    NlnsUnreachable = 0,
    NlnsIncomplete = 1,
    NlnsProbe = 2,
    NlnsDelay = 3,
    NlnsStale = 4,
    NlnsReachable = 5,
    NlnsPermanent = 6,
    NlnsMaximum = 7
};

typedef enum _NL_NETWORK_CATEGORY {
    NetworkCategoryPublic = 0,
    NetworkCategoryPrivate = 1,
    NetworkCategoryDomainAuthenticated = 2,
    NetworkCategoryUnchanged = -1,
    NetworkCategoryUnknown = -1
};

typedef enum _NL_ROUTER_DISCOVERY_BEHAVIOR {
    RouterDiscoveryDisabled = 0,
    RouterDiscoveryEnabled = 1,
    RouterDiscoveryDhcp = 2,
    RouterDiscoveryUnchanged = -1
};

typedef enum _NL_ROUTE_ORIGIN {
    NlroManual = 0,
    NlroWellKnown = 1,
    NlroDHCP = 2,
    NlroRouterAdvertisement = 3,
    Nlro6to4 = 4
};

typedef enum _NPI_MODULEID_TYPE {
    MIT_GUID = 1,
    MIT_IF_LUID = 2
};

typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3
};

typedef enum _NX_POWER_ENTRY_TYPE {
    NxPowerEntryTypeWakePattern = 0,
    NxPowerEntryTypeProtocolOffload = 1
};

typedef enum _NdisWdfPnpPowerAction {
    NdisWdfActionPnpStart = 0,
    NdisWdfActionPnpQueryStop = 1,
    NdisWdfActionPnpCancelStop = 2,
    NdisWdfActionPnpStop = 3,
    NdisWdfActionPnpQueryRemove = 4,
    NdisWdfActionPnpCancelRemove = 5,
    NdisWdfActionPnpSurpriseRemove = 6,
    NdisWdfActionPnpRemove = 7,
    NdisWdfActionPowerD0Implicit = 8,
    NdisWdfActionPowerD0 = 9,
    NdisWdfActionPowerDx = 10,
    NdisWdfActionStartPowerManagement = 11,
    NdisWdfActionStopPowerManagement = 12,
    NdisWdfActionPowerDxFinal = 13,
    NdisWdfActionPowerDxOnSystemSx = 14,
    NdisWdfActionPowerDxOnSystemShutdown = 15,
    NdisWdfActionPowerNone = 16,
    NdisWdfActionPreReleaseHardware = 17,
    NdisWdfActionPostReleaseHardware = 18,
    NdisWdfActionPnpRebalance = 19,
    NdisWdfActionDeviceObjectCleanup = 20
};

typedef enum _OBJECT_INFORMATION_CLASS {
    ObjectBasicInformation = 0,
    ObjectNameInformation = 1,
    ObjectTypeInformation = 2,
    ObjectTypesInformation = 3,
    ObjectHandleFlagInformation = 4,
    ObjectSessionInformation = 5,
    ObjectSessionObjectInformation = 6,
    MaxObjectInfoClass = 7
};

typedef enum _OB_OPEN_REASON {
    ObCreateHandle = 0,
    ObOpenHandle = 1,
    ObDuplicateHandle = 2,
    ObInheritHandle = 3,
    ObMaxOpenReason = 4
};

typedef enum _OB_PREOP_CALLBACK_STATUS {
    OB_PREOP_SUCCESS = 0
};

typedef enum _OFFLOAD_CONF_ALGO {
    OFFLOAD_IPSEC_CONF_NONE = 0,
    OFFLOAD_IPSEC_CONF_DES = 1,
    OFFLOAD_IPSEC_CONF_RESERVED = 2,
    OFFLOAD_IPSEC_CONF_3_DES = 3,
    OFFLOAD_IPSEC_CONF_MAX = 4
};

typedef enum _OFFLOAD_INTEGRITY_ALGO {
    OFFLOAD_IPSEC_INTEGRITY_NONE = 0,
    OFFLOAD_IPSEC_INTEGRITY_MD5 = 1,
    OFFLOAD_IPSEC_INTEGRITY_SHA = 2,
    OFFLOAD_IPSEC_INTEGRITY_MAX = 3
};

typedef enum _OFFLOAD_OPERATION_E {
    AUTHENTICATE = 1,
    ENCRYPT = 2
};

typedef enum _OS_DEPLOYEMENT_STATE_VALUES {
    OS_DEPLOYMENT_STANDARD = 1,
    OS_DEPLOYMENT_COMPACT = 2
};

typedef enum _PARTITION_INFORMATION_CLASS {
    SystemMemoryPartitionInformation = 0,
    SystemMemoryPartitionMoveMemory = 1,
    SystemMemoryPartitionAddPagefile = 2,
    SystemMemoryPartitionCombineMemory = 3,
    SystemMemoryPartitionInitialAddMemory = 4,
    SystemMemoryPartitionGetMemoryEvents = 5,
    SystemMemoryPartitionMax = 6
};

typedef enum _PCI_ACS_BIT {
    PciAcsReserved = 0,
    PciAcsBitEnable = 1,
    PciAcsBitDisable = 2,
    PciAcsBitDontCare = 3
};

typedef enum _PCI_BUSMASTER_RID_TYPE {
    BusmasterRidFromDeviceRid = 0,
    BusmasterRidFromBridgeRid = 1,
    BusmasterRidFromMultipleBridges = 2
};

typedef enum _PCI_HARDWARE_INTERFACE {
    PciConventional = 0,
    PciXMode1 = 1,
    PciXMode2 = 2,
    PciExpress = 3
};

typedef enum _PCW_CALLBACK_TYPE {
    PcwCallbackAddCounter = 0,
    PcwCallbackRemoveCounter = 1,
    PcwCallbackEnumerateInstances = 2,
    PcwCallbackCollectData = 3
};

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE {
    PerfInfoMemUsagePfnMetadata = 0,
    PerfInfoMemUsageMax = 1
};

typedef enum _PERFINFO_MM_STAT {
    PerfInfoMMStatNotUsed = 0,
    PerfInfoMMStatAggregatePageCombine = 1,
    PerfInfoMMStatIterationPageCombine = 2,
    PerfInfoMMStatMax = 3
};

typedef enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE {
    ResourceTypeSingle = 0,
    ResourceTypeRange = 1,
    ResourceTypeExtendedCounterConfiguration = 2,
    ResourceTypeOverflow = 3,
    ResourceTypeMax = 4
};

typedef enum _PHYSICAL_MEMORY_HEAT_TYPE {
    PhysicalMemoryCold = 0,
    PhysicalMemoryHot = 1,
    PhysicalMemoryHeatTypeMax = 2
};

typedef enum _PLUGPLAY_CONTROL_CLASS {
    PlugPlayControlEnumerateDevice = 0,
    PlugPlayControlRegisterNewDevice = 1,
    PlugPlayControlDeregisterDevice = 2,
    PlugPlayControlInitializeDevice = 3,
    PlugPlayControlStartDevice = 4,
    PlugPlayControlUnlockDevice = 5,
    PlugPlayControlQueryAndRemoveDevice = 6,
    PlugPlayControlUserResponse = 7,
    PlugPlayControlGenerateLegacyDevice = 8,
    PlugPlayControlGetInterfaceDeviceList = 9,
    PlugPlayControlProperty = 10,
    PlugPlayControlDeviceClassAssociation = 11,
    PlugPlayControlGetRelatedDevice = 12,
    PlugPlayControlGetInterfaceDeviceAlias = 13,
    PlugPlayControlDeviceStatus = 14,
    PlugPlayControlGetDeviceDepth = 15,
    PlugPlayControlQueryDeviceRelations = 16,
    PlugPlayControlTargetDeviceRelation = 17,
    PlugPlayControlQueryConflictList = 18,
    PlugPlayControlRetrieveDock = 19,
    PlugPlayControlResetDevice = 20,
    PlugPlayControlHaltDevice = 21,
    PlugPlayControlGetBlockedDriverList = 22,
    PlugPlayControlGetDeviceInterfaceEnabled = 23,
    MaxPlugPlayControl = 24
};

typedef enum _PLUGPLAY_EVENT_CATEGORY {
    HardwareProfileChangeEvent = 0,
    TargetDeviceChangeEvent = 1,
    DeviceClassChangeEvent = 2,
    CustomDeviceEvent = 3,
    DeviceInstallEvent = 4,
    DeviceArrivalEvent = 5,
    VetoEvent = 6,
    BlockedDriverEvent = 7,
    InvalidIDEvent = 8,
    DevicePropertyChangeEvent = 9,
    DeviceInstanceRemovalEvent = 10,
    DeviceInstanceStartedEvent = 11,
    MaxPlugEventCategory = 12
};

typedef enum _PMTUD_STATE {
    IP_PMTUDISC_NOT_SET = 0,
    IP_PMTUDISC_DO = 1,
    IP_PMTUDISC_DONT = 2,
    IP_PMTUDISC_PROBE = 3,
    IP_PMTUDISC_MAX = 4
};

typedef enum _PNP_DEVICE_DMA_REMAPPING_POLICY {
    DmaRemappingPolicyDefault = 0,
    DmaRemappingPolicyOptOut = 1,
    DmaRemappingPolicyOptIn = 2,
    DmaRemappingPolicyMax = 3
};

typedef enum _PNP_QUERY_RELATION {
    PnpQueryEjectRelations = 0,
    PnpQueryRemovalRelations = 1,
    PnpQueryPowerRelations = 2,
    PnpQueryBusRelations = 3,
    PnpQueryTransportRelations = 4,
    MaxPnpQueryRelations = 5
};

typedef enum _PNP_VETO_TYPE {
    PNP_VetoTypeUnknown = 0,
    PNP_VetoLegacyDevice = 1,
    PNP_VetoPendingClose = 2,
    PNP_VetoWindowsApp = 3,
    PNP_VetoWindowsService = 4,
    PNP_VetoOutstandingOpen = 5,
    PNP_VetoDevice = 6,
    PNP_VetoDriver = 7,
    PNP_VetoIllegalDeviceRequest = 8,
    PNP_VetoInsufficientPower = 9,
    PNP_VetoNonDisableable = 10,
    PNP_VetoLegacyDriver = 11,
    PNP_VetoInsufficientRights = 12
};

typedef enum _POOL_TYPE {
    NonPagedPool = 0,
    NonPagedPoolExecute = 0,
    PagedPool = 1,
    NonPagedPoolMustSucceed = 2,
    DontUseThisType = 3,
    NonPagedPoolCacheAligned = 4,
    PagedPoolCacheAligned = 5,
    NonPagedPoolCacheAlignedMustS = 6,
    MaxPoolType = 7,
    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = 2,
    NonPagedPoolBaseCacheAligned = 4,
    NonPagedPoolBaseCacheAlignedMustS = 6,
    NonPagedPoolSession = 32,
    PagedPoolSession = 33,
    NonPagedPoolMustSucceedSession = 34,
    DontUseThisTypeSession = 35,
    NonPagedPoolCacheAlignedSession = 36,
    PagedPoolCacheAlignedSession = 37,
    NonPagedPoolCacheAlignedMustSSession = 38,
    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = 516,
    NonPagedPoolSessionNx = 544
};

typedef enum _PORT_INFORMATION_CLASS {
    PortBasicInformation = 0,
    PortDumpInformation = 1
};

typedef enum _POWERSTATETASK {
    PowerState_BlockSessionSwitch = 0,
    PowerState_Init = 1,
    PowerState_SuspendApps = 2,
    PowerState_SuspendServices = 3,
    PowerState_NotifyWL = 4,
    PowerState_ResumeApps = 5,
    PowerState_ResumeServices = 6,
    PowerState_UnBlockSessionSwitch = 7,
    PowerState_End = 8,
    PowerState_Flush = 9,
    PowerState_StartPartitionReplace = 10,
    PowerState_EndPartitionReplace = 11,
    PowerState_MonitorOff = 12
};

typedef enum _POWER_MONITOR_REQUEST_TYPE {
    MonitorRequestTypeOff = 0,
    MonitorRequestTypeOnAndPresent = 1,
    MonitorRequestTypeToggleOn = 2
};

typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop = 1,
    PlatformRoleMobile = 2,
    PlatformRoleWorkstation = 3,
    PlatformRoleEnterpriseServer = 4,
    PlatformRoleSOHOServer = 5,
    PlatformRoleAppliancePC = 6,
    PlatformRolePerformanceServer = 7,
    PlatformRoleSlate = 8,
    PlatformRoleMaximum = 9
};

typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3
};

typedef enum _POWER_STATE_TYPE {
    SystemPowerState = 0,
    DevicePowerState = 1
};

typedef enum _PO_CS_DEVICE_NOTIFICATION_TYPE {
    PoCsDeviceNotificationStorage = 0,
    PoCsDeviceNotificationWiFi = 1,
    PoCsDeviceNotificationMbn = 2,
    PoCsDeviceNotificationAudio = 3,
    PoCsDeviceNotificationEthernet = 4,
    PoCsDeviceNotificationMaximum = 5
};

typedef enum _PO_FX_PERF_STATE_TYPE {
    PoFxPerfStateTypeDiscrete = 0,
    PoFxPerfStateTypeRange = 1,
    PoFxPerfStateTypeMaximum = 2
};

typedef enum _PO_FX_PERF_STATE_UNIT {
    PoFxPerfStateUnitOther = 0,
    PoFxPerfStateUnitFrequency = 1,
    PoFxPerfStateUnitBandwidth = 2,
    PoFxPerfStateUnitMaximum = 3
};

typedef enum _PO_HIBER_FORCE_DISABLE_REASON {
    PoHiberForceDisableReasonPolicy = 0,
    PoHiberForceDisableReasonGuardedHost = 1,
    PoHiberForceDisableReasonMax = 2
};

typedef enum _PO_SLEEP_DISABLE_REASON {
    PoSleepDisableReasonVideo = 0,
    PoSleepDisableReasonHypervisor = 1,
    PoSleepDisableReasonVhdBoot = 2,
    PoSleepDisableReasonPortableWorkspace = 3,
    PoSleepDisableReasonPolicy = 4,
    PoSleepDisableReasonGuardedHost = 5,
    PoSleepDisableReasonMax = 6
};

typedef enum _PO_THERMAL_REQUEST_TYPE {
    PoThermalRequestPassive = 0,
    PoThermalRequestActive = 1
};

typedef enum _PREFETCH_VIRTUAL_ADDRESS_PRIORITY_TYPE {
    PrefetchPagePriorityDefault = 0,
    PrefetchPagePriorityLow = 1,
    PrefetchPagePriorityUseThreadDefault = 2,
    PrefetchPagePriorityReserved = 3
};

typedef enum _PROCESSINFOCLASS {
    ProcessBasicInformation = 0,
    ProcessQuotaLimits = 1,
    ProcessIoCounters = 2,
    ProcessVmCounters = 3,
    ProcessTimes = 4,
    ProcessBasePriority = 5,
    ProcessRaisePriority = 6,
    ProcessDebugPort = 7,
    ProcessExceptionPort = 8,
    ProcessAccessToken = 9,
    ProcessLdtInformation = 10,
    ProcessLdtSize = 11,
    ProcessDefaultHardErrorMode = 12,
    ProcessIoPortHandlers = 13,
    ProcessPooledUsageAndLimits = 14,
    ProcessWorkingSetWatch = 15,
    ProcessUserModeIOPL = 16,
    ProcessEnableAlignmentFaultFixup = 17,
    ProcessPriorityClass = 18,
    ProcessWx86Information = 19,
    ProcessHandleCount = 20,
    ProcessAffinityMask = 21,
    ProcessPriorityBoost = 22,
    ProcessDeviceMap = 23,
    ProcessSessionInformation = 24,
    ProcessForegroundInformation = 25,
    ProcessWow64Information = 26,
    ProcessImageFileName = 27,
    ProcessLUIDDeviceMapsEnabled = 28,
    ProcessBreakOnTermination = 29,
    ProcessDebugObjectHandle = 30,
    ProcessDebugFlags = 31,
    ProcessHandleTracing = 32,
    ProcessIoPriority = 33,
    ProcessExecuteFlags = 34,
    ProcessTlsInformation = 35,
    ProcessCookie = 36,
    ProcessImageInformation = 37,
    ProcessCycleTime = 38,
    ProcessPagePriority = 39,
    ProcessInstrumentationCallback = 40,
    ProcessThreadStackAllocation = 41,
    ProcessWorkingSetWatchEx = 42,
    ProcessImageFileNameWin32 = 43,
    ProcessImageFileMapping = 44,
    ProcessAffinityUpdateMode = 45,
    ProcessMemoryAllocationMode = 46,
    ProcessGroupInformation = 47,
    ProcessTokenVirtualizationEnabled = 48,
    ProcessOwnerInformation = 49,
    ProcessWindowInformation = 50,
    ProcessHandleInformation = 51,
    ProcessMitigationPolicy = 52,
    ProcessDynamicFunctionTableInformation = 53,
    ProcessHandleCheckingMode = 54,
    ProcessKeepAliveCount = 55,
    ProcessRevokeFileHandles = 56,
    ProcessWorkingSetControl = 57,
    ProcessHandleTable = 58,
    ProcessCheckStackExtentsMode = 59,
    ProcessCommandLineInformation = 60,
    ProcessProtectionInformation = 61,
    ProcessMemoryExhaustion = 62,
    ProcessFaultInformation = 63,
    ProcessTelemetryIdInformation = 64,
    ProcessCommitReleaseInformation = 65,
    ProcessReserved1Information = 66,
    ProcessReserved2Information = 67,
    ProcessSubsystemProcess = 68,
    ProcessInPrivate = 70,
    ProcessRaiseUMExceptionOnInvalidHandleClose = 71,
    ProcessSubsystemInformation = 75,
    ProcessWin32kSyscallFilterInformation = 79,
    ProcessEnergyTrackingState = 82,
    MaxProcessInfoClass = 83
};

typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified = 0,
    CacheInstruction = 1,
    CacheData = 2,
    CacheTrace = 3
};

typedef enum _PROCESS_ACTIVITY_TYPE {
    ProcessActivityTypeAudio = 0,
    ProcessActivityTypeMax = 1
};

typedef enum _PROCESS_ENERGY_COMPONENT_TYPE_NUM {
    PsEnergyComponentTypeCpu = 0,
    PsEnergyComponentTypeStorage = 1,
    PsEnergyComponentTypeNetwork = 2,
    PsEnergyComponentTypeMBB = 3,
    PsEnergyComponentTypeForegroundTime = 4,
    PsEnergyComponentTypeDesktopVisibleTime = 5,
    PsEnergyComponentTypeWindowResource = 6,
    PsEnergyComponentTypeCompositorResource = 7,
    PsEnergyComponentTypeTrackingState = 8,
    PsEnergyComponentTypeInput = 9,
    PsEnergyComponentTypeAudioIn = 10,
    PsEnergyComponentTypeAudioOut = 11,
    PsEnergyComponentTypeDisplayRequired = 12,
    PsEnergyComponentTypeKeyboardInput = 13,
    PsEnergyComponentTypeMouseInput = 14,
    PsEnergyComponentTypeMax = 15
};

typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy = 0,
    ProcessASLRPolicy = 1,
    ProcessDynamicCodePolicy = 2,
    ProcessStrictHandleCheckPolicy = 3,
    ProcessSystemCallDisablePolicy = 4,
    ProcessMitigationOptionsMask = 5,
    ProcessExtensionPointDisablePolicy = 6,
    ProcessControlFlowGuardPolicy = 7,
    ProcessSignaturePolicy = 8,
    ProcessFontDisablePolicy = 9,
    ProcessImageLoadPolicy = 10,
    ProcessSystemCallFilterPolicy = 11,
    ProcessPayloadRestrictionPolicy = 12,
    ProcessChildProcessPolicy = 13,
    ProcessSideChannelIsolationPolicy = 14,
    MaxProcessMitigationPolicy = 15
};

typedef enum _PROCESS_TLS_INFORMATION_TYPE {
    ProcessTlsReplaceIndex = 0,
    ProcessTlsReplaceVector = 1,
    MaxProcessTlsOperation = 2
};

typedef enum _PROCESS_WORKING_SET_OPERATION {
    ProcessWorkingSetSwap = 0,
    ProcessWorkingSetEmpty = 1,
    ProcessWorkingSetOperationMax = 2
};

typedef enum _PSCREATEPROCESSNOTIFYTYPE {
    PsCreateProcessNotifySubsystems = 0
};

typedef enum _PSCREATETHREADNOTIFYTYPE {
    PsCreateThreadNotifyNonSystem = 0,
    PsCreateThreadNotifySubsystems = 1
};

typedef enum _PSPOWEREVENTTYPE {
    PsW32FullWake = 0,
    PsW32EventCode = 1,
    PsW32SystemPowerState = 2,
    PsW32SystemTime = 3,
    PsW32MonitorOn = 4,
    PsW32MonitorOff = 5,
    PsW32ScreenSaver = 6,
    PsW32MonitorDim = 7,
    PsW32RITActive = 8,
    PsW32RITTimeout = 9,
    PsW32DisplayBurst = 10,
    PsW32MonitorDimPolicy = 11,
    PsW32MonitorOnComplete = 12,
    PsW32SessionOn = 13,
    PsW32SessionOff = 14,
    PsW32BuiltinPanelStateChange = 15
};

typedef enum _PSPROCESSPRIORITYMODE {
    PsProcessPriorityBackground = 0,
    PsProcessPriorityForeground = 1,
    PsProcessPrioritySpinning = 2
};

typedef enum _PSW32JOBCALLOUTTYPE {
    PsW32JobCalloutSetInformation = 0,
    PsW32JobCalloutAddProcess = 1,
    PsW32JobCalloutTerminate = 2
};

typedef enum _PSW32THREADCALLOUTTYPE {
    PsW32ThreadCalloutInitialize = 0,
    PsW32ThreadCalloutExit = 1
};

typedef enum _PS_ATTRIBUTE_NUM {
    PsAttributeParentProcess = 0,
    PsAttributeDebugObject = 1,
    PsAttributeToken = 2,
    PsAttributeClientId = 3,
    PsAttributeTebAddress = 4,
    PsAttributeImageName = 5,
    PsAttributeImageInfo = 6,
    PsAttributeMemoryReserve = 7,
    PsAttributePriorityClass = 8,
    PsAttributeErrorMode = 9,
    PsAttributeStdHandleInfo = 10,
    PsAttributeHandleList = 11,
    PsAttributeGroupAffinity = 12,
    PsAttributePreferredNode = 13,
    PsAttributeIdealProcessor = 14,
    PsAttributeUmsThread = 15,
    PsAttributeMitigationOptions = 16,
    PsAttributeProtectionLevel = 17,
    PsAttributeSecureProcess = 18,
    PsAttributeJobList = 19,
    PsAttributeChildProcessPolicy = 20,
    PsAttributeAllApplicationPackagesPolicy = 21,
    PsAttributeWin32kFilter = 22,
    PsAttributeSafeOpenPromptOriginClaim = 23,
    PsAttributeBnoIsolation = 24,
    PsAttributeDesktopAppPolicy = 25,
    PsAttributeChpe = 26,
    PsAttributeMax = 27
};

typedef enum _PS_BAM_PPM_POLICY {
    PsBamPpmPolicyDefault = 0,
    PsBamPpmPolicyEnablePpm = 1,
    PsBamPpmPolicyEnableMediumPpm = 2,
    PsBamPpmPolicyDisablePpm = 3,
    PsBamPpmPolicyWindowMinimized = 4,
    PsBamPpmPolicyWindowOccluded = 5,
    PsBamPpmPolicyWindowVisible = 6,
    PsBamPpmPolicyWindowInFocus = 7,
    PsBamPpmPolicyCount = 8
};

typedef enum _PS_HW_TRACE_CONTROL {
    PsHwTraceEnable = 0,
    PsHwTraceDisable = 1,
    LastPsHwTraceControl = 2
};

typedef enum _PS_MITIGATION_OPTION {
    PS_MITIGATION_OPTION_NX = 0,
    PS_MITIGATION_OPTION_SEHOP = 1,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    PS_MITIGATION_OPTION_CET_SHADOW_STACKS = 31
};

typedef enum _PS_PICO_THREAD_DESCRIPTOR_TYPE {
    PicoThreadDescriptorTypeFs = 0,
    PicoThreadDescriptorTypeGs = 1,
    PicoThreadDescriptorTypeMax = 2
};

typedef enum _PS_PROTECTED_SIGNER {
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerWinSystem = 7,
    PsProtectedSignerApp = 8,
    PsProtectedSignerMax = 9
};

typedef enum _PS_PROTECTED_TYPE {
    PsProtectedTypeNone = 0,
    PsProtectedTypeProtectedLight = 1,
    PsProtectedTypeProtected = 2,
    PsProtectedTypeMax = 3
};

typedef enum _PS_STD_HANDLE_STATE {
    PsNeverDuplicate = 0,
    PsRequestDuplicate = 1,
    PsAlwaysDuplicate = 2,
    PsMaxStdHandleStates = 3
};

typedef enum _PS_WAKE_REASON {
    PsWakeReasonUser = 0,
    PsWakeReasonExecutionRequired = 1,
    PsWakeReasonKernel = 2,
    PsWakeReasonInstrumentation = 3,
    PsWakeReasonPreserveProcess = 4,
    PsWakeReasonActivityReference = 5,
    PsWakeReasonWorkOnBehalf = 6,
    PsMaxWakeReasons = 7
};

typedef enum _QUERY_FILE_LAYOUT_FILTER_TYPE {
    QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
    QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
    QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
    QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3,
    QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4
};

typedef enum _REFS_SMR_VOLUME_GC_ACTION {
    SmrGcActionStart = 1,
    SmrGcActionStartFullSpeed = 2,
    SmrGcActionPause = 3,
    SmrGcActionStop = 4
};

typedef enum _REFS_SMR_VOLUME_GC_METHOD {
    SmrGcMethodCompaction = 1,
    SmrGcMethodCompression = 2,
    SmrGcMethodRotation = 3
};

typedef enum _REFS_SMR_VOLUME_GC_STATE {
    SmrGcStateInactive = 0,
    SmrGcStatePaused = 1,
    SmrGcStateActive = 2,
    SmrGcStateActiveFullSpeed = 3
};

typedef enum _REG_ACTION {
    KeyAdded = 0,
    KeyRemoved = 1,
    KeyModified = 2
};

typedef enum _REG_NOTIFY_CLASS {
    RegNtDeleteKey = 0,
    RegNtPreDeleteKey = 0,
    RegNtSetValueKey = 1,
    RegNtPreSetValueKey = 1,
    RegNtDeleteValueKey = 2,
    RegNtPreDeleteValueKey = 2,
    RegNtSetInformationKey = 3,
    RegNtPreSetInformationKey = 3,
    RegNtRenameKey = 4,
    RegNtPreRenameKey = 4,
    RegNtEnumerateKey = 5,
    RegNtPreEnumerateKey = 5,
    RegNtEnumerateValueKey = 6,
    RegNtPreEnumerateValueKey = 6,
    RegNtQueryKey = 7,
    RegNtPreQueryKey = 7,
    RegNtQueryValueKey = 8,
    RegNtPreQueryValueKey = 8,
    RegNtQueryMultipleValueKey = 9,
    RegNtPreQueryMultipleValueKey = 9,
    RegNtPreCreateKey = 10,
    RegNtPostCreateKey = 11,
    RegNtPreOpenKey = 12,
    RegNtPostOpenKey = 13,
    RegNtKeyHandleClose = 14,
    RegNtPreKeyHandleClose = 14,
    RegNtPostDeleteKey = 15,
    RegNtPostSetValueKey = 16,
    RegNtPostDeleteValueKey = 17,
    RegNtPostSetInformationKey = 18,
    RegNtPostRenameKey = 19,
    RegNtPostEnumerateKey = 20,
    RegNtPostEnumerateValueKey = 21,
    RegNtPostQueryKey = 22,
    RegNtPostQueryValueKey = 23,
    RegNtPostQueryMultipleValueKey = 24,
    RegNtPostKeyHandleClose = 25,
    RegNtPreCreateKeyEx = 26,
    RegNtPostCreateKeyEx = 27,
    RegNtPreOpenKeyEx = 28,
    RegNtPostOpenKeyEx = 29,
    RegNtPreFlushKey = 30,
    RegNtPostFlushKey = 31,
    RegNtPreLoadKey = 32,
    RegNtPostLoadKey = 33,
    RegNtPreUnLoadKey = 34,
    RegNtPostUnLoadKey = 35,
    RegNtPreQueryKeySecurity = 36,
    RegNtPostQueryKeySecurity = 37,
    RegNtPreSetKeySecurity = 38,
    RegNtPostSetKeySecurity = 39,
    RegNtCallbackObjectContextCleanup = 40,
    RegNtPreRestoreKey = 41,
    RegNtPostRestoreKey = 42,
    RegNtPreSaveKey = 43,
    RegNtPostSaveKey = 44,
    RegNtPreReplaceKey = 45,
    RegNtPostReplaceKey = 46,
    RegNtPreQueryKeyName = 47,
    RegNtPostQueryKeyName = 48,
    MaxRegNtNotifyClass = 49
};

typedef enum _REQUESTER_TYPE {
    KernelRequester = 0,
    UserProcessRequester = 1,
    UserSharedServiceRequester = 2
};

typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation = 0,
    ResourceManagerCompletionInformation = 1
};

typedef enum _RESOURCE_TRANSLATION_DIRECTION {
    TranslateChildToParent = 0,
    TranslateParentToChild = 1
};

typedef enum _RTL_GENERIC_COMPARE_RESULTS {
    GenericLessThan = 0,
    GenericGreaterThan = 1,
    GenericEqual = 2
};

typedef enum _RTL_IMAGE_MITIGATION_OPTION_STATE {
    RtlMitigationOptionStateNotConfigured = 0,
    RtlMitigationOptionStateOn = 1,
    RtlMitigationOptionStateOff = 2
};

typedef enum _RTL_MEMORY_TYPE {
    MemoryTypePaged = 0,
    MemoryTypeNonPaged = 1,
    MemoryTypeLargePage = 2,
    MemoryTypeHugePage = 3,
    MemoryTypeMax = 4
};

typedef enum _RTL_RESOURCE_CATEGORY {
    RtlResTypePhysicalMemoryTier = 0,
    RtlResTypeDiskSpaceTier = 1,
    RtlResTypeDiskSpeedTier = 2,
    RtlResTypeDiskWriteConstraintTier = 3,
    RtlResTypeMax = 4
};

typedef enum _RTL_RESOURCE_POLICY_FLAGS {
    RTL_RESOURCE_POLICY_FLAGS_NONE = 0
};

typedef enum _RTL_SPARSE_BITMAP_CTX_OPERATION {
    RtlSparseBitmapOperationClear = 0,
    RtlSparseBitmapOperationSet = 1,
    RtlSparseBitmapOperationAny = 2,
    RtlSparseBitmapOperationMax = 3
};

typedef enum _RTL_STACK_TRACE_DATABASE_CONTROL {
    BackTraceDatabaseCreate = 0,
    BackTraceDatabaseDelete = 1,
    BackTraceDatabaseFlush = 2,
    BackTraceDatabaseMaxControl = 3
};

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked = 1,
    UmsSchedulerThreadYield = 2
};

typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext = 1,
    UmsThreadPriority = 2,
    UmsThreadAffinity = 3,
    UmsThreadTeb = 4,
    UmsThreadIsSuspended = 5,
    UmsThreadIsTerminated = 6,
    UmsThreadMaxInfoClass = 7
};

typedef enum _SECTION_INFORMATION_CLASS {
    SectionBasicInformation = 0,
    SectionImageInformation = 1,
    SectionRelocationInformation = 2,
    SectionOriginalBaseInformation = 3,
    SectionInternalImageInformation = 4,
    MaxSectionInfoClass = 5
};

typedef enum _SECTION_INHERIT {
    ViewShare = 1,
    ViewUnmap = 2
};

typedef enum _SECURE_SETTING_VALUE_TYPE {
    SecureSettingValueTypeBoolean = 0,
    SecureSettingValueTypeUlong = 1,
    SecureSettingValueTypeBinary = 2,
    SecureSettingValueTypeString = 3
};

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
};

typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor = 0,
    QuerySecurityDescriptor = 1,
    DeleteSecurityDescriptor = 2,
    AssignSecurityDescriptor = 3
};

typedef enum _SEMAPHORE_INFORMATION_CLASS {
    SemaphoreBasicInformation = 0
};

typedef enum _SERVERSILO_STATE {
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED = 1,
    SERVERSILO_SHUTTING_DOWN = 2,
    SERVERSILO_TERMINATING = 3,
    SERVERSILO_TERMINATED = 4
};

typedef enum _SE_ADT_PARAMETER_TYPE {
    SeAdtParmTypeNone = 0,
    SeAdtParmTypeString = 1,
    SeAdtParmTypeFileSpec = 2,
    SeAdtParmTypeUlong = 3,
    SeAdtParmTypeSid = 4,
    SeAdtParmTypeLogonId = 5,
    SeAdtParmTypeNoLogonId = 6,
    SeAdtParmTypeAccessMask = 7,
    SeAdtParmTypePrivs = 8,
    SeAdtParmTypeObjectTypes = 9,
    SeAdtParmTypeHexUlong = 10,
    SeAdtParmTypePtr = 11,
    SeAdtParmTypeTime = 12,
    SeAdtParmTypeGuid = 13,
    SeAdtParmTypeLuid = 14,
    SeAdtParmTypeHexInt64 = 15,
    SeAdtParmTypeStringList = 16,
    SeAdtParmTypeSidList = 17,
    SeAdtParmTypeDuration = 18,
    SeAdtParmTypeUserAccountControl = 19,
    SeAdtParmTypeNoUac = 20,
    SeAdtParmTypeMessage = 21,
    SeAdtParmTypeDateTime = 22,
    SeAdtParmTypeSockAddr = 23,
    SeAdtParmTypeSD = 24,
    SeAdtParmTypeLogonHours = 25,
    SeAdtParmTypeLogonIdNoSid = 26,
    SeAdtParmTypeUlongNoConv = 27,
    SeAdtParmTypeSockAddrNoPort = 28,
    SeAdtParmTypeAccessReason = 29,
    SeAdtParmTypeStagingReason = 30,
    SeAdtParmTypeResourceAttribute = 31,
    SeAdtParmTypeClaims = 32,
    SeAdtParmTypeLogonIdAsSid = 33,
    SeAdtParmTypeMultiSzString = 34,
    SeAdtParmTypeLogonIdEx = 35
};

typedef enum _SE_AUDIT_OPERATION {
    AuditPrivilegeObject = 0,
    AuditPrivilegeService = 1,
    AuditAccessCheck = 2,
    AuditOpenObject = 3,
    AuditOpenObjectWithTransaction = 4,
    AuditCloseObject = 5,
    AuditDeleteObject = 6,
    AuditOpenObjectForDelete = 7,
    AuditOpenObjectForDeleteWithTransaction = 8,
    AuditCloseNonObject = 9,
    AuditOpenNonObject = 10,
    AuditObjectReference = 11,
    AuditHandleCreation = 12
};

typedef enum _SE_IMAGE_SIGNATURE_TYPE {
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded = 1,
    SeImageSignatureCache = 2,
    SeImageSignatureCatalogCached = 3,
    SeImageSignatureCatalogNotCached = 4,
    SeImageSignatureCatalogHint = 5,
    SeImageSignaturePackageCatalog = 6
};

typedef enum _SE_IMAGE_TYPE {
    SeImageTypeElamDriver = 0,
    SeImageTypeDriver = 1,
    SeImageTypePlatformSecureFile = 2,
    SeImageTypeDynamicCodeFile = 3,
    SeImageTypeMax = 4
};

typedef enum _SE_IMAGE_VERIFICATION_CALLBACK_TYPE {
    SeImageVerificationCallbackInformational = 0
};

typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings = 1,
    SeLearningModeMax = 2
};

typedef enum _SE_VALIDATE_MAPPING_TYPE {
    SE_VALIDATE_MAPPING_HEADER_ONLY = 0,
    SE_VALIDATE_MAPPING_ENTIRE_IMAGE = 1,
    SE_VALIDATE_MAPPING_ENTIRE_IMAGE_CLEAN = 2
};

typedef enum _SHRINK_VOLUME_REQUEST_TYPES {
    ShrinkPrepare = 1,
    ShrinkCommit = 2,
    ShrinkAbort = 3
};

typedef enum _SHUTDOWN_ACTION {
    ShutdownNoReboot = 0,
    ShutdownReboot = 1,
    ShutdownPowerOff = 2
};

typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup = 2,
    SidTypeDomain = 3,
    SidTypeAlias = 4,
    SidTypeWellKnownGroup = 5,
    SidTypeDeletedAccount = 6,
    SidTypeInvalid = 7,
    SidTypeUnknown = 8,
    SidTypeComputer = 9,
    SidTypeLabel = 10,
    SidTypeLogonSession = 11
};

typedef enum _SOCKET_SECURITY_PROTOCOL {
    SOCKET_SECURITY_PROTOCOL_DEFAULT = 0,
    SOCKET_SECURITY_PROTOCOL_IPSEC = 1,
    SOCKET_SECURITY_PROTOCOL_IPSEC2 = 2,
    SOCKET_SECURITY_PROTOCOL_INVALID = 3
};

typedef enum _SOCKET_USAGE_TYPE {
    SYSTEM_CRITICAL_SOCKET = 1
};

typedef enum _SOC_SUBSYSTEM_TYPE {
    SOC_SUBSYS_WIRELESS_MODEM = 0,
    SOC_SUBSYS_AUDIO_DSP = 1,
    SOC_SUBSYS_WIRELSS_CONNECTIVITY = 2,
    SOC_SUBSYS_SENSORS = 3,
    SOC_SUBSYS_COMPUTE_DSP = 4,
    SOC_SUBSYS_SECURE_PROC = 5,
    SOC_SUBSYS_VENDOR_DEFINED = 0x10000
};

typedef enum _STATE_LOCATION_TYPE {
    LocationTypeRegistry = 0,
    LocationTypeFileSystem = 1,
    LocationTypeMaximum = 2
};

typedef enum _STORAGE_RESERVE_ID {
    StorageReserveIdNone = 0,
    StorageReserveIdHard = 1,
    StorageReserveIdSoft = 2,
    StorageReserveIdMax = 3
};

typedef enum _SUBSYSTEM_INFORMATION_TYPE {
    SubsystemInformationTypeWin32 = 0,
    SubsystemInformationTypeWSL = 1,
    MaxSubsystemInformationType = 2
};

typedef enum _SUITE_TYPE {
    SmallBusiness = 0,
    Enterprise = 1,
    BackOffice = 2,
    CommunicationServer = 3,
    TerminalServer = 4,
    SmallBusinessRestricted = 5,
    EmbeddedNT = 6,
    DataCenter = 7,
    SingleUserTS = 8,
    Personal = 9,
    Blade = 10,
    EmbeddedRestricted = 11,
    SecurityAppliance = 12,
    StorageServer = 13,
    ComputeServer = 14,
    WHServer = 15,
    PhoneNT = 16,
    MultiUserTS = 17,
    MaxSuiteType = 18
};

typedef enum _SYMBOLIC_LINK_INFO_CLASS {
    SymbolicLinkGlobalInformation = 1,
    SymbolicLinkAccessMask = 2
};

typedef enum _SYSDBG_COMMAND {
    SysDbgQueryModuleInformation = 0,
    SysDbgQueryTraceInformation = 1,
    SysDbgSetTracepoint = 2,
    SysDbgSetSpecialCall = 3,
    SysDbgClearSpecialCalls = 4,
    SysDbgQuerySpecialCalls = 5,
    SysDbgBreakPoint = 6,
    SysDbgQueryVersion = 7,
    SysDbgReadVirtual = 8,
    SysDbgWriteVirtual = 9,
    SysDbgReadPhysical = 10,
    SysDbgWritePhysical = 11,
    SysDbgReadControlSpace = 12,
    SysDbgWriteControlSpace = 13,
    SysDbgReadIoSpace = 14,
    SysDbgWriteIoSpace = 15,
    SysDbgReadMsr = 16,
    SysDbgWriteMsr = 17,
    SysDbgReadBusData = 18,
    SysDbgWriteBusData = 19,
    SysDbgCheckLowMemory = 20,
    SysDbgEnableKernelDebugger = 21,
    SysDbgDisableKernelDebugger = 22,
    SysDbgGetAutoKdEnable = 23,
    SysDbgSetAutoKdEnable = 24,
    SysDbgGetPrintBufferSize = 25,
    SysDbgSetPrintBufferSize = 26,
    SysDbgGetKdUmExceptionEnable = 27,
    SysDbgSetKdUmExceptionEnable = 28,
    SysDbgGetTriageDump = 29,
    SysDbgGetKdBlockEnable = 30,
    SysDbgSetKdBlockEnable = 31,
    SysDbgRegisterForUmBreakInfo = 32,
    SysDbgGetUmBreakPid = 33,
    SysDbgClearUmBreakPid = 34,
    SysDbgGetUmAttachPid = 35,
    SysDbgClearUmAttachPid = 36,
    SysDbgGetLiveKernelDump = 37
};

typedef enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE {
    SystemActivityModerationAppTypeClassic = 0,
    SystemActivityModerationAppTypePackaged = 1,
    MaxSystemActivityModerationAppType = 2
};

typedef enum _SYSTEM_ACTIVITY_MODERATION_STATE {
    SystemActivityModerationStateSystemManaged = 0,
    SystemActivityModerationStateUserManagedAllowThrottling = 1,
    SystemActivityModerationStateUserManagedDisableThrottling = 2,
    MaxSystemActivityModerationState = 3
};

typedef enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS {
    SystemCrashDumpDisable = 0,
    SystemCrashDumpReconfigure = 1,
    SystemCrashDumpInitializationComplete = 2
};

typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION {
    SystemFirmwareTable_Enumerate = 0,
    SystemFirmwareTable_Get = 1
};

typedef enum _SYSTEM_INFORMATION_CLASS {
    SystemBasicInformation = 0,
    SystemProcessorInformation = 1,
    SystemPerformanceInformation = 2,
    SystemTimeOfDayInformation = 3,
    SystemPathInformation = 4,
    SystemProcessInformation = 5,
    SystemCallCountInformation = 6,
    SystemDeviceInformation = 7,
    SystemProcessorPerformanceInformation = 8,
    SystemFlagsInformation = 9,
    SystemCallTimeInformation = 10,
    SystemModuleInformation = 11,
    SystemLocksInformation = 12,
    SystemStackTraceInformation = 13,
    SystemPagedPoolInformation = 14,
    SystemNonPagedPoolInformation = 15,
    SystemHandleInformation = 16,
    SystemObjectInformation = 17,
    SystemPageFileInformation = 18,
    SystemVdmInstemulInformation = 19,
    SystemVdmBopInformation = 20,
    SystemFileCacheInformation = 21,
    SystemPoolTagInformation = 22,
    SystemInterruptInformation = 23,
    SystemDpcBehaviorInformation = 24,
    SystemFullMemoryInformation = 25,
    SystemLoadGdiDriverInformation = 26,
    SystemUnloadGdiDriverInformation = 27,
    SystemTimeAdjustmentInformation = 28,
    SystemSummaryMemoryInformation = 29,
    SystemMirrorMemoryInformation = 30,
    SystemPerformanceTraceInformation = 31,
    SystemObsolete0 = 32,
    SystemExceptionInformation = 33,
    SystemCrashDumpStateInformation = 34,
    SystemKernelDebuggerInformation = 35,
    SystemContextSwitchInformation = 36,
    SystemRegistryQuotaInformation = 37,
    SystemExtendServiceTableInformation = 38,
    SystemPrioritySeperation = 39,
    SystemVerifierAddDriverInformation = 40,
    SystemVerifierRemoveDriverInformation = 41,
    SystemProcessorIdleInformation = 42,
    SystemLegacyDriverInformation = 43,
    SystemCurrentTimeZoneInformation = 44,
    SystemLookasideInformation = 45,
    SystemTimeSlipNotification = 46,
    SystemSessionCreate = 47,
    SystemSessionDetach = 48,
    SystemSessionInformation = 49,
    SystemRangeStartInformation = 50,
    SystemVerifierInformation = 51,
    SystemVerifierThunkExtend = 52,
    SystemSessionProcessInformation = 53,
    SystemLoadGdiDriverInSystemSpace = 54,
    SystemNumaProcessorMap = 55,
    SystemPrefetcherInformation = 56,
    SystemExtendedProcessInformation = 57,
    SystemRecommendedSharedDataAlignment = 58,
    SystemComPlusPackage = 59,
    SystemNumaAvailableMemory = 60,
    SystemProcessorPowerInformation = 61,
    SystemEmulationBasicInformation = 62,
    SystemEmulationProcessorInformation = 63,
    SystemExtendedHandleInformation = 64,
    SystemLostDelayedWriteInformation = 65,
    SystemBigPoolInformation = 66,
    SystemSessionPoolTagInformation = 67,
    SystemSessionMappedViewInformation = 68,
    SystemHotpatchInformation = 69,
    SystemObjectSecurityMode = 70,
    SystemWatchdogTimerHandler = 71,
    SystemWatchdogTimerInformation = 72,
    SystemLogicalProcessorInformation = 73,
    SystemWow64SharedInformationObsolete = 74,
    SystemRegisterFirmwareTableInformationHandler = 75,
    SystemFirmwareTableInformation = 76,
    SystemModuleInformationEx = 77,
    SystemVerifierTriageInformation = 78,
    SystemSuperfetchInformation = 79,
    SystemMemoryListInformation = 80,
    SystemFileCacheInformationEx = 81,
    SystemThreadPriorityClientIdInformation = 82,
    SystemProcessorIdleCycleTimeInformation = 83,
    SystemVerifierCancellationInformation = 84,
    SystemProcessorPowerInformationEx = 85,
    SystemRefTraceInformation = 86,
    SystemSpecialPoolInformation = 87,
    SystemProcessIdInformation = 88,
    SystemErrorPortInformation = 89,
    SystemBootEnvironmentInformation = 90,
    SystemHypervisorInformation = 91,
    SystemVerifierInformationEx = 92,
    SystemTimeZoneInformation = 93,
    SystemImageFileExecutionOptionsInformation = 94,
    SystemCoverageInformation = 95,
    SystemPrefetchPatchInformation = 96,
    SystemVerifierFaultsInformation = 97,
    SystemSystemPartitionInformation = 98,
    SystemSystemDiskInformation = 99,
    SystemProcessorPerformanceDistribution = 100,
    SystemNumaProximityNodeInformation = 101,
    SystemDynamicTimeZoneInformation = 102,
    SystemCodeIntegrityInformation = 103,
    SystemProcessorMicrocodeUpdateInformation = 104,
    SystemProcessorBrandString = 105,
    SystemVirtualAddressInformation = 106,
    SystemLogicalProcessorAndGroupInformation = 107,
    SystemProcessorCycleTimeInformation = 108,
    SystemStoreInformation = 109,
    SystemRegistryAppendString = 110,
    SystemAitSamplingValue = 111,
    SystemVhdBootInformation = 112,
    SystemCpuQuotaInformation = 113,
    SystemNativeBasicInformation = 114,
    SystemErrorPortTimeouts = 115,
    SystemLowPriorityIoInformation = 116,
    SystemBootEntropyInformation = 117,
    SystemVerifierCountersInformation = 118,
    SystemPagedPoolInformationEx = 119,
    SystemSystemPtesInformationEx = 120,
    SystemNodeDistanceInformation = 121,
    SystemAcpiAuditInformation = 122,
    SystemBasicPerformanceInformation = 123,
    SystemQueryPerformanceCounterInformation = 124,
    SystemSessionBigPoolInformation = 125,
    SystemBootGraphicsInformation = 126,
    SystemScrubPhysicalMemoryInformation = 127,
    SystemBadPageInformation = 128,
    SystemProcessorProfileControlArea = 129,
    SystemCombinePhysicalMemoryInformation = 130,
    SystemEntropyInterruptTimingInformation = 131,
    SystemConsoleInformation = 132,
    SystemPlatformBinaryInformation = 133,
    SystemPolicyInformation = 134,
    SystemHypervisorProcessorCountInformation = 135,
    SystemDeviceDataInformation = 136,
    SystemDeviceDataEnumerationInformation = 137,
    SystemMemoryTopologyInformation = 138,
    SystemMemoryChannelInformation = 139,
    SystemBootLogoInformation = 140,
    SystemProcessorPerformanceInformationEx = 141,
    SystemCriticalProcessErrorLogInformation = 142,
    SystemSecureBootPolicyInformation = 143,
    SystemPageFileInformationEx = 144,
    SystemSecureBootInformation = 145,
    SystemEntropyInterruptTimingRawInformation = 146,
    SystemPortableWorkspaceEfiLauncherInformation = 147,
    SystemFullProcessInformation = 148,
    SystemKernelDebuggerInformationEx = 149,
    SystemBootMetadataInformation = 150,
    SystemSoftRebootInformation = 151,
    SystemElamCertificateInformation = 152,
    SystemOfflineDumpConfigInformation = 153,
    SystemProcessorFeaturesInformation = 154,
    SystemRegistryReconciliationInformation = 155,
    SystemEdidInformation = 156,
    SystemManufacturingInformation = 157,
    SystemEnergyEstimationConfigInformation = 158,
    SystemHypervisorDetailInformation = 159,
    SystemProcessorCycleStatsInformation = 160,
    SystemVmGenerationCountInformation = 161,
    SystemTrustedPlatformModuleInformation = 162,
    SystemKernelDebuggerFlags = 163,
    SystemCodeIntegrityPolicyInformation = 164,
    SystemIsolatedUserModeInformation = 165,
    SystemHardwareSecurityTestInterfaceResultsInformation = 166,
    SystemSingleModuleInformation = 167,
    SystemAllowedCpuSetsInformation = 168,
    SystemVsmProtectionInformation = 169,
    SystemInterruptCpuSetsInformation = 170,
    SystemSecureBootPolicyFullInformation = 171,
    SystemCodeIntegrityPolicyFullInformation = 172,
    SystemAffinitizedInterruptProcessorInformation = 173,
    SystemRootSiloInformation = 174,
    SystemCpuSetInformation = 175,
    SystemCpuSetTagInformation = 176,
    SystemWin32WerStartCallout = 177,
    SystemSecureKernelProfileInformation = 178,
    SystemCodeIntegrityPlatformManifestInformation = 179,
    SystemInterruptSteeringInformation = 180,
    SystemSupportedProcessorArchitectures = 181,
    SystemMemoryUsageInformation = 182,
    SystemCodeIntegrityCertificateInformation = 183,
    SystemPhysicalMemoryInformation = 184,
    SystemControlFlowTransition = 185,
    SystemKernelDebuggingAllowed = 186,
    SystemActivityModerationExeState = 187,
    SystemActivityModerationUserSettings = 188,
    SystemCodeIntegrityPoliciesFullInformation = 189,
    SystemCodeIntegrityUnlockInformation = 190,
    SystemIntegrityQuotaInformation = 191,
    SystemFlushInformation = 192,
    SystemProcessorIdleMaskInformation = 193,
    SystemSecureDumpEncryptionInformation = 194,
    SystemWriteConstraintInformation = 195,
    SystemKernelVaShadowInformation = 196,
    SystemHypervisorSharedPageInformation = 197,
    SystemFirmwareBootPerformanceInformation = 198,
    SystemCodeIntegrityVerificationInformation = 199,
    SystemFirmwarePartitionInformation = 200,
    SystemSpeculationControlInformation = 201,
    SystemDmaGuardPolicyInformation = 202,
    SystemEnclaveLaunchControlInformation = 203,
    SystemWorkloadAllowedCpuSetsInformation = 204,
    SystemCodeIntegrityUnlockModeInformation = 205,
    SystemLeapSecondInformation = 206,
    SystemFlags2Information = 207,
    MaxSystemInfoClass = 208
};

typedef enum _SYSTEM_MEMORY_LIST_COMMAND {
    MemoryCaptureAccessedBits = 0,
    MemoryCaptureAndResetAccessedBits = 1,
    MemoryEmptyWorkingSets = 2,
    MemoryFlushModifiedList = 3,
    MemoryPurgeStandbyList = 4,
    MemoryPurgeLowPriorityStandbyList = 5,
    MemoryCommandMax = 6
};

typedef enum _SYSTEM_NET_RATE_CONTROL_TYPE {
    SystemNetRateControlSet = 0,
    SystemNetRateControlQuota = 1
};

typedef enum _SYSTEM_PIXEL_FORMAT {
    SystemPixelFormatUnknown = 0,
    SystemPixelFormatR8G8B8 = 1,
    SystemPixelFormatR8G8B8X8 = 2,
    SystemPixelFormatB8G8R8 = 3,
    SystemPixelFormatB8G8R8X8 = 4
};

typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
};

typedef enum _SYSTEM_PROCESS_CLASSIFICATION {
    SystemProcessClassificationNormal = 0,
    SystemProcessClassificationSystem = 1,
    SystemProcessClassificationSecureSystem = 2,
    SystemProcessClassificationMemCompression = 3,
    SystemProcessClassificationRegistry = 4,
    SystemProcessClassificationMaximum = 5
};

typedef enum _SYSTEM_VA_TYPE {
    SystemVaTypeAll = 0,
    SystemVaTypeNonPagedPool = 1,
    SystemVaTypePagedPool = 2,
    SystemVaTypeSystemCache = 3,
    SystemVaTypeSystemPtes = 4,
    SystemVaTypeSessionSpace = 5,
    SystemVaTypeMax = 6
};

typedef enum _SharedVirtualDiskHandleState {
    SharedVirtualDiskHandleStateNone = 0,
    SharedVirtualDiskHandleStateFileShared = 1,
    SharedVirtualDiskHandleStateHandleShared = 3
};

typedef enum _SharedVirtualDiskSupportType {
    SharedVirtualDisksUnsupported = 0,
    SharedVirtualDisksSupported = 1,
    SharedVirtualDiskSnapshotsSupported = 3,
    SharedVirtualDiskCDPSnapshotsSupported = 7
};

typedef enum _TABLE_SEARCH_RESULT {
    TableEmptyTree = 0,
    TableFoundNode = 1,
    TableInsertAsLeft = 2,
    TableInsertAsRight = 3
};

typedef enum _TCPSTATE {
    TCPSTATE_CLOSED = 0,
    TCPSTATE_LISTEN = 1,
    TCPSTATE_SYN_SENT = 2,
    TCPSTATE_SYN_RCVD = 3,
    TCPSTATE_ESTABLISHED = 4,
    TCPSTATE_FIN_WAIT_1 = 5,
    TCPSTATE_FIN_WAIT_2 = 6,
    TCPSTATE_CLOSE_WAIT = 7,
    TCPSTATE_CLOSING = 8,
    TCPSTATE_LAST_ACK = 9,
    TCPSTATE_TIME_WAIT = 10,
    TCPSTATE_MAX = 11
};

typedef enum _THREADINFOCLASS {
    ThreadBasicInformation = 0,
    ThreadTimes = 1,
    ThreadPriority = 2,
    ThreadBasePriority = 3,
    ThreadAffinityMask = 4,
    ThreadImpersonationToken = 5,
    ThreadDescriptorTableEntry = 6,
    ThreadEnableAlignmentFaultFixup = 7,
    ThreadEventPair_Reusable = 8,
    ThreadQuerySetWin32StartAddress = 9,
    ThreadZeroTlsCell = 10,
    ThreadPerformanceCount = 11,
    ThreadAmILastThread = 12,
    ThreadIdealProcessor = 13,
    ThreadPriorityBoost = 14,
    ThreadSetTlsArrayAddress = 15,
    ThreadIsIoPending = 16,
    ThreadHideFromDebugger = 17,
    ThreadBreakOnTermination = 18,
    ThreadSwitchLegacyState = 19,
    ThreadIsTerminated = 20,
    ThreadLastSystemCall = 21,
    ThreadIoPriority = 22,
    ThreadCycleTime = 23,
    ThreadPagePriority = 24,
    ThreadActualBasePriority = 25,
    ThreadTebInformation = 26,
    ThreadCSwitchMon = 27,
    ThreadCSwitchPmu = 28,
    ThreadWow64Context = 29,
    ThreadGroupInformation = 30,
    ThreadUmsInformation = 31,
    ThreadCounterProfiling = 32,
    ThreadIdealProcessorEx = 33,
    ThreadCpuAccountingInformation = 34,
    ThreadSuspendCount = 35,
    ThreadHeterogeneousCpuPolicy = 36,
    ThreadContainerId = 37,
    ThreadNameInformation = 38,
    ThreadSelectedCpuSets = 39,
    ThreadSystemThreadInformation = 40,
    ThreadActualGroupAffinity = 41,
    ThreadDynamicCodePolicyInfo = 42,
    ThreadExplicitCaseSensitivity = 43,
    ThreadWorkOnBehalfTicket = 44,
    ThreadSubsystemInformation = 45,
    ThreadDbgkWerReportActive = 46,
    ThreadAttachContainer = 47,
    ThreadManageWritesToExecutableMemory = 48,
    ThreadPowerThrottlingState = 49,
    ThreadWorkloadClass = 50,
    MaxThreadInfoClass = 51
};

typedef enum _THREAD_UMS_INFORMATION_COMMAND {
    UmsInformationCommandInvalid = 0,
    UmsInformationCommandAttach = 1,
    UmsInformationCommandDetach = 2,
    UmsInformationCommandQuery = 3
};

typedef enum _THREAD_WORKLOAD_CLASS {
    ThreadWorkloadClassDefault = 0,
    ThreadWorkloadClassGraphics = 1,
    MaxThreadWorkloadClass = 2
};

typedef enum _TIMER_INFORMATION_CLASS {
    TimerBasicInformation = 0
};

typedef enum _TIMER_SET_INFORMATION_CLASS {
    TimerSetCoalescableTimer = 0,
    MaxTimerInfoClass = 1
};

typedef enum _TIMER_TYPE {
    NotificationTimer = 0,
    SynchronizationTimer = 1
};

typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull = 2,
    TokenElevationTypeLimited = 3
};

typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups = 2,
    TokenPrivileges = 3,
    TokenOwner = 4,
    TokenPrimaryGroup = 5,
    TokenDefaultDacl = 6,
    TokenSource = 7,
    TokenType = 8,
    TokenImpersonationLevel = 9,
    TokenStatistics = 10,
    TokenRestrictedSids = 11,
    TokenSessionId = 12,
    TokenGroupsAndPrivileges = 13,
    TokenSessionReference = 14,
    TokenSandBoxInert = 15,
    TokenAuditPolicy = 16,
    TokenOrigin = 17,
    TokenElevationType = 18,
    TokenLinkedToken = 19,
    TokenElevation = 20,
    TokenHasRestrictions = 21,
    TokenAccessInformation = 22,
    TokenVirtualizationAllowed = 23,
    TokenVirtualizationEnabled = 24,
    TokenIntegrityLevel = 25,
    TokenUIAccess = 26,
    TokenMandatoryPolicy = 27,
    TokenLogonSid = 28,
    TokenIsAppContainer = 29,
    TokenCapabilities = 30,
    TokenAppContainerSid = 31,
    TokenAppContainerNumber = 32,
    TokenUserClaimAttributes = 33,
    TokenDeviceClaimAttributes = 34,
    TokenRestrictedUserClaimAttributes = 35,
    TokenRestrictedDeviceClaimAttributes = 36,
    TokenDeviceGroups = 37,
    TokenRestrictedDeviceGroups = 38,
    TokenSecurityAttributes = 39,
    TokenIsRestricted = 40,
    TokenProcessTrustLevel = 41,
    TokenPrivateNameSpace = 42,
    TokenSingletonAttributes = 43,
    TokenBnoIsolation = 44,
    TokenChildProcessFlags = 45,
    TokenIsLessPrivilegedAppContainer = 46,
    MaxTokenInfoClass = 47
};

typedef enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION {
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_NONE = 0,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 1,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_ADD = 2,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_DELETE = 3,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 4
};

typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation = 2
};

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3
};

typedef enum _TP_DEBUG_CLASS {
    TP_DEBUG_CLASS_POOL = 0
};

typedef enum _TP_LOG_LEVEL {
    TP_LOG_LEVEL_ERROR = 0,
    TP_LOG_LEVEL_WARNING = 1,
    TP_LOG_LEVEL_INFO = 2,
    TP_LOG_LEVEL_TRACE_ENTER = 3,
    TP_LOG_LEVEL_TRACE_LEAVE = 4
};

typedef enum _TP_TRACE_TYPE {
    TpTraceThreadPriority = 1,
    TpTraceThreadAffinity = 2,
    MaxTpTraceType = 3
};

typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass = 0,
    TraceHandleClass = 1,
    TraceEnableFlagsClass = 2,
    TraceEnableLevelClass = 3,
    GlobalLoggerHandleClass = 4,
    EventLoggerHandleClass = 5,
    AllLoggerHandlesClass = 6,
    TraceHandleByNameClass = 7,
    LoggerEventsLostClass = 8,
    TraceSessionSettingsClass = 9,
    LoggerEventsLoggedClass = 10,
    DiskIoNotifyRoutinesClass = 11,
    TraceInformationClassReserved1 = 12,
    AllPossibleNotifyRoutinesClass = 12,
    FltIoNotifyRoutinesClass = 13,
    TraceInformationClassReserved2 = 14,
    WdfNotifyRoutinesClass = 15,
    MaxTraceInformationClass = 16
};

typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation = 0,
    TransactionManagerLogInformation = 1,
    TransactionManagerLogPathInformation = 2,
    TransactionManagerRecoveryInformation = 4,
    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5
};

typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation = 0,
    TransactionPropertiesInformation = 1,
    TransactionEnlistmentInformation = 2,
    TransactionSuperiorEnlistmentInformation = 3,
    TransactionBindInformation = 4,
    TransactionDTCPrivateInformation = 5
};

typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted = 2,
    TransactionOutcomeAborted = 3
};

typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt = 2,
    TransactionStateCommittedNotify = 3
};

typedef enum _TUNNEL_SUB_TYPE {
    TUNNEL_SUB_TYPE_NONE = 0,
    TUNNEL_SUB_TYPE_CP = 1,
    TUNNEL_SUB_TYPE_IPTLS = 2,
    TUNNEL_SUB_TYPE_HA = 3
};

typedef enum _TYPE_OF_MEMORY {
    LoaderExceptionBlock = 0,
    LoaderSystemBlock = 1,
    LoaderFree = 2,
    LoaderBad = 3,
    LoaderLoadedProgram = 4,
    LoaderFirmwareTemporary = 5,
    LoaderFirmwarePermanent = 6,
    LoaderOsloaderHeap = 7,
    LoaderOsloaderStack = 8,
    LoaderSystemCode = 9,
    LoaderHalCode = 10,
    LoaderBootDriver = 11,
    LoaderConsoleInDriver = 12,
    LoaderConsoleOutDriver = 13,
    LoaderStartupDpcStack = 14,
    LoaderStartupKernelStack = 15,
    LoaderStartupPanicStack = 16,
    LoaderStartupPcrPage = 17,
    LoaderStartupPdrPage = 18,
    LoaderRegistryData = 19,
    LoaderMemoryData = 20,
    LoaderNlsData = 21,
    LoaderSpecialMemory = 22,
    LoaderBBTMemory = 23,
    LoaderZero = 24,
    LoaderXIPRom = 25,
    LoaderHALCachedMemory = 26,
    LoaderLargePageFiller = 27,
    LoaderErrorLogMemory = 28,
    LoaderVsmMemory = 29,
    LoaderFirmwareCode = 30,
    LoaderFirmwareData = 31,
    LoaderFirmwareReserved = 32,
    LoaderEnclaveMemory = 33,
    LoaderFirmwareKsr = 34,
    LoaderEnclaveKsr = 35,
    LoaderSkMemory = 36,
    LoaderMaximum = 37
};

typedef enum _TlgBlob_t {
    _TlgBlobNone = 0,
    _TlgBlobEnd = 1,
    _TlgBlobProvider = 2,
    _TlgBlobEvent3 = 3,
    _TlgBlobProvider3 = 4,
    _TlgBlobEvent2 = 5,
    _TlgBlobMax = 6
};

typedef enum _TlgFlags_t {
    _TlgFlagsNone = 0,
    _TlgFlagsPtr64 = 1
};

typedef enum _TlgOptions_t {
    _TlgOptionNone = 0,
    _TlgOptionGroup = 1
};

typedef enum _UDP_ENCAP_TYPE {
    OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = 0,
    OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = 1
};

typedef enum _UNWIND_OP_CODES {
    UWOP_PUSH_NONVOL = 0,
    UWOP_ALLOC_LARGE = 1,
    UWOP_ALLOC_SMALL = 2,
    UWOP_SET_FPREG = 3,
    UWOP_SAVE_NONVOL = 4,
    UWOP_SAVE_NONVOL_FAR = 5,
    UWOP_EPILOG = 6,
    UWOP_SPARE_CODE = 7,
    UWOP_SAVE_XMM128 = 8,
    UWOP_SAVE_XMM128_FAR = 9,
    UWOP_PUSH_MACHFRAME = 10
};

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3
};

typedef enum _VERIFIER_RULE_CLASS_ID {
    VrfSpecialPoolRuleClass = 0,
    VrfForceIrqlRuleClass = 1,
    VrfAllocationFailuresRuleClass = 2,
    VrfTrackingPoolAllocationsRuleClass = 3,
    VrfIORuleClass = 4,
    VrfDeadlockPreventionRuleClass = 5,
    VrfEnhancedIORuleClass = 6,
    VrfDMARuleClass = 7,
    VrfSecurityRuleClass = 8,
    VrfForcePendingIORequestRuleClass = 9,
    VrfIRPTrackingRuleClass = 10,
    VrfMiscellaneousRuleClass = 11,
    VrfMoreDebuggingRuleClass = 12,
    VrfMDLInvariantStackRuleClass = 13,
    VrfMDLInvariantDriverRuleClass = 14,
    VrfPowerDelayFuzzingRuleClass = 15,
    VrfPortMiniportRuleClass = 16,
    VrfStandardDDIRuleClass = 17,
    VrfAutoFailRuleClass = 18,
    VrfAdditionalDDIRuleClass = 19,
    VrfRuleClassBase = 20,
    VrfNdisWifiRuleClass = 21,
    VrfDriverLoggingRuleClass = 22,
    VrfSyncDelayFuzzingRuleClass = 23,
    VrfVMSwitchingRuleClass = 24,
    VrfCodeIntegrityRuleClass = 25,
    VrfBelow4GBAllocationRuleClass = 26,
    VrfProcessorBranchTraceRuleClass = 27,
    VrfAdvancedMMRuleClass = 28,
    VrfExtendingXDVTimeLimit = 29,
    VrfSystemBIOSRuleClass = 30,
    VrfHardwareRuleClass = 31,
    VrfStateSepRuleClass = 32,
    VrfWDFRuleClass = 33,
    VrfMoreIrqlRuleClass = 34,
    ReservedForDVRF35 = 35,
    ReservedForDVRF36 = 36,
    ReservedForDVRF37 = 37,
    ReservedForDVRF38 = 38,
    ReservedForDVRF39 = 39,
    ReservedForDVRF40 = 40,
    ReservedForDVRF41 = 41,
    ReservedForDVRF42 = 42,
    ReservedForDVRF43 = 43,
    ReservedForDVRF44 = 44,
    ReservedForDVRF45 = 45,
    ReservedForDVRF46 = 46,
    ReservedForDVRF47 = 47,
    ReservedForDVRF48 = 48,
    ReservedForDVRF49 = 49,
    ReservedForDVRF50 = 50,
    ReservedForDVRF51 = 51,
    ReservedForDVRF52 = 52,
    ReservedForDVRF53 = 53,
    ReservedForDVRF54 = 54,
    ReservedForDVRF55 = 55,
    ReservedForDVRF56 = 56,
    ReservedForDVRF57 = 57,
    ReservedForDVRF58 = 58,
    ReservedForDVRF59 = 59,
    ReservedForDVRF60 = 60,
    ReservedForDVRF61 = 61,
    ReservedForDVRF62 = 62,
    ReservedForDVRF63 = 63,
    VrfRuleClassSizeMax = 64
};

typedef enum _VIRTUAL_MEMORY_INFORMATION_CLASS {
    VmPrefetchInformation = 0,
    VmPagePriorityInformation = 1,
    VmCfgCallTargetInformation = 2,
    VmPageDirtyStateInformation = 3,
    VmImageHotPatchInformation = 4
};

typedef enum _VIRTUAL_STORAGE_BEHAVIOR_CODE {
    VirtualStorageBehaviorUndefined = 0,
    VirtualStorageBehaviorCacheWriteThrough = 1,
    VirtualStorageBehaviorCacheWriteBack = 2
};

typedef enum _VerifierAction {
    VerifierAction_BugcheckAlways = 0,
    VerifierAction_DbgBreakIfDebuggerPresent = 1
};

typedef enum _WAIT_TYPE {
    WaitAll = 0,
    WaitAny = 1,
    WaitNotification = 2,
    WaitDequeue = 3
};

typedef enum _WATCHDOG_HANDLER_ACTION {
    WdActionSetTimeoutValue = 0,
    WdActionQueryTimeoutValue = 1,
    WdActionResetTimer = 2,
    WdActionStopTimer = 3,
    WdActionStartTimer = 4,
    WdActionSetTriggerAction = 5,
    WdActionQueryTriggerAction = 6,
    WdActionQueryState = 7,
    WdActionSleep = 8,
    WdActionWake = 9,
    WdActionMarkHiberPhase = 10
};

typedef enum _WATCHDOG_INFORMATION_CLASS {
    WdInfoTimeoutValue = 0,
    WdInfoResetTimer = 1,
    WdInfoStopTimer = 2,
    WdInfoStartTimer = 3,
    WdInfoTriggerAction = 4,
    WdInfoState = 5,
    WdInfoTriggerReset = 6,
    WdInfoNop = 7,
    WdInfoGeneratedLastReset = 8,
    WdInfoInvalid = 9
};

typedef enum _WDFFUNCENUM {
    WdfChildListCreateTableIndex = 0,
    WdfChildListGetDeviceTableIndex = 1,
    WdfChildListRetrievePdoTableIndex = 2,
    WdfChildListRetrieveAddressDescriptionTableIndex = 3,
    WdfChildListBeginScanTableIndex = 4,
    WdfChildListEndScanTableIndex = 5,
    WdfChildListBeginIterationTableIndex = 6,
    WdfChildListRetrieveNextDeviceTableIndex = 7,
    WdfChildListEndIterationTableIndex = 8,
    WdfChildListAddOrUpdateChildDescriptionAsPresentTableIndex = 9,
    WdfChildListUpdateChildDescriptionAsMissingTableIndex = 10,
    WdfChildListUpdateAllChildDescriptionsAsPresentTableIndex = 11,
    WdfChildListRequestChildEjectTableIndex = 12,
    WdfCollectionCreateTableIndex = 13,
    WdfCollectionGetCountTableIndex = 14,
    WdfCollectionAddTableIndex = 15,
    WdfCollectionRemoveTableIndex = 16,
    WdfCollectionRemoveItemTableIndex = 17,
    WdfCollectionGetItemTableIndex = 18,
    WdfCollectionGetFirstItemTableIndex = 19,
    WdfCollectionGetLastItemTableIndex = 20,
    WdfCommonBufferCreateTableIndex = 21,
    WdfCommonBufferGetAlignedVirtualAddressTableIndex = 22,
    WdfCommonBufferGetAlignedLogicalAddressTableIndex = 23,
    WdfCommonBufferGetLengthTableIndex = 24,
    WdfControlDeviceInitAllocateTableIndex = 25,
    WdfControlDeviceInitSetShutdownNotificationTableIndex = 26,
    WdfControlFinishInitializingTableIndex = 27,
    WdfDeviceGetDeviceStateTableIndex = 28,
    WdfDeviceSetDeviceStateTableIndex = 29,
    WdfWdmDeviceGetWdfDeviceHandleTableIndex = 30,
    WdfDeviceWdmGetDeviceObjectTableIndex = 31,
    WdfDeviceWdmGetAttachedDeviceTableIndex = 32,
    WdfDeviceWdmGetPhysicalDeviceTableIndex = 33,
    WdfDeviceWdmDispatchPreprocessedIrpTableIndex = 34,
    WdfDeviceAddDependentUsageDeviceObjectTableIndex = 35,
    WdfDeviceAddRemovalRelationsPhysicalDeviceTableIndex = 36,
    WdfDeviceRemoveRemovalRelationsPhysicalDeviceTableIndex = 37,
    WdfDeviceClearRemovalRelationsDevicesTableIndex = 38,
    WdfDeviceGetDriverTableIndex = 39,
    WdfDeviceRetrieveDeviceNameTableIndex = 40,
    WdfDeviceAssignMofResourceNameTableIndex = 41,
    WdfDeviceGetIoTargetTableIndex = 42,
    WdfDeviceGetDevicePnpStateTableIndex = 43,
    WdfDeviceGetDevicePowerStateTableIndex = 44,
    WdfDeviceGetDevicePowerPolicyStateTableIndex = 45,
    WdfDeviceAssignS0IdleSettingsTableIndex = 46,
    WdfDeviceAssignSxWakeSettingsTableIndex = 47,
    WdfDeviceOpenRegistryKeyTableIndex = 48,
    WdfDeviceSetSpecialFileSupportTableIndex = 49,
    WdfDeviceSetCharacteristicsTableIndex = 50,
    WdfDeviceGetCharacteristicsTableIndex = 51,
    WdfDeviceGetAlignmentRequirementTableIndex = 52,
    WdfDeviceSetAlignmentRequirementTableIndex = 53,
    WdfDeviceInitFreeTableIndex = 54,
    WdfDeviceInitSetPnpPowerEventCallbacksTableIndex = 55,
    WdfDeviceInitSetPowerPolicyEventCallbacksTableIndex = 56,
    WdfDeviceInitSetPowerPolicyOwnershipTableIndex = 57,
    WdfDeviceInitRegisterPnpStateChangeCallbackTableIndex = 58,
    WdfDeviceInitRegisterPowerStateChangeCallbackTableIndex = 59,
    WdfDeviceInitRegisterPowerPolicyStateChangeCallbackTableIndex = 60,
    WdfDeviceInitSetIoTypeTableIndex = 61,
    WdfDeviceInitSetExclusiveTableIndex = 62,
    WdfDeviceInitSetPowerNotPageableTableIndex = 63,
    WdfDeviceInitSetPowerPageableTableIndex = 64,
    WdfDeviceInitSetPowerInrushTableIndex = 65,
    WdfDeviceInitSetDeviceTypeTableIndex = 66,
    WdfDeviceInitAssignNameTableIndex = 67,
    WdfDeviceInitAssignSDDLStringTableIndex = 68,
    WdfDeviceInitSetDeviceClassTableIndex = 69,
    WdfDeviceInitSetCharacteristicsTableIndex = 70,
    WdfDeviceInitSetFileObjectConfigTableIndex = 71,
    WdfDeviceInitSetRequestAttributesTableIndex = 72,
    WdfDeviceInitAssignWdmIrpPreprocessCallbackTableIndex = 73,
    WdfDeviceInitSetIoInCallerContextCallbackTableIndex = 74,
    WdfDeviceCreateTableIndex = 75,
    WdfDeviceSetStaticStopRemoveTableIndex = 76,
    WdfDeviceCreateDeviceInterfaceTableIndex = 77,
    WdfDeviceSetDeviceInterfaceStateTableIndex = 78,
    WdfDeviceRetrieveDeviceInterfaceStringTableIndex = 79,
    WdfDeviceCreateSymbolicLinkTableIndex = 80,
    WdfDeviceQueryPropertyTableIndex = 81,
    WdfDeviceAllocAndQueryPropertyTableIndex = 82,
    WdfDeviceSetPnpCapabilitiesTableIndex = 83,
    WdfDeviceSetPowerCapabilitiesTableIndex = 84,
    WdfDeviceSetBusInformationForChildrenTableIndex = 85,
    WdfDeviceIndicateWakeStatusTableIndex = 86,
    WdfDeviceSetFailedTableIndex = 87,
    WdfDeviceStopIdleNoTrackTableIndex = 88,
    WdfDeviceResumeIdleNoTrackTableIndex = 89,
    WdfDeviceGetFileObjectTableIndex = 90,
    WdfDeviceEnqueueRequestTableIndex = 91,
    WdfDeviceGetDefaultQueueTableIndex = 92,
    WdfDeviceConfigureRequestDispatchingTableIndex = 93,
    WdfDmaEnablerCreateTableIndex = 94,
    WdfDmaEnablerGetMaximumLengthTableIndex = 95,
    WdfDmaEnablerGetMaximumScatterGatherElementsTableIndex = 96,
    WdfDmaEnablerSetMaximumScatterGatherElementsTableIndex = 97,
    WdfDmaTransactionCreateTableIndex = 98,
    WdfDmaTransactionInitializeTableIndex = 99,
    WdfDmaTransactionInitializeUsingRequestTableIndex = 100,
    WdfDmaTransactionExecuteTableIndex = 101,
    WdfDmaTransactionReleaseTableIndex = 102,
    WdfDmaTransactionDmaCompletedTableIndex = 103,
    WdfDmaTransactionDmaCompletedWithLengthTableIndex = 104,
    WdfDmaTransactionDmaCompletedFinalTableIndex = 105,
    WdfDmaTransactionGetBytesTransferredTableIndex = 106,
    WdfDmaTransactionSetMaximumLengthTableIndex = 107,
    WdfDmaTransactionGetRequestTableIndex = 108,
    WdfDmaTransactionGetCurrentDmaTransferLengthTableIndex = 109,
    WdfDmaTransactionGetDeviceTableIndex = 110,
    WdfDpcCreateTableIndex = 111,
    WdfDpcEnqueueTableIndex = 112,
    WdfDpcCancelTableIndex = 113,
    WdfDpcGetParentObjectTableIndex = 114,
    WdfDpcWdmGetDpcTableIndex = 115,
    WdfDriverCreateTableIndex = 116,
    WdfDriverGetRegistryPathTableIndex = 117,
    WdfDriverWdmGetDriverObjectTableIndex = 118,
    WdfDriverOpenParametersRegistryKeyTableIndex = 119,
    WdfWdmDriverGetWdfDriverHandleTableIndex = 120,
    WdfDriverRegisterTraceInfoTableIndex = 121,
    WdfDriverRetrieveVersionStringTableIndex = 122,
    WdfDriverIsVersionAvailableTableIndex = 123,
    WdfFdoInitWdmGetPhysicalDeviceTableIndex = 124,
    WdfFdoInitOpenRegistryKeyTableIndex = 125,
    WdfFdoInitQueryPropertyTableIndex = 126,
    WdfFdoInitAllocAndQueryPropertyTableIndex = 127,
    WdfFdoInitSetEventCallbacksTableIndex = 128,
    WdfFdoInitSetFilterTableIndex = 129,
    WdfFdoInitSetDefaultChildListConfigTableIndex = 130,
    WdfFdoQueryForInterfaceTableIndex = 131,
    WdfFdoGetDefaultChildListTableIndex = 132,
    WdfFdoAddStaticChildTableIndex = 133,
    WdfFdoLockStaticChildListForIterationTableIndex = 134,
    WdfFdoRetrieveNextStaticChildTableIndex = 135,
    WdfFdoUnlockStaticChildListFromIterationTableIndex = 136,
    WdfFileObjectGetFileNameTableIndex = 137,
    WdfFileObjectGetFlagsTableIndex = 138,
    WdfFileObjectGetDeviceTableIndex = 139,
    WdfFileObjectWdmGetFileObjectTableIndex = 140,
    WdfInterruptCreateTableIndex = 141,
    WdfInterruptQueueDpcForIsrTableIndex = 142,
    WdfInterruptSynchronizeTableIndex = 143,
    WdfInterruptAcquireLockTableIndex = 144,
    WdfInterruptReleaseLockTableIndex = 145,
    WdfInterruptEnableTableIndex = 146,
    WdfInterruptDisableTableIndex = 147,
    WdfInterruptWdmGetInterruptTableIndex = 148,
    WdfInterruptGetInfoTableIndex = 149,
    WdfInterruptSetPolicyTableIndex = 150,
    WdfInterruptGetDeviceTableIndex = 151,
    WdfIoQueueCreateTableIndex = 152,
    WdfIoQueueGetStateTableIndex = 153,
    WdfIoQueueStartTableIndex = 154,
    WdfIoQueueStopTableIndex = 155,
    WdfIoQueueStopSynchronouslyTableIndex = 156,
    WdfIoQueueGetDeviceTableIndex = 157,
    WdfIoQueueRetrieveNextRequestTableIndex = 158,
    WdfIoQueueRetrieveRequestByFileObjectTableIndex = 159,
    WdfIoQueueFindRequestTableIndex = 160,
    WdfIoQueueRetrieveFoundRequestTableIndex = 161,
    WdfIoQueueDrainSynchronouslyTableIndex = 162,
    WdfIoQueueDrainTableIndex = 163,
    WdfIoQueuePurgeSynchronouslyTableIndex = 164,
    WdfIoQueuePurgeTableIndex = 165,
    WdfIoQueueReadyNotifyTableIndex = 166,
    WdfIoTargetCreateTableIndex = 167,
    WdfIoTargetOpenTableIndex = 168,
    WdfIoTargetCloseForQueryRemoveTableIndex = 169,
    WdfIoTargetCloseTableIndex = 170,
    WdfIoTargetStartTableIndex = 171,
    WdfIoTargetStopTableIndex = 172,
    WdfIoTargetGetStateTableIndex = 173,
    WdfIoTargetGetDeviceTableIndex = 174,
    WdfIoTargetQueryTargetPropertyTableIndex = 175,
    WdfIoTargetAllocAndQueryTargetPropertyTableIndex = 176,
    WdfIoTargetQueryForInterfaceTableIndex = 177,
    WdfIoTargetWdmGetTargetDeviceObjectTableIndex = 178,
    WdfIoTargetWdmGetTargetPhysicalDeviceTableIndex = 179,
    WdfIoTargetWdmGetTargetFileObjectTableIndex = 180,
    WdfIoTargetWdmGetTargetFileHandleTableIndex = 181,
    WdfIoTargetSendReadSynchronouslyTableIndex = 182,
    WdfIoTargetFormatRequestForReadTableIndex = 183,
    WdfIoTargetSendWriteSynchronouslyTableIndex = 184,
    WdfIoTargetFormatRequestForWriteTableIndex = 185,
    WdfIoTargetSendIoctlSynchronouslyTableIndex = 186,
    WdfIoTargetFormatRequestForIoctlTableIndex = 187,
    WdfIoTargetSendInternalIoctlSynchronouslyTableIndex = 188,
    WdfIoTargetFormatRequestForInternalIoctlTableIndex = 189,
    WdfIoTargetSendInternalIoctlOthersSynchronouslyTableIndex = 190,
    WdfIoTargetFormatRequestForInternalIoctlOthersTableIndex = 191,
    WdfMemoryCreateTableIndex = 192,
    WdfMemoryCreatePreallocatedTableIndex = 193,
    WdfMemoryGetBufferTableIndex = 194,
    WdfMemoryAssignBufferTableIndex = 195,
    WdfMemoryCopyToBufferTableIndex = 196,
    WdfMemoryCopyFromBufferTableIndex = 197,
    WdfLookasideListCreateTableIndex = 198,
    WdfMemoryCreateFromLookasideTableIndex = 199,
    WdfDeviceMiniportCreateTableIndex = 200,
    WdfDriverMiniportUnloadTableIndex = 201,
    WdfObjectGetTypedContextWorkerTableIndex = 202,
    WdfObjectAllocateContextTableIndex = 203,
    WdfObjectContextGetObjectTableIndex = 204,
    WdfObjectReferenceActualTableIndex = 205,
    WdfObjectDereferenceActualTableIndex = 206,
    WdfObjectCreateTableIndex = 207,
    WdfObjectDeleteTableIndex = 208,
    WdfObjectQueryTableIndex = 209,
    WdfPdoInitAllocateTableIndex = 210,
    WdfPdoInitSetEventCallbacksTableIndex = 211,
    WdfPdoInitAssignDeviceIDTableIndex = 212,
    WdfPdoInitAssignInstanceIDTableIndex = 213,
    WdfPdoInitAddHardwareIDTableIndex = 214,
    WdfPdoInitAddCompatibleIDTableIndex = 215,
    WdfPdoInitAddDeviceTextTableIndex = 216,
    WdfPdoInitSetDefaultLocaleTableIndex = 217,
    WdfPdoInitAssignRawDeviceTableIndex = 218,
    WdfPdoMarkMissingTableIndex = 219,
    WdfPdoRequestEjectTableIndex = 220,
    WdfPdoGetParentTableIndex = 221,
    WdfPdoRetrieveIdentificationDescriptionTableIndex = 222,
    WdfPdoRetrieveAddressDescriptionTableIndex = 223,
    WdfPdoUpdateAddressDescriptionTableIndex = 224,
    WdfPdoAddEjectionRelationsPhysicalDeviceTableIndex = 225,
    WdfPdoRemoveEjectionRelationsPhysicalDeviceTableIndex = 226,
    WdfPdoClearEjectionRelationsDevicesTableIndex = 227,
    WdfDeviceAddQueryInterfaceTableIndex = 228,
    WdfRegistryOpenKeyTableIndex = 229,
    WdfRegistryCreateKeyTableIndex = 230,
    WdfRegistryCloseTableIndex = 231,
    WdfRegistryWdmGetHandleTableIndex = 232,
    WdfRegistryRemoveKeyTableIndex = 233,
    WdfRegistryRemoveValueTableIndex = 234,
    WdfRegistryQueryValueTableIndex = 235,
    WdfRegistryQueryMemoryTableIndex = 236,
    WdfRegistryQueryMultiStringTableIndex = 237,
    WdfRegistryQueryUnicodeStringTableIndex = 238,
    WdfRegistryQueryStringTableIndex = 239,
    WdfRegistryQueryULongTableIndex = 240,
    WdfRegistryAssignValueTableIndex = 241,
    WdfRegistryAssignMemoryTableIndex = 242,
    WdfRegistryAssignMultiStringTableIndex = 243,
    WdfRegistryAssignUnicodeStringTableIndex = 244,
    WdfRegistryAssignStringTableIndex = 245,
    WdfRegistryAssignULongTableIndex = 246,
    WdfRequestCreateTableIndex = 247,
    WdfRequestCreateFromIrpTableIndex = 248,
    WdfRequestReuseTableIndex = 249,
    WdfRequestChangeTargetTableIndex = 250,
    WdfRequestFormatRequestUsingCurrentTypeTableIndex = 251,
    WdfRequestWdmFormatUsingStackLocationTableIndex = 252,
    WdfRequestSendTableIndex = 253,
    WdfRequestGetStatusTableIndex = 254,
    WdfRequestMarkCancelableTableIndex = 255,
    WdfRequestUnmarkCancelableTableIndex = 256,
    WdfRequestIsCanceledTableIndex = 257,
    WdfRequestCancelSentRequestTableIndex = 258,
    WdfRequestIsFrom32BitProcessTableIndex = 259,
    WdfRequestSetCompletionRoutineTableIndex = 260,
    WdfRequestGetCompletionParamsTableIndex = 261,
    WdfRequestAllocateTimerTableIndex = 262,
    WdfRequestCompleteTableIndex = 263,
    WdfRequestCompleteWithPriorityBoostTableIndex = 264,
    WdfRequestCompleteWithInformationTableIndex = 265,
    WdfRequestGetParametersTableIndex = 266,
    WdfRequestRetrieveInputMemoryTableIndex = 267,
    WdfRequestRetrieveOutputMemoryTableIndex = 268,
    WdfRequestRetrieveInputBufferTableIndex = 269,
    WdfRequestRetrieveOutputBufferTableIndex = 270,
    WdfRequestRetrieveInputWdmMdlTableIndex = 271,
    WdfRequestRetrieveOutputWdmMdlTableIndex = 272,
    WdfRequestRetrieveUnsafeUserInputBufferTableIndex = 273,
    WdfRequestRetrieveUnsafeUserOutputBufferTableIndex = 274,
    WdfRequestSetInformationTableIndex = 275,
    WdfRequestGetInformationTableIndex = 276,
    WdfRequestGetFileObjectTableIndex = 277,
    WdfRequestProbeAndLockUserBufferForReadTableIndex = 278,
    WdfRequestProbeAndLockUserBufferForWriteTableIndex = 279,
    WdfRequestGetRequestorModeTableIndex = 280,
    WdfRequestForwardToIoQueueTableIndex = 281,
    WdfRequestGetIoQueueTableIndex = 282,
    WdfRequestRequeueTableIndex = 283,
    WdfRequestStopAcknowledgeTableIndex = 284,
    WdfRequestWdmGetIrpTableIndex = 285,
    WdfIoResourceRequirementsListSetSlotNumberTableIndex = 286,
    WdfIoResourceRequirementsListSetInterfaceTypeTableIndex = 287,
    WdfIoResourceRequirementsListAppendIoResListTableIndex = 288,
    WdfIoResourceRequirementsListInsertIoResListTableIndex = 289,
    WdfIoResourceRequirementsListGetCountTableIndex = 290,
    WdfIoResourceRequirementsListGetIoResListTableIndex = 291,
    WdfIoResourceRequirementsListRemoveTableIndex = 292,
    WdfIoResourceRequirementsListRemoveByIoResListTableIndex = 293,
    WdfIoResourceListCreateTableIndex = 294,
    WdfIoResourceListAppendDescriptorTableIndex = 295,
    WdfIoResourceListInsertDescriptorTableIndex = 296,
    WdfIoResourceListUpdateDescriptorTableIndex = 297,
    WdfIoResourceListGetCountTableIndex = 298,
    WdfIoResourceListGetDescriptorTableIndex = 299,
    WdfIoResourceListRemoveTableIndex = 300,
    WdfIoResourceListRemoveByDescriptorTableIndex = 301,
    WdfCmResourceListAppendDescriptorTableIndex = 302,
    WdfCmResourceListInsertDescriptorTableIndex = 303,
    WdfCmResourceListGetCountTableIndex = 304,
    WdfCmResourceListGetDescriptorTableIndex = 305,
    WdfCmResourceListRemoveTableIndex = 306,
    WdfCmResourceListRemoveByDescriptorTableIndex = 307,
    WdfStringCreateTableIndex = 308,
    WdfStringGetUnicodeStringTableIndex = 309,
    WdfObjectAcquireLockTableIndex = 310,
    WdfObjectReleaseLockTableIndex = 311,
    WdfWaitLockCreateTableIndex = 312,
    WdfWaitLockAcquireTableIndex = 313,
    WdfWaitLockReleaseTableIndex = 314,
    WdfSpinLockCreateTableIndex = 315,
    WdfSpinLockAcquireTableIndex = 316,
    WdfSpinLockReleaseTableIndex = 317,
    WdfTimerCreateTableIndex = 318,
    WdfTimerStartTableIndex = 319,
    WdfTimerStopTableIndex = 320,
    WdfTimerGetParentObjectTableIndex = 321,
    WdfUsbTargetDeviceCreateTableIndex = 322,
    WdfUsbTargetDeviceRetrieveInformationTableIndex = 323,
    WdfUsbTargetDeviceGetDeviceDescriptorTableIndex = 324,
    WdfUsbTargetDeviceRetrieveConfigDescriptorTableIndex = 325,
    WdfUsbTargetDeviceQueryStringTableIndex = 326,
    WdfUsbTargetDeviceAllocAndQueryStringTableIndex = 327,
    WdfUsbTargetDeviceFormatRequestForStringTableIndex = 328,
    WdfUsbTargetDeviceGetNumInterfacesTableIndex = 329,
    WdfUsbTargetDeviceSelectConfigTableIndex = 330,
    WdfUsbTargetDeviceWdmGetConfigurationHandleTableIndex = 331,
    WdfUsbTargetDeviceRetrieveCurrentFrameNumberTableIndex = 332,
    WdfUsbTargetDeviceSendControlTransferSynchronouslyTableIndex = 333,
    WdfUsbTargetDeviceFormatRequestForControlTransferTableIndex = 334,
    WdfUsbTargetDeviceIsConnectedSynchronousTableIndex = 335,
    WdfUsbTargetDeviceResetPortSynchronouslyTableIndex = 336,
    WdfUsbTargetDeviceCyclePortSynchronouslyTableIndex = 337,
    WdfUsbTargetDeviceFormatRequestForCyclePortTableIndex = 338,
    WdfUsbTargetDeviceSendUrbSynchronouslyTableIndex = 339,
    WdfUsbTargetDeviceFormatRequestForUrbTableIndex = 340,
    WdfUsbTargetPipeGetInformationTableIndex = 341,
    WdfUsbTargetPipeIsInEndpointTableIndex = 342,
    WdfUsbTargetPipeIsOutEndpointTableIndex = 343,
    WdfUsbTargetPipeGetTypeTableIndex = 344,
    WdfUsbTargetPipeSetNoMaximumPacketSizeCheckTableIndex = 345,
    WdfUsbTargetPipeWriteSynchronouslyTableIndex = 346,
    WdfUsbTargetPipeFormatRequestForWriteTableIndex = 347,
    WdfUsbTargetPipeReadSynchronouslyTableIndex = 348,
    WdfUsbTargetPipeFormatRequestForReadTableIndex = 349,
    WdfUsbTargetPipeConfigContinuousReaderTableIndex = 350,
    WdfUsbTargetPipeAbortSynchronouslyTableIndex = 351,
    WdfUsbTargetPipeFormatRequestForAbortTableIndex = 352,
    WdfUsbTargetPipeResetSynchronouslyTableIndex = 353,
    WdfUsbTargetPipeFormatRequestForResetTableIndex = 354,
    WdfUsbTargetPipeSendUrbSynchronouslyTableIndex = 355,
    WdfUsbTargetPipeFormatRequestForUrbTableIndex = 356,
    WdfUsbInterfaceGetInterfaceNumberTableIndex = 357,
    WdfUsbInterfaceGetNumEndpointsTableIndex = 358,
    WdfUsbInterfaceGetDescriptorTableIndex = 359,
    WdfUsbInterfaceSelectSettingTableIndex = 360,
    WdfUsbInterfaceGetEndpointInformationTableIndex = 361,
    WdfUsbTargetDeviceGetInterfaceTableIndex = 362,
    WdfUsbInterfaceGetConfiguredSettingIndexTableIndex = 363,
    WdfUsbInterfaceGetNumConfiguredPipesTableIndex = 364,
    WdfUsbInterfaceGetConfiguredPipeTableIndex = 365,
    WdfUsbTargetPipeWdmGetPipeHandleTableIndex = 366,
    WdfVerifierDbgBreakPointTableIndex = 367,
    WdfVerifierKeBugCheckTableIndex = 368,
    WdfWmiProviderCreateTableIndex = 369,
    WdfWmiProviderGetDeviceTableIndex = 370,
    WdfWmiProviderIsEnabledTableIndex = 371,
    WdfWmiProviderGetTracingHandleTableIndex = 372,
    WdfWmiInstanceCreateTableIndex = 373,
    WdfWmiInstanceRegisterTableIndex = 374,
    WdfWmiInstanceDeregisterTableIndex = 375,
    WdfWmiInstanceGetDeviceTableIndex = 376,
    WdfWmiInstanceGetProviderTableIndex = 377,
    WdfWmiInstanceFireEventTableIndex = 378,
    WdfWorkItemCreateTableIndex = 379,
    WdfWorkItemEnqueueTableIndex = 380,
    WdfWorkItemGetParentObjectTableIndex = 381,
    WdfWorkItemFlushTableIndex = 382,
    WdfCommonBufferCreateWithConfigTableIndex = 383,
    WdfDmaEnablerGetFragmentLengthTableIndex = 384,
    WdfDmaEnablerWdmGetDmaAdapterTableIndex = 385,
    WdfUsbInterfaceGetNumSettingsTableIndex = 386,
    WdfDeviceRemoveDependentUsageDeviceObjectTableIndex = 387,
    WdfDeviceGetSystemPowerActionTableIndex = 388,
    WdfInterruptSetExtendedPolicyTableIndex = 389,
    WdfIoQueueAssignForwardProgressPolicyTableIndex = 390,
    WdfPdoInitAssignContainerIDTableIndex = 391,
    WdfPdoInitAllowForwardingRequestToParentTableIndex = 392,
    WdfRequestMarkCancelableExTableIndex = 393,
    WdfRequestIsReservedTableIndex = 394,
    WdfRequestForwardToParentDeviceIoQueueTableIndex = 395,
    WdfCxDeviceInitAllocateTableIndex = 396,
    WdfCxDeviceInitAssignWdmIrpPreprocessCallbackTableIndex = 397,
    WdfCxDeviceInitSetIoInCallerContextCallbackTableIndex = 398,
    WdfCxDeviceInitSetRequestAttributesTableIndex = 399,
    WdfCxDeviceInitSetFileObjectConfigTableIndex = 400,
    WdfDeviceWdmDispatchIrpTableIndex = 401,
    WdfDeviceWdmDispatchIrpToIoQueueTableIndex = 402,
    WdfDeviceInitSetRemoveLockOptionsTableIndex = 403,
    WdfDeviceConfigureWdmIrpDispatchCallbackTableIndex = 404,
    WdfDmaEnablerConfigureSystemProfileTableIndex = 405,
    WdfDmaTransactionInitializeUsingOffsetTableIndex = 406,
    WdfDmaTransactionGetTransferInfoTableIndex = 407,
    WdfDmaTransactionSetChannelConfigurationCallbackTableIndex = 408,
    WdfDmaTransactionSetTransferCompleteCallbackTableIndex = 409,
    WdfDmaTransactionSetImmediateExecutionTableIndex = 410,
    WdfDmaTransactionAllocateResourcesTableIndex = 411,
    WdfDmaTransactionSetDeviceAddressOffsetTableIndex = 412,
    WdfDmaTransactionFreeResourcesTableIndex = 413,
    WdfDmaTransactionCancelTableIndex = 414,
    WdfDmaTransactionWdmGetTransferContextTableIndex = 415,
    WdfInterruptQueueWorkItemForIsrTableIndex = 416,
    WdfInterruptTryToAcquireLockTableIndex = 417,
    WdfIoQueueStopAndPurgeTableIndex = 418,
    WdfIoQueueStopAndPurgeSynchronouslyTableIndex = 419,
    WdfIoTargetPurgeTableIndex = 420,
    WdfUsbTargetDeviceCreateWithParametersTableIndex = 421,
    WdfUsbTargetDeviceQueryUsbCapabilityTableIndex = 422,
    WdfUsbTargetDeviceCreateUrbTableIndex = 423,
    WdfUsbTargetDeviceCreateIsochUrbTableIndex = 424,
    WdfDeviceWdmAssignPowerFrameworkSettingsTableIndex = 425,
    WdfDmaTransactionStopSystemTransferTableIndex = 426,
    WdfCxVerifierKeBugCheckTableIndex = 427,
    WdfInterruptReportActiveTableIndex = 428,
    WdfInterruptReportInactiveTableIndex = 429,
    WdfDeviceInitSetReleaseHardwareOrderOnFailureTableIndex = 430,
    WdfGetTriageInfoTableIndex = 431,
    WdfDeviceInitSetIoTypeExTableIndex = 432,
    WdfDeviceQueryPropertyExTableIndex = 433,
    WdfDeviceAllocAndQueryPropertyExTableIndex = 434,
    WdfDeviceAssignPropertyTableIndex = 435,
    WdfFdoInitQueryPropertyExTableIndex = 436,
    WdfFdoInitAllocAndQueryPropertyExTableIndex = 437,
    WdfDeviceStopIdleActualTableIndex = 438,
    WdfDeviceResumeIdleActualTableIndex = 439,
    WdfDeviceGetSelfIoTargetTableIndex = 440,
    WdfDeviceInitAllowSelfIoTargetTableIndex = 441,
    WdfIoTargetSelfAssignDefaultIoQueueTableIndex = 442,
    WdfDeviceOpenDevicemapKeyTableIndex = 443,
    WdfDmaTransactionSetSingleTransferRequirementTableIndex = 444,
    WdfCxDeviceInitSetPnpPowerEventCallbacksTableIndex = 445,
    WdfFileObjectGetInitiatorProcessIdTableIndex = 446,
    WdfRequestGetRequestorProcessIdTableIndex = 447,
    WdfDeviceRetrieveCompanionTargetTableIndex = 448,
    WdfCompanionTargetSendTaskSynchronouslyTableIndex = 449,
    WdfCompanionTargetWdmGetCompanionProcessTableIndex = 450,
    WdfDriverOpenPersistentStateRegistryKeyTableIndex = 451,
    WdfDriverErrorReportApiMissingTableIndex = 452,
    WdfFunctionTableNumEntries = 453
};

typedef enum _WDFSTRUCTENUM {
    INDEX_WDF_CHILD_ADDRESS_DESCRIPTION_HEADER = 0,
    INDEX_WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER = 1,
    INDEX_WDF_CHILD_LIST_CONFIG = 2,
    INDEX_WDF_CHILD_LIST_ITERATOR = 3,
    INDEX_WDF_CHILD_RETRIEVE_INFO = 4,
    INDEX_WDF_CLASS_BIND_INFO = 5,
    INDEX_WDF_CLASS_BIND_INFO2 = 6,
    INDEX_WDF_CLASS_EXTENSION_DESCRIPTOR = 7,
    INDEX_WDF_CLASS_LIBRARY_INFO = 8,
    INDEX_WDF_CLASS_VERSION = 9,
    INDEX_WDF_COMMON_BUFFER_CONFIG = 10,
    INDEX_WDF_CUSTOM_TYPE_CONTEXT = 11,
    INDEX_WDF_DEVICE_PNP_CAPABILITIES = 12,
    INDEX_WDF_DEVICE_PNP_NOTIFICATION_DATA = 13,
    INDEX_WDF_DEVICE_POWER_CAPABILITIES = 14,
    INDEX_WDF_DEVICE_POWER_NOTIFICATION_DATA = 15,
    INDEX_WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS = 16,
    INDEX_WDF_DEVICE_POWER_POLICY_NOTIFICATION_DATA = 17,
    INDEX_WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS = 18,
    INDEX_WDF_DEVICE_PROPERTY_DATA = 19,
    INDEX_WDF_DEVICE_STATE = 20,
    INDEX_WDF_DMA_ENABLER_CONFIG = 21,
    INDEX_WDF_DMA_SYSTEM_PROFILE_CONFIG = 22,
    INDEX_WDF_DPC_CONFIG = 23,
    INDEX_WDF_DRIVER_CONFIG = 24,
    INDEX_WDF_DRIVER_GLOBALS = 25,
    INDEX_WDF_DRIVER_VERSION_AVAILABLE_PARAMS = 26,
    INDEX_WDF_FDO_EVENT_CALLBACKS = 27,
    INDEX_WDF_FILEOBJECT_CONFIG = 28,
    INDEX_WDF_INTERRUPT_CONFIG = 29,
    INDEX_WDF_INTERRUPT_EXTENDED_POLICY = 30,
    INDEX_WDF_INTERRUPT_INFO = 31,
    INDEX_WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY_SETTINGS = 32,
    INDEX_WDF_IO_QUEUE_CONFIG = 33,
    INDEX_WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY = 34,
    INDEX_WDF_IO_TARGET_OPEN_PARAMS = 35,
    INDEX_WDF_IO_TYPE_CONFIG = 36,
    INDEX_WDF_MEMORY_DESCRIPTOR = 37,
    INDEX_WDF_OBJECT_ATTRIBUTES = 38,
    INDEX_WDF_OBJECT_CONTEXT_TYPE_INFO = 39,
    INDEX_WDF_PDO_EVENT_CALLBACKS = 40,
    INDEX_WDF_PNPPOWER_EVENT_CALLBACKS = 41,
    INDEX_WDF_POWER_FRAMEWORK_SETTINGS = 42,
    INDEX_WDF_POWER_POLICY_EVENT_CALLBACKS = 43,
    INDEX_WDF_POWER_ROUTINE_TIMED_OUT_DATA = 44,
    INDEX_WDF_QUERY_INTERFACE_CONFIG = 45,
    INDEX_WDF_QUEUE_FATAL_ERROR_DATA = 46,
    INDEX_WDF_REMOVE_LOCK_OPTIONS = 47,
    INDEX_WDF_REQUEST_COMPLETION_PARAMS = 48,
    INDEX_WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH_DATA = 49,
    INDEX_WDF_REQUEST_FORWARD_OPTIONS = 50,
    INDEX_WDF_REQUEST_PARAMETERS = 51,
    INDEX_WDF_REQUEST_REUSE_PARAMS = 52,
    INDEX_WDF_REQUEST_SEND_OPTIONS = 53,
    INDEX_WDF_TASK_SEND_OPTIONS = 54,
    INDEX_WDF_TIMER_CONFIG = 55,
    INDEX_WDF_TRIAGE_INFO = 56,
    INDEX_WDF_USB_CONTINUOUS_READER_CONFIG = 57,
    INDEX_WDF_USB_DEVICE_CREATE_CONFIG = 58,
    INDEX_WDF_USB_DEVICE_INFORMATION = 59,
    INDEX_WDF_USB_DEVICE_SELECT_CONFIG_PARAMS = 60,
    INDEX_WDF_USB_INTERFACE_SELECT_SETTING_PARAMS = 61,
    INDEX_WDF_USB_INTERFACE_SETTING_PAIR = 62,
    INDEX_WDF_USB_PIPE_INFORMATION = 63,
    INDEX_WDF_USB_REQUEST_COMPLETION_PARAMS = 64,
    INDEX_WDF_WMI_INSTANCE_CONFIG = 65,
    INDEX_WDF_WMI_PROVIDER_CONFIG = 66,
    INDEX_WDF_WORKITEM_CONFIG = 67,
    INDEX_WDFCONTEXT_TRIAGE_INFO = 68,
    INDEX_WDFCONTEXTTYPE_TRIAGE_INFO = 69,
    INDEX_WDFCX_FILEOBJECT_CONFIG = 70,
    INDEX_WDFCX_PNPPOWER_EVENT_CALLBACKS = 71,
    INDEX_WDFDEVICE_TRIAGE_INFO = 72,
    INDEX_WDFFWDPROGRESS_TRIAGE_INFO = 73,
    INDEX_WDFIRP_TRIAGE_INFO = 74,
    INDEX_WDFIRPQUEUE_TRIAGE_INFO = 75,
    INDEX_WDFMEMORY_OFFSET = 76,
    INDEX_WDFOBJECT_TRIAGE_INFO = 77,
    INDEX_WDFQUEUE_TRIAGE_INFO = 78,
    INDEX_WDFREQUEST_TRIAGE_INFO = 79,
    WDF_STRUCTURE_TABLE_NUM_ENTRIES = 80
};

typedef enum _WDF_BUGCHECK_CODES {
    WDF_POWER_ROUTINE_TIMED_OUT = 1,
    WDF_RECURSIVE_LOCK = 2,
    WDF_VERIFIER_FATAL_ERROR = 3,
    WDF_REQUIRED_PARAMETER_IS_NULL = 4,
    WDF_INVALID_HANDLE = 5,
    WDF_REQUEST_FATAL_ERROR = 6,
    WDF_OBJECT_ERROR = 7,
    WDF_DMA_FATAL_ERROR = 8,
    WDF_INVALID_INTERRUPT = 9,
    WDF_QUEUE_FATAL_ERROR = 10,
    WDF_INVALID_LOCK_OPERATION = 11,
    WDF_PNP_FATAL_ERROR = 12,
    WDF_POWER_MULTIPLE_PPO = 13,
    WDF_VERIFIER_IRQL_MISMATCH = 14,
    WDF_VERIFIER_CRITICAL_REGION_MISMATCH = 15,
    WDF_API_UNAVAILABLE = 16
};

typedef enum _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS {
    WdfChildListRetrieveDeviceUndefined = 0,
    WdfChildListRetrieveDeviceSuccess = 1,
    WdfChildListRetrieveDeviceNotYetCreated = 2,
    WdfChildListRetrieveDeviceNoSuchDevice = 3
};

typedef enum _WDF_DEVICE_FAILED_ACTION {
    WdfDeviceFailedUndefined = 0,
    WdfDeviceFailedAttemptRestart = 1,
    WdfDeviceFailedNoRestart = 2
};

typedef enum _WDF_DEVICE_IO_TYPE {
    WdfDeviceIoUndefined = 0,
    WdfDeviceIoNeither = 1,
    WdfDeviceIoBuffered = 2,
    WdfDeviceIoDirect = 3,
    WdfDeviceIoBufferedOrDirect = 4,
    WdfDeviceIoMaximum = 5
};

typedef enum _WDF_DEVICE_PNP_STATE {
    WdfDevStatePnpInvalid = 0,
    WdfDevStatePnpObjectCreated = 256,
    WdfDevStatePnpCheckForDevicePresence = 257,
    WdfDevStatePnpEjectFailed = 258,
    WdfDevStatePnpEjectHardware = 259,
    WdfDevStatePnpEjectedWaitingForRemove = 260,
    WdfDevStatePnpInit = 261,
    WdfDevStatePnpInitStarting = 262,
    WdfDevStatePnpInitSurpriseRemoved = 263,
    WdfDevStatePnpHardwareAvailable = 264,
    WdfDevStatePnpEnableInterfaces = 265,
    WdfDevStatePnpHardwareAvailablePowerPolicyFailed = 266,
    WdfDevStatePnpQueryRemoveAskDriver = 267,
    WdfDevStatePnpQueryRemovePending = 268,
    WdfDevStatePnpQueryRemoveStaticCheck = 269,
    WdfDevStatePnpQueriedRemoving = 270,
    WdfDevStatePnpQueryStopAskDriver = 271,
    WdfDevStatePnpQueryStopPending = 272,
    WdfDevStatePnpQueryStopStaticCheck = 273,
    WdfDevStatePnpQueryCanceled = 274,
    WdfDevStatePnpRemoved = 275,
    WdfDevStatePnpPdoRemoved = 276,
    WdfDevStatePnpRemovedPdoWait = 277,
    WdfDevStatePnpRemovedPdoSurpriseRemoved = 278,
    WdfDevStatePnpRemovingDisableInterfaces = 279,
    WdfDevStatePnpRestarting = 280,
    WdfDevStatePnpStarted = 281,
    WdfDevStatePnpStartedCancelStop = 282,
    WdfDevStatePnpStartedCancelRemove = 283,
    WdfDevStatePnpStartedRemoving = 284,
    WdfDevStatePnpStartingFromStopped = 285,
    WdfDevStatePnpStopped = 286,
    WdfDevStatePnpStoppedWaitForStartCompletion = 287,
    WdfDevStatePnpStartedStopping = 288,
    WdfDevStatePnpSurpriseRemove = 289,
    WdfDevStatePnpInitQueryRemove = 290,
    WdfDevStatePnpInitQueryRemoveCanceled = 291,
    WdfDevStatePnpFdoRemoved = 292,
    WdfDevStatePnpRemovedWaitForChildren = 293,
    WdfDevStatePnpQueriedSurpriseRemove = 294,
    WdfDevStatePnpSurpriseRemoveIoStarted = 295,
    WdfDevStatePnpFailedPowerDown = 296,
    WdfDevStatePnpFailedIoStarting = 297,
    WdfDevStatePnpFailedOwnHardware = 298,
    WdfDevStatePnpFailed = 299,
    WdfDevStatePnpFailedSurpriseRemoved = 300,
    WdfDevStatePnpFailedStarted = 301,
    WdfDevStatePnpFailedWaitForRemove = 302,
    WdfDevStatePnpFailedInit = 303,
    WdfDevStatePnpPdoInitFailed = 304,
    WdfDevStatePnpRestart = 305,
    WdfDevStatePnpRestartReleaseHardware = 306,
    WdfDevStatePnpRestartHardwareAvailable = 307,
    WdfDevStatePnpPdoRestart = 308,
    WdfDevStatePnpFinal = 309,
    WdfDevStatePnpRemovedChildrenRemoved = 310,
    WdfDevStatePnpQueryRemoveEnsureDeviceAwake = 311,
    WdfDevStatePnpQueryStopEnsureDeviceAwake = 312,
    WdfDevStatePnpFailedPowerPolicyRemoved = 313,
    WdfDevStatePnpNull = 314
};

typedef enum _WDF_DEVICE_POWER_POLICY_STATE {
    WdfDevStatePwrPolInvalid = 0,
    WdfDevStatePwrPolObjectCreated = 1280,
    WdfDevStatePwrPolStarting = 1281,
    WdfDevStatePwrPolStartingSucceeded = 1282,
    WdfDevStatePwrPolStartingFailed = 1283,
    WdfDevStatePwrPolStartingDecideS0Wake = 1284,
    WdfDevStatePwrPolStartedIdleCapable = 1285,
    WdfDevStatePwrPolTimerExpiredNoWake = 1286,
    WdfDevStatePwrPolTimerExpiredNoWakeCompletePowerDown = 1287,
    WdfDevStatePwrPolWaitingUnarmed = 1288,
    WdfDevStatePwrPolWaitingUnarmedQueryIdle = 1289,
    WdfDevStatePwrPolS0NoWakePowerUp = 1290,
    WdfDevStatePwrPolS0NoWakeCompletePowerUp = 1291,
    WdfDevStatePwrPolSystemSleepFromDeviceWaitingUnarmed = 1292,
    WdfDevStatePwrPolSystemSleepNeedWake = 1293,
    WdfDevStatePwrPolSystemSleepNeedWakeCompletePowerUp = 1294,
    WdfDevStatePwrPolSystemSleepPowerRequestFailed = 1295,
    WdfDevStatePwrPolCheckPowerPageable = 1296,
    WdfDevStatePwrPolSleepingWakeWakeArrived = 1297,
    WdfDevStatePwrPolSleepingWakeRevertArmWake = 1298,
    WdfDevStatePwrPolSystemAsleepWakeArmed = 1299,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabled = 1300,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceled = 1301,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisarm = 1302,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggered = 1303,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0 = 1304,
    WdfDevStatePwrPolSystemWakeDeviceWokeDisarm = 1305,
    WdfDevStatePwrPolSleepingWakeWakeArrivedNP = 0x851a,
    WdfDevStatePwrPolSleepingWakeRevertArmWakeNP = 0x851b,
    WdfDevStatePwrPolSleepingWakePowerDownFailed = 1308,
    WdfDevStatePwrPolSleepingWakePowerDownFailedWakeCanceled = 1309,
    WdfDevStatePwrPolSystemAsleepWakeArmedNP = 0x851e,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledNP = 0x851f,
    WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceledNP = 0x8520,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisarmNP = 0x8521,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredNP = 0x8522,
    WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0NP = 0x8523,
    WdfDevStatePwrPolSystemWakeDeviceWokeDisarmNP = 0x8524,
    WdfDevStatePwrPolSystemWakeDeviceWakeCompletePowerUp = 1317,
    WdfDevStatePwrPolSleeping = 1318,
    WdfDevStatePwrPolSleepingNoWakePowerDown = 1319,
    WdfDevStatePwrPolSleepingNoWakeCompletePowerDown = 1320,
    WdfDevStatePwrPolSleepingNoWakeDxRequestFailed = 1321,
    WdfDevStatePwrPolSleepingWakePowerDown = 1322,
    WdfDevStatePwrPolSleepingSendWake = 1323,
    WdfDevStatePwrPolSystemAsleepNoWake = 1324,
    WdfDevStatePwrPolSystemWakeDeviceWakeDisabled = 1325,
    WdfDevStatePwrPolSystemWakeDeviceToD0 = 1326,
    WdfDevStatePwrPolSystemWakeDeviceToD0CompletePowerUp = 1327,
    WdfDevStatePwrPolSystemWakeQueryIdle = 1328,
    WdfDevStatePwrPolStartedWakeCapable = 1329,
    WdfDevStatePwrPolTimerExpiredDecideUsbSS = 1330,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDown = 1331,
    WdfDevStatePwrPolTimerExpiredWakeCapableSendWake = 1332,
    WdfDevStatePwrPolTimerExpiredWakeCapableUsbSS = 1333,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeArrived = 1334,
    WdfDevStatePwrPolTimerExpiredWakeCapableCancelWake = 1335,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeCanceled = 1336,
    WdfDevStatePwrPolTimerExpiredWakeCapableCleanup = 1337,
    WdfDevStatePwrPolTimerExpiredWakeCapableDxAllocFailed = 1338,
    WdfDevStatePwrPolTimerExpiredWakeCompletedPowerDown = 1339,
    WdfDevStatePwrPolTimerExpiredWakeCompletedPowerUp = 1340,
    WdfDevStatePwrPolWaitingArmedUsbSS = 1341,
    WdfDevStatePwrPolWaitingArmed = 1342,
    WdfDevStatePwrPolWaitingArmedQueryIdle = 1343,
    WdfDevStatePwrPolIoPresentArmed = 1344,
    WdfDevStatePwrPolIoPresentArmedWakeCanceled = 1345,
    WdfDevStatePwrPolS0WakeDisarm = 1346,
    WdfDevStatePwrPolS0WakeCompletePowerUp = 1347,
    WdfDevStatePwrPolTimerExpiredWakeSucceeded = 1348,
    WdfDevStatePwrPolTimerExpiredWakeCompletedDisarm = 1349,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeSucceeded = 1350,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeFailed = 1351,
    WdfDevStatePwrPolWakeFailedUsbSS = 1352,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedCancelWake = 1353,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeCanceled = 1354,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedUsbSS = 1355,
    WdfDevStatePwrPolCancelingWakeForSystemSleep = 1356,
    WdfDevStatePwrPolCancelingWakeForSystemSleepWakeCanceled = 1357,
    WdfDevStatePwrPolDisarmingWakeForSystemSleepCompletePowerUp = 1358,
    WdfDevStatePwrPolPowerUpForSystemSleepFailed = 1359,
    WdfDevStatePwrPolWokeFromS0UsbSS = 1360,
    WdfDevStatePwrPolWokeFromS0 = 1361,
    WdfDevStatePwrPolWokeFromS0NotifyDriver = 1362,
    WdfDevStatePwrPolStoppingResetDevice = 1363,
    WdfDevStatePwrPolStoppingResetDeviceCompletePowerUp = 1364,
    WdfDevStatePwrPolStoppingResetDeviceFailed = 1365,
    WdfDevStatePwrPolStoppingD0 = 1366,
    WdfDevStatePwrPolStoppingD0Failed = 1367,
    WdfDevStatePwrPolStoppingDisarmWake = 1368,
    WdfDevStatePwrPolStoppingDisarmWakeCancelWake = 1369,
    WdfDevStatePwrPolStoppingDisarmWakeWakeCanceled = 1370,
    WdfDevStatePwrPolStopping = 1371,
    WdfDevStatePwrPolStoppingFailed = 1372,
    WdfDevStatePwrPolStoppingSendStatus = 1373,
    WdfDevStatePwrPolStoppingCancelTimer = 1374,
    WdfDevStatePwrPolStoppingWaitForIdleTimeout = 1375,
    WdfDevStatePwrPolStoppingCancelUsbSS = 1376,
    WdfDevStatePwrPolStoppingWaitForUsbSSCompletion = 1377,
    WdfDevStatePwrPolStoppingCancelWake = 1378,
    WdfDevStatePwrPolStopped = 1379,
    WdfDevStatePwrPolCancelUsbSS = 1380,
    WdfDevStatePwrPolStarted = 1381,
    WdfDevStatePwrPolStartedCancelTimer = 1382,
    WdfDevStatePwrPolStartedWaitForIdleTimeout = 1383,
    WdfDevStatePwrPolStartedWakeCapableCancelTimerForSleep = 1384,
    WdfDevStatePwrPolStartedWakeCapableWaitForIdleTimeout = 1385,
    WdfDevStatePwrPolStartedWakeCapableSleepingUsbSS = 1386,
    WdfDevStatePwrPolStartedIdleCapableCancelTimerForSleep = 1387,
    WdfDevStatePwrPolStartedIdleCapableWaitForIdleTimeout = 1388,
    WdfDevStatePwrPolDeviceD0PowerRequestFailed = 1389,
    WdfDevStatePwrPolDevicePowerRequestFailed = 1390,
    WdfDevStatePwrPolGotoDx = 1391,
    WdfDevStatePwrPolGotoDxInDx = 1392,
    WdfDevStatePwrPolDx = 1393,
    WdfDevStatePwrPolGotoD0 = 1394,
    WdfDevStatePwrPolGotoD0InD0 = 1395,
    WdfDevStatePwrPolFinal = 1396,
    WdfDevStatePwrPolSleepingPowerDownNotProcessed = 1397,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownNotProcessed = 1398,
    WdfDevStatePwrPolTimerExpiredNoWakePowerDownNotProcessed = 1399,
    WdfDevStatePwrPolTimerExpiredNoWakePoweredDownDisableIdleTimer = 1400,
    WdfDevStatePwrPolStoppingWaitingForImplicitPowerDown = 1401,
    WdfDevStatePwrPolStoppingPoweringUp = 1402,
    WdfDevStatePwrPolStoppingPoweringDown = 1403,
    WdfDevStatePwrPolPowerUpForSystemSleepNotSeen = 1404,
    WdfDevStatePwrPolWaitingArmedStoppingCancelUsbSS = 1405,
    WdfDevStatePwrPolWaitingArmedWakeFailedCancelUsbSS = 1406,
    WdfDevStatePwrPolWaitingArmedIoPresentCancelUsbSS = 1407,
    WdfDevStatePwrPolWaitingArmedWakeSucceededCancelUsbSS = 1408,
    WdfDevStatePwrPolCancelingUsbSSForSystemSleep = 1409,
    WdfDevStatePwrPolStoppingD0CancelUsbSS = 1410,
    WdfDevStatePwrPolStartingPoweredUp = 1411,
    WdfDevStatePwrPolIdleCapableDeviceIdle = 1412,
    WdfDevStatePwrPolDeviceIdleReturnToActive = 1413,
    WdfDevStatePwrPolDeviceIdleSleeping = 1414,
    WdfDevStatePwrPolDeviceIdleStopping = 1415,
    WdfDevStatePwrPolTimerExpiredNoWakeUndoPowerDown = 1416,
    WdfDevStatePwrPolWakeCapableDeviceIdle = 1417,
    WdfDevStatePwrPolWakeCapableUsbSSCompleted = 1418,
    WdfDevStatePwrPolTimerExpiredWakeCapableUndoPowerDown = 1419,
    WdfDevStatePwrPolTimerExpiredWakeCompletedHardwareStarted = 1420,
    WdfDevStatePwrPolStoppedRemoving = 1421,
    WdfDevStatePwrPolRemoved = 1422,
    WdfDevStatePwrPolRestarting = 1423,
    WdfDevStatePwrPolRestartingFailed = 1424,
    WdfDevStatePwrPolStartingPoweredUpFailed = 1425,
    WdfDevStatePwrPolTimerExpiredNoWakeReturnToActive = 1426,
    WdfDevStatePwrPolWaitingArmedWakeInterruptFired = 1427,
    WdfDevStatePwrPolSystemWakeDeviceWakeInterruptFired = 1428,
    WdfDevStatePwrPolSystemWakeDeviceWakeInterruptFiredNP = 0x8595,
    WdfDevStatePwrPolTimerExpiredWakeCapableWakeInterruptArrived = 1430,
    WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeInterruptArrived = 1431,
    WdfDevStatePwrPolWaitingArmedWakeInterruptFiredDuringPowerDown = 1432,
    WdfDevStatePwrPolNull = 1433
};

typedef enum _WDF_DEVICE_POWER_STATE {
    WdfDevStatePowerInvalid = 0,
    WdfDevStatePowerObjectCreated = 768,
    WdfDevStatePowerCheckDeviceType = 769,
    WdfDevStatePowerCheckDeviceTypeNP = 0x8302,
    WdfDevStatePowerCheckParentState = 771,
    WdfDevStatePowerCheckParentStateNP = 0x8304,
    WdfDevStatePowerEnablingWakeAtBus = 773,
    WdfDevStatePowerEnablingWakeAtBusNP = 0x8306,
    WdfDevStatePowerD0 = 775,
    WdfDevStatePowerD0NP = 0x8308,
    WdfDevStatePowerD0BusWakeOwner = 777,
    WdfDevStatePowerD0BusWakeOwnerNP = 0x830a,
    WdfDevStatePowerD0ArmedForWake = 779,
    WdfDevStatePowerD0ArmedForWakeNP = 0x830c,
    WdfDevStatePowerD0DisarmingWakeAtBus = 781,
    WdfDevStatePowerD0DisarmingWakeAtBusNP = 0x830e,
    WdfDevStatePowerD0Starting = 783,
    WdfDevStatePowerD0StartingConnectInterrupt = 784,
    WdfDevStatePowerD0StartingDmaEnable = 785,
    WdfDevStatePowerD0StartingStartSelfManagedIo = 786,
    WdfDevStatePowerDecideD0State = 787,
    WdfDevStatePowerGotoD3Stopped = 788,
    WdfDevStatePowerStopped = 789,
    WdfDevStatePowerStartingCheckDeviceType = 790,
    WdfDevStatePowerStartingChild = 791,
    WdfDevStatePowerDxDisablingWakeAtBus = 792,
    WdfDevStatePowerDxDisablingWakeAtBusNP = 0x8319,
    WdfDevStatePowerGotoDx = 794,
    WdfDevStatePowerGotoDxNP = 0x831b,
    WdfDevStatePowerGotoDxIoStopped = 796,
    WdfDevStatePowerGotoDxIoStoppedNP = 0x831d,
    WdfDevStatePowerGotoDxNPFailed = 0x831e,
    WdfDevStatePowerDx = 799,
    WdfDevStatePowerDxNP = 0x8320,
    WdfDevStatePowerGotoDxArmedForWake = 801,
    WdfDevStatePowerGotoDxArmedForWakeNP = 0x8322,
    WdfDevStatePowerGotoDxIoStoppedArmedForWake = 803,
    WdfDevStatePowerGotoDxIoStoppedArmedForWakeNP = 0x8324,
    WdfDevStatePowerDxArmedForWake = 805,
    WdfDevStatePowerDxArmedForWakeNP = 0x8326,
    WdfDevStatePowerCheckParentStateArmedForWake = 807,
    WdfDevStatePowerCheckParentStateArmedForWakeNP = 0x8328,
    WdfDevStatePowerWaitForParentArmedForWake = 809,
    WdfDevStatePowerWaitForParentArmedForWakeNP = 0x832a,
    WdfDevStatePowerStartSelfManagedIo = 811,
    WdfDevStatePowerStartSelfManagedIoNP = 0x832c,
    WdfDevStatePowerStartSelfManagedIoFailed = 813,
    WdfDevStatePowerStartSelfManagedIoFailedNP = 0x832e,
    WdfDevStatePowerWaitForParent = 815,
    WdfDevStatePowerWaitForParentNP = 0x8330,
    WdfDevStatePowerWakePending = 817,
    WdfDevStatePowerWakePendingNP = 0x8332,
    WdfDevStatePowerWaking = 819,
    WdfDevStatePowerWakingNP = 0x8334,
    WdfDevStatePowerWakingConnectInterrupt = 821,
    WdfDevStatePowerWakingConnectInterruptNP = 0x8336,
    WdfDevStatePowerWakingConnectInterruptFailed = 823,
    WdfDevStatePowerWakingConnectInterruptFailedNP = 0x8338,
    WdfDevStatePowerWakingDmaEnable = 825,
    WdfDevStatePowerWakingDmaEnableNP = 0x833a,
    WdfDevStatePowerWakingDmaEnableFailed = 827,
    WdfDevStatePowerWakingDmaEnableFailedNP = 0x833c,
    WdfDevStatePowerReportPowerUpFailedDerefParent = 829,
    WdfDevStatePowerReportPowerUpFailed = 830,
    WdfDevStatePowerPowerFailedPowerDown = 831,
    WdfDevStatePowerReportPowerDownFailed = 832,
    WdfDevStatePowerInitialConnectInterruptFailed = 833,
    WdfDevStatePowerInitialDmaEnableFailed = 834,
    WdfDevStatePowerInitialSelfManagedIoFailed = 835,
    WdfDevStatePowerInitialPowerUpFailedDerefParent = 836,
    WdfDevStatePowerInitialPowerUpFailed = 837,
    WdfDevStatePowerDxStoppedDisarmWake = 838,
    WdfDevStatePowerDxStoppedDisarmWakeNP = 0x8347,
    WdfDevStatePowerGotoDxStoppedDisableInterruptNP = 0x8348,
    WdfDevStatePowerGotoDxStopped = 841,
    WdfDevStatePowerDxStopped = 842,
    WdfDevStatePowerGotoStopped = 843,
    WdfDevStatePowerStoppedCompleteDx = 844,
    WdfDevStatePowerDxStoppedDecideDxState = 845,
    WdfDevStatePowerDxStoppedArmForWake = 846,
    WdfDevStatePowerDxStoppedArmForWakeNP = 0x834f,
    WdfDevStatePowerFinalPowerDownFailed = 848,
    WdfDevStatePowerFinal = 849,
    WdfDevStatePowerGotoImplicitD3DisarmWakeAtBus = 850,
    WdfDevStatePowerUpFailed = 851,
    WdfDevStatePowerUpFailedDerefParent = 852,
    WdfDevStatePowerGotoDxFailed = 853,
    WdfDevStatePowerGotoDxStoppedDisableInterrupt = 854,
    WdfDevStatePowerUpFailedNP = 0x8357,
    WdfDevStatePowerUpFailedDerefParentNP = 0x8358,
    WdfDevStatePowerNotifyingD0ExitToWakeInterrupts = 857,
    WdfDevStatePowerNotifyingD0EntryToWakeInterrupts = 858,
    WdfDevStatePowerNotifyingD0ExitToWakeInterruptsNP = 0x835b,
    WdfDevStatePowerNotifyingD0EntryToWakeInterruptsNP = 0x835c,
    WdfDevStatePowerInitialPowerUpFailedPowerDown = 861,
    WdfDevStatePowerUpFailedPowerDown = 862,
    WdfDevStatePowerUpFailedPowerDownNP = 0x835f,
    WdfDevStatePowerInitialSelfManagedIoFailedStarted = 864,
    WdfDevStatePowerStartSelfManagedIoFailedStarted = 865,
    WdfDevStatePowerStartSelfManagedIoFailedStartedNP = 0x8362,
    WdfDevStatePowerNull = 867
};

typedef enum _WDF_DEVICE_SHUTDOWN_FLAGS {
    WdfDeviceShutdown = 1,
    WdfDeviceLastChanceShutdown = 2
};

typedef enum _WDF_DEVICE_STATE_FLAGS {
    WdfDevStateNP = 0x8000
};

typedef enum _WDF_DISPATCH_IRP_TO_IO_QUEUE_FLAGS {
    WDF_DISPATCH_IRP_TO_IO_QUEUE_NO_FLAGS = 0,
    WDF_DISPATCH_IRP_TO_IO_QUEUE_INVOKE_INCALLERCTX_CALLBACK = 1,
    WDF_DISPATCH_IRP_TO_IO_QUEUE_PREPROCESSED_IRP = 2
};

typedef enum _WDF_DMA_DIRECTION {
    WdfDmaDirectionReadFromDevice = 0,
    WdfDmaDirectionWriteToDevice = 1
};

typedef enum _WDF_DMA_ENABLER_CONFIG_FLAGS {
    WDF_DMA_ENABLER_CONFIG_NO_SGLIST_PREALLOCATION = 1,
    WDF_DMA_ENABLER_CONFIG_REQUIRE_SINGLE_TRANSFER = 2
};

typedef enum _WDF_DMA_PROFILE {
    WdfDmaProfileInvalid = 0,
    WdfDmaProfilePacket = 1,
    WdfDmaProfileScatterGather = 2,
    WdfDmaProfilePacket64 = 3,
    WdfDmaProfileScatterGather64 = 4,
    WdfDmaProfileScatterGatherDuplex = 5,
    WdfDmaProfileScatterGather64Duplex = 6,
    WdfDmaProfileSystem = 7,
    WdfDmaProfileSystemDuplex = 8
};

typedef enum _WDF_DRIVER_INIT_FLAGS {
    WdfDriverInitNonPnpDriver = 1,
    WdfDriverInitNoDispatchOverride = 2,
    WdfVerifyOn = 4,
    WdfVerifierOn = 8,
    WdfDriverInitCompanion = 16
};

typedef enum _WDF_EXECUTION_LEVEL {
    WdfExecutionLevelInvalid = 0,
    WdfExecutionLevelInheritFromParent = 1,
    WdfExecutionLevelPassive = 2,
    WdfExecutionLevelDispatch = 3
};

typedef enum _WDF_FILEOBJECT_CLASS {
    WdfFileObjectInvalid = 0,
    WdfFileObjectNotRequired = 1,
    WdfFileObjectWdfCanUseFsContext = 2,
    WdfFileObjectWdfCanUseFsContext2 = 3,
    WdfFileObjectWdfCannotUseFsContexts = 4,
    WdfFileObjectCanBeOptional = -2147483648
};

typedef enum _WDF_INTERRUPT_POLARITY {
    WdfInterruptPolarityUnknown = 0,
    WdfInterruptActiveHigh = 1,
    WdfInterruptActiveLow = 2
};

typedef enum _WDF_INTERRUPT_POLICY {
    WdfIrqPolicyMachineDefault = 0,
    WdfIrqPolicyAllCloseProcessors = 1,
    WdfIrqPolicyOneCloseProcessor = 2,
    WdfIrqPolicyAllProcessorsInMachine = 3,
    WdfIrqPolicySpecifiedProcessors = 4,
    WdfIrqPolicySpreadMessagesAcrossAllProcessors = 5
};

typedef enum _WDF_INTERRUPT_PRIORITY {
    WdfIrqPriorityUndefined = 0,
    WdfIrqPriorityLow = 1,
    WdfIrqPriorityNormal = 2,
    WdfIrqPriorityHigh = 3
};

typedef enum _WDF_IO_FORWARD_PROGRESS_ACTION {
    WdfIoForwardProgressActionInvalid = 0,
    WdfIoForwardProgressActionFailRequest = 1,
    WdfIoForwardProgressActionUseReservedRequest = 2
};

typedef enum _WDF_IO_FORWARD_PROGRESS_RESERVED_POLICY {
    WdfIoForwardProgressInvalidPolicy = 0,
    WdfIoForwardProgressReservedPolicyAlwaysUseReservedRequest = 1,
    WdfIoForwardProgressReservedPolicyUseExamine = 2,
    WdfIoForwardProgressReservedPolicyPagingIO = 3
};

typedef enum _WDF_IO_QUEUE_DISPATCH_TYPE {
    WdfIoQueueDispatchInvalid = 0,
    WdfIoQueueDispatchSequential = 1,
    WdfIoQueueDispatchParallel = 2,
    WdfIoQueueDispatchManual = 3,
    WdfIoQueueDispatchMax = 4
};

typedef enum _WDF_IO_QUEUE_STATE {
    WdfIoQueueAcceptRequests = 1,
    WdfIoQueueDispatchRequests = 2,
    WdfIoQueueNoRequests = 4,
    WdfIoQueueDriverNoRequests = 8,
    WdfIoQueuePnpHeld = 16
};

typedef enum _WDF_IO_TARGET_OPEN_TYPE {
    WdfIoTargetOpenUndefined = 0,
    WdfIoTargetOpenUseExistingDevice = 1,
    WdfIoTargetOpenByName = 2,
    WdfIoTargetOpenReopen = 3,
    WdfIoTargetOpenLocalTargetByFile = 4
};

typedef enum _WDF_IO_TARGET_PURGE_IO_ACTION {
    WdfIoTargetPurgeIoUndefined = 0,
    WdfIoTargetPurgeIoAndWait = 1,
    WdfIoTargetPurgeIo = 2
};

typedef enum _WDF_IO_TARGET_SENT_IO_ACTION {
    WdfIoTargetSentIoUndefined = 0,
    WdfIoTargetCancelSentIo = 1,
    WdfIoTargetWaitForSentIoToComplete = 2,
    WdfIoTargetLeaveSentIoPending = 3
};

typedef enum _WDF_IO_TARGET_STATE {
    WdfIoTargetStateUndefined = 0,
    WdfIoTargetStarted = 1,
    WdfIoTargetStopped = 2,
    WdfIoTargetClosedForQueryRemove = 3,
    WdfIoTargetClosed = 4,
    WdfIoTargetDeleted = 5,
    WdfIoTargetPurged = 6
};

typedef enum _WDF_MEMORY_DESCRIPTOR_TYPE {
    WdfMemoryDescriptorTypeInvalid = 0,
    WdfMemoryDescriptorTypeBuffer = 1,
    WdfMemoryDescriptorTypeMdl = 2,
    WdfMemoryDescriptorTypeHandle = 3
};

typedef enum _WDF_POWER_DEVICE_STATE {
    WdfPowerDeviceInvalid = 0,
    WdfPowerDeviceD0 = 1,
    WdfPowerDeviceD1 = 2,
    WdfPowerDeviceD2 = 3,
    WdfPowerDeviceD3 = 4,
    WdfPowerDeviceD3Final = 5,
    WdfPowerDevicePrepareForHibernation = 6,
    WdfPowerDeviceMaximum = 7
};

typedef enum _WDF_POWER_POLICY_IDLE_TIMEOUT_CONSTANTS {
    IdleTimeoutDefaultConstant = 0
};

typedef enum _WDF_POWER_POLICY_IDLE_TIMEOUT_TYPE {
    DriverManagedIdleTimeout = 0,
    SystemManagedIdleTimeout = 1,
    SystemManagedIdleTimeoutWithHint = 2
};

typedef enum _WDF_POWER_POLICY_S0_IDLE_CAPABILITIES {
    IdleCapsInvalid = 0,
    IdleCannotWakeFromS0 = 1,
    IdleCanWakeFromS0 = 2,
    IdleUsbSelectiveSuspend = 3
};

typedef enum _WDF_POWER_POLICY_S0_IDLE_USER_CONTROL {
    IdleUserControlInvalid = 0,
    IdleDoNotAllowUserControl = 1,
    IdleAllowUserControl = 2
};

typedef enum _WDF_POWER_POLICY_SX_WAKE_USER_CONTROL {
    WakeUserControlInvalid = 0,
    WakeDoNotAllowUserControl = 1,
    WakeAllowUserControl = 2
};

typedef enum _WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE {
    WdfReleaseHardwareOrderOnFailureInvalid = 0,
    WdfReleaseHardwareOrderOnFailureEarly = 1,
    WdfReleaseHardwareOrderOnFailureAfterDescendants = 2
};

typedef enum _WDF_REMOVE_LOCK_OPTIONS_FLAGS {
    WDF_REMOVE_LOCK_OPTION_ACQUIRE_FOR_IO = 1
};

typedef enum _WDF_REQUEST_FATAL_ERROR_CODES {
    WDF_REQUEST_FATAL_ERROR_NO_MORE_STACK_LOCATIONS = 1,
    WDF_REQUEST_FATAL_ERROR_NULL_IRP = 2,
    WDF_REQUEST_FATAL_ERROR_REQUEST_ALREADY_SENT = 3,
    WDF_REQUEST_FATAL_ERROR_INFORMATION_LENGTH_MISMATCH = 4,
    WDF_REQUEST_FATAL_ERROR_REQUEST_NOT_IN_QUEUE = 5
};

typedef enum _WDF_REQUEST_FORWARD_OPTIONS_FLAGS {
    WDF_REQUEST_FORWARD_OPTION_SEND_AND_FORGET = 1
};

typedef enum _WDF_REQUEST_REUSE_FLAGS {
    WDF_REQUEST_REUSE_NO_FLAGS = 0,
    WDF_REQUEST_REUSE_SET_NEW_IRP = 1
};

typedef enum _WDF_REQUEST_SEND_OPTIONS_FLAGS {
    WDF_REQUEST_SEND_OPTION_TIMEOUT = 1,
    WDF_REQUEST_SEND_OPTION_SYNCHRONOUS = 2,
    WDF_REQUEST_SEND_OPTION_IGNORE_TARGET_STATE = 4,
    WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET = 8,
    WDF_REQUEST_SEND_OPTION_IMPERSONATE_CLIENT = 0x10000,
    WDF_REQUEST_SEND_OPTION_IMPERSONATION_IGNORE_FAILURE = 0x20000
};

typedef enum _WDF_REQUEST_STOP_ACTION_FLAGS {
    WdfRequestStopActionInvalid = 0,
    WdfRequestStopActionSuspend = 1,
    WdfRequestStopActionPurge = 2,
    WdfRequestStopRequestCancelable = 0x10000000
};

typedef enum _WDF_REQUEST_TYPE {
    WdfRequestTypeCreate = 0,
    WdfRequestTypeCreateNamedPipe = 1,
    WdfRequestTypeClose = 2,
    WdfRequestTypeRead = 3,
    WdfRequestTypeWrite = 4,
    WdfRequestTypeQueryInformation = 5,
    WdfRequestTypeSetInformation = 6,
    WdfRequestTypeQueryEA = 7,
    WdfRequestTypeSetEA = 8,
    WdfRequestTypeFlushBuffers = 9,
    WdfRequestTypeQueryVolumeInformation = 10,
    WdfRequestTypeSetVolumeInformation = 11,
    WdfRequestTypeDirectoryControl = 12,
    WdfRequestTypeFileSystemControl = 13,
    WdfRequestTypeDeviceControl = 14,
    WdfRequestTypeDeviceControlInternal = 15,
    WdfRequestTypeShutdown = 16,
    WdfRequestTypeLockControl = 17,
    WdfRequestTypeCleanup = 18,
    WdfRequestTypeCreateMailSlot = 19,
    WdfRequestTypeQuerySecurity = 20,
    WdfRequestTypeSetSecurity = 21,
    WdfRequestTypePower = 22,
    WdfRequestTypeSystemControl = 23,
    WdfRequestTypeDeviceChange = 24,
    WdfRequestTypeQueryQuota = 25,
    WdfRequestTypeSetQuota = 26,
    WdfRequestTypePnp = 27,
    WdfRequestTypeOther = 28,
    WdfRequestTypeUsb = 64,
    WdfRequestTypeNoFormat = 255,
    WdfRequestTypeMax = 256
};

typedef enum _WDF_RETRIEVE_CHILD_FLAGS {
    WdfRetrieveUnspecified = 0,
    WdfRetrievePresentChildren = 1,
    WdfRetrieveMissingChildren = 2,
    WdfRetrievePendingChildren = 4,
    WdfRetrieveAddedChildren = 5,
    WdfRetrieveAllChildren = 7
};

typedef enum _WDF_SPECIAL_FILE_TYPE {
    WdfSpecialFileUndefined = 0,
    WdfSpecialFilePaging = 1,
    WdfSpecialFileHibernation = 2,
    WdfSpecialFileDump = 3,
    WdfSpecialFileBoot = 4,
    WdfSpecialFileMax = 5
};

typedef enum _WDF_STATE_NOTIFICATION_TYPE {
    StateNotificationInvalid = 0,
    StateNotificationEnterState = 1,
    StateNotificationPostProcessState = 2,
    StateNotificationLeaveState = 4,
    StateNotificationAllStates = 7
};

typedef enum _WDF_SYNCHRONIZATION_SCOPE {
    WdfSynchronizationScopeInvalid = 0,
    WdfSynchronizationScopeInheritFromParent = 1,
    WdfSynchronizationScopeDevice = 2,
    WdfSynchronizationScopeQueue = 3,
    WdfSynchronizationScopeNone = 4
};

typedef enum _WDF_TASK_SEND_OPTIONS_FLAGS {
    WDF_TASK_SEND_OPTION_TIMEOUT = 1,
    WDF_TASK_SEND_OPTION_SYNCHRONOUS = 2
};

typedef enum _WDF_TRI_STATE {
    WdfFalse = 0,
    WdfTrue = 1,
    WdfUseDefault = 2
};

typedef enum _WDF_WMI_PROVIDER_CONTROL {
    WdfWmiControlInvalid = 0,
    WdfWmiEventControl = 1,
    WdfWmiInstanceControl = 2
};

typedef enum _WDF_WMI_PROVIDER_FLAGS {
    WdfWmiProviderEventOnly = 1,
    WdfWmiProviderExpensive = 2,
    WdfWmiProviderTracing = 4,
    WdfWmiProviderValidFlags = 7
};

typedef enum _WHEA_CPU_VENDOR {
    WheaCpuVendorOther = 0,
    WheaCpuVendorIntel = 1,
    WheaCpuVendorAmd = 2
};

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA = 1,
    WheaDataFormatMemory = 2,
    WheaDataFormatPCIExpress = 3,
    WheaDataFormatNMIPort = 4,
    WheaDataFormatPCIXBus = 5,
    WheaDataFormatPCIXDevice = 6,
    WheaDataFormatGeneric = 7,
    WheaDataFormatMax = 8
};

typedef enum _WHEA_ERROR_SEVERITY {
    WheaErrSevRecoverable = 0,
    WheaErrSevFatal = 1,
    WheaErrSevCorrected = 2,
    WheaErrSevInformational = 3
};

typedef enum _WHEA_ERROR_SOURCE_STATE {
    WheaErrSrcStateStopped = 1,
    WheaErrSrcStateStarted = 2
};

typedef enum _WHEA_ERROR_SOURCE_TYPE {
    WheaErrSrcTypeMCE = 0,
    WheaErrSrcTypeCMC = 1,
    WheaErrSrcTypeCPE = 2,
    WheaErrSrcTypeNMI = 3,
    WheaErrSrcTypePCIe = 4,
    WheaErrSrcTypeGeneric = 5,
    WheaErrSrcTypeINIT = 6,
    WheaErrSrcTypeBOOT = 7,
    WheaErrSrcTypeSCIGeneric = 8,
    WheaErrSrcTypeIPFMCA = 9,
    WheaErrSrcTypeIPFCMC = 10,
    WheaErrSrcTypeIPFCPE = 11,
    WheaErrSrcTypeGenericV2 = 12,
    WheaErrSrcTypeSCIGenericV2 = 13,
    WheaErrSrcTypeMax = 14
};

typedef enum _WHEA_ERROR_TYPE {
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory = 1,
    WheaErrTypePCIExpress = 2,
    WheaErrTypeNMI = 3,
    WheaErrTypePCIXBus = 4,
    WheaErrTypePCIXDevice = 5,
    WheaErrTypeGeneric = 6
};

typedef enum _WHEA_EVENT_LOG_ENTRY_ID {
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
    WheaEventLogEntryIdWheaInit = -2147483646,
    WheaEventLogEntryIdMax = -2147483645
};

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE {
    WheaEventLogEntryTypeInformational = 0,
    WheaEventLogEntryTypeWarning = 1,
    WheaEventLogEntryTypeError = 2
};

typedef enum _WHEA_PCIEXPRESS_DEVICE_TYPE {
    WheaPciExpressEndpoint = 0,
    WheaPciExpressLegacyEndpoint = 1,
    WheaPciExpressRootPort = 4,
    WheaPciExpressUpstreamSwitchPort = 5,
    WheaPciExpressDownstreamSwitchPort = 6,
    WheaPciExpressToPciXBridge = 7,
    WheaPciXToExpressBridge = 8,
    WheaPciExpressRootComplexIntegratedEndpoint = 9,
    WheaPciExpressRootComplexEventCollector = 10
};

typedef enum _WHEA_RAW_DATA_FORMAT {
    WheaRawDataFormatIPFSalRecord = 0,
    WheaRawDataFormatIA32MCA = 1,
    WheaRawDataFormatIntel64MCA = 2,
    WheaRawDataFormatAMD64MCA = 3,
    WheaRawDataFormatMemory = 4,
    WheaRawDataFormatPCIExpress = 5,
    WheaRawDataFormatNMIPort = 6,
    WheaRawDataFormatPCIXBus = 7,
    WheaRawDataFormatPCIXDevice = 8,
    WheaRawDataFormatGeneric = 9,
    WheaRawDataFormatMax = 10
};

typedef enum _WIN32K_INPUT_MODE {
    PowerInputEnabled = 0,
    PowerInputSuppressed = 1,
    PowerInputFiltered = 2
};

typedef enum _WIN32_CALLOUTS_OPERATION {
    Win32ProcessCallout = 0,
    Win32ThreadCallout = 1,
    Win32GlobalAtomTableCallout = 2,
    Win32PowerEventCallout = 3,
    Win32PowerStateCallout = 4,
    Win32PowerInfoCallout = 5,
    Win32JobCallout = 6,
    Win32BatchFlushCallout = 7,
    Win32DesktopOpenCallout = 8,
    Win32DesktopOkToCloseCallout = 9,
    Win32DesktopCloseCallout = 10,
    Win32DesktopDeleteCallout = 11,
    Win32WindowStationOkToCloseCallout = 12,
    Win32WindowStationCloseCallout = 13,
    Win32WindowStationDeleteCallout = 14,
    Win32WindowStationParseCallout = 15,
    Win32WindowStationOpenCallout = 16,
    Win32LicensingCallout = 17,
    Win32CompositionObjectOpenCallout = 18,
    Win32CompositionObjectOkToCloseCallout = 19,
    Win32CompositionObjectCloseCallout = 20,
    Win32CompositionObjectDeleteCallout = 21,
    Win32ProcessFreezeCallout = 22,
    Win32ProcessThawCallout = 23,
    Win32JobGetInterferenceCountsCallout = 24,
    Win32GetGpuStatisticsCallout = 25,
    Win32SubsystemProcessQueryCallout = 26,
    Win32RawInputManagerObjectOpenCallout = 27,
    Win32RawInputManagerObjectOkToCloseCallout = 28,
    Win32RawInputManagerObjectCloseCallout = 29,
    Win32RawInputManagerObjectDeleteCallout = 30,
    Win32WakeRitForShutdownCallout = 31,
    Win32WerStartCallout = 32,
    Win32CoreMessagingObjectOpenCallout = 33,
    Win32CoreMessagingObjectOkToCloseCallout = 34,
    Win32CoreMessagingObjectCloseCallout = 35,
    Win32CoreMessagingObjectDeleteCallout = 36,
    Win32ProcessTimerDelayCallout = 37,
    Win32GetProcessTimerStatisticsCallout = 38,
    Win32CalloutsMax = 39
};

typedef enum _WIN32_POWERINFO_TYPE {
    PowerInfo_PolicyChange = 0,
    PowerInfo_UserPresent = 1,
    PowerInfo_DisplayRequired = 2,
    PowerInfo_Monitor = 3,
    PowerInfo_Brightness = 4,
    PowerInfo_CsState = 5,
    PowerInfo_SessionControl = 6,
    PowerInfo_BuiltinPanelState = 7,
    PowerInfo_SessionEngagement = 8,
    PowerInfo_Max = 9
};

typedef enum _WNF_DATA_SCOPE {
    WnfDataScopeSystem = 0,
    WnfDataScopeSession = 1,
    WnfDataScopeUser = 2,
    WnfDataScopeProcess = 3,
    WnfDataScopeMachine = 4
};

typedef enum _WNF_STATE_NAME_INFORMATION {
    WnfInfoStateNameExist = 0,
    WnfInfoSubscribersPresent = 1,
    WnfInfoIsQuiescent = 2
};

typedef enum _WNF_STATE_NAME_LIFETIME {
    WnfWellKnownStateName = 0,
    WnfPermanentStateName = 1,
    WnfPersistentStateName = 2,
    WnfTemporaryStateName = 3
};

typedef enum _WORKERFACTORYINFOCLASS {
    WorkerFactoryTimeout = 0,
    WorkerFactoryRetryTimeout = 1,
    WorkerFactoryIdleTimeout = 2,
    WorkerFactoryBindingCount = 3,
    WorkerFactoryThreadMinimum = 4,
    WorkerFactoryThreadMaximum = 5,
    WorkerFactoryPaused = 6,
    WorkerFactoryBasicInformation = 7,
    WorkerFactoryAdjustThreadGoal = 8,
    WorkerFactoryCallbackType = 9,
    WorkerFactoryStackInformation = 10,
    WorkerFactoryThreadBasePriority = 11,
    WorkerFactoryTimeoutWaiters = 12,
    WorkerFactoryFlags = 13,
    WorkerFactoryThreadSoftMaximum = 14,
    MaxWorkerFactoryInfoClass = 15
};

typedef enum _WORKER_FACTORY_CALLBACK_CLASS {
    WorkerFactoryCallbackNormal = 0,
    WorkerFactoryCallbackLongRunning = 1,
    WorkerFactoryCallbackIndependent = 2,
    WorkerFactoryCallbackDetectedUnrecoverableError = 3
};

typedef enum _WORK_QUEUE_TYPE {
    CriticalWorkQueue = 0,
    DelayedWorkQueue = 1,
    HyperCriticalWorkQueue = 2,
    NormalWorkQueue = 3,
    BackgroundWorkQueue = 4,
    RealTimeWorkQueue = 5,
    SuperCriticalWorkQueue = 6,
    MaximumWorkQueue = 7,
    CustomPriorityWorkQueue = 32
};

typedef enum _WPP_FLAG_LEN_ENUM {
    WPP_FLAG_LEN = 1
};

typedef enum _WPP_FLAG_LEN_ENUM_MAX {
    WPP_MAX_FLAG_LEN_CHECK = 1
};

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite = 0,
    WppTraceWin2K = 1,
    WppTraceWinXP = 2,
    WppTraceTraceLH = 3,
    WppTraceServer08 = 4,
    WppTraceMaxSuite = 5
};

typedef enum _WSA_COMPATIBILITY_BEHAVIOR_ID {
    WsaBehaviorAll = 0,
    WsaBehaviorReceiveBuffering = 1,
    WsaBehaviorAutoTuning = 2
};

typedef enum __vc_attributes::aggregatableAttribute::type_e {
    never = 0,
    allowed = 1,
    always = 2
};

typedef enum __vc_attributes::event_receiverAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::event_sourceAttribute::optimize_e {
    speed = 0,
    size = 1
};

typedef enum __vc_attributes::event_sourceAttribute::type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum __vc_attributes::helper_attributes::usageAttribute::usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

typedef enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e {
    eBoolean = 0,
    eInteger = 1,
    eFloat = 2,
    eDouble = 3
};

typedef enum __vc_attributes::moduleAttribute::type_e {
    dll = 1,
    exe = 2,
    service = 3,
    unspecified = 4,
    EXE = 2,
    SERVICE = 3
};

typedef enum __vc_attributes::pointer_defaultAttribute::type_e {
    ptr = 0,
    ref = 1,
    unique = 2
};

typedef enum __vc_attributes::threadingAttribute::threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum optimize_e {
    speed = 0,
    size = 1
};

typedef enum threading_e {
    apartment = 1,
    single = 2,
    free = 3,
    neutral = 4,
    both = 5
};

typedef enum type_e {
    native = 0,
    com = 1,
    managed = 2
};

typedef enum usage_e {
    eAnyUsage = 0,
    eCoClassUsage = 1,
    eCOMInterfaceUsage = 2,
    eInterfaceUsage = 6,
    eMemberUsage = 8,
    eMethodUsage = 16,
    eInterfaceMethodUsage = 32,
    eInterfaceMemberUsage = 64,
    eCoClassMemberUsage = 128,
    eCoClassMethodUsage = 256,
    eGlobalMethodUsage = 768,
    eGlobalDataUsage = 1024,
    eClassUsage = 2048,
    eInterfaceParameterUsage = 4096,
    eMethodParameterUsage = 12288,
    eIDLModuleUsage = 16384,
    eAnonymousUsage = 0x8000,
    eTypedefUsage = 0x10000,
    eUnionUsage = 0x20000,
    eEnumUsage = 0x40000,
    eDefineTagUsage = 0x80000,
    eStructUsage = 0x100000,
    eLocalUsage = 0x200000,
    ePropertyUsage = 0x400000,
    eEventUsage = 0x800000,
    eTemplateUsage = 0x1000000,
    eModuleUsage = 0x1000000,
    eIllegalUsage = 0x2000000,
    eAsynchronousUsage = 0x4000000,
    eAnyIDLUsage = 0x3f7fff
};

$xdatasym;
AdapterDispatch;
CFxObject<NETADAPTER__ * __ptr64,NxAdapter,&GetNxAdapterFromHandle,0>::`vftable';
CFxObject<NETCONFIGURATION__ * __ptr64,NxConfiguration,&GetNxConfigurationFromHandle,0>::`vftable';
CFxObject<NETPACKETQUEUE__ * __ptr64,NxRxQueue,&GetRxQueueFromHandle,1>::`vftable';
CFxObject<NETPACKETQUEUE__ * __ptr64,NxTxQueue,&GetTxQueueFromHandle,1>::`vftable';
CFxObject<NETPOWERSETTINGS__ * __ptr64,NxWake,&GetNxWakeFromHandle,0>::`vftable';
CFxObject<NETREQUESTQUEUE__ * __ptr64,NxRequestQueue,&GetNxRequestQueueFromHandle,0>::`vftable';
CFxObject<NETREQUEST__ * __ptr64,NxRequest,&GetNxRequestFromHandle,0>::`vftable';
CFxObject<WDFDEVICE__ * __ptr64,NxDevice,&GetNxDeviceFromHandle,0>::`vftable';
CFxObject<WDFDRIVER__ * __ptr64,NxDriver,&GetNxDriverFromWdfDriver,0>::`vftable';
ClassLibraryDevice;
ControlDispatch;
CxDispatch;
DEVPKEY_Device_Address;
DeviceInterface_RefString;
DeviceInterface_RefString_buffer;
GUID_DEVICE_INTERFACE_ARRIVAL;
GUID_DEVINTERFACE_NETCX;
GUID_POWER_DEVICE_ENABLE;
GUID_POWER_DEVICE_WAKE_ENABLE;
IoFileObjectType;
NetAdapterCxDriverHandle;
NetVersion;
NxAdapter::`vftable';
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathHaltDestroying;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathPauseStopping;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathPaused;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathPausedCreating;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathPausedDestroying;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathPausedStarting;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRemovePaused;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRestartDestroying;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRestartRemoving;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRestartRemoving2;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRestartStopping;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRestartedCreating;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRestartedStarting;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathRunning;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathStoppedPaused;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_datapathStoppingPauseComplete;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_halted;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_halting;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_initialized;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_pauseSurpriseRemoving;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_paused;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_restarted;
NxAdapterStateMachine<NxAdapter>::ExternalTransitions::c_surpriseRemovePaused;
NxAdapterStateMachine<NxAdapter>::PopTransitions::c_halted;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_adapterDatapathStopping;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathHaltDestroying;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathPauseStopping;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathPaused;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathPausedCreating;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathPausedDestroying;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathPausedStarting;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRemovePaused;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRestartDestroying;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRestartRemoving;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRestartRemoving2;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRestartStopping;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRestartedCreating;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRestartedStarting;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathRunning;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathStoppedPaused;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_datapathStoppingPauseComplete;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_halted;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_halting;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_initialized;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_pauseSurpriseRemoving;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_paused;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_restarted;
NxAdapterStateMachine<NxAdapter>::SlotArrays::c_surpriseRemovePaused;
NxAdapterStateMachine<NxAdapter>::c_eventTable;
NxAdapterStateMachine<NxAdapter>::c_machineTable;
NxAdapterStateMachine<NxAdapter>::c_specification;
NxAdapterStateMachine<NxAdapter>::c_stateTable;
NxCommonBufferMemoryChunk::`vftable';
NxConfiguration::`vftable';
NxDevice::`vftable';
NxDeviceStateMachine<NxDevice>::DeferredEvents::c_rebalancingPrepareForStart;
NxDeviceStateMachine<NxDevice>::DeferredEvents::c_startedDx;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_cxPrepareHardwareFailed;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_deviceAddFailedReportToNdis;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_deviceReleasingWaitForNdisHalt;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_initialized;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_initializedPrePrepareHardware;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_initializedWaitForStart;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_rebalancingPrePrepareHardware;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_rebalancingPrepareForStart;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_rebalancingReinitializeSelfManagedIo;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_released;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasedPrepareRebalance;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasedReportToNdis;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasedSelfManagedIoCleanup;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingAreAllAdaptersHalted;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingIsSurpriseRemoved;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingReportPreReleaseToNdis;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingReportSurpriseRemoveToNdis;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingSurpriseRemovedAreAllAdaptersHalted;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingSurpriseRemovedReportPreReleaseToNdis;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingSurpriseRemovedWaitForNdisHalt;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingSuspendIo;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingWaitClientRelease;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_releasingWaitForReleaseHardware;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startedD0;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startedDx;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startedEnteringHighPower;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startedEnteringLowPower;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startingCheckPowerPolicyOwnership;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startingCompleteStart;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startingD0;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_startingInitializeSelfManagedIo;
NxDeviceStateMachine<NxDevice>::ExternalTransitions::c_waitForCleanup;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_deviceReleasingWaitForNdisHalt;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_initialized;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_initializedWaitForStart;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_rebalancingPrepareForStart;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_released;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_releasingSurpriseRemovedWaitForNdisHalt;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_releasingWaitClientRelease;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_startedD0;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_startedDx;
NxDeviceStateMachine<NxDevice>::InternalTransitions::c_startingD0;
NxDeviceStateMachine<NxDevice>::PopTransitions::c_removed;
NxDeviceStateMachine<NxDevice>::PurgeEvents::c_releasedPrepareRebalance;
NxDeviceStateMachine<NxDevice>::PurgeEvents::c_releasingWaitClientRelease;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_cxPrepareHardwareFailed;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_deviceAddFailedReportToNdis;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_deviceReleasingWaitForNdisHalt;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_initialized;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_initializedPrePrepareHardware;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_initializedWaitForStart;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_rebalancingPrePrepareHardware;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_rebalancingPrepareForStart;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_rebalancingReinitializeSelfManagedIo;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_released;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasedPrepareRebalance;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasedReportToNdis;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasedSelfManagedIoCleanup;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingAreAllAdaptersHalted;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingIsSurpriseRemoved;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingReportPreReleaseToNdis;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingReportSurpriseRemoveToNdis;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingSurpriseRemovedAreAllAdaptersHalted;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingSurpriseRemovedReportPreReleaseToNdis;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingSurpriseRemovedWaitForNdisHalt;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingSuspendIo;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingWaitClientRelease;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_releasingWaitForReleaseHardware;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_removed;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startedD0;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startedDx;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startedEnteringHighPower;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startedEnteringLowPower;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startingCheckPowerPolicyOwnership;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startingCompleteStart;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startingD0;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_startingInitializeSelfManagedIo;
NxDeviceStateMachine<NxDevice>::SlotArrays::c_waitForCleanup;
NxDeviceStateMachine<NxDevice>::c_eventTable;
NxDeviceStateMachine<NxDevice>::c_machineTable;
NxDeviceStateMachine<NxDevice>::c_specification;
NxDeviceStateMachine<NxDevice>::c_stateTable;
NxDmaAllocator::`vftable';
NxDriver::`vftable';
NxNblDatapath::`vftable';
NxNblRx::`vftable';
NxNonPagePoolAllocator::`vftable';
NxOffload<_NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES>::`vftable';
NxOffload<_NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES>::`vftable';
NxOffloadFacade::`vftable';
NxPoolMemoryChunk::`vftable';
NxQueue::`vftable';
NxRequest::`vftable';
NxRequestQueue::`vftable';
NxRxQueue::`vftable';
NxRxXlat::`vftable';
NxTranslationApp::`vftable';
NxTranslationAppFactory::`vftable';
NxTxQueue::`vftable';
NxTxXlat::`vftable';
NxWake::`vftable';
PoolDispatch;
QueueDispatch;
SDDL_DEVOBJ_KERNEL_ONLY;
SDDL_DEVOBJ_KERNEL_ONLY_buffer;
SDDL_DEVOBJ_SYS_ALL_ADM_RWX_WORLD_RW_RES_R;
SDDL_DEVOBJ_SYS_ALL_ADM_RWX_WORLD_RW_RES_R_buffer;
WPPTraceSuite;
WPP_019a73c24aa135dcb7a65fcd5643dbdb_Traceguids;
WPP_0ef1ec789d9d37699390bc7fd6f3e2ed_Traceguids;
WPP_0f1334a84b6e34293569287324f95bb1_Traceguids;
WPP_136617c905ed34cd0c78da0a5b068082_Traceguids;
WPP_18629f844ace353bf689a68033b48f5c_Traceguids;
WPP_1920642104f33e0051e3ebf8c6dacc2a_Traceguids;
WPP_2ae8c2af7de63dcdf637c187903e73d9_Traceguids;
WPP_4073b0b809d3360ecac58401f7187f10_Traceguids;
WPP_4230f07065af3a308bd9de9c6801a438_Traceguids;
WPP_43c74e460f7c371c3af22afd6ae8d0af_Traceguids;
WPP_446f2fd4654e31f78e683aee7c2bfad7_Traceguids;
WPP_4d5b6d42542434cb0b4f717409a040f2_Traceguids;
WPP_71d470b7d6e53b5e1984d3a31d6655db_Traceguids;
WPP_8756e64f166d3c70f5a87a9b0bf63b62_Traceguids;
WPP_93f99dc553003560e56d118ef96a007b_Traceguids;
WPP_9678598d00c43a1684f61995e497eaf7_Traceguids;
WPP_9d228ad153183220b1426c163067064d_Traceguids;
WPP_GLOBAL_Control;
WPP_MAIN_CB;
WPP_ThisDir_CTLGUID_NxTraceGuid;
WPP_ac348fa2407c32e90a02125460bd517c_Traceguids;
WPP_b03b31f1f89f375ec976657acb22169b_Traceguids;
WPP_b2b8e4560c8a3fbf60d01549015ce933_Traceguids;
WPP_b56312c1c1353fbe74aa9f6b677da8ee_Traceguids;
WPP_b62e168ba6ba31126d1fd1c8adf189b3_Traceguids;
WPP_b79e0eec69e533c1db0efbbcd527a6b2_Traceguids;
WPP_b9750fb527f539a2bd42f4518e119c11_Traceguids;
WPP_cd9540a507343e8bfb5853295e5b8190_Traceguids;
WPP_e86a3aae4dff3efcbddccc03883905d1_Traceguids;
WPP_e9262a5f0ddf3d90be0a10b83ce260e8_Traceguids;
WPP_f3fc255d6c283f55bd6c9485e45ef1b7_Traceguids;
WPP_f82e75f8434e30e16b0ee0d9bff77684_Traceguids;
WPP_f9c3e27b84f9385b5eae76c5ab5afec7_Traceguids;
WdfBindInfo;
WdfClassLibraryInfo;
WdfClientVersionHigherThanFramework;
WdfDriverGlobals;
WdfDriverStubDisplacedDriverUnload;
WdfDriverStubRegistryPath;
WdfDriverStubRegistryPathBuffer;
WdfFunctionCount;
WdfFunctions_01025;
WdfMinimumVersionRequired;
WdfStructureCount;
WdfStructures;
_IMPORT_DESCRIPTOR_NDIS;
_IMPORT_DESCRIPTOR_NETIO;
_IMPORT_DESCRIPTOR_WDFLDR;
_IMPORT_DESCRIPTOR_WppRecorder;
_IMPORT_DESCRIPTOR_ntoskrnl;
_NULL_IMPORT_DESCRIPTOR;
_Tlgg_hNetAdapterCxEtwProviderProv;
_Tlgg_hNetAdapterCxEtwProviderProv_Meta;
_Tlgg_hNetAdapterCxXlatProviderProv;
_Tlgg_hNetAdapterCxXlatProviderProv_Meta;
_TraceLoggingMetadata;
_TraceLoggingMetadataEnd;
_WDF_CxDriverContext_TYPE_INFO;
_WDF_NDIS_MINIPORT_BLOCK_TYPE_TYPE_INFO;
_WDF_NX_STOP_IDLE_WORKITEM_CONTEXT_TYPE_INFO;
_WDF_NxAdapter_TYPE_INFO;
_WDF_NxConfiguration_TYPE_INFO;
_WDF_NxDevice_TYPE_INFO;
_WDF_NxDriver_TYPE_INFO;
_WDF_NxRequestQueue_TYPE_INFO;
_WDF_NxRequest_TYPE_INFO;
_WDF_NxRxQueue_TYPE_INFO;
_WDF_NxTxQueue_TYPE_INFO;
_WDF_NxWake_TYPE_INFO;
__KMDF_CLASS_BIND_END;
__KMDF_CLASS_BIND_LAST_BOUND;
__KMDF_CLASS_BIND_START;
__KMDF_TYPE_INIT_END;
__KMDF_TYPE_INIT_START;
__PchSym_;
__dynamic_value_reloc_table;
__guard_check_icall_fptr;
__guard_dispatch_icall_fptr;
__guard_fids_table;
__guard_iat_table;
__security_cookie;
__security_cookie_complement;
_guard_dispatch_icall_nop;
_imp_DbgPrintEx;
_imp_EtwRegister;
_imp_EtwSetInformation;
_imp_EtwUnregister;
_imp_EtwWriteTransfer;
_imp_ExAcquireRundownProtectionEx;
_imp_ExAllocatePoolWithTag;
_imp_ExFreePool;
_imp_ExFreePoolWithTag;
_imp_ExInitializeRundownProtection;
_imp_ExReInitializeRundownProtection;
_imp_ExReleaseRundownProtectionEx;
_imp_ExWaitForRundownProtectionRelease;
_imp_GetIfEntry2Ex;
_imp_IoAcquireRemoveLockEx;
_imp_IoAllocateMdl;
_imp_IoAllocateWorkItem;
_imp_IoFreeMdl;
_imp_IoFreeWorkItem;
_imp_IoInitializeRemoveLockEx;
_imp_IoQueueWorkItem;
_imp_IoRegisterPlugPlayNotification;
_imp_IoReleaseRemoveLockAndWaitEx;
_imp_IoReleaseRemoveLockEx;
_imp_IoSetCompletionRoutineEx;
_imp_IoUnregisterPlugPlayNotificationEx;
_imp_IoWMIRegistrationControl;
_imp_IofCompleteRequest;
_imp_KdRefreshDebuggerNotPresent;
_imp_KeAcquireSpinLockRaiseToDpc;
_imp_KeCancelTimer;
_imp_KeFlushIoBuffers;
_imp_KeFlushQueuedDpcs;
_imp_KeGetCurrentProcessorNumberEx;
_imp_KeGetProcessorNumberFromIndex;
_imp_KeInitializeDpc;
_imp_KeInitializeEvent;
_imp_KeInitializeSpinLock;
_imp_KeInitializeTimer;
_imp_KeLowerIrql;
_imp_KeQueryMaximumProcessorCountEx;
_imp_KeQueryTotalCycleTimeThread;
_imp_KeReleaseSpinLock;
_imp_KeSetBasePriorityThread;
_imp_KeSetEvent;
_imp_KeSetSystemGroupAffinityThread;
_imp_KeSetTimerEx;
_imp_KeWaitForSingleObject;
_imp_KfRaiseIrql;
_imp_MmAllocateMappingAddress;
_imp_MmBuildMdlForNonPagedPool;
_imp_MmFreeMappingAddress;
_imp_MmGetPhysicalAddress;
_imp_MmGetSystemRoutineAddress;
_imp_MmIsDriverVerifyingByAddress;
_imp_MmMapLockedPagesSpecifyCache;
_imp_MmMapLockedPagesWithReservedMapping;
_imp_MmSizeOfMdl;
_imp_MmUnmapLockedPages;
_imp_MmUnmapReservedMapping;
_imp_NdisAdvanceNetBufferDataStart;
_imp_NdisAllocateNetBufferAndNetBufferList;
_imp_NdisAllocateNetBufferListPool;
_imp_NdisCloseConfiguration;
_imp_NdisConvertNdisStatusToNtStatus;
_imp_NdisConvertNtStatusToNdisStatus;
_imp_NdisFreeNetBufferList;
_imp_NdisFreeNetBufferListPool;
_imp_NdisMDeregisterMiniportDriver;
_imp_NdisMIndicateReceiveNetBufferLists;
_imp_NdisMIndicateStatusEx;
_imp_NdisMOidRequestComplete;
_imp_NdisMPauseComplete;
_imp_NdisMRestartComplete;
_imp_NdisMSendNetBufferListsComplete;
_imp_NdisMSetMiniportAttributes;
_imp_NdisOpenConfigurationEx;
_imp_NdisOpenConfigurationKeyByName;
_imp_NdisReadConfiguration;
_imp_NdisReadNetworkAddress;
_imp_NdisRetreatNetBufferDataStart;
_imp_NdisWdfAsyncPowerReferenceCompleteNotification;
_imp_NdisWdfCloseIrpHandler;
_imp_NdisWdfCreateIrpHandler;
_imp_NdisWdfDeregisterCx;
_imp_NdisWdfDeviceControlIrpHandler;
_imp_NdisWdfDeviceInternalControlIrpHandler;
_imp_NdisWdfDeviceWmiHandler;
_imp_NdisWdfGenerateFdoNameIndex;
_imp_NdisWdfGetAdapterContextFromAdapterHandle;
_imp_NdisWdfMiniportDataPathPause;
_imp_NdisWdfMiniportDataPathStart;
_imp_NdisWdfMiniportStarted;
_imp_NdisWdfPnPAddDevice;
_imp_NdisWdfPnpPowerEventHandler;
_imp_NdisWdfReadConfiguration;
_imp_NdisWdfRegisterCx;
_imp_NdisWdfRegisterMiniportDriver;
_imp_NdisWriteConfiguration;
_imp_NetPacketComputeSizeAndUpdateExtensions;
_imp_NetPacketGetSize;
_imp_NetPacketReuseMany;
_imp_NetPacketReuseOne;
_imp_ObReferenceObjectByHandle;
_imp_ObfDereferenceObject;
_imp_PsCreateSystemThread;
_imp_PsGetThreadId;
_imp_RtlAppendUnicodeStringToString;
_imp_RtlClearAllBitsEx;
_imp_RtlClearBitEx;
_imp_RtlCopyUnicodeString;
_imp_RtlEqualUnicodeString;
_imp_RtlInitUnicodeString;
_imp_RtlInitializeBitMapEx;
_imp_RtlIntegerToUnicodeString;
_imp_RtlSetBitEx;
_imp_RtlUnicodeStringToInteger;
_imp_WdfRegisterClassLibrary;
_imp_WdfVersionBind;
_imp_WdfVersionBindClass;
_imp_WdfVersionUnbind;
_imp_WdfVersionUnbindClass;
_imp_WppAutoLogStart;
_imp_WppAutoLogStop;
_imp_WppAutoLogTrace;
_imp_ZwClose;
_imp_ZwOpenFile;
_imp_ZwOpenKey;
_imp_ZwQuerySystemInformation;
_imp_ZwQueryValueKey;
_imp_ZwSetInformationThread;
_imp__vsnprintf;
_imp__vsnwprintf;
_imp_imp_WppRecorderLogCreate;
_imp_imp_WppRecorderLogDelete;
_imp_imp_WppRecorderReplay;
_imp_vswprintf_s;
_imp_wcscmp;
_imp_wcsstr;
_load_config_used;
g_NetAdapterCxTriageBlock;
g_NetBufferOffset;
g_RegistrationLock;
g_TotalPhysicalBytes;
g_validConfigurations;
ndisFdoDeviceStr;
pfnEtwRegisterClassicProvider;
pfnEtwUnregister;
pfnWppGetVersion;
pfnWppQueryTraceInformation;
pfnWppTraceMessage;
NDIS_NULL_THUNK_DATA;
NETIO_NULL_THUNK_DATA;
WDFLDR_NULL_THUNK_DATA;
WppRecorder_NULL_THUNK_DATA;
ntoskrnl_NULL_THUNK_DATA;

<lambda_9395206af589ac42132775cb7e45a067>::<lambda_invoker_cdecl>();
<lambda_b930e59741593affc3af9db3beafbf2a>::<lambda_invoker_cdecl>();
<lambda_c276094d149607b901f7fae525da7e78>::<lambda_invoker_cdecl>();
AllocateQueueId();
AssignFdoName();
AsyncResult::Wait();
CFxObject<NETADAPTER__ * __ptr64,NxAdapter,&GetNxAdapterFromHandle,0>::OnCleanup();
CFxObject<NETADAPTER__ * __ptr64,NxAdapter,&GetNxAdapterFromHandle,0>::_OnDestroy();
CFxObject<NETADAPTER__ * __ptr64,NxAdapter,&GetNxAdapterFromHandle,0>::`scalar deleting destructor'();
CFxObject<NETCONFIGURATION__ * __ptr64,NxConfiguration,&GetNxConfigurationFromHandle,0>::OnCleanup();
CFxObject<NETCONFIGURATION__ * __ptr64,NxConfiguration,&GetNxConfigurationFromHandle,0>::_OnDestroy();
CFxObject<NETCONFIGURATION__ * __ptr64,NxConfiguration,&GetNxConfigurationFromHandle,0>::`scalar deleting destructor'();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxRxQueue,&GetRxQueueFromHandle,1>::OnCleanup();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxRxQueue,&GetRxQueueFromHandle,1>::_OnCleanup();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxRxQueue,&GetRxQueueFromHandle,1>::_OnDestroy();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxRxQueue,&GetRxQueueFromHandle,1>::`scalar deleting destructor'();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxTxQueue,&GetTxQueueFromHandle,1>::OnCleanup();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxTxQueue,&GetTxQueueFromHandle,1>::_OnCleanup();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxTxQueue,&GetTxQueueFromHandle,1>::_OnDestroy();
CFxObject<NETPACKETQUEUE__ * __ptr64,NxTxQueue,&GetTxQueueFromHandle,1>::`scalar deleting destructor'();
CFxObject<NETPOWERSETTINGS__ * __ptr64,NxWake,&GetNxWakeFromHandle,0>::OnCleanup();
CFxObject<NETPOWERSETTINGS__ * __ptr64,NxWake,&GetNxWakeFromHandle,0>::_OnDestroy();
CFxObject<NETPOWERSETTINGS__ * __ptr64,NxWake,&GetNxWakeFromHandle,0>::`scalar deleting destructor'();
CFxObject<NETREQUESTQUEUE__ * __ptr64,NxRequestQueue,&GetNxRequestQueueFromHandle,0>::OnCleanup();
CFxObject<NETREQUESTQUEUE__ * __ptr64,NxRequestQueue,&GetNxRequestQueueFromHandle,0>::_OnDestroy();
CFxObject<NETREQUESTQUEUE__ * __ptr64,NxRequestQueue,&GetNxRequestQueueFromHandle,0>::`scalar deleting destructor'();
CFxObject<NETREQUEST__ * __ptr64,NxRequest,&GetNxRequestFromHandle,0>::OnCleanup();
CFxObject<NETREQUEST__ * __ptr64,NxRequest,&GetNxRequestFromHandle,0>::_OnDestroy();
CFxObject<NETREQUEST__ * __ptr64,NxRequest,&GetNxRequestFromHandle,0>::`scalar deleting destructor'();
CFxObject<WDFDEVICE__ * __ptr64,NxDevice,&GetNxDeviceFromHandle,0>::OnCleanup();
CFxObject<WDFDEVICE__ * __ptr64,NxDevice,&GetNxDeviceFromHandle,0>::_OnDestroy();
CFxObject<WDFDEVICE__ * __ptr64,NxDevice,&GetNxDeviceFromHandle,0>::`scalar deleting destructor'();
CFxObject<WDFDRIVER__ * __ptr64,NxDriver,&GetNxDriverFromWdfDriver,0>::OnCleanup();
CFxObject<WDFDRIVER__ * __ptr64,NxDriver,&GetNxDriverFromWdfDriver,0>::_OnDestroy();
CFxObject<WDFDRIVER__ * __ptr64,NxDriver,&GetNxDriverFromWdfDriver,0>::`scalar deleting destructor'();
CountNumberOfPages();
CreateControlDevice();
CxDriverContext::Destroy();
CxDriverContext::Init();
DefaultCreateRxQueue();
DefaultCreateTxQueue();
DefaultPacketQueueSetNotificationEnabled();
DefaultRxPacketQueueAdvance();
DefaultRxPacketQueueCancel();
DefaultTxPacketQueueAdvance();
DefaultTxPacketQueueCancel();
DeviceInterfaceChangeNotification();
DriverConfigurationInitialize();
DriverEntry();
EvtCxDevicePostReleaseHardware();
EvtCxDevicePostSelfManagedIoCleanup();
EvtCxDevicePostSelfManagedIoInit();
EvtCxDevicePostSelfManagedIoRestart();
EvtCxDevicePrePrepareHardware();
EvtCxDevicePrePrepareHardwareFailedCleanup();
EvtCxDevicePreReleaseHardware();
EvtCxDevicePreSelfManagedIoSuspend();
EvtCxDevicePreSurpriseRemoval();
EvtDriverUnload();
EvtWdmIrpPreprocessRoutine();
EvtWdmPnpPowerIrpPreprocessRoutine();
EvtWdmWmiIrpPreprocessRoutine();
FxDriverEntry();
FxDriverEntryWorker();
FxStubBindClasses();
FxStubDriverUnload();
FxStubDriverUnloadCommon();
GetAttributesContextSize();
KRegKey::Open();
KRegKey::QueryValueUlong();
MakeSizedPoolPtr<unsigned char>();
MakeSizedPoolPtr<wchar_t>();
NetAdapterCxBindClient();
NetAdapterCxDeinitialize();
NetAdapterCxInitialize();
NetAdapterCxUnbindClient();
NetAdapterReceiveThread();
NetAdapterTransmitThread();
NetClientAdapterCreateDatapath();
NetClientAdapterCreateRxQueue();
NetClientAdapterCreateTxQueue();
NetClientAdapterDestroyDatapath();
NetClientAdapterDestroyQueue();
NetClientAdapterGetChecksumDefaultCapabilities();
NetClientAdapterGetChecksumHardwareCapabilities();
NetClientAdapterGetDatapathCapabilities();
NetClientAdapterGetLsoDefaultCapabilities();
NetClientAdapterGetLsoHardwareCapabilities();
NetClientAdapterGetProperties();
NetClientAdapterGetReceiveScalingCapabilities();
NetClientAdapterNdisOidRequestHandler();
NetClientAdapterOffloadInitialize();
NetClientAdapterQueryRegisteredPacketExtension();
NetClientAdapterReceiveScalingDisable();
NetClientAdapterReceiveScalingEnable();
NetClientAdapterReceiveScalingSetHashSecretKey();
NetClientAdapterReceiveScalingSetIndirectionEntries();
NetClientAdapterRegisterPacketExtension();
NetClientAdapterSetChecksumActiveCapabilities();
NetClientAdapterSetDeviceFailed();
NetClientAdapterSetLsoActiveCapabilities();
NetClientAdapterStartDatapath();
NetClientAdapterStopDatapath();
NetClientAllocateBuffers();
NetClientCreateBufferPool();
NetClientDestroyBufferPool();
NetClientFreeBuffers();
NetClientQueryDriverConfigurationBoolean();
NetClientQueryDriverConfigurationUlong();
NetClientQueueAdvance();
NetClientQueueCancel();
NetClientQueueGetDatapathDescriptor();
NetClientQueueGetPacketExtensionOffset();
NetClientQueueNotify();
NetClientQueueSetArmed();
NetClientQueueStart();
NetClientQueueStop();
NetClientReturnRxBuffer();
NxAdapter::AddNetClientPacketExtensionsToQueueCreationContext();
NxAdapter::ClearGeneralAttributes();
NxAdapter::CreateRxQueue();
NxAdapter::CreateTxQueue();
NxAdapter::DatapathCreate();
NxAdapter::DatapathDestroy();
NxAdapter::DatapathStart();
NxAdapter::DatapathStop();
NxAdapter::DispatchRequest();
NxAdapter::EvtLogTransition();
NxAdapter::FullStop();
NxAdapter::GetDatapathCapabilities();
NxAdapter::IndicateCurrentLinkLayerAddressToNdis();
NxAdapter::IndicateCurrentLinkStateToNdis();
NxAdapter::IndicateMtuSizeChangeToNdis();
NxAdapter::IndicatePowerCapabilitiesToNdis();
NxAdapter::Init();
NxAdapter::InitializeAdapterExtensions();
NxAdapter::InitializeDatapath();
NxAdapter::InitializePowerManagement();
NxAdapter::InitializeSelfManagedIO();
NxAdapter::NxAdapter();
NxAdapter::QueryAndGetNetPacketExtension();
NxAdapter::QueryAndGetNetPacketExtensionWithLock();
NxAdapter::RegisterPacketExtension();
NxAdapter::SetGeneralAttributes();
NxAdapter::StopPhase1();
NxAdapter::StopPhase2();
NxAdapter::SuspendSelfManagedIo();
NxAdapter::_Create();
NxAdapter::_EvtCleanup();
NxAdapter::_EvtNdisAllocateMiniportBlock();
NxAdapter::_EvtNdisAoAcDisengage();
NxAdapter::_EvtNdisAoAcEngage();
NxAdapter::_EvtNdisCancelDirectOidRequest();
NxAdapter::_EvtNdisCancelOidRequest();
NxAdapter::_EvtNdisCancelSend();
NxAdapter::_EvtNdisDevicePnpEventNotify();
NxAdapter::_EvtNdisDeviceStartComplete();
NxAdapter::_EvtNdisDirectOidRequest();
NxAdapter::_EvtNdisGetAssignedFdoName();
NxAdapter::_EvtNdisGetDeviceObject();
NxAdapter::_EvtNdisGetNextDeviceObject();
NxAdapter::_EvtNdisHaltEx();
NxAdapter::_EvtNdisInitializeEx();
NxAdapter::_EvtNdisMiniportCompleteAdd();
NxAdapter::_EvtNdisMiniportDeviceReset();
NxAdapter::_EvtNdisMiniportQueryDeviceResetSupport();
NxAdapter::_EvtNdisOidRequest();
NxAdapter::_EvtNdisPause();
NxAdapter::_EvtNdisPowerDereference();
NxAdapter::_EvtNdisPowerReference();
NxAdapter::_EvtNdisRestart();
NxAdapter::_EvtNdisReturnNetBufferLists();
NxAdapter::_EvtNdisSendNetBufferLists();
NxAdapter::_EvtNdisShutdownEx();
NxAdapter::_EvtNdisSynchronousOidRequestHandler();
NxAdapter::_EvtNdisUpdatePMParameters();
NxAdapter::_EvtNdisWdmDeviceGetNdisAdapterHandle();
NxAdapter::_EvtStopIdleWorkItem();
NxAdapter::`scalar deleting destructor'();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::AdapterDatapathStoppingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathHaltDestroyingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathPauseStoppingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathPausedCreatingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathPausedDestroyingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathPausedEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathPausedStartingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathRemovePausedEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathRestartDestroyingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathRestartRemovingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathRestartStoppingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathRestartedCreatingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathRestartedStartingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathRunningEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathStoppedPausedEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::DatapathStoppingPauseCompleteEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::HaltedEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::HaltingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::InitializedEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::PauseSurpriseRemovingEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::PausedEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::RestartedEntry();
NxAdapterStateMachine<NxAdapter>::EntryFuncs::SurpriseRemovePausedEntry();
NxAdapterStateMachine<NxAdapter>::EvtLogEventEnqueueThunk();
NxAdapterStateMachine<NxAdapter>::EvtLogMachineExceptionThunk();
NxAdapterStateMachine<NxAdapter>::EvtLogTransitionThunk();
NxAdapterStateMachine<NxAdapter>::EvtMachineDestroyedThunk();
NxBounceBufferPool::BounceNetBuffer();
NxBufferManager::AllocateMemoryChunks();
NxBufferManager::InitializeMemoryChunkAllocator();
NxBufferManager::NxBufferManager();
NxBufferPool::AddMemoryChunks();
NxBufferPool::FillBufferPool();
NxBufferPool::Initialize();
NxBufferPool::StitchMemoryChunks();
NxBufferPool::`scalar deleting destructor'();
NxCommonBufferMemoryChunk::GetLength();
NxCommonBufferMemoryChunk::GetLogicalAddress();
NxCommonBufferMemoryChunk::GetVirtualAddress();
NxCommonBufferMemoryChunk::`scalar deleting destructor'();
NxConfiguration::AddAttributes();
NxConfiguration::AssignBinary();
NxConfiguration::AssignMultiString();
NxConfiguration::Close();
NxConfiguration::GetRecorderLog();
NxConfiguration::Open();
NxConfiguration::OpenAsSubConfiguration();
NxConfiguration::QueryBinary();
NxConfiguration::QueryString();
NxConfiguration::QueryUlong();
NxConfiguration::ReadConfiguration();
NxConfiguration::_Create();
NxConfiguration::_EvtCleanup();
NxConfiguration::`scalar deleting destructor'();
NxContextBuffer::Initialize();
NxDevice::AdapterAdd();
NxDevice::DispatchDeviceReset();
NxDevice::EvtLogTransition();
NxDevice::GetDefaultNxAdapter();
NxDevice::Init();
NxDevice::NxDevice();
NxDevice::PowerDereference();
NxDevice::PowerReference();
NxDevice::PrepareHardware();
NxDevice::RefreshAdapterList();
NxDevice::ReleasingReportPreReleaseToNdis();
NxDevice::SuspendSelfManagedIo();
NxDevice::WdmCreateIrpPreProcess();
NxDevice::WdmIoIrpPreProcess();
NxDevice::WdmSystemControlIrpPreProcess();
NxDevice::_Create();
NxDevice::_EvtCleanup();
NxDevice::`scalar deleting destructor'();
NxDeviceStateMachine<NxDevice>::Actions::DeviceReleasingWaitForNdisHaltActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::InitializedActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::InitializedWaitForStartActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::RebalancingPrepareForStartActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::ReleasingSurpriseRemovedWaitForNdisHaltActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::ReleasingWaitClientReleaseActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::StartedD0ActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::StartedDxActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::Actions::StartingD0ActionOnRefreshAdapterList();
NxDeviceStateMachine<NxDevice>::EntryFuncs::CxPrepareHardwareFailedEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::DeviceAddFailedReportToNdisEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::InitializedPrePrepareHardwareEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::RebalancingPrePrepareHardwareEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::RebalancingReinitializeSelfManagedIoEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasedPrepareRebalanceEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasedReportToNdisEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasedSelfManagedIoCleanupEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasingAreAllAdaptersHaltedEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasingIsSurpriseRemovedEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasingReportPreReleaseToNdisEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasingReportSurpriseRemoveToNdisEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasingSurpriseRemovedAreAllAdaptersHaltedEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasingSurpriseRemovedReportPreReleaseToNdisEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::ReleasingSuspendIoEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::RemovedEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::StartedEnteringHighPowerEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::StartedEnteringLowPowerEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::StartingCheckPowerPolicyOwnershipEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::StartingCompleteStartEntry();
NxDeviceStateMachine<NxDevice>::EntryFuncs::StartingInitializeSelfManagedIoEntry();
NxDeviceStateMachine<NxDevice>::EvtLogEventEnqueueThunk();
NxDeviceStateMachine<NxDevice>::EvtLogMachineExceptionThunk();
NxDeviceStateMachine<NxDevice>::EvtLogTransitionThunk();
NxDeviceStateMachine<NxDevice>::EvtMachineDestroyedThunk();
NxDmaAdapter::Initialize();
NxDmaAllocator::AllocateMemoryChunk();
NxDriver::NxDriver();
NxDriver::Register();
NxDriver::_CreateIfNeeded();
NxDriver::_EvtNdisSetOptions();
NxDriver::_EvtWdfCleanup();
NxDriver::`scalar deleting destructor'();
NxExecutionContext::Initialize();
NxExecutionContext::IsTerminated();
NxExecutionContext::NxExecutionContext();
NxExecutionContext::SetDebugNameHint();
NxExecutionContext::Start();
NxExecutionContext::Terminate();
NxExecutionContext::UpdateCounters();
NxGetPacketLayout();
NxNblDatapath::IndicateReceiveNetBufferLists();
NxNblDatapath::ReturnNetBufferLists();
NxNblDatapath::SendNetBufferLists();
NxNblDatapath::SendNetBufferListsComplete();
NxNblDatapath::SetRxHandler();
NxNblDatapath::SetTxHandler();
NxNblQueue::NxNblQueue();
NxNblRx::ReturnNetBufferLists();
NxNblTranslator::CompletePackets();
NxNblTranslator::ShouldBounceFragment();
NxNblTranslator::TranslateMdlChainToDmaMappedFragmentRange();
NxNblTranslator::TranslateMdlChainToDmaMappedFragmentRangeBypassHal();
NxNblTranslator::TranslateMdlChainToDmaMappedFragmentRangeUseHal();
NxNblTranslator::TranslateMdlChainToFragmentRangeKvmOnly();
NxNblTranslator::TranslateNbls();
NxNblTranslator::TranslateNetBufferToNetPacket();
NxNblTranslator::TranslateScatterGatherListToFragmentRange();
NxNonPagePoolAllocator::AllocateMemoryChunk();
NxOffload<_NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES>::HasHardwareSupport();
NxOffload<_NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES>::`scalar deleting destructor'();
NxOffload<_NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES>::HasHardwareSupport();
NxOffload<_NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES>::`scalar deleting destructor'();
NxOffloadFacade::GetNetAdapter();
NxOffloadFacade::QueryStandardizedKeywordSetting();
NxOffloadFacade::RegisterPacketExtension();
NxOffloadManager::FindNxOffload();
NxOffloadManager::Initialize();
NxOffloadManager::IsKeywordSettingDisabled();
NxOffloadManager::RegisterPacketExtensions();
NxPacketExtensionPrivate::Initialize();
NxPoolMemoryChunk::GetLength();
NxPoolMemoryChunk::GetLogicalAddress();
NxPoolMemoryChunk::GetVirtualAddress();
NxPoolMemoryChunk::`scalar deleting destructor'();
NxQueue::GetPacketExtensionOffset();
NxQueue::Initialize();
NxQueue::NetQueueInitAddPacketContextAttributes();
NxQueue::NetQueueInitAddPacketExtension();
NxQueue::PrepareAndStorePacketExtensions();
NxQueue::`scalar deleting destructor'();
NxQueue::~NxQueue();
NxReceiveScaling::Configure();
NxReceiveScaling::EvaluateEnable();
NxReceiveScaling::GetNumberOfQueues();
NxReceiveScaling::Initialize();
NxReceiveScaling::MapAffinitizedQueue();
NxReceiveScaling::SetEnabled();
NxReceiveScaling::SetIndirectionEntries();
NxReceiveScaling::SetParameters();
NxRequest::Complete();
NxRequest::_Create();
NxRequest::`scalar deleting destructor'();
NxRequestQueue::DispatchRequest();
NxRequestQueue::NxRequestQueue();
NxRequestQueue::QueueRequest();
NxRequestQueue::_Create();
NxRequestQueue::_FreeHandlers();
NxRequestQueue::`scalar deleting destructor'();
NxRingBuffer::Initialize();
NxRxQueue::`scalar deleting destructor'();
NxRxQueue::`vector deleting destructor'();
NxRxXlat::AttachEmptyDataBufferToNetPacket();
NxRxXlat::CounterReportDpcRoutine();
NxRxXlat::CreateVariousPools();
NxRxXlat::EcIndicateNblsToNdis();
NxRxXlat::EcReturnBuffers();
NxRxXlat::Initialize();
NxRxXlat::NxRxXlat();
NxRxXlat::ReInitializeMdlForDataBuffer();
NxRxXlat::ReceiveThread();
NxRxXlat::ReinitializePacket();
NxRxXlat::ReportCounters();
NxRxXlat::Start();
NxRxXlat::TransferDataBufferFromNetPacketToNbl();
NxRxXlat::`scalar deleting destructor'();
NxRxXlat::~NxRxXlat();
NxTaskOffload::Initialize();
NxTaskOffload::SendNdisTaskOffloadStatusIndication();
NxTaskOffload::SetActiveCapabilities();
NxTaskOffload::TranslateChecksumCapabilities();
NxTaskOffload::TranslateLsoCapabilities();
NxTranslationApp::CreateDefaultQueues();
NxTranslationApp::CreateReceiveScalingQueues();
NxTranslationApp::ReceiveScalingInitialize();
NxTranslationApp::StartDefaultQueues();
NxTranslationApp::StartReceiveScalingQueues();
NxTranslationApp::`scalar deleting destructor'();
NxTranslationAppFactory::CreateApp();
NxTranslationAppFactory::`scalar deleting destructor'();
NxTranslationAppFactory::~NxTranslationAppFactory();
NxTxQueue::`scalar deleting destructor'();
NxTxQueue::`vector deleting destructor'();
NxTxXlat::AbortNbls();
NxTxXlat::CounterReportDpcRoutine();
NxTxXlat::DequeueNetBufferListQueue();
NxTxXlat::DrainCompletions();
NxTxXlat::GetPacketExtensionOffsets();
NxTxXlat::Initialize();
NxTxXlat::NxTxXlat();
NxTxXlat::ReportCounters();
NxTxXlat::SendNetBufferLists();
NxTxXlat::Start();
NxTxXlat::TransmitThread();
NxTxXlat::`scalar deleting destructor'();
NxTxXlat::~NxTxXlat();
NxWake::AddProtocolOffload();
NxWake::AddWakePattern();
NxWake::CreateWakePatternEntry();
NxWake::RemoveWakePattern();
NxWake::UpdatePatternEntryEnabledField();
NxWake::_Create();
NxWake::_EvtCleanupCallbackWrapper();
NxWake::_EvtDestroyCallbackWrapper();
NxWake::`scalar deleting destructor'();
NxWdfCollectionAddMultiSz();
ParseEthernetHeader();
ParseIPv6Header();
QUEUE_CREATION_CONTEXT::~QUEUE_CREATION_CONTEXT();
RecvScaleCapabilitiesInit();
Rtl::KArray<AdapterExtensionInit,1>::grow();
Rtl::KArray<NET_PACKET_EXTENSION_PRIVATE * __ptr64,1>::reserve();
Rtl::KArray<NET_PACKET_EXTENSION_PRIVATE,1>::grow();
Rtl::KArray<NET_PACKET_EXTENSION_PRIVATE,1>::insertSorted();
Rtl::KArray<NxAdapterExtension,1>::grow();
Rtl::KArray<NxBufferPool::NxBufferDescriptor,1>::reserve();
Rtl::KArray<NxBufferPool::NxChunkBaseAddress,1>::reserve();
Rtl::KArray<NxPacketExtensionPrivate,1>::reserve();
Rtl::KArray<NxReceiveScaling::AffinitizedQueue,512>::reserve();
Rtl::KArray<_NET_BUFFER_LIST * __ptr64,512>::reserve();
Rtl::KArray<_NET_CLIENT_MEMORY_CONSTRAINTS,1>::grow();
Rtl::KArray<_NET_CLIENT_PACKET_EXTENSION,1>::grow();
Rtl::KArray<_NET_PACKET_CONTEXT_ATTRIBUTES,1>::grow();
Rtl::KArray<_NET_PACKET_CONTEXT_TOKEN_INTERNAL,512>::reserve();
Rtl::KArray<unsigned __int64,1>::reserve();
Rtl::KArray<unsigned __int64,512>::reserve();
Rtl::KArray<wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void * __ptr64,void (__cdecl*)(void * __ptr64),&WdfObjectDelete,wistd::integral_constant<unsigned __int64,0>,void * __ptr64,0,std::nullptr_t> > >,1>::reserve();
Rtl::KArray<wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void * __ptr64,void (__cdecl*)(void * __ptr64),&WdfObjectDelete,wistd::integral_constant<unsigned __int64,0>,void * __ptr64,0,std::nullptr_t> > >,1>::~KArray<wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void * __ptr64,void (__cdecl*)(void * __ptr64),&WdfObjectDelete,wistd::integral_constant<unsigned __int64,0>,void * __ptr64,0,std::nullptr_t> > >,1>();
Rtl::KArray<wistd::unique_ptr<INxMemoryChunk,wistd::default_delete<INxMemoryChunk> >,1>::reserve();
Rtl::KArray<wistd::unique_ptr<NxOffloadBase,wistd::default_delete<NxOffloadBase> >,512>::reserve();
Rtl::KArray<wistd::unique_ptr<NxRxXlat,wistd::default_delete<NxRxXlat> >,1>::reserve();
Rtl::KArray<wistd::unique_ptr<NxRxXlat,wistd::default_delete<NxRxXlat> >,512>::reserve();
RtlMdl::CreateMdl();
RtlStringCchPrintfA();
RtlUnicodeStringInit();
RtlUnicodeStringPrintf();
SetCxPnpPowerCallbacks();
SmFx::StateMachineEngine::EnqueueEvent();
SmFx::StateMachineEngine::Initialize();
SmFx::StateMachineEngine::StateMachineEngineImpl::AddEventToEventQueue();
SmFx::StateMachineEngine::StateMachineEngineImpl::Destroy();
SmFx::StateMachineEngine::StateMachineEngineImpl::EnqueueEventWithDisposition();
SmFx::StateMachineEngine::StateMachineEngineImpl::ExecuteCurrentState();
SmFx::StateMachineEngine::StateMachineEngineImpl::ExecuteEventAction();
SmFx::StateMachineEngine::StateMachineEngineImpl::ExitCurrentState();
SmFx::StateMachineEngine::StateMachineEngineImpl::FindActionForEvent();
SmFx::StateMachineEngine::StateMachineEngineImpl::Initialize();
SmFx::StateMachineEngine::StateMachineEngineImpl::InitiateFirstRun();
SmFx::StateMachineEngine::StateMachineEngineImpl::LogTransition();
SmFx::StateMachineEngine::StateMachineEngineImpl::PopToStackDepth();
SmFx::StateMachineEngine::StateMachineEngineImpl::ProcessEventQueue();
SmFx::StateMachineEngine::StateMachineEngineImpl::ReportException();
SmFx::StateMachineEngine::StateMachineEngineImpl::ReportExceptionWithLockHeld();
SmFx::StateMachineEngine::StateMachineEngineImpl::UpdateEngineState();
SmFx::StateMachineEngine::StateMachineEngineImpl::`scalar deleting destructor'();
TraceLoggingRegister();
Verifier_ReportViolation();
Verifier_VerifyIrqlLessThanOrEqualDispatch();
Verifier_VerifyIrqlPassive();
Verifier_VerifyNetPacketExtension();
Verifier_VerifyNetPacketExtensionName();
Verifier_VerifyNetPacketExtensionQuery();
Verifier_VerifyNetPowerSettingsAccessible();
Verifier_VerifyPrivateGlobals();
Verifier_VerifyQueueInitContext();
WPP_RECORDER_SF_();
WPP_RECORDER_SF_D();
WPP_RECORDER_SF_DD();
WPP_RECORDER_SF_Dd();
WPP_RECORDER_SF_Dqq();
WPP_RECORDER_SF_Dss();
WPP_RECORDER_SF_L();
WPP_RECORDER_SF_Pd();
WPP_RECORDER_SF_Sqd();
WPP_RECORDER_SF_Sqqd();
WPP_RECORDER_SF_Z();
WPP_RECORDER_SF_ZZ();
WPP_RECORDER_SF_Zd();
WPP_RECORDER_SF_Zdd();
WPP_RECORDER_SF_d();
WPP_RECORDER_SF_dd();
WPP_RECORDER_SF_dq();
WPP_RECORDER_SF_ld();
WPP_RECORDER_SF_q();
WPP_RECORDER_SF_qL();
WPP_RECORDER_SF_qd();
WPP_RECORDER_SF_qlL();
WPP_RECORDER_SF_qq();
WPP_RECORDER_SF_qqS();
WPP_RECORDER_SF_ss();
WdfCxDeviceInitAssignPreprocessorRoutines();
WdmIrpCompleteFromNdis();
WdmIrpCompleteSetPower();
WppClassicProviderCallback();
WppCleanupKm();
WppInitKm();
WppLoadTracingSupport();
WppTraceCallback();
_FunctionLevelResetCompletion();
_TlgDefineProvider_annotation__Tlgg_hNetAdapterCxEtwProviderProv();
_TlgDefineProvider_annotation__Tlgg_hNetAdapterCxXlatProviderProv();
_TlgEnableCallback();
_TlgWrite();
__GSHandlerCheck();
__GSHandlerCheckCommon();
__report_gsfailure();
__security_check_cookie();
__security_init_cookie();
_guard_check_icall_nop();
_guard_dispatch_icall_nop();
`anonymous namespace'::LoadValueFromTestHookIfPresent();
imp_NetAdapterCreate();
imp_NetAdapterDeviceInitConfig();
imp_NetAdapterDispatchPreprocessedNetRequest();
imp_NetAdapterDriverWdmGetHandle();
imp_NetAdapterExtensionInitAllocate();
imp_NetAdapterExtensionInitSetNetRequestPreprocessCallback();
imp_NetAdapterGetLinkLayerMtuSize();
imp_NetAdapterGetNetLuid();
imp_NetAdapterGetParent();
imp_NetAdapterGetPowerSettings();
imp_NetAdapterInitAllocate();
imp_NetAdapterInitFree();
imp_NetAdapterInitGetCreatedAdapter();
imp_NetAdapterInitSetDatapathCallbacks();
imp_NetAdapterInitSetNetPowerSettingsAttributes();
imp_NetAdapterInitSetNetRequestAttributes();
imp_NetAdapterOffloadSetChecksumCapabilities();
imp_NetAdapterOffloadSetLsoCapabilities();
imp_NetAdapterOpenConfiguration();
imp_NetAdapterQueryRegisteredPacketExtension();
imp_NetAdapterRegisterPacketExtension();
imp_NetAdapterSetCurrentLinkLayerAddress();
imp_NetAdapterSetCurrentLinkState();
imp_NetAdapterSetDataPathCapabilities();
imp_NetAdapterSetLinkLayerCapabilities();
imp_NetAdapterSetLinkLayerMtuSize();
imp_NetAdapterSetPermanentLinkLayerAddress();
imp_NetAdapterSetPowerCapabilities();
imp_NetAdapterSetReceiveScalingCapabilities();
imp_NetAdapterStart();
imp_NetAdapterStop();
imp_NetAdapterWdmGetNdisHandle();
imp_NetConfigurationAssignBinary();
imp_NetConfigurationAssignMultiString();
imp_NetConfigurationAssignUlong();
imp_NetConfigurationAssignUnicodeString();
imp_NetConfigurationClose();
imp_NetConfigurationOpenSubConfiguration();
imp_NetConfigurationQueryBinary();
imp_NetConfigurationQueryLinkLayerAddress();
imp_NetConfigurationQueryMultiString();
imp_NetConfigurationQueryString();
imp_NetConfigurationQueryUlong();
imp_NetDefaultAdapterInitAllocate();
imp_NetDeviceOpenConfiguration();
imp_NetDeviceSetResetCallback();
imp_NetPacketGetContextFromToken();
imp_NetPacketGetTypedContext();
imp_NetPowerSettingsGetEnabledMediaSpecificWakeUpEvents();
imp_NetPowerSettingsGetEnabledProtocolOffloadFlags();
imp_NetPowerSettingsGetEnabledWakePatternFlags();
imp_NetPowerSettingsGetEnabledWakeUpFlags();
imp_NetPowerSettingsGetProtocolOffload();
imp_NetPowerSettingsGetProtocolOffloadCount();
imp_NetPowerSettingsGetProtocolOffloadCountForType();
imp_NetPowerSettingsGetWakePattern();
imp_NetPowerSettingsGetWakePatternCount();
imp_NetPowerSettingsGetWakePatternCountForType();
imp_NetPowerSettingsIsProtocolOffloadEnabled();
imp_NetPowerSettingsIsWakePatternEnabled();
imp_NetRequestCompleteWithoutInformation();
imp_NetRequestGetAdapter();
imp_NetRequestGetId();
imp_NetRequestGetPortNumber();
imp_NetRequestGetSwitchId();
imp_NetRequestGetType();
imp_NetRequestGetVPortId();
imp_NetRequestMethodComplete();
imp_NetRequestQueryDataComplete();
imp_NetRequestQueueCreate();
imp_NetRequestQueueGetAdapter();
imp_NetRequestRetrieveInputOutputBuffer();
imp_NetRequestSetBytesNeeded();
imp_NetRequestSetDataComplete();
imp_NetRequestWdmGetNdisOidRequest();
imp_NetRxQueueCreate();
imp_NetRxQueueGetDatapathDescriptor();
imp_NetRxQueueGetPacketContextToken();
imp_NetRxQueueGetPacketExtensionOffset();
imp_NetRxQueueInitAddPacketContextAttributes();
imp_NetRxQueueInitAddPacketExtension();
imp_NetRxQueueInitGetQueueId();
imp_NetRxQueueNotifyMoreReceivedPacketsAvailable();
imp_NetTxQueueCreate();
imp_NetTxQueueGetDatapathDescriptor();
imp_NetTxQueueGetPacketContextToken();
imp_NetTxQueueGetPacketExtensionOffset();
imp_NetTxQueueInitAddPacketContextAttributes();
imp_NetTxQueueInitAddPacketExtension();
imp_NetTxQueueInitGetQueueId();
imp_NetTxQueueNotifyMoreCompletedPacketsAvailable();
memcpy();
memset();
operator delete();
operator new();
swprintf_s<257>();
wcscmp();
wil::make_unique_nothrow<AdapterInit>();
wistd::unique_ptr<NxDmaAdapter,wistd::default_delete<NxDmaAdapter> >::~unique_ptr<NxDmaAdapter,wistd::default_delete<NxDmaAdapter> >();
wistd::unique_ptr<NxOffloadManager,wistd::default_delete<NxOffloadManager> >::_Delete();
wistd::unique_ptr<NxReceiveScaling,wistd::default_delete<NxReceiveScaling> >::operator=();
wistd::unique_ptr<NxReceiveScaling,wistd::default_delete<NxReceiveScaling> >::~unique_ptr<NxReceiveScaling,wistd::default_delete<NxReceiveScaling> >();
